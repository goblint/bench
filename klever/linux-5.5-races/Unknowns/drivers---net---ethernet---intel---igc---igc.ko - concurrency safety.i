/* Generated by Frama-C */
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler_types.h"
typedef signed char __s8;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef short __s16;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef int __s32;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef long long __s64;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u8 u8;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s16 s16;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u16 u16;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s32 s32;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u32 u32;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s64 s64;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u64 u64;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/uapi/asm/posix_types_64.h"
typedef long __kernel_long_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned long __kernel_ulong_t;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_pid_t;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_uid32_t;
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_gid32_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_ulong_t __kernel_size_t;
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_ssize_t;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_loff_t;
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_time64_t;
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_clock_t;
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_timer_t;
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_clockid_t;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u16 __be16;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __be32;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __wsum;
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef unsigned int __poll_t;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef u32 __kernel_dev_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned short umode_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef _Bool bool;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_size_t size_t;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef s32 int32_t;
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u32 uint32_t;
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 sector_t;
#line 131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 blkcnt_t;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 dma_addr_t;
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int gfp_t;
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int fmode_t;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 phys_addr_t;
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef phys_addr_t resource_size_t;
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int counter ;
};
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   s64 counter ;
};
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 185 
struct hlist_node;
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct callback_head {
   struct callback_head *next ;
   void (*func)(struct callback_head *) ;
} __attribute__((__aligned__(8)));
#line 14  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_nvm.i.aux"
struct task_struct;
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/init.h"
struct file_system_type;
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct ctl_table;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry;
#line 87 
struct static_key_mod;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
union __anonunion_8 {
   unsigned long type ;
   struct jump_entry *entries ;
   struct static_key_mod *next ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key {
   atomic_t enabled ;
   union __anonunion_8 __anonCompField_static_key_4 ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry {
   s32 code ;
   s32 target ;
   long key ;
};
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key_true {
   struct static_key key ;
};
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key_false {
   struct static_key key ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
union __anonunion_key_9 {
   struct static_key_true dd_key_true ;
   struct static_key_false dd_key_false ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
struct _ddebug {
   char *modname ;
   char *function ;
   char *filename ;
   char *format ;
   unsigned int lineno : 18 ;
   unsigned int flags : 8 ;
   union __anonunion_key_9 key ;
} __attribute__((__aligned__(8)));
#line 59 
struct device;
#line 65 
struct net_device;
#line 476  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct file_operations;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/div64.h"
struct completion;
#line 88 
struct pt_regs;
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/math64.h"
typedef __s64 time64_t;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/time_types.h"
struct __kernel_timespec {
   __kernel_time64_t tv_sec ;
   long long tv_nsec ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time64.h"
struct timespec64 {
   time64_t tv_sec ;
   long tv_nsec ;
};
#line 165 
struct old_timespec32;
#line 167 
enum timespec_type {
    TT_NONE = 0,
    TT_NATIVE = 1,
    TT_COMPAT = 2
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_futex_27 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_29 {
   struct __kernel_timespec *rmtp ;
   struct old_timespec32 *compat_rmtp ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_nanosleep_28 {
   clockid_t clockid ;
   enum timespec_type type ;
   union __anonunion_29 __anonCompField___anonstruct_nanosleep_28_5 ;
   u64 expires ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_poll_30 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_26 {
   struct __anonstruct_futex_27 futex ;
   struct __anonstruct_nanosleep_28 nanosleep ;
   struct __anonstruct_poll_30 poll ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct restart_block {
   long (*fn)(struct restart_block *) ;
   union __anonunion_26 __anonCompField_restart_block_6 ;
};
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
struct page;
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/getorder.h"
struct mm_struct;
#line 49 
struct io_bitmap;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/ptrace.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
struct desc_struct {
   u16 limit0 ;
   u16 base0 ;
   u16 base1 : 8 ;
   u16 type : 4 ;
   u16 s : 1 ;
   u16 dpl : 2 ;
   u16 p : 1 ;
   u16 limit1 : 4 ;
   u16 avl : 1 ;
   u16 l : 1 ;
   u16 d : 1 ;
   u16 g : 1 ;
   u16 base2 : 8 ;
} __attribute__((__packed__));
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
typedef unsigned long pteval_t;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pmdval_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pudval_t;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
struct __anonstruct_pte_t_53 {
   pteval_t pte ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef struct __anonstruct_pte_t_53 pte_t;
#line 265  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 267  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_54 {
   pgdval_t pgd ;
};
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_54 pgd_t;
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pud_t_56 {
   pudval_t pud ;
};
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pud_t_56 pud_t;
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pmd_t_57 {
   pmdval_t pmd ;
};
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pmd_t_57 pmd_t;
#line 505  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct page *pgtable_t;
#line 519 
struct file;
#line 530 
struct seq_file;
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/nospec-branch.h"
struct thread_struct;
#line 362 
struct cpumask;
#line 365 
struct vm_area_struct;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_59 {
   u8 locked ;
   u8 pending ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_60 {
   u16 locked_pending ;
   u16 tail ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
union __anonunion_58 {
   atomic_t val ;
   struct __anonstruct_59 __anonCompField___anonunion_58_7 ;
   struct __anonstruct_60 __anonCompField___anonunion_58_8 ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct qspinlock {
   union __anonunion_58 __anonCompField_qspinlock_9 ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
typedef struct qspinlock arch_spinlock_t;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct __anonstruct_62 {
   u8 wlocked ;
   u8 __lstate[3U] ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
union __anonunion_61 {
   atomic_t cnts ;
   struct __anonstruct_62 __anonCompField___anonunion_61_10 ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct qrwlock {
   union __anonunion_61 __anonCompField_qrwlock_11 ;
   arch_spinlock_t wait_lock ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
typedef struct qrwlock arch_rwlock_t;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/math_emu.h"
struct math_emu_info {
   long ___orig_eip ;
   struct pt_regs *regs ;
};
#line 2288  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/atomic-fallback.h"
typedef atomic64_t atomic_long_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
struct cpumask {
   unsigned long bits[128U] ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_90 {
   u64 rip ;
   u64 rdp ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_91 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_89 {
   struct __anonstruct_90 __anonCompField___anonunion_89_17 ;
   struct __anonstruct_91 __anonCompField___anonunion_89_18 ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_92 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fxregs_state {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_89 __anonCompField_fxregs_state_19 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_92 __anonCompField_fxregs_state_20 ;
} __attribute__((__aligned__(16)));
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct swregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xstate_header {
   u64 xfeatures ;
   u64 xcomp_bv ;
   u64 reserved[6U] ;
} __attribute__((__packed__));
#line 253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xregs_state {
   struct fxregs_state i387 ;
   struct xstate_header header ;
   u8 extended_state_area[0U] ;
} __attribute__((__packed__, __aligned__(64)));
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union fpregs_state {
   struct fregs_state fsave ;
   struct fxregs_state fxsave ;
   struct swregs_state soft ;
   struct xregs_state xsave ;
   u8 __padding[4096U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fpu {
   unsigned int last_cpu ;
   unsigned long avx512_timestamp ;
   union fpregs_state state ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct seq_operations;
#line 478 
struct perf_event;
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct __anonstruct_mm_segment_t_95 {
   unsigned long seg ;
};
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_95 mm_segment_t;
#line 485  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fsbase ;
   unsigned long gsbase ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_nr ;
   unsigned long error_code ;
   struct io_bitmap *io_bitmap ;
   unsigned long iopl_emul ;
   mm_segment_t addr_limit ;
   unsigned int sig_on_uaccess_err : 1 ;
   unsigned int uaccess_err : 1 ;
   struct fpu fpu ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/thread_info.h"
struct thread_info {
   unsigned long flags ;
   u32 status ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
struct lockdep_map;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_subclass_key {
   char __one_byte ;
} __attribute__((__packed__));
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
union __anonunion_96 {
   struct hlist_node hash_entry ;
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class_key {
   union __anonunion_96 __anonCompField_lock_class_key_23 ;
};
#line 68 
struct lock_trace;
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class {
   struct hlist_node hash_entry ;
   struct list_head lock_entry ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct lock_trace *usage_traces[9U] ;
   int name_version ;
   char *name ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char *name ;
   int cpu ;
   unsigned long ip ;
};
#line 226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned int class_idx : 13 ;
   unsigned int irq_context : 2 ;
   unsigned int trylock : 1 ;
   unsigned int read : 2 ;
   unsigned int check : 1 ;
   unsigned int hardirqs_off : 1 ;
   unsigned int references : 12 ;
   unsigned int pin_count ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_98 {
   u8 __padding[24U] ;
   struct lockdep_map dep_map ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
union __anonunion_97 {
   struct raw_spinlock rlock ;
   struct __anonstruct_98 __anonCompField___anonunion_97_24 ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_97 __anonCompField_spinlock_25 ;
};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_rwlock_t_99 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct __anonstruct_rwlock_t_99 rwlock_t;
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
struct mutex;
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
struct kmem_cache;
#line 48  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
struct seqcount {
   unsigned int sequence ;
   struct lockdep_map dep_map ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct seqcount seqcount_t;
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct __anonstruct_seqlock_t_112 {
   struct seqcount seqcount ;
   spinlock_t lock ;
};
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct __anonstruct_seqlock_t_112 seqlock_t;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timex.h"
typedef s32 old_time32_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time32.h"
struct old_timespec32 {
   old_time32_t tv_sec ;
   s32 tv_nsec ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
struct wait_queue_head {
   spinlock_t lock ;
   struct list_head head ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
typedef struct wait_queue_head wait_queue_head_t;
#line 1133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
struct __anonstruct_nodemask_t_113 {
   unsigned long bits[16U] ;
};
#line 1133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
typedef struct __anonstruct_nodemask_t_113 nodemask_t;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/tlbbatch.h"
struct arch_tlbflush_unmap_batch {
   struct cpumask cpumask ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct vmacache {
   u64 seqnum ;
   struct vm_area_struct *vmas[4U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct task_rss_stat {
   int events ;
   int count[4U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct mm_rss_stat {
   atomic_long_t count[4U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct page_frag {
   struct page *page ;
   __u32 offset ;
   __u32 size ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct tlbflush_unmap_batch {
   struct arch_tlbflush_unmap_batch arch ;
   bool flush_required ;
   bool writable ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_node {
   unsigned long __rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
} __attribute__((__aligned__(8)));
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root_cached {
   struct rb_root rb_root ;
   struct rb_node *rb_leftmost ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/osq_lock.h"
struct optimistic_spin_queue {
   atomic_t tail ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rwsem.h"
struct rw_semaphore {
   atomic_long_t count ;
   atomic_long_t owner ;
   struct optimistic_spin_queue osq ;
   raw_spinlock_t wait_lock ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/completion.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 120 
struct inode;
#line 121 
struct notifier_block;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct ww_acquire_ctx;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex {
   atomic_long_t owner ;
   spinlock_t wait_lock ;
   struct optimistic_spin_queue osq ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   struct ww_acquire_ctx *ww_ctx ;
   void *magic ;
};
#line 461  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
typedef s64 ktime_t;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
struct timer_list {
   struct hlist_node entry ;
   unsigned long expires ;
   void (*function)(struct timer_list *) ;
   u32 flags ;
   struct lockdep_map lockdep_map ;
};
#line 196 
struct hrtimer;
#line 197 
enum hrtimer_restart;
#line 221 
struct workqueue_struct;
#line 222 
struct work_struct;
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct *) ;
   struct lockdep_map lockdep_map ;
};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
   struct workqueue_struct *wq ;
   int cpu ;
};
#line 124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct rcu_work {
   struct work_struct work ;
   struct callback_head rcu ;
   struct workqueue_struct *wq ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block *, unsigned long , void *) ;
   struct notifier_block *next ;
   int priority ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct raw_notifier_head {
   struct notifier_block *head ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/uprobes.h"
struct arch_uprobe_task {
   unsigned long saved_scratch_register ;
   unsigned int saved_trap_nr ;
   unsigned int saved_tf ;
};
#line 57 
enum uprobe_task_state {
    UTASK_RUNNING = 0,
    UTASK_SSTEP = 1,
    UTASK_SSTEP_ACK = 2,
    UTASK_SSTEP_TRAPPED = 3
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_126 {
   struct arch_uprobe_task autask ;
   unsigned long vaddr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_127 {
   struct callback_head dup_xol_work ;
   unsigned long dup_xol_addr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
union __anonunion_125 {
   struct __anonstruct_126 __anonCompField___anonunion_125_28 ;
   struct __anonstruct_127 __anonCompField___anonunion_125_29 ;
};
#line 61 
struct uprobe;
#line 61 
struct return_instance;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobe_task {
   enum uprobe_task_state state ;
   union __anonunion_125 __anonCompField_uprobe_task_30 ;
   struct uprobe *active_uprobe ;
   unsigned long xol_vaddr ;
   struct return_instance *return_instances ;
   unsigned int depth ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct return_instance {
   struct uprobe *uprobe ;
   unsigned long func ;
   unsigned long stack ;
   unsigned long orig_ret_vaddr ;
   bool chained ;
   struct return_instance *next ;
};
#line 98 
struct xol_area;
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobes_state {
   struct xol_area *xol_area ;
};
#line 140 
struct ldt_struct;
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_mm_context_t_128 {
   u64 ctx_id ;
   atomic64_t tlb_gen ;
   struct rw_semaphore ldt_usr_sem ;
   struct ldt_struct *ldt ;
   unsigned short ia32_compat ;
   struct mutex lock ;
   void *vdso ;
   struct vdso_image *vdso_image ;
   atomic_t perf_rdpmc_allowed ;
   u16 pkey_allocation_map ;
   s16 execute_only_pkey ;
   void *bd_addr ;
};
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
typedef struct __anonstruct_mm_context_t_128 mm_context_t;
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct address_space;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_130 {
   struct list_head lru ;
   struct address_space *mapping ;
   unsigned long index ;
   unsigned long private ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_131 {
   dma_addr_t dma_addr ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_134 {
   struct page *next ;
   int pages ;
   int pobjects ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_133 {
   struct list_head slab_list ;
   struct __anonstruct_134 __anonCompField___anonunion_133_33 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_136 {
   unsigned int inuse : 16 ;
   unsigned int objects : 15 ;
   unsigned int frozen : 1 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_135 {
   void *s_mem ;
   unsigned long counters ;
   struct __anonstruct_136 __anonCompField___anonunion_135_35 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_132 {
   union __anonunion_133 __anonCompField___anonstruct_132_34 ;
   struct kmem_cache *slab_cache ;
   void *freelist ;
   union __anonunion_135 __anonCompField___anonstruct_132_36 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_137 {
   unsigned long compound_head ;
   unsigned char compound_dtor ;
   unsigned char compound_order ;
   atomic_t compound_mapcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_138 {
   unsigned long _compound_pad_1 ;
   unsigned long _compound_pad_2 ;
   struct list_head deferred_list ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_140 {
   struct mm_struct *pt_mm ;
   atomic_t pt_frag_refcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_139 {
   unsigned long _pt_pad_1 ;
   pgtable_t pmd_huge_pte ;
   unsigned long _pt_pad_2 ;
   union __anonunion_140 __anonCompField___anonstruct_139_40 ;
   spinlock_t *ptl ;
};
#line 68 
struct dev_pagemap;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_141 {
   struct dev_pagemap *pgmap ;
   void *zone_device_data ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_129 {
   struct __anonstruct_130 __anonCompField___anonunion_129_31 ;
   struct __anonstruct_131 __anonCompField___anonunion_129_32 ;
   struct __anonstruct_132 __anonCompField___anonunion_129_37 ;
   struct __anonstruct_137 __anonCompField___anonunion_129_38 ;
   struct __anonstruct_138 __anonCompField___anonunion_129_39 ;
   struct __anonstruct_139 __anonCompField___anonunion_129_41 ;
   struct __anonstruct_141 __anonCompField___anonunion_129_42 ;
   struct callback_head callback_head ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_142 {
   atomic_t _mapcount ;
   unsigned int page_type ;
   unsigned int active ;
   int units ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct page {
   unsigned long flags ;
   union __anonunion_129 __anonCompField_page_43 ;
   union __anonunion_142 __anonCompField_page_44 ;
   atomic_t _refcount ;
   struct mem_cgroup *mem_cgroup ;
} __attribute__((__aligned__(16)));
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct userfaultfd_ctx;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_userfaultfd_ctx {
   struct userfaultfd_ctx *ctx ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_shared_143 {
   struct rb_node rb ;
   unsigned long rb_subtree_last ;
};
#line 292 
struct anon_vma;
#line 292 
struct vm_operations_struct;
#line 292 
struct mempolicy;
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_area_struct {
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   struct rb_node vm_rb ;
   unsigned long rb_subtree_gap ;
   struct mm_struct *vm_mm ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct __anonstruct_shared_143 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   atomic_long_t swap_readahead_info ;
   struct mempolicy *vm_policy ;
   struct vm_userfaultfd_ctx vm_userfaultfd_ctx ;
} __attribute__((__designated_init__));
#line 358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 368 
struct kioctx_table;
#line 370 
struct linux_binfmt;
#line 370 
struct user_namespace;
#line 370 
struct mmu_notifier_mm;
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_144 {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   u64 vmacache_seqnum ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   unsigned long mmap_base ;
   unsigned long mmap_legacy_base ;
   unsigned long mmap_compat_base ;
   unsigned long mmap_compat_legacy_base ;
   unsigned long task_size ;
   unsigned long highest_vm_end ;
   pgd_t *pgd ;
   atomic_t membarrier_state ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   atomic_long_t pgtables_bytes ;
   int map_count ;
   spinlock_t page_table_lock ;
   struct rw_semaphore mmap_sem ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   atomic64_t pinned_vm ;
   unsigned long data_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long def_flags ;
   spinlock_t arg_lock ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[46U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   mm_context_t context ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct kioctx_table *ioctx_table ;
   struct task_struct *owner ;
   struct user_namespace *user_ns ;
   struct file *exe_file ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
   unsigned long numa_next_scan ;
   unsigned long numa_scan_offset ;
   int numa_scan_seq ;
   atomic_t tlb_flush_pending ;
   bool tlb_flush_batched ;
   struct uprobes_state uprobes_state ;
   atomic_long_t hugetlb_usage ;
   struct work_struct async_put_work ;
} __attribute__((__designated_init__));
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct mm_struct {
   struct __anonstruct_144 __anonCompField_mm_struct_45 ;
   unsigned long cpu_bitmap[] ;
};
#line 642 
struct vm_fault;
#line 643  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
typedef unsigned int vm_fault_t;
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
typedef unsigned int isolate_mode_t;
#line 824 
struct resource;
#line 825 
struct vmem_altmap;
#line 440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/io.h"
struct fwnode_operations;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_handle {
   struct fwnode_handle *secondary ;
   struct fwnode_operations *ops ;
   struct device *dev ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_endpoint {
   unsigned int port ;
   unsigned int id ;
   struct fwnode_handle *local_fwnode ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_reference_args {
   struct fwnode_handle *fwnode ;
   unsigned int nargs ;
   u64 args[8U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_operations {
   struct fwnode_handle *(*get)(struct fwnode_handle *) ;
   void (*put)(struct fwnode_handle *) ;
   bool (*device_is_available)(struct fwnode_handle *) ;
   void *(*device_get_match_data)(struct fwnode_handle *, struct device *) ;
   bool (*property_present)(struct fwnode_handle *, char *) ;
   int (*property_read_int_array)(struct fwnode_handle *, char *, unsigned int , void *, size_t ) ;
   int (*property_read_string_array)(struct fwnode_handle *, char *, char **, size_t ) ;
   char *(*get_name)(struct fwnode_handle *) ;
   char *(*get_name_prefix)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_parent)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_next_child_node)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*get_named_child_node)(struct fwnode_handle *, char *) ;
   int (*get_reference_args)(struct fwnode_handle *, char *, char *, unsigned int , unsigned int , struct fwnode_reference_args *) ;
   struct fwnode_handle *(*graph_get_next_endpoint)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_remote_endpoint)(struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_port_parent)(struct fwnode_handle *) ;
   int (*graph_parse_endpoint)(struct fwnode_handle *, struct fwnode_endpoint *) ;
   int (*add_links)(struct fwnode_handle *, struct device *) ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node {
   struct llist_node *next ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
struct vm_struct {
   struct vm_struct *next ;
   void *addr ;
   unsigned long size ;
   unsigned long flags ;
   struct page **pages ;
   unsigned int nr_pages ;
   phys_addr_t phys_addr ;
   void *caller ;
};
#line 623  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
struct percpu_ref;
#line 624  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
typedef void percpu_ref_func_t(struct percpu_ref *);
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-refcount.h"
struct percpu_ref {
   atomic_long_t count ;
   unsigned long percpu_count_ptr ;
   percpu_ref_func_t *release ;
   percpu_ref_func_t *confirm_switch ;
   bool force_atomic : 1 ;
   bool allow_reinit : 1 ;
   struct callback_head rcu ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrink_control {
   gfp_t gfp_mask ;
   int nid ;
   unsigned long nr_to_scan ;
   unsigned long nr_scanned ;
   struct mem_cgroup *memcg ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrinker {
   unsigned long (*count_objects)(struct shrinker *, struct shrink_control *) ;
   unsigned long (*scan_objects)(struct shrinker *, struct shrink_control *) ;
   long batch ;
   int seeks ;
   unsigned int flags ;
   struct list_head list ;
   int id ;
   atomic_long_t *nr_deferred ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/resource.h"
struct rlimit {
   __kernel_ulong_t rlim_cur ;
   __kernel_ulong_t rlim_max ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ioport.h"
struct resource {
   resource_size_t start ;
   resource_size_t end ;
   char *name ;
   unsigned long flags ;
   unsigned long desc ;
   struct resource *parent ;
   struct resource *sibling ;
   struct resource *child ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct vmem_altmap {
   unsigned long base_pfn ;
   unsigned long end_pfn ;
   unsigned long reserve ;
   unsigned long free ;
   unsigned long align ;
   unsigned long alloc ;
};
#line 26 
enum memory_type {
    MEMORY_DEVICE_PRIVATE = 1,
    MEMORY_DEVICE_FS_DAX = 2,
    MEMORY_DEVICE_DEVDAX = 3,
    MEMORY_DEVICE_PCI_P2PDMA = 4
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap_ops {
   void (*page_free)(struct page *) ;
   void (*kill)(struct dev_pagemap *) ;
   void (*cleanup)(struct dev_pagemap *) ;
   vm_fault_t (*migrate_to_ram)(struct vm_fault *) ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap {
   struct vmem_altmap altmap ;
   struct resource res ;
   struct percpu_ref *ref ;
   struct percpu_ref internal_ref ;
   struct completion done ;
   enum memory_type type ;
   unsigned int flags ;
   struct dev_pagemap_ops *ops ;
};
#line 176 
struct file_ra_state;
#line 177 
struct user_struct;
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
struct refcount_struct {
   atomic_t refs ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
typedef struct refcount_struct refcount_t;
#line 305 
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_TGID = 1,
    PIDTYPE_PGID = 2,
    PIDTYPE_SID = 3,
    PIDTYPE_MAX = 4
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct pid_namespace;
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct pid {
   refcount_t count ;
   unsigned int level ;
   struct hlist_head tasks[4U] ;
   wait_queue_head_t wait_pidfd ;
   struct callback_head rcu ;
   struct upid numbers[1U] ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kuid_t_272 {
   uid_t val ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kuid_t_272 kuid_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kgid_t_273 {
   gid_t val ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kgid_t_273 kgid_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhash_head {
   struct rhash_head *next ;
};
#line 33 
struct rhashtable;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_compare_arg {
   struct rhashtable *ht ;
   void *key ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_params {
   u16 nelem_hint ;
   u16 key_len ;
   u16 key_offset ;
   u16 head_offset ;
   unsigned int max_size ;
   u16 min_size ;
   bool automatic_shrinking ;
   u32 (*hashfn)(void *, u32 , u32 ) ;
   u32 (*obj_hashfn)(void *, u32 , u32 ) ;
   int (*obj_cmpfn)(struct rhashtable_compare_arg *, void *) ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable {
   struct bucket_table *tbl ;
   unsigned int key_len ;
   unsigned int max_elems ;
   struct rhashtable_params p ;
   bool rhlist ;
   struct work_struct run_work ;
   struct mutex mutex ;
   spinlock_t lock ;
   atomic_t nelems ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sem.h"
struct sem_undo_list;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shm.h"
struct sysv_shm {
   struct list_head shm_clist ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/plist.h"
struct plist_node {
   int prio ;
   struct list_head prio_list ;
   struct list_head node_list ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_node {
   struct rb_node node ;
   ktime_t expires ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_head {
   struct rb_root_cached rb_root ;
};
#line 60 
struct hrtimer_clock_base;
#line 61 
struct hrtimer_cpu_base;
#line 80 
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
};
#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer {
   struct timerqueue_node node ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer *) ;
   struct hrtimer_clock_base *base ;
   u8 state ;
   u8 is_rel ;
   u8 is_soft ;
   u8 is_hard ;
};
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   unsigned int index ;
   clockid_t clockid ;
   seqcount_t seq ;
   struct hrtimer *running ;
   struct timerqueue_head active ;
   ktime_t (*get_time)(void) ;
   ktime_t offset ;
} __attribute__((__aligned__(64)));
#line 213  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   unsigned int cpu ;
   unsigned int active_bases ;
   unsigned int clock_was_set_seq ;
   unsigned int hres_active : 1 ;
   unsigned int in_hrtirq : 1 ;
   unsigned int hang_detected : 1 ;
   unsigned int softirq_activated : 1 ;
   unsigned int nr_events ;
   unsigned short nr_retries ;
   unsigned short nr_hangs ;
   unsigned int max_hang_time ;
   ktime_t expires_next ;
   struct hrtimer *next_timer ;
   ktime_t softirq_expires_next ;
   struct hrtimer *softirq_next_timer ;
   struct hrtimer_clock_base clock_base[8U] ;
} __attribute__((__aligned__(64)));
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/seccomp.h"
struct seccomp_filter;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seccomp.h"
struct seccomp {
   int mode ;
   struct seccomp_filter *filter ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/latencytop.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/types.h"
struct task_cputime {
   u64 stime ;
   u64 utime ;
   unsigned long long sum_exec_runtime ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_276 {
   unsigned long sig[1U] ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_276 sigset_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef void __signalfn_t(int );
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__kill_277 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__timer_278 {
   __kernel_timer_t _tid ;
   int _overrun ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__rt_279 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigchld_280 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_bnd_283 {
   char _dummy_bnd[8U] ;
   void *_lower ;
   void *_upper ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_pkey_284 {
   char _dummy_pkey[8U] ;
   __u32 _pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __anonunion_282 {
   short _addr_lsb ;
   struct __anonstruct__addr_bnd_283 _addr_bnd ;
   struct __anonstruct__addr_pkey_284 _addr_pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigfault_281 {
   void *_addr ;
   union __anonunion_282 __anonCompField___anonstruct__sigfault_281_47 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_285 {
   long _band ;
   int _fd ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigsys_286 {
   void *_call_addr ;
   int _syscall ;
   unsigned int _arch ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __sifields {
   struct __anonstruct__kill_277 _kill ;
   struct __anonstruct__timer_278 _timer ;
   struct __anonstruct__rt_279 _rt ;
   struct __anonstruct__sigchld_280 _sigchld ;
   struct __anonstruct__sigfault_281 _sigfault ;
   struct __anonstruct__sigpoll_285 _sigpoll ;
   struct __anonstruct__sigsys_286 _sigsys ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct __anonstruct_291 {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __sifields _sifields ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct kernel_siginfo {
   struct __anonstruct_291 __anonCompField_kernel_siginfo_50 ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
typedef struct kernel_siginfo kernel_siginfo_t;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/task_io_accounting.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimer_base {
   u64 nextevt ;
   struct timerqueue_head tqhead ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimers {
   struct posix_cputimer_base bases[3U] ;
   unsigned int timers_active ;
   unsigned int expiry_active ;
};
#line 193 
struct signal_struct;
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
union __anonunion_rseq_cs_296 {
   __u64 ptr64 ;
   __u64 ptr ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
struct rseq {
   __u32 cpu_id_start ;
   __u32 cpu_id ;
   union __anonunion_rseq_cs_296 rseq_cs ;
   __u32 flags ;
} __attribute__((__aligned__(32)));
#line 146 
struct audit_context;
#line 150 
struct capture_control;
#line 151 
struct cfs_rq;
#line 152 
struct fs_struct;
#line 153 
struct futex_pi_state;
#line 154 
struct io_context;
#line 155 
struct nameidata;
#line 156 
struct nsproxy;
#line 157 
struct perf_event_context;
#line 158 
struct pipe_inode_info;
#line 160 
struct reclaim_state;
#line 161 
struct robust_list_head;
#line 166 
struct sighand_struct;
#line 167 
struct task_delay_info;
#line 168 
struct task_group;
#line 242  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct prev_cputime {
   u64 utime ;
   u64 stime ;
   raw_spinlock_t lock ;
};
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   u32 inv_weight ;
};
#line 352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct util_est {
   unsigned int enqueued ;
   unsigned int ewma ;
} __attribute__((__aligned__(8)));
#line 401  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_avg {
   u64 last_update_time ;
   u64 load_sum ;
   u64 runnable_load_sum ;
   u32 util_sum ;
   u32 period_contrib ;
   unsigned long load_avg ;
   unsigned long runnable_load_avg ;
   unsigned long util_avg ;
   struct util_est util_est ;
} __attribute__((__aligned__(64)));
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};
#line 449  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   unsigned long runnable_weight ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   int depth ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
   struct sched_avg avg ;
};
#line 486 
struct rt_rq;
#line 486  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned long watchdog_stamp ;
   unsigned int time_slice ;
   unsigned short on_rq ;
   unsigned short on_list ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
} __attribute__((__designated_init__));
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_dl_entity {
   struct rb_node rb_node ;
   u64 dl_runtime ;
   u64 dl_deadline ;
   u64 dl_period ;
   u64 dl_bw ;
   u64 dl_density ;
   s64 runtime ;
   u64 deadline ;
   unsigned int flags ;
   unsigned int dl_throttled : 1 ;
   unsigned int dl_boosted : 1 ;
   unsigned int dl_yielded : 1 ;
   unsigned int dl_non_contending : 1 ;
   unsigned int dl_overrun : 1 ;
   struct hrtimer dl_timer ;
   struct hrtimer inactive_timer ;
};
#line 600  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct uclamp_se {
   unsigned int value : 11 ;
   unsigned int bucket_id : 3 ;
   unsigned int active : 1 ;
   unsigned int user_defined : 1 ;
};
#line 625  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct wake_q_node {
   struct wake_q_node *next ;
};
#line 629 
struct sched_class;
#line 629 
struct cred;
#line 629 
struct key;
#line 629 
struct files_struct;
#line 629 
struct rt_mutex_waiter;
#line 629 
struct css_set;
#line 629 
struct compat_robust_list_head;
#line 629 
struct numa_group;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
union __anonunion_298 {
   refcount_t rcu_users ;
   struct callback_head rcu ;
};
#line 629 
struct ftrace_ret_stack;
#line 629 
struct kcov;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct task_struct {
   struct thread_info thread_info ;
   long state ;
   void *stack ;
   refcount_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   struct llist_node wake_entry ;
   int on_cpu ;
   unsigned int cpu ;
   unsigned int wakee_flips ;
   unsigned long wakee_flip_decay_ts ;
   struct task_struct *last_wakee ;
   int recent_used_cpu ;
   int wake_cpu ;
   int on_rq ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct task_group *sched_task_group ;
   struct sched_dl_entity dl ;
   struct uclamp_se uclamp_req[2U] ;
   struct uclamp_se uclamp[2U] ;
   struct hlist_head preempt_notifiers ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   int nr_cpus_allowed ;
   cpumask_t *cpus_ptr ;
   cpumask_t cpus_mask ;
   unsigned long rcu_tasks_nvcsw ;
   u8 rcu_tasks_holdout ;
   u8 rcu_tasks_idx ;
   int rcu_tasks_idle_cpu ;
   struct list_head rcu_tasks_holdout_list ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct rb_node pushable_dl_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   struct vmacache vmacache ;
   struct task_rss_stat rss_stat ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned long jobctl ;
   unsigned int personality ;
   unsigned int sched_reset_on_fork : 1 ;
   unsigned int sched_contributes_to_load : 1 ;
   unsigned int sched_migrated : 1 ;
   unsigned int sched_remote_wakeup : 1 ;
   unsigned int sched_psi_wake_requeue : 1 ;
   unsigned int  ;
   unsigned int in_execve : 1 ;
   unsigned int in_iowait : 1 ;
   unsigned int restore_sigmask : 1 ;
   unsigned int in_user_fault : 1 ;
   unsigned int brk_randomized : 1 ;
   unsigned int no_cgroup_migration : 1 ;
   unsigned int frozen : 1 ;
   unsigned int use_memdelay : 1 ;
   unsigned long atomic_flags ;
   struct restart_block restart_block ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid *thread_pid ;
   struct hlist_node pid_links[4U] ;
   struct list_head thread_group ;
   struct list_head thread_node ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   u64 utime ;
   u64 stime ;
   u64 gtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   u64 start_time ;
   u64 start_boottime ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct posix_cputimers posix_cputimers ;
   struct cred *ptracer_cred ;
   struct cred *real_cred ;
   struct cred *cred ;
   struct key *cached_requested_key ;
   char comm[16U] ;
   struct nameidata *nameidata ;
   struct sysv_sem sysvsem ;
   struct sysv_shm sysvshm ;
   unsigned long last_switch_count ;
   unsigned long last_switch_time ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   unsigned int sas_ss_flags ;
   struct callback_head *task_works ;
   struct audit_context *audit_context ;
   kuid_t loginuid ;
   unsigned int sessionid ;
   struct seccomp seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   raw_spinlock_t pi_lock ;
   struct wake_q_node wake_q ;
   struct rb_root_cached pi_waiters ;
   struct task_struct *pi_top_task ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   int non_block_count ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   unsigned int in_ubsan ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct blk_plug *plug ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   struct capture_control *capture_control ;
   unsigned long ptrace_message ;
   kernel_siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   unsigned int psi_flags ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   u64 acct_timexpd ;
   nodemask_t mems_allowed ;
   seqcount_t mems_allowed_seq ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   u32 closid ;
   u32 rmid ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct mutex futex_exit_mutex ;
   unsigned int futex_state ;
   struct perf_event_context *perf_event_ctxp[2U] ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_prev ;
   short pref_node_fork ;
   int numa_scan_seq ;
   unsigned int numa_scan_period ;
   unsigned int numa_scan_period_max ;
   int numa_preferred_nid ;
   unsigned long numa_migrate_retry ;
   u64 node_stamp ;
   u64 last_task_numa_placement ;
   u64 last_sum_exec_runtime ;
   struct callback_head numa_work ;
   struct numa_group *numa_group ;
   unsigned long *numa_faults ;
   unsigned long total_numa_faults ;
   unsigned long numa_faults_locality[3U] ;
   unsigned long numa_pages_migrated ;
   struct rseq *rseq ;
   u32 rseq_sig ;
   unsigned long rseq_event_mask ;
   struct tlbflush_unmap_batch tlb_ubc ;
   union __anonunion_298 __anonCompField_task_struct_52 ;
   struct pipe_inode_info *splice_pipe ;
   struct page_frag task_frag ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   unsigned int fail_nth ;
   int nr_dirtied ;
   int nr_dirtied_pause ;
   unsigned long dirty_paused_when ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   u64 timer_slack_ns ;
   u64 default_timer_slack_ns ;
   unsigned int kasan_depth ;
   int curr_ret_stack ;
   int curr_ret_depth ;
   struct ftrace_ret_stack *ret_stack ;
   unsigned long long ftrace_timestamp ;
   atomic_t trace_overrun ;
   atomic_t tracing_graph_pause ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   unsigned int kcov_mode ;
   unsigned int kcov_size ;
   void *kcov_area ;
   struct kcov *kcov ;
   u64 kcov_handle ;
   int kcov_sequence ;
   struct mem_cgroup *memcg_in_oom ;
   gfp_t memcg_oom_gfp_mask ;
   int memcg_oom_order ;
   unsigned int memcg_nr_pages_over_high ;
   struct mem_cgroup *active_memcg ;
   struct request_queue *throttle_queue ;
   struct uprobe_task *utask ;
   unsigned int sequential_io ;
   unsigned int sequential_io_avg ;
   unsigned long task_state_change ;
   int pagefault_disabled ;
   struct task_struct *oom_reaper_list ;
   struct vm_struct *stack_vm_area ;
   refcount_t stack_refcount ;
   int patch_state ;
   void *security ;
   struct thread_struct thread ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/extable.h"
struct exception_table_entry {
   int insn ;
   int fixup ;
   int handler ;
};
#line 417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_fault {
   struct vm_area_struct *vma ;
   unsigned int flags ;
   gfp_t gfp_mask ;
   unsigned long pgoff ;
   unsigned long address ;
   pmd_t *pmd ;
   pud_t *pud ;
   pte_t orig_pte ;
   struct page *cow_page ;
   struct mem_cgroup *memcg ;
   struct page *page ;
   pte_t *pte ;
   spinlock_t *ptl ;
   pgtable_t prealloc_pte ;
};
#line 448 
enum page_entry_size {
    PE_SIZE_PTE = 0,
    PE_SIZE_PMD = 1,
    PE_SIZE_PUD = 2
};
#line 467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct *) ;
   void (*close)(struct vm_area_struct *) ;
   int (*split)(struct vm_area_struct *, unsigned long ) ;
   int (*mremap)(struct vm_area_struct *) ;
   vm_fault_t (*fault)(struct vm_fault *) ;
   vm_fault_t (*huge_fault)(struct vm_fault *, enum page_entry_size ) ;
   void (*map_pages)(struct vm_fault *, unsigned long , unsigned long ) ;
   unsigned long (*pagesize)(struct vm_area_struct *) ;
   vm_fault_t (*page_mkwrite)(struct vm_fault *) ;
   vm_fault_t (*pfn_mkwrite)(struct vm_fault *) ;
   int (*access)(struct vm_area_struct *, unsigned long , void *, int , int ) ;
   char *(*name)(struct vm_area_struct *) ;
   int (*set_policy)(struct vm_area_struct *, struct mempolicy *) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct *, unsigned long ) ;
   struct page *(*find_special_page)(struct vm_area_struct *, unsigned long ) ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_head {
   struct hlist_bl_node *first ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node {
   struct hlist_bl_node *next ;
   struct hlist_bl_node **pprev ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct __anonstruct_387 {
   spinlock_t lock ;
   int count ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
union __anonunion_386 {
   struct __anonstruct_387 __anonCompField___anonunion_386_53 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct lockref {
   union __anonunion_386 __anonCompField_lockref_54 ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stringhash.h"
struct path;
#line 79 
struct vfsmount;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct __anonstruct_389 {
   u32 hash ;
   u32 len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_388 {
   struct __anonstruct_389 __anonCompField___anonunion_388_55 ;
   u64 hash_len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct qstr {
   union __anonunion_388 __anonCompField_qstr_56 ;
   unsigned char *name ;
};
#line 89 
struct dentry_operations;
#line 89 
struct super_block;
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_390 {
   struct list_head d_lru ;
   wait_queue_head_t *d_wait ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_d_u_391 {
   struct hlist_node d_alias ;
   struct hlist_bl_node d_in_lookup_hash ;
   struct callback_head d_rcu ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry {
   unsigned int d_flags ;
   seqcount_t d_seq ;
   struct hlist_bl_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct inode *d_inode ;
   unsigned char d_iname[32U] ;
   struct lockref d_lockref ;
   struct dentry_operations *d_op ;
   struct super_block *d_sb ;
   unsigned long d_time ;
   void *d_fsdata ;
   union __anonunion_390 __anonCompField_dentry_57 ;
   struct list_head d_child ;
   struct list_head d_subdirs ;
   union __anonunion_d_u_391 d_u ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_weak_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_hash)(struct dentry *, struct qstr *) ;
   int (*d_compare)(struct dentry *, unsigned int , char *, struct qstr *) ;
   int (*d_delete)(struct dentry *) ;
   int (*d_init)(struct dentry *) ;
   void (*d_release)(struct dentry *) ;
   void (*d_prune)(struct dentry *) ;
   void (*d_iput)(struct dentry *, struct inode *) ;
   char *(*d_dname)(struct dentry *, char *, int ) ;
   struct vfsmount *(*d_automount)(struct path *) ;
   int (*d_manage)(struct path *, bool ) ;
   struct dentry *(*d_real)(struct dentry *, struct inode *) ;
} __attribute__((__aligned__(64)));
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/path.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
} __attribute__((__designated_init__));
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stat.h"
struct kstat {
   u32 result_mask ;
   umode_t mode ;
   unsigned int nlink ;
   uint32_t blksize ;
   u64 attributes ;
   u64 attributes_mask ;
   u64 ino ;
   dev_t dev ;
   dev_t rdev ;
   kuid_t uid ;
   kgid_t gid ;
   loff_t size ;
   struct timespec64 atime ;
   struct timespec64 mtime ;
   struct timespec64 ctime ;
   struct timespec64 btime ;
   u64 blocks ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_one {
   struct list_head list ;
   long nr_items ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_memcg {
   struct callback_head rcu ;
   struct list_lru_one *lru[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_node {
   spinlock_t lock ;
   struct list_lru_one lru ;
   struct list_lru_memcg *memcg_lrus ;
   long nr_items ;
} __attribute__((__aligned__(64)));
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru {
   struct list_lru_node *node ;
   struct list_head list ;
   int shrinker_id ;
   bool memcg_aware ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/xarray.h"
struct xarray {
   spinlock_t xa_lock ;
   gfp_t xa_flags ;
   void *xa_head ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fiemap.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
#line 39 
enum migrate_mode {
    MIGRATE_ASYNC = 0,
    MIGRATE_SYNC_LIGHT = 1,
    MIGRATE_SYNC = 2,
    MIGRATE_SYNC_NO_COPY = 3
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcuwait.h"
struct rcuwait {
   struct task_struct *task ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_sync.h"
struct rcu_sync {
   int gp_state ;
   int gp_count ;
   wait_queue_head_t gp_wait ;
   struct callback_head cb_head ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-rwsem.h"
struct percpu_rw_semaphore {
   struct rcu_sync rss ;
   unsigned int *read_count ;
   struct rw_semaphore rw_sem ;
   struct rcuwait writer ;
   int readers_block ;
};
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delayed_call.h"
struct delayed_call {
   void (*fn)(void *) ;
   void *arg ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
struct __anonstruct_uuid_t_409 {
   __u8 b[16U] ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
typedef struct __anonstruct_uuid_t_409 uuid_t;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uuid.h"
typedef u32 errseq_t;
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_410 {
   struct list_head q_node ;
   struct kmem_cache *__rcu_icq_cache ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_411 {
   struct hlist_node ioc_node ;
   struct callback_head __rcu_head ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_cq {
   struct request_queue *q ;
   struct io_context *ioc ;
   union __anonunion_410 __anonCompField_io_cq_60 ;
   union __anonunion_411 __anonCompField_io_cq_61 ;
   unsigned int flags ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_context {
   atomic_long_t refcount ;
   atomic_t active_ref ;
   atomic_t nr_tasks ;
   spinlock_t lock ;
   unsigned short ioprio ;
   int nr_batch_requests ;
   unsigned long last_waited ;
   struct xarray icq_tree ;
   struct io_cq *icq_hint ;
   struct hlist_head icq_list ;
   struct work_struct release_work ;
};
#line 287  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fs.h"
struct export_operations;
#line 289 
struct iovec;
#line 290 
struct kiocb;
#line 291 
struct kobject;
#line 293 
struct kstatfs;
#line 294 
struct swap_info_struct;
#line 295 
struct iov_iter;
#line 296 
struct fscrypt_info;
#line 297 
struct fscrypt_operations;
#line 298 
struct fsverity_info;
#line 299 
struct fsverity_operations;
#line 300 
struct fs_context;
#line 301 
struct fs_parameter_description;
#line 224  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   kuid_t ia_uid ;
   kgid_t ia_gid ;
   loff_t ia_size ;
   struct timespec64 ia_atime ;
   struct timespec64 ia_mtime ;
   struct timespec64 ia_ctime ;
   struct file *ia_file ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu_counter.h"
struct percpu_counter {
   raw_spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dqblk_xfs.h"
struct dquot;
#line 215 
struct kqid;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef __kernel_uid32_t projid_t;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
struct __anonstruct_kprojid_t_412 {
   projid_t val ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef struct __anonstruct_kprojid_t_412 kprojid_t;
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/quota.h"
enum quota_type {
    USRQUOTA = 0,
    GRPQUOTA = 1,
    PRJQUOTA = 2
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
typedef long long qsize_t;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
union __anonunion_413 {
   kuid_t uid ;
   kgid_t gid ;
   kprojid_t projid ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct kqid {
   union __anonunion_413 __anonCompField_kqid_62 ;
   enum quota_type type ;
};
#line 205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time64_t dqb_btime ;
   time64_t dqb_itime ;
};
#line 216 
struct quota_format_type;
#line 222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_max_spc_limit ;
   qsize_t dqi_max_ino_limit ;
   void *dqi_priv ;
};
#line 294  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   spinlock_t dq_dqb_lock ;
   atomic_t dq_count ;
   struct super_block *dq_sb ;
   struct kqid dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   struct mem_dqblk dq_dqb ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block *, int ) ;
   int (*read_file_info)(struct super_block *, int ) ;
   int (*write_file_info)(struct super_block *, int ) ;
   int (*free_file_info)(struct super_block *, int ) ;
   int (*read_dqblk)(struct dquot *) ;
   int (*commit_dqblk)(struct dquot *) ;
   int (*release_dqblk)(struct dquot *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 322  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot_operations {
   int (*write_dquot)(struct dquot *) ;
   struct dquot *(*alloc_dquot)(struct super_block *, int ) ;
   void (*destroy_dquot)(struct dquot *) ;
   int (*acquire_dquot)(struct dquot *) ;
   int (*release_dquot)(struct dquot *) ;
   int (*mark_dirty)(struct dquot *) ;
   int (*write_info)(struct super_block *, int ) ;
   qsize_t *(*get_reserved_space)(struct inode *) ;
   int (*get_projid)(struct inode *, kprojid_t *) ;
   int (*get_inode_usage)(struct inode *, qsize_t *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 343  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_dqblk {
   int d_fieldmask ;
   u64 d_spc_hardlimit ;
   u64 d_spc_softlimit ;
   u64 d_ino_hardlimit ;
   u64 d_ino_softlimit ;
   u64 d_space ;
   u64 d_ino_count ;
   s64 d_ino_timer ;
   s64 d_spc_timer ;
   int d_ino_warns ;
   int d_spc_warns ;
   u64 d_rt_spc_hardlimit ;
   u64 d_rt_spc_softlimit ;
   u64 d_rt_space ;
   s64 d_rt_spc_timer ;
   int d_rt_spc_warns ;
};
#line 395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_type_state {
   unsigned int flags ;
   unsigned int spc_timelimit ;
   unsigned int ino_timelimit ;
   unsigned int rt_spc_timelimit ;
   unsigned int spc_warnlimit ;
   unsigned int ino_warnlimit ;
   unsigned int rt_spc_warnlimit ;
   unsigned long long ino ;
   blkcnt_t blocks ;
   blkcnt_t nextents ;
};
#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_state {
   unsigned int s_incoredqs ;
   struct qc_type_state s_state[3U] ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_info {
   int i_fieldmask ;
   unsigned int i_flags ;
   unsigned int i_spc_timelimit ;
   unsigned int i_ino_timelimit ;
   unsigned int i_rt_spc_timelimit ;
   unsigned int i_spc_warnlimit ;
   unsigned int i_ino_warnlimit ;
   unsigned int i_rt_spc_warnlimit ;
};
#line 428  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block *, int , int , struct path *) ;
   int (*quota_off)(struct super_block *, int ) ;
   int (*quota_enable)(struct super_block *, unsigned int ) ;
   int (*quota_disable)(struct super_block *, unsigned int ) ;
   int (*quota_sync)(struct super_block *, int ) ;
   int (*set_info)(struct super_block *, int , struct qc_info *) ;
   int (*get_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_nextdqblk)(struct super_block *, struct kqid *, struct qc_dqblk *) ;
   int (*set_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_state)(struct super_block *, struct qc_state *) ;
   int (*rm_xquota)(struct super_block *, unsigned int ) ;
};
#line 443  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 518  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct rw_semaphore dqio_sem ;
   struct inode *files[3U] ;
   struct mem_dqinfo info[3U] ;
   struct quota_format_ops *ops[3U] ;
};
#line 538 
enum rw_hint {
    WRITE_LIFE_NOT_SET = 0,
    WRITE_LIFE_NONE = 1,
    WRITE_LIFE_SHORT = 2,
    WRITE_LIFE_MEDIUM = 3,
    WRITE_LIFE_LONG = 4,
    WRITE_LIFE_EXTREME = 5
};
#line 318  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct kiocb {
   struct file *ki_filp ;
   loff_t ki_pos ;
   void (*ki_complete)(struct kiocb *, long , long ) ;
   void *private ;
   int ki_flags ;
   u16 ki_hint ;
   u16 ki_ioprio ;
   unsigned int ki_cookie ;
};
#line 362  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page *, struct writeback_control *) ;
   int (*readpage)(struct file *, struct page *) ;
   int (*writepages)(struct address_space *, struct writeback_control *) ;
   int (*set_page_dirty)(struct page *) ;
   int (*readpages)(struct file *, struct address_space *, struct list_head *, unsigned int ) ;
   int (*write_begin)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page **, void **) ;
   int (*write_end)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page *, void *) ;
   sector_t (*bmap)(struct address_space *, sector_t ) ;
   void (*invalidatepage)(struct page *, unsigned int , unsigned int ) ;
   int (*releasepage)(struct page *, gfp_t ) ;
   void (*freepage)(struct page *) ;
   ssize_t (*direct_IO)(struct kiocb *, struct iov_iter *) ;
   int (*migratepage)(struct address_space *, struct page *, struct page *, enum migrate_mode ) ;
   bool (*isolate_page)(struct page *, isolate_mode_t ) ;
   void (*putback_page)(struct page *) ;
   int (*launder_page)(struct page *) ;
   int (*is_partially_uptodate)(struct page *, unsigned long , unsigned long ) ;
   void (*is_dirty_writeback)(struct page *, bool *, bool *) ;
   int (*error_remove_page)(struct address_space *, struct page *) ;
   int (*swap_activate)(struct swap_info_struct *, struct file *, sector_t *) ;
   void (*swap_deactivate)(struct file *) ;
};
#line 445  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct xarray i_pages ;
   gfp_t gfp_mask ;
   atomic_t i_mmap_writable ;
   atomic_t nr_thps ;
   struct rb_root_cached i_mmap ;
   struct rw_semaphore i_mmap_rwsem ;
   unsigned long nrpages ;
   unsigned long nrexceptional ;
   unsigned long writeback_index ;
   struct address_space_operations *a_ops ;
   unsigned long flags ;
   errseq_t wb_err ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   void *private_data ;
} __attribute__((__designated_init__, __aligned__(8)));
#line 473  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   int bd_openers ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   struct mutex bd_mutex ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   bool bd_write_holder ;
   struct list_head bd_holder_disks ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   u8 bd_partno ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct request_queue *bd_queue ;
   struct backing_dev_info *bd_bdi ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
} __attribute__((__designated_init__));
#line 587 
struct posix_acl;
#line 614 
struct fsnotify_mark_connector;
#line 628 
struct inode_operations;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_418 {
   unsigned int i_nlink ;
   unsigned int __i_nlink ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_419 {
   struct hlist_head i_dentry ;
   struct callback_head i_rcu ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_420 {
   struct file_operations *i_fop ;
   void (*free_inode)(struct inode *) ;
};
#line 628 
struct file_lock_context;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_421 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
   char *i_link ;
   unsigned int i_dir_seq ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode {
   umode_t i_mode ;
   unsigned short i_opflags ;
   kuid_t i_uid ;
   kgid_t i_gid ;
   unsigned int i_flags ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   struct inode_operations *i_op ;
   struct super_block *i_sb ;
   struct address_space *i_mapping ;
   void *i_security ;
   unsigned long i_ino ;
   union __anonunion_418 __anonCompField_inode_63 ;
   dev_t i_rdev ;
   loff_t i_size ;
   struct timespec64 i_atime ;
   struct timespec64 i_mtime ;
   struct timespec64 i_ctime ;
   spinlock_t i_lock ;
   unsigned short i_bytes ;
   u8 i_blkbits ;
   u8 i_write_hint ;
   blkcnt_t i_blocks ;
   unsigned long i_state ;
   struct rw_semaphore i_rwsem ;
   unsigned long dirtied_when ;
   unsigned long dirtied_time_when ;
   struct hlist_node i_hash ;
   struct list_head i_io_list ;
   struct bdi_writeback *i_wb ;
   int i_wb_frn_winner ;
   u16 i_wb_frn_avg_time ;
   u16 i_wb_frn_history ;
   struct list_head i_lru ;
   struct list_head i_sb_list ;
   struct list_head i_wb_list ;
   union __anonunion_419 __anonCompField_inode_64 ;
   atomic64_t i_version ;
   atomic_t i_count ;
   atomic_t i_dio_count ;
   atomic_t i_writecount ;
   atomic_t i_readcount ;
   union __anonunion_420 __anonCompField_inode_65 ;
   struct file_lock_context *i_flctx ;
   struct address_space i_data ;
   struct list_head i_devices ;
   union __anonunion_421 __anonCompField_inode_66 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct fsnotify_mark_connector *i_fsnotify_marks ;
   struct fscrypt_info *i_crypt_info ;
   struct fsverity_info *i_verity_info ;
   void *i_private ;
} __attribute__((__designated_init__));
#line 904  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   kuid_t uid ;
   kuid_t euid ;
   int signum ;
};
#line 915  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_f_u_422 {
   struct llist_node fu_llist ;
   struct callback_head fu_rcuhead ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file {
   union __anonunion_f_u_422 f_u ;
   struct path f_path ;
   struct inode *f_inode ;
   struct file_operations *f_op ;
   spinlock_t f_lock ;
   enum rw_hint f_write_hint ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   struct mutex f_pos_lock ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct list_head f_tfile_llink ;
   struct address_space *f_mapping ;
   errseq_t f_wb_err ;
} __attribute__((__designated_init__, __aligned__(4)));
#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
typedef void *fl_owner_t;
#line 1026 
struct file_lock;
#line 1029  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock *, struct file_lock *) ;
   void (*fl_release_private)(struct file_lock *) ;
};
#line 1034  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct lock_manager_operations {
   fl_owner_t (*lm_get_owner)(fl_owner_t ) ;
   void (*lm_put_owner)(fl_owner_t ) ;
   void (*lm_notify)(struct file_lock *) ;
   int (*lm_grant)(struct file_lock *, int ) ;
   bool (*lm_break)(struct file_lock *) ;
   int (*lm_change)(struct file_lock *, int , struct list_head *) ;
   void (*lm_setup)(struct file_lock *, void **) ;
};
#line 1052 
struct net;
#line 1058 
struct nlm_lockowner;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 15 
struct nfs4_lock_state;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct;
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct __anonstruct_afs_424 {
   struct list_head link ;
   int state ;
   unsigned int debug_id ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_fl_u_423 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_424 afs ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock {
   struct file_lock *fl_blocker ;
   struct list_head fl_list ;
   struct hlist_node fl_link ;
   struct list_head fl_blocked_requests ;
   struct list_head fl_blocked_member ;
   fl_owner_t fl_owner ;
   unsigned int fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   int fl_link_cpu ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   unsigned long fl_downgrade_time ;
   struct file_lock_operations *fl_ops ;
   struct lock_manager_operations *fl_lmops ;
   union __anonunion_fl_u_423 fl_u ;
} __attribute__((__designated_init__));
#line 1117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_context {
   spinlock_t flc_lock ;
   struct list_head flc_flock ;
   struct list_head flc_posix ;
   struct list_head flc_lease ;
};
#line 1331  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct {
   rwlock_t fa_lock ;
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
   struct callback_head fa_rcu ;
};
#line 1418  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct sb_writers {
   int frozen ;
   wait_queue_head_t wait_unfrozen ;
   struct percpu_rw_semaphore rw_sem[3U] ;
};
#line 1424 
struct super_operations;
#line 1424 
struct xattr_handler;
#line 1424 
struct mtd_info;
#line 1424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations *s_op ;
   struct dquot_operations *dq_op ;
   struct quotactl_ops *s_qcop ;
   struct export_operations *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_iflags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   int s_count ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler **s_xattr ;
   struct fscrypt_operations *s_cop ;
   struct key *s_master_keys ;
   struct fsverity_operations *s_vop ;
   struct hlist_bl_head s_roots ;
   struct list_head s_mounts ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct hlist_node s_instances ;
   unsigned int s_quota_types ;
   struct quota_info s_dquot ;
   struct sb_writers s_writers ;
   void *s_fs_info ;
   u32 s_time_gran ;
   time64_t s_time_min ;
   time64_t s_time_max ;
   __u32 s_fsnotify_mask ;
   struct fsnotify_mark_connector *s_fsnotify_marks ;
   char s_id[32U] ;
   uuid_t s_uuid ;
   unsigned int s_max_links ;
   fmode_t s_mode ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   struct dentry_operations *s_d_op ;
   int cleancache_poolid ;
   struct shrinker s_shrink ;
   atomic_long_t s_remove_count ;
   atomic_long_t s_fsnotify_inode_refs ;
   int s_readonly_remount ;
   struct workqueue_struct *s_dio_done_wq ;
   struct hlist_head s_pins ;
   struct user_namespace *s_user_ns ;
   struct list_lru s_dentry_lru ;
   struct list_lru s_inode_lru ;
   struct callback_head rcu ;
   struct work_struct destroy_work ;
   struct mutex s_sync_lock ;
   int s_stack_depth ;
   spinlock_t s_inode_list_lock ;
   struct list_head s_inodes ;
   spinlock_t s_inode_wblist_lock ;
   struct list_head s_inodes_wb ;
} __attribute__((__designated_init__));
#line 1746  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1756 
struct dir_context;
#line 1767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct dir_context {
   int (*actor)(struct dir_context *, char *, int , loff_t , u64 , unsigned int ) ;
   loff_t pos ;
};
#line 1821  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file *, loff_t , int ) ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*read_iter)(struct kiocb *, struct iov_iter *) ;
   ssize_t (*write_iter)(struct kiocb *, struct iov_iter *) ;
   int (*iopoll)(struct kiocb *, bool ) ;
   int (*iterate)(struct file *, struct dir_context *) ;
   int (*iterate_shared)(struct file *, struct dir_context *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   unsigned long mmap_supported_flags ;
   int (*open)(struct inode *, struct file *) ;
   int (*flush)(struct file *, fl_owner_t ) ;
   int (*release)(struct inode *, struct file *) ;
   int (*fsync)(struct file *, loff_t , loff_t , int ) ;
   int (*fasync)(int , struct file *, int ) ;
   int (*lock)(struct file *, int , struct file_lock *) ;
   ssize_t (*sendpage)(struct file *, struct page *, int , size_t , loff_t *, int ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*check_flags)(int ) ;
   int (*flock)(struct file *, int , struct file_lock *) ;
   ssize_t (*splice_write)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ) ;
   ssize_t (*splice_read)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*setlease)(struct file *, long , struct file_lock **, void **) ;
   long (*fallocate)(struct file *, int , loff_t , loff_t ) ;
   void (*show_fdinfo)(struct seq_file *, struct file *) ;
   ssize_t (*copy_file_range)(struct file *, loff_t , struct file *, loff_t , size_t , unsigned int ) ;
   loff_t (*remap_file_range)(struct file *, loff_t , struct file *, loff_t , loff_t , unsigned int ) ;
   int (*fadvise)(struct file *, loff_t , loff_t , int ) ;
} __attribute__((__designated_init__));
#line 1863  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode_operations {
   struct dentry *(*lookup)(struct inode *, struct dentry *, unsigned int ) ;
   char *(*get_link)(struct dentry *, struct inode *, struct delayed_call *) ;
   int (*permission)(struct inode *, int ) ;
   struct posix_acl *(*get_acl)(struct inode *, int ) ;
   int (*readlink)(struct dentry *, char *, int ) ;
   int (*create)(struct inode *, struct dentry *, umode_t , bool ) ;
   int (*link)(struct dentry *, struct inode *, struct dentry *) ;
   int (*unlink)(struct inode *, struct dentry *) ;
   int (*symlink)(struct inode *, struct dentry *, char *) ;
   int (*mkdir)(struct inode *, struct dentry *, umode_t ) ;
   int (*rmdir)(struct inode *, struct dentry *) ;
   int (*mknod)(struct inode *, struct dentry *, umode_t , dev_t ) ;
   int (*rename)(struct inode *, struct dentry *, struct inode *, struct dentry *, unsigned int ) ;
   int (*setattr)(struct dentry *, struct iattr *) ;
   int (*getattr)(struct path *, struct kstat *, u32 , unsigned int ) ;
   ssize_t (*listxattr)(struct dentry *, char *, size_t ) ;
   int (*fiemap)(struct inode *, struct fiemap_extent_info *, u64 , u64 ) ;
   int (*update_time)(struct inode *, struct timespec64 *, int ) ;
   int (*atomic_open)(struct inode *, struct dentry *, struct file *, unsigned int , umode_t ) ;
   int (*tmpfile)(struct inode *, struct dentry *, umode_t ) ;
   int (*set_acl)(struct inode *, struct posix_acl *, int ) ;
} __attribute__((__aligned__(64)));
#line 1942  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block *) ;
   void (*destroy_inode)(struct inode *) ;
   void (*free_inode)(struct inode *) ;
   void (*dirty_inode)(struct inode *, int ) ;
   int (*write_inode)(struct inode *, struct writeback_control *) ;
   int (*drop_inode)(struct inode *) ;
   void (*evict_inode)(struct inode *) ;
   void (*put_super)(struct super_block *) ;
   int (*sync_fs)(struct super_block *, int ) ;
   int (*freeze_super)(struct super_block *) ;
   int (*freeze_fs)(struct super_block *) ;
   int (*thaw_super)(struct super_block *) ;
   int (*unfreeze_fs)(struct super_block *) ;
   int (*statfs)(struct dentry *, struct kstatfs *) ;
   int (*remount_fs)(struct super_block *, int *, char *) ;
   void (*umount_begin)(struct super_block *) ;
   int (*show_options)(struct seq_file *, struct dentry *) ;
   int (*show_devname)(struct seq_file *, struct dentry *) ;
   int (*show_path)(struct seq_file *, struct dentry *) ;
   int (*show_stats)(struct seq_file *, struct dentry *) ;
   ssize_t (*quota_read)(struct super_block *, int , char *, size_t , loff_t ) ;
   ssize_t (*quota_write)(struct super_block *, int , char *, size_t , loff_t ) ;
   struct dquot **(*get_dquots)(struct inode *) ;
   int (*bdev_try_to_free_page)(struct super_block *, struct page *, gfp_t ) ;
   long (*nr_cached_objects)(struct super_block *, struct shrink_control *) ;
   long (*free_cached_objects)(struct super_block *, struct shrink_control *) ;
};
#line 2217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_system_type {
   char *name ;
   int fs_flags ;
   int (*init_fs_context)(struct fs_context *) ;
   struct fs_parameter_description *parameters ;
   struct dentry *(*mount)(struct file_system_type *, int , char *, void *) ;
   void (*kill_sb)(struct super_block *) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct hlist_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key s_vfs_rename_key ;
   struct lock_class_key s_writers_key[3U] ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
};
#line 1565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct kvec;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bvec.h"
struct bio_vec {
   struct page *bv_page ;
   unsigned int bv_len ;
   unsigned int bv_offset ;
};
#line 686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
struct scatterlist;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uio.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct kvec {
   void *iov_base ;
   size_t iov_len ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_438 {
   struct iovec *iov ;
   struct kvec *kvec ;
   struct bio_vec *bvec ;
   struct pipe_inode_info *pipe ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct __anonstruct_440 {
   unsigned int head ;
   unsigned int start_head ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_439 {
   unsigned long nr_segs ;
   struct __anonstruct_440 __anonCompField___anonunion_439_68 ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct iov_iter {
   unsigned int type ;
   size_t iov_offset ;
   size_t count ;
   union __anonunion_438 __anonCompField_iov_iter_67 ;
   union __anonunion_439 __anonCompField_iov_iter_69 ;
};
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
typedef unsigned short __kernel_sa_family_t;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
typedef __kernel_sa_family_t sa_family_t;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14U] ;
};
#line 422 
struct ns_common;
#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct sk_buff;
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/checksum_64.h"
struct in6_addr;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct idr {
   struct xarray idr_rt ;
   unsigned int idr_base ;
   unsigned int idr_next ;
};
#line 323 
struct kernfs_open_node;
#line 324 
struct kernfs_iattrs;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_dir {
   unsigned long subdirs ;
   struct rb_root children ;
   struct kernfs_root *root ;
};
#line 96 
struct kernfs_node;
#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_symlink {
   struct kernfs_node *target_kn ;
};
#line 100 
struct kernfs_ops;
#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_attr {
   struct kernfs_ops *ops ;
   struct kernfs_open_node *open ;
   loff_t size ;
   struct kernfs_node *notify_next ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
union __anonunion_463 {
   struct kernfs_elem_dir dir ;
   struct kernfs_elem_symlink symlink ;
   struct kernfs_elem_attr attr ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_node {
   atomic_t count ;
   atomic_t active ;
   struct lockdep_map dep_map ;
   struct kernfs_node *parent ;
   char *name ;
   struct rb_node rb ;
   void *ns ;
   unsigned int hash ;
   union __anonunion_463 __anonCompField_kernfs_node_72 ;
   void *priv ;
   u64 id ;
   unsigned short flags ;
   umode_t mode ;
   struct kernfs_iattrs *iattr ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_syscall_ops {
   int (*show_options)(struct seq_file *, struct kernfs_root *) ;
   int (*mkdir)(struct kernfs_node *, char *, umode_t ) ;
   int (*rmdir)(struct kernfs_node *) ;
   int (*rename)(struct kernfs_node *, struct kernfs_node *, char *) ;
   int (*show_path)(struct seq_file *, struct kernfs_node *, struct kernfs_root *) ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root {
   struct kernfs_node *kn ;
   unsigned int flags ;
   struct idr ino_idr ;
   u32 last_id_lowbits ;
   u32 id_highbits ;
   struct kernfs_syscall_ops *syscall_ops ;
   struct list_head supers ;
   wait_queue_head_t deactivate_waitq ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_open_file {
   struct kernfs_node *kn ;
   struct file *file ;
   struct seq_file *seq_file ;
   void *priv ;
   struct mutex mutex ;
   struct mutex prealloc_mutex ;
   int event ;
   struct list_head list ;
   char *prealloc_buf ;
   size_t atomic_write_len ;
   bool mmapped : 1 ;
   bool released : 1 ;
   struct vm_operations_struct *vm_ops ;
};
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_ops {
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   ssize_t (*read)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   size_t atomic_write_len ;
   bool prealloc ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   int (*mmap)(struct kernfs_open_file *, struct vm_area_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 595 
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
};
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject_ns.h"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   bool (*current_may_mount)(void) ;
   void *(*grab_current_ns)(void) ;
   void *(*netlink_ns)(struct sock *) ;
   void *(*initial_ns)(void) ;
   void (*drop_ns)(void *) ;
};
#line 58 
struct bin_attribute;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute {
   char *name ;
   umode_t mode ;
   bool ignore_lockdep : 1 ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute_group {
   char *name ;
   umode_t (*is_visible)(struct kobject *, struct attribute *, int ) ;
   umode_t (*is_bin_visible)(struct kobject *, struct bin_attribute *, int ) ;
   struct attribute **attrs ;
   struct bin_attribute **bin_attrs ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   ssize_t (*write)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   int (*mmap)(struct file *, struct kobject *, struct bin_attribute *, struct vm_area_struct *) ;
};
#line 223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject *, struct attribute *, char *) ;
   ssize_t (*store)(struct kobject *, struct attribute *, char *, size_t ) ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kref.h"
struct kref {
   refcount_t refcount ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset;
#line 65 
struct kobj_type;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobject {
   char *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct kernfs_node *sd ;
   struct kref kref ;
   struct delayed_work release ;
   unsigned int state_initialized : 1 ;
   unsigned int state_in_sysfs : 1 ;
   unsigned int state_add_uevent_sent : 1 ;
   unsigned int state_remove_uevent_sent : 1 ;
   unsigned int uevent_suppress : 1 ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject *) ;
   struct sysfs_ops *sysfs_ops ;
   struct attribute **default_attrs ;
   struct attribute_group **default_groups ;
   struct kobj_ns_type_operations *(*child_ns_type)(struct kobject *) ;
   void *(*namespace)(struct kobject *) ;
   void (*get_ownership)(struct kobject *, kuid_t *, kgid_t *) ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_uevent_env {
   char *argv[3U] ;
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset_uevent_ops {
   int (*filter)(struct kset *, struct kobject *) ;
   char *(*name)(struct kset *, struct kobject *) ;
   int (*uevent)(struct kset *, struct kobject *, struct kobj_uevent_env *) ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops *uevent_ops ;
} __attribute__((__designated_init__));
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device *) ;
   void (*complete)(struct device *) ;
   int (*suspend)(struct device *) ;
   int (*resume)(struct device *) ;
   int (*freeze)(struct device *) ;
   int (*thaw)(struct device *) ;
   int (*poweroff)(struct device *) ;
   int (*restore)(struct device *) ;
   int (*suspend_late)(struct device *) ;
   int (*resume_early)(struct device *) ;
   int (*freeze_late)(struct device *) ;
   int (*thaw_early)(struct device *) ;
   int (*poweroff_late)(struct device *) ;
   int (*restore_early)(struct device *) ;
   int (*suspend_noirq)(struct device *) ;
   int (*resume_noirq)(struct device *) ;
   int (*freeze_noirq)(struct device *) ;
   int (*thaw_noirq)(struct device *) ;
   int (*poweroff_noirq)(struct device *) ;
   int (*restore_noirq)(struct device *) ;
   int (*runtime_suspend)(struct device *) ;
   int (*runtime_resume)(struct device *) ;
   int (*runtime_idle)(struct device *) ;
};
#line 303 
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
};
#line 310 
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
};
#line 318 
struct wakeup_source;
#line 319 
struct wake_irq;
#line 320 
struct pm_domain_data;
#line 530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_subsys_data {
   spinlock_t lock ;
   unsigned int refcount ;
   struct list_head clock_list ;
   struct pm_domain_data *domain_data ;
};
#line 573 
struct dev_pm_qos;
#line 573  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned int can_wakeup : 1 ;
   unsigned int async_suspend : 1 ;
   bool in_dpm_list : 1 ;
   bool is_prepared : 1 ;
   bool is_suspended : 1 ;
   bool is_noirq_suspended : 1 ;
   bool is_late_suspended : 1 ;
   bool no_pm : 1 ;
   bool early_init : 1 ;
   bool direct_complete : 1 ;
   u32 driver_flags ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   bool wakeup_path : 1 ;
   bool syscore : 1 ;
   bool no_pm_callbacks : 1 ;
   unsigned int must_resume : 1 ;
   unsigned int may_skip_resume : 1 ;
   struct hrtimer suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   struct wake_irq *wakeirq ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned int disable_depth : 3 ;
   unsigned int idle_notification : 1 ;
   unsigned int request_pending : 1 ;
   unsigned int deferred_resume : 1 ;
   unsigned int runtime_auto : 1 ;
   bool ignore_children : 1 ;
   unsigned int no_callbacks : 1 ;
   unsigned int irq_safe : 1 ;
   unsigned int use_autosuspend : 1 ;
   unsigned int timer_autosuspends : 1 ;
   unsigned int memalloc_noio : 1 ;
   unsigned int links_count ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   u64 last_busy ;
   u64 active_time ;
   u64 suspended_time ;
   u64 accounting_timestamp ;
   struct pm_subsys_data *subsys_data ;
   void (*set_latency_tolerance)(struct device *, s32 ) ;
   struct dev_pm_qos *qos ;
};
#line 650  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_domain {
   struct dev_pm_ops ops ;
   int (*start)(struct device *) ;
   void (*detach)(struct device *, bool ) ;
   int (*activate)(struct device *) ;
   void (*sync)(struct device *) ;
   void (*dismiss)(struct device *) ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ratelimit.h"
struct ratelimit_state {
   raw_spinlock_t lock ;
   int interval ;
   int burst ;
   int printed ;
   int missed ;
   unsigned long begin ;
   unsigned long flags ;
};
#line 5  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/device.h"
struct dev_archdata {
   void *iommu ;
};
#line 12 
struct dma_map_ops;
#line 23 
struct device_driver;
#line 24 
struct driver_private;
#line 25 
struct class;
#line 26 
struct subsys_private;
#line 27 
struct bus_type;
#line 28 
struct iommu_ops;
#line 29 
struct iommu_group;
#line 30 
struct iommu_fwspec;
#line 31 
struct dev_pin_info;
#line 32 
struct iommu_param;
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct bus_type {
   char *name ;
   char *dev_name ;
   struct device *dev_root ;
   struct attribute_group **bus_groups ;
   struct attribute_group **dev_groups ;
   struct attribute_group **drv_groups ;
   int (*match)(struct device *, struct device_driver *) ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*online)(struct device *) ;
   int (*offline)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   int (*num_vf)(struct device *) ;
   int (*dma_configure)(struct device *) ;
   struct dev_pm_ops *pm ;
   struct iommu_ops *iommu_ops ;
   struct subsys_private *p ;
   struct lock_class_key lock_key ;
   bool need_parent_lock ;
};
#line 164 
struct device_type;
#line 309 
enum probe_type {
    PROBE_DEFAULT_STRATEGY = 0,
    PROBE_PREFER_ASYNCHRONOUS = 1,
    PROBE_FORCE_SYNCHRONOUS = 2
};
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_driver {
   char *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char *mod_name ;
   bool suppress_bind_attrs ;
   enum probe_type probe_type ;
   struct of_device_id *of_match_table ;
   struct acpi_device_id *acpi_match_table ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   struct attribute_group **groups ;
   struct attribute_group **dev_groups ;
   struct dev_pm_ops *pm ;
   void (*coredump)(struct device *) ;
   struct driver_private *p ;
};
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct class {
   char *name ;
   struct module *owner ;
   struct attribute_group **class_groups ;
   struct attribute_group **dev_groups ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *) ;
   void (*class_release)(struct class *) ;
   void (*dev_release)(struct device *) ;
   int (*shutdown_pre)(struct device *) ;
   struct kobj_ns_type_operations *ns_type ;
   void *(*namespace)(struct device *) ;
   void (*get_ownership)(struct device *, kuid_t *, kgid_t *) ;
   struct dev_pm_ops *pm ;
   struct subsys_private *p ;
};
#line 809  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_type {
   char *name ;
   struct attribute_group **groups ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *, kuid_t *, kgid_t *) ;
   void (*release)(struct device *) ;
   struct dev_pm_ops *pm ;
};
#line 1008  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 1139 
enum dl_dev_state {
    DL_DEV_NO_DRIVER = 0,
    DL_DEV_PROBING = 1,
    DL_DEV_DRIVER_BOUND = 2,
    DL_DEV_UNBINDING = 3
};
#line 1164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct dev_links_info {
   struct list_head suppliers ;
   struct list_head consumers ;
   struct list_head needs_suppliers ;
   struct list_head defer_sync ;
   bool need_for_probe ;
   enum dl_dev_state status ;
};
#line 1259 
struct dma_coherent_mem;
#line 1259 
struct cma;
#line 1259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device {
   struct kobject kobj ;
   struct device *parent ;
   struct device_private *p ;
   char *init_name ;
   struct device_type *type ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   void *driver_data ;
   struct mutex lockdep_mutex ;
   struct mutex mutex ;
   struct dev_links_info links ;
   struct dev_pm_info power ;
   struct dev_pm_domain *pm_domain ;
   struct irq_domain *msi_domain ;
   struct dev_pin_info *pins ;
   struct list_head msi_list ;
   struct dma_map_ops *dma_ops ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   u64 bus_dma_limit ;
   unsigned long dma_pfn_offset ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct cma *cma_area ;
   struct dev_archdata archdata ;
   struct device_node *of_node ;
   struct fwnode_handle *fwnode ;
   int numa_node ;
   dev_t devt ;
   u32 id ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct class *class ;
   struct attribute_group **groups ;
   void (*release)(struct device *) ;
   struct iommu_group *iommu_group ;
   struct iommu_fwspec *iommu_fwspec ;
   struct iommu_param *iommu_param ;
   bool offline_disabled : 1 ;
   bool offline : 1 ;
   bool of_node_reused : 1 ;
   bool state_synced : 1 ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_wakeup.h"
struct wakeup_source {
   char *name ;
   int id ;
   struct list_head entry ;
   spinlock_t lock ;
   struct wake_irq *wakeirq ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   ktime_t start_prevent_time ;
   ktime_t prevent_sleep_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long expire_count ;
   unsigned long wakeup_count ;
   struct device *dev ;
   bool active : 1 ;
   bool autosleep_enabled : 1 ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct scatterlist {
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct sg_table {
   struct scatterlist *sgl ;
   unsigned int nents ;
   unsigned int orig_nents ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
struct dma_map_ops {
   void *(*alloc)(struct device *, size_t , dma_addr_t *, gfp_t , unsigned long ) ;
   void (*free)(struct device *, size_t , void *, dma_addr_t , unsigned long ) ;
   int (*mmap)(struct device *, struct vm_area_struct *, void *, dma_addr_t , size_t , unsigned long ) ;
   int (*get_sgtable)(struct device *, struct sg_table *, void *, dma_addr_t , size_t , unsigned long ) ;
   dma_addr_t (*map_page)(struct device *, struct page *, unsigned long , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_page)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   int (*map_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   void (*unmap_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   dma_addr_t (*map_resource)(struct device *, phys_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_resource)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*sync_single_for_cpu)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_single_for_device)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_sg_for_cpu)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*sync_sg_for_device)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*cache_sync)(struct device *, void *, size_t , enum dma_data_direction ) ;
   int (*dma_supported)(struct device *, u64 ) ;
   u64 (*get_required_mask)(struct device *) ;
   size_t (*max_mapping_size)(struct device *) ;
   unsigned long (*get_merge_boundary)(struct device *) ;
};
#line 803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
typedef u64 netdev_features_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
union __anonunion_in6_u_466 {
   __u8 u6_addr8[16U] ;
   __be16 u6_addr16[8U] ;
   __be32 u6_addr32[4U] ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
struct in6_addr {
   union __anonunion_in6_u_466 in6_u ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
struct __anonstruct_siphash_key_t_467 {
   u64 key[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
typedef struct __anonstruct_siphash_key_t_467 siphash_key_t;
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_ether.h"
struct ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_proto ;
} __attribute__((__packed__));
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buffer {
   struct page *page ;
   unsigned int offset ;
   unsigned int len ;
   struct pipe_buf_operations *ops ;
   unsigned int flags ;
   unsigned long private ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_inode_info {
   struct mutex mutex ;
   wait_queue_head_t wait ;
   unsigned int head ;
   unsigned int tail ;
   unsigned int max_usage ;
   unsigned int ring_size ;
   unsigned int readers ;
   unsigned int writers ;
   unsigned int files ;
   unsigned int r_counter ;
   unsigned int w_counter ;
   struct page *tmp_page ;
   struct fasync_struct *fasync_readers ;
   struct fasync_struct *fasync_writers ;
   struct pipe_buffer *bufs ;
   struct user_struct *user ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations {
   int (*confirm)(struct pipe_inode_info *, struct pipe_buffer *) ;
   void (*release)(struct pipe_inode_info *, struct pipe_buffer *) ;
   int (*steal)(struct pipe_inode_info *, struct pipe_buffer *) ;
   bool (*get)(struct pipe_inode_info *, struct pipe_buffer *) ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netfilter/nf_conntrack_common.h"
struct ip_conntrack_stat {
   unsigned int found ;
   unsigned int invalid ;
   unsigned int ignore ;
   unsigned int insert ;
   unsigned int insert_failed ;
   unsigned int drop ;
   unsigned int early_drop ;
   unsigned int error ;
   unsigned int expect_new ;
   unsigned int expect_create ;
   unsigned int expect_delete ;
   unsigned int search_restart ;
};
#line 43 
union bpf_attr;
#line 44 
struct skb_ext;
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 562  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
typedef unsigned int sk_buff_data_t;
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_489 {
   struct net_device *dev ;
   unsigned long dev_scratch ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_488 {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   union __anonunion_489 __anonCompField___anonstruct_488_85 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_487 {
   struct __anonstruct_488 __anonCompField___anonunion_487_86 ;
   struct rb_node rbnode ;
   struct list_head list ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_490 {
   struct sock *sk ;
   int ip_defrag_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_491 {
   ktime_t tstamp ;
   u64 skb_mstamp_ns ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_493 {
   unsigned long _skb_refdst ;
   void (*destructor)(struct sk_buff *) ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_492 {
   struct __anonstruct_493 __anonCompField___anonunion_492_90 ;
   struct list_head tcp_tsorted_anchor ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_495 {
   __u16 csum_start ;
   __u16 csum_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_494 {
   __wsum csum ;
   struct __anonstruct_495 __anonCompField___anonunion_494_92 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_496 {
   unsigned int napi_id ;
   unsigned int sender_cpu ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_497 {
   __u32 mark ;
   __u32 reserved_tailroom ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_498 {
   __be16 inner_protocol ;
   __u8 inner_ipproto ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff {
   union __anonunion_487 __anonCompField_sk_buff_87 ;
   union __anonunion_490 __anonCompField_sk_buff_88 ;
   union __anonunion_491 __anonCompField_sk_buff_89 ;
   char cb[48U] ;
   union __anonunion_492 __anonCompField_sk_buff_91 ;
   unsigned long _nfct ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   __u16 queue_mapping ;
   __u8 __cloned_offset[0U] ;
   __u8 cloned : 1 ;
   __u8 nohdr : 1 ;
   __u8 fclone : 2 ;
   __u8 peeked : 1 ;
   __u8 head_frag : 1 ;
   __u8 pfmemalloc : 1 ;
   __u8 active_extensions ;
   __u32 headers_start[0U] ;
   __u8 __pkt_type_offset[0U] ;
   __u8 pkt_type : 3 ;
   __u8 ignore_df : 1 ;
   __u8 nf_trace : 1 ;
   __u8 ip_summed : 2 ;
   __u8 ooo_okay : 1 ;
   __u8 l4_hash : 1 ;
   __u8 sw_hash : 1 ;
   __u8 wifi_acked_valid : 1 ;
   __u8 wifi_acked : 1 ;
   __u8 no_fcs : 1 ;
   __u8 encapsulation : 1 ;
   __u8 encap_hdr_csum : 1 ;
   __u8 csum_valid : 1 ;
   __u8 __pkt_vlan_present_offset[0U] ;
   __u8 vlan_present : 1 ;
   __u8 csum_complete_sw : 1 ;
   __u8 csum_level : 2 ;
   __u8 csum_not_inet : 1 ;
   __u8 dst_pending_confirm : 1 ;
   __u8 ndisc_nodetype : 2 ;
   __u8 ipvs_property : 1 ;
   __u8 inner_protocol_type : 1 ;
   __u8 remcsum_offload : 1 ;
   __u8 offload_fwd_mark : 1 ;
   __u8 offload_l3_fwd_mark : 1 ;
   __u8 tc_skip_classify : 1 ;
   __u8 tc_at_ingress : 1 ;
   __u8 tc_redirected : 1 ;
   __u8 tc_from_ingress : 1 ;
   __u8 decrypted : 1 ;
   __u16 tc_index ;
   union __anonunion_494 __anonCompField_sk_buff_93 ;
   __u32 priority ;
   int skb_iif ;
   __u32 hash ;
   __be16 vlan_proto ;
   __u16 vlan_tci ;
   union __anonunion_496 __anonCompField_sk_buff_94 ;
   __u32 secmark ;
   union __anonunion_497 __anonCompField_sk_buff_95 ;
   union __anonunion_498 __anonCompField_sk_buff_96 ;
   __u16 inner_transport_header ;
   __u16 inner_network_header ;
   __u16 inner_mac_header ;
   __be16 protocol ;
   __u16 transport_header ;
   __u16 network_header ;
   __u16 mac_header ;
   __u32 headers_end[0U] ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   refcount_t users ;
   struct skb_ext *extensions ;
};
#line 4108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_ext {
   refcount_t refcnt ;
   u8 offset[3U] ;
   u8 chunks ;
   char data[0U] ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
struct dql {
   unsigned int num_queued ;
   unsigned int adj_limit ;
   unsigned int last_obj_cnt ;
   unsigned int limit ;
   unsigned int num_completed ;
   unsigned int prev_ovlimit ;
   unsigned int prev_num_queued ;
   unsigned int prev_last_obj_cnt ;
   unsigned int lowest_slack ;
   unsigned long slack_start_time ;
   unsigned int max_limit ;
   unsigned int min_limit ;
   unsigned int slack_hold_time ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
struct __anonstruct_sync_serial_settings_528 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
typedef struct __anonstruct_sync_serial_settings_528 sync_serial_settings;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_te1_settings_529 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_te1_settings_529 te1_settings;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_raw_hdlc_proto_530 {
   unsigned short encoding ;
   unsigned short parity ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_raw_hdlc_proto_530 raw_hdlc_proto;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_531 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_531 fr_proto;
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_532 {
   unsigned int dlci ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_532 fr_proto_pvc;
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_info_533 {
   unsigned int dlci ;
   char master[16U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_info_533 fr_proto_pvc_info;
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_cisco_proto_534 {
   unsigned int interval ;
   unsigned int timeout ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_cisco_proto_534 cisco_proto;
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifs_ifsu_535 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_535 ifs_ifsu ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifrn_536 {
   char ifrn_name[16U] ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifru_537 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16U] ;
   char ifru_newname[16U] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifreq {
   union __anonunion_ifr_ifrn_536 ifr_ifrn ;
   union __anonunion_ifr_ifru_537 ifr_ifru ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef s32 compat_long_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef u32 compat_uptr_t;
#line 367  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list {
   compat_uptr_t next ;
};
#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list_head {
   struct compat_robust_list list ;
   compat_long_t futex_offset ;
   compat_uptr_t list_op_pending ;
};
#line 177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_drvinfo {
   __u32 cmd ;
   char driver[32U] ;
   char version[32U] ;
   char fw_version[32U] ;
   char bus_info[32U] ;
   char erom_version[32U] ;
   char reserved2[12U] ;
   __u32 n_priv_flags ;
   __u32 n_stats ;
   __u32 testinfo_len ;
   __u32 eedump_len ;
   __u32 regdump_len ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_wolinfo {
   __u32 cmd ;
   __u32 supported ;
   __u32 wolopts ;
   __u8 sopass[6U] ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tunable {
   __u32 cmd ;
   __u32 id ;
   __u32 type_id ;
   __u32 len ;
   void *data[0U] ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_regs {
   __u32 cmd ;
   __u32 version ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eeprom {
   __u32 cmd ;
   __u32 magic ;
   __u32 offset ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eee {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertised ;
   __u32 lp_advertised ;
   __u32 eee_active ;
   __u32 eee_enabled ;
   __u32 tx_lpi_enabled ;
   __u32 tx_lpi_timer ;
   __u32 reserved[2U] ;
};
#line 382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_modinfo {
   __u32 cmd ;
   __u32 type ;
   __u32 eeprom_len ;
   __u32 reserved[8U] ;
};
#line 462  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_coalesce {
   __u32 cmd ;
   __u32 rx_coalesce_usecs ;
   __u32 rx_max_coalesced_frames ;
   __u32 rx_coalesce_usecs_irq ;
   __u32 rx_max_coalesced_frames_irq ;
   __u32 tx_coalesce_usecs ;
   __u32 tx_max_coalesced_frames ;
   __u32 tx_coalesce_usecs_irq ;
   __u32 tx_max_coalesced_frames_irq ;
   __u32 stats_block_coalesce_usecs ;
   __u32 use_adaptive_rx_coalesce ;
   __u32 use_adaptive_tx_coalesce ;
   __u32 pkt_rate_low ;
   __u32 rx_coalesce_usecs_low ;
   __u32 rx_max_coalesced_frames_low ;
   __u32 tx_coalesce_usecs_low ;
   __u32 tx_max_coalesced_frames_low ;
   __u32 pkt_rate_high ;
   __u32 rx_coalesce_usecs_high ;
   __u32 rx_max_coalesced_frames_high ;
   __u32 tx_coalesce_usecs_high ;
   __u32 tx_max_coalesced_frames_high ;
   __u32 rate_sample_interval ;
};
#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ringparam {
   __u32 cmd ;
   __u32 rx_max_pending ;
   __u32 rx_mini_max_pending ;
   __u32 rx_jumbo_max_pending ;
   __u32 tx_max_pending ;
   __u32 rx_pending ;
   __u32 rx_mini_pending ;
   __u32 rx_jumbo_pending ;
   __u32 tx_pending ;
};
#line 541  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_channels {
   __u32 cmd ;
   __u32 max_rx ;
   __u32 max_tx ;
   __u32 max_other ;
   __u32 max_combined ;
   __u32 rx_count ;
   __u32 tx_count ;
   __u32 other_count ;
   __u32 combined_count ;
};
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_pauseparam {
   __u32 cmd ;
   __u32 autoneg ;
   __u32 rx_pause ;
   __u32 tx_pause ;
};
#line 683  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_test {
   __u32 cmd ;
   __u32 flags ;
   __u32 reserved ;
   __u32 len ;
   __u64 data[0U] ;
};
#line 702  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_stats {
   __u32 cmd ;
   __u32 n_stats ;
   __u64 data[0U] ;
};
#line 758  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tos ;
};
#line 775  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 spi ;
   __u8 tos ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 l4_4_bytes ;
   __u8 tos ;
   __u8 ip_ver ;
   __u8 proto ;
};
#line 812  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tclass ;
};
#line 829  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 spi ;
   __u8 tclass ;
};
#line 844  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 l4_4_bytes ;
   __u8 tclass ;
   __u8 l4_proto ;
};
#line 852  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union ethtool_flow_union {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   struct ethtool_tcpip6_spec tcp_ip6_spec ;
   struct ethtool_tcpip6_spec udp_ip6_spec ;
   struct ethtool_tcpip6_spec sctp_ip6_spec ;
   struct ethtool_ah_espip6_spec ah_ip6_spec ;
   struct ethtool_ah_espip6_spec esp_ip6_spec ;
   struct ethtool_usrip6_spec usr_ip6_spec ;
   struct ethhdr ether_spec ;
   __u8 hdata[52U] ;
};
#line 880  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flow_ext {
   __u8 padding[2U] ;
   unsigned char h_dest[6U] ;
   __be16 vlan_etype ;
   __be16 vlan_tci ;
   __be32 data[2U] ;
};
#line 905  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rx_flow_spec {
   __u32 flow_type ;
   union ethtool_flow_union h_u ;
   struct ethtool_flow_ext h_ext ;
   union ethtool_flow_union m_u ;
   struct ethtool_flow_ext m_ext ;
   __u64 ring_cookie ;
   __u32 location ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union __anonunion_556 {
   __u32 rule_cnt ;
   __u32 rss_context ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rxnfc {
   __u32 cmd ;
   __u32 flow_type ;
   __u64 data ;
   struct ethtool_rx_flow_spec fs ;
   union __anonunion_556 __anonCompField_ethtool_rxnfc_99 ;
   __u32 rule_locs[0U] ;
};
#line 1130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flash {
   __u32 cmd ;
   __u32 region ;
   char data[128U] ;
};
#line 1150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_dump {
   __u32 cmd ;
   __u32 version ;
   __u32 flag ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 1230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ts_info {
   __u32 cmd ;
   __u32 so_timestamping ;
   __s32 phc_index ;
   __u32 tx_types ;
   __u32 tx_reserved[3U] ;
   __u32 rx_filters ;
   __u32 rx_reserved[3U] ;
};
#line 1302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_fecparam {
   __u32 cmd ;
   __u32 active_fec ;
   __u32 fec ;
   __u32 reserved ;
};
#line 1876  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_link_settings {
   __u32 cmd ;
   __u32 speed ;
   __u8 duplex ;
   __u8 port ;
   __u8 phy_address ;
   __u8 autoneg ;
   __u8 mdio_support ;
   __u8 eth_tp_mdix ;
   __u8 eth_tp_mdix_ctrl ;
   __s8 link_mode_masks_nwords ;
   __u8 transceiver ;
   __u8 reserved1[3U] ;
   __u32 reserved[7U] ;
   __u32 link_mode_masks[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
enum ethtool_phys_id_state {
    ETHTOOL_ID_INACTIVE = 0,
    ETHTOOL_ID_ACTIVE = 1,
    ETHTOOL_ID_ON = 2,
    ETHTOOL_ID_OFF = 3
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct __anonstruct_link_modes_559 {
   unsigned long supported[2U] ;
   unsigned long advertising[2U] ;
   unsigned long lp_advertising[2U] ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_link_ksettings {
   struct ethtool_link_settings base ;
   struct __anonstruct_link_modes_559 link_modes ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_ops {
   void (*get_drvinfo)(struct net_device *, struct ethtool_drvinfo *) ;
   int (*get_regs_len)(struct net_device *) ;
   void (*get_regs)(struct net_device *, struct ethtool_regs *, void *) ;
   void (*get_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   int (*set_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   u32 (*get_msglevel)(struct net_device *) ;
   void (*set_msglevel)(struct net_device *, u32 ) ;
   int (*nway_reset)(struct net_device *) ;
   u32 (*get_link)(struct net_device *) ;
   int (*get_eeprom_len)(struct net_device *) ;
   int (*get_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*set_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   int (*set_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   void (*get_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   int (*set_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   void (*get_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   int (*set_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   void (*self_test)(struct net_device *, struct ethtool_test *, u64 *) ;
   void (*get_strings)(struct net_device *, u32 , u8 *) ;
   int (*set_phys_id)(struct net_device *, enum ethtool_phys_id_state ) ;
   void (*get_ethtool_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
   int (*begin)(struct net_device *) ;
   void (*complete)(struct net_device *) ;
   u32 (*get_priv_flags)(struct net_device *) ;
   int (*set_priv_flags)(struct net_device *, u32 ) ;
   int (*get_sset_count)(struct net_device *, int ) ;
   int (*get_rxnfc)(struct net_device *, struct ethtool_rxnfc *, u32 *) ;
   int (*set_rxnfc)(struct net_device *, struct ethtool_rxnfc *) ;
   int (*flash_device)(struct net_device *, struct ethtool_flash *) ;
   int (*reset)(struct net_device *, u32 *) ;
   u32 (*get_rxfh_key_size)(struct net_device *) ;
   u32 (*get_rxfh_indir_size)(struct net_device *) ;
   int (*get_rxfh)(struct net_device *, u32 *, u8 *, u8 *) ;
   int (*set_rxfh)(struct net_device *, u32 *, u8 *, u8 ) ;
   int (*get_rxfh_context)(struct net_device *, u32 *, u8 *, u8 *, u32 ) ;
   int (*set_rxfh_context)(struct net_device *, u32 *, u8 *, u8 , u32 *, bool ) ;
   void (*get_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*set_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*get_dump_flag)(struct net_device *, struct ethtool_dump *) ;
   int (*get_dump_data)(struct net_device *, struct ethtool_dump *, void *) ;
   int (*set_dump)(struct net_device *, struct ethtool_dump *) ;
   int (*get_ts_info)(struct net_device *, struct ethtool_ts_info *) ;
   int (*get_module_info)(struct net_device *, struct ethtool_modinfo *) ;
   int (*get_module_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*set_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*get_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*set_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*get_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*set_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*get_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*set_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*get_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   int (*set_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   void (*get_ethtool_phy_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
};
#line 822  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sysctl.h"
struct ctl_table_root;
#line 823 
struct ctl_table_header;
#line 824 
struct ctl_dir;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
typedef int proc_handler(struct ctl_table *, int , void *, size_t *, loff_t *);
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_poll {
   atomic_t event ;
   wait_queue_head_t wait ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table {
   char *procname ;
   void *data ;
   int maxlen ;
   umode_t mode ;
   struct ctl_table *child ;
   proc_handler *proc_handler ;
   struct ctl_table_poll *poll ;
   void *extra1 ;
   void *extra2 ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_node {
   struct rb_node node ;
   struct ctl_table_header *header ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct __anonstruct_561 {
   struct ctl_table *ctl_table ;
   int used ;
   int count ;
   int nreg ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
union __anonunion_560 {
   struct __anonstruct_561 __anonCompField___anonunion_560_100 ;
   struct callback_head rcu ;
};
#line 142 
struct ctl_table_set;
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_header {
   union __anonunion_560 __anonCompField_ctl_table_header_101 ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_dir *parent ;
   struct ctl_node *node ;
   struct hlist_head inodes ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_dir {
   struct ctl_table_header header ;
   struct rb_root root ;
};
#line 167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_set {
   int (*is_seen)(struct ctl_table_set *) ;
   struct ctl_dir dir ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_root {
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root *) ;
   void (*set_ownership)(struct ctl_table_header *, struct ctl_table *, kuid_t *, kgid_t *) ;
   int (*permissions)(struct ctl_table_header *, struct ctl_table *) ;
};
#line 242 
struct prot_inuse;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/core.h"
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   int *sock_inuse ;
   struct prot_inuse *prot_inuse ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct u64_stats_sync {
   };
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct __anonstruct_local_t_562 {
   atomic_long_t a ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
typedef struct __anonstruct_local_t_562 local_t;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
struct __anonstruct_local64_t_563 {
   local_t a ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
typedef struct __anonstruct_local64_t_563 local64_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
struct __anonstruct_u64_stats_t_564 {
   local64_t v ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
typedef struct __anonstruct_u64_stats_t_564 u64_stats_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct ipstats_mib {
   u64 mibs[37U] ;
   struct u64_stats_sync syncp ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmp_mib {
   unsigned long mibs[28U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpmsg_mib {
   atomic_long_t mibs[512U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6_mib {
   unsigned long mibs[6U] ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6msg_mib {
   atomic_long_t mibs[512U] ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct tcp_mib {
   unsigned long mibs[16U] ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct udp_mib {
   unsigned long mibs[9U] ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_mib {
   unsigned long mibs[120U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_xfrm_mib {
   unsigned long mibs[29U] ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_tls_mib {
   unsigned long mibs[11U] ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mib.h"
struct proc_dir_entry;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mib.h"
struct netns_mib {
   struct tcp_mib *tcp_statistics ;
   struct ipstats_mib *ip_statistics ;
   struct linux_mib *net_statistics ;
   struct udp_mib *udp_statistics ;
   struct udp_mib *udplite_statistics ;
   struct icmp_mib *icmp_statistics ;
   struct icmpmsg_mib *icmpmsg_statistics ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6 ;
   struct udp_mib *udplite_stats_in6 ;
   struct ipstats_mib *ipv6_statistics ;
   struct icmpv6_mib *icmpv6_statistics ;
   struct icmpv6msg_mib *icmpv6msg_statistics ;
   struct linux_xfrm_mib *xfrm_statistics ;
   struct linux_tls_mib *tls_statistics ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/unix.h"
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/packet.h"
struct netns_packet {
   struct mutex sklist_lock ;
   struct hlist_head sklist ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags;
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct fqdir {
   long high_thresh ;
   long low_thresh ;
   int timeout ;
   int max_dist ;
   struct inet_frags *f ;
   struct net *net ;
   bool dead ;
   struct rhashtable rhashtable ;
   atomic_long_t mem ;
   struct work_struct destroy_work ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v4_compare_key {
   __be32 saddr ;
   __be32 daddr ;
   u32 user ;
   u32 vif ;
   __be16 id ;
   u16 protocol ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v6_compare_key {
   struct in6_addr saddr ;
   struct in6_addr daddr ;
   u32 user ;
   __be32 id ;
   u32 iif ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
union __anonunion_key_565 {
   struct frag_v4_compare_key v4 ;
   struct frag_v6_compare_key v6 ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frag_queue {
   struct rhash_head node ;
   union __anonunion_key_565 key ;
   struct timer_list timer ;
   spinlock_t lock ;
   refcount_t refcnt ;
   struct rb_root rb_fragments ;
   struct sk_buff *fragments_tail ;
   struct sk_buff *last_run_head ;
   ktime_t stamp ;
   int len ;
   int meat ;
   __u8 flags ;
   u16 max_size ;
   struct fqdir *fqdir ;
   struct callback_head rcu ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags {
   unsigned int qsize ;
   void (*constructor)(struct inet_frag_queue *, void *) ;
   void (*destructor)(struct inet_frag_queue *) ;
   void (*frag_expire)(struct timer_list *) ;
   struct kmem_cache *frags_cachep ;
   char *frags_cache_name ;
   struct rhashtable_params rhash_params ;
   refcount_t refcnt ;
   struct completion completion ;
};
#line 177 
struct ipv4_devconf;
#line 179 
struct fib_table;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct local_ports {
   seqlock_t lock ;
   int range[2U] ;
   bool warned ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct ping_group_range {
   seqlock_t lock ;
   kgid_t range[2U] ;
};
#line 31 
struct inet_hashinfo;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct inet_timewait_death_row {
   atomic_t tw_count ;
   struct inet_hashinfo *hashinfo ;
   int sysctl_max_tw_buckets ;
};
#line 40 
struct tcp_fastopen_context;
#line 43 
struct ip_ra_chain;
#line 43 
struct inet_peer_base;
#line 43 
struct xt_table;
#line 43 
struct tcp_congestion_ops;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *xfrm4_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct ip_ra_chain *ra_chain ;
   struct mutex ra_mutex ;
   struct fib_rules_ops *rules_ops ;
   bool fib_has_custom_rules ;
   unsigned int fib_rules_require_fldissect ;
   struct fib_table *fib_main ;
   struct fib_table *fib_default ;
   bool fib_has_custom_local_routes ;
   int fib_num_tclassid_users ;
   struct hlist_head *fib_table_hash ;
   bool fib_offload_disabled ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct inet_peer_base *peers ;
   struct sock **tcp_sk ;
   struct fqdir *fqdir ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   struct local_ports ip_local_ports ;
   int sysctl_tcp_ecn ;
   int sysctl_tcp_ecn_fallback ;
   int sysctl_ip_default_ttl ;
   int sysctl_ip_no_pmtu_disc ;
   int sysctl_ip_fwd_use_pmtu ;
   int sysctl_ip_fwd_update_priority ;
   int sysctl_ip_nonlocal_bind ;
   int sysctl_ip_dynaddr ;
   int sysctl_ip_early_demux ;
   int sysctl_raw_l3mdev_accept ;
   int sysctl_tcp_early_demux ;
   int sysctl_udp_early_demux ;
   int sysctl_fwmark_reflect ;
   int sysctl_tcp_fwmark_accept ;
   int sysctl_tcp_l3mdev_accept ;
   int sysctl_tcp_mtu_probing ;
   int sysctl_tcp_mtu_probe_floor ;
   int sysctl_tcp_base_mss ;
   int sysctl_tcp_min_snd_mss ;
   int sysctl_tcp_probe_threshold ;
   u32 sysctl_tcp_probe_interval ;
   int sysctl_tcp_keepalive_time ;
   int sysctl_tcp_keepalive_probes ;
   int sysctl_tcp_keepalive_intvl ;
   int sysctl_tcp_syn_retries ;
   int sysctl_tcp_synack_retries ;
   int sysctl_tcp_syncookies ;
   int sysctl_tcp_reordering ;
   int sysctl_tcp_retries1 ;
   int sysctl_tcp_retries2 ;
   int sysctl_tcp_orphan_retries ;
   int sysctl_tcp_fin_timeout ;
   unsigned int sysctl_tcp_notsent_lowat ;
   int sysctl_tcp_tw_reuse ;
   int sysctl_tcp_sack ;
   int sysctl_tcp_window_scaling ;
   int sysctl_tcp_timestamps ;
   int sysctl_tcp_early_retrans ;
   int sysctl_tcp_recovery ;
   int sysctl_tcp_thin_linear_timeouts ;
   int sysctl_tcp_slow_start_after_idle ;
   int sysctl_tcp_retrans_collapse ;
   int sysctl_tcp_stdurg ;
   int sysctl_tcp_rfc1337 ;
   int sysctl_tcp_abort_on_overflow ;
   int sysctl_tcp_fack ;
   int sysctl_tcp_max_reordering ;
   int sysctl_tcp_dsack ;
   int sysctl_tcp_app_win ;
   int sysctl_tcp_adv_win_scale ;
   int sysctl_tcp_frto ;
   int sysctl_tcp_nometrics_save ;
   int sysctl_tcp_moderate_rcvbuf ;
   int sysctl_tcp_tso_win_divisor ;
   int sysctl_tcp_workaround_signed_windows ;
   int sysctl_tcp_limit_output_bytes ;
   int sysctl_tcp_challenge_ack_limit ;
   int sysctl_tcp_min_tso_segs ;
   int sysctl_tcp_min_rtt_wlen ;
   int sysctl_tcp_autocorking ;
   int sysctl_tcp_invalid_ratelimit ;
   int sysctl_tcp_pacing_ss_ratio ;
   int sysctl_tcp_pacing_ca_ratio ;
   int sysctl_tcp_wmem[3U] ;
   int sysctl_tcp_rmem[3U] ;
   int sysctl_tcp_comp_sack_nr ;
   unsigned long sysctl_tcp_comp_sack_delay_ns ;
   struct inet_timewait_death_row tcp_death_row ;
   int sysctl_max_syn_backlog ;
   int sysctl_tcp_fastopen ;
   struct tcp_congestion_ops *tcp_congestion_control ;
   struct tcp_fastopen_context *tcp_fastopen_ctx ;
   spinlock_t tcp_fastopen_ctx_lock ;
   unsigned int sysctl_tcp_fastopen_blackhole_timeout ;
   atomic_t tfo_active_disable_times ;
   unsigned long tfo_active_disable_stamp ;
   int sysctl_udp_wmem_min ;
   int sysctl_udp_rmem_min ;
   int sysctl_udp_l3mdev_accept ;
   int sysctl_igmp_max_memberships ;
   int sysctl_igmp_max_msf ;
   int sysctl_igmp_llm_reports ;
   int sysctl_igmp_qrv ;
   struct ping_group_range ping_group_range ;
   atomic_t dev_addr_genid ;
   unsigned long *sysctl_local_reserved_ports ;
   int sysctl_ip_prot_sock ;
   struct list_head mr_tables ;
   struct fib_rules_ops *mr_rules_ops ;
   int sysctl_fib_multipath_use_neigh ;
   int sysctl_fib_multipath_hash_policy ;
   struct fib_notifier_ops *notifier_ops ;
   unsigned int fib_seq ;
   struct fib_notifier_ops *ipmr_notifier_ops ;
   unsigned int ipmr_seq ;
   atomic_t rt_genid ;
   siphash_key_t ip_id_key ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst_ops.h"
struct dst_ops {
   unsigned short family ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops *) ;
   struct dst_entry *(*check)(struct dst_entry *, __u32 ) ;
   unsigned int (*default_advmss)(struct dst_entry *) ;
   unsigned int (*mtu)(struct dst_entry *) ;
   u32 *(*cow_metrics)(struct dst_entry *, unsigned long ) ;
   void (*destroy)(struct dst_entry *) ;
   void (*ifdown)(struct dst_entry *, struct net_device *, int ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry *) ;
   void (*link_failure)(struct sk_buff *) ;
   void (*update_pmtu)(struct dst_entry *, struct sock *, struct sk_buff *, u32 , bool ) ;
   void (*redirect)(struct dst_entry *, struct sock *, struct sk_buff *) ;
   int (*local_out)(struct net *, struct sock *, struct sk_buff *) ;
   struct neighbour *(*neigh_lookup)(struct dst_entry *, struct sk_buff *, void *) ;
   void (*confirm_neigh)(struct dst_entry *, void *) ;
   struct kmem_cache *kmem_cachep ;
   struct percpu_counter pcpuc_entries ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_sysctl_ipv6 {
   struct ctl_table_header *hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *icmp_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *xfrm6_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int multipath_hash_policy ;
   int flowlabel_consistency ;
   int auto_flowlabels ;
   int icmpv6_time ;
   int icmpv6_echo_ignore_all ;
   int icmpv6_echo_ignore_multicast ;
   int icmpv6_echo_ignore_anycast ;
   unsigned long icmpv6_ratemask[4U] ;
   unsigned long *icmpv6_ratemask_ptr ;
   int anycast_src_echo_reply ;
   int ip_nonlocal_bind ;
   int fwmark_reflect ;
   int idgen_retries ;
   int idgen_delay ;
   int flowlabel_state_ranges ;
   int flowlabel_reflect ;
   int max_dst_opts_cnt ;
   int max_hbh_opts_cnt ;
   int max_dst_opts_len ;
   int max_hbh_opts_len ;
   int seg6_flowlabel ;
   bool skip_notify_on_dev_down ;
};
#line 56 
struct fib6_info;
#line 56 
struct rt6_info;
#line 56 
struct rt6_statistics;
#line 56 
struct fib6_table;
#line 56 
struct seg6_pernet_data;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct __anonstruct_ip6addrlbl_table_567 {
   struct hlist_head head ;
   spinlock_t lock ;
   u32 seq ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct inet_peer_base *peers ;
   struct fqdir *fqdir ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct xt_table *ip6table_nat ;
   struct fib6_info *fib6_null_entry ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct list_head fib6_walkers ;
   struct dst_ops ip6_dst_ops ;
   rwlock_t fib6_walker_lock ;
   spinlock_t fib6_gc_lock ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   unsigned int fib6_rules_require_fldissect ;
   bool fib6_has_custom_rules ;
   unsigned int fib6_routes_require_src ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct list_head mr6_tables ;
   struct fib_rules_ops *mr6_rules_ops ;
   atomic_t dev_addr_genid ;
   atomic_t fib6_sernum ;
   struct seg6_pernet_data *seg6_data ;
   struct fib_notifier_ops *notifier_ops ;
   struct fib_notifier_ops *ip6mr_notifier_ops ;
   unsigned int ipmr_seq ;
   struct __anonstruct_ip6addrlbl_table_567 ip6addrlbl_table ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_nf_frag {
   struct fqdir *fqdir ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nexthop.h"
struct netns_nexthop {
   struct rb_root rb_root ;
   struct hlist_head *devhash ;
   unsigned int seq ;
   u32 last_id_allocated ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_sysctl_lowpan {
   struct ctl_table_header *frags_hdr ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_ieee802154_lowpan {
   struct netns_sysctl_lowpan sysctl ;
   struct fqdir *fqdir ;
};
#line 21 
struct sctp_mib;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/sctp.h"
struct netns_sctp {
   struct sctp_mib *sctp_statistics ;
   struct proc_dir_entry *proc_net_sctp ;
   struct ctl_table_header *sysctl_header ;
   struct sock *ctl_sock ;
   struct list_head local_addr_list ;
   struct list_head addr_waitq ;
   struct timer_list addr_wq_timer ;
   struct list_head auto_asconf_splist ;
   spinlock_t addr_wq_lock ;
   spinlock_t local_addr_lock ;
   unsigned int rto_initial ;
   unsigned int rto_min ;
   unsigned int rto_max ;
   int rto_alpha ;
   int rto_beta ;
   int max_burst ;
   int cookie_preserve_enable ;
   char *sctp_hmac_alg ;
   unsigned int valid_cookie_life ;
   unsigned int sack_timeout ;
   unsigned int hb_interval ;
   int max_retrans_association ;
   int max_retrans_path ;
   int max_retrans_init ;
   int pf_retrans ;
   int ps_retrans ;
   int pf_enable ;
   int pf_expose ;
   int sndbuf_policy ;
   int rcvbuf_policy ;
   int default_auto_asconf ;
   int addip_enable ;
   int addip_noauth ;
   int prsctp_enable ;
   int reconf_enable ;
   int auth_enable ;
   int intl_enable ;
   int ecn_enable ;
   int scope_policy ;
   int rwnd_upd_shift ;
   unsigned long max_autoclose ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/dccp.h"
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netfilter.h"
struct nf_logger;
#line 76 
struct nf_queue_handler;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct nf_hook_entries;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct netns_nf {
   struct proc_dir_entry *proc_netfilter ;
   struct nf_queue_handler *queue_handler ;
   struct nf_logger *nf_loggers[13U] ;
   struct ctl_table_header *nf_log_dir_header ;
   struct nf_hook_entries *hooks_ipv4[5U] ;
   struct nf_hook_entries *hooks_ipv6[5U] ;
   struct nf_hook_entries *hooks_arp[3U] ;
   struct nf_hook_entries *hooks_bridge[5U] ;
   struct nf_hook_entries *hooks_decnet[7U] ;
   bool defrag_ipv4 ;
   bool defrag_ipv6 ;
};
#line 37 
struct ebt_table;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/x_tables.h"
struct netns_xt {
   struct list_head tables[13U] ;
   bool notrack_deprecated_warning ;
   bool clusterip_deprecated_warning ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_head {
   struct hlist_nulls_node *first ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_generic_net {
   unsigned int timeout ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_tcp_net {
   unsigned int timeouts[14U] ;
   int tcp_loose ;
   int tcp_be_liberal ;
   int tcp_max_retrans ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_udp_net {
   unsigned int timeouts[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_icmp_net {
   unsigned int timeout ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_dccp_net {
   int dccp_loose ;
   unsigned int dccp_timeout[10U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_sctp_net {
   unsigned int timeouts[10U] ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_gre_net {
   struct list_head keymap_list ;
   unsigned int timeouts[2U] ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_ip_net {
   struct nf_generic_net generic ;
   struct nf_tcp_net tcp ;
   struct nf_udp_net udp ;
   struct nf_icmp_net icmp ;
   struct nf_icmp_net icmpv6 ;
   struct nf_dccp_net dccp ;
   struct nf_sctp_net sctp ;
   struct nf_gre_net gre ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct ct_pcpu {
   spinlock_t lock ;
   struct hlist_nulls_head unconfirmed ;
   struct hlist_nulls_head dying ;
};
#line 95 
struct nf_ct_event_notifier;
#line 95 
struct nf_exp_event_notifier;
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   struct delayed_work ecache_dwork ;
   bool ecache_dwork_pending ;
   bool auto_assign_helper_warned ;
   struct ctl_table_header *sysctl_header ;
   unsigned int sysctl_log_invalid ;
   int sysctl_events ;
   int sysctl_acct ;
   int sysctl_auto_assign_helper ;
   int sysctl_tstamp ;
   int sysctl_checksum ;
   struct ct_pcpu *pcpu_lists ;
   struct ip_conntrack_stat *stat ;
   struct nf_ct_event_notifier *nf_conntrack_event_cb ;
   struct nf_exp_event_notifier *nf_expect_event_cb ;
   struct nf_ip_net nf_ct_proto ;
   unsigned int labels_used ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nftables.h"
struct netns_nftables {
   struct list_head tables ;
   struct list_head commit_list ;
   struct list_head module_list ;
   struct mutex commit_mutex ;
   unsigned int base_seq ;
   u8 gencursor ;
   u8 validate_state ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
   u8 dbits4 ;
   u8 sbits4 ;
   u8 dbits6 ;
   u8 sbits6 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hthresh {
   struct work_struct work ;
   seqlock_t lock ;
   u8 lbits4 ;
   u8 rbits4 ;
   u8 lbits6 ;
   u8 rbits6 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[3U] ;
   struct xfrm_policy_hash policy_bydst[3U] ;
   unsigned int policy_count[6U] ;
   struct work_struct policy_hash_work ;
   struct xfrm_policy_hthresh policy_hthresh ;
   struct list_head inexact_bins ;
   struct sock *nlsk ;
   struct sock *nlsk_stash ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
   struct dst_ops xfrm4_dst_ops ;
   struct dst_ops xfrm6_dst_ops ;
   spinlock_t xfrm_state_lock ;
   spinlock_t xfrm_policy_lock ;
   struct mutex xfrm_cfg_mutex ;
};
#line 79 
struct mpls_route;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mpls.h"
struct netns_mpls {
   int ip_ttl_propagate ;
   int default_ttl ;
   size_t platform_labels ;
   struct mpls_route **platform_label ;
   struct ctl_table_header *ctl ;
};
#line 20 
struct can_dev_rcv_lists;
#line 21 
struct can_pkg_stats;
#line 22 
struct can_rcv_lists_stats;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/can.h"
struct netns_can {
   struct proc_dir_entry *proc_dir ;
   struct proc_dir_entry *pde_version ;
   struct proc_dir_entry *pde_stats ;
   struct proc_dir_entry *pde_reset_stats ;
   struct proc_dir_entry *pde_rcvlist_all ;
   struct proc_dir_entry *pde_rcvlist_fil ;
   struct proc_dir_entry *pde_rcvlist_inv ;
   struct proc_dir_entry *pde_rcvlist_sff ;
   struct proc_dir_entry *pde_rcvlist_eff ;
   struct proc_dir_entry *pde_rcvlist_err ;
   struct proc_dir_entry *bcmproc_dir ;
   struct can_dev_rcv_lists *rx_alldev_list ;
   spinlock_t rcvlists_lock ;
   struct timer_list stattimer ;
   struct can_pkg_stats *pkg_stats ;
   struct can_rcv_lists_stats *rcv_lists_stats ;
   struct hlist_head cgw_list ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xdp.h"
struct netns_xdp {
   struct mutex lock ;
   struct hlist_head list ;
};
#line 12 
struct proc_ns_operations;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ns_common.h"
struct ns_common {
   atomic_long_t stashed ;
   struct proc_ns_operations *ops ;
   unsigned int inum ;
};
#line 12 
struct net_generic;
#line 13 
struct uevent_sock;
#line 14 
struct netns_ipvs;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct key_tag;
#line 55 
struct ucounts;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct net {
   refcount_t passive ;
   refcount_t count ;
   spinlock_t rules_mod_lock ;
   unsigned int dev_unreg_count ;
   unsigned int dev_base_seq ;
   int ifindex ;
   spinlock_t nsid_lock ;
   atomic_t fnhe_genid ;
   struct list_head list ;
   struct list_head exit_list ;
   struct llist_node cleanup_list ;
   struct key_tag *key_domain ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct idr netns_ids ;
   struct ns_common ns ;
   struct list_head dev_base_head ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct sock *rtnl ;
   struct sock *genl_sock ;
   struct uevent_sock *uevent_sock ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   struct raw_notifier_head netdev_chain ;
   u32 hash_mix ;
   struct net_device *loopback_dev ;
   struct list_head rules_ops ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_nexthop nexthop ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_ieee802154_lowpan ieee802154_lowpan ;
   struct netns_sctp sctp ;
   struct netns_dccp dccp ;
   struct netns_nf nf ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct netns_nftables nft ;
   struct netns_nf_frag nf_frag ;
   struct ctl_table_header *nf_frag_frags_hdr ;
   struct sock *nfnl ;
   struct sock *nfnl_stash ;
   struct list_head nfnl_acct_list ;
   struct list_head nfct_timeout_list ;
   struct sk_buff_head wext_nlevents ;
   struct net_generic *gen ;
   struct bpf_prog *flow_dissector_prog ;
   struct netns_xfrm xfrm ;
   struct netns_ipvs *ipvs ;
   struct netns_mpls mpls ;
   struct netns_can can ;
   struct netns_xdp xdp ;
   struct sock *crypto_nlsk ;
   struct sock *diag_nlsk ;
} __attribute__((__designated_init__));
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array_ptr;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array {
   struct assoc_array_ptr *root ;
   unsigned long nr_leaves_on_tree ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
typedef int32_t key_serial_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
typedef uint32_t key_perm_t;
#line 32 
struct key_type;
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_tag {
   struct callback_head rcu ;
   refcount_t usage ;
   bool removed ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_580 {
   u16 desc_len ;
   char desc[6U] ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_579 {
   struct __anonstruct_580 __anonCompField___anonunion_579_102 ;
   unsigned long x ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct keyring_index_key {
   unsigned long hash ;
   union __anonunion_579 __anonCompField_keyring_index_key_103 ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union key_payload {
   void *rcu_data0 ;
   void *data[4U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_restriction {
   int (*check)(struct key *, struct key_type *, union key_payload *, struct key *) ;
   struct key *key ;
   struct key_type *keytype ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_581 {
   struct list_head graveyard_link ;
   struct rb_node serial_node ;
};
#line 172 
struct key_user;
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_582 {
   time64_t expiry ;
   time64_t revoked_at ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_584 {
   unsigned long hash ;
   unsigned long len_desc ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_583 {
   struct keyring_index_key index_key ;
   struct __anonstruct_584 __anonCompField___anonunion_583_106 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_586 {
   struct list_head name_link ;
   struct assoc_array keys ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_585 {
   union key_payload payload ;
   struct __anonstruct_586 __anonCompField___anonunion_585_108 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key {
   refcount_t usage ;
   key_serial_t serial ;
   union __anonunion_581 __anonCompField_key_104 ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_582 __anonCompField_key_105 ;
   time64_t last_used_at ;
   kuid_t uid ;
   kgid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   short state ;
   unsigned long flags ;
   union __anonunion_583 __anonCompField_key_107 ;
   union __anonunion_585 __anonCompField_key_109 ;
   struct key_restriction *restrict_link ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/user.h"
struct user_struct {
   refcount_t __count ;
   atomic_t processes ;
   atomic_t sigpending ;
   atomic_t fanotify_listeners ;
   atomic_long_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   unsigned long unix_inflight ;
   atomic_long_t pipe_bufs ;
   struct hlist_node uidhash_node ;
   kuid_t uid ;
   atomic_long_t locked_vm ;
   struct ratelimit_state ratelimit ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   kgid_t gid[0U] ;
} __attribute__((__designated_init__));
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
union __anonunion_589 {
   int non_rcu ;
   struct callback_head rcu ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   kuid_t uid ;
   kgid_t gid ;
   kuid_t suid ;
   kgid_t sgid ;
   kuid_t euid ;
   kgid_t egid ;
   kuid_t fsuid ;
   kgid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   kernel_cap_t cap_ambient ;
   unsigned char jit_keyring ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   void *security ;
   struct user_struct *user ;
   struct user_namespace *user_ns ;
   struct group_info *group_info ;
   union __anonunion_589 __anonCompField_cred_110 ;
} __attribute__((__designated_init__));
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   size_t pad_until ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations *op ;
   int poll_event ;
   struct file *file ;
   void *private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_operations {
   void *(*start)(struct seq_file *, loff_t *) ;
   void (*stop)(struct seq_file *, void *) ;
   void *(*next)(struct seq_file *, void *, loff_t *) ;
   int (*show)(struct seq_file *, void *) ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct __anonstruct_possible_net_t_590 {
   struct net *net ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
typedef struct __anonstruct_possible_net_t_590 possible_net_t;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_ets {
   __u8 willing ;
   __u8 ets_cap ;
   __u8 cbs ;
   __u8 tc_tx_bw[8U] ;
   __u8 tc_rx_bw[8U] ;
   __u8 tc_tsa[8U] ;
   __u8 prio_tc[8U] ;
   __u8 tc_reco_bw[8U] ;
   __u8 tc_reco_tsa[8U] ;
   __u8 reco_prio_tc[8U] ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_maxrate {
   __u64 tc_maxrate[8U] ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn {
   __u8 rpg_enable[8U] ;
   __u32 rppp_max_rps[8U] ;
   __u32 rpg_time_reset[8U] ;
   __u32 rpg_byte_reset[8U] ;
   __u32 rpg_threshold[8U] ;
   __u32 rpg_max_rate[8U] ;
   __u32 rpg_ai_rate[8U] ;
   __u32 rpg_hai_rate[8U] ;
   __u32 rpg_gd[8U] ;
   __u32 rpg_min_dec_fac[8U] ;
   __u32 rpg_min_rate[8U] ;
   __u32 cndd_state_machine[8U] ;
};
#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn_stats {
   __u64 rppp_rp_centiseconds[8U] ;
   __u32 rppp_created_rps[8U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_pfc {
   __u8 pfc_cap ;
   __u8 pfc_en ;
   __u8 mbc ;
   __u16 delay ;
   __u64 requests[8U] ;
   __u64 indications[8U] ;
};
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcbnl_buffer {
   __u8 prio2buffer[8U] ;
   __u32 buffer_size[8U] ;
   __u32 total_size ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pg {
   __u8 willing ;
   __u8 error ;
   __u8 pg_en ;
   __u8 tcs_supported ;
   __u8 pg_bw[8U] ;
   __u8 prio_pg[8U] ;
};
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pfc {
   __u8 willing ;
   __u8 error ;
   __u8 pfc_en ;
   __u8 tcs_supported ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_app {
   __u8 selector ;
   __u8 priority ;
   __u16 protocol ;
};
#line 259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_peer_app_info {
   __u8 willing ;
   __u8 error ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dcbnl.h"
struct dcbnl_rtnl_ops {
   int (*ieee_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_setets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_getmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_setmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_getqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_setqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_getqcnstats)(struct net_device *, struct ieee_qcn_stats *) ;
   int (*ieee_getpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_setpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_getapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_setapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_delapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_peer_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_peer_getpfc)(struct net_device *, struct ieee_pfc *) ;
   u8 (*getstate)(struct net_device *) ;
   u8 (*setstate)(struct net_device *, u8 ) ;
   void (*getpermhwaddr)(struct net_device *, u8 *) ;
   void (*setpgtccfgtx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgtx)(struct net_device *, int , u8 ) ;
   void (*setpgtccfgrx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgrx)(struct net_device *, int , u8 ) ;
   void (*getpgtccfgtx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgtx)(struct net_device *, int , u8 *) ;
   void (*getpgtccfgrx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgrx)(struct net_device *, int , u8 *) ;
   void (*setpfccfg)(struct net_device *, int , u8 ) ;
   void (*getpfccfg)(struct net_device *, int , u8 *) ;
   u8 (*setall)(struct net_device *) ;
   u8 (*getcap)(struct net_device *, int , u8 *) ;
   int (*getnumtcs)(struct net_device *, int , u8 *) ;
   int (*setnumtcs)(struct net_device *, int , u8 ) ;
   u8 (*getpfcstate)(struct net_device *) ;
   void (*setpfcstate)(struct net_device *, u8 ) ;
   void (*getbcncfg)(struct net_device *, int , u32 *) ;
   void (*setbcncfg)(struct net_device *, int , u32 ) ;
   void (*getbcnrp)(struct net_device *, int , u8 *) ;
   void (*setbcnrp)(struct net_device *, int , u8 ) ;
   int (*setapp)(struct net_device *, u8 , u16 , u8 ) ;
   int (*getapp)(struct net_device *, u8 , u16 ) ;
   u8 (*getfeatcfg)(struct net_device *, int , u8 *) ;
   u8 (*setfeatcfg)(struct net_device *, int , u8 ) ;
   u8 (*getdcbx)(struct net_device *) ;
   u8 (*setdcbx)(struct net_device *, u8 ) ;
   int (*peer_getappinfo)(struct net_device *, struct dcb_peer_app_info *, u16 *) ;
   int (*peer_getapptable)(struct net_device *, struct dcb_app *) ;
   int (*cee_peer_getpg)(struct net_device *, struct cee_pg *) ;
   int (*cee_peer_getpfc)(struct net_device *, struct cee_pfc *) ;
   int (*dcbnl_getbuffer)(struct net_device *, struct dcbnl_buffer *) ;
   int (*dcbnl_setbuffer)(struct net_device *, struct dcbnl_buffer *) ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/taskstats.h"
struct taskstats {
   __u16 version ;
   __u32 ac_exitcode ;
   __u8 ac_flag ;
   __u8 ac_nice ;
   __u64 cpu_count ;
   __u64 cpu_delay_total ;
   __u64 blkio_count ;
   __u64 blkio_delay_total ;
   __u64 swapin_count ;
   __u64 swapin_delay_total ;
   __u64 cpu_run_real_total ;
   __u64 cpu_run_virtual_total ;
   char ac_comm[32U] ;
   __u8 ac_sched ;
   __u8 ac_pad[3U] ;
   __u32 ac_uid ;
   __u32 ac_gid ;
   __u32 ac_pid ;
   __u32 ac_ppid ;
   __u32 ac_btime ;
   __u64 ac_etime ;
   __u64 ac_utime ;
   __u64 ac_stime ;
   __u64 ac_minflt ;
   __u64 ac_majflt ;
   __u64 coremem ;
   __u64 virtmem ;
   __u64 hiwater_rss ;
   __u64 hiwater_vm ;
   __u64 read_char ;
   __u64 write_char ;
   __u64 read_syscalls ;
   __u64 write_syscalls ;
   __u64 read_bytes ;
   __u64 write_bytes ;
   __u64 cancelled_write_bytes ;
   __u64 nvcsw ;
   __u64 nivcsw ;
   __u64 ac_utimescaled ;
   __u64 ac_stimescaled ;
   __u64 cpu_scaled_run_real_total ;
   __u64 freepages_count ;
   __u64 freepages_delay_total ;
   __u64 thrashing_count ;
   __u64 thrashing_delay_total ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/cgroupstats.h"
struct mnt_namespace;
#line 60 
struct uts_namespace;
#line 61 
struct ipc_namespace;
#line 62 
struct cgroup_namespace;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nsproxy.h"
struct nsproxy {
   atomic_t count ;
   struct uts_namespace *uts_ns ;
   struct ipc_namespace *ipc_ns ;
   struct mnt_namespace *mnt_ns ;
   struct pid_namespace *pid_ns_for_children ;
   struct net *net_ns ;
   struct cgroup_namespace *cgroup_ns ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_extent {
   u32 first ;
   u32 lower_first ;
   u32 count ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct __anonstruct_592 {
   struct uid_gid_extent *forward ;
   struct uid_gid_extent *reverse ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
union __anonunion_591 {
   struct uid_gid_extent extent[5U] ;
   struct __anonstruct_592 __anonCompField___anonunion_591_111 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_map {
   u32 nr_extents ;
   union __anonunion_591 __anonCompField_uid_gid_map_112 ;
};
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct user_namespace {
   struct uid_gid_map uid_map ;
   struct uid_gid_map gid_map ;
   struct uid_gid_map projid_map ;
   atomic_t count ;
   struct user_namespace *parent ;
   int level ;
   kuid_t owner ;
   kgid_t group ;
   struct ns_common ns ;
   unsigned long flags ;
   struct list_head keyring_name_list ;
   struct key *user_keyring_register ;
   struct rw_semaphore keyring_sem ;
   struct key *persistent_keyring_register ;
   struct work_struct work ;
   struct ctl_table_set set ;
   struct ctl_table_header *sysctls ;
   struct ucounts *ucounts ;
   int ucount_max[9U] ;
} __attribute__((__designated_init__));
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct ucounts {
   struct hlist_node node ;
   struct user_namespace *ns ;
   kuid_t uid ;
   int count ;
   atomic_t ucount[9U] ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_insn {
   __u8 code ;
   __u8 dst_reg : 4 ;
   __u8 src_reg : 4 ;
   __s16 off ;
   __s32 imm ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_cgroup_storage_key {
   __u64 cgroup_inode_id ;
   __u32 attach_type ;
};
#line 110 
enum bpf_map_type {
    BPF_MAP_TYPE_UNSPEC = 0,
    BPF_MAP_TYPE_HASH = 1,
    BPF_MAP_TYPE_ARRAY = 2,
    BPF_MAP_TYPE_PROG_ARRAY = 3,
    BPF_MAP_TYPE_PERF_EVENT_ARRAY = 4,
    BPF_MAP_TYPE_PERCPU_HASH = 5,
    BPF_MAP_TYPE_PERCPU_ARRAY = 6,
    BPF_MAP_TYPE_STACK_TRACE = 7,
    BPF_MAP_TYPE_CGROUP_ARRAY = 8,
    BPF_MAP_TYPE_LRU_HASH = 9,
    BPF_MAP_TYPE_LRU_PERCPU_HASH = 10,
    BPF_MAP_TYPE_LPM_TRIE = 11,
    BPF_MAP_TYPE_ARRAY_OF_MAPS = 12,
    BPF_MAP_TYPE_HASH_OF_MAPS = 13,
    BPF_MAP_TYPE_DEVMAP = 14,
    BPF_MAP_TYPE_SOCKMAP = 15,
    BPF_MAP_TYPE_CPUMAP = 16,
    BPF_MAP_TYPE_XSKMAP = 17,
    BPF_MAP_TYPE_SOCKHASH = 18,
    BPF_MAP_TYPE_CGROUP_STORAGE = 19,
    BPF_MAP_TYPE_REUSEPORT_SOCKARRAY = 20,
    BPF_MAP_TYPE_PERCPU_CGROUP_STORAGE = 21,
    BPF_MAP_TYPE_QUEUE = 22,
    BPF_MAP_TYPE_STACK = 23,
    BPF_MAP_TYPE_SK_STORAGE = 24,
    BPF_MAP_TYPE_DEVMAP_HASH = 25
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_594 {
   __u32 map_type ;
   __u32 key_size ;
   __u32 value_size ;
   __u32 max_entries ;
   __u32 map_flags ;
   __u32 inner_map_fd ;
   __u32 numa_node ;
   char map_name[16U] ;
   __u32 map_ifindex ;
   __u32 btf_fd ;
   __u32 btf_key_type_id ;
   __u32 btf_value_type_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_596 {
   __u64 value ;
   __u64 next_key ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_595 {
   __u32 map_fd ;
   __u64 key ;
   union __anonunion_596 __anonCompField___anonstruct_595_115 ;
   __u64 flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_597 {
   __u32 prog_type ;
   __u32 insn_cnt ;
   __u64 insns ;
   __u64 license ;
   __u32 log_level ;
   __u32 log_size ;
   __u64 log_buf ;
   __u32 kern_version ;
   __u32 prog_flags ;
   char prog_name[16U] ;
   __u32 prog_ifindex ;
   __u32 expected_attach_type ;
   __u32 prog_btf_fd ;
   __u32 func_info_rec_size ;
   __u64 func_info ;
   __u32 func_info_cnt ;
   __u32 line_info_rec_size ;
   __u64 line_info ;
   __u32 line_info_cnt ;
   __u32 attach_btf_id ;
   __u32 attach_prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_598 {
   __u64 pathname ;
   __u32 bpf_fd ;
   __u32 file_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_599 {
   __u32 target_fd ;
   __u32 attach_bpf_fd ;
   __u32 attach_type ;
   __u32 attach_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_test_600 {
   __u32 prog_fd ;
   __u32 retval ;
   __u32 data_size_in ;
   __u32 data_size_out ;
   __u64 data_in ;
   __u64 data_out ;
   __u32 repeat ;
   __u32 duration ;
   __u32 ctx_size_in ;
   __u32 ctx_size_out ;
   __u64 ctx_in ;
   __u64 ctx_out ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_602 {
   __u32 start_id ;
   __u32 prog_id ;
   __u32 map_id ;
   __u32 btf_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_601 {
   union __anonunion_602 __anonCompField___anonstruct_601_120 ;
   __u32 next_id ;
   __u32 open_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_info_603 {
   __u32 bpf_fd ;
   __u32 info_len ;
   __u64 info ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_query_604 {
   __u32 target_fd ;
   __u32 attach_type ;
   __u32 query_flags ;
   __u32 attach_flags ;
   __u64 prog_ids ;
   __u32 prog_cnt ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_raw_tracepoint_605 {
   __u64 name ;
   __u32 prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_606 {
   __u64 btf ;
   __u64 btf_log_buf ;
   __u32 btf_size ;
   __u32 btf_log_size ;
   __u32 btf_log_level ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_task_fd_query_607 {
   __u32 pid ;
   __u32 fd ;
   __u32 flags ;
   __u32 buf_len ;
   __u64 buf ;
   __u32 prog_id ;
   __u32 fd_type ;
   __u64 probe_offset ;
   __u64 probe_addr ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union bpf_attr {
   struct __anonstruct_594 __anonCompField_bpf_attr_114 ;
   struct __anonstruct_595 __anonCompField_bpf_attr_116 ;
   struct __anonstruct_597 __anonCompField_bpf_attr_117 ;
   struct __anonstruct_598 __anonCompField_bpf_attr_118 ;
   struct __anonstruct_599 __anonCompField_bpf_attr_119 ;
   struct __anonstruct_test_600 test ;
   struct __anonstruct_601 __anonCompField_bpf_attr_121 ;
   struct __anonstruct_info_603 info ;
   struct __anonstruct_query_604 query ;
   struct __anonstruct_raw_tracepoint_605 raw_tracepoint ;
   struct __anonstruct_606 __anonCompField_bpf_attr_122 ;
   struct __anonstruct_task_fd_query_607 task_fd_query ;
} __attribute__((__aligned__(8)));
#line 3653  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_func_info {
   __u32 insn_off ;
   __u32 type_id ;
};
#line 3661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_line_info {
   __u32 insn_off ;
   __u32 file_name_off ;
   __u32 line_off ;
   __u32 line_col ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree_latch.h"
struct latch_tree_node {
   struct rb_node node[2U] ;
};
#line 215 
struct bpf_prog_aux;
#line 216 
struct bpf_map;
#line 217 
struct btf;
#line 218 
struct btf_type;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_ops {
   int (*map_alloc_check)(union bpf_attr *) ;
   struct bpf_map *(*map_alloc)(union bpf_attr *) ;
   void (*map_release)(struct bpf_map *, struct file *) ;
   void (*map_free)(struct bpf_map *) ;
   int (*map_get_next_key)(struct bpf_map *, void *, void *) ;
   void (*map_release_uref)(struct bpf_map *) ;
   void *(*map_lookup_elem_sys_only)(struct bpf_map *, void *) ;
   void *(*map_lookup_elem)(struct bpf_map *, void *) ;
   int (*map_update_elem)(struct bpf_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_map *, void *) ;
   int (*map_push_elem)(struct bpf_map *, void *, u64 ) ;
   int (*map_pop_elem)(struct bpf_map *, void *) ;
   int (*map_peek_elem)(struct bpf_map *, void *) ;
   void *(*map_fd_get_ptr)(struct bpf_map *, struct file *, int ) ;
   void (*map_fd_put_ptr)(void *) ;
   u32 (*map_gen_lookup)(struct bpf_map *, struct bpf_insn *) ;
   u32 (*map_fd_sys_lookup_elem)(void *) ;
   void (*map_seq_show_elem)(struct bpf_map *, void *, struct seq_file *) ;
   int (*map_check_btf)(struct bpf_map *, struct btf *, struct btf_type *, struct btf_type *) ;
   int (*map_poke_track)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_untrack)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_run)(struct bpf_map *, u32 , struct bpf_prog *, struct bpf_prog *) ;
   int (*map_direct_value_addr)(struct bpf_map *, u64 *, u32 ) ;
   int (*map_direct_value_meta)(struct bpf_map *, u64 , u32 *) ;
   int (*map_mmap)(struct bpf_map *, struct vm_area_struct *) ;
};
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_memory {
   u32 pages ;
   struct user_struct *user ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map {
   struct bpf_map_ops *ops ;
   struct bpf_map *inner_map_meta ;
   void *security ;
   enum bpf_map_type map_type ;
   u32 key_size ;
   u32 value_size ;
   u32 max_entries ;
   u32 map_flags ;
   int spin_lock_off ;
   u32 id ;
   int numa_node ;
   u32 btf_key_type_id ;
   u32 btf_value_type_id ;
   struct btf *btf ;
   struct bpf_map_memory memory ;
   char name[16U] ;
   bool unpriv_array ;
   bool frozen ;
   atomic64_t refcnt ;
   atomic64_t usercnt ;
   struct work_struct work ;
   struct mutex freeze_mutex ;
   u64 writecnt ;
};
#line 151 
struct bpf_offload_dev;
#line 152 
struct bpf_offloaded_map;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_dev_ops {
   int (*map_get_next_key)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_lookup_elem)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_update_elem)(struct bpf_offloaded_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_offloaded_map *, void *) ;
};
#line 166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_offloaded_map {
   struct bpf_map map ;
   struct net_device *netdev ;
   struct bpf_map_dev_ops *dev_ops ;
   void *dev_priv ;
   struct list_head offloads ;
};
#line 327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_ops {
   int (*test_run)(struct bpf_prog *, union bpf_attr *, union bpf_attr *) ;
};
#line 369  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_offload {
   struct bpf_prog *prog ;
   struct net_device *netdev ;
   struct bpf_offload_dev *offdev ;
   void *dev_priv ;
   struct list_head offloads ;
   bool dev_state ;
   bool opt_failed ;
   void *jited_image ;
   u32 jited_len ;
};
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_stats {
   u64 cnt ;
   u64 nsecs ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct btf_func_model {
   u8 ret_size ;
   u8 nr_args ;
   u8 arg_size[12U] ;
};
#line 447 
enum bpf_tramp_prog_type {
    BPF_TRAMP_FENTRY = 0,
    BPF_TRAMP_FEXIT = 1,
    BPF_TRAMP_MAX = 2
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_func_640 {
   struct btf_func_model model ;
   void *addr ;
   bool ftrace_managed ;
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_trampoline {
   struct hlist_node hlist ;
   struct mutex mutex ;
   refcount_t refcnt ;
   u64 key ;
   struct __anonstruct_func_640 func ;
   struct hlist_head progs_hlist[2U] ;
   int progs_cnt[2U] ;
   void *image ;
   u64 selector ;
};
#line 495  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_func_info_aux {
   bool unreliable ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_tail_call_642 {
   struct bpf_map *map ;
   u32 key ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_641 {
   struct __anonstruct_tail_call_642 tail_call ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_jit_poke_descriptor {
   void *ip ;
   union __anonunion_641 __anonCompField_bpf_jit_poke_descriptor_147 ;
   bool ip_stable ;
   u8 adj_off ;
   u16 reason ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_643 {
   struct work_struct work ;
   struct callback_head rcu ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_aux {
   atomic64_t refcnt ;
   u32 used_map_cnt ;
   u32 max_ctx_offset ;
   u32 max_pkt_offset ;
   u32 max_tp_access ;
   u32 stack_depth ;
   u32 id ;
   u32 func_cnt ;
   u32 func_idx ;
   u32 attach_btf_id ;
   struct bpf_prog *linked_prog ;
   bool verifier_zext ;
   bool offload_requested ;
   bool attach_btf_trace ;
   bool func_proto_unreliable ;
   enum bpf_tramp_prog_type trampoline_prog_type ;
   struct bpf_trampoline *trampoline ;
   struct hlist_node tramp_hlist ;
   struct btf_type *attach_func_proto ;
   char *attach_func_name ;
   struct bpf_prog **func ;
   void *jit_data ;
   struct bpf_jit_poke_descriptor *poke_tab ;
   u32 size_poke_tab ;
   struct latch_tree_node ksym_tnode ;
   struct list_head ksym_lnode ;
   struct bpf_prog_ops *ops ;
   struct bpf_map **used_maps ;
   struct bpf_prog *prog ;
   struct user_struct *user ;
   u64 load_time ;
   struct bpf_map *cgroup_storage[2U] ;
   char name[16U] ;
   void *security ;
   struct bpf_prog_offload *offload ;
   struct btf *btf ;
   struct bpf_func_info *func_info ;
   struct bpf_func_info_aux *func_info_aux ;
   struct bpf_line_info *linfo ;
   void **jited_linfo ;
   u32 func_info_cnt ;
   u32 nr_linfo ;
   u32 linfo_idx ;
   u32 num_exentries ;
   struct exception_table_entry *extable ;
   struct bpf_prog_stats *stats ;
   union __anonunion_643 __anonCompField_bpf_prog_aux_148 ;
};
#line 686 
struct bpf_cgroup_storage;
#line 686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array_item {
   struct bpf_prog *prog ;
   struct bpf_cgroup_storage *cgroup_storage[2U] ;
};
#line 691  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array {
   struct callback_head rcu ;
   struct bpf_prog_array_item items[0U] ;
};
#line 1335 
struct cgroup;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage_map;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_storage_buffer {
   struct callback_head rcu ;
   char data[0U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
union __anonunion_645 {
   struct bpf_storage_buffer *buf ;
   void *percpu_buf ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage {
   union __anonunion_645 __anonCompField_bpf_cgroup_storage_150 ;
   struct bpf_cgroup_storage_map *map ;
   struct bpf_cgroup_storage_key key ;
   struct list_head list ;
   struct rb_node node ;
   struct callback_head rcu ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct cgroup_bpf {
   struct bpf_prog_array *effective[26U] ;
   struct list_head progs[26U] ;
   u32 flags[26U] ;
   struct bpf_prog_array *inactive ;
   struct percpu_ref refcnt ;
   struct work_struct release_work ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work;
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_worker {
   unsigned int flags ;
   raw_spinlock_t lock ;
   struct list_head work_list ;
   struct list_head delayed_work_list ;
   struct task_struct *task ;
   struct kthread_work *current_work ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work {
   struct list_head node ;
   void (*func)(struct kthread_work *) ;
   struct kthread_worker *worker ;
   int canceling ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_delayed_work {
   struct kthread_work work ;
   struct timer_list timer ;
};
#line 199 
struct cgroup_subsys_state;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group_cpu {
   seqcount_t seq ;
   unsigned int tasks[3U] ;
   u32 state_mask ;
   u32 times[6U] ;
   u64 state_start ;
   u32 times_prev[2U][6U] ;
};
#line 96 
struct psi_group;
#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group {
   struct mutex avgs_lock ;
   struct psi_group_cpu *pcpu ;
   u64 avg_total[5U] ;
   u64 avg_last_update ;
   u64 avg_next_update ;
   struct delayed_work avgs_work ;
   u64 total[2U][5U] ;
   unsigned long avg[5U][3U] ;
   atomic_t poll_scheduled ;
   struct kthread_worker *poll_kworker ;
   struct kthread_delayed_work poll_work ;
   struct mutex trigger_lock ;
   struct list_head triggers ;
   u32 nr_triggers[5U] ;
   u32 poll_states ;
   u64 poll_min_period ;
   u64 polling_total[5U] ;
   u64 polling_next_update ;
   u64 polling_until ;
};
#line 166 
struct cgroup_root;
#line 167 
struct cgroup_subsys;
#line 168 
struct cgroup_taskset;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_file {
   struct kernfs_node *kn ;
   unsigned long notified_at ;
   struct timer_list notify_timer ;
};
#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys_state {
   struct cgroup *cgroup ;
   struct cgroup_subsys *ss ;
   struct percpu_ref refcnt ;
   struct list_head sibling ;
   struct list_head children ;
   struct list_head rstat_css_node ;
   int id ;
   unsigned int flags ;
   u64 serial_nr ;
   atomic_t online_cnt ;
   struct work_struct destroy_work ;
   struct rcu_work destroy_rwork ;
   struct cgroup_subsys_state *parent ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct css_set {
   struct cgroup_subsys_state *subsys[14U] ;
   refcount_t refcount ;
   struct css_set *dom_cset ;
   struct cgroup *dfl_cgrp ;
   int nr_tasks ;
   struct list_head tasks ;
   struct list_head mg_tasks ;
   struct list_head dying_tasks ;
   struct list_head task_iters ;
   struct list_head e_cset_node[14U] ;
   struct list_head threaded_csets ;
   struct list_head threaded_csets_node ;
   struct hlist_node hlist ;
   struct list_head cgrp_links ;
   struct list_head mg_preload_node ;
   struct list_head mg_node ;
   struct cgroup *mg_src_cgrp ;
   struct cgroup *mg_dst_cgrp ;
   struct css_set *mg_dst_cset ;
   bool dead ;
   struct callback_head callback_head ;
};
#line 279  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_base_stat {
   struct task_cputime cputime ;
};
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_rstat_cpu {
   struct u64_stats_sync bsync ;
   struct cgroup_base_stat bstat ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup *updated_children ;
   struct cgroup *updated_next ;
};
#line 332  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_freezer_state {
   bool freeze ;
   int e_freeze ;
   int nr_frozen_descendants ;
   int nr_frozen_tasks ;
};
#line 351  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup {
   struct cgroup_subsys_state self ;
   unsigned long flags ;
   int level ;
   int max_depth ;
   int nr_descendants ;
   int nr_dying_descendants ;
   int max_descendants ;
   int nr_populated_csets ;
   int nr_populated_domain_children ;
   int nr_populated_threaded_children ;
   int nr_threaded_children ;
   struct kernfs_node *kn ;
   struct cgroup_file procs_file ;
   struct cgroup_file events_file ;
   u16 subtree_control ;
   u16 subtree_ss_mask ;
   u16 old_subtree_control ;
   u16 old_subtree_ss_mask ;
   struct cgroup_subsys_state *subsys[14U] ;
   struct cgroup_root *root ;
   struct list_head cset_links ;
   struct list_head e_csets[14U] ;
   struct cgroup *dom_cgrp ;
   struct cgroup *old_dom_cgrp ;
   struct cgroup_rstat_cpu *rstat_cpu ;
   struct list_head rstat_css_list ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup_base_stat bstat ;
   struct prev_cputime prev_cputime ;
   struct list_head pidlists ;
   struct mutex pidlist_mutex ;
   wait_queue_head_t offline_waitq ;
   struct work_struct release_agent_work ;
   struct psi_group psi ;
   struct cgroup_bpf bpf ;
   atomic_t congestion_count ;
   struct cgroup_freezer_state freezer ;
   u64 ancestor_ids[] ;
};
#line 489  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_root {
   struct kernfs_root *kf_root ;
   unsigned int subsys_mask ;
   int hierarchy_id ;
   struct cgroup cgrp ;
   u64 cgrp_ancestor_id_storage ;
   atomic_t nr_cgrps ;
   struct list_head root_list ;
   unsigned int flags ;
   char release_agent_path[4096U] ;
   char name[64U] ;
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cftype {
   char name[64U] ;
   unsigned long private ;
   size_t max_write_len ;
   unsigned int flags ;
   unsigned int file_offset ;
   struct cgroup_subsys *ss ;
   struct list_head node ;
   struct kernfs_ops *kf_ops ;
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   u64 (*read_u64)(struct cgroup_subsys_state *, struct cftype *) ;
   s64 (*read_s64)(struct cgroup_subsys_state *, struct cftype *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   int (*write_u64)(struct cgroup_subsys_state *, struct cftype *, u64 ) ;
   int (*write_s64)(struct cgroup_subsys_state *, struct cftype *, s64 ) ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 616  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys {
   struct cgroup_subsys_state *(*css_alloc)(struct cgroup_subsys_state *) ;
   int (*css_online)(struct cgroup_subsys_state *) ;
   void (*css_offline)(struct cgroup_subsys_state *) ;
   void (*css_released)(struct cgroup_subsys_state *) ;
   void (*css_free)(struct cgroup_subsys_state *) ;
   void (*css_reset)(struct cgroup_subsys_state *) ;
   void (*css_rstat_flush)(struct cgroup_subsys_state *, int ) ;
   int (*css_extra_stat_show)(struct seq_file *, struct cgroup_subsys_state *) ;
   int (*can_attach)(struct cgroup_taskset *) ;
   void (*cancel_attach)(struct cgroup_taskset *) ;
   void (*attach)(struct cgroup_taskset *) ;
   void (*post_attach)(void) ;
   int (*can_fork)(struct task_struct *) ;
   void (*cancel_fork)(struct task_struct *) ;
   void (*fork)(struct task_struct *) ;
   void (*exit)(struct task_struct *) ;
   void (*release)(struct task_struct *) ;
   void (*bind)(struct cgroup_subsys_state *) ;
   bool early_init : 1 ;
   bool implicit_on_dfl : 1 ;
   bool threaded : 1 ;
   bool broken_hierarchy : 1 ;
   bool warned_broken_hierarchy : 1 ;
   int id ;
   char *name ;
   char *legacy_name ;
   struct cgroup_root *root ;
   struct idr css_idr ;
   struct list_head cfts ;
   struct cftype *dfl_cftypes ;
   struct cftype *legacy_cftypes ;
   unsigned int depends_on ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup.h"
struct cgroup_namespace {
   refcount_t count ;
   struct ns_common ns ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct css_set *root_cset ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netprio_cgroup.h"
struct netprio_map {
   struct callback_head rcu ;
   u32 priomap_len ;
   u32 priomap[] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_mem_info {
   u32 type ;
   u32 id ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_rxq_info {
   struct net_device *dev ;
   u32 queue_index ;
   u32 reg_state ;
   struct xdp_mem_info mem ;
} __attribute__((__aligned__(64)));
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_frame {
   void *data ;
   u16 len ;
   u16 headroom ;
   u16 metasize ;
   struct xdp_mem_info mem ;
   struct net_device *dev_rx ;
};
#line 175 
struct netdev_bpf;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/security.h"
struct xfrm_state;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct sighand_struct {
   spinlock_t siglock ;
   refcount_t count ;
   wait_queue_head_t signalfd_wqh ;
   struct k_sigaction action[64U] ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   u64 ac_utime ;
   u64 ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct cpu_itimer {
   u64 expires ;
   u64 incr ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct task_cputime_atomic {
   atomic64_t utime ;
   atomic64_t stime ;
   atomic64_t sum_exec_runtime ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct thread_group_cputimer {
   struct task_cputime_atomic cputime_atomic ;
};
#line 80 
struct tty_struct;
#line 80 
struct autogroup;
#line 80 
struct tty_audit_buf;
#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct signal_struct {
   refcount_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   struct list_head thread_head ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   struct hlist_head multiprocess ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   unsigned int is_child_subreaper : 1 ;
   unsigned int has_child_subreaper : 1 ;
   int posix_timer_id ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct posix_cputimers posix_cputimers ;
   struct pid *pids[4U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   struct autogroup *autogroup ;
   seqlock_t stats_lock ;
   u64 utime ;
   u64 stime ;
   u64 cutime ;
   u64 cstime ;
   u64 gtime ;
   u64 cgtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
   bool oom_flag_origin ;
   short oom_score_adj ;
   short oom_score_adj_min ;
   struct mm_struct *oom_mm ;
   struct mutex cred_guard_mutex ;
} __attribute__((__designated_init__));
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlmsghdr {
   __u32 nlmsg_len ;
   __u16 nlmsg_type ;
   __u16 nlmsg_flags ;
   __u32 nlmsg_seq ;
   __u32 nlmsg_pid ;
};
#line 211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_ext_ack {
   char *_msg ;
   struct nlattr *bad_attr ;
   u8 cookie[20U] ;
   u8 cookie_len ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
union __anonunion_670 {
   u8 ctx[48U] ;
   long args[6U] ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_callback {
   struct sk_buff *skb ;
   struct nlmsghdr *nlh ;
   int (*dump)(struct sk_buff *, struct netlink_callback *) ;
   int (*done)(struct netlink_callback *) ;
   void *data ;
   struct module *module ;
   struct netlink_ext_ack *extack ;
   u16 family ;
   u16 min_dump_alloc ;
   bool strict_check ;
   u16 answer_flags ;
   unsigned int prev_seq ;
   unsigned int seq ;
   union __anonunion_670 __anonCompField_netlink_callback_153 ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/neighbour.h"
struct ndmsg {
   __u8 ndm_family ;
   __u8 ndm_pad1 ;
   __u16 ndm_pad2 ;
   __s32 ndm_ifindex ;
   __u16 ndm_state ;
   __u8 ndm_flags ;
   __u8 ndm_type ;
};
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct rtnl_link_stats64 {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 rx_errors ;
   __u64 tx_errors ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
   __u64 multicast ;
   __u64 collisions ;
   __u64 rx_length_errors ;
   __u64 rx_over_errors ;
   __u64 rx_crc_errors ;
   __u64 rx_frame_errors ;
   __u64 rx_fifo_errors ;
   __u64 rx_missed_errors ;
   __u64 tx_aborted_errors ;
   __u64 tx_carrier_errors ;
   __u64 tx_fifo_errors ;
   __u64 tx_heartbeat_errors ;
   __u64 tx_window_errors ;
   __u64 rx_compressed ;
   __u64 tx_compressed ;
   __u64 rx_nohandler ;
};
#line 753  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct ifla_vf_guid {
   __u32 vf ;
   __u64 guid ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_stats {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 broadcast ;
   __u64 multicast ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_info {
   __u32 vf ;
   __u8 mac[32U] ;
   __u32 vlan ;
   __u32 qos ;
   __u32 spoofchk ;
   __u32 linkstate ;
   __u32 min_tx_rate ;
   __u32 max_tx_rate ;
   __u32 rss_query_en ;
   __u32 trusted ;
   __be16 vlan_proto ;
};
#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hashtable.h"
struct netpoll_info;
#line 119 
struct phy_device;
#line 120 
struct dsa_port;
#line 121 
struct sfp_bus;
#line 122 
struct wireless_dev;
#line 123 
struct wpan_dev;
#line 124 
struct mpls_dev;
#line 125 
struct udp_tunnel_info;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
enum netdev_tx {
    __NETDEV_TX_MIN = -2147483648,
    NETDEV_TX_OK = 0,
    NETDEV_TX_BUSY = 16
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum netdev_tx netdev_tx_t;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};
#line 217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_hw_addr_list {
   struct list_head list ;
   int count ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct hh_cache {
   unsigned int hh_len ;
   seqlock_t hh_lock ;
   unsigned long hh_data[16U] ;
};
#line 263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct header_ops {
   int (*create)(struct sk_buff *, struct net_device *, unsigned short , void *, void *, unsigned int ) ;
   int (*parse)(struct sk_buff *, unsigned char *) ;
   int (*cache)(struct neighbour *, struct hh_cache *, __be16 ) ;
   void (*cache_update)(struct hh_cache *, struct net_device *, unsigned char *) ;
   bool (*validate)(char *, unsigned int ) ;
   __be16 (*parse_protocol)(struct sk_buff *) ;
};
#line 372 
enum rx_handler_result {
    RX_HANDLER_CONSUMED = 0,
    RX_HANDLER_ANOTHER = 1,
    RX_HANDLER_EXACT = 2,
    RX_HANDLER_PASS = 3
};
#line 379  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum rx_handler_result rx_handler_result_t;
#line 421  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef rx_handler_result_t rx_handler_func_t(struct sk_buff **);
#line 589 
struct xdp_umem;
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   struct Qdisc *qdisc_sleeping ;
   struct kobject kobj ;
   int numa_node ;
   unsigned long tx_maxrate ;
   unsigned long trans_timeout ;
   struct net_device *sb_dev ;
   struct xdp_umem *umem ;
   spinlock_t _xmit_lock ;
   int xmit_lock_owner ;
   unsigned long trans_start ;
   unsigned long state ;
   struct dql dql ;
} __attribute__((__aligned__(64)));
#line 662  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_map {
   unsigned int len ;
   struct callback_head rcu ;
   u16 cpus[0U] ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow {
   u16 cpu ;
   u16 filter ;
   unsigned int last_qtail ;
};
#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow_table {
   unsigned int mask ;
   struct callback_head rcu ;
   struct rps_dev_flow flows[0U] ;
};
#line 736  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_rx_queue {
   struct rps_map *rps_map ;
   struct rps_dev_flow_table *rps_flow_table ;
   struct kobject kobj ;
   struct net_device *dev ;
   struct xdp_rxq_info xdp_rxq ;
   struct xdp_umem *umem ;
} __attribute__((__aligned__(64)));
#line 764  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_map {
   unsigned int len ;
   unsigned int alloc_len ;
   struct callback_head rcu ;
   u16 queues[0U] ;
};
#line 777  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_dev_maps {
   struct callback_head rcu ;
   struct xps_map *attr_map[0U] ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_tc_txq {
   u16 count ;
   u16 offset ;
};
#line 803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_fcoe_hbainfo {
   char manufacturer[64U] ;
   char serial_number[64U] ;
   char hardware_version[64U] ;
   char driver_version[64U] ;
   char optionrom_version[64U] ;
   char firmware_version[64U] ;
   char model[256U] ;
   char model_description[256U] ;
};
#line 820  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_phys_item_id {
   unsigned char id[32U] ;
   unsigned char id_len ;
};
#line 833 
enum tc_setup_type {
    TC_SETUP_QDISC_MQPRIO = 0,
    TC_SETUP_CLSU32 = 1,
    TC_SETUP_CLSFLOWER = 2,
    TC_SETUP_CLSMATCHALL = 3,
    TC_SETUP_CLSBPF = 4,
    TC_SETUP_BLOCK = 5,
    TC_SETUP_QDISC_CBS = 6,
    TC_SETUP_QDISC_RED = 7,
    TC_SETUP_QDISC_PRIO = 8,
    TC_SETUP_QDISC_MQ = 9,
    TC_SETUP_QDISC_ETF = 10,
    TC_SETUP_ROOT_QDISC = 11,
    TC_SETUP_QDISC_GRED = 12,
    TC_SETUP_QDISC_TAPRIO = 13,
    TC_SETUP_FT = 14
};
#line 851 
enum bpf_netdev_command {
    XDP_SETUP_PROG = 0,
    XDP_SETUP_PROG_HW = 1,
    XDP_QUERY_PROG = 2,
    XDP_QUERY_PROG_HW = 3,
    BPF_OFFLOAD_MAP_ALLOC = 4,
    BPF_OFFLOAD_MAP_FREE = 5,
    XDP_SETUP_XSK_UMEM = 6
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_675 {
   u32 flags ;
   struct bpf_prog *prog ;
   struct netlink_ext_ack *extack ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_676 {
   u32 prog_id ;
   u32 prog_flags ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_677 {
   struct bpf_offloaded_map *offmap ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_xsk_678 {
   struct xdp_umem *umem ;
   u16 queue_id ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_674 {
   struct __anonstruct_675 __anonCompField___anonunion_674_155 ;
   struct __anonstruct_676 __anonCompField___anonunion_674_156 ;
   struct __anonstruct_677 __anonCompField___anonunion_674_157 ;
   struct __anonstruct_xsk_678 xsk ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_bpf {
   enum bpf_netdev_command command ;
   union __anonunion_674 __anonCompField_netdev_bpf_158 ;
};
#line 911  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xfrmdev_ops {
   int (*xdo_dev_state_add)(struct xfrm_state *) ;
   void (*xdo_dev_state_delete)(struct xfrm_state *) ;
   void (*xdo_dev_state_free)(struct xfrm_state *) ;
   bool (*xdo_dev_offload_ok)(struct sk_buff *, struct xfrm_state *) ;
   void (*xdo_dev_state_advance_esn)(struct xfrm_state *) ;
};
#line 921  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct dev_ifalias {
   struct callback_head rcuhead ;
   char ifalias[] ;
};
#line 926 
struct tlsdev_ops;
#line 929  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_name_node {
   struct hlist_node hlist ;
   struct list_head list ;
   struct net_device *dev ;
   char *name ;
};
#line 1257 
struct devlink_port;
#line 1257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_ops {
   int (*ndo_init)(struct net_device *) ;
   void (*ndo_uninit)(struct net_device *) ;
   int (*ndo_open)(struct net_device *) ;
   int (*ndo_stop)(struct net_device *) ;
   netdev_tx_t (*ndo_start_xmit)(struct sk_buff *, struct net_device *) ;
   netdev_features_t (*ndo_features_check)(struct sk_buff *, struct net_device *, netdev_features_t ) ;
   u16 (*ndo_select_queue)(struct net_device *, struct sk_buff *, struct net_device *) ;
   void (*ndo_change_rx_flags)(struct net_device *, int ) ;
   void (*ndo_set_rx_mode)(struct net_device *) ;
   int (*ndo_set_mac_address)(struct net_device *, void *) ;
   int (*ndo_validate_addr)(struct net_device *) ;
   int (*ndo_do_ioctl)(struct net_device *, struct ifreq *, int ) ;
   int (*ndo_set_config)(struct net_device *, struct ifmap *) ;
   int (*ndo_change_mtu)(struct net_device *, int ) ;
   int (*ndo_neigh_setup)(struct net_device *, struct neigh_parms *) ;
   void (*ndo_tx_timeout)(struct net_device *) ;
   void (*ndo_get_stats64)(struct net_device *, struct rtnl_link_stats64 *) ;
   bool (*ndo_has_offload_stats)(struct net_device *, int ) ;
   int (*ndo_get_offload_stats)(int , struct net_device *, void *) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device *) ;
   int (*ndo_vlan_rx_add_vid)(struct net_device *, __be16 , u16 ) ;
   int (*ndo_vlan_rx_kill_vid)(struct net_device *, __be16 , u16 ) ;
   void (*ndo_poll_controller)(struct net_device *) ;
   int (*ndo_netpoll_setup)(struct net_device *, struct netpoll_info *) ;
   void (*ndo_netpoll_cleanup)(struct net_device *) ;
   int (*ndo_set_vf_mac)(struct net_device *, int , u8 *) ;
   int (*ndo_set_vf_vlan)(struct net_device *, int , u16 , u8 , __be16 ) ;
   int (*ndo_set_vf_rate)(struct net_device *, int , int , int ) ;
   int (*ndo_set_vf_spoofchk)(struct net_device *, int , bool ) ;
   int (*ndo_set_vf_trust)(struct net_device *, int , bool ) ;
   int (*ndo_get_vf_config)(struct net_device *, int , struct ifla_vf_info *) ;
   int (*ndo_set_vf_link_state)(struct net_device *, int , int ) ;
   int (*ndo_get_vf_stats)(struct net_device *, int , struct ifla_vf_stats *) ;
   int (*ndo_set_vf_port)(struct net_device *, int , struct nlattr **) ;
   int (*ndo_get_vf_port)(struct net_device *, int , struct sk_buff *) ;
   int (*ndo_get_vf_guid)(struct net_device *, int , struct ifla_vf_guid *, struct ifla_vf_guid *) ;
   int (*ndo_set_vf_guid)(struct net_device *, int , u64 , int ) ;
   int (*ndo_set_vf_rss_query_en)(struct net_device *, int , bool ) ;
   int (*ndo_setup_tc)(struct net_device *, enum tc_setup_type , void *) ;
   int (*ndo_fcoe_enable)(struct net_device *) ;
   int (*ndo_fcoe_disable)(struct net_device *) ;
   int (*ndo_fcoe_ddp_setup)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_ddp_done)(struct net_device *, u16 ) ;
   int (*ndo_fcoe_ddp_target)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_get_hbainfo)(struct net_device *, struct netdev_fcoe_hbainfo *) ;
   int (*ndo_fcoe_get_wwn)(struct net_device *, u64 *, int ) ;
   int (*ndo_rx_flow_steer)(struct net_device *, struct sk_buff *, u16 , u32 ) ;
   int (*ndo_add_slave)(struct net_device *, struct net_device *, struct netlink_ext_ack *) ;
   int (*ndo_del_slave)(struct net_device *, struct net_device *) ;
   netdev_features_t (*ndo_fix_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_set_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_neigh_construct)(struct net_device *, struct neighbour *) ;
   void (*ndo_neigh_destroy)(struct net_device *, struct neighbour *) ;
   int (*ndo_fdb_add)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 , u16 , struct netlink_ext_ack *) ;
   int (*ndo_fdb_del)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 ) ;
   int (*ndo_fdb_dump)(struct sk_buff *, struct netlink_callback *, struct net_device *, struct net_device *, int *) ;
   int (*ndo_fdb_get)(struct sk_buff *, struct nlattr **, struct net_device *, unsigned char *, u16 , u32 , u32 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_setlink)(struct net_device *, struct nlmsghdr *, u16 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_getlink)(struct sk_buff *, u32 , u32 , struct net_device *, u32 , int ) ;
   int (*ndo_bridge_dellink)(struct net_device *, struct nlmsghdr *, u16 ) ;
   int (*ndo_change_carrier)(struct net_device *, bool ) ;
   int (*ndo_get_phys_port_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_port_parent_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_phys_port_name)(struct net_device *, char *, size_t ) ;
   void (*ndo_udp_tunnel_add)(struct net_device *, struct udp_tunnel_info *) ;
   void (*ndo_udp_tunnel_del)(struct net_device *, struct udp_tunnel_info *) ;
   void *(*ndo_dfwd_add_station)(struct net_device *, struct net_device *) ;
   void (*ndo_dfwd_del_station)(struct net_device *, void *) ;
   int (*ndo_set_tx_maxrate)(struct net_device *, int , u32 ) ;
   int (*ndo_get_iflink)(struct net_device *) ;
   int (*ndo_change_proto_down)(struct net_device *, bool ) ;
   int (*ndo_fill_metadata_dst)(struct net_device *, struct sk_buff *) ;
   void (*ndo_set_rx_headroom)(struct net_device *, int ) ;
   int (*ndo_bpf)(struct net_device *, struct netdev_bpf *) ;
   int (*ndo_xdp_xmit)(struct net_device *, int , struct xdp_frame **, u32 ) ;
   int (*ndo_xsk_wakeup)(struct net_device *, u32 , u32 ) ;
   struct devlink_port *(*ndo_get_devlink_port)(struct net_device *) ;
};
#line 1492 
enum ldv_14504 {
    NETREG_UNINITIALIZED = 0,
    NETREG_REGISTERED = 1,
    NETREG_UNREGISTERING = 2,
    NETREG_UNREGISTERED = 3,
    NETREG_RELEASED = 4,
    NETREG_DUMMY = 5
};
#line 1501 
enum ldv_14505 {
    RTNL_LINK_INITIALIZED = 0,
    RTNL_LINK_INITIALIZING = 1
};
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_adj_list_679 {
   struct list_head upper ;
   struct list_head lower ;
};
#line 1795 
struct iw_handler_def;
#line 1795 
struct iw_public_data;
#line 1795 
struct vlan_info;
#line 1795 
struct tipc_bearer;
#line 1795 
struct in_device;
#line 1795 
struct dn_dev;
#line 1795 
struct cpu_rmap;
#line 1795 
struct pcpu_lstats;
#line 1795 
struct pcpu_sw_netstats;
#line 1795 
struct pcpu_dstats;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_680 {
   void *ml_priv ;
   struct pcpu_lstats *lstats ;
   struct pcpu_sw_netstats *tstats ;
   struct pcpu_dstats *dstats ;
};
#line 1795 
struct garp_port;
#line 1795 
struct mrp_port;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device {
   char name[16U] ;
   struct netdev_name_node *name_node ;
   struct dev_ifalias *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   int irq ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   struct list_head unreg_list ;
   struct list_head close_list ;
   struct list_head ptype_all ;
   struct list_head ptype_specific ;
   struct __anonstruct_adj_list_679 adj_list ;
   netdev_features_t features ;
   netdev_features_t hw_features ;
   netdev_features_t wanted_features ;
   netdev_features_t vlan_features ;
   netdev_features_t hw_enc_features ;
   netdev_features_t mpls_features ;
   netdev_features_t gso_partial_features ;
   int ifindex ;
   int group ;
   struct net_device_stats stats ;
   atomic_long_t rx_dropped ;
   atomic_long_t tx_dropped ;
   atomic_long_t rx_nohandler ;
   atomic_t carrier_up_count ;
   atomic_t carrier_down_count ;
   struct iw_handler_def *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops *netdev_ops ;
   struct ethtool_ops *ethtool_ops ;
   struct l3mdev_ops *l3mdev_ops ;
   struct ndisc_ops *ndisc_ops ;
   struct xfrmdev_ops *xfrmdev_ops ;
   struct tlsdev_ops *tlsdev_ops ;
   struct header_ops *header_ops ;
   unsigned int flags ;
   unsigned int priv_flags ;
   unsigned short gflags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned int mtu ;
   unsigned int min_mtu ;
   unsigned int max_mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned char min_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   unsigned char perm_addr[32U] ;
   unsigned char addr_assign_type ;
   unsigned char addr_len ;
   unsigned char upper_level ;
   unsigned char lower_level ;
   unsigned short neigh_priv_len ;
   unsigned short dev_id ;
   unsigned short dev_port ;
   spinlock_t addr_list_lock ;
   unsigned char name_assign_type ;
   bool uc_promisc ;
   struct netdev_hw_addr_list uc ;
   struct netdev_hw_addr_list mc ;
   struct netdev_hw_addr_list dev_addrs ;
   struct kset *queues_kset ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   struct vlan_info *vlan_info ;
   struct dsa_port *dsa_ptr ;
   struct tipc_bearer *tipc_ptr ;
   void *atalk_ptr ;
   struct in_device *ip_ptr ;
   struct dn_dev *dn_ptr ;
   struct inet6_dev *ip6_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   struct wpan_dev *ieee802154_ptr ;
   struct mpls_dev *mpls_ptr ;
   unsigned char *dev_addr ;
   struct netdev_rx_queue *_rx ;
   unsigned int num_rx_queues ;
   unsigned int real_num_rx_queues ;
   struct bpf_prog *xdp_prog ;
   unsigned long gro_flush_timeout ;
   rx_handler_func_t *rx_handler ;
   void *rx_handler_data ;
   struct mini_Qdisc *miniq_ingress ;
   struct netdev_queue *ingress_queue ;
   struct nf_hook_entries *nf_hooks_ingress ;
   unsigned char broadcast[32U] ;
   struct cpu_rmap *rx_cpu_rmap ;
   struct hlist_node index_hlist ;
   struct netdev_queue *_tx ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   struct Qdisc *qdisc ;
   struct hlist_head qdisc_hash[16U] ;
   unsigned int tx_queue_len ;
   spinlock_t tx_global_lock ;
   int watchdog_timeo ;
   struct xps_dev_maps *xps_cpus_map ;
   struct xps_dev_maps *xps_rxqs_map ;
   struct mini_Qdisc *miniq_egress ;
   struct timer_list watchdog_timer ;
   int *pcpu_refcnt ;
   struct list_head todo_list ;
   struct list_head link_watch_list ;
   enum ldv_14504 reg_state : 8 ;
   bool dismantle ;
   enum ldv_14505 rtnl_link_state : 16 ;
   bool needs_free_netdev ;
   void (*priv_destructor)(struct net_device *) ;
   struct netpoll_info *npinfo ;
   possible_net_t nd_net ;
   union __anonunion_680 __anonCompField_net_device_159 ;
   struct garp_port *garp_port ;
   struct mrp_port *mrp_port ;
   struct device dev ;
   struct attribute_group *sysfs_groups[4U] ;
   struct attribute_group *sysfs_rx_queue_group ;
   struct rtnl_link_ops *rtnl_link_ops ;
   unsigned int gso_max_size ;
   u16 gso_max_segs ;
   struct dcbnl_rtnl_ops *dcbnl_ops ;
   s16 num_tc ;
   struct netdev_tc_txq tc_to_txq[16U] ;
   u8 prio_tc_map[16U] ;
   unsigned int fcoe_ddp_xid ;
   struct netprio_map *priomap ;
   struct phy_device *phydev ;
   struct sfp_bus *sfp_bus ;
   struct lock_class_key qdisc_tx_busylock_key ;
   struct lock_class_key qdisc_running_key ;
   struct lock_class_key qdisc_xmit_lock_key ;
   struct lock_class_key addr_list_lock_key ;
   bool proto_down ;
   unsigned int wol_enabled : 1 ;
};
#line 2400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_sw_netstats {
   u64 rx_packets ;
   u64 rx_bytes ;
   u64 tx_packets ;
   u64 tx_bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(32)));
#line 2408  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_lstats {
   u64_stats_t packets ;
   u64_stats_t bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 4917 
struct igc_hw;
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_hw.h"
struct igc_mac_operations {
   s32 (*check_for_link)(struct igc_hw *) ;
   s32 (*reset_hw)(struct igc_hw *) ;
   s32 (*init_hw)(struct igc_hw *) ;
   s32 (*setup_physical_interface)(struct igc_hw *) ;
   void (*rar_set)(struct igc_hw *, u8 *, u32 ) ;
   s32 (*read_mac_addr)(struct igc_hw *) ;
   s32 (*get_speed_and_duplex)(struct igc_hw *, u16 *, u16 *) ;
   s32 (*acquire_swfw_sync)(struct igc_hw *, u16 ) ;
   void (*release_swfw_sync)(struct igc_hw *, u16 ) ;
};
#line 40 
enum igc_mac_type {
    igc_undefined = 0,
    igc_i225 = 1,
    igc_num_macs = 2
};
#line 46 
enum igc_phy_type {
    igc_phy_unknown = 0,
    igc_phy_none = 1,
    igc_phy_i225 = 2
};
#line 52 
enum igc_media_type {
    igc_media_type_unknown = 0,
    igc_media_type_copper = 1,
    igc_num_media_types = 2
};
#line 58 
enum igc_nvm_type {
    igc_nvm_unknown = 0,
    igc_nvm_eeprom_spi = 1,
    igc_nvm_flash_hw = 2,
    igc_nvm_invm = 3
};
#line 66 
struct igc_phy_operations;
#line 66 
struct igc_nvm_operations;
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_hw.h"
struct igc_mac_info {
   struct igc_mac_operations ops ;
   u8 addr[6U] ;
   u8 perm_addr[6U] ;
   enum igc_mac_type type ;
   u32 collision_delta ;
   u32 ledctl_default ;
   u32 ledctl_mode1 ;
   u32 ledctl_mode2 ;
   u32 mc_filter_type ;
   u32 tx_packet_delta ;
   u32 txcw ;
   u16 mta_reg_count ;
   u16 uta_reg_count ;
   u32 mta_shadow[128U] ;
   u16 rar_entry_count ;
   u8 forced_speed_duplex ;
   bool adaptive_ifs ;
   bool has_fwsm ;
   bool asf_firmware_present ;
   bool arc_subsystem_valid ;
   bool autoneg ;
   bool autoneg_failed ;
   bool get_link_status ;
};
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_hw.h"
struct igc_nvm_operations {
   s32 (*acquire)(struct igc_hw *) ;
   s32 (*read)(struct igc_hw *, u16 , u16 , u16 *) ;
   void (*release)(struct igc_hw *) ;
   s32 (*write)(struct igc_hw *, u16 , u16 , u16 *) ;
   s32 (*update)(struct igc_hw *) ;
   s32 (*validate)(struct igc_hw *) ;
   s32 (*valid_led_default)(struct igc_hw *, u16 *) ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_hw.h"
struct igc_phy_operations {
   s32 (*acquire)(struct igc_hw *) ;
   s32 (*check_reset_block)(struct igc_hw *) ;
   s32 (*force_speed_duplex)(struct igc_hw *) ;
   s32 (*get_phy_info)(struct igc_hw *) ;
   s32 (*read_reg)(struct igc_hw *, u32 , u16 *) ;
   void (*release)(struct igc_hw *) ;
   s32 (*reset)(struct igc_hw *) ;
   s32 (*write_reg)(struct igc_hw *, u32 , u16 ) ;
};
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_hw.h"
struct igc_nvm_info {
   struct igc_nvm_operations ops ;
   enum igc_nvm_type type ;
   u32 flash_bank_size ;
   u32 flash_base_addr ;
   u16 word_size ;
   u16 delay_usec ;
   u16 address_bits ;
   u16 opcode_bits ;
   u16 page_size ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_hw.h"
struct igc_phy_info {
   struct igc_phy_operations ops ;
   enum igc_phy_type type ;
   u32 addr ;
   u32 id ;
   u32 reset_delay_us ;
   u32 revision ;
   enum igc_media_type media_type ;
   u16 autoneg_advertised ;
   u16 autoneg_mask ;
   u8 mdix ;
   bool is_mdix ;
   bool reset_disable ;
   bool speed_downgraded ;
   bool autoneg_wait_to_complete ;
};
#line 167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_hw.h"
struct igc_bus_info {
   u16 func ;
   u16 pci_cmd_word ;
};
#line 171 
enum igc_fc_mode {
    igc_fc_none = 0,
    igc_fc_rx_pause = 1,
    igc_fc_tx_pause = 2,
    igc_fc_full = 3,
    igc_fc_default = 255
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_hw.h"
struct igc_fc_info {
   u32 high_water ;
   u32 low_water ;
   u16 pause_time ;
   bool send_xon ;
   bool strict_ieee ;
   enum igc_fc_mode current_mode ;
   enum igc_fc_mode requested_mode ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_hw.h"
struct igc_dev_spec_base {
   bool clear_semaphore_once ;
};
#line 194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_hw.h"
union __anonunion_dev_spec_697 {
   struct igc_dev_spec_base _base ;
};
#line 194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_hw.h"
struct igc_hw {
   void *back ;
   u8 *hw_addr ;
   unsigned long io_base ;
   struct igc_mac_info mac ;
   struct igc_fc_info fc ;
   struct igc_nvm_info nvm ;
   struct igc_phy_info phy ;
   struct igc_bus_info bus ;
   union __anonunion_dev_spec_697 dev_spec ;
   u16 device_id ;
   u16 subsystem_vendor_id ;
   u16 subsystem_device_id ;
   u16 vendor_id ;
   u8 revision_id ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_nvm.c"
union __anonunion___u_699 {
   u8 *__val ;
   char __c[1U] ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_nvm.c"
union __anonunion___u_701 {
   u8 *__val ;
   char __c[1U] ;
};
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_nvm.c"
union __anonunion___u_703 {
   u8 *__val ;
   char __c[1U] ;
};
#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_nvm.c"
union __anonunion___u_705 {
   u8 *__val ;
   char __c[1U] ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uuid.h"
typedef unsigned long kernel_ulong_t;
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct acpi_device_id {
   __u8 id[9U] ;
   kernel_ulong_t driver_data ;
   __u32 cls ;
   __u32 cls_msk ;
};
#line 260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct of_device_id {
   char name[32U] ;
   char type[32U] ;
   char compatible[128U] ;
   void *data ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_mac.c"
union __anonunion___u_1406 {
   u8 *__val ;
   char __c[1U] ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_mac.c"
union __anonunion___u_1408 {
   u8 *__val ;
   char __c[1U] ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_mac.c"
union __anonunion___u_1410 {
   u8 *__val ;
   char __c[1U] ;
};
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_mac.c"
union __anonunion___u_1412 {
   u8 *__val ;
   char __c[1U] ;
};
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_mac.c"
union __anonunion___u_1414 {
   u8 *__val ;
   char __c[1U] ;
};
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_mac.c"
union __anonunion___u_1416 {
   u8 *__val ;
   char __c[1U] ;
};
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_mac.c"
union __anonunion___u_1418 {
   u8 *__val ;
   char __c[1U] ;
};
#line 223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_mac.c"
union __anonunion___u_1420 {
   u8 *__val ;
   char __c[1U] ;
};
#line 353  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_mac.c"
union __anonunion___u_1422 {
   u8 *__val ;
   char __c[1U] ;
};
#line 355  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_mac.c"
union __anonunion___u_1424 {
   u8 *__val ;
   char __c[1U] ;
};
#line 445  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_mac.c"
union __anonunion___u_1426 {
   u8 *__val ;
   char __c[1U] ;
};
#line 742  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_mac.c"
union __anonunion___u_1428 {
   u8 *__val ;
   char __c[1U] ;
};
#line 888  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_mac.c"
union __anonunion___u_1430 {
   u8 *__val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_phy.c"
union __anonunion___u_2129 {
   u8 *__val ;
   char __c[1U] ;
};
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_phy.c"
union __anonunion___u_2131 {
   u8 *__val ;
   char __c[1U] ;
};
#line 565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_phy.c"
union __anonunion___u_2133 {
   u8 *__val ;
   char __c[1U] ;
};
#line 622  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_phy.c"
union __anonunion___u_2135 {
   u8 *__val ;
   char __c[1U] ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef __s8 s8;
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __u16 __le16;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __le32;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u64 __le64;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u64 __be64;
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u16 __sum16;
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int slab_flags_t;
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
struct kernel_symbol {
   int value_offset ;
   int name_offset ;
   int namespace_offset ;
};
#line 136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/init.h"
typedef void (*ctor_fn_t)(void);
#line 762  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_2156 {
   struct hlist_node *__val ;
   char __c[1U] ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bug.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
union __anonunion___u_2202 {
   int __val ;
   char __c[1U] ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint_func {
   void *func ;
   void *data ;
   int prio ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint {
   char *name ;
   struct static_key key ;
   int (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   struct tracepoint_func *funcs ;
};
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
typedef int tracepoint_ptr_t;
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct bpf_raw_event_map {
   struct tracepoint *tp ;
   void *bpf_func ;
   u32 num_args ;
   u32 writable_size ;
} __attribute__((__aligned__(32)));
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/orc_types.h"
struct orc_entry {
   s16 sp_offset ;
   s16 bp_offset ;
   unsigned int sp_reg : 4 ;
   unsigned int bp_reg : 4 ;
   unsigned int type : 2 ;
   unsigned int end : 1 ;
} __attribute__((__packed__));
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nodemask.h"
enum node_states {
    N_POSSIBLE = 0,
    N_ONLINE = 1,
    N_NORMAL_MEMORY = 2,
    N_HIGH_MEMORY = 2,
    N_MEMORY = 3,
    N_CPU = 4,
    NR_NODE_STATES = 5
};
#line 196  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_segcblist.h"
struct rcu_segcblist {
   struct callback_head *head ;
   struct callback_head **tails[4U] ;
   unsigned long gp_seq[4U] ;
   atomic_long_t len ;
   long len_lazy ;
   u8 enabled ;
   u8 offloaded ;
};
#line 80 
struct srcu_struct;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcu.h"
struct srcu_node;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_data {
   unsigned long srcu_lock_count[2U] ;
   unsigned long srcu_unlock_count[2U] ;
   spinlock_t lock ;
   struct rcu_segcblist srcu_cblist ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   bool srcu_cblist_invoking ;
   struct timer_list delay_work ;
   struct work_struct work ;
   struct callback_head srcu_barrier_head ;
   struct srcu_node *mynode ;
   unsigned long grpmask ;
   int cpu ;
   struct srcu_struct *ssp ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_node {
   spinlock_t lock ;
   unsigned long srcu_have_cbs[4U] ;
   unsigned long srcu_data_have_cbs[4U] ;
   unsigned long srcu_gp_seq_needed_exp ;
   struct srcu_node *srcu_parent ;
   int grplo ;
   int grphi ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_struct {
   struct srcu_node node[521U] ;
   struct srcu_node *level[4U] ;
   struct mutex srcu_cb_mutex ;
   spinlock_t lock ;
   struct mutex srcu_gp_mutex ;
   unsigned int srcu_idx ;
   unsigned long srcu_gp_seq ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   unsigned long srcu_last_gp_end ;
   struct srcu_data *sda ;
   unsigned long srcu_barrier_seq ;
   struct mutex srcu_barrier_mutex ;
   struct completion srcu_barrier_completion ;
   atomic_t srcu_barrier_cpu_cnt ;
   struct delayed_work work ;
   struct lockdep_map dep_map ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct free_area {
   struct list_head free_list[6U] ;
   unsigned long nr_free ;
};
#line 158 
struct pglist_data;
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone_padding {
   char x[0U] ;
} __attribute__((__aligned__(4096)));
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone_reclaim_stat {
   unsigned long recent_rotated[2U] ;
   unsigned long recent_scanned[2U] ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct lruvec {
   struct list_head lists[5U] ;
   struct zone_reclaim_stat reclaim_stat ;
   atomic_long_t inactive_age ;
   unsigned long refaults ;
   unsigned long flags ;
   struct pglist_data *pgdat ;
};
#line 340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_pages {
   int count ;
   int high ;
   int batch ;
   struct list_head lists[3U] ;
};
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_pageset {
   struct per_cpu_pages pcp ;
   s8 expire ;
   u16 vm_numa_stat_diff[6U] ;
   s8 stat_threshold ;
   s8 vm_stat_diff[13U] ;
};
#line 361  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_nodestat {
   s8 stat_threshold ;
   s8 vm_node_stat_diff[32U] ;
};
#line 365 
enum zone_type {
    ZONE_DMA = 0,
    ZONE_DMA32 = 1,
    ZONE_NORMAL = 2,
    ZONE_MOVABLE = 3,
    ZONE_DEVICE = 4,
    __MAX_NR_ZONES = 5
};
#line 432  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone {
   unsigned long _watermark[3U] ;
   unsigned long watermark_boost ;
   unsigned long nr_reserved_highatomic ;
   long lowmem_reserve[5U] ;
   int node ;
   struct pglist_data *zone_pgdat ;
   struct per_cpu_pageset *pageset ;
   unsigned long zone_start_pfn ;
   atomic_long_t managed_pages ;
   unsigned long spanned_pages ;
   unsigned long present_pages ;
   char *name ;
   unsigned long nr_isolate_pageblock ;
   seqlock_t span_seqlock ;
   int initialized ;
   struct zone_padding _pad1_ ;
   struct free_area free_area[11U] ;
   unsigned long flags ;
   spinlock_t lock ;
   struct zone_padding _pad2_ ;
   unsigned long percpu_drift_mark ;
   unsigned long compact_cached_free_pfn ;
   unsigned long compact_cached_migrate_pfn[2U] ;
   unsigned long compact_init_migrate_pfn ;
   unsigned long compact_init_free_pfn ;
   unsigned int compact_considered ;
   unsigned int compact_defer_shift ;
   int compact_order_failed ;
   bool compact_blockskip_flush ;
   bool contiguous ;
   struct zone_padding _pad3_ ;
   atomic_long_t vm_stat[13U] ;
   atomic_long_t vm_numa_stat[6U] ;
} __attribute__((__aligned__(4096)));
#line 665  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zoneref {
   struct zone *zone ;
   int zone_idx ;
};
#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zonelist {
   struct zoneref _zonerefs[5121U] ;
};
#line 694  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct deferred_split {
   spinlock_t split_queue_lock ;
   struct list_head split_queue ;
   unsigned long split_queue_len ;
};
#line 710  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct pglist_data {
   struct zone node_zones[5U] ;
   struct zonelist node_zonelists[2U] ;
   int nr_zones ;
   spinlock_t node_size_lock ;
   unsigned long node_start_pfn ;
   unsigned long node_present_pages ;
   unsigned long node_spanned_pages ;
   int node_id ;
   wait_queue_head_t kswapd_wait ;
   wait_queue_head_t pfmemalloc_wait ;
   struct task_struct *kswapd ;
   int kswapd_order ;
   enum zone_type kswapd_classzone_idx ;
   int kswapd_failures ;
   int kcompactd_max_order ;
   enum zone_type kcompactd_classzone_idx ;
   wait_queue_head_t kcompactd_wait ;
   struct task_struct *kcompactd ;
   unsigned long totalreserve_pages ;
   unsigned long min_unmapped_pages ;
   unsigned long min_slab_pages ;
   struct zone_padding _pad1_ ;
   spinlock_t lru_lock ;
   unsigned long first_deferred_pfn ;
   struct deferred_split deferred_split_queue ;
   struct lruvec __lruvec ;
   unsigned long flags ;
   struct zone_padding _pad2_ ;
   struct per_cpu_nodestat *per_cpu_nodestats ;
   atomic_long_t vm_stat[32U] ;
};
#line 282  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/x86_init.h"
struct pci_dev;
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/topology.h"
struct pci_bus;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/smp.h"
struct __call_single_data {
   struct llist_node llist ;
   void (*func)(void *) ;
   void *info ;
   unsigned int flags ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/vdso.h"
struct vdso_image {
   void *data ;
   unsigned long size ;
   unsigned long alt ;
   unsigned long alt_len ;
   long sym_vvar_start ;
   long sym_vvar_page ;
   long sym_pvclock_page ;
   long sym_hvclock_page ;
   long sym_VDSO32_NOTE_MASK ;
   long sym___kernel_sigreturn ;
   long sym___kernel_rt_sigreturn ;
   long sym___kernel_vsyscall ;
   long sym_int80_landing_pad ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u16 Elf64_Half;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Off;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u32 Elf64_Word;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_hdr {
   unsigned char e_ident[16U] ;
   Elf64_Half e_type ;
   Elf64_Half e_machine ;
   Elf64_Word e_version ;
   Elf64_Addr e_entry ;
   Elf64_Off e_phoff ;
   Elf64_Off e_shoff ;
   Elf64_Word e_flags ;
   Elf64_Half e_ehsize ;
   Elf64_Half e_phentsize ;
   Elf64_Half e_phnum ;
   Elf64_Half e_shentsize ;
   Elf64_Half e_shnum ;
   Elf64_Half e_shstrndx ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_hdr Elf64_Ehdr;
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_shdr {
   Elf64_Word sh_name ;
   Elf64_Word sh_type ;
   Elf64_Xword sh_flags ;
   Elf64_Addr sh_addr ;
   Elf64_Off sh_offset ;
   Elf64_Xword sh_size ;
   Elf64_Word sh_link ;
   Elf64_Word sh_info ;
   Elf64_Xword sh_addralign ;
   Elf64_Xword sh_entsize ;
};
#line 328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_shdr Elf64_Shdr;
#line 247  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kernel_param;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param_ops {
   unsigned int flags ;
   int (*set)(char *, struct kernel_param *) ;
   int (*get)(char *, struct kernel_param *) ;
   void (*free)(void *) ;
};
#line 69 
struct kparam_string;
#line 69 
struct kparam_array;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
union __anonunion_2394 {
   void *arg ;
   struct kparam_string *str ;
   struct kparam_array *arr ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param {
   char *name ;
   struct module *mod ;
   struct kernel_param_ops *ops ;
   u16 perm ;
   s8 level ;
   u8 flags ;
   union __anonunion_2394 __anonCompField_kernel_param_52 ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int elemsize ;
   unsigned int *num ;
   struct kernel_param_ops *ops ;
   void *elem ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/error-injection.h"
struct error_injection_entry {
   unsigned long addr ;
   int etype ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/module.h"
struct mod_arch_specific {
   unsigned int num_orcs ;
   int *orc_unwind_ip ;
   struct orc_entry *orc_unwind ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_param_attrs;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
   struct completion *kobj_completion ;
} __attribute__((__designated_init__));
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute *, struct module_kobject *, char *) ;
   ssize_t (*store)(struct module_attribute *, struct module_kobject *, char *, size_t ) ;
   void (*setup)(struct module *, char *) ;
   int (*test)(struct module *) ;
   void (*free)(struct module *) ;
};
#line 297 
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2,
    MODULE_STATE_UNFORMED = 3
};
#line 305  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_tree_node {
   struct module *mod ;
   struct latch_tree_node node ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_layout {
   void *base ;
   unsigned int size ;
   unsigned int text_size ;
   unsigned int ro_size ;
   unsigned int ro_after_init_size ;
   struct mod_tree_node mtn ;
};
#line 334  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_kallsyms {
   Elf64_Sym *symtab ;
   unsigned int num_symtab ;
   char *strtab ;
   char *typetab ;
};
#line 342  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct klp_modinfo {
   Elf64_Ehdr hdr ;
   Elf64_Shdr *sechdrs ;
   char *secstrings ;
   unsigned int symndx ;
};
#line 350 
struct module_sect_attrs;
#line 350 
struct module_notes_attrs;
#line 350 
struct trace_event_call;
#line 350 
struct trace_eval_map;
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char *version ;
   char *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol *syms ;
   s32 *crcs ;
   unsigned int num_syms ;
   struct mutex param_lock ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol *gpl_syms ;
   s32 *gpl_crcs ;
   struct kernel_symbol *unused_syms ;
   s32 *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol *unused_gpl_syms ;
   s32 *unused_gpl_crcs ;
   bool sig_ok ;
   bool async_probe_requested ;
   struct kernel_symbol *gpl_future_syms ;
   s32 *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   struct module_layout core_layout ;
   struct module_layout init_layout ;
   struct mod_arch_specific arch ;
   unsigned long taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   struct mod_kallsyms *kallsyms ;
   struct mod_kallsyms core_kallsyms ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   char *args ;
   void *percpu ;
   unsigned int percpu_size ;
   unsigned int num_tracepoints ;
   tracepoint_ptr_t *tracepoints_ptrs ;
   unsigned int num_srcu_structs ;
   struct srcu_struct **srcu_struct_ptrs ;
   unsigned int num_bpf_raw_events ;
   struct bpf_raw_event_map *bpf_raw_events ;
   struct jump_entry *jump_entries ;
   unsigned int num_jump_entries ;
   unsigned int num_trace_bprintk_fmt ;
   char **trace_bprintk_fmt_start ;
   struct trace_event_call **trace_events ;
   unsigned int num_trace_events ;
   struct trace_eval_map **trace_evals ;
   unsigned int num_trace_evals ;
   unsigned int num_ftrace_callsites ;
   unsigned long *ftrace_callsites ;
   bool klp ;
   bool klp_alive ;
   struct klp_modinfo *klp_info ;
   struct list_head source_list ;
   struct list_head target_list ;
   void (*exit)(void) ;
   atomic_t refcnt ;
   ctor_fn_t *ctors ;
   unsigned int num_ctors ;
   struct error_injection_entry *ei_funcs ;
   unsigned int num_ei_funcs ;
} __attribute__((__designated_init__, __aligned__(64)));
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
union __anonunion___u_2438 {
   unsigned int __val ;
   char __c[1U] ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
union __anonunion___u_2440 {
   unsigned int __val ;
   char __c[1U] ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/socket.h"
struct socket;
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct msghdr {
   void *msg_name ;
   int msg_namelen ;
   struct iov_iter msg_iter ;
   void *msg_control ;
   __kernel_size_t msg_controllen ;
   unsigned int msg_flags ;
   struct kiocb *msg_iocb ;
};
#line 287  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fs.h"
struct bio;
#line 289 
struct hd_geometry;
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_arg_2592 {
   char *buf ;
   void *data ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct __anonstruct_read_descriptor_t_2591 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_2592 arg ;
   int error ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
typedef struct __anonstruct_read_descriptor_t_2591 read_descriptor_t;
#line 1771 
struct block_device_operations;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bvec.h"
struct bvec_iter {
   sector_t bi_sector ;
   unsigned int bi_size ;
   unsigned int bi_idx ;
   unsigned int bi_bvec_done ;
};
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
enum ldv_9873 {
    SS_FREE = 0,
    SS_UNCONNECTED = 1,
    SS_CONNECTING = 2,
    SS_CONNECTED = 3,
    SS_DISCONNECTING = 4
};
#line 209  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
typedef enum ldv_9873 socket_state;
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct socket_wq {
   wait_queue_head_t wait ;
   struct fasync_struct *fasync_list ;
   unsigned long flags ;
   struct callback_head rcu ;
} __attribute__((__aligned__(64)));
#line 112 
struct proto_ops;
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct socket {
   socket_state state ;
   short type ;
   unsigned long flags ;
   struct file *file ;
   struct sock *sk ;
   struct proto_ops *ops ;
   struct socket_wq wq ;
};
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct proto_ops {
   int family ;
   struct module *owner ;
   int (*release)(struct socket *) ;
   int (*bind)(struct socket *, struct sockaddr *, int ) ;
   int (*connect)(struct socket *, struct sockaddr *, int , int ) ;
   int (*socketpair)(struct socket *, struct socket *) ;
   int (*accept)(struct socket *, struct socket *, int , bool ) ;
   int (*getname)(struct socket *, struct sockaddr *, int ) ;
   __poll_t (*poll)(struct file *, struct socket *, struct poll_table_struct *) ;
   int (*ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*compat_ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*gettstamp)(struct socket *, void *, bool , bool ) ;
   int (*listen)(struct socket *, int ) ;
   int (*shutdown)(struct socket *, int ) ;
   int (*setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*compat_setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*sendmsg)(struct socket *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct socket *, struct msghdr *, size_t , int ) ;
   int (*mmap)(struct file *, struct socket *, struct vm_area_struct *) ;
   ssize_t (*sendpage)(struct socket *, struct page *, int , size_t , int ) ;
   ssize_t (*splice_read)(struct socket *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*set_peek_off)(struct sock *, int ) ;
   int (*peek_len)(struct socket *) ;
   int (*read_sock)(struct sock *, read_descriptor_t *, int (*)(read_descriptor_t *, struct sk_buff *, unsigned int , size_t )) ;
   int (*sendpage_locked)(struct sock *, struct page *, int , size_t , int ) ;
   int (*sendmsg_locked)(struct sock *, struct msghdr *, size_t ) ;
   int (*set_rcvlowat)(struct sock *, int ) ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi_tunnel {
   __be64 tun_id ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi_common {
   int flowic_oif ;
   int flowic_iif ;
   __u32 flowic_mark ;
   __u8 flowic_tos ;
   __u8 flowic_scope ;
   __u8 flowic_proto ;
   __u8 flowic_flags ;
   __u32 flowic_secid ;
   kuid_t flowic_uid ;
   struct flowi_tunnel flowic_tun_key ;
   __u32 flowic_multipath_hash ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_ports_2657 {
   __be16 dport ;
   __be16 sport ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_icmpt_2658 {
   __u8 type ;
   __u8 code ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_dnports_2659 {
   __le16 dport ;
   __le16 sport ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_mht_2660 {
   __u8 type ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
union flowi_uli {
   struct __anonstruct_ports_2657 ports ;
   struct __anonstruct_icmpt_2658 icmpt ;
   struct __anonstruct_dnports_2659 dnports ;
   __be32 spi ;
   __be32 gre_key ;
   struct __anonstruct_mht_2660 mht ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi4 {
   struct flowi_common __fl_common ;
   __be32 saddr ;
   __be32 daddr ;
   union flowi_uli uli ;
} __attribute__((__aligned__(8)));
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi6 {
   struct flowi_common __fl_common ;
   struct in6_addr daddr ;
   struct in6_addr saddr ;
   __be32 flowlabel ;
   union flowi_uli uli ;
   __u32 mp_hash ;
} __attribute__((__aligned__(8)));
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowidn {
   struct flowi_common __fl_common ;
   __le16 daddr ;
   __le16 saddr ;
   union flowi_uli uli ;
} __attribute__((__aligned__(8)));
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
union __anonunion_u_2661 {
   struct flowi_common __fl_common ;
   struct flowi4 ip4 ;
   struct flowi6 ip6 ;
   struct flowidn dn ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi {
   union __anonunion_u_2661 u ;
} __attribute__((__aligned__(8)));
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netfilter/nf_conntrack_common.h"
struct napi_struct;
#line 313  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
typedef struct bio_vec skb_frag_t;
#line 416  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_shared_hwtstamps {
   ktime_t hwtstamp ;
};
#line 510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_shared_info {
   __u8 __unused ;
   __u8 meta_len ;
   __u8 nr_frags ;
   __u8 tx_flags ;
   unsigned short gso_size ;
   unsigned short gso_segs ;
   struct sk_buff *frag_list ;
   struct skb_shared_hwtstamps hwtstamps ;
   unsigned int gso_type ;
   u32 tskey ;
   atomic_t dataref ;
   void *destructor_arg ;
   skb_frag_t frags[17U] ;
};
#line 1165 
enum pkt_hash_types {
    PKT_HASH_TYPE_NONE = 0,
    PKT_HASH_TYPE_L2 = 1,
    PKT_HASH_TYPE_L3 = 2,
    PKT_HASH_TYPE_L4 = 3
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6_mib_device {
   atomic_long_t mibs[6U] ;
};
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6msg_mib_device {
   atomic_long_t mibs[512U] ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
enum irqreturn {
    IRQ_NONE = 0,
    IRQ_HANDLED = 1,
    IRQ_WAKE_THREAD = 2
};
#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
typedef enum irqreturn irqreturn_t;
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
enum bpf_prog_type {
    BPF_PROG_TYPE_UNSPEC = 0,
    BPF_PROG_TYPE_SOCKET_FILTER = 1,
    BPF_PROG_TYPE_KPROBE = 2,
    BPF_PROG_TYPE_SCHED_CLS = 3,
    BPF_PROG_TYPE_SCHED_ACT = 4,
    BPF_PROG_TYPE_TRACEPOINT = 5,
    BPF_PROG_TYPE_XDP = 6,
    BPF_PROG_TYPE_PERF_EVENT = 7,
    BPF_PROG_TYPE_CGROUP_SKB = 8,
    BPF_PROG_TYPE_CGROUP_SOCK = 9,
    BPF_PROG_TYPE_LWT_IN = 10,
    BPF_PROG_TYPE_LWT_OUT = 11,
    BPF_PROG_TYPE_LWT_XMIT = 12,
    BPF_PROG_TYPE_SOCK_OPS = 13,
    BPF_PROG_TYPE_SK_SKB = 14,
    BPF_PROG_TYPE_CGROUP_DEVICE = 15,
    BPF_PROG_TYPE_SK_MSG = 16,
    BPF_PROG_TYPE_RAW_TRACEPOINT = 17,
    BPF_PROG_TYPE_CGROUP_SOCK_ADDR = 18,
    BPF_PROG_TYPE_LWT_SEG6LOCAL = 19,
    BPF_PROG_TYPE_LIRC_MODE2 = 20,
    BPF_PROG_TYPE_SK_REUSEPORT = 21,
    BPF_PROG_TYPE_FLOW_DISSECTOR = 22,
    BPF_PROG_TYPE_CGROUP_SYSCTL = 23,
    BPF_PROG_TYPE_RAW_TRACEPOINT_WRITABLE = 24,
    BPF_PROG_TYPE_CGROUP_SOCKOPT = 25,
    BPF_PROG_TYPE_TRACING = 26
};
#line 169 
enum bpf_attach_type {
    BPF_CGROUP_INET_INGRESS = 0,
    BPF_CGROUP_INET_EGRESS = 1,
    BPF_CGROUP_INET_SOCK_CREATE = 2,
    BPF_CGROUP_SOCK_OPS = 3,
    BPF_SK_SKB_STREAM_PARSER = 4,
    BPF_SK_SKB_STREAM_VERDICT = 5,
    BPF_CGROUP_DEVICE = 6,
    BPF_SK_MSG_VERDICT = 7,
    BPF_CGROUP_INET4_BIND = 8,
    BPF_CGROUP_INET6_BIND = 9,
    BPF_CGROUP_INET4_CONNECT = 10,
    BPF_CGROUP_INET6_CONNECT = 11,
    BPF_CGROUP_INET4_POST_BIND = 12,
    BPF_CGROUP_INET6_POST_BIND = 13,
    BPF_CGROUP_UDP4_SENDMSG = 14,
    BPF_CGROUP_UDP6_SENDMSG = 15,
    BPF_LIRC_MODE2 = 16,
    BPF_FLOW_DISSECTOR = 17,
    BPF_CGROUP_SYSCTL = 18,
    BPF_CGROUP_UDP4_RECVMSG = 19,
    BPF_CGROUP_UDP6_RECVMSG = 20,
    BPF_CGROUP_GETSOCKOPT = 21,
    BPF_CGROUP_SETSOCKOPT = 22,
    BPF_TRACE_RAW_TP = 23,
    BPF_TRACE_FENTRY = 24,
    BPF_TRACE_FEXIT = 25,
    __MAX_BPF_ATTACH_TYPE = 26
};
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct __anonstruct_2786 {
   u8 is_data ;
   u8 padding ;
   u16 prioidx ;
   u32 classid ;
} __attribute__((__packed__));
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
union __anonunion_2785 {
   struct __anonstruct_2786 __anonCompField___anonunion_2785_152 ;
   u64 val ;
};
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct sock_cgroup_data {
   union __anonunion_2785 __anonCompField_sock_cgroup_data_153 ;
};
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/security.h"
struct xfrm_policy;
#line 178 
struct request_sock;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/pkt_sched.h"
struct tc_stats {
   __u64 bytes ;
   __u32 packets ;
   __u32 drops ;
   __u32 overlimits ;
   __u32 bps ;
   __u32 pps ;
   __u32 qlen ;
   __u32 backlog ;
};
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/pkt_sched.h"
struct tc_sizespec {
   unsigned char cell_log ;
   unsigned char size_log ;
   short cell_align ;
   int overhead ;
   unsigned int linklayer ;
   unsigned int mpu ;
   unsigned int mtu ;
   unsigned int tsize ;
};
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_hw_addr {
   struct list_head list ;
   unsigned char addr[32U] ;
   unsigned char type ;
   bool global_use ;
   int sync_cnt ;
   int refcount ;
   int synced ;
   struct callback_head callback_head ;
};
#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct gro_list {
   struct list_head list ;
   int count ;
};
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct napi_struct {
   struct list_head poll_list ;
   unsigned long state ;
   int weight ;
   unsigned long gro_bitmask ;
   int (*poll)(struct napi_struct *, int ) ;
   int poll_owner ;
   struct net_device *dev ;
   struct gro_list gro_hash[8U] ;
   struct sk_buff *skb ;
   struct list_head rx_list ;
   int rx_count ;
   struct hrtimer timer ;
   struct list_head dev_list ;
   struct hlist_node napi_hash_node ;
   unsigned int napi_id ;
};
#line 362 
enum gro_result {
    GRO_MERGED = 0,
    GRO_MERGED_FREE = 1,
    GRO_HELD = 2,
    GRO_NORMAL = 3,
    GRO_DROP = 4,
    GRO_CONSUMED = 5
};
#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum gro_result gro_result_t;
#line 3610 
enum skb_free_reason {
    SKB_REASON_CONSUMED = 0,
    SKB_REASON_DROPPED = 1
};
#line 567  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rtnetlink.h"
struct tcmsg {
   unsigned char tcm_family ;
   unsigned char tcm__pad1 ;
   unsigned short tcm__pad2 ;
   int tcm_ifindex ;
   __u32 tcm_handle ;
   __u32 tcm_parent ;
   __u32 tcm_info ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
struct vlan_hdr {
   __be16 h_vlan_TCI ;
   __be16 h_vlan_encapsulated_proto ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_counter.h"
struct page_counter {
   atomic_long_t usage ;
   unsigned long min ;
   unsigned long low ;
   unsigned long max ;
   struct page_counter *parent ;
   unsigned long emin ;
   atomic_long_t min_usage ;
   atomic_long_t children_min_usage ;
   unsigned long elow ;
   atomic_long_t low_usage ;
   atomic_long_t children_low_usage ;
   unsigned long watermark ;
   unsigned long failcnt ;
};
#line 66 
struct eventfd_ctx;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmpressure.h"
struct vmpressure {
   unsigned long scanned ;
   unsigned long reclaimed ;
   unsigned long tree_scanned ;
   unsigned long tree_reclaimed ;
   spinlock_t sr_lock ;
   struct list_head events ;
   struct mutex events_lock ;
   struct work_struct work ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
struct fprop_global {
   struct percpu_counter events ;
   unsigned int period ;
   seqcount_t sequence ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
struct fprop_local_percpu {
   struct percpu_counter events ;
   unsigned int period ;
   raw_spinlock_t lock ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
typedef int congested_fn(void *, int );
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
enum wb_reason {
    WB_REASON_BACKGROUND = 0,
    WB_REASON_VMSCAN = 1,
    WB_REASON_SYNC = 2,
    WB_REASON_PERIODIC = 3,
    WB_REASON_LAPTOP_TIMER = 4,
    WB_REASON_FREE_MORE_MEM = 5,
    WB_REASON_FS_FREE_SPACE = 6,
    WB_REASON_FORKER_THREAD = 7,
    WB_REASON_FOREIGN_FLUSH = 8,
    WB_REASON_MAX = 9
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct wb_completion {
   atomic_t cnt ;
   wait_queue_head_t *waitq ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct bdi_writeback_congested {
   unsigned long state ;
   refcount_t refcnt ;
   struct backing_dev_info *__bdi ;
   int blkcg_id ;
   struct rb_node rb_node ;
};
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
union __anonunion_2836 {
   struct work_struct release_work ;
   struct callback_head rcu ;
};
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct bdi_writeback {
   struct backing_dev_info *bdi ;
   unsigned long state ;
   unsigned long last_old_flush ;
   struct list_head b_dirty ;
   struct list_head b_io ;
   struct list_head b_more_io ;
   struct list_head b_dirty_time ;
   spinlock_t list_lock ;
   struct percpu_counter stat[4U] ;
   struct bdi_writeback_congested *congested ;
   unsigned long bw_time_stamp ;
   unsigned long dirtied_stamp ;
   unsigned long written_stamp ;
   unsigned long write_bandwidth ;
   unsigned long avg_write_bandwidth ;
   unsigned long dirty_ratelimit ;
   unsigned long balanced_dirty_ratelimit ;
   struct fprop_local_percpu completions ;
   int dirty_exceeded ;
   enum wb_reason start_all_reason ;
   spinlock_t work_lock ;
   struct list_head work_list ;
   struct delayed_work dwork ;
   unsigned long dirty_sleep ;
   struct list_head bdi_node ;
   struct percpu_ref refcnt ;
   struct fprop_local_percpu memcg_completions ;
   struct cgroup_subsys_state *memcg_css ;
   struct cgroup_subsys_state *blkcg_css ;
   struct list_head memcg_node ;
   struct list_head blkcg_node ;
   union __anonunion_2836 __anonCompField_bdi_writeback_161 ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct backing_dev_info {
   u64 id ;
   struct rb_node rb_node ;
   struct list_head bdi_list ;
   unsigned long ra_pages ;
   unsigned long io_pages ;
   congested_fn *congested_fn ;
   void *congested_data ;
   char *name ;
   struct kref refcnt ;
   unsigned int capabilities ;
   unsigned int min_ratio ;
   unsigned int max_ratio ;
   unsigned int max_prop_frac ;
   atomic_long_t tot_write_bandwidth ;
   struct bdi_writeback wb ;
   struct list_head wb_list ;
   struct xarray cgwb_tree ;
   struct rb_root cgwb_congested_tree ;
   struct mutex cgwb_release_mutex ;
   struct rw_semaphore wb_switch_rwsem ;
   wait_queue_head_t wb_waitq ;
   struct device *dev ;
   struct device *owner ;
   struct timer_list laptop_mode_wb_timer ;
   struct dentry *debug_dir ;
};
#line 306 
struct bio_set;
#line 307 
struct bio_integrity_payload;
#line 308  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
typedef void bio_end_io_t(struct bio *);
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
typedef u8 blk_status_t;
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct bio_issue {
   u64 value ;
};
#line 144 
struct blkcg_gq;
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
union __anonunion_2837 {
   struct bio_integrity_payload *bi_integrity ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct bio {
   struct bio *bi_next ;
   struct gendisk *bi_disk ;
   unsigned int bi_opf ;
   unsigned short bi_flags ;
   unsigned short bi_ioprio ;
   unsigned short bi_write_hint ;
   blk_status_t bi_status ;
   u8 bi_partno ;
   atomic_t __bi_remaining ;
   struct bvec_iter bi_iter ;
   bio_end_io_t *bi_end_io ;
   void *bi_private ;
   struct blkcg_gq *bi_blkg ;
   struct bio_issue bi_issue ;
   u64 bi_iocost_cost ;
   union __anonunion_2837 __anonCompField_bio_162 ;
   unsigned short bi_vcnt ;
   unsigned short bi_max_vecs ;
   atomic_t __bi_cnt ;
   struct bio_vec *bi_io_vec ;
   struct bio_set *bi_pool ;
   struct bio_vec bi_inline_vecs[0U] ;
};
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
typedef unsigned int blk_qc_t;
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct blk_rq_stat {
   u64 mean ;
   u64 min ;
   u64 max ;
   u32 nr_samples ;
   u64 batch ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct disk_stats {
   u64 nsecs[4U] ;
   unsigned long sectors[4U] ;
   unsigned long ios[4U] ;
   unsigned long merges[4U] ;
   unsigned long io_ticks ;
   unsigned long time_in_queue ;
   local_t in_flight[2U] ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct partition_meta_info {
   char uuid[37U] ;
   u8 volname[64U] ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct hd_struct {
   sector_t start_sect ;
   sector_t nr_sects ;
   seqcount_t nr_sects_seq ;
   sector_t alignment_offset ;
   unsigned int discard_alignment ;
   struct device __dev ;
   struct kobject *holder_dir ;
   int policy ;
   int partno ;
   struct partition_meta_info *info ;
   int make_it_fail ;
   unsigned long stamp ;
   struct disk_stats *dkstats ;
   struct percpu_ref ref ;
   struct rcu_work rcu_work ;
};
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct disk_part_tbl {
   struct callback_head callback_head ;
   int len ;
   struct hd_struct *last_lookup ;
   struct hd_struct *part[] ;
};
#line 166 
struct disk_events;
#line 167 
struct badblocks;
#line 172 
struct blk_integrity_profile;
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct blk_integrity {
   struct blk_integrity_profile *profile ;
   unsigned char flags ;
   unsigned char tuple_size ;
   unsigned char interval_exp ;
   unsigned char tag_size ;
};
#line 182 
struct timer_rand_state;
#line 182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct gendisk {
   int major ;
   int first_minor ;
   int minors ;
   char disk_name[32U] ;
   char *(*devnode)(struct gendisk *, umode_t *) ;
   unsigned short events ;
   unsigned short event_flags ;
   struct disk_part_tbl *part_tbl ;
   struct hd_struct part0 ;
   struct block_device_operations *fops ;
   struct request_queue *queue ;
   void *private_data ;
   int flags ;
   struct rw_semaphore lookup_sem ;
   struct kobject *slave_dir ;
   struct timer_rand_state *random ;
   atomic_t sync_io ;
   struct disk_events *ev ;
   struct kobject integrity_kobj ;
   int node_id ;
   struct badblocks *bb ;
   struct lockdep_map lockdep_map ;
};
#line 637  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pagemap.h"
typedef void *mempool_alloc_t(gfp_t , void *);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
typedef void mempool_free_t(void *, void *);
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
struct mempool_s {
   spinlock_t lock ;
   int min_nr ;
   int curr_nr ;
   void **elements ;
   void *pool_data ;
   mempool_alloc_t *alloc ;
   mempool_free_t *free ;
   wait_queue_head_t wait ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
typedef struct mempool_s mempool_t;
#line 307  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_integrity_payload {
   struct bio *bip_bio ;
   struct bvec_iter bip_iter ;
   unsigned short bip_slab ;
   unsigned short bip_vcnt ;
   unsigned short bip_max_vcnt ;
   unsigned short bip_flags ;
   struct bvec_iter bio_iter ;
   struct work_struct bip_work ;
   struct bio_vec *bip_vec ;
   struct bio_vec bip_inline_vecs[0U] ;
};
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_list {
   struct bio *head ;
   struct bio *tail ;
};
#line 703  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_set {
   struct kmem_cache *bio_slab ;
   unsigned int front_pad ;
   mempool_t bio_pool ;
   mempool_t bvec_pool ;
   mempool_t bio_integrity_pool ;
   mempool_t bvec_integrity_pool ;
   spinlock_t rescue_lock ;
   struct bio_list rescue_list ;
   struct work_struct rescue_work ;
   struct workqueue_struct *rescue_workqueue ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bsg.h"
struct sg_io_v4 {
   __s32 guard ;
   __u32 protocol ;
   __u32 subprotocol ;
   __u32 request_len ;
   __u64 request ;
   __u64 request_tag ;
   __u32 request_attr ;
   __u32 request_priority ;
   __u32 request_extra ;
   __u32 max_response_len ;
   __u64 response ;
   __u32 dout_iovec_count ;
   __u32 dout_xfer_len ;
   __u32 din_iovec_count ;
   __u32 din_xfer_len ;
   __u64 dout_xferp ;
   __u64 din_xferp ;
   __u32 timeout ;
   __u32 flags ;
   __u64 usr_ptr ;
   __u32 spare_in ;
   __u32 driver_status ;
   __u32 transport_status ;
   __u32 device_status ;
   __u32 retry_delay ;
   __u32 info ;
   __u32 duration ;
   __u32 response_len ;
   __s32 din_resid ;
   __s32 dout_resid ;
   __u64 generated_tag ;
   __u32 spare_out ;
   __u32 padding ;
};
#line 65 
struct request;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bsg.h"
struct bsg_ops {
   int (*check_proto)(struct sg_io_v4 *) ;
   int (*fill_hdr)(struct request *, struct sg_io_v4 *, fmode_t ) ;
   int (*complete_rq)(struct request *, struct sg_io_v4 *) ;
   void (*free_rq)(struct request *) ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bsg.h"
struct bsg_class_device {
   struct device *class_dev ;
   int minor ;
   struct request_queue *queue ;
   struct bsg_ops *ops ;
};
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/blkzoned.h"
struct blk_zone {
   __u64 start ;
   __u64 len ;
   __u64 wp ;
   __u8 type ;
   __u8 cond ;
   __u8 non_seq ;
   __u8 reset ;
   __u8 reserved[36U] ;
};
#line 134 
struct elevator_queue;
#line 135 
struct blk_trace;
#line 138 
struct blk_flush_queue;
#line 139 
struct pr_ops;
#line 140 
struct rq_qos;
#line 141 
struct blk_queue_stats;
#line 142 
struct blk_stat_callback;
#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/blkzoned.h"
typedef void rq_end_io_fn(struct request *, blk_status_t );
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef __u32 req_flags_t;
#line 67 
enum mq_rq_state {
    MQ_RQ_IDLE = 0,
    MQ_RQ_IN_FLIGHT = 1,
    MQ_RQ_COMPLETE = 2
};
#line 132 
struct blk_mq_ctx;
#line 132 
struct blk_mq_hw_ctx;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_2840 {
   struct hlist_node hash ;
   struct list_head ipi_list ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_2841 {
   struct rb_node rb_node ;
   struct bio_vec special_vec ;
   void *completion_data ;
   int error_count ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct __anonstruct_elv_2843 {
   struct io_cq *icq ;
   void *priv[2U] ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct __anonstruct_flush_2844 {
   unsigned int seq ;
   struct list_head list ;
   rq_end_io_fn *saved_end_io ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_2842 {
   struct __anonstruct_elv_2843 elv ;
   struct __anonstruct_flush_2844 flush ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_2845 {
   struct __call_single_data csd ;
   u64 fifo_time ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct request {
   struct request_queue *q ;
   struct blk_mq_ctx *mq_ctx ;
   struct blk_mq_hw_ctx *mq_hctx ;
   unsigned int cmd_flags ;
   req_flags_t rq_flags ;
   int tag ;
   int internal_tag ;
   unsigned int __data_len ;
   sector_t __sector ;
   struct bio *bio ;
   struct bio *biotail ;
   struct list_head queuelist ;
   union __anonunion_2840 __anonCompField_request_163 ;
   union __anonunion_2841 __anonCompField_request_164 ;
   union __anonunion_2842 __anonCompField_request_165 ;
   struct gendisk *rq_disk ;
   struct hd_struct *part ;
   u64 alloc_time_ns ;
   u64 start_time_ns ;
   u64 io_start_time_ns ;
   unsigned short wbt_flags ;
   unsigned short stats_sectors ;
   unsigned short nr_phys_segments ;
   unsigned short nr_integrity_segments ;
   unsigned short write_hint ;
   unsigned short ioprio ;
   unsigned int extra_len ;
   enum mq_rq_state state ;
   refcount_t ref ;
   unsigned int timeout ;
   unsigned long deadline ;
   union __anonunion_2845 __anonCompField_request_166 ;
   rq_end_io_fn *end_io ;
   void *end_io_data ;
};
#line 285 
struct elevator_type;
#line 286 
struct blk_mq_debugfs_attr;
#line 287 
enum elv_merge {
    ELEVATOR_NO_MERGE = 0,
    ELEVATOR_FRONT_MERGE = 1,
    ELEVATOR_BACK_MERGE = 2,
    ELEVATOR_DISCARD_MERGE = 3
};
#line 294 
struct blk_mq_alloc_data;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_mq_ops {
   int (*init_sched)(struct request_queue *, struct elevator_type *) ;
   void (*exit_sched)(struct elevator_queue *) ;
   int (*init_hctx)(struct blk_mq_hw_ctx *, unsigned int ) ;
   void (*exit_hctx)(struct blk_mq_hw_ctx *, unsigned int ) ;
   void (*depth_updated)(struct blk_mq_hw_ctx *) ;
   bool (*allow_merge)(struct request_queue *, struct request *, struct bio *) ;
   bool (*bio_merge)(struct blk_mq_hw_ctx *, struct bio *, unsigned int ) ;
   int (*request_merge)(struct request_queue *, struct request **, struct bio *) ;
   void (*request_merged)(struct request_queue *, struct request *, enum elv_merge ) ;
   void (*requests_merged)(struct request_queue *, struct request *, struct request *) ;
   void (*limit_depth)(unsigned int , struct blk_mq_alloc_data *) ;
   void (*prepare_request)(struct request *, struct bio *) ;
   void (*finish_request)(struct request *) ;
   void (*insert_requests)(struct blk_mq_hw_ctx *, struct list_head *, bool ) ;
   struct request *(*dispatch_request)(struct blk_mq_hw_ctx *) ;
   bool (*has_work)(struct blk_mq_hw_ctx *) ;
   void (*completed_request)(struct request *, u64 ) ;
   void (*requeue_request)(struct request *) ;
   struct request *(*former_request)(struct request_queue *, struct request *) ;
   struct request *(*next_request)(struct request_queue *, struct request *) ;
   void (*init_icq)(struct io_cq *) ;
   void (*exit_icq)(struct io_cq *) ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elv_fs_entry {
   struct attribute attr ;
   ssize_t (*show)(struct elevator_queue *, char *) ;
   ssize_t (*store)(struct elevator_queue *, char *, size_t ) ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_type {
   struct kmem_cache *icq_cache ;
   struct elevator_mq_ops ops ;
   size_t icq_size ;
   size_t icq_align ;
   struct elv_fs_entry *elevator_attrs ;
   char *elevator_name ;
   char *elevator_alias ;
   unsigned int elevator_features ;
   struct module *elevator_owner ;
   struct blk_mq_debugfs_attr *queue_debugfs_attrs ;
   struct blk_mq_debugfs_attr *hctx_debugfs_attrs ;
   char icq_cache_name[22U] ;
   struct list_head list ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_queue {
   struct elevator_type *type ;
   void *elevator_data ;
   struct kobject kobj ;
   struct mutex sysfs_lock ;
   unsigned int registered : 1 ;
   struct hlist_head hash[64U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
typedef blk_qc_t make_request_fn(struct request_queue *, struct bio *);
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef int dma_drain_needed_fn(struct request *);
#line 304 
enum blk_zoned_model {
    BLK_ZONED_NONE = 0,
    BLK_ZONED_HA = 1,
    BLK_ZONED_HM = 2
};
#line 320  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct queue_limits {
   unsigned long bounce_pfn ;
   unsigned long seg_boundary_mask ;
   unsigned long virt_boundary_mask ;
   unsigned int max_hw_sectors ;
   unsigned int max_dev_sectors ;
   unsigned int chunk_sectors ;
   unsigned int max_sectors ;
   unsigned int max_segment_size ;
   unsigned int physical_block_size ;
   unsigned int logical_block_size ;
   unsigned int alignment_offset ;
   unsigned int io_min ;
   unsigned int io_opt ;
   unsigned int max_discard_sectors ;
   unsigned int max_hw_discard_sectors ;
   unsigned int max_write_same_sectors ;
   unsigned int max_write_zeroes_sectors ;
   unsigned int discard_granularity ;
   unsigned int discard_alignment ;
   unsigned short max_segments ;
   unsigned short max_integrity_segments ;
   unsigned short max_discard_segments ;
   unsigned char misaligned ;
   unsigned char discard_misaligned ;
   unsigned char raid_partial_stripes_expensive ;
   enum blk_zoned_model zoned ;
};
#line 394 
struct blk_mq_ops;
#line 394 
struct throtl_data;
#line 394 
struct blk_mq_tag_set;
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct request_queue {
   struct request *last_merge ;
   struct elevator_queue *elevator ;
   struct blk_queue_stats *stats ;
   struct rq_qos *rq_qos ;
   make_request_fn *make_request_fn ;
   dma_drain_needed_fn *dma_drain_needed ;
   struct blk_mq_ops *mq_ops ;
   struct blk_mq_ctx *queue_ctx ;
   unsigned int queue_depth ;
   struct blk_mq_hw_ctx **queue_hw_ctx ;
   unsigned int nr_hw_queues ;
   struct backing_dev_info *backing_dev_info ;
   void *queuedata ;
   unsigned long queue_flags ;
   atomic_t pm_only ;
   int id ;
   gfp_t bounce_gfp ;
   spinlock_t queue_lock ;
   struct kobject kobj ;
   struct kobject *mq_kobj ;
   struct blk_integrity integrity ;
   struct device *dev ;
   int rpm_status ;
   unsigned int nr_pending ;
   unsigned long nr_requests ;
   unsigned int dma_drain_size ;
   void *dma_drain_buffer ;
   unsigned int dma_pad_mask ;
   unsigned int dma_alignment ;
   unsigned int rq_timeout ;
   int poll_nsec ;
   struct blk_stat_callback *poll_cb ;
   struct blk_rq_stat poll_stat[16U] ;
   struct timer_list timeout ;
   struct work_struct timeout_work ;
   struct list_head icq_list ;
   unsigned long blkcg_pols[1U] ;
   struct blkcg_gq *root_blkg ;
   struct list_head blkg_list ;
   struct queue_limits limits ;
   unsigned int required_elevator_features ;
   unsigned int nr_zones ;
   unsigned long *conv_zones_bitmap ;
   unsigned long *seq_zones_wlock ;
   unsigned int sg_timeout ;
   unsigned int sg_reserved_size ;
   int node ;
   struct blk_trace *blk_trace ;
   struct mutex blk_trace_mutex ;
   struct blk_flush_queue *fq ;
   struct list_head requeue_list ;
   spinlock_t requeue_lock ;
   struct delayed_work requeue_work ;
   struct mutex sysfs_lock ;
   struct mutex sysfs_dir_lock ;
   struct list_head unused_hctx_list ;
   spinlock_t unused_hctx_lock ;
   int mq_freeze_depth ;
   struct bsg_class_device bsg_dev ;
   struct throtl_data *td ;
   struct callback_head callback_head ;
   wait_queue_head_t mq_freeze_wq ;
   struct mutex mq_freeze_lock ;
   struct percpu_ref q_usage_counter ;
   struct blk_mq_tag_set *tag_set ;
   struct list_head tag_set_list ;
   struct bio_set bio_split ;
   struct dentry *debugfs_dir ;
   struct dentry *sched_debugfs_dir ;
   struct dentry *rqos_debugfs_dir ;
   bool mq_sysfs_init_done ;
   size_t cmd_size ;
   struct work_struct release_work ;
   u64 write_hints[5U] ;
};
#line 1160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_plug {
   struct list_head mq_list ;
   struct list_head cb_list ;
   unsigned short rq_count ;
   bool multiple_queues ;
};
#line 1514  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_integrity_iter {
   void *prot_buf ;
   void *data_buf ;
   sector_t seed ;
   unsigned int data_size ;
   unsigned short interval ;
   char *disk_name ;
};
#line 1522  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef blk_status_t integrity_processing_fn(struct blk_integrity_iter *);
#line 1524  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef void integrity_prepare_fn(struct request *);
#line 1525  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef void integrity_complete_fn(struct request *, unsigned int );
#line 1527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_integrity_profile {
   integrity_processing_fn *generate_fn ;
   integrity_processing_fn *verify_fn ;
   integrity_prepare_fn *prepare_fn ;
   integrity_complete_fn *complete_fn ;
   char *name ;
};
#line 1693  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct block_device_operations {
   int (*open)(struct block_device *, fmode_t ) ;
   void (*release)(struct gendisk *, fmode_t ) ;
   int (*rw_page)(struct block_device *, sector_t , struct page *, unsigned int ) ;
   int (*ioctl)(struct block_device *, fmode_t , unsigned int , unsigned long ) ;
   int (*compat_ioctl)(struct block_device *, fmode_t , unsigned int , unsigned long ) ;
   unsigned int (*check_events)(struct gendisk *, unsigned int ) ;
   int (*media_changed)(struct gendisk *) ;
   void (*unlock_native_capacity)(struct gendisk *) ;
   int (*revalidate_disk)(struct gendisk *) ;
   int (*getgeo)(struct block_device *, struct hd_geometry *) ;
   void (*swap_slot_free_notify)(struct block_device *, unsigned long ) ;
   int (*report_zones)(struct gendisk *, sector_t , unsigned int , int (*)(struct blk_zone *, unsigned int , void *), void *) ;
   struct module *owner ;
   struct pr_ops *pr_ops ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_policy_data;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg {
   struct cgroup_subsys_state css ;
   spinlock_t lock ;
   struct xarray blkg_tree ;
   struct blkcg_gq *blkg_hint ;
   struct hlist_head blkg_list ;
   struct blkcg_policy_data *cpd[5U] ;
   struct list_head all_blkcgs_node ;
   struct list_head cgwb_list ;
   refcount_t cgwb_refcnt ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_iostat {
   u64 bytes[3U] ;
   u64 ios[3U] ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_iostat_set {
   struct u64_stats_sync sync ;
   struct blkg_iostat cur ;
   struct blkg_iostat last ;
};
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_policy_data {
   struct blkcg_gq *blkg ;
   int plid ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_policy_data {
   struct blkcg *blkcg ;
   int plid ;
};
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_gq {
   struct request_queue *q ;
   struct list_head q_node ;
   struct hlist_node blkcg_node ;
   struct blkcg *blkcg ;
   struct bdi_writeback_congested *wb_congested ;
   struct blkcg_gq *parent ;
   struct percpu_ref refcnt ;
   bool online ;
   struct blkg_iostat_set *iostat_cpu ;
   struct blkg_iostat_set iostat ;
   struct blkg_policy_data *pd[5U] ;
   spinlock_t async_bio_lock ;
   struct bio_list async_bios ;
   struct work_struct async_bio_work ;
   atomic_t use_delay ;
   atomic64_t delay_nsec ;
   atomic64_t delay_start ;
   u64 last_delay ;
   int last_use ;
   struct callback_head callback_head ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
enum writeback_sync_modes {
    WB_SYNC_NONE = 0,
    WB_SYNC_ALL = 1
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
struct writeback_control {
   long nr_to_write ;
   long pages_skipped ;
   loff_t range_start ;
   loff_t range_end ;
   enum writeback_sync_modes sync_mode ;
   unsigned int for_kupdate : 1 ;
   unsigned int for_background : 1 ;
   unsigned int tagged_writepages : 1 ;
   unsigned int for_reclaim : 1 ;
   unsigned int range_cyclic : 1 ;
   unsigned int for_sync : 1 ;
   unsigned int no_cgroup_owner : 1 ;
   unsigned int punt_to_cgroup : 1 ;
   struct bdi_writeback *wb ;
   struct inode *inode ;
   int wb_id ;
   int wb_lcand_id ;
   int wb_tcand_id ;
   size_t wb_bytes ;
   size_t wb_lcand_bytes ;
   size_t wb_tcand_bytes ;
};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
struct wb_domain {
   spinlock_t lock ;
   struct fprop_global completions ;
   struct timer_list period_timer ;
   unsigned long period_time ;
   unsigned long dirty_limit_tstamp ;
   unsigned long dirty_limit ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_id {
   int id ;
   refcount_t ref ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_vmstats_percpu {
   long stat[38U] ;
   unsigned long events[91U] ;
   unsigned long nr_page_events ;
   unsigned long targets[2U] ;
};
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_reclaim_iter {
   struct mem_cgroup *position ;
   unsigned int generation ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct lruvec_stat {
   long count[32U] ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_shrinker_map {
   struct callback_head rcu ;
   unsigned long map[0U] ;
};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_per_node {
   struct lruvec lruvec ;
   struct lruvec_stat *lruvec_stat_local ;
   struct lruvec_stat *lruvec_stat_cpu ;
   atomic_long_t lruvec_stat[32U] ;
   unsigned long lru_zone_size[5U][5U] ;
   struct mem_cgroup_reclaim_iter iter ;
   struct memcg_shrinker_map *shrinker_map ;
   struct rb_node tree_node ;
   unsigned long usage_in_excess ;
   bool on_tree ;
   struct mem_cgroup *memcg ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_threshold {
   struct eventfd_ctx *eventfd ;
   unsigned long threshold ;
};
#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_threshold_ary {
   int current_threshold ;
   unsigned int size ;
   struct mem_cgroup_threshold entries[0U] ;
};
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_thresholds {
   struct mem_cgroup_threshold_ary *primary ;
   struct mem_cgroup_threshold_ary *spare ;
};
#line 164 
enum memcg_kmem_state {
    KMEM_NONE = 0,
    KMEM_ALLOCATED = 1,
    KMEM_ONLINE = 2
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_padding {
   char x[0U] ;
} __attribute__((__aligned__(4096)));
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_cgwb_frn {
   u64 bdi_id ;
   int memcg_id ;
   u64 at ;
   struct wb_completion done ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup {
   struct cgroup_subsys_state css ;
   struct mem_cgroup_id id ;
   struct page_counter memory ;
   struct page_counter swap ;
   struct page_counter memsw ;
   struct page_counter kmem ;
   struct page_counter tcpmem ;
   unsigned long high ;
   struct work_struct high_work ;
   unsigned long soft_limit ;
   struct vmpressure vmpressure ;
   bool use_hierarchy ;
   bool oom_group ;
   bool oom_lock ;
   int under_oom ;
   int swappiness ;
   int oom_kill_disable ;
   struct cgroup_file events_file ;
   struct cgroup_file events_local_file ;
   struct cgroup_file swap_events_file ;
   struct mutex thresholds_lock ;
   struct mem_cgroup_thresholds thresholds ;
   struct mem_cgroup_thresholds memsw_thresholds ;
   struct list_head oom_notify ;
   unsigned long move_charge_at_immigrate ;
   spinlock_t move_lock ;
   unsigned long move_lock_flags ;
   struct memcg_padding _pad1_ ;
   atomic_t moving_account ;
   struct task_struct *move_lock_task ;
   struct memcg_vmstats_percpu *vmstats_local ;
   struct memcg_vmstats_percpu *vmstats_percpu ;
   struct memcg_padding _pad2_ ;
   atomic_long_t vmstats[38U] ;
   atomic_long_t vmevents[91U] ;
   atomic_long_t memory_events[7U] ;
   atomic_long_t memory_events_local[7U] ;
   unsigned long socket_pressure ;
   bool tcpmem_active ;
   int tcpmem_pressure ;
   int kmemcg_id ;
   enum memcg_kmem_state kmem_state ;
   struct list_head kmem_caches ;
   struct list_head cgwb_list ;
   struct wb_domain cgwb_domain ;
   struct memcg_cgwb_frn cgwb_frn[4U] ;
   struct list_head event_list ;
   spinlock_t event_list_lock ;
   struct deferred_split deferred_split_queue ;
   struct mem_cgroup_per_node *nodeinfo[0U] ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/gen_stats.h"
struct gnet_stats_queue {
   __u32 qlen ;
   __u32 backlog ;
   __u32 drops ;
   __u32 requeues ;
   __u32 overlimits ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_stats_basic_packed {
   __u64 bytes ;
   __u64 packets ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_stats_basic_cpu {
   struct gnet_stats_basic_packed bstats ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 20 
struct net_rate_estimator;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_dump {
   spinlock_t *lock ;
   struct sk_buff *skb ;
   struct nlattr *tail ;
   int compat_tc_stats ;
   int compat_xstats ;
   int padattr ;
   void *xstats ;
   int xstats_len ;
   struct tc_stats tc_stats ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
struct __anonstruct_2862 {
   s16 min ;
   s16 max ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
union __anonunion_2861 {
   void *validation_data ;
   struct __anonstruct_2862 __anonCompField___anonunion_2861_167 ;
   int (*validate)(struct nlattr *, struct netlink_ext_ack *) ;
   u16 strict_start_type ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
struct nla_policy {
   u8 type ;
   u8 validation_type ;
   u16 len ;
   union __anonunion_2861 __anonCompField_nla_policy_168 ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/rtnetlink.h"
struct rtnl_link_ops {
   struct list_head list ;
   char *kind ;
   size_t priv_size ;
   void (*setup)(struct net_device *) ;
   unsigned int maxtype ;
   struct nla_policy *policy ;
   int (*validate)(struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   int (*newlink)(struct net *, struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   int (*changelink)(struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   void (*dellink)(struct net_device *, struct list_head *) ;
   size_t (*get_size)(struct net_device *) ;
   int (*fill_info)(struct sk_buff *, struct net_device *) ;
   size_t (*get_xstats_size)(struct net_device *) ;
   int (*fill_xstats)(struct sk_buff *, struct net_device *) ;
   unsigned int (*get_num_tx_queues)(void) ;
   unsigned int (*get_num_rx_queues)(void) ;
   unsigned int slave_maxtype ;
   struct nla_policy *slave_policy ;
   int (*slave_changelink)(struct net_device *, struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   size_t (*get_slave_size)(struct net_device *, struct net_device *) ;
   int (*fill_slave_info)(struct sk_buff *, struct net_device *, struct net_device *) ;
   struct net *(*get_link_net)(struct net_device *) ;
   size_t (*get_linkxstats_size)(struct net_device *, int ) ;
   int (*fill_linkxstats)(struct sk_buff *, struct net_device *, int *, int ) ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jhash.h"
struct rhash_lock_head {
   };
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable.h"
struct bucket_table {
   unsigned int size ;
   unsigned int nest ;
   u32 hash_rnd ;
   struct list_head walkers ;
   struct callback_head rcu ;
   struct bucket_table *future_tbl ;
   struct lockdep_map dep_map ;
   struct rhash_lock_head *buckets[] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct flow_block {
   struct list_head cb_list ;
};
#line 298  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
typedef int flow_setup_cb_t(enum tc_setup_type , void *, void *);
#line 412 
struct Qdisc_ops;
#line 413 
struct qdisc_walker;
#line 414 
struct tcf_walker;
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct qdisc_size_table {
   struct callback_head rcu ;
   struct list_head list ;
   struct tc_sizespec szopts ;
   int refcnt ;
   u16 data[] ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct qdisc_skb_head {
   struct sk_buff *head ;
   struct sk_buff *tail ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc {
   int (*enqueue)(struct sk_buff *, struct Qdisc *, struct sk_buff **) ;
   struct sk_buff *(*dequeue)(struct Qdisc *) ;
   unsigned int flags ;
   u32 limit ;
   struct Qdisc_ops *ops ;
   struct qdisc_size_table *stab ;
   struct hlist_node hash ;
   u32 handle ;
   u32 parent ;
   struct netdev_queue *dev_queue ;
   struct net_rate_estimator *rate_est ;
   struct gnet_stats_basic_cpu *cpu_bstats ;
   struct gnet_stats_queue *cpu_qstats ;
   int padded ;
   refcount_t refcnt ;
   struct sk_buff_head gso_skb ;
   struct qdisc_skb_head q ;
   struct gnet_stats_basic_packed bstats ;
   seqcount_t running ;
   struct gnet_stats_queue qstats ;
   unsigned long state ;
   struct Qdisc *next_sched ;
   struct sk_buff_head skb_bad_txq ;
   spinlock_t busylock ;
   spinlock_t seqlock ;
   bool empty ;
   struct callback_head rcu ;
};
#line 195 
struct tcf_block;
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc_class_ops {
   unsigned int flags ;
   struct netdev_queue *(*select_queue)(struct Qdisc *, struct tcmsg *) ;
   int (*graft)(struct Qdisc *, unsigned long , struct Qdisc *, struct Qdisc **, struct netlink_ext_ack *) ;
   struct Qdisc *(*leaf)(struct Qdisc *, unsigned long ) ;
   void (*qlen_notify)(struct Qdisc *, unsigned long ) ;
   unsigned long (*find)(struct Qdisc *, u32 ) ;
   int (*change)(struct Qdisc *, u32 , u32 , struct nlattr **, unsigned long *, struct netlink_ext_ack *) ;
   int (*delete)(struct Qdisc *, unsigned long ) ;
   void (*walk)(struct Qdisc *, struct qdisc_walker *) ;
   struct tcf_block *(*tcf_block)(struct Qdisc *, unsigned long , struct netlink_ext_ack *) ;
   unsigned long (*bind_tcf)(struct Qdisc *, unsigned long , u32 ) ;
   void (*unbind_tcf)(struct Qdisc *, unsigned long ) ;
   int (*dump)(struct Qdisc *, unsigned long , struct sk_buff *, struct tcmsg *) ;
   int (*dump_stats)(struct Qdisc *, unsigned long , struct gnet_dump *) ;
};
#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc_ops {
   struct Qdisc_ops *next ;
   struct Qdisc_class_ops *cl_ops ;
   char id[16U] ;
   int priv_size ;
   unsigned int static_flags ;
   int (*enqueue)(struct sk_buff *, struct Qdisc *, struct sk_buff **) ;
   struct sk_buff *(*dequeue)(struct Qdisc *) ;
   struct sk_buff *(*peek)(struct Qdisc *) ;
   int (*init)(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *) ;
   void (*reset)(struct Qdisc *) ;
   void (*destroy)(struct Qdisc *) ;
   int (*change)(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *) ;
   void (*attach)(struct Qdisc *) ;
   int (*change_tx_queue_len)(struct Qdisc *, unsigned int ) ;
   int (*dump)(struct Qdisc *, struct sk_buff *) ;
   int (*dump_stats)(struct Qdisc *, struct gnet_dump *) ;
   void (*ingress_block_set)(struct Qdisc *, u32 ) ;
   void (*egress_block_set)(struct Qdisc *, u32 ) ;
   u32 (*ingress_block_get)(struct Qdisc *) ;
   u32 (*egress_block_get)(struct Qdisc *) ;
   struct module *owner ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_2936 {
   unsigned long class ;
   u32 classid ;
};
#line 272 
struct tcf_proto;
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_2937 {
   bool ingress ;
   struct gnet_stats_queue *qstats ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
union __anonunion_2935 {
   struct __anonstruct_2936 __anonCompField___anonunion_2935_170 ;
   struct tcf_proto *goto_tp ;
   struct __anonstruct_2937 __anonCompField___anonunion_2935_171 ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_result {
   union __anonunion_2935 __anonCompField_tcf_result_172 ;
};
#line 287 
struct tcf_chain;
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_proto_ops {
   struct list_head head ;
   char kind[16U] ;
   int (*classify)(struct sk_buff *, struct tcf_proto *, struct tcf_result *) ;
   int (*init)(struct tcf_proto *) ;
   void (*destroy)(struct tcf_proto *, bool , struct netlink_ext_ack *) ;
   void *(*get)(struct tcf_proto *, u32 ) ;
   void (*put)(struct tcf_proto *, void *) ;
   int (*change)(struct net *, struct sk_buff *, struct tcf_proto *, unsigned long , u32 , struct nlattr **, void **, bool , bool , struct netlink_ext_ack *) ;
   int (*delete)(struct tcf_proto *, void *, bool *, bool , struct netlink_ext_ack *) ;
   bool (*delete_empty)(struct tcf_proto *) ;
   void (*walk)(struct tcf_proto *, struct tcf_walker *, bool ) ;
   int (*reoffload)(struct tcf_proto *, bool , flow_setup_cb_t *, void *, struct netlink_ext_ack *) ;
   void (*hw_add)(struct tcf_proto *, void *) ;
   void (*hw_del)(struct tcf_proto *, void *) ;
   void (*bind_class)(void *, u32 , unsigned long ) ;
   void *(*tmplt_create)(struct net *, struct tcf_chain *, struct nlattr **, struct netlink_ext_ack *) ;
   void (*tmplt_destroy)(void *) ;
   int (*dump)(struct net *, struct tcf_proto *, void *, struct sk_buff *, struct tcmsg *, bool ) ;
   int (*tmplt_dump)(struct sk_buff *, struct net *, void *) ;
   struct module *owner ;
   int flags ;
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_proto {
   struct tcf_proto *next ;
   void *root ;
   int (*classify)(struct sk_buff *, struct tcf_proto *, struct tcf_result *) ;
   __be16 protocol ;
   u32 prio ;
   void *data ;
   struct tcf_proto_ops *ops ;
   struct tcf_chain *chain ;
   spinlock_t lock ;
   bool deleting ;
   refcount_t refcnt ;
   struct callback_head rcu ;
   struct hlist_node destroy_ht_node ;
};
#line 386  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_chain {
   struct mutex filter_chain_lock ;
   struct tcf_proto *filter_chain ;
   struct list_head list ;
   struct tcf_block *block ;
   u32 index ;
   unsigned int refcnt ;
   unsigned int action_refcnt ;
   bool explicitly_created ;
   bool flushing ;
   struct tcf_proto_ops *tmplt_ops ;
   void *tmplt_priv ;
   struct callback_head rcu ;
};
#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_chain0_2939 {
   struct tcf_chain *chain ;
   struct list_head filter_chain_list ;
};
#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_block {
   struct mutex lock ;
   struct list_head chain_list ;
   u32 index ;
   refcount_t refcnt ;
   struct net *net ;
   struct Qdisc *q ;
   struct rw_semaphore cb_lock ;
   struct flow_block flow_block ;
   struct list_head owner_list ;
   bool keep_dst ;
   atomic_t offloadcnt ;
   unsigned int nooffloaddevcnt ;
   unsigned int lockeddevcnt ;
   struct __anonstruct_chain0_2939 chain0 ;
   struct callback_head rcu ;
   struct hlist_head proto_destroy_ht[128U] ;
   struct mutex proto_destroy_lock ;
};
#line 1269  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct mini_Qdisc {
   struct tcf_proto *filter_list ;
   struct gnet_stats_basic_cpu *cpu_bstats ;
   struct gnet_stats_queue *cpu_qstats ;
   struct callback_head rcu ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/filter.h"
struct sock_filter {
   __u16 code ;
   __u8 jt ;
   __u8 jf ;
   __u32 k ;
};
#line 35 
struct sock_reuseport;
#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct sock_fprog_kern {
   u16 len ;
   struct sock_filter *filter ;
};
#line 526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
union __anonunion_2952 {
   struct sock_filter insns[0U] ;
   struct bpf_insn insnsi[0U] ;
};
#line 526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct bpf_prog {
   u16 pages ;
   u16 jited : 1 ;
   u16 jit_requested : 1 ;
   u16 gpl_compatible : 1 ;
   u16 cb_access : 1 ;
   u16 dst_needed : 1 ;
   u16 blinded : 1 ;
   u16 is_func : 1 ;
   u16 kprobe_override : 1 ;
   u16 has_callchain_buf : 1 ;
   u16 enforce_expected_attach_type : 1 ;
   enum bpf_prog_type type ;
   enum bpf_attach_type expected_attach_type ;
   u32 len ;
   u32 jited_len ;
   u8 tag[8U] ;
   struct bpf_prog_aux *aux ;
   struct sock_fprog_kern *orig_prog ;
   unsigned int (*bpf_func)(void *, struct bpf_insn *) ;
   union __anonunion_2952 __anonCompField_bpf_prog_174 ;
};
#line 554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct sk_filter {
   refcount_t refcnt ;
   struct callback_head rcu ;
   struct bpf_prog *prog ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/poll.h"
struct pollfd {
   int fd ;
   short events ;
   short revents ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/poll.h"
struct poll_table_struct {
   void (*_qproc)(struct file *, wait_queue_head_t *, struct poll_table_struct *) ;
   __poll_t _key ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_table;
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_parms {
   possible_net_t net ;
   struct net_device *dev ;
   struct list_head list ;
   int (*neigh_setup)(struct neighbour *) ;
   struct neigh_table *tbl ;
   void *sysctl_table ;
   int dead ;
   refcount_t refcnt ;
   struct callback_head callback_head ;
   int reachable_time ;
   int data[13U] ;
   unsigned long data_state[1U] ;
};
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_statistics {
   unsigned long allocs ;
   unsigned long destroys ;
   unsigned long hash_grows ;
   unsigned long res_failed ;
   unsigned long lookups ;
   unsigned long hits ;
   unsigned long rcv_probes_mcast ;
   unsigned long rcv_probes_ucast ;
   unsigned long periodic_gc_runs ;
   unsigned long forced_gc_runs ;
   unsigned long unres_discards ;
   unsigned long table_fulls ;
};
#line 134 
struct neigh_ops;
#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neighbour {
   struct neighbour *next ;
   struct neigh_table *tbl ;
   struct neigh_parms *parms ;
   unsigned long confirmed ;
   unsigned long updated ;
   rwlock_t lock ;
   refcount_t refcnt ;
   unsigned int arp_queue_len_bytes ;
   struct sk_buff_head arp_queue ;
   struct timer_list timer ;
   unsigned long used ;
   atomic_t probes ;
   __u8 flags ;
   __u8 nud_state ;
   __u8 type ;
   __u8 dead ;
   u8 protocol ;
   seqlock_t ha_lock ;
   unsigned char ha[32U] ;
   struct hh_cache hh ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   struct neigh_ops *ops ;
   struct list_head gc_list ;
   struct callback_head rcu ;
   struct net_device *dev ;
   u8 primary_key[0U] ;
} __attribute__((__designated_init__));
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_ops {
   int family ;
   void (*solicit)(struct neighbour *, struct sk_buff *) ;
   void (*error_report)(struct neighbour *, struct sk_buff *) ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   int (*connected_output)(struct neighbour *, struct sk_buff *) ;
};
#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct pneigh_entry {
   struct pneigh_entry *next ;
   possible_net_t net ;
   struct net_device *dev ;
   u8 flags ;
   u8 protocol ;
   u8 key[0U] ;
};
#line 186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_hash_table {
   struct neighbour **hash_buckets ;
   unsigned int hash_shift ;
   __u32 hash_rnd[4U] ;
   struct callback_head rcu ;
};
#line 194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_table {
   int family ;
   unsigned int entry_size ;
   unsigned int key_len ;
   __be16 protocol ;
   __u32 (*hash)(void *, struct net_device *, __u32 *) ;
   bool (*key_eq)(struct neighbour *, void *) ;
   int (*constructor)(struct neighbour *) ;
   int (*pconstructor)(struct pneigh_entry *) ;
   void (*pdestructor)(struct pneigh_entry *) ;
   void (*proxy_redo)(struct sk_buff *) ;
   bool (*allow_add)(struct net_device *, struct netlink_ext_ack *) ;
   char *id ;
   struct neigh_parms parms ;
   struct list_head parms_list ;
   int gc_interval ;
   int gc_thresh1 ;
   int gc_thresh2 ;
   int gc_thresh3 ;
   unsigned long last_flush ;
   struct delayed_work gc_work ;
   struct timer_list proxy_timer ;
   struct sk_buff_head proxy_queue ;
   atomic_t entries ;
   atomic_t gc_entries ;
   struct list_head gc_list ;
   rwlock_t lock ;
   unsigned long last_rand ;
   struct neigh_statistics *stats ;
   struct neigh_hash_table *nht ;
   struct pneigh_entry **phash_buckets ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst.h"
struct lwtunnel_state;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst.h"
struct dst_entry {
   struct net_device *dev ;
   struct dst_ops *ops ;
   unsigned long _metrics ;
   unsigned long expires ;
   struct xfrm_state *xfrm ;
   int (*input)(struct sk_buff *) ;
   int (*output)(struct net *, struct sock *, struct sk_buff *) ;
   unsigned short flags ;
   short obsolete ;
   unsigned short header_len ;
   unsigned short trailer_len ;
   atomic_t __refcnt ;
   int __use ;
   unsigned long lastuse ;
   struct lwtunnel_state *lwtstate ;
   struct callback_head callback_head ;
   short error ;
   short __pad ;
   __u32 tclassid ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fib_rules.h"
struct fib_rule_hdr {
   __u8 family ;
   __u8 dst_len ;
   __u8 src_len ;
   __u8 tos ;
   __u8 table ;
   __u8 res1 ;
   __u8 res2 ;
   __u8 action ;
   __u32 flags ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fib_rules.h"
struct fib_rule_port_range {
   __u16 start ;
   __u16 end ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_notifier.h"
struct fib_notifier_ops {
   int family ;
   struct list_head list ;
   unsigned int (*fib_seq_read)(struct net *) ;
   int (*fib_dump)(struct net *, struct notifier_block *, struct netlink_ext_ack *) ;
   struct module *owner ;
   struct callback_head rcu ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_kuid_range {
   kuid_t start ;
   kuid_t end ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_rule {
   struct list_head list ;
   int iifindex ;
   int oifindex ;
   u32 mark ;
   u32 mark_mask ;
   u32 flags ;
   u32 table ;
   u8 action ;
   u8 l3mdev ;
   u8 proto ;
   u8 ip_proto ;
   u32 target ;
   __be64 tun_id ;
   struct fib_rule *ctarget ;
   struct net *fr_net ;
   refcount_t refcnt ;
   u32 pref ;
   int suppress_ifgroup ;
   int suppress_prefixlen ;
   char iifname[16U] ;
   char oifname[16U] ;
   struct fib_kuid_range uid_range ;
   struct fib_rule_port_range sport_range ;
   struct fib_rule_port_range dport_range ;
   struct callback_head rcu ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_lookup_arg {
   void *lookup_ptr ;
   void *lookup_data ;
   void *result ;
   struct fib_rule *rule ;
   u32 table ;
   int flags ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_rules_ops {
   int family ;
   struct list_head list ;
   int rule_size ;
   int addr_size ;
   int unresolved_rules ;
   int nr_goto_rules ;
   unsigned int fib_rules_seq ;
   int (*action)(struct fib_rule *, struct flowi *, int , struct fib_lookup_arg *) ;
   bool (*suppress)(struct fib_rule *, struct fib_lookup_arg *) ;
   int (*match)(struct fib_rule *, struct flowi *, int ) ;
   int (*configure)(struct fib_rule *, struct sk_buff *, struct fib_rule_hdr *, struct nlattr **, struct netlink_ext_ack *) ;
   int (*delete)(struct fib_rule *) ;
   int (*compare)(struct fib_rule *, struct fib_rule_hdr *, struct nlattr **) ;
   int (*fill)(struct fib_rule *, struct sk_buff *, struct fib_rule_hdr *) ;
   size_t (*nlmsg_payload)(struct fib_rule *) ;
   void (*flush_cache)(struct fib_rules_ops *) ;
   int nlgroup ;
   struct nla_policy *policy ;
   struct list_head rules_list ;
   struct module *owner ;
   struct net *fro_net ;
   struct callback_head rcu ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
struct l3mdev_ops {
   u32 (*l3mdev_fib_table)(struct net_device *) ;
   struct sk_buff *(*l3mdev_l3_rcv)(struct net_device *, struct sk_buff *, u16 ) ;
   struct sk_buff *(*l3mdev_l3_out)(struct net_device *, struct sock *, struct sk_buff *, u16 ) ;
   struct dst_entry *(*l3mdev_link_scope_lookup)(struct net_device *, struct flowi6 *) ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
struct __anonstruct_socket_lock_t_2974 {
   spinlock_t slock ;
   int owned ;
   wait_queue_head_t wq ;
   struct lockdep_map dep_map ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
typedef struct __anonstruct_socket_lock_t_2974 socket_lock_t;
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct proto;
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
typedef __u32 __portpair;
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
typedef __u64 __addrpair;
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_2976 {
   __be32 skc_daddr ;
   __be32 skc_rcv_saddr ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_2975 {
   __addrpair skc_addrpair ;
   struct __anonstruct_2976 __anonCompField___anonunion_2975_176 ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_2977 {
   unsigned int skc_hash ;
   __u16 skc_u16hashes[2U] ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_2979 {
   __be16 skc_dport ;
   __u16 skc_num ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_2978 {
   __portpair skc_portpair ;
   struct __anonstruct_2979 __anonCompField___anonunion_2978_179 ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_2980 {
   struct hlist_node skc_bind_node ;
   struct hlist_node skc_portaddr_node ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_2981 {
   unsigned long skc_flags ;
   struct sock *skc_listener ;
   struct inet_timewait_death_row *skc_tw_dr ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_2982 {
   struct hlist_node skc_node ;
   struct hlist_nulls_node skc_nulls_node ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_2983 {
   int skc_incoming_cpu ;
   u32 skc_rcv_wnd ;
   u32 skc_tw_rcv_nxt ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_2984 {
   u32 skc_rxhash ;
   u32 skc_window_clamp ;
   u32 skc_tw_snd_nxt ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct sock_common {
   union __anonunion_2975 __anonCompField_sock_common_177 ;
   union __anonunion_2977 __anonCompField_sock_common_178 ;
   union __anonunion_2978 __anonCompField_sock_common_180 ;
   unsigned short skc_family ;
   unsigned char skc_state ;
   unsigned char skc_reuse : 4 ;
   unsigned char skc_reuseport : 1 ;
   unsigned char skc_ipv6only : 1 ;
   unsigned char skc_net_refcnt : 1 ;
   int skc_bound_dev_if ;
   union __anonunion_2980 __anonCompField_sock_common_181 ;
   struct proto *skc_prot ;
   possible_net_t skc_net ;
   struct in6_addr skc_v6_daddr ;
   struct in6_addr skc_v6_rcv_saddr ;
   atomic64_t skc_cookie ;
   union __anonunion_2981 __anonCompField_sock_common_182 ;
   int skc_dontcopy_begin[0U] ;
   union __anonunion_2982 __anonCompField_sock_common_183 ;
   unsigned short skc_tx_queue_mapping ;
   unsigned short skc_rx_queue_mapping ;
   union __anonunion_2983 __anonCompField_sock_common_184 ;
   refcount_t skc_refcnt ;
   int skc_dontcopy_end[0U] ;
   union __anonunion_2984 __anonCompField_sock_common_185 ;
};
#line 231 
struct bpf_sk_storage;
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_sk_backlog_2985 {
   atomic_t rmem_alloc ;
   int len ;
   struct sk_buff *head ;
   struct sk_buff *tail ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_2986 {
   struct socket_wq *sk_wq ;
   struct socket_wq *sk_wq_raw ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_2987 {
   struct sk_buff *sk_send_head ;
   struct rb_root tcp_rtx_queue ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct sock {
   struct sock_common __sk_common ;
   socket_lock_t sk_lock ;
   atomic_t sk_drops ;
   int sk_rcvlowat ;
   struct sk_buff_head sk_error_queue ;
   struct sk_buff *sk_rx_skb_cache ;
   struct sk_buff_head sk_receive_queue ;
   struct __anonstruct_sk_backlog_2985 sk_backlog ;
   int sk_forward_alloc ;
   unsigned int sk_ll_usec ;
   unsigned int sk_napi_id ;
   int sk_rcvbuf ;
   struct sk_filter *sk_filter ;
   union __anonunion_2986 __anonCompField_sock_186 ;
   struct xfrm_policy *sk_policy[2U] ;
   struct dst_entry *sk_rx_dst ;
   struct dst_entry *sk_dst_cache ;
   atomic_t sk_omem_alloc ;
   int sk_sndbuf ;
   int sk_wmem_queued ;
   refcount_t sk_wmem_alloc ;
   unsigned long sk_tsq_flags ;
   union __anonunion_2987 __anonCompField_sock_187 ;
   struct sk_buff *sk_tx_skb_cache ;
   struct sk_buff_head sk_write_queue ;
   __s32 sk_peek_off ;
   int sk_write_pending ;
   __u32 sk_dst_pending_confirm ;
   u32 sk_pacing_status ;
   long sk_sndtimeo ;
   struct timer_list sk_timer ;
   __u32 sk_priority ;
   __u32 sk_mark ;
   unsigned long sk_pacing_rate ;
   unsigned long sk_max_pacing_rate ;
   struct page_frag sk_frag ;
   netdev_features_t sk_route_caps ;
   netdev_features_t sk_route_nocaps ;
   netdev_features_t sk_route_forced_caps ;
   int sk_gso_type ;
   unsigned int sk_gso_max_size ;
   gfp_t sk_allocation ;
   __u32 sk_txhash ;
   unsigned int __sk_flags_offset[0U] ;
   unsigned int sk_padding : 1 ;
   unsigned int sk_kern_sock : 1 ;
   unsigned int sk_no_check_tx : 1 ;
   unsigned int sk_no_check_rx : 1 ;
   unsigned int sk_userlocks : 4 ;
   unsigned int sk_protocol : 8 ;
   unsigned int sk_type : 16 ;
   u16 sk_gso_max_segs ;
   u8 sk_pacing_shift ;
   unsigned long sk_lingertime ;
   struct proto *sk_prot_creator ;
   rwlock_t sk_callback_lock ;
   int sk_err ;
   int sk_err_soft ;
   u32 sk_ack_backlog ;
   u32 sk_max_ack_backlog ;
   kuid_t sk_uid ;
   struct pid *sk_peer_pid ;
   struct cred *sk_peer_cred ;
   long sk_rcvtimeo ;
   ktime_t sk_stamp ;
   u16 sk_tsflags ;
   u8 sk_shutdown ;
   u32 sk_tskey ;
   atomic_t sk_zckey ;
   u8 sk_clockid ;
   u8 sk_txtime_deadline_mode : 1 ;
   u8 sk_txtime_report_errors : 1 ;
   u8 sk_txtime_unused : 6 ;
   struct socket *sk_socket ;
   void *sk_user_data ;
   void *sk_security ;
   struct sock_cgroup_data sk_cgrp_data ;
   struct mem_cgroup *sk_memcg ;
   void (*sk_state_change)(struct sock *) ;
   void (*sk_data_ready)(struct sock *) ;
   void (*sk_write_space)(struct sock *) ;
   void (*sk_error_report)(struct sock *) ;
   int (*sk_backlog_rcv)(struct sock *, struct sk_buff *) ;
   struct sk_buff *(*sk_validate_xmit_skb)(struct sock *, struct net_device *, struct sk_buff *) ;
   void (*sk_destruct)(struct sock *) ;
   struct sock_reuseport *sk_reuseport_cb ;
   struct bpf_sk_storage *sk_bpf_storage ;
   struct callback_head sk_rcu ;
};
#line 1048 
struct request_sock_ops;
#line 1049 
struct timewait_sock_ops;
#line 1050 
struct raw_hashinfo;
#line 1051 
struct smc_hashinfo;
#line 1071 
struct udp_table;
#line 1071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_h_3022 {
   struct inet_hashinfo *hashinfo ;
   struct udp_table *udp_table ;
   struct raw_hashinfo *raw_hash ;
   struct smc_hashinfo *smc_hash ;
};
#line 1071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct proto {
   void (*close)(struct sock *, long ) ;
   int (*pre_connect)(struct sock *, struct sockaddr *, int ) ;
   int (*connect)(struct sock *, struct sockaddr *, int ) ;
   int (*disconnect)(struct sock *, int ) ;
   struct sock *(*accept)(struct sock *, int , int *, bool ) ;
   int (*ioctl)(struct sock *, int , unsigned long ) ;
   int (*init)(struct sock *) ;
   void (*destroy)(struct sock *) ;
   void (*shutdown)(struct sock *, int ) ;
   int (*setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct sock *, int , int , char *, int *) ;
   void (*keepalive)(struct sock *, int ) ;
   int (*compat_setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct sock *, int , int , char *, int *) ;
   int (*compat_ioctl)(struct sock *, unsigned int , unsigned long ) ;
   int (*sendmsg)(struct sock *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct sock *, struct msghdr *, size_t , int , int , int *) ;
   int (*sendpage)(struct sock *, struct page *, int , size_t , int ) ;
   int (*bind)(struct sock *, struct sockaddr *, int ) ;
   int (*backlog_rcv)(struct sock *, struct sk_buff *) ;
   void (*release_cb)(struct sock *) ;
   int (*hash)(struct sock *) ;
   void (*unhash)(struct sock *) ;
   void (*rehash)(struct sock *) ;
   int (*get_port)(struct sock *, unsigned short ) ;
   unsigned int inuse_idx ;
   bool (*stream_memory_free)(struct sock *, int ) ;
   bool (*stream_memory_read)(struct sock *) ;
   void (*enter_memory_pressure)(struct sock *) ;
   void (*leave_memory_pressure)(struct sock *) ;
   atomic_long_t *memory_allocated ;
   struct percpu_counter *sockets_allocated ;
   unsigned long *memory_pressure ;
   long *sysctl_mem ;
   int *sysctl_wmem ;
   int *sysctl_rmem ;
   u32 sysctl_wmem_offset ;
   u32 sysctl_rmem_offset ;
   int max_header ;
   bool no_autobind ;
   struct kmem_cache *slab ;
   unsigned int obj_size ;
   slab_flags_t slab_flags ;
   unsigned int useroffset ;
   unsigned int usersize ;
   struct percpu_counter *orphan_count ;
   struct request_sock_ops *rsk_prot ;
   struct timewait_sock_ops *twsk_prot ;
   union __anonunion_h_3022 h ;
   struct module *owner ;
   char name[32U] ;
   struct list_head node ;
   int (*diag_destroy)(struct sock *, int ) ;
} __attribute__((__designated_init__));
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/request_sock.h"
struct request_sock_ops {
   int family ;
   unsigned int obj_size ;
   struct kmem_cache *slab ;
   char *slab_name ;
   int (*rtx_syn_ack)(struct sock *, struct request_sock *) ;
   void (*send_ack)(struct sock *, struct sk_buff *, struct request_sock *) ;
   void (*send_reset)(struct sock *, struct sk_buff *) ;
   void (*destructor)(struct request_sock *) ;
   void (*syn_ack_timeout)(struct request_sock *) ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/request_sock.h"
struct request_sock {
   struct sock_common __req_common ;
   struct request_sock *dl_next ;
   u16 mss ;
   u8 num_retrans ;
   u8 cookie_ts : 1 ;
   u8 num_timeout : 7 ;
   u32 ts_recent ;
   struct timer_list rsk_timer ;
   struct request_sock_ops *rsk_ops ;
   struct sock *sk ;
   u32 *saved_syn ;
   u32 secid ;
   u32 peer_secid ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/timewait_sock.h"
struct timewait_sock_ops {
   struct kmem_cache *twsk_slab ;
   char *twsk_slab_name ;
   unsigned int twsk_obj_size ;
   int (*twsk_unique)(struct sock *, struct sock *, void *) ;
   void (*twsk_destructor)(struct sock *) ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ip.h"
struct iphdr {
   __u8 ihl : 4 ;
   __u8 version : 4 ;
   __u8 tos ;
   __be16 tot_len ;
   __be16 id ;
   __be16 frag_off ;
   __u8 ttl ;
   __u8 protocol ;
   __sum16 check ;
   __be32 saddr ;
   __be32 daddr ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
struct ipv6_stable_secret {
   bool initialized ;
   struct in6_addr secret ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
struct ipv6_devconf {
   __s32 forwarding ;
   __s32 hop_limit ;
   __s32 mtu6 ;
   __s32 accept_ra ;
   __s32 accept_redirects ;
   __s32 autoconf ;
   __s32 dad_transmits ;
   __s32 rtr_solicits ;
   __s32 rtr_solicit_interval ;
   __s32 rtr_solicit_max_interval ;
   __s32 rtr_solicit_delay ;
   __s32 force_mld_version ;
   __s32 mldv1_unsolicited_report_interval ;
   __s32 mldv2_unsolicited_report_interval ;
   __s32 use_tempaddr ;
   __s32 temp_valid_lft ;
   __s32 temp_prefered_lft ;
   __s32 regen_max_retry ;
   __s32 max_desync_factor ;
   __s32 max_addresses ;
   __s32 accept_ra_defrtr ;
   __s32 accept_ra_min_hop_limit ;
   __s32 accept_ra_pinfo ;
   __s32 ignore_routes_with_linkdown ;
   __s32 accept_ra_rtr_pref ;
   __s32 rtr_probe_interval ;
   __s32 accept_ra_rt_info_min_plen ;
   __s32 accept_ra_rt_info_max_plen ;
   __s32 proxy_ndp ;
   __s32 accept_source_route ;
   __s32 accept_ra_from_local ;
   __s32 optimistic_dad ;
   __s32 use_optimistic ;
   __s32 mc_forwarding ;
   __s32 disable_ipv6 ;
   __s32 drop_unicast_in_l2_multicast ;
   __s32 accept_dad ;
   __s32 force_tllao ;
   __s32 ndisc_notify ;
   __s32 suppress_frag_ndisc ;
   __s32 accept_ra_mtu ;
   __s32 drop_unsolicited_na ;
   struct ipv6_stable_secret stable_secret ;
   __s32 use_oif_addrs_only ;
   __s32 keep_addr_on_down ;
   __s32 seg6_enabled ;
   __s32 seg6_require_hmac ;
   __u32 enhanced_dad ;
   __u32 addr_gen_mode ;
   __s32 disable_policy ;
   __s32 ndisc_tclass ;
   struct ctl_table_header *sysctl_header ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ip6_sf_list {
   struct ip6_sf_list *sf_next ;
   struct in6_addr sf_addr ;
   unsigned long sf_count[2U] ;
   unsigned char sf_gsresp ;
   unsigned char sf_oldin ;
   unsigned char sf_crcount ;
};
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ifmcaddr6 {
   struct in6_addr mca_addr ;
   struct inet6_dev *idev ;
   struct ifmcaddr6 *next ;
   struct ip6_sf_list *mca_sources ;
   struct ip6_sf_list *mca_tomb ;
   unsigned int mca_sfmode ;
   unsigned char mca_crcount ;
   unsigned long mca_sfcount[2U] ;
   struct timer_list mca_timer ;
   unsigned int mca_flags ;
   int mca_users ;
   refcount_t mca_refcnt ;
   spinlock_t mca_lock ;
   unsigned long mca_cstamp ;
   unsigned long mca_tstamp ;
};
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ifacaddr6 {
   struct in6_addr aca_addr ;
   struct fib6_info *aca_rt ;
   struct ifacaddr6 *aca_next ;
   struct hlist_node aca_addr_lst ;
   int aca_users ;
   refcount_t aca_refcnt ;
   unsigned long aca_cstamp ;
   unsigned long aca_tstamp ;
   struct callback_head rcu ;
};
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ipv6_devstat {
   struct proc_dir_entry *proc_dir_entry ;
   struct ipstats_mib *ipv6 ;
   struct icmpv6_mib_device *icmpv6dev ;
   struct icmpv6msg_mib_device *icmpv6msgdev ;
};
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct inet6_dev {
   struct net_device *dev ;
   struct list_head addr_list ;
   struct ifmcaddr6 *mc_list ;
   struct ifmcaddr6 *mc_tomb ;
   spinlock_t mc_lock ;
   unsigned char mc_qrv ;
   unsigned char mc_gq_running ;
   unsigned char mc_ifc_count ;
   unsigned char mc_dad_count ;
   unsigned long mc_v1_seen ;
   unsigned long mc_qi ;
   unsigned long mc_qri ;
   unsigned long mc_maxdelay ;
   struct timer_list mc_gq_timer ;
   struct timer_list mc_ifc_timer ;
   struct timer_list mc_dad_timer ;
   struct ifacaddr6 *ac_list ;
   rwlock_t lock ;
   refcount_t refcnt ;
   __u32 if_flags ;
   int dead ;
   u32 desync_factor ;
   u8 rndid[8U] ;
   struct list_head tempaddr_list ;
   struct in6_addr token ;
   struct neigh_parms *nd_parms ;
   struct ipv6_devconf cnf ;
   struct ipv6_devstat stats ;
   struct timer_list rs_timer ;
   __s32 rs_interval ;
   __u8 rs_probes ;
   unsigned long tstamp ;
   struct callback_head rcu ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_arp.h"
struct prefix_info;
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ndisc.h"
struct nd_opt_hdr {
   __u8 nd_opt_type ;
   __u8 nd_opt_len ;
} __attribute__((__packed__));
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ndisc.h"
struct ndisc_options {
   struct nd_opt_hdr *nd_opt_array[15U] ;
   struct nd_opt_hdr *nd_opts_ri ;
   struct nd_opt_hdr *nd_opts_ri_end ;
   struct nd_opt_hdr *nd_useropts ;
   struct nd_opt_hdr *nd_useropts_end ;
   struct nd_opt_hdr *nd_802154_opt_array[3U] ;
};
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ndisc.h"
struct ndisc_ops {
   int (*is_useropt)(u8 ) ;
   int (*parse_options)(struct net_device *, struct nd_opt_hdr *, struct ndisc_options *) ;
   void (*update)(struct net_device *, struct neighbour *, u32 , u8 , struct ndisc_options *) ;
   int (*opt_addr_space)(struct net_device *, u8 , struct neighbour *, u8 *, u8 **) ;
   void (*fill_addr_option)(struct net_device *, struct sk_buff *, u8 , u8 *) ;
   void (*prefix_rcv_add_addr)(struct net *, struct net_device *, struct prefix_info *, struct inet6_dev *, struct in6_addr *, int , u32 , bool , bool , __u32 , u32 , bool ) ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct pci_device_id {
   __u32 vendor ;
   __u32 device ;
   __u32 subvendor ;
   __u32 subdevice ;
   __u32 class ;
   __u32 class_mask ;
   kernel_ulong_t driver_data ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct hotplug_slot;
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_slot {
   struct pci_bus *bus ;
   struct list_head list ;
   struct hotplug_slot *hotplug ;
   unsigned char number ;
   struct kobject kobj ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef int pci_power_t;
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned int pci_channel_state_t;
#line 162 
enum pci_channel_state {
    pci_channel_io_normal = 1,
    pci_channel_io_frozen = 2,
    pci_channel_io_perm_failure = 3
};
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned short pci_dev_flags_t;
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned short pci_bus_flags_t;
#line 282 
struct pcie_link_state;
#line 283 
struct pci_vpd;
#line 284 
struct pci_sriov;
#line 285 
struct pci_p2pdma;
#line 290 
struct aer_stats;
#line 290 
struct pci_driver;
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
union __anonunion_3106 {
   struct pci_sriov *sriov ;
   struct pci_dev *physfn ;
};
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_dev {
   struct list_head bus_list ;
   struct pci_bus *bus ;
   struct pci_bus *subordinate ;
   void *sysdata ;
   struct proc_dir_entry *procent ;
   struct pci_slot *slot ;
   unsigned int devfn ;
   unsigned short vendor ;
   unsigned short device ;
   unsigned short subsystem_vendor ;
   unsigned short subsystem_device ;
   unsigned int class ;
   u8 revision ;
   u8 hdr_type ;
   u16 aer_cap ;
   struct aer_stats *aer_stats ;
   u8 pcie_cap ;
   u8 msi_cap ;
   u8 msix_cap ;
   u8 pcie_mpss : 3 ;
   u8 rom_base_reg ;
   u8 pin ;
   u16 pcie_flags_reg ;
   unsigned long *dma_alias_mask ;
   struct pci_driver *driver ;
   u64 dma_mask ;
   struct device_dma_parameters dma_parms ;
   pci_power_t current_state ;
   unsigned int imm_ready : 1 ;
   u8 pm_cap ;
   unsigned int pme_support : 5 ;
   unsigned int pme_poll : 1 ;
   unsigned int d1_support : 1 ;
   unsigned int d2_support : 1 ;
   unsigned int no_d1d2 : 1 ;
   unsigned int no_d3cold : 1 ;
   unsigned int bridge_d3 : 1 ;
   unsigned int d3cold_allowed : 1 ;
   unsigned int mmio_always_on : 1 ;
   unsigned int wakeup_prepared : 1 ;
   unsigned int runtime_d3cold : 1 ;
   unsigned int skip_bus_pm : 1 ;
   unsigned int ignore_hotplug : 1 ;
   unsigned int hotplug_user_indicators : 1 ;
   unsigned int clear_retrain_link : 1 ;
   unsigned int d3_delay ;
   unsigned int d3cold_delay ;
   struct pcie_link_state *link_state ;
   unsigned int ltr_path : 1 ;
   unsigned int eetlp_prefix_path : 1 ;
   pci_channel_state_t error_state ;
   struct device dev ;
   int cfg_size ;
   unsigned int irq ;
   struct resource resource[17U] ;
   bool match_driver ;
   unsigned int transparent : 1 ;
   unsigned int io_window : 1 ;
   unsigned int pref_window : 1 ;
   unsigned int pref_64_window : 1 ;
   unsigned int multifunction : 1 ;
   unsigned int is_busmaster : 1 ;
   unsigned int no_msi : 1 ;
   unsigned int no_64bit_msi : 1 ;
   unsigned int block_cfg_access : 1 ;
   unsigned int broken_parity_status : 1 ;
   unsigned int irq_reroute_variant : 2 ;
   unsigned int msi_enabled : 1 ;
   unsigned int msix_enabled : 1 ;
   unsigned int ari_enabled : 1 ;
   unsigned int ats_enabled : 1 ;
   unsigned int pasid_enabled : 1 ;
   unsigned int pri_enabled : 1 ;
   unsigned int is_managed : 1 ;
   unsigned int needs_freset : 1 ;
   unsigned int state_saved : 1 ;
   unsigned int is_physfn : 1 ;
   unsigned int is_virtfn : 1 ;
   unsigned int reset_fn : 1 ;
   unsigned int is_hotplug_bridge : 1 ;
   unsigned int shpc_managed : 1 ;
   unsigned int is_thunderbolt : 1 ;
   unsigned int untrusted : 1 ;
   unsigned int __aer_firmware_first_valid : 1 ;
   unsigned int __aer_firmware_first : 1 ;
   unsigned int broken_intx_masking : 1 ;
   unsigned int io_window_1k : 1 ;
   unsigned int irq_managed : 1 ;
   unsigned int non_compliant_bars : 1 ;
   unsigned int is_probed : 1 ;
   unsigned int link_active_reporting : 1 ;
   unsigned int no_vf_scan : 1 ;
   pci_dev_flags_t dev_flags ;
   atomic_t enable_cnt ;
   u32 saved_config_space[16U] ;
   struct hlist_head saved_cap_space ;
   struct bin_attribute *rom_attr ;
   int rom_attr_enabled ;
   struct bin_attribute *res_attr[17U] ;
   struct bin_attribute *res_attr_wc[17U] ;
   unsigned int broken_cmd_compl : 1 ;
   unsigned int ptm_root : 1 ;
   unsigned int ptm_enabled : 1 ;
   u8 ptm_granularity ;
   struct attribute_group **msi_irq_groups ;
   struct pci_vpd *vpd ;
   union __anonunion_3106 __anonCompField_pci_dev_190 ;
   u16 ats_cap ;
   u8 ats_stu ;
   u16 pri_cap ;
   u32 pri_reqs_alloc ;
   unsigned int pasid_required : 1 ;
   u16 pasid_cap ;
   u16 pasid_features ;
   struct pci_p2pdma *p2pdma ;
   phys_addr_t rom ;
   size_t romlen ;
   char *driver_override ;
   unsigned long priv_flags ;
};
#line 493 
struct pci_ops;
#line 493 
struct msi_controller;
#line 571  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_bus {
   struct list_head node ;
   struct pci_bus *parent ;
   struct list_head children ;
   struct list_head devices ;
   struct pci_dev *self ;
   struct list_head slots ;
   struct resource *resource[4U] ;
   struct list_head resources ;
   struct resource busn_res ;
   struct pci_ops *ops ;
   struct msi_controller *msi ;
   void *sysdata ;
   struct proc_dir_entry *procdir ;
   unsigned char number ;
   unsigned char primary ;
   unsigned char max_bus_speed ;
   unsigned char cur_bus_speed ;
   char name[48U] ;
   unsigned short bridge_ctl ;
   pci_bus_flags_t bus_flags ;
   struct device *bridge ;
   struct device dev ;
   struct bin_attribute *legacy_io ;
   struct bin_attribute *legacy_mem ;
   unsigned int is_added : 1 ;
};
#line 697  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_ops {
   int (*add_bus)(struct pci_bus *) ;
   void (*remove_bus)(struct pci_bus *) ;
   void *(*map_bus)(struct pci_bus *, unsigned int , int ) ;
   int (*read)(struct pci_bus *, unsigned int , int , int , u32 *) ;
   int (*write)(struct pci_bus *, unsigned int , int , int , u32 ) ;
};
#line 725  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_dynids {
   spinlock_t lock ;
   struct list_head list ;
};
#line 729  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned int pci_ers_result_t;
#line 761  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_error_handlers {
   pci_ers_result_t (*error_detected)(struct pci_dev *, enum pci_channel_state ) ;
   pci_ers_result_t (*mmio_enabled)(struct pci_dev *) ;
   pci_ers_result_t (*slot_reset)(struct pci_dev *) ;
   void (*reset_prepare)(struct pci_dev *) ;
   void (*reset_done)(struct pci_dev *) ;
   void (*resume)(struct pci_dev *) ;
};
#line 824  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_driver {
   struct list_head node ;
   char *name ;
   struct pci_device_id *id_table ;
   int (*probe)(struct pci_dev *, struct pci_device_id *) ;
   void (*remove)(struct pci_dev *) ;
   int (*suspend)(struct pci_dev *, pm_message_t ) ;
   int (*resume)(struct pci_dev *) ;
   void (*shutdown)(struct pci_dev *) ;
   int (*sriov_configure)(struct pci_dev *, int ) ;
   struct pci_error_handlers *err_handler ;
   struct attribute_group **groups ;
   struct device_driver driver ;
   struct pci_dynids dynids ;
};
#line 1424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct msix_entry {
   u32 vector ;
   u16 entry ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_base.h"
struct __anonstruct_read_3112 {
   __le64 buffer_addr ;
   __le32 cmd_type_len ;
   __le32 olinfo_status ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_base.h"
struct __anonstruct_wb_3113 {
   __le64 rsvd ;
   __le32 nxtseq_seed ;
   __le32 status ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_base.h"
union igc_adv_tx_desc {
   struct __anonstruct_read_3112 read ;
   struct __anonstruct_wb_3113 wb ;
};
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_base.h"
struct igc_adv_tx_context_desc {
   __le32 vlan_macip_lens ;
   __le32 launch_time ;
   __le32 type_tucmd_mlhl ;
   __le32 mss_l4len_idx ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_base.h"
struct __anonstruct_read_3114 {
   __le64 pkt_addr ;
   __le64 hdr_addr ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_base.h"
struct __anonstruct_hs_rss_3118 {
   __le16 pkt_info ;
   __le16 hdr_info ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_base.h"
union __anonunion_lo_dword_3117 {
   __le32 data ;
   struct __anonstruct_hs_rss_3118 hs_rss ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_base.h"
struct __anonstruct_csum_ip_3120 {
   __le16 ip_id ;
   __le16 csum ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_base.h"
union __anonunion_hi_dword_3119 {
   __le32 rss ;
   struct __anonstruct_csum_ip_3120 csum_ip ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_base.h"
struct __anonstruct_lower_3116 {
   union __anonunion_lo_dword_3117 lo_dword ;
   union __anonunion_hi_dword_3119 hi_dword ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_base.h"
struct __anonstruct_upper_3121 {
   __le32 status_error ;
   __le16 length ;
   __le16 vlan ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_base.h"
struct __anonstruct_wb_3115 {
   struct __anonstruct_lower_3116 lower ;
   struct __anonstruct_upper_3121 upper ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_base.h"
union igc_adv_rx_desc {
   struct __anonstruct_read_3114 read ;
   struct __anonstruct_wb_3115 wb ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_hw.h"
struct igc_info {
   s32 (*get_invariants)(struct igc_hw *) ;
   struct igc_mac_operations *mac_ops ;
   struct igc_phy_operations *phy_ops ;
   struct igc_nvm_operations *nvm_ops ;
};
#line 220  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_hw.h"
struct igc_hw_stats {
   u64 crcerrs ;
   u64 algnerrc ;
   u64 symerrs ;
   u64 rxerrc ;
   u64 mpc ;
   u64 scc ;
   u64 ecol ;
   u64 mcc ;
   u64 latecol ;
   u64 colc ;
   u64 dc ;
   u64 tncrs ;
   u64 sec ;
   u64 cexterr ;
   u64 rlec ;
   u64 xonrxc ;
   u64 xontxc ;
   u64 xoffrxc ;
   u64 xofftxc ;
   u64 fcruc ;
   u64 prc64 ;
   u64 prc127 ;
   u64 prc255 ;
   u64 prc511 ;
   u64 prc1023 ;
   u64 prc1522 ;
   u64 gprc ;
   u64 bprc ;
   u64 mprc ;
   u64 gptc ;
   u64 gorc ;
   u64 gotc ;
   u64 rnbc ;
   u64 ruc ;
   u64 rfc ;
   u64 roc ;
   u64 rjc ;
   u64 mgprc ;
   u64 mgpdc ;
   u64 mgptc ;
   u64 tor ;
   u64 tot ;
   u64 tpr ;
   u64 tpt ;
   u64 ptc64 ;
   u64 ptc127 ;
   u64 ptc255 ;
   u64 ptc511 ;
   u64 ptc1023 ;
   u64 ptc1522 ;
   u64 mptc ;
   u64 bptc ;
   u64 tsctc ;
   u64 tsctfc ;
   u64 iac ;
   u64 icrxptc ;
   u64 icrxatc ;
   u64 ictxptc ;
   u64 ictxatc ;
   u64 ictxqec ;
   u64 ictxqmtc ;
   u64 icrxdmtc ;
   u64 icrxoc ;
   u64 cbtmpc ;
   u64 htdpmc ;
   u64 cbrdpc ;
   u64 cbrmpc ;
   u64 rpthc ;
   u64 hgptc ;
   u64 htcbdpc ;
   u64 hgorc ;
   u64 hgotc ;
   u64 lenerrs ;
   u64 scvpc ;
   u64 hrmpc ;
   u64 doosync ;
   u64 o2bgptc ;
   u64 o2bspc ;
   u64 b2ospc ;
   u64 b2ogprc ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc.h"
struct igc_adapter;
#line 19 
struct igc_ring;
#line 183  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc.h"
struct igc_tx_buffer {
   union igc_adv_tx_desc *next_to_watch ;
   unsigned long time_stamp ;
   struct sk_buff *skb ;
   unsigned int bytecount ;
   u16 gso_segs ;
   __be16 protocol ;
   dma_addr_t dma ;
   __u32 len ;
   u32 tx_flags ;
};
#line 196  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc.h"
struct igc_rx_buffer {
   dma_addr_t dma ;
   struct page *page ;
   __u32 page_offset ;
   __u16 pagecnt_bias ;
};
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc.h"
struct igc_tx_queue_stats {
   u64 packets ;
   u64 bytes ;
   u64 restart_queue ;
   u64 restart_queue2 ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc.h"
struct igc_rx_queue_stats {
   u64 packets ;
   u64 bytes ;
   u64 drops ;
   u64 csum_err ;
   u64 alloc_failed ;
};
#line 222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc.h"
struct igc_rx_packet_stats {
   u64 ipv4_packets ;
   u64 ipv4e_packets ;
   u64 ipv6_packets ;
   u64 ipv6e_packets ;
   u64 tcp_packets ;
   u64 udp_packets ;
   u64 sctp_packets ;
   u64 nfs_packets ;
   u64 other_packets ;
};
#line 234  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc.h"
struct igc_ring_container {
   struct igc_ring *ring ;
   unsigned int total_bytes ;
   unsigned int total_packets ;
   u16 work_limit ;
   u8 count ;
   u8 itr ;
};
#line 243 
struct igc_q_vector;
#line 243  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc.h"
union __anonunion_3123 {
   struct igc_tx_buffer *tx_buffer_info ;
   struct igc_rx_buffer *rx_buffer_info ;
};
#line 243  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc.h"
struct __anonstruct_3125 {
   struct igc_tx_queue_stats tx_stats ;
   struct u64_stats_sync tx_syncp ;
   struct u64_stats_sync tx_syncp2 ;
};
#line 243  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc.h"
struct __anonstruct_3126 {
   struct igc_rx_queue_stats rx_stats ;
   struct igc_rx_packet_stats pkt_stats ;
   struct u64_stats_sync rx_syncp ;
   struct sk_buff *skb ;
};
#line 243  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc.h"
union __anonunion_3124 {
   struct __anonstruct_3125 __anonCompField___anonunion_3124_193 ;
   struct __anonstruct_3126 __anonCompField___anonunion_3124_194 ;
};
#line 243  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc.h"
struct igc_ring {
   struct igc_q_vector *q_vector ;
   struct net_device *netdev ;
   struct device *dev ;
   union __anonunion_3123 __anonCompField_igc_ring_192 ;
   void *desc ;
   unsigned long flags ;
   void *tail ;
   dma_addr_t dma ;
   unsigned int size ;
   u16 count ;
   u8 queue_index ;
   u8 reg_idx ;
   bool launchtime_enable ;
   u16 next_to_clean ;
   u16 next_to_use ;
   u16 next_to_alloc ;
   union __anonunion_3124 __anonCompField_igc_ring_195 ;
} __attribute__((__aligned__(4096)));
#line 284  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc.h"
struct igc_q_vector {
   struct igc_adapter *adapter ;
   void *itr_register ;
   u32 eims_value ;
   u16 itr_val ;
   u8 set_itr ;
   struct igc_ring_container rx ;
   struct igc_ring_container tx ;
   struct napi_struct napi ;
   struct callback_head rcu ;
   char name[25U] ;
   struct net_device poll_dev ;
   struct igc_ring ring[0U] ;
};
#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc.h"
struct igc_nfc_input {
   u8 match_flags ;
   __be16 etype ;
   __be16 vlan_tci ;
   u8 src_addr[6U] ;
   u8 dst_addr[6U] ;
};
#line 327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc.h"
struct igc_nfc_filter {
   struct hlist_node nfc_node ;
   struct igc_nfc_input filter ;
   unsigned long cookie ;
   u16 etype_reg_index ;
   u16 sw_idx ;
   u16 action ;
};
#line 336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc.h"
struct igc_mac_addr {
   u8 addr[6U] ;
   u8 queue ;
   u8 state ;
};
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc.h"
struct igc_adapter {
   struct net_device *netdev ;
   unsigned long state ;
   unsigned int flags ;
   unsigned int num_q_vectors ;
   struct msix_entry *msix_entries ;
   u16 tx_work_limit ;
   u32 tx_timeout_count ;
   int num_tx_queues ;
   struct igc_ring *tx_ring[4U] ;
   int num_rx_queues ;
   struct igc_ring *rx_ring[4U] ;
   struct timer_list watchdog_timer ;
   struct timer_list dma_err_timer ;
   struct timer_list phy_info_timer ;
   u16 link_speed ;
   u16 link_duplex ;
   u8 port_num ;
   u8 *io_addr ;
   u32 rx_itr_setting ;
   u32 tx_itr_setting ;
   struct work_struct reset_task ;
   struct work_struct watchdog_task ;
   struct work_struct dma_err_task ;
   bool fc_autoneg ;
   u8 tx_timeout_factor ;
   int msg_enable ;
   u32 max_frame_size ;
   u32 min_frame_size ;
   struct pci_dev *pdev ;
   spinlock_t stats64_lock ;
   struct rtnl_link_stats64 stats64 ;
   struct igc_hw hw ;
   struct igc_hw_stats stats ;
   struct igc_q_vector *q_vector[8U] ;
   u32 eims_enable_mask ;
   u32 eims_other ;
   u16 tx_ring_count ;
   u16 rx_ring_count ;
   u32 tx_hwtstamp_timeouts ;
   u32 tx_hwtstamp_skipped ;
   u32 rx_hwtstamp_cleared ;
   u32 rss_queues ;
   u32 rss_indir_tbl_init ;
   struct hlist_head nfc_filter_list ;
   struct hlist_head cls_flower_list ;
   unsigned int nfc_filter_count ;
   spinlock_t nfc_lock ;
   bool etype_bitmap[3U] ;
   struct igc_mac_addr *mac_table ;
   u8 rss_indir_tbl[128U] ;
   unsigned long link_check_timeout ;
   struct igc_info ei ;
};
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
union __anonunion___u_3128 {
   u8 *__val ;
   char __c[1U] ;
};
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
union __anonunion___u_3130 {
   u8 *__val ;
   char __c[1U] ;
};
#line 530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
union __anonunion___u_3132 {
   u8 *__val ;
   char __c[1U] ;
};
#line 533  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
union __anonunion___u_3134 {
   u8 *__val ;
   char __c[1U] ;
};
#line 535  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
union __anonunion___u_3136 {
   u8 *__val ;
   char __c[1U] ;
};
#line 536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
union __anonunion___u_3138 {
   u8 *__val ;
   char __c[1U] ;
};
#line 541  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
union __anonunion___u_3140 {
   u8 *__val ;
   char __c[1U] ;
};
#line 556  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
union __anonunion___u_3142 {
   u8 *__val ;
   char __c[1U] ;
};
#line 573  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
union __anonunion___u_3144 {
   u8 *__val ;
   char __c[1U] ;
};
#line 609  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
union __anonunion___u_3146 {
   u8 *__val ;
   char __c[1U] ;
};
#line 613  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
union __anonunion___u_3148 {
   u8 *__val ;
   char __c[1U] ;
};
#line 615  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
union __anonunion___u_3150 {
   u8 *__val ;
   char __c[1U] ;
};
#line 617  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
union __anonunion___u_3152 {
   u8 *__val ;
   char __c[1U] ;
};
#line 620  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
union __anonunion___u_3154 {
   u8 *__val ;
   char __c[1U] ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
union __anonunion___u_3156 {
   u8 *__val ;
   char __c[1U] ;
};
#line 658  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
union __anonunion___u_3158 {
   u8 *__val ;
   char __c[1U] ;
};
#line 681  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
union __anonunion___u_3160 {
   u8 *__val ;
   char __c[1U] ;
};
#line 699  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
union __anonunion___u_3162 {
   u8 *__val ;
   char __c[1U] ;
};
#line 731  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
union __anonunion___u_3164 {
   u8 *__val ;
   char __c[1U] ;
};
#line 746  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
union __anonunion___u_3166 {
   u8 *__val ;
   char __c[1U] ;
};
#line 759  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
union __anonunion___u_3168 {
   u8 *__val ;
   char __c[1U] ;
};
#line 770  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
union __anonunion___u_3170 {
   u8 *__val ;
   char __c[1U] ;
};
#line 2010  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
union __anonunion___u_3172 {
   u8 *__val ;
   char __c[1U] ;
};
#line 2193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
union __anonunion___u_3174 {
   u8 *__val ;
   char __c[1U] ;
};
#line 2207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
union __anonunion___u_3176 {
   u8 *__val ;
   char __c[1U] ;
};
#line 2462  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
union __anonunion___u_3178 {
   u8 *__val ;
   char __c[1U] ;
};
#line 2464  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
union __anonunion___u_3180 {
   u8 *__val ;
   char __c[1U] ;
};
#line 2746  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
union __anonunion___u_3182 {
   u8 *__val ;
   char __c[1U] ;
};
#line 2752  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
union __anonunion___u_3184 {
   u8 *__val ;
   char __c[1U] ;
};
#line 2782  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
union __anonunion___u_3186 {
   u8 *__val ;
   char __c[1U] ;
};
#line 2809  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
union __anonunion___u_3188 {
   u8 *__val ;
   char __c[1U] ;
};
#line 2869  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
union __anonunion___u_3190 {
   u8 *__val ;
   char __c[1U] ;
};
#line 2877  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
union __anonunion___u_3192 {
   u8 *__val ;
   char __c[1U] ;
};
#line 3280  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
union __anonunion___u_3194 {
   u8 *__val ;
   char __c[1U] ;
};
#line 3282  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
union __anonunion___u_3196 {
   u8 *__val ;
   char __c[1U] ;
};
#line 3595  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
union __anonunion___u_3198 {
   u8 *__val ;
   char __c[1U] ;
};
#line 3960  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
union __anonunion___u_3202 {
   u8 *__val ;
   char __c[1U] ;
};
#line 3961  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
union __anonunion___u_3204 {
   u8 *__val ;
   char __c[1U] ;
};
#line 3963  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
union __anonunion___u_3206 {
   u8 *__val ;
   char __c[1U] ;
};
#line 3966  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
union __anonunion___u_3208 {
   u8 *__val ;
   char __c[1U] ;
};
#line 3967  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
union __anonunion___u_3210 {
   u8 *__val ;
   char __c[1U] ;
};
#line 3994  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
union __anonunion___u_3212 {
   u8 *__val ;
   char __c[1U] ;
};
#line 3996  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
union __anonunion___u_3214 {
   u8 *__val ;
   char __c[1U] ;
};
#line 3997  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
union __anonunion___u_3216 {
   u8 *__val ;
   char __c[1U] ;
};
#line 3998  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
union __anonunion___u_3218 {
   u8 *__val ;
   char __c[1U] ;
};
#line 4000  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
union __anonunion___u_3220 {
   u8 *__val ;
   char __c[1U] ;
};
#line 4001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
union __anonunion___u_3222 {
   u8 *__val ;
   char __c[1U] ;
};
#line 4257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
union __anonunion___u_3224 {
   u8 *__val ;
   char __c[1U] ;
};
#line 4482  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
union __anonunion___u_3226 {
   u8 *__val ;
   char __c[1U] ;
};
#line 4483  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
union __anonunion___u_3228 {
   u8 *__val ;
   char __c[1U] ;
};
#line 762  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_3249 {
   struct hlist_node *__val ;
   char __c[1U] ;
};
#line 788  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_3251 {
   struct hlist_node *__val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_ethtool.c"
struct igc_stats {
   char stat_string[32U] ;
   int sizeof_stat ;
   int stat_offset ;
};
#line 1130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_ethtool.c"
union __anonunion___u_3953 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_ethtool.c"
union __anonunion___u_3955 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1198  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_ethtool.c"
union __anonunion___u_3957 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_ethtool.c"
union __anonunion___u_3959 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_ethtool.c"
union __anonunion___u_3961 {
   u8 *__val ;
   char __c[1U] ;
};
#line 1492  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_ethtool.c"
union __anonunion___u_3963 {
   u8 *__val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_base.c"
union __anonunion___u_4673 {
   u8 *__val ;
   char __c[1U] ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_base.c"
union __anonunion___u_4675 {
   u8 *__val ;
   char __c[1U] ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_base.c"
union __anonunion___u_4677 {
   u8 *__val ;
   char __c[1U] ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_base.c"
union __anonunion___u_4679 {
   u8 *__val ;
   char __c[1U] ;
};
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_base.c"
union __anonunion___u_4681 {
   u8 *__val ;
   char __c[1U] ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_base.c"
union __anonunion___u_4683 {
   u8 *__val ;
   char __c[1U] ;
};
#line 293  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_base.c"
union __anonunion___u_4685 {
   u8 *__val ;
   char __c[1U] ;
};
#line 298  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_base.c"
union __anonunion___u_4687 {
   u8 *__val ;
   char __c[1U] ;
};
#line 344  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_base.c"
union __anonunion___u_4689 {
   u8 *__val ;
   char __c[1U] ;
};
#line 352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_base.c"
union __anonunion___u_4691 {
   u8 *__val ;
   char __c[1U] ;
};
#line 372  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_base.c"
union __anonunion___u_4693 {
   u8 *__val ;
   char __c[1U] ;
};
#line 375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_base.c"
union __anonunion___u_4695 {
   u8 *__val ;
   char __c[1U] ;
};
#line 381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_base.c"
union __anonunion___u_4697 {
   u8 *__val ;
   char __c[1U] ;
};
#line 382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_base.c"
union __anonunion___u_4699 {
   u8 *__val ;
   char __c[1U] ;
};
#line 390  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_base.c"
union __anonunion___u_4701 {
   u8 *__val ;
   char __c[1U] ;
};
#line 391  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_base.c"
union __anonunion___u_4703 {
   u8 *__val ;
   char __c[1U] ;
};
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_base.c"
union __anonunion___u_4705 {
   u8 *__val ;
   char __c[1U] ;
};
#line 395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_base.c"
union __anonunion___u_4707 {
   u8 *__val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_i225.c"
union __anonunion___u_5406 {
   u8 *__val ;
   char __c[1U] ;
};
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_i225.c"
union __anonunion___u_5408 {
   u8 *__val ;
   char __c[1U] ;
};
#line 164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_i225.c"
union __anonunion___u_5410 {
   u8 *__val ;
   char __c[1U] ;
};
#line 241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_i225.c"
union __anonunion___u_5412 {
   u8 *__val ;
   char __c[1U] ;
};
#line 377  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_i225.c"
union __anonunion___u_5414 {
   u8 *__val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 197 
enum hrtimer_restart;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
struct device_private {
   void *driver_data ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/firmware.h"
struct firmware {
   size_t size ;
   u8 *data ;
   struct page **pages ;
   void *priv ;
};
#line 164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned long irq_hw_number_t;
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ioport.h"
struct irq_data;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct ida {
   struct xarray xa ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/property.h"
typedef u32 phandle;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct property {
   char *name ;
   int length ;
   void *value ;
   struct property *next ;
   unsigned long _flags ;
   struct bin_attribute attr ;
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct device_node {
   char *name ;
   phandle phandle ;
   char *full_name ;
   struct fwnode_handle fwnode ;
   struct property *properties ;
   struct property *deadprops ;
   struct device_node *parent ;
   struct device_node *child ;
   struct device_node *sibling ;
   struct kobject kobj ;
   unsigned long _flags ;
   void *data ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_fwspec {
   struct fwnode_handle *fwnode ;
   int param_count ;
   u32 param[16U] ;
};
#line 68 
enum irq_domain_bus_token {
    DOMAIN_BUS_ANY = 0,
    DOMAIN_BUS_WIRED = 1,
    DOMAIN_BUS_GENERIC_MSI = 2,
    DOMAIN_BUS_PCI_MSI = 3,
    DOMAIN_BUS_PLATFORM_MSI = 4,
    DOMAIN_BUS_NEXUS = 5,
    DOMAIN_BUS_IPI = 6,
    DOMAIN_BUS_FSL_MC_MSI = 7,
    DOMAIN_BUS_TI_SCI_INTA_MSI = 8,
    DOMAIN_BUS_WAKEUP = 9
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain_ops {
   int (*match)(struct irq_domain *, struct device_node *, enum irq_domain_bus_token ) ;
   int (*select)(struct irq_domain *, struct irq_fwspec *, enum irq_domain_bus_token ) ;
   int (*map)(struct irq_domain *, unsigned int , irq_hw_number_t ) ;
   void (*unmap)(struct irq_domain *, unsigned int ) ;
   int (*xlate)(struct irq_domain *, struct device_node *, u32 *, unsigned int , unsigned long *, unsigned int *) ;
   int (*alloc)(struct irq_domain *, unsigned int , unsigned int , void *) ;
   void (*free)(struct irq_domain *, unsigned int , unsigned int ) ;
   int (*activate)(struct irq_domain *, struct irq_data *, bool ) ;
   void (*deactivate)(struct irq_domain *, struct irq_data *) ;
   int (*translate)(struct irq_domain *, struct irq_fwspec *, unsigned long *, unsigned int *) ;
   void (*debug_show)(struct seq_file *, struct irq_domain *, struct irq_data *, int ) ;
};
#line 132 
struct irq_domain_chip_generic;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain {
   struct list_head link ;
   char *name ;
   struct irq_domain_ops *ops ;
   void *host_data ;
   unsigned int flags ;
   unsigned int mapcount ;
   struct fwnode_handle *fwnode ;
   enum irq_domain_bus_token bus_token ;
   struct irq_domain_chip_generic *gc ;
   struct irq_domain *parent ;
   struct dentry *debugfs_file ;
   irq_hw_number_t hwirq_max ;
   unsigned int revmap_direct_max_irq ;
   unsigned int revmap_size ;
   struct xarray revmap_tree ;
   struct mutex revmap_tree_mutex ;
   unsigned int linear_revmap[] ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rtmutex.h"
struct rt_mutex {
   raw_spinlock_t wait_lock ;
   struct rb_root_cached waiters ;
   struct task_struct *owner ;
   int save_state ;
   char *name ;
   char *file ;
   int line ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
struct i2c_msg {
   __u16 addr ;
   __u16 flags ;
   __u16 len ;
   __u8 *buf ;
};
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
union i2c_smbus_data {
   __u8 byte ;
   __u16 word ;
   __u8 block[34U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm;
#line 28 
struct i2c_adapter;
#line 29 
struct i2c_client;
#line 33 
enum i2c_slave_event;
#line 33 
enum i2c_slave_event;
#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_client {
   unsigned short flags ;
   unsigned short addr ;
   char name[20U] ;
   struct i2c_adapter *adapter ;
   struct device dev ;
   int init_irq ;
   int irq ;
   struct list_head detected ;
   int (*slave_cb)(struct i2c_client *, enum i2c_slave_event , u8 *) ;
};
#line 360 
enum i2c_slave_event {
    I2C_SLAVE_READ_REQUESTED = 0,
    I2C_SLAVE_WRITE_REQUESTED = 1,
    I2C_SLAVE_READ_PROCESSED = 2,
    I2C_SLAVE_WRITE_RECEIVED = 3,
    I2C_SLAVE_STOP = 4
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm {
   int (*master_xfer)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*master_xfer_atomic)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*smbus_xfer)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   int (*smbus_xfer_atomic)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   u32 (*functionality)(struct i2c_adapter *) ;
   int (*reg_slave)(struct i2c_client *) ;
   int (*unreg_slave)(struct i2c_client *) ;
};
#line 565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_lock_operations {
   void (*lock_bus)(struct i2c_adapter *, unsigned int ) ;
   int (*trylock_bus)(struct i2c_adapter *, unsigned int ) ;
   void (*unlock_bus)(struct i2c_adapter *, unsigned int ) ;
};
#line 618 
struct gpio_desc;
#line 618  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_bus_recovery_info {
   int (*recover_bus)(struct i2c_adapter *) ;
   int (*get_scl)(struct i2c_adapter *) ;
   void (*set_scl)(struct i2c_adapter *, int ) ;
   int (*get_sda)(struct i2c_adapter *) ;
   void (*set_sda)(struct i2c_adapter *, int ) ;
   int (*get_bus_free)(struct i2c_adapter *) ;
   void (*prepare_recovery)(struct i2c_adapter *) ;
   void (*unprepare_recovery)(struct i2c_adapter *) ;
   struct gpio_desc *scl_gpiod ;
   struct gpio_desc *sda_gpiod ;
};
#line 661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter_quirks {
   u64 flags ;
   int max_num_msgs ;
   u16 max_write_len ;
   u16 max_read_len ;
   u16 max_comb_1st_msg_len ;
   u16 max_comb_2nd_msg_len ;
};
#line 692  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter {
   struct module *owner ;
   unsigned int class ;
   struct i2c_algorithm *algo ;
   void *algo_data ;
   struct i2c_lock_operations *lock_ops ;
   struct rt_mutex bus_lock ;
   struct rt_mutex mux_lock ;
   int timeout ;
   int retries ;
   struct device dev ;
   unsigned long locked_flags ;
   int nr ;
   char name[48U] ;
   struct completion dev_released ;
   struct mutex userspace_clients_lock ;
   struct list_head userspace_clients ;
   struct i2c_bus_recovery_info *bus_recovery_info ;
   struct i2c_adapter_quirks *quirks ;
   struct irq_domain *host_notify_domain ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cdev.h"
struct cdev {
   struct kobject kobj ;
   struct module *owner ;
   struct file_operations *ops ;
   struct list_head list ;
   dev_t dev ;
   unsigned int count ;
} __attribute__((__designated_init__));
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-common.h"
struct v4l2_edid {
   __u32 pad ;
   __u32 start_block ;
   __u32 blocks ;
   __u32 reserved[5U] ;
   __u8 *edid ;
};
#line 754 
enum v4l2_priority {
    V4L2_PRIORITY_UNSET = 0,
    V4L2_PRIORITY_BACKGROUND = 1,
    V4L2_PRIORITY_INTERACTIVE = 2,
    V4L2_PRIORITY_RECORD = 3,
    V4L2_PRIORITY_DEFAULT = 2
};
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_rect {
   __s32 left ;
   __s32 top ;
   __u32 width ;
   __u32 height ;
};
#line 420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_fract {
   __u32 numerator ;
   __u32 denominator ;
};
#line 1212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
typedef __u64 v4l2_std_id;
#line 1394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings {
   __u32 width ;
   __u32 height ;
   __u32 interlaced ;
   __u32 polarities ;
   __u64 pixelclock ;
   __u32 hfrontporch ;
   __u32 hsync ;
   __u32 hbackporch ;
   __u32 vfrontporch ;
   __u32 vsync ;
   __u32 vbackporch ;
   __u32 il_vfrontporch ;
   __u32 il_vsync ;
   __u32 il_vbackporch ;
   __u32 standards ;
   __u32 flags ;
   struct v4l2_fract picture_aspect ;
   __u8 cea861_vic ;
   __u8 hdmi_vic ;
   __u8 reserved[46U] ;
} __attribute__((__packed__));
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_7193 {
   struct v4l2_bt_timings bt ;
   __u32 reserved[32U] ;
};
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings {
   __u32 type ;
   union __anonunion_7193 __anonCompField_v4l2_dv_timings_77 ;
} __attribute__((__packed__));
#line 1536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_enum_dv_timings {
   __u32 index ;
   __u32 pad ;
   __u32 reserved[2U] ;
   struct v4l2_dv_timings timings ;
};
#line 1554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings_cap {
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u64 min_pixelclock ;
   __u64 max_pixelclock ;
   __u32 standards ;
   __u32 capabilities ;
   __u32 reserved[16U] ;
} __attribute__((__packed__));
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_7194 {
   struct v4l2_bt_timings_cap bt ;
   __u32 raw_data[32U] ;
};
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings_cap {
   __u32 type ;
   __u32 pad ;
   __u32 reserved[2U] ;
   union __anonunion_7194 __anonCompField_v4l2_dv_timings_cap_78 ;
};
#line 1803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_tuner {
   __u32 index ;
   __u8 name[32U] ;
   __u32 type ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 rxsubchans ;
   __u32 audmode ;
   __s32 signal ;
   __s32 afc ;
   __u32 reserved[4U] ;
};
#line 1817  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_modulator {
   __u32 index ;
   __u8 name[32U] ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 txsubchans ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 1860  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency {
   __u32 tuner ;
   __u32 type ;
   __u32 frequency ;
   __u32 reserved[8U] ;
};
#line 1871  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency_band {
   __u32 tuner ;
   __u32 type ;
   __u32 index ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 modulation ;
   __u32 reserved[9U] ;
};
#line 2043  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_vbi_format {
   __u32 sampling_rate ;
   __u32 offset ;
   __u32 samples_per_line ;
   __u32 sample_format ;
   __s32 start[2U] ;
   __u32 count[2U] ;
   __u32 flags ;
   __u32 reserved[2U] ;
};
#line 2071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_format {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 io_size ;
   __u32 reserved[2U] ;
};
#line 2095  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_cap {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 2106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_data {
   __u32 id ;
   __u32 field ;
   __u32 line ;
   __u32 reserved ;
   __u8 data[48U] ;
};
#line 2350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_event_subscription {
   __u32 type ;
   __u32 id ;
   __u32 flags ;
   __u32 reserved[5U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_7210 {
   __u32 addr ;
   char name[32U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_match {
   __u32 type ;
   union __anonunion_7210 __anonCompField_v4l2_dbg_match_87 ;
} __attribute__((__packed__));
#line 2383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_register {
   struct v4l2_dbg_match match ;
   __u32 size ;
   __u64 reg ;
   __u64 val ;
} __attribute__((__packed__));
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_device;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_gobj {
   struct media_device *mdev ;
   u32 id ;
   struct list_head list ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_enum {
   unsigned long *bmap ;
   int idx_max ;
};
#line 88 
struct media_entity;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_stack_7214 {
   struct media_entity *entity ;
   struct list_head *link ;
};
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_graph {
   struct __anonstruct_stack_7214 stack[16U] ;
   struct media_entity_enum ent_enum ;
   int top ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pipeline {
   int streaming_count ;
   struct media_graph graph ;
};
#line 132 
struct media_pad;
#line 132 
struct media_interface;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_7215 {
   struct media_gobj *gobj0 ;
   struct media_pad *source ;
   struct media_interface *intf ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_7216 {
   struct media_gobj *gobj1 ;
   struct media_pad *sink ;
   struct media_entity *entity ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_link {
   struct media_gobj graph_obj ;
   struct list_head list ;
   union __anonunion_7215 __anonCompField_media_link_90 ;
   union __anonunion_7216 __anonCompField_media_link_91 ;
   struct media_link *reverse ;
   unsigned long flags ;
   bool is_backlink ;
};
#line 149 
enum media_pad_signal_type {
    PAD_SIGNAL_DEFAULT = 0,
    PAD_SIGNAL_ANALOG = 1,
    PAD_SIGNAL_DV = 2,
    PAD_SIGNAL_AUDIO = 3
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pad {
   struct media_gobj graph_obj ;
   struct media_entity *entity ;
   u16 index ;
   enum media_pad_signal_type sig_type ;
   unsigned long flags ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_operations {
   int (*get_fwnode_pad)(struct fwnode_endpoint *) ;
   int (*link_setup)(struct media_entity *, struct media_pad *, struct media_pad *, u32 ) ;
   int (*link_validate)(struct media_link *) ;
};
#line 221 
enum media_entity_type {
    MEDIA_ENTITY_TYPE_BASE = 0,
    MEDIA_ENTITY_TYPE_VIDEO_DEVICE = 1,
    MEDIA_ENTITY_TYPE_V4L2_SUBDEV = 2
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_dev_7218 {
   u32 major ;
   u32 minor ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_info_7217 {
   struct __anonstruct_dev_7218 dev ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity {
   struct media_gobj graph_obj ;
   char *name ;
   enum media_entity_type obj_type ;
   u32 function ;
   unsigned long flags ;
   u16 num_pads ;
   u16 num_links ;
   u16 num_backlinks ;
   int internal_idx ;
   struct media_pad *pads ;
   struct list_head links ;
   struct media_entity_operations *ops ;
   int stream_count ;
   int use_count ;
   struct media_pipeline *pipe ;
   union __anonunion_info_7217 info ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_interface {
   struct media_gobj graph_obj ;
   struct list_head links ;
   u32 type ;
   u32 flags ;
};
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_intf_devnode {
   struct media_interface intf ;
   u32 major ;
   u32 minor ;
};
#line 1087 
enum vfl_devnode_type {
    VFL_TYPE_GRABBER = 0,
    VFL_TYPE_VBI = 1,
    VFL_TYPE_RADIO = 2,
    VFL_TYPE_SUBDEV = 3,
    VFL_TYPE_SDR = 4,
    VFL_TYPE_TOUCH = 5,
    VFL_TYPE_MAX = 6
};
#line 1097 
enum vfl_devnode_direction {
    VFL_DIR_RX = 0,
    VFL_DIR_TX = 1,
    VFL_DIR_M2M = 2
};
#line 1104 
struct video_device;
#line 1105 
struct v4l2_device;
#line 1106 
struct v4l2_ctrl_handler;
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_prio_state {
   atomic_t prios[4U] ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl32)(struct file *, unsigned int , unsigned long ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 256 
struct vb2_queue;
#line 256 
struct v4l2_ioctl_ops;
#line 256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct video_device {
   struct media_entity entity ;
   struct media_intf_devnode *intf_devnode ;
   struct media_pipeline pipe ;
   struct v4l2_file_operations *fops ;
   u32 device_caps ;
   struct device dev ;
   struct cdev *cdev ;
   struct v4l2_device *v4l2_dev ;
   struct device *dev_parent ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct vb2_queue *queue ;
   struct v4l2_prio_state *prio ;
   char name[32U] ;
   enum vfl_devnode_type vfl_type ;
   enum vfl_devnode_direction vfl_dir ;
   int minor ;
   u16 num ;
   unsigned long flags ;
   int index ;
   spinlock_t fh_lock ;
   struct list_head fh_list ;
   int dev_debug ;
   v4l2_std_id tvnorms ;
   void (*release)(struct video_device *) ;
   struct v4l2_ioctl_ops *ioctl_ops ;
   unsigned long valid_ioctls[3U] ;
   struct mutex *lock ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_subdev;
#line 96 
struct v4l2_subdev_ops;
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_priv_tun_config {
   int tuner ;
   void *priv ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_devnode {
   struct media_device *media_dev ;
   struct media_file_operations *fops ;
   struct device dev ;
   struct cdev cdev ;
   struct device *parent ;
   int minor ;
   unsigned long flags ;
   void (*release)(struct media_devnode *) ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_request;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device_ops {
   int (*link_notify)(struct media_link *, u32 , unsigned int ) ;
   struct media_request *(*req_alloc)(struct media_device *) ;
   void (*req_free)(struct media_request *) ;
   int (*req_validate)(struct media_request *) ;
   void (*req_queue)(struct media_request *) ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device {
   struct device *dev ;
   struct media_devnode *devnode ;
   char model[32U] ;
   char driver_name[32U] ;
   char serial[40U] ;
   char bus_info[32U] ;
   u32 hw_revision ;
   u64 topology_version ;
   u32 id ;
   struct ida entity_internal_idx ;
   int entity_internal_idx_max ;
   struct list_head entities ;
   struct list_head interfaces ;
   struct list_head pads ;
   struct list_head links ;
   struct list_head entity_notify ;
   struct mutex graph_mutex ;
   struct media_graph pm_count_walk ;
   void *source_priv ;
   int (*enable_source)(struct media_entity *, struct media_pipeline *) ;
   void (*disable_source)(struct media_entity *) ;
   struct media_device_ops *ops ;
   struct mutex req_queue_mutex ;
   atomic_t request_id ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-mediabus.h"
struct v4l2_mbus_framefmt {
   __u32 width ;
   __u32 height ;
   __u32 code ;
   __u32 field ;
   __u32 colorspace ;
   __u16 ycbcr_enc ;
   __u16 quantization ;
   __u16 xfer_func ;
   __u16 reserved[11U] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_format {
   __u32 which ;
   __u32 pad ;
   struct v4l2_mbus_framefmt format ;
   __u32 reserved[8U] ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_mbus_code_enum {
   __u32 pad ;
   __u32 index ;
   __u32 code ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_size_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval {
   __u32 pad ;
   struct v4l2_fract interval ;
   __u32 reserved[9U] ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 width ;
   __u32 height ;
   struct v4l2_fract interval ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_selection {
   __u32 which ;
   __u32 pad ;
   __u32 target ;
   __u32 flags ;
   struct v4l2_rect r ;
   __u32 reserved[8U] ;
};
#line 157 
struct v4l2_async_notifier;
#line 158 
enum v4l2_async_match_type {
    V4L2_ASYNC_MATCH_CUSTOM = 0,
    V4L2_ASYNC_MATCH_DEVNAME = 1,
    V4L2_ASYNC_MATCH_I2C = 2,
    V4L2_ASYNC_MATCH_FWNODE = 3
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_i2c_7232 {
   int adapter_id ;
   unsigned short address ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_custom_7233 {
   bool (*match)(struct device *, struct v4l2_async_subdev *) ;
   void *priv ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
union __anonunion_match_7231 {
   struct fwnode_handle *fwnode ;
   char *device_name ;
   struct __anonstruct_i2c_7232 i2c ;
   struct __anonstruct_custom_7233 custom ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_subdev {
   enum v4l2_async_match_type match_type ;
   union __anonunion_match_7231 match ;
   struct list_head list ;
   struct list_head asd_list ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier_operations {
   int (*bound)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
   int (*complete)(struct v4l2_async_notifier *) ;
   void (*unbind)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier {
   struct v4l2_async_notifier_operations *ops ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev *sd ;
   struct v4l2_async_notifier *parent ;
   struct list_head asd_list ;
   struct list_head waiting ;
   struct list_head done ;
   struct list_head list ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_m2m_ctx;
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_fh {
   struct list_head list ;
   struct video_device *vdev ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   enum v4l2_priority prio ;
   wait_queue_head_t wait ;
   struct mutex subscribe_lock ;
   struct list_head subscribed ;
   struct list_head available ;
   unsigned int navailable ;
   u32 sequence ;
   struct v4l2_m2m_ctx *m2m_ctx ;
};
#line 162 
enum v4l2_mbus_type {
    V4L2_MBUS_UNKNOWN = 0,
    V4L2_MBUS_PARALLEL = 1,
    V4L2_MBUS_BT656 = 2,
    V4L2_MBUS_CSI1 = 3,
    V4L2_MBUS_CCP2 = 4,
    V4L2_MBUS_CSI2_DPHY = 5,
    V4L2_MBUS_CSI2_CPHY = 6
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-mediabus.h"
struct v4l2_mbus_config {
   enum v4l2_mbus_type type ;
   unsigned int flags ;
};
#line 184 
struct v4l2_subdev_fh;
#line 185 
struct tuner_setup;
#line 186 
struct v4l2_mbus_frame_desc;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_decode_vbi_line {
   u32 is_second_field ;
   u8 *p ;
   u32 line ;
   u32 type ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_io_pin_config {
   u32 flags ;
   u8 pin ;
   u8 function ;
   u8 value ;
   u8 strength ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_core_ops {
   int (*log_status)(struct v4l2_subdev *) ;
   int (*s_io_pin_config)(struct v4l2_subdev *, size_t , struct v4l2_subdev_io_pin_config *) ;
   int (*init)(struct v4l2_subdev *, u32 ) ;
   int (*load_fw)(struct v4l2_subdev *) ;
   int (*reset)(struct v4l2_subdev *, u32 ) ;
   int (*s_gpio)(struct v4l2_subdev *, u32 ) ;
   long (*ioctl)(struct v4l2_subdev *, unsigned int , void *) ;
   long (*compat_ioctl32)(struct v4l2_subdev *, unsigned int , unsigned long ) ;
   int (*g_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_power)(struct v4l2_subdev *, int ) ;
   int (*interrupt_service_routine)(struct v4l2_subdev *, u32 , bool *) ;
   int (*subscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
   int (*unsubscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
};
#line 264  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_tuner_ops {
   int (*standby)(struct v4l2_subdev *) ;
   int (*s_radio)(struct v4l2_subdev *) ;
   int (*s_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*g_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*enum_freq_bands)(struct v4l2_subdev *, struct v4l2_frequency_band *) ;
   int (*g_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*s_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*g_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_type_addr)(struct v4l2_subdev *, struct tuner_setup *) ;
   int (*s_config)(struct v4l2_subdev *, struct v4l2_priv_tun_config *) ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_audio_ops {
   int (*s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_i2s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
};
#line 310 
enum v4l2_mbus_frame_desc_flags {
    V4L2_MBUS_FRAME_DESC_FL_LEN_MAX = 1,
    V4L2_MBUS_FRAME_DESC_FL_BLOB = 2
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc_entry {
   enum v4l2_mbus_frame_desc_flags flags ;
   u32 pixelcode ;
   u32 length ;
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc {
   struct v4l2_mbus_frame_desc_entry entry[4U] ;
   unsigned short num_entries ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_video_ops {
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_crystal_freq)(struct v4l2_subdev *, u32 , u32 ) ;
   int (*g_std)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*s_std)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*s_std_output)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*g_std_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*querystd)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_input_status)(struct v4l2_subdev *, u32 *) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
   int (*g_pixelaspect)(struct v4l2_subdev *, struct v4l2_fract *) ;
   int (*g_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*query_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_rx_buffer)(struct v4l2_subdev *, void *, unsigned int *) ;
};
#line 481  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_vbi_ops {
   int (*decode_vbi_line)(struct v4l2_subdev *, struct v4l2_decode_vbi_line *) ;
   int (*s_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_sliced_vbi_cap)(struct v4l2_subdev *, struct v4l2_sliced_vbi_cap *) ;
   int (*s_raw_fmt)(struct v4l2_subdev *, struct v4l2_vbi_format *) ;
   int (*g_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
   int (*s_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
};
#line 501  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_sensor_ops {
   int (*g_skip_top_lines)(struct v4l2_subdev *, u32 *) ;
   int (*g_skip_frames)(struct v4l2_subdev *, u32 *) ;
};
#line 505 
enum v4l2_subdev_ir_mode {
    V4L2_SUBDEV_IR_MODE_PULSE_WIDTH = 0
};
#line 540  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_parameters {
   unsigned int bytes_per_data_element ;
   enum v4l2_subdev_ir_mode mode ;
   bool enable ;
   bool interrupt_enable ;
   bool shutdown ;
   bool modulation ;
   u32 max_pulse_width ;
   unsigned int carrier_freq ;
   unsigned int duty_cycle ;
   bool invert_level ;
   bool invert_carrier_sense ;
   u32 noise_filter_min_width ;
   unsigned int carrier_range_lower ;
   unsigned int carrier_range_upper ;
   u32 resolution ;
};
#line 599  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_ops {
   int (*rx_read)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*rx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*rx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_write)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*tx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
};
#line 630  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_config {
   struct v4l2_mbus_framefmt try_fmt ;
   struct v4l2_rect try_crop ;
   struct v4l2_rect try_compose ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_ops {
   int (*init_cfg)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *) ;
   int (*enum_mbus_code)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_mbus_code_enum *) ;
   int (*enum_frame_size)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_size_enum *) ;
   int (*enum_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_interval_enum *) ;
   int (*get_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*set_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*get_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*set_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*get_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*set_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*dv_timings_cap)(struct v4l2_subdev *, struct v4l2_dv_timings_cap *) ;
   int (*enum_dv_timings)(struct v4l2_subdev *, struct v4l2_enum_dv_timings *) ;
   int (*link_validate)(struct v4l2_subdev *, struct media_link *, struct v4l2_subdev_format *, struct v4l2_subdev_format *) ;
   int (*get_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
   int (*set_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
};
#line 727  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ops {
   struct v4l2_subdev_core_ops *core ;
   struct v4l2_subdev_tuner_ops *tuner ;
   struct v4l2_subdev_audio_ops *audio ;
   struct v4l2_subdev_video_ops *video ;
   struct v4l2_subdev_vbi_ops *vbi ;
   struct v4l2_subdev_ir_ops *ir ;
   struct v4l2_subdev_sensor_ops *sensor ;
   struct v4l2_subdev_pad_ops *pad ;
};
#line 765  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_internal_ops {
   int (*registered)(struct v4l2_subdev *) ;
   void (*unregistered)(struct v4l2_subdev *) ;
   int (*open)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   int (*close)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   void (*release)(struct v4l2_subdev *) ;
};
#line 772 
struct regulator_bulk_data;
#line 797  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_platform_data {
   struct regulator_bulk_data *regulators ;
   int num_regulators ;
   void *host_priv ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev {
   struct media_entity entity ;
   struct list_head list ;
   struct module *owner ;
   bool owner_v4l2_dev ;
   u32 flags ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev_ops *ops ;
   struct v4l2_subdev_internal_ops *internal_ops ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   char name[32U] ;
   u32 grp_id ;
   void *dev_priv ;
   void *host_priv ;
   struct video_device *devnode ;
   struct device *dev ;
   struct fwnode_handle *fwnode ;
   struct list_head async_list ;
   struct v4l2_async_subdev *asd ;
   struct v4l2_async_notifier *notifier ;
   struct v4l2_async_notifier *subdev_notifier ;
   struct v4l2_subdev_platform_data *pdata ;
};
#line 906  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_fh {
   struct v4l2_fh vfh ;
   struct module *owner ;
   struct v4l2_subdev_pad_config *pad ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-device.h"
struct v4l2_device {
   struct device *dev ;
   struct media_device *mdev ;
   struct list_head subdevs ;
   spinlock_t lock ;
   char name[36U] ;
   void (*notify)(struct v4l2_subdev *, unsigned int , void *) ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct v4l2_prio_state prio ;
   struct kref ref ;
   void (*release)(struct v4l2_device *) ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
struct ptp_system_timestamp {
   struct timespec64 pre_ts ;
   struct timespec64 post_ts ;
};
#line 277 
struct dma_chan;
#line 279 
struct spi_controller;
#line 280 
struct spi_transfer;
#line 281 
struct spi_controller_mem_ops;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_statistics {
   spinlock_t lock ;
   unsigned long messages ;
   unsigned long transfers ;
   unsigned long errors ;
   unsigned long timedout ;
   unsigned long spi_sync ;
   unsigned long spi_sync_immediate ;
   unsigned long spi_async ;
   unsigned long long bytes ;
   unsigned long long bytes_rx ;
   unsigned long long bytes_tx ;
   unsigned long transfer_bytes_histo[17U] ;
   unsigned long transfers_split_maxsize ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_delay {
   u16 value ;
   u8 unit ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_device {
   struct device dev ;
   struct spi_controller *controller ;
   struct spi_controller *master ;
   u32 max_speed_hz ;
   u8 chip_select ;
   u8 bits_per_word ;
   bool rt ;
   u32 mode ;
   int irq ;
   void *controller_state ;
   void *controller_data ;
   char modalias[32U] ;
   char *driver_override ;
   int cs_gpio ;
   struct gpio_desc *cs_gpiod ;
   struct spi_delay word_delay ;
   struct spi_statistics statistics ;
};
#line 247 
struct spi_message;
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_controller {
   struct device dev ;
   struct list_head list ;
   s16 bus_num ;
   u16 num_chipselect ;
   u16 dma_alignment ;
   u32 mode_bits ;
   u32 bits_per_word_mask ;
   u32 min_speed_hz ;
   u32 max_speed_hz ;
   u16 flags ;
   bool slave ;
   size_t (*max_transfer_size)(struct spi_device *) ;
   size_t (*max_message_size)(struct spi_device *) ;
   struct mutex io_mutex ;
   spinlock_t bus_lock_spinlock ;
   struct mutex bus_lock_mutex ;
   bool bus_lock_flag ;
   int (*setup)(struct spi_device *) ;
   int (*set_cs_timing)(struct spi_device *, struct spi_delay *, struct spi_delay *, struct spi_delay *) ;
   int (*transfer)(struct spi_device *, struct spi_message *) ;
   void (*cleanup)(struct spi_device *) ;
   bool (*can_dma)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   bool queued ;
   struct kthread_worker kworker ;
   struct task_struct *kworker_task ;
   struct kthread_work pump_messages ;
   spinlock_t queue_lock ;
   struct list_head queue ;
   struct spi_message *cur_msg ;
   bool idling ;
   bool busy ;
   bool running ;
   bool rt ;
   bool auto_runtime_pm ;
   bool cur_msg_prepared ;
   bool cur_msg_mapped ;
   struct completion xfer_completion ;
   size_t max_dma_len ;
   int (*prepare_transfer_hardware)(struct spi_controller *) ;
   int (*transfer_one_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_transfer_hardware)(struct spi_controller *) ;
   int (*prepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*slave_abort)(struct spi_controller *) ;
   void (*set_cs)(struct spi_device *, bool ) ;
   int (*transfer_one)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   void (*handle_err)(struct spi_controller *, struct spi_message *) ;
   struct spi_controller_mem_ops *mem_ops ;
   struct spi_delay cs_setup ;
   struct spi_delay cs_hold ;
   struct spi_delay cs_inactive ;
   int *cs_gpios ;
   struct gpio_desc **cs_gpiods ;
   bool use_gpio_descriptors ;
   struct spi_statistics statistics ;
   struct dma_chan *dma_tx ;
   struct dma_chan *dma_rx ;
   void *dummy_rx ;
   void *dummy_tx ;
   int (*fw_translate_cs)(struct spi_controller *, unsigned int ) ;
   bool ptp_sts_supported ;
   unsigned long irq_flags ;
};
#line 890  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_transfer {
   void *tx_buf ;
   void *rx_buf ;
   unsigned int len ;
   dma_addr_t tx_dma ;
   dma_addr_t rx_dma ;
   struct sg_table tx_sg ;
   struct sg_table rx_sg ;
   unsigned int cs_change : 1 ;
   unsigned int tx_nbits : 3 ;
   unsigned int rx_nbits : 3 ;
   u8 bits_per_word ;
   u16 delay_usecs ;
   struct spi_delay delay ;
   struct spi_delay cs_change_delay ;
   struct spi_delay word_delay ;
   u32 speed_hz ;
   u32 effective_speed_hz ;
   unsigned int ptp_sts_word_pre ;
   unsigned int ptp_sts_word_post ;
   struct ptp_system_timestamp *ptp_sts ;
   bool timestamped_pre ;
   bool timestamped_post ;
   struct list_head transfer_list ;
};
#line 961  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_message {
   struct list_head transfers ;
   struct spi_device *spi ;
   unsigned int is_dma_mapped : 1 ;
   void (*complete)(void *) ;
   void *context ;
   unsigned int frame_length ;
   unsigned int actual_length ;
   int status ;
   struct list_head queue ;
   void *state ;
   struct list_head resources ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fix_screeninfo {
   char id[16U] ;
   unsigned long smem_start ;
   __u32 smem_len ;
   __u32 type ;
   __u32 type_aux ;
   __u32 visual ;
   __u16 xpanstep ;
   __u16 ypanstep ;
   __u16 ywrapstep ;
   __u32 line_length ;
   unsigned long mmio_start ;
   __u32 mmio_len ;
   __u32 accel ;
   __u16 capabilities ;
   __u16 reserved[2U] ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_bitfield {
   __u32 offset ;
   __u32 length ;
   __u32 msb_right ;
};
#line 241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_var_screeninfo {
   __u32 xres ;
   __u32 yres ;
   __u32 xres_virtual ;
   __u32 yres_virtual ;
   __u32 xoffset ;
   __u32 yoffset ;
   __u32 bits_per_pixel ;
   __u32 grayscale ;
   struct fb_bitfield red ;
   struct fb_bitfield green ;
   struct fb_bitfield blue ;
   struct fb_bitfield transp ;
   __u32 nonstd ;
   __u32 activate ;
   __u32 height ;
   __u32 width ;
   __u32 accel_flags ;
   __u32 pixclock ;
   __u32 left_margin ;
   __u32 right_margin ;
   __u32 upper_margin ;
   __u32 lower_margin ;
   __u32 hsync_len ;
   __u32 vsync_len ;
   __u32 sync ;
   __u32 vmode ;
   __u32 rotate ;
   __u32 colorspace ;
   __u32 reserved[4U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cmap {
   __u32 start ;
   __u32 len ;
   __u16 *red ;
   __u16 *green ;
   __u16 *blue ;
   __u16 *transp ;
};
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_copyarea {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 sx ;
   __u32 sy ;
};
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fillrect {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 color ;
   __u32 rop ;
};
#line 359  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_image {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 fg_color ;
   __u32 bg_color ;
   __u8 depth ;
   char *data ;
   struct fb_cmap cmap ;
};
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fbcurpos {
   __u16 x ;
   __u16 y ;
};
#line 387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cursor {
   __u16 set ;
   __u16 enable ;
   __u16 rop ;
   char *mask ;
   struct fbcurpos hot ;
   struct fb_image image ;
};
#line 400 
enum backlight_type {
    BACKLIGHT_RAW = 1,
    BACKLIGHT_PLATFORM = 2,
    BACKLIGHT_FIRMWARE = 3,
    BACKLIGHT_TYPE_MAX = 4
};
#line 412 
enum backlight_scale {
    BACKLIGHT_SCALE_UNKNOWN = 0,
    BACKLIGHT_SCALE_LINEAR = 1,
    BACKLIGHT_SCALE_NON_LINEAR = 2
};
#line 418 
struct backlight_device;
#line 419 
struct fb_info;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_ops {
   unsigned int options ;
   int (*update_status)(struct backlight_device *) ;
   int (*get_brightness)(struct backlight_device *) ;
   int (*check_fb)(struct backlight_device *, struct fb_info *) ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_properties {
   int brightness ;
   int max_brightness ;
   int power ;
   int fb_blank ;
   enum backlight_type type ;
   unsigned int state ;
   enum backlight_scale scale ;
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_device {
   struct backlight_properties props ;
   struct mutex update_lock ;
   struct mutex ops_lock ;
   struct backlight_ops *ops ;
   struct notifier_block fb_notif ;
   struct list_head entry ;
   struct device dev ;
   bool fb_bl_on[32U] ;
   int use_count ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_chroma {
   __u32 redx ;
   __u32 greenx ;
   __u32 bluex ;
   __u32 whitex ;
   __u32 redy ;
   __u32 greeny ;
   __u32 bluey ;
   __u32 whitey ;
};
#line 63 
struct fb_videomode;
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_monspecs {
   struct fb_chroma chroma ;
   struct fb_videomode *modedb ;
   __u8 manufacturer[4U] ;
   __u8 monitor[14U] ;
   __u8 serial_no[14U] ;
   __u8 ascii[14U] ;
   __u32 modedb_len ;
   __u32 model ;
   __u32 serial ;
   __u32 year ;
   __u32 week ;
   __u32 hfmin ;
   __u32 hfmax ;
   __u32 dclkmin ;
   __u32 dclkmax ;
   __u16 input ;
   __u16 dpms ;
   __u16 signal ;
   __u16 vfmin ;
   __u16 vfmax ;
   __u16 gamma ;
   __u16 gtf : 1 ;
   __u16 misc ;
   __u8 version ;
   __u8 revision ;
   __u8 max_x ;
   __u8 max_y ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_blit_caps {
   u32 x ;
   u32 y ;
   u32 len ;
   u32 flags ;
};
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_pixmap {
   u8 *addr ;
   u32 size ;
   u32 offset ;
   u32 buf_align ;
   u32 scan_align ;
   u32 access_align ;
   u32 flags ;
   u32 blit_x ;
   u32 blit_y ;
   void (*writeio)(struct fb_info *, void *, void *, unsigned int ) ;
   void (*readio)(struct fb_info *, void *, void *, unsigned int ) ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_deferred_io {
   unsigned long delay ;
   struct mutex lock ;
   struct list_head pagelist ;
   void (*first_io)(struct fb_info *) ;
   void (*deferred_io)(struct fb_info *, struct list_head *) ;
};
#line 228  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_ops {
   struct module *owner ;
   int (*fb_open)(struct fb_info *, int ) ;
   int (*fb_release)(struct fb_info *, int ) ;
   ssize_t (*fb_read)(struct fb_info *, char *, size_t , loff_t *) ;
   ssize_t (*fb_write)(struct fb_info *, char *, size_t , loff_t *) ;
   int (*fb_check_var)(struct fb_var_screeninfo *, struct fb_info *) ;
   int (*fb_set_par)(struct fb_info *) ;
   int (*fb_setcolreg)(unsigned int , unsigned int , unsigned int , unsigned int , unsigned int , struct fb_info *) ;
   int (*fb_setcmap)(struct fb_cmap *, struct fb_info *) ;
   int (*fb_blank)(int , struct fb_info *) ;
   int (*fb_pan_display)(struct fb_var_screeninfo *, struct fb_info *) ;
   void (*fb_fillrect)(struct fb_info *, struct fb_fillrect *) ;
   void (*fb_copyarea)(struct fb_info *, struct fb_copyarea *) ;
   void (*fb_imageblit)(struct fb_info *, struct fb_image *) ;
   int (*fb_cursor)(struct fb_info *, struct fb_cursor *) ;
   int (*fb_sync)(struct fb_info *) ;
   int (*fb_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_compat_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_mmap)(struct fb_info *, struct vm_area_struct *) ;
   void (*fb_get_caps)(struct fb_info *, struct fb_blit_caps *, struct fb_var_screeninfo *) ;
   void (*fb_destroy)(struct fb_info *) ;
   int (*fb_debug_enter)(struct fb_info *) ;
   int (*fb_debug_leave)(struct fb_info *) ;
};
#line 306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilemap {
   __u32 width ;
   __u32 height ;
   __u32 depth ;
   __u32 length ;
   __u8 *data ;
};
#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilerect {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 index ;
   __u32 fg ;
   __u32 bg ;
   __u32 rop ;
};
#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilearea {
   __u32 sx ;
   __u32 sy ;
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tileblit {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 fg ;
   __u32 bg ;
   __u32 length ;
   __u32 *indices ;
};
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilecursor {
   __u32 sx ;
   __u32 sy ;
   __u32 mode ;
   __u32 shape ;
   __u32 fg ;
   __u32 bg ;
};
#line 355  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tile_ops {
   void (*fb_settile)(struct fb_info *, struct fb_tilemap *) ;
   void (*fb_tilecopy)(struct fb_info *, struct fb_tilearea *) ;
   void (*fb_tilefill)(struct fb_info *, struct fb_tilerect *) ;
   void (*fb_tileblit)(struct fb_info *, struct fb_tileblit *) ;
   void (*fb_tilecursor)(struct fb_info *, struct fb_tilecursor *) ;
   int (*fb_get_tilemax)(struct fb_info *) ;
};
#line 499  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct aperture {
   resource_size_t base ;
   resource_size_t size ;
};
#line 497  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct apertures_struct {
   unsigned int count ;
   struct aperture ranges[0U] ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
union __anonunion_8134 {
   char *screen_base ;
   char *screen_buffer ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_info {
   atomic_t count ;
   int node ;
   int flags ;
   int fbcon_rotate_hint ;
   struct mutex lock ;
   struct mutex mm_lock ;
   struct fb_var_screeninfo var ;
   struct fb_fix_screeninfo fix ;
   struct fb_monspecs monspecs ;
   struct work_struct queue ;
   struct fb_pixmap pixmap ;
   struct fb_pixmap sprite ;
   struct fb_cmap cmap ;
   struct list_head modelist ;
   struct fb_videomode *mode ;
   struct backlight_device *bl_dev ;
   struct mutex bl_curve_mutex ;
   u8 bl_curve[128U] ;
   struct delayed_work deferred_work ;
   struct fb_deferred_io *fbdefio ;
   struct fb_ops *fbops ;
   struct device *device ;
   struct device *dev ;
   int class_flag ;
   struct fb_tile_ops *tileops ;
   union __anonunion_8134 __anonCompField_fb_info_73 ;
   unsigned long screen_size ;
   void *pseudo_palette ;
   u32 state ;
   void *fbcon_par ;
   void *par ;
   struct apertures_struct *apertures ;
   bool skip_vt_switch ;
};
#line 767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_videomode {
   char *name ;
   u32 refresh ;
   u32 xres ;
   u32 yres ;
   u32 pixclock ;
   u32 left_margin ;
   u32 right_margin ;
   u32 upper_margin ;
   u32 lower_margin ;
   u32 hsync_len ;
   u32 vsync_len ;
   u32 sync ;
   u32 vmode ;
   u32 flag ;
};
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct ldv_kmem_cache {
   char *name ;
   unsigned int size ;
};
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
typedef unsigned long pthread_t;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
union pthread_attr_t {
   char __size[56U] ;
   long __align ;
};
#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
typedef union pthread_attr_t pthread_attr_t;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 15  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_free_irq_5 {
   int arg0 ;
   int signal_pending ;
};
#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_interrupt_scenario_igc_intr_13 {
   int arg0 ;
   enum irqreturn (*arg1)(int , void *) ;
   enum irqreturn (*arg2)(int , void *) ;
   void *arg3 ;
   int signal_pending ;
};
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_random_allocationless_scenario_igc_ethtool_begin_17 {
   struct net_device *arg0 ;
   int signal_pending ;
};
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_pci_scenario_igc_driver_18 {
   struct pci_driver *arg0 ;
   int signal_pending ;
};
#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_timer_scenario_6_19 {
   struct timer_list *arg0 ;
   int signal_pending ;
};
/* compiler builtin: 
   void *__builtin_memcpy(void *, void const *, unsigned long);   */
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/inline_asm.h"
#line 22 
void ldv_inline_asm(void);
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler.h"
__inline static void __read_once_size(void *p, void *res, int size)
{
  #line 199 
  switch (size) {
    #line 199 
    case 1: 
            #line 199 
    ;
    #line 199 
    *((__u8 *)res) = *((__u8 *)p);
    #line 199 
    break;
    #line 199 
    case 2: 
            #line 199 
    ;
    #line 199 
    *((__u16 *)res) = *((__u16 *)p);
    #line 199 
    break;
    #line 199 
    case 4: 
            #line 199 
    ;
    #line 199 
    *((__u32 *)res) = *((__u32 *)p);
    #line 199 
    break;
    #line 199 
    case 8: 
            #line 199 
    ;
    #line 199 
    *((__u64 *)res) = *((__u64 *)p);
    #line 199 
    break;
    #line 199 
    default: 
             #line 199 
    ;
    #line 200 
    ldv_inline_asm();
    #line 199 
    __builtin_memcpy(res,(void const *)p,(unsigned long)size);
    #line 200 
    ldv_inline_asm();
  }
  #line 203 
  return;
}

#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/jump_label.h"
__inline static bool arch_static_branch(struct static_key *key, bool branch)
{
  #line 27 
  ldv_inline_asm();
  #line 28 
  ldv_inline_asm();
  #line 34 
  return (_Bool)0;
  #line 35 
  l_yes: 
         #line 35 
  ;
  #line 36 
  return (_Bool)1;
}

#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
#line 70 
void __dynamic_netdev_dbg(struct _ddebug *, struct net_device *, char * , ...);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
#line 20 
unsigned long native_save_fl(void);
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
unsigned long native_save_fl(void)
{
  #line 22 
  unsigned long flags;
  #line 23 
  ldv_inline_asm();
  #line 35 
  return flags;
}

#line 38 
#line 39 
void native_restore_fl(unsigned long flags);
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
void native_restore_fl(unsigned long flags)
{
  #line 41 
  ldv_inline_asm();
  #line 42 
  return;
}

#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static void writel(unsigned int val, void *addr)
{
  #line 69 
  ldv_inline_asm();
  #line 70 
  return;
}

#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/delay.h"
#line 11 
void __const_udelay(unsigned long);
#line 220  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_regs.h"
#line 220 
u32 igc_rd32(struct igc_hw *hw, u32 reg);
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_nvm.h"
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_nvm.c"
s32 igc_acquire_nvm(struct igc_hw *hw);
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_nvm.h"
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_nvm.c"
void igc_release_nvm(struct igc_hw *hw);
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_nvm.h"
#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_nvm.c"
s32 igc_read_mac_addr(struct igc_hw *hw);
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_nvm.h"
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_nvm.c"
s32 igc_read_nvm_eerd(struct igc_hw *hw, u16 offset, u16 words, u16 *data);
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_nvm.h"
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_nvm.c"
s32 igc_validate_nvm_checksum(struct igc_hw *hw);
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_nvm.h"
#line 194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_nvm.c"
s32 igc_update_nvm_checksum(struct igc_hw *hw);
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_hw.h"
#line 303 
struct net_device *igc_get_hw_dev(struct igc_hw *hw);
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_nvm.c"
static s32 igc_poll_eerd_eewr_done(struct igc_hw *hw, int ee_reg)
{
  #line 19 
  u32 i;
  #line 17 
  s32 ret_val = -1;
  #line 18 
  u32 attempts = 100000U;
  #line 19 
  u32 reg = 0U;
  #line 21 
  i = 0U;
  #line 21 
  while (i < attempts) {
    #line 22 
    if (ee_reg == 0) 
                     #line 23 
                     reg = igc_rd32(hw,73748U); else 
                                                     #line 25 
                                                     reg = igc_rd32(hw,73752U);
    #line 27 
    if ((reg & 2U) != 0U) {
      #line 28 
      ret_val = 0;
      #line 29 
      break;
    }
    #line 32 
    __const_udelay(21475UL);
    #line 21 
    i ++;
  }
  #line 35 
  return ret_val;
}

#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_nvm.c"
s32 igc_acquire_nvm(struct igc_hw *hw)
{
  #line 48 
  s32 timeout = 1000;
  #line 49 
  u32 eecd = igc_rd32(hw,16U);
  #line 50 
  s32 ret_val = 0;
  {
    #line 53 
    union __anonunion___u_699 __u;
    #line 52 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 52 
    u8 *hw_addr = (__u.__val);
    #line 52 
    writel(eecd | 64U,(void *)(hw_addr + 16U));
  }
  #line 53 
  eecd = igc_rd32(hw,16U);
  #line 55 
  while (timeout != 0) {
    #line 56 
    if ((eecd & 128U) != 0U) 
                             #line 57 
                             break;
    #line 58 
    __const_udelay(21475UL);
    #line 59 
    eecd = igc_rd32(hw,16U);
    #line 60 
    timeout --;
  }
  #line 63 
  if (timeout == 0) {
    #line 64 
    eecd &= 4294967231U;
    {
      #line 66 
      union __anonunion___u_701 __u_0;
      #line 65 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
      #line 65 
      u8 *hw_addr_0 = (__u_0.__val);
      #line 65 
      writel(eecd,(void *)(hw_addr_0 + 16U));
    }
    {
      #line 66 
      bool branch;
      #line 66 
      struct _ddebug __UNIQUE_ID_ddebug436 = {.modname = (char *)"igc", .function = (char *)"igc_acquire_nvm", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_nvm.c", .format = (char *)"Could not acquire NVM grant\n", .lineno = (unsigned int)66U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 66 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug436.key.dd_key_false.key,(_Bool)0);
      #line 66 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 66 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug436,igc_get_hw_dev(hw),(char *)"Could not acquire NVM grant\n");
      }
    }
    #line 67 
    ret_val = -1;
  }
  #line 70 
  return ret_val;
}

#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_nvm.c"
void igc_release_nvm(struct igc_hw *hw)
{
  #line 81 
  u32 eecd;
  #line 83 
  eecd = igc_rd32(hw,16U);
  #line 84 
  eecd &= 4294967231U;
  {
    #line 86 
    union __anonunion___u_703 __u;
    #line 85 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 85 
    u8 *hw_addr = (__u.__val);
    #line 85 
    writel(eecd,(void *)(hw_addr + 16U));
  }
  #line 87 
  return;
}

#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_nvm.c"
s32 igc_read_nvm_eerd(struct igc_hw *hw, u16 offset, u16 words, u16 *data)
{
  #line 100 
  u32 i;
  #line 99 
  struct igc_nvm_info *nvm = & hw->nvm;
  #line 100 
  u32 eerd = 0U;
  #line 101 
  s32 ret_val = 0;
  #line 106 
  if (((int)nvm->word_size <= (int)offset || (int)words > (int)nvm->word_size - (int)offset) || (unsigned int)words == 0U) {
    {
      #line 108 
      bool branch;
      #line 108 
      struct _ddebug __UNIQUE_ID_ddebug437 = {.modname = (char *)"igc", .function = (char *)"igc_read_nvm_eerd", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_nvm.c", .format = (char *)"nvm parameter(s) out of bounds\n", .lineno = (unsigned int)108U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 108 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug437.key.dd_key_false.key,(_Bool)0);
      #line 108 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 108 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug437,igc_get_hw_dev(hw),(char *)"nvm parameter(s) out of bounds\n");
      }
    }
    #line 109 
    ret_val = -1;
    #line 110 
    goto out;
  }
  #line 113 
  i = 0U;
  #line 113 
  while ((unsigned int)words > i) {
    {
      #line 114 
      eerd = (((unsigned int)offset + i) << 2) + 1U;
      {
        #line 118 
        union __anonunion___u_705 __u;
        #line 117 
        __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
        #line 117 
        u8 *hw_addr = (__u.__val);
        #line 117 
        writel(eerd,(void *)(hw_addr + 73748U));
      }
      #line 118 
      ret_val = igc_poll_eerd_eewr_done(hw,0);
      #line 119 
      if (ret_val != 0) 
                        #line 120 
                        break;
      #line 122 
      *(data + (unsigned long)i) = (unsigned short)(igc_rd32(hw,73748U) >> 16);
    }
    #line 113 
    i ++;
  }
  #line 125 
  out: 
       #line 125 
  ;
  #line 126 
  return ret_val;
}

#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_nvm.c"
s32 igc_read_mac_addr(struct igc_hw *hw)
{
  #line 135 
  u32 rar_high;
  #line 136 
  u32 rar_low;
  #line 137 
  u16 i;
  #line 139 
  rar_high = igc_rd32(hw,21508U);
  #line 140 
  rar_low = igc_rd32(hw,21504U);
  #line 142 
  i = (unsigned short)0U;
  #line 142 
  while ((unsigned int)i <= 3U) {
    #line 143 
    hw->mac.perm_addr[(int)i] = (unsigned char)(rar_low >> (int)i * 8);
    #line 142 
    i = (u16)((int)i + 1);
  }
  #line 145 
  i = (unsigned short)0U;
  #line 145 
  while ((unsigned int)i <= 1U) {
    #line 146 
    hw->mac.perm_addr[(int)i + 4] = (unsigned char)(rar_high >> (int)i * 8);
    #line 145 
    i = (u16)((int)i + 1);
  }
  #line 148 
  i = (unsigned short)0U;
  #line 148 
  while ((unsigned int)i <= 5U) {
    #line 149 
    hw->mac.addr[(int)i] = hw->mac.perm_addr[(int)i];
    #line 148 
    i = (u16)((int)i + 1);
  }
  #line 151 
  return 0;
}

#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_nvm.c"
s32 igc_validate_nvm_checksum(struct igc_hw *hw)
{
  #line 164 
  u16 i;
  #line 164 
  u16 nvm_data;
  #line 163 
  u16 checksum = (unsigned short)0U;
  #line 165 
  s32 ret_val = 0;
  #line 167 
  i = (unsigned short)0U;
  #line 167 
  while ((unsigned int)i <= 63U) {
    #line 168 
    ret_val = (*(hw->nvm.ops.read))(hw,(unsigned short)((int)i),(unsigned short)1,& nvm_data);
    #line 169 
    if (ret_val != 0) {
      {
        #line 170 
        bool branch;
        #line 170 
        struct _ddebug __UNIQUE_ID_ddebug438 = {.modname = (char *)"igc", .function = (char *)"igc_validate_nvm_checksum", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_nvm.c", .format = (char *)"NVM Read Error\n", .lineno = (unsigned int)170U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 170 
        branch = arch_static_branch(& __UNIQUE_ID_ddebug438.key.dd_key_false.key,(_Bool)0);
        #line 170 
        if ((long)((long)((int)branch != 0)) != 0L) {
          #line 170 
          __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug438,igc_get_hw_dev(hw),(char *)"NVM Read Error\n");
        }
      }
      #line 171 
      goto out;
    }
    #line 173 
    checksum = (unsigned short)((int)checksum + (int)nvm_data);
    #line 167 
    i = (u16)((int)i + 1);
  }
  #line 176 
  if ((unsigned int)checksum != 47802U) {
    {
      #line 177 
      bool branch_0;
      #line 177 
      struct _ddebug __UNIQUE_ID_ddebug439 = {.modname = (char *)"igc", .function = (char *)"igc_validate_nvm_checksum", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_nvm.c", .format = (char *)"NVM Checksum Invalid\n", .lineno = (unsigned int)177U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 177 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug439.key.dd_key_false.key,(_Bool)0);
      #line 177 
      if ((long)((long)((int)branch_0 != 0)) != 0L) {
        #line 177 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug439,igc_get_hw_dev(hw),(char *)"NVM Checksum Invalid\n");
      }
    }
    #line 178 
    ret_val = -1;
    #line 179 
    goto out;
  }
  #line 182 
  out: 
       #line 182 
  ;
  #line 183 
  return ret_val;
}

#line 194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_nvm.c"
s32 igc_update_nvm_checksum(struct igc_hw *hw)
{
  #line 197 
  u16 i;
  #line 197 
  u16 nvm_data;
  #line 198 
  s32 ret_val;
  #line 196 
  u16 checksum = (unsigned short)0U;
  #line 200 
  i = (unsigned short)0U;
  #line 200 
  while ((unsigned int)i <= 62U) {
    #line 201 
    ret_val = (*(hw->nvm.ops.read))(hw,(unsigned short)((int)i),(unsigned short)1,& nvm_data);
    #line 202 
    if (ret_val != 0) {
      {
        #line 203 
        bool branch;
        #line 203 
        struct _ddebug __UNIQUE_ID_ddebug440 = {.modname = (char *)"igc", .function = (char *)"igc_update_nvm_checksum", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_nvm.c", .format = (char *)"NVM Read Error while updating checksum.\n", .lineno = (unsigned int)203U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 203 
        branch = arch_static_branch(& __UNIQUE_ID_ddebug440.key.dd_key_false.key,(_Bool)0);
        #line 203 
        if ((long)((long)((int)branch != 0)) != 0L) {
          #line 203 
          __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug440,igc_get_hw_dev(hw),(char *)"NVM Read Error while updating checksum.\n");
        }
      }
      #line 204 
      goto out;
    }
    #line 206 
    checksum = (unsigned short)((int)checksum + (int)nvm_data);
    #line 200 
    i = (u16)((int)i + 1);
  }
  #line 208 
  checksum = (unsigned short)(47802U - (unsigned int)checksum);
  #line 209 
  ret_val = (*(hw->nvm.ops.write))(hw,(unsigned short)63,(unsigned short)1,& checksum);
  #line 210 
  if (ret_val != 0) {
    #line 211 
    bool branch_0;
    #line 211 
    struct _ddebug __UNIQUE_ID_ddebug441 = {.modname = (char *)"igc", .function = (char *)"igc_update_nvm_checksum", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_nvm.c", .format = (char *)"NVM Write Error while updating checksum.\n", .lineno = (unsigned int)211U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 211 
    branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug441.key.dd_key_false.key,(_Bool)0);
    #line 211 
    if ((long)((long)((int)branch_0 != 0)) != 0L) {
      #line 211 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug441,igc_get_hw_dev(hw),(char *)"NVM Write Error while updating checksum.\n");
    }
  }
  #line 213 
  out: 
       #line 213 
  ;
  #line 214 
  return ret_val;
}

#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 18 
void *memset(void *, int, size_t);
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delay.h"
#line 61 
void usleep_range(unsigned long, unsigned long);
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_phy.h"
#line 9 
s32 igc_check_reset_block(struct igc_hw *hw);
#line 12 
#line 12 
s32 igc_phy_has_link(struct igc_hw *hw, u32 iterations, u32 usec_interval, bool *success);
#line 14 
#line 14 
s32 igc_check_downshift(struct igc_hw *hw);
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_mac.h"
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_mac.c"
s32 igc_disable_pcie_master(struct igc_hw *hw);
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_mac.h"
#line 367  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_mac.c"
s32 igc_check_for_copper_link(struct igc_hw *hw);
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_mac.h"
#line 459  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_mac.c"
s32 igc_config_fc_after_link_up(struct igc_hw *hw);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_mac.h"
#line 176  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_mac.c"
s32 igc_force_mac_fc(struct igc_hw *hw);
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_mac.h"
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_mac.c"
void igc_init_rx_addrs(struct igc_hw *hw, u16 rar_count);
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_mac.h"
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_mac.c"
s32 igc_setup_link(struct igc_hw *hw);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_mac.h"
#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_mac.c"
void igc_clear_hw_cntrs_base(struct igc_hw *hw);
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_mac.h"
#line 659  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_mac.c"
s32 igc_get_auto_rd_done(struct igc_hw *hw);
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_mac.h"
#line 734  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_mac.c"
void igc_put_hw_semaphore(struct igc_hw *hw);
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_mac.h"
#line 332  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_mac.c"
void igc_rar_set(struct igc_hw *hw, u8 *addr, u32 index);
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_mac.h"
#line 436  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_mac.c"
void igc_config_collision_dist(struct igc_hw *hw);
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_mac.h"
#line 690  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_mac.c"
s32 igc_get_speed_and_duplex_copper(struct igc_hw *hw, u16 *speed, u16 *duplex);
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_mac.h"
#line 752  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_mac.c"
bool igc_enable_mng_pass_thru(struct igc_hw *hw);
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_mac.h"
#line 866  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_mac.c"
void igc_update_mc_addr_list(struct igc_hw *hw, u8 *mc_addr_list, u32 mc_addr_count);
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_mac.c"
s32 igc_disable_pcie_master(struct igc_hw *hw)
{
  #line 25 
  u32 ctrl;
  #line 23 
  s32 timeout = 800;
  #line 24 
  s32 ret_val = 0;
  #line 27 
  ctrl = igc_rd32(hw,0U);
  #line 28 
  ctrl |= 4U;
  {
    #line 30 
    union __anonunion___u_1406 __u;
    #line 29 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 29 
    u8 *hw_addr = (__u.__val);
    #line 29 
    writel(ctrl,(void *)hw_addr);
  }
  #line 31 
  while (timeout != 0) {
    #line 32 
    if ((igc_rd32(hw,8U) & 524288U) == 0U) 
                                           #line 34 
                                           break;
    #line 35 
    usleep_range(2000UL,3000UL);
    #line 36 
    timeout --;
  }
  #line 39 
  if (timeout == 0) {
    {
      #line 40 
      bool branch;
      #line 40 
      struct _ddebug __UNIQUE_ID_ddebug436 = {.modname = (char *)"igc", .function = (char *)"igc_disable_pcie_master", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_mac.c", .format = (char *)"Master requests are pending.\n", .lineno = (unsigned int)40U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 40 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug436.key.dd_key_false.key,(_Bool)0);
      #line 40 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 40 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug436,igc_get_hw_dev(hw),(char *)"Master requests are pending.\n");
      }
    }
    #line 41 
    ret_val = -10;
    #line 42 
    goto out;
  }
  #line 45 
  out: 
       #line 45 
  ;
  #line 46 
  return ret_val;
}

#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_mac.c"
void igc_init_rx_addrs(struct igc_hw *hw, u16 rar_count)
{
  #line 61 
  u32 i;
  #line 60 
  u8 mac_addr[6U] = {(unsigned char)0U};
  {
    #line 64 
    bool branch;
    #line 64 
    struct _ddebug __UNIQUE_ID_ddebug437 = {.modname = (char *)"igc", .function = (char *)"igc_init_rx_addrs", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_mac.c", .format = (char *)"Programming MAC Address into RAR[0]\n", .lineno = (unsigned int)64U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 64 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug437.key.dd_key_false.key,(_Bool)0);
    #line 64 
    if ((long)((long)((int)branch != 0)) != 0L) {
      #line 64 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug437,igc_get_hw_dev(hw),(char *)"Programming MAC Address into RAR[0]\n");
    }
  }
  #line 66 
  (*(hw->mac.ops.rar_set))(hw,(u8 *)(& hw->mac.addr),0U);
  {
    #line 69 
    bool branch_0;
    #line 69 
    struct _ddebug __UNIQUE_ID_ddebug438 = {.modname = (char *)"igc", .function = (char *)"igc_init_rx_addrs", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_mac.c", .format = (char *)"Clearing RAR[1-%u]\n", .lineno = (unsigned int)69U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 69 
    branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug438.key.dd_key_false.key,(_Bool)0);
    #line 69 
    if ((long)((long)((int)branch_0 != 0)) != 0L) {
      #line 69 
      ;
      #line 69 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug438,igc_get_hw_dev(hw),(char *)"Clearing RAR[1-%u]\n",(int)rar_count + -1);
    }
  }
  #line 70 
  i = 1U;
  #line 70 
  while ((unsigned int)rar_count > i) {
    #line 71 
    (*(hw->mac.ops.rar_set))(hw,(u8 *)(& mac_addr),i);
    #line 70 
    i ++;
  }
  #line 72 
  return;
}

#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_mac.c"
static s32 igc_set_fc_watermarks(struct igc_hw *hw)
{
  #line 84 
  u32 fcrtl = 0U;
  #line 84 
  u32 fcrth = 0U;
  #line 92 
  if (((unsigned int)hw->fc.current_mode & 2U) != 0U) {
    #line 97 
    fcrtl = hw->fc.low_water;
    #line 98 
    if ((int)hw->fc.send_xon != 0) 
                                   #line 99 
                                   fcrtl |= 2147483648U;
    #line 101 
    fcrth = hw->fc.high_water;
  }
  {
    #line 104 
    union __anonunion___u_1408 __u;
    #line 103 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 103 
    u8 *hw_addr = (__u.__val);
    #line 103 
    writel(fcrtl,(void *)(hw_addr + 8544U));
  }
  {
    #line 105 
    union __anonunion___u_1410 __u_0;
    #line 104 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
    #line 104 
    u8 *hw_addr_0 = (__u_0.__val);
    #line 104 
    writel(fcrth,(void *)(hw_addr_0 + 8552U));
  }
  #line 106 
  return 0;
}

#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_mac.c"
s32 igc_setup_link(struct igc_hw *hw)
{
  #line 121 
  s32 ret_val = 0;
  #line 126 
  if (igc_check_reset_block(hw) != 0) 
                                      #line 127 
                                      goto out;
  #line 132 
  if (hw->fc.requested_mode == (unsigned int)igc_fc_default) 
                                                             #line 133 
                                                             hw->fc.requested_mode = igc_fc_full;
  #line 139 
  hw->fc.current_mode = hw->fc.requested_mode;
  {
    #line 141 
    bool branch;
    #line 141 
    struct _ddebug __UNIQUE_ID_ddebug439 = {.modname = (char *)"igc", .function = (char *)"igc_setup_link", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_mac.c", .format = (char *)"After fix-ups FlowControl is now = %x\n", .lineno = (unsigned int)141U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 141 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug439.key.dd_key_false.key,(_Bool)0);
    #line 141 
    if ((long)((long)((int)branch != 0)) != 0L) {
      #line 141 
      ;
      #line 141 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug439,igc_get_hw_dev(hw),(char *)"After fix-ups FlowControl is now = %x\n",(unsigned int)hw->fc.current_mode);
    }
  }
  #line 144 
  ret_val = (*(hw->mac.ops.setup_physical_interface))(hw);
  #line 145 
  if (ret_val != 0) 
                    #line 146 
                    goto out;
  {
    #line 153 
    bool branch_0;
    #line 153 
    struct _ddebug __UNIQUE_ID_ddebug440 = {.modname = (char *)"igc", .function = (char *)"igc_setup_link", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_mac.c", .format = (char *)"Initializing the Flow Control address, type and timer regs\n", .lineno = (unsigned int)153U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 153 
    branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug440.key.dd_key_false.key,(_Bool)0);
    #line 153 
    if ((long)((long)((int)branch_0 != 0)) != 0L) {
      #line 153 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug440,igc_get_hw_dev(hw),(char *)"Initializing the Flow Control address, type and timer regs\n");
    }
  }
  {
    #line 155 
    union __anonunion___u_1412 __u;
    #line 154 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 154 
    u8 *hw_addr = (__u.__val);
    #line 154 
    writel(34824U,(void *)(hw_addr + 48U));
  }
  {
    #line 156 
    union __anonunion___u_1414 __u_0;
    #line 155 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
    #line 155 
    u8 *hw_addr_0 = (__u_0.__val);
    #line 155 
    writel(256U,(void *)(hw_addr_0 + 44U));
  }
  {
    #line 157 
    union __anonunion___u_1416 __u_1;
    #line 156 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_1.__c),8);
    #line 156 
    u8 *hw_addr_1 = (__u_1.__val);
    #line 156 
    writel(12746753U,(void *)(hw_addr_1 + 40U));
  }
  {
    #line 159 
    union __anonunion___u_1418 __u_2;
    #line 158 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_2.__c),8);
    #line 158 
    u8 *hw_addr_2 = (__u_2.__val);
    #line 158 
    writel((unsigned int)hw->fc.pause_time,(void *)(hw_addr_2 + 368U));
  }
  #line 160 
  ret_val = igc_set_fc_watermarks(hw);
  #line 162 
  out: 
       #line 162 
  ;
  #line 163 
  return ret_val;
}

#line 176  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_mac.c"
s32 igc_force_mac_fc(struct igc_hw *hw)
{
  #line 179 
  u32 ctrl;
  #line 178 
  s32 ret_val = 0;
  #line 181 
  ctrl = igc_rd32(hw,0U);
  {
    #line 200 
    bool branch;
    #line 200 
    struct _ddebug __UNIQUE_ID_ddebug441 = {.modname = (char *)"igc", .function = (char *)"igc_force_mac_fc", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_mac.c", .format = (char *)"hw->fc.current_mode = %u\n", .lineno = (unsigned int)200U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 200 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug441.key.dd_key_false.key,(_Bool)0);
    #line 200 
    if ((long)((long)((int)branch != 0)) != 0L) {
      #line 200 
      ;
      #line 200 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug441,igc_get_hw_dev(hw),(char *)"hw->fc.current_mode = %u\n",(unsigned int)hw->fc.current_mode);
    }
  }
  #line 202 
  switch ((unsigned int)hw->fc.current_mode) {
    #line 203 
    case (unsigned int)0: 
                          #line 203 
    ;
    #line 204 
    ctrl &= 3892314111U;
    #line 205 
    break;
    #line 206 
    case (unsigned int)1: 
                          #line 206 
    ;
    #line 207 
    ctrl &= 4026531839U;
    #line 208 
    ctrl |= 134217728U;
    #line 209 
    break;
    #line 210 
    case (unsigned int)2: 
                          #line 210 
    ;
    #line 211 
    ctrl &= 4160749567U;
    #line 212 
    ctrl |= 268435456U;
    #line 213 
    break;
    #line 214 
    case (unsigned int)3: 
                          #line 214 
    ;
    #line 215 
    ctrl |= 402653184U;
    #line 216 
    break;
    #line 217 
    default: 
             #line 217 
    ;
    {
      #line 218 
      bool branch_0;
      #line 218 
      struct _ddebug __UNIQUE_ID_ddebug442 = {.modname = (char *)"igc", .function = (char *)"igc_force_mac_fc", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_mac.c", .format = (char *)"Flow control param set incorrectly\n", .lineno = (unsigned int)218U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 218 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug442.key.dd_key_false.key,(_Bool)0);
      #line 218 
      if ((long)((long)((int)branch_0 != 0)) != 0L) {
        #line 218 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug442,igc_get_hw_dev(hw),(char *)"Flow control param set incorrectly\n");
      }
    }
    #line 219 
    ret_val = -3;
    #line 220 
    goto out;
  }
  {
    #line 224 
    union __anonunion___u_1420 __u;
    #line 223 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 223 
    u8 *hw_addr = (__u.__val);
    #line 223 
    writel(ctrl,(void *)hw_addr);
  }
  #line 225 
  out: 
       #line 225 
  ;
  #line 226 
  return ret_val;
}

#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_mac.c"
void igc_clear_hw_cntrs_base(struct igc_hw *hw)
{
  #line 237 
  igc_rd32(hw,16384U);
  #line 238 
  igc_rd32(hw,16392U);
  #line 239 
  igc_rd32(hw,16400U);
  #line 240 
  igc_rd32(hw,16404U);
  #line 241 
  igc_rd32(hw,16408U);
  #line 242 
  igc_rd32(hw,16412U);
  #line 243 
  igc_rd32(hw,16416U);
  #line 244 
  igc_rd32(hw,16424U);
  #line 245 
  igc_rd32(hw,16432U);
  #line 246 
  igc_rd32(hw,16440U);
  #line 247 
  igc_rd32(hw,16448U);
  #line 248 
  igc_rd32(hw,16456U);
  #line 249 
  igc_rd32(hw,16460U);
  #line 250 
  igc_rd32(hw,16464U);
  #line 251 
  igc_rd32(hw,16468U);
  #line 252 
  igc_rd32(hw,16472U);
  #line 253 
  igc_rd32(hw,16500U);
  #line 254 
  igc_rd32(hw,16504U);
  #line 255 
  igc_rd32(hw,16508U);
  #line 256 
  igc_rd32(hw,16512U);
  #line 257 
  igc_rd32(hw,16520U);
  #line 258 
  igc_rd32(hw,16524U);
  #line 259 
  igc_rd32(hw,16528U);
  #line 260 
  igc_rd32(hw,16532U);
  #line 261 
  igc_rd32(hw,16544U);
  #line 262 
  igc_rd32(hw,16548U);
  #line 263 
  igc_rd32(hw,16552U);
  #line 264 
  igc_rd32(hw,16556U);
  #line 265 
  igc_rd32(hw,16560U);
  #line 266 
  igc_rd32(hw,16576U);
  #line 267 
  igc_rd32(hw,16580U);
  #line 268 
  igc_rd32(hw,16584U);
  #line 269 
  igc_rd32(hw,16588U);
  #line 270 
  igc_rd32(hw,16592U);
  #line 271 
  igc_rd32(hw,16596U);
  #line 272 
  igc_rd32(hw,16624U);
  #line 273 
  igc_rd32(hw,16628U);
  #line 275 
  igc_rd32(hw,16476U);
  #line 276 
  igc_rd32(hw,16480U);
  #line 277 
  igc_rd32(hw,16484U);
  #line 278 
  igc_rd32(hw,16488U);
  #line 279 
  igc_rd32(hw,16492U);
  #line 280 
  igc_rd32(hw,16496U);
  #line 281 
  igc_rd32(hw,16600U);
  #line 282 
  igc_rd32(hw,16604U);
  #line 283 
  igc_rd32(hw,16608U);
  #line 284 
  igc_rd32(hw,16612U);
  #line 285 
  igc_rd32(hw,16616U);
  #line 286 
  igc_rd32(hw,16620U);
  #line 288 
  igc_rd32(hw,16388U);
  #line 289 
  igc_rd32(hw,16396U);
  #line 290 
  igc_rd32(hw,16436U);
  #line 291 
  igc_rd32(hw,16444U);
  #line 292 
  igc_rd32(hw,16632U);
  #line 293 
  igc_rd32(hw,16636U);
  #line 295 
  igc_rd32(hw,16564U);
  #line 296 
  igc_rd32(hw,16568U);
  #line 297 
  igc_rd32(hw,16572U);
  #line 299 
  igc_rd32(hw,16640U);
  #line 300 
  igc_rd32(hw,16676U);
  #line 302 
  igc_rd32(hw,16644U);
  #line 303 
  igc_rd32(hw,16648U);
  #line 304 
  igc_rd32(hw,16652U);
  #line 305 
  igc_rd32(hw,16656U);
  #line 306 
  igc_rd32(hw,16664U);
  #line 307 
  igc_rd32(hw,16668U);
  #line 308 
  igc_rd32(hw,16672U);
  #line 310 
  igc_rd32(hw,16428U);
  #line 311 
  igc_rd32(hw,16444U);
  #line 312 
  igc_rd32(hw,16636U);
  #line 313 
  igc_rd32(hw,16644U);
  #line 314 
  igc_rd32(hw,16664U);
  #line 315 
  igc_rd32(hw,16676U);
  #line 316 
  igc_rd32(hw,16680U);
  #line 317 
  igc_rd32(hw,16684U);
  #line 318 
  igc_rd32(hw,16688U);
  #line 319 
  igc_rd32(hw,16692U);
  #line 320 
  igc_rd32(hw,16696U);
  #line 321 
  return;
}

#line 332  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_mac.c"
void igc_rar_set(struct igc_hw *hw, u8 *addr, u32 index)
{
  #line 334 
  u32 rar_low;
  #line 334 
  u32 rar_high;
  #line 339 
  rar_low = (((unsigned int)*addr | ((unsigned int)*(addr + 1U) << 8)) | ((unsigned int)*(addr + 2U) << 16)) | ((unsigned int)*(addr + 3U) << 24);
  #line 343 
  rar_high = (unsigned int)*(addr + 4U) | ((unsigned int)*(addr + 5U) << 8);
  #line 346 
  if (rar_low != 0U || rar_high != 0U) 
                                       #line 347 
                                       rar_high |= 2147483648U;
  {
    #line 354 
    union __anonunion___u_1422 __u;
    #line 353 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 353 
    u8 *hw_addr = (__u.__val);
    #line 353 
    writel(rar_low,(void *)(hw_addr + (unsigned long)((index + 2688U) * 8U)));
  }
  #line 354 
  igc_rd32(hw,8U);
  {
    #line 356 
    union __anonunion___u_1424 __u_0;
    #line 355 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
    #line 355 
    u8 *hw_addr_0 = (__u_0.__val);
    #line 355 
    writel(rar_high,(void *)(hw_addr_0 + (unsigned long)(index * 8U + 21508U)));
  }
  #line 356 
  igc_rd32(hw,8U);
  #line 357 
  return;
}

#line 367  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_mac.c"
s32 igc_check_for_copper_link(struct igc_hw *hw)
{
  #line 370 
  s32 ret_val;
  #line 371 
  bool link;
  #line 369 
  struct igc_mac_info *mac = & hw->mac;
  #line 378 
  if (! mac->get_link_status) {
    #line 379 
    ret_val = 0;
    #line 380 
    goto out;
  }
  #line 387 
  ret_val = igc_phy_has_link(hw,1U,0U,& link);
  #line 388 
  if (ret_val != 0) 
                    #line 389 
                    goto out;
  #line 391 
  if (! link) 
              #line 392 
              goto out;
  #line 394 
  mac->get_link_status = (_Bool)0;
  #line 399 
  igc_check_downshift(hw);
  #line 404 
  if (! mac->autoneg) {
    #line 405 
    ret_val = -3;
    #line 406 
    goto out;
  }
  #line 413 
  igc_config_collision_dist(hw);
  #line 420 
  ret_val = igc_config_fc_after_link_up(hw);
  #line 421 
  if (ret_val != 0) {
    #line 422 
    bool branch;
    #line 422 
    struct _ddebug __UNIQUE_ID_ddebug443 = {.modname = (char *)"igc", .function = (char *)"igc_check_for_copper_link", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_mac.c", .format = (char *)"Error configuring flow control\n", .lineno = (unsigned int)422U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 422 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug443.key.dd_key_false.key,(_Bool)0);
    #line 422 
    if ((long)((long)((int)branch != 0)) != 0L) {
      #line 422 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug443,igc_get_hw_dev(hw),(char *)"Error configuring flow control\n");
    }
  }
  #line 424 
  out: 
       #line 424 
  ;
  #line 425 
  return ret_val;
}

#line 436  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_mac.c"
void igc_config_collision_dist(struct igc_hw *hw)
{
  #line 438 
  u32 tctl;
  #line 440 
  tctl = igc_rd32(hw,1024U);
  #line 442 
  tctl &= 4290777087U;
  #line 443 
  tctl |= 258048U;
  {
    #line 446 
    union __anonunion___u_1426 __u;
    #line 445 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 445 
    u8 *hw_addr = (__u.__val);
    #line 445 
    writel(tctl,(void *)(hw_addr + 1024U));
  }
  #line 446 
  igc_rd32(hw,8U);
  #line 447 
  return;
}

#line 459  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_mac.c"
s32 igc_config_fc_after_link_up(struct igc_hw *hw)
{
  #line 461 
  u16 mii_status_reg;
  #line 461 
  u16 mii_nway_adv_reg;
  #line 461 
  u16 mii_nway_lp_ability_reg;
  #line 463 
  u16 speed;
  #line 463 
  u16 duplex;
  #line 462 
  struct igc_mac_info *mac = & hw->mac;
  #line 464 
  s32 ret_val = 0;
  #line 470 
  if ((int)mac->autoneg_failed != 0) 
    #line 471 
    if (hw->phy.media_type == (unsigned int)igc_media_type_copper) 
                                                                   #line 472 
                                                                   ret_val = igc_force_mac_fc(hw);
  #line 475 
  if (ret_val != 0) {
    {
      #line 476 
      bool branch;
      #line 476 
      struct _ddebug __UNIQUE_ID_ddebug444 = {.modname = (char *)"igc", .function = (char *)"igc_config_fc_after_link_up", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_mac.c", .format = (char *)"Error forcing flow control settings\n", .lineno = (unsigned int)476U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 476 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug444.key.dd_key_false.key,(_Bool)0);
      #line 476 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 476 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug444,igc_get_hw_dev(hw),(char *)"Error forcing flow control settings\n");
      }
    }
    #line 477 
    goto out;
  }
  #line 485 
  if (hw->phy.media_type == (unsigned int)igc_media_type_copper && (int)mac->autoneg != 0) {
    #line 490 
    ret_val = (*(hw->phy.ops.read_reg))(hw,1U,& mii_status_reg);
    #line 492 
    if (ret_val != 0) 
                      #line 493 
                      goto out;
    #line 494 
    ret_val = (*(hw->phy.ops.read_reg))(hw,1U,& mii_status_reg);
    #line 496 
    if (ret_val != 0) 
                      #line 497 
                      goto out;
    #line 499 
    if (((int)mii_status_reg & 32) == 0) {
      {
        #line 500 
        bool branch_0;
        #line 500 
        struct _ddebug __UNIQUE_ID_ddebug445 = {.modname = (char *)"igc", .function = (char *)"igc_config_fc_after_link_up", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_mac.c", .format = (char *)"Copper PHY and Auto Neg has not completed.\n", .lineno = (unsigned int)500U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 500 
        branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug445.key.dd_key_false.key,(_Bool)0);
        #line 500 
        if ((long)((long)((int)branch_0 != 0)) != 0L) {
          #line 500 
          __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug445,igc_get_hw_dev(hw),(char *)"Copper PHY and Auto Neg has not completed.\n");
        }
      }
      #line 501 
      goto out;
    }
    #line 510 
    ret_val = (*(hw->phy.ops.read_reg))(hw,4U,& mii_nway_adv_reg);
    #line 512 
    if (ret_val != 0) 
                      #line 513 
                      goto out;
    #line 514 
    ret_val = (*(hw->phy.ops.read_reg))(hw,5U,& mii_nway_lp_ability_reg);
    #line 516 
    if (ret_val != 0) 
                      #line 517 
                      goto out;
    #line 551 
    if (((int)mii_nway_adv_reg & 1024) != 0 && ((int)mii_nway_lp_ability_reg & 1024) != 0) 
      #line 559 
      if (hw->fc.requested_mode == (unsigned int)igc_fc_full) {
        #line 560 
        hw->fc.current_mode = igc_fc_full;
        {
          #line 561 
          bool branch_1;
          #line 561 
          struct _ddebug __UNIQUE_ID_ddebug446 = {.modname = (char *)"igc", .function = (char *)"igc_config_fc_after_link_up", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_mac.c", .format = (char *)"Flow Control = FULL.\n", .lineno = (unsigned int)561U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
          #line 561 
          branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug446.key.dd_key_false.key,(_Bool)0);
          #line 561 
          if ((long)((long)((int)branch_1 != 0)) != 0L) {
            #line 561 
            __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug446,igc_get_hw_dev(hw),(char *)"Flow Control = FULL.\n");
          }
        }
      }
      else {
        #line 563 
        hw->fc.current_mode = igc_fc_rx_pause;
        {
          #line 564 
          bool branch_2;
          #line 564 
          struct _ddebug __UNIQUE_ID_ddebug447 = {.modname = (char *)"igc", .function = (char *)"igc_config_fc_after_link_up", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_mac.c", .format = (char *)"Flow Control = RX PAUSE frames only.\n", .lineno = (unsigned int)564U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
          #line 564 
          branch_2 = arch_static_branch(& __UNIQUE_ID_ddebug447.key.dd_key_false.key,(_Bool)0);
          #line 564 
          if ((long)((long)((int)branch_2 != 0)) != 0L) {
            #line 564 
            __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug447,igc_get_hw_dev(hw),(char *)"Flow Control = RX PAUSE frames only.\n");
          }
        }
      }
    else 
      #line 575 
      if (((((int)mii_nway_adv_reg & 1024) == 0 && ((int)mii_nway_adv_reg & 2048) != 0) && ((int)mii_nway_lp_ability_reg & 1024) != 0) && ((int)mii_nway_lp_ability_reg & 2048) != 0) {
        #line 579 
        hw->fc.current_mode = igc_fc_tx_pause;
        {
          #line 580 
          bool branch_3;
          #line 580 
          struct _ddebug __UNIQUE_ID_ddebug448 = {.modname = (char *)"igc", .function = (char *)"igc_config_fc_after_link_up", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_mac.c", .format = (char *)"Flow Control = TX PAUSE frames only.\n", .lineno = (unsigned int)580U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
          #line 580 
          branch_3 = arch_static_branch(& __UNIQUE_ID_ddebug448.key.dd_key_false.key,(_Bool)0);
          #line 580 
          if ((long)((long)((int)branch_3 != 0)) != 0L) {
            #line 580 
            __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug448,igc_get_hw_dev(hw),(char *)"Flow Control = TX PAUSE frames only.\n");
          }
        }
      }
      else 
        #line 589 
        if (((((int)mii_nway_adv_reg & 1024) != 0 && ((int)mii_nway_adv_reg & 2048) != 0) && ((int)mii_nway_lp_ability_reg & 1024) == 0) && ((int)mii_nway_lp_ability_reg & 2048) != 0) {
          #line 593 
          hw->fc.current_mode = igc_fc_rx_pause;
          {
            #line 594 
            bool branch_4;
            #line 594 
            struct _ddebug __UNIQUE_ID_ddebug449 = {.modname = (char *)"igc", .function = (char *)"igc_config_fc_after_link_up", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_mac.c", .format = (char *)"Flow Control = RX PAUSE frames only.\n", .lineno = (unsigned int)594U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
            #line 594 
            branch_4 = arch_static_branch(& __UNIQUE_ID_ddebug449.key.dd_key_false.key,(_Bool)0);
            #line 594 
            if ((long)((long)((int)branch_4 != 0)) != 0L) {
              #line 594 
              __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug449,igc_get_hw_dev(hw),(char *)"Flow Control = RX PAUSE frames only.\n");
            }
          }
        }
        else 
          #line 616 
          if ((hw->fc.requested_mode == (unsigned int)igc_fc_none || hw->fc.requested_mode == (unsigned int)igc_fc_tx_pause) || (int)hw->fc.strict_ieee != 0) {
            #line 619 
            hw->fc.current_mode = igc_fc_none;
            {
              #line 620 
              bool branch_5;
              #line 620 
              struct _ddebug __UNIQUE_ID_ddebug450 = {.modname = (char *)"igc", .function = (char *)"igc_config_fc_after_link_up", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_mac.c", .format = (char *)"Flow Control = NONE.\n", .lineno = (unsigned int)620U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
              #line 620 
              branch_5 = arch_static_branch(& __UNIQUE_ID_ddebug450.key.dd_key_false.key,(_Bool)0);
              #line 620 
              if ((long)((long)((int)branch_5 != 0)) != 0L) {
                #line 620 
                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug450,igc_get_hw_dev(hw),(char *)"Flow Control = NONE.\n");
              }
            }
          }
          else {
            #line 622 
            hw->fc.current_mode = igc_fc_rx_pause;
            {
              #line 623 
              bool branch_6;
              #line 623 
              struct _ddebug __UNIQUE_ID_ddebug451 = {.modname = (char *)"igc", .function = (char *)"igc_config_fc_after_link_up", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_mac.c", .format = (char *)"Flow Control = RX PAUSE frames only.\n", .lineno = (unsigned int)623U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
              #line 623 
              branch_6 = arch_static_branch(& __UNIQUE_ID_ddebug451.key.dd_key_false.key,(_Bool)0);
              #line 623 
              if ((long)((long)((int)branch_6 != 0)) != 0L) {
                #line 623 
                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug451,igc_get_hw_dev(hw),(char *)"Flow Control = RX PAUSE frames only.\n");
              }
            }
          }
    #line 630 
    ret_val = (*(hw->mac.ops.get_speed_and_duplex))(hw,& speed,& duplex);
    #line 631 
    if (ret_val != 0) {
      {
        #line 632 
        bool branch_7;
        #line 632 
        struct _ddebug __UNIQUE_ID_ddebug452 = {.modname = (char *)"igc", .function = (char *)"igc_config_fc_after_link_up", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_mac.c", .format = (char *)"Error getting link speed and duplex\n", .lineno = (unsigned int)632U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 632 
        branch_7 = arch_static_branch(& __UNIQUE_ID_ddebug452.key.dd_key_false.key,(_Bool)0);
        #line 632 
        if ((long)((long)((int)branch_7 != 0)) != 0L) {
          #line 632 
          __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug452,igc_get_hw_dev(hw),(char *)"Error getting link speed and duplex\n");
        }
      }
      #line 633 
      goto out;
    }
    #line 636 
    if ((unsigned int)duplex == 1U) 
                                    #line 637 
                                    hw->fc.current_mode = igc_fc_none;
    #line 642 
    ret_val = igc_force_mac_fc(hw);
    #line 643 
    if (ret_val != 0) {
      {
        #line 644 
        bool branch_8;
        #line 644 
        struct _ddebug __UNIQUE_ID_ddebug453 = {.modname = (char *)"igc", .function = (char *)"igc_config_fc_after_link_up", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_mac.c", .format = (char *)"Error forcing flow control settings\n", .lineno = (unsigned int)644U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 644 
        branch_8 = arch_static_branch(& __UNIQUE_ID_ddebug453.key.dd_key_false.key,(_Bool)0);
        #line 644 
        if ((long)((long)((int)branch_8 != 0)) != 0L) {
          #line 644 
          __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug453,igc_get_hw_dev(hw),(char *)"Error forcing flow control settings\n");
        }
      }
      #line 645 
      goto out;
    }
  }
  #line 649 
  out: 
       #line 649 
  ;
  #line 650 
  return 0;
}

#line 659  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_mac.c"
s32 igc_get_auto_rd_done(struct igc_hw *hw)
{
  #line 661 
  s32 ret_val = 0;
  #line 662 
  s32 i = 0;
  #line 664 
  while (i <= 9) {
    #line 665 
    if ((igc_rd32(hw,16U) & 512U) != 0U) 
                                         #line 666 
                                         break;
    #line 667 
    usleep_range(1000UL,2000UL);
    #line 668 
    i ++;
  }
  #line 671 
  if (i == 10) {
    {
      #line 672 
      bool branch;
      #line 672 
      struct _ddebug __UNIQUE_ID_ddebug454 = {.modname = (char *)"igc", .function = (char *)"igc_get_auto_rd_done", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_mac.c", .format = (char *)"Auto read by HW from NVM has not completed.\n", .lineno = (unsigned int)672U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 672 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug454.key.dd_key_false.key,(_Bool)0);
      #line 672 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 672 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug454,igc_get_hw_dev(hw),(char *)"Auto read by HW from NVM has not completed.\n");
      }
    }
    #line 673 
    ret_val = -9;
    #line 674 
    goto out;
  }
  #line 677 
  out: 
       #line 677 
  ;
  #line 678 
  return ret_val;
}

#line 690  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_mac.c"
s32 igc_get_speed_and_duplex_copper(struct igc_hw *hw, u16 *speed, u16 *duplex)
{
  #line 693 
  u32 status;
  #line 695 
  status = igc_rd32(hw,8U);
  #line 696 
  if ((status & 128U) != 0U) 
    #line 701 
    if (hw->mac.type == (unsigned int)igc_i225 && (status & 4194304U) != 0U) {
      #line 703 
      *speed = (unsigned short)2500U;
      {
        #line 704 
        bool branch;
        #line 704 
        struct _ddebug __UNIQUE_ID_ddebug455 = {.modname = (char *)"igc", .function = (char *)"igc_get_speed_and_duplex_copper", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_mac.c", .format = (char *)"2500 Mbs, ", .lineno = (unsigned int)704U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 704 
        branch = arch_static_branch(& __UNIQUE_ID_ddebug455.key.dd_key_false.key,(_Bool)0);
        #line 704 
        if ((long)((long)((int)branch != 0)) != 0L) {
          #line 704 
          __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug455,igc_get_hw_dev(hw),(char *)"2500 Mbs, ");
        }
      }
    }
    else {
      #line 706 
      *speed = (unsigned short)1000U;
      {
        #line 707 
        bool branch_0;
        #line 707 
        struct _ddebug __UNIQUE_ID_ddebug456 = {.modname = (char *)"igc", .function = (char *)"igc_get_speed_and_duplex_copper", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_mac.c", .format = (char *)"1000 Mbs, ", .lineno = (unsigned int)707U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 707 
        branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug456.key.dd_key_false.key,(_Bool)0);
        #line 707 
        if ((long)((long)((int)branch_0 != 0)) != 0L) {
          #line 707 
          __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug456,igc_get_hw_dev(hw),(char *)"1000 Mbs, ");
        }
      }
    }
  else 
    #line 709 
    if ((status & 64U) != 0U) {
      #line 710 
      *speed = (unsigned short)100U;
      {
        #line 711 
        bool branch_1;
        #line 711 
        struct _ddebug __UNIQUE_ID_ddebug457 = {.modname = (char *)"igc", .function = (char *)"igc_get_speed_and_duplex_copper", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_mac.c", .format = (char *)"100 Mbs, ", .lineno = (unsigned int)711U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 711 
        branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug457.key.dd_key_false.key,(_Bool)0);
        #line 711 
        if ((long)((long)((int)branch_1 != 0)) != 0L) {
          #line 711 
          __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug457,igc_get_hw_dev(hw),(char *)"100 Mbs, ");
        }
      }
    }
    else {
      #line 713 
      *speed = (unsigned short)10U;
      {
        #line 714 
        bool branch_2;
        #line 714 
        struct _ddebug __UNIQUE_ID_ddebug458 = {.modname = (char *)"igc", .function = (char *)"igc_get_speed_and_duplex_copper", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_mac.c", .format = (char *)"10 Mbs, ", .lineno = (unsigned int)714U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 714 
        branch_2 = arch_static_branch(& __UNIQUE_ID_ddebug458.key.dd_key_false.key,(_Bool)0);
        #line 714 
        if ((long)((long)((int)branch_2 != 0)) != 0L) {
          #line 714 
          __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug458,igc_get_hw_dev(hw),(char *)"10 Mbs, ");
        }
      }
    }
  #line 717 
  if ((status & 1U) != 0U) {
    #line 718 
    *duplex = (unsigned short)2U;
    {
      #line 719 
      bool branch_3;
      #line 719 
      struct _ddebug __UNIQUE_ID_ddebug459 = {.modname = (char *)"igc", .function = (char *)"igc_get_speed_and_duplex_copper", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_mac.c", .format = (char *)"Full Duplex\n", .lineno = (unsigned int)719U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 719 
      branch_3 = arch_static_branch(& __UNIQUE_ID_ddebug459.key.dd_key_false.key,(_Bool)0);
      #line 719 
      if ((long)((long)((int)branch_3 != 0)) != 0L) {
        #line 719 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug459,igc_get_hw_dev(hw),(char *)"Full Duplex\n");
      }
    }
  }
  else {
    #line 721 
    *duplex = (unsigned short)1U;
    {
      #line 722 
      bool branch_4;
      #line 722 
      struct _ddebug __UNIQUE_ID_ddebug460 = {.modname = (char *)"igc", .function = (char *)"igc_get_speed_and_duplex_copper", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_mac.c", .format = (char *)"Half Duplex\n", .lineno = (unsigned int)722U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 722 
      branch_4 = arch_static_branch(& __UNIQUE_ID_ddebug460.key.dd_key_false.key,(_Bool)0);
      #line 722 
      if ((long)((long)((int)branch_4 != 0)) != 0L) {
        #line 722 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug460,igc_get_hw_dev(hw),(char *)"Half Duplex\n");
      }
    }
  }
  #line 725 
  return 0;
}

#line 734  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_mac.c"
void igc_put_hw_semaphore(struct igc_hw *hw)
{
  #line 736 
  u32 swsm;
  #line 738 
  swsm = igc_rd32(hw,23376U);
  #line 740 
  swsm &= 4294967292U;
  {
    #line 743 
    union __anonunion___u_1428 __u;
    #line 742 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 742 
    u8 *hw_addr = (__u.__val);
    #line 742 
    writel(swsm,(void *)(hw_addr + 23376U));
  }
  #line 744 
  return;
}

#line 752  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_mac.c"
bool igc_enable_mng_pass_thru(struct igc_hw *hw)
{
  #line 755 
  u32 fwsm;
  #line 755 
  u32 factps;
  #line 756 
  u32 manc;
  #line 754 
  bool ret_val = (_Bool)0;
  #line 758 
  if (! hw->mac.asf_firmware_present) 
                                      #line 759 
                                      goto out;
  #line 761 
  manc = igc_rd32(hw,22560U);
  #line 763 
  if ((manc & 131072U) == 0U) 
                              #line 764 
                              goto out;
  #line 766 
  if ((int)hw->mac.arc_subsystem_valid != 0) {
    #line 767 
    fwsm = igc_rd32(hw,23380U);
    #line 768 
    factps = igc_rd32(hw,23344U);
    #line 770 
    if ((factps & 536870912U) == 0U && (fwsm & 14U) == 4U) {
      #line 773 
      ret_val = (_Bool)1;
      #line 774 
      goto out;
    }
  }
  else 
    #line 777 
    if ((manc & 1U) != 0U && (manc & 2U) == 0U) {
      #line 779 
      ret_val = (_Bool)1;
      #line 780 
      goto out;
    }
  #line 784 
  out: 
       #line 784 
  ;
  #line 785 
  return ret_val;
}

#line 797  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_mac.c"
static u32 igc_hash_mc_addr(struct igc_hw *hw, u8 *mc_addr)
{
  #line 799 
  u32 hash_value;
  #line 799 
  u32 hash_mask;
  #line 800 
  u8 bit_shift = (unsigned char)0U;
  #line 803 
  hash_mask = (unsigned int)((int)hw->mac.mta_reg_count * 32 + -1);
  #line 808 
  while (hash_mask >> (int)bit_shift != 255U) 
                                              #line 809 
                                              bit_shift = (u8)((int)bit_shift + 1);
  #line 836 
  switch (hw->mac.mc_filter_type) {
    #line 837 
    default: 
             #line 837 
    ;
    #line 838 
    case (u32)0: 
                 #line 838 
    ;
    #line 839 
    break;
    #line 840 
    case (u32)1: 
                 #line 840 
    ;
    #line 841 
    bit_shift = (unsigned char)((unsigned int)bit_shift + 1U);
    #line 842 
    break;
    #line 843 
    case (u32)2: 
                 #line 843 
    ;
    #line 844 
    bit_shift = (unsigned char)((unsigned int)bit_shift + 2U);
    #line 845 
    break;
    #line 846 
    case (u32)3: 
                 #line 846 
    ;
    #line 847 
    bit_shift = (unsigned char)((unsigned int)bit_shift + 4U);
    #line 848 
    break;
  }
  #line 851 
  hash_value = (unsigned int)(((int)*(mc_addr + 4U) >> (8 - (int)bit_shift)) | ((int)*(mc_addr + 5U) << (int)bit_shift)) & hash_mask;
  #line 854 
  return hash_value;
}

#line 866  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_mac.c"
void igc_update_mc_addr_list(struct igc_hw *hw, u8 *mc_addr_list, u32 mc_addr_count)
{
  #line 869 
  u32 hash_value;
  #line 869 
  u32 hash_bit;
  #line 869 
  u32 hash_reg;
  #line 870 
  int i;
  #line 873 
  memset((void *)(& hw->mac.mta_shadow),0,512UL);
  #line 876 
  i = 0;
  #line 876 
  while ((unsigned int)i < mc_addr_count) {
    #line 877 
    hash_value = igc_hash_mc_addr(hw,mc_addr_list);
    #line 879 
    hash_reg = (hash_value >> 5) & (unsigned int)((int)hw->mac.mta_reg_count + -1);
    #line 880 
    hash_bit = hash_value & 31U;
    #line 882 
    hw->mac.mta_shadow[hash_reg] |= (unsigned int)(1UL << hash_bit);
    #line 883 
    mc_addr_list += 6U;
    #line 876 
    i ++;
  }
  #line 887 
  i = (int)hw->mac.mta_reg_count + -1;
  #line 887 
  while (i >= 0) {
    {
      #line 889 
      union __anonunion___u_1430 __u;
      #line 888 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
      #line 888 
      u8 *hw_addr = (__u.__val);
      #line 888 
      writel(hw->mac.mta_shadow[i],(void *)(hw_addr + (unsigned long)((i << 2) + 20992)));
    }
    #line 887 
    i --;
  }
  #line 889 
  igc_rd32(hw,8U);
  #line 890 
  return;
}

#line 6  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/delay.h"
#line 6 
void __bad_udelay(void);
#line 9 
#line 9 
void __udelay(unsigned long);
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delay.h"
#line 59 
void msleep(unsigned int);
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_phy.h"
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_phy.c"
s32 igc_phy_hw_reset(struct igc_hw *hw);
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_phy.h"
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_phy.c"
s32 igc_get_phy_id(struct igc_hw *hw);
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_phy.h"
#line 493  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_phy.c"
s32 igc_setup_copper_link(struct igc_hw *hw);
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_phy.h"
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_phy.c"
void igc_power_up_phy_copper(struct igc_hw *hw);
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_phy.h"
#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_phy.c"
void igc_power_down_phy_copper(struct igc_hw *hw);
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_phy.h"
#line 725  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_phy.c"
s32 igc_write_phy_reg_gpy(struct igc_hw *hw, u32 offset, u16 data);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_phy.h"
#line 758  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_phy.c"
s32 igc_read_phy_reg_gpy(struct igc_hw *hw, u32 offset, u16 *data);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_phy.c"
s32 igc_check_reset_block(struct igc_hw *hw)
{
  #line 16 
  u32 manc;
  #line 21 
  int tmp;
  #line 18 
  manc = igc_rd32(hw,22560U);
  #line 21 
  if ((manc & 262144U) != 0U) 
                              #line 21 
                              tmp = 12; else 
                                             #line 21 
                                             tmp = 0;
  #line 21 
  return tmp;
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_phy.c"
s32 igc_get_phy_id(struct igc_hw *hw)
{
  #line 35 
  u16 phy_id;
  #line 33 
  struct igc_phy_info *phy = & hw->phy;
  #line 34 
  s32 ret_val = 0;
  #line 37 
  ret_val = (*(phy->ops.read_reg))(hw,2U,& phy_id);
  #line 38 
  if (ret_val != 0) 
                    #line 39 
                    goto out;
  #line 41 
  phy->id = (unsigned int)((int)phy_id << 16);
  #line 42 
  usleep_range(200UL,500UL);
  #line 43 
  ret_val = (*(phy->ops.read_reg))(hw,3U,& phy_id);
  #line 44 
  if (ret_val != 0) 
                    #line 45 
                    goto out;
  #line 47 
  phy->id |= (unsigned int)phy_id & 4294967280U;
  #line 48 
  phy->revision = (unsigned int)phy_id & 15U;
  #line 50 
  out: 
       #line 50 
  ;
  #line 51 
  return ret_val;
}

#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_phy.c"
s32 igc_phy_has_link(struct igc_hw *hw, u32 iterations, u32 usec_interval, bool *success)
{
  #line 66 
  u16 i;
  #line 66 
  u16 phy_status;
  #line 67 
  s32 ret_val = 0;
  #line 69 
  i = (unsigned short)0U;
  #line 69 
  while ((unsigned int)i < iterations) {
    #line 74 
    ret_val = (*(hw->phy.ops.read_reg))(hw,1U,& phy_status);
    #line 75 
    if (ret_val != 0 && usec_interval != 0U) 
      #line 80 
      if (usec_interval > 999U) 
        #line 81 
        if (0 != 0 && usec_interval <= 5999U) 
          #line 81 
          if (0 != 0) 
            #line 81 
            if ((usec_interval / 1000U) * 1000U > 19999U) 
                                                          #line 81 
                                                          __bad_udelay(); else 
                                                                    #line 81 
                                                                    __const_udelay((unsigned long)((usec_interval / 1000U) * 1000U) * 4295UL);
          else 
               #line 81 
               __udelay((unsigned long)((usec_interval / 1000U) * 1000U));
        else {
          #line 81 
          unsigned long __ms = (unsigned long)(usec_interval / 1000U);
          #line 81 
          while (1) {
            #line 81 
            unsigned long tmp;
            #line 81 
            tmp = __ms;
            #line 81 
            __ms --;
            #line 81 
            ;
            #line 81 
            if (! (tmp != 0UL)) 
                                #line 81 
                                break;
            #line 81 
            __const_udelay(4295000UL);
          }
        }
      else 
        #line 83 
        if (0 != 0) 
          #line 83 
          if (usec_interval > 19999U) 
                                      #line 83 
                                      __bad_udelay(); else 
                                                           #line 83 
                                                           __const_udelay((unsigned long)usec_interval * 4295UL);
        else 
             #line 83 
             __udelay((unsigned long)usec_interval);
    #line 85 
    ret_val = (*(hw->phy.ops.read_reg))(hw,1U,& phy_status);
    #line 86 
    if (ret_val != 0) 
                      #line 87 
                      break;
    #line 88 
    if (((int)phy_status & 4) != 0) 
                                    #line 89 
                                    break;
    #line 90 
    if (usec_interval > 999U) 
      #line 91 
      if (0 != 0 && usec_interval <= 5999U) 
        #line 91 
        if (0 != 0) 
          #line 91 
          if ((usec_interval / 1000U) * 1000U > 19999U) 
                                                        #line 91 
                                                        __bad_udelay(); else 
                                                                    #line 91 
                                                                    __const_udelay((unsigned long)((usec_interval / 1000U) * 1000U) * 4295UL);
        else 
             #line 91 
             __udelay((unsigned long)((usec_interval / 1000U) * 1000U));
      else {
        #line 91 
        unsigned long __ms_0 = (unsigned long)(usec_interval / 1000U);
        #line 91 
        while (1) {
          #line 91 
          unsigned long tmp_0;
          #line 91 
          tmp_0 = __ms_0;
          #line 91 
          __ms_0 --;
          #line 91 
          ;
          #line 91 
          if (! (tmp_0 != 0UL)) 
                                #line 91 
                                break;
          #line 91 
          __const_udelay(4295000UL);
        }
      }
    else 
      #line 93 
      if (0 != 0) 
        #line 93 
        if (usec_interval > 19999U) 
                                    #line 93 
                                    __bad_udelay(); else 
                                                         #line 93 
                                                         __const_udelay((unsigned long)usec_interval * 4295UL);
      else 
           #line 93 
           __udelay((unsigned long)usec_interval);
    #line 69 
    i = (u16)((int)i + 1);
  }
  #line 96 
  *success = (_Bool)((unsigned int)i < iterations);
  #line 98 
  return ret_val;
}

#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_phy.c"
void igc_power_up_phy_copper(struct igc_hw *hw)
{
  #line 110 
  u16 mii_reg = (unsigned short)0U;
  #line 113 
  (*(hw->phy.ops.read_reg))(hw,0U,& mii_reg);
  #line 114 
  mii_reg = (unsigned short)((unsigned int)mii_reg & 63487U);
  #line 115 
  (*(hw->phy.ops.write_reg))(hw,0U,(unsigned short)((int)mii_reg));
  #line 116 
  return;
}

#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_phy.c"
void igc_power_down_phy_copper(struct igc_hw *hw)
{
  #line 127 
  u16 mii_reg = (unsigned short)0U;
  #line 130 
  (*(hw->phy.ops.read_reg))(hw,0U,& mii_reg);
  #line 131 
  mii_reg = (unsigned short)((unsigned int)mii_reg | 2048U);
  #line 137 
  usleep_range(1000UL,2000UL);
  #line 138 
  return;
}

#line 148  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_phy.c"
s32 igc_check_downshift(struct igc_hw *hw)
{
  #line 151 
  s32 ret_val;
  #line 150 
  struct igc_phy_info *phy = & hw->phy;
  #line 153 
  switch ((unsigned int)phy->type) {
    #line 154 
    case (unsigned int)2: 
                          #line 154 
    ;
    #line 155 
    default: 
             #line 155 
    ;
    #line 157 
    phy->speed_downgraded = (_Bool)0;
    #line 158 
    ret_val = 0;
  }
  #line 161 
  return ret_val;
}

#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_phy.c"
s32 igc_phy_hw_reset(struct igc_hw *hw)
{
  #line 176 
  s32 ret_val;
  #line 177 
  u32 ctrl;
  #line 175 
  struct igc_phy_info *phy = & hw->phy;
  #line 179 
  ret_val = igc_check_reset_block(hw);
  #line 180 
  if (ret_val != 0) {
    #line 181 
    ret_val = 0;
    #line 182 
    goto out;
  }
  #line 185 
  ret_val = (*(phy->ops.acquire))(hw);
  #line 186 
  if (ret_val != 0) 
                    #line 187 
                    goto out;
  #line 189 
  ctrl = igc_rd32(hw,0U);
  {
    #line 191 
    union __anonunion___u_2129 __u;
    #line 190 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 190 
    u8 *hw_addr = (__u.__val);
    #line 190 
    writel(ctrl | 2147483648U,(void *)hw_addr);
  }
  #line 191 
  igc_rd32(hw,8U);
  #line 193 
  if (0 != 0) 
    #line 193 
    if (phy->reset_delay_us > 19999U) 
                                      #line 193 
                                      __bad_udelay(); else 
                                                           #line 193 
                                                           __const_udelay((unsigned long)phy->reset_delay_us * 4295UL);
  else 
       #line 193 
       __udelay((unsigned long)phy->reset_delay_us);
  {
    #line 196 
    union __anonunion___u_2131 __u_0;
    #line 195 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
    #line 195 
    u8 *hw_addr_0 = (__u_0.__val);
    #line 195 
    writel(ctrl,(void *)hw_addr_0);
  }
  #line 196 
  igc_rd32(hw,8U);
  #line 198 
  usleep_range(1500UL,2000UL);
  #line 200 
  (*(phy->ops.release))(hw);
  #line 202 
  out: 
       #line 202 
  ;
  #line 203 
  return ret_val;
}

#line 215  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_phy.c"
static s32 igc_phy_setup_autoneg(struct igc_hw *hw)
{
  #line 220 
  u16 mii_autoneg_adv_reg;
  #line 221 
  s32 ret_val;
  #line 217 
  struct igc_phy_info *phy = & hw->phy;
  #line 218 
  u16 aneg_multigbt_an_ctrl = (unsigned short)0U;
  #line 219 
  u16 mii_1000t_ctrl_reg = (unsigned short)0U;
  #line 223 
  phy->autoneg_advertised = (unsigned short)((int)phy->autoneg_advertised & (int)phy->autoneg_mask);
  #line 226 
  ret_val = (*(phy->ops.read_reg))(hw,4U,& mii_autoneg_adv_reg);
  #line 227 
  if (ret_val != 0) 
                    #line 228 
                    return ret_val;
  #line 230 
  if (((int)phy->autoneg_mask & 32) != 0) {
    #line 232 
    ret_val = (*(phy->ops.read_reg))(hw,9U,& mii_1000t_ctrl_reg);
    #line 234 
    if (ret_val != 0) 
                      #line 235 
                      return ret_val;
  }
  #line 238 
  if (((int)phy->autoneg_mask & 128) != 0 && hw->phy.id == 1741282304U) {
    #line 241 
    ret_val = (*(phy->ops.read_reg))(hw,458784U,& aneg_multigbt_an_ctrl);
    #line 246 
    if (ret_val != 0) 
                      #line 247 
                      return ret_val;
  }
  #line 261 
  mii_autoneg_adv_reg = (unsigned short)((unsigned int)mii_autoneg_adv_reg & 65055U);
  #line 265 
  mii_1000t_ctrl_reg = (unsigned short)((unsigned int)mii_1000t_ctrl_reg & 64767U);
  {
    #line 267 
    bool branch;
    #line 267 
    struct _ddebug __UNIQUE_ID_ddebug436 = {.modname = (char *)"igc", .function = (char *)"igc_phy_setup_autoneg", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_phy.c", .format = (char *)"autoneg_advertised %x\n", .lineno = (unsigned int)267U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 267 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug436.key.dd_key_false.key,(_Bool)0);
    #line 267 
    if ((long)((long)((int)branch != 0)) != 0L) {
      #line 267 
      ;
      #line 267 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug436,igc_get_hw_dev(hw),(char *)"autoneg_advertised %x\n",(int)phy->autoneg_advertised);
    }
  }
  #line 270 
  if (((int)phy->autoneg_advertised & 1) != 0) {
    {
      #line 271 
      bool branch_0;
      #line 271 
      struct _ddebug __UNIQUE_ID_ddebug437 = {.modname = (char *)"igc", .function = (char *)"igc_phy_setup_autoneg", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_phy.c", .format = (char *)"Advertise 10mb Half duplex\n", .lineno = (unsigned int)271U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 271 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug437.key.dd_key_false.key,(_Bool)0);
      #line 271 
      if ((long)((long)((int)branch_0 != 0)) != 0L) {
        #line 271 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug437,igc_get_hw_dev(hw),(char *)"Advertise 10mb Half duplex\n");
      }
    }
    #line 272 
    mii_autoneg_adv_reg = (unsigned short)((unsigned int)mii_autoneg_adv_reg | 32U);
  }
  #line 276 
  if (((int)phy->autoneg_advertised & 2) != 0) {
    {
      #line 277 
      bool branch_1;
      #line 277 
      struct _ddebug __UNIQUE_ID_ddebug438 = {.modname = (char *)"igc", .function = (char *)"igc_phy_setup_autoneg", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_phy.c", .format = (char *)"Advertise 10mb Full duplex\n", .lineno = (unsigned int)277U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 277 
      branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug438.key.dd_key_false.key,(_Bool)0);
      #line 277 
      if ((long)((long)((int)branch_1 != 0)) != 0L) {
        #line 277 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug438,igc_get_hw_dev(hw),(char *)"Advertise 10mb Full duplex\n");
      }
    }
    #line 278 
    mii_autoneg_adv_reg = (unsigned short)((unsigned int)mii_autoneg_adv_reg | 64U);
  }
  #line 282 
  if (((int)phy->autoneg_advertised & 4) != 0) {
    {
      #line 283 
      bool branch_2;
      #line 283 
      struct _ddebug __UNIQUE_ID_ddebug439 = {.modname = (char *)"igc", .function = (char *)"igc_phy_setup_autoneg", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_phy.c", .format = (char *)"Advertise 100mb Half duplex\n", .lineno = (unsigned int)283U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 283 
      branch_2 = arch_static_branch(& __UNIQUE_ID_ddebug439.key.dd_key_false.key,(_Bool)0);
      #line 283 
      if ((long)((long)((int)branch_2 != 0)) != 0L) {
        #line 283 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug439,igc_get_hw_dev(hw),(char *)"Advertise 100mb Half duplex\n");
      }
    }
    #line 284 
    mii_autoneg_adv_reg = (unsigned short)((unsigned int)mii_autoneg_adv_reg | 128U);
  }
  #line 288 
  if (((int)phy->autoneg_advertised & 8) != 0) {
    {
      #line 289 
      bool branch_3;
      #line 289 
      struct _ddebug __UNIQUE_ID_ddebug440 = {.modname = (char *)"igc", .function = (char *)"igc_phy_setup_autoneg", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_phy.c", .format = (char *)"Advertise 100mb Full duplex\n", .lineno = (unsigned int)289U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 289 
      branch_3 = arch_static_branch(& __UNIQUE_ID_ddebug440.key.dd_key_false.key,(_Bool)0);
      #line 289 
      if ((long)((long)((int)branch_3 != 0)) != 0L) {
        #line 289 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug440,igc_get_hw_dev(hw),(char *)"Advertise 100mb Full duplex\n");
      }
    }
    #line 290 
    mii_autoneg_adv_reg = (unsigned short)((unsigned int)mii_autoneg_adv_reg | 256U);
  }
  #line 294 
  if (((int)phy->autoneg_advertised & 16) != 0) {
    #line 295 
    bool branch_4;
    #line 295 
    struct _ddebug __UNIQUE_ID_ddebug441 = {.modname = (char *)"igc", .function = (char *)"igc_phy_setup_autoneg", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_phy.c", .format = (char *)"Advertise 1000mb Half duplex request denied!\n", .lineno = (unsigned int)295U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 295 
    branch_4 = arch_static_branch(& __UNIQUE_ID_ddebug441.key.dd_key_false.key,(_Bool)0);
    #line 295 
    if ((long)((long)((int)branch_4 != 0)) != 0L) {
      #line 295 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug441,igc_get_hw_dev(hw),(char *)"Advertise 1000mb Half duplex request denied!\n");
    }
  }
  #line 298 
  if (((int)phy->autoneg_advertised & 32) != 0) {
    {
      #line 299 
      bool branch_5;
      #line 299 
      struct _ddebug __UNIQUE_ID_ddebug442 = {.modname = (char *)"igc", .function = (char *)"igc_phy_setup_autoneg", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_phy.c", .format = (char *)"Advertise 1000mb Full duplex\n", .lineno = (unsigned int)299U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 299 
      branch_5 = arch_static_branch(& __UNIQUE_ID_ddebug442.key.dd_key_false.key,(_Bool)0);
      #line 299 
      if ((long)((long)((int)branch_5 != 0)) != 0L) {
        #line 299 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug442,igc_get_hw_dev(hw),(char *)"Advertise 1000mb Full duplex\n");
      }
    }
    #line 300 
    mii_1000t_ctrl_reg = (unsigned short)((unsigned int)mii_1000t_ctrl_reg | 512U);
  }
  #line 304 
  if (((int)phy->autoneg_advertised & 64) != 0) {
    #line 305 
    bool branch_6;
    #line 305 
    struct _ddebug __UNIQUE_ID_ddebug443 = {.modname = (char *)"igc", .function = (char *)"igc_phy_setup_autoneg", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_phy.c", .format = (char *)"Advertise 2500mb Half duplex request denied!\n", .lineno = (unsigned int)305U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 305 
    branch_6 = arch_static_branch(& __UNIQUE_ID_ddebug443.key.dd_key_false.key,(_Bool)0);
    #line 305 
    if ((long)((long)((int)branch_6 != 0)) != 0L) {
      #line 305 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug443,igc_get_hw_dev(hw),(char *)"Advertise 2500mb Half duplex request denied!\n");
    }
  }
  #line 308 
  if (((int)phy->autoneg_advertised & 128) != 0) {
    {
      #line 309 
      bool branch_7;
      #line 309 
      struct _ddebug __UNIQUE_ID_ddebug444 = {.modname = (char *)"igc", .function = (char *)"igc_phy_setup_autoneg", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_phy.c", .format = (char *)"Advertise 2500mb Full duplex\n", .lineno = (unsigned int)309U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 309 
      branch_7 = arch_static_branch(& __UNIQUE_ID_ddebug444.key.dd_key_false.key,(_Bool)0);
      #line 309 
      if ((long)((long)((int)branch_7 != 0)) != 0L) {
        #line 309 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug444,igc_get_hw_dev(hw),(char *)"Advertise 2500mb Full duplex\n");
      }
    }
    #line 310 
    aneg_multigbt_an_ctrl = (unsigned short)((unsigned int)aneg_multigbt_an_ctrl | 128U);
  }
  else 
       #line 312 
       aneg_multigbt_an_ctrl = (unsigned short)((unsigned int)aneg_multigbt_an_ctrl & 65407U);
  #line 332 
  switch ((unsigned int)hw->fc.current_mode) {
    #line 333 
    case (unsigned int)0: 
                          #line 333 
    ;
    #line 337 
    mii_autoneg_adv_reg = (unsigned short)((unsigned int)mii_autoneg_adv_reg & 62463U);
    #line 338 
    break;
    #line 339 
    case (unsigned int)1: 
                          #line 339 
    ;
    #line 349 
    mii_autoneg_adv_reg = (unsigned short)((unsigned int)mii_autoneg_adv_reg | 3072U);
    #line 350 
    break;
    #line 351 
    case (unsigned int)2: 
                          #line 351 
    ;
    #line 355 
    mii_autoneg_adv_reg = (unsigned short)((unsigned int)mii_autoneg_adv_reg | 2048U);
    #line 356 
    mii_autoneg_adv_reg = (unsigned short)((unsigned int)mii_autoneg_adv_reg & 64511U);
    #line 357 
    break;
    #line 358 
    case (unsigned int)3: 
                          #line 358 
    ;
    #line 362 
    mii_autoneg_adv_reg = (unsigned short)((unsigned int)mii_autoneg_adv_reg | 3072U);
    #line 363 
    break;
    #line 364 
    default: 
             #line 364 
    ;
    {
      #line 365 
      bool branch_8;
      #line 365 
      struct _ddebug __UNIQUE_ID_ddebug445 = {.modname = (char *)"igc", .function = (char *)"igc_phy_setup_autoneg", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_phy.c", .format = (char *)"Flow control param set incorrectly\n", .lineno = (unsigned int)365U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 365 
      branch_8 = arch_static_branch(& __UNIQUE_ID_ddebug445.key.dd_key_false.key,(_Bool)0);
      #line 365 
      if ((long)((long)((int)branch_8 != 0)) != 0L) {
        #line 365 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug445,igc_get_hw_dev(hw),(char *)"Flow control param set incorrectly\n");
      }
    }
    #line 366 
    return -3;
  }
  #line 369 
  ret_val = (*(phy->ops.write_reg))(hw,4U,(unsigned short)((int)mii_autoneg_adv_reg));
  #line 370 
  if (ret_val != 0) 
                    #line 371 
                    return ret_val;
  {
    #line 373 
    bool branch_9;
    #line 373 
    struct _ddebug __UNIQUE_ID_ddebug446 = {.modname = (char *)"igc", .function = (char *)"igc_phy_setup_autoneg", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_phy.c", .format = (char *)"Auto-Neg Advertising %x\n", .lineno = (unsigned int)373U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 373 
    branch_9 = arch_static_branch(& __UNIQUE_ID_ddebug446.key.dd_key_false.key,(_Bool)0);
    #line 373 
    if ((long)((long)((int)branch_9 != 0)) != 0L) {
      #line 373 
      ;
      #line 373 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug446,igc_get_hw_dev(hw),(char *)"Auto-Neg Advertising %x\n",(int)mii_autoneg_adv_reg);
    }
  }
  #line 375 
  if (((int)phy->autoneg_mask & 32) != 0) 
                                          #line 376 
                                          ret_val = (*(phy->ops.write_reg))(hw,9U,(unsigned short)((int)mii_1000t_ctrl_reg));
  #line 379 
  if (((int)phy->autoneg_mask & 128) != 0 && hw->phy.id == 1741282304U) 
    #line 381 
    ret_val = (*(phy->ops.write_reg))(hw,458784U,(unsigned short)((int)aneg_multigbt_an_ctrl));
  #line 387 
  return ret_val;
}

#line 397  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_phy.c"
static s32 igc_wait_autoneg(struct igc_hw *hw)
{
  #line 399 
  u16 i;
  #line 399 
  u16 phy_status;
  #line 400 
  s32 ret_val = 0;
  #line 403 
  i = (unsigned short)45U;
  #line 403 
  while ((unsigned int)i != 0U) {
    #line 404 
    ret_val = (*(hw->phy.ops.read_reg))(hw,1U,& phy_status);
    #line 405 
    if (ret_val != 0) 
                      #line 406 
                      break;
    #line 407 
    ret_val = (*(hw->phy.ops.read_reg))(hw,1U,& phy_status);
    #line 408 
    if (ret_val != 0) 
                      #line 409 
                      break;
    #line 410 
    if (((int)phy_status & 32) != 0) 
                                     #line 411 
                                     break;
    #line 412 
    msleep(100U);
    #line 403 
    i = (u16)((int)i - 1);
  }
  #line 418 
  return ret_val;
}

#line 430  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_phy.c"
static s32 igc_copper_link_autoneg(struct igc_hw *hw)
{
  #line 433 
  u16 phy_ctrl;
  #line 434 
  s32 ret_val;
  #line 432 
  struct igc_phy_info *phy = & hw->phy;
  #line 439 
  phy->autoneg_advertised = (unsigned short)((int)phy->autoneg_advertised & (int)phy->autoneg_mask);
  #line 444 
  if ((unsigned int)phy->autoneg_advertised == 0U) 
                                                   #line 445 
                                                   phy->autoneg_advertised = phy->autoneg_mask;
  {
    #line 447 
    bool branch;
    #line 447 
    struct _ddebug __UNIQUE_ID_ddebug447 = {.modname = (char *)"igc", .function = (char *)"igc_copper_link_autoneg", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_phy.c", .format = (char *)"Reconfiguring auto-neg advertisement params\n", .lineno = (unsigned int)447U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 447 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug447.key.dd_key_false.key,(_Bool)0);
    #line 447 
    if ((long)((long)((int)branch != 0)) != 0L) {
      #line 447 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug447,igc_get_hw_dev(hw),(char *)"Reconfiguring auto-neg advertisement params\n");
    }
  }
  #line 448 
  ret_val = igc_phy_setup_autoneg(hw);
  #line 449 
  if (ret_val != 0) {
    {
      #line 450 
      bool branch_0;
      #line 450 
      struct _ddebug __UNIQUE_ID_ddebug448 = {.modname = (char *)"igc", .function = (char *)"igc_copper_link_autoneg", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_phy.c", .format = (char *)"Error Setting up Auto-Negotiation\n", .lineno = (unsigned int)450U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 450 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug448.key.dd_key_false.key,(_Bool)0);
      #line 450 
      if ((long)((long)((int)branch_0 != 0)) != 0L) {
        #line 450 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug448,igc_get_hw_dev(hw),(char *)"Error Setting up Auto-Negotiation\n");
      }
    }
    #line 451 
    goto out;
  }
  {
    #line 453 
    bool branch_1;
    #line 453 
    struct _ddebug __UNIQUE_ID_ddebug449 = {.modname = (char *)"igc", .function = (char *)"igc_copper_link_autoneg", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_phy.c", .format = (char *)"Restarting Auto-Neg\n", .lineno = (unsigned int)453U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 453 
    branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug449.key.dd_key_false.key,(_Bool)0);
    #line 453 
    if ((long)((long)((int)branch_1 != 0)) != 0L) {
      #line 453 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug449,igc_get_hw_dev(hw),(char *)"Restarting Auto-Neg\n");
    }
  }
  #line 458 
  ret_val = (*(phy->ops.read_reg))(hw,0U,& phy_ctrl);
  #line 459 
  if (ret_val != 0) 
                    #line 460 
                    goto out;
  #line 462 
  phy_ctrl = (unsigned short)((unsigned int)phy_ctrl | 4608U);
  #line 463 
  ret_val = (*(phy->ops.write_reg))(hw,0U,(unsigned short)((int)phy_ctrl));
  #line 464 
  if (ret_val != 0) 
                    #line 465 
                    goto out;
  #line 470 
  if ((int)phy->autoneg_wait_to_complete != 0) {
    #line 471 
    ret_val = igc_wait_autoneg(hw);
    #line 472 
    if (ret_val != 0) {
      {
        #line 473 
        bool branch_2;
        #line 473 
        struct _ddebug __UNIQUE_ID_ddebug450 = {.modname = (char *)"igc", .function = (char *)"igc_copper_link_autoneg", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_phy.c", .format = (char *)"Error while waiting for autoneg to complete\n", .lineno = (unsigned int)473U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 473 
        branch_2 = arch_static_branch(& __UNIQUE_ID_ddebug450.key.dd_key_false.key,(_Bool)0);
        #line 473 
        if ((long)((long)((int)branch_2 != 0)) != 0L) {
          #line 473 
          __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug450,igc_get_hw_dev(hw),(char *)"Error while waiting for autoneg to complete\n");
        }
      }
      #line 474 
      goto out;
    }
  }
  #line 478 
  hw->mac.get_link_status = (_Bool)1;
  #line 480 
  out: 
       #line 480 
  ;
  #line 481 
  return ret_val;
}

#line 493  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_phy.c"
s32 igc_setup_copper_link(struct igc_hw *hw)
{
  #line 496 
  bool link;
  #line 495 
  s32 ret_val = 0;
  #line 498 
  if ((int)hw->mac.autoneg != 0) {
    #line 502 
    ret_val = igc_copper_link_autoneg(hw);
    #line 503 
    if (ret_val != 0) 
                      #line 504 
                      goto out;
  }
  else {
    {
      #line 509 
      bool branch;
      #line 509 
      struct _ddebug __UNIQUE_ID_ddebug451 = {.modname = (char *)"igc", .function = (char *)"igc_setup_copper_link", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_phy.c", .format = (char *)"Forcing Speed and Duplex\n", .lineno = (unsigned int)509U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 509 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug451.key.dd_key_false.key,(_Bool)0);
      #line 509 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 509 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug451,igc_get_hw_dev(hw),(char *)"Forcing Speed and Duplex\n");
      }
    }
    #line 510 
    ret_val = (*(hw->phy.ops.force_speed_duplex))(hw);
    #line 511 
    if (ret_val != 0) {
      {
        #line 512 
        bool branch_0;
        #line 512 
        struct _ddebug __UNIQUE_ID_ddebug452 = {.modname = (char *)"igc", .function = (char *)"igc_setup_copper_link", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_phy.c", .format = (char *)"Error Forcing Speed and Duplex\n", .lineno = (unsigned int)512U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 512 
        branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug452.key.dd_key_false.key,(_Bool)0);
        #line 512 
        if ((long)((long)((int)branch_0 != 0)) != 0L) {
          #line 512 
          __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug452,igc_get_hw_dev(hw),(char *)"Error Forcing Speed and Duplex\n");
        }
      }
      #line 513 
      goto out;
    }
  }
  #line 520 
  ret_val = igc_phy_has_link(hw,10U,10U,& link);
  #line 521 
  if (ret_val != 0) 
                    #line 522 
                    goto out;
  #line 524 
  if ((int)link != 0) {
    {
      #line 525 
      bool branch_1;
      #line 525 
      struct _ddebug __UNIQUE_ID_ddebug453 = {.modname = (char *)"igc", .function = (char *)"igc_setup_copper_link", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_phy.c", .format = (char *)"Valid link established!!!\n", .lineno = (unsigned int)525U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 525 
      branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug453.key.dd_key_false.key,(_Bool)0);
      #line 525 
      if ((long)((long)((int)branch_1 != 0)) != 0L) {
        #line 525 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug453,igc_get_hw_dev(hw),(char *)"Valid link established!!!\n");
      }
    }
    #line 526 
    igc_config_collision_dist(hw);
    #line 527 
    ret_val = igc_config_fc_after_link_up(hw);
  }
  else {
    #line 529 
    bool branch_2;
    #line 529 
    struct _ddebug __UNIQUE_ID_ddebug454 = {.modname = (char *)"igc", .function = (char *)"igc_setup_copper_link", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_phy.c", .format = (char *)"Unable to establish link!!!\n", .lineno = (unsigned int)529U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 529 
    branch_2 = arch_static_branch(& __UNIQUE_ID_ddebug454.key.dd_key_false.key,(_Bool)0);
    #line 529 
    if ((long)((long)((int)branch_2 != 0)) != 0L) {
      #line 529 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug454,igc_get_hw_dev(hw),(char *)"Unable to establish link!!!\n");
    }
  }
  #line 532 
  out: 
       #line 532 
  ;
  #line 533 
  return ret_val;
}

#line 545  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_phy.c"
static s32 igc_read_phy_reg_mdic(struct igc_hw *hw, u32 offset, u16 *data)
{
  #line 548 
  u32 i;
  #line 547 
  struct igc_phy_info *phy = & hw->phy;
  #line 548 
  u32 mdic = 0U;
  #line 549 
  s32 ret_val = 0;
  #line 551 
  if (offset > 31U) {
    {
      #line 552 
      bool branch;
      #line 552 
      struct _ddebug __UNIQUE_ID_ddebug455 = {.modname = (char *)"igc", .function = (char *)"igc_read_phy_reg_mdic", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_phy.c", .format = (char *)"PHY Address %d is out of range\n", .lineno = (unsigned int)552U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 552 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug455.key.dd_key_false.key,(_Bool)0);
      #line 552 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 552 
        ;
        #line 552 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug455,igc_get_hw_dev(hw),(char *)"PHY Address %d is out of range\n",offset);
      }
    }
    #line 553 
    ret_val = -4;
    #line 554 
    goto out;
  }
  #line 561 
  mdic = ((offset << 16) | (phy->addr << 21)) | 134217728U;
  {
    #line 566 
    union __anonunion___u_2133 __u;
    #line 565 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 565 
    u8 *hw_addr = (__u.__val);
    #line 565 
    writel(mdic,(void *)(hw_addr + 32U));
  }
  #line 571 
  i = 0U;
  #line 571 
  while (i <= 1919U) {
    #line 572 
    usleep_range(500UL,1000UL);
    #line 573 
    mdic = igc_rd32(hw,32U);
    #line 574 
    if ((mdic & 268435456U) != 0U) 
                                   #line 575 
                                   break;
    #line 571 
    i ++;
  }
  #line 577 
  if ((mdic & 268435456U) == 0U) {
    {
      #line 578 
      bool branch_0;
      #line 578 
      struct _ddebug __UNIQUE_ID_ddebug456 = {.modname = (char *)"igc", .function = (char *)"igc_read_phy_reg_mdic", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_phy.c", .format = (char *)"MDI Read did not complete\n", .lineno = (unsigned int)578U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 578 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug456.key.dd_key_false.key,(_Bool)0);
      #line 578 
      if ((long)((long)((int)branch_0 != 0)) != 0L) {
        #line 578 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug456,igc_get_hw_dev(hw),(char *)"MDI Read did not complete\n");
      }
    }
    #line 579 
    ret_val = -2;
    #line 580 
    goto out;
  }
  #line 582 
  if ((mdic & 1073741824U) != 0U) {
    {
      #line 583 
      bool branch_1;
      #line 583 
      struct _ddebug __UNIQUE_ID_ddebug457 = {.modname = (char *)"igc", .function = (char *)"igc_read_phy_reg_mdic", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_phy.c", .format = (char *)"MDI Error\n", .lineno = (unsigned int)583U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 583 
      branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug457.key.dd_key_false.key,(_Bool)0);
      #line 583 
      if ((long)((long)((int)branch_1 != 0)) != 0L) {
        #line 583 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug457,igc_get_hw_dev(hw),(char *)"MDI Error\n");
      }
    }
    #line 584 
    ret_val = -2;
    #line 585 
    goto out;
  }
  #line 587 
  *data = (unsigned short)mdic;
  #line 589 
  out: 
       #line 589 
  ;
  #line 590 
  return ret_val;
}

#line 601  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_phy.c"
static s32 igc_write_phy_reg_mdic(struct igc_hw *hw, u32 offset, u16 data)
{
  #line 604 
  u32 i;
  #line 603 
  struct igc_phy_info *phy = & hw->phy;
  #line 604 
  u32 mdic = 0U;
  #line 605 
  s32 ret_val = 0;
  #line 607 
  if (offset > 31U) {
    {
      #line 608 
      bool branch;
      #line 608 
      struct _ddebug __UNIQUE_ID_ddebug458 = {.modname = (char *)"igc", .function = (char *)"igc_write_phy_reg_mdic", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_phy.c", .format = (char *)"PHY Address %d is out of range\n", .lineno = (unsigned int)608U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 608 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug458.key.dd_key_false.key,(_Bool)0);
      #line 608 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 608 
        ;
        #line 608 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug458,igc_get_hw_dev(hw),(char *)"PHY Address %d is out of range\n",offset);
      }
    }
    #line 609 
    ret_val = -4;
    #line 610 
    goto out;
  }
  #line 617 
  mdic = (((unsigned int)data | (offset << 16)) | (phy->addr << 21)) | 67108864U;
  {
    #line 623 
    union __anonunion___u_2135 __u;
    #line 622 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 622 
    u8 *hw_addr = (__u.__val);
    #line 622 
    writel(mdic,(void *)(hw_addr + 32U));
  }
  #line 628 
  i = 0U;
  #line 628 
  while (i <= 1919U) {
    #line 629 
    usleep_range(500UL,1000UL);
    #line 630 
    mdic = igc_rd32(hw,32U);
    #line 631 
    if ((mdic & 268435456U) != 0U) 
                                   #line 632 
                                   break;
    #line 628 
    i ++;
  }
  #line 634 
  if ((mdic & 268435456U) == 0U) {
    {
      #line 635 
      bool branch_0;
      #line 635 
      struct _ddebug __UNIQUE_ID_ddebug459 = {.modname = (char *)"igc", .function = (char *)"igc_write_phy_reg_mdic", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_phy.c", .format = (char *)"MDI Write did not complete\n", .lineno = (unsigned int)635U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 635 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug459.key.dd_key_false.key,(_Bool)0);
      #line 635 
      if ((long)((long)((int)branch_0 != 0)) != 0L) {
        #line 635 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug459,igc_get_hw_dev(hw),(char *)"MDI Write did not complete\n");
      }
    }
    #line 636 
    ret_val = -2;
    #line 637 
    goto out;
  }
  #line 639 
  if ((mdic & 1073741824U) != 0U) {
    {
      #line 640 
      bool branch_1;
      #line 640 
      struct _ddebug __UNIQUE_ID_ddebug460 = {.modname = (char *)"igc", .function = (char *)"igc_write_phy_reg_mdic", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_phy.c", .format = (char *)"MDI Error\n", .lineno = (unsigned int)640U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 640 
      branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug460.key.dd_key_false.key,(_Bool)0);
      #line 640 
      if ((long)((long)((int)branch_1 != 0)) != 0L) {
        #line 640 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug460,igc_get_hw_dev(hw),(char *)"MDI Error\n");
      }
    }
    #line 641 
    ret_val = -2;
    #line 642 
    goto out;
  }
  #line 645 
  out: 
       #line 645 
  ;
  #line 646 
  return ret_val;
}

#line 657  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_phy.c"
static s32 __igc_access_xmdio_reg(struct igc_hw *hw, u16 address, u8 dev_addr, u16 *data, bool read)
{
  #line 660 
  s32 ret_val;
  #line 662 
  ret_val = (*(hw->phy.ops.write_reg))(hw,13U,(unsigned short)((int)dev_addr));
  #line 663 
  if (ret_val != 0) 
                    #line 664 
                    return ret_val;
  #line 666 
  ret_val = (*(hw->phy.ops.write_reg))(hw,14U,(unsigned short)((int)address));
  #line 667 
  if (ret_val != 0) 
                    #line 668 
                    return ret_val;
  #line 670 
  ret_val = (*(hw->phy.ops.write_reg))(hw,13U,(unsigned short)((int)((unsigned short)((int)dev_addr | 16384))));
  #line 672 
  if (ret_val != 0) 
                    #line 673 
                    return ret_val;
  #line 675 
  if ((int)read != 0) 
                      #line 676 
                      ret_val = (*(hw->phy.ops.read_reg))(hw,14U,data); else 
                                                                    #line 678 
                                                                    ret_val = (*(hw->phy.ops.write_reg))(hw,14U,(unsigned short)((int)*data));
  #line 679 
  if (ret_val != 0) 
                    #line 680 
                    return ret_val;
  #line 683 
  ret_val = (*(hw->phy.ops.write_reg))(hw,13U,(unsigned short)0);
  #line 684 
  if (ret_val != 0) 
                    #line 685 
                    return ret_val;
  #line 687 
  return ret_val;
}

#line 697  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_phy.c"
static s32 igc_read_xmdio_reg(struct igc_hw *hw, u16 addr, u8 dev_addr, u16 *data)
{
  #line 700 
  return __igc_access_xmdio_reg(hw,(unsigned short)((int)addr),
                             (unsigned char)((int)dev_addr),data,(_Bool)1);
}

#line 710  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_phy.c"
static s32 igc_write_xmdio_reg(struct igc_hw *hw, u16 addr, u8 dev_addr, u16 data)
{
  #line 713 
  return __igc_access_xmdio_reg(hw,(unsigned short)((int)addr),
                             (unsigned char)((int)dev_addr),& data,(_Bool)0);
}

#line 725  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_phy.c"
s32 igc_write_phy_reg_gpy(struct igc_hw *hw, u32 offset, u16 data)
{
  #line 728 
  s32 ret_val;
  #line 727 
  u8 dev_addr = (unsigned char)(offset >> 16);
  #line 730 
  offset &= 65535U;
  #line 732 
  if ((unsigned int)dev_addr == 0U) {
    #line 733 
    ret_val = (*(hw->phy.ops.acquire))(hw);
    #line 734 
    if (ret_val != 0) 
                      #line 735 
                      return ret_val;
    #line 736 
    ret_val = igc_write_phy_reg_mdic(hw,offset,(unsigned short)((int)data));
    #line 737 
    if (ret_val != 0) 
                      #line 738 
                      return ret_val;
    #line 739 
    (*(hw->phy.ops.release))(hw);
  }
  else 
       #line 741 
       ret_val = igc_write_xmdio_reg(hw,(unsigned short)((int)((unsigned short)offset)),(unsigned char)((int)dev_addr),(unsigned short)((int)data));
  #line 745 
  return ret_val;
}

#line 758  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_phy.c"
s32 igc_read_phy_reg_gpy(struct igc_hw *hw, u32 offset, u16 *data)
{
  #line 761 
  s32 ret_val;
  #line 760 
  u8 dev_addr = (unsigned char)(offset >> 16);
  #line 763 
  offset &= 65535U;
  #line 765 
  if ((unsigned int)dev_addr == 0U) {
    #line 766 
    ret_val = (*(hw->phy.ops.acquire))(hw);
    #line 767 
    if (ret_val != 0) 
                      #line 768 
                      return ret_val;
    #line 769 
    ret_val = igc_read_phy_reg_mdic(hw,offset,data);
    #line 770 
    if (ret_val != 0) 
                      #line 771 
                      return ret_val;
    #line 772 
    (*(hw->phy.ops.release))(hw);
  }
  else 
       #line 774 
       ret_val = igc_read_xmdio_reg(hw,(unsigned short)((int)((unsigned short)offset)),(unsigned char)((int)dev_addr),data);
  #line 778 
  return ret_val;
}

/* compiler builtin: 
   void __builtin_prefetch(void const * , ...);   */
/* compiler builtin: 
   void __builtin_unreachable(void);   */
#line 4  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_main.i.aux"
#line 4 
void ldv_atomic_add(int i, atomic_t *v);
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
#line 16 
extern struct module __this_module;
#line 220  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler.h"
__inline static void __write_once_size(void *p, void *res, int size)
{
  #line 222 
  switch (size) {
    #line 223 
    case 1: 
            #line 223 
    ;
    #line 223 
    *((__u8 *)p) = *((__u8 *)res);
    #line 223 
    break;
    #line 224 
    case 2: 
            #line 224 
    ;
    #line 224 
    *((__u16 *)p) = *((__u16 *)res);
    #line 224 
    break;
    #line 225 
    case 4: 
            #line 225 
    ;
    #line 225 
    *((__u32 *)p) = *((__u32 *)res);
    #line 225 
    break;
    #line 226 
    case 8: 
            #line 226 
    ;
    #line 226 
    *((__u64 *)p) = *((__u64 *)res);
    #line 226 
    break;
    #line 227 
    default: 
             #line 227 
    ;
    #line 228 
    ldv_inline_asm();
    #line 229 
    __builtin_memcpy(p,(void const *)res,(unsigned long)size);
    #line 230 
    ldv_inline_asm();
  }
  #line 232 
  return;
}

#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kasan-checks.h"
__inline static bool kasan_check_read(void *p, unsigned int size)
{
  #line 36 
  return (_Bool)1;
}

#line 136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool arch_test_and_set_bit(long nr, unsigned long *addr)
{
  #line 138 
  bool c;
  #line 139 
  ldv_inline_asm();
  #line 138 
  return c;
}

#line 204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool constant_test_bit(long nr, unsigned long *addr)
{
  #line 207 
  return (_Bool)(((*(addr + (unsigned long)(nr >> 6)) >> (nr & 63L)) & 1UL) != 0UL);
}

#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool variable_test_bit(long nr, unsigned long *addr)
{
  #line 212 
  bool oldbit;
  #line 213 
  ldv_inline_asm();
  #line 219 
  return oldbit;
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 214  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_main.i.aux"
static void cif_set_bit(long nr, unsigned long *addr);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 221  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_main.i.aux"
static void cif_clear_bit(long nr, unsigned long *addr);
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
__inline static bool test_and_set_bit(long nr, unsigned long *addr)
{
  #line 70 
  kasan_check_read((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 71 
  return arch_test_and_set_bit(nr,addr);
}

#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-non-atomic.h"
__inline static bool test_bit(long nr, unsigned long *addr)
{
  #line 111 
  int tmp_1;
  #line 110 
  kasan_check_read((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 111 
  if (0 != 0) {
    #line 111 
    tmp_1 = (int)constant_test_bit(nr,addr) != 0;
  }
  else {
    #line 111 
    tmp_1 = (int)variable_test_bit(nr,addr) != 0;
  }
  #line 111 
  return (_Bool)(tmp_1 != 0);
}

#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/byteorder/little_endian.h"
__inline static __u32 __le32_to_cpup(__le32 *p)
{
  #line 58 
  return *p;
}

#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/byteorder/little_endian.h"
__inline static __u16 __le16_to_cpup(__le16 *p)
{
  #line 66 
  return *p;
}

#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
#line 171 
int printk(char * , ...);
#line 198  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
__inline static bool static_key_false(struct static_key *key)
{
  #line 200 
  return arch_static_branch(key,(_Bool)0);
}

#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
#line 64 
void __dynamic_dev_dbg(struct _ddebug *, struct device *, char * , ...);
#line 469  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
#line 469 
int sprintf(char *, char * , ...);
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 228  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_main.i.aux"
static void INIT_LIST_HEAD(struct list_head *list);
#line 757  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __hlist_del(struct hlist_node *n)
{
  #line 759 
  struct hlist_node *next = n->next;
  #line 760 
  struct hlist_node **pprev = n->pprev;
  {
    #line 763 
    union __anonunion___u_2156 __u = {.__val = next};
    #line 762 
    __write_once_size((void *)pprev,(void *)(& __u.__c),8);
    #line 762 
    struct hlist_node *tmp = __u.__val;
  }
  #line 763 
  if (next != (struct hlist_node *)0) 
                                      #line 764 
                                      next->pprev = pprev;
  #line 765 
  return;
}

#line 767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void hlist_del(struct hlist_node *n)
{
  #line 769 
  __hlist_del(n);
  #line 770 
  n->next = (struct hlist_node *)(-2401263026318606080);
  #line 771 
  n->pprev = (struct hlist_node **)(-2401263026318606046);
  #line 772 
  return;
}

#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/percpu.h"
#line 88 
void __bad_percpu_size(void);
#line 309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-defs.h"
#line 309 
void __bad_size_call_parameter(void);
#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-defs.h"
__inline static void __this_cpu_preempt_check(char *op)
{
  #line 316 
  return;
}

#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bug.h"
#line 89 
void __warn_printk(char * , ...);
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time64.h"
#line 144 
struct timespec64 ns_to_timespec64(s64);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
#line 14 
extern unsigned long page_offset_base;
#line 15 
#line 15 
extern unsigned long vmalloc_base;
#line 16 
#line 16 
extern unsigned long vmemmap_base;
#line 29 
#line 29 
unsigned long __phys_addr(unsigned long);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 14 
void *memcpy(void *, void *, size_t);
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 26 
char *strncpy(char *, char *, __kernel_size_t);
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg_64.h"
__inline static int arch_atomic_read(atomic_t *v)
{
  #line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
  union __anonunion___u_2202 __u;
  #line 31 
  __read_once_size((void *)(& v->counter),(void *)(& __u.__c),4);
  #line 31 
  return (__u.__val);
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static int atomic_read(atomic_t *v)
{
  #line 26 
  kasan_check_read((void *)v,4U);
  #line 27 
  return arch_atomic_read(v);
}

#line 60 
#line 256  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_main.i.aux"
static void atomic_add(int i, atomic_t *v);
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
#line 99 
extern atomic_t __num_online_cpus;
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
__inline static unsigned int num_online_cpus(void)
{
  #line 112 
  return (unsigned int)atomic_read(& __num_online_cpus);
}

#line 834  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
__inline static void prefetchw(void *x)
{
  #line 836 
  ldv_inline_asm();
  #line 837 
  return;
}

#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cpufeature.h"
__inline static bool _static_cpu_has(u16 bit)
{
  #line 177 
  ldv_inline_asm();
  #line 178 
  ldv_inline_asm();
  #line 211 
  t_yes: 
         #line 211 
  ;
  #line 212 
  return (_Bool)1;
  #line 213 
  t_no: 
        #line 213 
  ;
  #line 214 
  return (_Bool)0;
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/preempt.h"
__inline static int preempt_count(void)
{
  #line 26 
  int pfo_ret__;
  #line 26 
  switch (4UL) {
    #line 26 
    case (unsigned long)1: 
                           #line 26 
    ;
    #line 27 
    ldv_inline_asm();
    #line 26 
    break;
    #line 26 
    case (unsigned long)2: 
                           #line 26 
    ;
    #line 27 
    ldv_inline_asm();
    #line 26 
    break;
    #line 26 
    case (unsigned long)4: 
                           #line 26 
    ;
    #line 27 
    ldv_inline_asm();
    #line 26 
    break;
    #line 26 
    case (unsigned long)8: 
                           #line 26 
    ;
    #line 27 
    ldv_inline_asm();
    #line 26 
    break;
    #line 26 
    default: 
             #line 26 
    ;
    #line 26 
    __bad_percpu_size();
  }
  #line 26 
  return pfo_ret__ & 2147483647;
}

#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/preempt.h"
__inline static void __preempt_count_add(int val)
{
  #line 79 
  int tmp;
  #line 79 
  if (0 != 0 && (val == 1 || val == -1)) 
                                         #line 79 
                                         tmp = val; else 
                                                         #line 79 
                                                         tmp = 0;
  #line 79 
  int pao_ID__ = tmp;
  #line 79 
  switch (4UL) {
    #line 79 
    case (unsigned long)1: 
                           #line 79 
    ;
    #line 79 
    if (pao_ID__ == 1) 
                       #line 81 
                       ldv_inline_asm();
    else 
      #line 79 
      if (pao_ID__ == -1) 
                          #line 81 
                          ldv_inline_asm(); else 
                                                 #line 84 
                                                 ldv_inline_asm();
    #line 79 
    break;
    #line 79 
    case (unsigned long)2: 
                           #line 79 
    ;
    #line 79 
    if (pao_ID__ == 1) 
                       #line 81 
                       ldv_inline_asm();
    else 
      #line 79 
      if (pao_ID__ == -1) 
                          #line 81 
                          ldv_inline_asm(); else 
                                                 #line 84 
                                                 ldv_inline_asm();
    #line 79 
    break;
    #line 79 
    case (unsigned long)4: 
                           #line 79 
    ;
    #line 79 
    if (pao_ID__ == 1) 
                       #line 81 
                       ldv_inline_asm();
    else 
      #line 79 
      if (pao_ID__ == -1) 
                          #line 81 
                          ldv_inline_asm(); else 
                                                 #line 84 
                                                 ldv_inline_asm();
    #line 79 
    break;
    #line 79 
    case (unsigned long)8: 
                           #line 79 
    ;
    #line 79 
    if (pao_ID__ == 1) 
                       #line 81 
                       ldv_inline_asm();
    else 
      #line 79 
      if (pao_ID__ == -1) 
                          #line 81 
                          ldv_inline_asm(); else 
                                                 #line 84 
                                                 ldv_inline_asm();
    #line 79 
    break;
    #line 79 
    default: 
             #line 79 
    ;
    #line 79 
    __bad_percpu_size();
  }
  #line 82 
  return;
}

#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/preempt.h"
__inline static void __preempt_count_sub(int val)
{
  #line 84 
  int tmp;
  #line 84 
  if (0 != 0 && (val == -1 || val == 1)) 
                                         #line 84 
                                         tmp = - val; else 
                                                           #line 84 
                                                           tmp = 0;
  #line 84 
  int pao_ID__ = tmp;
  #line 84 
  switch (4UL) {
    #line 84 
    case (unsigned long)1: 
                           #line 84 
    ;
    #line 84 
    if (pao_ID__ == 1) 
                       #line 86 
                       ldv_inline_asm();
    else 
      #line 84 
      if (pao_ID__ == -1) 
                          #line 86 
                          ldv_inline_asm(); else 
                                                 #line 89 
                                                 ldv_inline_asm();
    #line 84 
    break;
    #line 84 
    case (unsigned long)2: 
                           #line 84 
    ;
    #line 84 
    if (pao_ID__ == 1) 
                       #line 86 
                       ldv_inline_asm();
    else 
      #line 84 
      if (pao_ID__ == -1) 
                          #line 86 
                          ldv_inline_asm(); else 
                                                 #line 89 
                                                 ldv_inline_asm();
    #line 84 
    break;
    #line 84 
    case (unsigned long)4: 
                           #line 84 
    ;
    #line 84 
    if (pao_ID__ == 1) 
                       #line 86 
                       ldv_inline_asm();
    else 
      #line 84 
      if (pao_ID__ == -1) 
                          #line 86 
                          ldv_inline_asm(); else 
                                                 #line 89 
                                                 ldv_inline_asm();
    #line 84 
    break;
    #line 84 
    case (unsigned long)8: 
                           #line 84 
    ;
    #line 84 
    if (pao_ID__ == 1) 
                       #line 86 
                       ldv_inline_asm();
    else 
      #line 84 
      if (pao_ID__ == -1) 
                          #line 86 
                          ldv_inline_asm(); else 
                                                 #line 89 
                                                 ldv_inline_asm();
    #line 84 
    break;
    #line 84 
    default: 
             #line 84 
    ;
    #line 84 
    __bad_percpu_size();
  }
  #line 87 
  return;
}

#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
#line 302 
void lockdep_init_map(struct lockdep_map *, char *, struct lock_class_key *, int);
#line 348 
#line 348 
void lock_acquire(struct lockdep_map *, unsigned int, int, int, int, struct lockdep_map *, unsigned long);
#line 352 
#line 352 
void lock_release(struct lockdep_map *, unsigned long);
#line 658 
#line 658 
void lockdep_rcu_suspicious(char *, int, char *);
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 95 
void __raw_spin_lock_init(raw_spinlock_t *, char *, struct lock_class_key *);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_api_smp.h"
#line 22 
void _raw_spin_lock(raw_spinlock_t *);
#line 39 
#line 39 
void _raw_spin_unlock(raw_spinlock_t *);
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
__inline static raw_spinlock_t *spinlock_check(spinlock_t *lock)
{
  #line 327 
  return & lock->__anonCompField_spinlock_25.rlock;
}

#line 336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock(spinlock_t *lock)
{
  #line 338 
  _raw_spin_lock(& lock->__anonCompField_spinlock_25.rlock);
  #line 339 
  return;
}

#line 340 
#line 907  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_main.i.aux"
static void cif_spin_lock_nfc_lock_of_igc_adapter(spinlock_t *lock);
#line 340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 933  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_main.i.aux"
static void cif_spin_lock_stats64_lock_of_igc_adapter(spinlock_t *lock);
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock(spinlock_t *lock)
{
  #line 378 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_25.rlock);
  #line 379 
  return;
}

#line 380 
#line 916  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_main.i.aux"
static void cif_spin_unlock_nfc_lock_of_igc_adapter(spinlock_t *lock);
#line 380  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 942  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_main.i.aux"
static void cif_spin_unlock_stats64_lock_of_igc_adapter(spinlock_t *lock);
#line 40 
#line 40 
void ldv_spin_model_lock(char *);
#line 41 
#line 41 
void ldv_spin_model_unlock(char *);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 21 
void ldv_set_bit(long nr, unsigned long *addr);
#line 22 
#line 22 
void ldv_clear_bit(long nr, unsigned long *addr);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/list.h"
#line 23 
void ldv_init_list_head(struct list_head *list);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 23 
void *ldv_kzalloc(size_t size, gfp_t flags);
#line 25 
#line 25 
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 22 
void *ldv_vzalloc(unsigned long size);
#line 23 
#line 23 
void ldv_vfree(void *addr);
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmdebug.h"
#line 12 
void dump_page(struct page *, char *);
#line 410  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nodemask.h"
#line 410 
extern nodemask_t node_states[5U];
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nodemask.h"
__inline static int node_state(int node, enum node_states state)
{
  #line 415 
  return (int)test_bit((long)node,
               (unsigned long *)(& node_states[(unsigned int)state].bits));
}

#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void __rcu_read_lock(void)
{
  #line 59 
  __preempt_count_add(1);
  #line 60 
  ldv_inline_asm();
  #line 62 
  return;
}

#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void __rcu_read_unlock(void)
{
  #line 66 
  ldv_inline_asm();
  #line 64 
  __preempt_count_sub(1);
  #line 66 
  return;
}

#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcutree.h"
#line 36 
void kfree_call_rcu(struct callback_head *, void (*)(struct callback_head *));
#line 56 
#line 56 
bool rcu_is_watching(void);
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void rcu_lock_acquire(struct lockdep_map *map)
{
  #line 208 
  __here_0: 
            #line 208 
  ;
  #line 208 
  ;
  #line 208 
  lock_acquire(map,0U,0,2,0,(struct lockdep_map *)0,(unsigned long)((void *)0));
  #line 210 
  return;
}

#line 211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void rcu_lock_release(struct lockdep_map *map)
{
  #line 213 
  __here_0: 
            #line 213 
  ;
  #line 213 
  ;
  #line 213 
  lock_release(map,(unsigned long)((void *)0));
  #line 215 
  return;
}

#line 216 
#line 216 
extern struct lockdep_map rcu_lock_map;
#line 220 
#line 220 
int debug_lockdep_rcu_enabled(void);
#line 613  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void rcu_read_lock(void)
{
  #line 615 
  __rcu_read_lock();
  #line 617 
  rcu_lock_acquire(& rcu_lock_map);
  {
    #line 618 
    bool __warned;
    #line 618 
    if (debug_lockdep_rcu_enabled() != 0) 
      #line 618 
      if (! __warned) {
        #line 618 
        if (! rcu_is_watching()) {
          #line 618 
          __warned = (_Bool)1;
          #line 618 
          lockdep_rcu_suspicious((char *)"./include/linux/rcupdate.h",618,(char *)"rcu_read_lock() used illegally while idle");
        }
      }
  }
  #line 621 
  return;
}

#line 665  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void rcu_read_unlock(void)
{
  {
    #line 667 
    bool __warned;
    #line 667 
    if (debug_lockdep_rcu_enabled() != 0) 
      #line 667 
      if (! __warned) {
        #line 667 
        if (! rcu_is_watching()) {
          #line 667 
          __warned = (_Bool)1;
          #line 667 
          lockdep_rcu_suspicious((char *)"./include/linux/rcupdate.h",667,(char *)"rcu_read_unlock() used illegally while idle");
        }
      }
  }
  #line 670 
  __rcu_read_unlock();
  #line 671 
  rcu_lock_release(& rcu_lock_map);
  #line 672 
  return;
}

#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
#line 81 
extern unsigned long jiffies;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ktime.h"
__inline static ktime_t ktime_set(s64 secs, unsigned long nsecs)
{
  #line 39 
  if ((long)(secs > 9223372035LL) != 0L) 
                                         #line 40 
                                         return 9223372036854775807LL;
  #line 42 
  return secs * 1000000000LL + (long long)nsecs;
}

#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
#line 90 
void init_timer_key(struct timer_list *, void (*)(struct timer_list *), unsigned int, char *, struct lock_class_key *);
#line 173 
#line 951  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_main.i.aux"
static int cif_mod_timer(struct timer_list *timer, unsigned long expires);
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
#line 925  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_main.i.aux"
static int cif_del_timer_sync(struct timer_list *timer);
#line 209  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
#line 209 
unsigned long round_jiffies(unsigned long);
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 207 
void __init_work(struct work_struct *, int);
#line 462 
#line 462 
bool cancel_work_sync(struct work_struct *);
#line 554 
#line 778  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_main.i.aux"
static bool cif_schedule_work(struct work_struct *work);
#line 192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page-flags.h"
__inline static int PagePoisoned(struct page *page)
{
  #line 194 
  return page->flags == 18446744073709551615UL;
}

#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static unsigned int readl(void *addr)
{
  #line 59 
  unsigned int ret;
  #line 60 
  ldv_inline_asm();
  #line 59 
  return ret;
}

#line 206 
#line 206 
void *ioremap(resource_size_t, unsigned long);
#line 209 
#line 209 
void iounmap(void *);
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/iomap.h"
#line 107 
void pci_iounmap(struct pci_dev *, void *);
#line 257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/overflow.h"
#line 257 
extern int ( /* missing proto */ __builtin_mul_overflow)(unsigned long x_0, unsigned long x_1, size_t *x_2);
#line 297 
#line 297 
extern int ( /* missing proto */ __builtin_add_overflow)(unsigned long x_0, unsigned long x_1, size_t *x_2);
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/overflow.h"
__inline static size_t __ab_c_size(size_t a, size_t b, size_t c)
{
  #line 297 
  size_t __b_0;
  #line 297 
  size_t *__d_0;
  #line 295 
  size_t __a;
  #line 295 
  size_t __b;
  #line 295 
  size_t *__d;
  #line 297 
  size_t __a_0;
  #line 293 
  size_t bytes;
  {
    #line 295 
    __a = a;
    #line 295 
    __b = b;
    #line 295 
    __d = & bytes;
    #line 295 
    int tmp = & __a == __d;
    }
  #line 295 
  if (__builtin_mul_overflow(__a,__b,__d) != 0) 
                                                #line 296 
                                                return 18446744073709551615UL;
  {
    #line 297 
    __a_0 = bytes;
    #line 297 
    __b_0 = c;
    #line 297 
    __d_0 = & bytes;
    #line 297 
    int tmp_3 = & __a_0 == __d_0;
    }
  #line 297 
  if (__builtin_add_overflow(__a_0,__b_0,__d_0) != 0) 
                                                      #line 298 
                                                      return 18446744073709551615UL;
  #line 300 
  return bytes;
}

#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
#line 900  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_main.i.aux"
static void *cif_vzalloc(unsigned long size);
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
#line 893  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_main.i.aux"
static void cif_vfree(void *addr);
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/topology.h"
__inline static int numa_node_id(void)
{
  #line 88 
  int pscr_ret__;
  {
    #line 88 
    void *__vpp_verify = (void *)0;
    #line 88 
    void *tmp = __vpp_verify;
  }
  #line 88 
  switch (4UL) {
    #line 88 
    int pfo_ret___2;
    #line 88 
    int pfo_ret__;
    #line 88 
    int pfo_ret___0;
    #line 88 
    int pfo_ret___1;
    #line 88 
    case (unsigned long)1: 
                           #line 88 
    ;
    #line 88 
    switch (4UL) {
      #line 88 
      case (unsigned long)1: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)2: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)4: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)8: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      default: 
               #line 88 
      ;
      #line 88 
      __bad_percpu_size();
    }
    #line 88 
    pscr_ret__ = pfo_ret__;
    #line 88 
    break;
    #line 88 
    case (unsigned long)2: 
                           #line 88 
    ;
    #line 88 
    switch (4UL) {
      #line 88 
      case (unsigned long)1: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)2: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)4: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)8: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      default: 
               #line 88 
      ;
      #line 88 
      __bad_percpu_size();
    }
    #line 88 
    pscr_ret__ = pfo_ret___0;
    #line 88 
    break;
    #line 88 
    case (unsigned long)4: 
                           #line 88 
    ;
    #line 88 
    switch (4UL) {
      #line 88 
      case (unsigned long)1: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)2: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)4: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)8: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      default: 
               #line 88 
      ;
      #line 88 
      __bad_percpu_size();
    }
    #line 88 
    pscr_ret__ = pfo_ret___1;
    #line 88 
    break;
    #line 88 
    case (unsigned long)8: 
                           #line 88 
    ;
    #line 88 
    switch (4UL) {
      #line 88 
      case (unsigned long)1: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)2: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)4: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)8: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      default: 
               #line 88 
      ;
      #line 88 
      __bad_percpu_size();
    }
    #line 88 
    pscr_ret__ = pfo_ret___2;
    #line 88 
    break;
    #line 88 
    default: 
             #line 88 
    ;
    #line 88 
    __bad_size_call_parameter();
    #line 88 
    break;
  }
  #line 88 
  return pscr_ret__;
}

#line 177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/topology.h"
__inline static int numa_mem_id(void)
{
  #line 179 
  return numa_node_id();
}

#line 490  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
#line 490 
struct page *__alloc_pages_nodemask(gfp_t, unsigned int, int, nodemask_t *);
#line 494  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
__inline static struct page *__alloc_pages(gfp_t gfp_mask, unsigned int order, int preferred_nid)
{
  #line 496 
  return __alloc_pages_nodemask(gfp_mask,order,preferred_nid,(nodemask_t *)0);
}

#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
__inline static struct page *__alloc_pages_node(int nid, gfp_t gfp_mask, unsigned int order)
{
  #line 506 
  if ((long)((unsigned int)nid > 1023U) != 0L) {
    #line 507 
    ldv_inline_asm();
    #line 508 
    ldv_inline_asm();
    #line 509 
    ldv_inline_asm();
    #line 506 
    ;
  }
  {
    #line 507 
    int tmp_0;
    #line 507 
    if ((gfp_mask & 2097152U) != 0U) {
      #line 507 
      if (node_state(nid,(enum node_states)N_ONLINE) == 0) 
                                                           #line 507 
                                                           tmp_0 = 1; else 
                                                                    #line 507 
                                                                    tmp_0 = 0;
    }
    else 
         #line 507 
         tmp_0 = 0;
    #line 507 
    int __ret_warn_on = tmp_0;
    #line 507 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 508 
      ldv_inline_asm();
      #line 509 
      ldv_inline_asm();
    }
    #line 507 
    long tmp_2 = (long)(__ret_warn_on != 0);
  }
  #line 509 
  return __alloc_pages(gfp_mask,order,nid);
}

#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
__inline static struct page *alloc_pages_node(int nid, gfp_t gfp_mask, unsigned int order)
{
  #line 520 
  if (nid == -1) 
                 #line 521 
                 nid = numa_mem_id();
  #line 523 
  return __alloc_pages_node(nid,gfp_mask,order);
}

#line 566 
#line 566 
void __free_pages(struct page *, unsigned int);
#line 572 
#line 572 
void __page_frag_cache_drain(struct page *, unsigned int);
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
__inline static char *kobject_name(struct kobject *kobj)
{
  #line 91 
  return kobj->name;
}

#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
__inline static void dql_queued(struct dql *dql, unsigned int count)
{
  #line 75 
  if ((long)(count > 268435455U) != 0L) {
    #line 76 
    ldv_inline_asm();
    #line 77 
    ldv_inline_asm();
    #line 78 
    ldv_inline_asm();
    #line 75 
    ;
  }
  #line 77 
  dql->last_obj_cnt = count;
  #line 78 
  ldv_inline_asm();
  #line 86 
  dql->num_queued += count;
  #line 87 
  return;
}

#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
__inline static int dql_avail(struct dql *dql)
{
  #line 93 
  union __anonunion___u_2438 __u;
  #line 93 
  union __anonunion___u_2440 __u_0;
  #line 92 
  unsigned int tmp;
  #line 92 
  __read_once_size((void *)(& dql->adj_limit),(void *)(& __u.__c),4);
  #line 92 
  tmp = __u.__val;
  #line 92 
  __read_once_size((void *)(& dql->num_queued),(void *)(& __u_0.__c),4);
  #line 92 
  return (int)(tmp - (__u_0.__val));
}

#line 96 
#line 96 
void dql_completed(struct dql *, unsigned int);
#line 99 
#line 99 
void dql_reset(struct dql *);
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 189 
void kfree(void *);
#line 607 
#line 484  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_main.i.aux"
static void *kcalloc(size_t n, size_t size, gfp_t flags);
#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 505  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_main.i.aux"
static void *kzalloc(size_t size, gfp_t flags);
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_ref.h"
#line 11 
extern struct tracepoint __tracepoint_page_ref_mod;
#line 30 
#line 30 
void __page_ref_mod(struct page *, int);
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_ref.h"
__inline static int page_ref_count(struct page *page)
{
  #line 67 
  return atomic_read(& page->_refcount);
}

#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_ref.h"
__inline static void page_ref_add(struct page *page, int nr)
{
  #line 93 
  atomic_add(nr,& page->_refcount);
  #line 94 
  if ((int)static_key_false(& __tracepoint_page_ref_mod.key) != 0) 
                                                                   #line 95 
                                                                   __page_ref_mod(page,nr);
  #line 96 
  return;
}

#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static bool is_vmalloc_addr(void *x)
{
  #line 633 
  int tmp_1;
  #line 631 
  unsigned long addr = (unsigned long)x;
  #line 633 
  if (addr >= vmalloc_base) {
    #line 633 
    unsigned long tmp_0;
    #line 633 
    if ((int)_static_cpu_has((unsigned short)528) != 0) 
                                                        #line 633 
                                                        tmp_0 = 14073748835532800UL; else 
                                                                    #line 633 
                                                                    tmp_0 = 35184372088832UL;
    #line 633 
    ;
    #line 633 
    if ((tmp_0 + vmalloc_base) + 18446744073709551615UL > addr) 
                                                                #line 633 
                                                                tmp_1 = 1; else 
                                                                    #line 633 
                                                                    tmp_1 = 0;
  }
  else 
       #line 633 
       tmp_1 = 0;
  #line 633 
  return (_Bool)(tmp_1 != 0);
}

#line 1083  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static int page_to_nid(struct page *page)
{
  #line 1085 
  struct page *p = page;
  {
    #line 1087 
    if ((long)(PagePoisoned(p) != 0) != 0L) {
      #line 1087 
      dump_page(p,(char *)"VM_BUG_ON_PAGE(");
      #line 1088 
      ldv_inline_asm();
      #line 1089 
      ldv_inline_asm();
      #line 1090 
      ldv_inline_asm();
      #line 1087 
      ;
    }
  }
  #line 1087 
  ;
  #line 1087 
  return (int)(p->flags >> 54UL) & 1023;
}

#line 1299  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static void *lowmem_page_address(struct page *page)
{
  #line 1301 
  return (void *)((unsigned long)((unsigned long long)((page - (struct page *)vmemmap_base) / 64L) << 12) + page_offset_base);
}

#line 1369  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static bool page_is_pfmemalloc(struct page *page)
{
  #line 1375 
  return (_Bool)(page->__anonCompField_page_43.__anonCompField___anonunion_129_31.index == 18446744073709551615UL);
}

#line 1370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static char *dev_name(struct device *dev)
{
  #line 1373 
  if (dev->init_name != (char *)0) 
                                   #line 1374 
                                   return dev->init_name;
  #line 1376 
  return kobject_name(& dev->kobj);
}

#line 1417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static void *dev_get_drvdata(struct device *dev)
{
  #line 1419 
  return dev->driver_data;
}

#line 1422  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static void dev_set_drvdata(struct device *dev, void *data)
{
  #line 1424 
  dev->driver_data = data;
  #line 1425 
  return;
}

#line 1680 
#line 1680 
char *dev_driver_string(struct device *);
#line 1712 
#line 1712 
void _dev_err(struct device *, char * , ...);
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
#line 21 
void debug_dma_map_single(struct device *, void *, unsigned long);
#line 24 
#line 24 
void debug_dma_map_page(struct device *, struct page *, size_t, size_t, int, dma_addr_t);
#line 28 
#line 28 
void debug_dma_mapping_error(struct device *, dma_addr_t);
#line 30 
#line 30 
void debug_dma_unmap_page(struct device *, dma_addr_t, size_t, int);
#line 52 
#line 52 
void debug_dma_sync_single_for_cpu(struct device *, dma_addr_t, size_t, int);
#line 56 
#line 56 
void debug_dma_sync_single_for_device(struct device *, dma_addr_t, size_t, int);
#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static int valid_dma_direction(int dma_direction)
{
  #line 146 
  return (unsigned int)dma_direction <= 2U;
}

#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static bool dma_is_direct(struct dma_map_ops *ops)
{
  #line 193 
  return (_Bool)((long)(ops == (struct dma_map_ops *)0) != 0L);
}

#line 200 
#line 200 
dma_addr_t dma_direct_map_page(struct device *, struct page *, unsigned long, size_t, enum dma_data_direction, unsigned long);
#line 210 
#line 210 
void dma_direct_sync_single_for_device(struct device *, dma_addr_t, size_t, enum dma_data_direction);
#line 228 
#line 228 
void dma_direct_unmap_page(struct device *, dma_addr_t, size_t, enum dma_data_direction, unsigned long);
#line 232 
#line 232 
void dma_direct_sync_single_for_cpu(struct device *, dma_addr_t, size_t, enum dma_data_direction);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/dma-mapping.h"
#line 19 
extern struct dma_map_ops *dma_ops;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/dma-mapping.h"
__inline static struct dma_map_ops *get_arch_dma_ops(struct bus_type *bus)
{
  #line 23 
  return dma_ops;
}

#line 261  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static struct dma_map_ops *get_dma_ops(struct device *dev)
{
  #line 263 
  if (dev->dma_ops != (struct dma_map_ops *)0) 
                                               #line 264 
                                               return dev->dma_ops;
  #line 265 
  return get_arch_dma_ops(dev->bus);
}

#line 274  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static dma_addr_t dma_map_page_attrs(struct device *dev, struct page *page, size_t offset, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 279 
  dma_addr_t addr;
  #line 278 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 281 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 282 
    ldv_inline_asm();
    #line 283 
    ldv_inline_asm();
    #line 284 
    ldv_inline_asm();
    #line 281 
    ;
  }
  #line 282 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 283 
                                    addr = dma_direct_map_page(dev,page,offset,size,dir,attrs); else 
                                                                    #line 285 
                                                                    addr = (*(ops->map_page))(dev,page,offset,size,dir,attrs);
  #line 286 
  debug_dma_map_page(dev,page,offset,size,(int)dir,addr);
  #line 288 
  return addr;
}

#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_unmap_page_attrs(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 294 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 296 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 297 
    ldv_inline_asm();
    #line 298 
    ldv_inline_asm();
    #line 299 
    ldv_inline_asm();
    #line 296 
    ;
  }
  #line 297 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 298 
                                    dma_direct_unmap_page(dev,addr,size,dir,attrs);
  else 
    #line 299 
    if (ops->unmap_page != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ))0) 
      #line 300 
      (*(ops->unmap_page))(dev,addr,size,dir,attrs);
  #line 301 
  debug_dma_unmap_page(dev,addr,size,(int)dir);
  #line 302 
  return;
}

#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_sync_single_for_cpu(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir)
{
  #line 380 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 382 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 383 
    ldv_inline_asm();
    #line 384 
    ldv_inline_asm();
    #line 385 
    ldv_inline_asm();
    #line 382 
    ;
  }
  #line 383 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 384 
                                    dma_direct_sync_single_for_cpu(dev,addr,size,dir);
  else 
    #line 385 
    if (ops->sync_single_for_cpu != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ))0) 
      #line 386 
      (*(ops->sync_single_for_cpu))(dev,addr,size,dir);
  #line 387 
  debug_dma_sync_single_for_cpu(dev,addr,size,(int)dir);
  #line 388 
  return;
}

#line 390  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_sync_single_for_device(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir)
{
  #line 394 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 396 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 397 
    ldv_inline_asm();
    #line 398 
    ldv_inline_asm();
    #line 399 
    ldv_inline_asm();
    #line 396 
    ;
  }
  #line 397 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 398 
                                    dma_direct_sync_single_for_device(dev,addr,size,dir);
  else 
    #line 399 
    if (ops->sync_single_for_device != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ))0) 
      #line 400 
      (*(ops->sync_single_for_device))(dev,addr,size,dir);
  #line 401 
  debug_dma_sync_single_for_device(dev,addr,size,(int)dir);
  #line 402 
  return;
}

#line 433  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static int dma_mapping_error(struct device *dev, dma_addr_t dma_addr)
{
  #line 435 
  debug_dma_mapping_error(dev,dma_addr);
  #line 437 
  if (dma_addr == 18446744073709551615ULL) 
                                           #line 438 
                                           return -12;
  #line 439 
  return 0;
}

#line 442 
#line 442 
void *dma_alloc_attrs(struct device *, size_t, dma_addr_t *, gfp_t, unsigned long);
#line 444 
#line 444 
void dma_free_attrs(struct device *, size_t, void *, dma_addr_t, unsigned long);
#line 460 
#line 460 
int dma_set_mask(struct device *, u64);
#line 461 
#line 461 
int dma_set_coherent_mask(struct device *, u64);
#line 580  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static dma_addr_t dma_map_single_attrs(struct device *dev, void *ptr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 584 
  int __ret_warn_once;
  {
    #line 584 
    bool __warned;
    #line 584 
    __ret_warn_once = (int)is_vmalloc_addr(ptr) != 0;
    #line 584 
    if ((long)(__ret_warn_once != 0) != 0L && (long)(! __warned) != 0L) {
      #line 584 
      __warned = (_Bool)1;
      {
        #line 584 
        int __ret_warn_on = 1;
        #line 584 
        if ((long)(__ret_warn_on != 0) != 0L) {
          #line 584 
          __warn_printk((char *)"%s %s: ",dev_driver_string(dev),dev_name(dev));
          #line 585 
          ldv_inline_asm();
          #line 586 
          ldv_inline_asm();
        }
        #line 584 
        long tmp_2 = (long)(__ret_warn_on != 0);
      }
    }
    }
  #line 584 
  if ((long)((long)(__ret_warn_once != 0)) != 0L) 
                                                  #line 586 
                                                  return 18446744073709551615ULL;
  #line 587 
  debug_dma_map_single(dev,ptr,size);
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  return dma_map_page_attrs(dev,
                           (struct page *)((__phys_addr((unsigned long)ptr) >> 12) + vmemmap_base),
                           (unsigned long)ptr & 4095UL,size,dir,attrs);
}

#line 592  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_unmap_single_attrs(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 595 
  dma_unmap_page_attrs(dev,addr,size,dir,attrs);
  #line 596 
  return;
}

#line 598  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_sync_single_range_for_cpu(struct device *dev, dma_addr_t addr, unsigned long offset, size_t size, enum dma_data_direction dir)
{
  #line 602 
  dma_sync_single_for_cpu(dev,addr + (unsigned long long)offset,size,dir);
  #line 603 
  return;
}

#line 605  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_sync_single_range_for_device(struct device *dev, dma_addr_t addr, unsigned long offset, size_t size, enum dma_data_direction dir)
{
  #line 609 
  dma_sync_single_for_device(dev,addr + (unsigned long long)offset,size,dir);
  #line 610 
  return;
}

#line 641  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void *dma_alloc_coherent(struct device *dev, size_t size, dma_addr_t *dma_handle, gfp_t gfp)
{
  #line 645 
  return dma_alloc_attrs(dev,size,dma_handle,gfp,
                      (unsigned long)(gfp >> 5) & 256UL);
}

#line 649  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_free_coherent(struct device *dev, size_t size, void *cpu_addr, dma_addr_t dma_handle)
{
  #line 652 
  dma_free_attrs(dev,size,cpu_addr,dma_handle,0UL);
  #line 653 
  return;
}

#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_frag_size(skb_frag_t *frag)
{
  #line 327 
  return frag->bv_len;
}

#line 1023 
#line 1023 
void consume_skb(struct sk_buff *);
#line 1035 
#line 1035 
struct sk_buff *build_skb(void *, unsigned int);
#line 1126 
#line 1126 
int __skb_pad(struct sk_buff *, int, bool);
#line 1139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_pad(struct sk_buff *skb, int pad)
{
  #line 1141 
  return __skb_pad(skb,pad,(_Bool)1);
}

#line 1214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void __skb_set_hash(struct sk_buff *skb, __u32 hash, bool is_sw, bool is_l4)
{
  #line 1216 
  skb->l4_hash = (unsigned char)is_l4;
  #line 1217 
  skb->sw_hash = (unsigned char)is_sw;
  #line 1218 
  skb->hash = hash;
  #line 1219 
  return;
}

#line 1222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_set_hash(struct sk_buff *skb, __u32 hash, enum pkt_hash_types type)
{
  #line 1225 
  __skb_set_hash(skb,hash,(_Bool)0,(_Bool)(type == (unsigned int)PKT_HASH_TYPE_L4));
  #line 1226 
  return;
}

#line 1381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_end_pointer(struct sk_buff *skb)
{
  #line 1383 
  return skb->head + (unsigned long)skb->end;
}

#line 2065  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static bool skb_is_nonlinear(struct sk_buff *skb)
{
  #line 2067 
  return (_Bool)(skb->data_len != 0U);
}

#line 2070  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_headlen(struct sk_buff *skb)
{
  #line 2072 
  return skb->len - skb->data_len;
}

#line 2142 
#line 2142 
void skb_add_rx_frag(struct sk_buff *, int, struct page *, int, int, unsigned int);
#line 2151  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_tail_pointer(struct sk_buff *skb)
{
  #line 2153 
  return skb->head + (unsigned long)skb->tail;
}

#line 2190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void *__skb_put(struct sk_buff *skb, unsigned int len)
{
  #line 2192 
  void *tmp = skb_tail_pointer(skb);
  #line 2193 
  if ((long)((int)skb_is_nonlinear(skb) != 0) != 0L) {
    #line 2194 
    ldv_inline_asm();
    #line 2195 
    ldv_inline_asm();
    #line 2196 
    ldv_inline_asm();
    #line 2193 
    ;
  }
  #line 2194 
  skb->tail += len;
  #line 2195 
  skb->len += len;
  #line 2196 
  return tmp;
}

#line 2266 
#line 2266 
void *__pskb_pull_tail(struct sk_buff *, int);
#line 2282  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static bool pskb_may_pull(struct sk_buff *skb, unsigned int len)
{
  #line 2284 
  ;
  #line 2284 
  if ((long)(skb_headlen(skb) >= len) != 0L) 
                                             #line 2285 
                                             return (_Bool)1;
  #line 2286 
  if ((long)(skb->len < len) != 0L) 
                                    #line 2287 
                                    return (_Bool)0;
  #line 2288 
  ;
  #line 2288 
  ;
  #line 2288 
  return (_Bool)(__pskb_pull_tail(skb,(int)(len - skb_headlen(skb))) != (void *)0);
}

#line 2299  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_headroom(struct sk_buff *skb)
{
  #line 2301 
  return (unsigned int)(skb->data - skb->head);
}

#line 2338  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_reserve(struct sk_buff *skb, int len)
{
  #line 2340 
  skb->data += (unsigned long)len;
  #line 2341 
  skb->tail += (unsigned int)len;
  #line 2342 
  return;
}

#line 2475  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_network_header(struct sk_buff *skb)
{
  #line 2477 
  return skb->head + (unsigned long)skb->network_header;
}

#line 2549  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_checksum_start_offset(struct sk_buff *skb)
{
  #line 2551 
  ;
  #line 2551 
  return (int)((unsigned int)skb->__anonCompField_sk_buff_93.__anonCompField___anonunion_494_92.csum_start - skb_headroom(skb));
}

#line 2554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_checksum_start(struct sk_buff *skb)
{
  #line 2556 
  return skb->head + (unsigned long)skb->__anonCompField_sk_buff_93.__anonCompField___anonunion_494_92.csum_start;
}

#line 2574  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_network_offset(struct sk_buff *skb)
{
  #line 2576 
  ;
  #line 2576 
  return (int)(skb_network_header(skb) - skb->data);
}

#line 2820 
#line 2820 
struct sk_buff *__napi_alloc_skb(struct napi_struct *, unsigned int, gfp_t);
#line 2822  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct sk_buff *napi_alloc_skb(struct napi_struct *napi, unsigned int length)
{
  #line 2825 
  return __napi_alloc_skb(napi,length,2592U);
}

#line 2827 
#line 2827 
void napi_consume_skb(struct sk_buff *, int);
#line 2841  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct page *__dev_alloc_pages(gfp_t gfp_mask, unsigned int order)
{
  #line 2852 
  gfp_mask |= 393216U;
  #line 2854 
  return alloc_pages_node(-1,gfp_mask,order);
}

#line 2857  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct page *dev_alloc_pages(unsigned int order)
{
  #line 2859 
  return __dev_alloc_pages(10784U,order);
}

#line 2896  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_frag_off(skb_frag_t *frag)
{
  #line 2898 
  return frag->bv_offset;
}

#line 2938  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct page *skb_frag_page(skb_frag_t *frag)
{
  #line 2940 
  return frag->bv_page;
}

#line 3067  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static dma_addr_t skb_frag_dma_map(struct device *dev, skb_frag_t *frag, size_t offset, size_t size, enum dma_data_direction dir)
{
  #line 3072 
  ;
  #line 3072 
  ;
  #line 3072 
  ;
  #line 3072 
  ;
  #line 3072 
  return dma_map_page_attrs(dev,skb_frag_page(frag),
                           (unsigned long)skb_frag_off(frag) + offset,size,
                           dir,0UL);
}

#line 3167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_padto(struct sk_buff *skb, unsigned int len)
{
  #line 3169 
  unsigned int size = skb->len;
  #line 3170 
  if ((long)(size >= len) != 0L) 
                                 #line 3171 
                                 return 0;
  #line 3172 
  return skb_pad(skb,(int)(len - size));
}

#line 3186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int __skb_put_padto(struct sk_buff *skb, unsigned int len, bool free_on_error)
{
  #line 3189 
  unsigned int size = skb->len;
  #line 3191 
  if ((long)(size < len) != 0L) {
    #line 3192 
    len -= size;
    #line 3193 
    if (__skb_pad(skb,(int)len,(_Bool)((bool)((int)free_on_error) != 0)) != 0) 
      #line 3194 
      return -12;
    #line 3195 
    __skb_put(skb,len);
  }
  #line 3197 
  return 0;
}

#line 3210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_put_padto(struct sk_buff *skb, unsigned int len)
{
  #line 3212 
  return __skb_put_padto(skb,len,(_Bool)1);
}

#line 3767 
#line 3767 
void skb_clone_tx_timestamp(struct sk_buff *);
#line 3813 
#line 3813 
void skb_tstamp_tx(struct sk_buff *, struct skb_shared_hwtstamps *);
#line 3828  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_tx_timestamp(struct sk_buff *skb)
{
  #line 3830 
  skb_clone_tx_timestamp(skb);
  #line 3831 
  ;
  #line 3831 
  if (((int)((struct skb_shared_info *)skb_end_pointer(skb))->tx_flags & 2) != 0) 
    #line 3832 
    skb_tstamp_tx(skb,(struct skb_shared_hwtstamps *)0);
  #line 3833 
  return;
}

#line 4287  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_record_rx_queue(struct sk_buff *skb, u16 rx_queue)
{
  #line 4289 
  skb->queue_mapping = (unsigned short)((unsigned int)rx_queue + 1U);
  #line 4290 
  return;
}

#line 4467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_checksum_none_assert(struct sk_buff *skb)
{
  #line 4469 
  return;
}

#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/u64_stats_sync.h"
__inline static void u64_stats_update_begin(struct u64_stats_sync *syncp)
{
  #line 124 
  return;
}

#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/u64_stats_sync.h"
__inline static unsigned int __u64_stats_fetch_begin(struct u64_stats_sync *syncp)
{
  #line 163 
  return 0U;
}

#line 175  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/u64_stats_sync.h"
__inline static bool __u64_stats_fetch_retry(struct u64_stats_sync *syncp, unsigned int start)
{
  #line 181 
  return (_Bool)0;
}

#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/u64_stats_sync.h"
__inline static unsigned int u64_stats_fetch_begin_irq(struct u64_stats_sync *syncp)
{
  #line 205 
  return __u64_stats_fetch_begin(syncp);
}

#line 208  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/u64_stats_sync.h"
__inline static bool u64_stats_fetch_retry_irq(struct u64_stats_sync *syncp, unsigned int start)
{
  #line 214 
  return __u64_stats_fetch_retry(syncp,start);
}

#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hardirq.h"
#line 12 
void synchronize_irq(unsigned int);
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 959  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_main.i.aux"
static int cif_request_irq(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char *name, void *dev);
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 967  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_main.i.aux"
static void *cif_free_irq(unsigned int ldv_func_arg1, void *ldv_func_arg2);
#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 423 
void __napi_schedule(struct napi_struct *);
#line 431 
#line 431 
bool napi_schedule_prep(struct napi_struct *);
#line 440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void napi_schedule(struct napi_struct *n)
{
  #line 442 
  if ((int)napi_schedule_prep(n) != 0) 
                                       #line 443 
                                       __napi_schedule(n);
  #line 444 
  return;
}

#line 468 
#line 468 
bool napi_complete_done(struct napi_struct *, int);
#line 503 
#line 503 
void napi_disable(struct napi_struct *);
#line 512  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void napi_enable(struct napi_struct *n)
{
  #line 514 
  int tmp_0;
  #line 514 
  if (test_bit(0L,& n->state)) 
                               #line 514 
                               tmp_0 = 0; else 
                                               #line 514 
                                               tmp_0 = 1;
  #line 514 
  if ((long)tmp_0 != 0L) {
    #line 515 
    ldv_inline_asm();
    #line 516 
    ldv_inline_asm();
    #line 517 
    ldv_inline_asm();
    #line 514 
    ;
  }
  #line 516 
  cif_clear_bit(0L,& n->state);
  #line 517 
  cif_clear_bit(3L,& n->state);
  #line 518 
  return;
}

#line 528  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void napi_synchronize(struct napi_struct *n)
{
  #line 531 
  while (1) {
    #line 531 
    if (! ((int)test_bit(0L,& n->state) != 0)) 
                                               #line 531 
                                               break;
    #line 532 
    msleep(1U);
  }
  #line 536 
  return;
}

#line 2132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static struct netdev_queue *netdev_get_tx_queue(struct net_device *dev, unsigned int index)
{
  #line 2135 
  return dev->_tx + (unsigned long)index;
}

#line 2203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void *netdev_priv(struct net_device *dev)
{
  #line 2205 
  return (void *)((char *)dev + 3328UL);
}

#line 2234 
#line 2234 
void netif_napi_add(struct net_device *, struct napi_struct *, int (*)(struct napi_struct *, int ), int);
#line 2263 
#line 2263 
void netif_napi_del(struct napi_struct *);
#line 2679 
#line 991  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_main.i.aux"
static void cif_free_netdev(struct net_device *dev);
#line 3094  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 3094 
void netif_schedule_queue(struct netdev_queue *);
#line 3104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_start_queue(struct netdev_queue *dev_queue)
{
  #line 3106 
  cif_clear_bit(0L,& dev_queue->state);
  #line 3107 
  return;
}

#line 3120  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_start_all_queues(struct net_device *dev)
{
  #line 3122 
  unsigned int i;
  #line 3124 
  i = 0U;
  #line 3124 
  while (dev->num_tx_queues > i) {
    {
      #line 3125 
      struct netdev_queue *txq = netdev_get_tx_queue(dev,i);
      #line 3126 
      netif_tx_start_queue(txq);
    }
    #line 3124 
    i ++;
  }
  #line 3128 
  return;
}

#line 3130 
#line 3130 
void netif_tx_wake_queue(struct netdev_queue *);
#line 3154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_stop_queue(struct netdev_queue *dev_queue)
{
  #line 3156 
  cif_set_bit(0L,& dev_queue->state);
  #line 3157 
  return;
}

#line 3171 
#line 3171 
void netif_tx_stop_all_queues(struct net_device *);
#line 3174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_tx_queue_stopped(struct netdev_queue *dev_queue)
{
  #line 3176 
  return test_bit(0L,& dev_queue->state);
}

#line 3190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_xmit_stopped(struct netdev_queue *dev_queue)
{
  #line 3192 
  return (_Bool)((dev_queue->state & 3UL) != 0UL);
}

#line 3235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netdev_tx_sent_queue(struct netdev_queue *dev_queue, unsigned int bytes)
{
  #line 3239 
  dql_queued(& dev_queue->dql,bytes);
  #line 3241 
  if ((long)(dql_avail(& dev_queue->dql) >= 0) != 0L) 
                                                      #line 3242 
                                                      return;
  #line 3244 
  cif_set_bit(1L,& dev_queue->state);
  #line 3245 
  ldv_inline_asm();
  #line 3254 
  if ((long)(dql_avail(& dev_queue->dql) >= 0) != 0L) 
                                                      #line 3255 
                                                      cif_clear_bit(1L,& dev_queue->state);
  #line 3256 
  return;
}

#line 3301  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netdev_tx_completed_queue(struct netdev_queue *dev_queue, unsigned int pkts, unsigned int bytes)
{
  #line 3305 
  if ((long)(bytes == 0U) != 0L) 
                                 #line 3306 
                                 return;
  #line 3308 
  dql_completed(& dev_queue->dql,bytes);
  #line 3309 
  ldv_inline_asm();
  #line 3317 
  if ((long)(dql_avail(& dev_queue->dql) < 0) != 0L) 
                                                     #line 3318 
                                                     return;
  #line 3320 
  if ((int)test_and_set_bit(1L,& dev_queue->state) != 0) 
                                                         #line 3321 
                                                         netif_schedule_queue(dev_queue);
  #line 3322 
  return;
}

#line 3341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netdev_tx_reset_queue(struct netdev_queue *q)
{
  #line 3344 
  cif_clear_bit(1L,& q->state);
  #line 3345 
  dql_reset(& q->dql);
  #line 3346 
  return;
}

#line 3387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_running(struct net_device *dev)
{
  #line 3389 
  return test_bit(0L,& dev->state);
}

#line 3420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_stop_subqueue(struct net_device *dev, u16 queue_index)
{
  #line 3422 
  struct netdev_queue *txq = netdev_get_tx_queue(dev,(unsigned int)queue_index);
  #line 3423 
  netif_tx_stop_queue(txq);
  #line 3424 
  return;
}

#line 3433  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool __netif_subqueue_stopped(struct net_device *dev, u16 queue_index)
{
  #line 3436 
  struct netdev_queue *txq = netdev_get_tx_queue(dev,(unsigned int)queue_index);
  #line 3438 
  return netif_tx_queue_stopped(txq);
}

#line 3454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_wake_subqueue(struct net_device *dev, u16 queue_index)
{
  #line 3456 
  struct netdev_queue *txq = netdev_get_tx_queue(dev,(unsigned int)queue_index);
  #line 3458 
  netif_tx_wake_queue(txq);
  #line 3459 
  return;
}

#line 3577 
#line 3577 
int netif_set_real_num_tx_queues(struct net_device *, unsigned int);
#line 3580 
#line 3580 
int netif_set_real_num_rx_queues(struct net_device *, unsigned int);
#line 3617 
#line 3617 
void __dev_kfree_skb_any(struct sk_buff *, enum skb_free_reason);
#line 3648  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void dev_kfree_skb_any(struct sk_buff *skb)
{
  #line 3650 
  __dev_kfree_skb_any(skb,(enum skb_free_reason)SKB_REASON_DROPPED);
  #line 3651 
  return;
}

#line 3665 
#line 3665 
gro_result_t napi_gro_receive(struct napi_struct *, struct sk_buff *);
#line 3803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_carrier_ok(struct net_device *dev)
{
  #line 3805 
  int tmp_0;
  #line 3805 
  if ((int)test_bit(2L,& dev->state) != 0) 
                                           #line 3805 
                                           tmp_0 = 0; else 
                                                           #line 3805 
                                                           tmp_0 = 1;
  #line 3805 
  return (_Bool)(tmp_0 != 0);
}

#line 3812 
#line 3812 
void netif_carrier_on(struct net_device *);
#line 3814 
#line 3814 
void netif_carrier_off(struct net_device *);
#line 3876  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_device_present(struct net_device *dev)
{
  #line 3878 
  return test_bit(1L,& dev->state);
}

#line 3881 
#line 3881 
void netif_device_detach(struct net_device *);
#line 3923  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static u32 netif_msg_init(int debug_value, int default_msg_enable_bits)
{
  #line 3926 
  if ((unsigned int)debug_value > 31U) 
                                       #line 3927 
                                       return (unsigned int)default_msg_enable_bits;
  #line 3928 
  if (debug_value == 0) 
                        #line 3929 
                        return 0U;
  #line 3931 
  return (1U << debug_value) + 4294967295U;
}

#line 3984  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_trans_update(struct net_device *dev)
{
  #line 3986 
  struct netdev_queue *txq = netdev_get_tx_queue(dev,0U);
  #line 3988 
  if (txq->trans_start != jiffies) 
                                   #line 3989 
                                   txq->trans_start = jiffies;
  #line 3990 
  return;
}

#line 4131 
#line 983  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_main.i.aux"
static int cif_register_netdev(struct net_device *dev);
#line 4132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 999  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_main.i.aux"
static void cif_unregister_netdev(struct net_device *dev);
#line 4137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 4137 
int __hw_addr_sync_dev(struct netdev_hw_addr_list *, struct net_device *, int (*)(struct net_device *, unsigned char *), int (*)(struct net_device *, unsigned char *));
#line 4186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static int __dev_uc_sync(struct net_device *dev, int (*sync)(struct net_device *, unsigned char *), int (*unsync)(struct net_device *, unsigned char *))
{
  #line 4192 
  return __hw_addr_sync_dev(& dev->uc,dev,sync,unsync);
}

#line 4371 
#line 4371 
void netdev_rss_key_fill(void *, size_t);
#line 4373 
#line 4373 
int skb_checksum_help(struct sk_buff *);
#line 4452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netdev_xmit_more(void)
{
  #line 4454 
  u8 pscr_ret__;
  #line 4454 
  __this_cpu_preempt_check((char *)"read");
  {
    #line 4454 
    void *__vpp_verify = (void *)0;
    #line 4454 
    void *tmp = __vpp_verify;
  }
  #line 4454 
  switch (1UL) {
    #line 4454 
    u8 pfo_ret___1;
    #line 4454 
    u8 pfo_ret___2;
    #line 4454 
    u8 pfo_ret__;
    #line 4454 
    u8 pfo_ret___0;
    #line 4454 
    case (unsigned long)1: 
                           #line 4454 
    ;
    #line 4454 
    switch (1UL) {
      #line 4454 
      case (unsigned long)1: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)2: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)4: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)8: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      default: 
               #line 4454 
      ;
      #line 4454 
      __bad_percpu_size();
    }
    #line 4454 
    pscr_ret__ = pfo_ret__;
    #line 4454 
    break;
    #line 4454 
    case (unsigned long)2: 
                           #line 4454 
    ;
    #line 4454 
    switch (1UL) {
      #line 4454 
      case (unsigned long)1: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)2: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)4: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)8: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      default: 
               #line 4454 
      ;
      #line 4454 
      __bad_percpu_size();
    }
    #line 4454 
    pscr_ret__ = pfo_ret___0;
    #line 4454 
    break;
    #line 4454 
    case (unsigned long)4: 
                           #line 4454 
    ;
    #line 4454 
    switch (1UL) {
      #line 4454 
      case (unsigned long)1: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)2: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)4: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)8: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      default: 
               #line 4454 
      ;
      #line 4454 
      __bad_percpu_size();
    }
    #line 4454 
    pscr_ret__ = pfo_ret___1;
    #line 4454 
    break;
    #line 4454 
    case (unsigned long)8: 
                           #line 4454 
    ;
    #line 4454 
    switch (1UL) {
      #line 4454 
      case (unsigned long)1: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)2: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)4: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)8: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      default: 
               #line 4454 
      ;
      #line 4454 
      __bad_percpu_size();
    }
    #line 4454 
    pscr_ret__ = pfo_ret___2;
    #line 4454 
    break;
    #line 4454 
    default: 
             #line 4454 
    ;
    #line 4454 
    __bad_size_call_parameter();
    #line 4454 
    break;
  }
  #line 4454 
  return (_Bool)((unsigned int)pscr_ret__ != 0U);
}

#line 4750 
#line 4750 
void netdev_err(struct net_device *, char * , ...);
#line 4752 
#line 4752 
void netdev_warn(struct net_device *, char * , ...);
#line 4756 
#line 4756 
void netdev_info(struct net_device *, char * , ...);
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
#line 28 
int eth_platform_get_mac_address(struct device *, u8 *);
#line 31 
#line 31 
u32 eth_get_headlen(struct net_device *, void *, unsigned int);
#line 32 
#line 32 
__be16 eth_type_trans(struct sk_buff *, struct net_device *);
#line 51 
#line 975  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_main.i.aux"
static struct net_device *cif_alloc_etherdev_mqs(int sizeof_priv, unsigned int txqs, unsigned int rxqs);
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_zero_ether_addr(u8 *addr)
{
  #line 101 
  return (_Bool)((*((u32 *)addr) | (unsigned int)*((u16 *)(addr + 4U))) == 0U);
}

#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_multicast_ether_addr(u8 *addr)
{
  #line 119 
  u32 a = *((u32 *)addr);
  #line 126 
  return (_Bool)((a & 1U) != 0U);
}

#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_valid_ether_addr(u8 *addr)
{
  #line 195 
  int tmp_1;
  #line 195 
  if (is_multicast_ether_addr(addr)) 
                                     #line 195 
                                     tmp_1 = 0;
  else {
    #line 195 
    if (is_zero_ether_addr(addr)) 
                                  #line 195 
                                  tmp_1 = 0; else 
                                                  #line 195 
                                                  tmp_1 = 1;
  }
  #line 195 
  return (_Bool)(tmp_1 != 0);
}

#line 276  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static void ether_addr_copy(u8 *dst, u8 *src)
{
  #line 279 
  *((u32 *)dst) = *((u32 *)src);
  #line 280 
  *((u16 *)(dst + 4U)) = *((u16 *)(src + 4U));
  #line 281 
  return;
}

#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool ether_addr_equal(u8 *addr1, u8 *addr2)
{
  #line 318 
  u32 fold = (*((u32 *)addr1) ^ *((u32 *)addr2)) | (unsigned int)((int)*((u16 *)(addr1 + 4U)) ^ (int)*((u16 *)(addr2 + 4U)));
  #line 321 
  return (_Bool)(fold == 0U);
}

#line 530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static int eth_skb_pad(struct sk_buff *skb)
{
  #line 532 
  return skb_put_padto(skb,60U);
}

#line 300  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static bool eth_type_vlan(__be16 ethertype)
{
  #line 302 
  switch ((int)ethertype) {
    #line 303 
    case 129: 
              #line 303 
    ;
    #line 304 
    case 43144: 
                #line 304 
    ;
    #line 305 
    return (_Bool)1;
    #line 306 
    default: 
             #line 306 
    ;
    #line 307 
    return (_Bool)0;
  }
}

#line 580  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static __be16 __vlan_get_protocol(struct sk_buff *skb, __be16 type, int *depth)
{
  #line 583 
  unsigned int vlan_depth = (unsigned int)skb->mac_len;
  #line 589 
  if ((int)eth_type_vlan((unsigned short)((int)type)) != 0) {
    #line 590 
    if (vlan_depth != 0U) {
      #line 591 
      int __ret_warn_on;
      #line 591 
      __ret_warn_on = vlan_depth <= 3U;
      #line 591 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 592 
        ldv_inline_asm();
        #line 593 
        ldv_inline_asm();
      }
      #line 591 
      if ((long)((long)(__ret_warn_on != 0)) != 0L) 
                                                    #line 592 
                                                    return (unsigned short)0U;
      #line 593 
      vlan_depth += 4294967292U;
    }
    else 
         #line 595 
         vlan_depth = 14U;
    #line 597 
    while (1) {
      {
        #line 598 
        struct vlan_hdr *vh;
        #line 600 
        int tmp_1;
        #line 600 
        if (pskb_may_pull(skb,vlan_depth + 4U)) 
                                                #line 600 
                                                tmp_1 = 0; else 
                                                                #line 600 
                                                                tmp_1 = 1;
        #line 600 
        if ((long)tmp_1 != 0L) 
                               #line 602 
                               return (unsigned short)0U;
        #line 604 
        vh = (struct vlan_hdr *)(skb->data + (unsigned long)vlan_depth);
        #line 605 
        type = vh->h_vlan_encapsulated_proto;
        #line 606 
        vlan_depth += 4U;
      }
      #line 607 
      if (! ((int)eth_type_vlan((unsigned short)((int)type)) != 0)) 
                                                                    #line 597 
                                                                    break;
    }
  }
  #line 610 
  if (depth != (int *)0) 
                         #line 611 
                         *depth = (int)vlan_depth;
  #line 613 
  return type;
}

#line 623  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static __be16 vlan_get_protocol(struct sk_buff *skb)
{
  #line 625 
  return __vlan_get_protocol(skb,(unsigned short)((int)skb->protocol),(int *)0);
}

#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/aer.h"
#line 45 
int pci_enable_pcie_error_reporting(struct pci_dev *);
#line 46 
#line 46 
int pci_disable_pcie_error_reporting(struct pci_dev *);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ip.h"
__inline static struct iphdr *ip_hdr(struct sk_buff *skb)
{
  #line 21 
  return (struct iphdr *)skb_network_header(skb);
}

#line 1069  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ipv6.h"
#line 1069 
int ipv6_find_hdr(struct sk_buff *, unsigned int *, int, unsigned short *, int *);
#line 488  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static int pci_channel_offline(struct pci_dev *pdev)
{
  #line 490 
  return pdev->error_state != 1U;
}

#line 1084 
#line 1084 
int pci_read_config_word(struct pci_dev *, int, u16 *);
#line 1087 
#line 1087 
int pci_write_config_word(struct pci_dev *, int, u16);
#line 1090 
#line 1090 
int pcie_capability_read_word(struct pci_dev *, int, u16 *);
#line 1092 
#line 1092 
int pcie_capability_write_word(struct pci_dev *, int, u16);
#line 1133 
#line 1133 
int pci_enable_device_mem(struct pci_dev *);
#line 1157 
#line 1157 
void pci_disable_device(struct pci_dev *);
#line 1160 
#line 1160 
void pci_set_master(struct pci_dev *);
#line 1185 
#line 1185 
void pcie_print_link_status(struct pci_dev *);
#line 1202 
#line 1202 
int pci_select_bars(struct pci_dev *, unsigned long);
#line 1203 
#line 1203 
bool pci_device_is_present(struct pci_dev *);
#line 1219 
#line 1219 
int pci_save_state(struct pci_dev *);
#line 1286 
#line 1286 
int pci_request_selected_regions(struct pci_dev *, int, char *);
#line 1288 
#line 1288 
void pci_release_selected_regions(struct pci_dev *, int);
#line 1346 
#line 1007  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_main.i.aux"
static int cif___pci_register_driver(struct pci_driver *ldv_func_arg1, struct module *ldv_func_arg2, char *mod_name);
#line 1352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 1015  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_main.i.aux"
static void cif_pci_unregister_driver(struct pci_driver *dev);
#line 1431  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 1431 
void pci_disable_msi(struct pci_dev *);
#line 1433 
#line 1433 
void pci_disable_msix(struct pci_dev *);
#line 1436 
#line 1436 
int pci_enable_msi(struct pci_dev *);
#line 1437 
#line 1437 
int pci_enable_msix_range(struct pci_dev *, struct msix_entry *, int, int);
#line 1633  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static void pci_release_mem_regions(struct pci_dev *pdev)
{
  #line 1635 
  ;
  #line 1635 
  pci_release_selected_regions(pdev,pci_select_bars(pdev,512UL));
  #line 1637 
  return;
}

#line 1833  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static void *pci_get_drvdata(struct pci_dev *pdev)
{
  #line 1835 
  return dev_get_drvdata(& pdev->dev);
}

#line 1838  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static void pci_set_drvdata(struct pci_dev *pdev, void *data)
{
  #line 1840 
  dev_set_drvdata(& pdev->dev,data);
  #line 1841 
  return;
}

#line 2092  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static int pci_pcie_cap(struct pci_dev *dev)
{
  #line 2094 
  return (int)dev->pcie_cap;
}

#line 2103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static bool pci_is_pcie(struct pci_dev *dev)
{
  #line 2105 
  return (_Bool)(pci_pcie_cap(dev) != 0);
}

#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_i225.h"
#line 11 
bool igc_get_flash_presence_i225(struct igc_hw *hw);
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_base.h"
#line 8 
void igc_rx_fifo_flush_base(struct igc_hw *hw);
#line 9 
#line 9 
void igc_power_down_phy_copper_base(struct igc_hw *hw);
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_hw.h"
#line 419  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_base.c"
struct igc_info igc_base_info;
#line 307  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_hw.h"
#line 4230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
s32 igc_read_pcie_cap_reg(struct igc_hw *hw, u32 reg, u16 *value);
#line 308  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_hw.h"
#line 4242  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
s32 igc_write_pcie_cap_reg(struct igc_hw *hw, u32 reg, u16 *value);
#line 309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_hw.h"
#line 4216  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
void igc_read_pci_cfg(struct igc_hw *hw, u32 reg, u16 *value);
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_hw.h"
#line 4223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
void igc_write_pci_cfg(struct igc_hw *hw, u32 reg, u16 *value);
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc.h"
#line 17 
void igc_set_ethtool_ops(struct net_device *netdev);
#line 22 
#line 1949  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
void igc_up(struct igc_adapter *adapter);
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc.h"
#line 2182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
void igc_down(struct igc_adapter *adapter);
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc.h"
#line 295  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
int igc_setup_tx_resources(struct igc_ring *tx_ring);
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc.h"
#line 451  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
int igc_setup_rx_resources(struct igc_ring *rx_ring);
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc.h"
#line 184  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
void igc_free_tx_resources(struct igc_ring *tx_ring);
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc.h"
#line 414  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
void igc_free_rx_resources(struct igc_ring *rx_ring);
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc.h"
#line 4603  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
unsigned int igc_get_max_rss_queues(struct igc_adapter *adapter);
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc.h"
#line 4590  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
void igc_set_flag_queue_pairs(struct igc_adapter *adapter, u32 max_rss_queues);
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc.h"
#line 4686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
int igc_reinit_queues(struct igc_adapter *adapter);
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc.h"
#line 32 
void igc_write_rss_indir_tbl(struct igc_adapter *adapter);
#line 33 
#line 3075  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
bool igc_has_link(struct igc_adapter *adapter);
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc.h"
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
void igc_reset(struct igc_adapter *adapter);
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc.h"
#line 4279  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
int igc_set_spd_dplx(struct igc_adapter *adapter, u32 spd, u8 dplx);
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc.h"
#line 2536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
int igc_add_mac_steering_filter(struct igc_adapter *adapter, u8 *addr, u8 queue, u8 flags);
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc.h"
#line 2593  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
int igc_del_mac_steering_filter(struct igc_adapter *adapter, u8 *addr, u8 queue, u8 flags);
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc.h"
#line 1982  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
void igc_update_stats(struct igc_adapter *adapter);
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc.h"
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
char igc_driver_name[4U];
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc.h"
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
char igc_driver_version[8U];
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc.h"
__inline static __le32 igc_test_staterr(union igc_adv_rx_desc *rx_desc, u32 stat_err_bits)
{
  #line 145 
  return rx_desc->wb.upper.status_error & stat_err_bits;
}

#line 436  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc.h"
__inline static u16 igc_desc_unused(struct igc_ring *ring)
{
  #line 441 
  unsigned int tmp;
  #line 438 
  u16 ntc = ring->next_to_clean;
  #line 439 
  u16 ntu = ring->next_to_use;
  #line 441 
  if ((int)ntc <= (int)ntu) 
                            #line 441 
                            tmp = (unsigned int)ring->count; else 
                                                                  #line 441 
                                                                  tmp = 0U;
  #line 441 
  ;
  #line 441 
  return (unsigned short)(((tmp + (unsigned int)ntc) - (unsigned int)ntu) + 65535U);
}

#line 444  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc.h"
__inline static s32 igc_get_phy_info(struct igc_hw *hw)
{
  #line 446 
  if (hw->phy.ops.get_phy_info != (s32 (*)(struct igc_hw *))0) {
    #line 447 
    return (*(hw->phy.ops.get_phy_info))(hw);
  }
  #line 449 
  return 0;
}

#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc.h"
__inline static s32 igc_reset_phy(struct igc_hw *hw)
{
  #line 454 
  if (hw->phy.ops.reset != (s32 (*)(struct igc_hw *))0) {
    #line 455 
    return (*(hw->phy.ops.reset))(hw);
  }
  #line 457 
  return 0;
}

#line 460  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc.h"
__inline static struct netdev_queue *txring_txq(struct igc_ring *tx_ring)
{
  #line 462 
  return netdev_get_tx_queue(tx_ring->netdev,(unsigned int)tx_ring->queue_index);
}

#line 480  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc.h"
__inline static unsigned int igc_rx_bufsz(struct igc_ring *ring)
{
  #line 483 
  if ((int)test_bit(0L,& ring->flags) != 0) 
                                            #line 484 
                                            return 3072U;
  #line 486 
  if ((int)test_bit(1L,& ring->flags) != 0) 
                                            #line 487 
                                            return 1664U;
  #line 489 
  return 2048U;
}

#line 492  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc.h"
__inline static unsigned int igc_rx_pg_order(struct igc_ring *ring)
{
  #line 495 
  if ((int)test_bit(0L,& ring->flags) != 0) 
                                            #line 496 
                                            return 1U;
  #line 498 
  return 0U;
}

#line 501  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc.h"
__inline static s32 igc_read_phy_reg(struct igc_hw *hw, u32 offset, u16 *data)
{
  #line 503 
  if (hw->phy.ops.read_reg != (s32 (*)(struct igc_hw *, u32 , u16 *))0) {
    #line 504 
    return (*(hw->phy.ops.read_reg))(hw,offset,data);
  }
  #line 506 
  return 0;
}

#line 510 
#line 2244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
void igc_reinit_locked(struct igc_adapter *adapter);
#line 511  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc.h"
#line 511 
int igc_add_filter(struct igc_adapter *adapter, struct igc_nfc_filter *input);
#line 513 
#line 513 
int igc_erase_filter(struct igc_adapter *adapter, struct igc_nfc_filter *input);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static int debug = -1;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
char igc_driver_name[4U] = {(char)'i', (char)'g', (char)'c'};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
char igc_driver_version[8U] = {(char)'0', (char)'.', (char)'0', (char)'.', (char)'1', (char)'-', (char)'k'};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static char igc_driver_string[36U] = {(char)'I', (char)'n', (char)'t', (char)'e', (char)'l', (char)'(', (char)'R', (char)')', (char)' ', (char)'2', (char)'.', (char)'5', (char)'G', (char)' ', (char)'E', (char)'t', (char)'h', (char)'e', (char)'r', (char)'n', (char)'e', (char)'t', (char)' ', (char)'L', (char)'i', (char)'n', (char)'u', (char)'x', (char)' ', (char)'D', (char)'r', (char)'i', (char)'v', (char)'e', (char)'r'};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static char igc_copyright[37U] = {(char)'C', (char)'o', (char)'p', (char)'y', (char)'r', (char)'i', (char)'g', (char)'h', (char)'t', (char)'(', (char)'c', (char)')', (char)' ', (char)'2', (char)'0', (char)'1', (char)'8', (char)' ', (char)'I', (char)'n', (char)'t', (char)'e', (char)'l', (char)' ', (char)'C', (char)'o', (char)'r', (char)'p', (char)'o', (char)'r', (char)'a', (char)'t', (char)'i', (char)'o', (char)'n', (char)'.'};
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static struct igc_info *igc_info_tbl[1U] = {& igc_base_info};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static struct pci_device_id igc_pci_tbl[6U] = {{.vendor = 32902U, .device = 5618U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 32902U, .device = 5619U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 32902U, .device = 5624U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 32902U, .device = 5623U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 32902U, .device = 12544U, .subvendor = 4294967295U, .subdevice = 4294967295U}};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
struct pci_device_id __mod_pci__igc_pci_tbl_device_table[6U];
#line 54 
#line 219 
static void igc_clean_tx_ring(struct igc_ring *tx_ring);
#line 55 
#line 4631 
static int igc_sw_init(struct igc_adapter *adapter);
#line 56 
#line 2405 
static void igc_configure(struct igc_adapter *adapter);
#line 57 
#line 134 
static void igc_power_down_link(struct igc_adapter *adapter);
#line 58 
#line 2469 
static void igc_set_default_mac_filter(struct igc_adapter *adapter);
#line 59 
#line 2713 
static void igc_set_rx_mode(struct net_device *netdev);
#line 60 
#line 4059 
static void igc_write_itr(struct igc_q_vector *q_vector);
#line 61 
#line 2812 
static void igc_assign_vector(struct igc_q_vector *q_vector, int msix_vector);
#line 62 
#line 3048 
static void igc_free_q_vector(struct igc_adapter *adapter, int v_idx);
#line 63 
#line 3645 
static void igc_set_interrupt_capability(struct igc_adapter *adapter, bool msix);
#line 65 
#line 3027 
static void igc_free_q_vectors(struct igc_adapter *adapter);
#line 66 
#line 3953 
static void igc_irq_disable(struct igc_adapter *adapter);
#line 67 
#line 3986 
static void igc_irq_enable(struct igc_adapter *adapter);
#line 68 
#line 2855 
static void igc_configure_msix(struct igc_adapter *adapter);
#line 69 
#line 1733 
static bool igc_alloc_mapped_page(struct igc_ring *rx_ring, struct igc_rx_buffer *bi);
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
void igc_reset(struct igc_adapter *adapter)
{
  #line 84 
  u32 pba;
  #line 84 
  u32 hwm;
  #line 81 
  struct pci_dev *pdev = adapter->pdev;
  #line 82 
  struct igc_hw *hw = & adapter->hw;
  #line 83 
  struct igc_fc_info *fc = & hw->fc;
  #line 87 
  pba = 34U;
  #line 97 
  hwm = ((pba << 10) - adapter->max_frame_size) + 4294957568U;
  #line 99 
  fc->high_water = hwm & 4294967280U;
  #line 100 
  fc->low_water = fc->high_water + 4294967280U;
  #line 101 
  fc->pause_time = (unsigned short)65535U;
  #line 102 
  fc->send_xon = (_Bool)1;
  #line 103 
  fc->current_mode = fc->requested_mode;
  #line 105 
  (*(hw->mac.ops.reset_hw))(hw);
  #line 107 
  if ((*(hw->mac.ops.init_hw))(hw) != 0) 
                                         #line 108 
                                         _dev_err(& pdev->dev,(char *)"Hardware Error\n");
  #line 110 
  if (! netif_running(adapter->netdev)) 
                                        #line 111 
                                        igc_power_down_link(adapter);
  #line 113 
  igc_get_phy_info(hw);
  #line 114 
  return;
}

#line 120  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static void igc_power_up_link(struct igc_adapter *adapter)
{
  #line 122 
  igc_reset_phy(& adapter->hw);
  #line 124 
  if (adapter->hw.phy.media_type == (unsigned int)igc_media_type_copper) 
    #line 125 
    igc_power_up_phy_copper(& adapter->hw);
  #line 127 
  igc_setup_link(& adapter->hw);
  #line 128 
  return;
}

#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static void igc_power_down_link(struct igc_adapter *adapter)
{
  #line 136 
  if (adapter->hw.phy.media_type == (unsigned int)igc_media_type_copper) 
    #line 137 
    igc_power_down_phy_copper_base(& adapter->hw);
  #line 138 
  return;
}

#line 148  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static void igc_release_hw_control(struct igc_adapter *adapter)
{
  #line 151 
  u32 ctrl_ext;
  #line 150 
  struct igc_hw *hw = & adapter->hw;
  #line 154 
  ctrl_ext = igc_rd32(hw,24U);
  {
    #line 156 
    union __anonunion___u_3128 __u;
    #line 155 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 155 
    u8 *hw_addr = (__u.__val);
    #line 155 
    writel(ctrl_ext & 4026531839U,(void *)(hw_addr + 24U));
  }
  #line 157 
  return;
}

#line 167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static void igc_get_hw_control(struct igc_adapter *adapter)
{
  #line 170 
  u32 ctrl_ext;
  #line 169 
  struct igc_hw *hw = & adapter->hw;
  #line 173 
  ctrl_ext = igc_rd32(hw,24U);
  {
    #line 175 
    union __anonunion___u_3130 __u;
    #line 174 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 174 
    u8 *hw_addr = (__u.__val);
    #line 174 
    writel(ctrl_ext | 268435456U,(void *)(hw_addr + 24U));
  }
  #line 176 
  return;
}

#line 184  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
void igc_free_tx_resources(struct igc_ring *tx_ring)
{
  #line 186 
  igc_clean_tx_ring(tx_ring);
  #line 188 
  cif_vfree((void *)tx_ring->__anonCompField_igc_ring_192.tx_buffer_info);
  #line 189 
  tx_ring->__anonCompField_igc_ring_192.tx_buffer_info = (struct igc_tx_buffer *)0;
  #line 192 
  if (tx_ring->desc == (void *)0) 
                                  #line 193 
                                  return;
  #line 195 
  dma_free_coherent(tx_ring->dev,(unsigned long)tx_ring->size,tx_ring->desc,tx_ring->dma);
  #line 198 
  tx_ring->desc = (void *)0;
  #line 199 
  return;
}

#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static void igc_free_all_tx_resources(struct igc_adapter *adapter)
{
  #line 209 
  int i;
  #line 211 
  i = 0;
  #line 211 
  while (adapter->num_tx_queues > i) {
    #line 212 
    igc_free_tx_resources(adapter->tx_ring[i]);
    #line 211 
    i ++;
  }
  #line 213 
  return;
}

#line 219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static void igc_clean_tx_ring(struct igc_ring *tx_ring)
{
  #line 221 
  u16 i = tx_ring->next_to_clean;
  #line 222 
  struct igc_tx_buffer *tx_buffer = tx_ring->__anonCompField_igc_ring_192.tx_buffer_info + (unsigned long)i;
  #line 224 
  while ((int)tx_ring->next_to_use != (int)i) {
    #line 225 
    union igc_adv_tx_desc *eop_desc;
    #line 225 
    union igc_adv_tx_desc *tx_desc;
    #line 228 
    dev_kfree_skb_any(tx_buffer->skb);
    #line 231 
    dma_unmap_single_attrs(tx_ring->dev,tx_buffer->dma,(unsigned long)tx_buffer->len,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
    #line 237 
    eop_desc = tx_buffer->next_to_watch;
    #line 238 
    tx_desc = (union igc_adv_tx_desc *)tx_ring->desc + (unsigned long)i;
    #line 241 
    while (tx_desc != eop_desc) {
      #line 242 
      tx_buffer ++;
      #line 243 
      tx_desc ++;
      #line 244 
      i = (u16)((int)i + 1);
      #line 245 
      if ((long)((int)tx_ring->count == (int)i) != 0L) {
        #line 246 
        i = (unsigned short)0U;
        #line 247 
        tx_buffer = tx_ring->__anonCompField_igc_ring_192.tx_buffer_info;
        #line 248 
        tx_desc = (union igc_adv_tx_desc *)tx_ring->desc;
      }
      #line 252 
      if (tx_buffer->len != 0U) 
                                #line 253 
                                dma_unmap_page_attrs(tx_ring->dev,tx_buffer->dma,(unsigned long)tx_buffer->len,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
    }
    #line 260 
    tx_buffer ++;
    #line 261 
    i = (u16)((int)i + 1);
    #line 262 
    if ((long)((int)tx_ring->count == (int)i) != 0L) {
      #line 263 
      i = (unsigned short)0U;
      #line 264 
      tx_buffer = tx_ring->__anonCompField_igc_ring_192.tx_buffer_info;
    }
  }
  #line 269 
  netdev_tx_reset_queue(txring_txq(tx_ring));
  #line 272 
  tx_ring->next_to_use = (unsigned short)0U;
  #line 273 
  tx_ring->next_to_clean = (unsigned short)0U;
  #line 274 
  return;
}

#line 280  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static void igc_clean_all_tx_rings(struct igc_adapter *adapter)
{
  #line 282 
  int i;
  #line 284 
  i = 0;
  #line 284 
  while (adapter->num_tx_queues > i) {
    #line 285 
    if (adapter->tx_ring[i] != (struct igc_ring *)0) 
                                                     #line 286 
                                                     igc_clean_tx_ring(adapter->tx_ring[i]);
    #line 284 
    i ++;
  }
  #line 287 
  return;
}

#line 295  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
int igc_setup_tx_resources(struct igc_ring *tx_ring)
{
  #line 297 
  struct device *dev = tx_ring->dev;
  #line 298 
  int size = 0;
  #line 300 
  size = (int)((unsigned int)tx_ring->count * 48U);
  #line 301 
  tx_ring->__anonCompField_igc_ring_192.tx_buffer_info = (struct igc_tx_buffer *)cif_vzalloc((unsigned long)size);
  #line 302 
  if (tx_ring->__anonCompField_igc_ring_192.tx_buffer_info == (struct igc_tx_buffer *)0) 
    #line 303 
    goto err;
  #line 306 
  tx_ring->size = (unsigned int)tx_ring->count * 16U;
  #line 307 
  tx_ring->size = (tx_ring->size + 4095U) & 4294963200U;
  #line 309 
  tx_ring->desc = dma_alloc_coherent(dev,(unsigned long)tx_ring->size,& tx_ring->dma,3264U);
  #line 312 
  if (tx_ring->desc == (void *)0) 
                                  #line 313 
                                  goto err;
  #line 315 
  tx_ring->next_to_use = (unsigned short)0U;
  #line 316 
  tx_ring->next_to_clean = (unsigned short)0U;
  #line 318 
  return 0;
  #line 320 
  err: 
       #line 320 
  ;
  #line 321 
  cif_vfree((void *)tx_ring->__anonCompField_igc_ring_192.tx_buffer_info);
  #line 322 
  _dev_err(dev,(char *)"Unable to allocate memory for the transmit descriptor ring\n");
  #line 324 
  return -12;
}

#line 333  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static int igc_setup_all_tx_resources(struct igc_adapter *adapter)
{
  #line 336 
  int i;
  #line 335 
  struct pci_dev *pdev = adapter->pdev;
  #line 336 
  int err = 0;
  #line 338 
  i = 0;
  #line 338 
  while (adapter->num_tx_queues > i) {
    #line 339 
    err = igc_setup_tx_resources(adapter->tx_ring[i]);
    #line 340 
    if (err != 0) {
      #line 341 
      _dev_err(& pdev->dev,(char *)"Allocation for Tx Queue %u failed\n",i);
      #line 343 
      i --;
      #line 343 
      while (i >= 0) {
        #line 344 
        igc_free_tx_resources(adapter->tx_ring[i]);
        #line 343 
        i --;
      }
      #line 345 
      break;
    }
    #line 338 
    i ++;
  }
  #line 349 
  return err;
}

#line 356  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static void igc_clean_rx_ring(struct igc_ring *rx_ring)
{
  #line 358 
  u16 i = rx_ring->next_to_clean;
  #line 360 
  consume_skb(rx_ring->__anonCompField_igc_ring_195.__anonCompField___anonunion_3124_194.skb);
  #line 361 
  rx_ring->__anonCompField_igc_ring_195.__anonCompField___anonunion_3124_194.skb = (struct sk_buff *)0;
  #line 364 
  while ((int)rx_ring->next_to_alloc != (int)i) {
    #line 365 
    struct igc_rx_buffer *buffer_info = rx_ring->__anonCompField_igc_ring_192.rx_buffer_info + (unsigned long)i;
    #line 370 
    ;
    #line 370 
    ;
    #line 370 
    ;
    #line 370 
    dma_sync_single_range_for_cpu(rx_ring->dev,buffer_info->dma,(unsigned long)buffer_info->page_offset,(unsigned long)igc_rx_bufsz(rx_ring),(enum dma_data_direction)DMA_FROM_DEVICE);
    #line 377 
    ;
    #line 377 
    ;
    #line 377 
    dma_unmap_page_attrs(rx_ring->dev,buffer_info->dma,4096UL << igc_rx_pg_order(rx_ring),(enum dma_data_direction)DMA_FROM_DEVICE,34UL);
    #line 382 
    __page_frag_cache_drain(buffer_info->page,(unsigned int)buffer_info->pagecnt_bias);
    #line 385 
    i = (u16)((int)i + 1);
    #line 386 
    if ((int)rx_ring->count == (int)i) 
                                       #line 387 
                                       i = (unsigned short)0U;
  }
  #line 390 
  rx_ring->next_to_alloc = (unsigned short)0U;
  #line 391 
  rx_ring->next_to_clean = (unsigned short)0U;
  #line 392 
  rx_ring->next_to_use = (unsigned short)0U;
  #line 393 
  return;
}

#line 399  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static void igc_clean_all_rx_rings(struct igc_adapter *adapter)
{
  #line 401 
  int i;
  #line 403 
  i = 0;
  #line 403 
  while (adapter->num_rx_queues > i) {
    #line 404 
    if (adapter->rx_ring[i] != (struct igc_ring *)0) 
                                                     #line 405 
                                                     igc_clean_rx_ring(adapter->rx_ring[i]);
    #line 403 
    i ++;
  }
  #line 406 
  return;
}

#line 414  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
void igc_free_rx_resources(struct igc_ring *rx_ring)
{
  #line 416 
  igc_clean_rx_ring(rx_ring);
  #line 418 
  cif_vfree((void *)rx_ring->__anonCompField_igc_ring_192.rx_buffer_info);
  #line 419 
  rx_ring->__anonCompField_igc_ring_192.rx_buffer_info = (struct igc_rx_buffer *)0;
  #line 422 
  if (rx_ring->desc == (void *)0) 
                                  #line 423 
                                  return;
  #line 425 
  dma_free_coherent(rx_ring->dev,(unsigned long)rx_ring->size,rx_ring->desc,rx_ring->dma);
  #line 428 
  rx_ring->desc = (void *)0;
  #line 429 
  return;
}

#line 437  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static void igc_free_all_rx_resources(struct igc_adapter *adapter)
{
  #line 439 
  int i;
  #line 441 
  i = 0;
  #line 441 
  while (adapter->num_rx_queues > i) {
    #line 442 
    igc_free_rx_resources(adapter->rx_ring[i]);
    #line 441 
    i ++;
  }
  #line 443 
  return;
}

#line 451  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
int igc_setup_rx_resources(struct igc_ring *rx_ring)
{
  #line 454 
  int size;
  #line 454 
  int desc_len;
  #line 453 
  struct device *dev = rx_ring->dev;
  #line 456 
  size = (int)((unsigned int)rx_ring->count * 24U);
  #line 457 
  rx_ring->__anonCompField_igc_ring_192.rx_buffer_info = (struct igc_rx_buffer *)cif_vzalloc((unsigned long)size);
  #line 458 
  if (rx_ring->__anonCompField_igc_ring_192.rx_buffer_info == (struct igc_rx_buffer *)0) 
    #line 459 
    goto err;
  #line 461 
  desc_len = 16;
  #line 464 
  rx_ring->size = (unsigned int)((int)rx_ring->count * desc_len);
  #line 465 
  rx_ring->size = (rx_ring->size + 4095U) & 4294963200U;
  #line 467 
  rx_ring->desc = dma_alloc_coherent(dev,(unsigned long)rx_ring->size,& rx_ring->dma,3264U);
  #line 470 
  if (rx_ring->desc == (void *)0) 
                                  #line 471 
                                  goto err;
  #line 473 
  rx_ring->next_to_alloc = (unsigned short)0U;
  #line 474 
  rx_ring->next_to_clean = (unsigned short)0U;
  #line 475 
  rx_ring->next_to_use = (unsigned short)0U;
  #line 477 
  return 0;
  #line 479 
  err: 
       #line 479 
  ;
  #line 480 
  cif_vfree((void *)rx_ring->__anonCompField_igc_ring_192.rx_buffer_info);
  #line 481 
  rx_ring->__anonCompField_igc_ring_192.rx_buffer_info = (struct igc_rx_buffer *)0;
  #line 482 
  _dev_err(dev,(char *)"Unable to allocate memory for the receive descriptor ring\n");
  #line 484 
  return -12;
}

#line 494  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static int igc_setup_all_rx_resources(struct igc_adapter *adapter)
{
  #line 497 
  int i;
  #line 496 
  struct pci_dev *pdev = adapter->pdev;
  #line 497 
  int err = 0;
  #line 499 
  i = 0;
  #line 499 
  while (adapter->num_rx_queues > i) {
    #line 500 
    err = igc_setup_rx_resources(adapter->rx_ring[i]);
    #line 501 
    if (err != 0) {
      #line 502 
      _dev_err(& pdev->dev,(char *)"Allocation for Rx Queue %u failed\n",i);
      #line 504 
      i --;
      #line 504 
      while (i >= 0) {
        #line 505 
        igc_free_rx_resources(adapter->rx_ring[i]);
        #line 504 
        i --;
      }
      #line 506 
      break;
    }
    #line 499 
    i ++;
  }
  #line 510 
  return err;
}

#line 520  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static void igc_configure_rx_ring(struct igc_adapter *adapter, struct igc_ring *ring)
{
  #line 524 
  union igc_adv_rx_desc *rx_desc;
  #line 523 
  struct igc_hw *hw = & adapter->hw;
  #line 525 
  int reg_idx = (int)ring->reg_idx;
  #line 526 
  u32 srrctl = 0U;
  #line 526 
  u32 rxdctl = 0U;
  #line 527 
  u64 rdba = ring->dma;
  {
    #line 531 
    union __anonunion___u_3132 __u;
    #line 530 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 530 
    u8 *hw_addr = (__u.__val);
    #line 530 
    writel(0U,(void *)(hw_addr + (unsigned long)(reg_idx * 64 + 49192)));
  }
  {
    #line 534 
    union __anonunion___u_3134 __u_0;
    #line 533 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
    #line 533 
    u8 *hw_addr_0 = (__u_0.__val);
    #line 533 
    writel((unsigned int)rdba,(void *)(hw_addr_0 + (unsigned long)((reg_idx + 768) * 64)));
  }
  {
    #line 536 
    union __anonunion___u_3136 __u_1;
    #line 535 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_1.__c),8);
    #line 535 
    u8 *hw_addr_1 = (__u_1.__val);
    #line 535 
    writel((unsigned int)(rdba >> 32),(void *)(hw_addr_1 + (unsigned long)(reg_idx * 64 + 49156)));
  }
  {
    #line 537 
    union __anonunion___u_3138 __u_2;
    #line 536 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_2.__c),8);
    #line 536 
    u8 *hw_addr_2 = (__u_2.__val);
    #line 536 
    writel((unsigned int)ring->count * 16U,(void *)(hw_addr_2 + (unsigned long)(reg_idx * 64 + 49160)));
  }
  #line 540 
  ring->tail = (void *)(adapter->io_addr + (unsigned long)(reg_idx * 64 + 49176));
  {
    #line 542 
    union __anonunion___u_3140 __u_3;
    #line 541 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_3.__c),8);
    #line 541 
    u8 *hw_addr_3 = (__u_3.__val);
    #line 541 
    writel(0U,(void *)(hw_addr_3 + (unsigned long)(reg_idx * 64 + 49168)));
  }
  #line 542 
  writel(0U,ring->tail);
  #line 545 
  ring->next_to_clean = (unsigned short)0U;
  #line 546 
  ring->next_to_use = (unsigned short)0U;
  #line 549 
  srrctl = 1024U;
  #line 550 
  if ((int)test_bit(0L,& ring->flags) != 0) 
                                            #line 551 
                                            srrctl |= 3U; else 
                                                               #line 553 
                                                               srrctl |= 2U;
  #line 554 
  srrctl |= 33554432U;
  {
    #line 557 
    union __anonunion___u_3142 __u_4;
    #line 556 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_4.__c),8);
    #line 556 
    u8 *hw_addr_4 = (__u_4.__val);
    #line 556 
    writel(srrctl,(void *)(hw_addr_4 + (unsigned long)(reg_idx * 64 + 49164)));
  }
  #line 558 
  rxdctl |= 8U;
  #line 559 
  rxdctl |= 2048U;
  #line 560 
  rxdctl |= 262144U;
  #line 563 
  memset((void *)ring->__anonCompField_igc_ring_192.rx_buffer_info,0,(unsigned long)ring->count * 24UL);
  #line 567 
  rx_desc = (union igc_adv_rx_desc *)ring->desc;
  #line 568 
  rx_desc->wb.upper.length = (unsigned short)0U;
  #line 571 
  rxdctl |= 33554432U;
  {
    #line 574 
    union __anonunion___u_3144 __u_5;
    #line 573 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_5.__c),8);
    #line 573 
    u8 *hw_addr_5 = (__u_5.__val);
    #line 573 
    writel(rxdctl,(void *)(hw_addr_5 + (unsigned long)(reg_idx * 64 + 49192)));
  }
  #line 575 
  return;
}

#line 582  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static void igc_configure_rx(struct igc_adapter *adapter)
{
  #line 584 
  int i;
  #line 589 
  i = 0;
  #line 589 
  while (adapter->num_rx_queues > i) {
    #line 590 
    igc_configure_rx_ring(adapter,adapter->rx_ring[i]);
    #line 589 
    i ++;
  }
  #line 591 
  return;
}

#line 600  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static void igc_configure_tx_ring(struct igc_adapter *adapter, struct igc_ring *ring)
{
  #line 603 
  struct igc_hw *hw = & adapter->hw;
  #line 604 
  int reg_idx = (int)ring->reg_idx;
  #line 605 
  u64 tdba = ring->dma;
  #line 606 
  u32 txdctl = 0U;
  {
    #line 610 
    union __anonunion___u_3146 __u;
    #line 609 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 609 
    u8 *hw_addr = (__u.__val);
    #line 609 
    writel(0U,(void *)(hw_addr + (unsigned long)(reg_idx * 64 + 57384)));
  }
  #line 610 
  igc_rd32(hw,8U);
  {
    #line 611 
    unsigned long __ms = 10UL;
    #line 611 
    while (1) {
      #line 611 
      unsigned long tmp_0;
      #line 611 
      tmp_0 = __ms;
      #line 611 
      __ms --;
      #line 611 
      ;
      #line 611 
      if (! (tmp_0 != 0UL)) 
                            #line 611 
                            break;
      #line 611 
      __const_udelay(4295000UL);
    }
  }
  {
    #line 614 
    union __anonunion___u_3148 __u_0;
    #line 613 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
    #line 613 
    u8 *hw_addr_0 = (__u_0.__val);
    #line 613 
    writel((unsigned int)ring->count * 16U,(void *)(hw_addr_0 + (unsigned long)(reg_idx * 64 + 57352)));
  }
  {
    #line 616 
    union __anonunion___u_3150 __u_1;
    #line 615 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_1.__c),8);
    #line 615 
    u8 *hw_addr_1 = (__u_1.__val);
    #line 615 
    writel((unsigned int)tdba,(void *)(hw_addr_1 + (unsigned long)((reg_idx + 896) * 64)));
  }
  {
    #line 618 
    union __anonunion___u_3152 __u_2;
    #line 617 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_2.__c),8);
    #line 617 
    u8 *hw_addr_2 = (__u_2.__val);
    #line 617 
    writel((unsigned int)(tdba >> 32),(void *)(hw_addr_2 + (unsigned long)(reg_idx * 64 + 57348)));
  }
  #line 619 
  ring->tail = (void *)(adapter->io_addr + (unsigned long)(reg_idx * 64 + 57368));
  {
    #line 621 
    union __anonunion___u_3154 __u_3;
    #line 620 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_3.__c),8);
    #line 620 
    u8 *hw_addr_3 = (__u_3.__val);
    #line 620 
    writel(0U,(void *)(hw_addr_3 + (unsigned long)(reg_idx * 64 + 57360)));
  }
  #line 621 
  writel(0U,ring->tail);
  #line 623 
  txdctl |= 8U;
  #line 624 
  txdctl |= 256U;
  #line 625 
  txdctl |= 1048576U;
  #line 627 
  txdctl |= 33554432U;
  {
    #line 629 
    union __anonunion___u_3156 __u_4;
    #line 628 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_4.__c),8);
    #line 628 
    u8 *hw_addr_4 = (__u_4.__val);
    #line 628 
    writel(txdctl,(void *)(hw_addr_4 + (unsigned long)(reg_idx * 64 + 57384)));
  }
  #line 630 
  return;
}

#line 637  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static void igc_configure_tx(struct igc_adapter *adapter)
{
  #line 639 
  int i;
  #line 641 
  i = 0;
  #line 641 
  while (adapter->num_tx_queues > i) {
    #line 642 
    igc_configure_tx_ring(adapter,adapter->tx_ring[i]);
    #line 641 
    i ++;
  }
  #line 643 
  return;
}

#line 649  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static void igc_setup_mrqc(struct igc_adapter *adapter)
{
  #line 652 
  u32 j;
  #line 652 
  u32 num_rx_queues;
  #line 653 
  u32 mrqc;
  #line 653 
  u32 rxcsum;
  #line 654 
  u32 rss_key[10U];
  #line 651 
  struct igc_hw *hw = & adapter->hw;
  #line 656 
  netdev_rss_key_fill((void *)(& rss_key),40UL);
  #line 657 
  j = 0U;
  #line 657 
  while (j <= 9U) {
    {
      #line 659 
      union __anonunion___u_3158 __u;
      #line 658 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
      #line 658 
      u8 *hw_addr = (__u.__val);
      #line 658 
      writel(rss_key[j],(void *)(hw_addr + (unsigned long)((j + 5920U) * 4U)));
    }
    #line 657 
    j ++;
  }
  #line 660 
  num_rx_queues = adapter->rss_queues;
  #line 662 
  if (adapter->rss_indir_tbl_init != num_rx_queues) {
    #line 663 
    j = 0U;
    #line 663 
    while (j <= 127U) {
      #line 664 
      adapter->rss_indir_tbl[j] = (unsigned char)((j * num_rx_queues) / 128U);
      #line 663 
      j ++;
    }
    #line 666 
    adapter->rss_indir_tbl_init = num_rx_queues;
  }
  #line 668 
  igc_write_rss_indir_tbl(adapter);
  #line 674 
  rxcsum = igc_rd32(hw,20480U);
  #line 675 
  rxcsum |= 8192U;
  #line 678 
  rxcsum |= 2048U;
  {
    #line 682 
    union __anonunion___u_3160 __u_0;
    #line 681 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
    #line 681 
    u8 *hw_addr_0 = (__u_0.__val);
    #line 681 
    writel(rxcsum,(void *)(hw_addr_0 + 20480U));
  }
  #line 686 
  mrqc = 3604480U;
  #line 692 
  if (((unsigned long)adapter->flags & 64UL) != 0UL) 
                                                     #line 693 
                                                     mrqc |= 4194304U;
  #line 694 
  if (((unsigned long)adapter->flags & 128UL) != 0UL) 
                                                      #line 695 
                                                      mrqc |= 8388608U;
  #line 697 
  mrqc |= 2U;
  {
    #line 700 
    union __anonunion___u_3162 __u_1;
    #line 699 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_1.__c),8);
    #line 699 
    u8 *hw_addr_1 = (__u_1.__val);
    #line 699 
    writel(mrqc,(void *)(hw_addr_1 + 22552U));
  }
  #line 701 
  return;
}

#line 706  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static void igc_setup_rctl(struct igc_adapter *adapter)
{
  #line 709 
  u32 rctl;
  #line 708 
  struct igc_hw *hw = & adapter->hw;
  #line 711 
  rctl = igc_rd32(hw,256U);
  #line 713 
  rctl &= 4294955007U;
  #line 714 
  rctl &= 4294967103U;
  #line 716 
  rctl = ((hw->mac.mc_filter_type << 12) | rctl) | 32770U;
  #line 722 
  rctl |= 67108864U;
  #line 725 
  rctl &= 4294770683U;
  #line 728 
  rctl |= 32U;
  {
    #line 732 
    union __anonunion___u_3164 __u;
    #line 731 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 731 
    u8 *hw_addr = (__u.__val);
    #line 731 
    writel(0U,(void *)(hw_addr + 49192U));
  }
  #line 734 
  if (((adapter->netdev)->features & 8796093022208ULL) != 0ULL) {
    #line 738 
    rctl |= 8421380U;
    #line 742 
    rctl &= 4290248703U;
  }
  {
    #line 747 
    union __anonunion___u_3166 __u_0;
    #line 746 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
    #line 746 
    u8 *hw_addr_0 = (__u_0.__val);
    #line 746 
    writel(rctl,(void *)(hw_addr_0 + 256U));
  }
  #line 748 
  return;
}

#line 753  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static void igc_setup_tctl(struct igc_adapter *adapter)
{
  #line 756 
  u32 tctl;
  #line 755 
  struct igc_hw *hw = & adapter->hw;
  {
    #line 760 
    union __anonunion___u_3168 __u;
    #line 759 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 759 
    u8 *hw_addr = (__u.__val);
    #line 759 
    writel(0U,(void *)(hw_addr + 57384U));
  }
  #line 762 
  tctl = igc_rd32(hw,1024U);
  #line 763 
  tctl &= 4294963215U;
  #line 764 
  tctl |= 16777464U;
  #line 768 
  tctl |= 2U;
  {
    #line 771 
    union __anonunion___u_3170 __u_0;
    #line 770 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
    #line 770 
    u8 *hw_addr_0 = (__u_0.__val);
    #line 770 
    writel(tctl,(void *)(hw_addr_0 + 1024U));
  }
  #line 772 
  return;
}

#line 780  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static int igc_set_mac(struct net_device *netdev, void *p)
{
  #line 782 
  struct igc_adapter *adapter = netdev_priv(netdev);
  #line 783 
  struct igc_hw *hw = & adapter->hw;
  #line 784 
  struct sockaddr *addr = (struct sockaddr *)p;
  #line 786 
  if (! is_valid_ether_addr((u8 *)(& addr->sa_data))) 
                                                      #line 787 
                                                      return -99;
  #line 789 
  memcpy((void *)netdev->dev_addr,(void *)(& addr->sa_data),(unsigned long)netdev->addr_len);
  #line 790 
  memcpy((void *)(& hw->mac.addr),(void *)(& addr->sa_data),(unsigned long)netdev->addr_len);
  #line 793 
  igc_set_default_mac_filter(adapter);
  #line 795 
  return 0;
}

#line 807  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static int igc_write_mc_addr_list(struct net_device *netdev)
{
  #line 827 
  void *__mptr;
  #line 811 
  struct netdev_hw_addr *ha;
  #line 812 
  u8 *mta_list;
  #line 813 
  int i;
  #line 809 
  struct igc_adapter *adapter = netdev_priv(netdev);
  #line 810 
  struct igc_hw *hw = & adapter->hw;
  #line 815 
  if (netdev->mc.count == 0) {
    #line 817 
    igc_update_mc_addr_list(hw,(u8 *)0U,0U);
    #line 818 
    return 0;
  }
  #line 821 
  mta_list = (u8 *)kcalloc((unsigned long)netdev->mc.count,6UL,2592U);
  #line 822 
  if (mta_list == (u8 *)0U) 
                            #line 823 
                            return -12;
  #line 826 
  i = 0;
  #line 827 
  __mptr = (void *)netdev->mc.list.next;
  #line 827 
  ha = ((struct netdev_hw_addr *)__mptr);
  #line 827 
  while (& ha->list != & netdev->mc.list) {
    #line 827 
    void *__mptr_0;
    #line 828 
    int tmp_3;
    #line 828 
    ;
    #line 828 
    tmp_3 = i;
    #line 828 
    i ++;
    #line 828 
    ;
    #line 828 
    memcpy((void *)(mta_list + (unsigned long)(tmp_3 * 6)),(void *)(& ha->addr),6UL);
    #line 827 
    __mptr_0 = (void *)ha->list.next;
    #line 827 
    ha = ((struct netdev_hw_addr *)__mptr_0);
  }
  #line 830 
  igc_update_mc_addr_list(hw,mta_list,(unsigned int)i);
  #line 831 
  kfree((void *)mta_list);
  #line 833 
  return netdev->mc.count;
}

#line 836  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static void igc_tx_ctxtdesc(struct igc_ring *tx_ring, struct igc_tx_buffer *first, u32 vlan_macip_lens, u32 type_tucmd, u32 mss_l4len_idx)
{
  #line 841 
  struct igc_adv_tx_context_desc *context_desc;
  #line 843 
  struct timespec64 ts;
  #line 842 
  u16 i = tx_ring->next_to_use;
  #line 845 
  context_desc = (struct igc_adv_tx_context_desc *)tx_ring->desc + (unsigned long)i;
  #line 847 
  i = (u16)((int)i + 1);
  #line 848 
  if ((int)tx_ring->count > (int)i) 
                                    #line 848 
                                    tx_ring->next_to_use = i; else 
                                                                   #line 848 
                                                                   tx_ring->next_to_use = (unsigned short)0U;
  #line 851 
  type_tucmd |= 538968064U;
  #line 854 
  if ((int)test_bit(4L,& tx_ring->flags) != 0) 
                                               #line 855 
                                               mss_l4len_idx = (unsigned int)((int)tx_ring->reg_idx << 4) | mss_l4len_idx;
  #line 857 
  context_desc->vlan_macip_lens = vlan_macip_lens;
  #line 858 
  context_desc->type_tucmd_mlhl = type_tucmd;
  #line 859 
  context_desc->mss_l4len_idx = mss_l4len_idx;
  #line 864 
  if ((int)tx_ring->launchtime_enable != 0) {
    #line 865 
    ts = ns_to_timespec64((first->skb)->__anonCompField_sk_buff_89.tstamp);
    #line 866 
    (first->skb)->__anonCompField_sk_buff_89.tstamp = ktime_set(0LL,0UL);
    #line 867 
    context_desc->launch_time = (unsigned int)(ts.tv_nsec / 32L);
  }
  else 
       #line 869 
       context_desc->launch_time = 0U;
  #line 870 
  return;
}

#line 873  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
__inline static bool igc_ipv6_csum_is_sctp(struct sk_buff *skb)
{
  #line 875 
  unsigned int offset = 0U;
  #line 877 
  ipv6_find_hdr(skb,& offset,132,(unsigned short *)0U,(int *)0);
  #line 879 
  ;
  #line 879 
  return (_Bool)((unsigned int)skb_checksum_start_offset(skb) == offset);
}

#line 882  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static void igc_tx_csum(struct igc_ring *tx_ring, struct igc_tx_buffer *first)
{
  #line 884 
  struct sk_buff *skb = first->skb;
  #line 885 
  u32 vlan_macip_lens = 0U;
  #line 886 
  u32 type_tucmd = 0U;
  #line 888 
  if ((unsigned int)skb->ip_summed != 3U) {
    #line 889 
    csum_failed: 
                 #line 889 
    ;
    #line 890 
    if ((first->tx_flags & 1U) == 0U && ! tx_ring->launchtime_enable) 
      #line 892 
      return;
    #line 893 
    goto no_csum;
  }
  #line 896 
  switch ((int)skb->__anonCompField_sk_buff_93.__anonCompField___anonunion_494_92.csum_offset) {
    #line 897 
    case 16: 
             #line 897 
    ;
    #line 898 
    type_tucmd = 2048U;
    #line 900 
    case 6: 
            #line 900 
    ;
    #line 901 
    break;
    #line 902 
    case 8: 
            #line 902 
    ;
    #line 904 
    if ((unsigned int)first->protocol == 8U) {
      #line 904 
      ;
      #line 904 
      if ((unsigned int)ip_hdr(skb)->protocol == 132U) 
                                                       #line 904 
                                                       goto _LOR; else 
                                                                    #line 904 
                                                                    goto _LAND;
    }
    else {
      #line 904 
      _LAND: 
             #line 905 
      ;
      #line 905 
      if ((unsigned int)first->protocol == 56710U) {
        #line 906 
        if ((int)igc_ipv6_csum_is_sctp(skb) != 0) {
          #line 904 
          _LOR: {
                  #line 908 
                  type_tucmd = 4096U;
                  #line 909 
                  break;
                }
        }
      }
    }
    #line 912 
    default: 
             #line 912 
    ;
    #line 913 
    skb_checksum_help(skb);
    #line 914 
    goto csum_failed;
  }
  #line 918 
  first->tx_flags |= 32U;
  #line 919 
  vlan_macip_lens = (unsigned int)(skb_checksum_start_offset(skb) - skb_network_offset(skb));
  #line 921 
  no_csum: 
           #line 921 
  ;
  #line 922 
  vlan_macip_lens = (unsigned int)(skb_network_offset(skb) << 9) | vlan_macip_lens;
  #line 923 
  vlan_macip_lens = (first->tx_flags & 4294901760U) | vlan_macip_lens;
  #line 925 
  igc_tx_ctxtdesc(tx_ring,first,vlan_macip_lens,type_tucmd,0U);
  #line 926 
  return;
}

#line 928  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static int __igc_maybe_stop_tx(struct igc_ring *tx_ring, u16 size)
{
  #line 930 
  struct net_device *netdev = tx_ring->netdev;
  #line 932 
  netif_stop_subqueue(netdev,(unsigned short)((int)tx_ring->queue_index));
  #line 933 
  ldv_inline_asm();
  #line 940 
  ;
  #line 940 
  if ((int)igc_desc_unused(tx_ring) < (int)size) 
                                                 #line 941 
                                                 return -16;
  #line 944 
  netif_wake_subqueue(netdev,(unsigned short)((int)tx_ring->queue_index));
  #line 946 
  u64_stats_update_begin(& tx_ring->__anonCompField_igc_ring_195.__anonCompField___anonunion_3124_193.tx_syncp2);
  #line 947 
  (tx_ring->__anonCompField_igc_ring_195.__anonCompField___anonunion_3124_193.tx_stats.restart_queue2) ++;
  #line 948 
  u64_stats_update_begin(& tx_ring->__anonCompField_igc_ring_195.__anonCompField___anonunion_3124_193.tx_syncp2);
  #line 950 
  return 0;
}

#line 953  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
__inline static int igc_maybe_stop_tx(struct igc_ring *tx_ring, u16 size)
{
  #line 955 
  ;
  #line 955 
  if ((int)igc_desc_unused(tx_ring) >= (int)size) 
                                                  #line 956 
                                                  return 0;
  #line 957 
  return __igc_maybe_stop_tx(tx_ring,(unsigned short)((int)size));
}

#line 960  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static u32 igc_tx_cmd_type(struct sk_buff *skb, u32 tx_flags)
{
  #line 963 
  u32 cmd_type = 573571072U;
  #line 967 
  return cmd_type;
}

#line 970  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static void igc_tx_olinfo_status(struct igc_ring *tx_ring, union igc_adv_tx_desc *tx_desc, u32 tx_flags, unsigned int paylen)
{
  #line 974 
  u32 olinfo_status = paylen << 14;
  #line 977 
  olinfo_status = (tx_flags & 32U) * 16U | olinfo_status;
  #line 982 
  olinfo_status = (tx_flags & 16U) * 16U | olinfo_status;
  #line 986 
  tx_desc->read.olinfo_status = olinfo_status;
  #line 987 
  return;
}

#line 989  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static int igc_tx_map(struct igc_ring *tx_ring, struct igc_tx_buffer *first, u8 hdr_len)
{
  #line 994 
  struct igc_tx_buffer *tx_buffer;
  #line 995 
  union igc_adv_tx_desc *tx_desc;
  #line 997 
  skb_frag_t *frag;
  #line 999 
  unsigned int data_len;
  #line 999 
  unsigned int size;
  #line 1000 
  dma_addr_t dma;
  #line 993 
  struct sk_buff *skb = first->skb;
  #line 996 
  u32 tx_flags = first->tx_flags;
  #line 998 
  u16 i = tx_ring->next_to_use;
  #line 1001 
  u32 cmd_type = igc_tx_cmd_type(skb,tx_flags);
  #line 1003 
  tx_desc = (union igc_adv_tx_desc *)tx_ring->desc + (unsigned long)i;
  #line 1005 
  igc_tx_olinfo_status(tx_ring,tx_desc,tx_flags,skb->len - (unsigned int)hdr_len);
  #line 1007 
  size = skb_headlen(skb);
  #line 1008 
  data_len = skb->data_len;
  #line 1010 
  dma = dma_map_single_attrs(tx_ring->dev,(void *)skb->data,(unsigned long)size,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
  #line 1012 
  tx_buffer = first;
  #line 1014 
  frag = & ((struct skb_shared_info *)skb_end_pointer(skb))->frags[0];
  #line 1014 
  while (1) {
    {
      #line 1015 
      if (dma_mapping_error(tx_ring->dev,dma) != 0) 
                                                    #line 1016 
                                                    goto dma_error;
      #line 1019 
      tx_buffer->len = size;
      #line 1020 
      tx_buffer->dma = dma;
      #line 1022 
      tx_desc->read.buffer_addr = dma;
      #line 1024 
      while ((long)(size > 32768U) != 0L) {
        #line 1025 
        tx_desc->read.cmd_type_len = cmd_type ^ 32768U;
        #line 1028 
        i = (u16)((int)i + 1);
        #line 1029 
        tx_desc ++;
        #line 1030 
        if ((int)tx_ring->count == (int)i) {
          #line 1031 
          tx_desc = (union igc_adv_tx_desc *)tx_ring->desc;
          #line 1032 
          i = (unsigned short)0U;
        }
        #line 1034 
        tx_desc->read.olinfo_status = 0U;
        #line 1036 
        dma += 32768ULL;
        #line 1037 
        size += 4294934528U;
        #line 1039 
        tx_desc->read.buffer_addr = dma;
      }
      #line 1042 
      if ((long)(data_len == 0U) != 0L) 
                                        #line 1043 
                                        break;
      #line 1045 
      tx_desc->read.cmd_type_len = cmd_type ^ size;
      #line 1047 
      i = (u16)((int)i + 1);
      #line 1048 
      tx_desc ++;
      #line 1049 
      if ((int)tx_ring->count == (int)i) {
        #line 1050 
        tx_desc = (union igc_adv_tx_desc *)tx_ring->desc;
        #line 1051 
        i = (unsigned short)0U;
      }
      #line 1053 
      tx_desc->read.olinfo_status = 0U;
      #line 1055 
      size = skb_frag_size(frag);
      #line 1056 
      data_len -= size;
      #line 1058 
      dma = skb_frag_dma_map(tx_ring->dev,frag,0UL,(unsigned long)size,(enum dma_data_direction)DMA_TO_DEVICE);
      #line 1061 
      tx_buffer = tx_ring->__anonCompField_igc_ring_192.tx_buffer_info + (unsigned long)i;
    }
    #line 1014 
    frag ++;
  }
  #line 1065 
  cmd_type = (size | cmd_type) | 150994944U;
  #line 1066 
  tx_desc->read.cmd_type_len = cmd_type;
  #line 1068 
  ;
  #line 1068 
  netdev_tx_sent_queue(txring_txq(tx_ring),first->bytecount);
  #line 1071 
  first->time_stamp = jiffies;
  #line 1073 
  skb_tx_timestamp(skb);
  #line 1074 
  ldv_inline_asm();
  #line 1085 
  first->next_to_watch = tx_desc;
  #line 1087 
  i = (u16)((int)i + 1);
  #line 1088 
  if ((int)tx_ring->count == (int)i) 
                                     #line 1089 
                                     i = (unsigned short)0U;
  #line 1091 
  tx_ring->next_to_use = i;
  #line 1094 
  igc_maybe_stop_tx(tx_ring,(unsigned short)21);
  #line 1096 
  if ((int)netif_xmit_stopped(txring_txq(tx_ring)) != 0) 
                                                         #line 1097 
                                                         writel((unsigned int)i,tx_ring->tail);
  else {
    #line 1096 
    if (! netdev_xmit_more()) 
                              #line 1097 
                              writel((unsigned int)i,tx_ring->tail);
  }
  #line 1100 
  return 0;
  #line 1101 
  dma_error: 
             #line 1101 
  ;
  #line 1102 
  _dev_err(tx_ring->dev,(char *)"TX DMA map failed\n");
  #line 1103 
  tx_buffer = tx_ring->__anonCompField_igc_ring_192.tx_buffer_info + (unsigned long)i;
  #line 1106 
  while (tx_buffer != first) {
    #line 1114 
    u16 tmp_6;
    #line 1107 
    if (tx_buffer->len != 0U) 
                              #line 1108 
                              dma_unmap_page_attrs(tx_ring->dev,tx_buffer->dma,(unsigned long)tx_buffer->len,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
    #line 1112 
    tx_buffer->len = 0U;
    #line 1114 
    tmp_6 = i;
    #line 1114 
    i = (u16)((int)i - 1);
    #line 1114 
    ;
    #line 1114 
    if ((unsigned int)tmp_6 == 0U) 
                                   #line 1115 
                                   i = (unsigned short)((int)tx_ring->count + (int)i);
    #line 1116 
    tx_buffer = tx_ring->__anonCompField_igc_ring_192.tx_buffer_info + (unsigned long)i;
  }
  #line 1119 
  if (tx_buffer->len != 0U) 
                            #line 1120 
                            dma_unmap_single_attrs(tx_ring->dev,tx_buffer->dma,(unsigned long)tx_buffer->len,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
  #line 1124 
  tx_buffer->len = 0U;
  #line 1126 
  dev_kfree_skb_any(tx_buffer->skb);
  #line 1127 
  tx_buffer->skb = (struct sk_buff *)0;
  #line 1129 
  tx_ring->next_to_use = i;
  #line 1131 
  return -1;
}

#line 1134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static netdev_tx_t igc_xmit_frame_ring(struct sk_buff *skb, struct igc_ring *tx_ring)
{
  #line 1139 
  struct igc_tx_buffer *first;
  #line 1141 
  unsigned short f;
  #line 1137 
  u16 count = (unsigned short)(((unsigned long)skb_headlen(skb) + 32767UL) / 32768UL);
  #line 1138 
  __be16 protocol = vlan_get_protocol(skb);
  #line 1140 
  u32 tx_flags = 0U;
  #line 1142 
  u8 hdr_len = (unsigned char)0U;
  #line 1150 
  f = (unsigned short)0U;
  #line 1150 
  while (1) {
    #line 1150 
    ;
    #line 1150 
    if (! ((int)((unsigned short)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags) > (int)f)) 
      #line 1150 
      break;
    #line 1152 
    count = (unsigned short)((int)((unsigned short)(((unsigned long)skb_frag_size(& ((struct skb_shared_info *)skb_end_pointer(skb))->frags[(int)f]) + 32767UL) / 32768UL)) + (int)count);
    #line 1150 
    f = (unsigned short)((int)f + 1);
  }
  #line 1154 
  if (igc_maybe_stop_tx(tx_ring,
                          (unsigned short)((int)((unsigned int)count + 3U))) != 0) 
    #line 1156 
    return NETDEV_TX_BUSY;
  #line 1160 
  first = tx_ring->__anonCompField_igc_ring_192.tx_buffer_info + (unsigned long)tx_ring->next_to_use;
  #line 1161 
  first->skb = skb;
  #line 1162 
  first->bytecount = skb->len;
  #line 1163 
  first->gso_segs = (unsigned short)1U;
  #line 1166 
  first->tx_flags = tx_flags;
  #line 1167 
  first->protocol = protocol;
  #line 1169 
  igc_tx_csum(tx_ring,first);
  #line 1171 
  igc_tx_map(tx_ring,first,(unsigned char)((int)hdr_len));
  #line 1173 
  return NETDEV_TX_OK;
}

#line 1176  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
__inline static struct igc_ring *igc_tx_queue_mapping(struct igc_adapter *adapter, struct sk_buff *skb)
{
  #line 1179 
  unsigned int r_idx = (unsigned int)skb->queue_mapping;
  #line 1181 
  if ((unsigned int)adapter->num_tx_queues <= r_idx) 
                                                     #line 1182 
                                                     r_idx %= (unsigned int)adapter->num_tx_queues;
  #line 1184 
  return adapter->tx_ring[r_idx];
}

#line 1187  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static netdev_tx_t igc_xmit_frame(struct sk_buff *skb, struct net_device *netdev)
{
  #line 1190 
  struct igc_adapter *adapter = netdev_priv(netdev);
  #line 1195 
  if (skb->len <= 16U) {
    #line 1196 
    if (skb_padto(skb,17U) != 0) 
                                 #line 1197 
                                 return NETDEV_TX_OK;
    #line 1198 
    skb->len = 17U;
  }
  #line 1201 
  ;
  #line 1201 
  return igc_xmit_frame_ring(skb,igc_tx_queue_mapping(adapter,skb));
}

#line 1204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static void igc_rx_checksum(struct igc_ring *ring, union igc_adv_rx_desc *rx_desc, struct sk_buff *skb)
{
  #line 1208 
  skb_checksum_none_assert(skb);
  #line 1211 
  if (igc_test_staterr(rx_desc,4U) != 0U) 
                                          #line 1212 
                                          return;
  #line 1215 
  if (((ring->netdev)->features & 549755813888ULL) == 0ULL) 
                                                            #line 1216 
                                                            return;
  #line 1219 
  if (igc_test_staterr(rx_desc,1610612736U) != 0U) {
    #line 1226 
    if (skb->len != 60U) 
                         #line 1226 
                         goto _LOR;
    else {
      #line 1226 
      if (! test_bit(2L,& ring->flags)) {
        #line 1226 
        _LOR: {
                #line 1228 
                u64_stats_update_begin(& ring->__anonCompField_igc_ring_195.__anonCompField___anonunion_3124_194.rx_syncp);
                #line 1229 
                (ring->__anonCompField_igc_ring_195.__anonCompField___anonunion_3124_194.rx_stats.csum_err) ++;
                #line 1230 
                u64_stats_update_begin(& ring->__anonCompField_igc_ring_195.__anonCompField___anonunion_3124_194.rx_syncp);
              }
      }
    }
    #line 1233 
    return;
  }
  #line 1236 
  if (igc_test_staterr(rx_desc,48U) != 0U) 
                                           #line 1238 
                                           skb->ip_summed = (unsigned char)1U;
  {
    #line 1240 
    bool branch;
    #line 1240 
    struct _ddebug __UNIQUE_ID_ddebug542 = {.modname = (char *)"igc", .function = (char *)"igc_rx_checksum", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c", .format = (char *)"cksum success: bits %08X\n", .lineno = (unsigned int)1240U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1240 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug542.key.dd_key_false.key,(_Bool)0);
    #line 1240 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 1240 
                                                __dynamic_dev_dbg(& __UNIQUE_ID_ddebug542,ring->dev,(char *)"cksum success: bits %08X\n",rx_desc->wb.upper.status_error);
  }
  #line 1242 
  return;
}

#line 1244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
__inline static void igc_rx_hash(struct igc_ring *ring, union igc_adv_rx_desc *rx_desc, struct sk_buff *skb)
{
  #line 1248 
  if (((ring->netdev)->features & 274877906944ULL) != 0ULL) 
                                                            #line 1249 
                                                            skb_set_hash(skb,rx_desc->wb.lower.hi_dword.rss,(enum pkt_hash_types)PKT_HASH_TYPE_L3);
  #line 1251 
  return;
}

#line 1264  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static void igc_process_skb_fields(struct igc_ring *rx_ring, union igc_adv_rx_desc *rx_desc, struct sk_buff *skb)
{
  #line 1268 
  igc_rx_hash(rx_ring,rx_desc,skb);
  #line 1270 
  igc_rx_checksum(rx_ring,rx_desc,skb);
  #line 1272 
  skb_record_rx_queue(skb,(unsigned short)((int)rx_ring->queue_index));
  #line 1274 
  skb->protocol = eth_type_trans(skb,rx_ring->netdev);
  #line 1275 
  return;
}

#line 1277  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static struct igc_rx_buffer *igc_get_rx_buffer(struct igc_ring *rx_ring, unsigned int size)
{
  #line 1280 
  struct igc_rx_buffer *rx_buffer;
  #line 1282 
  rx_buffer = rx_ring->__anonCompField_igc_ring_192.rx_buffer_info + (unsigned long)rx_ring->next_to_clean;
  #line 1283 
  prefetchw((void *)rx_buffer->page);
  #line 1286 
  dma_sync_single_range_for_cpu(rx_ring->dev,rx_buffer->dma,(unsigned long)rx_buffer->page_offset,(unsigned long)size,(enum dma_data_direction)DMA_FROM_DEVICE);
  #line 1292 
  rx_buffer->pagecnt_bias = (__u16)((int)rx_buffer->pagecnt_bias - 1);
  #line 1294 
  return rx_buffer;
}

#line 1306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static void igc_add_rx_frag(struct igc_ring *rx_ring, struct igc_rx_buffer *rx_buffer, struct sk_buff *skb, unsigned int size)
{
  #line 1312 
  unsigned int truesize = (unsigned int)((4096UL << igc_rx_pg_order(rx_ring)) / 2UL);
  #line 1314 
  ;
  #line 1314 
  ;
  #line 1314 
  ;
  #line 1314 
  ;
  #line 1314 
  ;
  #line 1314 
  skb_add_rx_frag(skb,(int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags,rx_buffer->page,(int)rx_buffer->page_offset,(int)size,truesize);
  #line 1316 
  rx_buffer->page_offset ^= truesize;
  #line 1317 
  return;
}

#line 1327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static struct sk_buff *igc_build_skb(struct igc_ring *rx_ring, struct igc_rx_buffer *rx_buffer, union igc_adv_rx_desc *rx_desc, unsigned int size)
{
  #line 1339 
  struct sk_buff *skb;
  #line 1332 
  void *va = lowmem_page_address(rx_buffer->page) + (unsigned long)rx_buffer->page_offset;
  #line 1334 
  unsigned int truesize = (unsigned int)((4096UL << igc_rx_pg_order(rx_ring)) / 2UL);
  #line 1342 
  __builtin_prefetch((void const *)va);
  #line 1344 
  __builtin_prefetch((void const *)(va + 64U));
  #line 1348 
  skb = build_skb(va + 18446744073709551552U,truesize);
  #line 1349 
  if ((long)(skb == (struct sk_buff *)0) != 0L) 
                                                #line 1350 
                                                return (struct sk_buff *)0;
  #line 1353 
  skb_reserve(skb,64);
  #line 1354 
  __skb_put(skb,size);
  #line 1358 
  rx_buffer->page_offset ^= truesize;
  #line 1363 
  return skb;
}

#line 1366  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static struct sk_buff *igc_construct_skb(struct igc_ring *rx_ring, struct igc_rx_buffer *rx_buffer, union igc_adv_rx_desc *rx_desc, unsigned int size)
{
  #line 1377 
  unsigned int headlen;
  #line 1378 
  struct sk_buff *skb;
  #line 1371 
  void *va = lowmem_page_address(rx_buffer->page) + (unsigned long)rx_buffer->page_offset;
  #line 1373 
  unsigned int truesize = (unsigned int)((4096UL << igc_rx_pg_order(rx_ring)) / 2UL);
  #line 1381 
  __builtin_prefetch((void const *)va);
  #line 1383 
  __builtin_prefetch((void const *)(va + 64U));
  #line 1387 
  skb = napi_alloc_skb(& (rx_ring->q_vector)->napi,256U);
  #line 1388 
  if ((long)(skb == (struct sk_buff *)0) != 0L) 
                                                #line 1389 
                                                return (struct sk_buff *)0;
  #line 1392 
  headlen = size;
  #line 1393 
  if (headlen > 256U) 
                      #line 1394 
                      headlen = eth_get_headlen(skb->__anonCompField_sk_buff_87.__anonCompField___anonunion_487_86.__anonCompField___anonstruct_488_85.dev,va,256U);
  #line 1397 
  ;
  #line 1397 
  ;
  #line 1397 
  memcpy(__skb_put(skb,headlen),va,(unsigned long)(headlen + 7U) & 4294967288UL);
  #line 1400 
  size -= headlen;
  #line 1401 
  if (size != 0U) {
    #line 1402 
    ;
    #line 1402 
    ;
    #line 1402 
    ;
    #line 1402 
    ;
    #line 1402 
    ;
    #line 1402 
    skb_add_rx_frag(skb,0,rx_buffer->page,(int)((va + (unsigned long)headlen) - lowmem_page_address(rx_buffer->page)),(int)size,truesize);
    #line 1406 
    rx_buffer->page_offset ^= truesize;
  }
  else 
       #line 1411 
       rx_buffer->pagecnt_bias = (__u16)((int)rx_buffer->pagecnt_bias + 1);
  #line 1414 
  return skb;
}

#line 1424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static void igc_reuse_rx_page(struct igc_ring *rx_ring, struct igc_rx_buffer *old_buff)
{
  #line 1428 
  struct igc_rx_buffer *new_buff;
  #line 1427 
  u16 nta = rx_ring->next_to_alloc;
  #line 1430 
  new_buff = rx_ring->__anonCompField_igc_ring_192.rx_buffer_info + (unsigned long)nta;
  #line 1433 
  nta = (u16)((int)nta + 1);
  #line 1434 
  if ((int)rx_ring->count > (int)nta) 
                                      #line 1434 
                                      rx_ring->next_to_alloc = nta; else 
                                                                    #line 1434 
                                                                    rx_ring->next_to_alloc = (unsigned short)0U;
  #line 1440 
  new_buff->dma = old_buff->dma;
  #line 1441 
  new_buff->page = old_buff->page;
  #line 1442 
  new_buff->page_offset = old_buff->page_offset;
  #line 1443 
  new_buff->pagecnt_bias = old_buff->pagecnt_bias;
  #line 1444 
  return;
}

#line 1446  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
__inline static bool igc_page_is_reserved(struct page *page)
{
  #line 1448 
  int tmp_2;
  #line 1448 
  if (page_to_nid(page) != numa_mem_id()) 
                                          #line 1448 
                                          tmp_2 = 1;
  else {
    #line 1448 
    if ((int)page_is_pfmemalloc(page) != 0) 
                                            #line 1448 
                                            tmp_2 = 1; else 
                                                            #line 1448 
                                                            tmp_2 = 0;
  }
  #line 1448 
  return (_Bool)(tmp_2 != 0);
}

#line 1451  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static bool igc_can_reuse_rx_page(struct igc_rx_buffer *rx_buffer)
{
  #line 1453 
  unsigned int pagecnt_bias = (unsigned int)rx_buffer->pagecnt_bias;
  #line 1454 
  struct page *page = rx_buffer->page;
  #line 1457 
  if ((long)((int)igc_page_is_reserved(page) != 0) != 0L) 
                                                          #line 1458 
                                                          return (_Bool)0;
  #line 1462 
  ;
  #line 1462 
  if ((long)((unsigned int)page_ref_count(page) - pagecnt_bias > 1U) != 0L) 
    #line 1463 
    return (_Bool)0;
  #line 1476 
  if ((long)(pagecnt_bias == 0U) != 0L) {
    #line 1477 
    page_ref_add(page,65535);
    #line 1478 
    rx_buffer->pagecnt_bias = (unsigned short)65535U;
  }
  #line 1481 
  return (_Bool)1;
}

#line 1495  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static bool igc_is_non_eop(struct igc_ring *rx_ring, union igc_adv_rx_desc *rx_desc)
{
  #line 1498 
  u32 ntc = (unsigned int)((int)rx_ring->next_to_clean + 1);
  #line 1501 
  if ((unsigned int)rx_ring->count > ntc) 
                                          #line 1501 
                                          ntc = ntc; else 
                                                          #line 1501 
                                                          ntc = 0U;
  #line 1502 
  rx_ring->next_to_clean = (unsigned short)ntc;
  #line 1504 
  __builtin_prefetch((void const *)((void *)((union igc_adv_rx_desc *)rx_ring->desc + (unsigned long)ntc)));
  #line 1506 
  if ((long)(igc_test_staterr(rx_desc,2U) != 0U) != 0L) 
                                                        #line 1507 
                                                        return (_Bool)0;
  #line 1509 
  return (_Bool)1;
}

#line 1526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static bool igc_cleanup_headers(struct igc_ring *rx_ring, union igc_adv_rx_desc *rx_desc, struct sk_buff *skb)
{
  #line 1530 
  if ((long)(igc_test_staterr(rx_desc,2533359616U) != 0U) != 0L) {
    #line 1532 
    struct net_device *netdev = rx_ring->netdev;
    #line 1534 
    if ((netdev->features & 8796093022208ULL) == 0ULL) {
      #line 1535 
      dev_kfree_skb_any(skb);
      #line 1536 
      return (_Bool)1;
    }
  }
  #line 1541 
  if (eth_skb_pad(skb) != 0) 
                             #line 1542 
                             return (_Bool)1;
  #line 1544 
  return (_Bool)0;
}

#line 1547  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static void igc_put_rx_buffer(struct igc_ring *rx_ring, struct igc_rx_buffer *rx_buffer)
{
  #line 1550 
  if ((int)igc_can_reuse_rx_page(rx_buffer) != 0) 
                                                  #line 1552 
                                                  igc_reuse_rx_page(rx_ring,rx_buffer);
  else {
    #line 1557 
    ;
    #line 1557 
    ;
    #line 1557 
    dma_unmap_page_attrs(rx_ring->dev,rx_buffer->dma,4096UL << igc_rx_pg_order(rx_ring),(enum dma_data_direction)DMA_FROM_DEVICE,34UL);
    #line 1560 
    __page_frag_cache_drain(rx_buffer->page,(unsigned int)rx_buffer->pagecnt_bias);
  }
  #line 1565 
  rx_buffer->page = (struct page *)0;
  #line 1566 
  return;
}

#line 1572  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static void igc_alloc_rx_buffers(struct igc_ring *rx_ring, u16 cleaned_count)
{
  #line 1574 
  union igc_adv_rx_desc *rx_desc;
  #line 1576 
  struct igc_rx_buffer *bi;
  #line 1577 
  u16 bufsz;
  #line 1575 
  u16 i = rx_ring->next_to_use;
  #line 1580 
  if ((unsigned int)cleaned_count == 0U) 
                                         #line 1581 
                                         return;
  #line 1583 
  rx_desc = (union igc_adv_rx_desc *)rx_ring->desc + (unsigned long)i;
  #line 1584 
  bi = rx_ring->__anonCompField_igc_ring_192.rx_buffer_info + (unsigned long)i;
  #line 1585 
  i = (unsigned short)((int)i - (int)rx_ring->count);
  #line 1587 
  bufsz = (unsigned short)igc_rx_bufsz(rx_ring);
  #line 1589 
  while (1) {
    {
      #line 1590 
      if (! igc_alloc_mapped_page(rx_ring,bi)) 
                                               #line 1591 
                                               break;
      #line 1594 
      dma_sync_single_range_for_device(rx_ring->dev,bi->dma,(unsigned long)bi->page_offset,(unsigned long)bufsz,(enum dma_data_direction)DMA_FROM_DEVICE);
      #line 1601 
      rx_desc->read.pkt_addr = bi->dma + (unsigned long long)bi->page_offset;
      #line 1603 
      rx_desc ++;
      #line 1604 
      bi ++;
      #line 1605 
      i = (u16)((int)i + 1);
      #line 1606 
      if ((long)((unsigned int)i == 0U) != 0L) {
        #line 1607 
        rx_desc = (union igc_adv_rx_desc *)rx_ring->desc;
        #line 1608 
        bi = rx_ring->__anonCompField_igc_ring_192.rx_buffer_info;
        #line 1609 
        i = (unsigned short)((int)i - (int)rx_ring->count);
      }
      #line 1613 
      rx_desc->wb.upper.length = (unsigned short)0U;
      #line 1615 
      cleaned_count = (u16)((int)cleaned_count - 1);
    }
    #line 1616 
    if (! ((unsigned int)cleaned_count != 0U)) 
                                               #line 1589 
                                               break;
  }
  #line 1618 
  i = (unsigned short)((int)rx_ring->count + (int)i);
  #line 1620 
  if ((int)rx_ring->next_to_use != (int)i) {
    #line 1622 
    rx_ring->next_to_use = i;
    #line 1625 
    rx_ring->next_to_alloc = i;
    #line 1626 
    ldv_inline_asm();
    #line 1633 
    writel((unsigned int)i,rx_ring->tail);
  }
  #line 1635 
  return;
}

#line 1637  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static int igc_clean_rx_irq(struct igc_q_vector *q_vector, int budget)
{
  #line 1639 
  unsigned int total_bytes = 0U;
  #line 1639 
  unsigned int total_packets = 0U;
  #line 1640 
  struct igc_ring *rx_ring = q_vector->rx.ring;
  #line 1641 
  struct sk_buff *skb = rx_ring->__anonCompField_igc_ring_195.__anonCompField___anonunion_3124_194.skb;
  #line 1642 
  u16 cleaned_count = igc_desc_unused(rx_ring);
  #line 1644 
  while ((long)(total_packets < (unsigned int)budget) != 0L) {
    #line 1645 
    union igc_adv_rx_desc *rx_desc;
    #line 1646 
    struct igc_rx_buffer *rx_buffer;
    #line 1647 
    unsigned int size;
    #line 1650 
    if ((unsigned int)cleaned_count > 15U) {
      #line 1651 
      igc_alloc_rx_buffers(rx_ring,(unsigned short)((int)cleaned_count));
      #line 1652 
      cleaned_count = (unsigned short)0U;
    }
    #line 1655 
    rx_desc = (union igc_adv_rx_desc *)rx_ring->desc + (unsigned long)rx_ring->next_to_clean;
    #line 1656 
    size = (unsigned int)rx_desc->wb.upper.length;
    #line 1657 
    if (size == 0U) 
                    #line 1658 
                    break;
    #line 1659 
    ldv_inline_asm();
    #line 1666 
    rx_buffer = igc_get_rx_buffer(rx_ring,size);
    #line 1669 
    if (skb != (struct sk_buff *)0) 
                                    #line 1670 
                                    igc_add_rx_frag(rx_ring,rx_buffer,skb,size);
    else {
      #line 1671 
      if ((int)test_bit(1L,& rx_ring->flags) != 0) 
                                                   #line 1672 
                                                   skb = igc_build_skb(rx_ring,rx_buffer,rx_desc,size); else 
                                                                    #line 1674 
                                                                    skb = igc_construct_skb(rx_ring,rx_buffer,rx_desc,size);
    }
    #line 1678 
    if (skb == (struct sk_buff *)0) {
      #line 1679 
      (rx_ring->__anonCompField_igc_ring_195.__anonCompField___anonunion_3124_194.rx_stats.alloc_failed) ++;
      #line 1680 
      rx_buffer->pagecnt_bias = (__u16)((int)rx_buffer->pagecnt_bias + 1);
      #line 1681 
      break;
    }
    #line 1684 
    igc_put_rx_buffer(rx_ring,rx_buffer);
    #line 1685 
    cleaned_count = (u16)((int)cleaned_count + 1);
    #line 1688 
    if ((int)igc_is_non_eop(rx_ring,rx_desc) != 0) 
                                                   #line 1689 
                                                   continue;
    #line 1692 
    if ((int)igc_cleanup_headers(rx_ring,rx_desc,skb) != 0) {
      #line 1693 
      skb = (struct sk_buff *)0;
      #line 1694 
      continue;
    }
    #line 1698 
    total_bytes = skb->len + total_bytes;
    #line 1701 
    igc_process_skb_fields(rx_ring,rx_desc,skb);
    #line 1703 
    napi_gro_receive(& q_vector->napi,skb);
    #line 1706 
    skb = (struct sk_buff *)0;
    #line 1709 
    total_packets ++;
  }
  #line 1713 
  rx_ring->__anonCompField_igc_ring_195.__anonCompField___anonunion_3124_194.skb = skb;
  #line 1715 
  u64_stats_update_begin(& rx_ring->__anonCompField_igc_ring_195.__anonCompField___anonunion_3124_194.rx_syncp);
  #line 1716 
  rx_ring->__anonCompField_igc_ring_195.__anonCompField___anonunion_3124_194.rx_stats.packets += (unsigned long long)total_packets;
  #line 1717 
  rx_ring->__anonCompField_igc_ring_195.__anonCompField___anonunion_3124_194.rx_stats.bytes += (unsigned long long)total_bytes;
  #line 1718 
  u64_stats_update_begin(& rx_ring->__anonCompField_igc_ring_195.__anonCompField___anonunion_3124_194.rx_syncp);
  #line 1719 
  q_vector->rx.total_packets += total_packets;
  #line 1720 
  q_vector->rx.total_bytes += total_bytes;
  #line 1722 
  if ((unsigned int)cleaned_count != 0U) 
                                         #line 1723 
                                         igc_alloc_rx_buffers(rx_ring,(unsigned short)((int)cleaned_count));
  #line 1725 
  return (int)total_packets;
}

#line 1728  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
__inline static unsigned int igc_rx_offset(struct igc_ring *rx_ring)
{
  #line 1730 
  unsigned int tmp_0;
  #line 1730 
  if ((int)test_bit(1L,& rx_ring->flags) != 0) 
                                               #line 1730 
                                               tmp_0 = 64U; else 
                                                                 #line 1730 
                                                                 tmp_0 = 0U;
  #line 1730 
  return tmp_0;
}

#line 1733  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static bool igc_alloc_mapped_page(struct igc_ring *rx_ring, struct igc_rx_buffer *bi)
{
  #line 1737 
  dma_addr_t dma;
  #line 1736 
  struct page *page = bi->page;
  #line 1740 
  if ((long)(page != (struct page *)0) != 0L) 
                                              #line 1741 
                                              return (_Bool)1;
  #line 1744 
  page = dev_alloc_pages(igc_rx_pg_order(rx_ring));
  #line 1745 
  if ((long)(page == (struct page *)0) != 0L) {
    #line 1746 
    (rx_ring->__anonCompField_igc_ring_195.__anonCompField___anonunion_3124_194.rx_stats.alloc_failed) ++;
    #line 1747 
    return (_Bool)0;
  }
  #line 1751 
  ;
  #line 1751 
  ;
  #line 1751 
  dma = dma_map_page_attrs(rx_ring->dev,page,0UL,4096UL << igc_rx_pg_order(rx_ring),(enum dma_data_direction)DMA_FROM_DEVICE,34UL);
  #line 1759 
  if (dma_mapping_error(rx_ring->dev,dma) != 0) {
    #line 1760 
    __free_pages(page,0U);
    #line 1762 
    (rx_ring->__anonCompField_igc_ring_195.__anonCompField___anonunion_3124_194.rx_stats.alloc_failed) ++;
    #line 1763 
    return (_Bool)0;
  }
  #line 1766 
  bi->dma = dma;
  #line 1767 
  bi->page = page;
  #line 1768 
  bi->page_offset = igc_rx_offset(rx_ring);
  #line 1769 
  bi->pagecnt_bias = (unsigned short)1U;
  #line 1771 
  return (_Bool)1;
}

#line 1781  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static bool igc_clean_tx_irq(struct igc_q_vector *q_vector, int napi_budget)
{
  #line 1788 
  struct igc_tx_buffer *tx_buffer;
  #line 1789 
  union igc_adv_tx_desc *tx_desc;
  #line 1923 
  int tmp_10;
  #line 1783 
  struct igc_adapter *adapter = q_vector->adapter;
  #line 1784 
  unsigned int total_bytes = 0U;
  #line 1784 
  unsigned int total_packets = 0U;
  #line 1785 
  unsigned int budget = (unsigned int)q_vector->tx.work_limit;
  #line 1786 
  struct igc_ring *tx_ring = q_vector->tx.ring;
  #line 1787 
  unsigned int i = (unsigned int)tx_ring->next_to_clean;
  #line 1791 
  if ((int)test_bit(2L,& adapter->state) != 0) 
                                               #line 1792 
                                               return (_Bool)1;
  #line 1794 
  tx_buffer = tx_ring->__anonCompField_igc_ring_192.tx_buffer_info + (unsigned long)i;
  #line 1795 
  tx_desc = (union igc_adv_tx_desc *)tx_ring->desc + (unsigned long)i;
  #line 1796 
  i -= (unsigned int)tx_ring->count;
  #line 1798 
  while (1) {
    {
      #line 1799 
      union igc_adv_tx_desc *eop_desc = tx_buffer->next_to_watch;
      #line 1802 
      if (eop_desc == (union igc_adv_tx_desc *)0) 
                                                  #line 1803 
                                                  break;
      #line 1804 
      ldv_inline_asm();
      #line 1809 
      if ((eop_desc->wb.status & 1U) == 0U) 
                                            #line 1810 
                                            break;
      #line 1813 
      tx_buffer->next_to_watch = (union igc_adv_tx_desc *)0;
      #line 1816 
      total_bytes = tx_buffer->bytecount + total_bytes;
      #line 1817 
      total_packets = (unsigned int)tx_buffer->gso_segs + total_packets;
      #line 1820 
      napi_consume_skb(tx_buffer->skb,napi_budget);
      #line 1823 
      dma_unmap_single_attrs(tx_ring->dev,tx_buffer->dma,(unsigned long)tx_buffer->len,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
      #line 1829 
      tx_buffer->len = 0U;
      #line 1832 
      while (tx_desc != eop_desc) {
        #line 1833 
        tx_buffer ++;
        #line 1834 
        tx_desc ++;
        #line 1835 
        i ++;
        #line 1836 
        if ((long)(i == 0U) != 0L) {
          #line 1837 
          i -= (unsigned int)tx_ring->count;
          #line 1838 
          tx_buffer = tx_ring->__anonCompField_igc_ring_192.tx_buffer_info;
          #line 1839 
          tx_desc = (union igc_adv_tx_desc *)tx_ring->desc;
        }
        #line 1843 
        if (tx_buffer->len != 0U) {
          #line 1844 
          dma_unmap_page_attrs(tx_ring->dev,tx_buffer->dma,(unsigned long)tx_buffer->len,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
          #line 1848 
          tx_buffer->len = 0U;
        }
      }
      #line 1853 
      tx_buffer ++;
      #line 1854 
      tx_desc ++;
      #line 1855 
      i ++;
      #line 1856 
      if ((long)(i == 0U) != 0L) {
        #line 1857 
        i -= (unsigned int)tx_ring->count;
        #line 1858 
        tx_buffer = tx_ring->__anonCompField_igc_ring_192.tx_buffer_info;
        #line 1859 
        tx_desc = (union igc_adv_tx_desc *)tx_ring->desc;
      }
      #line 1863 
      __builtin_prefetch((void const *)((void *)tx_desc));
      #line 1866 
      budget --;
    }
    #line 1867 
    if (! ((long)(budget != 0U) != 0L)) 
                                        #line 1798 
                                        break;
  }
  #line 1869 
  ;
  #line 1869 
  ;
  #line 1869 
  netdev_tx_completed_queue(txring_txq(tx_ring),total_packets,total_bytes);
  #line 1872 
  i = (unsigned int)tx_ring->count + i;
  #line 1873 
  tx_ring->next_to_clean = (unsigned short)i;
  #line 1874 
  u64_stats_update_begin(& tx_ring->__anonCompField_igc_ring_195.__anonCompField___anonunion_3124_193.tx_syncp);
  #line 1875 
  tx_ring->__anonCompField_igc_ring_195.__anonCompField___anonunion_3124_193.tx_stats.bytes += (unsigned long long)total_bytes;
  #line 1876 
  tx_ring->__anonCompField_igc_ring_195.__anonCompField___anonunion_3124_193.tx_stats.packets += (unsigned long long)total_packets;
  #line 1877 
  u64_stats_update_begin(& tx_ring->__anonCompField_igc_ring_195.__anonCompField___anonunion_3124_193.tx_syncp);
  #line 1878 
  q_vector->tx.total_bytes += total_bytes;
  #line 1879 
  q_vector->tx.total_packets += total_packets;
  #line 1881 
  if ((int)test_bit(5L,& tx_ring->flags) != 0) {
    #line 1882 
    struct igc_hw *hw = & adapter->hw;
    #line 1887 
    cif_clear_bit(5L,& tx_ring->flags);
    {
      #line 1889 
      unsigned long __dummy;
      #line 1889 
      unsigned long __dummy2;
      }
    #line 1888 
    if (1 != 0) {
      {
        #line 1889 
        unsigned long __dummy_0;
        #line 1889 
        unsigned long __dummy2_0;
        }
      #line 1889 
      if (1 != 0) 
        #line 1889 
        if ((long)((tx_buffer->time_stamp + (unsigned long)((int)adapter->tx_timeout_factor * 250)) - jiffies) < 0L) 
          #line 1888 
          if (tx_buffer->next_to_watch != (union igc_adv_tx_desc *)0) {
            #line 1890 
            if ((igc_rd32(hw,8U) & 16U) == 0U) {
              #line 1893 
              ;
              #line 1893 
              ;
              #line 1893 
              ;
              #line 1893 
              ;
              #line 1893 
              ;
              #line 1893 
              ;
              #line 1893 
              ;
              #line 1893 
              ;
              #line 1893 
              _dev_err(tx_ring->dev,(char *)"Detected Tx Unit Hang\n",(int)tx_ring->queue_index,igc_rd32(hw,(unsigned int)((int)tx_ring->reg_idx * 64 + 57360)),readl(tx_ring->tail),(int)tx_ring->next_to_use,(int)tx_ring->next_to_clean,tx_buffer->time_stamp,tx_buffer->next_to_watch,jiffies,(tx_buffer->next_to_watch)->wb.status);
              #line 1914 
              netif_stop_subqueue(tx_ring->netdev,(unsigned short)((int)tx_ring->queue_index));
              #line 1918 
              return (_Bool)1;
            }
          }
    }
  }
  #line 1923 
  if ((long)(total_packets != 0U) != 0L) {
    #line 1923 
    if ((long)((int)netif_carrier_ok(tx_ring->netdev) != 0) != 0L) 
                                                                   #line 1923 
                                                                   tmp_10 = 1; else 
                                                                    #line 1923 
                                                                    tmp_10 = 0;
  }
  else 
       #line 1923 
       tmp_10 = 0;
  #line 1923 
  if (tmp_10 != 0) {
    #line 1923 
    if ((long)((unsigned int)igc_desc_unused(tx_ring) > 41U) != 0L) {
      #line 1925 
      ldv_inline_asm();
      #line 1930 
      if ((int)__netif_subqueue_stopped(tx_ring->netdev,
                                 (unsigned short)((int)tx_ring->queue_index)) != 0) {
        #line 1932 
        if (! test_bit(2L,& adapter->state)) {
          #line 1933 
          netif_wake_subqueue(tx_ring->netdev,(unsigned short)((int)tx_ring->queue_index));
          #line 1936 
          u64_stats_update_begin(& tx_ring->__anonCompField_igc_ring_195.__anonCompField___anonunion_3124_193.tx_syncp);
          #line 1937 
          (tx_ring->__anonCompField_igc_ring_195.__anonCompField___anonunion_3124_193.tx_stats.restart_queue) ++;
          #line 1938 
          u64_stats_update_begin(& tx_ring->__anonCompField_igc_ring_195.__anonCompField___anonunion_3124_193.tx_syncp);
        }
      }
    }
  }
  #line 1942 
  return (_Bool)(budget != 0U);
}

#line 1949  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
void igc_up(struct igc_adapter *adapter)
{
  #line 1951 
  struct igc_hw *hw = & adapter->hw;
  #line 1952 
  int i = 0;
  #line 1955 
  igc_configure(adapter);
  #line 1957 
  cif_clear_bit(2L,& adapter->state);
  #line 1959 
  i = 0;
  #line 1959 
  while (adapter->num_q_vectors > (unsigned int)i) {
    #line 1960 
    napi_enable(& (adapter->q_vector[i])->napi);
    #line 1959 
    i ++;
  }
  #line 1962 
  if (adapter->msix_entries != (struct msix_entry *)0) 
                                                       #line 1963 
                                                       igc_configure_msix(adapter); else 
                                                                    #line 1965 
                                                                    igc_assign_vector(adapter->q_vector[0],0);
  #line 1968 
  igc_rd32(hw,5376U);
  #line 1969 
  igc_irq_enable(adapter);
  #line 1971 
  netif_tx_start_all_queues(adapter->netdev);
  #line 1974 
  hw->mac.get_link_status = (_Bool)1;
  #line 1975 
  cif_schedule_work(& adapter->watchdog_task);
  #line 1976 
  return;
}

#line 1982  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
void igc_update_stats(struct igc_adapter *adapter)
{
  #line 1987 
  u64 _bytes;
  #line 1987 
  u64 _packets;
  #line 1988 
  u64 bytes;
  #line 1988 
  u64 packets;
  #line 1989 
  unsigned int start;
  #line 1990 
  u32 mpc;
  #line 1991 
  int i;
  #line 1984 
  struct rtnl_link_stats64 *net_stats = & adapter->stats64;
  #line 1985 
  struct pci_dev *pdev = adapter->pdev;
  #line 1986 
  struct igc_hw *hw = & adapter->hw;
  #line 1996 
  if ((unsigned int)adapter->link_speed == 0U) 
                                               #line 1997 
                                               return;
  #line 1998 
  if (pci_channel_offline(pdev) != 0) 
                                      #line 1999 
                                      return;
  #line 2001 
  packets = 0ULL;
  #line 2002 
  bytes = 0ULL;
  #line 2004 
  rcu_read_lock();
  #line 2005 
  i = 0;
  #line 2005 
  while (adapter->num_rx_queues > i) {
    {
      #line 2006 
      struct igc_ring *ring = adapter->rx_ring[i];
      #line 2007 
      u32 rqdpc = igc_rd32(hw,(unsigned int)(i * 64 + 49200));
      #line 2009 
      if (hw->mac.type != (unsigned int)igc_undefined) {
        #line 2011 
        union __anonunion___u_3172 __u;
        #line 2010 
        __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
        #line 2010 
        u8 *hw_addr = (__u.__val);
        #line 2010 
        writel(0U,(void *)(hw_addr + (unsigned long)(i * 64 + 49200)));
      }
      #line 2012 
      if (rqdpc != 0U) {
        #line 2013 
        ring->__anonCompField_igc_ring_195.__anonCompField___anonunion_3124_194.rx_stats.drops += (unsigned long long)rqdpc;
        #line 2014 
        net_stats->rx_fifo_errors += (unsigned long long)rqdpc;
      }
      #line 2017 
      while (1) {
        #line 2018 
        start = u64_stats_fetch_begin_irq(& ring->__anonCompField_igc_ring_195.__anonCompField___anonunion_3124_194.rx_syncp);
        #line 2019 
        _bytes = ring->__anonCompField_igc_ring_195.__anonCompField___anonunion_3124_194.rx_stats.bytes;
        #line 2020 
        _packets = ring->__anonCompField_igc_ring_195.__anonCompField___anonunion_3124_194.rx_stats.packets;
        #line 2021 
        if (! ((int)u64_stats_fetch_retry_irq(& ring->__anonCompField_igc_ring_195.__anonCompField___anonunion_3124_194.rx_syncp,
                                  start) != 0)) 
          #line 2017 
          break;
      }
      #line 2022 
      bytes += _bytes;
      #line 2023 
      packets += _packets;
    }
    #line 2005 
    i ++;
  }
  #line 2026 
  net_stats->rx_bytes = bytes;
  #line 2027 
  net_stats->rx_packets = packets;
  #line 2029 
  packets = 0ULL;
  #line 2030 
  bytes = 0ULL;
  #line 2031 
  i = 0;
  #line 2031 
  while (adapter->num_tx_queues > i) {
    {
      #line 2032 
      struct igc_ring *ring_0 = adapter->tx_ring[i];
      #line 2034 
      while (1) {
        #line 2035 
        start = u64_stats_fetch_begin_irq(& ring_0->__anonCompField_igc_ring_195.__anonCompField___anonunion_3124_193.tx_syncp);
        #line 2036 
        _bytes = ring_0->__anonCompField_igc_ring_195.__anonCompField___anonunion_3124_193.tx_stats.bytes;
        #line 2037 
        _packets = ring_0->__anonCompField_igc_ring_195.__anonCompField___anonunion_3124_193.tx_stats.packets;
        #line 2038 
        if (! ((int)u64_stats_fetch_retry_irq(& ring_0->__anonCompField_igc_ring_195.__anonCompField___anonunion_3124_193.tx_syncp,
                                  start) != 0)) 
          #line 2034 
          break;
      }
      #line 2039 
      bytes += _bytes;
      #line 2040 
      packets += _packets;
    }
    #line 2031 
    i ++;
  }
  #line 2042 
  net_stats->tx_bytes = bytes;
  #line 2043 
  net_stats->tx_packets = packets;
  #line 2044 
  rcu_read_unlock();
  #line 2047 
  adapter->stats.crcerrs += (unsigned long long)igc_rd32(hw,16384U);
  #line 2048 
  adapter->stats.gprc += (unsigned long long)igc_rd32(hw,16500U);
  #line 2049 
  adapter->stats.gorc += (unsigned long long)igc_rd32(hw,16520U);
  #line 2050 
  igc_rd32(hw,16524U);
  #line 2051 
  adapter->stats.bprc += (unsigned long long)igc_rd32(hw,16504U);
  #line 2052 
  adapter->stats.mprc += (unsigned long long)igc_rd32(hw,16508U);
  #line 2053 
  adapter->stats.roc += (unsigned long long)igc_rd32(hw,16556U);
  #line 2055 
  adapter->stats.prc64 += (unsigned long long)igc_rd32(hw,16476U);
  #line 2056 
  adapter->stats.prc127 += (unsigned long long)igc_rd32(hw,16480U);
  #line 2057 
  adapter->stats.prc255 += (unsigned long long)igc_rd32(hw,16484U);
  #line 2058 
  adapter->stats.prc511 += (unsigned long long)igc_rd32(hw,16488U);
  #line 2059 
  adapter->stats.prc1023 += (unsigned long long)igc_rd32(hw,16492U);
  #line 2060 
  adapter->stats.prc1522 += (unsigned long long)igc_rd32(hw,16496U);
  #line 2061 
  adapter->stats.symerrs += (unsigned long long)igc_rd32(hw,16392U);
  #line 2062 
  adapter->stats.sec += (unsigned long long)igc_rd32(hw,16440U);
  #line 2064 
  mpc = igc_rd32(hw,16400U);
  #line 2065 
  adapter->stats.mpc += (unsigned long long)mpc;
  #line 2066 
  net_stats->rx_fifo_errors += (unsigned long long)mpc;
  #line 2067 
  adapter->stats.scc += (unsigned long long)igc_rd32(hw,16404U);
  #line 2068 
  adapter->stats.ecol += (unsigned long long)igc_rd32(hw,16408U);
  #line 2069 
  adapter->stats.mcc += (unsigned long long)igc_rd32(hw,16412U);
  #line 2070 
  adapter->stats.latecol += (unsigned long long)igc_rd32(hw,16416U);
  #line 2071 
  adapter->stats.dc += (unsigned long long)igc_rd32(hw,16432U);
  #line 2072 
  adapter->stats.rlec += (unsigned long long)igc_rd32(hw,16448U);
  #line 2073 
  adapter->stats.xonrxc += (unsigned long long)igc_rd32(hw,16456U);
  #line 2074 
  adapter->stats.xontxc += (unsigned long long)igc_rd32(hw,16460U);
  #line 2075 
  adapter->stats.xoffrxc += (unsigned long long)igc_rd32(hw,16464U);
  #line 2076 
  adapter->stats.xofftxc += (unsigned long long)igc_rd32(hw,16468U);
  #line 2077 
  adapter->stats.fcruc += (unsigned long long)igc_rd32(hw,16472U);
  #line 2078 
  adapter->stats.gptc += (unsigned long long)igc_rd32(hw,16512U);
  #line 2079 
  adapter->stats.gotc += (unsigned long long)igc_rd32(hw,16528U);
  #line 2080 
  igc_rd32(hw,16532U);
  #line 2081 
  adapter->stats.rnbc += (unsigned long long)igc_rd32(hw,16544U);
  #line 2082 
  adapter->stats.ruc += (unsigned long long)igc_rd32(hw,16548U);
  #line 2083 
  adapter->stats.rfc += (unsigned long long)igc_rd32(hw,16552U);
  #line 2084 
  adapter->stats.rjc += (unsigned long long)igc_rd32(hw,16560U);
  #line 2085 
  adapter->stats.tor += (unsigned long long)igc_rd32(hw,16580U);
  #line 2086 
  adapter->stats.tot += (unsigned long long)igc_rd32(hw,16588U);
  #line 2087 
  adapter->stats.tpr += (unsigned long long)igc_rd32(hw,16592U);
  #line 2089 
  adapter->stats.ptc64 += (unsigned long long)igc_rd32(hw,16600U);
  #line 2090 
  adapter->stats.ptc127 += (unsigned long long)igc_rd32(hw,16604U);
  #line 2091 
  adapter->stats.ptc255 += (unsigned long long)igc_rd32(hw,16608U);
  #line 2092 
  adapter->stats.ptc511 += (unsigned long long)igc_rd32(hw,16612U);
  #line 2093 
  adapter->stats.ptc1023 += (unsigned long long)igc_rd32(hw,16616U);
  #line 2094 
  adapter->stats.ptc1522 += (unsigned long long)igc_rd32(hw,16620U);
  #line 2096 
  adapter->stats.mptc += (unsigned long long)igc_rd32(hw,16624U);
  #line 2097 
  adapter->stats.bptc += (unsigned long long)igc_rd32(hw,16628U);
  #line 2099 
  adapter->stats.tpt += (unsigned long long)igc_rd32(hw,16596U);
  #line 2100 
  adapter->stats.colc += (unsigned long long)igc_rd32(hw,16424U);
  #line 2102 
  adapter->stats.algnerrc += (unsigned long long)igc_rd32(hw,16388U);
  #line 2104 
  adapter->stats.tsctc += (unsigned long long)igc_rd32(hw,16632U);
  #line 2105 
  adapter->stats.tsctfc += (unsigned long long)igc_rd32(hw,16636U);
  #line 2107 
  adapter->stats.iac += (unsigned long long)igc_rd32(hw,16640U);
  #line 2108 
  adapter->stats.icrxoc += (unsigned long long)igc_rd32(hw,16676U);
  #line 2109 
  adapter->stats.icrxptc += (unsigned long long)igc_rd32(hw,16644U);
  #line 2110 
  adapter->stats.icrxatc += (unsigned long long)igc_rd32(hw,16648U);
  #line 2111 
  adapter->stats.ictxptc += (unsigned long long)igc_rd32(hw,16652U);
  #line 2112 
  adapter->stats.ictxatc += (unsigned long long)igc_rd32(hw,16656U);
  #line 2113 
  adapter->stats.ictxqec += (unsigned long long)igc_rd32(hw,16664U);
  #line 2114 
  adapter->stats.ictxqmtc += (unsigned long long)igc_rd32(hw,16668U);
  #line 2115 
  adapter->stats.icrxdmtc += (unsigned long long)igc_rd32(hw,16672U);
  #line 2118 
  net_stats->multicast = adapter->stats.mprc;
  #line 2119 
  net_stats->collisions = adapter->stats.colc;
  #line 2126 
  net_stats->rx_errors = ((((adapter->stats.rxerrc + adapter->stats.crcerrs) + adapter->stats.algnerrc) + adapter->stats.ruc) + adapter->stats.roc) + adapter->stats.cexterr;
  #line 2130 
  net_stats->rx_length_errors = adapter->stats.ruc + adapter->stats.roc;
  #line 2132 
  net_stats->rx_crc_errors = adapter->stats.crcerrs;
  #line 2133 
  net_stats->rx_frame_errors = adapter->stats.algnerrc;
  #line 2134 
  net_stats->rx_missed_errors = adapter->stats.mpc;
  #line 2137 
  net_stats->tx_errors = adapter->stats.ecol + adapter->stats.latecol;
  #line 2139 
  net_stats->tx_aborted_errors = adapter->stats.ecol;
  #line 2140 
  net_stats->tx_window_errors = adapter->stats.latecol;
  #line 2141 
  net_stats->tx_carrier_errors = adapter->stats.tncrs;
  #line 2146 
  adapter->stats.mgptc += (unsigned long long)igc_rd32(hw,16572U);
  #line 2147 
  adapter->stats.mgprc += (unsigned long long)igc_rd32(hw,16564U);
  #line 2148 
  adapter->stats.mgpdc += (unsigned long long)igc_rd32(hw,16568U);
  #line 2149 
  return;
}

#line 2151  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static void igc_nfc_filter_exit(struct igc_adapter *adapter)
{
  #line 2157 
  struct igc_nfc_filter *tmp_0;
  #line 2160 
  struct igc_nfc_filter *tmp_6;
  #line 2157 
  void *__mptr;
  #line 2160 
  void *__mptr_1;
  #line 2153 
  struct igc_nfc_filter *rule;
  #line 2155 
  cif_spin_lock_nfc_lock_of_igc_adapter(& adapter->nfc_lock);
  {
    #line 2157 
    struct hlist_node *____ptr = adapter->nfc_filter_list.first;
    #line 2157 
    if (____ptr != (struct hlist_node *)0) {
      #line 2157 
      __mptr = (void *)____ptr;
      #line 2157 
      tmp_0 = ((struct igc_nfc_filter *)__mptr);
    }
    else 
         #line 2157 
         tmp_0 = (struct igc_nfc_filter *)0;
    }
  #line 2157 
  rule = tmp_0;
  #line 2157 
  while (rule != (struct igc_nfc_filter *)0) {
    #line 2157 
    void *__mptr_0;
    #line 2157 
    struct igc_nfc_filter *tmp_3;
    #line 2158 
    igc_erase_filter(adapter,rule);
    {
      #line 2157 
      struct hlist_node *____ptr_0 = rule->nfc_node.next;
      #line 2157 
      if (____ptr_0 != (struct hlist_node *)0) {
        #line 2157 
        __mptr_0 = (void *)____ptr_0;
        #line 2157 
        tmp_3 = ((struct igc_nfc_filter *)__mptr_0);
      }
      else 
           #line 2157 
           tmp_3 = (struct igc_nfc_filter *)0;
      }
    #line 2157 
    rule = tmp_3;
  }
  {
    #line 2160 
    struct hlist_node *____ptr_1 = adapter->cls_flower_list.first;
    #line 2160 
    if (____ptr_1 != (struct hlist_node *)0) {
      #line 2160 
      __mptr_1 = (void *)____ptr_1;
      #line 2160 
      tmp_6 = ((struct igc_nfc_filter *)__mptr_1);
    }
    else 
         #line 2160 
         tmp_6 = (struct igc_nfc_filter *)0;
    }
  #line 2160 
  rule = tmp_6;
  #line 2160 
  while (rule != (struct igc_nfc_filter *)0) {
    #line 2160 
    void *__mptr_2;
    #line 2160 
    struct igc_nfc_filter *tmp_9;
    #line 2161 
    igc_erase_filter(adapter,rule);
    {
      #line 2160 
      struct hlist_node *____ptr_2 = rule->nfc_node.next;
      #line 2160 
      if (____ptr_2 != (struct hlist_node *)0) {
        #line 2160 
        __mptr_2 = (void *)____ptr_2;
        #line 2160 
        tmp_9 = ((struct igc_nfc_filter *)__mptr_2);
      }
      else 
           #line 2160 
           tmp_9 = (struct igc_nfc_filter *)0;
      }
    #line 2160 
    rule = tmp_9;
  }
  #line 2163 
  cif_spin_unlock_nfc_lock_of_igc_adapter(& adapter->nfc_lock);
  #line 2164 
  return;
}

#line 2166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static void igc_nfc_filter_restore(struct igc_adapter *adapter)
{
  #line 2172 
  void *__mptr;
  #line 2172 
  struct igc_nfc_filter *tmp_0;
  #line 2168 
  struct igc_nfc_filter *rule;
  #line 2170 
  cif_spin_lock_nfc_lock_of_igc_adapter(& adapter->nfc_lock);
  {
    #line 2172 
    struct hlist_node *____ptr = adapter->nfc_filter_list.first;
    #line 2172 
    if (____ptr != (struct hlist_node *)0) {
      #line 2172 
      __mptr = (void *)____ptr;
      #line 2172 
      tmp_0 = ((struct igc_nfc_filter *)__mptr);
    }
    else 
         #line 2172 
         tmp_0 = (struct igc_nfc_filter *)0;
    }
  #line 2172 
  rule = tmp_0;
  #line 2172 
  while (rule != (struct igc_nfc_filter *)0) {
    #line 2172 
    void *__mptr_0;
    #line 2172 
    struct igc_nfc_filter *tmp_3;
    #line 2173 
    igc_add_filter(adapter,rule);
    {
      #line 2172 
      struct hlist_node *____ptr_0 = rule->nfc_node.next;
      #line 2172 
      if (____ptr_0 != (struct hlist_node *)0) {
        #line 2172 
        __mptr_0 = (void *)____ptr_0;
        #line 2172 
        tmp_3 = ((struct igc_nfc_filter *)__mptr_0);
      }
      else 
           #line 2172 
           tmp_3 = (struct igc_nfc_filter *)0;
      }
    #line 2172 
    rule = tmp_3;
  }
  #line 2175 
  cif_spin_unlock_nfc_lock_of_igc_adapter(& adapter->nfc_lock);
  #line 2176 
  return;
}

#line 2182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
void igc_down(struct igc_adapter *adapter)
{
  #line 2186 
  u32 tctl;
  #line 2186 
  u32 rctl;
  #line 2184 
  struct net_device *netdev = adapter->netdev;
  #line 2185 
  struct igc_hw *hw = & adapter->hw;
  #line 2187 
  int i = 0;
  #line 2189 
  cif_set_bit(2L,& adapter->state);
  #line 2192 
  rctl = igc_rd32(hw,256U);
  {
    #line 2194 
    union __anonunion___u_3174 __u;
    #line 2193 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 2193 
    u8 *hw_addr = (__u.__val);
    #line 2193 
    writel(rctl & 4294967293U,(void *)(hw_addr + 256U));
  }
  #line 2196 
  igc_nfc_filter_exit(adapter);
  #line 2199 
  netif_trans_update(netdev);
  #line 2201 
  netif_carrier_off(netdev);
  #line 2202 
  netif_tx_stop_all_queues(netdev);
  #line 2205 
  tctl = igc_rd32(hw,1024U);
  #line 2206 
  tctl &= 4294967293U;
  {
    #line 2208 
    union __anonunion___u_3176 __u_0;
    #line 2207 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
    #line 2207 
    u8 *hw_addr_0 = (__u_0.__val);
    #line 2207 
    writel(tctl,(void *)(hw_addr_0 + 1024U));
  }
  #line 2209 
  igc_rd32(hw,8U);
  #line 2210 
  usleep_range(10000UL,20000UL);
  #line 2212 
  igc_irq_disable(adapter);
  #line 2214 
  adapter->flags &= 4294966783U;
  #line 2216 
  i = 0;
  #line 2216 
  while (adapter->num_q_vectors > (unsigned int)i) {
    #line 2217 
    if (adapter->q_vector[i] != (struct igc_q_vector *)0) {
      #line 2218 
      napi_synchronize(& (adapter->q_vector[i])->napi);
      #line 2219 
      napi_disable(& (adapter->q_vector[i])->napi);
    }
    #line 2216 
    i ++;
  }
  #line 2223 
  cif_del_timer_sync(& adapter->watchdog_timer);
  #line 2224 
  cif_del_timer_sync(& adapter->phy_info_timer);
  #line 2227 
  cif_spin_lock_stats64_lock_of_igc_adapter(& adapter->stats64_lock);
  #line 2228 
  igc_update_stats(adapter);
  #line 2229 
  cif_spin_unlock_stats64_lock_of_igc_adapter(& adapter->stats64_lock);
  #line 2231 
  adapter->link_speed = (unsigned short)0U;
  #line 2232 
  adapter->link_duplex = (unsigned short)0U;
  #line 2234 
  if (pci_channel_offline(adapter->pdev) == 0) 
                                               #line 2235 
                                               igc_reset(adapter);
  #line 2238 
  adapter->flags &= 4294934527U;
  #line 2240 
  igc_clean_all_tx_rings(adapter);
  #line 2241 
  igc_clean_all_rx_rings(adapter);
  #line 2242 
  return;
}

#line 2244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
void igc_reinit_locked(struct igc_adapter *adapter)
{
  {
    #line 2246 
    int __ret_warn_on = ((unsigned long)preempt_count() & 2096896UL) != 0UL;
    #line 2246 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 2247 
      ldv_inline_asm();
      #line 2248 
      ldv_inline_asm();
    }
    #line 2246 
    long tmp_2 = (long)(__ret_warn_on != 0);
  }
  #line 2247 
  while (1) {
    #line 2247 
    if (! ((int)test_and_set_bit(1L,& adapter->state) != 0)) 
                                                             #line 2247 
                                                             break;
    #line 2248 
    usleep_range(1000UL,2000UL);
  }
  #line 2249 
  igc_down(adapter);
  #line 2250 
  igc_up(adapter);
  #line 2251 
  cif_clear_bit(1L,& adapter->state);
  #line 2252 
  return;
}

#line 2254  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static void igc_reset_task(struct work_struct *work)
{
  #line 2258 
  void *__mptr;
  #line 2256 
  struct igc_adapter *adapter;
  #line 2258 
  __mptr = (void *)work;
  #line 2258 
  adapter = ((struct igc_adapter *)(__mptr + 18446744073709551208U));
  #line 2260 
  netdev_err(adapter->netdev,(char *)"Reset adapter\n");
  #line 2261 
  igc_reinit_locked(adapter);
  #line 2262 
  return;
}

#line 2271  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static int igc_change_mtu(struct net_device *netdev, int new_mtu)
{
  #line 2273 
  int max_frame = new_mtu + 22;
  #line 2274 
  struct igc_adapter *adapter = netdev_priv(netdev);
  #line 2277 
  if (max_frame <= 1517) 
                         #line 2278 
                         max_frame = 1518;
  #line 2280 
  while (1) {
    #line 2280 
    if (! ((int)test_and_set_bit(1L,& adapter->state) != 0)) 
                                                             #line 2280 
                                                             break;
    #line 2281 
    usleep_range(1000UL,2000UL);
  }
  #line 2284 
  adapter->max_frame_size = (unsigned int)max_frame;
  #line 2286 
  if ((int)netif_running(netdev) != 0) 
                                       #line 2287 
                                       igc_down(adapter);
  {
    #line 2289 
    bool branch;
    #line 2289 
    struct _ddebug __UNIQUE_ID_ddebug550 = {.modname = (char *)"igc", .function = (char *)"igc_change_mtu", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c", .format = (char *)"changing MTU from %d to %d\n", .lineno = (unsigned int)2289U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 2289 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug550.key.dd_key_false.key,(_Bool)0);
    #line 2289 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 2289 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug550,netdev,(char *)"changing MTU from %d to %d\n",netdev->mtu,new_mtu);
  }
  #line 2291 
  netdev->mtu = (unsigned int)new_mtu;
  #line 2293 
  if ((int)netif_running(netdev) != 0) 
                                       #line 2294 
                                       igc_up(adapter); else 
                                                             #line 2296 
                                                             igc_reset(adapter);
  #line 2298 
  cif_clear_bit(1L,& adapter->state);
  #line 2300 
  return 0;
}

#line 2310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static struct net_device_stats *igc_get_stats(struct net_device *netdev)
{
  #line 2312 
  struct igc_adapter *adapter = netdev_priv(netdev);
  #line 2314 
  if (! test_bit(1L,& adapter->state)) 
                                       #line 2315 
                                       igc_update_stats(adapter);
  #line 2318 
  return & netdev->stats;
}

#line 2321  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static netdev_features_t igc_fix_features(struct net_device *netdev, netdev_features_t features)
{
  #line 2327 
  if ((features & 256ULL) != 0ULL) 
                                   #line 2328 
                                   features |= 128ULL; else 
                                                            #line 2330 
                                                            features &= 18446744073709551487ULL;
  #line 2332 
  return features;
}

#line 2335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static int igc_set_features(struct net_device *netdev, netdev_features_t features)
{
  #line 2338 
  netdev_features_t changed = netdev->features ^ features;
  #line 2339 
  struct igc_adapter *adapter = netdev_priv(netdev);
  #line 2342 
  if ((changed & 8933531975680ULL) == 0ULL) 
                                            #line 2343 
                                            return 0;
  #line 2345 
  if ((features & 137438953472ULL) == 0ULL) {
    #line 2350 
    void *__mptr;
    #line 2350 
    struct igc_nfc_filter *tmp_1;
    #line 2346 
    struct hlist_node *node2;
    #line 2347 
    struct igc_nfc_filter *rule;
    #line 2349 
    cif_spin_lock_nfc_lock_of_igc_adapter(& adapter->nfc_lock);
    {
      #line 2350 
      struct hlist_node *____ptr = adapter->nfc_filter_list.first;
      #line 2350 
      if (____ptr != (struct hlist_node *)0) {
        #line 2350 
        __mptr = (void *)____ptr;
        #line 2350 
        tmp_1 = ((struct igc_nfc_filter *)__mptr);
      }
      else 
           #line 2350 
           tmp_1 = (struct igc_nfc_filter *)0;
      }
    #line 2350 
    rule = tmp_1;
    #line 2350 
    while (1) {
      #line 2350 
      struct igc_nfc_filter *tmp_4;
      #line 2350 
      void *__mptr_0;
      #line 2350 
      if (rule != (struct igc_nfc_filter *)0) {
        #line 2350 
        node2 = rule->nfc_node.next;
        #line 2350 
        if (! (1 != 0)) 
                        #line 2350 
                        break;
      }
      else 
           #line 2350 
           break;
      #line 2352 
      igc_erase_filter(adapter,rule);
      #line 2353 
      hlist_del(& rule->nfc_node);
      #line 2354 
      kfree((void *)rule);
      {
        #line 2350 
        struct hlist_node *____ptr_0 = node2;
        #line 2350 
        if (____ptr_0 != (struct hlist_node *)0) {
          #line 2350 
          __mptr_0 = (void *)____ptr_0;
          #line 2350 
          tmp_4 = ((struct igc_nfc_filter *)__mptr_0);
        }
        else 
             #line 2350 
             tmp_4 = (struct igc_nfc_filter *)0;
        }
      #line 2350 
      rule = tmp_4;
    }
    #line 2356 
    cif_spin_unlock_nfc_lock_of_igc_adapter(& adapter->nfc_lock);
    #line 2357 
    adapter->nfc_filter_count = 0U;
  }
  #line 2360 
  netdev->features = features;
  #line 2362 
  if ((int)netif_running(netdev) != 0) 
                                       #line 2363 
                                       igc_reinit_locked(adapter); else 
                                                                    #line 2365 
                                                                    igc_reset(adapter);
  #line 2367 
  return 1;
}

#line 2371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static netdev_features_t igc_features_check(struct sk_buff *skb, struct net_device *dev, netdev_features_t features)
{
  #line 2374 
  unsigned int network_hdr_len;
  #line 2374 
  unsigned int mac_hdr_len;
  #line 2377 
  mac_hdr_len = (unsigned int)(skb_network_header(skb) - skb->data);
  #line 2378 
  if ((long)(mac_hdr_len > 127U) != 0L) 
                                        #line 2379 
                                        return features & 18446744039348698999ULL;
  #line 2385 
  network_hdr_len = (unsigned int)(skb_checksum_start(skb) - skb_network_header(skb));
  #line 2386 
  if ((long)(network_hdr_len > 511U) != 0L) 
                                            #line 2387 
                                            return features & 18446744039348699127ULL;
  #line 2395 
  if ((unsigned int)skb->encapsulation != 0U && (features & 524288ULL) == 0ULL) 
    #line 2396 
    features &= 18446744073709486079ULL;
  #line 2398 
  return features;
}

#line 2405  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static void igc_configure(struct igc_adapter *adapter)
{
  #line 2407 
  struct net_device *netdev = adapter->netdev;
  #line 2408 
  int i = 0;
  #line 2410 
  igc_get_hw_control(adapter);
  #line 2411 
  igc_set_rx_mode(netdev);
  #line 2413 
  igc_setup_tctl(adapter);
  #line 2414 
  igc_setup_mrqc(adapter);
  #line 2415 
  igc_setup_rctl(adapter);
  #line 2417 
  igc_nfc_filter_restore(adapter);
  #line 2418 
  igc_configure_tx(adapter);
  #line 2419 
  igc_configure_rx(adapter);
  #line 2421 
  igc_rx_fifo_flush_base(& adapter->hw);
  #line 2427 
  i = 0;
  #line 2427 
  while (adapter->num_rx_queues > i) {
    {
      #line 2428 
      struct igc_ring *ring = adapter->rx_ring[i];
      #line 2430 
      ;
      #line 2430 
      igc_alloc_rx_buffers(ring,(unsigned short)((int)igc_desc_unused(ring)));
    }
    #line 2427 
    i ++;
  }
  #line 2432 
  return;
}

#line 2439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static void igc_rar_set_index(struct igc_adapter *adapter, u32 index)
{
  #line 2443 
  u32 rar_low;
  #line 2443 
  u32 rar_high;
  #line 2441 
  u8 *addr = (u8 *)(& (adapter->mac_table + (unsigned long)index)->addr);
  #line 2442 
  struct igc_hw *hw = & adapter->hw;
  #line 2450 
  rar_low = __le32_to_cpup((__le32 *)addr);
  #line 2451 
  rar_high = (unsigned int)__le16_to_cpup((__le16 *)(addr + 4U));
  #line 2454 
  if (((int)(adapter->mac_table + (unsigned long)index)->state & 2) != 0) {
    #line 2455 
    if ((int)is_valid_ether_addr(addr) != 0) 
                                             #line 2456 
                                             rar_high |= 2147483648U;
    #line 2458 
    rar_high = (unsigned int)(262144 << (int)(adapter->mac_table + (unsigned long)index)->queue) | rar_high;
  }
  {
    #line 2463 
    union __anonunion___u_3178 __u;
    #line 2462 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 2462 
    u8 *hw_addr = (__u.__val);
    #line 2462 
    writel(rar_low,(void *)(hw_addr + (unsigned long)((index + 2688U) * 8U)));
  }
  #line 2463 
  igc_rd32(hw,8U);
  {
    #line 2465 
    union __anonunion___u_3180 __u_0;
    #line 2464 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
    #line 2464 
    u8 *hw_addr_0 = (__u_0.__val);
    #line 2464 
    writel(rar_high,(void *)(hw_addr_0 + (unsigned long)(index * 8U + 21508U)));
  }
  #line 2465 
  igc_rd32(hw,8U);
  #line 2466 
  return;
}

#line 2469  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static void igc_set_default_mac_filter(struct igc_adapter *adapter)
{
  #line 2471 
  struct igc_mac_addr *mac_table = adapter->mac_table;
  #line 2473 
  ether_addr_copy((u8 *)(& mac_table->addr),(u8 *)(& adapter->hw.mac.addr));
  #line 2474 
  mac_table->state = (unsigned char)3U;
  #line 2476 
  igc_rar_set_index(adapter,0U);
  #line 2477 
  return;
}

#line 2484  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static bool igc_mac_entry_can_be_used(struct igc_mac_addr *entry, u8 *addr, u8 flags)
{
  #line 2487 
  if (((int)entry->state & 2) == 0) 
                                    #line 2488 
                                    return (_Bool)1;
  #line 2490 
  if ((((int)entry->state ^ (int)flags) & 4) != 0) 
                                                   #line 2492 
                                                   return (_Bool)0;
  #line 2494 
  if (! ether_addr_equal(addr,(u8 *)(& entry->addr))) 
                                                      #line 2495 
                                                      return (_Bool)0;
  #line 2497 
  return (_Bool)1;
}

#line 2505  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static int igc_add_mac_filter_flags(struct igc_adapter *adapter, u8 *addr, u8 queue, u8 flags)
{
  #line 2511 
  int i;
  #line 2509 
  struct igc_hw *hw = & adapter->hw;
  #line 2510 
  int rar_entries = (int)hw->mac.rar_entry_count;
  #line 2513 
  if ((int)is_zero_ether_addr(addr) != 0) 
                                          #line 2514 
                                          return -22;
  #line 2520 
  i = 0;
  #line 2520 
  while (i < rar_entries) {
    {
      #line 2521 
      if (! igc_mac_entry_can_be_used(adapter->mac_table + (unsigned long)i,addr,
                                  (unsigned char)((int)flags))) 
        #line 2523 
        goto __Cont;
      #line 2525 
      ether_addr_copy((u8 *)(& (adapter->mac_table + (unsigned long)i)->addr),addr);
      #line 2526 
      (adapter->mac_table + (unsigned long)i)->queue = queue;
      #line 2527 
      (adapter->mac_table + (unsigned long)i)->state = (unsigned char)((unsigned int)((int)(adapter->mac_table + (unsigned long)i)->state | (int)flags) | 2U);
      #line 2529 
      igc_rar_set_index(adapter,(unsigned int)i);
      #line 2530 
      return i;
    }
    #line 2520 
    __Cont: 
            #line 2520 
    i ++;
  }
  #line 2533 
  return -28;
}

#line 2536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
int igc_add_mac_steering_filter(struct igc_adapter *adapter, u8 *addr, u8 queue, u8 flags)
{
  #line 2539 
  return igc_add_mac_filter_flags(adapter,addr,(unsigned char)((int)queue),
                               (unsigned char)((int)((unsigned int)flags | 8U)));
}

#line 2549  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static int igc_del_mac_filter_flags(struct igc_adapter *adapter, u8 *addr, u8 queue, u8 flags)
{
  #line 2555 
  int i;
  #line 2553 
  struct igc_hw *hw = & adapter->hw;
  #line 2554 
  int rar_entries = (int)hw->mac.rar_entry_count;
  #line 2557 
  if ((int)is_zero_ether_addr(addr) != 0) 
                                          #line 2558 
                                          return -22;
  #line 2564 
  i = 0;
  #line 2564 
  while (i < rar_entries) {
    {
      #line 2565 
      if (((int)(adapter->mac_table + (unsigned long)i)->state & 2) == 0) 
        #line 2566 
        goto __Cont;
      #line 2567 
      if (((int)(adapter->mac_table + (unsigned long)i)->state & (int)flags) != (int)flags) 
        #line 2568 
        goto __Cont;
      #line 2569 
      if ((int)(adapter->mac_table + (unsigned long)i)->queue != (int)queue) 
        #line 2570 
        goto __Cont;
      #line 2571 
      if (! ether_addr_equal((u8 *)(& (adapter->mac_table + (unsigned long)i)->addr),
                         addr)) 
        #line 2572 
        goto __Cont;
      #line 2577 
      if (((int)(adapter->mac_table + (unsigned long)i)->state & 1) != 0) 
        #line 2578 
        (adapter->mac_table + (unsigned long)i)->state = (unsigned char)3U;
      else {
        #line 2581 
        (adapter->mac_table + (unsigned long)i)->state = (unsigned char)0U;
        #line 2582 
        (adapter->mac_table + (unsigned long)i)->queue = (unsigned char)0U;
        #line 2583 
        memset((void *)(& (adapter->mac_table + (unsigned long)i)->addr),0,6UL);
      }
      #line 2586 
      igc_rar_set_index(adapter,(unsigned int)i);
      #line 2587 
      return 0;
    }
    #line 2564 
    __Cont: 
            #line 2564 
    i ++;
  }
  #line 2590 
  return -2;
}

#line 2593  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
int igc_del_mac_steering_filter(struct igc_adapter *adapter, u8 *addr, u8 queue, u8 flags)
{
  #line 2596 
  return igc_del_mac_filter_flags(adapter,addr,(unsigned char)((int)queue),
                               (unsigned char)((int)((unsigned int)flags | 8U)));
}

#line 2605  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static int igc_add_mac_filter(struct igc_adapter *adapter, u8 *addr, u8 queue)
{
  #line 2610 
  int i;
  #line 2608 
  struct igc_hw *hw = & adapter->hw;
  #line 2609 
  int rar_entries = (int)hw->mac.rar_entry_count;
  #line 2612 
  if ((int)is_zero_ether_addr(addr) != 0) 
                                          #line 2613 
                                          return -22;
  #line 2619 
  i = 0;
  #line 2619 
  while (i < rar_entries) {
    {
      #line 2620 
      if (! igc_mac_entry_can_be_used(adapter->mac_table + (unsigned long)i,addr,
                                  (unsigned char)0)) 
        #line 2622 
        goto __Cont;
      #line 2624 
      ether_addr_copy((u8 *)(& (adapter->mac_table + (unsigned long)i)->addr),addr);
      #line 2625 
      (adapter->mac_table + (unsigned long)i)->queue = queue;
      #line 2626 
      (adapter->mac_table + (unsigned long)i)->state = (unsigned char)((unsigned int)(adapter->mac_table + (unsigned long)i)->state | 2U);
      #line 2628 
      igc_rar_set_index(adapter,(unsigned int)i);
      #line 2629 
      return i;
    }
    #line 2619 
    __Cont: 
            #line 2619 
    i ++;
  }
  #line 2632 
  return -28;
}

#line 2641  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static int igc_del_mac_filter(struct igc_adapter *adapter, u8 *addr, u8 queue)
{
  #line 2646 
  int i;
  #line 2644 
  struct igc_hw *hw = & adapter->hw;
  #line 2645 
  int rar_entries = (int)hw->mac.rar_entry_count;
  #line 2648 
  if ((int)is_zero_ether_addr(addr) != 0) 
                                          #line 2649 
                                          return -22;
  #line 2655 
  i = 0;
  #line 2655 
  while (i < rar_entries) {
    {
      #line 2656 
      if (((int)(adapter->mac_table + (unsigned long)i)->state & 2) == 0) 
        #line 2657 
        goto __Cont;
      #line 2658 
      if ((unsigned int)(adapter->mac_table + (unsigned long)i)->state != 0U) 
        #line 2659 
        goto __Cont;
      #line 2660 
      if ((int)(adapter->mac_table + (unsigned long)i)->queue != (int)queue) 
        #line 2661 
        goto __Cont;
      #line 2662 
      if (! ether_addr_equal((u8 *)(& (adapter->mac_table + (unsigned long)i)->addr),
                         addr)) 
        #line 2663 
        goto __Cont;
      #line 2668 
      if (((int)(adapter->mac_table + (unsigned long)i)->state & 1) != 0) {
        #line 2669 
        (adapter->mac_table + (unsigned long)i)->state = (unsigned char)3U;
        #line 2671 
        (adapter->mac_table + (unsigned long)i)->queue = (unsigned char)0U;
      }
      else {
        #line 2673 
        (adapter->mac_table + (unsigned long)i)->state = (unsigned char)0U;
        #line 2674 
        (adapter->mac_table + (unsigned long)i)->queue = (unsigned char)0U;
        #line 2675 
        memset((void *)(& (adapter->mac_table + (unsigned long)i)->addr),0,6UL);
      }
      #line 2678 
      igc_rar_set_index(adapter,(unsigned int)i);
      #line 2679 
      return 0;
    }
    #line 2655 
    __Cont: 
            #line 2655 
    i ++;
  }
  #line 2682 
  return -2;
}

#line 2685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static int igc_uc_sync(struct net_device *netdev, unsigned char *addr)
{
  #line 2692 
  int __UNIQUE_ID___x551;
  #line 2692 
  int tmp_0;
  #line 2688 
  int ret;
  #line 2687 
  struct igc_adapter *adapter = netdev_priv(netdev);
  #line 2690 
  ret = igc_add_mac_filter(adapter,addr,(unsigned char)((int)((unsigned char)adapter->num_rx_queues)));
  {
    #line 2692 
    __UNIQUE_ID___x551 = ret;
    #line 2692 
    int __UNIQUE_ID___y552 = 0;
    #line 2692 
    if (__UNIQUE_ID___x551 < __UNIQUE_ID___y552) 
                                                 #line 2692 
                                                 tmp_0 = __UNIQUE_ID___x551; else 
                                                                    #line 2692 
                                                                    tmp_0 = __UNIQUE_ID___y552;
    }
  #line 2692 
  return tmp_0;
}

#line 2695  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static int igc_uc_unsync(struct net_device *netdev, unsigned char *addr)
{
  #line 2697 
  struct igc_adapter *adapter = netdev_priv(netdev);
  #line 2699 
  igc_del_mac_filter(adapter,addr,(unsigned char)((int)((unsigned char)adapter->num_rx_queues)));
  #line 2701 
  return 0;
}

#line 2713  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static void igc_set_rx_mode(struct net_device *netdev)
{
  #line 2718 
  int count;
  #line 2715 
  struct igc_adapter *adapter = netdev_priv(netdev);
  #line 2716 
  struct igc_hw *hw = & adapter->hw;
  #line 2717 
  u32 rctl = 0U;
  #line 2717 
  u32 rlpml = 9728U;
  #line 2721 
  if ((netdev->flags & 256U) != 0U) 
                                    #line 2722 
                                    rctl |= 24U;
  else 
    #line 2724 
    if ((netdev->flags & 512U) != 0U) 
                                      #line 2725 
                                      rctl |= 16U;
    else {
      #line 2731 
      count = igc_write_mc_addr_list(netdev);
      #line 2732 
      if (count < 0) 
                     #line 2733 
                     rctl |= 16U;
    }
  #line 2741 
  if (__dev_uc_sync(netdev,& igc_uc_sync,& igc_uc_unsync) != 0) 
                                                                #line 2742 
                                                                rctl |= 8U;
  #line 2745 
  rctl = (igc_rd32(hw,256U) & 4294967271U) | rctl;
  {
    #line 2747 
    union __anonunion___u_3182 __u;
    #line 2746 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 2746 
    u8 *hw_addr = (__u.__val);
    #line 2746 
    writel(rctl,(void *)(hw_addr + 256U));
  }
  #line 2749 
  if (adapter->max_frame_size <= 1648U) 
                                        #line 2750 
                                        rlpml = 1648U;
  {
    #line 2753 
    union __anonunion___u_3184 __u_0;
    #line 2752 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
    #line 2752 
    u8 *hw_addr_0 = (__u_0.__val);
    #line 2752 
    writel(rlpml,(void *)(hw_addr_0 + 20484U));
  }
  #line 2754 
  return;
}

#line 2760  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static irqreturn_t igc_msix_other(int irq, void *data)
{
  #line 2762 
  struct igc_adapter *adapter = (struct igc_adapter *)data;
  #line 2763 
  struct igc_hw *hw = & adapter->hw;
  #line 2764 
  u32 icr = igc_rd32(hw,5376U);
  #line 2767 
  if (((unsigned long)icr & 1073741824UL) != 0UL) 
                                                  #line 2768 
                                                  cif_schedule_work(& adapter->reset_task);
  #line 2770 
  if ((icr & 268435456U) != 0U) 
                                #line 2772 
                                (adapter->stats.doosync) ++;
  #line 2775 
  if (((unsigned long)icr & 4UL) != 0UL) {
    #line 2776 
    hw->mac.get_link_status = (_Bool)1;
    #line 2778 
    if (! test_bit(2L,& adapter->state)) 
                                         #line 2779 
                                         cif_mod_timer(& adapter->watchdog_timer,jiffies + 1UL);
  }
  {
    #line 2783 
    union __anonunion___u_3186 __u;
    #line 2782 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 2782 
    u8 *hw_addr = (__u.__val);
    #line 2782 
    writel(adapter->eims_other,(void *)(hw_addr + 5412U));
  }
  #line 2784 
  return IRQ_HANDLED;
}

#line 2798  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static void igc_write_ivar(struct igc_hw *hw, int msix_vector, int index, int offset)
{
  #line 2801 
  u32 ivar = igc_rd32(hw,(unsigned int)((index << 2) + 5888));
  #line 2804 
  ivar = ~ (255U << offset) & ivar;
  #line 2807 
  ivar = (unsigned int)((msix_vector | 128) << offset) | ivar;
  {
    #line 2810 
    union __anonunion___u_3188 __u;
    #line 2809 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 2809 
    u8 *hw_addr = (__u.__val);
    #line 2809 
    writel(ivar,(void *)(hw_addr + (unsigned long)((index << 2) + 5888)));
  }
  #line 2811 
  return;
}

#line 2812  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static void igc_assign_vector(struct igc_q_vector *q_vector, int msix_vector)
{
  #line 2814 
  struct igc_adapter *adapter = q_vector->adapter;
  #line 2815 
  struct igc_hw *hw = & adapter->hw;
  #line 2816 
  int rx_queue = -1;
  #line 2817 
  int tx_queue = -1;
  #line 2819 
  if (q_vector->rx.ring != (struct igc_ring *)0) 
                                                 #line 2820 
                                                 rx_queue = (int)(q_vector->rx.ring)->reg_idx;
  #line 2821 
  if (q_vector->tx.ring != (struct igc_ring *)0) 
                                                 #line 2822 
                                                 tx_queue = (int)(q_vector->tx.ring)->reg_idx;
  #line 2824 
  switch ((unsigned int)hw->mac.type) {
    #line 2825 
    case (unsigned int)1: 
                          #line 2825 
    ;
    #line 2826 
    if (rx_queue >= 0) 
                       #line 2827 
                       igc_write_ivar(hw,msix_vector,rx_queue >> 1,(rx_queue << 4) & 16);
    #line 2830 
    if (tx_queue >= 0) 
                       #line 2831 
                       igc_write_ivar(hw,msix_vector,tx_queue >> 1,((tx_queue << 4) & 16) + 8);
    #line 2834 
    q_vector->eims_value = (unsigned int)(1UL << msix_vector);
    #line 2835 
    break;
    #line 2836 
    default: 
             #line 2836 
    ;
    {
      #line 2837 
      bool __warned;
      #line 2837 
      int __ret_warn_once = hw->mac.type != (unsigned int)igc_i225;
      #line 2837 
      if ((long)(__ret_warn_once != 0) != 0L && (long)(! __warned) != 0L) {
        #line 2837 
        __warned = (_Bool)1;
        {
          #line 2837 
          int __ret_warn_on = 1;
          #line 2837 
          if ((long)(__ret_warn_on != 0) != 0L) {
            #line 2837 
            __warn_printk((char *)"Wrong MAC type\n");
            #line 2838 
            ldv_inline_asm();
            #line 2839 
            ldv_inline_asm();
          }
          #line 2837 
          long tmp = (long)(__ret_warn_on != 0);
        }
      }
      #line 2837 
      long tmp_3 = (long)(__ret_warn_once != 0);
    }
    #line 2838 
    break;
  }
  #line 2842 
  adapter->eims_enable_mask |= q_vector->eims_value;
  #line 2845 
  q_vector->set_itr = (unsigned char)1U;
  #line 2846 
  return;
}

#line 2855  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static void igc_configure_msix(struct igc_adapter *adapter)
{
  #line 2858 
  int i;
  #line 2859 
  u32 tmp;
  #line 2857 
  struct igc_hw *hw = & adapter->hw;
  #line 2858 
  int vector = 0;
  #line 2861 
  adapter->eims_enable_mask = 0U;
  #line 2864 
  switch ((unsigned int)hw->mac.type) {
    #line 2875 
    int tmp_1;
    #line 2865 
    case (unsigned int)1: 
                          #line 2865 
    ;
    {
      #line 2870 
      union __anonunion___u_3190 __u;
      #line 2869 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
      #line 2869 
      u8 *hw_addr = (__u.__val);
      #line 2869 
      writel(3221225489U,(void *)(hw_addr + 5396U));
    }
    #line 2874 
    adapter->eims_other = (unsigned int)(1UL << vector);
    #line 2875 
    tmp_1 = vector;
    #line 2875 
    vector ++;
    #line 2875 
    tmp = (unsigned int)((tmp_1 << 8) | 32768);
    {
      #line 2878 
      union __anonunion___u_3192 __u_0;
      #line 2877 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
      #line 2877 
      u8 *hw_addr_0 = (__u_0.__val);
      #line 2877 
      writel(tmp,(void *)(hw_addr_0 + 5952U));
    }
    #line 2878 
    break;
    #line 2879 
    default: 
             #line 2879 
    ;
    #line 2881 
    break;
  }
  #line 2884 
  adapter->eims_enable_mask |= adapter->eims_other;
  #line 2886 
  i = 0;
  #line 2886 
  while (adapter->num_q_vectors > (unsigned int)i) {
    #line 2887 
    int tmp_3;
    #line 2887 
    tmp_3 = vector;
    #line 2887 
    vector ++;
    #line 2887 
    ;
    #line 2887 
    ;
    #line 2887 
    igc_assign_vector(adapter->q_vector[i],tmp_3);
    #line 2886 
    i ++;
  }
  #line 2889 
  igc_rd32(hw,8U);
  #line 2890 
  return;
}

#line 2892  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static irqreturn_t igc_msix_ring(int irq, void *data)
{
  #line 2894 
  struct igc_q_vector *q_vector = (struct igc_q_vector *)data;
  #line 2897 
  igc_write_itr(q_vector);
  #line 2899 
  napi_schedule(& q_vector->napi);
  #line 2901 
  return IRQ_HANDLED;
}

#line 2911  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static int igc_request_msix(struct igc_adapter *adapter)
{
  #line 2952 
  int tmp;
  #line 2913 
  int i = 0;
  #line 2913 
  int err = 0;
  #line 2913 
  int vector = 0;
  #line 2913 
  int free_vector = 0;
  #line 2914 
  struct net_device *netdev = adapter->netdev;
  #line 2916 
  err = cif_request_irq((adapter->msix_entries + (unsigned long)vector)->vector,& igc_msix_other,0UL,(char *)(& netdev->name),(void *)adapter);
  #line 2918 
  if (err != 0) 
                #line 2919 
                goto err_out;
  #line 2921 
  i = 0;
  #line 2921 
  while (adapter->num_q_vectors > (unsigned int)i) {
    {
      #line 2922 
      struct igc_q_vector *q_vector = adapter->q_vector[i];
      #line 2924 
      vector ++;
      #line 2926 
      q_vector->itr_register = (void *)(adapter->io_addr + (unsigned long)((vector + 1440) * 4));
      #line 2928 
      if (q_vector->rx.ring != (struct igc_ring *)0 && q_vector->tx.ring != (struct igc_ring *)0) 
        #line 2929 
        sprintf((char *)(& q_vector->name),(char *)"%s-TxRx-%u",(char *)(& netdev->name),(int)(q_vector->rx.ring)->queue_index);
      else 
        #line 2931 
        if (q_vector->tx.ring != (struct igc_ring *)0) 
                                                       #line 2932 
                                                       sprintf((char *)(& q_vector->name),(char *)"%s-tx-%u",(char *)(& netdev->name),(int)(q_vector->tx.ring)->queue_index);
        else 
          #line 2934 
          if (q_vector->rx.ring != (struct igc_ring *)0) 
                                                         #line 2935 
                                                         sprintf((char *)(& q_vector->name),(char *)"%s-rx-%u",(char *)(& netdev->name),(int)(q_vector->rx.ring)->queue_index); else 
                                                                    #line 2938 
                                                                    sprintf((char *)(& q_vector->name),(char *)"%s-unused",(char *)(& netdev->name));
      #line 2940 
      err = cif_request_irq((adapter->msix_entries + (unsigned long)vector)->vector,& igc_msix_ring,0UL,(char *)(& q_vector->name),(void *)q_vector);
      #line 2943 
      if (err != 0) 
                    #line 2944 
                    goto err_free;
    }
    #line 2921 
    i ++;
  }
  #line 2947 
  igc_configure_msix(adapter);
  #line 2948 
  return 0;
  #line 2950 
  err_free: 
            #line 2950 
  ;
  #line 2952 
  ;
  #line 2952 
  tmp = free_vector;
  #line 2952 
  free_vector ++;
  #line 2952 
  ;
  #line 2952 
  cif_free_irq((adapter->msix_entries + (unsigned long)tmp)->vector,(void *)adapter);
  #line 2954 
  vector --;
  #line 2955 
  i = 0;
  #line 2955 
  while (i < vector) {
    #line 2956 
    int tmp_0;
    #line 2956 
    ;
    #line 2956 
    tmp_0 = free_vector;
    #line 2956 
    free_vector ++;
    #line 2956 
    ;
    #line 2956 
    cif_free_irq((adapter->msix_entries + (unsigned long)tmp_0)->vector,(void *)adapter->q_vector[i]);
    #line 2955 
    i ++;
  }
  #line 2959 
  err_out: 
           #line 2959 
  ;
  #line 2960 
  return err;
}

#line 2971  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static void igc_reset_q_vector(struct igc_adapter *adapter, int v_idx)
{
  #line 2973 
  struct igc_q_vector *q_vector = adapter->q_vector[v_idx];
  #line 2978 
  if (q_vector == (struct igc_q_vector *)0) 
                                            #line 2979 
                                            return;
  #line 2981 
  if (q_vector->tx.ring != (struct igc_ring *)0) 
                                                 #line 2982 
                                                 adapter->tx_ring[(int)(q_vector->tx.ring)->queue_index] = (struct igc_ring *)0;
  #line 2984 
  if (q_vector->rx.ring != (struct igc_ring *)0) 
                                                 #line 2985 
                                                 adapter->rx_ring[(int)(q_vector->rx.ring)->queue_index] = (struct igc_ring *)0;
  #line 2987 
  netif_napi_del(& q_vector->napi);
  #line 2988 
  return;
}

#line 2990  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static void igc_reset_interrupt_capability(struct igc_adapter *adapter)
{
  #line 2992 
  int v_idx = (int)adapter->num_q_vectors;
  #line 2994 
  if (adapter->msix_entries != (struct msix_entry *)0) {
    #line 2995 
    pci_disable_msix(adapter->pdev);
    #line 2996 
    kfree((void *)adapter->msix_entries);
    #line 2997 
    adapter->msix_entries = (struct msix_entry *)0;
  }
  else 
    #line 2998 
    if (((unsigned long)adapter->flags & 1UL) != 0UL) 
                                                      #line 2999 
                                                      pci_disable_msi(adapter->pdev);
  #line 3002 
  while (1) {
    #line 3002 
    int tmp;
    #line 3002 
    tmp = v_idx;
    #line 3002 
    v_idx --;
    #line 3002 
    ;
    #line 3002 
    if (! (tmp != 0)) 
                      #line 3002 
                      break;
    #line 3003 
    igc_reset_q_vector(adapter,v_idx);
  }
  #line 3004 
  return;
}

#line 3013  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static void igc_clear_interrupt_scheme(struct igc_adapter *adapter)
{
  #line 3015 
  igc_free_q_vectors(adapter);
  #line 3016 
  igc_reset_interrupt_capability(adapter);
  #line 3017 
  return;
}

#line 3027  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static void igc_free_q_vectors(struct igc_adapter *adapter)
{
  #line 3029 
  int v_idx = (int)adapter->num_q_vectors;
  #line 3031 
  adapter->num_tx_queues = 0;
  #line 3032 
  adapter->num_rx_queues = 0;
  #line 3033 
  adapter->num_q_vectors = 0U;
  #line 3035 
  while (1) {
    #line 3035 
    int tmp;
    #line 3035 
    tmp = v_idx;
    #line 3035 
    v_idx --;
    #line 3035 
    ;
    #line 3035 
    if (! (tmp != 0)) 
                      #line 3035 
                      break;
    #line 3036 
    igc_reset_q_vector(adapter,v_idx);
    #line 3037 
    igc_free_q_vector(adapter,v_idx);
  }
  #line 3039 
  return;
}

#line 3048  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static void igc_free_q_vector(struct igc_adapter *adapter, int v_idx)
{
  #line 3050 
  struct igc_q_vector *q_vector = adapter->q_vector[v_idx];
  #line 3052 
  adapter->q_vector[v_idx] = (struct igc_q_vector *)0;
  #line 3057 
  if (q_vector != (struct igc_q_vector *)0) {
    #line 3058 
    struct igc_q_vector *___p = q_vector;
    #line 3058 
    if (___p != (struct igc_q_vector *)0) 
                                          #line 3058 
                                          kfree_call_rcu(& ___p->rcu,(void (*)(struct callback_head *))464);
  }
  #line 3061 
  return;
}

#line 3064  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static void igc_update_phy_info(struct timer_list *t)
{
  #line 3066 
  void *__mptr;
  #line 3066 
  __mptr = (void *)t;
  #line 3066 
  struct igc_adapter *adapter = ((struct igc_adapter *)(__mptr + 18446744073709551320U));
  #line 3068 
  igc_get_phy_info(& adapter->hw);
  #line 3069 
  return;
}

#line 3075  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
bool igc_has_link(struct igc_adapter *adapter)
{
  #line 3077 
  struct igc_hw *hw = & adapter->hw;
  #line 3078 
  bool link_active = (_Bool)0;
  #line 3085 
  switch ((unsigned int)hw->phy.media_type) {
    #line 3086 
    case (unsigned int)1: 
                          #line 3086 
    ;
    #line 3087 
    if (! hw->mac.get_link_status) 
                                   #line 3088 
                                   return (_Bool)1;
    #line 3089 
    (*(hw->mac.ops.check_for_link))(hw);
    #line 3090 
    link_active = (_Bool)(! ((int)hw->mac.get_link_status != 0));
    #line 3091 
    break;
    #line 3092 
    default: 
             #line 3092 
    ;
    #line 3093 
    case (unsigned int)0: 
                          #line 3093 
    ;
    #line 3094 
    break;
  }
  #line 3097 
  if (hw->mac.type == (unsigned int)igc_i225 && hw->phy.id == 1741282304U) {
    #line 3099 
    if (netif_carrier_ok(adapter->netdev)) {
      #line 3101 
      if (((unsigned long)adapter->flags & 512UL) == 0UL) {
        #line 3102 
        adapter->flags |= 512U;
        #line 3103 
        adapter->link_check_timeout = jiffies;
      }
    }
    else 
         #line 3100 
         adapter->flags &= 4294966783U;
  }
  #line 3107 
  return link_active;
}

#line 3114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static void igc_watchdog(struct timer_list *t)
{
  #line 3116 
  void *__mptr;
  #line 3116 
  __mptr = (void *)t;
  #line 3116 
  struct igc_adapter *adapter = ((struct igc_adapter *)(__mptr + 18446744073709551496U));
  #line 3118 
  cif_schedule_work(& adapter->watchdog_task);
  #line 3119 
  return;
}

#line 3121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static void igc_watchdog_task(struct work_struct *work)
{
  #line 3123 
  void *__mptr;
  #line 3129 
  u16 phy_data;
  #line 3130 
  u32 connsw;
  #line 3131 
  u32 link;
  #line 3132 
  int i;
  #line 3123 
  __mptr = (void *)work;
  #line 3123 
  struct igc_adapter *adapter = ((struct igc_adapter *)(__mptr + 18446744073709551128U));
  #line 3126 
  struct net_device *netdev = adapter->netdev;
  #line 3127 
  struct igc_hw *hw = & adapter->hw;
  #line 3128 
  struct igc_phy_info *phy = & hw->phy;
  #line 3129 
  u16 retry_count = (unsigned short)20U;
  #line 3134 
  link = (unsigned int)igc_has_link(adapter);
  #line 3136 
  if (((unsigned long)adapter->flags & 512UL) != 0UL) {
    {
      #line 3137 
      unsigned long __dummy;
      #line 3137 
      unsigned long __dummy2;
      }
    #line 3137 
    if (1 != 0) {
      {
        #line 3137 
        unsigned long __dummy_0;
        #line 3137 
        unsigned long __dummy2_0;
        }
      #line 3137 
      if (1 != 0) 
        #line 3137 
        if ((long)((adapter->link_check_timeout - jiffies) + 250UL) < 0L) 
          #line 3138 
          adapter->flags &= 4294966783U; else 
                                              #line 3140 
                                              link = 0U;
      else 
           #line 3140 
           link = 0U;
    }
    else 
         #line 3140 
         link = 0U;
  }
  #line 3144 
  if (((unsigned long)adapter->flags & 4096UL) != 0UL) 
    #line 3145 
    if (hw->phy.media_type == (unsigned int)igc_media_type_copper) {
      #line 3146 
      connsw = igc_rd32(hw,52U);
      #line 3147 
      if ((connsw & 1U) == 0U) 
                               #line 3148 
                               link = 0U;
    }
  #line 3151 
  if (link != 0U) {
    #line 3152 
    if (! netif_carrier_ok(netdev)) {
      #line 3169 
      char *tmp_3;
      #line 3167 
      char *tmp_4;
      #line 3153 
      u32 ctrl;
      #line 3166 
      char *tmp_5;
      #line 3164 
      char *tmp_6;
      #line 3155 
      (*(hw->mac.ops.get_speed_and_duplex))(hw,& adapter->link_speed,& adapter->link_duplex);
      #line 3159 
      ctrl = igc_rd32(hw,0U);
      #line 3166 
      if ((ctrl & 268435456U) == 0U || (ctrl & 134217728U) == 0U) {
        #line 3167 
        if ((ctrl & 134217728U) == 0U) {
          #line 3169 
          if ((ctrl & 268435456U) != 0U) 
                                         #line 3169 
                                         tmp_3 = (char *)"TX"; else 
                                                                    #line 3169 
                                                                    tmp_3 = (char *)"None";
          #line 3167 
          tmp_4 = tmp_3;
        }
        else 
             #line 3167 
             tmp_4 = (char *)"RX";
        #line 3166 
        tmp_5 = tmp_4;
      }
      else 
           #line 3166 
           tmp_5 = (char *)"RX/TX";
      #line 3164 
      if ((unsigned int)adapter->link_duplex == 2U) 
                                                    #line 3164 
                                                    tmp_6 = (char *)"Full"; else 
                                                                    #line 3164 
                                                                    tmp_6 = (char *)"Half";
      #line 3161 
      ;
      #line 3161 
      ;
      #line 3161 
      ;
      #line 3161 
      netdev_info(netdev,(char *)"igc: %s NIC Link is Up %d Mbps %s Duplex, Flow Control: %s\n",(char *)(& netdev->name),(int)adapter->link_speed,tmp_6,tmp_5);
      #line 3173 
      igc_check_downshift(hw);
      #line 3174 
      if ((int)phy->speed_downgraded != 0) 
                                           #line 3175 
                                           netdev_warn(netdev,(char *)"Link Speed was downgraded by SmartSpeed\n");
      #line 3178 
      adapter->tx_timeout_factor = (unsigned char)1U;
      #line 3179 
      switch ((int)adapter->link_speed) {
        #line 3180 
        case 10: 
                 #line 3180 
        ;
        #line 3181 
        adapter->tx_timeout_factor = (unsigned char)14U;
        #line 3182 
        break;
        #line 3183 
        case 100: 
                  #line 3183 
        ;
        #line 3185 
        break;
      }
      #line 3188 
      if ((unsigned int)adapter->link_speed != 1000U) 
                                                      #line 3189 
                                                      goto no_wait;
      #line 3192 
      retry_read_status: 
                         #line 3192 
      ;
      #line 3193 
      if (igc_read_phy_reg(hw,10U,& phy_data) == 0) {
        #line 3195 
        if (((int)phy_data & 4096) == 0 && (unsigned int)retry_count != 0U) {
          #line 3197 
          msleep(100U);
          #line 3198 
          retry_count = (u16)((int)retry_count - 1);
          #line 3199 
          goto retry_read_status;
        }
        else 
          #line 3200 
          if ((unsigned int)retry_count == 0U) 
                                               #line 3201 
                                               _dev_err(& (adapter->pdev)->dev,(char *)"exceed max 2 second\n");
      }
      else 
           #line 3204 
           _dev_err(& (adapter->pdev)->dev,(char *)"read 1000Base-T Status Reg\n");
      #line 3206 
      no_wait: 
               #line 3206 
      ;
      #line 3207 
      netif_carrier_on(netdev);
      #line 3210 
      if (! test_bit(2L,& adapter->state)) {
        #line 3211 
        ;
        #line 3211 
        cif_mod_timer(& adapter->phy_info_timer,round_jiffies(jiffies + 500UL));
      }
    }
  }
  else {
    #line 3215 
    if ((int)netif_carrier_ok(netdev) != 0) {
      #line 3216 
      adapter->link_speed = (unsigned short)0U;
      #line 3217 
      adapter->link_duplex = (unsigned short)0U;
      #line 3220 
      netdev_info(netdev,(char *)"igc: %s NIC Link is Down\n",(char *)(& netdev->name));
      #line 3222 
      netif_carrier_off(netdev);
      #line 3225 
      if (! test_bit(2L,& adapter->state)) {
        #line 3226 
        ;
        #line 3226 
        cif_mod_timer(& adapter->phy_info_timer,round_jiffies(jiffies + 500UL));
      }
      #line 3230 
      if (((unsigned long)adapter->flags & 4096UL) != 0UL) 
        #line 3231 
        if (((unsigned long)adapter->flags & 1024UL) != 0UL) {
          #line 3232 
          cif_schedule_work(& adapter->reset_task);
          #line 3234 
          return;
        }
    }
    else {
      #line 3239 
      if (! netif_carrier_ok(netdev)) 
        #line 3239 
        if (((unsigned long)adapter->flags & 4096UL) != 0UL) 
          #line 3241 
          if (((unsigned long)adapter->flags & 1024UL) != 0UL) {
            #line 3242 
            cif_schedule_work(& adapter->reset_task);
            #line 3244 
            return;
          }
    }
  }
  #line 3249 
  cif_spin_lock_stats64_lock_of_igc_adapter(& adapter->stats64_lock);
  #line 3250 
  igc_update_stats(adapter);
  #line 3251 
  cif_spin_unlock_stats64_lock_of_igc_adapter(& adapter->stats64_lock);
  #line 3253 
  i = 0;
  #line 3253 
  while (adapter->num_tx_queues > i) {
    {
      #line 3254 
      struct igc_ring *tx_ring = adapter->tx_ring[i];
      #line 3256 
      if (! netif_carrier_ok(netdev)) {
        #line 3262 
        ;
        #line 3262 
        if ((int)igc_desc_unused(tx_ring) + 1 < (int)tx_ring->count) {
          #line 3263 
          (adapter->tx_timeout_count) ++;
          #line 3264 
          cif_schedule_work(& adapter->reset_task);
          #line 3266 
          return;
        }
      }
      #line 3271 
      cif_set_bit(5L,& tx_ring->flags);
    }
    #line 3253 
    i ++;
  }
  #line 3275 
  if (((unsigned long)adapter->flags & 8192UL) != 0UL) {
    #line 3276 
    u32 eics = 0U;
    #line 3278 
    i = 0;
    #line 3278 
    while (adapter->num_q_vectors > (unsigned int)i) {
      #line 3279 
      eics = (adapter->q_vector[i])->eims_value | eics;
      #line 3278 
      i ++;
    }
    {
      #line 3281 
      union __anonunion___u_3194 __u;
      #line 3280 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
      #line 3280 
      u8 *hw_addr = (__u.__val);
      #line 3280 
      writel(eics,(void *)(hw_addr + 5408U));
    }
  }
  else {
    #line 3283 
    union __anonunion___u_3196 __u_0;
    #line 3282 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
    #line 3282 
    u8 *hw_addr_0 = (__u_0.__val);
    #line 3282 
    writel(16U,(void *)(hw_addr_0 + 5380U));
  }
  #line 3286 
  if (! test_bit(2L,& adapter->state)) 
    #line 3287 
    if (((unsigned long)adapter->flags & 512UL) != 0UL) {
      #line 3288 
      ;
      #line 3288 
      cif_mod_timer(& adapter->watchdog_timer,round_jiffies(jiffies + 250UL));
    }
    else {
      #line 3291 
      ;
      #line 3291 
      cif_mod_timer(& adapter->watchdog_timer,round_jiffies(jiffies + 500UL));
    }
  #line 3293 
  return;
}

#line 3310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static void igc_update_ring_itr(struct igc_q_vector *q_vector)
{
  #line 3346 
  int tmp_1;
  #line 3346 
  int __UNIQUE_ID___x560;
  #line 3315 
  unsigned int packets;
  #line 3312 
  struct igc_adapter *adapter = q_vector->adapter;
  #line 3313 
  int new_val = (int)q_vector->itr_val;
  #line 3314 
  int avg_wire_size = 0;
  #line 3320 
  switch ((int)adapter->link_speed) {
    #line 3321 
    case 10: 
             #line 3321 
    ;
    #line 3322 
    case 100: 
              #line 3322 
    ;
    #line 3323 
    new_val = 980;
    #line 3324 
    goto set_itr_val;
    #line 3325 
    default: 
             #line 3325 
    ;
    #line 3326 
    break;
  }
  #line 3329 
  packets = q_vector->rx.total_packets;
  #line 3330 
  if (packets != 0U) 
                     #line 3331 
                     avg_wire_size = (int)(q_vector->rx.total_bytes / packets);
  #line 3333 
  packets = q_vector->tx.total_packets;
  #line 3334 
  if (packets != 0U) {
    #line 3335 
    unsigned int __UNIQUE_ID___x558;
    #line 3335 
    unsigned int tmp;
    {
      #line 3335 
      __UNIQUE_ID___x558 = (unsigned int)avg_wire_size;
      #line 3335 
      unsigned int __UNIQUE_ID___y559 = q_vector->tx.total_bytes / packets;
      #line 3335 
      if (__UNIQUE_ID___x558 > __UNIQUE_ID___y559) 
                                                   #line 3335 
                                                   tmp = __UNIQUE_ID___x558; else 
                                                                    #line 3335 
                                                                    tmp = __UNIQUE_ID___y559;
      }
    #line 3335 
    avg_wire_size = (int)tmp;
  }
  #line 3339 
  if (avg_wire_size == 0) 
                          #line 3340 
                          goto clear_counts;
  #line 3343 
  avg_wire_size += 24;
  {
    #line 3346 
    __UNIQUE_ID___x560 = avg_wire_size;
    #line 3346 
    int __UNIQUE_ID___y561 = 3000;
    #line 3346 
    if (__UNIQUE_ID___x560 < __UNIQUE_ID___y561) 
                                                 #line 3346 
                                                 tmp_1 = __UNIQUE_ID___x560; else 
                                                                    #line 3346 
                                                                    tmp_1 = __UNIQUE_ID___y561;
    }
  #line 3346 
  avg_wire_size = tmp_1;
  #line 3349 
  if ((unsigned int)avg_wire_size + 4294966995U <= 898U) 
                                                         #line 3350 
                                                         new_val = avg_wire_size / 3; else 
                                                                    #line 3352 
                                                                    new_val = avg_wire_size / 2;
  #line 3355 
  if (new_val <= 195 && (q_vector->rx.ring != (struct igc_ring *)0 && adapter->rx_itr_setting == 3U || q_vector->rx.ring == (struct igc_ring *)0 && adapter->tx_itr_setting == 3U)) 
    #line 3358 
    new_val = 196;
  #line 3360 
  set_itr_val: 
               #line 3360 
  ;
  #line 3361 
  if ((int)q_vector->itr_val != new_val) {
    #line 3362 
    q_vector->itr_val = (unsigned short)new_val;
    #line 3363 
    q_vector->set_itr = (unsigned char)1U;
  }
  #line 3365 
  clear_counts: 
                #line 3365 
  ;
  #line 3366 
  q_vector->rx.total_bytes = 0U;
  #line 3367 
  q_vector->rx.total_packets = 0U;
  #line 3368 
  q_vector->tx.total_bytes = 0U;
  #line 3369 
  q_vector->tx.total_packets = 0U;
  #line 3370 
  return;
}

#line 3387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static void igc_update_itr(struct igc_q_vector *q_vector, struct igc_ring_container *ring_container)
{
  #line 3390 
  unsigned int packets = ring_container->total_packets;
  #line 3391 
  unsigned int bytes = ring_container->total_bytes;
  #line 3392 
  u8 itrval = ring_container->itr;
  #line 3395 
  if (packets == 0U) 
                     #line 3396 
                     return;
  #line 3398 
  switch ((int)itrval) {
    #line 3399 
    case 0: 
            #line 3399 
    ;
    #line 3401 
    if (bytes / packets > 8000U) 
                                 #line 3402 
                                 itrval = (unsigned char)2U;
    else 
      #line 3403 
      if (packets <= 4U && bytes > 512U) 
                                         #line 3404 
                                         itrval = (unsigned char)1U;
    #line 3405 
    break;
    #line 3406 
    case 1: 
            #line 3406 
    ;
    #line 3407 
    if (bytes > 10000U) {
      #line 3409 
      if (bytes / packets > 8000U) 
                                   #line 3410 
                                   itrval = (unsigned char)2U;
      else 
        #line 3411 
        if (packets <= 9U || bytes / packets > 1200U) 
                                                      #line 3412 
                                                      itrval = (unsigned char)2U;
        else 
          #line 3413 
          if (packets > 35U) 
                             #line 3414 
                             itrval = (unsigned char)0U;
    }
    else 
      #line 3415 
      if (bytes / packets > 2000U) 
                                   #line 3416 
                                   itrval = (unsigned char)2U;
      else 
        #line 3417 
        if (packets <= 2U && bytes <= 511U) 
                                            #line 3418 
                                            itrval = (unsigned char)0U;
    #line 3420 
    break;
    #line 3421 
    case 2: 
            #line 3421 
    ;
    #line 3422 
    if (bytes > 25000U) {
      #line 3423 
      if (packets > 35U) 
                         #line 3424 
                         itrval = (unsigned char)1U;
    }
    else 
      #line 3425 
      if (bytes <= 1499U) 
                          #line 3426 
                          itrval = (unsigned char)1U;
    #line 3428 
    break;
  }
  #line 3432 
  ring_container->total_bytes = 0U;
  #line 3433 
  ring_container->total_packets = 0U;
  #line 3436 
  ring_container->itr = itrval;
  #line 3437 
  return;
}

#line 3444  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static irqreturn_t igc_intr_msi(int irq, void *data)
{
  #line 3446 
  struct igc_adapter *adapter = (struct igc_adapter *)data;
  #line 3447 
  struct igc_q_vector *q_vector = adapter->q_vector[0];
  #line 3448 
  struct igc_hw *hw = & adapter->hw;
  #line 3450 
  u32 icr = igc_rd32(hw,5376U);
  #line 3452 
  igc_write_itr(q_vector);
  #line 3454 
  if (((unsigned long)icr & 1073741824UL) != 0UL) 
                                                  #line 3455 
                                                  cif_schedule_work(& adapter->reset_task);
  #line 3457 
  if ((icr & 268435456U) != 0U) 
                                #line 3459 
                                (adapter->stats.doosync) ++;
  #line 3462 
  if (((unsigned long)icr & 12UL) != 0UL) {
    #line 3463 
    hw->mac.get_link_status = (_Bool)1;
    #line 3464 
    if (! test_bit(2L,& adapter->state)) 
                                         #line 3465 
                                         cif_mod_timer(& adapter->watchdog_timer,jiffies + 1UL);
  }
  #line 3468 
  napi_schedule(& q_vector->napi);
  #line 3470 
  return IRQ_HANDLED;
}

#line 3478  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static irqreturn_t igc_intr(int irq, void *data)
{
  #line 3480 
  struct igc_adapter *adapter = (struct igc_adapter *)data;
  #line 3481 
  struct igc_q_vector *q_vector = adapter->q_vector[0];
  #line 3482 
  struct igc_hw *hw = & adapter->hw;
  #line 3486 
  u32 icr = igc_rd32(hw,5376U);
  #line 3491 
  if (((unsigned long)icr & 2147483648UL) == 0UL) 
                                                  #line 3492 
                                                  return IRQ_NONE;
  #line 3494 
  igc_write_itr(q_vector);
  #line 3496 
  if (((unsigned long)icr & 1073741824UL) != 0UL) 
                                                  #line 3497 
                                                  cif_schedule_work(& adapter->reset_task);
  #line 3499 
  if ((icr & 268435456U) != 0U) 
                                #line 3501 
                                (adapter->stats.doosync) ++;
  #line 3504 
  if (((unsigned long)icr & 12UL) != 0UL) {
    #line 3505 
    hw->mac.get_link_status = (_Bool)1;
    #line 3507 
    if (! test_bit(2L,& adapter->state)) 
                                         #line 3508 
                                         cif_mod_timer(& adapter->watchdog_timer,jiffies + 1UL);
  }
  #line 3511 
  napi_schedule(& q_vector->napi);
  #line 3513 
  return IRQ_HANDLED;
}

#line 3516  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static void igc_set_itr(struct igc_q_vector *q_vector)
{
  #line 3536 
  u8 __UNIQUE_ID___x562;
  #line 3536 
  int tmp;
  #line 3518 
  struct igc_adapter *adapter = q_vector->adapter;
  #line 3519 
  u32 new_itr = (unsigned int)q_vector->itr_val;
  #line 3520 
  u8 current_itr = (unsigned char)0U;
  #line 3523 
  switch ((int)adapter->link_speed) {
    #line 3524 
    case 10: 
             #line 3524 
    ;
    #line 3525 
    case 100: 
              #line 3525 
    ;
    #line 3526 
    current_itr = (unsigned char)0U;
    #line 3527 
    new_itr = 980U;
    #line 3528 
    goto set_itr_now;
    #line 3529 
    default: 
             #line 3529 
    ;
    #line 3530 
    break;
  }
  #line 3533 
  igc_update_itr(q_vector,& q_vector->tx);
  #line 3534 
  igc_update_itr(q_vector,& q_vector->rx);
  {
    #line 3536 
    __UNIQUE_ID___x562 = q_vector->rx.itr;
    #line 3536 
    u8 __UNIQUE_ID___y563 = q_vector->tx.itr;
    #line 3536 
    if ((int)__UNIQUE_ID___x562 > (int)__UNIQUE_ID___y563) 
                                                           #line 3536 
                                                           tmp = (int)__UNIQUE_ID___x562; else 
                                                                    #line 3536 
                                                                    tmp = (int)__UNIQUE_ID___y563;
    }
  #line 3536 
  current_itr = (unsigned char)tmp;
  #line 3539 
  if ((unsigned int)current_itr == 0U && (q_vector->rx.ring != (struct igc_ring *)0 && adapter->rx_itr_setting == 3U || q_vector->rx.ring == (struct igc_ring *)0 && adapter->tx_itr_setting == 3U)) 
    #line 3542 
    current_itr = (unsigned char)1U;
  #line 3544 
  switch ((int)current_itr) {
    #line 3546 
    case 0: 
            #line 3546 
    ;
    #line 3547 
    new_itr = 56U;
    #line 3548 
    break;
    #line 3549 
    case 1: 
            #line 3549 
    ;
    #line 3550 
    new_itr = 196U;
    #line 3551 
    break;
    #line 3552 
    case 2: 
            #line 3552 
    ;
    #line 3553 
    new_itr = 980U;
    #line 3554 
    break;
    #line 3555 
    default: 
             #line 3555 
    ;
    #line 3556 
    break;
  }
  #line 3559 
  set_itr_now: 
               #line 3559 
  ;
  #line 3560 
  if ((unsigned int)q_vector->itr_val != new_itr) {
    #line 3565 
    if ((unsigned int)q_vector->itr_val < new_itr) {
      #line 3566 
      u32 __UNIQUE_ID___x564;
      #line 3566 
      u32 tmp_1;
      {
        #line 3566 
        __UNIQUE_ID___x564 = ((unsigned int)q_vector->itr_val * new_itr) / ((unsigned int)((int)q_vector->itr_val >> 2) + new_itr);
        #line 3566 
        u32 __UNIQUE_ID___y565 = new_itr;
        #line 3566 
        if (__UNIQUE_ID___x564 > __UNIQUE_ID___y565) 
                                                     #line 3566 
                                                     tmp_1 = __UNIQUE_ID___x564; else 
                                                                    #line 3566 
                                                                    tmp_1 = __UNIQUE_ID___y565;
        }
      #line 3565 
      new_itr = tmp_1;
    }
    else 
         #line 3565 
         new_itr = new_itr;
    #line 3575 
    q_vector->itr_val = (unsigned short)new_itr;
    #line 3576 
    q_vector->set_itr = (unsigned char)1U;
  }
  #line 3578 
  return;
}

#line 3580  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static void igc_ring_irq_enable(struct igc_q_vector *q_vector)
{
  #line 3582 
  struct igc_adapter *adapter = q_vector->adapter;
  #line 3583 
  struct igc_hw *hw = & adapter->hw;
  #line 3585 
  if (q_vector->rx.ring != (struct igc_ring *)0 && (adapter->rx_itr_setting & 3U) != 0U || q_vector->rx.ring == (struct igc_ring *)0 && (adapter->tx_itr_setting & 3U) != 0U) 
    #line 3587 
    if (adapter->num_q_vectors == 1U) 
                                      #line 3588 
                                      igc_set_itr(q_vector); else 
                                                                  #line 3590 
                                                                  igc_update_ring_itr(q_vector);
  #line 3593 
  if (! test_bit(2L,& adapter->state)) 
    #line 3594 
    if (adapter->msix_entries != (struct msix_entry *)0) {
      #line 3596 
      union __anonunion___u_3198 __u;
      #line 3595 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
      #line 3595 
      u8 *hw_addr = (__u.__val);
      #line 3595 
      writel(q_vector->eims_value,(void *)(hw_addr + 5412U));
    }
    else 
         #line 3597 
         igc_irq_enable(adapter);
  #line 3598 
  return;
}

#line 3606  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static int igc_poll(struct napi_struct *napi, int budget)
{
  #line 3608 
  void *__mptr;
  #line 3635 
  int __UNIQUE_ID___x566;
  #line 3635 
  int tmp_2;
  #line 3608 
  __mptr = (void *)napi;
  #line 3608 
  struct igc_q_vector *q_vector = ((struct igc_q_vector *)(__mptr + 18446744073709551544U));
  #line 3611 
  bool clean_complete = (_Bool)1;
  #line 3612 
  int work_done = 0;
  #line 3614 
  if (q_vector->tx.ring != (struct igc_ring *)0) 
                                                 #line 3615 
                                                 clean_complete = igc_clean_tx_irq(q_vector,budget);
  #line 3617 
  if (q_vector->rx.ring != (struct igc_ring *)0) {
    #line 3618 
    int cleaned = igc_clean_rx_irq(q_vector,budget);
    #line 3620 
    work_done += cleaned;
    #line 3621 
    if (cleaned >= budget) 
                           #line 3622 
                           clean_complete = (_Bool)0;
  }
  #line 3626 
  if (! clean_complete) 
                        #line 3627 
                        return budget;
  #line 3632 
  if ((long)((int)napi_complete_done(napi,work_done) != 0) != 0L) 
                                                                  #line 3633 
                                                                  igc_ring_irq_enable(q_vector);
  {
    #line 3635 
    __UNIQUE_ID___x566 = work_done;
    #line 3635 
    int __UNIQUE_ID___y567 = budget + -1;
    #line 3635 
    if (__UNIQUE_ID___x566 < __UNIQUE_ID___y567) 
                                                 #line 3635 
                                                 tmp_2 = __UNIQUE_ID___x566; else 
                                                                    #line 3635 
                                                                    tmp_2 = __UNIQUE_ID___y567;
    }
  #line 3635 
  return tmp_2;
}

#line 3645  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static void igc_set_interrupt_capability(struct igc_adapter *adapter, bool msix)
{
  #line 3648 
  int numvecs;
  #line 3648 
  int i;
  #line 3649 
  int err;
  #line 3651 
  if (! msix) 
              #line 3652 
              goto msi_only;
  #line 3653 
  adapter->flags |= 8192U;
  #line 3656 
  adapter->num_rx_queues = (int)adapter->rss_queues;
  #line 3658 
  adapter->num_tx_queues = (int)adapter->rss_queues;
  #line 3661 
  numvecs = adapter->num_rx_queues;
  #line 3664 
  if (((unsigned long)adapter->flags & 8UL) == 0UL) 
                                                    #line 3665 
                                                    numvecs = adapter->num_tx_queues + numvecs;
  #line 3668 
  adapter->num_q_vectors = (unsigned int)numvecs;
  #line 3671 
  numvecs ++;
  #line 3673 
  adapter->msix_entries = (struct msix_entry *)kcalloc((unsigned long)numvecs,8UL,3264U);
  #line 3676 
  if (adapter->msix_entries == (struct msix_entry *)0) 
                                                       #line 3677 
                                                       return;
  #line 3680 
  i = 0;
  #line 3680 
  while (i < numvecs) {
    #line 3681 
    (adapter->msix_entries + (unsigned long)i)->entry = (unsigned short)i;
    #line 3680 
    i ++;
  }
  #line 3683 
  err = pci_enable_msix_range(adapter->pdev,adapter->msix_entries,numvecs,numvecs);
  #line 3687 
  if (err > 0) 
               #line 3688 
               return;
  #line 3690 
  kfree((void *)adapter->msix_entries);
  #line 3691 
  adapter->msix_entries = (struct msix_entry *)0;
  #line 3693 
  igc_reset_interrupt_capability(adapter);
  #line 3695 
  msi_only: 
            #line 3695 
  ;
  #line 3696 
  adapter->flags &= 4294959103U;
  #line 3698 
  adapter->rss_queues = 1U;
  #line 3699 
  adapter->flags |= 8U;
  #line 3700 
  adapter->num_rx_queues = 1;
  #line 3701 
  adapter->num_tx_queues = 1;
  #line 3702 
  adapter->num_q_vectors = 1U;
  #line 3703 
  if (pci_enable_msi(adapter->pdev) == 0) 
                                          #line 3704 
                                          adapter->flags |= 1U;
  #line 3705 
  return;
}

#line 3707  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static void igc_add_ring(struct igc_ring *ring, struct igc_ring_container *head)
{
  #line 3710 
  head->ring = ring;
  #line 3711 
  head->count = (u8)((int)head->count + 1);
  #line 3712 
  return;
}

#line 3726  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static int igc_alloc_q_vector(struct igc_adapter *adapter, unsigned int v_count, unsigned int v_idx, unsigned int txr_count, unsigned int txr_idx, unsigned int rxr_count, unsigned int rxr_idx)
{
  #line 3731 
  struct igc_q_vector *q_vector;
  #line 3732 
  struct igc_ring *ring;
  #line 3733 
  int ring_count;
  #line 3736 
  if (txr_count > 1U || rxr_count > 1U) 
                                        #line 3737 
                                        return -12;
  #line 3739 
  ring_count = (int)(txr_count + rxr_count);
  #line 3742 
  q_vector = adapter->q_vector[v_idx];
  #line 3743 
  if (q_vector == (struct igc_q_vector *)0) {
    #line 3744 
    q_vector = (struct igc_q_vector *)kzalloc(__ab_c_size((unsigned long)ring_count,4096UL,4096UL),3264U);
  }
  else {
    #line 3747 
    ;
    #line 3747 
    memset((void *)q_vector,0,__ab_c_size((unsigned long)ring_count,4096UL,4096UL));
  }
  #line 3748 
  if (q_vector == (struct igc_q_vector *)0) 
                                            #line 3749 
                                            return -12;
  #line 3752 
  netif_napi_add(adapter->netdev,& q_vector->napi,& igc_poll,64);
  #line 3756 
  adapter->q_vector[v_idx] = q_vector;
  #line 3757 
  q_vector->adapter = adapter;
  #line 3760 
  q_vector->tx.work_limit = adapter->tx_work_limit;
  #line 3763 
  q_vector->itr_register = (void *)(adapter->io_addr + 5760U);
  #line 3764 
  q_vector->itr_val = (unsigned short)648U;
  #line 3767 
  ring = (struct igc_ring *)(& q_vector->ring);
  #line 3770 
  if (rxr_count != 0U) {
    #line 3772 
    if (adapter->rx_itr_setting + 4294967295U > 2U) 
                                                    #line 3773 
                                                    q_vector->itr_val = (unsigned short)adapter->rx_itr_setting;
  }
  else 
    #line 3776 
    if (adapter->tx_itr_setting + 4294967295U > 2U) 
                                                    #line 3777 
                                                    q_vector->itr_val = (unsigned short)adapter->tx_itr_setting;
  #line 3780 
  if (txr_count != 0U) {
    #line 3782 
    ring->dev = & (adapter->pdev)->dev;
    #line 3783 
    ring->netdev = adapter->netdev;
    #line 3786 
    ring->q_vector = q_vector;
    #line 3789 
    igc_add_ring(ring,& q_vector->tx);
    #line 3792 
    ring->count = adapter->tx_ring_count;
    #line 3793 
    ring->queue_index = (unsigned char)txr_idx;
    #line 3796 
    adapter->tx_ring[txr_idx] = ring;
    #line 3799 
    ring ++;
  }
  #line 3802 
  if (rxr_count != 0U) {
    #line 3804 
    ring->dev = & (adapter->pdev)->dev;
    #line 3805 
    ring->netdev = adapter->netdev;
    #line 3808 
    ring->q_vector = q_vector;
    #line 3811 
    igc_add_ring(ring,& q_vector->rx);
    #line 3814 
    ring->count = adapter->rx_ring_count;
    #line 3815 
    ring->queue_index = (unsigned char)rxr_idx;
    #line 3818 
    adapter->rx_ring[rxr_idx] = ring;
  }
  #line 3821 
  return 0;
}

#line 3831  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static int igc_alloc_q_vectors(struct igc_adapter *adapter)
{
  #line 3837 
  int err;
  #line 3833 
  int rxr_remaining = adapter->num_rx_queues;
  #line 3834 
  int txr_remaining = adapter->num_tx_queues;
  #line 3835 
  int rxr_idx = 0;
  #line 3835 
  int txr_idx = 0;
  #line 3835 
  int v_idx = 0;
  #line 3836 
  int q_vectors = (int)adapter->num_q_vectors;
  #line 3839 
  if (rxr_remaining + txr_remaining <= q_vectors) 
    #line 3840 
    while (rxr_remaining != 0) {
      #line 3841 
      err = igc_alloc_q_vector(adapter,(unsigned int)q_vectors,(unsigned int)v_idx,0U,0U,1U,(unsigned int)rxr_idx);
      #line 3844 
      if (err != 0) 
                    #line 3845 
                    goto err_out;
      #line 3848 
      rxr_remaining --;
      #line 3849 
      rxr_idx ++;
      #line 3840 
      v_idx ++;
    }
  #line 3853 
  while (v_idx < q_vectors) {
    {
      #line 3854 
      int rqpv = (((q_vectors - v_idx) + rxr_remaining) + -1) / (q_vectors - v_idx);
      #line 3855 
      int tqpv = (((q_vectors - v_idx) + txr_remaining) + -1) / (q_vectors - v_idx);
      #line 3857 
      err = igc_alloc_q_vector(adapter,(unsigned int)q_vectors,(unsigned int)v_idx,(unsigned int)tqpv,(unsigned int)txr_idx,(unsigned int)rqpv,(unsigned int)rxr_idx);
      #line 3860 
      if (err != 0) 
                    #line 3861 
                    goto err_out;
      #line 3864 
      rxr_remaining -= rqpv;
      #line 3865 
      txr_remaining -= tqpv;
      #line 3866 
      rxr_idx ++;
      #line 3867 
      txr_idx ++;
    }
    #line 3853 
    v_idx ++;
  }
  #line 3870 
  return 0;
  #line 3872 
  err_out: 
           #line 3872 
  ;
  #line 3873 
  adapter->num_tx_queues = 0;
  #line 3874 
  adapter->num_rx_queues = 0;
  #line 3875 
  adapter->num_q_vectors = 0U;
  #line 3877 
  while (1) {
    #line 3877 
    int tmp;
    #line 3877 
    tmp = v_idx;
    #line 3877 
    v_idx --;
    #line 3877 
    ;
    #line 3877 
    if (! (tmp != 0)) 
                      #line 3877 
                      break;
    #line 3878 
    igc_free_q_vector(adapter,v_idx);
  }
  #line 3880 
  return -12;
}

#line 3890  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static void igc_cache_ring_register(struct igc_adapter *adapter)
{
  #line 3892 
  int i = 0;
  #line 3892 
  int j = 0;
  #line 3894 
  switch ((unsigned int)adapter->hw.mac.type) {
    #line 3895 
    case (unsigned int)1: 
                          #line 3895 
    ;
    #line 3897 
    default: 
             #line 3897 
    ;
    #line 3898 
    while (adapter->num_rx_queues > i) {
      #line 3899 
      (adapter->rx_ring[i])->reg_idx = (unsigned char)i;
      #line 3898 
      i ++;
    }
    #line 3900 
    while (adapter->num_tx_queues > j) {
      #line 3901 
      (adapter->tx_ring[j])->reg_idx = (unsigned char)j;
      #line 3900 
      j ++;
    }
    #line 3902 
    break;
  }
  #line 3904 
  return;
}

#line 3912  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static int igc_init_interrupt_scheme(struct igc_adapter *adapter, bool msix)
{
  #line 3914 
  struct pci_dev *pdev = adapter->pdev;
  #line 3915 
  int err = 0;
  #line 3917 
  igc_set_interrupt_capability(adapter,(_Bool)((bool)((int)msix) != 0));
  #line 3919 
  err = igc_alloc_q_vectors(adapter);
  #line 3920 
  if (err != 0) {
    #line 3921 
    _dev_err(& pdev->dev,(char *)"Unable to allocate memory for vectors\n");
    #line 3922 
    goto err_alloc_q_vectors;
  }
  #line 3925 
  igc_cache_ring_register(adapter);
  #line 3927 
  return 0;
  #line 3929 
  err_alloc_q_vectors: 
                       #line 3929 
  ;
  #line 3930 
  igc_reset_interrupt_capability(adapter);
  #line 3931 
  return err;
}

#line 3934  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static void igc_free_irq(struct igc_adapter *adapter)
{
  #line 3936 
  if (adapter->msix_entries != (struct msix_entry *)0) {
    #line 3937 
    int i;
    #line 3939 
    int tmp;
    #line 3937 
    int vector = 0;
    #line 3939 
    ;
    #line 3939 
    tmp = vector;
    #line 3939 
    vector ++;
    #line 3939 
    ;
    #line 3939 
    cif_free_irq((adapter->msix_entries + (unsigned long)tmp)->vector,(void *)adapter);
    #line 3941 
    i = 0;
    #line 3941 
    while (adapter->num_q_vectors > (unsigned int)i) {
      #line 3942 
      int tmp_0;
      #line 3942 
      ;
      #line 3942 
      tmp_0 = vector;
      #line 3942 
      vector ++;
      #line 3942 
      ;
      #line 3942 
      cif_free_irq((adapter->msix_entries + (unsigned long)tmp_0)->vector,(void *)adapter->q_vector[i]);
      #line 3941 
      i ++;
    }
  }
  else 
       #line 3945 
       cif_free_irq((adapter->pdev)->irq,(void *)adapter);
  #line 3946 
  return;
}

#line 3953  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static void igc_irq_disable(struct igc_adapter *adapter)
{
  #line 3955 
  struct igc_hw *hw = & adapter->hw;
  #line 3957 
  if (adapter->msix_entries != (struct msix_entry *)0) {
    #line 3958 
    u32 regval = igc_rd32(hw,5424U);
    {
      #line 3961 
      union __anonunion___u_3202 __u;
      #line 3960 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
      #line 3960 
      u8 *hw_addr = (__u.__val);
      #line 3960 
      writel(~ adapter->eims_enable_mask & regval,(void *)(hw_addr + 5424U));
    }
    {
      #line 3962 
      union __anonunion___u_3204 __u_0;
      #line 3961 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
      #line 3961 
      u8 *hw_addr_0 = (__u_0.__val);
      #line 3961 
      writel(adapter->eims_enable_mask,(void *)(hw_addr_0 + 5416U));
    }
    #line 3962 
    regval = igc_rd32(hw,5420U);
    {
      #line 3964 
      union __anonunion___u_3206 __u_1;
      #line 3963 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_1.__c),8);
      #line 3963 
      u8 *hw_addr_1 = (__u_1.__val);
      #line 3963 
      writel(~ adapter->eims_enable_mask & regval,(void *)(hw_addr_1 + 5420U));
    }
  }
  {
    #line 3967 
    union __anonunion___u_3208 __u_2;
    #line 3966 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_2.__c),8);
    #line 3966 
    u8 *hw_addr_2 = (__u_2.__val);
    #line 3966 
    writel(0U,(void *)(hw_addr_2 + 5392U));
  }
  {
    #line 3968 
    union __anonunion___u_3210 __u_3;
    #line 3967 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_3.__c),8);
    #line 3967 
    u8 *hw_addr_3 = (__u_3.__val);
    #line 3967 
    writel(4294967295U,(void *)(hw_addr_3 + 5388U));
  }
  #line 3968 
  igc_rd32(hw,8U);
  #line 3970 
  if (adapter->msix_entries != (struct msix_entry *)0) {
    #line 3971 
    int i;
    #line 3973 
    int tmp_5;
    #line 3971 
    int vector = 0;
    #line 3973 
    tmp_5 = vector;
    #line 3973 
    vector ++;
    #line 3973 
    ;
    #line 3973 
    synchronize_irq((adapter->msix_entries + (unsigned long)tmp_5)->vector);
    #line 3975 
    i = 0;
    #line 3975 
    while (adapter->num_q_vectors > (unsigned int)i) {
      #line 3976 
      int tmp_6;
      #line 3976 
      tmp_6 = vector;
      #line 3976 
      vector ++;
      #line 3976 
      ;
      #line 3976 
      synchronize_irq((adapter->msix_entries + (unsigned long)tmp_6)->vector);
      #line 3975 
      i ++;
    }
  }
  else 
       #line 3978 
       synchronize_irq((adapter->pdev)->irq);
  #line 3979 
  return;
}

#line 3986  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static void igc_irq_enable(struct igc_adapter *adapter)
{
  #line 3988 
  struct igc_hw *hw = & adapter->hw;
  #line 3990 
  if (adapter->msix_entries != (struct msix_entry *)0) {
    #line 3991 
    u32 ims = 1342177284U;
    #line 3992 
    u32 regval = igc_rd32(hw,5420U);
    {
      #line 3995 
      union __anonunion___u_3212 __u;
      #line 3994 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
      #line 3994 
      u8 *hw_addr = (__u.__val);
      #line 3994 
      writel(adapter->eims_enable_mask | regval,(void *)(hw_addr + 5420U));
    }
    #line 3995 
    regval = igc_rd32(hw,5424U);
    {
      #line 3997 
      union __anonunion___u_3214 __u_0;
      #line 3996 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
      #line 3996 
      u8 *hw_addr_0 = (__u_0.__val);
      #line 3996 
      writel(adapter->eims_enable_mask | regval,(void *)(hw_addr_0 + 5424U));
    }
    {
      #line 3998 
      union __anonunion___u_3216 __u_1;
      #line 3997 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_1.__c),8);
      #line 3997 
      u8 *hw_addr_1 = (__u_1.__val);
      #line 3997 
      writel(adapter->eims_enable_mask,(void *)(hw_addr_1 + 5412U));
    }
    {
      #line 3999 
      union __anonunion___u_3218 __u_2;
      #line 3998 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_2.__c),8);
      #line 3998 
      u8 *hw_addr_2 = (__u_2.__val);
      #line 3998 
      writel(ims,(void *)(hw_addr_2 + 5384U));
    }
  }
  else {
    {
      #line 4001 
      union __anonunion___u_3220 __u_3;
      #line 4000 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_3.__c),8);
      #line 4000 
      u8 *hw_addr_3 = (__u_3.__val);
      #line 4000 
      writel(1073741981U,(void *)(hw_addr_3 + 5384U));
    }
    {
      #line 4002 
      union __anonunion___u_3222 __u_4;
      #line 4001 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_4.__c),8);
      #line 4001 
      u8 *hw_addr_4 = (__u_4.__val);
      #line 4001 
      writel(1073741981U,(void *)(hw_addr_4 + 5392U));
    }
  }
  #line 4004 
  return;
}

#line 4012  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static int igc_request_irq(struct igc_adapter *adapter)
{
  #line 4014 
  struct net_device *netdev = adapter->netdev;
  #line 4015 
  struct pci_dev *pdev = adapter->pdev;
  #line 4016 
  int err = 0;
  #line 4018 
  if (((unsigned long)adapter->flags & 8192UL) != 0UL) {
    #line 4019 
    err = igc_request_msix(adapter);
    #line 4020 
    if (err == 0) 
                  #line 4021 
                  goto request_done;
    #line 4023 
    igc_free_all_tx_resources(adapter);
    #line 4024 
    igc_free_all_rx_resources(adapter);
    #line 4026 
    igc_clear_interrupt_scheme(adapter);
    #line 4027 
    err = igc_init_interrupt_scheme(adapter,(_Bool)0);
    #line 4028 
    if (err != 0) 
                  #line 4029 
                  goto request_done;
    #line 4030 
    igc_setup_all_tx_resources(adapter);
    #line 4031 
    igc_setup_all_rx_resources(adapter);
    #line 4032 
    igc_configure(adapter);
  }
  #line 4035 
  igc_assign_vector(adapter->q_vector[0],0);
  #line 4037 
  if (((unsigned long)adapter->flags & 1UL) != 0UL) {
    #line 4038 
    err = cif_request_irq(pdev->irq,& igc_intr_msi,0UL,(char *)(& netdev->name),(void *)adapter);
    #line 4040 
    if (err == 0) 
                  #line 4041 
                  goto request_done;
    #line 4044 
    igc_reset_interrupt_capability(adapter);
    #line 4045 
    adapter->flags &= 4294967294U;
  }
  #line 4048 
  err = cif_request_irq(pdev->irq,& igc_intr,128UL,(char *)(& netdev->name),(void *)adapter);
  #line 4051 
  if (err != 0) 
                #line 4052 
                _dev_err(& pdev->dev,(char *)"Error %d getting interrupt\n",err);
  #line 4055 
  request_done: 
                #line 4055 
  ;
  #line 4056 
  return err;
}

#line 4059  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static void igc_write_itr(struct igc_q_vector *q_vector)
{
  #line 4061 
  u32 itr_val = (unsigned int)q_vector->itr_val & 32764U;
  #line 4063 
  if ((unsigned int)q_vector->set_itr == 0U) 
                                             #line 4064 
                                             return;
  #line 4066 
  if (itr_val == 0U) 
                     #line 4067 
                     itr_val = 4U;
  #line 4069 
  itr_val |= 2147483648U;
  #line 4071 
  writel(itr_val,q_vector->itr_register);
  #line 4072 
  q_vector->set_itr = (unsigned char)0U;
  #line 4073 
  return;
}

#line 4087  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static int __igc_open(struct net_device *netdev, bool resuming)
{
  #line 4089 
  struct igc_adapter *adapter = netdev_priv(netdev);
  #line 4090 
  struct igc_hw *hw = & adapter->hw;
  #line 4091 
  int err = 0;
  #line 4092 
  int i = 0;
  #line 4096 
  if ((int)test_bit(0L,& adapter->state) != 0) {
    {
      #line 4097 
      int __ret_warn_on = (int)resuming != 0;
      #line 4097 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 4098 
        ldv_inline_asm();
        #line 4099 
        ldv_inline_asm();
      }
      #line 4097 
      long tmp_2 = (long)(__ret_warn_on != 0);
    }
    #line 4098 
    return -16;
  }
  #line 4101 
  netif_carrier_off(netdev);
  #line 4104 
  err = igc_setup_all_tx_resources(adapter);
  #line 4105 
  if (err != 0) 
                #line 4106 
                goto err_setup_tx;
  #line 4109 
  err = igc_setup_all_rx_resources(adapter);
  #line 4110 
  if (err != 0) 
                #line 4111 
                goto err_setup_rx;
  #line 4113 
  igc_power_up_link(adapter);
  #line 4115 
  igc_configure(adapter);
  #line 4117 
  err = igc_request_irq(adapter);
  #line 4118 
  if (err != 0) 
                #line 4119 
                goto err_req_irq;
  #line 4122 
  err = netif_set_real_num_tx_queues(netdev,(unsigned int)adapter->num_tx_queues);
  #line 4123 
  if (err != 0) 
                #line 4124 
                goto err_set_queues;
  #line 4126 
  err = netif_set_real_num_rx_queues(netdev,(unsigned int)adapter->num_rx_queues);
  #line 4127 
  if (err != 0) 
                #line 4128 
                goto err_set_queues;
  #line 4130 
  cif_clear_bit(2L,& adapter->state);
  #line 4132 
  i = 0;
  #line 4132 
  while (adapter->num_q_vectors > (unsigned int)i) {
    #line 4133 
    napi_enable(& (adapter->q_vector[i])->napi);
    #line 4132 
    i ++;
  }
  #line 4136 
  igc_rd32(hw,5376U);
  #line 4137 
  igc_irq_enable(adapter);
  #line 4139 
  netif_tx_start_all_queues(netdev);
  #line 4142 
  hw->mac.get_link_status = (_Bool)1;
  #line 4143 
  cif_schedule_work(& adapter->watchdog_task);
  #line 4145 
  return 0;
  #line 4147 
  err_set_queues: 
                  #line 4147 
  ;
  #line 4148 
  igc_free_irq(adapter);
  #line 4149 
  err_req_irq: 
               #line 4149 
  ;
  #line 4150 
  igc_release_hw_control(adapter);
  #line 4151 
  igc_power_down_link(adapter);
  #line 4152 
  igc_free_all_rx_resources(adapter);
  #line 4153 
  err_setup_rx: 
                #line 4153 
  ;
  #line 4154 
  igc_free_all_tx_resources(adapter);
  #line 4155 
  err_setup_tx: 
                #line 4155 
  ;
  #line 4156 
  igc_reset(adapter);
  #line 4158 
  return err;
}

#line 4161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static int igc_open(struct net_device *netdev)
{
  #line 4163 
  return __igc_open(netdev,(_Bool)0);
}

#line 4177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static int __igc_close(struct net_device *netdev, bool suspending)
{
  #line 4179 
  struct igc_adapter *adapter = netdev_priv(netdev);
  {
    #line 4181 
    int __ret_warn_on = (int)test_bit(1L,& adapter->state) != 0;
    #line 4181 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 4182 
      ldv_inline_asm();
      #line 4183 
      ldv_inline_asm();
    }
    #line 4181 
    long tmp_2 = (long)(__ret_warn_on != 0);
  }
  #line 4183 
  igc_down(adapter);
  #line 4185 
  igc_release_hw_control(adapter);
  #line 4187 
  igc_free_irq(adapter);
  #line 4189 
  igc_free_all_tx_resources(adapter);
  #line 4190 
  igc_free_all_rx_resources(adapter);
  #line 4192 
  return 0;
}

#line 4195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static int igc_close(struct net_device *netdev)
{
  #line 4197 
  if ((int)netif_device_present(netdev) != 0) 
                                              #line 4197 
                                              goto _LOR;
  else 
    #line 4197 
    if ((int)netdev->dismantle != 0) {
      #line 4197 
      _LOR: 
      #line 4198 
      return __igc_close(netdev,(_Bool)0);
    }
  #line 4199 
  return 0;
}

#line 4202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static struct net_device_ops igc_netdev_ops = {.ndo_open = & igc_open, .ndo_stop = & igc_close, .ndo_start_xmit = & igc_xmit_frame, .ndo_features_check = & igc_features_check, .ndo_set_rx_mode = & igc_set_rx_mode, .ndo_set_mac_address = & igc_set_mac, .ndo_change_mtu = & igc_change_mtu, .ndo_get_stats = & igc_get_stats, .ndo_fix_features = & igc_fix_features, .ndo_set_features = & igc_set_features};
#line 4216  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
void igc_read_pci_cfg(struct igc_hw *hw, u32 reg, u16 *value)
{
  #line 4218 
  struct igc_adapter *adapter = (struct igc_adapter *)hw->back;
  #line 4220 
  pci_read_config_word(adapter->pdev,(int)reg,value);
  #line 4221 
  return;
}

#line 4223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
void igc_write_pci_cfg(struct igc_hw *hw, u32 reg, u16 *value)
{
  #line 4225 
  struct igc_adapter *adapter = (struct igc_adapter *)hw->back;
  #line 4227 
  pci_write_config_word(adapter->pdev,(int)reg,(unsigned short)((int)*value));
  #line 4228 
  return;
}

#line 4230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
s32 igc_read_pcie_cap_reg(struct igc_hw *hw, u32 reg, u16 *value)
{
  #line 4232 
  struct igc_adapter *adapter = (struct igc_adapter *)hw->back;
  #line 4234 
  if (! pci_is_pcie(adapter->pdev)) 
                                    #line 4235 
                                    return -3;
  #line 4237 
  pcie_capability_read_word(adapter->pdev,(int)reg,value);
  #line 4239 
  return 0;
}

#line 4242  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
s32 igc_write_pcie_cap_reg(struct igc_hw *hw, u32 reg, u16 *value)
{
  #line 4244 
  struct igc_adapter *adapter = (struct igc_adapter *)hw->back;
  #line 4246 
  if (! pci_is_pcie(adapter->pdev)) 
                                    #line 4247 
                                    return -3;
  #line 4249 
  pcie_capability_write_word(adapter->pdev,(int)reg,(unsigned short)((int)*value));
  #line 4251 
  return 0;
}

#line 4254  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
u32 igc_rd32(struct igc_hw *hw, u32 reg)
{
  #line 4258 
  union __anonunion___u_3224 __u;
  #line 4256 
  void *__mptr;
  #line 4256 
  __mptr = (void *)hw;
  #line 4256 
  struct igc_adapter *igc = ((struct igc_adapter *)(__mptr + 18446744073709550680U));
  #line 4257 
  __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
  #line 4257 
  u8 *hw_addr = (__u.__val);
  #line 4258 
  u32 value = 0U;
  #line 4263 
  value = readl((void *)(hw_addr + (unsigned long)reg));
  #line 4266 
  if (value == 4294967295U) 
    #line 4266 
    if (reg == 0U) 
                   #line 4266 
                   goto _LOR;
    else {
      #line 4266 
      if (readl((void *)hw_addr) == 4294967295U) {
        #line 4266 
        _LOR: {
                #line 4267 
                struct net_device *netdev = igc->netdev;
                #line 4269 
                hw->hw_addr = (u8 *)0U;
                #line 4270 
                netif_device_detach(netdev);
                #line 4271 
                netdev_err(netdev,(char *)"PCIe link lost, device now detached\n");
                {
                  #line 4272 
                  int __ret_warn_on = (int)pci_device_is_present(igc->pdev) != 0;
                  #line 4272 
                  if ((long)(__ret_warn_on != 0) != 0L) {
                    #line 4272 
                    __warn_printk((char *)"igc: Failed to read reg 0x%x!\n",reg);
                    #line 4273 
                    ldv_inline_asm();
                    #line 4274 
                    ldv_inline_asm();
                  }
                  #line 4272 
                  long tmp_2 = (long)(__ret_warn_on != 0);
                }
              }
      }
    }
  #line 4276 
  return value;
}

#line 4279  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
int igc_set_spd_dplx(struct igc_adapter *adapter, u32 spd, u8 dplx)
{
  #line 4281 
  struct pci_dev *pdev = adapter->pdev;
  #line 4282 
  struct igc_mac_info *mac = & adapter->hw.mac;
  #line 4284 
  mac->autoneg = (_Bool)0;
  #line 4289 
  if ((spd & 1U) != 0U || ((int)dplx & -2) != 0) 
                                                 #line 4290 
                                                 goto err_inval;
  #line 4292 
  switch ((unsigned int)dplx + spd) {
    #line 4293 
    case (unsigned int)10: 
                           #line 4293 
    ;
    #line 4294 
    mac->forced_speed_duplex = (unsigned char)1U;
    #line 4295 
    break;
    #line 4296 
    case (unsigned int)11: 
                           #line 4296 
    ;
    #line 4297 
    mac->forced_speed_duplex = (unsigned char)2U;
    #line 4298 
    break;
    #line 4299 
    case (unsigned int)100: 
                            #line 4299 
    ;
    #line 4300 
    mac->forced_speed_duplex = (unsigned char)4U;
    #line 4301 
    break;
    #line 4302 
    case (unsigned int)101: 
                            #line 4302 
    ;
    #line 4303 
    mac->forced_speed_duplex = (unsigned char)8U;
    #line 4304 
    break;
    #line 4305 
    case (unsigned int)1001: 
                             #line 4305 
    ;
    #line 4306 
    mac->autoneg = (_Bool)1;
    #line 4307 
    adapter->hw.phy.autoneg_advertised = (unsigned short)32U;
    #line 4308 
    break;
    #line 4309 
    case (unsigned int)1000: 
                             #line 4309 
    ;
    #line 4310 
    goto err_inval;
    #line 4311 
    case (unsigned int)2501: 
                             #line 4311 
    ;
    #line 4312 
    mac->autoneg = (_Bool)1;
    #line 4313 
    adapter->hw.phy.autoneg_advertised = (unsigned short)128U;
    #line 4314 
    break;
    #line 4315 
    case (unsigned int)2500: 
                             #line 4315 
    ;
    #line 4316 
    default: 
             #line 4316 
    ;
    #line 4317 
    goto err_inval;
  }
  #line 4321 
  adapter->hw.phy.mdix = (unsigned char)0U;
  #line 4323 
  return 0;
  #line 4325 
  err_inval: 
             #line 4325 
  ;
  #line 4326 
  _dev_err(& pdev->dev,(char *)"Unsupported Speed/Duplex configuration\n");
  #line 4327 
  return -22;
}

#line 4341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static int igc_probe(struct pci_dev *pdev, struct pci_device_id *ent)
{
  #line 4344 
  struct igc_adapter *adapter;
  #line 4345 
  struct net_device *netdev;
  #line 4346 
  struct igc_hw *hw;
  #line 4348 
  int err;
  #line 4404 
  unsigned long tmp_2;
  #line 4347 
  struct igc_info *ei = igc_info_tbl[ent->driver_data];
  #line 4350 
  err = pci_enable_device_mem(pdev);
  #line 4351 
  if (err != 0) 
                #line 4352 
                return err;
  #line 4354 
  err = dma_set_mask(& pdev->dev,18446744073709551615ULL);
  #line 4355 
  if (err == 0) 
                #line 4356 
                err = dma_set_coherent_mask(& pdev->dev,18446744073709551615ULL);
  else {
    #line 4359 
    err = dma_set_mask(& pdev->dev,4294967295ULL);
    #line 4360 
    if (err != 0) {
      #line 4361 
      err = dma_set_coherent_mask(& pdev->dev,4294967295ULL);
      #line 4363 
      if (err != 0) {
        #line 4364 
        _dev_err(& pdev->dev,(char *)"igc: Wrong DMA config\n");
        #line 4365 
        goto err_dma;
      }
    }
  }
  #line 4370 
  ;
  #line 4370 
  err = pci_request_selected_regions(pdev,pci_select_bars(pdev,512UL),(char *)(& igc_driver_name));
  #line 4374 
  if (err != 0) 
                #line 4375 
                goto err_pci_reg;
  #line 4377 
  pci_enable_pcie_error_reporting(pdev);
  #line 4379 
  pci_set_master(pdev);
  #line 4381 
  err = -12;
  #line 4382 
  netdev = cif_alloc_etherdev_mqs(2848,4U,4U);
  #line 4385 
  if (netdev == (struct net_device *)0) 
                                        #line 4386 
                                        goto err_alloc_etherdev;
  #line 4388 
  netdev->dev.parent = & pdev->dev;
  #line 4390 
  pci_set_drvdata(pdev,(void *)netdev);
  #line 4391 
  adapter = (struct igc_adapter *)netdev_priv(netdev);
  #line 4392 
  adapter->netdev = netdev;
  #line 4393 
  adapter->pdev = pdev;
  #line 4394 
  hw = & adapter->hw;
  #line 4395 
  hw->back = (void *)adapter;
  #line 4396 
  adapter->port_num = (unsigned char)hw->bus.func;
  #line 4397 
  adapter->msg_enable = (int)netif_msg_init(debug,7);
  #line 4399 
  err = pci_save_state(pdev);
  #line 4400 
  if (err != 0) 
                #line 4401 
                goto err_ioremap;
  #line 4403 
  err = -5;
  #line 4404 
  if (pdev->resource[0].start != 0ULL || pdev->resource[0].end != pdev->resource[0].start) 
    #line 4404 
    tmp_2 = (unsigned long)((pdev->resource[0].end - pdev->resource[0].start) + 1ULL); else 
                                                                    #line 4404 
                                                                    tmp_2 = 0UL;
  #line 4404 
  ;
  #line 4404 
  adapter->io_addr = (u8 *)ioremap(pdev->resource[0].start,tmp_2);
  #line 4406 
  if (adapter->io_addr == (u8 *)0U) 
                                    #line 4407 
                                    goto err_ioremap;
  #line 4410 
  hw->hw_addr = adapter->io_addr;
  #line 4412 
  netdev->netdev_ops = & igc_netdev_ops;
  #line 4413 
  igc_set_ethtool_ops(netdev);
  #line 4414 
  netdev->watchdog_timeo = 1250;
  #line 4416 
  netdev->mem_start = (unsigned long)pdev->resource[0].start;
  #line 4417 
  netdev->mem_end = (unsigned long)pdev->resource[0].end;
  #line 4420 
  hw->vendor_id = pdev->vendor;
  #line 4421 
  hw->device_id = pdev->device;
  #line 4422 
  hw->revision_id = pdev->revision;
  #line 4423 
  hw->subsystem_vendor_id = pdev->subsystem_vendor;
  #line 4424 
  hw->subsystem_device_id = pdev->subsystem_device;
  #line 4427 
  memcpy((void *)(& hw->mac.ops),(void *)ei->mac_ops,72UL);
  #line 4428 
  memcpy((void *)(& hw->phy.ops),(void *)ei->phy_ops,64UL);
  #line 4431 
  err = (*(ei->get_invariants))(hw);
  #line 4432 
  if (err != 0) 
                #line 4433 
                goto err_sw_init;
  #line 4436 
  netdev->features |= 549755813888ULL;
  #line 4437 
  netdev->features |= 8ULL;
  #line 4438 
  netdev->features |= 34359738368ULL;
  #line 4441 
  err = igc_sw_init(adapter);
  #line 4442 
  if (err != 0) 
                #line 4443 
                goto err_sw_init;
  #line 4446 
  netdev->hw_features |= 137438953472ULL;
  #line 4447 
  netdev->hw_features |= netdev->features;
  #line 4450 
  netdev->min_mtu = 68U;
  #line 4451 
  netdev->max_mtu = 9216U;
  #line 4456 
  (*(hw->mac.ops.reset_hw))(hw);
  #line 4458 
  if ((int)igc_get_flash_presence_i225(hw) != 0) {
    #line 4459 
    if ((*(hw->nvm.ops.validate))(hw) < 0) {
      #line 4460 
      _dev_err(& pdev->dev,(char *)"The NVM Checksum Is Not Valid\n");
      #line 4462 
      err = -5;
      #line 4463 
      goto err_eeprom;
    }
  }
  #line 4467 
  if (eth_platform_get_mac_address(& pdev->dev,(u8 *)(& hw->mac.addr)) != 0) {
    #line 4469 
    if ((*(hw->mac.ops.read_mac_addr))(hw) != 0) 
                                                 #line 4470 
                                                 _dev_err(& pdev->dev,(char *)"NVM Read Error\n");
  }
  #line 4473 
  memcpy((void *)netdev->dev_addr,(void *)(& hw->mac.addr),(unsigned long)netdev->addr_len);
  #line 4475 
  if (! is_valid_ether_addr(netdev->dev_addr)) {
    #line 4476 
    _dev_err(& pdev->dev,(char *)"Invalid MAC Address\n");
    #line 4477 
    err = -5;
    #line 4478 
    goto err_eeprom;
  }
  {
    #line 4483 
    union __anonunion___u_3226 __u;
    #line 4482 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 4482 
    u8 *hw_addr = (__u.__val);
    #line 4482 
    writel(162U,(void *)(hw_addr + 9220U));
  }
  {
    #line 4484 
    union __anonunion___u_3228 __u_0;
    #line 4483 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
    #line 4483 
    u8 *hw_addr_0 = (__u_0.__val);
    #line 4483 
    writel(67108884U,(void *)(hw_addr_0 + 13316U));
  }
  {
    #line 4485 
    struct lock_class_key __key;
    #line 4485 
    init_timer_key(& adapter->watchdog_timer,& igc_watchdog,0U,(char *)"(&adapter->watchdog_timer)",& __key);
  }
  {
    #line 4486 
    struct lock_class_key __key_0;
    #line 4486 
    init_timer_key(& adapter->phy_info_timer,& igc_update_phy_info,0U,(char *)"(&adapter->phy_info_timer)",& __key_0);
  }
  {
    #line 4488 
    struct lock_class_key __key_1;
    #line 4488 
    __init_work(& adapter->reset_task,0);
    #line 4488 
    atomic_long_t __constr_expr_43 = {.counter = 137438953408LL};
    #line 4488 
    adapter->reset_task.data = __constr_expr_43;
    #line 4488 
    lockdep_init_map(& adapter->reset_task.lockdep_map,(char *)"(work_completion)",& __key_1,0);
    #line 4488 
    INIT_LIST_HEAD(& adapter->reset_task.entry);
    #line 4488 
    adapter->reset_task.func = & igc_reset_task;
  }
  {
    #line 4489 
    struct lock_class_key __key_2;
    #line 4489 
    __init_work(& adapter->watchdog_task,0);
    #line 4489 
    atomic_long_t __constr_expr_44 = {.counter = 137438953408LL};
    #line 4489 
    adapter->watchdog_task.data = __constr_expr_44;
    #line 4489 
    lockdep_init_map(& adapter->watchdog_task.lockdep_map,(char *)"(work_completion)",& __key_2,0);
    #line 4489 
    INIT_LIST_HEAD(& adapter->watchdog_task.entry);
    #line 4489 
    adapter->watchdog_task.func = & igc_watchdog_task;
  }
  #line 4492 
  adapter->fc_autoneg = (_Bool)1;
  #line 4493 
  hw->mac.autoneg = (_Bool)1;
  #line 4494 
  hw->phy.autoneg_advertised = (unsigned short)175U;
  #line 4496 
  hw->fc.requested_mode = igc_fc_default;
  #line 4497 
  hw->fc.current_mode = igc_fc_default;
  #line 4500 
  igc_reset(adapter);
  #line 4505 
  igc_get_hw_control(adapter);
  #line 4507 
  strncpy((char *)(& netdev->name),(char *)"eth%d",16UL);
  #line 4508 
  err = cif_register_netdev(netdev);
  #line 4509 
  if (err != 0) 
                #line 4510 
                goto err_register;
  #line 4513 
  netif_carrier_off(netdev);
  #line 4516 
  adapter->ei = *ei;
  #line 4519 
  pcie_print_link_status(pdev);
  #line 4520 
  netdev_info(netdev,(char *)"MAC: %pM\n",netdev->dev_addr);
  #line 4522 
  return 0;
  #line 4524 
  err_register: 
                #line 4524 
  ;
  #line 4525 
  igc_release_hw_control(adapter);
  #line 4526 
  err_eeprom: 
              #line 4526 
  ;
  #line 4527 
  if (igc_check_reset_block(hw) == 0) 
                                      #line 4528 
                                      igc_reset_phy(hw);
  #line 4529 
  err_sw_init: 
               #line 4529 
  ;
  #line 4530 
  igc_clear_interrupt_scheme(adapter);
  #line 4531 
  iounmap((void *)adapter->io_addr);
  #line 4532 
  err_ioremap: 
               #line 4532 
  ;
  #line 4533 
  cif_free_netdev(netdev);
  #line 4534 
  err_alloc_etherdev: 
                      #line 4534 
  ;
  #line 4535 
  ;
  #line 4535 
  pci_release_selected_regions(pdev,pci_select_bars(pdev,512UL));
  #line 4537 
  err_pci_reg: 
               #line 4537 
  ;
  #line 4538 
  err_dma: 
           #line 4538 
  ;
  #line 4539 
  pci_disable_device(pdev);
  #line 4540 
  return err;
}

#line 4552  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static void igc_remove(struct pci_dev *pdev)
{
  #line 4554 
  struct net_device *netdev = pci_get_drvdata(pdev);
  #line 4555 
  struct igc_adapter *adapter = netdev_priv(netdev);
  #line 4557 
  cif_set_bit(2L,& adapter->state);
  #line 4559 
  cif_del_timer_sync(& adapter->watchdog_timer);
  #line 4560 
  cif_del_timer_sync(& adapter->phy_info_timer);
  #line 4562 
  cancel_work_sync(& adapter->reset_task);
  #line 4563 
  cancel_work_sync(& adapter->watchdog_task);
  #line 4568 
  igc_release_hw_control(adapter);
  #line 4569 
  cif_unregister_netdev(netdev);
  #line 4571 
  igc_clear_interrupt_scheme(adapter);
  #line 4572 
  pci_iounmap(pdev,(void *)adapter->io_addr);
  #line 4573 
  pci_release_mem_regions(pdev);
  #line 4575 
  kfree((void *)adapter->mac_table);
  #line 4576 
  cif_free_netdev(netdev);
  #line 4578 
  pci_disable_pcie_error_reporting(pdev);
  #line 4580 
  pci_disable_device(pdev);
  #line 4581 
  return;
}

#line 4583  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static struct pci_driver igc_driver = {.name = (char *)(& igc_driver_name), .id_table = (struct pci_device_id *)(& igc_pci_tbl), .probe = & igc_probe, .remove = & igc_remove};
#line 4590  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
void igc_set_flag_queue_pairs(struct igc_adapter *adapter, u32 max_rss_queues)
{
  #line 4597 
  if (adapter->rss_queues > max_rss_queues / 2U) 
                                                 #line 4598 
                                                 adapter->flags |= 8U; else 
                                                                    #line 4600 
                                                                    adapter->flags &= 4294967287U;
  #line 4601 
  return;
}

#line 4603  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
unsigned int igc_get_max_rss_queues(struct igc_adapter *adapter)
{
  #line 4605 
  unsigned int max_rss_queues;
  #line 4608 
  max_rss_queues = 4U;
  #line 4610 
  return max_rss_queues;
}

#line 4613  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static void igc_init_queue_configuration(struct igc_adapter *adapter)
{
  #line 4618 
  unsigned int tmp_0;
  #line 4618 
  unsigned int __UNIQUE_ID___x571;
  #line 4615 
  u32 max_rss_queues;
  #line 4617 
  max_rss_queues = igc_get_max_rss_queues(adapter);
  {
    #line 4618 
    __UNIQUE_ID___x571 = max_rss_queues;
    #line 4618 
    unsigned int __UNIQUE_ID___y572 = num_online_cpus();
    #line 4618 
    if (__UNIQUE_ID___x571 < __UNIQUE_ID___y572) 
                                                 #line 4618 
                                                 tmp_0 = __UNIQUE_ID___x571; else 
                                                                    #line 4618 
                                                                    tmp_0 = __UNIQUE_ID___y572;
    }
  #line 4618 
  adapter->rss_queues = tmp_0;
  #line 4620 
  igc_set_flag_queue_pairs(adapter,max_rss_queues);
  #line 4621 
  return;
}

#line 4631  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static int igc_sw_init(struct igc_adapter *adapter)
{
  #line 4633 
  struct net_device *netdev = adapter->netdev;
  #line 4634 
  struct pci_dev *pdev = adapter->pdev;
  #line 4635 
  struct igc_hw *hw = & adapter->hw;
  #line 4637 
  int size = (int)((unsigned int)hw->mac.rar_entry_count * 8U);
  #line 4639 
  pci_read_config_word(pdev,4,& hw->bus.pci_cmd_word);
  #line 4642 
  adapter->tx_ring_count = (unsigned short)256U;
  #line 4643 
  adapter->rx_ring_count = (unsigned short)256U;
  #line 4646 
  adapter->rx_itr_setting = 3U;
  #line 4647 
  adapter->tx_itr_setting = 3U;
  #line 4650 
  adapter->tx_work_limit = (unsigned short)128U;
  #line 4653 
  adapter->max_frame_size = netdev->mtu + 22U;
  #line 4655 
  adapter->min_frame_size = 64U;
  #line 4657 
  spinlock_check(& adapter->nfc_lock);
  {
    #line 4657 
    struct lock_class_key __key;
    #line 4657 
    __raw_spin_lock_init(& adapter->nfc_lock.__anonCompField_spinlock_25.rlock,(char *)"&(&adapter->nfc_lock)->rlock",& __key);
  }
  #line 4658 
  spinlock_check(& adapter->stats64_lock);
  {
    #line 4658 
    struct lock_class_key __key_0;
    #line 4658 
    __raw_spin_lock_init(& adapter->stats64_lock.__anonCompField_spinlock_25.rlock,(char *)"&(&adapter->stats64_lock)->rlock",& __key_0);
  }
  #line 4660 
  adapter->flags |= 8192U;
  #line 4662 
  adapter->mac_table = (struct igc_mac_addr *)kzalloc((unsigned long)size,2592U);
  #line 4663 
  if (adapter->mac_table == (struct igc_mac_addr *)0) 
                                                      #line 4664 
                                                      return -12;
  #line 4666 
  igc_init_queue_configuration(adapter);
  #line 4669 
  if (igc_init_interrupt_scheme(adapter,(_Bool)1) != 0) {
    #line 4670 
    _dev_err(& pdev->dev,(char *)"Unable to allocate memory for queues\n");
    #line 4671 
    return -12;
  }
  #line 4675 
  igc_irq_disable(adapter);
  #line 4677 
  cif_set_bit(2L,& adapter->state);
  #line 4679 
  return 0;
}

#line 4686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
int igc_reinit_queues(struct igc_adapter *adapter)
{
  #line 4688 
  struct net_device *netdev = adapter->netdev;
  #line 4689 
  struct pci_dev *pdev = adapter->pdev;
  #line 4690 
  int err = 0;
  #line 4692 
  if ((int)netif_running(netdev) != 0) 
                                       #line 4693 
                                       igc_close(netdev);
  #line 4695 
  igc_reset_interrupt_capability(adapter);
  #line 4697 
  if (igc_init_interrupt_scheme(adapter,(_Bool)1) != 0) {
    #line 4698 
    _dev_err(& pdev->dev,(char *)"Unable to allocate memory for queues\n");
    #line 4699 
    return -12;
  }
  #line 4702 
  if ((int)netif_running(netdev) != 0) 
                                       #line 4703 
                                       err = igc_open(netdev);
  #line 4705 
  return err;
}

#line 4714  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
struct net_device *igc_get_hw_dev(struct igc_hw *hw)
{
  #line 4716 
  struct igc_adapter *adapter = (struct igc_adapter *)hw->back;
  #line 4718 
  return adapter->netdev;
}

#line 4727  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static int igc_init_module(void)
{
  #line 4729 
  int ret;
  #line 4731 
  printk((char *)"\001",(char *)(& igc_driver_string),(char *)(& igc_driver_version));
  #line 4734 
  printk((char *)"\001",(char *)(& igc_copyright));
  #line 4736 
  ret = cif___pci_register_driver(& igc_driver,& __this_module,(char *)"igc");
  #line 4737 
  return ret;
}

#line 4748  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_main.c"
static void igc_exit_module(void)
{
  #line 4750 
  cif_pci_unregister_driver(& igc_driver);
  #line 4751 
  return;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_main.i.aux"
struct pci_driver *emg_alias_igc_driver = & igc_driver;
#line 94  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_main.i.aux"
struct pci_device_id (*emg_alias_igc_pci_tbl)[6U] = & igc_pci_tbl;
#line 97 
#line 97 
int emg___pci_register_driver(struct pci_driver *arg0, struct module *arg1, char *arg2);
#line 98 
#line 98 
struct net_device *emg_alloc_etherdev_mqs(int arg0, unsigned int arg1, unsigned int arg2);
#line 99 
#line 99 
int emg_del_timer_sync(struct timer_list *arg0);
#line 100 
#line 100 
void *emg_free_irq(unsigned int arg0, void *arg1);
#line 101 
#line 101 
void emg_free_netdev(struct net_device *arg0);
#line 102 
#line 102 
int emg_mod_timer(struct timer_list *arg0, unsigned long arg1);
#line 103 
#line 103 
void emg_pci_unregister_driver(struct pci_driver *arg0);
#line 104 
#line 104 
int emg_register_netdev(struct net_device *arg0);
#line 105 
#line 105 
int emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4);
#line 106 
#line 106 
_Bool emg_schedule_work(struct work_struct *arg0);
#line 107 
#line 107 
void emg_unregister_netdev(struct net_device *arg0);
#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_main.i.aux"
int emg_wrapper_igc_change_mtu(struct net_device *arg0, int arg1)
{
  #line 112 
  return igc_change_mtu(arg0,arg1);
}

#line 116  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_main.i.aux"
int emg_wrapper_igc_close(struct net_device *arg0)
{
  #line 117 
  return igc_close(arg0);
}

#line 121  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_main.i.aux"
unsigned long long emg_wrapper_igc_features_check(struct sk_buff *arg0, struct net_device *arg1, unsigned long long arg2)
{
  #line 122 
  return igc_features_check(arg0,arg1,arg2);
}

#line 126  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_main.i.aux"
unsigned long long emg_wrapper_igc_fix_features(struct net_device *arg0, unsigned long long arg1)
{
  #line 127 
  return igc_fix_features(arg0,arg1);
}

#line 131  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_main.i.aux"
struct net_device_stats *emg_wrapper_igc_get_stats(struct net_device *arg0)
{
  #line 132 
  return igc_get_stats(arg0);
}

#line 136  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_main.i.aux"
enum irqreturn emg_wrapper_igc_intr(int arg0, void *arg1)
{
  #line 137 
  return igc_intr(arg0,arg1);
}

#line 141  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_main.i.aux"
enum irqreturn emg_wrapper_igc_intr_msi(int arg0, void *arg1)
{
  #line 142 
  return igc_intr_msi(arg0,arg1);
}

#line 146  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_main.i.aux"
enum irqreturn emg_wrapper_igc_msix_other(int arg0, void *arg1)
{
  #line 147 
  return igc_msix_other(arg0,arg1);
}

#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_main.i.aux"
enum irqreturn emg_wrapper_igc_msix_ring(int arg0, void *arg1)
{
  #line 152 
  return igc_msix_ring(arg0,arg1);
}

#line 156  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_main.i.aux"
int emg_wrapper_igc_open(struct net_device *arg0)
{
  #line 157 
  return igc_open(arg0);
}

#line 161  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_main.i.aux"
int emg_wrapper_igc_probe(struct pci_dev *arg0, struct pci_device_id *arg1)
{
  #line 162 
  return igc_probe(arg0,arg1);
}

#line 166  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_main.i.aux"
void emg_wrapper_igc_remove(struct pci_dev *arg0)
{
  #line 167 
  igc_remove(arg0);
  #line 168 
  return;
}

#line 171  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_main.i.aux"
int emg_wrapper_igc_set_features(struct net_device *arg0, unsigned long long arg1)
{
  #line 172 
  return igc_set_features(arg0,arg1);
}

#line 176  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_main.i.aux"
int emg_wrapper_igc_set_mac(struct net_device *arg0, void *arg1)
{
  #line 177 
  return igc_set_mac(arg0,arg1);
}

#line 181  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_main.i.aux"
void emg_wrapper_igc_set_rx_mode(struct net_device *arg0)
{
  #line 182 
  igc_set_rx_mode(arg0);
  #line 183 
  return;
}

#line 186  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_main.i.aux"
enum netdev_tx emg_wrapper_igc_xmit_frame(struct sk_buff *arg0, struct net_device *arg1)
{
  #line 187 
  return igc_xmit_frame(arg0,arg1);
}

#line 191  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_main.i.aux"
void emg_igc_exit_module(void)
{
  #line 192 
  igc_exit_module();
  #line 193 
  return;
}

#line 195  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_main.i.aux"
int emg_igc_init_module(void)
{
  #line 196 
  return igc_init_module();
}

#line 214  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_main.i.aux"
static void cif_set_bit(long nr, unsigned long *addr)
{
  #line 217 
  ldv_set_bit(nr,addr);
  #line 218 
  return;
}

#line 221  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_main.i.aux"
static void cif_clear_bit(long nr, unsigned long *addr)
{
  #line 224 
  ldv_clear_bit(nr,addr);
  #line 225 
  return;
}

#line 228  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_main.i.aux"
static void INIT_LIST_HEAD(struct list_head *list)
{
  #line 231 
  ldv_init_list_head(list);
  #line 232 
  return;
}

#line 256  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_main.i.aux"
static void atomic_add(int i, atomic_t *v)
{
  #line 259 
  ldv_atomic_add(i,v);
  #line 260 
  return;
}

#line 484  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_main.i.aux"
static void *kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 487 
  return ldv_kcalloc(n,size,flags);
}

#line 505  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_main.i.aux"
static void *kzalloc(size_t size, gfp_t flags)
{
  #line 508 
  return ldv_kzalloc(size,flags);
}

#line 778  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_main.i.aux"
static bool cif_schedule_work(struct work_struct *work)
{
  #line 782 
  return emg_schedule_work(work);
}

#line 893  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_main.i.aux"
static void cif_vfree(void *addr)
{
  #line 896 
  ldv_vfree(addr);
  #line 897 
  return;
}

#line 900  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_main.i.aux"
static void *cif_vzalloc(unsigned long size)
{
  #line 903 
  return ldv_vzalloc(size);
}

#line 907  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_main.i.aux"
static void cif_spin_lock_nfc_lock_of_igc_adapter(spinlock_t *lock)
{
  #line 910 
  ldv_spin_model_lock((char *)"nfc_lock_of_igc_adapter");
  #line 912 
  spin_lock(lock);
  #line 913 
  return;
}

#line 916  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_main.i.aux"
static void cif_spin_unlock_nfc_lock_of_igc_adapter(spinlock_t *lock)
{
  #line 919 
  ldv_spin_model_unlock((char *)"nfc_lock_of_igc_adapter");
  #line 921 
  spin_unlock(lock);
  #line 922 
  return;
}

#line 925  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_main.i.aux"
static int cif_del_timer_sync(struct timer_list *timer)
{
  #line 929 
  return emg_del_timer_sync(timer);
}

#line 933  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_main.i.aux"
static void cif_spin_lock_stats64_lock_of_igc_adapter(spinlock_t *lock)
{
  #line 936 
  ldv_spin_model_lock((char *)"stats64_lock_of_igc_adapter");
  #line 938 
  spin_lock(lock);
  #line 939 
  return;
}

#line 942  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_main.i.aux"
static void cif_spin_unlock_stats64_lock_of_igc_adapter(spinlock_t *lock)
{
  #line 945 
  ldv_spin_model_unlock((char *)"stats64_lock_of_igc_adapter");
  #line 947 
  spin_unlock(lock);
  #line 948 
  return;
}

#line 951  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_main.i.aux"
static int cif_mod_timer(struct timer_list *timer, unsigned long expires)
{
  #line 955 
  return emg_mod_timer(timer,expires);
}

#line 959  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_main.i.aux"
static int cif_request_irq(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char *name, void *dev)
{
  #line 963 
  return emg_request_irq(irq,handler,flags,name,dev);
}

#line 967  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_main.i.aux"
static void *cif_free_irq(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  #line 971 
  return emg_free_irq(ldv_func_arg1,ldv_func_arg2);
}

#line 975  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_main.i.aux"
static struct net_device *cif_alloc_etherdev_mqs(int sizeof_priv, unsigned int txqs, unsigned int rxqs)
{
  #line 979 
  return emg_alloc_etherdev_mqs(sizeof_priv,txqs,rxqs);
}

#line 983  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_main.i.aux"
static int cif_register_netdev(struct net_device *dev)
{
  #line 987 
  return emg_register_netdev(dev);
}

#line 991  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_main.i.aux"
static void cif_free_netdev(struct net_device *dev)
{
  #line 995 
  emg_free_netdev(dev);
  #line 996 
  return;
}

#line 999  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_main.i.aux"
static void cif_unregister_netdev(struct net_device *dev)
{
  #line 1003 
  emg_unregister_netdev(dev);
  #line 1004 
  return;
}

#line 1007  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_main.i.aux"
static int cif___pci_register_driver(struct pci_driver *ldv_func_arg1, struct module *ldv_func_arg2, char *mod_name)
{
  #line 1011 
  return emg___pci_register_driver(ldv_func_arg1,ldv_func_arg2,mod_name);
}

#line 1015  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_main.i.aux"
static void cif_pci_unregister_driver(struct pci_driver *dev)
{
  #line 1019 
  emg_pci_unregister_driver(dev);
  #line 1020 
  return;
}

/* compiler builtin: 
   unsigned short __builtin_bswap16(unsigned short);   */
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static void arch___set_bit(long nr, unsigned long *addr)
{
  #line 68 
  ldv_inline_asm();
  #line 69 
  return;
}

#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 289  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_ethtool.i.aux"
static void cif_clear_bit_0(long nr, unsigned long *addr);
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-non-atomic.h"
__inline static void __set_bit(long nr, unsigned long *addr)
{
  #line 27 
  kasan_check_read((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 28 
  arch___set_bit(nr,addr);
  #line 29 
  return;
}

#line 741  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void INIT_HLIST_NODE(struct hlist_node *h)
{
  #line 743 
  h->next = (struct hlist_node *)0;
  #line 744 
  h->pprev = (struct hlist_node **)0;
  #line 745 
  return;
}

#line 757  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __hlist_del_0(struct hlist_node *n)
{
  #line 759 
  struct hlist_node *next = n->next;
  #line 760 
  struct hlist_node **pprev = n->pprev;
  {
    #line 763 
    union __anonunion___u_3249 __u = {.__val = next};
    #line 762 
    __write_once_size((void *)pprev,(void *)(& __u.__c),8);
    #line 762 
    struct hlist_node *tmp = __u.__val;
  }
  #line 763 
  if (next != (struct hlist_node *)0) 
                                      #line 764 
                                      next->pprev = pprev;
  #line 765 
  return;
}

#line 767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void hlist_del_0(struct hlist_node *n)
{
  #line 769 
  __hlist_del_0(n);
  #line 770 
  n->next = (struct hlist_node *)(-2401263026318606080);
  #line 771 
  n->pprev = (struct hlist_node **)(-2401263026318606046);
  #line 772 
  return;
}

#line 782  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void hlist_add_head(struct hlist_node *n, struct hlist_head *h)
{
  #line 784 
  struct hlist_node *first = h->first;
  #line 785 
  n->next = first;
  #line 786 
  if (first != (struct hlist_node *)0) 
                                       #line 787 
                                       first->pprev = & n->next;
  {
    #line 789 
    union __anonunion___u_3251 __u = {.__val = n};
    #line 788 
    __write_once_size((void *)(& h->first),(void *)(& __u.__c),8);
    #line 788 
    struct hlist_node *tmp = __u.__val;
  }
  #line 789 
  n->pprev = & h->first;
  #line 790 
  return;
}

#line 802  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void hlist_add_behind(struct hlist_node *n, struct hlist_node *prev)
{
  #line 805 
  n->next = prev->next;
  #line 806 
  prev->next = n;
  #line 807 
  n->pprev = & prev->next;
  #line 809 
  if (n->next != (struct hlist_node *)0) 
                                         #line 810 
                                         (n->next)->pprev = & n->next;
  #line 811 
  return;
}

#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 61 
int memcmp(void *, void *, size_t);
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 29 
size_t strlcpy(char *, char *, size_t);
#line 230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitmap.h"
#line 359  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_ethtool.i.aux"
static void cif_bitmap_zero(unsigned long *dst, unsigned int nbits);
#line 336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_0(spinlock_t *lock)
{
  #line 338 
  _raw_spin_lock(& lock->__anonCompField_spinlock_25.rlock);
  #line 339 
  return;
}

#line 340 
#line 826  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_ethtool.i.aux"
static void cif_spin_lock_stats64_lock_of_igc_adapter_0(spinlock_t *lock);
#line 340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 844  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_ethtool.i.aux"
static void cif_spin_lock_nfc_lock_of_igc_adapter_0(spinlock_t *lock);
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_0(spinlock_t *lock)
{
  #line 378 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_25.rlock);
  #line 379 
  return;
}

#line 380 
#line 835  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_ethtool.i.aux"
static void cif_spin_unlock_stats64_lock_of_igc_adapter_0(spinlock_t *lock);
#line 380  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 853  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_ethtool.i.aux"
static void cif_spin_unlock_nfc_lock_of_igc_adapter_0(spinlock_t *lock);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 27 
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 24 
void *ldv_kmalloc(size_t size, gfp_t flags);
#line 26 
#line 26 
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 21 
void *ldv_vmalloc(unsigned long size);
#line 253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/overflow.h"
__inline static size_t array_size(size_t a, size_t b)
{
  #line 257 
  size_t __a;
  #line 257 
  size_t __b;
  #line 257 
  size_t *__d;
  #line 255 
  size_t bytes;
  {
    #line 257 
    __a = a;
    #line 257 
    __b = b;
    #line 257 
    __d = & bytes;
    #line 257 
    int tmp = & __a == __d;
    }
  #line 257 
  if (__builtin_mul_overflow(__a,__b,__d) != 0) 
                                                #line 258 
                                                return 18446744073709551615UL;
  #line 260 
  return bytes;
}

#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
#line 812  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_ethtool.i.aux"
static void *cif_vmalloc(unsigned long size);
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
#line 819  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_ethtool.i.aux"
static void cif_vfree_0(void *addr);
#line 542  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 484  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_ethtool.i.aux"
static void *kmalloc(size_t size, gfp_t flags);
#line 590  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 491  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_ethtool.i.aux"
static void *kmalloc_array(size_t n, size_t size, gfp_t flags);
#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 519  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_ethtool.i.aux"
static void *kzalloc_0(size_t size, gfp_t flags);
#line 1718  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 1718 
void _dev_info(struct device *, char * , ...);
#line 177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
#line 177 
bool ethtool_convert_link_mode_to_legacy_u32(u32 *, unsigned long *);
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_broadcast_ether_addr(u8 *addr)
{
  #line 166 
  return (_Bool)((unsigned int)(((int)*((u16 *)addr) & (int)*((u16 *)(addr + 2U))) & (int)*((u16 *)(addr + 4U))) == 65535U);
}

#line 238  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static void eth_broadcast_addr(u8 *addr)
{
  #line 240 
  memset((void *)addr,255,6UL);
  #line 241 
  return;
}

#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_runtime.h"
#line 38 
int __pm_runtime_idle(struct device *, int);
#line 40 
#line 40 
int __pm_runtime_resume(struct device *, int);
#line 224  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_runtime.h"
__inline static int pm_runtime_get_sync(struct device *dev)
{
  #line 226 
  return __pm_runtime_resume(dev,4);
}

#line 229  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_runtime.h"
__inline static int pm_runtime_put(struct device *dev)
{
  #line 231 
  return __pm_runtime_idle(dev,5);
}

#line 1843  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static char *pci_name(struct pci_dev *pdev)
{
  #line 1845 
  return dev_name(& pdev->dev);
}

#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_ethtool.c"
static struct igc_stats igc_gstrings_stats[42U] = {{.stat_string = {(char)'r', (char)'x', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}, .sizeof_stat = 8, .stat_offset = 2040}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}, .sizeof_stat = 8, .stat_offset = 2064}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s'}, .sizeof_stat = 8, .stat_offset = 2072}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s'}, .sizeof_stat = 8, .stat_offset = 2080}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'b', (char)'r', (char)'o', (char)'a', (char)'d', (char)'c', (char)'a', (char)'s', (char)'t'}, .sizeof_stat = 8, .stat_offset = 2048}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'b', (char)'r', (char)'o', (char)'a', (char)'d', (char)'c', (char)'a', (char)'s', (char)'t'}, .sizeof_stat = 8, .stat_offset = 2240}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'m', (char)'u', (char)'l', (char)'t', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t'}, .sizeof_stat = 8, .stat_offset = 2056}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'m', (char)'u', (char)'l', (char)'t', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t'}, .sizeof_stat = 8, .stat_offset = 2232}, {.stat_string = {(char)'m', (char)'u', (char)'l', (char)'t', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t'}, .sizeof_stat = 8, .stat_offset = 2056}, {.stat_string = {(char)'c', (char)'o', (char)'l', (char)'l', (char)'i', (char)'s', (char)'i', (char)'o', (char)'n', (char)'s'}, .sizeof_stat = 8, .stat_offset = 1904}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'c', (char)'r', (char)'c', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .sizeof_stat = 8, .stat_offset = 1832}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'n', (char)'o', (char)'_', (char)'b', (char)'u', (char)'f', (char)'f', (char)'e', (char)'r', (char)'_', (char)'c', (char)'o', (char)'u', (char)'n', (char)'t'}, .sizeof_stat = 8, .stat_offset = 2088}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'m', (char)'i', (char)'s', (char)'s', (char)'e', (char)'d', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .sizeof_stat = 8, .stat_offset = 1864}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'a', (char)'b', (char)'o', (char)'r', (char)'t', (char)'e', (char)'d', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .sizeof_stat = 8, .stat_offset = 1880}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'c', (char)'a', (char)'r', (char)'r', (char)'i', (char)'e', (char)'r', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .sizeof_stat = 8, .stat_offset = 1920}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'w', (char)'i', (char)'n', (char)'d', (char)'o', (char)'w', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .sizeof_stat = 8, .stat_offset = 1896}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'a', (char)'b', (char)'o', (char)'r', (char)'t', (char)'_', (char)'l', (char)'a', (char)'t', (char)'e', (char)'_', (char)'c', (char)'o', (char)'l', (char)'l'}, .sizeof_stat = 8, .stat_offset = 1896}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'d', (char)'e', (char)'f', (char)'e', (char)'r', (char)'r', (char)'e', (char)'d', (char)'_', (char)'o', (char)'k'}, .sizeof_stat = 8, .stat_offset = 1912}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'s', (char)'i', (char)'n', (char)'g', (char)'l', (char)'e', (char)'_', (char)'c', (char)'o', (char)'l', (char)'l', (char)'_', (char)'o', (char)'k'}, .sizeof_stat = 8, .stat_offset = 1872}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'m', (char)'u', (char)'l', (char)'t', (char)'i', (char)'_', (char)'c', (char)'o', (char)'l', (char)'l', (char)'_', (char)'o', (char)'k'}, .sizeof_stat = 8, .stat_offset = 1888}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'t', (char)'i', (char)'m', (char)'e', (char)'o', (char)'u', (char)'t', (char)'_', (char)'c', (char)'o', (char)'u', (char)'n', (char)'t'}, .sizeof_stat = 4, .stat_offset = 36}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'l', (char)'o', (char)'n', (char)'g', (char)'_', (char)'l', (char)'e', (char)'n', (char)'g', (char)'t', (char)'h', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .sizeof_stat = 8, .stat_offset = 2112}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'s', (char)'h', (char)'o', (char)'r', (char)'t', (char)'_', (char)'l', (char)'e', (char)'n', (char)'g', (char)'t', (char)'h', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .sizeof_stat = 8, .stat_offset = 2096}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'a', (char)'l', (char)'i', (char)'g', (char)'n', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .sizeof_stat = 8, .stat_offset = 1840}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'t', (char)'c', (char)'p', (char)'_', (char)'s', (char)'e', (char)'g', (char)'_', (char)'g', (char)'o', (char)'o', (char)'d'}, .sizeof_stat = 8, .stat_offset = 2248}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'t', (char)'c', (char)'p', (char)'_', (char)'s', (char)'e', (char)'g', (char)'_', (char)'f', (char)'a', (char)'i', (char)'l', (char)'e', (char)'d'}, .sizeof_stat = 8, .stat_offset = 2256}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'f', (char)'l', (char)'o', (char)'w', (char)'_', (char)'c', (char)'o', (char)'n', (char)'t', (char)'r', (char)'o', (char)'l', (char)'_', (char)'x', (char)'o', (char)'n'}, .sizeof_stat = 8, .stat_offset = 1952}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'f', (char)'l', (char)'o', (char)'w', (char)'_', (char)'c', (char)'o', (char)'n', (char)'t', (char)'r', (char)'o', (char)'l', (char)'_', (char)'x', (char)'o', (char)'f', (char)'f'}, .sizeof_stat = 8, .stat_offset = 1968}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'f', (char)'l', (char)'o', (char)'w', (char)'_', (char)'c', (char)'o', (char)'n', (char)'t', (char)'r', (char)'o', (char)'l', (char)'_', (char)'x', (char)'o', (char)'n'}, .sizeof_stat = 8, .stat_offset = 1960}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'f', (char)'l', (char)'o', (char)'w', (char)'_', (char)'c', (char)'o', (char)'n', (char)'t', (char)'r', (char)'o', (char)'l', (char)'_', (char)'x', (char)'o', (char)'f', (char)'f'}, .sizeof_stat = 8, .stat_offset = 1976}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'l', (char)'o', (char)'n', (char)'g', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'_', (char)'c', (char)'o', (char)'u', (char)'n', (char)'t'}, .sizeof_stat = 8, .stat_offset = 2072}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'d', (char)'m', (char)'a', (char)'_', (char)'o', (char)'u', (char)'t', (char)'_', (char)'o', (char)'f', (char)'_', (char)'s', (char)'y', (char)'n', (char)'c'}, .sizeof_stat = 8, .stat_offset = 2432}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'s', (char)'m', (char)'b', (char)'u', (char)'s'}, .sizeof_stat = 8, .stat_offset = 2144}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'s', (char)'m', (char)'b', (char)'u', (char)'s'}, .sizeof_stat = 8, .stat_offset = 2128}, {.stat_string = {(char)'d', (char)'r', (char)'o', (char)'p', (char)'p', (char)'e', (char)'d', (char)'_', (char)'s', (char)'m', (char)'b', (char)'u', (char)'s'}, .sizeof_stat = 8, .stat_offset = 2136}, {.stat_string = {(char)'o', (char)'s', (char)'2', (char)'b', (char)'m', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'b', (char)'y', (char)'_', (char)'b', (char)'m', (char)'c'}, .sizeof_stat = 8, .stat_offset = 2440}, {.stat_string = {(char)'o', (char)'s', (char)'2', (char)'b', (char)'m', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'b', (char)'y', (char)'_', (char)'b', (char)'m', (char)'c'}, .sizeof_stat = 8, .stat_offset = 2456}, {.stat_string = {(char)'o', (char)'s', (char)'2', (char)'b', (char)'m', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'b', (char)'y', (char)'_', (char)'h', (char)'o', (char)'s', (char)'t'}, .sizeof_stat = 8, .stat_offset = 2448}, {.stat_string = {(char)'o', (char)'s', (char)'2', (char)'b', (char)'m', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'b', (char)'y', (char)'_', (char)'h', (char)'o', (char)'s', (char)'t'}, .sizeof_stat = 8, .stat_offset = 2464}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'h', (char)'w', (char)'t', (char)'s', (char)'t', (char)'a', (char)'m', (char)'p', (char)'_', (char)'t', (char)'i', (char)'m', (char)'e', (char)'o', (char)'u', (char)'t', (char)'s'}, .sizeof_stat = 4, .stat_offset = 2548}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'h', (char)'w', (char)'t', (char)'s', (char)'t', (char)'a', (char)'m', (char)'p', (char)'_', (char)'s', (char)'k', (char)'i', (char)'p', (char)'p', (char)'e', (char)'d'}, .sizeof_stat = 4, .stat_offset = 2552}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'h', (char)'w', (char)'t', (char)'s', (char)'t', (char)'a', (char)'m', (char)'p', (char)'_', (char)'c', (char)'l', (char)'e', (char)'a', (char)'r', (char)'e', (char)'d'}, .sizeof_stat = 4, .stat_offset = 2556}};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_ethtool.c"
static struct igc_stats igc_gstrings_net_stats[9U] = {{.stat_string = {(char)'r', (char)'x', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .sizeof_stat = 8, .stat_offset = 32}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .sizeof_stat = 8, .stat_offset = 40}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'p', (char)'e', (char)'d'}, .sizeof_stat = 8, .stat_offset = 56}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'l', (char)'e', (char)'n', (char)'g', (char)'t', (char)'h', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .sizeof_stat = 8, .stat_offset = 80}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'o', (char)'v', (char)'e', (char)'r', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .sizeof_stat = 8, .stat_offset = 88}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .sizeof_stat = 8, .stat_offset = 104}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'f', (char)'i', (char)'f', (char)'o', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .sizeof_stat = 8, .stat_offset = 112}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'f', (char)'i', (char)'f', (char)'o', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .sizeof_stat = 8, .stat_offset = 144}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'h', (char)'e', (char)'a', (char)'r', (char)'t', (char)'b', (char)'e', (char)'a', (char)'t', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .sizeof_stat = 8, .stat_offset = 152}};
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_ethtool.c"
static char igc_gstrings_test[5U][32U] = {{(char)'R', (char)'e', (char)'g', (char)'i', (char)'s', (char)'t', (char)'e', (char)'r', (char)' ', (char)'t', (char)'e', (char)'s', (char)'t', (char)' ', (char)' ', (char)'(', (char)'o', (char)'f', (char)'f', (char)'l', (char)'i', (char)'n', (char)'e', (char)')'}, {(char)'E', (char)'e', (char)'p', (char)'r', (char)'o', (char)'m', (char)' ', (char)'t', (char)'e', (char)'s', (char)'t', (char)' ', (char)' ', (char)' ', (char)' ', (char)'(', (char)'o', (char)'f', (char)'f', (char)'l', (char)'i', (char)'n', (char)'e', (char)')'}, {(char)'I', (char)'n', (char)'t', (char)'e', (char)'r', (char)'r', (char)'u', (char)'p', (char)'t', (char)' ', (char)'t', (char)'e', (char)'s', (char)'t', (char)' ', (char)'(', (char)'o', (char)'f', (char)'f', (char)'l', (char)'i', (char)'n', (char)'e', (char)')'}, {(char)'L', (char)'o', (char)'o', (char)'p', (char)'b', (char)'a', (char)'c', (char)'k', (char)' ', (char)'t', (char)'e', (char)'s', (char)'t', (char)' ', (char)' ', (char)'(', (char)'o', (char)'f', (char)'f', (char)'l', (char)'i', (char)'n', (char)'e', (char)')'}, {(char)'L', (char)'i', (char)'n', (char)'k', (char)' ', (char)'t', (char)'e', (char)'s', (char)'t', (char)' ', (char)' ', (char)' ', (char)'(', (char)'o', (char)'n', (char)'/', (char)'o', (char)'f', (char)'f', (char)'l', (char)'i', (char)'n', (char)'e', (char)')'}};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_ethtool.c"
static char igc_priv_flags_strings[1U][32U] = {{(char)'l', (char)'e', (char)'g', (char)'a', (char)'c', (char)'y', (char)'-', (char)'r', (char)'x'}};
#line 126  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_ethtool.c"
static void igc_get_drvinfo(struct net_device *netdev, struct ethtool_drvinfo *drvinfo)
{
  #line 129 
  struct igc_adapter *adapter = netdev_priv(netdev);
  #line 131 
  strlcpy((char *)(& drvinfo->driver),(char *)(& igc_driver_name),32UL);
  #line 132 
  strlcpy((char *)(& drvinfo->version),(char *)(& igc_driver_version),32UL);
  #line 135 
  ;
  #line 135 
  strlcpy((char *)(& drvinfo->bus_info),pci_name(adapter->pdev),32UL);
  #line 138 
  drvinfo->n_priv_flags = 1U;
  #line 139 
  return;
}

#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_ethtool.c"
static int igc_get_regs_len(struct net_device *netdev)
{
  #line 143 
  return 2960;
}

#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_ethtool.c"
static void igc_get_regs(struct net_device *netdev, struct ethtool_regs *regs, void *p)
{
  #line 152 
  u8 i;
  #line 149 
  struct igc_adapter *adapter = netdev_priv(netdev);
  #line 150 
  struct igc_hw *hw = & adapter->hw;
  #line 151 
  u32 *regs_buff = (u32 *)p;
  #line 154 
  memset(p,0,2960UL);
  #line 156 
  regs->version = ((unsigned int)((int)hw->revision_id << 16) | (unsigned int)hw->device_id) | 16777216U;
  #line 159 
  *regs_buff = igc_rd32(hw,0U);
  #line 160 
  *(regs_buff + 1U) = igc_rd32(hw,8U);
  #line 161 
  *(regs_buff + 2U) = igc_rd32(hw,24U);
  #line 162 
  *(regs_buff + 3U) = igc_rd32(hw,32U);
  #line 163 
  *(regs_buff + 4U) = igc_rd32(hw,52U);
  #line 166 
  *(regs_buff + 5U) = igc_rd32(hw,16U);
  #line 172 
  *(regs_buff + 6U) = igc_rd32(hw,5408U);
  #line 173 
  *(regs_buff + 7U) = igc_rd32(hw,5408U);
  #line 174 
  *(regs_buff + 8U) = igc_rd32(hw,5412U);
  #line 175 
  *(regs_buff + 9U) = igc_rd32(hw,5416U);
  #line 176 
  *(regs_buff + 10U) = igc_rd32(hw,5420U);
  #line 177 
  *(regs_buff + 11U) = igc_rd32(hw,5424U);
  #line 181 
  *(regs_buff + 12U) = igc_rd32(hw,5380U);
  #line 182 
  *(regs_buff + 13U) = igc_rd32(hw,5380U);
  #line 183 
  *(regs_buff + 14U) = igc_rd32(hw,5384U);
  #line 184 
  *(regs_buff + 15U) = igc_rd32(hw,5388U);
  #line 185 
  *(regs_buff + 16U) = igc_rd32(hw,16640U);
  #line 186 
  *(regs_buff + 17U) = igc_rd32(hw,5392U);
  #line 189 
  *(regs_buff + 18U) = igc_rd32(hw,40U);
  #line 190 
  *(regs_buff + 19U) = igc_rd32(hw,44U);
  #line 191 
  *(regs_buff + 20U) = igc_rd32(hw,368U);
  #line 192 
  *(regs_buff + 21U) = igc_rd32(hw,8544U);
  #line 193 
  *(regs_buff + 22U) = igc_rd32(hw,8552U);
  #line 194 
  *(regs_buff + 23U) = igc_rd32(hw,9312U);
  #line 197 
  *(regs_buff + 24U) = igc_rd32(hw,256U);
  #line 198 
  *(regs_buff + 25U) = igc_rd32(hw,20480U);
  #line 199 
  *(regs_buff + 26U) = igc_rd32(hw,20484U);
  #line 200 
  *(regs_buff + 27U) = igc_rd32(hw,20488U);
  #line 203 
  *(regs_buff + 28U) = igc_rd32(hw,1024U);
  #line 204 
  *(regs_buff + 29U) = igc_rd32(hw,1040U);
  #line 211 
  *(regs_buff + 30U) = (unsigned int)adapter->stats.crcerrs;
  #line 212 
  *(regs_buff + 31U) = (unsigned int)adapter->stats.algnerrc;
  #line 213 
  *(regs_buff + 32U) = (unsigned int)adapter->stats.symerrs;
  #line 214 
  *(regs_buff + 33U) = (unsigned int)adapter->stats.rxerrc;
  #line 215 
  *(regs_buff + 34U) = (unsigned int)adapter->stats.mpc;
  #line 216 
  *(regs_buff + 35U) = (unsigned int)adapter->stats.scc;
  #line 217 
  *(regs_buff + 36U) = (unsigned int)adapter->stats.ecol;
  #line 218 
  *(regs_buff + 37U) = (unsigned int)adapter->stats.mcc;
  #line 219 
  *(regs_buff + 38U) = (unsigned int)adapter->stats.latecol;
  #line 220 
  *(regs_buff + 39U) = (unsigned int)adapter->stats.colc;
  #line 221 
  *(regs_buff + 40U) = (unsigned int)adapter->stats.dc;
  #line 222 
  *(regs_buff + 41U) = (unsigned int)adapter->stats.tncrs;
  #line 223 
  *(regs_buff + 42U) = (unsigned int)adapter->stats.sec;
  #line 224 
  *(regs_buff + 43U) = (unsigned int)adapter->stats.htdpmc;
  #line 225 
  *(regs_buff + 44U) = (unsigned int)adapter->stats.rlec;
  #line 226 
  *(regs_buff + 45U) = (unsigned int)adapter->stats.xonrxc;
  #line 227 
  *(regs_buff + 46U) = (unsigned int)adapter->stats.xontxc;
  #line 228 
  *(regs_buff + 47U) = (unsigned int)adapter->stats.xoffrxc;
  #line 229 
  *(regs_buff + 48U) = (unsigned int)adapter->stats.xofftxc;
  #line 230 
  *(regs_buff + 49U) = (unsigned int)adapter->stats.fcruc;
  #line 231 
  *(regs_buff + 50U) = (unsigned int)adapter->stats.prc64;
  #line 232 
  *(regs_buff + 51U) = (unsigned int)adapter->stats.prc127;
  #line 233 
  *(regs_buff + 52U) = (unsigned int)adapter->stats.prc255;
  #line 234 
  *(regs_buff + 53U) = (unsigned int)adapter->stats.prc511;
  #line 235 
  *(regs_buff + 54U) = (unsigned int)adapter->stats.prc1023;
  #line 236 
  *(regs_buff + 55U) = (unsigned int)adapter->stats.prc1522;
  #line 237 
  *(regs_buff + 56U) = (unsigned int)adapter->stats.gprc;
  #line 238 
  *(regs_buff + 57U) = (unsigned int)adapter->stats.bprc;
  #line 239 
  *(regs_buff + 58U) = (unsigned int)adapter->stats.mprc;
  #line 240 
  *(regs_buff + 59U) = (unsigned int)adapter->stats.gptc;
  #line 241 
  *(regs_buff + 60U) = (unsigned int)adapter->stats.gorc;
  #line 242 
  *(regs_buff + 61U) = (unsigned int)adapter->stats.gotc;
  #line 243 
  *(regs_buff + 62U) = (unsigned int)adapter->stats.rnbc;
  #line 244 
  *(regs_buff + 63U) = (unsigned int)adapter->stats.ruc;
  #line 245 
  *(regs_buff + 64U) = (unsigned int)adapter->stats.rfc;
  #line 246 
  *(regs_buff + 65U) = (unsigned int)adapter->stats.roc;
  #line 247 
  *(regs_buff + 66U) = (unsigned int)adapter->stats.rjc;
  #line 248 
  *(regs_buff + 67U) = (unsigned int)adapter->stats.mgprc;
  #line 249 
  *(regs_buff + 68U) = (unsigned int)adapter->stats.mgpdc;
  #line 250 
  *(regs_buff + 69U) = (unsigned int)adapter->stats.mgptc;
  #line 251 
  *(regs_buff + 70U) = (unsigned int)adapter->stats.tor;
  #line 252 
  *(regs_buff + 71U) = (unsigned int)adapter->stats.tot;
  #line 253 
  *(regs_buff + 72U) = (unsigned int)adapter->stats.tpr;
  #line 254 
  *(regs_buff + 73U) = (unsigned int)adapter->stats.tpt;
  #line 255 
  *(regs_buff + 74U) = (unsigned int)adapter->stats.ptc64;
  #line 256 
  *(regs_buff + 75U) = (unsigned int)adapter->stats.ptc127;
  #line 257 
  *(regs_buff + 76U) = (unsigned int)adapter->stats.ptc255;
  #line 258 
  *(regs_buff + 77U) = (unsigned int)adapter->stats.ptc511;
  #line 259 
  *(regs_buff + 78U) = (unsigned int)adapter->stats.ptc1023;
  #line 260 
  *(regs_buff + 79U) = (unsigned int)adapter->stats.ptc1522;
  #line 261 
  *(regs_buff + 80U) = (unsigned int)adapter->stats.mptc;
  #line 262 
  *(regs_buff + 81U) = (unsigned int)adapter->stats.bptc;
  #line 263 
  *(regs_buff + 82U) = (unsigned int)adapter->stats.tsctc;
  #line 264 
  *(regs_buff + 83U) = (unsigned int)adapter->stats.iac;
  #line 265 
  *(regs_buff + 84U) = (unsigned int)adapter->stats.rpthc;
  #line 266 
  *(regs_buff + 85U) = (unsigned int)adapter->stats.hgptc;
  #line 267 
  *(regs_buff + 86U) = (unsigned int)adapter->stats.hgorc;
  #line 268 
  *(regs_buff + 87U) = (unsigned int)adapter->stats.hgotc;
  #line 269 
  *(regs_buff + 88U) = (unsigned int)adapter->stats.lenerrs;
  #line 270 
  *(regs_buff + 89U) = (unsigned int)adapter->stats.scvpc;
  #line 271 
  *(regs_buff + 90U) = (unsigned int)adapter->stats.hrmpc;
  #line 273 
  i = (unsigned char)0U;
  #line 273 
  while ((unsigned int)i <= 3U) {
    #line 274 
    *(regs_buff + (unsigned long)((int)i + 91)) = igc_rd32(hw,(unsigned int)((int)i * 64 + 49164));
    #line 273 
    i = (u8)((int)i + 1);
  }
  #line 275 
  i = (unsigned char)0U;
  #line 275 
  while ((unsigned int)i <= 3U) {
    #line 276 
    *(regs_buff + (unsigned long)((int)i + 95)) = igc_rd32(hw,(unsigned int)(((int)i + 5408) * 4));
    #line 275 
    i = (u8)((int)i + 1);
  }
  #line 277 
  i = (unsigned char)0U;
  #line 277 
  while ((unsigned int)i <= 3U) {
    #line 278 
    *(regs_buff + (unsigned long)((int)i + 99)) = igc_rd32(hw,(unsigned int)(((int)i + 768) * 64));
    #line 277 
    i = (u8)((int)i + 1);
  }
  #line 279 
  i = (unsigned char)0U;
  #line 279 
  while ((unsigned int)i <= 3U) {
    #line 280 
    *(regs_buff + (unsigned long)((int)i + 103)) = igc_rd32(hw,(unsigned int)((int)i * 64 + 49156));
    #line 279 
    i = (u8)((int)i + 1);
  }
  #line 281 
  i = (unsigned char)0U;
  #line 281 
  while ((unsigned int)i <= 3U) {
    #line 282 
    *(regs_buff + (unsigned long)((int)i + 107)) = igc_rd32(hw,(unsigned int)((int)i * 64 + 49160));
    #line 281 
    i = (u8)((int)i + 1);
  }
  #line 283 
  i = (unsigned char)0U;
  #line 283 
  while ((unsigned int)i <= 3U) {
    #line 284 
    *(regs_buff + (unsigned long)((int)i + 111)) = igc_rd32(hw,(unsigned int)((int)i * 64 + 49168));
    #line 283 
    i = (u8)((int)i + 1);
  }
  #line 285 
  i = (unsigned char)0U;
  #line 285 
  while ((unsigned int)i <= 3U) {
    #line 286 
    *(regs_buff + (unsigned long)((int)i + 115)) = igc_rd32(hw,(unsigned int)((int)i * 64 + 49176));
    #line 285 
    i = (u8)((int)i + 1);
  }
  #line 287 
  i = (unsigned char)0U;
  #line 287 
  while ((unsigned int)i <= 3U) {
    #line 288 
    *(regs_buff + (unsigned long)((int)i + 119)) = igc_rd32(hw,(unsigned int)((int)i * 64 + 49192));
    #line 287 
    i = (u8)((int)i + 1);
  }
  #line 290 
  i = (unsigned char)0U;
  #line 290 
  while ((unsigned int)i <= 9U) {
    #line 291 
    *(regs_buff + (unsigned long)((int)i + 123)) = igc_rd32(hw,(unsigned int)(((int)i + 1440) * 4));
    #line 290 
    i = (u8)((int)i + 1);
  }
  #line 292 
  i = (unsigned char)0U;
  #line 292 
  while ((unsigned int)i <= 15U) {
    #line 293 
    *(regs_buff + (unsigned long)((int)i + 139)) = igc_rd32(hw,(unsigned int)(((int)i + 2688) * 8));
    #line 292 
    i = (u8)((int)i + 1);
  }
  #line 294 
  i = (unsigned char)0U;
  #line 294 
  while ((unsigned int)i <= 15U) {
    #line 295 
    *(regs_buff + (unsigned long)((int)i + 145)) = igc_rd32(hw,(unsigned int)((int)i * 8 + 21508));
    #line 294 
    i = (u8)((int)i + 1);
  }
  #line 297 
  i = (unsigned char)0U;
  #line 297 
  while ((unsigned int)i <= 3U) {
    #line 298 
    *(regs_buff + (unsigned long)((int)i + 149)) = igc_rd32(hw,(unsigned int)(((int)i + 896) * 64));
    #line 297 
    i = (u8)((int)i + 1);
  }
  #line 299 
  i = (unsigned char)0U;
  #line 299 
  while ((unsigned int)i <= 3U) {
    #line 300 
    *(regs_buff + (unsigned long)((int)i + 152)) = igc_rd32(hw,(unsigned int)((int)i * 64 + 57348));
    #line 299 
    i = (u8)((int)i + 1);
  }
  #line 301 
  i = (unsigned char)0U;
  #line 301 
  while ((unsigned int)i <= 3U) {
    #line 302 
    *(regs_buff + (unsigned long)((int)i + 156)) = igc_rd32(hw,(unsigned int)((int)i * 64 + 57352));
    #line 301 
    i = (u8)((int)i + 1);
  }
  #line 303 
  i = (unsigned char)0U;
  #line 303 
  while ((unsigned int)i <= 3U) {
    #line 304 
    *(regs_buff + (unsigned long)((int)i + 160)) = igc_rd32(hw,(unsigned int)((int)i * 64 + 57360));
    #line 303 
    i = (u8)((int)i + 1);
  }
  #line 305 
  i = (unsigned char)0U;
  #line 305 
  while ((unsigned int)i <= 3U) {
    #line 306 
    *(regs_buff + (unsigned long)((int)i + 164)) = igc_rd32(hw,(unsigned int)((int)i * 64 + 57368));
    #line 305 
    i = (u8)((int)i + 1);
  }
  #line 307 
  i = (unsigned char)0U;
  #line 307 
  while ((unsigned int)i <= 3U) {
    #line 308 
    *(regs_buff + (unsigned long)((int)i + 168)) = igc_rd32(hw,(unsigned int)((int)i * 64 + 57384));
    #line 307 
    i = (u8)((int)i + 1);
  }
  #line 309 
  return;
}

#line 311  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_ethtool.c"
static u32 igc_get_msglevel(struct net_device *netdev)
{
  #line 313 
  struct igc_adapter *adapter = netdev_priv(netdev);
  #line 315 
  return (unsigned int)adapter->msg_enable;
}

#line 318  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_ethtool.c"
static void igc_set_msglevel(struct net_device *netdev, u32 data)
{
  #line 320 
  struct igc_adapter *adapter = netdev_priv(netdev);
  #line 322 
  adapter->msg_enable = (int)data;
  #line 323 
  return;
}

#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_ethtool.c"
static int igc_nway_reset(struct net_device *netdev)
{
  #line 327 
  struct igc_adapter *adapter = netdev_priv(netdev);
  #line 329 
  if ((int)netif_running(netdev) != 0) 
                                       #line 330 
                                       igc_reinit_locked(adapter);
  #line 331 
  return 0;
}

#line 334  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_ethtool.c"
static u32 igc_get_link(struct net_device *netdev)
{
  #line 336 
  struct igc_adapter *adapter = netdev_priv(netdev);
  #line 337 
  struct igc_mac_info *mac = & adapter->hw.mac;
  #line 345 
  if (! netif_carrier_ok(netdev)) 
                                  #line 346 
                                  mac->get_link_status = (_Bool)1;
  #line 348 
  return (unsigned int)igc_has_link(adapter);
}

#line 351  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_ethtool.c"
static int igc_get_eeprom_len(struct net_device *netdev)
{
  #line 353 
  struct igc_adapter *adapter = netdev_priv(netdev);
  #line 355 
  return (int)adapter->hw.nvm.word_size * 2;
}

#line 358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_ethtool.c"
static int igc_get_eeprom(struct net_device *netdev, struct ethtool_eeprom *eeprom, u8 *bytes)
{
  #line 363 
  int first_word;
  #line 363 
  int last_word;
  #line 364 
  u16 *eeprom_buff;
  #line 366 
  u16 i;
  #line 361 
  struct igc_adapter *adapter = netdev_priv(netdev);
  #line 362 
  struct igc_hw *hw = & adapter->hw;
  #line 365 
  int ret_val = 0;
  #line 368 
  if (eeprom->len == 0U) 
                         #line 369 
                         return -22;
  #line 371 
  eeprom->magic = (unsigned int)((int)hw->vendor_id | ((int)hw->device_id << 16));
  #line 373 
  first_word = (int)(eeprom->offset >> 1);
  #line 374 
  last_word = (int)(((eeprom->offset + eeprom->len) + 4294967295U) >> 1);
  #line 376 
  eeprom_buff = (u16 *)kmalloc_array((unsigned long)((last_word - first_word) + 1),2UL,3264U);
  #line 378 
  if (eeprom_buff == (u16 *)0U) 
                                #line 379 
                                return -12;
  #line 381 
  if (hw->nvm.type == (unsigned int)igc_nvm_eeprom_spi) 
                                                        #line 382 
                                                        ret_val = (*(hw->nvm.ops.read))(hw,(unsigned short)((int)((unsigned short)first_word)),(unsigned short)((int)((unsigned int)((int)((unsigned short)last_word) - (int)((unsigned short)first_word)) + 1U)),eeprom_buff);
  else {
    #line 386 
    i = (unsigned short)0U;
    #line 386 
    while (last_word - first_word >= (int)i) {
      #line 387 
      ret_val = (*(hw->nvm.ops.read))(hw,(unsigned short)((int)((unsigned short)first_word) + (int)i),(unsigned short)1,eeprom_buff + (unsigned long)i);
      #line 389 
      if (ret_val != 0) 
                        #line 390 
                        break;
      #line 386 
      i = (u16)((int)i + 1);
    }
  }
  #line 395 
  i = (unsigned short)0U;
  #line 395 
  while (last_word - first_word >= (int)i) {
    #line 396 
    u16 *tmp_2 = eeprom_buff + (unsigned long)i;
    #line 395 
    i = (u16)((int)i + 1);
  }
  #line 398 
  memcpy((void *)bytes,(void *)((u8 *)eeprom_buff + ((unsigned long)eeprom->offset & (unsigned long)1U)),(unsigned long)eeprom->len);
  #line 400 
  kfree((void *)eeprom_buff);
  #line 402 
  return ret_val;
}

#line 405  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_ethtool.c"
static int igc_set_eeprom(struct net_device *netdev, struct ethtool_eeprom *eeprom, u8 *bytes)
{
  #line 410 
  int max_len;
  #line 410 
  int first_word;
  #line 410 
  int last_word;
  #line 411 
  u16 *eeprom_buff;
  #line 412 
  void *ptr;
  #line 413 
  u16 i;
  #line 408 
  struct igc_adapter *adapter = netdev_priv(netdev);
  #line 409 
  struct igc_hw *hw = & adapter->hw;
  #line 410 
  int ret_val = 0;
  #line 415 
  if (eeprom->len == 0U) 
                         #line 416 
                         return -95;
  #line 418 
  if (hw->mac.type != (unsigned int)igc_undefined) {
    #line 419 
    if (! igc_get_flash_presence_i225(hw)) 
                                           #line 420 
                                           return -95;
  }
  #line 423 
  if (eeprom->magic != (unsigned int)((int)hw->vendor_id | ((int)hw->device_id << 16))) 
    #line 424 
    return -14;
  #line 426 
  max_len = (int)hw->nvm.word_size * 2;
  #line 428 
  first_word = (int)(eeprom->offset >> 1);
  #line 429 
  last_word = (int)(((eeprom->offset + eeprom->len) + 4294967295U) >> 1);
  #line 430 
  eeprom_buff = (u16 *)kmalloc((unsigned long)max_len,3264U);
  #line 431 
  if (eeprom_buff == (u16 *)0U) 
                                #line 432 
                                return -12;
  #line 434 
  ptr = (void *)eeprom_buff;
  #line 436 
  if ((eeprom->offset & 1U) != 0U) {
    #line 440 
    ret_val = (*(hw->nvm.ops.read))(hw,(unsigned short)((int)((unsigned short)first_word)),(unsigned short)1,eeprom_buff);
    #line 442 
    ptr ++;
  }
  #line 444 
  if (((eeprom->offset + eeprom->len) & 1U) != 0U && ret_val == 0) 
                                                                   #line 448 
                                                                   ret_val = (*(hw->nvm.ops.read))(hw,(unsigned short)((int)((unsigned short)last_word)),(unsigned short)1,eeprom_buff + (unsigned long)(last_word - first_word));
  #line 453 
  i = (unsigned short)0U;
  #line 453 
  while (last_word - first_word >= (int)i) {
    #line 454 
    u16 *tmp_2 = eeprom_buff + (unsigned long)i;
    #line 453 
    i = (u16)((int)i + 1);
  }
  #line 456 
  memcpy(ptr,(void *)bytes,(unsigned long)eeprom->len);
  #line 458 
  i = (unsigned short)0U;
  #line 458 
  while (last_word - first_word >= (int)i) {
    #line 459 
    *(eeprom_buff + (unsigned long)i) = *(eeprom_buff + (unsigned long)i);
    #line 458 
    i = (u16)((int)i + 1);
  }
  #line 461 
  ret_val = (*(hw->nvm.ops.write))(hw,(unsigned short)((int)((unsigned short)first_word)),(unsigned short)((int)((unsigned int)((int)((unsigned short)last_word) - (int)((unsigned short)first_word)) + 1U)),eeprom_buff);
  #line 465 
  if (ret_val == 0) 
                    #line 466 
                    (*(hw->nvm.ops.update))(hw);
  #line 469 
  kfree((void *)eeprom_buff);
  #line 470 
  return ret_val;
}

#line 473  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_ethtool.c"
static void igc_get_ringparam(struct net_device *netdev, struct ethtool_ringparam *ring)
{
  #line 476 
  struct igc_adapter *adapter = netdev_priv(netdev);
  #line 478 
  ring->rx_max_pending = 4096U;
  #line 479 
  ring->tx_max_pending = 4096U;
  #line 480 
  ring->rx_pending = (unsigned int)adapter->rx_ring_count;
  #line 481 
  ring->tx_pending = (unsigned int)adapter->tx_ring_count;
  #line 482 
  return;
}

#line 484  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_ethtool.c"
static int igc_set_ringparam(struct net_device *netdev, struct ethtool_ringparam *ring)
{
  #line 495 
  unsigned int tmp_0;
  #line 496 
  unsigned short __UNIQUE_ID___x445;
  #line 496 
  int tmp_2;
  #line 499 
  unsigned int __UNIQUE_ID___x447;
  #line 499 
  unsigned int tmp_4;
  #line 500 
  unsigned short __UNIQUE_ID___x449;
  #line 500 
  int tmp_6;
  #line 495 
  unsigned int __UNIQUE_ID___x443;
  #line 488 
  struct igc_ring *temp_ring;
  #line 489 
  u16 new_rx_count;
  #line 489 
  u16 new_tx_count;
  #line 490 
  int i;
  #line 487 
  struct igc_adapter *adapter = netdev_priv(netdev);
  #line 490 
  int err = 0;
  #line 492 
  if (ring->rx_mini_pending != 0U || ring->rx_jumbo_pending != 0U) 
                                                                   #line 493 
                                                                   return -22;
  {
    #line 495 
    __UNIQUE_ID___x443 = ring->rx_pending;
    #line 495 
    unsigned int __UNIQUE_ID___y444 = 4096U;
    #line 495 
    if (__UNIQUE_ID___x443 < __UNIQUE_ID___y444) 
                                                 #line 495 
                                                 tmp_0 = __UNIQUE_ID___x443; else 
                                                                    #line 495 
                                                                    tmp_0 = __UNIQUE_ID___y444;
    }
  #line 495 
  new_rx_count = (unsigned short)tmp_0;
  {
    #line 496 
    __UNIQUE_ID___x445 = new_rx_count;
    #line 496 
    unsigned short __UNIQUE_ID___y446 = (unsigned short)80U;
    #line 496 
    if ((int)__UNIQUE_ID___x445 > (int)__UNIQUE_ID___y446) 
                                                           #line 496 
                                                           tmp_2 = (int)__UNIQUE_ID___x445; else 
                                                                    #line 496 
                                                                    tmp_2 = (int)__UNIQUE_ID___y446;
    }
  #line 496 
  new_rx_count = (unsigned short)tmp_2;
  #line 497 
  new_rx_count = (unsigned short)((unsigned int)((unsigned short)((unsigned int)new_rx_count + 7U)) & 65528U);
  {
    #line 499 
    __UNIQUE_ID___x447 = ring->tx_pending;
    #line 499 
    unsigned int __UNIQUE_ID___y448 = 4096U;
    #line 499 
    if (__UNIQUE_ID___x447 < __UNIQUE_ID___y448) 
                                                 #line 499 
                                                 tmp_4 = __UNIQUE_ID___x447; else 
                                                                    #line 499 
                                                                    tmp_4 = __UNIQUE_ID___y448;
    }
  #line 499 
  new_tx_count = (unsigned short)tmp_4;
  {
    #line 500 
    __UNIQUE_ID___x449 = new_tx_count;
    #line 500 
    unsigned short __UNIQUE_ID___y450 = (unsigned short)80U;
    #line 500 
    if ((int)__UNIQUE_ID___x449 > (int)__UNIQUE_ID___y450) 
                                                           #line 500 
                                                           tmp_6 = (int)__UNIQUE_ID___x449; else 
                                                                    #line 500 
                                                                    tmp_6 = (int)__UNIQUE_ID___y450;
    }
  #line 500 
  new_tx_count = (unsigned short)tmp_6;
  #line 501 
  new_tx_count = (unsigned short)((unsigned int)((unsigned short)((unsigned int)new_tx_count + 7U)) & 65528U);
  #line 503 
  if ((int)adapter->tx_ring_count == (int)new_tx_count && (int)adapter->rx_ring_count == (int)new_rx_count) 
    #line 506 
    return 0;
  #line 509 
  while (1) {
    #line 509 
    if (! ((int)test_and_set_bit(1L,& adapter->state) != 0)) 
                                                             #line 509 
                                                             break;
    #line 510 
    usleep_range(1000UL,2000UL);
  }
  #line 512 
  if (! netif_running(adapter->netdev)) {
    #line 513 
    i = 0;
    #line 513 
    while (adapter->num_tx_queues > i) {
      #line 514 
      (adapter->tx_ring[i])->count = new_tx_count;
      #line 513 
      i ++;
    }
    #line 515 
    i = 0;
    #line 515 
    while (adapter->num_rx_queues > i) {
      #line 516 
      (adapter->rx_ring[i])->count = new_rx_count;
      #line 515 
      i ++;
    }
    #line 517 
    adapter->tx_ring_count = new_tx_count;
    #line 518 
    adapter->rx_ring_count = new_rx_count;
    #line 519 
    goto clear_reset;
  }
  #line 522 
  if (adapter->num_tx_queues > adapter->num_rx_queues) {
    #line 523 
    temp_ring = (struct igc_ring *)cif_vmalloc(array_size(4096UL,(unsigned long)adapter->num_tx_queues));
  }
  else {
    #line 526 
    temp_ring = (struct igc_ring *)cif_vmalloc(array_size(4096UL,(unsigned long)adapter->num_rx_queues));
  }
  #line 529 
  if (temp_ring == (struct igc_ring *)0) {
    #line 530 
    err = -12;
    #line 531 
    goto clear_reset;
  }
  #line 534 
  igc_down(adapter);
  #line 540 
  if ((int)adapter->tx_ring_count != (int)new_tx_count) {
    #line 541 
    i = 0;
    #line 541 
    while (adapter->num_tx_queues > i) {
      #line 542 
      memcpy((void *)(temp_ring + (unsigned long)i),(void *)adapter->tx_ring[i],4096UL);
      #line 545 
      (temp_ring + (unsigned long)i)->count = new_tx_count;
      #line 546 
      err = igc_setup_tx_resources(temp_ring + (unsigned long)i);
      #line 547 
      if (err != 0) {
        #line 548 
        while (i != 0) {
          #line 549 
          i --;
          #line 550 
          igc_free_tx_resources(temp_ring + (unsigned long)i);
        }
        #line 552 
        goto err_setup;
      }
      #line 541 
      i ++;
    }
    #line 556 
    i = 0;
    #line 556 
    while (adapter->num_tx_queues > i) {
      #line 557 
      igc_free_tx_resources(adapter->tx_ring[i]);
      #line 559 
      memcpy((void *)adapter->tx_ring[i],(void *)(temp_ring + (unsigned long)i),4096UL);
      #line 556 
      i ++;
    }
    #line 563 
    adapter->tx_ring_count = new_tx_count;
  }
  #line 566 
  if ((int)adapter->rx_ring_count != (int)new_rx_count) {
    #line 567 
    i = 0;
    #line 567 
    while (adapter->num_rx_queues > i) {
      #line 568 
      memcpy((void *)(temp_ring + (unsigned long)i),(void *)adapter->rx_ring[i],4096UL);
      #line 571 
      (temp_ring + (unsigned long)i)->count = new_rx_count;
      #line 572 
      err = igc_setup_rx_resources(temp_ring + (unsigned long)i);
      #line 573 
      if (err != 0) {
        #line 574 
        while (i != 0) {
          #line 575 
          i --;
          #line 576 
          igc_free_rx_resources(temp_ring + (unsigned long)i);
        }
        #line 578 
        goto err_setup;
      }
      #line 567 
      i ++;
    }
    #line 582 
    i = 0;
    #line 582 
    while (adapter->num_rx_queues > i) {
      #line 583 
      igc_free_rx_resources(adapter->rx_ring[i]);
      #line 585 
      memcpy((void *)adapter->rx_ring[i],(void *)(temp_ring + (unsigned long)i),4096UL);
      #line 582 
      i ++;
    }
    #line 589 
    adapter->rx_ring_count = new_rx_count;
  }
  #line 591 
  err_setup: 
             #line 591 
  ;
  #line 592 
  igc_up(adapter);
  #line 593 
  cif_vfree_0((void *)temp_ring);
  #line 594 
  clear_reset: 
               #line 594 
  ;
  #line 595 
  cif_clear_bit_0(1L,& adapter->state);
  #line 596 
  return err;
}

#line 599  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_ethtool.c"
static void igc_get_pauseparam(struct net_device *netdev, struct ethtool_pauseparam *pause)
{
  #line 602 
  struct igc_adapter *adapter = netdev_priv(netdev);
  #line 603 
  struct igc_hw *hw = & adapter->hw;
  #line 605 
  pause->autoneg = (unsigned int)((int)adapter->fc_autoneg != 0);
  #line 608 
  if (hw->fc.current_mode == (unsigned int)igc_fc_rx_pause) 
                                                            #line 609 
                                                            pause->rx_pause = 1U;
  else 
    #line 610 
    if (hw->fc.current_mode == (unsigned int)igc_fc_tx_pause) 
                                                              #line 611 
                                                              pause->tx_pause = 1U;
    else 
      #line 612 
      if (hw->fc.current_mode == (unsigned int)igc_fc_full) {
        #line 613 
        pause->rx_pause = 1U;
        #line 614 
        pause->tx_pause = 1U;
      }
  #line 616 
  return;
}

#line 618  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_ethtool.c"
static int igc_set_pauseparam(struct net_device *netdev, struct ethtool_pauseparam *pause)
{
  #line 621 
  struct igc_adapter *adapter = netdev_priv(netdev);
  #line 622 
  struct igc_hw *hw = & adapter->hw;
  #line 623 
  int retval = 0;
  #line 625 
  adapter->fc_autoneg = (_Bool)(pause->autoneg != 0U);
  #line 627 
  while (1) {
    #line 627 
    if (! ((int)test_and_set_bit(1L,& adapter->state) != 0)) 
                                                             #line 627 
                                                             break;
    #line 628 
    usleep_range(1000UL,2000UL);
  }
  #line 630 
  if ((int)adapter->fc_autoneg == 1) {
    #line 631 
    hw->fc.requested_mode = igc_fc_default;
    #line 632 
    if ((int)netif_running(adapter->netdev) != 0) {
      #line 633 
      igc_down(adapter);
      #line 634 
      igc_up(adapter);
    }
    else 
         #line 636 
         igc_reset(adapter);
  }
  else {
    #line 639 
    if (pause->rx_pause != 0U && pause->tx_pause != 0U) 
                                                        #line 640 
                                                        hw->fc.requested_mode = igc_fc_full;
    else 
      #line 641 
      if (pause->rx_pause != 0U && pause->tx_pause == 0U) 
                                                          #line 642 
                                                          hw->fc.requested_mode = igc_fc_rx_pause;
      else 
        #line 643 
        if (pause->rx_pause == 0U && pause->tx_pause != 0U) 
                                                            #line 644 
                                                            hw->fc.requested_mode = igc_fc_tx_pause;
        else 
          #line 645 
          if (pause->rx_pause == 0U && pause->tx_pause == 0U) 
                                                              #line 646 
                                                              hw->fc.requested_mode = igc_fc_none;
    #line 648 
    hw->fc.current_mode = hw->fc.requested_mode;
    #line 650 
    if (hw->phy.media_type == (unsigned int)igc_media_type_copper) 
                                                                   #line 650 
                                                                   retval = igc_force_mac_fc(hw); else 
                                                                    #line 651 
                                                                    retval = igc_setup_link(hw);
  }
  #line 654 
  cif_clear_bit_0(1L,& adapter->state);
  #line 655 
  return retval;
}

#line 658  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_ethtool.c"
static void igc_get_strings(struct net_device *netdev, u32 stringset, u8 *data)
{
  #line 662 
  int i;
  #line 660 
  struct igc_adapter *adapter = netdev_priv(netdev);
  #line 661 
  u8 *p = data;
  #line 664 
  switch (stringset) {
    #line 665 
    case (u32)0: 
                 #line 665 
    ;
    #line 666 
    memcpy((void *)data,(void *)(& igc_gstrings_test),160UL);
    #line 668 
    break;
    #line 669 
    case (u32)1: 
                 #line 669 
    ;
    #line 670 
    i = 0;
    #line 670 
    while ((unsigned int)i <= 41U) {
      #line 671 
      memcpy((void *)p,(void *)(& igc_gstrings_stats[i].stat_string),32UL);
      #line 673 
      p += 32U;
      #line 670 
      i ++;
    }
    #line 675 
    i = 0;
    #line 675 
    while ((unsigned int)i <= 8U) {
      #line 676 
      memcpy((void *)p,(void *)(& igc_gstrings_net_stats[i].stat_string),32UL);
      #line 678 
      p += 32U;
      #line 675 
      i ++;
    }
    #line 680 
    i = 0;
    #line 680 
    while (adapter->num_tx_queues > i) {
      #line 681 
      sprintf((char *)p,(char *)"tx_queue_%u_packets",i);
      #line 682 
      p += 32U;
      #line 683 
      sprintf((char *)p,(char *)"tx_queue_%u_bytes",i);
      #line 684 
      p += 32U;
      #line 685 
      sprintf((char *)p,(char *)"tx_queue_%u_restart",i);
      #line 686 
      p += 32U;
      #line 680 
      i ++;
    }
    #line 688 
    i = 0;
    #line 688 
    while (adapter->num_rx_queues > i) {
      #line 689 
      sprintf((char *)p,(char *)"rx_queue_%u_packets",i);
      #line 690 
      p += 32U;
      #line 691 
      sprintf((char *)p,(char *)"rx_queue_%u_bytes",i);
      #line 692 
      p += 32U;
      #line 693 
      sprintf((char *)p,(char *)"rx_queue_%u_drops",i);
      #line 694 
      p += 32U;
      #line 695 
      sprintf((char *)p,(char *)"rx_queue_%u_csum_err",i);
      #line 696 
      p += 32U;
      #line 697 
      sprintf((char *)p,(char *)"rx_queue_%u_alloc_failed",i);
      #line 698 
      p += 32U;
      #line 688 
      i ++;
    }
    #line 701 
    break;
    #line 702 
    case (u32)2: 
                 #line 702 
    ;
    #line 703 
    memcpy((void *)data,(void *)(& igc_priv_flags_strings),32UL);
    #line 705 
    break;
  }
  #line 707 
  return;
}

#line 709  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_ethtool.c"
static int igc_get_sset_count(struct net_device *netdev, int sset)
{
  #line 711 
  switch (sset) {
    #line 712 
    case 1: 
            #line 712 
    ;
    #line 713 
    ;
    #line 713 
    return (int)(((unsigned long)((struct igc_adapter *)netdev_priv(netdev))->num_rx_queues * (unsigned long)5U + (unsigned long)(((struct igc_adapter *)netdev_priv(netdev))->num_tx_queues * 3)) + (unsigned long)51U);
    #line 714 
    case 0: 
            #line 714 
    ;
    #line 715 
    return 5;
    #line 716 
    case 2: 
            #line 716 
    ;
    #line 717 
    return 1;
    #line 718 
    default: 
             #line 718 
    ;
    #line 719 
    return -524;
  }
}

#line 723  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_ethtool.c"
static void igc_get_ethtool_stats(struct net_device *netdev, struct ethtool_stats *stats, u64 *data)
{
  #line 728 
  unsigned int start;
  #line 729 
  struct igc_ring *ring;
  #line 730 
  int i;
  #line 730 
  int j;
  #line 731 
  char *p;
  #line 726 
  struct igc_adapter *adapter = netdev_priv(netdev);
  #line 727 
  struct rtnl_link_stats64 *net_stats = & adapter->stats64;
  #line 733 
  cif_spin_lock_stats64_lock_of_igc_adapter_0(& adapter->stats64_lock);
  #line 734 
  igc_update_stats(adapter);
  #line 736 
  i = 0;
  #line 736 
  while ((unsigned int)i <= 41U) {
    #line 737 
    p = (char *)adapter + (unsigned long)igc_gstrings_stats[i].stat_offset;
    #line 738 
    if (igc_gstrings_stats[i].sizeof_stat == 8) 
                                                #line 738 
                                                *(data + (unsigned long)i) = *((u64 *)p); else 
                                                                    #line 738 
                                                                    *(data + (unsigned long)i) = (unsigned long long)*((u32 *)p);
    #line 736 
    i ++;
  }
  #line 741 
  j = 0;
  #line 741 
  while ((unsigned int)j <= 8U) {
    #line 742 
    p = (char *)net_stats + (unsigned long)igc_gstrings_net_stats[j].stat_offset;
    #line 743 
    if (igc_gstrings_net_stats[j].sizeof_stat == 8) 
                                                    #line 743 
                                                    *(data + (unsigned long)i) = *((u64 *)p); else 
                                                                    #line 743 
                                                                    *(data + (unsigned long)i) = (unsigned long long)*((u32 *)p);
    #line 741 
    j ++;
    #line 741 
    i ++;
  }
  #line 746 
  j = 0;
  #line 746 
  while (adapter->num_tx_queues > j) {
    {
      #line 747 
      u64 restart2;
      #line 749 
      ring = adapter->tx_ring[j];
      #line 750 
      while (1) {
        #line 751 
        start = u64_stats_fetch_begin_irq(& ring->__anonCompField_igc_ring_195.__anonCompField___anonunion_3124_193.tx_syncp);
        #line 752 
        *(data + (unsigned long)i) = ring->__anonCompField_igc_ring_195.__anonCompField___anonunion_3124_193.tx_stats.packets;
        #line 753 
        *(data + ((unsigned long)i + (unsigned long)1U)) = ring->__anonCompField_igc_ring_195.__anonCompField___anonunion_3124_193.tx_stats.bytes;
        #line 754 
        *(data + ((unsigned long)i + (unsigned long)2U)) = ring->__anonCompField_igc_ring_195.__anonCompField___anonunion_3124_193.tx_stats.restart_queue;
        #line 755 
        if (! ((int)u64_stats_fetch_retry_irq(& ring->__anonCompField_igc_ring_195.__anonCompField___anonunion_3124_193.tx_syncp,
                                  start) != 0)) 
          #line 750 
          break;
      }
      #line 756 
      while (1) {
        #line 757 
        start = u64_stats_fetch_begin_irq(& ring->__anonCompField_igc_ring_195.__anonCompField___anonunion_3124_193.tx_syncp2);
        #line 758 
        restart2 = ring->__anonCompField_igc_ring_195.__anonCompField___anonunion_3124_193.tx_stats.restart_queue2;
        #line 759 
        if (! ((int)u64_stats_fetch_retry_irq(& ring->__anonCompField_igc_ring_195.__anonCompField___anonunion_3124_193.tx_syncp2,
                                  start) != 0)) 
          #line 756 
          break;
      }
      #line 760 
      *(data + ((unsigned long)i + (unsigned long)2U)) += restart2;
      #line 762 
      i += 3;
    }
    #line 746 
    j ++;
  }
  #line 764 
  j = 0;
  #line 764 
  while (adapter->num_rx_queues > j) {
    #line 765 
    ring = adapter->rx_ring[j];
    #line 766 
    while (1) {
      #line 767 
      start = u64_stats_fetch_begin_irq(& ring->__anonCompField_igc_ring_195.__anonCompField___anonunion_3124_194.rx_syncp);
      #line 768 
      *(data + (unsigned long)i) = ring->__anonCompField_igc_ring_195.__anonCompField___anonunion_3124_194.rx_stats.packets;
      #line 769 
      *(data + ((unsigned long)i + (unsigned long)1U)) = ring->__anonCompField_igc_ring_195.__anonCompField___anonunion_3124_194.rx_stats.bytes;
      #line 770 
      *(data + ((unsigned long)i + (unsigned long)2U)) = ring->__anonCompField_igc_ring_195.__anonCompField___anonunion_3124_194.rx_stats.drops;
      #line 771 
      *(data + ((unsigned long)i + (unsigned long)3U)) = ring->__anonCompField_igc_ring_195.__anonCompField___anonunion_3124_194.rx_stats.csum_err;
      #line 772 
      *(data + ((unsigned long)i + (unsigned long)4U)) = ring->__anonCompField_igc_ring_195.__anonCompField___anonunion_3124_194.rx_stats.alloc_failed;
      #line 773 
      if (! ((int)u64_stats_fetch_retry_irq(& ring->__anonCompField_igc_ring_195.__anonCompField___anonunion_3124_194.rx_syncp,
                                  start) != 0)) 
        #line 766 
        break;
    }
    #line 774 
    i = (int)((unsigned int)i + 5U);
    #line 764 
    j ++;
  }
  #line 776 
  cif_spin_unlock_stats64_lock_of_igc_adapter_0(& adapter->stats64_lock);
  #line 777 
  return;
}

#line 779  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_ethtool.c"
static int igc_get_coalesce(struct net_device *netdev, struct ethtool_coalesce *ec)
{
  #line 782 
  struct igc_adapter *adapter = netdev_priv(netdev);
  #line 784 
  if (adapter->rx_itr_setting <= 3U) 
                                     #line 785 
                                     ec->rx_coalesce_usecs = adapter->rx_itr_setting; else 
                                                                    #line 787 
                                                                    ec->rx_coalesce_usecs = adapter->rx_itr_setting >> 2;
  #line 789 
  if (((unsigned long)adapter->flags & 8UL) == 0UL) 
    #line 790 
    if (adapter->tx_itr_setting <= 3U) 
                                       #line 791 
                                       ec->tx_coalesce_usecs = adapter->tx_itr_setting; else 
                                                                    #line 793 
                                                                    ec->tx_coalesce_usecs = adapter->tx_itr_setting >> 2;
  #line 796 
  return 0;
}

#line 799  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_ethtool.c"
static int igc_set_coalesce(struct net_device *netdev, struct ethtool_coalesce *ec)
{
  #line 803 
  int i;
  #line 802 
  struct igc_adapter *adapter = netdev_priv(netdev);
  #line 805 
  if ((((((((((((((((((ec->rx_max_coalesced_frames != 0U || ec->rx_coalesce_usecs_irq != 0U) || ec->rx_max_coalesced_frames_irq != 0U) || ec->tx_max_coalesced_frames != 0U) || ec->tx_coalesce_usecs_irq != 0U) || ec->stats_block_coalesce_usecs != 0U) || ec->use_adaptive_rx_coalesce != 0U) || ec->use_adaptive_tx_coalesce != 0U) || ec->pkt_rate_low != 0U) || ec->rx_coalesce_usecs_low != 0U) || ec->rx_max_coalesced_frames_low != 0U) || ec->tx_coalesce_usecs_low != 0U) || ec->tx_max_coalesced_frames_low != 0U) || ec->pkt_rate_high != 0U) || ec->rx_coalesce_usecs_high != 0U) || ec->rx_max_coalesced_frames_high != 0U) || ec->tx_coalesce_usecs_high != 0U) || ec->tx_max_coalesced_frames_high != 0U) || ec->rate_sample_interval != 0U) 
    #line 824 
    return -524;
  #line 826 
  if ((ec->rx_coalesce_usecs > 10000U || ec->rx_coalesce_usecs + 4294967292U <= 5U) || ec->rx_coalesce_usecs == 2U) 
    #line 830 
    return -22;
  #line 832 
  if ((ec->tx_coalesce_usecs > 10000U || ec->tx_coalesce_usecs + 4294967292U <= 5U) || ec->tx_coalesce_usecs == 2U) 
    #line 836 
    return -22;
  #line 838 
  if (((unsigned long)adapter->flags & 8UL) != 0UL && ec->tx_coalesce_usecs != 0U) 
    #line 839 
    return -22;
  #line 842 
  if (ec->rx_coalesce_usecs == 0U) 
    #line 843 
    if (((unsigned long)adapter->flags & 16UL) != 0UL) 
                                                       #line 844 
                                                       adapter->flags &= 4294967279U;
  #line 848 
  if (ec->rx_coalesce_usecs + 4294967295U <= 2U) 
                                                 #line 849 
                                                 adapter->rx_itr_setting = ec->rx_coalesce_usecs; else 
                                                                    #line 851 
                                                                    adapter->rx_itr_setting = ec->rx_coalesce_usecs << 2;
  #line 854 
  if (((unsigned long)adapter->flags & 8UL) != 0UL) 
                                                    #line 855 
                                                    adapter->tx_itr_setting = adapter->rx_itr_setting;
  else 
    #line 856 
    if (ec->tx_coalesce_usecs + 4294967295U <= 2U) 
                                                   #line 857 
                                                   adapter->tx_itr_setting = ec->tx_coalesce_usecs; else 
                                                                    #line 859 
                                                                    adapter->tx_itr_setting = ec->tx_coalesce_usecs << 2;
  #line 861 
  i = 0;
  #line 861 
  while (adapter->num_q_vectors > (unsigned int)i) {
    {
      #line 862 
      struct igc_q_vector *q_vector = adapter->q_vector[i];
      #line 864 
      q_vector->tx.work_limit = adapter->tx_work_limit;
      #line 865 
      if (q_vector->rx.ring != (struct igc_ring *)0) 
                                                     #line 866 
                                                     q_vector->itr_val = (unsigned short)adapter->rx_itr_setting; else 
                                                                    #line 868 
                                                                    q_vector->itr_val = (unsigned short)adapter->tx_itr_setting;
      #line 869 
      if ((unsigned int)q_vector->itr_val + 65535U <= 2U) 
                                                          #line 870 
                                                          q_vector->itr_val = (unsigned short)648U;
      #line 871 
      q_vector->set_itr = (unsigned char)1U;
    }
    #line 861 
    i ++;
  }
  #line 874 
  return 0;
}

#line 878  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_ethtool.c"
static int igc_get_ethtool_nfc_entry(struct igc_adapter *adapter, struct ethtool_rxnfc *cmd)
{
  #line 887 
  struct igc_nfc_filter *tmp_0;
  #line 887 
  void *__mptr;
  #line 881 
  struct ethtool_rx_flow_spec *fsp = & cmd->fs;
  #line 882 
  struct igc_nfc_filter *rule = (struct igc_nfc_filter *)0;
  #line 885 
  cmd->data = 16ULL;
  {
    #line 887 
    struct hlist_node *____ptr = adapter->nfc_filter_list.first;
    #line 887 
    if (____ptr != (struct hlist_node *)0) {
      #line 887 
      __mptr = (void *)____ptr;
      #line 887 
      tmp_0 = ((struct igc_nfc_filter *)__mptr);
    }
    else 
         #line 887 
         tmp_0 = (struct igc_nfc_filter *)0;
    }
  #line 887 
  rule = tmp_0;
  #line 887 
  while (rule != (struct igc_nfc_filter *)0) {
    #line 887 
    void *__mptr_0;
    #line 887 
    struct igc_nfc_filter *tmp_3;
    #line 888 
    if (fsp->location <= (unsigned int)rule->sw_idx) 
                                                     #line 889 
                                                     break;
    {
      #line 887 
      struct hlist_node *____ptr_0 = rule->nfc_node.next;
      #line 887 
      if (____ptr_0 != (struct hlist_node *)0) {
        #line 887 
        __mptr_0 = (void *)____ptr_0;
        #line 887 
        tmp_3 = ((struct igc_nfc_filter *)__mptr_0);
      }
      else 
           #line 887 
           tmp_3 = (struct igc_nfc_filter *)0;
      }
    #line 887 
    rule = tmp_3;
  }
  #line 892 
  if (rule == (struct igc_nfc_filter *)0 || fsp->location != (unsigned int)rule->sw_idx) 
    #line 893 
    return -22;
  #line 895 
  if ((unsigned int)rule->filter.match_flags != 0U) {
    #line 896 
    fsp->flow_type = 18U;
    #line 897 
    fsp->ring_cookie = (unsigned long long)rule->action;
    #line 898 
    if (((int)rule->filter.match_flags & 1) != 0) {
      #line 899 
      fsp->h_u.ether_spec.h_proto = rule->filter.etype;
      #line 900 
      fsp->m_u.ether_spec.h_proto = (unsigned short)65535U;
    }
    #line 902 
    if (((int)rule->filter.match_flags & 2) != 0) {
      #line 903 
      fsp->flow_type |= 2147483648U;
      #line 904 
      fsp->h_ext.vlan_tci = rule->filter.vlan_tci;
      #line 905 
      fsp->m_ext.vlan_tci = (unsigned short)224U;
    }
    #line 907 
    if (((int)rule->filter.match_flags & 8) != 0) {
      #line 908 
      ether_addr_copy((u8 *)(& fsp->h_u.ether_spec.h_dest),(u8 *)(& rule->filter.dst_addr));
      #line 913 
      eth_broadcast_addr((u8 *)(& fsp->m_u.ether_spec.h_dest));
    }
    #line 915 
    if (((int)rule->filter.match_flags & 4) != 0) {
      #line 916 
      ether_addr_copy((u8 *)(& fsp->h_u.ether_spec.h_source),(u8 *)(& rule->filter.src_addr));
      #line 921 
      eth_broadcast_addr((u8 *)(& fsp->m_u.ether_spec.h_source));
    }
    #line 924 
    return 0;
  }
  #line 926 
  return -22;
}

#line 929  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_ethtool.c"
static int igc_get_ethtool_nfc_all(struct igc_adapter *adapter, struct ethtool_rxnfc *cmd, u32 *rule_locs)
{
  #line 939 
  struct igc_nfc_filter *tmp_0;
  #line 939 
  void *__mptr;
  #line 933 
  struct igc_nfc_filter *rule;
  #line 934 
  int cnt = 0;
  #line 937 
  cmd->data = 16ULL;
  {
    #line 939 
    struct hlist_node *____ptr = adapter->nfc_filter_list.first;
    #line 939 
    if (____ptr != (struct hlist_node *)0) {
      #line 939 
      __mptr = (void *)____ptr;
      #line 939 
      tmp_0 = ((struct igc_nfc_filter *)__mptr);
    }
    else 
         #line 939 
         tmp_0 = (struct igc_nfc_filter *)0;
    }
  #line 939 
  rule = tmp_0;
  #line 939 
  while (rule != (struct igc_nfc_filter *)0) {
    #line 939 
    void *__mptr_0;
    #line 939 
    struct igc_nfc_filter *tmp_3;
    #line 940 
    if (cmd->__anonCompField_ethtool_rxnfc_99.rule_cnt == (unsigned int)cnt) 
      #line 941 
      return -90;
    #line 942 
    *(rule_locs + (unsigned long)cnt) = (unsigned int)rule->sw_idx;
    #line 943 
    cnt ++;
    {
      #line 939 
      struct hlist_node *____ptr_0 = rule->nfc_node.next;
      #line 939 
      if (____ptr_0 != (struct hlist_node *)0) {
        #line 939 
        __mptr_0 = (void *)____ptr_0;
        #line 939 
        tmp_3 = ((struct igc_nfc_filter *)__mptr_0);
      }
      else 
           #line 939 
           tmp_3 = (struct igc_nfc_filter *)0;
      }
    #line 939 
    rule = tmp_3;
  }
  #line 946 
  cmd->__anonCompField_ethtool_rxnfc_99.rule_cnt = (unsigned int)cnt;
  #line 948 
  return 0;
}

#line 951  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_ethtool.c"
static int igc_get_rss_hash_opts(struct igc_adapter *adapter, struct ethtool_rxnfc *cmd)
{
  #line 954 
  cmd->data = 0ULL;
  #line 957 
  switch (cmd->flow_type) {
    #line 958 
    case (__u32)1: 
                   #line 958 
    ;
    #line 959 
    cmd->data |= 192ULL;
    #line 961 
    case (__u32)2: 
                   #line 961 
    ;
    #line 962 
    if (((unsigned long)adapter->flags & 64UL) != 0UL) 
                                                       #line 963 
                                                       cmd->data |= 192ULL;
    #line 965 
    case (__u32)3: 
                   #line 965 
    ;
    #line 967 
    case (__u32)4: 
                   #line 967 
    ;
    #line 969 
    case (__u32)9: 
                   #line 969 
    ;
    #line 971 
    case (__u32)10: 
                    #line 971 
    ;
    #line 973 
    case (__u32)16: 
                    #line 973 
    ;
    #line 974 
    cmd->data |= 48ULL;
    #line 975 
    break;
    #line 976 
    case (__u32)5: 
                   #line 976 
    ;
    #line 977 
    cmd->data |= 192ULL;
    #line 979 
    case (__u32)6: 
                   #line 979 
    ;
    #line 980 
    if (((unsigned long)adapter->flags & 128UL) != 0UL) 
                                                        #line 981 
                                                        cmd->data |= 192ULL;
    #line 983 
    case (__u32)7: 
                   #line 983 
    ;
    #line 985 
    case (__u32)8: 
                   #line 985 
    ;
    #line 987 
    case (__u32)11: 
                    #line 987 
    ;
    #line 989 
    case (__u32)12: 
                    #line 989 
    ;
    #line 991 
    case (__u32)17: 
                    #line 991 
    ;
    #line 992 
    cmd->data |= 48ULL;
    #line 993 
    break;
    #line 994 
    default: 
             #line 994 
    ;
    #line 995 
    return -22;
  }
  #line 998 
  return 0;
}

#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_ethtool.c"
static int igc_get_rxnfc(struct net_device *dev, struct ethtool_rxnfc *cmd, u32 *rule_locs)
{
  #line 1004 
  struct igc_adapter *adapter = netdev_priv(dev);
  #line 1005 
  int ret = -95;
  #line 1007 
  switch (cmd->cmd) {
    #line 1008 
    case (__u32)45: 
                    #line 1008 
    ;
    #line 1009 
    cmd->data = (unsigned long long)adapter->num_rx_queues;
    #line 1010 
    ret = 0;
    #line 1011 
    break;
    #line 1012 
    case (__u32)46: 
                    #line 1012 
    ;
    #line 1013 
    cmd->__anonCompField_ethtool_rxnfc_99.rule_cnt = adapter->nfc_filter_count;
    #line 1014 
    ret = 0;
    #line 1015 
    break;
    #line 1016 
    case (__u32)47: 
                    #line 1016 
    ;
    #line 1017 
    ret = igc_get_ethtool_nfc_entry(adapter,cmd);
    #line 1018 
    break;
    #line 1019 
    case (__u32)48: 
                    #line 1019 
    ;
    #line 1020 
    ret = igc_get_ethtool_nfc_all(adapter,cmd,rule_locs);
    #line 1021 
    break;
    #line 1022 
    case (__u32)41: 
                    #line 1022 
    ;
    #line 1023 
    ret = igc_get_rss_hash_opts(adapter,cmd);
    #line 1024 
    break;
    #line 1025 
    default: 
             #line 1025 
    ;
    #line 1026 
    break;
  }
  #line 1029 
  return ret;
}

#line 1034  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_ethtool.c"
static int igc_set_rss_hash_opt(struct igc_adapter *adapter, struct ethtool_rxnfc *nfc)
{
  #line 1037 
  u32 flags = adapter->flags;
  #line 1042 
  if ((nfc->data & 18446744073709551375ULL) != 0ULL) 
                                                     #line 1044 
                                                     return -22;
  #line 1046 
  switch (nfc->flow_type) {
    #line 1047 
    case (__u32)1: 
                   #line 1047 
    ;
    #line 1048 
    case (__u32)5: 
                   #line 1048 
    ;
    #line 1049 
    if ((((nfc->data & 16ULL) == 0ULL || (nfc->data & 32ULL) == 0ULL) || (nfc->data & 64ULL) == 0ULL) || (nfc->data & 128ULL) == 0ULL) 
      #line 1053 
      return -22;
    #line 1054 
    break;
    #line 1055 
    case (__u32)2: 
                   #line 1055 
    ;
    #line 1056 
    if ((nfc->data & 16ULL) == 0ULL || (nfc->data & 32ULL) == 0ULL) 
                                                                    #line 1058 
                                                                    return -22;
    #line 1059 
    switch (nfc->data & 192ULL) {
      #line 1060 
      case (unsigned long long)0: 
                                  #line 1060 
      ;
      #line 1061 
      flags &= 4294967231U;
      #line 1062 
      break;
      #line 1063 
      case (unsigned long long)192: 
                                    #line 1063 
      ;
      #line 1064 
      flags |= 64U;
      #line 1065 
      break;
      #line 1066 
      default: 
               #line 1066 
      ;
      #line 1067 
      return -22;
    }
    #line 1069 
    break;
    #line 1070 
    case (__u32)6: 
                   #line 1070 
    ;
    #line 1071 
    if ((nfc->data & 16ULL) == 0ULL || (nfc->data & 32ULL) == 0ULL) 
                                                                    #line 1073 
                                                                    return -22;
    #line 1074 
    switch (nfc->data & 192ULL) {
      #line 1075 
      case (unsigned long long)0: 
                                  #line 1075 
      ;
      #line 1076 
      flags &= 4294967167U;
      #line 1077 
      break;
      #line 1078 
      case (unsigned long long)192: 
                                    #line 1078 
      ;
      #line 1079 
      flags |= 128U;
      #line 1080 
      break;
      #line 1081 
      default: 
               #line 1081 
      ;
      #line 1082 
      return -22;
    }
    #line 1084 
    break;
    #line 1085 
    case (__u32)4: 
                   #line 1085 
    ;
    #line 1086 
    case (__u32)9: 
                   #line 1086 
    ;
    #line 1087 
    case (__u32)10: 
                    #line 1087 
    ;
    #line 1088 
    case (__u32)3: 
                   #line 1088 
    ;
    #line 1089 
    case (__u32)8: 
                   #line 1089 
    ;
    #line 1090 
    case (__u32)11: 
                    #line 1090 
    ;
    #line 1091 
    case (__u32)12: 
                    #line 1091 
    ;
    #line 1092 
    case (__u32)7: 
                   #line 1092 
    ;
    #line 1093 
    if ((((nfc->data & 16ULL) == 0ULL || (nfc->data & 32ULL) == 0ULL) || (nfc->data & 64ULL) != 0ULL) || (nfc->data & 128ULL) != 0ULL) 
      #line 1097 
      return -22;
    #line 1098 
    break;
    #line 1099 
    default: 
             #line 1099 
    ;
    #line 1100 
    return -22;
  }
  #line 1104 
  if (adapter->flags != flags) {
    #line 1105 
    struct igc_hw *hw = & adapter->hw;
    #line 1106 
    u32 mrqc = igc_rd32(hw,22552U);
    #line 1108 
    if (((unsigned long)flags & 192UL) != 0UL && ((unsigned long)adapter->flags & 192UL) == 0UL) 
      #line 1110 
      _dev_err(& (adapter->pdev)->dev,(char *)"enabling UDP RSS: fragmented packets may arrive out of order to the stack above\n");
    #line 1113 
    adapter->flags = flags;
    #line 1116 
    mrqc |= 3342336U;
    #line 1121 
    mrqc &= 4282384383U;
    #line 1124 
    if (((unsigned long)flags & 64UL) != 0UL) 
                                              #line 1125 
                                              mrqc |= 4194304U;
    #line 1127 
    if (((unsigned long)flags & 128UL) != 0UL) 
                                               #line 1128 
                                               mrqc |= 8388608U;
    {
      #line 1131 
      union __anonunion___u_3953 __u;
      #line 1130 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
      #line 1130 
      u8 *hw_addr = (__u.__val);
      #line 1130 
      writel(mrqc,(void *)(hw_addr + 22552U));
    }
  }
  #line 1133 
  return 0;
}

#line 1136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_ethtool.c"
static int igc_rxnfc_write_etype_filter(struct igc_adapter *adapter, struct igc_nfc_filter *input)
{
  #line 1140 
  u8 i;
  #line 1141 
  u32 etqf;
  #line 1142 
  u16 etype;
  #line 1139 
  struct igc_hw *hw = & adapter->hw;
  #line 1145 
  i = (unsigned char)0U;
  #line 1145 
  while ((unsigned int)i <= 2U) {
    #line 1146 
    if (! adapter->etype_bitmap[(int)i]) 
                                         #line 1147 
                                         break;
    #line 1145 
    i = (u8)((int)i + 1);
  }
  #line 1149 
  if ((unsigned int)i == 3U) {
    #line 1150 
    _dev_err(& (adapter->pdev)->dev,(char *)"ethtool -N: etype filters are all used.\n");
    #line 1151 
    return -22;
  }
  #line 1154 
  adapter->etype_bitmap[(int)i] = (_Bool)1;
  #line 1156 
  etqf = igc_rd32(hw,(unsigned int)(((int)i + 5932) * 4));
  #line 1157 
  etype = __builtin_bswap16((unsigned short)((int)input->filter.etype));
  #line 1159 
  etqf |= 67108864U;
  #line 1160 
  etqf &= 4294901760U;
  #line 1161 
  etqf = (unsigned int)etype | etqf;
  #line 1163 
  etqf &= 4294508543U;
  #line 1164 
  etqf = ((unsigned int)((int)input->action << 16) & 458752U) | etqf;
  #line 1166 
  etqf |= 2147483648U;
  {
    #line 1169 
    union __anonunion___u_3955 __u;
    #line 1168 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 1168 
    u8 *hw_addr = (__u.__val);
    #line 1168 
    writel(etqf,(void *)(hw_addr + (unsigned long)(((int)i + 5932) * 4)));
  }
  #line 1170 
  input->etype_reg_index = (unsigned short)i;
  #line 1172 
  return 0;
}

#line 1175  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_ethtool.c"
static int igc_rxnfc_write_vlan_prio_filter(struct igc_adapter *adapter, struct igc_nfc_filter *input)
{
  #line 1179 
  u8 vlan_priority;
  #line 1180 
  u16 queue_index;
  #line 1181 
  u32 vlapqf;
  #line 1178 
  struct igc_hw *hw = & adapter->hw;
  #line 1183 
  vlapqf = igc_rd32(hw,21936U);
  #line 1184 
  vlan_priority = (unsigned char)((int)__builtin_bswap16((unsigned short)((int)input->filter.vlan_tci)) >> 13);
  #line 1186 
  queue_index = (unsigned short)((unsigned int)((unsigned short)(vlapqf >> (int)vlan_priority * 4)) & 3U);
  #line 1189 
  if (((unsigned int)(1 << ((int)vlan_priority * 4 + 3)) & vlapqf) != 0U && (int)input->action != (int)queue_index) {
    #line 1191 
    _dev_err(& (adapter->pdev)->dev,(char *)"ethtool rxnfc set vlan prio filter failed.\n");
    #line 1192 
    return -17;
  }
  #line 1195 
  vlapqf = (unsigned int)(1 << ((int)vlan_priority * 4 + 3)) | vlapqf;
  #line 1196 
  vlapqf = (unsigned int)((int)input->action << (int)vlan_priority * 4) | vlapqf;
  {
    #line 1199 
    union __anonunion___u_3957 __u;
    #line 1198 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 1198 
    u8 *hw_addr = (__u.__val);
    #line 1198 
    writel(vlapqf,(void *)(hw_addr + 21936U));
  }
  #line 1200 
  return 0;
}

#line 1203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_ethtool.c"
int igc_add_filter(struct igc_adapter *adapter, struct igc_nfc_filter *input)
{
  #line 1205 
  struct igc_hw *hw = & adapter->hw;
  #line 1206 
  int err = -22;
  #line 1208 
  if (hw->mac.type == (unsigned int)igc_i225 && ((int)input->filter.match_flags & -5) == 0) {
    #line 1210 
    _dev_err(& (adapter->pdev)->dev,(char *)"i225 doesn\'t support flow classification rules specifying only source addresses.\n");
    #line 1212 
    return -95;
  }
  #line 1215 
  if (((int)input->filter.match_flags & 1) != 0) {
    #line 1216 
    err = igc_rxnfc_write_etype_filter(adapter,input);
    #line 1217 
    if (err != 0) 
                  #line 1218 
                  return err;
  }
  #line 1221 
  if (((int)input->filter.match_flags & 8) != 0) {
    #line 1225 
    int __UNIQUE_ID___x451;
    #line 1225 
    int tmp;
    #line 1222 
    err = igc_add_mac_steering_filter(adapter,(u8 *)(& input->filter.dst_addr),(unsigned char)((int)((unsigned char)input->action)),(unsigned char)0);
    {
      #line 1225 
      __UNIQUE_ID___x451 = err;
      #line 1225 
      int __UNIQUE_ID___y452 = 0;
      #line 1225 
      if (__UNIQUE_ID___x451 < __UNIQUE_ID___y452) 
                                                   #line 1225 
                                                   tmp = __UNIQUE_ID___x451; else 
                                                                    #line 1225 
                                                                    tmp = __UNIQUE_ID___y452;
      }
    #line 1225 
    err = tmp;
    #line 1226 
    if (err != 0) 
                  #line 1227 
                  return err;
  }
  #line 1230 
  if (((int)input->filter.match_flags & 4) != 0) {
    #line 1235 
    int __UNIQUE_ID___x453;
    #line 1235 
    int tmp_1;
    #line 1231 
    err = igc_add_mac_steering_filter(adapter,(u8 *)(& input->filter.src_addr),(unsigned char)((int)((unsigned char)input->action)),(unsigned char)4);
    {
      #line 1235 
      __UNIQUE_ID___x453 = err;
      #line 1235 
      int __UNIQUE_ID___y454 = 0;
      #line 1235 
      if (__UNIQUE_ID___x453 < __UNIQUE_ID___y454) 
                                                   #line 1235 
                                                   tmp_1 = __UNIQUE_ID___x453; else 
                                                                    #line 1235 
                                                                    tmp_1 = __UNIQUE_ID___y454;
      }
    #line 1235 
    err = tmp_1;
    #line 1236 
    if (err != 0) 
                  #line 1237 
                  return err;
  }
  #line 1240 
  if (((int)input->filter.match_flags & 2) != 0) 
                                                 #line 1241 
                                                 err = igc_rxnfc_write_vlan_prio_filter(adapter,input);
  #line 1243 
  return err;
}

#line 1246  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_ethtool.c"
static void igc_clear_etype_filter_regs(struct igc_adapter *adapter, u16 reg_index)
{
  #line 1249 
  struct igc_hw *hw = & adapter->hw;
  #line 1250 
  u32 etqf = igc_rd32(hw,(unsigned int)(((int)reg_index + 5932) * 4));
  #line 1252 
  etqf &= 2147483647U;
  #line 1253 
  etqf &= 4294508543U;
  #line 1254 
  etqf &= 4227858431U;
  {
    #line 1257 
    union __anonunion___u_3959 __u;
    #line 1256 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 1256 
    u8 *hw_addr = (__u.__val);
    #line 1256 
    writel(etqf,(void *)(hw_addr + (unsigned long)(((int)reg_index + 5932) * 4)));
  }
  #line 1258 
  adapter->etype_bitmap[(int)reg_index] = (_Bool)0;
  #line 1259 
  return;
}

#line 1261  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_ethtool.c"
static void igc_clear_vlan_prio_filter(struct igc_adapter *adapter, u16 vlan_tci)
{
  #line 1265 
  u8 vlan_priority;
  #line 1266 
  u32 vlapqf;
  #line 1264 
  struct igc_hw *hw = & adapter->hw;
  #line 1268 
  vlan_priority = (unsigned char)((int)vlan_tci >> 13);
  #line 1270 
  vlapqf = igc_rd32(hw,21936U);
  #line 1271 
  vlapqf = (unsigned int)(~ (1 << ((int)vlan_priority * 4 + 3))) & vlapqf;
  #line 1272 
  vlapqf = (unsigned int)(~ (3 << (int)vlan_priority * 4)) & vlapqf;
  {
    #line 1276 
    union __anonunion___u_3961 __u;
    #line 1275 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 1275 
    u8 *hw_addr = (__u.__val);
    #line 1275 
    writel(vlapqf,(void *)(hw_addr + 21936U));
  }
  #line 1277 
  return;
}

#line 1278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_ethtool.c"
int igc_erase_filter(struct igc_adapter *adapter, struct igc_nfc_filter *input)
{
  #line 1280 
  if (((int)input->filter.match_flags & 1) != 0) 
                                                 #line 1281 
                                                 igc_clear_etype_filter_regs(adapter,(unsigned short)((int)input->etype_reg_index));
  #line 1284 
  if (((int)input->filter.match_flags & 2) != 0) {
    #line 1285 
    ;
    #line 1285 
    igc_clear_vlan_prio_filter(adapter,(unsigned short)((int)__builtin_bswap16((unsigned short)((int)input->filter.vlan_tci))));
  }
  #line 1288 
  if (((int)input->filter.match_flags & 4) != 0) 
                                                 #line 1289 
                                                 igc_del_mac_steering_filter(adapter,(u8 *)(& input->filter.src_addr),(unsigned char)((int)((unsigned char)input->action)),(unsigned char)4);
  #line 1293 
  if (((int)input->filter.match_flags & 8) != 0) 
                                                 #line 1294 
                                                 igc_del_mac_steering_filter(adapter,(u8 *)(& input->filter.dst_addr),(unsigned char)((int)((unsigned char)input->action)),(unsigned char)0);
  #line 1297 
  return 0;
}

#line 1300  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_ethtool.c"
static int igc_update_ethtool_nfc_entry(struct igc_adapter *adapter, struct igc_nfc_filter *input, u16 sw_idx)
{
  #line 1310 
  void *__mptr;
  #line 1310 
  struct igc_nfc_filter *tmp_0;
  #line 1304 
  struct igc_nfc_filter *rule;
  #line 1304 
  struct igc_nfc_filter *parent;
  #line 1305 
  int err = -22;
  #line 1307 
  parent = (struct igc_nfc_filter *)0;
  #line 1308 
  rule = (struct igc_nfc_filter *)0;
  {
    #line 1310 
    struct hlist_node *____ptr = adapter->nfc_filter_list.first;
    #line 1310 
    if (____ptr != (struct hlist_node *)0) {
      #line 1310 
      __mptr = (void *)____ptr;
      #line 1310 
      tmp_0 = ((struct igc_nfc_filter *)__mptr);
    }
    else 
         #line 1310 
         tmp_0 = (struct igc_nfc_filter *)0;
    }
  #line 1310 
  rule = tmp_0;
  #line 1310 
  while (rule != (struct igc_nfc_filter *)0) {
    #line 1310 
    void *__mptr_0;
    #line 1310 
    struct igc_nfc_filter *tmp_3;
    #line 1312 
    if ((int)rule->sw_idx >= (int)sw_idx) 
                                          #line 1313 
                                          break;
    #line 1314 
    parent = rule;
    {
      #line 1310 
      struct hlist_node *____ptr_0 = rule->nfc_node.next;
      #line 1310 
      if (____ptr_0 != (struct hlist_node *)0) {
        #line 1310 
        __mptr_0 = (void *)____ptr_0;
        #line 1310 
        tmp_3 = ((struct igc_nfc_filter *)__mptr_0);
      }
      else 
           #line 1310 
           tmp_3 = (struct igc_nfc_filter *)0;
      }
    #line 1310 
    rule = tmp_3;
  }
  #line 1318 
  if (rule != (struct igc_nfc_filter *)0 && (int)rule->sw_idx == (int)sw_idx) {
    #line 1319 
    if (input == (struct igc_nfc_filter *)0) 
                                             #line 1320 
                                             err = igc_erase_filter(adapter,rule);
    #line 1322 
    hlist_del_0(& rule->nfc_node);
    #line 1323 
    kfree((void *)rule);
    #line 1324 
    (adapter->nfc_filter_count) --;
  }
  #line 1330 
  if (input == (struct igc_nfc_filter *)0) 
                                           #line 1331 
                                           return err;
  #line 1334 
  INIT_HLIST_NODE(& input->nfc_node);
  #line 1337 
  if (parent != (struct igc_nfc_filter *)0) 
                                            #line 1338 
                                            hlist_add_behind(& input->nfc_node,& parent->nfc_node); else 
                                                                    #line 1340 
                                                                    hlist_add_head(& input->nfc_node,& adapter->nfc_filter_list);
  #line 1343 
  (adapter->nfc_filter_count) ++;
  #line 1345 
  return 0;
}

#line 1348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_ethtool.c"
static int igc_add_ethtool_nfc_entry(struct igc_adapter *adapter, struct ethtool_rxnfc *cmd)
{
  #line 1415 
  struct igc_nfc_filter *tmp_3;
  #line 1415 
  void *__mptr;
  #line 1354 
  struct igc_nfc_filter *input;
  #line 1354 
  struct igc_nfc_filter *rule;
  #line 1351 
  struct net_device *netdev = adapter->netdev;
  #line 1352 
  struct ethtool_rx_flow_spec *fsp = & cmd->fs;
  #line 1355 
  int err = 0;
  #line 1357 
  if ((netdev->hw_features & 137438953472ULL) == 0ULL) 
                                                       #line 1358 
                                                       return -95;
  #line 1363 
  if (fsp->ring_cookie == 18446744073709551615ULL || fsp->ring_cookie >= (unsigned long long)adapter->num_rx_queues) {
    #line 1365 
    _dev_err(& (adapter->pdev)->dev,(char *)"ethtool -N: The specified action is invalid\n");
    #line 1366 
    return -22;
  }
  #line 1370 
  if (fsp->location > 15U) {
    #line 1371 
    _dev_err(& (adapter->pdev)->dev,(char *)"Location out of range\n");
    #line 1372 
    return -22;
  }
  #line 1375 
  if ((fsp->flow_type & 2147483647U) != 18U) 
                                             #line 1376 
                                             return -22;
  #line 1378 
  input = (struct igc_nfc_filter *)kzalloc_0(56UL,3264U);
  #line 1379 
  if (input == (struct igc_nfc_filter *)0) 
                                           #line 1380 
                                           return -12;
  #line 1382 
  if ((unsigned int)fsp->m_u.ether_spec.h_proto == 65535U) {
    #line 1383 
    input->filter.etype = fsp->h_u.ether_spec.h_proto;
    #line 1384 
    input->filter.match_flags = (unsigned char)1U;
  }
  #line 1388 
  if ((int)is_broadcast_ether_addr((u8 *)(& fsp->m_u.ether_spec.h_source)) != 0) {
    #line 1389 
    input->filter.match_flags = (unsigned char)((unsigned int)input->filter.match_flags | 4U);
    #line 1390 
    ether_addr_copy((u8 *)(& input->filter.src_addr),(u8 *)(& fsp->h_u.ether_spec.h_source));
  }
  #line 1395 
  if ((int)is_broadcast_ether_addr((u8 *)(& fsp->m_u.ether_spec.h_dest)) != 0) {
    #line 1396 
    input->filter.match_flags = (unsigned char)((unsigned int)input->filter.match_flags | 8U);
    #line 1397 
    ether_addr_copy((u8 *)(& input->filter.dst_addr),(u8 *)(& fsp->h_u.ether_spec.h_dest));
  }
  #line 1401 
  if ((fsp->flow_type & 2147483648U) != 0U && (unsigned int)fsp->m_ext.vlan_tci != 0U) {
    #line 1402 
    if ((unsigned int)fsp->m_ext.vlan_tci != 224U) {
      #line 1403 
      err = -22;
      #line 1404 
      goto err_out;
    }
    #line 1406 
    input->filter.vlan_tci = fsp->h_ext.vlan_tci;
    #line 1407 
    input->filter.match_flags = (unsigned char)((unsigned int)input->filter.match_flags | 2U);
  }
  #line 1410 
  input->action = (unsigned short)fsp->ring_cookie;
  #line 1411 
  input->sw_idx = (unsigned short)fsp->location;
  #line 1413 
  cif_spin_lock_nfc_lock_of_igc_adapter_0(& adapter->nfc_lock);
  {
    #line 1415 
    struct hlist_node *____ptr = adapter->nfc_filter_list.first;
    #line 1415 
    if (____ptr != (struct hlist_node *)0) {
      #line 1415 
      __mptr = (void *)____ptr;
      #line 1415 
      tmp_3 = ((struct igc_nfc_filter *)__mptr);
    }
    else 
         #line 1415 
         tmp_3 = (struct igc_nfc_filter *)0;
    }
  #line 1415 
  rule = tmp_3;
  #line 1415 
  while (rule != (struct igc_nfc_filter *)0) {
    #line 1415 
    void *__mptr_0;
    #line 1415 
    struct igc_nfc_filter *tmp_6;
    #line 1416 
    if (memcmp((void *)(& input->filter),(void *)(& rule->filter),18UL) == 0) {
      #line 1418 
      err = -17;
      #line 1419 
      _dev_err(& (adapter->pdev)->dev,(char *)"ethtool: this filter is already set\n");
      #line 1421 
      goto err_out_w_lock;
    }
    {
      #line 1415 
      struct hlist_node *____ptr_0 = rule->nfc_node.next;
      #line 1415 
      if (____ptr_0 != (struct hlist_node *)0) {
        #line 1415 
        __mptr_0 = (void *)____ptr_0;
        #line 1415 
        tmp_6 = ((struct igc_nfc_filter *)__mptr_0);
      }
      else 
           #line 1415 
           tmp_6 = (struct igc_nfc_filter *)0;
      }
    #line 1415 
    rule = tmp_6;
  }
  #line 1425 
  err = igc_add_filter(adapter,input);
  #line 1426 
  if (err != 0) 
                #line 1427 
                goto err_out_w_lock;
  #line 1429 
  igc_update_ethtool_nfc_entry(adapter,input,(unsigned short)((int)input->sw_idx));
  #line 1431 
  cif_spin_unlock_nfc_lock_of_igc_adapter_0(& adapter->nfc_lock);
  #line 1432 
  return 0;
  #line 1434 
  err_out_w_lock: 
                  #line 1434 
  ;
  #line 1435 
  cif_spin_unlock_nfc_lock_of_igc_adapter_0(& adapter->nfc_lock);
  #line 1436 
  err_out: 
           #line 1436 
  ;
  #line 1437 
  kfree((void *)input);
  #line 1438 
  return err;
}

#line 1441  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_ethtool.c"
static int igc_del_ethtool_nfc_entry(struct igc_adapter *adapter, struct ethtool_rxnfc *cmd)
{
  #line 1446 
  int err;
  #line 1444 
  struct ethtool_rx_flow_spec *fsp = & cmd->fs;
  #line 1448 
  cif_spin_lock_nfc_lock_of_igc_adapter_0(& adapter->nfc_lock);
  #line 1449 
  err = igc_update_ethtool_nfc_entry(adapter,(struct igc_nfc_filter *)0,(unsigned short)((int)((unsigned short)fsp->location)));
  #line 1450 
  cif_spin_unlock_nfc_lock_of_igc_adapter_0(& adapter->nfc_lock);
  #line 1452 
  return err;
}

#line 1455  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_ethtool.c"
static int igc_set_rxnfc(struct net_device *dev, struct ethtool_rxnfc *cmd)
{
  #line 1457 
  struct igc_adapter *adapter = netdev_priv(dev);
  #line 1458 
  int ret = -95;
  #line 1460 
  switch (cmd->cmd) {
    #line 1461 
    case (__u32)42: 
                    #line 1461 
    ;
    #line 1462 
    ret = igc_set_rss_hash_opt(adapter,cmd);
    #line 1463 
    break;
    #line 1464 
    case (__u32)50: 
                    #line 1464 
    ;
    #line 1465 
    ret = igc_add_ethtool_nfc_entry(adapter,cmd);
    #line 1466 
    break;
    #line 1467 
    case (__u32)49: 
                    #line 1467 
    ;
    #line 1468 
    ret = igc_del_ethtool_nfc_entry(adapter,cmd);
    #line 1469 
    default: 
             #line 1469 
    ;
    #line 1470 
    break;
  }
  #line 1473 
  return ret;
}

#line 1476  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_ethtool.c"
void igc_write_rss_indir_tbl(struct igc_adapter *adapter)
{
  #line 1478 
  struct igc_hw *hw = & adapter->hw;
  #line 1479 
  u32 reg = 23552U;
  #line 1480 
  u32 shift = 0U;
  #line 1481 
  int i = 0;
  #line 1483 
  while (i <= 127) {
    #line 1485 
    int j;
    #line 1484 
    u32 val = 0U;
    #line 1487 
    j = 3;
    #line 1487 
    while (j >= 0) {
      #line 1488 
      val <<= 8;
      #line 1489 
      val = (unsigned int)adapter->rss_indir_tbl[i + j] | val;
      #line 1487 
      j --;
    }
    {
      #line 1493 
      union __anonunion___u_3963 __u;
      #line 1492 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
      #line 1492 
      u8 *hw_addr = (__u.__val);
      #line 1492 
      writel(val << shift,(void *)(hw_addr + (unsigned long)reg));
    }
    #line 1493 
    reg += 4U;
    #line 1494 
    i += 4;
  }
  #line 1496 
  return;
}

#line 1498  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_ethtool.c"
static u32 igc_get_rxfh_indir_size(struct net_device *netdev)
{
  #line 1500 
  return 128U;
}

#line 1503  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_ethtool.c"
static int igc_get_rxfh(struct net_device *netdev, u32 *indir, u8 *key, u8 *hfunc)
{
  #line 1507 
  int i;
  #line 1506 
  struct igc_adapter *adapter = netdev_priv(netdev);
  #line 1509 
  if (hfunc != (u8 *)0U) 
                         #line 1510 
                         *hfunc = (unsigned char)1U;
  #line 1511 
  if (indir == (u32 *)0U) 
                          #line 1512 
                          return 0;
  #line 1513 
  i = 0;
  #line 1513 
  while (i <= 127) {
    #line 1514 
    *(indir + (unsigned long)i) = (unsigned int)adapter->rss_indir_tbl[i];
    #line 1513 
    i ++;
  }
  #line 1516 
  return 0;
}

#line 1519  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_ethtool.c"
static int igc_set_rxfh(struct net_device *netdev, u32 *indir, u8 *key, u8 hfunc)
{
  #line 1523 
  u32 num_queues;
  #line 1524 
  int i;
  #line 1522 
  struct igc_adapter *adapter = netdev_priv(netdev);
  #line 1527 
  if (key != (u8 *)0U || (unsigned int)hfunc > 1U) 
                                                   #line 1529 
                                                   return -95;
  #line 1530 
  if (indir == (u32 *)0U) 
                          #line 1531 
                          return 0;
  #line 1533 
  num_queues = adapter->rss_queues;
  #line 1536 
  i = 0;
  #line 1536 
  while (i <= 127) {
    #line 1537 
    if (*(indir + (unsigned long)i) >= num_queues) 
                                                   #line 1538 
                                                   return -22;
    #line 1536 
    i ++;
  }
  #line 1540 
  i = 0;
  #line 1540 
  while (i <= 127) {
    #line 1541 
    adapter->rss_indir_tbl[i] = (unsigned char)*(indir + (unsigned long)i);
    #line 1540 
    i ++;
  }
  #line 1543 
  igc_write_rss_indir_tbl(adapter);
  #line 1545 
  return 0;
}

#line 1548  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_ethtool.c"
static unsigned int igc_max_channels(struct igc_adapter *adapter)
{
  #line 1550 
  return igc_get_max_rss_queues(adapter);
}

#line 1553  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_ethtool.c"
static void igc_get_channels(struct net_device *netdev, struct ethtool_channels *ch)
{
  #line 1556 
  struct igc_adapter *adapter = netdev_priv(netdev);
  #line 1559 
  ch->max_combined = igc_max_channels(adapter);
  #line 1562 
  if (((unsigned long)adapter->flags & 8192UL) != 0UL) {
    #line 1563 
    ch->max_other = 1U;
    #line 1564 
    ch->other_count = 1U;
  }
  #line 1567 
  ch->combined_count = adapter->rss_queues;
  #line 1568 
  return;
}

#line 1570  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_ethtool.c"
static int igc_set_channels(struct net_device *netdev, struct ethtool_channels *ch)
{
  #line 1573 
  struct igc_adapter *adapter = netdev_priv(netdev);
  #line 1574 
  unsigned int count = ch->combined_count;
  #line 1575 
  unsigned int max_combined = 0U;
  #line 1578 
  if ((count == 0U || ch->rx_count != 0U) || ch->tx_count != 0U) 
                                                                 #line 1579 
                                                                 return -22;
  #line 1582 
  if (ch->other_count != 1U) 
                             #line 1583 
                             return -22;
  #line 1586 
  max_combined = igc_max_channels(adapter);
  #line 1587 
  if (count > max_combined) 
                            #line 1588 
                            return -22;
  #line 1590 
  if (adapter->rss_queues != count) {
    #line 1591 
    adapter->rss_queues = count;
    #line 1592 
    igc_set_flag_queue_pairs(adapter,max_combined);
    #line 1597 
    return igc_reinit_queues(adapter);
  }
  #line 1600 
  return 0;
}

#line 1603  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_ethtool.c"
static u32 igc_get_priv_flags(struct net_device *netdev)
{
  #line 1605 
  struct igc_adapter *adapter = netdev_priv(netdev);
  #line 1606 
  u32 priv_flags = 0U;
  #line 1608 
  if (((unsigned long)adapter->flags & 65536UL) != 0UL) 
                                                        #line 1609 
                                                        priv_flags |= 1U;
  #line 1611 
  return priv_flags;
}

#line 1614  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_ethtool.c"
static int igc_set_priv_flags(struct net_device *netdev, u32 priv_flags)
{
  #line 1616 
  struct igc_adapter *adapter = netdev_priv(netdev);
  #line 1617 
  unsigned int flags = adapter->flags;
  #line 1619 
  flags &= 4294901759U;
  #line 1620 
  if (((unsigned long)priv_flags & 1UL) != 0UL) 
                                                #line 1621 
                                                flags |= 65536U;
  #line 1623 
  if (adapter->flags != flags) {
    #line 1624 
    adapter->flags = flags;
    #line 1627 
    if ((int)netif_running(netdev) != 0) 
                                         #line 1628 
                                         igc_reinit_locked(adapter);
  }
  #line 1631 
  return 0;
}

#line 1634  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_ethtool.c"
static int igc_ethtool_begin(struct net_device *netdev)
{
  #line 1636 
  struct igc_adapter *adapter = netdev_priv(netdev);
  #line 1638 
  pm_runtime_get_sync(& (adapter->pdev)->dev);
  #line 1639 
  return 0;
}

#line 1642  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_ethtool.c"
static void igc_ethtool_complete(struct net_device *netdev)
{
  #line 1644 
  struct igc_adapter *adapter = netdev_priv(netdev);
  #line 1646 
  pm_runtime_put(& (adapter->pdev)->dev);
  #line 1647 
  return;
}

#line 1649  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_ethtool.c"
static int igc_get_link_ksettings(struct net_device *netdev, struct ethtool_link_ksettings *cmd)
{
  #line 1654 
  u32 status;
  #line 1655 
  u32 speed;
  #line 1652 
  struct igc_adapter *adapter = netdev_priv(netdev);
  #line 1653 
  struct igc_hw *hw = & adapter->hw;
  #line 1657 
  cif_bitmap_zero((unsigned long *)(& cmd->link_modes.supported),74U);
  #line 1658 
  cif_bitmap_zero((unsigned long *)(& cmd->link_modes.advertising),74U);
  #line 1661 
  __set_bit(0L,(unsigned long *)(& cmd->link_modes.supported));
  #line 1662 
  __set_bit(1L,(unsigned long *)(& cmd->link_modes.supported));
  #line 1663 
  __set_bit(2L,(unsigned long *)(& cmd->link_modes.supported));
  #line 1664 
  __set_bit(3L,(unsigned long *)(& cmd->link_modes.supported));
  #line 1665 
  __set_bit(5L,(unsigned long *)(& cmd->link_modes.supported));
  #line 1666 
  __set_bit(47L,(unsigned long *)(& cmd->link_modes.supported));
  #line 1669 
  cmd->base.port = (unsigned char)0U;
  #line 1670 
  cmd->base.phy_address = (unsigned char)hw->phy.addr;
  #line 1673 
  __set_bit(0L,(unsigned long *)(& cmd->link_modes.advertising));
  #line 1674 
  __set_bit(1L,(unsigned long *)(& cmd->link_modes.advertising));
  #line 1675 
  __set_bit(2L,(unsigned long *)(& cmd->link_modes.advertising));
  #line 1676 
  __set_bit(3L,(unsigned long *)(& cmd->link_modes.advertising));
  #line 1677 
  __set_bit(5L,(unsigned long *)(& cmd->link_modes.advertising));
  #line 1678 
  __set_bit(47L,(unsigned long *)(& cmd->link_modes.advertising));
  #line 1681 
  if ((int)hw->mac.autoneg == 1) {
    #line 1682 
    __set_bit(6L,(unsigned long *)(& cmd->link_modes.supported));
    #line 1683 
    __set_bit(6L,(unsigned long *)(& cmd->link_modes.advertising));
  }
  #line 1687 
  switch ((unsigned int)hw->fc.requested_mode) {
    #line 1688 
    case (unsigned int)3: 
                          #line 1688 
    ;
    #line 1689 
    __set_bit(13L,(unsigned long *)(& cmd->link_modes.advertising));
    #line 1690 
    break;
    #line 1691 
    case (unsigned int)1: 
                          #line 1691 
    ;
    #line 1692 
    __set_bit(13L,(unsigned long *)(& cmd->link_modes.advertising));
    #line 1693 
    __set_bit(14L,(unsigned long *)(& cmd->link_modes.advertising));
    #line 1695 
    break;
    #line 1696 
    case (unsigned int)2: 
                          #line 1696 
    ;
    #line 1697 
    __set_bit(14L,(unsigned long *)(& cmd->link_modes.advertising));
    #line 1699 
    break;
    #line 1700 
    default: 
             #line 1700 
    ;
    #line 1701 
    __set_bit(13L,(unsigned long *)(& cmd->link_modes.advertising));
    #line 1702 
    __set_bit(14L,(unsigned long *)(& cmd->link_modes.advertising));
  }
  #line 1706 
  status = igc_rd32(hw,8U);
  #line 1708 
  if ((status & 2U) != 0U) {
    #line 1709 
    if ((status & 128U) != 0U) 
      #line 1715 
      if (hw->mac.type == (unsigned int)igc_i225 && (status & 4194304U) != 0U) 
        #line 1717 
        speed = 2500U; else 
                            #line 1719 
                            speed = 1000U;
    else 
      #line 1721 
      if ((status & 64U) != 0U) 
                                #line 1722 
                                speed = 100U; else 
                                                   #line 1724 
                                                   speed = 10U;
    #line 1726 
    if ((status & 1U) != 0U || hw->phy.media_type != (unsigned int)igc_media_type_copper) 
      #line 1728 
      cmd->base.duplex = (unsigned char)1U; else 
                                                 #line 1730 
                                                 cmd->base.duplex = (unsigned char)0U;
  }
  else {
    #line 1732 
    speed = 4294967295U;
    #line 1733 
    cmd->base.duplex = (unsigned char)255U;
  }
  #line 1735 
  cmd->base.speed = speed;
  #line 1736 
  if ((int)hw->mac.autoneg != 0) 
                                 #line 1737 
                                 cmd->base.autoneg = (unsigned char)1U; else 
                                                                    #line 1739 
                                                                    cmd->base.autoneg = (unsigned char)0U;
  #line 1742 
  if (hw->phy.media_type == (unsigned int)igc_media_type_copper) 
    #line 1743 
    if ((int)hw->phy.is_mdix != 0) 
                                   #line 1743 
                                   cmd->base.eth_tp_mdix = (unsigned char)2U; else 
                                                                    #line 1743 
                                                                    cmd->base.eth_tp_mdix = (unsigned char)1U;
  else 
       #line 1746 
       cmd->base.eth_tp_mdix = (unsigned char)0U;
  #line 1748 
  if ((unsigned int)hw->phy.mdix == 0U) 
                                        #line 1749 
                                        cmd->base.eth_tp_mdix_ctrl = (unsigned char)3U; else 
                                                                    #line 1751 
                                                                    cmd->base.eth_tp_mdix_ctrl = hw->phy.mdix;
  #line 1753 
  return 0;
}

#line 1756  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_ethtool.c"
static int igc_set_link_ksettings(struct net_device *netdev, struct ethtool_link_ksettings *cmd)
{
  #line 1761 
  u32 advertising;
  #line 1759 
  struct igc_adapter *adapter = netdev_priv(netdev);
  #line 1760 
  struct igc_hw *hw = & adapter->hw;
  #line 1766 
  if (igc_check_reset_block(hw) != 0) {
    #line 1767 
    _dev_err(& (adapter->pdev)->dev,(char *)"Cannot change link characteristics when reset is active.\n");
    #line 1769 
    return -22;
  }
  #line 1776 
  if ((unsigned int)cmd->base.eth_tp_mdix_ctrl != 0U) 
    #line 1777 
    if ((unsigned int)cmd->base.eth_tp_mdix_ctrl != 3U && (unsigned int)cmd->base.autoneg != 1U) {
      #line 1779 
      _dev_err(& (adapter->pdev)->dev,(char *)"forcing MDI/MDI-X state is not supported when link speed and/or duplex are forced\n");
      #line 1780 
      return -22;
    }
  #line 1784 
  while (1) {
    #line 1784 
    if (! ((int)test_and_set_bit(1L,& adapter->state) != 0)) 
                                                             #line 1784 
                                                             break;
    #line 1785 
    usleep_range(1000UL,2000UL);
  }
  #line 1787 
  ethtool_convert_link_mode_to_legacy_u32(& advertising,(unsigned long *)(& cmd->link_modes.advertising));
  #line 1790 
  if ((unsigned int)cmd->base.autoneg == 1U) {
    #line 1791 
    hw->mac.autoneg = (_Bool)1;
    #line 1792 
    hw->phy.autoneg_advertised = (unsigned short)advertising;
    #line 1793 
    if ((int)adapter->fc_autoneg != 0) 
                                       #line 1794 
                                       hw->fc.requested_mode = igc_fc_default;
  }
  else 
       #line 1797 
       _dev_info(& (adapter->pdev)->dev,(char *)"Force mode currently not supported\n");
  #line 1802 
  if ((unsigned int)cmd->base.eth_tp_mdix_ctrl != 0U) 
    #line 1806 
    if ((unsigned int)cmd->base.eth_tp_mdix_ctrl == 3U) 
                                                        #line 1807 
                                                        hw->phy.mdix = (unsigned char)0U; else 
                                                                    #line 1809 
                                                                    hw->phy.mdix = cmd->base.eth_tp_mdix_ctrl;
  #line 1813 
  if ((int)netif_running(adapter->netdev) != 0) {
    #line 1814 
    igc_down(adapter);
    #line 1815 
    igc_up(adapter);
  }
  else 
       #line 1817 
       igc_reset(adapter);
  #line 1820 
  cif_clear_bit_0(1L,& adapter->state);
  #line 1822 
  return 0;
}

#line 1825  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_ethtool.c"
static struct ethtool_ops igc_ethtool_ops = {.get_drvinfo = & igc_get_drvinfo, .get_regs_len = & igc_get_regs_len, .get_regs = & igc_get_regs, .get_msglevel = & igc_get_msglevel, .set_msglevel = & igc_set_msglevel, .nway_reset = & igc_nway_reset, .get_link = & igc_get_link, .get_eeprom_len = & igc_get_eeprom_len, .get_eeprom = & igc_get_eeprom, .set_eeprom = & igc_set_eeprom, .get_coalesce = & igc_get_coalesce, .set_coalesce = & igc_set_coalesce, .get_ringparam = & igc_get_ringparam, .set_ringparam = & igc_set_ringparam, .get_pauseparam = & igc_get_pauseparam, .set_pauseparam = & igc_set_pauseparam, .get_strings = & igc_get_strings, .get_ethtool_stats = & igc_get_ethtool_stats, .begin = & igc_ethtool_begin, .complete = & igc_ethtool_complete, .get_priv_flags = & igc_get_priv_flags, .set_priv_flags = & igc_set_priv_flags, .get_sset_count = & igc_get_sset_count, .get_rxnfc = & igc_get_rxnfc, .set_rxnfc = & igc_set_rxnfc, .get_rxfh_indir_size = & igc_get_rxfh_indir_size, .get_rxfh = & igc_get_rxfh, .set_rxfh = & igc_set_rxfh, .get_channels = & igc_get_channels, .set_channels = & igc_set_channels, .get_link_ksettings = & igc_get_link_ksettings, .set_link_ksettings = & igc_set_link_ksettings};
#line 1860  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_ethtool.c"
void igc_set_ethtool_ops(struct net_device *netdev)
{
  #line 1862 
  netdev->ethtool_ops = & igc_ethtool_ops;
  #line 1863 
  return;
}

#line 107  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_ethtool.i.aux"
int emg_wrapper_igc_ethtool_begin(struct net_device *arg0)
{
  #line 108 
  return igc_ethtool_begin(arg0);
}

#line 112  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_ethtool.i.aux"
void emg_wrapper_igc_ethtool_complete(struct net_device *arg0)
{
  #line 113 
  igc_ethtool_complete(arg0);
  #line 114 
  return;
}

#line 117  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_ethtool.i.aux"
void emg_wrapper_igc_get_channels(struct net_device *arg0, struct ethtool_channels *arg1)
{
  #line 118 
  igc_get_channels(arg0,arg1);
  #line 119 
  return;
}

#line 122  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_ethtool.i.aux"
int emg_wrapper_igc_get_coalesce(struct net_device *arg0, struct ethtool_coalesce *arg1)
{
  #line 123 
  return igc_get_coalesce(arg0,arg1);
}

#line 127  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_ethtool.i.aux"
void emg_wrapper_igc_get_drvinfo(struct net_device *arg0, struct ethtool_drvinfo *arg1)
{
  #line 128 
  igc_get_drvinfo(arg0,arg1);
  #line 129 
  return;
}

#line 132  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_ethtool.i.aux"
int emg_wrapper_igc_get_eeprom(struct net_device *arg0, struct ethtool_eeprom *arg1, unsigned char *arg2)
{
  #line 133 
  return igc_get_eeprom(arg0,arg1,arg2);
}

#line 137  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_ethtool.i.aux"
int emg_wrapper_igc_get_eeprom_len(struct net_device *arg0)
{
  #line 138 
  return igc_get_eeprom_len(arg0);
}

#line 142  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_ethtool.i.aux"
void emg_wrapper_igc_get_ethtool_stats(struct net_device *arg0, struct ethtool_stats *arg1, unsigned long long *arg2)
{
  #line 143 
  igc_get_ethtool_stats(arg0,arg1,arg2);
  #line 144 
  return;
}

#line 147  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_ethtool.i.aux"
unsigned int emg_wrapper_igc_get_link(struct net_device *arg0)
{
  #line 148 
  return igc_get_link(arg0);
}

#line 152  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_ethtool.i.aux"
int emg_wrapper_igc_get_link_ksettings(struct net_device *arg0, struct ethtool_link_ksettings *arg1)
{
  #line 153 
  return igc_get_link_ksettings(arg0,arg1);
}

#line 157  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_ethtool.i.aux"
unsigned int emg_wrapper_igc_get_msglevel(struct net_device *arg0)
{
  #line 158 
  return igc_get_msglevel(arg0);
}

#line 162  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_ethtool.i.aux"
void emg_wrapper_igc_get_pauseparam(struct net_device *arg0, struct ethtool_pauseparam *arg1)
{
  #line 163 
  igc_get_pauseparam(arg0,arg1);
  #line 164 
  return;
}

#line 167  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_ethtool.i.aux"
unsigned int emg_wrapper_igc_get_priv_flags(struct net_device *arg0)
{
  #line 168 
  return igc_get_priv_flags(arg0);
}

#line 172  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_ethtool.i.aux"
void emg_wrapper_igc_get_regs(struct net_device *arg0, struct ethtool_regs *arg1, void *arg2)
{
  #line 173 
  igc_get_regs(arg0,arg1,arg2);
  #line 174 
  return;
}

#line 177  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_ethtool.i.aux"
int emg_wrapper_igc_get_regs_len(struct net_device *arg0)
{
  #line 178 
  return igc_get_regs_len(arg0);
}

#line 182  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_ethtool.i.aux"
void emg_wrapper_igc_get_ringparam(struct net_device *arg0, struct ethtool_ringparam *arg1)
{
  #line 183 
  igc_get_ringparam(arg0,arg1);
  #line 184 
  return;
}

#line 187  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_ethtool.i.aux"
int emg_wrapper_igc_get_rxfh(struct net_device *arg0, unsigned int *arg1, unsigned char *arg2, unsigned char *arg3)
{
  #line 188 
  return igc_get_rxfh(arg0,arg1,arg2,arg3);
}

#line 192  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_ethtool.i.aux"
unsigned int emg_wrapper_igc_get_rxfh_indir_size(struct net_device *arg0)
{
  #line 193 
  return igc_get_rxfh_indir_size(arg0);
}

#line 197  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_ethtool.i.aux"
int emg_wrapper_igc_get_rxnfc(struct net_device *arg0, struct ethtool_rxnfc *arg1, unsigned int *arg2)
{
  #line 198 
  return igc_get_rxnfc(arg0,arg1,arg2);
}

#line 202  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_ethtool.i.aux"
int emg_wrapper_igc_get_sset_count(struct net_device *arg0, int arg1)
{
  #line 203 
  return igc_get_sset_count(arg0,arg1);
}

#line 207  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_ethtool.i.aux"
void emg_wrapper_igc_get_strings(struct net_device *arg0, unsigned int arg1, unsigned char *arg2)
{
  #line 208 
  igc_get_strings(arg0,arg1,arg2);
  #line 209 
  return;
}

#line 212  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_ethtool.i.aux"
int emg_wrapper_igc_nway_reset(struct net_device *arg0)
{
  #line 213 
  return igc_nway_reset(arg0);
}

#line 217  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_ethtool.i.aux"
int emg_wrapper_igc_set_channels(struct net_device *arg0, struct ethtool_channels *arg1)
{
  #line 218 
  return igc_set_channels(arg0,arg1);
}

#line 222  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_ethtool.i.aux"
int emg_wrapper_igc_set_coalesce(struct net_device *arg0, struct ethtool_coalesce *arg1)
{
  #line 223 
  return igc_set_coalesce(arg0,arg1);
}

#line 227  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_ethtool.i.aux"
int emg_wrapper_igc_set_eeprom(struct net_device *arg0, struct ethtool_eeprom *arg1, unsigned char *arg2)
{
  #line 228 
  return igc_set_eeprom(arg0,arg1,arg2);
}

#line 232  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_ethtool.i.aux"
int emg_wrapper_igc_set_link_ksettings(struct net_device *arg0, struct ethtool_link_ksettings *arg1)
{
  #line 233 
  return igc_set_link_ksettings(arg0,arg1);
}

#line 237  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_ethtool.i.aux"
void emg_wrapper_igc_set_msglevel(struct net_device *arg0, unsigned int arg1)
{
  #line 238 
  igc_set_msglevel(arg0,arg1);
  #line 239 
  return;
}

#line 242  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_ethtool.i.aux"
int emg_wrapper_igc_set_pauseparam(struct net_device *arg0, struct ethtool_pauseparam *arg1)
{
  #line 243 
  return igc_set_pauseparam(arg0,arg1);
}

#line 247  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_ethtool.i.aux"
int emg_wrapper_igc_set_priv_flags(struct net_device *arg0, unsigned int arg1)
{
  #line 248 
  return igc_set_priv_flags(arg0,arg1);
}

#line 252  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_ethtool.i.aux"
int emg_wrapper_igc_set_ringparam(struct net_device *arg0, struct ethtool_ringparam *arg1)
{
  #line 253 
  return igc_set_ringparam(arg0,arg1);
}

#line 257  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_ethtool.i.aux"
int emg_wrapper_igc_set_rxfh(struct net_device *arg0, unsigned int *arg1, unsigned char *arg2, unsigned char arg3)
{
  #line 258 
  return igc_set_rxfh(arg0,arg1,arg2,(unsigned char)((int)arg3));
}

#line 262  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_ethtool.i.aux"
int emg_wrapper_igc_set_rxnfc(struct net_device *arg0, struct ethtool_rxnfc *arg1)
{
  #line 263 
  return igc_set_rxnfc(arg0,arg1);
}

#line 289  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_ethtool.i.aux"
static void cif_clear_bit_0(long nr, unsigned long *addr)
{
  #line 292 
  ldv_clear_bit(nr,addr);
  #line 293 
  return;
}

#line 359  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_ethtool.i.aux"
static void cif_bitmap_zero(unsigned long *dst, unsigned int nbits)
{
  #line 362 
  ldv_bitmap_zero(dst,nbits);
  #line 363 
  return;
}

#line 484  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_ethtool.i.aux"
static void *kmalloc(size_t size, gfp_t flags)
{
  #line 487 
  return ldv_kmalloc(size,flags);
}

#line 491  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_ethtool.i.aux"
static void *kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 494 
  return ldv_kmalloc_array(n,size,flags);
}

#line 519  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_ethtool.i.aux"
static void *kzalloc_0(size_t size, gfp_t flags)
{
  #line 522 
  return ldv_kzalloc(size,flags);
}

#line 812  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_ethtool.i.aux"
static void *cif_vmalloc(unsigned long size)
{
  #line 815 
  return ldv_vmalloc(size);
}

#line 819  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_ethtool.i.aux"
static void cif_vfree_0(void *addr)
{
  #line 822 
  ldv_vfree(addr);
  #line 823 
  return;
}

#line 826  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_ethtool.i.aux"
static void cif_spin_lock_stats64_lock_of_igc_adapter_0(spinlock_t *lock)
{
  #line 829 
  ldv_spin_model_lock((char *)"stats64_lock_of_igc_adapter");
  #line 831 
  spin_lock_0(lock);
  #line 832 
  return;
}

#line 835  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_ethtool.i.aux"
static void cif_spin_unlock_stats64_lock_of_igc_adapter_0(spinlock_t *lock)
{
  #line 838 
  ldv_spin_model_unlock((char *)"stats64_lock_of_igc_adapter");
  #line 840 
  spin_unlock_0(lock);
  #line 841 
  return;
}

#line 844  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_ethtool.i.aux"
static void cif_spin_lock_nfc_lock_of_igc_adapter_0(spinlock_t *lock)
{
  #line 847 
  ldv_spin_model_lock((char *)"nfc_lock_of_igc_adapter");
  #line 849 
  spin_lock_0(lock);
  #line 850 
  return;
}

#line 853  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/0/concurrency safety/weaver/igc_ethtool.i.aux"
static void cif_spin_unlock_nfc_lock_of_igc_adapter_0(spinlock_t *lock)
{
  #line 856 
  ldv_spin_model_unlock((char *)"nfc_lock_of_igc_adapter");
  #line 858 
  spin_unlock_0(lock);
  #line 859 
  return;
}

#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
#line 56 
void __dynamic_pr_debug(struct _ddebug *, char * , ...);
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_i225.h"
#line 7 
s32 igc_acquire_swfw_sync_i225(struct igc_hw *hw, u16 mask);
#line 8 
#line 8 
void igc_release_swfw_sync_i225(struct igc_hw *hw, u16 mask);
#line 10 
#line 10 
s32 igc_init_nvm_params_i225(struct igc_hw *hw);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_base.c"
static s32 igc_reset_hw_base(struct igc_hw *hw)
{
  #line 21 
  s32 ret_val;
  #line 22 
  u32 ctrl;
  #line 27 
  ret_val = igc_disable_pcie_master(hw);
  #line 28 
  if (ret_val != 0) {
    #line 29 
    bool branch;
    #line 29 
    struct _ddebug __UNIQUE_ID_ddebug438 = {.modname = (char *)"igc", .function = (char *)"igc_reset_hw_base", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_base.c", .format = (char *)"PCI-E Master disable polling has failed.\n", .lineno = (unsigned int)29U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 29 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug438.key.dd_key_false.key,(_Bool)0);
    #line 29 
    if ((long)((long)((int)branch != 0)) != 0L) {
      #line 29 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug438,igc_get_hw_dev(hw),(char *)"PCI-E Master disable polling has failed.\n");
    }
  }
  {
    #line 31 
    bool branch_0;
    #line 31 
    struct _ddebug __UNIQUE_ID_ddebug439 = {.modname = (char *)"igc", .function = (char *)"igc_reset_hw_base", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_base.c", .format = (char *)"Masking off all interrupts\n", .lineno = (unsigned int)31U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 31 
    branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug439.key.dd_key_false.key,(_Bool)0);
    #line 31 
    if ((long)((long)((int)branch_0 != 0)) != 0L) {
      #line 31 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug439,igc_get_hw_dev(hw),(char *)"Masking off all interrupts\n");
    }
  }
  {
    #line 33 
    union __anonunion___u_4673 __u;
    #line 32 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 32 
    u8 *hw_addr = (__u.__val);
    #line 32 
    writel(4294967295U,(void *)(hw_addr + 5388U));
  }
  {
    #line 35 
    union __anonunion___u_4675 __u_0;
    #line 34 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
    #line 34 
    u8 *hw_addr_0 = (__u_0.__val);
    #line 34 
    writel(0U,(void *)(hw_addr_0 + 256U));
  }
  {
    #line 36 
    union __anonunion___u_4677 __u_1;
    #line 35 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_1.__c),8);
    #line 35 
    u8 *hw_addr_1 = (__u_1.__val);
    #line 35 
    writel(8U,(void *)(hw_addr_1 + 1024U));
  }
  #line 36 
  igc_rd32(hw,8U);
  #line 38 
  usleep_range(10000UL,20000UL);
  #line 40 
  ctrl = igc_rd32(hw,0U);
  {
    #line 42 
    bool branch_1;
    #line 42 
    struct _ddebug __UNIQUE_ID_ddebug440 = {.modname = (char *)"igc", .function = (char *)"igc_reset_hw_base", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_base.c", .format = (char *)"Issuing a global reset to MAC\n", .lineno = (unsigned int)42U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 42 
    branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug440.key.dd_key_false.key,(_Bool)0);
    #line 42 
    if ((long)((long)((int)branch_1 != 0)) != 0L) {
      #line 42 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug440,igc_get_hw_dev(hw),(char *)"Issuing a global reset to MAC\n");
    }
  }
  {
    #line 44 
    union __anonunion___u_4679 __u_2;
    #line 43 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_2.__c),8);
    #line 43 
    u8 *hw_addr_2 = (__u_2.__val);
    #line 43 
    writel(ctrl | 536870912U,(void *)hw_addr_2);
  }
  #line 45 
  ret_val = igc_get_auto_rd_done(hw);
  #line 46 
  if (ret_val != 0) {
    #line 51 
    bool branch_2;
    #line 51 
    struct _ddebug __UNIQUE_ID_ddebug441 = {.modname = (char *)"igc", .function = (char *)"igc_reset_hw_base", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_base.c", .format = (char *)"Auto Read Done did not complete\n", .lineno = (unsigned int)51U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 51 
    branch_2 = arch_static_branch(& __UNIQUE_ID_ddebug441.key.dd_key_false.key,(_Bool)0);
    #line 51 
    if ((long)((long)((int)branch_2 != 0)) != 0L) {
      #line 51 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug441,igc_get_hw_dev(hw),(char *)"Auto Read Done did not complete\n");
    }
  }
  {
    #line 56 
    union __anonunion___u_4681 __u_3;
    #line 55 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_3.__c),8);
    #line 55 
    u8 *hw_addr_3 = (__u_3.__val);
    #line 55 
    writel(4294967295U,(void *)(hw_addr_3 + 5388U));
  }
  #line 56 
  igc_rd32(hw,5376U);
  #line 58 
  return ret_val;
}

#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_base.c"
static s32 igc_init_nvm_params_base(struct igc_hw *hw)
{
  #line 69 
  u16 size;
  #line 67 
  struct igc_nvm_info *nvm = & hw->nvm;
  #line 68 
  u32 eecd = igc_rd32(hw,16U);
  #line 71 
  size = (unsigned short)((unsigned int)((unsigned short)(eecd >> 11)) & 15U);
  #line 77 
  size = (unsigned short)((unsigned int)size + 6U);
  #line 82 
  if ((unsigned int)size > 15U) 
                                #line 83 
                                size = (unsigned short)15U;
  #line 85 
  nvm->type = igc_nvm_eeprom_spi;
  #line 86 
  nvm->word_size = (unsigned short)(1UL << (int)size);
  #line 87 
  nvm->opcode_bits = (unsigned short)8U;
  #line 88 
  nvm->delay_usec = (unsigned short)1U;
  #line 90 
  if ((eecd & 1024U) != 0U) 
                            #line 90 
                            nvm->page_size = (unsigned short)32U; else 
                                                                    #line 90 
                                                                    nvm->page_size = (unsigned short)8U;
  #line 91 
  if ((eecd & 1024U) != 0U) 
                            #line 91 
                            nvm->address_bits = (unsigned short)16U; else 
                                                                    #line 91 
                                                                    nvm->address_bits = (unsigned short)8U;
  #line 94 
  if ((unsigned int)nvm->word_size == 32768U) 
                                              #line 95 
                                              nvm->page_size = (unsigned short)128U;
  #line 97 
  return 0;
}

#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_base.c"
static s32 igc_setup_copper_link_base(struct igc_hw *hw)
{
  #line 111 
  u32 ctrl;
  #line 110 
  s32 ret_val = 0;
  #line 113 
  ctrl = igc_rd32(hw,0U);
  #line 114 
  ctrl |= 64U;
  #line 115 
  ctrl &= 4294961151U;
  {
    #line 117 
    union __anonunion___u_4683 __u;
    #line 116 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 116 
    u8 *hw_addr = (__u.__val);
    #line 116 
    writel(ctrl,(void *)hw_addr);
  }
  #line 118 
  ret_val = igc_setup_copper_link(hw);
  #line 120 
  return ret_val;
}

#line 127  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_base.c"
static s32 igc_init_mac_params_base(struct igc_hw *hw)
{
  #line 129 
  struct igc_dev_spec_base *dev_spec = & hw->dev_spec._base;
  #line 130 
  struct igc_mac_info *mac = & hw->mac;
  #line 133 
  mac->mta_reg_count = (unsigned short)128U;
  #line 134 
  mac->rar_entry_count = (unsigned short)16U;
  #line 137 
  mac->ops.reset_hw = & igc_reset_hw_base;
  #line 139 
  mac->ops.acquire_swfw_sync = & igc_acquire_swfw_sync_i225;
  #line 140 
  mac->ops.release_swfw_sync = & igc_release_swfw_sync_i225;
  #line 143 
  if (mac->type == (unsigned int)igc_i225) 
                                           #line 144 
                                           dev_spec->clear_semaphore_once = (_Bool)1;
  #line 147 
  mac->ops.setup_physical_interface = & igc_setup_copper_link_base;
  #line 149 
  return 0;
}

#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_base.c"
static s32 igc_init_phy_params_base(struct igc_hw *hw)
{
  #line 158 
  struct igc_phy_info *phy = & hw->phy;
  #line 159 
  s32 ret_val = 0;
  #line 161 
  if (hw->phy.media_type != (unsigned int)igc_media_type_copper) {
    #line 162 
    phy->type = igc_phy_none;
    #line 163 
    goto out;
  }
  #line 166 
  phy->autoneg_mask = (unsigned short)175U;
  #line 167 
  phy->reset_delay_us = 100U;
  #line 170 
  hw->bus.func = (unsigned short)((unsigned int)((unsigned short)(igc_rd32(hw,8U) >> 2)) & 3U);
  #line 178 
  ret_val = (*(hw->phy.ops.reset))(hw);
  #line 179 
  if (ret_val != 0) {
    {
      #line 180 
      bool branch;
      #line 180 
      struct _ddebug __UNIQUE_ID_ddebug442 = {.modname = (char *)"igc", .function = (char *)"igc_init_phy_params_base", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_base.c", .format = (char *)"Error resetting the PHY.\n", .lineno = (unsigned int)180U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 180 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug442.key.dd_key_false.key,(_Bool)0);
      #line 180 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 180 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug442,igc_get_hw_dev(hw),(char *)"Error resetting the PHY.\n");
      }
    }
    #line 181 
    goto out;
  }
  #line 184 
  ret_val = igc_get_phy_id(hw);
  #line 185 
  if (ret_val != 0) 
                    #line 186 
                    return ret_val;
  #line 188 
  igc_check_for_copper_link(hw);
  #line 191 
  switch (phy->id) {
    #line 192 
    case (u32)1741282304: 
                          #line 192 
    ;
    #line 193 
    phy->type = igc_phy_i225;
    #line 194 
    break;
    #line 195 
    default: 
             #line 195 
    ;
    #line 196 
    ret_val = -2;
    #line 197 
    goto out;
  }
  #line 200 
  out: 
       #line 200 
  ;
  #line 201 
  return ret_val;
}

#line 204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_base.c"
static s32 igc_get_invariants_base(struct igc_hw *hw)
{
  #line 206 
  struct igc_mac_info *mac = & hw->mac;
  #line 207 
  s32 ret_val = 0;
  #line 209 
  switch ((int)hw->device_id) {
    #line 210 
    case 5618: 
               #line 210 
    ;
    #line 211 
    case 5619: 
               #line 211 
    ;
    #line 212 
    case 5624: 
               #line 212 
    ;
    #line 213 
    case 5623: 
               #line 213 
    ;
    #line 214 
    case 12544: 
                #line 214 
    ;
    #line 215 
    mac->type = igc_i225;
    #line 216 
    break;
    #line 217 
    default: 
             #line 217 
    ;
    #line 218 
    return -5;
  }
  #line 221 
  hw->phy.media_type = igc_media_type_copper;
  #line 224 
  ret_val = igc_init_mac_params_base(hw);
  #line 225 
  if (ret_val != 0) 
                    #line 226 
                    goto out;
  #line 229 
  ret_val = igc_init_nvm_params_base(hw);
  #line 230 
  switch ((unsigned int)hw->mac.type) {
    #line 231 
    case (unsigned int)1: 
                          #line 231 
    ;
    #line 232 
    ret_val = igc_init_nvm_params_i225(hw);
    #line 233 
    break;
    #line 234 
    default: 
             #line 234 
    ;
    #line 235 
    break;
  }
  #line 239 
  ret_val = igc_init_phy_params_base(hw);
  #line 240 
  if (ret_val != 0) 
                    #line 241 
                    goto out;
  #line 243 
  out: 
       #line 243 
  ;
  #line 244 
  return ret_val;
}

#line 254  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_base.c"
static s32 igc_acquire_phy_base(struct igc_hw *hw)
{
  #line 256 
  u16 mask = (unsigned short)2U;
  #line 258 
  return (*(hw->mac.ops.acquire_swfw_sync))(hw,(unsigned short)((int)mask));
}

#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_base.c"
static void igc_release_phy_base(struct igc_hw *hw)
{
  #line 270 
  u16 mask = (unsigned short)2U;
  #line 272 
  (*(hw->mac.ops.release_swfw_sync))(hw,(unsigned short)((int)mask));
  #line 273 
  return;
}

#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_base.c"
static s32 igc_init_hw_base(struct igc_hw *hw)
{
  #line 284 
  u16 i;
  #line 283 
  struct igc_mac_info *mac = & hw->mac;
  #line 284 
  u16 rar_count = mac->rar_entry_count;
  #line 285 
  s32 ret_val = 0;
  #line 288 
  igc_init_rx_addrs(hw,(unsigned short)((int)rar_count));
  {
    #line 291 
    bool branch;
    #line 291 
    struct _ddebug __UNIQUE_ID_ddebug443 = {.modname = (char *)"igc", .function = (char *)"igc_init_hw_base", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_base.c", .format = (char *)"Zeroing the MTA\n", .lineno = (unsigned int)291U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 291 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug443.key.dd_key_false.key,(_Bool)0);
    #line 291 
    if ((long)((long)((int)branch != 0)) != 0L) {
      #line 291 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug443,igc_get_hw_dev(hw),(char *)"Zeroing the MTA\n");
    }
  }
  #line 292 
  i = (unsigned short)0U;
  #line 292 
  while ((int)mac->mta_reg_count > (int)i) {
    {
      #line 294 
      union __anonunion___u_4685 __u;
      #line 293 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
      #line 293 
      u8 *hw_addr = (__u.__val);
      #line 293 
      writel(0U,(void *)(hw_addr + (unsigned long)(((int)i << 2) + 20992)));
    }
    #line 292 
    i = (u16)((int)i + 1);
  }
  {
    #line 296 
    bool branch_0;
    #line 296 
    struct _ddebug __UNIQUE_ID_ddebug444 = {.modname = (char *)"igc", .function = (char *)"igc_init_hw_base", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_base.c", .format = (char *)"Zeroing the UTA\n", .lineno = (unsigned int)296U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 296 
    branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug444.key.dd_key_false.key,(_Bool)0);
    #line 296 
    if ((long)((long)((int)branch_0 != 0)) != 0L) {
      #line 296 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug444,igc_get_hw_dev(hw),(char *)"Zeroing the UTA\n");
    }
  }
  #line 297 
  i = (unsigned short)0U;
  #line 297 
  while ((int)mac->uta_reg_count > (int)i) {
    {
      #line 299 
      union __anonunion___u_4687 __u_0;
      #line 298 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
      #line 298 
      u8 *hw_addr_0 = (__u_0.__val);
      #line 298 
      writel(0U,(void *)(hw_addr_0 + (unsigned long)(((int)i << 2) + 40960)));
    }
    #line 297 
    i = (u16)((int)i + 1);
  }
  #line 301 
  ret_val = igc_setup_link(hw);
  #line 308 
  igc_clear_hw_cntrs_base(hw);
  #line 310 
  return ret_val;
}

#line 320  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_base.c"
void igc_power_down_phy_copper_base(struct igc_hw *hw)
{
  #line 323 
  if (! igc_enable_mng_pass_thru(hw)) {
    #line 323 
    if (igc_check_reset_block(hw) == 0) 
                                        #line 324 
                                        igc_power_down_phy_copper(hw);
  }
  #line 325 
  return;
}

#line 336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_base.c"
void igc_rx_fifo_flush_base(struct igc_hw *hw)
{
  #line 338 
  u32 rctl;
  #line 338 
  u32 rlpml;
  #line 338 
  u32 rxdctl[4U];
  #line 338 
  u32 rfctl;
  #line 338 
  u32 temp_rctl;
  #line 338 
  u32 rx_enabled;
  #line 339 
  int i;
  #line 339 
  int ms_wait;
  #line 342 
  rfctl = igc_rd32(hw,20488U);
  #line 343 
  rfctl |= 65536U;
  {
    #line 345 
    union __anonunion___u_4689 __u;
    #line 344 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 344 
    u8 *hw_addr = (__u.__val);
    #line 344 
    writel(rfctl,(void *)(hw_addr + 20488U));
  }
  #line 346 
  if ((igc_rd32(hw,22560U) & 131072U) == 0U) 
                                             #line 347 
                                             return;
  #line 350 
  i = 0;
  #line 350 
  while (i <= 3) {
    #line 351 
    rxdctl[i] = igc_rd32(hw,(unsigned int)(i * 64 + 49192));
    {
      #line 353 
      union __anonunion___u_4691 __u_0;
      #line 352 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_0.__c),8);
      #line 352 
      u8 *hw_addr_0 = (__u_0.__val);
      #line 352 
      writel(rxdctl[i] & 4261412863U,(void *)(hw_addr_0 + (unsigned long)(i * 64 + 49192)));
    }
    #line 350 
    i ++;
  }
  #line 356 
  ms_wait = 0;
  #line 356 
  while (ms_wait <= 9) {
    #line 357 
    usleep_range(1000UL,2000UL);
    #line 358 
    rx_enabled = 0U;
    #line 359 
    i = 0;
    #line 359 
    while (i <= 3) {
      #line 360 
      rx_enabled = igc_rd32(hw,(unsigned int)(i * 64 + 49192)) | rx_enabled;
      #line 359 
      i ++;
    }
    #line 361 
    if ((rx_enabled & 33554432U) == 0U) 
                                        #line 362 
                                        break;
    #line 356 
    ms_wait ++;
  }
  #line 365 
  if (ms_wait == 10) {
    #line 366 
    bool branch;
    #line 366 
    struct _ddebug __UNIQUE_ID_ddebug445 = {.modname = (char *)"igc", .function = (char *)"igc_rx_fifo_flush_base", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_base.c", .format = (char *)"Queue disable timed out after 10ms\n", .lineno = (unsigned int)366U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 366 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug445.key.dd_key_false.key,(_Bool)0);
    #line 366 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 366 
                                                __dynamic_pr_debug(& __UNIQUE_ID_ddebug445,(char *)"Queue disable timed out after 10ms\n");
  }
  {
    #line 373 
    union __anonunion___u_4693 __u_1;
    #line 372 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_1.__c),8);
    #line 372 
    u8 *hw_addr_1 = (__u_1.__val);
    #line 372 
    writel(rfctl & 4294705151U,(void *)(hw_addr_1 + 20488U));
  }
  #line 374 
  rlpml = igc_rd32(hw,20484U);
  {
    #line 376 
    union __anonunion___u_4695 __u_2;
    #line 375 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_2.__c),8);
    #line 375 
    u8 *hw_addr_2 = (__u_2.__val);
    #line 375 
    writel(0U,(void *)(hw_addr_2 + 20484U));
  }
  #line 377 
  rctl = igc_rd32(hw,256U);
  #line 378 
  temp_rctl = rctl & 4294967289U;
  #line 379 
  temp_rctl |= 32U;
  {
    #line 382 
    union __anonunion___u_4697 __u_3;
    #line 381 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_3.__c),8);
    #line 381 
    u8 *hw_addr_3 = (__u_3.__val);
    #line 381 
    writel(temp_rctl,(void *)(hw_addr_3 + 256U));
  }
  {
    #line 383 
    union __anonunion___u_4699 __u_4;
    #line 382 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_4.__c),8);
    #line 382 
    u8 *hw_addr_4 = (__u_4.__val);
    #line 382 
    writel(temp_rctl | 2U,(void *)(hw_addr_4 + 256U));
  }
  #line 383 
  igc_rd32(hw,8U);
  #line 384 
  usleep_range(2000UL,3000UL);
  #line 389 
  i = 0;
  #line 389 
  while (i <= 3) {
    {
      #line 391 
      union __anonunion___u_4701 __u_5;
      #line 390 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_5.__c),8);
      #line 390 
      u8 *hw_addr_5 = (__u_5.__val);
      #line 390 
      writel(rxdctl[i],(void *)(hw_addr_5 + (unsigned long)(i * 64 + 49192)));
    }
    #line 389 
    i ++;
  }
  {
    #line 392 
    union __anonunion___u_4703 __u_6;
    #line 391 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_6.__c),8);
    #line 391 
    u8 *hw_addr_6 = (__u_6.__val);
    #line 391 
    writel(rctl,(void *)(hw_addr_6 + 256U));
  }
  #line 392 
  igc_rd32(hw,8U);
  {
    #line 395 
    union __anonunion___u_4705 __u_7;
    #line 394 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_7.__c),8);
    #line 394 
    u8 *hw_addr_7 = (__u_7.__val);
    #line 394 
    writel(rlpml,(void *)(hw_addr_7 + 20484U));
  }
  {
    #line 396 
    union __anonunion___u_4707 __u_8;
    #line 395 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u_8.__c),8);
    #line 395 
    u8 *hw_addr_8 = (__u_8.__val);
    #line 395 
    writel(rfctl,(void *)(hw_addr_8 + 20488U));
  }
  #line 398 
  igc_rd32(hw,16556U);
  #line 399 
  igc_rd32(hw,16544U);
  #line 400 
  igc_rd32(hw,16400U);
  #line 401 
  return;
}

#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_base.c"
static struct igc_mac_operations igc_mac_ops_base = {.check_for_link = & igc_check_for_copper_link, .init_hw = & igc_init_hw_base, .rar_set = & igc_rar_set, .read_mac_addr = & igc_read_mac_addr, .get_speed_and_duplex = & igc_get_speed_and_duplex_copper};
#line 411  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_base.c"
static struct igc_phy_operations igc_phy_ops_base = {.acquire = & igc_acquire_phy_base, .read_reg = & igc_read_phy_reg_gpy, .release = & igc_release_phy_base, .reset = & igc_phy_hw_reset, .write_reg = & igc_write_phy_reg_gpy};
#line 419  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_base.c"
struct igc_info igc_base_info = {.get_invariants = & igc_get_invariants_base, .mac_ops = & igc_mac_ops_base, .phy_ops = & igc_phy_ops_base};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_i225.c"
static s32 igc_acquire_nvm_i225(struct igc_hw *hw)
{
  #line 19 
  return igc_acquire_swfw_sync_i225(hw,(unsigned short)1);
}

#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_i225.c"
static void igc_release_nvm_i225(struct igc_hw *hw)
{
  #line 31 
  igc_release_swfw_sync_i225(hw,(unsigned short)1);
  #line 32 
  return;
}

#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_i225.c"
static s32 igc_get_hw_semaphore_i225(struct igc_hw *hw)
{
  #line 44 
  u32 swsm;
  #line 42 
  s32 timeout = (int)hw->nvm.word_size + 1;
  #line 43 
  s32 i = 0;
  #line 47 
  while (i < timeout) {
    #line 48 
    swsm = igc_rd32(hw,23376U);
    #line 49 
    if ((swsm & 1U) == 0U) 
                           #line 50 
                           break;
    #line 52 
    usleep_range(500UL,600UL);
    #line 53 
    i ++;
  }
  #line 56 
  if (i == timeout) {
    #line 60 
    if ((int)hw->dev_spec._base.clear_semaphore_once != 0) {
      #line 61 
      hw->dev_spec._base.clear_semaphore_once = (_Bool)0;
      #line 62 
      igc_put_hw_semaphore(hw);
      #line 63 
      i = 0;
      #line 63 
      while (i < timeout) {
        #line 64 
        swsm = igc_rd32(hw,23376U);
        #line 65 
        if ((swsm & 1U) == 0U) 
                               #line 66 
                               break;
        #line 68 
        usleep_range(500UL,600UL);
        #line 63 
        i ++;
      }
    }
    #line 73 
    if (i == timeout) {
      {
        #line 74 
        bool branch;
        #line 74 
        struct _ddebug __UNIQUE_ID_ddebug436 = {.modname = (char *)"igc", .function = (char *)"igc_get_hw_semaphore_i225", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_i225.c", .format = (char *)"Driver can\'t access device - SMBI bit is set.\n", .lineno = (unsigned int)74U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 74 
        branch = arch_static_branch(& __UNIQUE_ID_ddebug436.key.dd_key_false.key,(_Bool)0);
        #line 74 
        if ((long)((long)((int)branch != 0)) != 0L) {
          #line 74 
          __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug436,igc_get_hw_dev(hw),(char *)"Driver can\'t access device - SMBI bit is set.\n");
        }
      }
      #line 75 
      return -1;
    }
  }
  #line 80 
  i = 0;
  #line 80 
  while (i < timeout) {
    {
      #line 81 
      swsm = igc_rd32(hw,23376U);
      {
        #line 83 
        union __anonunion___u_5406 __u;
        #line 82 
        __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
        #line 82 
        u8 *hw_addr = (__u.__val);
        #line 82 
        writel(swsm | 2U,(void *)(hw_addr + 23376U));
      }
      #line 85 
      if ((igc_rd32(hw,23376U) & 2U) != 0U) 
                                            #line 86 
                                            break;
      #line 88 
      usleep_range(500UL,600UL);
    }
    #line 80 
    i ++;
  }
  #line 91 
  if (i == timeout) {
    #line 93 
    igc_put_hw_semaphore(hw);
    {
      #line 94 
      bool branch_0;
      #line 94 
      struct _ddebug __UNIQUE_ID_ddebug437 = {.modname = (char *)"igc", .function = (char *)"igc_get_hw_semaphore_i225", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_i225.c", .format = (char *)"Driver can\'t access the NVM\n", .lineno = (unsigned int)94U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 94 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug437.key.dd_key_false.key,(_Bool)0);
      #line 94 
      if ((long)((long)((int)branch_0 != 0)) != 0L) {
        #line 94 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug437,igc_get_hw_dev(hw),(char *)"Driver can\'t access the NVM\n");
      }
    }
    #line 95 
    return -1;
  }
  #line 98 
  return 0;
}

#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_i225.c"
s32 igc_acquire_swfw_sync_i225(struct igc_hw *hw, u16 mask)
{
  #line 115 
  u32 swfw_sync;
  #line 111 
  s32 i = 0;
  #line 111 
  s32 timeout = 200;
  #line 112 
  u32 fwmask = (unsigned int)((int)mask << 16);
  #line 113 
  u32 swmask = (unsigned int)mask;
  #line 114 
  s32 ret_val = 0;
  #line 117 
  while (i < timeout) {
    #line 118 
    if (igc_get_hw_semaphore_i225(hw) != 0) {
      #line 119 
      ret_val = -13;
      #line 120 
      goto out;
    }
    #line 123 
    swfw_sync = igc_rd32(hw,23388U);
    #line 124 
    if (((fwmask | swmask) & swfw_sync) == 0U) 
                                               #line 125 
                                               break;
    #line 128 
    igc_put_hw_semaphore(hw);
    #line 129 
    __const_udelay(21475000UL);
    #line 130 
    i ++;
  }
  #line 133 
  if (i == timeout) {
    {
      #line 134 
      bool branch;
      #line 134 
      struct _ddebug __UNIQUE_ID_ddebug438 = {.modname = (char *)"igc", .function = (char *)"igc_acquire_swfw_sync_i225", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_i225.c", .format = (char *)"Driver can\'t access resource, SW_FW_SYNC timeout.\n", .lineno = (unsigned int)134U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 134 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug438.key.dd_key_false.key,(_Bool)0);
      #line 134 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 134 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug438,igc_get_hw_dev(hw),(char *)"Driver can\'t access resource, SW_FW_SYNC timeout.\n");
      }
    }
    #line 135 
    ret_val = -13;
    #line 136 
    goto out;
  }
  #line 139 
  swfw_sync |= swmask;
  {
    #line 141 
    union __anonunion___u_5408 __u;
    #line 140 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 140 
    u8 *hw_addr = (__u.__val);
    #line 140 
    writel(swfw_sync,(void *)(hw_addr + 23388U));
  }
  #line 142 
  igc_put_hw_semaphore(hw);
  #line 143 
  out: 
       #line 143 
  ;
  #line 144 
  return ret_val;
}

#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_i225.c"
void igc_release_swfw_sync_i225(struct igc_hw *hw, u16 mask)
{
  #line 157 
  u32 swfw_sync;
  #line 159 
  while (1) {
    #line 159 
    if (! (igc_get_hw_semaphore_i225(hw) != 0)) 
                                                #line 159 
                                                break;
  }
  #line 162 
  swfw_sync = igc_rd32(hw,23388U);
  #line 163 
  swfw_sync = (unsigned int)(~ ((int)mask)) & swfw_sync;
  {
    #line 165 
    union __anonunion___u_5410 __u;
    #line 164 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 164 
    u8 *hw_addr = (__u.__val);
    #line 164 
    writel(swfw_sync,(void *)(hw_addr + 23388U));
  }
  #line 166 
  igc_put_hw_semaphore(hw);
  #line 167 
  return;
}

#line 179  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_i225.c"
static s32 igc_read_nvm_srrd_i225(struct igc_hw *hw, u16 offset, u16 words, u16 *data)
{
  #line 183 
  u16 i;
  #line 183 
  u16 count;
  #line 182 
  s32 status = 0;
  #line 189 
  i = (unsigned short)0U;
  #line 189 
  while ((int)i < (int)words) {
    {
      #line 190 
      int tmp;
      #line 190 
      if (512 < (int)words - (int)i) 
                                     #line 190 
                                     tmp = 512; else 
                                                     #line 190 
                                                     tmp = (int)words - (int)i;
      #line 190 
      count = (unsigned short)tmp;
      #line 193 
      status = (*(hw->nvm.ops.acquire))(hw);
      #line 194 
      if (status != 0) 
                       #line 195 
                       break;
      #line 197 
      status = igc_read_nvm_eerd(hw,(unsigned short)((int)offset),(unsigned short)((int)count),data + (unsigned long)i);
      #line 198 
      (*(hw->nvm.ops.release))(hw);
      #line 199 
      if (status != 0) 
                       #line 200 
                       break;
    }
    #line 189 
    i = (unsigned short)((unsigned int)i + 512U);
  }
  #line 203 
  return status;
}

#line 218  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_i225.c"
static s32 igc_write_nvm_srwr(struct igc_hw *hw, u16 offset, u16 words, u16 *data)
{
  #line 223 
  u32 i;
  #line 223 
  u32 k;
  #line 221 
  struct igc_nvm_info *nvm = & hw->nvm;
  #line 222 
  u32 attempts = 100000U;
  #line 223 
  u32 eewr = 0U;
  #line 224 
  s32 ret_val = 0;
  #line 229 
  if (((int)nvm->word_size <= (int)offset || (int)words > (int)nvm->word_size - (int)offset) || (unsigned int)words == 0U) {
    {
      #line 231 
      bool branch;
      #line 231 
      struct _ddebug __UNIQUE_ID_ddebug439 = {.modname = (char *)"igc", .function = (char *)"igc_write_nvm_srwr", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_i225.c", .format = (char *)"nvm parameter(s) out of bounds\n", .lineno = (unsigned int)231U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 231 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug439.key.dd_key_false.key,(_Bool)0);
      #line 231 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 231 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug439,igc_get_hw_dev(hw),(char *)"nvm parameter(s) out of bounds\n");
      }
    }
    #line 232 
    ret_val = -1;
    #line 233 
    goto out;
  }
  #line 236 
  i = 0U;
  #line 236 
  while ((unsigned int)words > i) {
    #line 237 
    eewr = ((((unsigned int)offset + i) << 2) | (unsigned int)((int)*(data + (unsigned long)i) << 16)) | 1U;
    {
      #line 242 
      union __anonunion___u_5412 __u;
      #line 241 
      __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
      #line 241 
      u8 *hw_addr = (__u.__val);
      #line 241 
      writel(eewr,(void *)(hw_addr + 73752U));
    }
    #line 243 
    k = 0U;
    #line 243 
    while (k < attempts) {
      {
        #line 244 
        if ((igc_rd32(hw,73752U) & 2U) != 0U) {
          #line 246 
          ret_val = 0;
          #line 247 
          break;
        }
        #line 249 
        __const_udelay(21475UL);
      }
      #line 243 
      k ++;
    }
    #line 252 
    if (ret_val != 0) {
      {
        #line 253 
        bool branch_0;
        #line 253 
        struct _ddebug __UNIQUE_ID_ddebug440 = {.modname = (char *)"igc", .function = (char *)"igc_write_nvm_srwr", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_i225.c", .format = (char *)"Shadow RAM write EEWR timed out\n", .lineno = (unsigned int)253U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 253 
        branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug440.key.dd_key_false.key,(_Bool)0);
        #line 253 
        if ((long)((long)((int)branch_0 != 0)) != 0L) {
          #line 253 
          __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug440,igc_get_hw_dev(hw),(char *)"Shadow RAM write EEWR timed out\n");
        }
      }
      #line 254 
      break;
    }
    #line 236 
    i ++;
  }
  #line 258 
  out: 
       #line 258 
  ;
  #line 259 
  return ret_val;
}

#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_i225.c"
static s32 igc_write_nvm_srwr_i225(struct igc_hw *hw, u16 offset, u16 words, u16 *data)
{
  #line 282 
  u16 i;
  #line 282 
  u16 count;
  #line 281 
  s32 status = 0;
  #line 288 
  i = (unsigned short)0U;
  #line 288 
  while ((int)i < (int)words) {
    {
      #line 289 
      int tmp;
      #line 289 
      if (512 < (int)words - (int)i) 
                                     #line 289 
                                     tmp = 512; else 
                                                     #line 289 
                                                     tmp = (int)words - (int)i;
      #line 289 
      count = (unsigned short)tmp;
      #line 292 
      status = (*(hw->nvm.ops.acquire))(hw);
      #line 293 
      if (status != 0) 
                       #line 294 
                       break;
      #line 296 
      status = igc_write_nvm_srwr(hw,(unsigned short)((int)offset),(unsigned short)((int)count),data + (unsigned long)i);
      #line 297 
      (*(hw->nvm.ops.release))(hw);
      #line 298 
      if (status != 0) 
                       #line 299 
                       break;
    }
    #line 288 
    i = (unsigned short)((unsigned int)i + 512U);
  }
  #line 302 
  return status;
}

#line 312  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_i225.c"
static s32 igc_validate_nvm_checksum_i225(struct igc_hw *hw)
{
  #line 315 
  s32 (*read_op_ptr)(struct igc_hw *, u16 , u16 , u16 *);
  #line 316 
  s32 status = 0;
  #line 318 
  status = (*(hw->nvm.ops.acquire))(hw);
  #line 319 
  if (status != 0) 
                   #line 320 
                   goto out;
  #line 326 
  read_op_ptr = hw->nvm.ops.read;
  #line 327 
  hw->nvm.ops.read = & igc_read_nvm_eerd;
  #line 329 
  status = igc_validate_nvm_checksum(hw);
  #line 332 
  hw->nvm.ops.read = read_op_ptr;
  #line 334 
  (*(hw->nvm.ops.release))(hw);
  #line 336 
  out: 
       #line 336 
  ;
  #line 337 
  return status;
}

#line 344  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_i225.c"
static s32 igc_pool_flash_update_done_i225(struct igc_hw *hw)
{
  #line 347 
  u32 i;
  #line 347 
  u32 reg;
  #line 346 
  s32 ret_val = -1;
  #line 349 
  i = 0U;
  #line 349 
  while (i <= 19999U) {
    #line 350 
    reg = igc_rd32(hw,16U);
    #line 351 
    if ((reg & 67108864U) != 0U) {
      #line 352 
      ret_val = 0;
      #line 353 
      break;
    }
    #line 355 
    __const_udelay(21475UL);
    #line 349 
    i ++;
  }
  #line 358 
  return ret_val;
}

#line 365  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_i225.c"
static s32 igc_update_flash_i225(struct igc_hw *hw)
{
  #line 368 
  u32 flup;
  #line 367 
  s32 ret_val = 0;
  #line 370 
  ret_val = igc_pool_flash_update_done_i225(hw);
  #line 371 
  if (ret_val == -1) {
    {
      #line 372 
      bool branch;
      #line 372 
      struct _ddebug __UNIQUE_ID_ddebug441 = {.modname = (char *)"igc", .function = (char *)"igc_update_flash_i225", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_i225.c", .format = (char *)"Flash update time out\n", .lineno = (unsigned int)372U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 372 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug441.key.dd_key_false.key,(_Bool)0);
      #line 372 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 372 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug441,igc_get_hw_dev(hw),(char *)"Flash update time out\n");
      }
    }
    #line 373 
    goto out;
  }
  #line 376 
  flup = igc_rd32(hw,16U) | 8388608U;
  {
    #line 378 
    union __anonunion___u_5414 __u;
    #line 377 
    __read_once_size((void *)(& hw->hw_addr),(void *)(& __u.__c),8);
    #line 377 
    u8 *hw_addr = (__u.__val);
    #line 377 
    writel(flup,(void *)(hw_addr + 16U));
  }
  #line 379 
  ret_val = igc_pool_flash_update_done_i225(hw);
  #line 380 
  if (ret_val != 0) {
    #line 381 
    bool branch_0;
    #line 381 
    struct _ddebug __UNIQUE_ID_ddebug442 = {.modname = (char *)"igc", .function = (char *)"igc_update_flash_i225", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_i225.c", .format = (char *)"Flash update time out\n", .lineno = (unsigned int)381U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 381 
    branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug442.key.dd_key_false.key,(_Bool)0);
    #line 381 
    if ((long)((long)((int)branch_0 != 0)) != 0L) {
      #line 381 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug442,igc_get_hw_dev(hw),(char *)"Flash update time out\n");
    }
  }
  else {
    #line 383 
    bool branch_1;
    #line 383 
    struct _ddebug __UNIQUE_ID_ddebug443 = {.modname = (char *)"igc", .function = (char *)"igc_update_flash_i225", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_i225.c", .format = (char *)"Flash update complete\n", .lineno = (unsigned int)383U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 383 
    branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug443.key.dd_key_false.key,(_Bool)0);
    #line 383 
    if ((long)((long)((int)branch_1 != 0)) != 0L) {
      #line 383 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug443,igc_get_hw_dev(hw),(char *)"Flash update complete\n");
    }
  }
  #line 385 
  out: 
       #line 385 
  ;
  #line 386 
  return ret_val;
}

#line 397  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_i225.c"
static s32 igc_update_nvm_checksum_i225(struct igc_hw *hw)
{
  #line 401 
  u16 i;
  #line 401 
  u16 nvm_data;
  #line 399 
  u16 checksum = (unsigned short)0U;
  #line 400 
  s32 ret_val = 0;
  #line 407 
  ret_val = igc_read_nvm_eerd(hw,(unsigned short)0,(unsigned short)1,& nvm_data);
  #line 408 
  if (ret_val != 0) {
    {
      #line 409 
      bool branch;
      #line 409 
      struct _ddebug __UNIQUE_ID_ddebug444 = {.modname = (char *)"igc", .function = (char *)"igc_update_nvm_checksum_i225", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_i225.c", .format = (char *)"EEPROM read failed\n", .lineno = (unsigned int)409U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 409 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug444.key.dd_key_false.key,(_Bool)0);
      #line 409 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 409 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug444,igc_get_hw_dev(hw),(char *)"EEPROM read failed\n");
      }
    }
    #line 410 
    goto out;
  }
  #line 413 
  ret_val = (*(hw->nvm.ops.acquire))(hw);
  #line 414 
  if (ret_val != 0) 
                    #line 415 
                    goto out;
  #line 422 
  i = (unsigned short)0U;
  #line 422 
  while ((unsigned int)i <= 62U) {
    #line 423 
    ret_val = igc_read_nvm_eerd(hw,(unsigned short)((int)i),(unsigned short)1,& nvm_data);
    #line 424 
    if (ret_val != 0) {
      #line 425 
      (*(hw->nvm.ops.release))(hw);
      {
        #line 426 
        bool branch_0;
        #line 426 
        struct _ddebug __UNIQUE_ID_ddebug445 = {.modname = (char *)"igc", .function = (char *)"igc_update_nvm_checksum_i225", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_i225.c", .format = (char *)"NVM Read Error while updating checksum.\n", .lineno = (unsigned int)426U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 426 
        branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug445.key.dd_key_false.key,(_Bool)0);
        #line 426 
        if ((long)((long)((int)branch_0 != 0)) != 0L) {
          #line 426 
          __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug445,igc_get_hw_dev(hw),(char *)"NVM Read Error while updating checksum.\n");
        }
      }
      #line 427 
      goto out;
    }
    #line 429 
    checksum = (unsigned short)((int)checksum + (int)nvm_data);
    #line 422 
    i = (u16)((int)i + 1);
  }
  #line 431 
  checksum = (unsigned short)(47802U - (unsigned int)checksum);
  #line 432 
  ret_val = igc_write_nvm_srwr(hw,(unsigned short)63,(unsigned short)1,& checksum);
  #line 434 
  if (ret_val != 0) {
    #line 435 
    (*(hw->nvm.ops.release))(hw);
    {
      #line 436 
      bool branch_1;
      #line 436 
      struct _ddebug __UNIQUE_ID_ddebug446 = {.modname = (char *)"igc", .function = (char *)"igc_update_nvm_checksum_i225", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_i225.c", .format = (char *)"NVM Write Error while updating checksum.\n", .lineno = (unsigned int)436U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 436 
      branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug446.key.dd_key_false.key,(_Bool)0);
      #line 436 
      if ((long)((long)((int)branch_1 != 0)) != 0L) {
        #line 436 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug446,igc_get_hw_dev(hw),(char *)"NVM Write Error while updating checksum.\n");
      }
    }
    #line 437 
    goto out;
  }
  #line 440 
  (*(hw->nvm.ops.release))(hw);
  #line 442 
  ret_val = igc_update_flash_i225(hw);
  #line 444 
  out: 
       #line 444 
  ;
  #line 445 
  return ret_val;
}

#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_i225.c"
bool igc_get_flash_presence_i225(struct igc_hw *hw)
{
  #line 454 
  bool ret_val = (_Bool)0;
  #line 455 
  u32 eec = 0U;
  #line 457 
  eec = igc_rd32(hw,16U);
  #line 458 
  if ((eec & 524288U) != 0U) 
                             #line 459 
                             ret_val = (_Bool)1;
  #line 461 
  return ret_val;
}

#line 468  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/igc/igc_i225.c"
s32 igc_init_nvm_params_i225(struct igc_hw *hw)
{
  #line 470 
  struct igc_nvm_info *nvm = & hw->nvm;
  #line 472 
  nvm->ops.acquire = & igc_acquire_nvm_i225;
  #line 473 
  nvm->ops.release = & igc_release_nvm_i225;
  #line 476 
  if ((int)igc_get_flash_presence_i225(hw) != 0) {
    #line 477 
    hw->nvm.type = igc_nvm_flash_hw;
    #line 478 
    nvm->ops.read = & igc_read_nvm_srrd_i225;
    #line 479 
    nvm->ops.write = & igc_write_nvm_srwr_i225;
    #line 480 
    nvm->ops.validate = & igc_validate_nvm_checksum_i225;
    #line 481 
    nvm->ops.update = & igc_update_nvm_checksum_i225;
  }
  else {
    #line 483 
    hw->nvm.type = igc_nvm_invm;
    #line 484 
    nvm->ops.read = & igc_read_nvm_eerd;
    #line 485 
    nvm->ops.write = (s32 (*)(struct igc_hw *, u16 , u16 , u16 *))0;
    #line 486 
    nvm->ops.validate = (s32 (*)(struct igc_hw *))0;
    #line 487 
    nvm->ops.update = (s32 (*)(struct igc_hw *))0;
  }
  #line 489 
  return 0;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/common/inline_asm.c"
void ldv_inline_asm(void)
{
  #line 24 
  return;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_add(int i, atomic_t *v)
{
  #line 22 
  v->counter += i;
  #line 23 
  return;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_sub(int i, atomic_t *v)
{
  #line 27 
  v->counter -= i;
  #line 28 
  return;
}

#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_sub_and_test(int i, atomic_t *v)
{
  #line 32 
  v->counter -= i;
  #line 33 
  if (v->counter != 0) 
                       #line 34 
                       return 0;
  #line 36 
  return 1;
}

#line 39  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_inc(atomic_t *v)
{
  #line 41 
  (v->counter) ++;
  #line 42 
  return;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_dec(atomic_t *v)
{
  #line 46 
  (v->counter) --;
  #line 47 
  return;
}

#line 49  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_dec_and_test(atomic_t *v)
{
  #line 51 
  (v->counter) --;
  #line 52 
  if (v->counter != 0) 
                       #line 53 
                       return 0;
  #line 55 
  return 1;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_and_test(atomic_t *v)
{
  #line 60 
  (v->counter) ++;
  #line 61 
  if (v->counter != 0) 
                       #line 62 
                       return 0;
  #line 64 
  return 1;
}

#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_return(int i, atomic_t *v)
{
  #line 69 
  v->counter += i;
  #line 70 
  return v->counter;
}

#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_negative(int i, atomic_t *v)
{
  #line 75 
  v->counter += i;
  #line 76 
  return v->counter < 0;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_short(short *v)
{
  #line 81 
  *v = (short)((unsigned int)*v + 1U);
  #line 82 
  return (int)*v;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
static struct task_struct ldv_current;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
struct task_struct *ldv_get_current(void)
{
  #line 28 
  ldv_current.pid = 1;
  #line 29 
  return & ldv_current;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void);
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void);
#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void);
#line 112  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val);
#line 132  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val);
#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 133 
void ldv_check_return_value_probe(int);
#line 141 
#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 23 
void __VERIFIER_assume(int);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static bool __ldv_in_interrupt_context = (_Bool)0;
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void)
{
  #line 31 
  __ldv_in_interrupt_context = (_Bool)1;
  #line 32 
  return;
}

#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void)
{
  #line 37 
  __ldv_in_interrupt_context = (_Bool)0;
  #line 38 
  return;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void)
{
  #line 42 
  return __ldv_in_interrupt_context;
}

#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static int ldv_filter_positive_int(int val)
{
  #line 47 
  __VERIFIER_assume(val <= 0);
  #line 48 
  return val;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val)
{
  #line 57 
  return ldv_filter_positive_int(init_ret_val);
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val)
{
  #line 63 
  ldv_check_return_value_probe(probe_ret_val);
  #line 64 
  return ldv_filter_positive_int(probe_ret_val);
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val)
{
  #line 70 
  return ldv_filter_positive_int(ret_val);
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/list.h"
#line 28 
void ldv_save_allocated_memory_to_list(void *);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data);
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 57 
void *ldv_xzalloc(size_t size);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev)
{
  #line 31 
  if (dev != (struct device *)0 && dev->p != (struct device_private *)0) 
    #line 32 
    return (dev->p)->driver_data;
  #line 34 
  return (void *)0;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data)
{
  #line 45 
  dev->p = (struct device_private *)ldv_xzalloc(8UL);
  #line 46 
  ldv_save_allocated_memory_to_list((void *)dev->p);
  #line 47 
  (dev->p)->driver_data = data;
  #line 49 
  return 0;
}

#line 156  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 156 
void ldv_check_alloc_flags(gfp_t);
#line 48  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 48 
void *ldv_malloc(size_t size);
#line 49 
#line 49 
void *ldv_calloc(size_t nmemb, size_t size);
#line 50 
#line 50 
void *ldv_zalloc(size_t size);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc(size_t size, gfp_t flags)
{
  #line 26 
  void *res;
  #line 28 
  ldv_check_alloc_flags(flags);
  #line 29 
  res = ldv_malloc(size);
  #line 30 
  ldv_save_allocated_memory_to_list(res);
  #line 32 
  return res;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kzalloc(size_t size, gfp_t flags)
{
  #line 37 
  void *res;
  #line 39 
  ldv_check_alloc_flags(flags);
  #line 40 
  res = ldv_zalloc(size);
  #line 41 
  ldv_save_allocated_memory_to_list(res);
  #line 43 
  return res;
}

#line 46  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 48 
  void *res;
  #line 50 
  ldv_check_alloc_flags(flags);
  #line 51 
  res = ldv_malloc(n * size);
  #line 52 
  ldv_save_allocated_memory_to_list(res);
  #line 54 
  return res;
}

#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 59 
  void *res;
  #line 61 
  ldv_check_alloc_flags(flags);
  #line 62 
  res = ldv_calloc(n,size);
  #line 63 
  ldv_save_allocated_memory_to_list(res);
  #line 65 
  return res;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 51 
void ldv_free(void *s);
#line 59 
#line 59 
void *ldv_malloc_unknown_size(void);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 31 
int ldv_undef_int_positive(void);
#line 40 
#line 40 
int ldv_undef_int_nonpositive(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
int ldv_request_firmware(struct firmware **fw)
{
  #line 27 
  int retval;
  #line 26 
  struct firmware *_fw = (struct firmware *)0;
  #line 29 
  retval = ldv_undef_int_nonpositive();
  #line 31 
  if (retval == 0) {
    #line 33 
    _fw = (struct firmware *)ldv_xzalloc(32UL);
    #line 34 
    _fw->data = (u8 *)ldv_malloc_unknown_size();
    #line 35 
    __VERIFIER_assume(_fw->data != (u8 *)0U);
    #line 36 
    _fw->size = (unsigned long)ldv_undef_int_positive();
  }
  #line 39 
  *fw = _fw;
  #line 41 
  return retval;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
void ldv_release_firmware(struct firmware *fw)
{
  #line 46 
  if (fw != (struct firmware *)0) {
    #line 48 
    ldv_free((void *)fw->data);
    #line 49 
    ldv_free((void *)fw);
  }
  #line 51 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/i2c.h"
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values);
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 55 
void *ldv_xmalloc(size_t size);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 23 
int ldv_undef_int(void);
#line 34 
#line 34 
int ldv_undef_int_negative(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values)
{
  #line 27 
  __u8 size;
  #line 28 
  char *bytes;
  #line 30 
  if (ldv_undef_int() != 0) {
    #line 33 
    size = (unsigned char)ldv_undef_int_positive();
    #line 35 
    __VERIFIER_assume((unsigned int)size <= 32U);
    #line 37 
    bytes = (char *)ldv_xmalloc((unsigned long)size);
    #line 39 
    memcpy((void *)values,(void *)bytes,(unsigned long)size);
    #line 40 
    ldv_free((void *)bytes);
    #line 42 
    return (int)size;
  }
  else {
    #line 46 
    return ldv_undef_int_negative();
  }
}

#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
__inline static void v4l2_set_subdevdata(struct v4l2_subdev *sd, void *p)
{
  #line 990 
  sd->dev_priv = p;
  #line 991 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/media/v4l2-common.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops)
{
  #line 26 
  sd->ops = ops;
  #line 27 
  v4l2_set_subdevdata(sd,(void *)client);
  #line 28 
  ldv_dev_set_drvdata(& client->dev,(void *)sd);
  #line 29 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/spi.c"
struct spi_controller *ldv_spi_alloc_master(struct device *host, unsigned int size)
{
  #line 25 
  struct spi_controller *master;
  #line 27 
  master = (struct spi_controller *)ldv_zalloc((unsigned long)size + 2936UL);
  #line 29 
  if (master == (struct spi_controller *)0) 
                                            #line 30 
                                            return (struct spi_controller *)0;
  #line 32 
  ldv_dev_set_drvdata(& master->dev,(void *)(master + 1U));
  #line 34 
  return master;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size)
{
  #line 25 
  struct fb_info *info;
  #line 27 
  info = (struct fb_info *)ldv_zalloc(size + 1568UL);
  #line 29 
  if (info == (struct fb_info *)0) 
                                   #line 30 
                                   return (struct fb_info *)0;
  #line 32 
  if (size != 0UL) 
                   #line 33 
                   info->par = (void *)((char *)info + 1568UL);
  #line 35 
  return info;
}

#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info)
{
  #line 40 
  if (info == (struct fb_info *)0) 
                                   #line 41 
                                   return;
  #line 44 
  ldv_free((void *)info->apertures);
  #line 46 
  ldv_free((void *)info);
  #line 47 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err(void *ptr);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err_or_null(void *ptr);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_ptr_err(void *ptr);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err(void *ptr)
{
  #line 29 
  if ((unsigned long)ptr > 18446744073709547520UL) 
                                                   #line 30 
                                                   return (_Bool)1; else 
                                                                    #line 32 
                                                                    return (_Bool)0;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error)
{
  #line 37 
  unsigned long result;
  #line 39 
  __VERIFIER_assume(error < 0L);
  #line 40 
  __VERIFIER_assume(error >= -4095L);
  #line 41 
  result = 18446744073709547520UL - (unsigned long)error;
  #line 42 
  __VERIFIER_assume(result > 18446744073709547520UL);
  #line 44 
  return (void *)result;
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_ptr_err(void *ptr)
{
  #line 49 
  long result;
  #line 51 
  __VERIFIER_assume((unsigned long)ptr > 18446744073709547520UL);
  #line 52 
  result = (long)(18446744073709547520UL - (unsigned long)ptr);
  #line 53 
  __VERIFIER_assume(result < 0L);
  #line 54 
  __VERIFIER_assume(result >= -4095L);
  #line 56 
  return result;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err_or_null(void *ptr)
{
  #line 61 
  int tmp_0;
  #line 61 
  if (ptr == (void *)0) 
                        #line 61 
                        tmp_0 = 1;
  else {
    #line 61 
    if ((int)ldv_is_err(ptr) != 0) 
                                   #line 61 
                                   tmp_0 = 1; else 
                                                   #line 61 
                                                   tmp_0 = 0;
  }
  #line 61 
  return (_Bool)(tmp_0 != 0);
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/panic.h"
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void)
{
  #line 23 
  __VERIFIER_assume(0);
  #line 24 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 22 
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 23 
#line 23 
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_set_bit(long nr, unsigned long *addr)
{
  #line 24 
  *(addr + (unsigned long)nr / 64UL) |= 1UL << ((unsigned long)nr & 63UL);
  #line 25 
  return;
}

#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_clear_bit(long nr, unsigned long *addr)
{
  #line 29 
  *(addr + (unsigned long)nr / 64UL) &= ~ (1UL << ((unsigned long)nr & 63UL));
  #line 30 
  return;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits)
{
  #line 34 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 35 
  unsigned int size = start + (unsigned int)nbits;
  #line 36 
  int bits_to_set = (int)(64U - (start & 63U));
  #line 37 
  unsigned long mask_to_set = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 39 
  while (nbits - bits_to_set >= 0) {
    #line 40 
    *p |= mask_to_set;
    #line 41 
    nbits -= bits_to_set;
    #line 42 
    bits_to_set = 64;
    #line 43 
    mask_to_set = 18446744073709551615UL;
    #line 44 
    p ++;
  }
  #line 46 
  if (nbits != 0) {
    #line 47 
    mask_to_set = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_set;
    #line 48 
    *p |= mask_to_set;
  }
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits)
{
  #line 54 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 55 
  unsigned int size = start + (unsigned int)nbits;
  #line 56 
  int bits_to_clear = (int)(64U - (start & 63U));
  #line 57 
  unsigned long mask_to_clear = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 59 
  while (nbits - bits_to_clear >= 0) {
    #line 60 
    *p &= ~ mask_to_clear;
    #line 61 
    nbits -= bits_to_clear;
    #line 62 
    bits_to_clear = 64;
    #line 63 
    mask_to_clear = 18446744073709551615UL;
    #line 64 
    p ++;
  }
  #line 66 
  if (nbits != 0) {
    #line 67 
    mask_to_clear = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_clear;
    #line 68 
    *p &= ~ mask_to_clear;
  }
  #line 70 
  return;
}

#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits)
{
  #line 74 
  unsigned int len = (unsigned int)(((unsigned long)nbits + 63UL) / 64UL) * 8U;
  #line 75 
  memset((void *)dst,0,(unsigned long)len);
  #line 76 
  return;
}

#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask)
{
  #line 80 
  unsigned long index;
  #line 80 
  unsigned long end;
  #line 80 
  unsigned long i;
  #line 82 
  again: 
         #line 82 
  ;
  #line 83 
  index = ldv_find_next_zero_bit(map,size,start);
  #line 84 
  index = (index + align_mask) & ~ align_mask;
  #line 85 
  end = (unsigned long)nr + index;
  #line 87 
  if (end > size) 
                  #line 88 
                  return end;
  #line 90 
  i = ldv_find_next_bit(map,end,index);
  #line 92 
  if (i < end) {
    #line 93 
    start = i + 1UL;
    #line 94 
    goto again;
  }
  #line 97 
  return index;
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 25 
void ldv_check_find_bit_offset(unsigned long, unsigned long);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_ffs(unsigned long word)
{
  #line 23 
  int num = 0;
  #line 25 
  if ((word & 4294967295UL) == 0UL) {
    #line 26 
    num += 32;
    #line 27 
    word >>= 32;
  }
  #line 29 
  if ((word & 65535UL) == 0UL) {
    #line 30 
    num += 16;
    #line 31 
    word >>= 16;
  }
  #line 33 
  if ((word & 255UL) == 0UL) {
    #line 34 
    num += 8;
    #line 35 
    word >>= 8;
  }
  #line 37 
  if ((word & 15UL) == 0UL) {
    #line 38 
    num += 4;
    #line 39 
    word >>= 4;
  }
  #line 41 
  if ((word & 3UL) == 0UL) {
    #line 42 
    num += 2;
    #line 43 
    word >>= 2;
  }
  #line 45 
  if ((word & 1UL) == 0UL) 
                           #line 46 
                           num ++;
  #line 48 
  return (unsigned long)num;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_min(unsigned long a, unsigned long b)
{
  #line 53 
  if (a < b) 
             #line 54 
             return a;
  #line 56 
  return b;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_restrict_find_bit_res(unsigned long res, unsigned long size)
{
  #line 62 
  __VERIFIER_assume(1);
  #line 63 
  __VERIFIER_assume(res <= size);
  #line 65 
  return res;
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size)
{
  #line 70 
  unsigned long i;
  #line 72 
  i = 0UL;
  #line 72 
  while (i * 64UL < size) {
    #line 73 
    if (*(addr + i) != 0UL) {
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      return ldv_restrict_find_bit_res(ldv_min(i * 64UL + ldv_ffs(*(addr + i)),size),
                                  size);
    }
    #line 72 
    i ++;
  }
  #line 76 
  return size;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 81 
  unsigned long tmp;
  #line 83 
  ldv_check_find_bit_offset(size,offset);
  #line 85 
  tmp = *(addr + offset / 64UL);
  #line 86 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 87 
  offset &= 18446744073709551552UL;
  #line 89 
  while (tmp == 0UL) {
    #line 90 
    offset += 64UL;
    #line 91 
    if (offset >= size) 
                        #line 92 
                        return size;
    #line 94 
    tmp = *(addr + offset / 64UL);
  }
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 102 
  unsigned long tmp;
  #line 104 
  ldv_check_find_bit_offset(size,offset);
  #line 106 
  tmp = *(addr + offset / 64UL);
  #line 107 
  tmp = ~ tmp;
  #line 108 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 109 
  offset &= 18446744073709551552UL;
  #line 111 
  while (tmp == 0UL) {
    #line 112 
    offset += 64UL;
    #line 113 
    if (offset >= size) 
                        #line 114 
                        return size;
    #line 116 
    tmp = *(addr + offset / 64UL);
    #line 117 
    tmp = ~ tmp;
  }
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
size_t ldv_strlen(char *s);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strcmp(char *cs, char *ct);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
size_t ldv_strlen(char *s)
{
  #line 23 
  unsigned int len = 0U;
  #line 25 
  while ((int)*s != 0) {
    #line 26 
    len ++;
    #line 25 
    s ++;
  }
  #line 28 
  return (unsigned long)len;
}

#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strcmp(char *cs, char *ct)
{
  #line 33 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 34 
    if ((int)*cs != (int)*ct) 
                              #line 35 
                              break;
    #line 33 
    cs ++;
    #line 33 
    ct ++;
  }
  #line 37 
  return (int)*cs - (int)*ct;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count)
{
  #line 42 
  if (count == 0UL) 
                    #line 43 
                    return 0;
  #line 45 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 46 
    if ((int)*cs != (int)*ct) 
                              #line 47 
                              break;
    #line 49 
    count --;
    #line 51 
    if (count == 0UL) 
                      #line 52 
                      break;
    #line 45 
    cs ++;
    #line 45 
    ct ++;
  }
  #line 55 
  return (int)*cs - (int)*ct;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_memcmp(void *cs, void *ct, size_t count)
{
  #line 60 
  unsigned char *su1;
  #line 60 
  unsigned char *su2;
  #line 61 
  int res = 0;
  #line 63 
  su1 = (unsigned char *)cs;
  #line 63 
  su2 = (unsigned char *)ct;
  #line 63 
  while (count != 0UL) {
    #line 64 
    res = (int)*su1 - (int)*su2;
    #line 64 
    if (res != 0) 
                  #line 65 
                  break;
    #line 63 
    su1 ++;
    #line 63 
    su2 ++;
    #line 63 
    count --;
  }
  #line 67 
  return res;
}

#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct)
{
  #line 72 
  size_t cs_len;
  #line 72 
  size_t ct_len;
  #line 74 
  cs_len = ldv_strlen(cs);
  #line 75 
  ct_len = ldv_strlen(ct);
  #line 77 
  while (cs_len >= ct_len) {
    #line 78 
    if (ldv_memcmp((void *)cs,(void *)ct,ct_len) == 0) 
                                                       #line 79 
                                                       return cs;
    #line 81 
    cs_len --;
    #line 82 
    cs ++;
  }
  #line 85 
  return (char *)0;
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/list.c"
void ldv_init_list_head(struct list_head *list)
{
  #line 23 
  list->next = list;
  #line 24 
  list->prev = list;
  #line 25 
  return;
}

#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags);
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags);
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp);
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc(size_t size, gfp_t flags)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(flags);
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kzalloc(size_t size, gfp_t flags)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_flags(flags);
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 45 
  void *res;
  #line 47 
  ldv_check_alloc_flags(flags);
  #line 48 
  res = ldv_malloc(n * size);
  #line 50 
  return res;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 55 
  void *res;
  #line 57 
  ldv_check_alloc_flags(flags);
  #line 58 
  res = ldv_calloc(n,size);
  #line 60 
  return res;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size)
{
  #line 71 
  struct kmem_cache *res;
  #line 72 
  struct ldv_kmem_cache *ldv_res;
  #line 74 
  res = (struct kmem_cache *)ldv_zalloc(16UL);
  #line 76 
  if (res != (struct kmem_cache *)0) {
    #line 77 
    ldv_res = (struct ldv_kmem_cache *)res;
    #line 78 
    ldv_res->name = name;
    #line 79 
    ldv_res->size = size;
  }
  #line 82 
  return res;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 87 
  return ldv_kmalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 92 
  return ldv_kzalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp)
{
  #line 97 
  ldv_free(objp);
  #line 98 
  return;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep)
{
  #line 102 
  ldv_free((void *)cachep);
  #line 103 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/util.c"
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/util.c"
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(gfp);
  #line 28 
  res = ldv_malloc(len);
  #line 30 
  if (res != (void *)0) 
                        #line 31 
                        memcpy(res,src,len);
  #line 33 
  return res;
}

#line 162  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 162 
void ldv_check_alloc_nonatomic(void);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vmalloc(unsigned long size)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_nonatomic();
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vzalloc(unsigned long size)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_nonatomic();
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void ldv_vfree(void *addr)
{
  #line 45 
  ldv_free(addr);
  #line 46 
  return;
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 28 
void *malloc(size_t);
#line 29 
#line 29 
void *calloc(size_t, size_t);
#line 30 
#line 30 
void free(void *);
#line 45 
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures;
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size);
#line 60  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void);
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void);
#line 64  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size);
#line 65  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size);
#line 66  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size);
#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s);
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size);
#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size);
#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size);
#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size);
#line 75  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void);
#line 76  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void);
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void);
#line 83  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size);
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size);
#line 87  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 87 
void *external_allocated_data(void);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures = 1U;
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size)
{
  #line 26 
  void *res;
  #line 28 
  if (ldv_is_memory_alloc_failures != 0U) {
    #line 28 
    if (ldv_undef_int() != 0) 
                              #line 29 
                              return (void *)0;
  }
  #line 32 
  res = malloc(size);
  #line 33 
  __VERIFIER_assume(res != (void *)0);
  #line 34 
  return res;
}

#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size)
{
  #line 39 
  return calloc(nmemb,size);
}

#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size)
{
  #line 44 
  return calloc(1UL,size);
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s)
{
  #line 49 
  free(s);
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size)
{
  #line 54 
  void *res;
  #line 56 
  if (ptr != (void *)0 && size == 0UL) {
    #line 57 
    free(ptr);
    #line 58 
    return (void *)0;
  }
  #line 61 
  if (ptr == (void *)0) {
    #line 62 
    res = malloc(size);
    #line 63 
    return res;
  }
  #line 66 
  if (ldv_undef_int() != 0) {
    #line 68 
    res = malloc(size);
    #line 69 
    __VERIFIER_assume(res != (void *)0);
    #line 71 
    memcpy(res,ptr,size);
    #line 72 
    free(ptr);
    #line 74 
    return res;
  }
  else 
       #line 77 
       return (void *)0;
}

#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size)
{
  #line 82 
  void *res;
  #line 84 
  res = malloc(size);
  #line 85 
  __VERIFIER_assume(res != (void *)0);
  #line 87 
  return res;
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size)
{
  #line 92 
  void *res;
  #line 94 
  res = calloc(nmemb,size);
  #line 95 
  __VERIFIER_assume(res != (void *)0);
  #line 97 
  return res;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size)
{
  #line 102 
  void *res;
  #line 104 
  res = calloc(1UL,size);
  #line 105 
  __VERIFIER_assume(res != (void *)0);
  #line 107 
  return res;
}

#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void)
{
  #line 112 
  void *res;
  #line 114 
  if (ldv_undef_int() != 0) {
    #line 116 
    res = external_allocated_data();
    #line 117 
    __VERIFIER_assume(res != (void *)0);
    #line 118 
    return res;
  }
  else 
       #line 121 
       return (void *)0;
}

#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void)
{
  #line 126 
  void *res;
  #line 128 
  if (ldv_undef_int() != 0) {
    #line 130 
    res = external_allocated_data();
    #line 131 
    memset(res,0,8UL);
    #line 132 
    __VERIFIER_assume(res != (void *)0);
    #line 133 
    return res;
  }
  else 
       #line 136 
       return (void *)0;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void)
{
  #line 141 
  return ldv_reference_calloc_unknown_size();
}

#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size)
{
  #line 146 
  void *res;
  #line 149 
  res = external_allocated_data();
  #line 150 
  __VERIFIER_assume(res != (void *)0);
  #line 152 
  return res;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc(size_t size)
{
  #line 25 
  void *res;
  #line 26 
  res = ldv_reference_malloc(size);
  #line 27 
  if (res != (void *)0) {
    #line 28 
    int tmp_0;
    #line 28 
    if (ldv_is_err(res)) 
                         #line 28 
                         tmp_0 = 0; else 
                                         #line 28 
                                         tmp_0 = 1;
    #line 28 
    __VERIFIER_assume(tmp_0);
  }
  #line 29 
  return res;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc(size_t nmemb, size_t size)
{
  #line 34 
  void *res;
  #line 35 
  res = ldv_reference_calloc(nmemb,size);
  #line 36 
  if (res != (void *)0) {
    #line 37 
    int tmp_0;
    #line 37 
    if (ldv_is_err(res)) 
                         #line 37 
                         tmp_0 = 0; else 
                                         #line 37 
                                         tmp_0 = 1;
    #line 37 
    __VERIFIER_assume(tmp_0);
  }
  #line 38 
  return res;
}

#line 41  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc(size_t size)
{
  #line 43 
  void *res;
  #line 44 
  res = ldv_reference_zalloc(size);
  #line 45 
  if (res != (void *)0) {
    #line 46 
    int tmp_0;
    #line 46 
    if (ldv_is_err(res)) 
                         #line 46 
                         tmp_0 = 0; else 
                                         #line 46 
                                         tmp_0 = 1;
    #line 46 
    __VERIFIER_assume(tmp_0);
  }
  #line 47 
  return res;
}

#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void ldv_free(void *s)
{
  #line 52 
  ldv_reference_free(s);
  #line 53 
  return;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc(size_t size)
{
  #line 57 
  void *res;
  #line 59 
  int tmp_0;
  #line 58 
  res = ldv_reference_xmalloc(size);
  #line 59 
  if (ldv_is_err(res)) 
                       #line 59 
                       tmp_0 = 0; else 
                                       #line 59 
                                       tmp_0 = 1;
  #line 59 
  __VERIFIER_assume(tmp_0);
  #line 60 
  return res;
}

#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size)
{
  #line 65 
  void *res;
  #line 67 
  int tmp_0;
  #line 66 
  res = ldv_reference_xcalloc(nmemb,size);
  #line 67 
  if (ldv_is_err(res)) 
                       #line 67 
                       tmp_0 = 0; else 
                                       #line 67 
                                       tmp_0 = 1;
  #line 67 
  __VERIFIER_assume(tmp_0);
  #line 68 
  return res;
}

#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xzalloc(size_t size)
{
  #line 73 
  void *res;
  #line 75 
  int tmp_0;
  #line 74 
  res = ldv_reference_xzalloc(size);
  #line 75 
  if (ldv_is_err(res)) 
                       #line 75 
                       tmp_0 = 0; else 
                                       #line 75 
                                       tmp_0 = 1;
  #line 75 
  __VERIFIER_assume(tmp_0);
  #line 76 
  return res;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc_unknown_size(void)
{
  #line 81 
  void *res;
  #line 82 
  res = ldv_reference_malloc_unknown_size();
  #line 83 
  if (res != (void *)0) {
    #line 84 
    int tmp_0;
    #line 84 
    if (ldv_is_err(res)) 
                         #line 84 
                         tmp_0 = 0; else 
                                         #line 84 
                                         tmp_0 = 1;
    #line 84 
    __VERIFIER_assume(tmp_0);
  }
  #line 85 
  return res;
}

#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void)
{
  #line 90 
  void *res;
  #line 91 
  res = ldv_reference_calloc_unknown_size();
  #line 92 
  if (res != (void *)0) {
    #line 93 
    int tmp_0;
    #line 93 
    if (ldv_is_err(res)) 
                         #line 93 
                         tmp_0 = 0; else 
                                         #line 93 
                                         tmp_0 = 1;
    #line 93 
    __VERIFIER_assume(tmp_0);
  }
  #line 94 
  return res;
}

#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void)
{
  #line 99 
  void *res;
  #line 100 
  res = ldv_reference_zalloc_unknown_size();
  #line 101 
  if (res != (void *)0) {
    #line 102 
    int tmp_0;
    #line 102 
    if (ldv_is_err(res)) 
                         #line 102 
                         tmp_0 = 0; else 
                                         #line 102 
                                         tmp_0 = 1;
    #line 102 
    __VERIFIER_assume(tmp_0);
  }
  #line 103 
  return res;
}

#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size)
{
  #line 108 
  void *res;
  #line 110 
  int tmp_0;
  #line 109 
  res = ldv_reference_xmalloc_unknown_size(size);
  #line 110 
  if (ldv_is_err(res)) 
                       #line 110 
                       tmp_0 = 0; else 
                                       #line 110 
                                       tmp_0 = 1;
  #line 110 
  __VERIFIER_assume(tmp_0);
  #line 111 
  return res;
}

/* compiler builtin: 
   long __builtin_expect(long exp, long c);   */
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 22 
void __VERIFIER_error(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
long __builtin_expect(long exp, long c)
{
  #line 26 
  return exp;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/gcc.c"
void __builtin_trap(void)
{
  #line 37 
  __VERIFIER_error();
  #line 38 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void);
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void);
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void);
#line 54  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end);
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end);
#line 29 
#line 29 
int __VERIFIER_nondet_int(void);
#line 31 
#line 31 
long __VERIFIER_nondet_long(void);
#line 38 
#line 38 
unsigned int __VERIFIER_nondet_uint(void);
#line 41 
#line 41 
unsigned long __VERIFIER_nondet_ulong(void);
#line 42 
#line 42 
unsigned long long __VERIFIER_nondet_ulonglong(void);
#line 43 
#line 43 
void *__VERIFIER_nondet_pointer(void);
#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int(void)
{
  #line 48 
  int undef_int = __VERIFIER_nondet_int();
  #line 50 
  return undef_int;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void)
{
  #line 56 
  long undef_long = __VERIFIER_nondet_long();
  #line 58 
  return undef_long;
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void)
{
  #line 64 
  unsigned int undef_uint = __VERIFIER_nondet_uint();
  #line 66 
  return undef_uint;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void)
{
  #line 72 
  void *undef_ptr = __VERIFIER_nondet_pointer();
  #line 74 
  return undef_ptr;
}

#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void)
{
  #line 80 
  unsigned long undef_ulong = __VERIFIER_nondet_ulong();
  #line 82 
  return undef_ulong;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void)
{
  #line 88 
  unsigned long long undef_ulonglong = __VERIFIER_nondet_ulonglong();
  #line 90 
  return undef_ulonglong;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_positive(void)
{
  #line 95 
  int ret = ldv_undef_int();
  #line 97 
  __VERIFIER_assume(ret > 0);
  #line 99 
  return ret;
}

#line 102  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_negative(void)
{
  #line 104 
  int ret = ldv_undef_int();
  #line 106 
  __VERIFIER_assume(ret < 0);
  #line 108 
  return ret;
}

#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void)
{
  #line 113 
  int ret = ldv_undef_int();
  #line 115 
  __VERIFIER_assume(ret >= 0);
  #line 117 
  return ret;
}

#line 120  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonpositive(void)
{
  #line 122 
  int ret = ldv_undef_int();
  #line 124 
  __VERIFIER_assume(ret <= 0);
  #line 126 
  return ret;
}

#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void)
{
  #line 131 
  void *ret = ldv_undef_ptr();
  #line 133 
  __VERIFIER_assume(ret != (void *)0);
  #line 135 
  return ret;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end)
{
  #line 141 
  int ret;
  #line 143 
  ret = ldv_undef_int();
  #line 144 
  __VERIFIER_assume(ret >= begin);
  #line 145 
  __VERIFIER_assume(ret <= end);
  #line 147 
  return ret;
}

#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end)
{
  #line 153 
  int ret;
  #line 155 
  ret = begin;
  #line 155 
  while (ret < end) {
    #line 156 
    if (ldv_undef_int() != 0) 
                              #line 157 
                              break;
    #line 155 
    ret ++;
  }
  #line 159 
  return ret;
}

#line 62  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 62 
void ldv_initialize(void);
#line 97 
#line 97 
void ldv_failed_register_netdev(void);
#line 123 
#line 123 
void ldv_pre_probe(void);
#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
#line 35 
int pthread_create(pthread_t *, pthread_attr_t *, void *(*)(void *), void *);
#line 39 
#line 39 
int pthread_join(pthread_t, void **);
#line 102  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/emg/0/environment_model.c"
#line 276 
void emg_dispatch_deregister_12(struct net_device *arg0);
#line 103 
#line 203 
void emg_dispatch_deregister_8(struct pci_driver *arg0);
#line 104 
#line 150 
void emg_dispatch_instance_deregister_4(struct timer_list *arg0);
#line 105 
#line 192 
void emg_dispatch_instance_register_7(struct timer_list *arg0);
#line 106 
#line 159 
void emg_dispatch_irq_deregister_5(int arg0);
#line 107 
#line 223 
void emg_dispatch_irq_register_10(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3);
#line 108 
#line 139 
void emg_dispatch_register_2(struct pci_driver *arg0);
#line 109 
#line 212 
void emg_dispatch_register_9(struct net_device *arg0);
#line 110 
#line 1567 
void *emg_entry_point_insmod(void *arg0);
#line 113 
#line 285 
void *emg_interrupt_interrupt_scenario_igc_intr(void *arg0);
#line 114 
#line 348 
void *emg_interrupt_interrupt_scenario_igc_intr_msi(void *arg0);
#line 115 
#line 411 
void *emg_interrupt_interrupt_scenario_igc_msix_other(void *arg0);
#line 116 
#line 474 
void *emg_interrupt_interrupt_scenario_igc_msix_ring(void *arg0);
#line 118 
#line 537 
void *emg_net_random_allocationless_scenario_igc_ethtool_begin(void *arg0);
#line 119 
#line 1068 
void *emg_pci_pci_scenario_igc_driver(void *arg0);
#line 124 
#line 1246 
void *emg_timer_timer_scenario_6(void *arg0);
#line 126 
#line 1596 
int main(void);
#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_13;
#line 130  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_14;
#line 131  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_15;
#line 132  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_16;
#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_17;
#line 134  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_18;
#line 135  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_19;
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_2(struct pci_driver *arg0)
{
  #line 140 
  int ret;
  #line 141 
  struct emg_struct_pci_scenario_igc_driver_18 *cf_arg_18;
  #line 142 
  cf_arg_18 = (struct emg_struct_pci_scenario_igc_driver_18 *)ldv_xmalloc(16UL);
  #line 143 
  cf_arg_18->arg0 = arg0;
  #line 144 
  ret = pthread_create(& emg_thread_18,(pthread_attr_t *)0,& emg_pci_pci_scenario_igc_driver,(void *)cf_arg_18);
  #line 145 
  __VERIFIER_assume(ret == 0);
  #line 146 
  return;
}

#line 150  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_instance_deregister_4(struct timer_list *arg0)
{
  #line 151 
  int ret;
  #line 152 
  struct emg_struct_timer_scenario_6_19 *cf_arg_19;
  #line 153 
  ret = pthread_join(emg_thread_19,(void **)0);
  #line 154 
  __VERIFIER_assume(ret == 0);
  #line 155 
  return;
}

#line 159  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_irq_deregister_5(int arg0)
{
  #line 160 
  int ret;
  #line 161 
  struct emg_struct_free_irq_5 *cf_arg_13;
  #line 162 
  struct emg_struct_free_irq_5 *cf_arg_14;
  #line 163 
  struct emg_struct_free_irq_5 *cf_arg_15;
  #line 164 
  struct emg_struct_free_irq_5 *cf_arg_16;
  #line 165 
  switch (ldv_undef_int()) {
    #line 166 
    case 0: 
            #line 166 
    ;
    #line 167 
    ret = pthread_join(emg_thread_13,(void **)0);
    #line 168 
    __VERIFIER_assume(ret == 0);
    #line 169 
    break;
    #line 171 
    case 1: 
            #line 171 
    ;
    #line 172 
    ret = pthread_join(emg_thread_14,(void **)0);
    #line 173 
    __VERIFIER_assume(ret == 0);
    #line 174 
    break;
    #line 176 
    case 2: 
            #line 176 
    ;
    #line 177 
    ret = pthread_join(emg_thread_15,(void **)0);
    #line 178 
    __VERIFIER_assume(ret == 0);
    #line 179 
    break;
    #line 181 
    case 3: 
            #line 181 
    ;
    #line 182 
    ret = pthread_join(emg_thread_16,(void **)0);
    #line 183 
    __VERIFIER_assume(ret == 0);
    #line 184 
    break;
    #line 186 
    default: 
             #line 186 
    ;
    #line 186 
    __VERIFIER_assume(0);
  }
  #line 188 
  return;
}

#line 192  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_instance_register_7(struct timer_list *arg0)
{
  #line 193 
  int ret;
  #line 194 
  struct emg_struct_timer_scenario_6_19 *cf_arg_19;
  #line 195 
  cf_arg_19 = (struct emg_struct_timer_scenario_6_19 *)ldv_xmalloc(16UL);
  #line 196 
  cf_arg_19->arg0 = arg0;
  #line 197 
  ret = pthread_create(& emg_thread_19,(pthread_attr_t *)0,& emg_timer_timer_scenario_6,(void *)cf_arg_19);
  #line 198 
  __VERIFIER_assume(ret == 0);
  #line 199 
  return;
}

#line 203  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_deregister_8(struct pci_driver *arg0)
{
  #line 204 
  int ret;
  #line 205 
  struct emg_struct_pci_scenario_igc_driver_18 *cf_arg_18;
  #line 206 
  ret = pthread_join(emg_thread_18,(void **)0);
  #line 207 
  __VERIFIER_assume(ret == 0);
  #line 208 
  return;
}

#line 212  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_9(struct net_device *arg0)
{
  #line 213 
  int ret;
  #line 214 
  struct emg_struct_random_allocationless_scenario_igc_ethtool_begin_17 *cf_arg_17;
  #line 215 
  cf_arg_17 = (struct emg_struct_random_allocationless_scenario_igc_ethtool_begin_17 *)ldv_xmalloc(16UL);
  #line 216 
  cf_arg_17->arg0 = arg0;
  #line 217 
  ret = pthread_create(& emg_thread_17,(pthread_attr_t *)0,& emg_net_random_allocationless_scenario_igc_ethtool_begin,(void *)cf_arg_17);
  #line 218 
  __VERIFIER_assume(ret == 0);
  #line 219 
  return;
}

#line 223  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_irq_register_10(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3)
{
  #line 224 
  int ret;
  #line 225 
  struct emg_struct_interrupt_scenario_igc_intr_13 *cf_arg_13;
  #line 226 
  struct emg_struct_interrupt_scenario_igc_intr_13 *cf_arg_14;
  #line 227 
  struct emg_struct_interrupt_scenario_igc_intr_13 *cf_arg_15;
  #line 228 
  struct emg_struct_interrupt_scenario_igc_intr_13 *cf_arg_16;
  #line 229 
  switch (ldv_undef_int()) {
    #line 230 
    case 0: 
            #line 230 
    ;
    #line 231 
    cf_arg_13 = (struct emg_struct_interrupt_scenario_igc_intr_13 *)ldv_xmalloc(40UL);
    #line 232 
    cf_arg_13->arg0 = arg0;
    #line 233 
    cf_arg_13->arg1 = arg1;
    #line 234 
    cf_arg_13->arg2 = arg2;
    #line 235 
    cf_arg_13->arg3 = arg3;
    #line 236 
    ret = pthread_create(& emg_thread_13,(pthread_attr_t *)0,& emg_interrupt_interrupt_scenario_igc_intr,(void *)cf_arg_13);
    #line 237 
    __VERIFIER_assume(ret == 0);
    #line 238 
    break;
    #line 240 
    case 1: 
            #line 240 
    ;
    #line 241 
    cf_arg_14 = (struct emg_struct_interrupt_scenario_igc_intr_13 *)ldv_xmalloc(40UL);
    #line 242 
    cf_arg_14->arg0 = arg0;
    #line 243 
    cf_arg_14->arg1 = arg1;
    #line 244 
    cf_arg_14->arg2 = arg2;
    #line 245 
    cf_arg_14->arg3 = arg3;
    #line 246 
    ret = pthread_create(& emg_thread_14,(pthread_attr_t *)0,& emg_interrupt_interrupt_scenario_igc_intr_msi,(void *)cf_arg_14);
    #line 247 
    __VERIFIER_assume(ret == 0);
    #line 248 
    break;
    #line 250 
    case 2: 
            #line 250 
    ;
    #line 251 
    cf_arg_15 = (struct emg_struct_interrupt_scenario_igc_intr_13 *)ldv_xmalloc(40UL);
    #line 252 
    cf_arg_15->arg0 = arg0;
    #line 253 
    cf_arg_15->arg1 = arg1;
    #line 254 
    cf_arg_15->arg2 = arg2;
    #line 255 
    cf_arg_15->arg3 = arg3;
    #line 256 
    ret = pthread_create(& emg_thread_15,(pthread_attr_t *)0,& emg_interrupt_interrupt_scenario_igc_msix_other,(void *)cf_arg_15);
    #line 257 
    __VERIFIER_assume(ret == 0);
    #line 258 
    break;
    #line 260 
    case 3: 
            #line 260 
    ;
    #line 261 
    cf_arg_16 = (struct emg_struct_interrupt_scenario_igc_intr_13 *)ldv_xmalloc(40UL);
    #line 262 
    cf_arg_16->arg0 = arg0;
    #line 263 
    cf_arg_16->arg1 = arg1;
    #line 264 
    cf_arg_16->arg2 = arg2;
    #line 265 
    cf_arg_16->arg3 = arg3;
    #line 266 
    ret = pthread_create(& emg_thread_16,(pthread_attr_t *)0,& emg_interrupt_interrupt_scenario_igc_msix_ring,(void *)cf_arg_16);
    #line 267 
    __VERIFIER_assume(ret == 0);
    #line 268 
    break;
    #line 270 
    default: 
             #line 270 
    ;
    #line 270 
    __VERIFIER_assume(0);
  }
  #line 272 
  return;
}

#line 276  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_deregister_12(struct net_device *arg0)
{
  #line 277 
  int ret;
  #line 278 
  struct emg_struct_random_allocationless_scenario_igc_ethtool_begin_17 *cf_arg_17;
  #line 279 
  ret = pthread_join(emg_thread_17,(void **)0);
  #line 280 
  __VERIFIER_assume(ret == 0);
  #line 281 
  return;
}

#line 285  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/emg/0/environment_model.c"
void *emg_interrupt_interrupt_scenario_igc_intr(void *arg0)
{
  #line 288 
  enum irqreturn (*emg_13_callback)(int , void *);
  #line 289 
  void *emg_13_data;
  #line 290 
  int emg_13_line;
  #line 291 
  enum irqreturn emg_13_ret_val;
  #line 292 
  enum irqreturn (*emg_13_thread)(int , void *);
  #line 294 
  struct emg_struct_interrupt_scenario_igc_intr_13 *data = (struct emg_struct_interrupt_scenario_igc_intr_13 *)arg0;
  #line 297 
  emg_13_callback = & emg_wrapper_igc_intr;
  #line 300 
  if (data != (struct emg_struct_interrupt_scenario_igc_intr_13 *)0) {
    #line 301 
    emg_13_line = data->arg0;
    #line 302 
    emg_13_callback = data->arg1;
    #line 303 
    emg_13_thread = data->arg2;
    #line 304 
    emg_13_data = data->arg3;
    #line 305 
    ldv_free((void *)data);
  }
  #line 311 
  ldv_switch_to_interrupt_context();
  #line 315 
  emg_13_ret_val = emg_wrapper_igc_intr(emg_13_line,emg_13_data);
  #line 320 
  ldv_switch_to_process_context();
  #line 323 
  if (ldv_undef_int() != 0) {
    #line 325 
    __VERIFIER_assume(emg_13_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    #line 329 
    if (emg_13_thread != (enum irqreturn (*)(int , void *))0) 
                                                              #line 330 
                                                              (*emg_13_thread)(emg_13_line,emg_13_data);
  }
  else 
       #line 335 
       __VERIFIER_assume(emg_13_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  #line 343 
  return (void *)0;
}

#line 348  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/emg/0/environment_model.c"
void *emg_interrupt_interrupt_scenario_igc_intr_msi(void *arg0)
{
  #line 351 
  enum irqreturn (*emg_14_callback)(int , void *);
  #line 352 
  void *emg_14_data;
  #line 353 
  int emg_14_line;
  #line 354 
  enum irqreturn emg_14_ret_val;
  #line 355 
  enum irqreturn (*emg_14_thread)(int , void *);
  #line 357 
  struct emg_struct_interrupt_scenario_igc_intr_13 *data = (struct emg_struct_interrupt_scenario_igc_intr_13 *)arg0;
  #line 360 
  emg_14_callback = & emg_wrapper_igc_intr_msi;
  #line 363 
  if (data != (struct emg_struct_interrupt_scenario_igc_intr_13 *)0) {
    #line 364 
    emg_14_line = data->arg0;
    #line 365 
    emg_14_callback = data->arg1;
    #line 366 
    emg_14_thread = data->arg2;
    #line 367 
    emg_14_data = data->arg3;
    #line 368 
    ldv_free((void *)data);
  }
  #line 374 
  ldv_switch_to_interrupt_context();
  #line 378 
  emg_14_ret_val = emg_wrapper_igc_intr_msi(emg_14_line,emg_14_data);
  #line 383 
  ldv_switch_to_process_context();
  #line 386 
  if (ldv_undef_int() != 0) {
    #line 388 
    __VERIFIER_assume(emg_14_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    #line 392 
    if (emg_14_thread != (enum irqreturn (*)(int , void *))0) 
                                                              #line 393 
                                                              (*emg_14_thread)(emg_14_line,emg_14_data);
  }
  else 
       #line 398 
       __VERIFIER_assume(emg_14_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  #line 406 
  return (void *)0;
}

#line 411  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/emg/0/environment_model.c"
void *emg_interrupt_interrupt_scenario_igc_msix_other(void *arg0)
{
  #line 414 
  enum irqreturn (*emg_15_callback)(int , void *);
  #line 415 
  void *emg_15_data;
  #line 416 
  int emg_15_line;
  #line 417 
  enum irqreturn emg_15_ret_val;
  #line 418 
  enum irqreturn (*emg_15_thread)(int , void *);
  #line 420 
  struct emg_struct_interrupt_scenario_igc_intr_13 *data = (struct emg_struct_interrupt_scenario_igc_intr_13 *)arg0;
  #line 423 
  emg_15_callback = & emg_wrapper_igc_msix_other;
  #line 426 
  if (data != (struct emg_struct_interrupt_scenario_igc_intr_13 *)0) {
    #line 427 
    emg_15_line = data->arg0;
    #line 428 
    emg_15_callback = data->arg1;
    #line 429 
    emg_15_thread = data->arg2;
    #line 430 
    emg_15_data = data->arg3;
    #line 431 
    ldv_free((void *)data);
  }
  #line 437 
  ldv_switch_to_interrupt_context();
  #line 441 
  emg_15_ret_val = emg_wrapper_igc_msix_other(emg_15_line,emg_15_data);
  #line 446 
  ldv_switch_to_process_context();
  #line 449 
  if (ldv_undef_int() != 0) {
    #line 451 
    __VERIFIER_assume(emg_15_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    #line 455 
    if (emg_15_thread != (enum irqreturn (*)(int , void *))0) 
                                                              #line 456 
                                                              (*emg_15_thread)(emg_15_line,emg_15_data);
  }
  else 
       #line 461 
       __VERIFIER_assume(emg_15_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  #line 469 
  return (void *)0;
}

#line 474  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/emg/0/environment_model.c"
void *emg_interrupt_interrupt_scenario_igc_msix_ring(void *arg0)
{
  #line 477 
  enum irqreturn (*emg_16_callback)(int , void *);
  #line 478 
  void *emg_16_data;
  #line 479 
  int emg_16_line;
  #line 480 
  enum irqreturn emg_16_ret_val;
  #line 481 
  enum irqreturn (*emg_16_thread)(int , void *);
  #line 483 
  struct emg_struct_interrupt_scenario_igc_intr_13 *data = (struct emg_struct_interrupt_scenario_igc_intr_13 *)arg0;
  #line 486 
  emg_16_callback = & emg_wrapper_igc_msix_ring;
  #line 489 
  if (data != (struct emg_struct_interrupt_scenario_igc_intr_13 *)0) {
    #line 490 
    emg_16_line = data->arg0;
    #line 491 
    emg_16_callback = data->arg1;
    #line 492 
    emg_16_thread = data->arg2;
    #line 493 
    emg_16_data = data->arg3;
    #line 494 
    ldv_free((void *)data);
  }
  #line 500 
  ldv_switch_to_interrupt_context();
  #line 504 
  emg_16_ret_val = emg_wrapper_igc_msix_ring(emg_16_line,emg_16_data);
  #line 509 
  ldv_switch_to_process_context();
  #line 512 
  if (ldv_undef_int() != 0) {
    #line 514 
    __VERIFIER_assume(emg_16_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    #line 518 
    if (emg_16_thread != (enum irqreturn (*)(int , void *))0) 
                                                              #line 519 
                                                              (*emg_16_thread)(emg_16_line,emg_16_data);
  }
  else 
       #line 524 
       __VERIFIER_assume(emg_16_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  #line 532 
  return (void *)0;
}

#line 537  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/emg/0/environment_model.c"
void *emg_net_random_allocationless_scenario_igc_ethtool_begin(void *arg0)
{
  #line 540 
  struct net_device *emg_17_container;
  #line 541 
  struct sk_buff *emg_17_emg_param_0_21;
  #line 542 
  struct sk_buff *emg_17_emg_param_0_26;
  #line 543 
  struct ethtool_channels *emg_17_emg_param_1_0;
  #line 544 
  struct ethtool_coalesce *emg_17_emg_param_1_1;
  #line 545 
  struct ethtool_ringparam *emg_17_emg_param_1_11;
  #line 546 
  unsigned int *emg_17_emg_param_1_12;
  #line 547 
  struct ethtool_rxnfc *emg_17_emg_param_1_15;
  #line 548 
  int emg_17_emg_param_1_17;
  #line 549 
  unsigned int emg_17_emg_param_1_18;
  #line 550 
  struct ethtool_drvinfo *emg_17_emg_param_1_2;
  #line 551 
  int emg_17_emg_param_1_20;
  #line 552 
  unsigned long long emg_17_emg_param_1_23;
  #line 553 
  unsigned long long emg_17_emg_param_1_24;
  #line 554 
  void *emg_17_emg_param_1_25;
  #line 555 
  struct ethtool_channels *emg_17_emg_param_1_27;
  #line 556 
  struct ethtool_coalesce *emg_17_emg_param_1_28;
  #line 557 
  struct ethtool_eeprom *emg_17_emg_param_1_29;
  #line 558 
  struct ethtool_eeprom *emg_17_emg_param_1_3;
  #line 559 
  struct ethtool_link_ksettings *emg_17_emg_param_1_31;
  #line 560 
  unsigned int emg_17_emg_param_1_32;
  #line 561 
  struct ethtool_pauseparam *emg_17_emg_param_1_33;
  #line 562 
  unsigned int emg_17_emg_param_1_34;
  #line 563 
  struct ethtool_ringparam *emg_17_emg_param_1_35;
  #line 564 
  unsigned int *emg_17_emg_param_1_36;
  #line 565 
  struct ethtool_rxnfc *emg_17_emg_param_1_39;
  #line 566 
  struct ethtool_stats *emg_17_emg_param_1_5;
  #line 567 
  struct ethtool_link_ksettings *emg_17_emg_param_1_7;
  #line 568 
  struct ethtool_pauseparam *emg_17_emg_param_1_8;
  #line 569 
  struct ethtool_regs *emg_17_emg_param_1_9;
  #line 570 
  void *emg_17_emg_param_2_10;
  #line 571 
  unsigned char *emg_17_emg_param_2_13;
  #line 572 
  unsigned int *emg_17_emg_param_2_16;
  #line 573 
  unsigned char *emg_17_emg_param_2_19;
  #line 574 
  unsigned long long emg_17_emg_param_2_22;
  #line 575 
  unsigned char *emg_17_emg_param_2_30;
  #line 576 
  unsigned char *emg_17_emg_param_2_37;
  #line 577 
  unsigned char *emg_17_emg_param_2_4;
  #line 578 
  unsigned long long *emg_17_emg_param_2_6;
  #line 579 
  unsigned char *emg_17_emg_param_3_14;
  #line 580 
  unsigned char emg_17_emg_param_3_38;
  #line 581 
  int emg_repeat_cnt_call_17 = 1;
  #line 583 
  struct emg_struct_random_allocationless_scenario_igc_ethtool_begin_17 *data = (struct emg_struct_random_allocationless_scenario_igc_ethtool_begin_17 *)arg0;
  #line 588 
  if (data != (struct emg_struct_random_allocationless_scenario_igc_ethtool_begin_17 *)0) {
    #line 589 
    emg_17_container = data->arg0;
    #line 590 
    ldv_free((void *)data);
  }
  #line 595 
  goto emg_call_17;
  #line 599 
  return (void *)0;
  #line 602 
  emg_call_17: 
               #line 602 
  ;
  #line 603 
  switch (ldv_undef_int()) {
    #line 604 
    case 0: 
            #line 604 
    ;
    #line 606 
    emg_17_emg_param_1_39 = (struct ethtool_rxnfc *)ldv_xmalloc_unknown_size(0UL);
    #line 606 
    emg_17_emg_param_1_39 = emg_17_emg_param_1_39;
    #line 610 
    emg_wrapper_igc_set_rxnfc(emg_17_container,emg_17_emg_param_1_39);
    #line 614 
    ldv_free((void *)emg_17_emg_param_1_39);
    #line 616 
    break;
    #line 618 
    case 1: 
            #line 618 
    ;
    #line 620 
    emg_17_emg_param_1_36 = (unsigned int *)ldv_xmalloc_unknown_size(0UL);
    #line 620 
    emg_17_emg_param_1_36 = emg_17_emg_param_1_36;
    #line 621 
    emg_17_emg_param_2_37 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 621 
    emg_17_emg_param_2_37 = emg_17_emg_param_2_37;
    #line 625 
    emg_wrapper_igc_set_rxfh(emg_17_container,emg_17_emg_param_1_36,emg_17_emg_param_2_37,(unsigned char)((int)emg_17_emg_param_3_38));
    #line 629 
    ldv_free((void *)emg_17_emg_param_1_36);
    #line 630 
    ldv_free((void *)emg_17_emg_param_2_37);
    #line 632 
    break;
    #line 634 
    case 2: 
            #line 634 
    ;
    #line 636 
    emg_17_emg_param_1_35 = (struct ethtool_ringparam *)ldv_xmalloc_unknown_size(0UL);
    #line 636 
    emg_17_emg_param_1_35 = emg_17_emg_param_1_35;
    #line 640 
    emg_wrapper_igc_set_ringparam(emg_17_container,emg_17_emg_param_1_35);
    #line 644 
    ldv_free((void *)emg_17_emg_param_1_35);
    #line 646 
    break;
    #line 648 
    case 3: 
            #line 648 
    ;
    #line 650 
    emg_wrapper_igc_set_priv_flags(emg_17_container,emg_17_emg_param_1_34);
    #line 652 
    break;
    #line 654 
    case 4: 
            #line 654 
    ;
    #line 656 
    emg_17_emg_param_1_33 = (struct ethtool_pauseparam *)ldv_xmalloc_unknown_size(0UL);
    #line 656 
    emg_17_emg_param_1_33 = emg_17_emg_param_1_33;
    #line 660 
    emg_wrapper_igc_set_pauseparam(emg_17_container,emg_17_emg_param_1_33);
    #line 664 
    ldv_free((void *)emg_17_emg_param_1_33);
    #line 666 
    break;
    #line 668 
    case 5: 
            #line 668 
    ;
    #line 670 
    emg_wrapper_igc_set_msglevel(emg_17_container,emg_17_emg_param_1_32);
    #line 672 
    break;
    #line 674 
    case 6: 
            #line 674 
    ;
    #line 676 
    emg_17_emg_param_1_31 = (struct ethtool_link_ksettings *)ldv_xmalloc_unknown_size(0UL);
    #line 676 
    emg_17_emg_param_1_31 = emg_17_emg_param_1_31;
    #line 680 
    emg_wrapper_igc_set_link_ksettings(emg_17_container,emg_17_emg_param_1_31);
    #line 684 
    ldv_free((void *)emg_17_emg_param_1_31);
    #line 686 
    break;
    #line 688 
    case 7: 
            #line 688 
    ;
    #line 690 
    emg_17_emg_param_1_29 = (struct ethtool_eeprom *)ldv_xmalloc_unknown_size(0UL);
    #line 690 
    emg_17_emg_param_1_29 = emg_17_emg_param_1_29;
    #line 691 
    emg_17_emg_param_2_30 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 691 
    emg_17_emg_param_2_30 = emg_17_emg_param_2_30;
    #line 695 
    emg_wrapper_igc_set_eeprom(emg_17_container,emg_17_emg_param_1_29,emg_17_emg_param_2_30);
    #line 699 
    ldv_free((void *)emg_17_emg_param_1_29);
    #line 700 
    ldv_free((void *)emg_17_emg_param_2_30);
    #line 702 
    break;
    #line 704 
    case 8: 
            #line 704 
    ;
    #line 706 
    emg_17_emg_param_1_28 = (struct ethtool_coalesce *)ldv_xmalloc_unknown_size(0UL);
    #line 706 
    emg_17_emg_param_1_28 = emg_17_emg_param_1_28;
    #line 710 
    emg_wrapper_igc_set_coalesce(emg_17_container,emg_17_emg_param_1_28);
    #line 714 
    ldv_free((void *)emg_17_emg_param_1_28);
    #line 716 
    break;
    #line 718 
    case 9: 
            #line 718 
    ;
    #line 720 
    emg_17_emg_param_1_27 = (struct ethtool_channels *)ldv_xmalloc_unknown_size(0UL);
    #line 720 
    emg_17_emg_param_1_27 = emg_17_emg_param_1_27;
    #line 724 
    emg_wrapper_igc_set_channels(emg_17_container,emg_17_emg_param_1_27);
    #line 728 
    ldv_free((void *)emg_17_emg_param_1_27);
    #line 730 
    break;
    #line 732 
    case 10: 
             #line 732 
    ;
    #line 734 
    emg_wrapper_igc_nway_reset(emg_17_container);
    #line 736 
    break;
    #line 738 
    case 11: 
             #line 738 
    ;
    #line 740 
    emg_17_emg_param_0_26 = (struct sk_buff *)ldv_xmalloc_unknown_size(0UL);
    #line 740 
    emg_17_emg_param_0_26 = emg_17_emg_param_0_26;
    #line 744 
    emg_wrapper_igc_xmit_frame(emg_17_emg_param_0_26,emg_17_container);
    #line 748 
    ldv_free((void *)emg_17_emg_param_0_26);
    #line 750 
    break;
    #line 752 
    case 12: 
             #line 752 
    ;
    #line 754 
    emg_wrapper_igc_set_rx_mode(emg_17_container);
    #line 756 
    break;
    #line 758 
    case 13: 
             #line 758 
    ;
    #line 760 
    emg_17_emg_param_1_25 = ldv_xmalloc_unknown_size(0UL);
    #line 760 
    emg_17_emg_param_1_25 = emg_17_emg_param_1_25;
    #line 764 
    emg_wrapper_igc_set_mac(emg_17_container,emg_17_emg_param_1_25);
    #line 768 
    ldv_free(emg_17_emg_param_1_25);
    #line 770 
    break;
    #line 772 
    case 14: 
             #line 772 
    ;
    #line 774 
    emg_wrapper_igc_set_features(emg_17_container,emg_17_emg_param_1_24);
    #line 776 
    break;
    #line 778 
    case 15: 
             #line 778 
    ;
    #line 780 
    emg_wrapper_igc_get_stats(emg_17_container);
    #line 782 
    break;
    #line 784 
    case 16: 
             #line 784 
    ;
    #line 786 
    emg_wrapper_igc_fix_features(emg_17_container,emg_17_emg_param_1_23);
    #line 788 
    break;
    #line 790 
    case 17: 
             #line 790 
    ;
    #line 792 
    emg_17_emg_param_0_21 = (struct sk_buff *)ldv_xmalloc_unknown_size(0UL);
    #line 792 
    emg_17_emg_param_0_21 = emg_17_emg_param_0_21;
    #line 796 
    emg_wrapper_igc_features_check(emg_17_emg_param_0_21,emg_17_container,emg_17_emg_param_2_22);
    #line 800 
    ldv_free((void *)emg_17_emg_param_0_21);
    #line 802 
    break;
    #line 804 
    case 18: 
             #line 804 
    ;
    #line 806 
    emg_wrapper_igc_change_mtu(emg_17_container,emg_17_emg_param_1_20);
    #line 808 
    break;
    #line 810 
    case 19: 
             #line 810 
    ;
    #line 812 
    emg_17_emg_param_2_19 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 812 
    emg_17_emg_param_2_19 = emg_17_emg_param_2_19;
    #line 816 
    emg_wrapper_igc_get_strings(emg_17_container,emg_17_emg_param_1_18,emg_17_emg_param_2_19);
    #line 820 
    ldv_free((void *)emg_17_emg_param_2_19);
    #line 822 
    break;
    #line 824 
    case 20: 
             #line 824 
    ;
    #line 826 
    emg_wrapper_igc_get_sset_count(emg_17_container,emg_17_emg_param_1_17);
    #line 828 
    break;
    #line 830 
    case 21: 
             #line 830 
    ;
    #line 832 
    emg_17_emg_param_1_15 = (struct ethtool_rxnfc *)ldv_xmalloc_unknown_size(0UL);
    #line 832 
    emg_17_emg_param_1_15 = emg_17_emg_param_1_15;
    #line 833 
    emg_17_emg_param_2_16 = (unsigned int *)ldv_xmalloc_unknown_size(0UL);
    #line 833 
    emg_17_emg_param_2_16 = emg_17_emg_param_2_16;
    #line 837 
    emg_wrapper_igc_get_rxnfc(emg_17_container,emg_17_emg_param_1_15,emg_17_emg_param_2_16);
    #line 841 
    ldv_free((void *)emg_17_emg_param_1_15);
    #line 842 
    ldv_free((void *)emg_17_emg_param_2_16);
    #line 844 
    break;
    #line 846 
    case 22: 
             #line 846 
    ;
    #line 848 
    emg_wrapper_igc_get_rxfh_indir_size(emg_17_container);
    #line 850 
    break;
    #line 852 
    case 23: 
             #line 852 
    ;
    #line 854 
    emg_17_emg_param_1_12 = (unsigned int *)ldv_xmalloc_unknown_size(0UL);
    #line 854 
    emg_17_emg_param_1_12 = emg_17_emg_param_1_12;
    #line 855 
    emg_17_emg_param_2_13 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 855 
    emg_17_emg_param_2_13 = emg_17_emg_param_2_13;
    #line 856 
    emg_17_emg_param_3_14 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 856 
    emg_17_emg_param_3_14 = emg_17_emg_param_3_14;
    #line 860 
    emg_wrapper_igc_get_rxfh(emg_17_container,emg_17_emg_param_1_12,emg_17_emg_param_2_13,emg_17_emg_param_3_14);
    #line 864 
    ldv_free((void *)emg_17_emg_param_1_12);
    #line 865 
    ldv_free((void *)emg_17_emg_param_2_13);
    #line 866 
    ldv_free((void *)emg_17_emg_param_3_14);
    #line 868 
    break;
    #line 870 
    case 24: 
             #line 870 
    ;
    #line 872 
    emg_17_emg_param_1_11 = (struct ethtool_ringparam *)ldv_xmalloc_unknown_size(0UL);
    #line 872 
    emg_17_emg_param_1_11 = emg_17_emg_param_1_11;
    #line 876 
    emg_wrapper_igc_get_ringparam(emg_17_container,emg_17_emg_param_1_11);
    #line 880 
    ldv_free((void *)emg_17_emg_param_1_11);
    #line 882 
    break;
    #line 884 
    case 25: 
             #line 884 
    ;
    #line 886 
    emg_wrapper_igc_get_regs_len(emg_17_container);
    #line 888 
    break;
    #line 890 
    case 26: 
             #line 890 
    ;
    #line 892 
    emg_17_emg_param_1_9 = (struct ethtool_regs *)ldv_xmalloc_unknown_size(0UL);
    #line 892 
    emg_17_emg_param_1_9 = emg_17_emg_param_1_9;
    #line 893 
    emg_17_emg_param_2_10 = ldv_xmalloc_unknown_size(0UL);
    #line 893 
    emg_17_emg_param_2_10 = emg_17_emg_param_2_10;
    #line 897 
    emg_wrapper_igc_get_regs(emg_17_container,emg_17_emg_param_1_9,emg_17_emg_param_2_10);
    #line 901 
    ldv_free((void *)emg_17_emg_param_1_9);
    #line 902 
    ldv_free(emg_17_emg_param_2_10);
    #line 904 
    break;
    #line 906 
    case 27: 
             #line 906 
    ;
    #line 908 
    emg_wrapper_igc_get_priv_flags(emg_17_container);
    #line 910 
    break;
    #line 912 
    case 28: 
             #line 912 
    ;
    #line 914 
    emg_17_emg_param_1_8 = (struct ethtool_pauseparam *)ldv_xmalloc_unknown_size(0UL);
    #line 914 
    emg_17_emg_param_1_8 = emg_17_emg_param_1_8;
    #line 918 
    emg_wrapper_igc_get_pauseparam(emg_17_container,emg_17_emg_param_1_8);
    #line 922 
    ldv_free((void *)emg_17_emg_param_1_8);
    #line 924 
    break;
    #line 926 
    case 29: 
             #line 926 
    ;
    #line 928 
    emg_wrapper_igc_get_msglevel(emg_17_container);
    #line 930 
    break;
    #line 932 
    case 30: 
             #line 932 
    ;
    #line 934 
    emg_17_emg_param_1_7 = (struct ethtool_link_ksettings *)ldv_xmalloc_unknown_size(0UL);
    #line 934 
    emg_17_emg_param_1_7 = emg_17_emg_param_1_7;
    #line 938 
    emg_wrapper_igc_get_link_ksettings(emg_17_container,emg_17_emg_param_1_7);
    #line 942 
    ldv_free((void *)emg_17_emg_param_1_7);
    #line 944 
    break;
    #line 946 
    case 31: 
             #line 946 
    ;
    #line 948 
    emg_wrapper_igc_get_link(emg_17_container);
    #line 950 
    break;
    #line 952 
    case 32: 
             #line 952 
    ;
    #line 954 
    emg_17_emg_param_1_5 = (struct ethtool_stats *)ldv_xmalloc_unknown_size(0UL);
    #line 954 
    emg_17_emg_param_1_5 = emg_17_emg_param_1_5;
    #line 955 
    emg_17_emg_param_2_6 = (unsigned long long *)ldv_xmalloc_unknown_size(0UL);
    #line 955 
    emg_17_emg_param_2_6 = emg_17_emg_param_2_6;
    #line 959 
    emg_wrapper_igc_get_ethtool_stats(emg_17_container,emg_17_emg_param_1_5,emg_17_emg_param_2_6);
    #line 963 
    ldv_free((void *)emg_17_emg_param_1_5);
    #line 964 
    ldv_free((void *)emg_17_emg_param_2_6);
    #line 966 
    break;
    #line 968 
    case 33: 
             #line 968 
    ;
    #line 970 
    emg_wrapper_igc_get_eeprom_len(emg_17_container);
    #line 972 
    break;
    #line 974 
    case 34: 
             #line 974 
    ;
    #line 976 
    emg_17_emg_param_1_3 = (struct ethtool_eeprom *)ldv_xmalloc_unknown_size(0UL);
    #line 976 
    emg_17_emg_param_1_3 = emg_17_emg_param_1_3;
    #line 977 
    emg_17_emg_param_2_4 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 977 
    emg_17_emg_param_2_4 = emg_17_emg_param_2_4;
    #line 981 
    emg_wrapper_igc_get_eeprom(emg_17_container,emg_17_emg_param_1_3,emg_17_emg_param_2_4);
    #line 985 
    ldv_free((void *)emg_17_emg_param_1_3);
    #line 986 
    ldv_free((void *)emg_17_emg_param_2_4);
    #line 988 
    break;
    #line 990 
    case 35: 
             #line 990 
    ;
    #line 992 
    emg_17_emg_param_1_2 = (struct ethtool_drvinfo *)ldv_xmalloc_unknown_size(0UL);
    #line 992 
    emg_17_emg_param_1_2 = emg_17_emg_param_1_2;
    #line 996 
    emg_wrapper_igc_get_drvinfo(emg_17_container,emg_17_emg_param_1_2);
    #line 1000 
    ldv_free((void *)emg_17_emg_param_1_2);
    #line 1002 
    break;
    #line 1004 
    case 36: 
             #line 1004 
    ;
    #line 1006 
    emg_17_emg_param_1_1 = (struct ethtool_coalesce *)ldv_xmalloc_unknown_size(0UL);
    #line 1006 
    emg_17_emg_param_1_1 = emg_17_emg_param_1_1;
    #line 1010 
    emg_wrapper_igc_get_coalesce(emg_17_container,emg_17_emg_param_1_1);
    #line 1014 
    ldv_free((void *)emg_17_emg_param_1_1);
    #line 1016 
    break;
    #line 1018 
    case 37: 
             #line 1018 
    ;
    #line 1020 
    emg_17_emg_param_1_0 = (struct ethtool_channels *)ldv_xmalloc_unknown_size(0UL);
    #line 1020 
    emg_17_emg_param_1_0 = emg_17_emg_param_1_0;
    #line 1024 
    emg_wrapper_igc_get_channels(emg_17_container,emg_17_emg_param_1_0);
    #line 1028 
    ldv_free((void *)emg_17_emg_param_1_0);
    #line 1030 
    break;
    #line 1032 
    case 38: 
             #line 1032 
    ;
    #line 1034 
    emg_wrapper_igc_ethtool_complete(emg_17_container);
    #line 1036 
    break;
    #line 1038 
    case 39: 
             #line 1038 
    ;
    #line 1040 
    emg_wrapper_igc_ethtool_begin(emg_17_container);
    #line 1043 
    if (emg_repeat_cnt_call_17 > 0) {
      #line 1044 
      emg_repeat_cnt_call_17 --;
      #line 1046 
      goto emg_call_17;
    }
    else 
         #line 1048 
         __VERIFIER_assume(0);
    #line 1052 
    break;
    #line 1054 
    case 40: 
             #line 1054 
    ;
    #line 1058 
    break;
    #line 1060 
    default: 
             #line 1060 
    ;
    #line 1060 
    __VERIFIER_assume(0);
  }
  #line 1063 
  return (void *)0;
}

#line 1068  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/emg/0/environment_model.c"
void *emg_pci_pci_scenario_igc_driver(void *arg0)
{
  #line 1071 
  int emg_18_choice;
  #line 1072 
  struct pci_driver *emg_18_container;
  #line 1073 
  struct pci_device_id *emg_18_device_id;
  #line 1074 
  struct pci_dev *emg_18_resource_0;
  #line 1075 
  struct pm_message emg_18_resource_1;
  #line 1076 
  int emg_18_ret;
  #line 1077 
  int emg_repeat_cnt_call_18_0 = 1;
  #line 1078 
  int emg_repeat_cnt_call_18_1 = 1;
  #line 1079 
  int emg_repeat_cnt_main_18_1 = 1;
  #line 1080 
  int emg_repeat_cnt_main_18_0 = 1;
  #line 1082 
  struct emg_struct_pci_scenario_igc_driver_18 *data = (struct emg_struct_pci_scenario_igc_driver_18 *)arg0;
  #line 1086 
  emg_18_choice = 0;
  #line 1087 
  emg_18_ret = ldv_undef_int();
  #line 1088 
  emg_18_choice = 0;
  #line 1089 
  emg_18_container = emg_alias_igc_driver;
  #line 1090 
  emg_18_ret = ldv_undef_int();
  #line 1092 
  __VERIFIER_assume(data->arg0 == emg_alias_igc_driver);
  #line 1094 
  if (data != (struct emg_struct_pci_scenario_igc_driver_18 *)0) {
    #line 1095 
    emg_18_container = data->arg0;
    #line 1096 
    ldv_free((void *)data);
  }
  #line 1101 
  emg_18_resource_0 = (struct pci_dev *)ldv_xmalloc(3312UL);
  #line 1102 
  emg_18_choice = __ldv_undef_int_range(0,5);
  #line 1103 
  emg_18_device_id = emg_18_container->id_table + (unsigned long)emg_18_choice;
  #line 1107 
  goto emg_main_18;
  #line 1111 
  return (void *)0;
  #line 1114 
  emg_call_18: 
               #line 1114 
  ;
  #line 1115 
  switch (ldv_undef_int()) {
    #line 1116 
    case 0: 
            #line 1116 
    ;
    #line 1121 
    if (emg_repeat_cnt_call_18_0 > 0) {
      #line 1122 
      emg_repeat_cnt_call_18_0 --;
      #line 1124 
      goto emg_call_18;
    }
    else 
         #line 1126 
         __VERIFIER_assume(0);
    #line 1130 
    break;
    #line 1132 
    case 1: 
            #line 1132 
    ;
    #line 1134 
    if (emg_18_container->suspend != (int (*)(struct pci_dev *, pm_message_t ))0) 
      #line 1135 
      emg_18_ret = (*(emg_18_container->suspend))(emg_18_resource_0,emg_18_resource_1); else 
                                                                    #line 1137 
                                                                    emg_18_ret = ldv_undef_int();
    #line 1143 
    emg_18_ret = ldv_filter_err_code(emg_18_ret);
    #line 1147 
    if (emg_18_container->resume != (int (*)(struct pci_dev *))0) 
                                                                  #line 1148 
                                                                  (*(emg_18_container->resume))(emg_18_resource_0);
    #line 1152 
    if (emg_repeat_cnt_call_18_1 > 0) {
      #line 1153 
      emg_repeat_cnt_call_18_1 --;
      #line 1155 
      goto emg_call_18;
    }
    else 
         #line 1157 
         __VERIFIER_assume(0);
    #line 1161 
    break;
    #line 1163 
    case 2: 
            #line 1163 
    ;
    #line 1165 
    if (emg_18_container->shutdown != (void (*)(struct pci_dev *))0) 
      #line 1166 
      (*(emg_18_container->shutdown))(emg_18_resource_0);
    #line 1171 
    emg_wrapper_igc_remove(emg_18_resource_0);
    #line 1174 
    if (emg_repeat_cnt_main_18_1 > 0) {
      #line 1175 
      emg_repeat_cnt_main_18_1 --;
      #line 1177 
      goto emg_main_18;
    }
    else 
         #line 1179 
         __VERIFIER_assume(0);
    #line 1183 
    break;
    #line 1185 
    default: 
             #line 1185 
    ;
    #line 1185 
    __VERIFIER_assume(0);
  }
  #line 1188 
  return (void *)0;
  #line 1191 
  emg_main_18: 
               #line 1191 
  ;
  #line 1192 
  if (ldv_undef_int() != 0) {
    #line 1195 
    ldv_pre_probe();
    #line 1199 
    emg_18_ret = emg_wrapper_igc_probe(emg_18_resource_0,emg_18_device_id);
    #line 1204 
    emg_18_ret = ldv_post_probe(emg_18_ret);
    #line 1207 
    if (ldv_undef_int() != 0) {
      #line 1209 
      __VERIFIER_assume(emg_18_ret == 0);
      #line 1213 
      goto emg_call_18;
    }
    else 
         #line 1218 
         __VERIFIER_assume(emg_18_ret != 0);
    #line 1222 
    if (emg_repeat_cnt_main_18_0 > 0) {
      #line 1223 
      emg_repeat_cnt_main_18_0 --;
      #line 1225 
      goto emg_main_18;
    }
    else 
         #line 1227 
         __VERIFIER_assume(0);
  }
  else 
       #line 1233 
       ldv_free((void *)emg_18_resource_0);
  #line 1241 
  return (void *)0;
}

#line 1246  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/emg/0/environment_model.c"
void *emg_timer_timer_scenario_6(void *arg0)
{
  #line 1249 
  struct timer_list *emg_19_container;
  #line 1250 
  unsigned long emg_19_emg_param_0_0;
  #line 1252 
  struct emg_struct_timer_scenario_6_19 *data = (struct emg_struct_timer_scenario_6_19 *)arg0;
  #line 1257 
  if (data != (struct emg_struct_timer_scenario_6_19 *)0) {
    #line 1258 
    emg_19_container = data->arg0;
    #line 1259 
    ldv_free((void *)data);
  }
  #line 1265 
  ldv_switch_to_interrupt_context();
  #line 1269 
  if (emg_19_container->function != (void (*)(struct timer_list *))0) 
    #line 1270 
    (*(emg_19_container->function))((struct timer_list *)emg_19_emg_param_0_0);
  #line 1276 
  ldv_switch_to_process_context();
  #line 1283 
  return (void *)0;
}

#line 1288  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/emg/0/environment_model.c"
int emg___pci_register_driver(struct pci_driver *arg0, struct module *arg1, char *arg2)
{
  #line 1291 
  struct pci_driver *emg_2_pci_driver;
  #line 1293 
  emg_2_pci_driver = emg_alias_igc_driver;
  #line 1294 
  if (ldv_undef_int() != 0) {
    #line 1296 
    emg_2_pci_driver = arg0;
    #line 1300 
    emg_dispatch_register_2(emg_2_pci_driver);
    #line 1304 
    return 0;
  }
  else {
    #line 1308 
    return ldv_undef_int_negative();
  }
}

#line 1316  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/emg/0/environment_model.c"
struct net_device *emg_alloc_etherdev_mqs(int arg0, unsigned int arg1, unsigned int arg2)
{
  #line 1319 
  struct net_device *emg_3_netdev;
  #line 1321 
  if (ldv_undef_int() != 0) {
    #line 1323 
    emg_3_netdev = (struct net_device *)ldv_xmalloc(3328UL);
    #line 1327 
    return emg_3_netdev;
  }
  else 
       #line 1331 
       return (struct net_device *)0;
}

#line 1339  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/emg/0/environment_model.c"
int emg_del_timer_sync(struct timer_list *arg0)
{
  #line 1342 
  struct timer_list *emg_4_timer_list;
  #line 1345 
  emg_4_timer_list = arg0;
  #line 1349 
  emg_dispatch_instance_deregister_4(emg_4_timer_list);
  #line 1350 
  ;
  #line 1350 
  return 0;
}

#line 1356  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/emg/0/environment_model.c"
void *emg_free_irq(unsigned int arg0, void *arg1)
{
  #line 1359 
  int emg_5_line;
  #line 1362 
  emg_5_line = (int)arg0;
  #line 1366 
  emg_dispatch_irq_deregister_5(emg_5_line);
  #line 1367 
  ;
  #line 1367 
  return (void *)0;
}

#line 1373  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/emg/0/environment_model.c"
void emg_free_netdev(struct net_device *arg0)
{
  #line 1376 
  struct net_device *emg_6_netdev;
  #line 1379 
  emg_6_netdev = arg0;
  #line 1380 
  ldv_free((void *)emg_6_netdev);
  #line 1383 
  return;
}

#line 1388  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/emg/0/environment_model.c"
int emg_mod_timer(struct timer_list *arg0, unsigned long arg1)
{
  #line 1391 
  struct timer_list *emg_7_timer_list;
  #line 1393 
  if (ldv_undef_int() != 0) {
    #line 1395 
    emg_7_timer_list = arg0;
    #line 1399 
    emg_dispatch_instance_register_7(emg_7_timer_list);
    #line 1403 
    return 1;
  }
  else 
       #line 1407 
       return 0;
}

#line 1415  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/emg/0/environment_model.c"
void emg_pci_unregister_driver(struct pci_driver *arg0)
{
  #line 1418 
  struct pci_driver *emg_8_pci_driver;
  #line 1420 
  emg_8_pci_driver = emg_alias_igc_driver;
  #line 1422 
  emg_8_pci_driver = arg0;
  #line 1426 
  emg_dispatch_deregister_8(emg_8_pci_driver);
  #line 1429 
  return;
}

#line 1434  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/emg/0/environment_model.c"
int emg_register_netdev(struct net_device *arg0)
{
  #line 1437 
  struct net_device *emg_9_netdev;
  #line 1438 
  int emg_9_ret;
  #line 1441 
  emg_9_ret = ldv_undef_int();
  #line 1442 
  emg_9_ret = ldv_undef_int();
  #line 1443 
  if (ldv_undef_int() != 0) {
    #line 1445 
    emg_9_netdev = arg0;
    #line 1449 
    emg_9_ret = emg_wrapper_igc_open(emg_9_netdev);
    #line 1452 
    if (ldv_undef_int() != 0) {
      #line 1454 
      __VERIFIER_assume(emg_9_ret == 0);
      #line 1458 
      emg_dispatch_register_9(emg_9_netdev);
      #line 1462 
      return 0;
    }
    else {
      #line 1466 
      __VERIFIER_assume(emg_9_ret != 0);
      #line 1467 
      ldv_failed_register_netdev();
      #line 1468 
      return ldv_undef_int_negative();
    }
  }
  else {
    #line 1473 
    ldv_failed_register_netdev();
    #line 1474 
    return ldv_undef_int_negative();
  }
}

#line 1482  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/emg/0/environment_model.c"
int emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4)
{
  #line 1485 
  enum irqreturn (*emg_10_callback)(int , void *);
  #line 1486 
  void *emg_10_data;
  #line 1487 
  int emg_10_line;
  #line 1488 
  enum irqreturn (*emg_10_thread)(int , void *);
  #line 1490 
  emg_10_callback = & emg_wrapper_igc_intr;
  #line 1491 
  if (ldv_undef_int() != 0) {
    #line 1493 
    emg_10_line = (int)arg0;
    #line 1494 
    emg_10_callback = arg1;
    #line 1495 
    emg_10_thread = (enum irqreturn (*)(int , void *))0;
    #line 1496 
    emg_10_data = arg4;
    #line 1500 
    emg_dispatch_irq_register_10(emg_10_line,emg_10_callback,emg_10_thread,emg_10_data);
    #line 1504 
    return 0;
  }
  else {
    #line 1508 
    return ldv_undef_int_negative();
  }
}

#line 1516  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/emg/0/environment_model.c"
_Bool emg_schedule_work(struct work_struct *arg0)
{
  #line 1519 
  struct work_struct *emg_11_work_struct;
  #line 1521 
  if (ldv_undef_int() != 0) {
    #line 1523 
    emg_11_work_struct = arg0;
    #line 1527 
    if (emg_11_work_struct->func != (void (*)(struct work_struct *))0) 
      #line 1528 
      (*(emg_11_work_struct->func))(emg_11_work_struct);
    #line 1533 
    return (_Bool)1;
  }
  else 
       #line 1537 
       return (_Bool)0;
}

#line 1545  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/emg/0/environment_model.c"
void emg_unregister_netdev(struct net_device *arg0)
{
  #line 1548 
  struct net_device *emg_12_netdev;
  #line 1551 
  emg_12_netdev = arg0;
  #line 1555 
  emg_wrapper_igc_close(emg_12_netdev);
  #line 1559 
  emg_dispatch_deregister_12(emg_12_netdev);
  #line 1562 
  return;
}

#line 1567  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/emg/0/environment_model.c"
void *emg_entry_point_insmod(void *arg0)
{
  #line 1570 
  int emg_1_ret;
  #line 1573 
  emg_1_ret = emg_igc_init_module();
  #line 1574 
  emg_1_ret = ldv_post_init(emg_1_ret);
  #line 1577 
  if (ldv_undef_int() != 0) {
    #line 1579 
    __VERIFIER_assume(emg_1_ret == 0);
    #line 1583 
    emg_igc_exit_module();
  }
  else 
       #line 1587 
       __VERIFIER_assume(emg_1_ret != 0);
  #line 1591 
  return (void *)0;
}

#line 1596  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/igc/igc.ko/concurrency safety/emg/0/environment_model.c"
int main(void)
{
  #line 1598 
  ldv_initialize();
  #line 1600 
  emg_entry_point_insmod((void *)0);
  #line 1602 
  return 0;
}

