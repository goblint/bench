/* Generated by Frama-C */
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler_types.h"
typedef signed char __s8;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef short __s16;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef int __s32;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef long long __s64;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef __s8 s8;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u8 u8;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s16 s16;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u16 u16;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s32 s32;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u32 u32;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s64 s64;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u64 u64;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/uapi/asm/posix_types_64.h"
typedef long __kernel_long_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned long __kernel_ulong_t;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_pid_t;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_uid32_t;
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_gid32_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_ulong_t __kernel_size_t;
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_ssize_t;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_loff_t;
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_time64_t;
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_clock_t;
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_timer_t;
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_clockid_t;
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __u16 __le16;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u16 __be16;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __le32;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __be32;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u64 __be64;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __wsum;
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef unsigned int __poll_t;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef u32 __kernel_dev_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned short umode_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef _Bool bool;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_size_t size_t;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef s32 int32_t;
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u32 uint32_t;
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 sector_t;
#line 131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 blkcnt_t;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 dma_addr_t;
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int gfp_t;
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int slab_flags_t;
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int fmode_t;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 phys_addr_t;
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef phys_addr_t resource_size_t;
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int counter ;
};
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   s64 counter ;
};
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 185 
struct hlist_node;
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct callback_head {
   struct callback_head *next ;
   void (*func)(struct callback_head *) ;
} __attribute__((__aligned__(8)));
#line 14  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/io.i.aux"
struct task_struct;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
struct module;
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
struct kernel_symbol {
   int value_offset ;
   int name_offset ;
   int namespace_offset ;
};
#line 136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/init.h"
typedef void (*ctor_fn_t)(void);
#line 139 
struct file_system_type;
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct ctl_table;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry;
#line 87 
struct static_key_mod;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
union __anonunion_8 {
   unsigned long type ;
   struct jump_entry *entries ;
   struct static_key_mod *next ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key {
   atomic_t enabled ;
   union __anonunion_8 __anonCompField_static_key_4 ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry {
   s32 code ;
   s32 target ;
   long key ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
struct device;
#line 65 
struct net_device;
#line 476  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct file_operations;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/div64.h"
struct completion;
#line 88 
struct pt_regs;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bug.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/math64.h"
typedef __s64 time64_t;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/time_types.h"
struct __kernel_timespec {
   __kernel_time64_t tv_sec ;
   long long tv_nsec ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time64.h"
struct timespec64 {
   time64_t tv_sec ;
   long tv_nsec ;
};
#line 165 
struct old_timespec32;
#line 166 
struct pollfd;
#line 167 
enum timespec_type {
    TT_NONE = 0,
    TT_NATIVE = 1,
    TT_COMPAT = 2
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_futex_27 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_29 {
   struct __kernel_timespec *rmtp ;
   struct old_timespec32 *compat_rmtp ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_nanosleep_28 {
   clockid_t clockid ;
   enum timespec_type type ;
   union __anonunion_29 __anonCompField___anonstruct_nanosleep_28_5 ;
   u64 expires ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_poll_30 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_26 {
   struct __anonstruct_futex_27 futex ;
   struct __anonstruct_nanosleep_28 nanosleep ;
   struct __anonstruct_poll_30 poll ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct restart_block {
   long (*fn)(struct restart_block *) ;
   union __anonunion_26 __anonCompField_restart_block_6 ;
};
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
struct page;
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/getorder.h"
struct mm_struct;
#line 49 
struct io_bitmap;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/ptrace.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
struct desc_struct {
   u16 limit0 ;
   u16 base0 ;
   u16 base1 : 8 ;
   u16 type : 4 ;
   u16 s : 1 ;
   u16 dpl : 2 ;
   u16 p : 1 ;
   u16 limit1 : 4 ;
   u16 avl : 1 ;
   u16 l : 1 ;
   u16 d : 1 ;
   u16 g : 1 ;
   u16 base2 : 8 ;
} __attribute__((__packed__));
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
typedef unsigned long pteval_t;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pmdval_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pudval_t;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
struct __anonstruct_pte_t_53 {
   pteval_t pte ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef struct __anonstruct_pte_t_53 pte_t;
#line 265  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 267  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_54 {
   pgdval_t pgd ;
};
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_54 pgd_t;
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pud_t_56 {
   pudval_t pud ;
};
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pud_t_56 pud_t;
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pmd_t_57 {
   pmdval_t pmd ;
};
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pmd_t_57 pmd_t;
#line 505  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct page *pgtable_t;
#line 519 
struct file;
#line 530 
struct seq_file;
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/nospec-branch.h"
struct thread_struct;
#line 362 
struct cpumask;
#line 365 
struct vm_area_struct;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_59 {
   u8 locked ;
   u8 pending ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_60 {
   u16 locked_pending ;
   u16 tail ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
union __anonunion_58 {
   atomic_t val ;
   struct __anonstruct_59 __anonCompField___anonunion_58_7 ;
   struct __anonstruct_60 __anonCompField___anonunion_58_8 ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct qspinlock {
   union __anonunion_58 __anonCompField_qspinlock_9 ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
typedef struct qspinlock arch_spinlock_t;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct __anonstruct_62 {
   u8 wlocked ;
   u8 __lstate[3U] ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
union __anonunion_61 {
   atomic_t cnts ;
   struct __anonstruct_62 __anonCompField___anonunion_61_10 ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct qrwlock {
   union __anonunion_61 __anonCompField_qrwlock_11 ;
   arch_spinlock_t wait_lock ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
typedef struct qrwlock arch_rwlock_t;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/math_emu.h"
struct math_emu_info {
   long ___orig_eip ;
   struct pt_regs *regs ;
};
#line 2288  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/atomic-fallback.h"
typedef atomic64_t atomic_long_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
struct cpumask {
   unsigned long bits[128U] ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint_func {
   void *func ;
   void *data ;
   int prio ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint {
   char *name ;
   struct static_key key ;
   int (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   struct tracepoint_func *funcs ;
};
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
typedef int tracepoint_ptr_t;
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct bpf_raw_event_map {
   struct tracepoint *tp ;
   void *bpf_func ;
   u32 num_args ;
   u32 writable_size ;
} __attribute__((__aligned__(32)));
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_90 {
   u64 rip ;
   u64 rdp ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_91 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_89 {
   struct __anonstruct_90 __anonCompField___anonunion_89_17 ;
   struct __anonstruct_91 __anonCompField___anonunion_89_18 ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_92 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fxregs_state {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_89 __anonCompField_fxregs_state_19 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_92 __anonCompField_fxregs_state_20 ;
} __attribute__((__aligned__(16)));
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct swregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xstate_header {
   u64 xfeatures ;
   u64 xcomp_bv ;
   u64 reserved[6U] ;
} __attribute__((__packed__));
#line 253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xregs_state {
   struct fxregs_state i387 ;
   struct xstate_header header ;
   u8 extended_state_area[0U] ;
} __attribute__((__packed__, __aligned__(64)));
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union fpregs_state {
   struct fregs_state fsave ;
   struct fxregs_state fxsave ;
   struct swregs_state soft ;
   struct xregs_state xsave ;
   u8 __padding[4096U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fpu {
   unsigned int last_cpu ;
   unsigned long avx512_timestamp ;
   union fpregs_state state ;
};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/orc_types.h"
struct orc_entry {
   s16 sp_offset ;
   s16 bp_offset ;
   unsigned int sp_reg : 4 ;
   unsigned int bp_reg : 4 ;
   unsigned int type : 2 ;
   unsigned int end : 1 ;
} __attribute__((__packed__));
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct seq_operations;
#line 478 
struct perf_event;
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct __anonstruct_mm_segment_t_95 {
   unsigned long seg ;
};
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_95 mm_segment_t;
#line 485  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fsbase ;
   unsigned long gsbase ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_nr ;
   unsigned long error_code ;
   struct io_bitmap *io_bitmap ;
   unsigned long iopl_emul ;
   mm_segment_t addr_limit ;
   unsigned int sig_on_uaccess_err : 1 ;
   unsigned int uaccess_err : 1 ;
   struct fpu fpu ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/thread_info.h"
struct thread_info {
   unsigned long flags ;
   u32 status ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
struct lockdep_map;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_subclass_key {
   char __one_byte ;
} __attribute__((__packed__));
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
union __anonunion_96 {
   struct hlist_node hash_entry ;
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class_key {
   union __anonunion_96 __anonCompField_lock_class_key_23 ;
};
#line 68 
struct lock_trace;
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class {
   struct hlist_node hash_entry ;
   struct list_head lock_entry ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct lock_trace *usage_traces[9U] ;
   int name_version ;
   char *name ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char *name ;
   int cpu ;
   unsigned long ip ;
};
#line 226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned int class_idx : 13 ;
   unsigned int irq_context : 2 ;
   unsigned int trylock : 1 ;
   unsigned int read : 2 ;
   unsigned int check : 1 ;
   unsigned int hardirqs_off : 1 ;
   unsigned int references : 12 ;
   unsigned int pin_count ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_98 {
   u8 __padding[24U] ;
   struct lockdep_map dep_map ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
union __anonunion_97 {
   struct raw_spinlock rlock ;
   struct __anonstruct_98 __anonCompField___anonunion_97_24 ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_97 __anonCompField_spinlock_25 ;
};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_rwlock_t_99 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct __anonstruct_rwlock_t_99 rwlock_t;
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
struct mutex;
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
struct kmem_cache;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ioport.h"
struct resource {
   resource_size_t start ;
   resource_size_t end ;
   char *name ;
   unsigned long flags ;
   unsigned long desc ;
   struct resource *parent ;
   struct resource *sibling ;
   struct resource *child ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/osq_lock.h"
struct optimistic_spin_queue {
   atomic_t tail ;
};
#line 40 
struct ww_acquire_ctx;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex {
   atomic_long_t owner ;
   spinlock_t wait_lock ;
   struct optimistic_spin_queue osq ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   struct ww_acquire_ctx *ww_ctx ;
   void *magic ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
struct wait_queue_head {
   spinlock_t lock ;
   struct list_head head ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
typedef struct wait_queue_head wait_queue_head_t;
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct seqcount {
   unsigned int sequence ;
   struct lockdep_map dep_map ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct seqcount seqcount_t;
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct __anonstruct_seqlock_t_114 {
   struct seqcount seqcount ;
   spinlock_t lock ;
};
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct __anonstruct_seqlock_t_114 seqlock_t;
#line 601  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct __anonstruct_nodemask_t_115 {
   unsigned long bits[16U] ;
};
#line 601  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct __anonstruct_nodemask_t_115 nodemask_t;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/tlbbatch.h"
struct arch_tlbflush_unmap_batch {
   struct cpumask cpumask ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct vmacache {
   u64 seqnum ;
   struct vm_area_struct *vmas[4U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct task_rss_stat {
   int events ;
   int count[4U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct mm_rss_stat {
   atomic_long_t count[4U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct page_frag {
   struct page *page ;
   __u32 offset ;
   __u32 size ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct tlbflush_unmap_batch {
   struct arch_tlbflush_unmap_batch arch ;
   bool flush_required ;
   bool writable ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_node {
   unsigned long __rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
} __attribute__((__aligned__(8)));
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root_cached {
   struct rb_root rb_root ;
   struct rb_node *rb_leftmost ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rwsem.h"
struct rw_semaphore {
   atomic_long_t count ;
   atomic_long_t owner ;
   struct optimistic_spin_queue osq ;
   raw_spinlock_t wait_lock ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/completion.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 120 
struct inode;
#line 121 
struct notifier_block;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timex.h"
typedef s32 old_time32_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time32.h"
struct old_timespec32 {
   old_time32_t tv_sec ;
   s32 tv_nsec ;
};
#line 461  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
typedef s64 ktime_t;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
struct timer_list {
   struct hlist_node entry ;
   unsigned long expires ;
   void (*function)(struct timer_list *) ;
   u32 flags ;
   struct lockdep_map lockdep_map ;
};
#line 196 
struct hrtimer;
#line 197 
enum hrtimer_restart;
#line 221 
struct workqueue_struct;
#line 222 
struct work_struct;
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct *) ;
   struct lockdep_map lockdep_map ;
};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
   struct workqueue_struct *wq ;
   int cpu ;
};
#line 124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct rcu_work {
   struct work_struct work ;
   struct callback_head rcu ;
   struct workqueue_struct *wq ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_segcblist.h"
struct rcu_segcblist {
   struct callback_head *head ;
   struct callback_head **tails[4U] ;
   unsigned long gp_seq[4U] ;
   atomic_long_t len ;
   long len_lazy ;
   u8 enabled ;
   u8 offloaded ;
};
#line 80 
struct srcu_struct;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcu.h"
struct srcu_node;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_data {
   unsigned long srcu_lock_count[2U] ;
   unsigned long srcu_unlock_count[2U] ;
   spinlock_t lock ;
   struct rcu_segcblist srcu_cblist ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   bool srcu_cblist_invoking ;
   struct timer_list delay_work ;
   struct work_struct work ;
   struct callback_head srcu_barrier_head ;
   struct srcu_node *mynode ;
   unsigned long grpmask ;
   int cpu ;
   struct srcu_struct *ssp ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_node {
   spinlock_t lock ;
   unsigned long srcu_have_cbs[4U] ;
   unsigned long srcu_data_have_cbs[4U] ;
   unsigned long srcu_gp_seq_needed_exp ;
   struct srcu_node *srcu_parent ;
   int grplo ;
   int grphi ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_struct {
   struct srcu_node node[521U] ;
   struct srcu_node *level[4U] ;
   struct mutex srcu_cb_mutex ;
   spinlock_t lock ;
   struct mutex srcu_gp_mutex ;
   unsigned int srcu_idx ;
   unsigned long srcu_gp_seq ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   unsigned long srcu_last_gp_end ;
   struct srcu_data *sda ;
   unsigned long srcu_barrier_seq ;
   struct mutex srcu_barrier_mutex ;
   struct completion srcu_barrier_completion ;
   atomic_t srcu_barrier_cpu_cnt ;
   struct delayed_work work ;
   struct lockdep_map dep_map ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block *, unsigned long , void *) ;
   struct notifier_block *next ;
   int priority ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct raw_notifier_head {
   struct notifier_block *head ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/uprobes.h"
struct arch_uprobe_task {
   unsigned long saved_scratch_register ;
   unsigned int saved_trap_nr ;
   unsigned int saved_tf ;
};
#line 57 
enum uprobe_task_state {
    UTASK_RUNNING = 0,
    UTASK_SSTEP = 1,
    UTASK_SSTEP_ACK = 2,
    UTASK_SSTEP_TRAPPED = 3
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_126 {
   struct arch_uprobe_task autask ;
   unsigned long vaddr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_127 {
   struct callback_head dup_xol_work ;
   unsigned long dup_xol_addr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
union __anonunion_125 {
   struct __anonstruct_126 __anonCompField___anonunion_125_28 ;
   struct __anonstruct_127 __anonCompField___anonunion_125_29 ;
};
#line 61 
struct uprobe;
#line 61 
struct return_instance;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobe_task {
   enum uprobe_task_state state ;
   union __anonunion_125 __anonCompField_uprobe_task_30 ;
   struct uprobe *active_uprobe ;
   unsigned long xol_vaddr ;
   struct return_instance *return_instances ;
   unsigned int depth ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct return_instance {
   struct uprobe *uprobe ;
   unsigned long func ;
   unsigned long stack ;
   unsigned long orig_ret_vaddr ;
   bool chained ;
   struct return_instance *next ;
};
#line 98 
struct xol_area;
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobes_state {
   struct xol_area *xol_area ;
};
#line 140 
struct ldt_struct;
#line 140 
struct vdso_image;
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_mm_context_t_128 {
   u64 ctx_id ;
   atomic64_t tlb_gen ;
   struct rw_semaphore ldt_usr_sem ;
   struct ldt_struct *ldt ;
   unsigned short ia32_compat ;
   struct mutex lock ;
   void *vdso ;
   struct vdso_image *vdso_image ;
   atomic_t perf_rdpmc_allowed ;
   u16 pkey_allocation_map ;
   s16 execute_only_pkey ;
   void *bd_addr ;
};
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
typedef struct __anonstruct_mm_context_t_128 mm_context_t;
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct address_space;
#line 67 
struct mem_cgroup;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_130 {
   struct list_head lru ;
   struct address_space *mapping ;
   unsigned long index ;
   unsigned long private ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_131 {
   dma_addr_t dma_addr ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_134 {
   struct page *next ;
   int pages ;
   int pobjects ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_133 {
   struct list_head slab_list ;
   struct __anonstruct_134 __anonCompField___anonunion_133_33 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_136 {
   unsigned int inuse : 16 ;
   unsigned int objects : 15 ;
   unsigned int frozen : 1 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_135 {
   void *s_mem ;
   unsigned long counters ;
   struct __anonstruct_136 __anonCompField___anonunion_135_35 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_132 {
   union __anonunion_133 __anonCompField___anonstruct_132_34 ;
   struct kmem_cache *slab_cache ;
   void *freelist ;
   union __anonunion_135 __anonCompField___anonstruct_132_36 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_137 {
   unsigned long compound_head ;
   unsigned char compound_dtor ;
   unsigned char compound_order ;
   atomic_t compound_mapcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_138 {
   unsigned long _compound_pad_1 ;
   unsigned long _compound_pad_2 ;
   struct list_head deferred_list ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_140 {
   struct mm_struct *pt_mm ;
   atomic_t pt_frag_refcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_139 {
   unsigned long _pt_pad_1 ;
   pgtable_t pmd_huge_pte ;
   unsigned long _pt_pad_2 ;
   union __anonunion_140 __anonCompField___anonstruct_139_40 ;
   spinlock_t *ptl ;
};
#line 68 
struct dev_pagemap;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_141 {
   struct dev_pagemap *pgmap ;
   void *zone_device_data ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_129 {
   struct __anonstruct_130 __anonCompField___anonunion_129_31 ;
   struct __anonstruct_131 __anonCompField___anonunion_129_32 ;
   struct __anonstruct_132 __anonCompField___anonunion_129_37 ;
   struct __anonstruct_137 __anonCompField___anonunion_129_38 ;
   struct __anonstruct_138 __anonCompField___anonunion_129_39 ;
   struct __anonstruct_139 __anonCompField___anonunion_129_41 ;
   struct __anonstruct_141 __anonCompField___anonunion_129_42 ;
   struct callback_head callback_head ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_142 {
   atomic_t _mapcount ;
   unsigned int page_type ;
   unsigned int active ;
   int units ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct page {
   unsigned long flags ;
   union __anonunion_129 __anonCompField_page_43 ;
   union __anonunion_142 __anonCompField_page_44 ;
   atomic_t _refcount ;
   struct mem_cgroup *mem_cgroup ;
} __attribute__((__aligned__(16)));
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct userfaultfd_ctx;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_userfaultfd_ctx {
   struct userfaultfd_ctx *ctx ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_shared_143 {
   struct rb_node rb ;
   unsigned long rb_subtree_last ;
};
#line 292 
struct anon_vma;
#line 292 
struct vm_operations_struct;
#line 292 
struct mempolicy;
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_area_struct {
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   struct rb_node vm_rb ;
   unsigned long rb_subtree_gap ;
   struct mm_struct *vm_mm ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct __anonstruct_shared_143 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   atomic_long_t swap_readahead_info ;
   struct mempolicy *vm_policy ;
   struct vm_userfaultfd_ctx vm_userfaultfd_ctx ;
} __attribute__((__designated_init__));
#line 358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 368 
struct kioctx_table;
#line 370 
struct linux_binfmt;
#line 370 
struct user_namespace;
#line 370 
struct mmu_notifier_mm;
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_144 {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   u64 vmacache_seqnum ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   unsigned long mmap_base ;
   unsigned long mmap_legacy_base ;
   unsigned long mmap_compat_base ;
   unsigned long mmap_compat_legacy_base ;
   unsigned long task_size ;
   unsigned long highest_vm_end ;
   pgd_t *pgd ;
   atomic_t membarrier_state ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   atomic_long_t pgtables_bytes ;
   int map_count ;
   spinlock_t page_table_lock ;
   struct rw_semaphore mmap_sem ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   atomic64_t pinned_vm ;
   unsigned long data_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long def_flags ;
   spinlock_t arg_lock ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[46U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   mm_context_t context ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct kioctx_table *ioctx_table ;
   struct task_struct *owner ;
   struct user_namespace *user_ns ;
   struct file *exe_file ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
   unsigned long numa_next_scan ;
   unsigned long numa_scan_offset ;
   int numa_scan_seq ;
   atomic_t tlb_flush_pending ;
   bool tlb_flush_batched ;
   struct uprobes_state uprobes_state ;
   atomic_long_t hugetlb_usage ;
   struct work_struct async_put_work ;
} __attribute__((__designated_init__));
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct mm_struct {
   struct __anonstruct_144 __anonCompField_mm_struct_45 ;
   unsigned long cpu_bitmap[] ;
};
#line 642 
struct vm_fault;
#line 643  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
typedef unsigned int vm_fault_t;
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct free_area {
   struct list_head free_list[6U] ;
   unsigned long nr_free ;
};
#line 158 
struct pglist_data;
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone_padding {
   char x[0U] ;
} __attribute__((__aligned__(4096)));
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone_reclaim_stat {
   unsigned long recent_rotated[2U] ;
   unsigned long recent_scanned[2U] ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct lruvec {
   struct list_head lists[5U] ;
   struct zone_reclaim_stat reclaim_stat ;
   atomic_long_t inactive_age ;
   unsigned long refaults ;
   unsigned long flags ;
   struct pglist_data *pgdat ;
};
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
typedef unsigned int isolate_mode_t;
#line 340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_pages {
   int count ;
   int high ;
   int batch ;
   struct list_head lists[3U] ;
};
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_pageset {
   struct per_cpu_pages pcp ;
   s8 expire ;
   u16 vm_numa_stat_diff[6U] ;
   s8 stat_threshold ;
   s8 vm_stat_diff[13U] ;
};
#line 361  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_nodestat {
   s8 stat_threshold ;
   s8 vm_node_stat_diff[32U] ;
};
#line 365 
enum zone_type {
    ZONE_DMA = 0,
    ZONE_DMA32 = 1,
    ZONE_NORMAL = 2,
    ZONE_MOVABLE = 3,
    ZONE_DEVICE = 4,
    __MAX_NR_ZONES = 5
};
#line 432  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone {
   unsigned long _watermark[3U] ;
   unsigned long watermark_boost ;
   unsigned long nr_reserved_highatomic ;
   long lowmem_reserve[5U] ;
   int node ;
   struct pglist_data *zone_pgdat ;
   struct per_cpu_pageset *pageset ;
   unsigned long zone_start_pfn ;
   atomic_long_t managed_pages ;
   unsigned long spanned_pages ;
   unsigned long present_pages ;
   char *name ;
   unsigned long nr_isolate_pageblock ;
   seqlock_t span_seqlock ;
   int initialized ;
   struct zone_padding _pad1_ ;
   struct free_area free_area[11U] ;
   unsigned long flags ;
   spinlock_t lock ;
   struct zone_padding _pad2_ ;
   unsigned long percpu_drift_mark ;
   unsigned long compact_cached_free_pfn ;
   unsigned long compact_cached_migrate_pfn[2U] ;
   unsigned long compact_init_migrate_pfn ;
   unsigned long compact_init_free_pfn ;
   unsigned int compact_considered ;
   unsigned int compact_defer_shift ;
   int compact_order_failed ;
   bool compact_blockskip_flush ;
   bool contiguous ;
   struct zone_padding _pad3_ ;
   atomic_long_t vm_stat[13U] ;
   atomic_long_t vm_numa_stat[6U] ;
} __attribute__((__aligned__(4096)));
#line 665  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zoneref {
   struct zone *zone ;
   int zone_idx ;
};
#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zonelist {
   struct zoneref _zonerefs[5121U] ;
};
#line 694  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct deferred_split {
   spinlock_t split_queue_lock ;
   struct list_head split_queue ;
   unsigned long split_queue_len ;
};
#line 710  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct pglist_data {
   struct zone node_zones[5U] ;
   struct zonelist node_zonelists[2U] ;
   int nr_zones ;
   spinlock_t node_size_lock ;
   unsigned long node_start_pfn ;
   unsigned long node_present_pages ;
   unsigned long node_spanned_pages ;
   int node_id ;
   wait_queue_head_t kswapd_wait ;
   wait_queue_head_t pfmemalloc_wait ;
   struct task_struct *kswapd ;
   int kswapd_order ;
   enum zone_type kswapd_classzone_idx ;
   int kswapd_failures ;
   int kcompactd_max_order ;
   enum zone_type kcompactd_classzone_idx ;
   wait_queue_head_t kcompactd_wait ;
   struct task_struct *kcompactd ;
   unsigned long totalreserve_pages ;
   unsigned long min_unmapped_pages ;
   unsigned long min_slab_pages ;
   struct zone_padding _pad1_ ;
   spinlock_t lru_lock ;
   unsigned long first_deferred_pfn ;
   struct deferred_split deferred_split_queue ;
   struct lruvec __lruvec ;
   unsigned long flags ;
   struct zone_padding _pad2_ ;
   struct per_cpu_nodestat *per_cpu_nodestats ;
   atomic_long_t vm_stat[32U] ;
};
#line 824 
struct vmem_altmap;
#line 440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/io.h"
struct fwnode_operations;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_handle {
   struct fwnode_handle *secondary ;
   struct fwnode_operations *ops ;
   struct device *dev ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_endpoint {
   unsigned int port ;
   unsigned int id ;
   struct fwnode_handle *local_fwnode ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_reference_args {
   struct fwnode_handle *fwnode ;
   unsigned int nargs ;
   u64 args[8U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_operations {
   struct fwnode_handle *(*get)(struct fwnode_handle *) ;
   void (*put)(struct fwnode_handle *) ;
   bool (*device_is_available)(struct fwnode_handle *) ;
   void *(*device_get_match_data)(struct fwnode_handle *, struct device *) ;
   bool (*property_present)(struct fwnode_handle *, char *) ;
   int (*property_read_int_array)(struct fwnode_handle *, char *, unsigned int , void *, size_t ) ;
   int (*property_read_string_array)(struct fwnode_handle *, char *, char **, size_t ) ;
   char *(*get_name)(struct fwnode_handle *) ;
   char *(*get_name_prefix)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_parent)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_next_child_node)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*get_named_child_node)(struct fwnode_handle *, char *) ;
   int (*get_reference_args)(struct fwnode_handle *, char *, char *, unsigned int , unsigned int , struct fwnode_reference_args *) ;
   struct fwnode_handle *(*graph_get_next_endpoint)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_remote_endpoint)(struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_port_parent)(struct fwnode_handle *) ;
   int (*graph_parse_endpoint)(struct fwnode_handle *, struct fwnode_endpoint *) ;
   int (*add_links)(struct fwnode_handle *, struct device *) ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node {
   struct llist_node *next ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
struct vm_struct {
   struct vm_struct *next ;
   void *addr ;
   unsigned long size ;
   unsigned long flags ;
   struct page **pages ;
   unsigned int nr_pages ;
   phys_addr_t phys_addr ;
   void *caller ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/smp.h"
struct __call_single_data {
   struct llist_node llist ;
   void (*func)(void *) ;
   void *info ;
   unsigned int flags ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/xarray.h"
struct xarray {
   spinlock_t xa_lock ;
   gfp_t xa_flags ;
   void *xa_head ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct idr {
   struct xarray idr_rt ;
   unsigned int idr_base ;
   unsigned int idr_next ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kuid_t_248 {
   uid_t val ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kuid_t_248 kuid_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kgid_t_249 {
   gid_t val ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kgid_t_249 kgid_t;
#line 140 
struct dentry;
#line 141 
struct iattr;
#line 142 
struct super_block;
#line 143 
struct poll_table_struct;
#line 144 
struct fs_context;
#line 146 
struct kernfs_open_node;
#line 147 
struct kernfs_iattrs;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_dir {
   unsigned long subdirs ;
   struct rb_root children ;
   struct kernfs_root *root ;
};
#line 96 
struct kernfs_node;
#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_symlink {
   struct kernfs_node *target_kn ;
};
#line 100 
struct kernfs_ops;
#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_attr {
   struct kernfs_ops *ops ;
   struct kernfs_open_node *open ;
   loff_t size ;
   struct kernfs_node *notify_next ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
union __anonunion_250 {
   struct kernfs_elem_dir dir ;
   struct kernfs_elem_symlink symlink ;
   struct kernfs_elem_attr attr ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_node {
   atomic_t count ;
   atomic_t active ;
   struct lockdep_map dep_map ;
   struct kernfs_node *parent ;
   char *name ;
   struct rb_node rb ;
   void *ns ;
   unsigned int hash ;
   union __anonunion_250 __anonCompField_kernfs_node_49 ;
   void *priv ;
   u64 id ;
   unsigned short flags ;
   umode_t mode ;
   struct kernfs_iattrs *iattr ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_syscall_ops {
   int (*show_options)(struct seq_file *, struct kernfs_root *) ;
   int (*mkdir)(struct kernfs_node *, char *, umode_t ) ;
   int (*rmdir)(struct kernfs_node *) ;
   int (*rename)(struct kernfs_node *, struct kernfs_node *, char *) ;
   int (*show_path)(struct seq_file *, struct kernfs_node *, struct kernfs_root *) ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root {
   struct kernfs_node *kn ;
   unsigned int flags ;
   struct idr ino_idr ;
   u32 last_id_lowbits ;
   u32 id_highbits ;
   struct kernfs_syscall_ops *syscall_ops ;
   struct list_head supers ;
   wait_queue_head_t deactivate_waitq ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_open_file {
   struct kernfs_node *kn ;
   struct file *file ;
   struct seq_file *seq_file ;
   void *priv ;
   struct mutex mutex ;
   struct mutex prealloc_mutex ;
   int event ;
   struct list_head list ;
   char *prealloc_buf ;
   size_t atomic_write_len ;
   bool mmapped : 1 ;
   bool released : 1 ;
   struct vm_operations_struct *vm_ops ;
};
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_ops {
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   ssize_t (*read)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   size_t atomic_write_len ;
   bool prealloc ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   int (*mmap)(struct kernfs_open_file *, struct vm_area_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 595 
struct sock;
#line 596 
struct kobject;
#line 597 
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
};
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject_ns.h"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   bool (*current_may_mount)(void) ;
   void *(*grab_current_ns)(void) ;
   void *(*netlink_ns)(struct sock *) ;
   void *(*initial_ns)(void) ;
   void (*drop_ns)(void *) ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stat.h"
struct kstat {
   u32 result_mask ;
   umode_t mode ;
   unsigned int nlink ;
   uint32_t blksize ;
   u64 attributes ;
   u64 attributes_mask ;
   u64 ino ;
   dev_t dev ;
   dev_t rdev ;
   kuid_t uid ;
   kgid_t gid ;
   loff_t size ;
   struct timespec64 atime ;
   struct timespec64 mtime ;
   struct timespec64 ctime ;
   struct timespec64 btime ;
   u64 blocks ;
};
#line 51 
struct bin_attribute;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute {
   char *name ;
   umode_t mode ;
   bool ignore_lockdep : 1 ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute_group {
   char *name ;
   umode_t (*is_visible)(struct kobject *, struct attribute *, int ) ;
   umode_t (*is_bin_visible)(struct kobject *, struct bin_attribute *, int ) ;
   struct attribute **attrs ;
   struct bin_attribute **bin_attrs ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   ssize_t (*write)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   int (*mmap)(struct file *, struct kobject *, struct bin_attribute *, struct vm_area_struct *) ;
};
#line 223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject *, struct attribute *, char *) ;
   ssize_t (*store)(struct kobject *, struct attribute *, char *, size_t ) ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
struct refcount_struct {
   atomic_t refs ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
typedef struct refcount_struct refcount_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kref.h"
struct kref {
   refcount_t refcount ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset;
#line 65 
struct kobj_type;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobject {
   char *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct kernfs_node *sd ;
   struct kref kref ;
   struct delayed_work release ;
   unsigned int state_initialized : 1 ;
   unsigned int state_in_sysfs : 1 ;
   unsigned int state_add_uevent_sent : 1 ;
   unsigned int state_remove_uevent_sent : 1 ;
   unsigned int uevent_suppress : 1 ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject *) ;
   struct sysfs_ops *sysfs_ops ;
   struct attribute **default_attrs ;
   struct attribute_group **default_groups ;
   struct kobj_ns_type_operations *(*child_ns_type)(struct kobject *) ;
   void *(*namespace)(struct kobject *) ;
   void (*get_ownership)(struct kobject *, kuid_t *, kgid_t *) ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_uevent_env {
   char *argv[3U] ;
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset_uevent_ops {
   int (*filter)(struct kset *, struct kobject *) ;
   char *(*name)(struct kset *, struct kobject *) ;
   int (*uevent)(struct kset *, struct kobject *, struct kobj_uevent_env *) ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops *uevent_ops ;
} __attribute__((__designated_init__));
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_node {
   struct rb_node node ;
   ktime_t expires ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_head {
   struct rb_root_cached rb_root ;
};
#line 60 
struct hrtimer_clock_base;
#line 61 
struct hrtimer_cpu_base;
#line 80 
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
};
#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer {
   struct timerqueue_node node ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer *) ;
   struct hrtimer_clock_base *base ;
   u8 state ;
   u8 is_rel ;
   u8 is_soft ;
   u8 is_hard ;
};
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   unsigned int index ;
   clockid_t clockid ;
   seqcount_t seq ;
   struct hrtimer *running ;
   struct timerqueue_head active ;
   ktime_t (*get_time)(void) ;
   ktime_t offset ;
} __attribute__((__aligned__(64)));
#line 213  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   unsigned int cpu ;
   unsigned int active_bases ;
   unsigned int clock_was_set_seq ;
   unsigned int hres_active : 1 ;
   unsigned int in_hrtirq : 1 ;
   unsigned int hang_detected : 1 ;
   unsigned int softirq_activated : 1 ;
   unsigned int nr_events ;
   unsigned short nr_retries ;
   unsigned short nr_hangs ;
   unsigned int max_hang_time ;
   ktime_t expires_next ;
   struct hrtimer *next_timer ;
   ktime_t softirq_expires_next ;
   struct hrtimer *softirq_next_timer ;
   struct hrtimer_clock_base clock_base[8U] ;
} __attribute__((__aligned__(64)));
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device *) ;
   void (*complete)(struct device *) ;
   int (*suspend)(struct device *) ;
   int (*resume)(struct device *) ;
   int (*freeze)(struct device *) ;
   int (*thaw)(struct device *) ;
   int (*poweroff)(struct device *) ;
   int (*restore)(struct device *) ;
   int (*suspend_late)(struct device *) ;
   int (*resume_early)(struct device *) ;
   int (*freeze_late)(struct device *) ;
   int (*thaw_early)(struct device *) ;
   int (*poweroff_late)(struct device *) ;
   int (*restore_early)(struct device *) ;
   int (*suspend_noirq)(struct device *) ;
   int (*resume_noirq)(struct device *) ;
   int (*freeze_noirq)(struct device *) ;
   int (*thaw_noirq)(struct device *) ;
   int (*poweroff_noirq)(struct device *) ;
   int (*restore_noirq)(struct device *) ;
   int (*runtime_suspend)(struct device *) ;
   int (*runtime_resume)(struct device *) ;
   int (*runtime_idle)(struct device *) ;
};
#line 303 
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
};
#line 310 
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
};
#line 318 
struct wakeup_source;
#line 319 
struct wake_irq;
#line 320 
struct pm_domain_data;
#line 530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_subsys_data {
   spinlock_t lock ;
   unsigned int refcount ;
   struct list_head clock_list ;
   struct pm_domain_data *domain_data ;
};
#line 573 
struct dev_pm_qos;
#line 573  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned int can_wakeup : 1 ;
   unsigned int async_suspend : 1 ;
   bool in_dpm_list : 1 ;
   bool is_prepared : 1 ;
   bool is_suspended : 1 ;
   bool is_noirq_suspended : 1 ;
   bool is_late_suspended : 1 ;
   bool no_pm : 1 ;
   bool early_init : 1 ;
   bool direct_complete : 1 ;
   u32 driver_flags ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   bool wakeup_path : 1 ;
   bool syscore : 1 ;
   bool no_pm_callbacks : 1 ;
   unsigned int must_resume : 1 ;
   unsigned int may_skip_resume : 1 ;
   struct hrtimer suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   struct wake_irq *wakeirq ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned int disable_depth : 3 ;
   unsigned int idle_notification : 1 ;
   unsigned int request_pending : 1 ;
   unsigned int deferred_resume : 1 ;
   unsigned int runtime_auto : 1 ;
   bool ignore_children : 1 ;
   unsigned int no_callbacks : 1 ;
   unsigned int irq_safe : 1 ;
   unsigned int use_autosuspend : 1 ;
   unsigned int timer_autosuspends : 1 ;
   unsigned int memalloc_noio : 1 ;
   unsigned int links_count ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   u64 last_busy ;
   u64 active_time ;
   u64 suspended_time ;
   u64 accounting_timestamp ;
   struct pm_subsys_data *subsys_data ;
   void (*set_latency_tolerance)(struct device *, s32 ) ;
   struct dev_pm_qos *qos ;
};
#line 650  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_domain {
   struct dev_pm_ops ops ;
   int (*start)(struct device *) ;
   void (*detach)(struct device *, bool ) ;
   int (*activate)(struct device *) ;
   void (*sync)(struct device *) ;
   void (*dismiss)(struct device *) ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rculist.h"
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_TGID = 1,
    PIDTYPE_PGID = 2,
    PIDTYPE_SID = 3,
    PIDTYPE_MAX = 4
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct pid_namespace;
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct pid {
   refcount_t count ;
   unsigned int level ;
   struct hlist_head tasks[4U] ;
   wait_queue_head_t wait_pidfd ;
   struct callback_head rcu ;
   struct upid numbers[1U] ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhash_head {
   struct rhash_head *next ;
};
#line 25 
struct bucket_table;
#line 33 
struct rhashtable;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_compare_arg {
   struct rhashtable *ht ;
   void *key ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_params {
   u16 nelem_hint ;
   u16 key_len ;
   u16 key_offset ;
   u16 head_offset ;
   unsigned int max_size ;
   u16 min_size ;
   bool automatic_shrinking ;
   u32 (*hashfn)(void *, u32 , u32 ) ;
   u32 (*obj_hashfn)(void *, u32 , u32 ) ;
   int (*obj_cmpfn)(struct rhashtable_compare_arg *, void *) ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable {
   struct bucket_table *tbl ;
   unsigned int key_len ;
   unsigned int max_elems ;
   struct rhashtable_params p ;
   bool rhlist ;
   struct work_struct run_work ;
   struct mutex mutex ;
   spinlock_t lock ;
   atomic_t nelems ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sem.h"
struct sem_undo_list;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shm.h"
struct sysv_shm {
   struct list_head shm_clist ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/plist.h"
struct plist_node {
   int prio ;
   struct list_head prio_list ;
   struct list_head node_list ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/seccomp.h"
struct seccomp_filter;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seccomp.h"
struct seccomp {
   int mode ;
   struct seccomp_filter *filter ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/resource.h"
struct rlimit {
   __kernel_ulong_t rlim_cur ;
   __kernel_ulong_t rlim_max ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/latencytop.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/types.h"
struct task_cputime {
   u64 stime ;
   u64 utime ;
   unsigned long long sum_exec_runtime ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_291 {
   unsigned long sig[1U] ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_291 sigset_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef void __signalfn_t(int );
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__kill_292 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__timer_293 {
   __kernel_timer_t _tid ;
   int _overrun ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__rt_294 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigchld_295 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_bnd_298 {
   char _dummy_bnd[8U] ;
   void *_lower ;
   void *_upper ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_pkey_299 {
   char _dummy_pkey[8U] ;
   __u32 _pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __anonunion_297 {
   short _addr_lsb ;
   struct __anonstruct__addr_bnd_298 _addr_bnd ;
   struct __anonstruct__addr_pkey_299 _addr_pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigfault_296 {
   void *_addr ;
   union __anonunion_297 __anonCompField___anonstruct__sigfault_296_50 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_300 {
   long _band ;
   int _fd ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigsys_301 {
   void *_call_addr ;
   int _syscall ;
   unsigned int _arch ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __sifields {
   struct __anonstruct__kill_292 _kill ;
   struct __anonstruct__timer_293 _timer ;
   struct __anonstruct__rt_294 _rt ;
   struct __anonstruct__sigchld_295 _sigchld ;
   struct __anonstruct__sigfault_296 _sigfault ;
   struct __anonstruct__sigpoll_300 _sigpoll ;
   struct __anonstruct__sigsys_301 _sigsys ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct __anonstruct_306 {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __sifields _sifields ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct kernel_siginfo {
   struct __anonstruct_306 __anonCompField_kernel_siginfo_53 ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
typedef struct kernel_siginfo kernel_siginfo_t;
#line 20 
struct user_struct;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/task_io_accounting.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimer_base {
   u64 nextevt ;
   struct timerqueue_head tqhead ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimers {
   struct posix_cputimer_base bases[3U] ;
   unsigned int timers_active ;
   unsigned int expiry_active ;
};
#line 193 
struct signal_struct;
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
union __anonunion_rseq_cs_311 {
   __u64 ptr64 ;
   __u64 ptr ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
struct rseq {
   __u32 cpu_id_start ;
   __u32 cpu_id ;
   union __anonunion_rseq_cs_311 rseq_cs ;
   __u32 flags ;
} __attribute__((__aligned__(32)));
#line 146 
struct audit_context;
#line 147 
struct backing_dev_info;
#line 148 
struct bio_list;
#line 149 
struct blk_plug;
#line 150 
struct capture_control;
#line 151 
struct cfs_rq;
#line 152 
struct fs_struct;
#line 153 
struct futex_pi_state;
#line 154 
struct io_context;
#line 155 
struct nameidata;
#line 156 
struct nsproxy;
#line 157 
struct perf_event_context;
#line 158 
struct pipe_inode_info;
#line 160 
struct reclaim_state;
#line 161 
struct robust_list_head;
#line 166 
struct sighand_struct;
#line 167 
struct task_delay_info;
#line 168 
struct task_group;
#line 242  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct prev_cputime {
   u64 utime ;
   u64 stime ;
   raw_spinlock_t lock ;
};
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   u32 inv_weight ;
};
#line 352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct util_est {
   unsigned int enqueued ;
   unsigned int ewma ;
} __attribute__((__aligned__(8)));
#line 401  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_avg {
   u64 last_update_time ;
   u64 load_sum ;
   u64 runnable_load_sum ;
   u32 util_sum ;
   u32 period_contrib ;
   unsigned long load_avg ;
   unsigned long runnable_load_avg ;
   unsigned long util_avg ;
   struct util_est util_est ;
} __attribute__((__aligned__(64)));
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};
#line 449  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   unsigned long runnable_weight ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   int depth ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
   struct sched_avg avg ;
};
#line 486 
struct rt_rq;
#line 486  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned long watchdog_stamp ;
   unsigned int time_slice ;
   unsigned short on_rq ;
   unsigned short on_list ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
} __attribute__((__designated_init__));
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_dl_entity {
   struct rb_node rb_node ;
   u64 dl_runtime ;
   u64 dl_deadline ;
   u64 dl_period ;
   u64 dl_bw ;
   u64 dl_density ;
   s64 runtime ;
   u64 deadline ;
   unsigned int flags ;
   unsigned int dl_throttled : 1 ;
   unsigned int dl_boosted : 1 ;
   unsigned int dl_yielded : 1 ;
   unsigned int dl_non_contending : 1 ;
   unsigned int dl_overrun : 1 ;
   struct hrtimer dl_timer ;
   struct hrtimer inactive_timer ;
};
#line 600  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct uclamp_se {
   unsigned int value : 11 ;
   unsigned int bucket_id : 3 ;
   unsigned int active : 1 ;
   unsigned int user_defined : 1 ;
};
#line 625  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct wake_q_node {
   struct wake_q_node *next ;
};
#line 629 
struct sched_class;
#line 629 
struct cred;
#line 629 
struct key;
#line 629 
struct files_struct;
#line 629 
struct rt_mutex_waiter;
#line 629 
struct css_set;
#line 629 
struct compat_robust_list_head;
#line 629 
struct numa_group;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
union __anonunion_313 {
   refcount_t rcu_users ;
   struct callback_head rcu ;
};
#line 629 
struct ftrace_ret_stack;
#line 629 
struct kcov;
#line 629 
struct request_queue;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct task_struct {
   struct thread_info thread_info ;
   long state ;
   void *stack ;
   refcount_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   struct llist_node wake_entry ;
   int on_cpu ;
   unsigned int cpu ;
   unsigned int wakee_flips ;
   unsigned long wakee_flip_decay_ts ;
   struct task_struct *last_wakee ;
   int recent_used_cpu ;
   int wake_cpu ;
   int on_rq ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct task_group *sched_task_group ;
   struct sched_dl_entity dl ;
   struct uclamp_se uclamp_req[2U] ;
   struct uclamp_se uclamp[2U] ;
   struct hlist_head preempt_notifiers ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   int nr_cpus_allowed ;
   cpumask_t *cpus_ptr ;
   cpumask_t cpus_mask ;
   unsigned long rcu_tasks_nvcsw ;
   u8 rcu_tasks_holdout ;
   u8 rcu_tasks_idx ;
   int rcu_tasks_idle_cpu ;
   struct list_head rcu_tasks_holdout_list ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct rb_node pushable_dl_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   struct vmacache vmacache ;
   struct task_rss_stat rss_stat ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned long jobctl ;
   unsigned int personality ;
   unsigned int sched_reset_on_fork : 1 ;
   unsigned int sched_contributes_to_load : 1 ;
   unsigned int sched_migrated : 1 ;
   unsigned int sched_remote_wakeup : 1 ;
   unsigned int sched_psi_wake_requeue : 1 ;
   unsigned int  ;
   unsigned int in_execve : 1 ;
   unsigned int in_iowait : 1 ;
   unsigned int restore_sigmask : 1 ;
   unsigned int in_user_fault : 1 ;
   unsigned int brk_randomized : 1 ;
   unsigned int no_cgroup_migration : 1 ;
   unsigned int frozen : 1 ;
   unsigned int use_memdelay : 1 ;
   unsigned long atomic_flags ;
   struct restart_block restart_block ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid *thread_pid ;
   struct hlist_node pid_links[4U] ;
   struct list_head thread_group ;
   struct list_head thread_node ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   u64 utime ;
   u64 stime ;
   u64 gtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   u64 start_time ;
   u64 start_boottime ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct posix_cputimers posix_cputimers ;
   struct cred *ptracer_cred ;
   struct cred *real_cred ;
   struct cred *cred ;
   struct key *cached_requested_key ;
   char comm[16U] ;
   struct nameidata *nameidata ;
   struct sysv_sem sysvsem ;
   struct sysv_shm sysvshm ;
   unsigned long last_switch_count ;
   unsigned long last_switch_time ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   unsigned int sas_ss_flags ;
   struct callback_head *task_works ;
   struct audit_context *audit_context ;
   kuid_t loginuid ;
   unsigned int sessionid ;
   struct seccomp seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   raw_spinlock_t pi_lock ;
   struct wake_q_node wake_q ;
   struct rb_root_cached pi_waiters ;
   struct task_struct *pi_top_task ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   int non_block_count ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   unsigned int in_ubsan ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct blk_plug *plug ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   struct capture_control *capture_control ;
   unsigned long ptrace_message ;
   kernel_siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   unsigned int psi_flags ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   u64 acct_timexpd ;
   nodemask_t mems_allowed ;
   seqcount_t mems_allowed_seq ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   u32 closid ;
   u32 rmid ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct mutex futex_exit_mutex ;
   unsigned int futex_state ;
   struct perf_event_context *perf_event_ctxp[2U] ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_prev ;
   short pref_node_fork ;
   int numa_scan_seq ;
   unsigned int numa_scan_period ;
   unsigned int numa_scan_period_max ;
   int numa_preferred_nid ;
   unsigned long numa_migrate_retry ;
   u64 node_stamp ;
   u64 last_task_numa_placement ;
   u64 last_sum_exec_runtime ;
   struct callback_head numa_work ;
   struct numa_group *numa_group ;
   unsigned long *numa_faults ;
   unsigned long total_numa_faults ;
   unsigned long numa_faults_locality[3U] ;
   unsigned long numa_pages_migrated ;
   struct rseq *rseq ;
   u32 rseq_sig ;
   unsigned long rseq_event_mask ;
   struct tlbflush_unmap_batch tlb_ubc ;
   union __anonunion_313 __anonCompField_task_struct_55 ;
   struct pipe_inode_info *splice_pipe ;
   struct page_frag task_frag ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   unsigned int fail_nth ;
   int nr_dirtied ;
   int nr_dirtied_pause ;
   unsigned long dirty_paused_when ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   u64 timer_slack_ns ;
   u64 default_timer_slack_ns ;
   unsigned int kasan_depth ;
   int curr_ret_stack ;
   int curr_ret_depth ;
   struct ftrace_ret_stack *ret_stack ;
   unsigned long long ftrace_timestamp ;
   atomic_t trace_overrun ;
   atomic_t tracing_graph_pause ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   unsigned int kcov_mode ;
   unsigned int kcov_size ;
   void *kcov_area ;
   struct kcov *kcov ;
   u64 kcov_handle ;
   int kcov_sequence ;
   struct mem_cgroup *memcg_in_oom ;
   gfp_t memcg_oom_gfp_mask ;
   int memcg_oom_order ;
   unsigned int memcg_nr_pages_over_high ;
   struct mem_cgroup *active_memcg ;
   struct request_queue *throttle_queue ;
   struct uprobe_task *utask ;
   unsigned int sequential_io ;
   unsigned int sequential_io_avg ;
   unsigned long task_state_change ;
   int pagefault_disabled ;
   struct task_struct *oom_reaper_list ;
   struct vm_struct *stack_vm_area ;
   refcount_t stack_refcount ;
   int patch_state ;
   void *security ;
   struct thread_struct thread ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ratelimit.h"
struct ratelimit_state {
   raw_spinlock_t lock ;
   int interval ;
   int burst ;
   int printed ;
   int missed ;
   unsigned long begin ;
   unsigned long flags ;
};
#line 5  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/device.h"
struct dev_archdata {
   void *iommu ;
};
#line 12 
struct dma_map_ops;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/device.h"
struct pdev_archdata {
   };
#line 23 
struct device_driver;
#line 24 
struct driver_private;
#line 25 
struct class;
#line 26 
struct subsys_private;
#line 27 
struct bus_type;
#line 28 
struct iommu_ops;
#line 29 
struct iommu_group;
#line 30 
struct iommu_fwspec;
#line 31 
struct dev_pin_info;
#line 32 
struct iommu_param;
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct bus_type {
   char *name ;
   char *dev_name ;
   struct device *dev_root ;
   struct attribute_group **bus_groups ;
   struct attribute_group **dev_groups ;
   struct attribute_group **drv_groups ;
   int (*match)(struct device *, struct device_driver *) ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*online)(struct device *) ;
   int (*offline)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   int (*num_vf)(struct device *) ;
   int (*dma_configure)(struct device *) ;
   struct dev_pm_ops *pm ;
   struct iommu_ops *iommu_ops ;
   struct subsys_private *p ;
   struct lock_class_key lock_key ;
   bool need_parent_lock ;
};
#line 164 
struct device_type;
#line 309 
enum probe_type {
    PROBE_DEFAULT_STRATEGY = 0,
    PROBE_PREFER_ASYNCHRONOUS = 1,
    PROBE_FORCE_SYNCHRONOUS = 2
};
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_driver {
   char *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char *mod_name ;
   bool suppress_bind_attrs ;
   enum probe_type probe_type ;
   struct of_device_id *of_match_table ;
   struct acpi_device_id *acpi_match_table ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   struct attribute_group **groups ;
   struct attribute_group **dev_groups ;
   struct dev_pm_ops *pm ;
   void (*coredump)(struct device *) ;
   struct driver_private *p ;
};
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct class {
   char *name ;
   struct module *owner ;
   struct attribute_group **class_groups ;
   struct attribute_group **dev_groups ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *) ;
   void (*class_release)(struct class *) ;
   void (*dev_release)(struct device *) ;
   int (*shutdown_pre)(struct device *) ;
   struct kobj_ns_type_operations *ns_type ;
   void *(*namespace)(struct device *) ;
   void (*get_ownership)(struct device *, kuid_t *, kgid_t *) ;
   struct dev_pm_ops *pm ;
   struct subsys_private *p ;
};
#line 809  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_type {
   char *name ;
   struct attribute_group **groups ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *, kuid_t *, kgid_t *) ;
   void (*release)(struct device *) ;
   struct dev_pm_ops *pm ;
};
#line 1008  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 1139 
enum dl_dev_state {
    DL_DEV_NO_DRIVER = 0,
    DL_DEV_PROBING = 1,
    DL_DEV_DRIVER_BOUND = 2,
    DL_DEV_UNBINDING = 3
};
#line 1164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct dev_links_info {
   struct list_head suppliers ;
   struct list_head consumers ;
   struct list_head needs_suppliers ;
   struct list_head defer_sync ;
   bool need_for_probe ;
   enum dl_dev_state status ;
};
#line 1259 
struct dma_coherent_mem;
#line 1259 
struct cma;
#line 1259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device {
   struct kobject kobj ;
   struct device *parent ;
   struct device_private *p ;
   char *init_name ;
   struct device_type *type ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   void *driver_data ;
   struct mutex lockdep_mutex ;
   struct mutex mutex ;
   struct dev_links_info links ;
   struct dev_pm_info power ;
   struct dev_pm_domain *pm_domain ;
   struct irq_domain *msi_domain ;
   struct dev_pin_info *pins ;
   struct list_head msi_list ;
   struct dma_map_ops *dma_ops ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   u64 bus_dma_limit ;
   unsigned long dma_pfn_offset ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct cma *cma_area ;
   struct dev_archdata archdata ;
   struct device_node *of_node ;
   struct fwnode_handle *fwnode ;
   int numa_node ;
   dev_t devt ;
   u32 id ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct class *class ;
   struct attribute_group **groups ;
   void (*release)(struct device *) ;
   struct iommu_group *iommu_group ;
   struct iommu_fwspec *iommu_fwspec ;
   struct iommu_param *iommu_param ;
   bool offline_disabled : 1 ;
   bool offline : 1 ;
   bool of_node_reused : 1 ;
   bool state_synced : 1 ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_wakeup.h"
struct wakeup_source {
   char *name ;
   int id ;
   struct list_head entry ;
   spinlock_t lock ;
   struct wake_irq *wakeirq ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   ktime_t start_prevent_time ;
   ktime_t prevent_sleep_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long expire_count ;
   unsigned long wakeup_count ;
   struct device *dev ;
   bool active : 1 ;
   bool autosleep_enabled : 1 ;
};
#line 1913  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct mfd_cell;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/platform_device.h"
struct platform_device {
   char *name ;
   int id ;
   bool id_auto ;
   struct device dev ;
   u64 dma_mask ;
   u32 num_resources ;
   struct resource *resource ;
   struct platform_device_id *id_entry ;
   char *driver_override ;
   struct mfd_cell *mfd_cell ;
   struct pdev_archdata archdata ;
};
#line 347 
struct percpu_ref;
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/platform_device.h"
typedef void percpu_ref_func_t(struct percpu_ref *);
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-refcount.h"
struct percpu_ref {
   atomic_long_t count ;
   unsigned long percpu_count_ptr ;
   percpu_ref_func_t *release ;
   percpu_ref_func_t *confirm_switch ;
   bool force_atomic : 1 ;
   bool allow_reinit : 1 ;
   struct callback_head rcu ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrink_control {
   gfp_t gfp_mask ;
   int nid ;
   unsigned long nr_to_scan ;
   unsigned long nr_scanned ;
   struct mem_cgroup *memcg ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrinker {
   unsigned long (*count_objects)(struct shrinker *, struct shrink_control *) ;
   unsigned long (*scan_objects)(struct shrinker *, struct shrink_control *) ;
   long batch ;
   int seeks ;
   unsigned int flags ;
   struct list_head list ;
   int id ;
   atomic_long_t *nr_deferred ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct vmem_altmap {
   unsigned long base_pfn ;
   unsigned long end_pfn ;
   unsigned long reserve ;
   unsigned long free ;
   unsigned long align ;
   unsigned long alloc ;
};
#line 26 
enum memory_type {
    MEMORY_DEVICE_PRIVATE = 1,
    MEMORY_DEVICE_FS_DAX = 2,
    MEMORY_DEVICE_DEVDAX = 3,
    MEMORY_DEVICE_PCI_P2PDMA = 4
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap_ops {
   void (*page_free)(struct page *) ;
   void (*kill)(struct dev_pagemap *) ;
   void (*cleanup)(struct dev_pagemap *) ;
   vm_fault_t (*migrate_to_ram)(struct vm_fault *) ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap {
   struct vmem_altmap altmap ;
   struct resource res ;
   struct percpu_ref *ref ;
   struct percpu_ref internal_ref ;
   struct completion done ;
   enum memory_type type ;
   unsigned int flags ;
   struct dev_pagemap_ops *ops ;
};
#line 176 
struct file_ra_state;
#line 177 
struct writeback_control;
#line 178 
struct bdi_writeback;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/extable.h"
struct exception_table_entry {
   int insn ;
   int fixup ;
   int handler ;
};
#line 417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_fault {
   struct vm_area_struct *vma ;
   unsigned int flags ;
   gfp_t gfp_mask ;
   unsigned long pgoff ;
   unsigned long address ;
   pmd_t *pmd ;
   pud_t *pud ;
   pte_t orig_pte ;
   struct page *cow_page ;
   struct mem_cgroup *memcg ;
   struct page *page ;
   pte_t *pte ;
   spinlock_t *ptl ;
   pgtable_t prealloc_pte ;
};
#line 448 
enum page_entry_size {
    PE_SIZE_PTE = 0,
    PE_SIZE_PMD = 1,
    PE_SIZE_PUD = 2
};
#line 467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct *) ;
   void (*close)(struct vm_area_struct *) ;
   int (*split)(struct vm_area_struct *, unsigned long ) ;
   int (*mremap)(struct vm_area_struct *) ;
   vm_fault_t (*fault)(struct vm_fault *) ;
   vm_fault_t (*huge_fault)(struct vm_fault *, enum page_entry_size ) ;
   void (*map_pages)(struct vm_fault *, unsigned long , unsigned long ) ;
   unsigned long (*pagesize)(struct vm_area_struct *) ;
   vm_fault_t (*page_mkwrite)(struct vm_fault *) ;
   vm_fault_t (*pfn_mkwrite)(struct vm_fault *) ;
   int (*access)(struct vm_area_struct *, unsigned long , void *, int , int ) ;
   char *(*name)(struct vm_area_struct *) ;
   int (*set_policy)(struct vm_area_struct *, struct mempolicy *) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct *, unsigned long ) ;
   struct page *(*find_special_page)(struct vm_area_struct *, unsigned long ) ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_head {
   struct hlist_bl_node *first ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node {
   struct hlist_bl_node *next ;
   struct hlist_bl_node **pprev ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct __anonstruct_404 {
   spinlock_t lock ;
   int count ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
union __anonunion_403 {
   struct __anonstruct_404 __anonCompField___anonunion_403_56 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct lockref {
   union __anonunion_403 __anonCompField_lockref_57 ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stringhash.h"
struct path;
#line 79 
struct vfsmount;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct __anonstruct_406 {
   u32 hash ;
   u32 len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_405 {
   struct __anonstruct_406 __anonCompField___anonunion_405_58 ;
   u64 hash_len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct qstr {
   union __anonunion_405 __anonCompField_qstr_59 ;
   unsigned char *name ;
};
#line 89 
struct dentry_operations;
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_407 {
   struct list_head d_lru ;
   wait_queue_head_t *d_wait ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_d_u_408 {
   struct hlist_node d_alias ;
   struct hlist_bl_node d_in_lookup_hash ;
   struct callback_head d_rcu ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry {
   unsigned int d_flags ;
   seqcount_t d_seq ;
   struct hlist_bl_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct inode *d_inode ;
   unsigned char d_iname[32U] ;
   struct lockref d_lockref ;
   struct dentry_operations *d_op ;
   struct super_block *d_sb ;
   unsigned long d_time ;
   void *d_fsdata ;
   union __anonunion_407 __anonCompField_dentry_60 ;
   struct list_head d_child ;
   struct list_head d_subdirs ;
   union __anonunion_d_u_408 d_u ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_weak_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_hash)(struct dentry *, struct qstr *) ;
   int (*d_compare)(struct dentry *, unsigned int , char *, struct qstr *) ;
   int (*d_delete)(struct dentry *) ;
   int (*d_init)(struct dentry *) ;
   void (*d_release)(struct dentry *) ;
   void (*d_prune)(struct dentry *) ;
   void (*d_iput)(struct dentry *, struct inode *) ;
   char *(*d_dname)(struct dentry *, char *, int ) ;
   struct vfsmount *(*d_automount)(struct path *) ;
   int (*d_manage)(struct path *, bool ) ;
   struct dentry *(*d_real)(struct dentry *, struct inode *) ;
} __attribute__((__aligned__(64)));
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/path.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
} __attribute__((__designated_init__));
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_one {
   struct list_head list ;
   long nr_items ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_memcg {
   struct callback_head rcu ;
   struct list_lru_one *lru[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_node {
   spinlock_t lock ;
   struct list_lru_one lru ;
   struct list_lru_memcg *memcg_lrus ;
   long nr_items ;
} __attribute__((__aligned__(64)));
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru {
   struct list_lru_node *node ;
   struct list_head list ;
   int shrinker_id ;
   bool memcg_aware ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fiemap.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
#line 39 
enum migrate_mode {
    MIGRATE_ASYNC = 0,
    MIGRATE_SYNC_LIGHT = 1,
    MIGRATE_SYNC = 2,
    MIGRATE_SYNC_NO_COPY = 3
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcuwait.h"
struct rcuwait {
   struct task_struct *task ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_sync.h"
struct rcu_sync {
   int gp_state ;
   int gp_count ;
   wait_queue_head_t gp_wait ;
   struct callback_head cb_head ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-rwsem.h"
struct percpu_rw_semaphore {
   struct rcu_sync rss ;
   unsigned int *read_count ;
   struct rw_semaphore rw_sem ;
   struct rcuwait writer ;
   int readers_block ;
};
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delayed_call.h"
struct delayed_call {
   void (*fn)(void *) ;
   void *arg ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
struct __anonstruct_uuid_t_416 {
   __u8 b[16U] ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
typedef struct __anonstruct_uuid_t_416 uuid_t;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uuid.h"
typedef u32 errseq_t;
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_417 {
   struct list_head q_node ;
   struct kmem_cache *__rcu_icq_cache ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_418 {
   struct hlist_node ioc_node ;
   struct callback_head __rcu_head ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_cq {
   struct request_queue *q ;
   struct io_context *ioc ;
   union __anonunion_417 __anonCompField_io_cq_61 ;
   union __anonunion_418 __anonCompField_io_cq_62 ;
   unsigned int flags ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_context {
   atomic_long_t refcount ;
   atomic_t active_ref ;
   atomic_t nr_tasks ;
   spinlock_t lock ;
   unsigned short ioprio ;
   int nr_batch_requests ;
   unsigned long last_waited ;
   struct xarray icq_tree ;
   struct io_cq *icq_hint ;
   struct hlist_head icq_list ;
   struct work_struct release_work ;
};
#line 286  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fs.h"
struct bio;
#line 287 
struct export_operations;
#line 288 
struct hd_geometry;
#line 289 
struct iovec;
#line 290 
struct kiocb;
#line 291 
struct kstatfs;
#line 292 
struct swap_info_struct;
#line 293 
struct iov_iter;
#line 294 
struct fscrypt_info;
#line 295 
struct fscrypt_operations;
#line 296 
struct fsverity_info;
#line 297 
struct fsverity_operations;
#line 298 
struct fs_parameter_description;
#line 224  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   kuid_t ia_uid ;
   kgid_t ia_gid ;
   loff_t ia_size ;
   struct timespec64 ia_atime ;
   struct timespec64 ia_mtime ;
   struct timespec64 ia_ctime ;
   struct file *ia_file ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu_counter.h"
struct percpu_counter {
   raw_spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dqblk_xfs.h"
struct dquot;
#line 215 
struct kqid;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef __kernel_uid32_t projid_t;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
struct __anonstruct_kprojid_t_419 {
   projid_t val ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef struct __anonstruct_kprojid_t_419 kprojid_t;
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/quota.h"
enum quota_type {
    USRQUOTA = 0,
    GRPQUOTA = 1,
    PRJQUOTA = 2
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
typedef long long qsize_t;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
union __anonunion_420 {
   kuid_t uid ;
   kgid_t gid ;
   kprojid_t projid ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct kqid {
   union __anonunion_420 __anonCompField_kqid_63 ;
   enum quota_type type ;
};
#line 205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time64_t dqb_btime ;
   time64_t dqb_itime ;
};
#line 216 
struct quota_format_type;
#line 222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_max_spc_limit ;
   qsize_t dqi_max_ino_limit ;
   void *dqi_priv ;
};
#line 294  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   spinlock_t dq_dqb_lock ;
   atomic_t dq_count ;
   struct super_block *dq_sb ;
   struct kqid dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   struct mem_dqblk dq_dqb ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block *, int ) ;
   int (*read_file_info)(struct super_block *, int ) ;
   int (*write_file_info)(struct super_block *, int ) ;
   int (*free_file_info)(struct super_block *, int ) ;
   int (*read_dqblk)(struct dquot *) ;
   int (*commit_dqblk)(struct dquot *) ;
   int (*release_dqblk)(struct dquot *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 322  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot_operations {
   int (*write_dquot)(struct dquot *) ;
   struct dquot *(*alloc_dquot)(struct super_block *, int ) ;
   void (*destroy_dquot)(struct dquot *) ;
   int (*acquire_dquot)(struct dquot *) ;
   int (*release_dquot)(struct dquot *) ;
   int (*mark_dirty)(struct dquot *) ;
   int (*write_info)(struct super_block *, int ) ;
   qsize_t *(*get_reserved_space)(struct inode *) ;
   int (*get_projid)(struct inode *, kprojid_t *) ;
   int (*get_inode_usage)(struct inode *, qsize_t *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 343  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_dqblk {
   int d_fieldmask ;
   u64 d_spc_hardlimit ;
   u64 d_spc_softlimit ;
   u64 d_ino_hardlimit ;
   u64 d_ino_softlimit ;
   u64 d_space ;
   u64 d_ino_count ;
   s64 d_ino_timer ;
   s64 d_spc_timer ;
   int d_ino_warns ;
   int d_spc_warns ;
   u64 d_rt_spc_hardlimit ;
   u64 d_rt_spc_softlimit ;
   u64 d_rt_space ;
   s64 d_rt_spc_timer ;
   int d_rt_spc_warns ;
};
#line 395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_type_state {
   unsigned int flags ;
   unsigned int spc_timelimit ;
   unsigned int ino_timelimit ;
   unsigned int rt_spc_timelimit ;
   unsigned int spc_warnlimit ;
   unsigned int ino_warnlimit ;
   unsigned int rt_spc_warnlimit ;
   unsigned long long ino ;
   blkcnt_t blocks ;
   blkcnt_t nextents ;
};
#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_state {
   unsigned int s_incoredqs ;
   struct qc_type_state s_state[3U] ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_info {
   int i_fieldmask ;
   unsigned int i_flags ;
   unsigned int i_spc_timelimit ;
   unsigned int i_ino_timelimit ;
   unsigned int i_rt_spc_timelimit ;
   unsigned int i_spc_warnlimit ;
   unsigned int i_ino_warnlimit ;
   unsigned int i_rt_spc_warnlimit ;
};
#line 428  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block *, int , int , struct path *) ;
   int (*quota_off)(struct super_block *, int ) ;
   int (*quota_enable)(struct super_block *, unsigned int ) ;
   int (*quota_disable)(struct super_block *, unsigned int ) ;
   int (*quota_sync)(struct super_block *, int ) ;
   int (*set_info)(struct super_block *, int , struct qc_info *) ;
   int (*get_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_nextdqblk)(struct super_block *, struct kqid *, struct qc_dqblk *) ;
   int (*set_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_state)(struct super_block *, struct qc_state *) ;
   int (*rm_xquota)(struct super_block *, unsigned int ) ;
};
#line 443  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 518  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct rw_semaphore dqio_sem ;
   struct inode *files[3U] ;
   struct mem_dqinfo info[3U] ;
   struct quota_format_ops *ops[3U] ;
};
#line 538 
enum rw_hint {
    WRITE_LIFE_NOT_SET = 0,
    WRITE_LIFE_NONE = 1,
    WRITE_LIFE_SHORT = 2,
    WRITE_LIFE_MEDIUM = 3,
    WRITE_LIFE_LONG = 4,
    WRITE_LIFE_EXTREME = 5
};
#line 318  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct kiocb {
   struct file *ki_filp ;
   loff_t ki_pos ;
   void (*ki_complete)(struct kiocb *, long , long ) ;
   void *private ;
   int ki_flags ;
   u16 ki_hint ;
   u16 ki_ioprio ;
   unsigned int ki_cookie ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_arg_422 {
   char *buf ;
   void *data ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct __anonstruct_read_descriptor_t_421 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_422 arg ;
   int error ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
typedef struct __anonstruct_read_descriptor_t_421 read_descriptor_t;
#line 362  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page *, struct writeback_control *) ;
   int (*readpage)(struct file *, struct page *) ;
   int (*writepages)(struct address_space *, struct writeback_control *) ;
   int (*set_page_dirty)(struct page *) ;
   int (*readpages)(struct file *, struct address_space *, struct list_head *, unsigned int ) ;
   int (*write_begin)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page **, void **) ;
   int (*write_end)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page *, void *) ;
   sector_t (*bmap)(struct address_space *, sector_t ) ;
   void (*invalidatepage)(struct page *, unsigned int , unsigned int ) ;
   int (*releasepage)(struct page *, gfp_t ) ;
   void (*freepage)(struct page *) ;
   ssize_t (*direct_IO)(struct kiocb *, struct iov_iter *) ;
   int (*migratepage)(struct address_space *, struct page *, struct page *, enum migrate_mode ) ;
   bool (*isolate_page)(struct page *, isolate_mode_t ) ;
   void (*putback_page)(struct page *) ;
   int (*launder_page)(struct page *) ;
   int (*is_partially_uptodate)(struct page *, unsigned long , unsigned long ) ;
   void (*is_dirty_writeback)(struct page *, bool *, bool *) ;
   int (*error_remove_page)(struct address_space *, struct page *) ;
   int (*swap_activate)(struct swap_info_struct *, struct file *, sector_t *) ;
   void (*swap_deactivate)(struct file *) ;
};
#line 445  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct xarray i_pages ;
   gfp_t gfp_mask ;
   atomic_t i_mmap_writable ;
   atomic_t nr_thps ;
   struct rb_root_cached i_mmap ;
   struct rw_semaphore i_mmap_rwsem ;
   unsigned long nrpages ;
   unsigned long nrexceptional ;
   unsigned long writeback_index ;
   struct address_space_operations *a_ops ;
   unsigned long flags ;
   errseq_t wb_err ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   void *private_data ;
} __attribute__((__designated_init__, __aligned__(8)));
#line 473 
struct hd_struct;
#line 473 
struct gendisk;
#line 473  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   int bd_openers ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   struct mutex bd_mutex ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   bool bd_write_holder ;
   struct list_head bd_holder_disks ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   u8 bd_partno ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct request_queue *bd_queue ;
   struct backing_dev_info *bd_bdi ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
} __attribute__((__designated_init__));
#line 587 
struct posix_acl;
#line 614 
struct fsnotify_mark_connector;
#line 628 
struct inode_operations;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_425 {
   unsigned int i_nlink ;
   unsigned int __i_nlink ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_426 {
   struct hlist_head i_dentry ;
   struct callback_head i_rcu ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_427 {
   struct file_operations *i_fop ;
   void (*free_inode)(struct inode *) ;
};
#line 628 
struct file_lock_context;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_428 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
   char *i_link ;
   unsigned int i_dir_seq ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode {
   umode_t i_mode ;
   unsigned short i_opflags ;
   kuid_t i_uid ;
   kgid_t i_gid ;
   unsigned int i_flags ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   struct inode_operations *i_op ;
   struct super_block *i_sb ;
   struct address_space *i_mapping ;
   void *i_security ;
   unsigned long i_ino ;
   union __anonunion_425 __anonCompField_inode_64 ;
   dev_t i_rdev ;
   loff_t i_size ;
   struct timespec64 i_atime ;
   struct timespec64 i_mtime ;
   struct timespec64 i_ctime ;
   spinlock_t i_lock ;
   unsigned short i_bytes ;
   u8 i_blkbits ;
   u8 i_write_hint ;
   blkcnt_t i_blocks ;
   unsigned long i_state ;
   struct rw_semaphore i_rwsem ;
   unsigned long dirtied_when ;
   unsigned long dirtied_time_when ;
   struct hlist_node i_hash ;
   struct list_head i_io_list ;
   struct bdi_writeback *i_wb ;
   int i_wb_frn_winner ;
   u16 i_wb_frn_avg_time ;
   u16 i_wb_frn_history ;
   struct list_head i_lru ;
   struct list_head i_sb_list ;
   struct list_head i_wb_list ;
   union __anonunion_426 __anonCompField_inode_65 ;
   atomic64_t i_version ;
   atomic_t i_count ;
   atomic_t i_dio_count ;
   atomic_t i_writecount ;
   atomic_t i_readcount ;
   union __anonunion_427 __anonCompField_inode_66 ;
   struct file_lock_context *i_flctx ;
   struct address_space i_data ;
   struct list_head i_devices ;
   union __anonunion_428 __anonCompField_inode_67 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct fsnotify_mark_connector *i_fsnotify_marks ;
   struct fscrypt_info *i_crypt_info ;
   struct fsverity_info *i_verity_info ;
   void *i_private ;
} __attribute__((__designated_init__));
#line 904  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   kuid_t uid ;
   kuid_t euid ;
   int signum ;
};
#line 915  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_f_u_429 {
   struct llist_node fu_llist ;
   struct callback_head fu_rcuhead ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file {
   union __anonunion_f_u_429 f_u ;
   struct path f_path ;
   struct inode *f_inode ;
   struct file_operations *f_op ;
   spinlock_t f_lock ;
   enum rw_hint f_write_hint ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   struct mutex f_pos_lock ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct list_head f_tfile_llink ;
   struct address_space *f_mapping ;
   errseq_t f_wb_err ;
} __attribute__((__designated_init__, __aligned__(4)));
#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
typedef void *fl_owner_t;
#line 1026 
struct file_lock;
#line 1029  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock *, struct file_lock *) ;
   void (*fl_release_private)(struct file_lock *) ;
};
#line 1034  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct lock_manager_operations {
   fl_owner_t (*lm_get_owner)(fl_owner_t ) ;
   void (*lm_put_owner)(fl_owner_t ) ;
   void (*lm_notify)(struct file_lock *) ;
   int (*lm_grant)(struct file_lock *, int ) ;
   bool (*lm_break)(struct file_lock *) ;
   int (*lm_change)(struct file_lock *, int , struct list_head *) ;
   void (*lm_setup)(struct file_lock *, void **) ;
};
#line 1052 
struct net;
#line 1058 
struct nlm_lockowner;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 15 
struct nfs4_lock_state;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct;
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct __anonstruct_afs_431 {
   struct list_head link ;
   int state ;
   unsigned int debug_id ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_fl_u_430 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_431 afs ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock {
   struct file_lock *fl_blocker ;
   struct list_head fl_list ;
   struct hlist_node fl_link ;
   struct list_head fl_blocked_requests ;
   struct list_head fl_blocked_member ;
   fl_owner_t fl_owner ;
   unsigned int fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   int fl_link_cpu ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   unsigned long fl_downgrade_time ;
   struct file_lock_operations *fl_ops ;
   struct lock_manager_operations *fl_lmops ;
   union __anonunion_fl_u_430 fl_u ;
} __attribute__((__designated_init__));
#line 1117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_context {
   spinlock_t flc_lock ;
   struct list_head flc_flock ;
   struct list_head flc_posix ;
   struct list_head flc_lease ;
};
#line 1331  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct {
   rwlock_t fa_lock ;
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
   struct callback_head fa_rcu ;
};
#line 1418  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct sb_writers {
   int frozen ;
   wait_queue_head_t wait_unfrozen ;
   struct percpu_rw_semaphore rw_sem[3U] ;
};
#line 1424 
struct super_operations;
#line 1424 
struct xattr_handler;
#line 1424 
struct mtd_info;
#line 1424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations *s_op ;
   struct dquot_operations *dq_op ;
   struct quotactl_ops *s_qcop ;
   struct export_operations *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_iflags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   int s_count ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler **s_xattr ;
   struct fscrypt_operations *s_cop ;
   struct key *s_master_keys ;
   struct fsverity_operations *s_vop ;
   struct hlist_bl_head s_roots ;
   struct list_head s_mounts ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct hlist_node s_instances ;
   unsigned int s_quota_types ;
   struct quota_info s_dquot ;
   struct sb_writers s_writers ;
   void *s_fs_info ;
   u32 s_time_gran ;
   time64_t s_time_min ;
   time64_t s_time_max ;
   __u32 s_fsnotify_mask ;
   struct fsnotify_mark_connector *s_fsnotify_marks ;
   char s_id[32U] ;
   uuid_t s_uuid ;
   unsigned int s_max_links ;
   fmode_t s_mode ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   struct dentry_operations *s_d_op ;
   int cleancache_poolid ;
   struct shrinker s_shrink ;
   atomic_long_t s_remove_count ;
   atomic_long_t s_fsnotify_inode_refs ;
   int s_readonly_remount ;
   struct workqueue_struct *s_dio_done_wq ;
   struct hlist_head s_pins ;
   struct user_namespace *s_user_ns ;
   struct list_lru s_dentry_lru ;
   struct list_lru s_inode_lru ;
   struct callback_head rcu ;
   struct work_struct destroy_work ;
   struct mutex s_sync_lock ;
   int s_stack_depth ;
   spinlock_t s_inode_list_lock ;
   struct list_head s_inodes ;
   spinlock_t s_inode_wblist_lock ;
   struct list_head s_inodes_wb ;
} __attribute__((__designated_init__));
#line 1746  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1756 
struct dir_context;
#line 1767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct dir_context {
   int (*actor)(struct dir_context *, char *, int , loff_t , u64 , unsigned int ) ;
   loff_t pos ;
};
#line 1771 
struct block_device_operations;
#line 1821  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file *, loff_t , int ) ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*read_iter)(struct kiocb *, struct iov_iter *) ;
   ssize_t (*write_iter)(struct kiocb *, struct iov_iter *) ;
   int (*iopoll)(struct kiocb *, bool ) ;
   int (*iterate)(struct file *, struct dir_context *) ;
   int (*iterate_shared)(struct file *, struct dir_context *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   unsigned long mmap_supported_flags ;
   int (*open)(struct inode *, struct file *) ;
   int (*flush)(struct file *, fl_owner_t ) ;
   int (*release)(struct inode *, struct file *) ;
   int (*fsync)(struct file *, loff_t , loff_t , int ) ;
   int (*fasync)(int , struct file *, int ) ;
   int (*lock)(struct file *, int , struct file_lock *) ;
   ssize_t (*sendpage)(struct file *, struct page *, int , size_t , loff_t *, int ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*check_flags)(int ) ;
   int (*flock)(struct file *, int , struct file_lock *) ;
   ssize_t (*splice_write)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ) ;
   ssize_t (*splice_read)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*setlease)(struct file *, long , struct file_lock **, void **) ;
   long (*fallocate)(struct file *, int , loff_t , loff_t ) ;
   void (*show_fdinfo)(struct seq_file *, struct file *) ;
   ssize_t (*copy_file_range)(struct file *, loff_t , struct file *, loff_t , size_t , unsigned int ) ;
   loff_t (*remap_file_range)(struct file *, loff_t , struct file *, loff_t , loff_t , unsigned int ) ;
   int (*fadvise)(struct file *, loff_t , loff_t , int ) ;
} __attribute__((__designated_init__));
#line 1863  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode_operations {
   struct dentry *(*lookup)(struct inode *, struct dentry *, unsigned int ) ;
   char *(*get_link)(struct dentry *, struct inode *, struct delayed_call *) ;
   int (*permission)(struct inode *, int ) ;
   struct posix_acl *(*get_acl)(struct inode *, int ) ;
   int (*readlink)(struct dentry *, char *, int ) ;
   int (*create)(struct inode *, struct dentry *, umode_t , bool ) ;
   int (*link)(struct dentry *, struct inode *, struct dentry *) ;
   int (*unlink)(struct inode *, struct dentry *) ;
   int (*symlink)(struct inode *, struct dentry *, char *) ;
   int (*mkdir)(struct inode *, struct dentry *, umode_t ) ;
   int (*rmdir)(struct inode *, struct dentry *) ;
   int (*mknod)(struct inode *, struct dentry *, umode_t , dev_t ) ;
   int (*rename)(struct inode *, struct dentry *, struct inode *, struct dentry *, unsigned int ) ;
   int (*setattr)(struct dentry *, struct iattr *) ;
   int (*getattr)(struct path *, struct kstat *, u32 , unsigned int ) ;
   ssize_t (*listxattr)(struct dentry *, char *, size_t ) ;
   int (*fiemap)(struct inode *, struct fiemap_extent_info *, u64 , u64 ) ;
   int (*update_time)(struct inode *, struct timespec64 *, int ) ;
   int (*atomic_open)(struct inode *, struct dentry *, struct file *, unsigned int , umode_t ) ;
   int (*tmpfile)(struct inode *, struct dentry *, umode_t ) ;
   int (*set_acl)(struct inode *, struct posix_acl *, int ) ;
} __attribute__((__aligned__(64)));
#line 1942  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block *) ;
   void (*destroy_inode)(struct inode *) ;
   void (*free_inode)(struct inode *) ;
   void (*dirty_inode)(struct inode *, int ) ;
   int (*write_inode)(struct inode *, struct writeback_control *) ;
   int (*drop_inode)(struct inode *) ;
   void (*evict_inode)(struct inode *) ;
   void (*put_super)(struct super_block *) ;
   int (*sync_fs)(struct super_block *, int ) ;
   int (*freeze_super)(struct super_block *) ;
   int (*freeze_fs)(struct super_block *) ;
   int (*thaw_super)(struct super_block *) ;
   int (*unfreeze_fs)(struct super_block *) ;
   int (*statfs)(struct dentry *, struct kstatfs *) ;
   int (*remount_fs)(struct super_block *, int *, char *) ;
   void (*umount_begin)(struct super_block *) ;
   int (*show_options)(struct seq_file *, struct dentry *) ;
   int (*show_devname)(struct seq_file *, struct dentry *) ;
   int (*show_path)(struct seq_file *, struct dentry *) ;
   int (*show_stats)(struct seq_file *, struct dentry *) ;
   ssize_t (*quota_read)(struct super_block *, int , char *, size_t , loff_t ) ;
   ssize_t (*quota_write)(struct super_block *, int , char *, size_t , loff_t ) ;
   struct dquot **(*get_dquots)(struct inode *) ;
   int (*bdev_try_to_free_page)(struct super_block *, struct page *, gfp_t ) ;
   long (*nr_cached_objects)(struct super_block *, struct shrink_control *) ;
   long (*free_cached_objects)(struct super_block *, struct shrink_control *) ;
};
#line 2217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_system_type {
   char *name ;
   int fs_flags ;
   int (*init_fs_context)(struct fs_context *) ;
   struct fs_parameter_description *parameters ;
   struct dentry *(*mount)(struct file_system_type *, int , char *, void *) ;
   void (*kill_sb)(struct super_block *) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct hlist_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key s_vfs_rename_key ;
   struct lock_class_key s_writers_key[3U] ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
};
#line 1565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct kvec;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bvec.h"
struct bio_vec {
   struct page *bv_page ;
   unsigned int bv_len ;
   unsigned int bv_offset ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bvec.h"
struct bvec_iter {
   sector_t bi_sector ;
   unsigned int bi_size ;
   unsigned int bi_idx ;
   unsigned int bi_bvec_done ;
};
#line 686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
struct scatterlist;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uio.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct kvec {
   void *iov_base ;
   size_t iov_len ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_445 {
   struct iovec *iov ;
   struct kvec *kvec ;
   struct bio_vec *bvec ;
   struct pipe_inode_info *pipe ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct __anonstruct_447 {
   unsigned int head ;
   unsigned int start_head ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_446 {
   unsigned long nr_segs ;
   struct __anonstruct_447 __anonCompField___anonunion_446_69 ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct iov_iter {
   unsigned int type ;
   size_t iov_offset ;
   size_t count ;
   union __anonunion_445 __anonCompField_iov_iter_68 ;
   union __anonunion_446 __anonCompField_iov_iter_70 ;
};
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
typedef unsigned short __kernel_sa_family_t;
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/socket.h"
struct socket;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
typedef __kernel_sa_family_t sa_family_t;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14U] ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct msghdr {
   void *msg_name ;
   int msg_namelen ;
   struct iov_iter msg_iter ;
   void *msg_control ;
   __kernel_size_t msg_controllen ;
   unsigned int msg_flags ;
   struct kiocb *msg_iocb ;
};
#line 422 
struct ns_common;
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
enum ldv_9783 {
    SS_FREE = 0,
    SS_UNCONNECTED = 1,
    SS_CONNECTING = 2,
    SS_CONNECTED = 3,
    SS_DISCONNECTING = 4
};
#line 209  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
typedef enum ldv_9783 socket_state;
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct socket_wq {
   wait_queue_head_t wait ;
   struct fasync_struct *fasync_list ;
   unsigned long flags ;
   struct callback_head rcu ;
} __attribute__((__aligned__(64)));
#line 112 
struct proto_ops;
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct socket {
   socket_state state ;
   short type ;
   unsigned long flags ;
   struct file *file ;
   struct sock *sk ;
   struct proto_ops *ops ;
   struct socket_wq wq ;
};
#line 125 
struct sk_buff;
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct proto_ops {
   int family ;
   struct module *owner ;
   int (*release)(struct socket *) ;
   int (*bind)(struct socket *, struct sockaddr *, int ) ;
   int (*connect)(struct socket *, struct sockaddr *, int , int ) ;
   int (*socketpair)(struct socket *, struct socket *) ;
   int (*accept)(struct socket *, struct socket *, int , bool ) ;
   int (*getname)(struct socket *, struct sockaddr *, int ) ;
   __poll_t (*poll)(struct file *, struct socket *, struct poll_table_struct *) ;
   int (*ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*compat_ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*gettstamp)(struct socket *, void *, bool , bool ) ;
   int (*listen)(struct socket *, int ) ;
   int (*shutdown)(struct socket *, int ) ;
   int (*setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*compat_setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*sendmsg)(struct socket *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct socket *, struct msghdr *, size_t , int ) ;
   int (*mmap)(struct file *, struct socket *, struct vm_area_struct *) ;
   ssize_t (*sendpage)(struct socket *, struct page *, int , size_t , int ) ;
   ssize_t (*splice_read)(struct socket *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*set_peek_off)(struct sock *, int ) ;
   int (*peek_len)(struct socket *) ;
   int (*read_sock)(struct sock *, read_descriptor_t *, int (*)(read_descriptor_t *, struct sk_buff *, unsigned int , size_t )) ;
   int (*sendpage_locked)(struct sock *, struct page *, int , size_t , int ) ;
   int (*sendmsg_locked)(struct sock *, struct msghdr *, size_t ) ;
   int (*set_rcvlowat)(struct sock *, int ) ;
};
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/checksum_64.h"
struct in6_addr;
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct scatterlist {
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct sg_table {
   struct scatterlist *sgl ;
   unsigned int nents ;
   unsigned int orig_nents ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
struct dma_map_ops {
   void *(*alloc)(struct device *, size_t , dma_addr_t *, gfp_t , unsigned long ) ;
   void (*free)(struct device *, size_t , void *, dma_addr_t , unsigned long ) ;
   int (*mmap)(struct device *, struct vm_area_struct *, void *, dma_addr_t , size_t , unsigned long ) ;
   int (*get_sgtable)(struct device *, struct sg_table *, void *, dma_addr_t , size_t , unsigned long ) ;
   dma_addr_t (*map_page)(struct device *, struct page *, unsigned long , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_page)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   int (*map_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   void (*unmap_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   dma_addr_t (*map_resource)(struct device *, phys_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_resource)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*sync_single_for_cpu)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_single_for_device)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_sg_for_cpu)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*sync_sg_for_device)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*cache_sync)(struct device *, void *, size_t , enum dma_data_direction ) ;
   int (*dma_supported)(struct device *, u64 ) ;
   u64 (*get_required_mask)(struct device *) ;
   size_t (*max_mapping_size)(struct device *) ;
   unsigned long (*get_merge_boundary)(struct device *) ;
};
#line 803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
typedef u64 netdev_features_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
union __anonunion_in6_u_466 {
   __u8 u6_addr8[16U] ;
   __be16 u6_addr16[8U] ;
   __be32 u6_addr32[4U] ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
struct in6_addr {
   union __anonunion_in6_u_466 in6_u ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
struct __anonstruct_siphash_key_t_467 {
   u64 key[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
typedef struct __anonstruct_siphash_key_t_467 siphash_key_t;
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_ether.h"
struct ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_proto ;
} __attribute__((__packed__));
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buffer {
   struct page *page ;
   unsigned int offset ;
   unsigned int len ;
   struct pipe_buf_operations *ops ;
   unsigned int flags ;
   unsigned long private ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_inode_info {
   struct mutex mutex ;
   wait_queue_head_t wait ;
   unsigned int head ;
   unsigned int tail ;
   unsigned int max_usage ;
   unsigned int ring_size ;
   unsigned int readers ;
   unsigned int writers ;
   unsigned int files ;
   unsigned int r_counter ;
   unsigned int w_counter ;
   struct page *tmp_page ;
   struct fasync_struct *fasync_readers ;
   struct fasync_struct *fasync_writers ;
   struct pipe_buffer *bufs ;
   struct user_struct *user ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations {
   int (*confirm)(struct pipe_inode_info *, struct pipe_buffer *) ;
   void (*release)(struct pipe_inode_info *, struct pipe_buffer *) ;
   int (*steal)(struct pipe_inode_info *, struct pipe_buffer *) ;
   bool (*get)(struct pipe_inode_info *, struct pipe_buffer *) ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi_tunnel {
   __be64 tun_id ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi_common {
   int flowic_oif ;
   int flowic_iif ;
   __u32 flowic_mark ;
   __u8 flowic_tos ;
   __u8 flowic_scope ;
   __u8 flowic_proto ;
   __u8 flowic_flags ;
   __u32 flowic_secid ;
   kuid_t flowic_uid ;
   struct flowi_tunnel flowic_tun_key ;
   __u32 flowic_multipath_hash ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_ports_478 {
   __be16 dport ;
   __be16 sport ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_icmpt_479 {
   __u8 type ;
   __u8 code ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_dnports_480 {
   __le16 dport ;
   __le16 sport ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_mht_481 {
   __u8 type ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
union flowi_uli {
   struct __anonstruct_ports_478 ports ;
   struct __anonstruct_icmpt_479 icmpt ;
   struct __anonstruct_dnports_480 dnports ;
   __be32 spi ;
   __be32 gre_key ;
   struct __anonstruct_mht_481 mht ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi4 {
   struct flowi_common __fl_common ;
   __be32 saddr ;
   __be32 daddr ;
   union flowi_uli uli ;
} __attribute__((__aligned__(8)));
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi6 {
   struct flowi_common __fl_common ;
   struct in6_addr daddr ;
   struct in6_addr saddr ;
   __be32 flowlabel ;
   union flowi_uli uli ;
   __u32 mp_hash ;
} __attribute__((__aligned__(8)));
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowidn {
   struct flowi_common __fl_common ;
   __le16 daddr ;
   __le16 saddr ;
   union flowi_uli uli ;
} __attribute__((__aligned__(8)));
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
union __anonunion_u_482 {
   struct flowi_common __fl_common ;
   struct flowi4 ip4 ;
   struct flowi6 ip6 ;
   struct flowidn dn ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi {
   union __anonunion_u_482 u ;
} __attribute__((__aligned__(8)));
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netfilter/nf_conntrack_common.h"
struct ip_conntrack_stat {
   unsigned int found ;
   unsigned int invalid ;
   unsigned int ignore ;
   unsigned int insert ;
   unsigned int insert_failed ;
   unsigned int drop ;
   unsigned int early_drop ;
   unsigned int error ;
   unsigned int expect_new ;
   unsigned int expect_create ;
   unsigned int expect_delete ;
   unsigned int search_restart ;
};
#line 42 
struct bpf_prog;
#line 43 
union bpf_attr;
#line 44 
struct skb_ext;
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 562  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
typedef unsigned int sk_buff_data_t;
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_489 {
   struct net_device *dev ;
   unsigned long dev_scratch ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_488 {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   union __anonunion_489 __anonCompField___anonstruct_488_85 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_487 {
   struct __anonstruct_488 __anonCompField___anonunion_487_86 ;
   struct rb_node rbnode ;
   struct list_head list ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_490 {
   struct sock *sk ;
   int ip_defrag_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_491 {
   ktime_t tstamp ;
   u64 skb_mstamp_ns ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_493 {
   unsigned long _skb_refdst ;
   void (*destructor)(struct sk_buff *) ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_492 {
   struct __anonstruct_493 __anonCompField___anonunion_492_90 ;
   struct list_head tcp_tsorted_anchor ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_495 {
   __u16 csum_start ;
   __u16 csum_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_494 {
   __wsum csum ;
   struct __anonstruct_495 __anonCompField___anonunion_494_92 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_496 {
   unsigned int napi_id ;
   unsigned int sender_cpu ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_497 {
   __u32 mark ;
   __u32 reserved_tailroom ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_498 {
   __be16 inner_protocol ;
   __u8 inner_ipproto ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff {
   union __anonunion_487 __anonCompField_sk_buff_87 ;
   union __anonunion_490 __anonCompField_sk_buff_88 ;
   union __anonunion_491 __anonCompField_sk_buff_89 ;
   char cb[48U] ;
   union __anonunion_492 __anonCompField_sk_buff_91 ;
   unsigned long _nfct ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   __u16 queue_mapping ;
   __u8 __cloned_offset[0U] ;
   __u8 cloned : 1 ;
   __u8 nohdr : 1 ;
   __u8 fclone : 2 ;
   __u8 peeked : 1 ;
   __u8 head_frag : 1 ;
   __u8 pfmemalloc : 1 ;
   __u8 active_extensions ;
   __u32 headers_start[0U] ;
   __u8 __pkt_type_offset[0U] ;
   __u8 pkt_type : 3 ;
   __u8 ignore_df : 1 ;
   __u8 nf_trace : 1 ;
   __u8 ip_summed : 2 ;
   __u8 ooo_okay : 1 ;
   __u8 l4_hash : 1 ;
   __u8 sw_hash : 1 ;
   __u8 wifi_acked_valid : 1 ;
   __u8 wifi_acked : 1 ;
   __u8 no_fcs : 1 ;
   __u8 encapsulation : 1 ;
   __u8 encap_hdr_csum : 1 ;
   __u8 csum_valid : 1 ;
   __u8 __pkt_vlan_present_offset[0U] ;
   __u8 vlan_present : 1 ;
   __u8 csum_complete_sw : 1 ;
   __u8 csum_level : 2 ;
   __u8 csum_not_inet : 1 ;
   __u8 dst_pending_confirm : 1 ;
   __u8 ndisc_nodetype : 2 ;
   __u8 ipvs_property : 1 ;
   __u8 inner_protocol_type : 1 ;
   __u8 remcsum_offload : 1 ;
   __u8 offload_fwd_mark : 1 ;
   __u8 offload_l3_fwd_mark : 1 ;
   __u8 tc_skip_classify : 1 ;
   __u8 tc_at_ingress : 1 ;
   __u8 tc_redirected : 1 ;
   __u8 tc_from_ingress : 1 ;
   __u8 decrypted : 1 ;
   __u16 tc_index ;
   union __anonunion_494 __anonCompField_sk_buff_93 ;
   __u32 priority ;
   int skb_iif ;
   __u32 hash ;
   __be16 vlan_proto ;
   __u16 vlan_tci ;
   union __anonunion_496 __anonCompField_sk_buff_94 ;
   __u32 secmark ;
   union __anonunion_497 __anonCompField_sk_buff_95 ;
   union __anonunion_498 __anonCompField_sk_buff_96 ;
   __u16 inner_transport_header ;
   __u16 inner_network_header ;
   __u16 inner_mac_header ;
   __be16 protocol ;
   __u16 transport_header ;
   __u16 network_header ;
   __u16 mac_header ;
   __u32 headers_end[0U] ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   refcount_t users ;
   struct skb_ext *extensions ;
};
#line 920 
struct dst_entry;
#line 4108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_ext {
   refcount_t refcnt ;
   u8 offset[3U] ;
   u8 chunks ;
   char data[0U] ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
struct dql {
   unsigned int num_queued ;
   unsigned int adj_limit ;
   unsigned int last_obj_cnt ;
   unsigned int limit ;
   unsigned int num_completed ;
   unsigned int prev_ovlimit ;
   unsigned int prev_num_queued ;
   unsigned int prev_last_obj_cnt ;
   unsigned int lowest_slack ;
   unsigned long slack_start_time ;
   unsigned int max_limit ;
   unsigned int min_limit ;
   unsigned int slack_hold_time ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
struct __anonstruct_sync_serial_settings_528 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
typedef struct __anonstruct_sync_serial_settings_528 sync_serial_settings;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_te1_settings_529 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_te1_settings_529 te1_settings;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_raw_hdlc_proto_530 {
   unsigned short encoding ;
   unsigned short parity ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_raw_hdlc_proto_530 raw_hdlc_proto;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_531 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_531 fr_proto;
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_532 {
   unsigned int dlci ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_532 fr_proto_pvc;
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_info_533 {
   unsigned int dlci ;
   char master[16U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_info_533 fr_proto_pvc_info;
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_cisco_proto_534 {
   unsigned int interval ;
   unsigned int timeout ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_cisco_proto_534 cisco_proto;
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifs_ifsu_535 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_535 ifs_ifsu ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifrn_536 {
   char ifrn_name[16U] ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifru_537 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16U] ;
   char ifru_newname[16U] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifreq {
   union __anonunion_ifr_ifrn_536 ifr_ifrn ;
   union __anonunion_ifr_ifru_537 ifr_ifru ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef s32 compat_long_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef u32 compat_uptr_t;
#line 367  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list {
   compat_uptr_t next ;
};
#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list_head {
   struct compat_robust_list list ;
   compat_long_t futex_offset ;
   compat_uptr_t list_op_pending ;
};
#line 177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_drvinfo {
   __u32 cmd ;
   char driver[32U] ;
   char version[32U] ;
   char fw_version[32U] ;
   char bus_info[32U] ;
   char erom_version[32U] ;
   char reserved2[12U] ;
   __u32 n_priv_flags ;
   __u32 n_stats ;
   __u32 testinfo_len ;
   __u32 eedump_len ;
   __u32 regdump_len ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_wolinfo {
   __u32 cmd ;
   __u32 supported ;
   __u32 wolopts ;
   __u8 sopass[6U] ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tunable {
   __u32 cmd ;
   __u32 id ;
   __u32 type_id ;
   __u32 len ;
   void *data[0U] ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_regs {
   __u32 cmd ;
   __u32 version ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eeprom {
   __u32 cmd ;
   __u32 magic ;
   __u32 offset ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eee {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertised ;
   __u32 lp_advertised ;
   __u32 eee_active ;
   __u32 eee_enabled ;
   __u32 tx_lpi_enabled ;
   __u32 tx_lpi_timer ;
   __u32 reserved[2U] ;
};
#line 382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_modinfo {
   __u32 cmd ;
   __u32 type ;
   __u32 eeprom_len ;
   __u32 reserved[8U] ;
};
#line 462  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_coalesce {
   __u32 cmd ;
   __u32 rx_coalesce_usecs ;
   __u32 rx_max_coalesced_frames ;
   __u32 rx_coalesce_usecs_irq ;
   __u32 rx_max_coalesced_frames_irq ;
   __u32 tx_coalesce_usecs ;
   __u32 tx_max_coalesced_frames ;
   __u32 tx_coalesce_usecs_irq ;
   __u32 tx_max_coalesced_frames_irq ;
   __u32 stats_block_coalesce_usecs ;
   __u32 use_adaptive_rx_coalesce ;
   __u32 use_adaptive_tx_coalesce ;
   __u32 pkt_rate_low ;
   __u32 rx_coalesce_usecs_low ;
   __u32 rx_max_coalesced_frames_low ;
   __u32 tx_coalesce_usecs_low ;
   __u32 tx_max_coalesced_frames_low ;
   __u32 pkt_rate_high ;
   __u32 rx_coalesce_usecs_high ;
   __u32 rx_max_coalesced_frames_high ;
   __u32 tx_coalesce_usecs_high ;
   __u32 tx_max_coalesced_frames_high ;
   __u32 rate_sample_interval ;
};
#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ringparam {
   __u32 cmd ;
   __u32 rx_max_pending ;
   __u32 rx_mini_max_pending ;
   __u32 rx_jumbo_max_pending ;
   __u32 tx_max_pending ;
   __u32 rx_pending ;
   __u32 rx_mini_pending ;
   __u32 rx_jumbo_pending ;
   __u32 tx_pending ;
};
#line 541  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_channels {
   __u32 cmd ;
   __u32 max_rx ;
   __u32 max_tx ;
   __u32 max_other ;
   __u32 max_combined ;
   __u32 rx_count ;
   __u32 tx_count ;
   __u32 other_count ;
   __u32 combined_count ;
};
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_pauseparam {
   __u32 cmd ;
   __u32 autoneg ;
   __u32 rx_pause ;
   __u32 tx_pause ;
};
#line 683  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_test {
   __u32 cmd ;
   __u32 flags ;
   __u32 reserved ;
   __u32 len ;
   __u64 data[0U] ;
};
#line 702  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_stats {
   __u32 cmd ;
   __u32 n_stats ;
   __u64 data[0U] ;
};
#line 758  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tos ;
};
#line 775  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 spi ;
   __u8 tos ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 l4_4_bytes ;
   __u8 tos ;
   __u8 ip_ver ;
   __u8 proto ;
};
#line 812  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tclass ;
};
#line 829  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 spi ;
   __u8 tclass ;
};
#line 844  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 l4_4_bytes ;
   __u8 tclass ;
   __u8 l4_proto ;
};
#line 852  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union ethtool_flow_union {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   struct ethtool_tcpip6_spec tcp_ip6_spec ;
   struct ethtool_tcpip6_spec udp_ip6_spec ;
   struct ethtool_tcpip6_spec sctp_ip6_spec ;
   struct ethtool_ah_espip6_spec ah_ip6_spec ;
   struct ethtool_ah_espip6_spec esp_ip6_spec ;
   struct ethtool_usrip6_spec usr_ip6_spec ;
   struct ethhdr ether_spec ;
   __u8 hdata[52U] ;
};
#line 880  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flow_ext {
   __u8 padding[2U] ;
   unsigned char h_dest[6U] ;
   __be16 vlan_etype ;
   __be16 vlan_tci ;
   __be32 data[2U] ;
};
#line 905  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rx_flow_spec {
   __u32 flow_type ;
   union ethtool_flow_union h_u ;
   struct ethtool_flow_ext h_ext ;
   union ethtool_flow_union m_u ;
   struct ethtool_flow_ext m_ext ;
   __u64 ring_cookie ;
   __u32 location ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union __anonunion_556 {
   __u32 rule_cnt ;
   __u32 rss_context ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rxnfc {
   __u32 cmd ;
   __u32 flow_type ;
   __u64 data ;
   struct ethtool_rx_flow_spec fs ;
   union __anonunion_556 __anonCompField_ethtool_rxnfc_99 ;
   __u32 rule_locs[0U] ;
};
#line 1130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flash {
   __u32 cmd ;
   __u32 region ;
   char data[128U] ;
};
#line 1150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_dump {
   __u32 cmd ;
   __u32 version ;
   __u32 flag ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 1230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ts_info {
   __u32 cmd ;
   __u32 so_timestamping ;
   __s32 phc_index ;
   __u32 tx_types ;
   __u32 tx_reserved[3U] ;
   __u32 rx_filters ;
   __u32 rx_reserved[3U] ;
};
#line 1302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_fecparam {
   __u32 cmd ;
   __u32 active_fec ;
   __u32 fec ;
   __u32 reserved ;
};
#line 1876  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_link_settings {
   __u32 cmd ;
   __u32 speed ;
   __u8 duplex ;
   __u8 port ;
   __u8 phy_address ;
   __u8 autoneg ;
   __u8 mdio_support ;
   __u8 eth_tp_mdix ;
   __u8 eth_tp_mdix_ctrl ;
   __s8 link_mode_masks_nwords ;
   __u8 transceiver ;
   __u8 reserved1[3U] ;
   __u32 reserved[7U] ;
   __u32 link_mode_masks[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
enum ethtool_phys_id_state {
    ETHTOOL_ID_INACTIVE = 0,
    ETHTOOL_ID_ACTIVE = 1,
    ETHTOOL_ID_ON = 2,
    ETHTOOL_ID_OFF = 3
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct __anonstruct_link_modes_559 {
   unsigned long supported[2U] ;
   unsigned long advertising[2U] ;
   unsigned long lp_advertising[2U] ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_link_ksettings {
   struct ethtool_link_settings base ;
   struct __anonstruct_link_modes_559 link_modes ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_ops {
   void (*get_drvinfo)(struct net_device *, struct ethtool_drvinfo *) ;
   int (*get_regs_len)(struct net_device *) ;
   void (*get_regs)(struct net_device *, struct ethtool_regs *, void *) ;
   void (*get_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   int (*set_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   u32 (*get_msglevel)(struct net_device *) ;
   void (*set_msglevel)(struct net_device *, u32 ) ;
   int (*nway_reset)(struct net_device *) ;
   u32 (*get_link)(struct net_device *) ;
   int (*get_eeprom_len)(struct net_device *) ;
   int (*get_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*set_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   int (*set_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   void (*get_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   int (*set_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   void (*get_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   int (*set_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   void (*self_test)(struct net_device *, struct ethtool_test *, u64 *) ;
   void (*get_strings)(struct net_device *, u32 , u8 *) ;
   int (*set_phys_id)(struct net_device *, enum ethtool_phys_id_state ) ;
   void (*get_ethtool_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
   int (*begin)(struct net_device *) ;
   void (*complete)(struct net_device *) ;
   u32 (*get_priv_flags)(struct net_device *) ;
   int (*set_priv_flags)(struct net_device *, u32 ) ;
   int (*get_sset_count)(struct net_device *, int ) ;
   int (*get_rxnfc)(struct net_device *, struct ethtool_rxnfc *, u32 *) ;
   int (*set_rxnfc)(struct net_device *, struct ethtool_rxnfc *) ;
   int (*flash_device)(struct net_device *, struct ethtool_flash *) ;
   int (*reset)(struct net_device *, u32 *) ;
   u32 (*get_rxfh_key_size)(struct net_device *) ;
   u32 (*get_rxfh_indir_size)(struct net_device *) ;
   int (*get_rxfh)(struct net_device *, u32 *, u8 *, u8 *) ;
   int (*set_rxfh)(struct net_device *, u32 *, u8 *, u8 ) ;
   int (*get_rxfh_context)(struct net_device *, u32 *, u8 *, u8 *, u32 ) ;
   int (*set_rxfh_context)(struct net_device *, u32 *, u8 *, u8 , u32 *, bool ) ;
   void (*get_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*set_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*get_dump_flag)(struct net_device *, struct ethtool_dump *) ;
   int (*get_dump_data)(struct net_device *, struct ethtool_dump *, void *) ;
   int (*set_dump)(struct net_device *, struct ethtool_dump *) ;
   int (*get_ts_info)(struct net_device *, struct ethtool_ts_info *) ;
   int (*get_module_info)(struct net_device *, struct ethtool_modinfo *) ;
   int (*get_module_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*set_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*get_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*set_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*get_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*set_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*get_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*set_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*get_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   int (*set_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   void (*get_ethtool_phy_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
};
#line 822  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sysctl.h"
struct ctl_table_root;
#line 823 
struct ctl_table_header;
#line 824 
struct ctl_dir;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
typedef int proc_handler(struct ctl_table *, int , void *, size_t *, loff_t *);
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_poll {
   atomic_t event ;
   wait_queue_head_t wait ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table {
   char *procname ;
   void *data ;
   int maxlen ;
   umode_t mode ;
   struct ctl_table *child ;
   proc_handler *proc_handler ;
   struct ctl_table_poll *poll ;
   void *extra1 ;
   void *extra2 ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_node {
   struct rb_node node ;
   struct ctl_table_header *header ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct __anonstruct_561 {
   struct ctl_table *ctl_table ;
   int used ;
   int count ;
   int nreg ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
union __anonunion_560 {
   struct __anonstruct_561 __anonCompField___anonunion_560_100 ;
   struct callback_head rcu ;
};
#line 142 
struct ctl_table_set;
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_header {
   union __anonunion_560 __anonCompField_ctl_table_header_101 ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_dir *parent ;
   struct ctl_node *node ;
   struct hlist_head inodes ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_dir {
   struct ctl_table_header header ;
   struct rb_root root ;
};
#line 167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_set {
   int (*is_seen)(struct ctl_table_set *) ;
   struct ctl_dir dir ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_root {
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root *) ;
   void (*set_ownership)(struct ctl_table_header *, struct ctl_table *, kuid_t *, kgid_t *) ;
   int (*permissions)(struct ctl_table_header *, struct ctl_table *) ;
};
#line 242 
struct prot_inuse;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/core.h"
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   int *sock_inuse ;
   struct prot_inuse *prot_inuse ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct u64_stats_sync {
   };
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct __anonstruct_local_t_562 {
   atomic_long_t a ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
typedef struct __anonstruct_local_t_562 local_t;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
struct __anonstruct_local64_t_563 {
   local_t a ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
typedef struct __anonstruct_local64_t_563 local64_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
struct __anonstruct_u64_stats_t_564 {
   local64_t v ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
typedef struct __anonstruct_u64_stats_t_564 u64_stats_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct ipstats_mib {
   u64 mibs[37U] ;
   struct u64_stats_sync syncp ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmp_mib {
   unsigned long mibs[28U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpmsg_mib {
   atomic_long_t mibs[512U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6_mib {
   unsigned long mibs[6U] ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6msg_mib {
   atomic_long_t mibs[512U] ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct tcp_mib {
   unsigned long mibs[16U] ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct udp_mib {
   unsigned long mibs[9U] ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_mib {
   unsigned long mibs[120U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_xfrm_mib {
   unsigned long mibs[29U] ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_tls_mib {
   unsigned long mibs[11U] ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mib.h"
struct proc_dir_entry;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mib.h"
struct netns_mib {
   struct tcp_mib *tcp_statistics ;
   struct ipstats_mib *ip_statistics ;
   struct linux_mib *net_statistics ;
   struct udp_mib *udp_statistics ;
   struct udp_mib *udplite_statistics ;
   struct icmp_mib *icmp_statistics ;
   struct icmpmsg_mib *icmpmsg_statistics ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6 ;
   struct udp_mib *udplite_stats_in6 ;
   struct ipstats_mib *ipv6_statistics ;
   struct icmpv6_mib *icmpv6_statistics ;
   struct icmpv6msg_mib *icmpv6msg_statistics ;
   struct linux_xfrm_mib *xfrm_statistics ;
   struct linux_tls_mib *tls_statistics ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/unix.h"
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/packet.h"
struct netns_packet {
   struct mutex sklist_lock ;
   struct hlist_head sklist ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags;
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct fqdir {
   long high_thresh ;
   long low_thresh ;
   int timeout ;
   int max_dist ;
   struct inet_frags *f ;
   struct net *net ;
   bool dead ;
   struct rhashtable rhashtable ;
   atomic_long_t mem ;
   struct work_struct destroy_work ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v4_compare_key {
   __be32 saddr ;
   __be32 daddr ;
   u32 user ;
   u32 vif ;
   __be16 id ;
   u16 protocol ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v6_compare_key {
   struct in6_addr saddr ;
   struct in6_addr daddr ;
   u32 user ;
   __be32 id ;
   u32 iif ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
union __anonunion_key_565 {
   struct frag_v4_compare_key v4 ;
   struct frag_v6_compare_key v6 ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frag_queue {
   struct rhash_head node ;
   union __anonunion_key_565 key ;
   struct timer_list timer ;
   spinlock_t lock ;
   refcount_t refcnt ;
   struct rb_root rb_fragments ;
   struct sk_buff *fragments_tail ;
   struct sk_buff *last_run_head ;
   ktime_t stamp ;
   int len ;
   int meat ;
   __u8 flags ;
   u16 max_size ;
   struct fqdir *fqdir ;
   struct callback_head rcu ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags {
   unsigned int qsize ;
   void (*constructor)(struct inet_frag_queue *, void *) ;
   void (*destructor)(struct inet_frag_queue *) ;
   void (*frag_expire)(struct timer_list *) ;
   struct kmem_cache *frags_cachep ;
   char *frags_cache_name ;
   struct rhashtable_params rhash_params ;
   refcount_t refcnt ;
   struct completion completion ;
};
#line 177 
struct ipv4_devconf;
#line 178 
struct fib_rules_ops;
#line 179 
struct fib_table;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct local_ports {
   seqlock_t lock ;
   int range[2U] ;
   bool warned ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct ping_group_range {
   seqlock_t lock ;
   kgid_t range[2U] ;
};
#line 31 
struct inet_hashinfo;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct inet_timewait_death_row {
   atomic_t tw_count ;
   struct inet_hashinfo *hashinfo ;
   int sysctl_max_tw_buckets ;
};
#line 40 
struct tcp_fastopen_context;
#line 43 
struct ip_ra_chain;
#line 43 
struct inet_peer_base;
#line 43 
struct xt_table;
#line 43 
struct tcp_congestion_ops;
#line 43 
struct fib_notifier_ops;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *xfrm4_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct ip_ra_chain *ra_chain ;
   struct mutex ra_mutex ;
   struct fib_rules_ops *rules_ops ;
   bool fib_has_custom_rules ;
   unsigned int fib_rules_require_fldissect ;
   struct fib_table *fib_main ;
   struct fib_table *fib_default ;
   bool fib_has_custom_local_routes ;
   int fib_num_tclassid_users ;
   struct hlist_head *fib_table_hash ;
   bool fib_offload_disabled ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct inet_peer_base *peers ;
   struct sock **tcp_sk ;
   struct fqdir *fqdir ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   struct local_ports ip_local_ports ;
   int sysctl_tcp_ecn ;
   int sysctl_tcp_ecn_fallback ;
   int sysctl_ip_default_ttl ;
   int sysctl_ip_no_pmtu_disc ;
   int sysctl_ip_fwd_use_pmtu ;
   int sysctl_ip_fwd_update_priority ;
   int sysctl_ip_nonlocal_bind ;
   int sysctl_ip_dynaddr ;
   int sysctl_ip_early_demux ;
   int sysctl_raw_l3mdev_accept ;
   int sysctl_tcp_early_demux ;
   int sysctl_udp_early_demux ;
   int sysctl_fwmark_reflect ;
   int sysctl_tcp_fwmark_accept ;
   int sysctl_tcp_l3mdev_accept ;
   int sysctl_tcp_mtu_probing ;
   int sysctl_tcp_mtu_probe_floor ;
   int sysctl_tcp_base_mss ;
   int sysctl_tcp_min_snd_mss ;
   int sysctl_tcp_probe_threshold ;
   u32 sysctl_tcp_probe_interval ;
   int sysctl_tcp_keepalive_time ;
   int sysctl_tcp_keepalive_probes ;
   int sysctl_tcp_keepalive_intvl ;
   int sysctl_tcp_syn_retries ;
   int sysctl_tcp_synack_retries ;
   int sysctl_tcp_syncookies ;
   int sysctl_tcp_reordering ;
   int sysctl_tcp_retries1 ;
   int sysctl_tcp_retries2 ;
   int sysctl_tcp_orphan_retries ;
   int sysctl_tcp_fin_timeout ;
   unsigned int sysctl_tcp_notsent_lowat ;
   int sysctl_tcp_tw_reuse ;
   int sysctl_tcp_sack ;
   int sysctl_tcp_window_scaling ;
   int sysctl_tcp_timestamps ;
   int sysctl_tcp_early_retrans ;
   int sysctl_tcp_recovery ;
   int sysctl_tcp_thin_linear_timeouts ;
   int sysctl_tcp_slow_start_after_idle ;
   int sysctl_tcp_retrans_collapse ;
   int sysctl_tcp_stdurg ;
   int sysctl_tcp_rfc1337 ;
   int sysctl_tcp_abort_on_overflow ;
   int sysctl_tcp_fack ;
   int sysctl_tcp_max_reordering ;
   int sysctl_tcp_dsack ;
   int sysctl_tcp_app_win ;
   int sysctl_tcp_adv_win_scale ;
   int sysctl_tcp_frto ;
   int sysctl_tcp_nometrics_save ;
   int sysctl_tcp_moderate_rcvbuf ;
   int sysctl_tcp_tso_win_divisor ;
   int sysctl_tcp_workaround_signed_windows ;
   int sysctl_tcp_limit_output_bytes ;
   int sysctl_tcp_challenge_ack_limit ;
   int sysctl_tcp_min_tso_segs ;
   int sysctl_tcp_min_rtt_wlen ;
   int sysctl_tcp_autocorking ;
   int sysctl_tcp_invalid_ratelimit ;
   int sysctl_tcp_pacing_ss_ratio ;
   int sysctl_tcp_pacing_ca_ratio ;
   int sysctl_tcp_wmem[3U] ;
   int sysctl_tcp_rmem[3U] ;
   int sysctl_tcp_comp_sack_nr ;
   unsigned long sysctl_tcp_comp_sack_delay_ns ;
   struct inet_timewait_death_row tcp_death_row ;
   int sysctl_max_syn_backlog ;
   int sysctl_tcp_fastopen ;
   struct tcp_congestion_ops *tcp_congestion_control ;
   struct tcp_fastopen_context *tcp_fastopen_ctx ;
   spinlock_t tcp_fastopen_ctx_lock ;
   unsigned int sysctl_tcp_fastopen_blackhole_timeout ;
   atomic_t tfo_active_disable_times ;
   unsigned long tfo_active_disable_stamp ;
   int sysctl_udp_wmem_min ;
   int sysctl_udp_rmem_min ;
   int sysctl_udp_l3mdev_accept ;
   int sysctl_igmp_max_memberships ;
   int sysctl_igmp_max_msf ;
   int sysctl_igmp_llm_reports ;
   int sysctl_igmp_qrv ;
   struct ping_group_range ping_group_range ;
   atomic_t dev_addr_genid ;
   unsigned long *sysctl_local_reserved_ports ;
   int sysctl_ip_prot_sock ;
   struct list_head mr_tables ;
   struct fib_rules_ops *mr_rules_ops ;
   int sysctl_fib_multipath_use_neigh ;
   int sysctl_fib_multipath_hash_policy ;
   struct fib_notifier_ops *notifier_ops ;
   unsigned int fib_seq ;
   struct fib_notifier_ops *ipmr_notifier_ops ;
   unsigned int ipmr_seq ;
   atomic_t rt_genid ;
   siphash_key_t ip_id_key ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst_ops.h"
struct neighbour;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst_ops.h"
struct dst_ops {
   unsigned short family ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops *) ;
   struct dst_entry *(*check)(struct dst_entry *, __u32 ) ;
   unsigned int (*default_advmss)(struct dst_entry *) ;
   unsigned int (*mtu)(struct dst_entry *) ;
   u32 *(*cow_metrics)(struct dst_entry *, unsigned long ) ;
   void (*destroy)(struct dst_entry *) ;
   void (*ifdown)(struct dst_entry *, struct net_device *, int ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry *) ;
   void (*link_failure)(struct sk_buff *) ;
   void (*update_pmtu)(struct dst_entry *, struct sock *, struct sk_buff *, u32 , bool ) ;
   void (*redirect)(struct dst_entry *, struct sock *, struct sk_buff *) ;
   int (*local_out)(struct net *, struct sock *, struct sk_buff *) ;
   struct neighbour *(*neigh_lookup)(struct dst_entry *, struct sk_buff *, void *) ;
   void (*confirm_neigh)(struct dst_entry *, void *) ;
   struct kmem_cache *kmem_cachep ;
   struct percpu_counter pcpuc_entries ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_sysctl_ipv6 {
   struct ctl_table_header *hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *icmp_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *xfrm6_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int multipath_hash_policy ;
   int flowlabel_consistency ;
   int auto_flowlabels ;
   int icmpv6_time ;
   int icmpv6_echo_ignore_all ;
   int icmpv6_echo_ignore_multicast ;
   int icmpv6_echo_ignore_anycast ;
   unsigned long icmpv6_ratemask[4U] ;
   unsigned long *icmpv6_ratemask_ptr ;
   int anycast_src_echo_reply ;
   int ip_nonlocal_bind ;
   int fwmark_reflect ;
   int idgen_retries ;
   int idgen_delay ;
   int flowlabel_state_ranges ;
   int flowlabel_reflect ;
   int max_dst_opts_cnt ;
   int max_hbh_opts_cnt ;
   int max_dst_opts_len ;
   int max_hbh_opts_len ;
   int seg6_flowlabel ;
   bool skip_notify_on_dev_down ;
};
#line 56 
struct ipv6_devconf;
#line 56 
struct fib6_info;
#line 56 
struct rt6_info;
#line 56 
struct rt6_statistics;
#line 56 
struct fib6_table;
#line 56 
struct seg6_pernet_data;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct __anonstruct_ip6addrlbl_table_567 {
   struct hlist_head head ;
   spinlock_t lock ;
   u32 seq ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct inet_peer_base *peers ;
   struct fqdir *fqdir ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct xt_table *ip6table_nat ;
   struct fib6_info *fib6_null_entry ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct list_head fib6_walkers ;
   struct dst_ops ip6_dst_ops ;
   rwlock_t fib6_walker_lock ;
   spinlock_t fib6_gc_lock ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   unsigned int fib6_rules_require_fldissect ;
   bool fib6_has_custom_rules ;
   unsigned int fib6_routes_require_src ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct list_head mr6_tables ;
   struct fib_rules_ops *mr6_rules_ops ;
   atomic_t dev_addr_genid ;
   atomic_t fib6_sernum ;
   struct seg6_pernet_data *seg6_data ;
   struct fib_notifier_ops *notifier_ops ;
   struct fib_notifier_ops *ip6mr_notifier_ops ;
   unsigned int ipmr_seq ;
   struct __anonstruct_ip6addrlbl_table_567 ip6addrlbl_table ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_nf_frag {
   struct fqdir *fqdir ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nexthop.h"
struct netns_nexthop {
   struct rb_root rb_root ;
   struct hlist_head *devhash ;
   unsigned int seq ;
   u32 last_id_allocated ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_sysctl_lowpan {
   struct ctl_table_header *frags_hdr ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_ieee802154_lowpan {
   struct netns_sysctl_lowpan sysctl ;
   struct fqdir *fqdir ;
};
#line 21 
struct sctp_mib;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/sctp.h"
struct netns_sctp {
   struct sctp_mib *sctp_statistics ;
   struct proc_dir_entry *proc_net_sctp ;
   struct ctl_table_header *sysctl_header ;
   struct sock *ctl_sock ;
   struct list_head local_addr_list ;
   struct list_head addr_waitq ;
   struct timer_list addr_wq_timer ;
   struct list_head auto_asconf_splist ;
   spinlock_t addr_wq_lock ;
   spinlock_t local_addr_lock ;
   unsigned int rto_initial ;
   unsigned int rto_min ;
   unsigned int rto_max ;
   int rto_alpha ;
   int rto_beta ;
   int max_burst ;
   int cookie_preserve_enable ;
   char *sctp_hmac_alg ;
   unsigned int valid_cookie_life ;
   unsigned int sack_timeout ;
   unsigned int hb_interval ;
   int max_retrans_association ;
   int max_retrans_path ;
   int max_retrans_init ;
   int pf_retrans ;
   int ps_retrans ;
   int pf_enable ;
   int pf_expose ;
   int sndbuf_policy ;
   int rcvbuf_policy ;
   int default_auto_asconf ;
   int addip_enable ;
   int addip_noauth ;
   int prsctp_enable ;
   int reconf_enable ;
   int auth_enable ;
   int intl_enable ;
   int ecn_enable ;
   int scope_policy ;
   int rwnd_upd_shift ;
   unsigned long max_autoclose ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/dccp.h"
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netfilter.h"
struct nf_logger;
#line 76 
struct nf_queue_handler;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct nf_hook_entries;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct netns_nf {
   struct proc_dir_entry *proc_netfilter ;
   struct nf_queue_handler *queue_handler ;
   struct nf_logger *nf_loggers[13U] ;
   struct ctl_table_header *nf_log_dir_header ;
   struct nf_hook_entries *hooks_ipv4[5U] ;
   struct nf_hook_entries *hooks_ipv6[5U] ;
   struct nf_hook_entries *hooks_arp[3U] ;
   struct nf_hook_entries *hooks_bridge[5U] ;
   struct nf_hook_entries *hooks_decnet[7U] ;
   bool defrag_ipv4 ;
   bool defrag_ipv6 ;
};
#line 37 
struct ebt_table;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/x_tables.h"
struct netns_xt {
   struct list_head tables[13U] ;
   bool notrack_deprecated_warning ;
   bool clusterip_deprecated_warning ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_head {
   struct hlist_nulls_node *first ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_generic_net {
   unsigned int timeout ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_tcp_net {
   unsigned int timeouts[14U] ;
   int tcp_loose ;
   int tcp_be_liberal ;
   int tcp_max_retrans ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_udp_net {
   unsigned int timeouts[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_icmp_net {
   unsigned int timeout ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_dccp_net {
   int dccp_loose ;
   unsigned int dccp_timeout[10U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_sctp_net {
   unsigned int timeouts[10U] ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_gre_net {
   struct list_head keymap_list ;
   unsigned int timeouts[2U] ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_ip_net {
   struct nf_generic_net generic ;
   struct nf_tcp_net tcp ;
   struct nf_udp_net udp ;
   struct nf_icmp_net icmp ;
   struct nf_icmp_net icmpv6 ;
   struct nf_dccp_net dccp ;
   struct nf_sctp_net sctp ;
   struct nf_gre_net gre ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct ct_pcpu {
   spinlock_t lock ;
   struct hlist_nulls_head unconfirmed ;
   struct hlist_nulls_head dying ;
};
#line 95 
struct nf_ct_event_notifier;
#line 95 
struct nf_exp_event_notifier;
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   struct delayed_work ecache_dwork ;
   bool ecache_dwork_pending ;
   bool auto_assign_helper_warned ;
   struct ctl_table_header *sysctl_header ;
   unsigned int sysctl_log_invalid ;
   int sysctl_events ;
   int sysctl_acct ;
   int sysctl_auto_assign_helper ;
   int sysctl_tstamp ;
   int sysctl_checksum ;
   struct ct_pcpu *pcpu_lists ;
   struct ip_conntrack_stat *stat ;
   struct nf_ct_event_notifier *nf_conntrack_event_cb ;
   struct nf_exp_event_notifier *nf_expect_event_cb ;
   struct nf_ip_net nf_ct_proto ;
   unsigned int labels_used ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nftables.h"
struct netns_nftables {
   struct list_head tables ;
   struct list_head commit_list ;
   struct list_head module_list ;
   struct mutex commit_mutex ;
   unsigned int base_seq ;
   u8 gencursor ;
   u8 validate_state ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
   u8 dbits4 ;
   u8 sbits4 ;
   u8 dbits6 ;
   u8 sbits6 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hthresh {
   struct work_struct work ;
   seqlock_t lock ;
   u8 lbits4 ;
   u8 rbits4 ;
   u8 lbits6 ;
   u8 rbits6 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[3U] ;
   struct xfrm_policy_hash policy_bydst[3U] ;
   unsigned int policy_count[6U] ;
   struct work_struct policy_hash_work ;
   struct xfrm_policy_hthresh policy_hthresh ;
   struct list_head inexact_bins ;
   struct sock *nlsk ;
   struct sock *nlsk_stash ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
   struct dst_ops xfrm4_dst_ops ;
   struct dst_ops xfrm6_dst_ops ;
   spinlock_t xfrm_state_lock ;
   spinlock_t xfrm_policy_lock ;
   struct mutex xfrm_cfg_mutex ;
};
#line 79 
struct mpls_route;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mpls.h"
struct netns_mpls {
   int ip_ttl_propagate ;
   int default_ttl ;
   size_t platform_labels ;
   struct mpls_route **platform_label ;
   struct ctl_table_header *ctl ;
};
#line 20 
struct can_dev_rcv_lists;
#line 21 
struct can_pkg_stats;
#line 22 
struct can_rcv_lists_stats;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/can.h"
struct netns_can {
   struct proc_dir_entry *proc_dir ;
   struct proc_dir_entry *pde_version ;
   struct proc_dir_entry *pde_stats ;
   struct proc_dir_entry *pde_reset_stats ;
   struct proc_dir_entry *pde_rcvlist_all ;
   struct proc_dir_entry *pde_rcvlist_fil ;
   struct proc_dir_entry *pde_rcvlist_inv ;
   struct proc_dir_entry *pde_rcvlist_sff ;
   struct proc_dir_entry *pde_rcvlist_eff ;
   struct proc_dir_entry *pde_rcvlist_err ;
   struct proc_dir_entry *bcmproc_dir ;
   struct can_dev_rcv_lists *rx_alldev_list ;
   spinlock_t rcvlists_lock ;
   struct timer_list stattimer ;
   struct can_pkg_stats *pkg_stats ;
   struct can_rcv_lists_stats *rcv_lists_stats ;
   struct hlist_head cgw_list ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xdp.h"
struct netns_xdp {
   struct mutex lock ;
   struct hlist_head list ;
};
#line 12 
struct proc_ns_operations;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ns_common.h"
struct ns_common {
   atomic_long_t stashed ;
   struct proc_ns_operations *ops ;
   unsigned int inum ;
};
#line 12 
struct net_generic;
#line 13 
struct uevent_sock;
#line 14 
struct netns_ipvs;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct key_tag;
#line 55 
struct ucounts;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct net {
   refcount_t passive ;
   refcount_t count ;
   spinlock_t rules_mod_lock ;
   unsigned int dev_unreg_count ;
   unsigned int dev_base_seq ;
   int ifindex ;
   spinlock_t nsid_lock ;
   atomic_t fnhe_genid ;
   struct list_head list ;
   struct list_head exit_list ;
   struct llist_node cleanup_list ;
   struct key_tag *key_domain ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct idr netns_ids ;
   struct ns_common ns ;
   struct list_head dev_base_head ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct sock *rtnl ;
   struct sock *genl_sock ;
   struct uevent_sock *uevent_sock ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   struct raw_notifier_head netdev_chain ;
   u32 hash_mix ;
   struct net_device *loopback_dev ;
   struct list_head rules_ops ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_nexthop nexthop ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_ieee802154_lowpan ieee802154_lowpan ;
   struct netns_sctp sctp ;
   struct netns_dccp dccp ;
   struct netns_nf nf ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct netns_nftables nft ;
   struct netns_nf_frag nf_frag ;
   struct ctl_table_header *nf_frag_frags_hdr ;
   struct sock *nfnl ;
   struct sock *nfnl_stash ;
   struct list_head nfnl_acct_list ;
   struct list_head nfct_timeout_list ;
   struct sk_buff_head wext_nlevents ;
   struct net_generic *gen ;
   struct bpf_prog *flow_dissector_prog ;
   struct netns_xfrm xfrm ;
   struct netns_ipvs *ipvs ;
   struct netns_mpls mpls ;
   struct netns_can can ;
   struct netns_xdp xdp ;
   struct sock *crypto_nlsk ;
   struct sock *diag_nlsk ;
} __attribute__((__designated_init__));
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array_ptr;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array {
   struct assoc_array_ptr *root ;
   unsigned long nr_leaves_on_tree ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
typedef int32_t key_serial_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
typedef uint32_t key_perm_t;
#line 32 
struct key_type;
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_tag {
   struct callback_head rcu ;
   refcount_t usage ;
   bool removed ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_580 {
   u16 desc_len ;
   char desc[6U] ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_579 {
   struct __anonstruct_580 __anonCompField___anonunion_579_102 ;
   unsigned long x ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct keyring_index_key {
   unsigned long hash ;
   union __anonunion_579 __anonCompField_keyring_index_key_103 ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union key_payload {
   void *rcu_data0 ;
   void *data[4U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_restriction {
   int (*check)(struct key *, struct key_type *, union key_payload *, struct key *) ;
   struct key *key ;
   struct key_type *keytype ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_581 {
   struct list_head graveyard_link ;
   struct rb_node serial_node ;
};
#line 172 
struct key_user;
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_582 {
   time64_t expiry ;
   time64_t revoked_at ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_584 {
   unsigned long hash ;
   unsigned long len_desc ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_583 {
   struct keyring_index_key index_key ;
   struct __anonstruct_584 __anonCompField___anonunion_583_106 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_586 {
   struct list_head name_link ;
   struct assoc_array keys ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_585 {
   union key_payload payload ;
   struct __anonstruct_586 __anonCompField___anonunion_585_108 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key {
   refcount_t usage ;
   key_serial_t serial ;
   union __anonunion_581 __anonCompField_key_104 ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_582 __anonCompField_key_105 ;
   time64_t last_used_at ;
   kuid_t uid ;
   kgid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   short state ;
   unsigned long flags ;
   union __anonunion_583 __anonCompField_key_107 ;
   union __anonunion_585 __anonCompField_key_109 ;
   struct key_restriction *restrict_link ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/user.h"
struct user_struct {
   refcount_t __count ;
   atomic_t processes ;
   atomic_t sigpending ;
   atomic_t fanotify_listeners ;
   atomic_long_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   unsigned long unix_inflight ;
   atomic_long_t pipe_bufs ;
   struct hlist_node uidhash_node ;
   kuid_t uid ;
   atomic_long_t locked_vm ;
   struct ratelimit_state ratelimit ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   kgid_t gid[0U] ;
} __attribute__((__designated_init__));
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
union __anonunion_589 {
   int non_rcu ;
   struct callback_head rcu ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   kuid_t uid ;
   kgid_t gid ;
   kuid_t suid ;
   kgid_t sgid ;
   kuid_t euid ;
   kgid_t egid ;
   kuid_t fsuid ;
   kgid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   kernel_cap_t cap_ambient ;
   unsigned char jit_keyring ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   void *security ;
   struct user_struct *user ;
   struct user_namespace *user_ns ;
   struct group_info *group_info ;
   union __anonunion_589 __anonCompField_cred_110 ;
} __attribute__((__designated_init__));
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   size_t pad_until ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations *op ;
   int poll_event ;
   struct file *file ;
   void *private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_operations {
   void *(*start)(struct seq_file *, loff_t *) ;
   void (*stop)(struct seq_file *, void *) ;
   void *(*next)(struct seq_file *, void *, loff_t *) ;
   int (*show)(struct seq_file *, void *) ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct __anonstruct_possible_net_t_590 {
   struct net *net ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
typedef struct __anonstruct_possible_net_t_590 possible_net_t;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_ets {
   __u8 willing ;
   __u8 ets_cap ;
   __u8 cbs ;
   __u8 tc_tx_bw[8U] ;
   __u8 tc_rx_bw[8U] ;
   __u8 tc_tsa[8U] ;
   __u8 prio_tc[8U] ;
   __u8 tc_reco_bw[8U] ;
   __u8 tc_reco_tsa[8U] ;
   __u8 reco_prio_tc[8U] ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_maxrate {
   __u64 tc_maxrate[8U] ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn {
   __u8 rpg_enable[8U] ;
   __u32 rppp_max_rps[8U] ;
   __u32 rpg_time_reset[8U] ;
   __u32 rpg_byte_reset[8U] ;
   __u32 rpg_threshold[8U] ;
   __u32 rpg_max_rate[8U] ;
   __u32 rpg_ai_rate[8U] ;
   __u32 rpg_hai_rate[8U] ;
   __u32 rpg_gd[8U] ;
   __u32 rpg_min_dec_fac[8U] ;
   __u32 rpg_min_rate[8U] ;
   __u32 cndd_state_machine[8U] ;
};
#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn_stats {
   __u64 rppp_rp_centiseconds[8U] ;
   __u32 rppp_created_rps[8U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_pfc {
   __u8 pfc_cap ;
   __u8 pfc_en ;
   __u8 mbc ;
   __u16 delay ;
   __u64 requests[8U] ;
   __u64 indications[8U] ;
};
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcbnl_buffer {
   __u8 prio2buffer[8U] ;
   __u32 buffer_size[8U] ;
   __u32 total_size ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pg {
   __u8 willing ;
   __u8 error ;
   __u8 pg_en ;
   __u8 tcs_supported ;
   __u8 pg_bw[8U] ;
   __u8 prio_pg[8U] ;
};
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pfc {
   __u8 willing ;
   __u8 error ;
   __u8 pfc_en ;
   __u8 tcs_supported ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_app {
   __u8 selector ;
   __u8 priority ;
   __u16 protocol ;
};
#line 259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_peer_app_info {
   __u8 willing ;
   __u8 error ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dcbnl.h"
struct dcbnl_rtnl_ops {
   int (*ieee_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_setets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_getmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_setmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_getqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_setqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_getqcnstats)(struct net_device *, struct ieee_qcn_stats *) ;
   int (*ieee_getpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_setpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_getapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_setapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_delapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_peer_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_peer_getpfc)(struct net_device *, struct ieee_pfc *) ;
   u8 (*getstate)(struct net_device *) ;
   u8 (*setstate)(struct net_device *, u8 ) ;
   void (*getpermhwaddr)(struct net_device *, u8 *) ;
   void (*setpgtccfgtx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgtx)(struct net_device *, int , u8 ) ;
   void (*setpgtccfgrx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgrx)(struct net_device *, int , u8 ) ;
   void (*getpgtccfgtx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgtx)(struct net_device *, int , u8 *) ;
   void (*getpgtccfgrx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgrx)(struct net_device *, int , u8 *) ;
   void (*setpfccfg)(struct net_device *, int , u8 ) ;
   void (*getpfccfg)(struct net_device *, int , u8 *) ;
   u8 (*setall)(struct net_device *) ;
   u8 (*getcap)(struct net_device *, int , u8 *) ;
   int (*getnumtcs)(struct net_device *, int , u8 *) ;
   int (*setnumtcs)(struct net_device *, int , u8 ) ;
   u8 (*getpfcstate)(struct net_device *) ;
   void (*setpfcstate)(struct net_device *, u8 ) ;
   void (*getbcncfg)(struct net_device *, int , u32 *) ;
   void (*setbcncfg)(struct net_device *, int , u32 ) ;
   void (*getbcnrp)(struct net_device *, int , u8 *) ;
   void (*setbcnrp)(struct net_device *, int , u8 ) ;
   int (*setapp)(struct net_device *, u8 , u16 , u8 ) ;
   int (*getapp)(struct net_device *, u8 , u16 ) ;
   u8 (*getfeatcfg)(struct net_device *, int , u8 *) ;
   u8 (*setfeatcfg)(struct net_device *, int , u8 ) ;
   u8 (*getdcbx)(struct net_device *) ;
   u8 (*setdcbx)(struct net_device *, u8 ) ;
   int (*peer_getappinfo)(struct net_device *, struct dcb_peer_app_info *, u16 *) ;
   int (*peer_getapptable)(struct net_device *, struct dcb_app *) ;
   int (*cee_peer_getpg)(struct net_device *, struct cee_pg *) ;
   int (*cee_peer_getpfc)(struct net_device *, struct cee_pfc *) ;
   int (*dcbnl_getbuffer)(struct net_device *, struct dcbnl_buffer *) ;
   int (*dcbnl_setbuffer)(struct net_device *, struct dcbnl_buffer *) ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/taskstats.h"
struct taskstats {
   __u16 version ;
   __u32 ac_exitcode ;
   __u8 ac_flag ;
   __u8 ac_nice ;
   __u64 cpu_count ;
   __u64 cpu_delay_total ;
   __u64 blkio_count ;
   __u64 blkio_delay_total ;
   __u64 swapin_count ;
   __u64 swapin_delay_total ;
   __u64 cpu_run_real_total ;
   __u64 cpu_run_virtual_total ;
   char ac_comm[32U] ;
   __u8 ac_sched ;
   __u8 ac_pad[3U] ;
   __u32 ac_uid ;
   __u32 ac_gid ;
   __u32 ac_pid ;
   __u32 ac_ppid ;
   __u32 ac_btime ;
   __u64 ac_etime ;
   __u64 ac_utime ;
   __u64 ac_stime ;
   __u64 ac_minflt ;
   __u64 ac_majflt ;
   __u64 coremem ;
   __u64 virtmem ;
   __u64 hiwater_rss ;
   __u64 hiwater_vm ;
   __u64 read_char ;
   __u64 write_char ;
   __u64 read_syscalls ;
   __u64 write_syscalls ;
   __u64 read_bytes ;
   __u64 write_bytes ;
   __u64 cancelled_write_bytes ;
   __u64 nvcsw ;
   __u64 nivcsw ;
   __u64 ac_utimescaled ;
   __u64 ac_stimescaled ;
   __u64 cpu_scaled_run_real_total ;
   __u64 freepages_count ;
   __u64 freepages_delay_total ;
   __u64 thrashing_count ;
   __u64 thrashing_delay_total ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/cgroupstats.h"
struct mnt_namespace;
#line 60 
struct uts_namespace;
#line 61 
struct ipc_namespace;
#line 62 
struct cgroup_namespace;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nsproxy.h"
struct nsproxy {
   atomic_t count ;
   struct uts_namespace *uts_ns ;
   struct ipc_namespace *ipc_ns ;
   struct mnt_namespace *mnt_ns ;
   struct pid_namespace *pid_ns_for_children ;
   struct net *net_ns ;
   struct cgroup_namespace *cgroup_ns ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_extent {
   u32 first ;
   u32 lower_first ;
   u32 count ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct __anonstruct_592 {
   struct uid_gid_extent *forward ;
   struct uid_gid_extent *reverse ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
union __anonunion_591 {
   struct uid_gid_extent extent[5U] ;
   struct __anonstruct_592 __anonCompField___anonunion_591_111 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_map {
   u32 nr_extents ;
   union __anonunion_591 __anonCompField_uid_gid_map_112 ;
};
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct user_namespace {
   struct uid_gid_map uid_map ;
   struct uid_gid_map gid_map ;
   struct uid_gid_map projid_map ;
   atomic_t count ;
   struct user_namespace *parent ;
   int level ;
   kuid_t owner ;
   kgid_t group ;
   struct ns_common ns ;
   unsigned long flags ;
   struct list_head keyring_name_list ;
   struct key *user_keyring_register ;
   struct rw_semaphore keyring_sem ;
   struct key *persistent_keyring_register ;
   struct work_struct work ;
   struct ctl_table_set set ;
   struct ctl_table_header *sysctls ;
   struct ucounts *ucounts ;
   int ucount_max[9U] ;
} __attribute__((__designated_init__));
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct ucounts {
   struct hlist_node node ;
   struct user_namespace *ns ;
   kuid_t uid ;
   int count ;
   atomic_t ucount[9U] ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_insn {
   __u8 code ;
   __u8 dst_reg : 4 ;
   __u8 src_reg : 4 ;
   __s16 off ;
   __s32 imm ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_cgroup_storage_key {
   __u64 cgroup_inode_id ;
   __u32 attach_type ;
};
#line 110 
enum bpf_map_type {
    BPF_MAP_TYPE_UNSPEC = 0,
    BPF_MAP_TYPE_HASH = 1,
    BPF_MAP_TYPE_ARRAY = 2,
    BPF_MAP_TYPE_PROG_ARRAY = 3,
    BPF_MAP_TYPE_PERF_EVENT_ARRAY = 4,
    BPF_MAP_TYPE_PERCPU_HASH = 5,
    BPF_MAP_TYPE_PERCPU_ARRAY = 6,
    BPF_MAP_TYPE_STACK_TRACE = 7,
    BPF_MAP_TYPE_CGROUP_ARRAY = 8,
    BPF_MAP_TYPE_LRU_HASH = 9,
    BPF_MAP_TYPE_LRU_PERCPU_HASH = 10,
    BPF_MAP_TYPE_LPM_TRIE = 11,
    BPF_MAP_TYPE_ARRAY_OF_MAPS = 12,
    BPF_MAP_TYPE_HASH_OF_MAPS = 13,
    BPF_MAP_TYPE_DEVMAP = 14,
    BPF_MAP_TYPE_SOCKMAP = 15,
    BPF_MAP_TYPE_CPUMAP = 16,
    BPF_MAP_TYPE_XSKMAP = 17,
    BPF_MAP_TYPE_SOCKHASH = 18,
    BPF_MAP_TYPE_CGROUP_STORAGE = 19,
    BPF_MAP_TYPE_REUSEPORT_SOCKARRAY = 20,
    BPF_MAP_TYPE_PERCPU_CGROUP_STORAGE = 21,
    BPF_MAP_TYPE_QUEUE = 22,
    BPF_MAP_TYPE_STACK = 23,
    BPF_MAP_TYPE_SK_STORAGE = 24,
    BPF_MAP_TYPE_DEVMAP_HASH = 25
};
#line 139 
enum bpf_prog_type {
    BPF_PROG_TYPE_UNSPEC = 0,
    BPF_PROG_TYPE_SOCKET_FILTER = 1,
    BPF_PROG_TYPE_KPROBE = 2,
    BPF_PROG_TYPE_SCHED_CLS = 3,
    BPF_PROG_TYPE_SCHED_ACT = 4,
    BPF_PROG_TYPE_TRACEPOINT = 5,
    BPF_PROG_TYPE_XDP = 6,
    BPF_PROG_TYPE_PERF_EVENT = 7,
    BPF_PROG_TYPE_CGROUP_SKB = 8,
    BPF_PROG_TYPE_CGROUP_SOCK = 9,
    BPF_PROG_TYPE_LWT_IN = 10,
    BPF_PROG_TYPE_LWT_OUT = 11,
    BPF_PROG_TYPE_LWT_XMIT = 12,
    BPF_PROG_TYPE_SOCK_OPS = 13,
    BPF_PROG_TYPE_SK_SKB = 14,
    BPF_PROG_TYPE_CGROUP_DEVICE = 15,
    BPF_PROG_TYPE_SK_MSG = 16,
    BPF_PROG_TYPE_RAW_TRACEPOINT = 17,
    BPF_PROG_TYPE_CGROUP_SOCK_ADDR = 18,
    BPF_PROG_TYPE_LWT_SEG6LOCAL = 19,
    BPF_PROG_TYPE_LIRC_MODE2 = 20,
    BPF_PROG_TYPE_SK_REUSEPORT = 21,
    BPF_PROG_TYPE_FLOW_DISSECTOR = 22,
    BPF_PROG_TYPE_CGROUP_SYSCTL = 23,
    BPF_PROG_TYPE_RAW_TRACEPOINT_WRITABLE = 24,
    BPF_PROG_TYPE_CGROUP_SOCKOPT = 25,
    BPF_PROG_TYPE_TRACING = 26
};
#line 169 
enum bpf_attach_type {
    BPF_CGROUP_INET_INGRESS = 0,
    BPF_CGROUP_INET_EGRESS = 1,
    BPF_CGROUP_INET_SOCK_CREATE = 2,
    BPF_CGROUP_SOCK_OPS = 3,
    BPF_SK_SKB_STREAM_PARSER = 4,
    BPF_SK_SKB_STREAM_VERDICT = 5,
    BPF_CGROUP_DEVICE = 6,
    BPF_SK_MSG_VERDICT = 7,
    BPF_CGROUP_INET4_BIND = 8,
    BPF_CGROUP_INET6_BIND = 9,
    BPF_CGROUP_INET4_CONNECT = 10,
    BPF_CGROUP_INET6_CONNECT = 11,
    BPF_CGROUP_INET4_POST_BIND = 12,
    BPF_CGROUP_INET6_POST_BIND = 13,
    BPF_CGROUP_UDP4_SENDMSG = 14,
    BPF_CGROUP_UDP6_SENDMSG = 15,
    BPF_LIRC_MODE2 = 16,
    BPF_FLOW_DISSECTOR = 17,
    BPF_CGROUP_SYSCTL = 18,
    BPF_CGROUP_UDP4_RECVMSG = 19,
    BPF_CGROUP_UDP6_RECVMSG = 20,
    BPF_CGROUP_GETSOCKOPT = 21,
    BPF_CGROUP_SETSOCKOPT = 22,
    BPF_TRACE_RAW_TP = 23,
    BPF_TRACE_FENTRY = 24,
    BPF_TRACE_FEXIT = 25,
    __MAX_BPF_ATTACH_TYPE = 26
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_594 {
   __u32 map_type ;
   __u32 key_size ;
   __u32 value_size ;
   __u32 max_entries ;
   __u32 map_flags ;
   __u32 inner_map_fd ;
   __u32 numa_node ;
   char map_name[16U] ;
   __u32 map_ifindex ;
   __u32 btf_fd ;
   __u32 btf_key_type_id ;
   __u32 btf_value_type_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_596 {
   __u64 value ;
   __u64 next_key ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_595 {
   __u32 map_fd ;
   __u64 key ;
   union __anonunion_596 __anonCompField___anonstruct_595_115 ;
   __u64 flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_597 {
   __u32 prog_type ;
   __u32 insn_cnt ;
   __u64 insns ;
   __u64 license ;
   __u32 log_level ;
   __u32 log_size ;
   __u64 log_buf ;
   __u32 kern_version ;
   __u32 prog_flags ;
   char prog_name[16U] ;
   __u32 prog_ifindex ;
   __u32 expected_attach_type ;
   __u32 prog_btf_fd ;
   __u32 func_info_rec_size ;
   __u64 func_info ;
   __u32 func_info_cnt ;
   __u32 line_info_rec_size ;
   __u64 line_info ;
   __u32 line_info_cnt ;
   __u32 attach_btf_id ;
   __u32 attach_prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_598 {
   __u64 pathname ;
   __u32 bpf_fd ;
   __u32 file_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_599 {
   __u32 target_fd ;
   __u32 attach_bpf_fd ;
   __u32 attach_type ;
   __u32 attach_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_test_600 {
   __u32 prog_fd ;
   __u32 retval ;
   __u32 data_size_in ;
   __u32 data_size_out ;
   __u64 data_in ;
   __u64 data_out ;
   __u32 repeat ;
   __u32 duration ;
   __u32 ctx_size_in ;
   __u32 ctx_size_out ;
   __u64 ctx_in ;
   __u64 ctx_out ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_602 {
   __u32 start_id ;
   __u32 prog_id ;
   __u32 map_id ;
   __u32 btf_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_601 {
   union __anonunion_602 __anonCompField___anonstruct_601_120 ;
   __u32 next_id ;
   __u32 open_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_info_603 {
   __u32 bpf_fd ;
   __u32 info_len ;
   __u64 info ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_query_604 {
   __u32 target_fd ;
   __u32 attach_type ;
   __u32 query_flags ;
   __u32 attach_flags ;
   __u64 prog_ids ;
   __u32 prog_cnt ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_raw_tracepoint_605 {
   __u64 name ;
   __u32 prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_606 {
   __u64 btf ;
   __u64 btf_log_buf ;
   __u32 btf_size ;
   __u32 btf_log_size ;
   __u32 btf_log_level ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_task_fd_query_607 {
   __u32 pid ;
   __u32 fd ;
   __u32 flags ;
   __u32 buf_len ;
   __u64 buf ;
   __u32 prog_id ;
   __u32 fd_type ;
   __u64 probe_offset ;
   __u64 probe_addr ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union bpf_attr {
   struct __anonstruct_594 __anonCompField_bpf_attr_114 ;
   struct __anonstruct_595 __anonCompField_bpf_attr_116 ;
   struct __anonstruct_597 __anonCompField_bpf_attr_117 ;
   struct __anonstruct_598 __anonCompField_bpf_attr_118 ;
   struct __anonstruct_599 __anonCompField_bpf_attr_119 ;
   struct __anonstruct_test_600 test ;
   struct __anonstruct_601 __anonCompField_bpf_attr_121 ;
   struct __anonstruct_info_603 info ;
   struct __anonstruct_query_604 query ;
   struct __anonstruct_raw_tracepoint_605 raw_tracepoint ;
   struct __anonstruct_606 __anonCompField_bpf_attr_122 ;
   struct __anonstruct_task_fd_query_607 task_fd_query ;
} __attribute__((__aligned__(8)));
#line 3653  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_func_info {
   __u32 insn_off ;
   __u32 type_id ;
};
#line 3661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_line_info {
   __u32 insn_off ;
   __u32 file_name_off ;
   __u32 line_off ;
   __u32 line_col ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree_latch.h"
struct latch_tree_node {
   struct rb_node node[2U] ;
};
#line 215 
struct bpf_prog_aux;
#line 216 
struct bpf_map;
#line 217 
struct btf;
#line 218 
struct btf_type;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_ops {
   int (*map_alloc_check)(union bpf_attr *) ;
   struct bpf_map *(*map_alloc)(union bpf_attr *) ;
   void (*map_release)(struct bpf_map *, struct file *) ;
   void (*map_free)(struct bpf_map *) ;
   int (*map_get_next_key)(struct bpf_map *, void *, void *) ;
   void (*map_release_uref)(struct bpf_map *) ;
   void *(*map_lookup_elem_sys_only)(struct bpf_map *, void *) ;
   void *(*map_lookup_elem)(struct bpf_map *, void *) ;
   int (*map_update_elem)(struct bpf_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_map *, void *) ;
   int (*map_push_elem)(struct bpf_map *, void *, u64 ) ;
   int (*map_pop_elem)(struct bpf_map *, void *) ;
   int (*map_peek_elem)(struct bpf_map *, void *) ;
   void *(*map_fd_get_ptr)(struct bpf_map *, struct file *, int ) ;
   void (*map_fd_put_ptr)(void *) ;
   u32 (*map_gen_lookup)(struct bpf_map *, struct bpf_insn *) ;
   u32 (*map_fd_sys_lookup_elem)(void *) ;
   void (*map_seq_show_elem)(struct bpf_map *, void *, struct seq_file *) ;
   int (*map_check_btf)(struct bpf_map *, struct btf *, struct btf_type *, struct btf_type *) ;
   int (*map_poke_track)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_untrack)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_run)(struct bpf_map *, u32 , struct bpf_prog *, struct bpf_prog *) ;
   int (*map_direct_value_addr)(struct bpf_map *, u64 *, u32 ) ;
   int (*map_direct_value_meta)(struct bpf_map *, u64 , u32 *) ;
   int (*map_mmap)(struct bpf_map *, struct vm_area_struct *) ;
};
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_memory {
   u32 pages ;
   struct user_struct *user ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map {
   struct bpf_map_ops *ops ;
   struct bpf_map *inner_map_meta ;
   void *security ;
   enum bpf_map_type map_type ;
   u32 key_size ;
   u32 value_size ;
   u32 max_entries ;
   u32 map_flags ;
   int spin_lock_off ;
   u32 id ;
   int numa_node ;
   u32 btf_key_type_id ;
   u32 btf_value_type_id ;
   struct btf *btf ;
   struct bpf_map_memory memory ;
   char name[16U] ;
   bool unpriv_array ;
   bool frozen ;
   atomic64_t refcnt ;
   atomic64_t usercnt ;
   struct work_struct work ;
   struct mutex freeze_mutex ;
   u64 writecnt ;
};
#line 151 
struct bpf_offload_dev;
#line 152 
struct bpf_offloaded_map;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_dev_ops {
   int (*map_get_next_key)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_lookup_elem)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_update_elem)(struct bpf_offloaded_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_offloaded_map *, void *) ;
};
#line 166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_offloaded_map {
   struct bpf_map map ;
   struct net_device *netdev ;
   struct bpf_map_dev_ops *dev_ops ;
   void *dev_priv ;
   struct list_head offloads ;
};
#line 327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_ops {
   int (*test_run)(struct bpf_prog *, union bpf_attr *, union bpf_attr *) ;
};
#line 369  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_offload {
   struct bpf_prog *prog ;
   struct net_device *netdev ;
   struct bpf_offload_dev *offdev ;
   void *dev_priv ;
   struct list_head offloads ;
   bool dev_state ;
   bool opt_failed ;
   void *jited_image ;
   u32 jited_len ;
};
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_stats {
   u64 cnt ;
   u64 nsecs ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct btf_func_model {
   u8 ret_size ;
   u8 nr_args ;
   u8 arg_size[12U] ;
};
#line 447 
enum bpf_tramp_prog_type {
    BPF_TRAMP_FENTRY = 0,
    BPF_TRAMP_FEXIT = 1,
    BPF_TRAMP_MAX = 2
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_func_640 {
   struct btf_func_model model ;
   void *addr ;
   bool ftrace_managed ;
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_trampoline {
   struct hlist_node hlist ;
   struct mutex mutex ;
   refcount_t refcnt ;
   u64 key ;
   struct __anonstruct_func_640 func ;
   struct hlist_head progs_hlist[2U] ;
   int progs_cnt[2U] ;
   void *image ;
   u64 selector ;
};
#line 495  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_func_info_aux {
   bool unreliable ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_tail_call_642 {
   struct bpf_map *map ;
   u32 key ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_641 {
   struct __anonstruct_tail_call_642 tail_call ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_jit_poke_descriptor {
   void *ip ;
   union __anonunion_641 __anonCompField_bpf_jit_poke_descriptor_147 ;
   bool ip_stable ;
   u8 adj_off ;
   u16 reason ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_643 {
   struct work_struct work ;
   struct callback_head rcu ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_aux {
   atomic64_t refcnt ;
   u32 used_map_cnt ;
   u32 max_ctx_offset ;
   u32 max_pkt_offset ;
   u32 max_tp_access ;
   u32 stack_depth ;
   u32 id ;
   u32 func_cnt ;
   u32 func_idx ;
   u32 attach_btf_id ;
   struct bpf_prog *linked_prog ;
   bool verifier_zext ;
   bool offload_requested ;
   bool attach_btf_trace ;
   bool func_proto_unreliable ;
   enum bpf_tramp_prog_type trampoline_prog_type ;
   struct bpf_trampoline *trampoline ;
   struct hlist_node tramp_hlist ;
   struct btf_type *attach_func_proto ;
   char *attach_func_name ;
   struct bpf_prog **func ;
   void *jit_data ;
   struct bpf_jit_poke_descriptor *poke_tab ;
   u32 size_poke_tab ;
   struct latch_tree_node ksym_tnode ;
   struct list_head ksym_lnode ;
   struct bpf_prog_ops *ops ;
   struct bpf_map **used_maps ;
   struct bpf_prog *prog ;
   struct user_struct *user ;
   u64 load_time ;
   struct bpf_map *cgroup_storage[2U] ;
   char name[16U] ;
   void *security ;
   struct bpf_prog_offload *offload ;
   struct btf *btf ;
   struct bpf_func_info *func_info ;
   struct bpf_func_info_aux *func_info_aux ;
   struct bpf_line_info *linfo ;
   void **jited_linfo ;
   u32 func_info_cnt ;
   u32 nr_linfo ;
   u32 linfo_idx ;
   u32 num_exentries ;
   struct exception_table_entry *extable ;
   struct bpf_prog_stats *stats ;
   union __anonunion_643 __anonCompField_bpf_prog_aux_148 ;
};
#line 686 
struct bpf_cgroup_storage;
#line 686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array_item {
   struct bpf_prog *prog ;
   struct bpf_cgroup_storage *cgroup_storage[2U] ;
};
#line 691  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array {
   struct callback_head rcu ;
   struct bpf_prog_array_item items[0U] ;
};
#line 1335 
struct cgroup;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage_map;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_storage_buffer {
   struct callback_head rcu ;
   char data[0U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
union __anonunion_645 {
   struct bpf_storage_buffer *buf ;
   void *percpu_buf ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage {
   union __anonunion_645 __anonCompField_bpf_cgroup_storage_150 ;
   struct bpf_cgroup_storage_map *map ;
   struct bpf_cgroup_storage_key key ;
   struct list_head list ;
   struct rb_node node ;
   struct callback_head rcu ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct cgroup_bpf {
   struct bpf_prog_array *effective[26U] ;
   struct list_head progs[26U] ;
   u32 flags[26U] ;
   struct bpf_prog_array *inactive ;
   struct percpu_ref refcnt ;
   struct work_struct release_work ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work;
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_worker {
   unsigned int flags ;
   raw_spinlock_t lock ;
   struct list_head work_list ;
   struct list_head delayed_work_list ;
   struct task_struct *task ;
   struct kthread_work *current_work ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work {
   struct list_head node ;
   void (*func)(struct kthread_work *) ;
   struct kthread_worker *worker ;
   int canceling ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_delayed_work {
   struct kthread_work work ;
   struct timer_list timer ;
};
#line 199 
struct cgroup_subsys_state;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group_cpu {
   seqcount_t seq ;
   unsigned int tasks[3U] ;
   u32 state_mask ;
   u32 times[6U] ;
   u64 state_start ;
   u32 times_prev[2U][6U] ;
};
#line 96 
struct psi_group;
#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group {
   struct mutex avgs_lock ;
   struct psi_group_cpu *pcpu ;
   u64 avg_total[5U] ;
   u64 avg_last_update ;
   u64 avg_next_update ;
   struct delayed_work avgs_work ;
   u64 total[2U][5U] ;
   unsigned long avg[5U][3U] ;
   atomic_t poll_scheduled ;
   struct kthread_worker *poll_kworker ;
   struct kthread_delayed_work poll_work ;
   struct mutex trigger_lock ;
   struct list_head triggers ;
   u32 nr_triggers[5U] ;
   u32 poll_states ;
   u64 poll_min_period ;
   u64 polling_total[5U] ;
   u64 polling_next_update ;
   u64 polling_until ;
};
#line 166 
struct cgroup_root;
#line 167 
struct cgroup_subsys;
#line 168 
struct cgroup_taskset;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_file {
   struct kernfs_node *kn ;
   unsigned long notified_at ;
   struct timer_list notify_timer ;
};
#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys_state {
   struct cgroup *cgroup ;
   struct cgroup_subsys *ss ;
   struct percpu_ref refcnt ;
   struct list_head sibling ;
   struct list_head children ;
   struct list_head rstat_css_node ;
   int id ;
   unsigned int flags ;
   u64 serial_nr ;
   atomic_t online_cnt ;
   struct work_struct destroy_work ;
   struct rcu_work destroy_rwork ;
   struct cgroup_subsys_state *parent ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct css_set {
   struct cgroup_subsys_state *subsys[14U] ;
   refcount_t refcount ;
   struct css_set *dom_cset ;
   struct cgroup *dfl_cgrp ;
   int nr_tasks ;
   struct list_head tasks ;
   struct list_head mg_tasks ;
   struct list_head dying_tasks ;
   struct list_head task_iters ;
   struct list_head e_cset_node[14U] ;
   struct list_head threaded_csets ;
   struct list_head threaded_csets_node ;
   struct hlist_node hlist ;
   struct list_head cgrp_links ;
   struct list_head mg_preload_node ;
   struct list_head mg_node ;
   struct cgroup *mg_src_cgrp ;
   struct cgroup *mg_dst_cgrp ;
   struct css_set *mg_dst_cset ;
   bool dead ;
   struct callback_head callback_head ;
};
#line 279  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_base_stat {
   struct task_cputime cputime ;
};
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_rstat_cpu {
   struct u64_stats_sync bsync ;
   struct cgroup_base_stat bstat ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup *updated_children ;
   struct cgroup *updated_next ;
};
#line 332  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_freezer_state {
   bool freeze ;
   int e_freeze ;
   int nr_frozen_descendants ;
   int nr_frozen_tasks ;
};
#line 351  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup {
   struct cgroup_subsys_state self ;
   unsigned long flags ;
   int level ;
   int max_depth ;
   int nr_descendants ;
   int nr_dying_descendants ;
   int max_descendants ;
   int nr_populated_csets ;
   int nr_populated_domain_children ;
   int nr_populated_threaded_children ;
   int nr_threaded_children ;
   struct kernfs_node *kn ;
   struct cgroup_file procs_file ;
   struct cgroup_file events_file ;
   u16 subtree_control ;
   u16 subtree_ss_mask ;
   u16 old_subtree_control ;
   u16 old_subtree_ss_mask ;
   struct cgroup_subsys_state *subsys[14U] ;
   struct cgroup_root *root ;
   struct list_head cset_links ;
   struct list_head e_csets[14U] ;
   struct cgroup *dom_cgrp ;
   struct cgroup *old_dom_cgrp ;
   struct cgroup_rstat_cpu *rstat_cpu ;
   struct list_head rstat_css_list ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup_base_stat bstat ;
   struct prev_cputime prev_cputime ;
   struct list_head pidlists ;
   struct mutex pidlist_mutex ;
   wait_queue_head_t offline_waitq ;
   struct work_struct release_agent_work ;
   struct psi_group psi ;
   struct cgroup_bpf bpf ;
   atomic_t congestion_count ;
   struct cgroup_freezer_state freezer ;
   u64 ancestor_ids[] ;
};
#line 489  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_root {
   struct kernfs_root *kf_root ;
   unsigned int subsys_mask ;
   int hierarchy_id ;
   struct cgroup cgrp ;
   u64 cgrp_ancestor_id_storage ;
   atomic_t nr_cgrps ;
   struct list_head root_list ;
   unsigned int flags ;
   char release_agent_path[4096U] ;
   char name[64U] ;
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cftype {
   char name[64U] ;
   unsigned long private ;
   size_t max_write_len ;
   unsigned int flags ;
   unsigned int file_offset ;
   struct cgroup_subsys *ss ;
   struct list_head node ;
   struct kernfs_ops *kf_ops ;
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   u64 (*read_u64)(struct cgroup_subsys_state *, struct cftype *) ;
   s64 (*read_s64)(struct cgroup_subsys_state *, struct cftype *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   int (*write_u64)(struct cgroup_subsys_state *, struct cftype *, u64 ) ;
   int (*write_s64)(struct cgroup_subsys_state *, struct cftype *, s64 ) ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 616  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys {
   struct cgroup_subsys_state *(*css_alloc)(struct cgroup_subsys_state *) ;
   int (*css_online)(struct cgroup_subsys_state *) ;
   void (*css_offline)(struct cgroup_subsys_state *) ;
   void (*css_released)(struct cgroup_subsys_state *) ;
   void (*css_free)(struct cgroup_subsys_state *) ;
   void (*css_reset)(struct cgroup_subsys_state *) ;
   void (*css_rstat_flush)(struct cgroup_subsys_state *, int ) ;
   int (*css_extra_stat_show)(struct seq_file *, struct cgroup_subsys_state *) ;
   int (*can_attach)(struct cgroup_taskset *) ;
   void (*cancel_attach)(struct cgroup_taskset *) ;
   void (*attach)(struct cgroup_taskset *) ;
   void (*post_attach)(void) ;
   int (*can_fork)(struct task_struct *) ;
   void (*cancel_fork)(struct task_struct *) ;
   void (*fork)(struct task_struct *) ;
   void (*exit)(struct task_struct *) ;
   void (*release)(struct task_struct *) ;
   void (*bind)(struct cgroup_subsys_state *) ;
   bool early_init : 1 ;
   bool implicit_on_dfl : 1 ;
   bool threaded : 1 ;
   bool broken_hierarchy : 1 ;
   bool warned_broken_hierarchy : 1 ;
   int id ;
   char *name ;
   char *legacy_name ;
   struct cgroup_root *root ;
   struct idr css_idr ;
   struct list_head cfts ;
   struct cftype *dfl_cftypes ;
   struct cftype *legacy_cftypes ;
   unsigned int depends_on ;
};
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct __anonstruct_647 {
   u8 is_data ;
   u8 padding ;
   u16 prioidx ;
   u32 classid ;
} __attribute__((__packed__));
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
union __anonunion_646 {
   struct __anonstruct_647 __anonCompField___anonunion_646_151 ;
   u64 val ;
};
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct sock_cgroup_data {
   union __anonunion_646 __anonCompField_sock_cgroup_data_152 ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup.h"
struct cgroup_namespace {
   refcount_t count ;
   struct ns_common ns ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct css_set *root_cset ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netprio_cgroup.h"
struct netprio_map {
   struct callback_head rcu ;
   u32 priomap_len ;
   u32 priomap[] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_mem_info {
   u32 type ;
   u32 id ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_rxq_info {
   struct net_device *dev ;
   u32 queue_index ;
   u32 reg_state ;
   struct xdp_mem_info mem ;
} __attribute__((__aligned__(64)));
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_frame {
   void *data ;
   u16 len ;
   u16 headroom ;
   u16 metasize ;
   struct xdp_mem_info mem ;
   struct net_device *dev_rx ;
};
#line 175 
struct netdev_bpf;
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/security.h"
struct xfrm_policy;
#line 161 
struct xfrm_state;
#line 178 
struct request_sock;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct sighand_struct {
   spinlock_t siglock ;
   refcount_t count ;
   wait_queue_head_t signalfd_wqh ;
   struct k_sigaction action[64U] ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   u64 ac_utime ;
   u64 ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct cpu_itimer {
   u64 expires ;
   u64 incr ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct task_cputime_atomic {
   atomic64_t utime ;
   atomic64_t stime ;
   atomic64_t sum_exec_runtime ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct thread_group_cputimer {
   struct task_cputime_atomic cputime_atomic ;
};
#line 80 
struct tty_struct;
#line 80 
struct autogroup;
#line 80 
struct tty_audit_buf;
#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct signal_struct {
   refcount_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   struct list_head thread_head ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   struct hlist_head multiprocess ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   unsigned int is_child_subreaper : 1 ;
   unsigned int has_child_subreaper : 1 ;
   int posix_timer_id ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct posix_cputimers posix_cputimers ;
   struct pid *pids[4U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   struct autogroup *autogroup ;
   seqlock_t stats_lock ;
   u64 utime ;
   u64 stime ;
   u64 cutime ;
   u64 cstime ;
   u64 gtime ;
   u64 cgtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
   bool oom_flag_origin ;
   short oom_score_adj ;
   short oom_score_adj_min ;
   struct mm_struct *oom_mm ;
   struct mutex cred_guard_mutex ;
} __attribute__((__designated_init__));
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlmsghdr {
   __u32 nlmsg_len ;
   __u16 nlmsg_type ;
   __u16 nlmsg_flags ;
   __u32 nlmsg_seq ;
   __u32 nlmsg_pid ;
};
#line 211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_ext_ack {
   char *_msg ;
   struct nlattr *bad_attr ;
   u8 cookie[20U] ;
   u8 cookie_len ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
union __anonunion_670 {
   u8 ctx[48U] ;
   long args[6U] ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_callback {
   struct sk_buff *skb ;
   struct nlmsghdr *nlh ;
   int (*dump)(struct sk_buff *, struct netlink_callback *) ;
   int (*done)(struct netlink_callback *) ;
   void *data ;
   struct module *module ;
   struct netlink_ext_ack *extack ;
   u16 family ;
   u16 min_dump_alloc ;
   bool strict_check ;
   u16 answer_flags ;
   unsigned int prev_seq ;
   unsigned int seq ;
   union __anonunion_670 __anonCompField_netlink_callback_153 ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/neighbour.h"
struct ndmsg {
   __u8 ndm_family ;
   __u8 ndm_pad1 ;
   __u16 ndm_pad2 ;
   __s32 ndm_ifindex ;
   __u16 ndm_state ;
   __u8 ndm_flags ;
   __u8 ndm_type ;
};
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct rtnl_link_stats64 {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 rx_errors ;
   __u64 tx_errors ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
   __u64 multicast ;
   __u64 collisions ;
   __u64 rx_length_errors ;
   __u64 rx_over_errors ;
   __u64 rx_crc_errors ;
   __u64 rx_frame_errors ;
   __u64 rx_fifo_errors ;
   __u64 rx_missed_errors ;
   __u64 tx_aborted_errors ;
   __u64 tx_carrier_errors ;
   __u64 tx_fifo_errors ;
   __u64 tx_heartbeat_errors ;
   __u64 tx_window_errors ;
   __u64 rx_compressed ;
   __u64 tx_compressed ;
   __u64 rx_nohandler ;
};
#line 753  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct ifla_vf_guid {
   __u32 vf ;
   __u64 guid ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_stats {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 broadcast ;
   __u64 multicast ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_info {
   __u32 vf ;
   __u8 mac[32U] ;
   __u32 vlan ;
   __u32 qos ;
   __u32 spoofchk ;
   __u32 linkstate ;
   __u32 min_tx_rate ;
   __u32 max_tx_rate ;
   __u32 rss_query_en ;
   __u32 trusted ;
   __be16 vlan_proto ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/pkt_sched.h"
struct tc_stats {
   __u64 bytes ;
   __u32 packets ;
   __u32 drops ;
   __u32 overlimits ;
   __u32 bps ;
   __u32 pps ;
   __u32 qlen ;
   __u32 backlog ;
};
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/pkt_sched.h"
struct tc_sizespec {
   unsigned char cell_log ;
   unsigned char size_log ;
   short cell_align ;
   int overhead ;
   unsigned int linklayer ;
   unsigned int mpu ;
   unsigned int mtu ;
   unsigned int tsize ;
};
#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hashtable.h"
struct netpoll_info;
#line 119 
struct phy_device;
#line 120 
struct dsa_port;
#line 121 
struct sfp_bus;
#line 122 
struct wireless_dev;
#line 123 
struct wpan_dev;
#line 124 
struct mpls_dev;
#line 125 
struct udp_tunnel_info;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
enum netdev_tx {
    __NETDEV_TX_MIN = -2147483648,
    NETDEV_TX_OK = 0,
    NETDEV_TX_BUSY = 16
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum netdev_tx netdev_tx_t;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};
#line 195 
struct neigh_parms;
#line 217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_hw_addr_list {
   struct list_head list ;
   int count ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct hh_cache {
   unsigned int hh_len ;
   seqlock_t hh_lock ;
   unsigned long hh_data[16U] ;
};
#line 263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct header_ops {
   int (*create)(struct sk_buff *, struct net_device *, unsigned short , void *, void *, unsigned int ) ;
   int (*parse)(struct sk_buff *, unsigned char *) ;
   int (*cache)(struct neighbour *, struct hh_cache *, __be16 ) ;
   void (*cache_update)(struct hh_cache *, struct net_device *, unsigned char *) ;
   bool (*validate)(char *, unsigned int ) ;
   __be16 (*parse_protocol)(struct sk_buff *) ;
};
#line 372 
enum rx_handler_result {
    RX_HANDLER_CONSUMED = 0,
    RX_HANDLER_ANOTHER = 1,
    RX_HANDLER_EXACT = 2,
    RX_HANDLER_PASS = 3
};
#line 379  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum rx_handler_result rx_handler_result_t;
#line 421  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef rx_handler_result_t rx_handler_func_t(struct sk_buff **);
#line 589 
struct Qdisc;
#line 589 
struct xdp_umem;
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   struct Qdisc *qdisc_sleeping ;
   struct kobject kobj ;
   int numa_node ;
   unsigned long tx_maxrate ;
   unsigned long trans_timeout ;
   struct net_device *sb_dev ;
   struct xdp_umem *umem ;
   spinlock_t _xmit_lock ;
   int xmit_lock_owner ;
   unsigned long trans_start ;
   unsigned long state ;
   struct dql dql ;
} __attribute__((__aligned__(64)));
#line 662  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_map {
   unsigned int len ;
   struct callback_head rcu ;
   u16 cpus[0U] ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow {
   u16 cpu ;
   u16 filter ;
   unsigned int last_qtail ;
};
#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow_table {
   unsigned int mask ;
   struct callback_head rcu ;
   struct rps_dev_flow flows[0U] ;
};
#line 736  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_rx_queue {
   struct rps_map *rps_map ;
   struct rps_dev_flow_table *rps_flow_table ;
   struct kobject kobj ;
   struct net_device *dev ;
   struct xdp_rxq_info xdp_rxq ;
   struct xdp_umem *umem ;
} __attribute__((__aligned__(64)));
#line 764  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_map {
   unsigned int len ;
   unsigned int alloc_len ;
   struct callback_head rcu ;
   u16 queues[0U] ;
};
#line 777  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_dev_maps {
   struct callback_head rcu ;
   struct xps_map *attr_map[0U] ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_tc_txq {
   u16 count ;
   u16 offset ;
};
#line 803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_fcoe_hbainfo {
   char manufacturer[64U] ;
   char serial_number[64U] ;
   char hardware_version[64U] ;
   char driver_version[64U] ;
   char optionrom_version[64U] ;
   char firmware_version[64U] ;
   char model[256U] ;
   char model_description[256U] ;
};
#line 820  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_phys_item_id {
   unsigned char id[32U] ;
   unsigned char id_len ;
};
#line 833 
enum tc_setup_type {
    TC_SETUP_QDISC_MQPRIO = 0,
    TC_SETUP_CLSU32 = 1,
    TC_SETUP_CLSFLOWER = 2,
    TC_SETUP_CLSMATCHALL = 3,
    TC_SETUP_CLSBPF = 4,
    TC_SETUP_BLOCK = 5,
    TC_SETUP_QDISC_CBS = 6,
    TC_SETUP_QDISC_RED = 7,
    TC_SETUP_QDISC_PRIO = 8,
    TC_SETUP_QDISC_MQ = 9,
    TC_SETUP_QDISC_ETF = 10,
    TC_SETUP_ROOT_QDISC = 11,
    TC_SETUP_QDISC_GRED = 12,
    TC_SETUP_QDISC_TAPRIO = 13,
    TC_SETUP_FT = 14
};
#line 851 
enum bpf_netdev_command {
    XDP_SETUP_PROG = 0,
    XDP_SETUP_PROG_HW = 1,
    XDP_QUERY_PROG = 2,
    XDP_QUERY_PROG_HW = 3,
    BPF_OFFLOAD_MAP_ALLOC = 4,
    BPF_OFFLOAD_MAP_FREE = 5,
    XDP_SETUP_XSK_UMEM = 6
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_675 {
   u32 flags ;
   struct bpf_prog *prog ;
   struct netlink_ext_ack *extack ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_676 {
   u32 prog_id ;
   u32 prog_flags ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_677 {
   struct bpf_offloaded_map *offmap ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_xsk_678 {
   struct xdp_umem *umem ;
   u16 queue_id ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_674 {
   struct __anonstruct_675 __anonCompField___anonunion_674_155 ;
   struct __anonstruct_676 __anonCompField___anonunion_674_156 ;
   struct __anonstruct_677 __anonCompField___anonunion_674_157 ;
   struct __anonstruct_xsk_678 xsk ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_bpf {
   enum bpf_netdev_command command ;
   union __anonunion_674 __anonCompField_netdev_bpf_158 ;
};
#line 911  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xfrmdev_ops {
   int (*xdo_dev_state_add)(struct xfrm_state *) ;
   void (*xdo_dev_state_delete)(struct xfrm_state *) ;
   void (*xdo_dev_state_free)(struct xfrm_state *) ;
   bool (*xdo_dev_offload_ok)(struct sk_buff *, struct xfrm_state *) ;
   void (*xdo_dev_state_advance_esn)(struct xfrm_state *) ;
};
#line 921  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct dev_ifalias {
   struct callback_head rcuhead ;
   char ifalias[] ;
};
#line 926 
struct tlsdev_ops;
#line 929  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_name_node {
   struct hlist_node hlist ;
   struct list_head list ;
   struct net_device *dev ;
   char *name ;
};
#line 1257 
struct devlink_port;
#line 1257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_ops {
   int (*ndo_init)(struct net_device *) ;
   void (*ndo_uninit)(struct net_device *) ;
   int (*ndo_open)(struct net_device *) ;
   int (*ndo_stop)(struct net_device *) ;
   netdev_tx_t (*ndo_start_xmit)(struct sk_buff *, struct net_device *) ;
   netdev_features_t (*ndo_features_check)(struct sk_buff *, struct net_device *, netdev_features_t ) ;
   u16 (*ndo_select_queue)(struct net_device *, struct sk_buff *, struct net_device *) ;
   void (*ndo_change_rx_flags)(struct net_device *, int ) ;
   void (*ndo_set_rx_mode)(struct net_device *) ;
   int (*ndo_set_mac_address)(struct net_device *, void *) ;
   int (*ndo_validate_addr)(struct net_device *) ;
   int (*ndo_do_ioctl)(struct net_device *, struct ifreq *, int ) ;
   int (*ndo_set_config)(struct net_device *, struct ifmap *) ;
   int (*ndo_change_mtu)(struct net_device *, int ) ;
   int (*ndo_neigh_setup)(struct net_device *, struct neigh_parms *) ;
   void (*ndo_tx_timeout)(struct net_device *) ;
   void (*ndo_get_stats64)(struct net_device *, struct rtnl_link_stats64 *) ;
   bool (*ndo_has_offload_stats)(struct net_device *, int ) ;
   int (*ndo_get_offload_stats)(int , struct net_device *, void *) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device *) ;
   int (*ndo_vlan_rx_add_vid)(struct net_device *, __be16 , u16 ) ;
   int (*ndo_vlan_rx_kill_vid)(struct net_device *, __be16 , u16 ) ;
   void (*ndo_poll_controller)(struct net_device *) ;
   int (*ndo_netpoll_setup)(struct net_device *, struct netpoll_info *) ;
   void (*ndo_netpoll_cleanup)(struct net_device *) ;
   int (*ndo_set_vf_mac)(struct net_device *, int , u8 *) ;
   int (*ndo_set_vf_vlan)(struct net_device *, int , u16 , u8 , __be16 ) ;
   int (*ndo_set_vf_rate)(struct net_device *, int , int , int ) ;
   int (*ndo_set_vf_spoofchk)(struct net_device *, int , bool ) ;
   int (*ndo_set_vf_trust)(struct net_device *, int , bool ) ;
   int (*ndo_get_vf_config)(struct net_device *, int , struct ifla_vf_info *) ;
   int (*ndo_set_vf_link_state)(struct net_device *, int , int ) ;
   int (*ndo_get_vf_stats)(struct net_device *, int , struct ifla_vf_stats *) ;
   int (*ndo_set_vf_port)(struct net_device *, int , struct nlattr **) ;
   int (*ndo_get_vf_port)(struct net_device *, int , struct sk_buff *) ;
   int (*ndo_get_vf_guid)(struct net_device *, int , struct ifla_vf_guid *, struct ifla_vf_guid *) ;
   int (*ndo_set_vf_guid)(struct net_device *, int , u64 , int ) ;
   int (*ndo_set_vf_rss_query_en)(struct net_device *, int , bool ) ;
   int (*ndo_setup_tc)(struct net_device *, enum tc_setup_type , void *) ;
   int (*ndo_fcoe_enable)(struct net_device *) ;
   int (*ndo_fcoe_disable)(struct net_device *) ;
   int (*ndo_fcoe_ddp_setup)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_ddp_done)(struct net_device *, u16 ) ;
   int (*ndo_fcoe_ddp_target)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_get_hbainfo)(struct net_device *, struct netdev_fcoe_hbainfo *) ;
   int (*ndo_fcoe_get_wwn)(struct net_device *, u64 *, int ) ;
   int (*ndo_rx_flow_steer)(struct net_device *, struct sk_buff *, u16 , u32 ) ;
   int (*ndo_add_slave)(struct net_device *, struct net_device *, struct netlink_ext_ack *) ;
   int (*ndo_del_slave)(struct net_device *, struct net_device *) ;
   netdev_features_t (*ndo_fix_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_set_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_neigh_construct)(struct net_device *, struct neighbour *) ;
   void (*ndo_neigh_destroy)(struct net_device *, struct neighbour *) ;
   int (*ndo_fdb_add)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 , u16 , struct netlink_ext_ack *) ;
   int (*ndo_fdb_del)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 ) ;
   int (*ndo_fdb_dump)(struct sk_buff *, struct netlink_callback *, struct net_device *, struct net_device *, int *) ;
   int (*ndo_fdb_get)(struct sk_buff *, struct nlattr **, struct net_device *, unsigned char *, u16 , u32 , u32 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_setlink)(struct net_device *, struct nlmsghdr *, u16 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_getlink)(struct sk_buff *, u32 , u32 , struct net_device *, u32 , int ) ;
   int (*ndo_bridge_dellink)(struct net_device *, struct nlmsghdr *, u16 ) ;
   int (*ndo_change_carrier)(struct net_device *, bool ) ;
   int (*ndo_get_phys_port_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_port_parent_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_phys_port_name)(struct net_device *, char *, size_t ) ;
   void (*ndo_udp_tunnel_add)(struct net_device *, struct udp_tunnel_info *) ;
   void (*ndo_udp_tunnel_del)(struct net_device *, struct udp_tunnel_info *) ;
   void *(*ndo_dfwd_add_station)(struct net_device *, struct net_device *) ;
   void (*ndo_dfwd_del_station)(struct net_device *, void *) ;
   int (*ndo_set_tx_maxrate)(struct net_device *, int , u32 ) ;
   int (*ndo_get_iflink)(struct net_device *) ;
   int (*ndo_change_proto_down)(struct net_device *, bool ) ;
   int (*ndo_fill_metadata_dst)(struct net_device *, struct sk_buff *) ;
   void (*ndo_set_rx_headroom)(struct net_device *, int ) ;
   int (*ndo_bpf)(struct net_device *, struct netdev_bpf *) ;
   int (*ndo_xdp_xmit)(struct net_device *, int , struct xdp_frame **, u32 ) ;
   int (*ndo_xsk_wakeup)(struct net_device *, u32 , u32 ) ;
   struct devlink_port *(*ndo_get_devlink_port)(struct net_device *) ;
};
#line 1492 
enum ldv_14568 {
    NETREG_UNINITIALIZED = 0,
    NETREG_REGISTERED = 1,
    NETREG_UNREGISTERING = 2,
    NETREG_UNREGISTERED = 3,
    NETREG_RELEASED = 4,
    NETREG_DUMMY = 5
};
#line 1501 
enum ldv_14569 {
    RTNL_LINK_INITIALIZED = 0,
    RTNL_LINK_INITIALIZING = 1
};
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_adj_list_679 {
   struct list_head upper ;
   struct list_head lower ;
};
#line 1795 
struct iw_handler_def;
#line 1795 
struct iw_public_data;
#line 1795 
struct l3mdev_ops;
#line 1795 
struct ndisc_ops;
#line 1795 
struct vlan_info;
#line 1795 
struct tipc_bearer;
#line 1795 
struct in_device;
#line 1795 
struct dn_dev;
#line 1795 
struct inet6_dev;
#line 1795 
struct mini_Qdisc;
#line 1795 
struct cpu_rmap;
#line 1795 
struct pcpu_lstats;
#line 1795 
struct pcpu_sw_netstats;
#line 1795 
struct pcpu_dstats;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_680 {
   void *ml_priv ;
   struct pcpu_lstats *lstats ;
   struct pcpu_sw_netstats *tstats ;
   struct pcpu_dstats *dstats ;
};
#line 1795 
struct garp_port;
#line 1795 
struct mrp_port;
#line 1795 
struct rtnl_link_ops;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device {
   char name[16U] ;
   struct netdev_name_node *name_node ;
   struct dev_ifalias *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   int irq ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   struct list_head unreg_list ;
   struct list_head close_list ;
   struct list_head ptype_all ;
   struct list_head ptype_specific ;
   struct __anonstruct_adj_list_679 adj_list ;
   netdev_features_t features ;
   netdev_features_t hw_features ;
   netdev_features_t wanted_features ;
   netdev_features_t vlan_features ;
   netdev_features_t hw_enc_features ;
   netdev_features_t mpls_features ;
   netdev_features_t gso_partial_features ;
   int ifindex ;
   int group ;
   struct net_device_stats stats ;
   atomic_long_t rx_dropped ;
   atomic_long_t tx_dropped ;
   atomic_long_t rx_nohandler ;
   atomic_t carrier_up_count ;
   atomic_t carrier_down_count ;
   struct iw_handler_def *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops *netdev_ops ;
   struct ethtool_ops *ethtool_ops ;
   struct l3mdev_ops *l3mdev_ops ;
   struct ndisc_ops *ndisc_ops ;
   struct xfrmdev_ops *xfrmdev_ops ;
   struct tlsdev_ops *tlsdev_ops ;
   struct header_ops *header_ops ;
   unsigned int flags ;
   unsigned int priv_flags ;
   unsigned short gflags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned int mtu ;
   unsigned int min_mtu ;
   unsigned int max_mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned char min_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   unsigned char perm_addr[32U] ;
   unsigned char addr_assign_type ;
   unsigned char addr_len ;
   unsigned char upper_level ;
   unsigned char lower_level ;
   unsigned short neigh_priv_len ;
   unsigned short dev_id ;
   unsigned short dev_port ;
   spinlock_t addr_list_lock ;
   unsigned char name_assign_type ;
   bool uc_promisc ;
   struct netdev_hw_addr_list uc ;
   struct netdev_hw_addr_list mc ;
   struct netdev_hw_addr_list dev_addrs ;
   struct kset *queues_kset ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   struct vlan_info *vlan_info ;
   struct dsa_port *dsa_ptr ;
   struct tipc_bearer *tipc_ptr ;
   void *atalk_ptr ;
   struct in_device *ip_ptr ;
   struct dn_dev *dn_ptr ;
   struct inet6_dev *ip6_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   struct wpan_dev *ieee802154_ptr ;
   struct mpls_dev *mpls_ptr ;
   unsigned char *dev_addr ;
   struct netdev_rx_queue *_rx ;
   unsigned int num_rx_queues ;
   unsigned int real_num_rx_queues ;
   struct bpf_prog *xdp_prog ;
   unsigned long gro_flush_timeout ;
   rx_handler_func_t *rx_handler ;
   void *rx_handler_data ;
   struct mini_Qdisc *miniq_ingress ;
   struct netdev_queue *ingress_queue ;
   struct nf_hook_entries *nf_hooks_ingress ;
   unsigned char broadcast[32U] ;
   struct cpu_rmap *rx_cpu_rmap ;
   struct hlist_node index_hlist ;
   struct netdev_queue *_tx ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   struct Qdisc *qdisc ;
   struct hlist_head qdisc_hash[16U] ;
   unsigned int tx_queue_len ;
   spinlock_t tx_global_lock ;
   int watchdog_timeo ;
   struct xps_dev_maps *xps_cpus_map ;
   struct xps_dev_maps *xps_rxqs_map ;
   struct mini_Qdisc *miniq_egress ;
   struct timer_list watchdog_timer ;
   int *pcpu_refcnt ;
   struct list_head todo_list ;
   struct list_head link_watch_list ;
   enum ldv_14568 reg_state : 8 ;
   bool dismantle ;
   enum ldv_14569 rtnl_link_state : 16 ;
   bool needs_free_netdev ;
   void (*priv_destructor)(struct net_device *) ;
   struct netpoll_info *npinfo ;
   possible_net_t nd_net ;
   union __anonunion_680 __anonCompField_net_device_159 ;
   struct garp_port *garp_port ;
   struct mrp_port *mrp_port ;
   struct device dev ;
   struct attribute_group *sysfs_groups[4U] ;
   struct attribute_group *sysfs_rx_queue_group ;
   struct rtnl_link_ops *rtnl_link_ops ;
   unsigned int gso_max_size ;
   u16 gso_max_segs ;
   struct dcbnl_rtnl_ops *dcbnl_ops ;
   s16 num_tc ;
   struct netdev_tc_txq tc_to_txq[16U] ;
   u8 prio_tc_map[16U] ;
   unsigned int fcoe_ddp_xid ;
   struct netprio_map *priomap ;
   struct phy_device *phydev ;
   struct sfp_bus *sfp_bus ;
   struct lock_class_key qdisc_tx_busylock_key ;
   struct lock_class_key qdisc_running_key ;
   struct lock_class_key qdisc_xmit_lock_key ;
   struct lock_class_key addr_list_lock_key ;
   bool proto_down ;
   unsigned int wol_enabled : 1 ;
};
#line 2400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_sw_netstats {
   u64 rx_packets ;
   u64 rx_bytes ;
   u64 tx_packets ;
   u64 tx_bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(32)));
#line 2408  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_lstats {
   u64_stats_t packets ;
   u64_stats_t bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 1227  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_p2p_noa_desc {
   u8 count ;
   __le32 duration ;
   __le32 interval ;
   __le32 start_time ;
} __attribute__((__packed__));
#line 1234  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_p2p_noa_attr {
   u8 index ;
   u8 oppps_ctwindow ;
   struct ieee80211_p2p_noa_desc desc[4U] ;
} __attribute__((__packed__));
#line 1276  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_mcs_info {
   u8 rx_mask[10U] ;
   __le16 rx_highest ;
   u8 tx_params ;
   u8 reserved[3U] ;
} __attribute__((__packed__));
#line 1310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_ht_cap {
   __le16 cap_info ;
   u8 ampdu_params_info ;
   struct ieee80211_mcs_info mcs ;
   __le16 extended_ht_cap_info ;
   __le32 tx_BF_cap_info ;
   u8 antenna_selection_info ;
} __attribute__((__packed__));
#line 1483  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_vht_mcs_info {
   __le16 rx_mcs_map ;
   __le16 rx_highest ;
   __le16 tx_mcs_map ;
   __le16 tx_highest ;
} __attribute__((__packed__));
#line 1526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_vht_cap {
   __le32 vht_cap_info ;
   struct ieee80211_vht_mcs_info supp_mcs ;
} __attribute__((__packed__));
#line 1569  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_he_cap_elem {
   u8 mac_cap_info[6U] ;
   u8 phy_cap_info[11U] ;
} __attribute__((__packed__));
#line 1616  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_he_mcs_nss_supp {
   __le16 rx_mcs_80 ;
   __le16 tx_mcs_80 ;
   __le16 rx_mcs_160 ;
   __le16 tx_mcs_160 ;
   __le16 rx_mcs_80p80 ;
   __le16 tx_mcs_80p80 ;
} __attribute__((__packed__));
#line 1631  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_he_operation {
   __le32 he_oper_params ;
   __le16 he_mcs_nss_set ;
   u8 optional[0U] ;
} __attribute__((__packed__));
#line 811  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/debugfs.h"
enum nl80211_iftype {
    NL80211_IFTYPE_UNSPECIFIED = 0,
    NL80211_IFTYPE_ADHOC = 1,
    NL80211_IFTYPE_STATION = 2,
    NL80211_IFTYPE_AP = 3,
    NL80211_IFTYPE_AP_VLAN = 4,
    NL80211_IFTYPE_WDS = 5,
    NL80211_IFTYPE_MONITOR = 6,
    NL80211_IFTYPE_MESH_POINT = 7,
    NL80211_IFTYPE_P2P_CLIENT = 8,
    NL80211_IFTYPE_P2P_GO = 9,
    NL80211_IFTYPE_P2P_DEVICE = 10,
    NL80211_IFTYPE_OCB = 11,
    NL80211_IFTYPE_NAN = 12,
    NUM_NL80211_IFTYPES = 13,
    NL80211_IFTYPE_MAX = 12
};
#line 3263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/nl80211.h"
enum nl80211_reg_initiator {
    NL80211_REGDOM_SET_BY_CORE = 0,
    NL80211_REGDOM_SET_BY_USER = 1,
    NL80211_REGDOM_SET_BY_DRIVER = 2,
    NL80211_REGDOM_SET_BY_COUNTRY_IE = 3
};
#line 3320 
enum nl80211_dfs_regions {
    NL80211_DFS_UNSET = 0,
    NL80211_DFS_FCC = 1,
    NL80211_DFS_ETSI = 2,
    NL80211_DFS_JP = 3
};
#line 3327 
enum nl80211_user_reg_hint_type {
    NL80211_USER_REG_HINT_USER = 0,
    NL80211_USER_REG_HINT_CELL_BASE = 1,
    NL80211_USER_REG_HINT_INDOOR = 2
};
#line 3439 
enum nl80211_channel_type {
    NL80211_CHAN_NO_HT = 0,
    NL80211_CHAN_HT20 = 1,
    NL80211_CHAN_HT40MINUS = 2,
    NL80211_CHAN_HT40PLUS = 3
};
#line 3446 
enum nl80211_key_mode {
    NL80211_KEY_RX_TX = 0,
    NL80211_KEY_NO_TX = 1,
    NL80211_KEY_SET_TX = 2
};
#line 3452 
enum nl80211_chan_width {
    NL80211_CHAN_WIDTH_20_NOHT = 0,
    NL80211_CHAN_WIDTH_20 = 1,
    NL80211_CHAN_WIDTH_40 = 2,
    NL80211_CHAN_WIDTH_80 = 3,
    NL80211_CHAN_WIDTH_80P80 = 4,
    NL80211_CHAN_WIDTH_160 = 5,
    NL80211_CHAN_WIDTH_5 = 6,
    NL80211_CHAN_WIDTH_10 = 7
};
#line 3463 
enum nl80211_bss_scan_width {
    NL80211_BSS_CHAN_WIDTH_20 = 0,
    NL80211_BSS_CHAN_WIDTH_10 = 1,
    NL80211_BSS_CHAN_WIDTH_5 = 2
};
#line 3500 
enum nl80211_auth_type {
    NL80211_AUTHTYPE_OPEN_SYSTEM = 0,
    NL80211_AUTHTYPE_SHARED_KEY = 1,
    NL80211_AUTHTYPE_FT = 2,
    NL80211_AUTHTYPE_NETWORK_EAP = 3,
    NL80211_AUTHTYPE_SAE = 4,
    NL80211_AUTHTYPE_FILS_SK = 5,
    NL80211_AUTHTYPE_FILS_SK_PFS = 6,
    NL80211_AUTHTYPE_FILS_PK = 7,
    __NL80211_AUTHTYPE_NUM = 8,
    NL80211_AUTHTYPE_MAX = 7,
    NL80211_AUTHTYPE_AUTOMATIC = 8
};
#line 3521 
enum nl80211_mfp {
    NL80211_MFP_NO = 0,
    NL80211_MFP_REQUIRED = 1,
    NL80211_MFP_OPTIONAL = 2
};
#line 4599 
enum nl80211_band {
    NL80211_BAND_2GHZ = 0,
    NL80211_BAND_5GHZ = 1,
    NL80211_BAND_60GHZ = 2,
    NL80211_BAND_6GHZ = 3,
    NUM_NL80211_BANDS = 4
};
#line 4633 
enum nl80211_tx_power_setting {
    NL80211_TX_POWER_AUTOMATIC = 0,
    NL80211_TX_POWER_LIMITED = 1,
    NL80211_TX_POWER_FIXED = 2
};
#line 4914  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/nl80211.h"
struct nl80211_wowlan_tcp_data_seq {
   __u32 start ;
   __u32 offset ;
   __u32 len ;
};
#line 4925  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/nl80211.h"
struct nl80211_wowlan_tcp_data_token {
   __u32 offset ;
   __u32 len ;
   __u8 token_stream[] ;
};
#line 4936  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/nl80211.h"
struct nl80211_wowlan_tcp_data_token_feature {
   __u32 min_len ;
   __u32 max_len ;
   __u32 bufsize ;
};
#line 5237 
enum nl80211_dfs_state {
    NL80211_DFS_USABLE = 0,
    NL80211_DFS_UNAVAILABLE = 1,
    NL80211_DFS_AVAILABLE = 2
};
#line 5847  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/nl80211.h"
struct nl80211_vendor_cmd_info {
   __u32 vendor_id ;
   __u32 subcmd ;
};
#line 5903 
enum nl80211_bss_select_attr {
    __NL80211_BSS_SELECT_ATTR_INVALID = 0,
    NL80211_BSS_SELECT_ATTR_RSSI = 1,
    NL80211_BSS_SELECT_ATTR_BAND_PREF = 2,
    NL80211_BSS_SELECT_ATTR_RSSI_ADJUST = 3,
    __NL80211_BSS_SELECT_ATTR_AFTER_LAST = 4,
    NL80211_BSS_SELECT_ATTR_MAX = 3
};
#line 6138 
enum environment_cap {
    ENVIRON_ANY = 0,
    ENVIRON_INDOOR = 1,
    ENVIRON_OUTDOOR = 2
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/regulatory.h"
struct regulatory_request {
   struct callback_head callback_head ;
   int wiphy_idx ;
   enum nl80211_reg_initiator initiator ;
   enum nl80211_user_reg_hint_type user_reg_hint_type ;
   char alpha2[3U] ;
   enum nl80211_dfs_regions dfs_region ;
   bool intersect ;
   bool processed ;
   enum environment_cap country_ie_env ;
   struct list_head list ;
};
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/regulatory.h"
struct ieee80211_freq_range {
   u32 start_freq_khz ;
   u32 end_freq_khz ;
   u32 max_bandwidth_khz ;
};
#line 187  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/regulatory.h"
struct ieee80211_power_rule {
   u32 max_antenna_gain ;
   u32 max_eirp ;
};
#line 205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/regulatory.h"
struct ieee80211_wmm_ac {
   u16 cw_min ;
   u16 cw_max ;
   u16 cot ;
   u8 aifsn ;
};
#line 212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/regulatory.h"
struct ieee80211_wmm_rule {
   struct ieee80211_wmm_ac client[4U] ;
   struct ieee80211_wmm_ac ap[4U] ;
};
#line 217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/regulatory.h"
struct ieee80211_reg_rule {
   struct ieee80211_freq_range freq_range ;
   struct ieee80211_power_rule power_rule ;
   struct ieee80211_wmm_rule wmm_rule ;
   u32 flags ;
   u32 dfs_cac_ms ;
   bool has_wmm ;
};
#line 226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/regulatory.h"
struct ieee80211_regdomain {
   struct callback_head callback_head ;
   u32 n_reg_rules ;
   char alpha2[3U] ;
   enum nl80211_dfs_regions dfs_region ;
   struct ieee80211_reg_rule reg_rules[] ;
};
#line 233 
struct wiphy;
#line 147  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_channel {
   enum nl80211_band band ;
   u32 center_freq ;
   u16 hw_value ;
   u32 flags ;
   int max_antenna_gain ;
   int max_power ;
   int max_reg_power ;
   bool beacon_found ;
   u32 orig_flags ;
   int orig_mag ;
   int orig_mpwr ;
   enum nl80211_dfs_state dfs_state ;
   unsigned long dfs_state_entered ;
   unsigned int dfs_cac_ms ;
};
#line 172 
enum ieee80211_bss_type {
    IEEE80211_BSS_TYPE_ESS = 0,
    IEEE80211_BSS_TYPE_PBSS = 1,
    IEEE80211_BSS_TYPE_IBSS = 2,
    IEEE80211_BSS_TYPE_MBSS = 3,
    IEEE80211_BSS_TYPE_ANY = 4
};
#line 243  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_rate {
   u32 flags ;
   u16 bitrate ;
   u16 hw_value ;
   u16 hw_value_short ;
};
#line 256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_he_obss_pd {
   bool enable ;
   u8 min_offset ;
   u8 max_offset ;
};
#line 274  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_sta_ht_cap {
   u16 cap ;
   bool ht_supported ;
   u8 ampdu_factor ;
   u8 ampdu_density ;
   struct ieee80211_mcs_info mcs ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_sta_vht_cap {
   bool vht_supported ;
   u32 cap ;
   struct ieee80211_vht_mcs_info vht_mcs ;
};
#line 311  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_sta_he_cap {
   bool has_he ;
   struct ieee80211_he_cap_elem he_cap_elem ;
   struct ieee80211_he_mcs_nss_supp he_mcs_nss_supp ;
   u8 ppe_thres[25U] ;
};
#line 328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_sband_iftype_data {
   u16 types_mask ;
   struct ieee80211_sta_he_cap he_cap ;
};
#line 332 
enum ieee80211_edmg_bw_config {
    IEEE80211_EDMG_BW_CONFIG_4 = 4,
    IEEE80211_EDMG_BW_CONFIG_5 = 5,
    IEEE80211_EDMG_BW_CONFIG_6 = 6,
    IEEE80211_EDMG_BW_CONFIG_7 = 7,
    IEEE80211_EDMG_BW_CONFIG_8 = 8,
    IEEE80211_EDMG_BW_CONFIG_9 = 9,
    IEEE80211_EDMG_BW_CONFIG_10 = 10,
    IEEE80211_EDMG_BW_CONFIG_11 = 11,
    IEEE80211_EDMG_BW_CONFIG_12 = 12,
    IEEE80211_EDMG_BW_CONFIG_13 = 13,
    IEEE80211_EDMG_BW_CONFIG_14 = 14,
    IEEE80211_EDMG_BW_CONFIG_15 = 15
};
#line 382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_edmg {
   u8 channels ;
   enum ieee80211_edmg_bw_config bw_config ;
};
#line 410  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_supported_band {
   struct ieee80211_channel *channels ;
   struct ieee80211_rate *bitrates ;
   enum nl80211_band band ;
   int n_channels ;
   int n_bitrates ;
   struct ieee80211_sta_ht_cap ht_cap ;
   struct ieee80211_sta_vht_cap vht_cap ;
   struct ieee80211_edmg edmg_cap ;
   u16 n_iftype_data ;
   struct ieee80211_sband_iftype_data *iftype_data ;
};
#line 571  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct key_params {
   u8 *key ;
   u8 *seq ;
   int key_len ;
   int seq_len ;
   u16 vlan_id ;
   u32 cipher ;
   enum nl80211_key_mode mode ;
};
#line 593  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_chan_def {
   struct ieee80211_channel *chan ;
   enum nl80211_chan_width width ;
   u32 center_freq1 ;
   u32 center_freq2 ;
   struct ieee80211_edmg edmg ;
};
#line 853  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_crypto_settings {
   u32 wpa_versions ;
   u32 cipher_group ;
   int n_ciphers_pairwise ;
   u32 ciphers_pairwise[5U] ;
   int n_akm_suites ;
   u32 akm_suites[2U] ;
   bool control_port ;
   __be16 control_port_ethertype ;
   bool control_port_no_encrypt ;
   bool control_port_over_nl80211 ;
   struct key_params *wep_keys ;
   int wep_tx_key ;
   u8 *psk ;
   u8 *sae_pwd ;
   u8 sae_pwd_len ;
};
#line 917  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct mac_address {
   u8 addr[6U] ;
};
#line 1885  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_ssid {
   u8 ssid[32U] ;
   u8 ssid_len ;
};
#line 1899  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_scan_info {
   u64 scan_start_tsf ;
   u8 tsf_bssid[6U] ;
   bool aborted ;
};
#line 1934  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_scan_request {
   struct cfg80211_ssid *ssids ;
   int n_ssids ;
   u32 n_channels ;
   enum nl80211_bss_scan_width scan_width ;
   u8 *ie ;
   size_t ie_len ;
   u16 duration ;
   bool duration_mandatory ;
   u32 flags ;
   u32 rates[4U] ;
   struct wireless_dev *wdev ;
   u8 mac_addr[6U] ;
   u8 mac_addr_mask[6U] ;
   u8 bssid[6U] ;
   struct wiphy *wiphy ;
   unsigned long scan_start ;
   struct cfg80211_scan_info info ;
   bool notified ;
   bool no_cck ;
   struct ieee80211_channel *channels[0U] ;
};
#line 1991  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_match_set {
   struct cfg80211_ssid ssid ;
   u8 bssid[6U] ;
   s32 rssi_thold ;
   s32 per_band_rssi_thold[4U] ;
};
#line 2007  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_sched_scan_plan {
   u32 interval ;
   u32 iterations ;
};
#line 2018  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_bss_select_adjust {
   enum nl80211_band band ;
   s8 delta ;
};
#line 2073  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_sched_scan_request {
   u64 reqid ;
   struct cfg80211_ssid *ssids ;
   int n_ssids ;
   u32 n_channels ;
   enum nl80211_bss_scan_width scan_width ;
   u8 *ie ;
   size_t ie_len ;
   u32 flags ;
   struct cfg80211_match_set *match_sets ;
   int n_match_sets ;
   s32 min_rssi_thold ;
   u32 delay ;
   struct cfg80211_sched_scan_plan *scan_plans ;
   int n_scan_plans ;
   u8 mac_addr[6U] ;
   u8 mac_addr_mask[6U] ;
   bool relative_rssi_set ;
   s8 relative_rssi ;
   struct cfg80211_bss_select_adjust rssi_adjust ;
   struct wiphy *wiphy ;
   struct net_device *dev ;
   unsigned long scan_start ;
   bool report_results ;
   struct callback_head callback_head ;
   u32 owner_nlportid ;
   bool nl_owner_dead ;
   struct list_head list ;
   struct ieee80211_channel *channels[0U] ;
};
#line 2109 
enum cfg80211_signal_type {
    CFG80211_SIGNAL_TYPE_NONE = 0,
    CFG80211_SIGNAL_TYPE_MBM = 1,
    CFG80211_SIGNAL_TYPE_UNSPEC = 2
};
#line 2432  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_ibss_params {
   u8 *ssid ;
   u8 *bssid ;
   struct cfg80211_chan_def chandef ;
   u8 *ie ;
   u8 ssid_len ;
   u8 ie_len ;
   u16 beacon_interval ;
   u32 basic_rates ;
   bool channel_fixed ;
   bool privacy ;
   bool control_port ;
   bool control_port_over_nl80211 ;
   bool userspace_handles_dfs ;
   int mcast_rate[4U] ;
   struct ieee80211_ht_cap ht_capa ;
   struct ieee80211_ht_cap ht_capa_mask ;
   struct key_params *wep_keys ;
   int wep_tx_key ;
};
#line 2460  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
union __anonunion_param_733 {
   enum nl80211_band band_pref ;
   struct cfg80211_bss_select_adjust adjust ;
};
#line 2460  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_bss_selection {
   enum nl80211_bss_select_attr behaviour ;
   union __anonunion_param_733 param ;
};
#line 2531  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_connect_params {
   struct ieee80211_channel *channel ;
   struct ieee80211_channel *channel_hint ;
   u8 *bssid ;
   u8 *bssid_hint ;
   u8 *ssid ;
   size_t ssid_len ;
   enum nl80211_auth_type auth_type ;
   u8 *ie ;
   size_t ie_len ;
   bool privacy ;
   enum nl80211_mfp mfp ;
   struct cfg80211_crypto_settings crypto ;
   u8 *key ;
   u8 key_len ;
   u8 key_idx ;
   u32 flags ;
   int bg_scan_period ;
   struct ieee80211_ht_cap ht_capa ;
   struct ieee80211_ht_cap ht_capa_mask ;
   struct ieee80211_vht_cap vht_capa ;
   struct ieee80211_vht_cap vht_capa_mask ;
   bool pbss ;
   struct cfg80211_bss_selection bss_select ;
   u8 *prev_bssid ;
   u8 *fils_erp_username ;
   size_t fils_erp_username_len ;
   u8 *fils_erp_realm ;
   size_t fils_erp_realm_len ;
   u16 fils_erp_next_seq_num ;
   u8 *fils_erp_rrk ;
   size_t fils_erp_rrk_len ;
   bool want_1x ;
   struct ieee80211_edmg edmg ;
};
#line 2656  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_pkt_pattern {
   u8 *mask ;
   u8 *pattern ;
   int pattern_len ;
   int pkt_offset ;
};
#line 2681  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_wowlan_tcp {
   struct socket *sock ;
   __be32 src ;
   __be32 dst ;
   u16 src_port ;
   u16 dst_port ;
   u8 dst_mac[6U] ;
   int payload_len ;
   u8 *payload ;
   struct nl80211_wowlan_tcp_data_seq payload_seq ;
   u32 data_interval ;
   u32 wake_len ;
   u8 *wake_data ;
   u8 *wake_mask ;
   u32 tokens_size ;
   struct nl80211_wowlan_tcp_data_token payload_tok ;
};
#line 2715  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_wowlan {
   bool any ;
   bool disconnect ;
   bool magic_pkt ;
   bool gtk_rekey_failure ;
   bool eap_identity_req ;
   bool four_way_handshake ;
   bool rfkill_release ;
   struct cfg80211_pkt_pattern *patterns ;
   struct cfg80211_wowlan_tcp *tcp ;
   int n_patterns ;
   struct cfg80211_sched_scan_request *nd_config ;
};
#line 4043  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_iface_limit {
   u16 max ;
   u16 types ;
};
#line 4107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_iface_combination {
   struct ieee80211_iface_limit *limits ;
   u32 num_different_channels ;
   u16 max_interfaces ;
   u8 n_limits ;
   bool beacon_int_infra_match ;
   u8 radar_detect_widths ;
   u8 radar_detect_regions ;
   u32 beacon_int_min_gcd ;
};
#line 4165  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_txrx_stypes {
   u16 tx ;
   u16 rx ;
};
#line 4198  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct wiphy_wowlan_tcp_support {
   struct nl80211_wowlan_tcp_data_token_feature *tok ;
   u32 data_payload_max ;
   u32 data_interval_max ;
   u32 wake_payload_max ;
   bool seq ;
};
#line 4221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct wiphy_wowlan_support {
   u32 flags ;
   int n_patterns ;
   int pattern_max_len ;
   int pattern_min_len ;
   int max_pkt_offset ;
   int max_nd_match_sets ;
   struct wiphy_wowlan_tcp_support *tcp ;
};
#line 4241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct wiphy_coalesce_support {
   int n_rules ;
   int max_delay ;
   int n_patterns ;
   int pattern_max_len ;
   int pattern_min_len ;
   int max_pkt_offset ;
};
#line 4312 
struct nla_policy;
#line 4312  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct wiphy_vendor_command {
   struct nl80211_vendor_cmd_info info ;
   u32 flags ;
   int (*doit)(struct wiphy *, struct wireless_dev *, void *, int ) ;
   int (*dumpit)(struct wiphy *, struct wireless_dev *, struct sk_buff *, void *, int , unsigned long *) ;
   struct nla_policy *policy ;
   unsigned int maxattr ;
};
#line 4335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct wiphy_iftype_ext_capab {
   enum nl80211_iftype iftype ;
   u8 *extended_capabilities ;
   u8 *extended_capabilities_mask ;
   u8 extended_capabilities_len ;
};
#line 4360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct __anonstruct_ftm_735 {
   u32 preambles ;
   u32 bandwidths ;
   s8 max_bursts_exponent ;
   u8 max_ftms_per_burst ;
   u8 supported : 1 ;
   u8 asap : 1 ;
   u8 non_asap : 1 ;
   u8 request_lci : 1 ;
   u8 request_civicloc : 1 ;
};
#line 4360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_pmsr_capabilities {
   unsigned int max_peers ;
   u8 report_ap_tsf : 1 ;
   u8 randomize_mac_addr : 1 ;
   struct __anonstruct_ftm_735 ftm ;
};
#line 4552  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct wiphy {
   u8 perm_addr[6U] ;
   u8 addr_mask[6U] ;
   struct mac_address *addresses ;
   struct ieee80211_txrx_stypes *mgmt_stypes ;
   struct ieee80211_iface_combination *iface_combinations ;
   int n_iface_combinations ;
   u16 software_iftypes ;
   u16 n_addresses ;
   u16 interface_modes ;
   u16 max_acl_mac_addrs ;
   u32 flags ;
   u32 regulatory_flags ;
   u32 features ;
   u8 ext_features[6U] ;
   u32 ap_sme_capa ;
   enum cfg80211_signal_type signal_type ;
   int bss_priv_size ;
   u8 max_scan_ssids ;
   u8 max_sched_scan_reqs ;
   u8 max_sched_scan_ssids ;
   u8 max_match_sets ;
   u16 max_scan_ie_len ;
   u16 max_sched_scan_ie_len ;
   u32 max_sched_scan_plans ;
   u32 max_sched_scan_plan_interval ;
   u32 max_sched_scan_plan_iterations ;
   int n_cipher_suites ;
   u32 *cipher_suites ;
   int n_akm_suites ;
   u32 *akm_suites ;
   u8 retry_short ;
   u8 retry_long ;
   u32 frag_threshold ;
   u32 rts_threshold ;
   u8 coverage_class ;
   char fw_version[32U] ;
   u32 hw_version ;
   struct wiphy_wowlan_support *wowlan ;
   struct cfg80211_wowlan *wowlan_config ;
   u16 max_remain_on_channel_duration ;
   u8 max_num_pmkids ;
   u32 available_antennas_tx ;
   u32 available_antennas_rx ;
   u32 probe_resp_offload ;
   u8 *extended_capabilities ;
   u8 *extended_capabilities_mask ;
   u8 extended_capabilities_len ;
   struct wiphy_iftype_ext_capab *iftype_ext_capab ;
   unsigned int num_iftype_ext_capab ;
   void *privid ;
   struct ieee80211_supported_band *bands[4U] ;
   void (*reg_notifier)(struct wiphy *, struct regulatory_request *) ;
   struct ieee80211_regdomain *regd ;
   struct device dev ;
   bool registered ;
   struct dentry *debugfsdir ;
   struct ieee80211_ht_cap *ht_capa_mod_mask ;
   struct ieee80211_vht_cap *vht_capa_mod_mask ;
   struct list_head wdev_list ;
   possible_net_t _net ;
   struct iw_handler_def *wext ;
   struct wiphy_coalesce_support *coalesce ;
   struct wiphy_vendor_command *vendor_commands ;
   struct nl80211_vendor_cmd_info *vendor_events ;
   int n_vendor_commands ;
   int n_vendor_events ;
   u16 max_ap_assoc_sta ;
   u8 max_num_csa_counters ;
   u8 max_adj_channel_rssi_comp ;
   u32 bss_select_support ;
   u8 nan_supported_bands ;
   u32 txq_limit ;
   u32 txq_memory_limit ;
   u32 txq_quantum ;
   u8 support_mbssid : 1 ;
   u8 support_only_he_mbssid : 1 ;
   struct cfg80211_pmsr_capabilities *pmsr_capa ;
   char priv[0U] ;
};
#line 4826 
struct cfg80211_conn;
#line 4827 
struct cfg80211_internal_bss;
#line 4828 
struct cfg80211_cached_keys;
#line 4829 
struct cfg80211_cqm_config;
#line 4912  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct __anonstruct_wext_736 {
   struct cfg80211_ibss_params ibss ;
   struct cfg80211_connect_params connect ;
   struct cfg80211_cached_keys *keys ;
   u8 *ie ;
   size_t ie_len ;
   u8 bssid[6U] ;
   u8 prev_bssid[6U] ;
   u8 ssid[32U] ;
   s8 default_key ;
   s8 default_mgmt_key ;
   bool prev_bssid_valid ;
};
#line 4912  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct wireless_dev {
   struct wiphy *wiphy ;
   enum nl80211_iftype iftype ;
   struct list_head list ;
   struct net_device *netdev ;
   u32 identifier ;
   struct list_head mgmt_registrations ;
   spinlock_t mgmt_registrations_lock ;
   struct mutex mtx ;
   bool use_4addr ;
   bool is_running ;
   u8 address[6U] ;
   u8 ssid[32U] ;
   u8 ssid_len ;
   u8 mesh_id_len ;
   u8 mesh_id_up_len ;
   struct cfg80211_conn *conn ;
   struct cfg80211_cached_keys *connect_keys ;
   enum ieee80211_bss_type conn_bss_type ;
   u32 conn_owner_nlportid ;
   struct work_struct disconnect_wk ;
   u8 disconnect_bssid[6U] ;
   struct list_head event_list ;
   spinlock_t event_lock ;
   struct cfg80211_internal_bss *current_bss ;
   struct cfg80211_chan_def preset_chandef ;
   struct cfg80211_chan_def chandef ;
   bool ibss_fixed ;
   bool ibss_dfs_possible ;
   bool ps ;
   int ps_timeout ;
   int beacon_interval ;
   u32 ap_unexpected_nlportid ;
   u32 owner_nlportid ;
   bool nl_owner_dead ;
   bool cac_started ;
   unsigned long cac_start_time ;
   unsigned int cac_time_ms ;
   struct __anonstruct_wext_736 wext ;
   struct cfg80211_cqm_config *cqm_config ;
   struct list_head pmsr_list ;
   spinlock_t pmsr_lock ;
   struct work_struct pmsr_free_wk ;
};
#line 567  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rtnetlink.h"
struct tcmsg {
   unsigned char tcm_family ;
   unsigned char tcm__pad1 ;
   unsigned short tcm__pad2 ;
   int tcm_ifindex ;
   __u32 tcm_handle ;
   __u32 tcm_parent ;
   __u32 tcm_info ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/gen_stats.h"
struct gnet_stats_queue {
   __u32 qlen ;
   __u32 backlog ;
   __u32 drops ;
   __u32 requeues ;
   __u32 overlimits ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_stats_basic_packed {
   __u64 bytes ;
   __u64 packets ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_stats_basic_cpu {
   struct gnet_stats_basic_packed bstats ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 20 
struct net_rate_estimator;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_dump {
   spinlock_t *lock ;
   struct sk_buff *skb ;
   struct nlattr *tail ;
   int compat_tc_stats ;
   int compat_xstats ;
   int padattr ;
   void *xstats ;
   int xstats_len ;
   struct tc_stats tc_stats ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
struct __anonstruct_744 {
   s16 min ;
   s16 max ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
union __anonunion_743 {
   void *validation_data ;
   struct __anonstruct_744 __anonCompField___anonunion_743_162 ;
   int (*validate)(struct nlattr *, struct netlink_ext_ack *) ;
   u16 strict_start_type ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
struct nla_policy {
   u8 type ;
   u8 validation_type ;
   u16 len ;
   union __anonunion_743 __anonCompField_nla_policy_163 ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/rtnetlink.h"
struct rtnl_link_ops {
   struct list_head list ;
   char *kind ;
   size_t priv_size ;
   void (*setup)(struct net_device *) ;
   unsigned int maxtype ;
   struct nla_policy *policy ;
   int (*validate)(struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   int (*newlink)(struct net *, struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   int (*changelink)(struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   void (*dellink)(struct net_device *, struct list_head *) ;
   size_t (*get_size)(struct net_device *) ;
   int (*fill_info)(struct sk_buff *, struct net_device *) ;
   size_t (*get_xstats_size)(struct net_device *) ;
   int (*fill_xstats)(struct sk_buff *, struct net_device *) ;
   unsigned int (*get_num_tx_queues)(void) ;
   unsigned int (*get_num_rx_queues)(void) ;
   unsigned int slave_maxtype ;
   struct nla_policy *slave_policy ;
   int (*slave_changelink)(struct net_device *, struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   size_t (*get_slave_size)(struct net_device *, struct net_device *) ;
   int (*fill_slave_info)(struct sk_buff *, struct net_device *, struct net_device *) ;
   struct net *(*get_link_net)(struct net_device *) ;
   size_t (*get_linkxstats_size)(struct net_device *, int ) ;
   int (*fill_linkxstats)(struct sk_buff *, struct net_device *, int *, int ) ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jhash.h"
struct rhash_lock_head {
   };
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable.h"
struct bucket_table {
   unsigned int size ;
   unsigned int nest ;
   u32 hash_rnd ;
   struct list_head walkers ;
   struct callback_head rcu ;
   struct bucket_table *future_tbl ;
   struct lockdep_map dep_map ;
   struct rhash_lock_head *buckets[] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct flow_block {
   struct list_head cb_list ;
};
#line 298  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
typedef int flow_setup_cb_t(enum tc_setup_type , void *, void *);
#line 412 
struct Qdisc_ops;
#line 413 
struct qdisc_walker;
#line 414 
struct tcf_walker;
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct qdisc_size_table {
   struct callback_head rcu ;
   struct list_head list ;
   struct tc_sizespec szopts ;
   int refcnt ;
   u16 data[] ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct qdisc_skb_head {
   struct sk_buff *head ;
   struct sk_buff *tail ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc {
   int (*enqueue)(struct sk_buff *, struct Qdisc *, struct sk_buff **) ;
   struct sk_buff *(*dequeue)(struct Qdisc *) ;
   unsigned int flags ;
   u32 limit ;
   struct Qdisc_ops *ops ;
   struct qdisc_size_table *stab ;
   struct hlist_node hash ;
   u32 handle ;
   u32 parent ;
   struct netdev_queue *dev_queue ;
   struct net_rate_estimator *rate_est ;
   struct gnet_stats_basic_cpu *cpu_bstats ;
   struct gnet_stats_queue *cpu_qstats ;
   int padded ;
   refcount_t refcnt ;
   struct sk_buff_head gso_skb ;
   struct qdisc_skb_head q ;
   struct gnet_stats_basic_packed bstats ;
   seqcount_t running ;
   struct gnet_stats_queue qstats ;
   unsigned long state ;
   struct Qdisc *next_sched ;
   struct sk_buff_head skb_bad_txq ;
   spinlock_t busylock ;
   spinlock_t seqlock ;
   bool empty ;
   struct callback_head rcu ;
};
#line 195 
struct tcf_block;
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc_class_ops {
   unsigned int flags ;
   struct netdev_queue *(*select_queue)(struct Qdisc *, struct tcmsg *) ;
   int (*graft)(struct Qdisc *, unsigned long , struct Qdisc *, struct Qdisc **, struct netlink_ext_ack *) ;
   struct Qdisc *(*leaf)(struct Qdisc *, unsigned long ) ;
   void (*qlen_notify)(struct Qdisc *, unsigned long ) ;
   unsigned long (*find)(struct Qdisc *, u32 ) ;
   int (*change)(struct Qdisc *, u32 , u32 , struct nlattr **, unsigned long *, struct netlink_ext_ack *) ;
   int (*delete)(struct Qdisc *, unsigned long ) ;
   void (*walk)(struct Qdisc *, struct qdisc_walker *) ;
   struct tcf_block *(*tcf_block)(struct Qdisc *, unsigned long , struct netlink_ext_ack *) ;
   unsigned long (*bind_tcf)(struct Qdisc *, unsigned long , u32 ) ;
   void (*unbind_tcf)(struct Qdisc *, unsigned long ) ;
   int (*dump)(struct Qdisc *, unsigned long , struct sk_buff *, struct tcmsg *) ;
   int (*dump_stats)(struct Qdisc *, unsigned long , struct gnet_dump *) ;
};
#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc_ops {
   struct Qdisc_ops *next ;
   struct Qdisc_class_ops *cl_ops ;
   char id[16U] ;
   int priv_size ;
   unsigned int static_flags ;
   int (*enqueue)(struct sk_buff *, struct Qdisc *, struct sk_buff **) ;
   struct sk_buff *(*dequeue)(struct Qdisc *) ;
   struct sk_buff *(*peek)(struct Qdisc *) ;
   int (*init)(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *) ;
   void (*reset)(struct Qdisc *) ;
   void (*destroy)(struct Qdisc *) ;
   int (*change)(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *) ;
   void (*attach)(struct Qdisc *) ;
   int (*change_tx_queue_len)(struct Qdisc *, unsigned int ) ;
   int (*dump)(struct Qdisc *, struct sk_buff *) ;
   int (*dump_stats)(struct Qdisc *, struct gnet_dump *) ;
   void (*ingress_block_set)(struct Qdisc *, u32 ) ;
   void (*egress_block_set)(struct Qdisc *, u32 ) ;
   u32 (*ingress_block_get)(struct Qdisc *) ;
   u32 (*egress_block_get)(struct Qdisc *) ;
   struct module *owner ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_818 {
   unsigned long class ;
   u32 classid ;
};
#line 272 
struct tcf_proto;
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_819 {
   bool ingress ;
   struct gnet_stats_queue *qstats ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
union __anonunion_817 {
   struct __anonstruct_818 __anonCompField___anonunion_817_165 ;
   struct tcf_proto *goto_tp ;
   struct __anonstruct_819 __anonCompField___anonunion_817_166 ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_result {
   union __anonunion_817 __anonCompField_tcf_result_167 ;
};
#line 287 
struct tcf_chain;
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_proto_ops {
   struct list_head head ;
   char kind[16U] ;
   int (*classify)(struct sk_buff *, struct tcf_proto *, struct tcf_result *) ;
   int (*init)(struct tcf_proto *) ;
   void (*destroy)(struct tcf_proto *, bool , struct netlink_ext_ack *) ;
   void *(*get)(struct tcf_proto *, u32 ) ;
   void (*put)(struct tcf_proto *, void *) ;
   int (*change)(struct net *, struct sk_buff *, struct tcf_proto *, unsigned long , u32 , struct nlattr **, void **, bool , bool , struct netlink_ext_ack *) ;
   int (*delete)(struct tcf_proto *, void *, bool *, bool , struct netlink_ext_ack *) ;
   bool (*delete_empty)(struct tcf_proto *) ;
   void (*walk)(struct tcf_proto *, struct tcf_walker *, bool ) ;
   int (*reoffload)(struct tcf_proto *, bool , flow_setup_cb_t *, void *, struct netlink_ext_ack *) ;
   void (*hw_add)(struct tcf_proto *, void *) ;
   void (*hw_del)(struct tcf_proto *, void *) ;
   void (*bind_class)(void *, u32 , unsigned long ) ;
   void *(*tmplt_create)(struct net *, struct tcf_chain *, struct nlattr **, struct netlink_ext_ack *) ;
   void (*tmplt_destroy)(void *) ;
   int (*dump)(struct net *, struct tcf_proto *, void *, struct sk_buff *, struct tcmsg *, bool ) ;
   int (*tmplt_dump)(struct sk_buff *, struct net *, void *) ;
   struct module *owner ;
   int flags ;
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_proto {
   struct tcf_proto *next ;
   void *root ;
   int (*classify)(struct sk_buff *, struct tcf_proto *, struct tcf_result *) ;
   __be16 protocol ;
   u32 prio ;
   void *data ;
   struct tcf_proto_ops *ops ;
   struct tcf_chain *chain ;
   spinlock_t lock ;
   bool deleting ;
   refcount_t refcnt ;
   struct callback_head rcu ;
   struct hlist_node destroy_ht_node ;
};
#line 386  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_chain {
   struct mutex filter_chain_lock ;
   struct tcf_proto *filter_chain ;
   struct list_head list ;
   struct tcf_block *block ;
   u32 index ;
   unsigned int refcnt ;
   unsigned int action_refcnt ;
   bool explicitly_created ;
   bool flushing ;
   struct tcf_proto_ops *tmplt_ops ;
   void *tmplt_priv ;
   struct callback_head rcu ;
};
#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_chain0_821 {
   struct tcf_chain *chain ;
   struct list_head filter_chain_list ;
};
#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_block {
   struct mutex lock ;
   struct list_head chain_list ;
   u32 index ;
   refcount_t refcnt ;
   struct net *net ;
   struct Qdisc *q ;
   struct rw_semaphore cb_lock ;
   struct flow_block flow_block ;
   struct list_head owner_list ;
   bool keep_dst ;
   atomic_t offloadcnt ;
   unsigned int nooffloaddevcnt ;
   unsigned int lockeddevcnt ;
   struct __anonstruct_chain0_821 chain0 ;
   struct callback_head rcu ;
   struct hlist_head proto_destroy_ht[128U] ;
   struct mutex proto_destroy_lock ;
};
#line 1269  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct mini_Qdisc {
   struct tcf_proto *filter_list ;
   struct gnet_stats_basic_cpu *cpu_bstats ;
   struct gnet_stats_queue *cpu_qstats ;
   struct callback_head rcu ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/pkt_sched.h"
struct qdisc_walker {
   int stop ;
   int skip ;
   int count ;
   int (*fn)(struct Qdisc *, unsigned long , struct qdisc_walker *) ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_counter.h"
struct page_counter {
   atomic_long_t usage ;
   unsigned long min ;
   unsigned long low ;
   unsigned long max ;
   struct page_counter *parent ;
   unsigned long emin ;
   atomic_long_t min_usage ;
   atomic_long_t children_min_usage ;
   unsigned long elow ;
   atomic_long_t low_usage ;
   atomic_long_t children_low_usage ;
   unsigned long watermark ;
   unsigned long failcnt ;
};
#line 66 
struct eventfd_ctx;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmpressure.h"
struct vmpressure {
   unsigned long scanned ;
   unsigned long reclaimed ;
   unsigned long tree_scanned ;
   unsigned long tree_reclaimed ;
   spinlock_t sr_lock ;
   struct list_head events ;
   struct mutex events_lock ;
   struct work_struct work ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
struct fprop_global {
   struct percpu_counter events ;
   unsigned int period ;
   seqcount_t sequence ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
struct fprop_local_percpu {
   struct percpu_counter events ;
   unsigned int period ;
   raw_spinlock_t lock ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
typedef int congested_fn(void *, int );
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
enum wb_reason {
    WB_REASON_BACKGROUND = 0,
    WB_REASON_VMSCAN = 1,
    WB_REASON_SYNC = 2,
    WB_REASON_PERIODIC = 3,
    WB_REASON_LAPTOP_TIMER = 4,
    WB_REASON_FREE_MORE_MEM = 5,
    WB_REASON_FS_FREE_SPACE = 6,
    WB_REASON_FORKER_THREAD = 7,
    WB_REASON_FOREIGN_FLUSH = 8,
    WB_REASON_MAX = 9
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct wb_completion {
   atomic_t cnt ;
   wait_queue_head_t *waitq ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct bdi_writeback_congested {
   unsigned long state ;
   refcount_t refcnt ;
   struct backing_dev_info *__bdi ;
   int blkcg_id ;
   struct rb_node rb_node ;
};
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
union __anonunion_834 {
   struct work_struct release_work ;
   struct callback_head rcu ;
};
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct bdi_writeback {
   struct backing_dev_info *bdi ;
   unsigned long state ;
   unsigned long last_old_flush ;
   struct list_head b_dirty ;
   struct list_head b_io ;
   struct list_head b_more_io ;
   struct list_head b_dirty_time ;
   spinlock_t list_lock ;
   struct percpu_counter stat[4U] ;
   struct bdi_writeback_congested *congested ;
   unsigned long bw_time_stamp ;
   unsigned long dirtied_stamp ;
   unsigned long written_stamp ;
   unsigned long write_bandwidth ;
   unsigned long avg_write_bandwidth ;
   unsigned long dirty_ratelimit ;
   unsigned long balanced_dirty_ratelimit ;
   struct fprop_local_percpu completions ;
   int dirty_exceeded ;
   enum wb_reason start_all_reason ;
   spinlock_t work_lock ;
   struct list_head work_list ;
   struct delayed_work dwork ;
   unsigned long dirty_sleep ;
   struct list_head bdi_node ;
   struct percpu_ref refcnt ;
   struct fprop_local_percpu memcg_completions ;
   struct cgroup_subsys_state *memcg_css ;
   struct cgroup_subsys_state *blkcg_css ;
   struct list_head memcg_node ;
   struct list_head blkcg_node ;
   union __anonunion_834 __anonCompField_bdi_writeback_169 ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct backing_dev_info {
   u64 id ;
   struct rb_node rb_node ;
   struct list_head bdi_list ;
   unsigned long ra_pages ;
   unsigned long io_pages ;
   congested_fn *congested_fn ;
   void *congested_data ;
   char *name ;
   struct kref refcnt ;
   unsigned int capabilities ;
   unsigned int min_ratio ;
   unsigned int max_ratio ;
   unsigned int max_prop_frac ;
   atomic_long_t tot_write_bandwidth ;
   struct bdi_writeback wb ;
   struct list_head wb_list ;
   struct xarray cgwb_tree ;
   struct rb_root cgwb_congested_tree ;
   struct mutex cgwb_release_mutex ;
   struct rw_semaphore wb_switch_rwsem ;
   wait_queue_head_t wb_waitq ;
   struct device *dev ;
   struct device *owner ;
   struct timer_list laptop_mode_wb_timer ;
   struct dentry *debug_dir ;
};
#line 306 
struct bio_set;
#line 307 
struct bio_integrity_payload;
#line 308  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
typedef void bio_end_io_t(struct bio *);
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
typedef u8 blk_status_t;
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct bio_issue {
   u64 value ;
};
#line 144 
struct blkcg_gq;
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
union __anonunion_835 {
   struct bio_integrity_payload *bi_integrity ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct bio {
   struct bio *bi_next ;
   struct gendisk *bi_disk ;
   unsigned int bi_opf ;
   unsigned short bi_flags ;
   unsigned short bi_ioprio ;
   unsigned short bi_write_hint ;
   blk_status_t bi_status ;
   u8 bi_partno ;
   atomic_t __bi_remaining ;
   struct bvec_iter bi_iter ;
   bio_end_io_t *bi_end_io ;
   void *bi_private ;
   struct blkcg_gq *bi_blkg ;
   struct bio_issue bi_issue ;
   u64 bi_iocost_cost ;
   union __anonunion_835 __anonCompField_bio_170 ;
   unsigned short bi_vcnt ;
   unsigned short bi_max_vecs ;
   atomic_t __bi_cnt ;
   struct bio_vec *bi_io_vec ;
   struct bio_set *bi_pool ;
   struct bio_vec bi_inline_vecs[0U] ;
};
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
typedef unsigned int blk_qc_t;
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct blk_rq_stat {
   u64 mean ;
   u64 min ;
   u64 max ;
   u32 nr_samples ;
   u64 batch ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct disk_stats {
   u64 nsecs[4U] ;
   unsigned long sectors[4U] ;
   unsigned long ios[4U] ;
   unsigned long merges[4U] ;
   unsigned long io_ticks ;
   unsigned long time_in_queue ;
   local_t in_flight[2U] ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct partition_meta_info {
   char uuid[37U] ;
   u8 volname[64U] ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct hd_struct {
   sector_t start_sect ;
   sector_t nr_sects ;
   seqcount_t nr_sects_seq ;
   sector_t alignment_offset ;
   unsigned int discard_alignment ;
   struct device __dev ;
   struct kobject *holder_dir ;
   int policy ;
   int partno ;
   struct partition_meta_info *info ;
   int make_it_fail ;
   unsigned long stamp ;
   struct disk_stats *dkstats ;
   struct percpu_ref ref ;
   struct rcu_work rcu_work ;
};
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct disk_part_tbl {
   struct callback_head callback_head ;
   int len ;
   struct hd_struct *last_lookup ;
   struct hd_struct *part[] ;
};
#line 166 
struct disk_events;
#line 167 
struct badblocks;
#line 172 
struct blk_integrity_profile;
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct blk_integrity {
   struct blk_integrity_profile *profile ;
   unsigned char flags ;
   unsigned char tuple_size ;
   unsigned char interval_exp ;
   unsigned char tag_size ;
};
#line 182 
struct timer_rand_state;
#line 182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct gendisk {
   int major ;
   int first_minor ;
   int minors ;
   char disk_name[32U] ;
   char *(*devnode)(struct gendisk *, umode_t *) ;
   unsigned short events ;
   unsigned short event_flags ;
   struct disk_part_tbl *part_tbl ;
   struct hd_struct part0 ;
   struct block_device_operations *fops ;
   struct request_queue *queue ;
   void *private_data ;
   int flags ;
   struct rw_semaphore lookup_sem ;
   struct kobject *slave_dir ;
   struct timer_rand_state *random ;
   atomic_t sync_io ;
   struct disk_events *ev ;
   struct kobject integrity_kobj ;
   int node_id ;
   struct badblocks *bb ;
   struct lockdep_map lockdep_map ;
};
#line 637  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pagemap.h"
typedef void *mempool_alloc_t(gfp_t , void *);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
typedef void mempool_free_t(void *, void *);
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
struct mempool_s {
   spinlock_t lock ;
   int min_nr ;
   int curr_nr ;
   void **elements ;
   void *pool_data ;
   mempool_alloc_t *alloc ;
   mempool_free_t *free ;
   wait_queue_head_t wait ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
typedef struct mempool_s mempool_t;
#line 307  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_integrity_payload {
   struct bio *bip_bio ;
   struct bvec_iter bip_iter ;
   unsigned short bip_slab ;
   unsigned short bip_vcnt ;
   unsigned short bip_max_vcnt ;
   unsigned short bip_flags ;
   struct bvec_iter bio_iter ;
   struct work_struct bip_work ;
   struct bio_vec *bip_vec ;
   struct bio_vec bip_inline_vecs[0U] ;
};
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_list {
   struct bio *head ;
   struct bio *tail ;
};
#line 703  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_set {
   struct kmem_cache *bio_slab ;
   unsigned int front_pad ;
   mempool_t bio_pool ;
   mempool_t bvec_pool ;
   mempool_t bio_integrity_pool ;
   mempool_t bvec_integrity_pool ;
   spinlock_t rescue_lock ;
   struct bio_list rescue_list ;
   struct work_struct rescue_work ;
   struct workqueue_struct *rescue_workqueue ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bsg.h"
struct sg_io_v4 {
   __s32 guard ;
   __u32 protocol ;
   __u32 subprotocol ;
   __u32 request_len ;
   __u64 request ;
   __u64 request_tag ;
   __u32 request_attr ;
   __u32 request_priority ;
   __u32 request_extra ;
   __u32 max_response_len ;
   __u64 response ;
   __u32 dout_iovec_count ;
   __u32 dout_xfer_len ;
   __u32 din_iovec_count ;
   __u32 din_xfer_len ;
   __u64 dout_xferp ;
   __u64 din_xferp ;
   __u32 timeout ;
   __u32 flags ;
   __u64 usr_ptr ;
   __u32 spare_in ;
   __u32 driver_status ;
   __u32 transport_status ;
   __u32 device_status ;
   __u32 retry_delay ;
   __u32 info ;
   __u32 duration ;
   __u32 response_len ;
   __s32 din_resid ;
   __s32 dout_resid ;
   __u64 generated_tag ;
   __u32 spare_out ;
   __u32 padding ;
};
#line 65 
struct request;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bsg.h"
struct bsg_ops {
   int (*check_proto)(struct sg_io_v4 *) ;
   int (*fill_hdr)(struct request *, struct sg_io_v4 *, fmode_t ) ;
   int (*complete_rq)(struct request *, struct sg_io_v4 *) ;
   void (*free_rq)(struct request *) ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bsg.h"
struct bsg_class_device {
   struct device *class_dev ;
   int minor ;
   struct request_queue *queue ;
   struct bsg_ops *ops ;
};
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/blkzoned.h"
struct blk_zone {
   __u64 start ;
   __u64 len ;
   __u64 wp ;
   __u8 type ;
   __u8 cond ;
   __u8 non_seq ;
   __u8 reset ;
   __u8 reserved[36U] ;
};
#line 134 
struct elevator_queue;
#line 135 
struct blk_trace;
#line 138 
struct blk_flush_queue;
#line 139 
struct pr_ops;
#line 140 
struct rq_qos;
#line 141 
struct blk_queue_stats;
#line 142 
struct blk_stat_callback;
#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/blkzoned.h"
typedef void rq_end_io_fn(struct request *, blk_status_t );
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef __u32 req_flags_t;
#line 67 
enum mq_rq_state {
    MQ_RQ_IDLE = 0,
    MQ_RQ_IN_FLIGHT = 1,
    MQ_RQ_COMPLETE = 2
};
#line 132 
struct blk_mq_ctx;
#line 132 
struct blk_mq_hw_ctx;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_838 {
   struct hlist_node hash ;
   struct list_head ipi_list ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_839 {
   struct rb_node rb_node ;
   struct bio_vec special_vec ;
   void *completion_data ;
   int error_count ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct __anonstruct_elv_841 {
   struct io_cq *icq ;
   void *priv[2U] ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct __anonstruct_flush_842 {
   unsigned int seq ;
   struct list_head list ;
   rq_end_io_fn *saved_end_io ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_840 {
   struct __anonstruct_elv_841 elv ;
   struct __anonstruct_flush_842 flush ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_843 {
   struct __call_single_data csd ;
   u64 fifo_time ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct request {
   struct request_queue *q ;
   struct blk_mq_ctx *mq_ctx ;
   struct blk_mq_hw_ctx *mq_hctx ;
   unsigned int cmd_flags ;
   req_flags_t rq_flags ;
   int tag ;
   int internal_tag ;
   unsigned int __data_len ;
   sector_t __sector ;
   struct bio *bio ;
   struct bio *biotail ;
   struct list_head queuelist ;
   union __anonunion_838 __anonCompField_request_171 ;
   union __anonunion_839 __anonCompField_request_172 ;
   union __anonunion_840 __anonCompField_request_173 ;
   struct gendisk *rq_disk ;
   struct hd_struct *part ;
   u64 alloc_time_ns ;
   u64 start_time_ns ;
   u64 io_start_time_ns ;
   unsigned short wbt_flags ;
   unsigned short stats_sectors ;
   unsigned short nr_phys_segments ;
   unsigned short nr_integrity_segments ;
   unsigned short write_hint ;
   unsigned short ioprio ;
   unsigned int extra_len ;
   enum mq_rq_state state ;
   refcount_t ref ;
   unsigned int timeout ;
   unsigned long deadline ;
   union __anonunion_843 __anonCompField_request_174 ;
   rq_end_io_fn *end_io ;
   void *end_io_data ;
};
#line 285 
struct elevator_type;
#line 286 
struct blk_mq_debugfs_attr;
#line 287 
enum elv_merge {
    ELEVATOR_NO_MERGE = 0,
    ELEVATOR_FRONT_MERGE = 1,
    ELEVATOR_BACK_MERGE = 2,
    ELEVATOR_DISCARD_MERGE = 3
};
#line 294 
struct blk_mq_alloc_data;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_mq_ops {
   int (*init_sched)(struct request_queue *, struct elevator_type *) ;
   void (*exit_sched)(struct elevator_queue *) ;
   int (*init_hctx)(struct blk_mq_hw_ctx *, unsigned int ) ;
   void (*exit_hctx)(struct blk_mq_hw_ctx *, unsigned int ) ;
   void (*depth_updated)(struct blk_mq_hw_ctx *) ;
   bool (*allow_merge)(struct request_queue *, struct request *, struct bio *) ;
   bool (*bio_merge)(struct blk_mq_hw_ctx *, struct bio *, unsigned int ) ;
   int (*request_merge)(struct request_queue *, struct request **, struct bio *) ;
   void (*request_merged)(struct request_queue *, struct request *, enum elv_merge ) ;
   void (*requests_merged)(struct request_queue *, struct request *, struct request *) ;
   void (*limit_depth)(unsigned int , struct blk_mq_alloc_data *) ;
   void (*prepare_request)(struct request *, struct bio *) ;
   void (*finish_request)(struct request *) ;
   void (*insert_requests)(struct blk_mq_hw_ctx *, struct list_head *, bool ) ;
   struct request *(*dispatch_request)(struct blk_mq_hw_ctx *) ;
   bool (*has_work)(struct blk_mq_hw_ctx *) ;
   void (*completed_request)(struct request *, u64 ) ;
   void (*requeue_request)(struct request *) ;
   struct request *(*former_request)(struct request_queue *, struct request *) ;
   struct request *(*next_request)(struct request_queue *, struct request *) ;
   void (*init_icq)(struct io_cq *) ;
   void (*exit_icq)(struct io_cq *) ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elv_fs_entry {
   struct attribute attr ;
   ssize_t (*show)(struct elevator_queue *, char *) ;
   ssize_t (*store)(struct elevator_queue *, char *, size_t ) ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_type {
   struct kmem_cache *icq_cache ;
   struct elevator_mq_ops ops ;
   size_t icq_size ;
   size_t icq_align ;
   struct elv_fs_entry *elevator_attrs ;
   char *elevator_name ;
   char *elevator_alias ;
   unsigned int elevator_features ;
   struct module *elevator_owner ;
   struct blk_mq_debugfs_attr *queue_debugfs_attrs ;
   struct blk_mq_debugfs_attr *hctx_debugfs_attrs ;
   char icq_cache_name[22U] ;
   struct list_head list ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_queue {
   struct elevator_type *type ;
   void *elevator_data ;
   struct kobject kobj ;
   struct mutex sysfs_lock ;
   unsigned int registered : 1 ;
   struct hlist_head hash[64U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
typedef blk_qc_t make_request_fn(struct request_queue *, struct bio *);
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef int dma_drain_needed_fn(struct request *);
#line 304 
enum blk_zoned_model {
    BLK_ZONED_NONE = 0,
    BLK_ZONED_HA = 1,
    BLK_ZONED_HM = 2
};
#line 320  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct queue_limits {
   unsigned long bounce_pfn ;
   unsigned long seg_boundary_mask ;
   unsigned long virt_boundary_mask ;
   unsigned int max_hw_sectors ;
   unsigned int max_dev_sectors ;
   unsigned int chunk_sectors ;
   unsigned int max_sectors ;
   unsigned int max_segment_size ;
   unsigned int physical_block_size ;
   unsigned int logical_block_size ;
   unsigned int alignment_offset ;
   unsigned int io_min ;
   unsigned int io_opt ;
   unsigned int max_discard_sectors ;
   unsigned int max_hw_discard_sectors ;
   unsigned int max_write_same_sectors ;
   unsigned int max_write_zeroes_sectors ;
   unsigned int discard_granularity ;
   unsigned int discard_alignment ;
   unsigned short max_segments ;
   unsigned short max_integrity_segments ;
   unsigned short max_discard_segments ;
   unsigned char misaligned ;
   unsigned char discard_misaligned ;
   unsigned char raid_partial_stripes_expensive ;
   enum blk_zoned_model zoned ;
};
#line 394 
struct blk_mq_ops;
#line 394 
struct throtl_data;
#line 394 
struct blk_mq_tag_set;
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct request_queue {
   struct request *last_merge ;
   struct elevator_queue *elevator ;
   struct blk_queue_stats *stats ;
   struct rq_qos *rq_qos ;
   make_request_fn *make_request_fn ;
   dma_drain_needed_fn *dma_drain_needed ;
   struct blk_mq_ops *mq_ops ;
   struct blk_mq_ctx *queue_ctx ;
   unsigned int queue_depth ;
   struct blk_mq_hw_ctx **queue_hw_ctx ;
   unsigned int nr_hw_queues ;
   struct backing_dev_info *backing_dev_info ;
   void *queuedata ;
   unsigned long queue_flags ;
   atomic_t pm_only ;
   int id ;
   gfp_t bounce_gfp ;
   spinlock_t queue_lock ;
   struct kobject kobj ;
   struct kobject *mq_kobj ;
   struct blk_integrity integrity ;
   struct device *dev ;
   int rpm_status ;
   unsigned int nr_pending ;
   unsigned long nr_requests ;
   unsigned int dma_drain_size ;
   void *dma_drain_buffer ;
   unsigned int dma_pad_mask ;
   unsigned int dma_alignment ;
   unsigned int rq_timeout ;
   int poll_nsec ;
   struct blk_stat_callback *poll_cb ;
   struct blk_rq_stat poll_stat[16U] ;
   struct timer_list timeout ;
   struct work_struct timeout_work ;
   struct list_head icq_list ;
   unsigned long blkcg_pols[1U] ;
   struct blkcg_gq *root_blkg ;
   struct list_head blkg_list ;
   struct queue_limits limits ;
   unsigned int required_elevator_features ;
   unsigned int nr_zones ;
   unsigned long *conv_zones_bitmap ;
   unsigned long *seq_zones_wlock ;
   unsigned int sg_timeout ;
   unsigned int sg_reserved_size ;
   int node ;
   struct blk_trace *blk_trace ;
   struct mutex blk_trace_mutex ;
   struct blk_flush_queue *fq ;
   struct list_head requeue_list ;
   spinlock_t requeue_lock ;
   struct delayed_work requeue_work ;
   struct mutex sysfs_lock ;
   struct mutex sysfs_dir_lock ;
   struct list_head unused_hctx_list ;
   spinlock_t unused_hctx_lock ;
   int mq_freeze_depth ;
   struct bsg_class_device bsg_dev ;
   struct throtl_data *td ;
   struct callback_head callback_head ;
   wait_queue_head_t mq_freeze_wq ;
   struct mutex mq_freeze_lock ;
   struct percpu_ref q_usage_counter ;
   struct blk_mq_tag_set *tag_set ;
   struct list_head tag_set_list ;
   struct bio_set bio_split ;
   struct dentry *debugfs_dir ;
   struct dentry *sched_debugfs_dir ;
   struct dentry *rqos_debugfs_dir ;
   bool mq_sysfs_init_done ;
   size_t cmd_size ;
   struct work_struct release_work ;
   u64 write_hints[5U] ;
};
#line 1160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_plug {
   struct list_head mq_list ;
   struct list_head cb_list ;
   unsigned short rq_count ;
   bool multiple_queues ;
};
#line 1514  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_integrity_iter {
   void *prot_buf ;
   void *data_buf ;
   sector_t seed ;
   unsigned int data_size ;
   unsigned short interval ;
   char *disk_name ;
};
#line 1522  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef blk_status_t integrity_processing_fn(struct blk_integrity_iter *);
#line 1524  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef void integrity_prepare_fn(struct request *);
#line 1525  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef void integrity_complete_fn(struct request *, unsigned int );
#line 1527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_integrity_profile {
   integrity_processing_fn *generate_fn ;
   integrity_processing_fn *verify_fn ;
   integrity_prepare_fn *prepare_fn ;
   integrity_complete_fn *complete_fn ;
   char *name ;
};
#line 1693  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct block_device_operations {
   int (*open)(struct block_device *, fmode_t ) ;
   void (*release)(struct gendisk *, fmode_t ) ;
   int (*rw_page)(struct block_device *, sector_t , struct page *, unsigned int ) ;
   int (*ioctl)(struct block_device *, fmode_t , unsigned int , unsigned long ) ;
   int (*compat_ioctl)(struct block_device *, fmode_t , unsigned int , unsigned long ) ;
   unsigned int (*check_events)(struct gendisk *, unsigned int ) ;
   int (*media_changed)(struct gendisk *) ;
   void (*unlock_native_capacity)(struct gendisk *) ;
   int (*revalidate_disk)(struct gendisk *) ;
   int (*getgeo)(struct block_device *, struct hd_geometry *) ;
   void (*swap_slot_free_notify)(struct block_device *, unsigned long ) ;
   int (*report_zones)(struct gendisk *, sector_t , unsigned int , int (*)(struct blk_zone *, unsigned int , void *), void *) ;
   struct module *owner ;
   struct pr_ops *pr_ops ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_policy_data;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg {
   struct cgroup_subsys_state css ;
   spinlock_t lock ;
   struct xarray blkg_tree ;
   struct blkcg_gq *blkg_hint ;
   struct hlist_head blkg_list ;
   struct blkcg_policy_data *cpd[5U] ;
   struct list_head all_blkcgs_node ;
   struct list_head cgwb_list ;
   refcount_t cgwb_refcnt ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_iostat {
   u64 bytes[3U] ;
   u64 ios[3U] ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_iostat_set {
   struct u64_stats_sync sync ;
   struct blkg_iostat cur ;
   struct blkg_iostat last ;
};
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_policy_data {
   struct blkcg_gq *blkg ;
   int plid ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_policy_data {
   struct blkcg *blkcg ;
   int plid ;
};
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_gq {
   struct request_queue *q ;
   struct list_head q_node ;
   struct hlist_node blkcg_node ;
   struct blkcg *blkcg ;
   struct bdi_writeback_congested *wb_congested ;
   struct blkcg_gq *parent ;
   struct percpu_ref refcnt ;
   bool online ;
   struct blkg_iostat_set *iostat_cpu ;
   struct blkg_iostat_set iostat ;
   struct blkg_policy_data *pd[5U] ;
   spinlock_t async_bio_lock ;
   struct bio_list async_bios ;
   struct work_struct async_bio_work ;
   atomic_t use_delay ;
   atomic64_t delay_nsec ;
   atomic64_t delay_start ;
   u64 last_delay ;
   int last_use ;
   struct callback_head callback_head ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
enum writeback_sync_modes {
    WB_SYNC_NONE = 0,
    WB_SYNC_ALL = 1
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
struct writeback_control {
   long nr_to_write ;
   long pages_skipped ;
   loff_t range_start ;
   loff_t range_end ;
   enum writeback_sync_modes sync_mode ;
   unsigned int for_kupdate : 1 ;
   unsigned int for_background : 1 ;
   unsigned int tagged_writepages : 1 ;
   unsigned int for_reclaim : 1 ;
   unsigned int range_cyclic : 1 ;
   unsigned int for_sync : 1 ;
   unsigned int no_cgroup_owner : 1 ;
   unsigned int punt_to_cgroup : 1 ;
   struct bdi_writeback *wb ;
   struct inode *inode ;
   int wb_id ;
   int wb_lcand_id ;
   int wb_tcand_id ;
   size_t wb_bytes ;
   size_t wb_lcand_bytes ;
   size_t wb_tcand_bytes ;
};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
struct wb_domain {
   spinlock_t lock ;
   struct fprop_global completions ;
   struct timer_list period_timer ;
   unsigned long period_time ;
   unsigned long dirty_limit_tstamp ;
   unsigned long dirty_limit ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_id {
   int id ;
   refcount_t ref ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_vmstats_percpu {
   long stat[38U] ;
   unsigned long events[91U] ;
   unsigned long nr_page_events ;
   unsigned long targets[2U] ;
};
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_reclaim_iter {
   struct mem_cgroup *position ;
   unsigned int generation ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct lruvec_stat {
   long count[32U] ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_shrinker_map {
   struct callback_head rcu ;
   unsigned long map[0U] ;
};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_per_node {
   struct lruvec lruvec ;
   struct lruvec_stat *lruvec_stat_local ;
   struct lruvec_stat *lruvec_stat_cpu ;
   atomic_long_t lruvec_stat[32U] ;
   unsigned long lru_zone_size[5U][5U] ;
   struct mem_cgroup_reclaim_iter iter ;
   struct memcg_shrinker_map *shrinker_map ;
   struct rb_node tree_node ;
   unsigned long usage_in_excess ;
   bool on_tree ;
   struct mem_cgroup *memcg ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_threshold {
   struct eventfd_ctx *eventfd ;
   unsigned long threshold ;
};
#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_threshold_ary {
   int current_threshold ;
   unsigned int size ;
   struct mem_cgroup_threshold entries[0U] ;
};
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_thresholds {
   struct mem_cgroup_threshold_ary *primary ;
   struct mem_cgroup_threshold_ary *spare ;
};
#line 164 
enum memcg_kmem_state {
    KMEM_NONE = 0,
    KMEM_ALLOCATED = 1,
    KMEM_ONLINE = 2
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_padding {
   char x[0U] ;
} __attribute__((__aligned__(4096)));
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_cgwb_frn {
   u64 bdi_id ;
   int memcg_id ;
   u64 at ;
   struct wb_completion done ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup {
   struct cgroup_subsys_state css ;
   struct mem_cgroup_id id ;
   struct page_counter memory ;
   struct page_counter swap ;
   struct page_counter memsw ;
   struct page_counter kmem ;
   struct page_counter tcpmem ;
   unsigned long high ;
   struct work_struct high_work ;
   unsigned long soft_limit ;
   struct vmpressure vmpressure ;
   bool use_hierarchy ;
   bool oom_group ;
   bool oom_lock ;
   int under_oom ;
   int swappiness ;
   int oom_kill_disable ;
   struct cgroup_file events_file ;
   struct cgroup_file events_local_file ;
   struct cgroup_file swap_events_file ;
   struct mutex thresholds_lock ;
   struct mem_cgroup_thresholds thresholds ;
   struct mem_cgroup_thresholds memsw_thresholds ;
   struct list_head oom_notify ;
   unsigned long move_charge_at_immigrate ;
   spinlock_t move_lock ;
   unsigned long move_lock_flags ;
   struct memcg_padding _pad1_ ;
   atomic_t moving_account ;
   struct task_struct *move_lock_task ;
   struct memcg_vmstats_percpu *vmstats_local ;
   struct memcg_vmstats_percpu *vmstats_percpu ;
   struct memcg_padding _pad2_ ;
   atomic_long_t vmstats[38U] ;
   atomic_long_t vmevents[91U] ;
   atomic_long_t memory_events[7U] ;
   atomic_long_t memory_events_local[7U] ;
   unsigned long socket_pressure ;
   bool tcpmem_active ;
   int tcpmem_pressure ;
   int kmemcg_id ;
   enum memcg_kmem_state kmem_state ;
   struct list_head kmem_caches ;
   struct list_head cgwb_list ;
   struct wb_domain cgwb_domain ;
   struct memcg_cgwb_frn cgwb_frn[4U] ;
   struct list_head event_list ;
   spinlock_t event_list_lock ;
   struct deferred_split deferred_split_queue ;
   struct mem_cgroup_per_node *nodeinfo[0U] ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/vdso.h"
struct vdso_image {
   void *data ;
   unsigned long size ;
   unsigned long alt ;
   unsigned long alt_len ;
   long sym_vvar_start ;
   long sym_vvar_page ;
   long sym_pvclock_page ;
   long sym_hvclock_page ;
   long sym_VDSO32_NOTE_MASK ;
   long sym___kernel_sigreturn ;
   long sym___kernel_rt_sigreturn ;
   long sym___kernel_vsyscall ;
   long sym_int80_landing_pad ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u16 Elf64_Half;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Off;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u32 Elf64_Word;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_hdr {
   unsigned char e_ident[16U] ;
   Elf64_Half e_type ;
   Elf64_Half e_machine ;
   Elf64_Word e_version ;
   Elf64_Addr e_entry ;
   Elf64_Off e_phoff ;
   Elf64_Off e_shoff ;
   Elf64_Word e_flags ;
   Elf64_Half e_ehsize ;
   Elf64_Half e_phentsize ;
   Elf64_Half e_phnum ;
   Elf64_Half e_shentsize ;
   Elf64_Half e_shnum ;
   Elf64_Half e_shstrndx ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_hdr Elf64_Ehdr;
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_shdr {
   Elf64_Word sh_name ;
   Elf64_Word sh_type ;
   Elf64_Xword sh_flags ;
   Elf64_Addr sh_addr ;
   Elf64_Off sh_offset ;
   Elf64_Xword sh_size ;
   Elf64_Word sh_link ;
   Elf64_Word sh_info ;
   Elf64_Xword sh_addralign ;
   Elf64_Xword sh_entsize ;
};
#line 328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_shdr Elf64_Shdr;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elf.h"
struct kernel_param;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param_ops {
   unsigned int flags ;
   int (*set)(char *, struct kernel_param *) ;
   int (*get)(char *, struct kernel_param *) ;
   void (*free)(void *) ;
};
#line 69 
struct kparam_string;
#line 69 
struct kparam_array;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
union __anonunion_862 {
   void *arg ;
   struct kparam_string *str ;
   struct kparam_array *arr ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param {
   char *name ;
   struct module *mod ;
   struct kernel_param_ops *ops ;
   u16 perm ;
   s8 level ;
   u8 flags ;
   union __anonunion_862 __anonCompField_kernel_param_175 ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int elemsize ;
   unsigned int *num ;
   struct kernel_param_ops *ops ;
   void *elem ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/error-injection.h"
struct error_injection_entry {
   unsigned long addr ;
   int etype ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/module.h"
struct mod_arch_specific {
   unsigned int num_orcs ;
   int *orc_unwind_ip ;
   struct orc_entry *orc_unwind ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_param_attrs;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
   struct completion *kobj_completion ;
} __attribute__((__designated_init__));
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute *, struct module_kobject *, char *) ;
   ssize_t (*store)(struct module_attribute *, struct module_kobject *, char *, size_t ) ;
   void (*setup)(struct module *, char *) ;
   int (*test)(struct module *) ;
   void (*free)(struct module *) ;
};
#line 297 
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2,
    MODULE_STATE_UNFORMED = 3
};
#line 305  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_tree_node {
   struct module *mod ;
   struct latch_tree_node node ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_layout {
   void *base ;
   unsigned int size ;
   unsigned int text_size ;
   unsigned int ro_size ;
   unsigned int ro_after_init_size ;
   struct mod_tree_node mtn ;
};
#line 334  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_kallsyms {
   Elf64_Sym *symtab ;
   unsigned int num_symtab ;
   char *strtab ;
   char *typetab ;
};
#line 342  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct klp_modinfo {
   Elf64_Ehdr hdr ;
   Elf64_Shdr *sechdrs ;
   char *secstrings ;
   unsigned int symndx ;
};
#line 350 
struct module_sect_attrs;
#line 350 
struct module_notes_attrs;
#line 350 
struct trace_event_call;
#line 350 
struct trace_eval_map;
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char *version ;
   char *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol *syms ;
   s32 *crcs ;
   unsigned int num_syms ;
   struct mutex param_lock ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol *gpl_syms ;
   s32 *gpl_crcs ;
   struct kernel_symbol *unused_syms ;
   s32 *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol *unused_gpl_syms ;
   s32 *unused_gpl_crcs ;
   bool sig_ok ;
   bool async_probe_requested ;
   struct kernel_symbol *gpl_future_syms ;
   s32 *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   struct module_layout core_layout ;
   struct module_layout init_layout ;
   struct mod_arch_specific arch ;
   unsigned long taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   struct mod_kallsyms *kallsyms ;
   struct mod_kallsyms core_kallsyms ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   char *args ;
   void *percpu ;
   unsigned int percpu_size ;
   unsigned int num_tracepoints ;
   tracepoint_ptr_t *tracepoints_ptrs ;
   unsigned int num_srcu_structs ;
   struct srcu_struct **srcu_struct_ptrs ;
   unsigned int num_bpf_raw_events ;
   struct bpf_raw_event_map *bpf_raw_events ;
   struct jump_entry *jump_entries ;
   unsigned int num_jump_entries ;
   unsigned int num_trace_bprintk_fmt ;
   char **trace_bprintk_fmt_start ;
   struct trace_event_call **trace_events ;
   unsigned int num_trace_events ;
   struct trace_eval_map **trace_evals ;
   unsigned int num_trace_evals ;
   unsigned int num_ftrace_callsites ;
   unsigned long *ftrace_callsites ;
   bool klp ;
   bool klp_alive ;
   struct klp_modinfo *klp_info ;
   struct list_head source_list ;
   struct list_head target_list ;
   void (*exit)(void) ;
   atomic_t refcnt ;
   ctor_fn_t *ctors ;
   unsigned int num_ctors ;
   struct error_injection_entry *ei_funcs ;
   unsigned int num_ei_funcs ;
} __attribute__((__designated_init__, __aligned__(64)));
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/filter.h"
struct sock_filter {
   __u16 code ;
   __u8 jt ;
   __u8 jf ;
   __u32 k ;
};
#line 35 
struct sock_reuseport;
#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct sock_fprog_kern {
   u16 len ;
   struct sock_filter *filter ;
};
#line 526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
union __anonunion_863 {
   struct sock_filter insns[0U] ;
   struct bpf_insn insnsi[0U] ;
};
#line 526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct bpf_prog {
   u16 pages ;
   u16 jited : 1 ;
   u16 jit_requested : 1 ;
   u16 gpl_compatible : 1 ;
   u16 cb_access : 1 ;
   u16 dst_needed : 1 ;
   u16 blinded : 1 ;
   u16 is_func : 1 ;
   u16 kprobe_override : 1 ;
   u16 has_callchain_buf : 1 ;
   u16 enforce_expected_attach_type : 1 ;
   enum bpf_prog_type type ;
   enum bpf_attach_type expected_attach_type ;
   u32 len ;
   u32 jited_len ;
   u8 tag[8U] ;
   struct bpf_prog_aux *aux ;
   struct sock_fprog_kern *orig_prog ;
   unsigned int (*bpf_func)(void *, struct bpf_insn *) ;
   union __anonunion_863 __anonCompField_bpf_prog_176 ;
};
#line 554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct sk_filter {
   refcount_t refcnt ;
   struct callback_head rcu ;
   struct bpf_prog *prog ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/poll.h"
struct pollfd {
   int fd ;
   short events ;
   short revents ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/poll.h"
struct poll_table_struct {
   void (*_qproc)(struct file *, wait_queue_head_t *, struct poll_table_struct *) ;
   __poll_t _key ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_table;
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_parms {
   possible_net_t net ;
   struct net_device *dev ;
   struct list_head list ;
   int (*neigh_setup)(struct neighbour *) ;
   struct neigh_table *tbl ;
   void *sysctl_table ;
   int dead ;
   refcount_t refcnt ;
   struct callback_head callback_head ;
   int reachable_time ;
   int data[13U] ;
   unsigned long data_state[1U] ;
};
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_statistics {
   unsigned long allocs ;
   unsigned long destroys ;
   unsigned long hash_grows ;
   unsigned long res_failed ;
   unsigned long lookups ;
   unsigned long hits ;
   unsigned long rcv_probes_mcast ;
   unsigned long rcv_probes_ucast ;
   unsigned long periodic_gc_runs ;
   unsigned long forced_gc_runs ;
   unsigned long unres_discards ;
   unsigned long table_fulls ;
};
#line 134 
struct neigh_ops;
#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neighbour {
   struct neighbour *next ;
   struct neigh_table *tbl ;
   struct neigh_parms *parms ;
   unsigned long confirmed ;
   unsigned long updated ;
   rwlock_t lock ;
   refcount_t refcnt ;
   unsigned int arp_queue_len_bytes ;
   struct sk_buff_head arp_queue ;
   struct timer_list timer ;
   unsigned long used ;
   atomic_t probes ;
   __u8 flags ;
   __u8 nud_state ;
   __u8 type ;
   __u8 dead ;
   u8 protocol ;
   seqlock_t ha_lock ;
   unsigned char ha[32U] ;
   struct hh_cache hh ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   struct neigh_ops *ops ;
   struct list_head gc_list ;
   struct callback_head rcu ;
   struct net_device *dev ;
   u8 primary_key[0U] ;
} __attribute__((__designated_init__));
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_ops {
   int family ;
   void (*solicit)(struct neighbour *, struct sk_buff *) ;
   void (*error_report)(struct neighbour *, struct sk_buff *) ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   int (*connected_output)(struct neighbour *, struct sk_buff *) ;
};
#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct pneigh_entry {
   struct pneigh_entry *next ;
   possible_net_t net ;
   struct net_device *dev ;
   u8 flags ;
   u8 protocol ;
   u8 key[0U] ;
};
#line 186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_hash_table {
   struct neighbour **hash_buckets ;
   unsigned int hash_shift ;
   __u32 hash_rnd[4U] ;
   struct callback_head rcu ;
};
#line 194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_table {
   int family ;
   unsigned int entry_size ;
   unsigned int key_len ;
   __be16 protocol ;
   __u32 (*hash)(void *, struct net_device *, __u32 *) ;
   bool (*key_eq)(struct neighbour *, void *) ;
   int (*constructor)(struct neighbour *) ;
   int (*pconstructor)(struct pneigh_entry *) ;
   void (*pdestructor)(struct pneigh_entry *) ;
   void (*proxy_redo)(struct sk_buff *) ;
   bool (*allow_add)(struct net_device *, struct netlink_ext_ack *) ;
   char *id ;
   struct neigh_parms parms ;
   struct list_head parms_list ;
   int gc_interval ;
   int gc_thresh1 ;
   int gc_thresh2 ;
   int gc_thresh3 ;
   unsigned long last_flush ;
   struct delayed_work gc_work ;
   struct timer_list proxy_timer ;
   struct sk_buff_head proxy_queue ;
   atomic_t entries ;
   atomic_t gc_entries ;
   struct list_head gc_list ;
   rwlock_t lock ;
   unsigned long last_rand ;
   struct neigh_statistics *stats ;
   struct neigh_hash_table *nht ;
   struct pneigh_entry **phash_buckets ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst.h"
struct lwtunnel_state;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst.h"
struct dst_entry {
   struct net_device *dev ;
   struct dst_ops *ops ;
   unsigned long _metrics ;
   unsigned long expires ;
   struct xfrm_state *xfrm ;
   int (*input)(struct sk_buff *) ;
   int (*output)(struct net *, struct sock *, struct sk_buff *) ;
   unsigned short flags ;
   short obsolete ;
   unsigned short header_len ;
   unsigned short trailer_len ;
   atomic_t __refcnt ;
   int __use ;
   unsigned long lastuse ;
   struct lwtunnel_state *lwtstate ;
   struct callback_head callback_head ;
   short error ;
   short __pad ;
   __u32 tclassid ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fib_rules.h"
struct fib_rule_hdr {
   __u8 family ;
   __u8 dst_len ;
   __u8 src_len ;
   __u8 tos ;
   __u8 table ;
   __u8 res1 ;
   __u8 res2 ;
   __u8 action ;
   __u32 flags ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fib_rules.h"
struct fib_rule_port_range {
   __u16 start ;
   __u16 end ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_notifier.h"
struct fib_notifier_ops {
   int family ;
   struct list_head list ;
   unsigned int (*fib_seq_read)(struct net *) ;
   int (*fib_dump)(struct net *, struct notifier_block *, struct netlink_ext_ack *) ;
   struct module *owner ;
   struct callback_head rcu ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_kuid_range {
   kuid_t start ;
   kuid_t end ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_rule {
   struct list_head list ;
   int iifindex ;
   int oifindex ;
   u32 mark ;
   u32 mark_mask ;
   u32 flags ;
   u32 table ;
   u8 action ;
   u8 l3mdev ;
   u8 proto ;
   u8 ip_proto ;
   u32 target ;
   __be64 tun_id ;
   struct fib_rule *ctarget ;
   struct net *fr_net ;
   refcount_t refcnt ;
   u32 pref ;
   int suppress_ifgroup ;
   int suppress_prefixlen ;
   char iifname[16U] ;
   char oifname[16U] ;
   struct fib_kuid_range uid_range ;
   struct fib_rule_port_range sport_range ;
   struct fib_rule_port_range dport_range ;
   struct callback_head rcu ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_lookup_arg {
   void *lookup_ptr ;
   void *lookup_data ;
   void *result ;
   struct fib_rule *rule ;
   u32 table ;
   int flags ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_rules_ops {
   int family ;
   struct list_head list ;
   int rule_size ;
   int addr_size ;
   int unresolved_rules ;
   int nr_goto_rules ;
   unsigned int fib_rules_seq ;
   int (*action)(struct fib_rule *, struct flowi *, int , struct fib_lookup_arg *) ;
   bool (*suppress)(struct fib_rule *, struct fib_lookup_arg *) ;
   int (*match)(struct fib_rule *, struct flowi *, int ) ;
   int (*configure)(struct fib_rule *, struct sk_buff *, struct fib_rule_hdr *, struct nlattr **, struct netlink_ext_ack *) ;
   int (*delete)(struct fib_rule *) ;
   int (*compare)(struct fib_rule *, struct fib_rule_hdr *, struct nlattr **) ;
   int (*fill)(struct fib_rule *, struct sk_buff *, struct fib_rule_hdr *) ;
   size_t (*nlmsg_payload)(struct fib_rule *) ;
   void (*flush_cache)(struct fib_rules_ops *) ;
   int nlgroup ;
   struct nla_policy *policy ;
   struct list_head rules_list ;
   struct module *owner ;
   struct net *fro_net ;
   struct callback_head rcu ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
struct l3mdev_ops {
   u32 (*l3mdev_fib_table)(struct net_device *) ;
   struct sk_buff *(*l3mdev_l3_rcv)(struct net_device *, struct sk_buff *, u16 ) ;
   struct sk_buff *(*l3mdev_l3_out)(struct net_device *, struct sock *, struct sk_buff *, u16 ) ;
   struct dst_entry *(*l3mdev_link_scope_lookup)(struct net_device *, struct flowi6 *) ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
struct __anonstruct_socket_lock_t_885 {
   spinlock_t slock ;
   int owned ;
   wait_queue_head_t wq ;
   struct lockdep_map dep_map ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
typedef struct __anonstruct_socket_lock_t_885 socket_lock_t;
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct proto;
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
typedef __u32 __portpair;
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
typedef __u64 __addrpair;
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_887 {
   __be32 skc_daddr ;
   __be32 skc_rcv_saddr ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_886 {
   __addrpair skc_addrpair ;
   struct __anonstruct_887 __anonCompField___anonunion_886_178 ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_888 {
   unsigned int skc_hash ;
   __u16 skc_u16hashes[2U] ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_890 {
   __be16 skc_dport ;
   __u16 skc_num ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_889 {
   __portpair skc_portpair ;
   struct __anonstruct_890 __anonCompField___anonunion_889_181 ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_891 {
   struct hlist_node skc_bind_node ;
   struct hlist_node skc_portaddr_node ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_892 {
   unsigned long skc_flags ;
   struct sock *skc_listener ;
   struct inet_timewait_death_row *skc_tw_dr ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_893 {
   struct hlist_node skc_node ;
   struct hlist_nulls_node skc_nulls_node ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_894 {
   int skc_incoming_cpu ;
   u32 skc_rcv_wnd ;
   u32 skc_tw_rcv_nxt ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_895 {
   u32 skc_rxhash ;
   u32 skc_window_clamp ;
   u32 skc_tw_snd_nxt ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct sock_common {
   union __anonunion_886 __anonCompField_sock_common_179 ;
   union __anonunion_888 __anonCompField_sock_common_180 ;
   union __anonunion_889 __anonCompField_sock_common_182 ;
   unsigned short skc_family ;
   unsigned char skc_state ;
   unsigned char skc_reuse : 4 ;
   unsigned char skc_reuseport : 1 ;
   unsigned char skc_ipv6only : 1 ;
   unsigned char skc_net_refcnt : 1 ;
   int skc_bound_dev_if ;
   union __anonunion_891 __anonCompField_sock_common_183 ;
   struct proto *skc_prot ;
   possible_net_t skc_net ;
   struct in6_addr skc_v6_daddr ;
   struct in6_addr skc_v6_rcv_saddr ;
   atomic64_t skc_cookie ;
   union __anonunion_892 __anonCompField_sock_common_184 ;
   int skc_dontcopy_begin[0U] ;
   union __anonunion_893 __anonCompField_sock_common_185 ;
   unsigned short skc_tx_queue_mapping ;
   unsigned short skc_rx_queue_mapping ;
   union __anonunion_894 __anonCompField_sock_common_186 ;
   refcount_t skc_refcnt ;
   int skc_dontcopy_end[0U] ;
   union __anonunion_895 __anonCompField_sock_common_187 ;
};
#line 231 
struct bpf_sk_storage;
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_sk_backlog_896 {
   atomic_t rmem_alloc ;
   int len ;
   struct sk_buff *head ;
   struct sk_buff *tail ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_897 {
   struct socket_wq *sk_wq ;
   struct socket_wq *sk_wq_raw ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_898 {
   struct sk_buff *sk_send_head ;
   struct rb_root tcp_rtx_queue ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct sock {
   struct sock_common __sk_common ;
   socket_lock_t sk_lock ;
   atomic_t sk_drops ;
   int sk_rcvlowat ;
   struct sk_buff_head sk_error_queue ;
   struct sk_buff *sk_rx_skb_cache ;
   struct sk_buff_head sk_receive_queue ;
   struct __anonstruct_sk_backlog_896 sk_backlog ;
   int sk_forward_alloc ;
   unsigned int sk_ll_usec ;
   unsigned int sk_napi_id ;
   int sk_rcvbuf ;
   struct sk_filter *sk_filter ;
   union __anonunion_897 __anonCompField_sock_188 ;
   struct xfrm_policy *sk_policy[2U] ;
   struct dst_entry *sk_rx_dst ;
   struct dst_entry *sk_dst_cache ;
   atomic_t sk_omem_alloc ;
   int sk_sndbuf ;
   int sk_wmem_queued ;
   refcount_t sk_wmem_alloc ;
   unsigned long sk_tsq_flags ;
   union __anonunion_898 __anonCompField_sock_189 ;
   struct sk_buff *sk_tx_skb_cache ;
   struct sk_buff_head sk_write_queue ;
   __s32 sk_peek_off ;
   int sk_write_pending ;
   __u32 sk_dst_pending_confirm ;
   u32 sk_pacing_status ;
   long sk_sndtimeo ;
   struct timer_list sk_timer ;
   __u32 sk_priority ;
   __u32 sk_mark ;
   unsigned long sk_pacing_rate ;
   unsigned long sk_max_pacing_rate ;
   struct page_frag sk_frag ;
   netdev_features_t sk_route_caps ;
   netdev_features_t sk_route_nocaps ;
   netdev_features_t sk_route_forced_caps ;
   int sk_gso_type ;
   unsigned int sk_gso_max_size ;
   gfp_t sk_allocation ;
   __u32 sk_txhash ;
   unsigned int __sk_flags_offset[0U] ;
   unsigned int sk_padding : 1 ;
   unsigned int sk_kern_sock : 1 ;
   unsigned int sk_no_check_tx : 1 ;
   unsigned int sk_no_check_rx : 1 ;
   unsigned int sk_userlocks : 4 ;
   unsigned int sk_protocol : 8 ;
   unsigned int sk_type : 16 ;
   u16 sk_gso_max_segs ;
   u8 sk_pacing_shift ;
   unsigned long sk_lingertime ;
   struct proto *sk_prot_creator ;
   rwlock_t sk_callback_lock ;
   int sk_err ;
   int sk_err_soft ;
   u32 sk_ack_backlog ;
   u32 sk_max_ack_backlog ;
   kuid_t sk_uid ;
   struct pid *sk_peer_pid ;
   struct cred *sk_peer_cred ;
   long sk_rcvtimeo ;
   ktime_t sk_stamp ;
   u16 sk_tsflags ;
   u8 sk_shutdown ;
   u32 sk_tskey ;
   atomic_t sk_zckey ;
   u8 sk_clockid ;
   u8 sk_txtime_deadline_mode : 1 ;
   u8 sk_txtime_report_errors : 1 ;
   u8 sk_txtime_unused : 6 ;
   struct socket *sk_socket ;
   void *sk_user_data ;
   void *sk_security ;
   struct sock_cgroup_data sk_cgrp_data ;
   struct mem_cgroup *sk_memcg ;
   void (*sk_state_change)(struct sock *) ;
   void (*sk_data_ready)(struct sock *) ;
   void (*sk_write_space)(struct sock *) ;
   void (*sk_error_report)(struct sock *) ;
   int (*sk_backlog_rcv)(struct sock *, struct sk_buff *) ;
   struct sk_buff *(*sk_validate_xmit_skb)(struct sock *, struct net_device *, struct sk_buff *) ;
   void (*sk_destruct)(struct sock *) ;
   struct sock_reuseport *sk_reuseport_cb ;
   struct bpf_sk_storage *sk_bpf_storage ;
   struct callback_head sk_rcu ;
};
#line 1048 
struct request_sock_ops;
#line 1049 
struct timewait_sock_ops;
#line 1050 
struct raw_hashinfo;
#line 1051 
struct smc_hashinfo;
#line 1071 
struct udp_table;
#line 1071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_h_933 {
   struct inet_hashinfo *hashinfo ;
   struct udp_table *udp_table ;
   struct raw_hashinfo *raw_hash ;
   struct smc_hashinfo *smc_hash ;
};
#line 1071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct proto {
   void (*close)(struct sock *, long ) ;
   int (*pre_connect)(struct sock *, struct sockaddr *, int ) ;
   int (*connect)(struct sock *, struct sockaddr *, int ) ;
   int (*disconnect)(struct sock *, int ) ;
   struct sock *(*accept)(struct sock *, int , int *, bool ) ;
   int (*ioctl)(struct sock *, int , unsigned long ) ;
   int (*init)(struct sock *) ;
   void (*destroy)(struct sock *) ;
   void (*shutdown)(struct sock *, int ) ;
   int (*setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct sock *, int , int , char *, int *) ;
   void (*keepalive)(struct sock *, int ) ;
   int (*compat_setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct sock *, int , int , char *, int *) ;
   int (*compat_ioctl)(struct sock *, unsigned int , unsigned long ) ;
   int (*sendmsg)(struct sock *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct sock *, struct msghdr *, size_t , int , int , int *) ;
   int (*sendpage)(struct sock *, struct page *, int , size_t , int ) ;
   int (*bind)(struct sock *, struct sockaddr *, int ) ;
   int (*backlog_rcv)(struct sock *, struct sk_buff *) ;
   void (*release_cb)(struct sock *) ;
   int (*hash)(struct sock *) ;
   void (*unhash)(struct sock *) ;
   void (*rehash)(struct sock *) ;
   int (*get_port)(struct sock *, unsigned short ) ;
   unsigned int inuse_idx ;
   bool (*stream_memory_free)(struct sock *, int ) ;
   bool (*stream_memory_read)(struct sock *) ;
   void (*enter_memory_pressure)(struct sock *) ;
   void (*leave_memory_pressure)(struct sock *) ;
   atomic_long_t *memory_allocated ;
   struct percpu_counter *sockets_allocated ;
   unsigned long *memory_pressure ;
   long *sysctl_mem ;
   int *sysctl_wmem ;
   int *sysctl_rmem ;
   u32 sysctl_wmem_offset ;
   u32 sysctl_rmem_offset ;
   int max_header ;
   bool no_autobind ;
   struct kmem_cache *slab ;
   unsigned int obj_size ;
   slab_flags_t slab_flags ;
   unsigned int useroffset ;
   unsigned int usersize ;
   struct percpu_counter *orphan_count ;
   struct request_sock_ops *rsk_prot ;
   struct timewait_sock_ops *twsk_prot ;
   union __anonunion_h_933 h ;
   struct module *owner ;
   char name[32U] ;
   struct list_head node ;
   int (*diag_destroy)(struct sock *, int ) ;
} __attribute__((__designated_init__));
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/request_sock.h"
struct request_sock_ops {
   int family ;
   unsigned int obj_size ;
   struct kmem_cache *slab ;
   char *slab_name ;
   int (*rtx_syn_ack)(struct sock *, struct request_sock *) ;
   void (*send_ack)(struct sock *, struct sk_buff *, struct request_sock *) ;
   void (*send_reset)(struct sock *, struct sk_buff *) ;
   void (*destructor)(struct request_sock *) ;
   void (*syn_ack_timeout)(struct request_sock *) ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/request_sock.h"
struct request_sock {
   struct sock_common __req_common ;
   struct request_sock *dl_next ;
   u16 mss ;
   u8 num_retrans ;
   u8 cookie_ts : 1 ;
   u8 num_timeout : 7 ;
   u32 ts_recent ;
   struct timer_list rsk_timer ;
   struct request_sock_ops *rsk_ops ;
   struct sock *sk ;
   u32 *saved_syn ;
   u32 secid ;
   u32 peer_secid ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
struct ipv6_stable_secret {
   bool initialized ;
   struct in6_addr secret ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
struct ipv6_devconf {
   __s32 forwarding ;
   __s32 hop_limit ;
   __s32 mtu6 ;
   __s32 accept_ra ;
   __s32 accept_redirects ;
   __s32 autoconf ;
   __s32 dad_transmits ;
   __s32 rtr_solicits ;
   __s32 rtr_solicit_interval ;
   __s32 rtr_solicit_max_interval ;
   __s32 rtr_solicit_delay ;
   __s32 force_mld_version ;
   __s32 mldv1_unsolicited_report_interval ;
   __s32 mldv2_unsolicited_report_interval ;
   __s32 use_tempaddr ;
   __s32 temp_valid_lft ;
   __s32 temp_prefered_lft ;
   __s32 regen_max_retry ;
   __s32 max_desync_factor ;
   __s32 max_addresses ;
   __s32 accept_ra_defrtr ;
   __s32 accept_ra_min_hop_limit ;
   __s32 accept_ra_pinfo ;
   __s32 ignore_routes_with_linkdown ;
   __s32 accept_ra_rtr_pref ;
   __s32 rtr_probe_interval ;
   __s32 accept_ra_rt_info_min_plen ;
   __s32 accept_ra_rt_info_max_plen ;
   __s32 proxy_ndp ;
   __s32 accept_source_route ;
   __s32 accept_ra_from_local ;
   __s32 optimistic_dad ;
   __s32 use_optimistic ;
   __s32 mc_forwarding ;
   __s32 disable_ipv6 ;
   __s32 drop_unicast_in_l2_multicast ;
   __s32 accept_dad ;
   __s32 force_tllao ;
   __s32 ndisc_notify ;
   __s32 suppress_frag_ndisc ;
   __s32 accept_ra_mtu ;
   __s32 drop_unsolicited_na ;
   struct ipv6_stable_secret stable_secret ;
   __s32 use_oif_addrs_only ;
   __s32 keep_addr_on_down ;
   __s32 seg6_enabled ;
   __s32 seg6_require_hmac ;
   __u32 enhanced_dad ;
   __u32 addr_gen_mode ;
   __s32 disable_policy ;
   __s32 ndisc_tclass ;
   struct ctl_table_header *sysctl_header ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/timewait_sock.h"
struct timewait_sock_ops {
   struct kmem_cache *twsk_slab ;
   char *twsk_slab_name ;
   unsigned int twsk_obj_size ;
   int (*twsk_unique)(struct sock *, struct sock *, void *) ;
   void (*twsk_destructor)(struct sock *) ;
};
#line 225  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_chanctx_conf {
   struct cfg80211_chan_def def ;
   struct cfg80211_chan_def min_def ;
   u8 rx_chains_static ;
   u8 rx_chains_dynamic ;
   bool radar_enabled ;
   u8 drv_priv[0U] ;
};
#line 267 
struct ieee80211_vif;
#line 440 
struct ieee80211_sta;
#line 471  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_mu_group_data {
   u8 membership[8U] ;
   u8 position[16U] ;
};
#line 484  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_ftm_responder_params {
   u8 *lci ;
   u8 *civicloc ;
   size_t lci_len ;
   size_t civicloc_len ;
};
#line 608  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_bss_conf {
   u8 *bssid ;
   u8 bss_color ;
   u8 htc_trig_based_pkt_ext ;
   bool multi_sta_back_32bit ;
   bool uora_exists ;
   bool ack_enabled ;
   u8 uora_ocw_range ;
   u16 frame_time_rts_th ;
   bool he_support ;
   bool twt_requester ;
   bool twt_responder ;
   bool assoc ;
   bool ibss_joined ;
   bool ibss_creator ;
   u16 aid ;
   bool use_cts_prot ;
   bool use_short_preamble ;
   bool use_short_slot ;
   bool enable_beacon ;
   u8 dtim_period ;
   u16 beacon_int ;
   u16 assoc_capability ;
   u64 sync_tsf ;
   u32 sync_device_ts ;
   u8 sync_dtim_count ;
   u32 basic_rates ;
   struct ieee80211_rate *beacon_rate ;
   int mcast_rate[4U] ;
   u16 ht_operation_mode ;
   s32 cqm_rssi_thold ;
   u32 cqm_rssi_hyst ;
   s32 cqm_rssi_low ;
   s32 cqm_rssi_high ;
   struct cfg80211_chan_def chandef ;
   struct ieee80211_mu_group_data mu_group ;
   __be32 arp_addr_list[4U] ;
   int arp_addr_cnt ;
   bool qos ;
   bool idle ;
   bool ps ;
   u8 ssid[32U] ;
   size_t ssid_len ;
   bool hidden_ssid ;
   int txpower ;
   enum nl80211_tx_power_setting txpower_type ;
   struct ieee80211_p2p_noa_attr p2p_noa_attr ;
   bool allow_p2p_go_ps ;
   u16 max_idle_period ;
   bool protected_keep_alive ;
   bool ftm_responder ;
   struct ieee80211_ftm_responder_params *ftmr_params ;
   bool nontransmitted ;
   u8 transmitter_bssid[6U] ;
   u8 bssid_index ;
   u8 bssid_indicator ;
   bool ema_ap ;
   u8 profile_periodicity ;
   struct ieee80211_he_operation he_operation ;
   struct ieee80211_he_obss_pd he_obss_pd ;
};
#line 1004 
struct ieee80211_key_conf;
#line 1106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_scan_ies {
   u8 *ies[4U] ;
   size_t len[4U] ;
   u8 *common_ies ;
   size_t common_ie_len ;
};
#line 1430 
enum ieee80211_smps_mode {
    IEEE80211_SMPS_AUTOMATIC = 0,
    IEEE80211_SMPS_OFF = 1,
    IEEE80211_SMPS_STATIC = 2,
    IEEE80211_SMPS_DYNAMIC = 3,
    IEEE80211_SMPS_NUM_MODES = 4
};
#line 1522  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_conf {
   u32 flags ;
   int power_level ;
   int dynamic_ps_timeout ;
   u16 listen_interval ;
   u8 ps_dtim_period ;
   u8 long_frame_max_tx_count ;
   u8 short_frame_max_tx_count ;
   struct cfg80211_chan_def chandef ;
   bool radar_enabled ;
   enum ieee80211_smps_mode smps_mode ;
};
#line 1556  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_channel_switch {
   u64 timestamp ;
   u32 device_timestamp ;
   bool block_tx ;
   struct cfg80211_chan_def chandef ;
   u8 count ;
   u32 delay ;
};
#line 1627 
struct ieee80211_txq;
#line 1627  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_vif {
   enum nl80211_iftype type ;
   struct ieee80211_bss_conf bss_conf ;
   u8 addr[6U] ;
   bool p2p ;
   bool csa_active ;
   bool mu_mimo_owner ;
   u8 cab_queue ;
   u8 hw_queue[4U] ;
   struct ieee80211_txq *txq ;
   struct ieee80211_chanctx_conf *chanctx_conf ;
   u32 driver_flags ;
   struct dentry *debugfs_dir ;
   unsigned int probe_req_reg ;
   bool txqs_stopped[4U] ;
   u8 drv_priv[0U] ;
};
#line 1772  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_key_conf {
   atomic64_t tx_pn ;
   u32 cipher ;
   u8 icv_len ;
   u8 iv_len ;
   u8 hw_key_idx ;
   s8 keyidx ;
   u16 flags ;
   u8 keylen ;
   u8 key[0U] ;
};
#line 1846  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_cipher_scheme {
   u32 cipher ;
   u16 iftype ;
   u8 hdr_len ;
   u8 pn_len ;
   u8 pn_off ;
   u8 key_idx_off ;
   u8 key_idx_mask ;
   u8 key_idx_shift ;
   u8 mic_len ;
};
#line 1857 
enum set_key_cmd {
    SET_KEY = 0,
    DISABLE_KEY = 1
};
#line 1870 
enum ieee80211_sta_rx_bandwidth {
    IEEE80211_STA_RX_BW_20 = 0,
    IEEE80211_STA_RX_BW_40 = 1,
    IEEE80211_STA_RX_BW_80 = 2,
    IEEE80211_STA_RX_BW_160 = 3
};
#line 1915  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct __anonstruct_rate_1020 {
   s8 idx ;
   u8 count ;
   u8 count_cts ;
   u8 count_rts ;
   u16 flags ;
};
#line 1915  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_sta_rates {
   struct callback_head callback_head ;
   struct __anonstruct_rate_1020 rate[4U] ;
};
#line 1939  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_sta_txpwr {
   s16 power ;
   enum nl80211_tx_power_setting type ;
};
#line 1991  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_sta {
   u32 supp_rates[4U] ;
   u8 addr[6U] ;
   u16 aid ;
   struct ieee80211_sta_ht_cap ht_cap ;
   struct ieee80211_sta_vht_cap vht_cap ;
   struct ieee80211_sta_he_cap he_cap ;
   u16 max_rx_aggregation_subframes ;
   bool wme ;
   u8 uapsd_queues ;
   u8 max_sp ;
   u8 rx_nss ;
   enum ieee80211_sta_rx_bandwidth bandwidth ;
   enum ieee80211_smps_mode smps_mode ;
   struct ieee80211_sta_rates *rates ;
   bool tdls ;
   bool tdls_initiator ;
   bool mfp ;
   u8 max_amsdu_subframes ;
   u16 max_amsdu_len ;
   bool support_p2p_ps ;
   u16 max_rc_amsdu_len ;
   u16 max_tid_amsdu_len[16U] ;
   struct ieee80211_sta_txpwr txpwr ;
   struct ieee80211_txq *txq[17U] ;
   u8 drv_priv[0U] ;
};
#line 2074  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_txq {
   struct ieee80211_vif *vif ;
   struct ieee80211_sta *sta ;
   u8 tid ;
   u8 ac ;
   u8 drv_priv[0U] ;
};
#line 2487  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct __anonstruct_radiotap_timestamp_1021 {
   int units_pos ;
   s16 accuracy ;
};
#line 2487  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_hw {
   struct ieee80211_conf conf ;
   struct wiphy *wiphy ;
   char *rate_control_algorithm ;
   void *priv ;
   unsigned long flags[1U] ;
   unsigned int extra_tx_headroom ;
   unsigned int extra_beacon_tailroom ;
   int vif_data_size ;
   int sta_data_size ;
   int chanctx_data_size ;
   int txq_data_size ;
   u16 queues ;
   u16 max_listen_interval ;
   s8 max_signal ;
   u8 max_rates ;
   u8 max_report_rates ;
   u8 max_rate_tries ;
   u16 max_rx_aggregation_subframes ;
   u16 max_tx_aggregation_subframes ;
   u8 max_tx_fragments ;
   u8 offchannel_tx_hw_queue ;
   u8 radiotap_mcs_details ;
   u16 radiotap_vht_details ;
   struct __anonstruct_radiotap_timestamp_1021 radiotap_timestamp ;
   netdev_features_t netdev_features ;
   u8 uapsd_queues ;
   u8 uapsd_max_sp_len ;
   u8 n_cipher_schemes ;
   struct ieee80211_cipher_scheme *cipher_schemes ;
   u8 max_nan_de_entries ;
   u8 tx_sk_pacing_shift ;
   u8 weight_multiplier ;
   u32 max_mtu ;
};
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/conf.h"
struct conf_sg_settings {
   u32 params[67U] ;
   u8 state ;
} __attribute__((__packed__));
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/conf.h"
struct conf_rx_settings {
   u32 rx_msdu_life_time ;
   u32 packet_detection_threshold ;
   u16 ps_poll_timeout ;
   u16 upsd_timeout ;
   u16 rts_threshold ;
   u16 rx_cca_threshold ;
   u16 irq_blk_threshold ;
   u16 irq_pkt_threshold ;
   u16 irq_timeout ;
   u8 queue_type ;
} __attribute__((__packed__));
#line 247  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/conf.h"
struct conf_tx_rate_class {
   u32 enabled_rates ;
   u8 short_retry_limit ;
   u8 long_retry_limit ;
   u8 aflags ;
} __attribute__((__packed__));
#line 307  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/conf.h"
struct conf_tx_ac_category {
   u8 ac ;
   u8 cw_min ;
   u16 cw_max ;
   u8 aifsn ;
   u16 tx_op_limit ;
} __attribute__((__packed__));
#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/conf.h"
struct conf_tx_tid {
   u8 queue_id ;
   u8 channel_type ;
   u8 tsid ;
   u8 ps_scheme ;
   u8 ack_policy ;
   u32 apsd_conf[2U] ;
} __attribute__((__packed__));
#line 380  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/conf.h"
struct conf_tx_settings {
   u8 tx_energy_detection ;
   struct conf_tx_rate_class sta_rc_conf ;
   u8 ac_conf_count ;
   struct conf_tx_ac_category ac_conf[4U] ;
   u8 max_tx_retries ;
   u16 ap_aging_period ;
   u8 tid_conf_count ;
   struct conf_tx_tid tid_conf[8U] ;
   u16 frag_threshold ;
   u16 tx_compl_timeout ;
   u16 tx_compl_threshold ;
   u32 basic_rate ;
   u32 basic_rate_5 ;
   u8 tmpl_short_retry_limit ;
   u8 tmpl_long_retry_limit ;
   u32 tx_watchdog_timeout ;
   u8 slow_link_thold ;
   u8 fast_link_thold ;
} __attribute__((__packed__));
#line 494  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/conf.h"
struct conf_bcn_filt_rule {
   u8 ie ;
   u8 rule ;
   u8 oui[3U] ;
   u8 type ;
   u8 version[2U] ;
} __attribute__((__packed__));
#line 545  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/conf.h"
struct conf_sig_weights {
   u8 rssi_bcn_avg_weight ;
   u8 rssi_pkt_avg_weight ;
   u8 snr_bcn_avg_weight ;
   u8 snr_pkt_avg_weight ;
} __attribute__((__packed__));
#line 586  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/conf.h"
struct conf_conn_settings {
   u8 wake_up_event ;
   u8 listen_interval ;
   u8 suspend_wake_up_event ;
   u8 suspend_listen_interval ;
   u8 bcn_filt_mode ;
   u8 bcn_filt_ie_count ;
   struct conf_bcn_filt_rule bcn_filt_ie[32U] ;
   u32 synch_fail_thold ;
   u32 bss_lose_timeout ;
   u32 beacon_rx_timeout ;
   u32 broadcast_timeout ;
   u8 rx_broadcast_in_ps ;
   u8 ps_poll_threshold ;
   struct conf_sig_weights sig_weights ;
   u8 bet_enable ;
   u8 bet_max_consecutive ;
   u8 psm_entry_retries ;
   u8 psm_exit_retries ;
   u8 psm_entry_nullfunc_retries ;
   u16 dynamic_ps_timeout ;
   u8 forced_ps ;
   u32 keep_alive_interval ;
   u8 max_listen_interval ;
   u8 sta_sleep_auth ;
   u8 suspend_rx_ba_activity ;
} __attribute__((__packed__));
#line 782  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/conf.h"
struct conf_itrim_settings {
   u8 enable ;
   u32 timeout ;
} __attribute__((__packed__));
#line 795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/conf.h"
struct conf_pm_config_settings {
   u32 host_clk_settling_time ;
   u8 host_fast_wakeup_support ;
} __attribute__((__packed__));
#line 811  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/conf.h"
struct conf_roam_trigger_settings {
   u16 trigger_pacing ;
   u8 avg_weight_rssi_beacon ;
   u8 avg_weight_rssi_data ;
   u8 avg_weight_snr_beacon ;
   u8 avg_weight_snr_data ;
} __attribute__((__packed__));
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/conf.h"
struct conf_scan_settings {
   u32 min_dwell_time_active ;
   u32 max_dwell_time_active ;
   u32 min_dwell_time_active_long ;
   u32 max_dwell_time_active_long ;
   u32 dwell_time_passive ;
   u32 dwell_time_dfs ;
   u16 num_probe_reqs ;
   u32 split_scan_timeout ;
} __attribute__((__packed__));
#line 908  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/conf.h"
struct conf_sched_scan_settings {
   u32 base_dwell_time ;
   u32 max_dwell_time_delta ;
   u32 dwell_time_delta_per_probe ;
   u32 dwell_time_delta_per_probe_5 ;
   u32 dwell_time_passive ;
   u32 dwell_time_dfs ;
   u8 num_probe_reqs ;
   s8 rssi_threshold ;
   s8 snr_threshold ;
   u8 num_short_intervals ;
   u16 long_interval ;
} __attribute__((__packed__));
#line 955  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/conf.h"
struct conf_ht_setting {
   u8 rx_ba_win_size ;
   u8 tx_ba_win_size ;
   u16 inactivity_timeout ;
   u8 tx_ba_tid_bitmap ;
} __attribute__((__packed__));
#line 964  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/conf.h"
struct conf_memory_settings {
   u8 num_stations ;
   u8 ssid_profiles ;
   u8 rx_block_num ;
   u8 tx_min_block_num ;
   u8 dynamic_memory ;
   u8 min_req_tx_blocks ;
   u8 min_req_rx_blocks ;
   u8 tx_min ;
} __attribute__((__packed__));
#line 1004  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/conf.h"
struct conf_fm_coex {
   u8 enable ;
   u8 swallow_period ;
   u8 n_divider_fref_set_1 ;
   u8 n_divider_fref_set_2 ;
   u16 m_divider_fref_set_1 ;
   u16 m_divider_fref_set_2 ;
   u32 coex_pll_stabilization_time ;
   u16 ldo_stabilization_time ;
   u8 fm_disturbed_band_margin ;
   u8 swallow_clk_diff ;
} __attribute__((__packed__));
#line 1017  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/conf.h"
struct conf_rx_streaming_settings {
   u32 duration ;
   u8 queues ;
   u8 interval ;
   u8 always ;
} __attribute__((__packed__));
#line 1049  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/conf.h"
struct conf_fwlog {
   u8 mode ;
   u8 mem_blocks ;
   u8 severity ;
   u8 timestamp ;
   u8 output ;
   u8 threshold ;
} __attribute__((__packed__));
#line 1074  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/conf.h"
struct conf_rate_policy_settings {
   u16 rate_retry_score ;
   u16 per_add ;
   u16 per_th1 ;
   u16 per_th2 ;
   u16 max_per ;
   u8 inverse_curiosity_factor ;
   u8 tx_fail_low_th ;
   u8 tx_fail_high_th ;
   u8 per_alpha_shift ;
   u8 per_add_shift ;
   u8 per_beta1_shift ;
   u8 per_beta2_shift ;
   u8 rate_check_up ;
   u8 rate_check_down ;
   u8 rate_retry_policy[13U] ;
} __attribute__((__packed__));
#line 1092  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/conf.h"
struct conf_hangover_settings {
   u32 recover_time ;
   u8 hangover_period ;
   u8 dynamic_mode ;
   u8 early_termination_mode ;
   u8 max_period ;
   u8 min_period ;
   u8 increase_delta ;
   u8 decrease_delta ;
   u8 quiet_time ;
   u8 increase_time ;
   u8 window_size ;
} __attribute__((__packed__));
#line 1106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/conf.h"
struct conf_recovery_settings {
   u8 bug_on_recovery ;
   u8 no_recovery ;
} __attribute__((__packed__));
#line 1130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/conf.h"
struct wlcore_conf {
   struct conf_sg_settings sg ;
   struct conf_rx_settings rx ;
   struct conf_tx_settings tx ;
   struct conf_conn_settings conn ;
   struct conf_itrim_settings itrim ;
   struct conf_pm_config_settings pm_config ;
   struct conf_roam_trigger_settings roam_trigger ;
   struct conf_scan_settings scan ;
   struct conf_sched_scan_settings sched_scan ;
   struct conf_ht_setting ht ;
   struct conf_memory_settings mem ;
   struct conf_fm_coex fm_coex ;
   struct conf_rx_streaming_settings rx_streaming ;
   struct conf_fwlog fwlog ;
   struct conf_rate_policy_settings rate ;
   struct conf_hangover_settings hangover ;
   struct conf_recovery_settings recovery ;
} __attribute__((__packed__));
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/wlcore_i.h"
enum wlcore_state {
    WLCORE_STATE_OFF = 0,
    WLCORE_STATE_RESTARTING = 1,
    WLCORE_STATE_ON = 2
};
#line 35 
enum wl12xx_fw_type {
    WL12XX_FW_TYPE_NONE = 0,
    WL12XX_FW_TYPE_NORMAL = 1,
    WL12XX_FW_TYPE_MULTI = 2,
    WL12XX_FW_TYPE_PLT = 3
};
#line 42 
struct wl1271;
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/wlcore_i.h"
struct wl1271_chip {
   u32 id ;
   char fw_ver_str[32U] ;
   unsigned int fw_ver[5U] ;
   char phy_fw_ver_str[32U] ;
};
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/wlcore_i.h"
struct __anonstruct_counters_1027 {
   u8 *tx_released_pkts ;
   u8 *tx_lnk_free_pkts ;
   u8 tx_voice_released_blks ;
   u8 tx_last_rate ;
   u8 tx_last_rate_mbps ;
   u8 hlid ;
};
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/wlcore_i.h"
struct wl_fw_status {
   u32 intr ;
   u8 fw_rx_counter ;
   u8 drv_rx_counter ;
   u8 tx_results_counter ;
   __le32 *rx_pkt_descs ;
   u32 fw_localtime ;
   u32 link_ps_bitmap ;
   u32 link_fast_bitmap ;
   u32 total_released_blks ;
   u32 tx_total ;
   struct __anonstruct_counters_1027 counters ;
   u32 log_start_addr ;
   void *priv ;
};
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/wlcore_i.h"
struct wl1271_scan {
   struct cfg80211_scan_request *req ;
   unsigned long scanned_ch[1U] ;
   bool failed ;
   u8 state ;
   u8 ssid[33U] ;
   size_t ssid_len ;
};
#line 183  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/wlcore_i.h"
struct wl1271_if_operations {
   int (*read)(struct device *, int , void *, size_t , bool ) ;
   int (*write)(struct device *, int , void *, size_t , bool ) ;
   void (*reset)(struct device *) ;
   void (*init)(struct device *) ;
   int (*power)(struct device *, bool ) ;
   void (*set_block_size)(struct device *, unsigned int ) ;
};
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/wlcore_i.h"
struct wl1271_ap_key {
   u8 id ;
   u8 key_type ;
   u8 key_size ;
   u8 key[32U] ;
   u8 hlid ;
   u32 tx_seq_32 ;
   u16 tx_seq_16 ;
};
#line 251 
struct wl12xx_vif;
#line 254  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/wlcore_i.h"
struct wl1271_link {
   struct sk_buff_head tx_queue[4U] ;
   u8 allocated_pkts ;
   u8 prev_freed_pkts ;
   u8 addr[6U] ;
   u8 ba_bitmap ;
   u8 fw_rate_idx ;
   u8 fw_rate_mbps ;
   struct wl12xx_vif *wlvif ;
   u64 total_freed_pkts ;
};
#line 289 
enum plt_mode {
    PLT_OFF = 0,
    PLT_ON = 1,
    PLT_FEM_DETECT = 2,
    PLT_CHIP_AWAKE = 3
};
#line 337  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/wlcore_i.h"
struct __anonstruct_sta_1029 {
   u8 hlid ;
   u8 basic_rate_idx ;
   u8 ap_rate_idx ;
   u8 p2p_rate_idx ;
   u8 klv_template_id ;
   bool qos ;
   enum nl80211_channel_type role_chan_type ;
};
#line 337  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/wlcore_i.h"
struct __anonstruct_ap_1030 {
   u8 global_hlid ;
   u8 bcast_hlid ;
   unsigned long sta_hlid_map[1U] ;
   struct wl1271_ap_key *recorded_keys[14U] ;
   u8 mgmt_rate_idx ;
   u8 bcast_rate_idx ;
   u8 ucast_rate_idx[4U] ;
};
#line 337  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/wlcore_i.h"
union __anonunion_1028 {
   struct __anonstruct_sta_1029 sta ;
   struct __anonstruct_ap_1030 ap ;
};
#line 337  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/wlcore_i.h"
struct __anonstruct_1031 {
   u8 persistent[0U] ;
};
#line 337  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/wlcore_i.h"
struct wl12xx_vif {
   struct wl1271 *wl ;
   struct list_head list ;
   unsigned long flags ;
   u8 bss_type ;
   u8 p2p ;
   u8 role_id ;
   u8 dev_role_id ;
   u8 dev_hlid ;
   union __anonunion_1028 __anonCompField_wl12xx_vif_197 ;
   int last_tx_hlid ;
   int tx_queue_count[4U] ;
   unsigned long links_map[1U] ;
   u8 ssid[33U] ;
   u8 ssid_len ;
   enum nl80211_band band ;
   int channel ;
   enum nl80211_channel_type channel_type ;
   u32 bitrate_masks[2U] ;
   u32 basic_rate_set ;
   u32 basic_rate ;
   u32 rate_set ;
   struct sk_buff *probereq ;
   u32 beacon_int ;
   u32 default_key ;
   u16 aid ;
   u8 psm_entry_retry ;
   int power_level ;
   int rssi_thold ;
   int last_rssi_event ;
   u8 encryption_type ;
   __be32 ip_addr ;
   bool ba_support ;
   bool ba_allowed ;
   bool wmm_enabled ;
   bool radar_enabled ;
   struct work_struct rx_streaming_enable_work ;
   struct work_struct rx_streaming_disable_work ;
   struct timer_list rx_streaming_timer ;
   struct delayed_work channel_switch_work ;
   struct delayed_work connection_loss_work ;
   int inconn_count ;
   int hw_queue_base ;
   bool ap_pending_auth_reply ;
   unsigned long pending_auth_reply_time ;
   struct delayed_work pending_auth_complete_work ;
   enum ieee80211_sta_rx_bandwidth rc_update_bw ;
   struct ieee80211_sta_ht_cap rc_ht_cap ;
   struct work_struct rc_update_work ;
   u64 total_freed_pkts ;
   struct __anonstruct_1031 __anonCompField_wl12xx_vif_198 ;
};
#line 549 
enum wlcore_wait_event {
    WLCORE_EVENT_ROLE_STOP_COMPLETE = 0,
    WLCORE_EVENT_PEER_REMOVE_COMPLETE = 1,
    WLCORE_EVENT_DFS_CONFIG_COMPLETE = 2
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/boot.h"
struct wl1271_static_data {
   u8 mac_address[6U] ;
   u8 padding[2U] ;
   u8 fw_version[20U] ;
   u32 hw_version ;
   u8 tx_power_table[8U][4U] ;
   u8 priv[0U] ;
};
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/wlcore.h"
struct wlcore_ops {
   int (*setup)(struct wl1271 *) ;
   int (*identify_chip)(struct wl1271 *) ;
   int (*identify_fw)(struct wl1271 *) ;
   int (*boot)(struct wl1271 *) ;
   int (*plt_init)(struct wl1271 *) ;
   int (*trigger_cmd)(struct wl1271 *, int , void *, size_t ) ;
   int (*ack_event)(struct wl1271 *) ;
   int (*wait_for_event)(struct wl1271 *, enum wlcore_wait_event , bool *) ;
   int (*process_mailbox_events)(struct wl1271 *) ;
   u32 (*calc_tx_blocks)(struct wl1271 *, u32 , u32 ) ;
   void (*set_tx_desc_blocks)(struct wl1271 *, struct wl1271_tx_hw_descr *, u32 , u32 ) ;
   void (*set_tx_desc_data_len)(struct wl1271 *, struct wl1271_tx_hw_descr *, struct sk_buff *) ;
   int (*get_rx_buf_align)(struct wl1271 *, u32 ) ;
   int (*prepare_read)(struct wl1271 *, u32 , u32 ) ;
   u32 (*get_rx_packet_len)(struct wl1271 *, void *, u32 ) ;
   int (*tx_delayed_compl)(struct wl1271 *) ;
   void (*tx_immediate_compl)(struct wl1271 *) ;
   int (*hw_init)(struct wl1271 *) ;
   int (*init_vif)(struct wl1271 *, struct wl12xx_vif *) ;
   void (*convert_fw_status)(struct wl1271 *, void *, struct wl_fw_status *) ;
   u32 (*sta_get_ap_rate_mask)(struct wl1271 *, struct wl12xx_vif *) ;
   int (*get_pg_ver)(struct wl1271 *, s8 *) ;
   int (*get_mac)(struct wl1271 *) ;
   void (*set_tx_desc_csum)(struct wl1271 *, struct wl1271_tx_hw_descr *, struct sk_buff *) ;
   void (*set_rx_csum)(struct wl1271 *, struct wl1271_rx_descriptor *, struct sk_buff *) ;
   u32 (*ap_get_mimo_wide_rate_mask)(struct wl1271 *, struct wl12xx_vif *) ;
   int (*debugfs_init)(struct wl1271 *, struct dentry *) ;
   int (*handle_static_data)(struct wl1271 *, struct wl1271_static_data *) ;
   int (*scan_start)(struct wl1271 *, struct wl12xx_vif *, struct cfg80211_scan_request *) ;
   int (*scan_stop)(struct wl1271 *, struct wl12xx_vif *) ;
   int (*sched_scan_start)(struct wl1271 *, struct wl12xx_vif *, struct cfg80211_sched_scan_request *, struct ieee80211_scan_ies *) ;
   void (*sched_scan_stop)(struct wl1271 *, struct wl12xx_vif *) ;
   int (*get_spare_blocks)(struct wl1271 *, bool ) ;
   int (*set_key)(struct wl1271 *, enum set_key_cmd , struct ieee80211_vif *, struct ieee80211_sta *, struct ieee80211_key_conf *) ;
   int (*channel_switch)(struct wl1271 *, struct wl12xx_vif *, struct ieee80211_channel_switch *) ;
   u32 (*pre_pkt_send)(struct wl1271 *, u32 , u32 ) ;
   void (*sta_rc_update)(struct wl1271 *, struct wl12xx_vif *) ;
   int (*set_peer_cap)(struct wl1271 *, struct ieee80211_sta_ht_cap *, bool , u32 , u8 ) ;
   u32 (*convert_hwaddr)(struct wl1271 *, u32 ) ;
   bool (*lnk_high_prio)(struct wl1271 *, u8 , struct wl1271_link *) ;
   bool (*lnk_low_prio)(struct wl1271 *, u8 , struct wl1271_link *) ;
   int (*interrupt_notify)(struct wl1271 *, bool ) ;
   int (*rx_ba_filter)(struct wl1271 *, bool ) ;
   int (*ap_sleep)(struct wl1271 *) ;
   int (*smart_config_start)(struct wl1271 *, u32 ) ;
   int (*smart_config_stop)(struct wl1271 *) ;
   int (*smart_config_set_group_key)(struct wl1271 *, u16 , u8 , u8 *) ;
   int (*set_cac)(struct wl1271 *, struct wl12xx_vif *, bool ) ;
   int (*dfs_master_restart)(struct wl1271 *, struct wl12xx_vif *) ;
};
#line 131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/wlcore.h"
struct wlcore_partition {
   u32 size ;
   u32 start ;
};
#line 136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/wlcore.h"
struct wlcore_partition_set {
   struct wlcore_partition mem ;
   struct wlcore_partition reg ;
   struct wlcore_partition mem2 ;
   struct wlcore_partition mem3 ;
};
#line 166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/wlcore.h"
struct wl1271_stats {
   void *fw_stats ;
   unsigned long fw_stats_update ;
   size_t fw_stats_len ;
   unsigned int retry_count ;
   unsigned int excessive_retries ;
};
#line 175  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/wlcore.h"
struct wl1271 {
   bool initialized ;
   struct ieee80211_hw *hw ;
   bool mac80211_registered ;
   struct device *dev ;
   struct platform_device *pdev ;
   void *if_priv ;
   struct wl1271_if_operations *if_ops ;
   int irq ;
   int wakeirq ;
   int irq_flags ;
   int wakeirq_flags ;
   spinlock_t wl_lock ;
   enum wlcore_state state ;
   enum wl12xx_fw_type fw_type ;
   bool plt ;
   enum plt_mode plt_mode ;
   u8 fem_manuf ;
   u8 last_vif_count ;
   struct mutex mutex ;
   unsigned long flags ;
   struct wlcore_partition_set curr_part ;
   struct wl1271_chip chip ;
   int cmd_box_addr ;
   u8 *fw ;
   size_t fw_len ;
   void *nvs ;
   size_t nvs_len ;
   s8 hw_pg_ver ;
   u32 fuse_oui_addr ;
   u32 fuse_nic_addr ;
   struct mac_address addresses[3U] ;
   int channel ;
   u8 system_hlid ;
   unsigned long links_map[1U] ;
   unsigned long roles_map[1U] ;
   unsigned long roc_map[1U] ;
   unsigned long rate_policies_map[1U] ;
   unsigned long klv_templates_map[1U] ;
   u8 session_ids[16U] ;
   struct list_head wlvif_list ;
   u8 sta_count ;
   u8 ap_count ;
   struct wl1271_acx_mem_map *target_mem_map ;
   u32 tx_blocks_freed ;
   u32 tx_blocks_available ;
   u32 tx_allocated_blocks ;
   u32 tx_results_count ;
   u32 tx_pkts_freed[4U] ;
   u32 tx_allocated_pkts[4U] ;
   u32 tx_packets_count ;
   s64 time_offset ;
   int tx_queue_count[4U] ;
   unsigned long queue_stop_reasons[12U] ;
   struct sk_buff_head deferred_rx_queue ;
   struct sk_buff_head deferred_tx_queue ;
   struct work_struct tx_work ;
   struct workqueue_struct *freezable_wq ;
   unsigned long tx_frames_map[1U] ;
   struct sk_buff *tx_frames[32U] ;
   int tx_frames_cnt ;
   u32 rx_counter ;
   u8 *aggr_buf ;
   u32 aggr_buf_size ;
   struct sk_buff *dummy_packet ;
   struct work_struct netstack_work ;
   u8 *fwlog ;
   ssize_t fwlog_size ;
   u32 fwlog_end ;
   u32 fw_mem_block_size ;
   struct work_struct recovery_work ;
   bool watchdog_recovery ;
   unsigned long reg_ch_conf_last[1U] ;
   unsigned long reg_ch_conf_pending[1U] ;
   void *mbox ;
   u32 event_mask ;
   u32 ap_event_mask ;
   u32 mbox_size ;
   u32 mbox_ptr[2U] ;
   struct wl12xx_vif *scan_wlvif ;
   struct wl1271_scan scan ;
   struct delayed_work scan_complete_work ;
   struct ieee80211_vif *roc_vif ;
   struct delayed_work roc_complete_work ;
   struct wl12xx_vif *sched_vif ;
   enum nl80211_band band ;
   struct completion *elp_compl ;
   int power_level ;
   struct wl1271_stats stats ;
   __le32 *buffer_32 ;
   u32 buffer_cmd ;
   u32 buffer_busyword[1U] ;
   void *raw_fw_status ;
   struct wl_fw_status *fw_status ;
   struct wl1271_tx_hw_res_if *tx_res_if ;
   struct wlcore_conf conf ;
   bool sg_enabled ;
   bool enable_11a ;
   int recovery_count ;
   s8 noise ;
   struct ieee80211_supported_band bands[2U] ;
   bool wow_enabled ;
   bool irq_wake_enabled ;
   struct wl1271_link links[16U] ;
   int active_link_count ;
   unsigned long fw_fast_lnk_map ;
   unsigned long ap_fw_ps_map ;
   unsigned long ap_ps_map ;
   unsigned int quirks ;
   int ba_rx_session_count ;
   int ba_rx_session_count_max ;
   int active_sta_count ;
   bool ofdm_only_ap ;
   struct wl12xx_vif *last_wlvif ;
   struct delayed_work tx_watchdog_work ;
   struct wlcore_ops *ops ;
   struct wlcore_partition_set *ptable ;
   int *rtable ;
   char *plt_fw_name ;
   char *sr_fw_name ;
   char *mr_fw_name ;
   u8 scan_templ_id_2_4 ;
   u8 scan_templ_id_5 ;
   u8 sched_scan_templ_id_2_4 ;
   u8 sched_scan_templ_id_5 ;
   u8 max_channels_5 ;
   void *priv ;
   u32 num_tx_desc ;
   u32 num_rx_desc ;
   u8 num_links ;
   u8 max_ap_stations ;
   u8 **band_rate_to_idx ;
   u8 hw_tx_rate_tbl_size ;
   u8 hw_min_ht_rate ;
   struct ieee80211_sta_ht_cap ht_cap[2U] ;
   enum nl80211_dfs_regions dfs_region ;
   bool radar_debug_mode ;
   size_t fw_status_len ;
   size_t fw_status_priv_len ;
   unsigned long rx_filter_enabled[1U] ;
   size_t static_data_priv_len ;
   enum nl80211_channel_type channel_type ;
   struct mutex flush_mutex ;
   int sleep_auth ;
   int num_mac_addr ;
   unsigned int min_sr_fw_ver[5U] ;
   unsigned int min_mr_fw_ver[5U] ;
   struct completion nvs_loading_complete ;
   struct ieee80211_iface_combination *iface_combinations ;
   u8 n_iface_combinations ;
   u32 dynamic_fw_traces ;
   u8 zone_master_mac_addr[6U] ;
};
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key_true {
   struct static_key key ;
};
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key_false {
   struct static_key key ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
union __anonunion_key_1040 {
   struct static_key_true dd_key_true ;
   struct static_key_false dd_key_false ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
struct _ddebug {
   char *modname ;
   char *function ;
   char *filename ;
   char *format ;
   unsigned int lineno : 18 ;
   unsigned int flags : 8 ;
   union __anonunion_key_1040 key ;
} __attribute__((__aligned__(8)));
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 208  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/cmd.h"
struct wl1271_cmd_header {
   __le16 id ;
   __le16 status ;
   u8 data[0U] ;
} __attribute__((__packed__));
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/scan.h"
struct conn_scan_ch_params {
   __le16 min_duration ;
   __le16 max_duration ;
   __le16 passive_duration ;
   u8 channel ;
   u8 tx_power_att ;
   u8 flags ;
   u8 padding[3U] ;
} __attribute__((__packed__));
#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/scan.h"
struct wlcore_scan_channels {
   u8 passive[3U] ;
   u8 active[3U] ;
   u8 dfs ;
   u8 passive_active ;
   struct conn_scan_ch_params channels_2[14U] ;
   struct conn_scan_ch_params channels_5[42U] ;
   struct conn_scan_ch_params channels_4[4U] ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/scan.h"
struct tracking_ch_params {
   struct conn_scan_ch_params channel ;
   __le32 bssid_lsb ;
   __le16 bssid_msb ;
   u8 padding[2U] ;
} __attribute__((__packed__));
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/scan.h"
struct __anonstruct_2069 {
   struct conn_scan_ch_params channels_2[14U] ;
   struct conn_scan_ch_params channels_5[32U] ;
   struct conn_scan_ch_params channels_4[4U] ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/scan.h"
union __anonunion_2068 {
   struct __anonstruct_2069 __anonCompField___anonunion_2068_200 ;
   struct tracking_ch_params channels_tracking[24U] ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/scan.h"
struct wl18xx_cmd_scan_params {
   struct wl1271_cmd_header header ;
   u8 role_id ;
   u8 scan_type ;
   s8 rssi_threshold ;
   s8 snr_threshold ;
   u8 bss_type ;
   u8 ssid_from_list ;
   u8 filter ;
   u8 add_broadcast ;
   u8 urgency ;
   u8 protect ;
   u8 n_probe_reqs ;
   u8 terminate_after ;
   u8 passive[3U] ;
   u8 active[3U] ;
   u8 dfs ;
   u8 passive_active ;
   __le16 short_cycles_msec ;
   __le16 long_cycles_msec ;
   u8 short_cycles_count ;
   u8 total_cycles ;
   u8 padding[2U] ;
   union __anonunion_2068 __anonCompField_wl18xx_cmd_scan_params_201 ;
   u8 ssid[32U] ;
   u8 ssid_len ;
   u8 tag ;
   u8 rate ;
   u8 report_threshold ;
   u8 terminate_on_report ;
   u8 padding1[3U] ;
} __attribute__((__packed__));
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/scan.h"
struct wl18xx_cmd_scan_stop {
   struct wl1271_cmd_header header ;
   u8 role_id ;
   u8 scan_type ;
   u8 padding[2U] ;
} __attribute__((__packed__));
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 246  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_ecn.h"
typedef u32 codel_time_t;
#line 930  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_tx_rate {
   s8 idx ;
   u16 count : 5 ;
   u16 flags : 11 ;
} __attribute__((__packed__));
#line 1004  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct __anonstruct_3078 {
   struct ieee80211_tx_rate rates[4U] ;
   s8 rts_cts_rate_idx ;
   u8 use_rts : 1 ;
   u8 use_cts_prot : 1 ;
   u8 short_preamble : 1 ;
   u8 skip_table : 1 ;
};
#line 1004  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
union __anonunion_3077 {
   struct __anonstruct_3078 __anonCompField___anonunion_3077_192 ;
   unsigned long jiffies ;
};
#line 1004  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct __anonstruct_control_3076 {
   union __anonunion_3077 __anonCompField___anonstruct_control_3076_193 ;
   struct ieee80211_vif *vif ;
   struct ieee80211_key_conf *hw_key ;
   u32 flags ;
   codel_time_t enqueue_time ;
};
#line 1004  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct __anonstruct_ack_3079 {
   u64 cookie ;
};
#line 1004  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct __anonstruct_status_3080 {
   struct ieee80211_tx_rate rates[4U] ;
   s32 ack_signal ;
   u8 ampdu_ack_len ;
   u8 ampdu_len ;
   u8 antenna ;
   u16 tx_time ;
   bool is_valid_ack_signal ;
   void *status_driver_data[2U] ;
};
#line 1004  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct __anonstruct_3081 {
   struct ieee80211_tx_rate driver_rates[4U] ;
   u8 pad[4U] ;
   void *rate_driver_data[3U] ;
};
#line 1004  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
union __anonunion_3075 {
   struct __anonstruct_control_3076 control ;
   struct __anonstruct_ack_3079 ack ;
   struct __anonstruct_status_3080 status ;
   struct __anonstruct_3081 __anonCompField___anonunion_3075_194 ;
   void *driver_data[5U] ;
};
#line 1004  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_tx_info {
   u32 flags ;
   u8 band ;
   u8 hw_queue ;
   u16 ack_frame_id : 6 ;
   u16 tx_time_est : 10 ;
   union __anonunion_3075 __anonCompField_ieee80211_tx_info_195 ;
};
#line 541  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/wlcore.h"
struct acx_header;
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/acx.h"
struct acx_header {
   struct wl1271_cmd_header cmd ;
   __le16 id ;
   __le16 len ;
} __attribute__((__packed__));
#line 474  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/acx.h"
struct wl1271_acx_mem_map {
   struct acx_header header ;
   __le32 code_start ;
   __le32 code_end ;
   __le32 wep_defkey_start ;
   __le32 wep_defkey_end ;
   __le32 sta_table_start ;
   __le32 sta_table_end ;
   __le32 packet_template_start ;
   __le32 packet_template_end ;
   __le32 tx_result ;
   __le32 tx_result_queue_start ;
   __le32 queue_memory_start ;
   __le32 queue_memory_end ;
   __le32 packet_memory_pool_start ;
   __le32 packet_memory_pool_end ;
   __le32 debug_buffer1_start ;
   __le32 debug_buffer1_end ;
   __le32 debug_buffer2_start ;
   __le32 debug_buffer2_end ;
   __le32 num_tx_mem_blocks ;
   __le32 num_rx_mem_blocks ;
   u8 *tx_cbuf ;
   u8 *rx_cbuf ;
   __le32 rx_ctrl ;
   __le32 tx_ctrl ;
} __attribute__((__packed__));
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/tx.h"
struct wl127x_tx_mem {
   u8 extra_blocks ;
   u8 total_mem_blocks ;
} __attribute__((__packed__));
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/tx.h"
struct wl128x_tx_mem {
   u8 total_mem_blocks ;
   u8 extra_bytes ;
} __attribute__((__packed__));
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/tx.h"
struct wl18xx_tx_mem {
   u8 total_mem_blocks ;
   u8 ctrl ;
} __attribute__((__packed__));
#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/tx.h"
union __anonunion_3106 {
   struct wl127x_tx_mem wl127x_mem ;
   struct wl128x_tx_mem wl128x_mem ;
   struct wl18xx_tx_mem wl18xx_mem ;
} __attribute__((__packed__));
#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/tx.h"
union __anonunion_3107 {
   u8 wl12xx_reserved ;
   u8 wl18xx_checksum_data ;
} __attribute__((__packed__));
#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/tx.h"
struct wl1271_tx_hw_descr {
   __le16 length ;
   union __anonunion_3106 __anonCompField_wl1271_tx_hw_descr_200 ;
   __le32 start_time ;
   __le16 life_time ;
   __le16 tx_attr ;
   u8 id ;
   u8 tid ;
   u8 hlid ;
   union __anonunion_3107 __anonCompField_wl1271_tx_hw_descr_201 ;
} __attribute__((__packed__));
#line 147  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/tx.h"
struct wl1271_tx_hw_res_descr {
   u8 id ;
   u8 status ;
   __le16 medium_usage ;
   __le32 fw_handling_time ;
   __le32 medium_delay ;
   u8 tx_security_sequence_number_lsb ;
   u8 ack_failures ;
   u8 rate_class_index ;
   u8 spare ;
} __attribute__((__packed__));
#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/tx.h"
struct wl1271_tx_hw_res_if {
   __le32 tx_result_fw_counter ;
   __le32 tx_result_host_counter ;
   struct wl1271_tx_hw_res_descr tx_results_queue[16U] ;
} __attribute__((__packed__));
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/conf.h"
struct wl18xx_mac_and_phy_params {
   u8 phy_standalone ;
   u8 spare0 ;
   u8 enable_clpc ;
   u8 enable_tx_low_pwr_on_siso_rdl ;
   u8 auto_detect ;
   u8 dedicated_fem ;
   u8 low_band_component ;
   u8 low_band_component_type ;
   u8 high_band_component ;
   u8 high_band_component_type ;
   u8 number_of_assembled_ant2_4 ;
   u8 number_of_assembled_ant5 ;
   u8 pin_muxing_platform_options[2U] ;
   u8 external_pa_dc2dc ;
   u8 tcxo_ldo_voltage ;
   u8 xtal_itrim_val ;
   u8 srf_state ;
   u8 srf1[16U] ;
   u8 srf2[16U] ;
   u8 srf3[16U] ;
   u8 io_configuration ;
   u8 sdio_configuration ;
   u8 settings ;
   u8 rx_profile ;
   u8 per_chan_pwr_limit_arr_11abg[150U] ;
   u8 pwr_limit_reference_11_abg ;
   u8 per_chan_pwr_limit_arr_11p[7U] ;
   u8 pwr_limit_reference_11p ;
   u8 spare1 ;
   u8 per_chan_bo_mode_11_abg[13U] ;
   u8 per_chan_bo_mode_11_p[4U] ;
   u8 primary_clock_setting_time ;
   u8 clock_valid_on_wake_up ;
   u8 secondary_clock_setting_time ;
   u8 board_type ;
   u8 psat ;
   s8 low_power_val ;
   s8 med_power_val ;
   s8 high_power_val ;
   s8 per_sub_band_tx_trace_loss[10U] ;
   s8 per_sub_band_rx_trace_loss[18U] ;
   u8 tx_rf_margin ;
   s8 low_power_val_2nd ;
   s8 med_power_val_2nd ;
   s8 high_power_val_2nd ;
   u8 padding[1U] ;
} __attribute__((__packed__));
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/conf.h"
struct wl18xx_ht_settings {
   u8 mode ;
} __attribute__((__packed__));
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/conf.h"
struct conf_ap_sleep_settings {
   u8 idle_duty_cycle ;
   u8 connected_duty_cycle ;
   u8 max_stations_thresh ;
   u8 idle_conn_thresh ;
} __attribute__((__packed__));
#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/conf.h"
struct wl18xx_priv_conf {
   struct wl18xx_ht_settings ht ;
   struct wl18xx_mac_and_phy_params phy ;
   struct conf_ap_sleep_settings ap_sleep ;
} __attribute__((__packed__));
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/wl18xx.h"
struct wl18xx_priv {
   u8 cmd_buf[740U] ;
   struct wl18xx_priv_conf conf ;
   u8 last_fw_rls_idx ;
   int extra_spare_key_count ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/wl18xx.h"
struct wl18xx_fw_status_priv {
   u8 fw_release_idx ;
   u8 released_tx_desc[33U] ;
   __le32 link_suspend_bitmap ;
   u8 tx_ac_threshold ;
   u8 tx_ps_threshold ;
   u8 tx_suspend_threshold ;
   u8 tx_slow_link_prio_threshold ;
   u8 tx_fast_link_prio_threshold ;
   u8 tx_slow_stop_threshold ;
   u8 tx_fast_stop_threshold ;
   u8 padding[3U] ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u16 __sum16;
#line 690  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
typedef struct cpumask *cpumask_var_t;
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
struct firmware;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/apic.h"
struct irq_data;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uuid.h"
typedef unsigned long kernel_ulong_t;
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct acpi_device_id {
   __u8 id[9U] ;
   kernel_ulong_t driver_data ;
   __u32 cls ;
   __u32 cls_msk ;
};
#line 260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct of_device_id {
   char name[32U] ;
   char type[32U] ;
   char compatible[128U] ;
   void *data ;
};
#line 582  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct platform_device_id {
   char name[20U] ;
   kernel_ulong_t driver_data ;
};
#line 196  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/platform_device.h"
struct platform_driver {
   int (*probe)(struct platform_device *) ;
   int (*remove)(struct platform_device *) ;
   void (*shutdown)(struct platform_device *) ;
   int (*suspend)(struct platform_device *, pm_message_t ) ;
   int (*resume)(struct platform_device *) ;
   struct device_driver driver ;
   struct platform_device_id *id_table ;
   bool prevent_deferred_probe ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ip.h"
struct iphdr {
   __u8 ihl : 4 ;
   __u8 version : 4 ;
   __u8 tos ;
   __be16 tot_len ;
   __be16 id ;
   __be16 frag_off ;
   __u8 ttl ;
   __u8 protocol ;
   __sum16 check ;
   __be32 saddr ;
   __be32 daddr ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/firmware.h"
struct firmware {
   size_t size ;
   u8 *data ;
   struct page **pages ;
   void *priv ;
};
#line 472  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
enum irqchip_irq_state {
    IRQCHIP_STATE_PENDING = 0,
    IRQCHIP_STATE_ACTIVE = 1,
    IRQCHIP_STATE_MASKED = 2,
    IRQCHIP_STATE_LINE_LEVEL = 3
};
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irq_regs.h"
struct msi_msg;
#line 63 
struct msi_desc;
#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irq.h"
struct irq_common_data {
   unsigned int state_use_accessors ;
   unsigned int node ;
   void *handler_data ;
   struct msi_desc *msi_desc ;
   cpumask_var_t affinity ;
   cpumask_var_t effective_affinity ;
};
#line 173 
struct irq_chip;
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irq.h"
struct irq_data {
   u32 mask ;
   unsigned int irq ;
   unsigned long hwirq ;
   struct irq_common_data *common ;
   struct irq_chip *chip ;
   struct irq_domain *domain ;
   struct irq_data *parent_data ;
   void *chip_data ;
};
#line 449  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irq.h"
struct irq_chip {
   struct device *parent_device ;
   char *name ;
   unsigned int (*irq_startup)(struct irq_data *) ;
   void (*irq_shutdown)(struct irq_data *) ;
   void (*irq_enable)(struct irq_data *) ;
   void (*irq_disable)(struct irq_data *) ;
   void (*irq_ack)(struct irq_data *) ;
   void (*irq_mask)(struct irq_data *) ;
   void (*irq_mask_ack)(struct irq_data *) ;
   void (*irq_unmask)(struct irq_data *) ;
   void (*irq_eoi)(struct irq_data *) ;
   int (*irq_set_affinity)(struct irq_data *, struct cpumask *, bool ) ;
   int (*irq_retrigger)(struct irq_data *) ;
   int (*irq_set_type)(struct irq_data *, unsigned int ) ;
   int (*irq_set_wake)(struct irq_data *, unsigned int ) ;
   void (*irq_bus_lock)(struct irq_data *) ;
   void (*irq_bus_sync_unlock)(struct irq_data *) ;
   void (*irq_cpu_online)(struct irq_data *) ;
   void (*irq_cpu_offline)(struct irq_data *) ;
   void (*irq_suspend)(struct irq_data *) ;
   void (*irq_resume)(struct irq_data *) ;
   void (*irq_pm_shutdown)(struct irq_data *) ;
   void (*irq_calc_mask)(struct irq_data *) ;
   void (*irq_print_chip)(struct irq_data *, struct seq_file *) ;
   int (*irq_request_resources)(struct irq_data *) ;
   void (*irq_release_resources)(struct irq_data *) ;
   void (*irq_compose_msi_msg)(struct irq_data *, struct msi_msg *) ;
   void (*irq_write_msi_msg)(struct irq_data *, struct msi_msg *) ;
   int (*irq_get_irqchip_state)(struct irq_data *, enum irqchip_irq_state , bool *) ;
   int (*irq_set_irqchip_state)(struct irq_data *, enum irqchip_irq_state , bool ) ;
   int (*irq_set_vcpu_affinity)(struct irq_data *, void *) ;
   void (*ipi_send_single)(struct irq_data *, unsigned int ) ;
   void (*ipi_send_mask)(struct irq_data *, struct cpumask *) ;
   int (*irq_nmi_setup)(struct irq_data *) ;
   void (*irq_nmi_teardown)(struct irq_data *) ;
   unsigned long flags ;
};
#line 1124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/conf.h"
struct wlcore_conf_header {
   __le32 magic ;
   __le32 version ;
   __le32 checksum ;
} __attribute__((__packed__));
#line 1150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/conf.h"
struct wlcore_conf_file {
   struct wlcore_conf_header header ;
   struct wlcore_conf core ;
   u8 priv[0U] ;
} __attribute__((__packed__));
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/wlcore_i.h"
struct wilink_family_data {
   char *name ;
   char *nvs_name ;
   char *cfg_name ;
};
#line 194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/wlcore_i.h"
struct wlcore_platdev_data {
   struct wl1271_if_operations *if_ops ;
   struct wilink_family_data *family ;
   bool ref_clock_xtal ;
   u32 ref_clock_freq ;
   u32 tcxo_clock_freq ;
   bool pwr_in_suspend ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/rx.h"
struct wl1271_rx_descriptor {
   __le16 length ;
   u8 status ;
   u8 flags ;
   u8 rate ;
   u8 channel ;
   s8 rssi ;
   u8 snr ;
   __le32 timestamp ;
   u8 packet_class ;
   u8 hlid ;
   u8 pad_len ;
   u8 reserved ;
} __attribute__((__packed__));
#line 163 
enum wl18xx_rdl_num {
    RDL_NONE = 0,
    RDL_1_HP = 1,
    RDL_2_SP = 2,
    RDL_3_HP = 3,
    RDL_4_SP = 4,
    RDL_5_SP = 17,
    RDL_6_SP = 18,
    RDL_7_SP = 19,
    RDL_8_SP = 20,
    _RDL_LAST = 21,
    RDL_MAX = 20
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/wl18xx.h"
struct wl18xx_fw_packet_counters {
   u8 tx_released_pkts[4U] ;
   u8 tx_lnk_free_pkts[16U] ;
   u8 tx_voice_released_blks ;
   u8 tx_last_rate ;
   u8 tx_last_rate_mbps ;
   u8 hlid ;
} __attribute__((__packed__));
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/wl18xx.h"
struct wl18xx_fw_status {
   __le32 intr ;
   u8 fw_rx_counter ;
   u8 drv_rx_counter ;
   u8 reserved ;
   u8 tx_results_counter ;
   __le32 rx_pkt_descs[32U] ;
   __le32 fw_localtime ;
   __le32 link_ps_bitmap ;
   __le32 link_fast_bitmap ;
   __le32 total_released_blks ;
   __le32 tx_total ;
   struct wl18xx_fw_packet_counters counters ;
   __le32 log_start_addr ;
   struct wl18xx_fw_status_priv priv ;
} __attribute__((__packed__));
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/wl18xx.h"
struct wl18xx_static_data_priv {
   char phy_version[20U] ;
};
#line 164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/wl18xx.h"
struct wl18xx_clk_cfg {
   u32 n ;
   u32 m ;
   u32 p ;
   u32 q ;
   bool swallow ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/acx.h"
struct wl18xx_acx_host_config_bitmap {
   struct acx_header header ;
   __le32 host_cfg_bitmap ;
   __le32 host_sdio_block_size ;
   __le32 extra_mem_blocks ;
   __le32 length_field_size ;
} __attribute__((__packed__));
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/acx.h"
struct wl18xx_acx_checksum_state {
   struct acx_header header ;
   u8 checksum_state ;
   u8 pad[3U] ;
} __attribute__((__packed__));
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/acx.h"
struct wl18xx_acx_clear_statistics {
   struct acx_header header ;
};
#line 294  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/acx.h"
struct wlcore_peer_ht_operation_mode {
   struct acx_header header ;
   u8 hlid ;
   u8 bandwidth ;
   u8 padding[2U] ;
};
#line 307  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/acx.h"
struct wlcore_acx_peer_cap {
   struct acx_header header ;
   __le32 ht_capabilites ;
   __le32 supported_rates ;
   u8 hlid ;
   u8 ampdu_max_length ;
   u8 ampdu_min_spacing ;
   u8 padding ;
} __attribute__((__packed__));
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/acx.h"
struct wl18xx_acx_interrupt_notify {
   struct acx_header header ;
   u32 enable ;
};
#line 344  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/acx.h"
struct wl18xx_acx_rx_ba_filter {
   struct acx_header header ;
   u32 enable ;
};
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/acx.h"
struct acx_ap_sleep_cfg {
   struct acx_header header ;
   u8 idle_duty_cycle ;
   u8 connected_duty_cycle ;
   u8 max_stations_thresh ;
   u8 idle_conn_thresh ;
} __attribute__((__packed__));
#line 373  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/acx.h"
struct acx_dynamic_fw_traces_cfg {
   struct acx_header header ;
   __le32 dynamic_fw_traces ;
} __attribute__((__packed__));
#line 382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/acx.h"
struct acx_time_sync_cfg {
   struct acx_header header ;
   u8 sync_mode ;
   u8 zone_mac_addr[6U] ;
   u8 padding[1U] ;
} __attribute__((__packed__));
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
union __anonunion___u_5259 {
   int __val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_runtime.h"
union __anonunion___u_5513 {
   u64 __val ;
   char __c[1U] ;
};
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/acx.h"
struct wl18xx_acx_error_stats {
   u32 error_frame_non_ctrl ;
   u32 error_frame_ctrl ;
   u32 error_frame_during_protection ;
   u32 null_frame_tx_start ;
   u32 null_frame_cts_start ;
   u32 bar_retry ;
   u32 num_frame_cts_nul_flid ;
   u32 tx_abort_failure ;
   u32 tx_resume_failure ;
   u32 rx_cmplt_db_overflow_cnt ;
   u32 elp_while_rx_exch ;
   u32 elp_while_tx_exch ;
   u32 elp_while_tx ;
   u32 elp_while_nvic_pending ;
   u32 rx_excessive_frame_len ;
   u32 burst_mismatch ;
   u32 tbc_exch_mismatch ;
} __attribute__((__packed__));
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/acx.h"
struct wl18xx_acx_tx_stats {
   u32 tx_prepared_descs ;
   u32 tx_cmplt ;
   u32 tx_template_prepared ;
   u32 tx_data_prepared ;
   u32 tx_template_programmed ;
   u32 tx_data_programmed ;
   u32 tx_burst_programmed ;
   u32 tx_starts ;
   u32 tx_stop ;
   u32 tx_start_templates ;
   u32 tx_start_int_templates ;
   u32 tx_start_fw_gen ;
   u32 tx_start_data ;
   u32 tx_start_null_frame ;
   u32 tx_exch ;
   u32 tx_retry_template ;
   u32 tx_retry_data ;
   u32 tx_retry_per_rate[30U] ;
   u32 tx_exch_pending ;
   u32 tx_exch_expiry ;
   u32 tx_done_template ;
   u32 tx_done_data ;
   u32 tx_done_int_template ;
   u32 tx_cfe1 ;
   u32 tx_cfe2 ;
   u32 frag_called ;
   u32 frag_mpdu_alloc_failed ;
   u32 frag_init_called ;
   u32 frag_in_process_called ;
   u32 frag_tkip_called ;
   u32 frag_key_not_found ;
   u32 frag_need_fragmentation ;
   u32 frag_bad_mblk_num ;
   u32 frag_failed ;
   u32 frag_cache_hit ;
   u32 frag_cache_miss ;
} __attribute__((__packed__));
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/acx.h"
struct wl18xx_acx_rx_stats {
   u32 rx_beacon_early_term ;
   u32 rx_out_of_mpdu_nodes ;
   u32 rx_hdr_overflow ;
   u32 rx_dropped_frame ;
   u32 rx_done_stage ;
   u32 rx_done ;
   u32 rx_defrag ;
   u32 rx_defrag_end ;
   u32 rx_cmplt ;
   u32 rx_pre_complt ;
   u32 rx_cmplt_task ;
   u32 rx_phy_hdr ;
   u32 rx_timeout ;
   u32 rx_rts_timeout ;
   u32 rx_timeout_wa ;
   u32 defrag_called ;
   u32 defrag_init_called ;
   u32 defrag_in_process_called ;
   u32 defrag_tkip_called ;
   u32 defrag_need_defrag ;
   u32 defrag_decrypt_failed ;
   u32 decrypt_key_not_found ;
   u32 defrag_need_decrypt ;
   u32 rx_tkip_replays ;
   u32 rx_xfr ;
} __attribute__((__packed__));
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/acx.h"
struct wl18xx_acx_isr_stats {
   u32 irqs ;
} __attribute__((__packed__));
#line 176  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/acx.h"
struct wl18xx_acx_pwr_stats {
   u32 missing_bcns_cnt ;
   u32 rcvd_bcns_cnt ;
   u32 connection_out_of_sync ;
   u32 cont_miss_bcns_spread[10U] ;
   u32 rcvd_awake_bcns_cnt ;
   u32 sleep_time_count ;
   u32 sleep_time_avg ;
   u32 sleep_cycle_avg ;
   u32 sleep_percent ;
   u32 ap_sleep_active_conf ;
   u32 ap_sleep_user_conf ;
   u32 ap_sleep_counter ;
} __attribute__((__packed__));
#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/acx.h"
struct wl18xx_acx_rx_filter_stats {
   u32 beacon_filter ;
   u32 arp_filter ;
   u32 mc_filter ;
   u32 dup_filter ;
   u32 data_filter ;
   u32 ibss_filter ;
   u32 protection_filter ;
   u32 accum_arp_pend_requests ;
   u32 max_arp_queue_dep ;
} __attribute__((__packed__));
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/acx.h"
struct wl18xx_acx_rx_rate_stats {
   u32 rx_frames_per_rates[50U] ;
} __attribute__((__packed__));
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/acx.h"
struct wl18xx_acx_aggr_stats {
   u32 tx_agg_rate[16U] ;
   u32 tx_agg_len[16U] ;
   u32 rx_size[16U] ;
} __attribute__((__packed__));
#line 218  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/acx.h"
struct wl18xx_acx_pipeline_stats {
   u32 hs_tx_stat_fifo_int ;
   u32 hs_rx_stat_fifo_int ;
   u32 enc_tx_stat_fifo_int ;
   u32 enc_rx_stat_fifo_int ;
   u32 rx_complete_stat_fifo_int ;
   u32 pre_proc_swi ;
   u32 post_proc_swi ;
   u32 sec_frag_swi ;
   u32 pre_to_defrag_swi ;
   u32 defrag_to_rx_xfer_swi ;
   u32 dec_packet_in ;
   u32 dec_packet_in_fifo_full ;
   u32 dec_packet_out ;
   u16 pipeline_fifo_full[11U] ;
   u16 padding ;
} __attribute__((__packed__));
#line 238  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/acx.h"
struct wl18xx_acx_diversity_stats {
   u32 num_of_packets_per_ant[2U] ;
   u32 total_num_of_toggles ;
} __attribute__((__packed__));
#line 243  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/acx.h"
struct wl18xx_acx_thermal_stats {
   u16 irq_thr_low ;
   u16 irq_thr_high ;
   u16 tx_stop ;
   u16 tx_resume ;
   u16 false_irq ;
   u16 adc_source_unexpected ;
} __attribute__((__packed__));
#line 253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/acx.h"
struct wl18xx_acx_calib_failure_stats {
   u16 fail_count[18U] ;
   u32 calib_count ;
} __attribute__((__packed__));
#line 258  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/acx.h"
struct wl18xx_roaming_stats {
   s32 rssi_level ;
} __attribute__((__packed__));
#line 262  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/acx.h"
struct wl18xx_dfs_stats {
   u32 num_of_radar_detections ;
} __attribute__((__packed__));
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/acx.h"
struct wl18xx_acx_statistics {
   struct acx_header header ;
   struct wl18xx_acx_error_stats error ;
   struct wl18xx_acx_tx_stats tx ;
   struct wl18xx_acx_rx_stats rx ;
   struct wl18xx_acx_isr_stats isr ;
   struct wl18xx_acx_pwr_stats pwr ;
   struct wl18xx_acx_rx_filter_stats rx_filter ;
   struct wl18xx_acx_rx_rate_stats rx_rate ;
   struct wl18xx_acx_aggr_stats aggr_size ;
   struct wl18xx_acx_pipeline_stats pipeline ;
   struct wl18xx_acx_diversity_stats diversity ;
   struct wl18xx_acx_thermal_stats thermal ;
   struct wl18xx_acx_calib_failure_stats calib ;
   struct wl18xx_roaming_stats roaming ;
   struct wl18xx_dfs_stats dfs ;
} __attribute__((__packed__));
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/cmd.h"
struct wl18xx_cmd_channel_switch {
   struct wl1271_cmd_header header ;
   u8 role_id ;
   u8 channel ;
   u8 switch_time ;
   u8 stop_tx ;
   __le32 local_supported_rates ;
   u8 channel_type ;
   u8 band ;
   u8 padding[2U] ;
} __attribute__((__packed__));
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/cmd.h"
struct wl18xx_cmd_smart_config_start {
   struct wl1271_cmd_header header ;
   __le32 group_id_bitmask ;
} __attribute__((__packed__));
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/cmd.h"
struct wl18xx_cmd_smart_config_set_group_key {
   struct wl1271_cmd_header header ;
   __le32 group_id ;
   u8 key[16U] ;
} __attribute__((__packed__));
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/cmd.h"
struct wl18xx_cmd_dfs_radar_debug {
   struct wl1271_cmd_header header ;
   u8 channel ;
   u8 padding[3U] ;
} __attribute__((__packed__));
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/cmd.h"
struct wl18xx_cmd_dfs_master_restart {
   struct wl1271_cmd_header header ;
   u8 role_id ;
   u8 padding[3U] ;
} __attribute__((__packed__));
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/cmd.h"
struct wlcore_cmd_cac_start {
   struct wl1271_cmd_header header ;
   u8 role_id ;
   u8 channel ;
   u8 band ;
   u8 bandwidth ;
} __attribute__((__packed__));
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/debugfs.h"
enum nl80211_commands {
    NL80211_CMD_UNSPEC = 0,
    NL80211_CMD_GET_WIPHY = 1,
    NL80211_CMD_SET_WIPHY = 2,
    NL80211_CMD_NEW_WIPHY = 3,
    NL80211_CMD_DEL_WIPHY = 4,
    NL80211_CMD_GET_INTERFACE = 5,
    NL80211_CMD_SET_INTERFACE = 6,
    NL80211_CMD_NEW_INTERFACE = 7,
    NL80211_CMD_DEL_INTERFACE = 8,
    NL80211_CMD_GET_KEY = 9,
    NL80211_CMD_SET_KEY = 10,
    NL80211_CMD_NEW_KEY = 11,
    NL80211_CMD_DEL_KEY = 12,
    NL80211_CMD_GET_BEACON = 13,
    NL80211_CMD_SET_BEACON = 14,
    NL80211_CMD_START_AP = 15,
    NL80211_CMD_NEW_BEACON = 15,
    NL80211_CMD_STOP_AP = 16,
    NL80211_CMD_DEL_BEACON = 16,
    NL80211_CMD_GET_STATION = 17,
    NL80211_CMD_SET_STATION = 18,
    NL80211_CMD_NEW_STATION = 19,
    NL80211_CMD_DEL_STATION = 20,
    NL80211_CMD_GET_MPATH = 21,
    NL80211_CMD_SET_MPATH = 22,
    NL80211_CMD_NEW_MPATH = 23,
    NL80211_CMD_DEL_MPATH = 24,
    NL80211_CMD_SET_BSS = 25,
    NL80211_CMD_SET_REG = 26,
    NL80211_CMD_REQ_SET_REG = 27,
    NL80211_CMD_GET_MESH_CONFIG = 28,
    NL80211_CMD_SET_MESH_CONFIG = 29,
    NL80211_CMD_SET_MGMT_EXTRA_IE = 30,
    NL80211_CMD_GET_REG = 31,
    NL80211_CMD_GET_SCAN = 32,
    NL80211_CMD_TRIGGER_SCAN = 33,
    NL80211_CMD_NEW_SCAN_RESULTS = 34,
    NL80211_CMD_SCAN_ABORTED = 35,
    NL80211_CMD_REG_CHANGE = 36,
    NL80211_CMD_AUTHENTICATE = 37,
    NL80211_CMD_ASSOCIATE = 38,
    NL80211_CMD_DEAUTHENTICATE = 39,
    NL80211_CMD_DISASSOCIATE = 40,
    NL80211_CMD_MICHAEL_MIC_FAILURE = 41,
    NL80211_CMD_REG_BEACON_HINT = 42,
    NL80211_CMD_JOIN_IBSS = 43,
    NL80211_CMD_LEAVE_IBSS = 44,
    NL80211_CMD_TESTMODE = 45,
    NL80211_CMD_CONNECT = 46,
    NL80211_CMD_ROAM = 47,
    NL80211_CMD_DISCONNECT = 48,
    NL80211_CMD_SET_WIPHY_NETNS = 49,
    NL80211_CMD_GET_SURVEY = 50,
    NL80211_CMD_NEW_SURVEY_RESULTS = 51,
    NL80211_CMD_SET_PMKSA = 52,
    NL80211_CMD_DEL_PMKSA = 53,
    NL80211_CMD_FLUSH_PMKSA = 54,
    NL80211_CMD_REMAIN_ON_CHANNEL = 55,
    NL80211_CMD_CANCEL_REMAIN_ON_CHANNEL = 56,
    NL80211_CMD_SET_TX_BITRATE_MASK = 57,
    NL80211_CMD_REGISTER_FRAME = 58,
    NL80211_CMD_REGISTER_ACTION = 58,
    NL80211_CMD_FRAME = 59,
    NL80211_CMD_ACTION = 59,
    NL80211_CMD_FRAME_TX_STATUS = 60,
    NL80211_CMD_ACTION_TX_STATUS = 60,
    NL80211_CMD_SET_POWER_SAVE = 61,
    NL80211_CMD_GET_POWER_SAVE = 62,
    NL80211_CMD_SET_CQM = 63,
    NL80211_CMD_NOTIFY_CQM = 64,
    NL80211_CMD_SET_CHANNEL = 65,
    NL80211_CMD_SET_WDS_PEER = 66,
    NL80211_CMD_FRAME_WAIT_CANCEL = 67,
    NL80211_CMD_JOIN_MESH = 68,
    NL80211_CMD_LEAVE_MESH = 69,
    NL80211_CMD_UNPROT_DEAUTHENTICATE = 70,
    NL80211_CMD_UNPROT_DISASSOCIATE = 71,
    NL80211_CMD_NEW_PEER_CANDIDATE = 72,
    NL80211_CMD_GET_WOWLAN = 73,
    NL80211_CMD_SET_WOWLAN = 74,
    NL80211_CMD_START_SCHED_SCAN = 75,
    NL80211_CMD_STOP_SCHED_SCAN = 76,
    NL80211_CMD_SCHED_SCAN_RESULTS = 77,
    NL80211_CMD_SCHED_SCAN_STOPPED = 78,
    NL80211_CMD_SET_REKEY_OFFLOAD = 79,
    NL80211_CMD_PMKSA_CANDIDATE = 80,
    NL80211_CMD_TDLS_OPER = 81,
    NL80211_CMD_TDLS_MGMT = 82,
    NL80211_CMD_UNEXPECTED_FRAME = 83,
    NL80211_CMD_PROBE_CLIENT = 84,
    NL80211_CMD_REGISTER_BEACONS = 85,
    NL80211_CMD_UNEXPECTED_4ADDR_FRAME = 86,
    NL80211_CMD_SET_NOACK_MAP = 87,
    NL80211_CMD_CH_SWITCH_NOTIFY = 88,
    NL80211_CMD_START_P2P_DEVICE = 89,
    NL80211_CMD_STOP_P2P_DEVICE = 90,
    NL80211_CMD_CONN_FAILED = 91,
    NL80211_CMD_SET_MCAST_RATE = 92,
    NL80211_CMD_SET_MAC_ACL = 93,
    NL80211_CMD_RADAR_DETECT = 94,
    NL80211_CMD_GET_PROTOCOL_FEATURES = 95,
    NL80211_CMD_UPDATE_FT_IES = 96,
    NL80211_CMD_FT_EVENT = 97,
    NL80211_CMD_CRIT_PROTOCOL_START = 98,
    NL80211_CMD_CRIT_PROTOCOL_STOP = 99,
    NL80211_CMD_GET_COALESCE = 100,
    NL80211_CMD_SET_COALESCE = 101,
    NL80211_CMD_CHANNEL_SWITCH = 102,
    NL80211_CMD_VENDOR = 103,
    NL80211_CMD_SET_QOS_MAP = 104,
    NL80211_CMD_ADD_TX_TS = 105,
    NL80211_CMD_DEL_TX_TS = 106,
    NL80211_CMD_GET_MPP = 107,
    NL80211_CMD_JOIN_OCB = 108,
    NL80211_CMD_LEAVE_OCB = 109,
    NL80211_CMD_CH_SWITCH_STARTED_NOTIFY = 110,
    NL80211_CMD_TDLS_CHANNEL_SWITCH = 111,
    NL80211_CMD_TDLS_CANCEL_CHANNEL_SWITCH = 112,
    NL80211_CMD_WIPHY_REG_CHANGE = 113,
    NL80211_CMD_ABORT_SCAN = 114,
    NL80211_CMD_START_NAN = 115,
    NL80211_CMD_STOP_NAN = 116,
    NL80211_CMD_ADD_NAN_FUNCTION = 117,
    NL80211_CMD_DEL_NAN_FUNCTION = 118,
    NL80211_CMD_CHANGE_NAN_CONFIG = 119,
    NL80211_CMD_NAN_MATCH = 120,
    NL80211_CMD_SET_MULTICAST_TO_UNICAST = 121,
    NL80211_CMD_UPDATE_CONNECT_PARAMS = 122,
    NL80211_CMD_SET_PMK = 123,
    NL80211_CMD_DEL_PMK = 124,
    NL80211_CMD_PORT_AUTHORIZED = 125,
    NL80211_CMD_RELOAD_REGDB = 126,
    NL80211_CMD_EXTERNAL_AUTH = 127,
    NL80211_CMD_STA_OPMODE_CHANGED = 128,
    NL80211_CMD_CONTROL_PORT_FRAME = 129,
    NL80211_CMD_GET_FTM_RESPONDER_STATS = 130,
    NL80211_CMD_PEER_MEASUREMENT_START = 131,
    NL80211_CMD_PEER_MEASUREMENT_RESULT = 132,
    NL80211_CMD_PEER_MEASUREMENT_COMPLETE = 133,
    NL80211_CMD_NOTIFY_RADAR = 134,
    NL80211_CMD_UPDATE_OWE_INFO = 135,
    NL80211_CMD_PROBE_MESH_LINK = 136,
    __NL80211_CMD_AFTER_LAST = 137,
    NL80211_CMD_MAX = 136
};
#line 522 
enum nl80211_attrs {
    NL80211_ATTR_UNSPEC = 0,
    NL80211_ATTR_WIPHY = 1,
    NL80211_ATTR_WIPHY_NAME = 2,
    NL80211_ATTR_IFINDEX = 3,
    NL80211_ATTR_IFNAME = 4,
    NL80211_ATTR_IFTYPE = 5,
    NL80211_ATTR_MAC = 6,
    NL80211_ATTR_KEY_DATA = 7,
    NL80211_ATTR_KEY_IDX = 8,
    NL80211_ATTR_KEY_CIPHER = 9,
    NL80211_ATTR_KEY_SEQ = 10,
    NL80211_ATTR_KEY_DEFAULT = 11,
    NL80211_ATTR_BEACON_INTERVAL = 12,
    NL80211_ATTR_DTIM_PERIOD = 13,
    NL80211_ATTR_BEACON_HEAD = 14,
    NL80211_ATTR_BEACON_TAIL = 15,
    NL80211_ATTR_STA_AID = 16,
    NL80211_ATTR_STA_FLAGS = 17,
    NL80211_ATTR_STA_LISTEN_INTERVAL = 18,
    NL80211_ATTR_STA_SUPPORTED_RATES = 19,
    NL80211_ATTR_STA_VLAN = 20,
    NL80211_ATTR_STA_INFO = 21,
    NL80211_ATTR_WIPHY_BANDS = 22,
    NL80211_ATTR_MNTR_FLAGS = 23,
    NL80211_ATTR_MESH_ID = 24,
    NL80211_ATTR_STA_PLINK_ACTION = 25,
    NL80211_ATTR_MPATH_NEXT_HOP = 26,
    NL80211_ATTR_MPATH_INFO = 27,
    NL80211_ATTR_BSS_CTS_PROT = 28,
    NL80211_ATTR_BSS_SHORT_PREAMBLE = 29,
    NL80211_ATTR_BSS_SHORT_SLOT_TIME = 30,
    NL80211_ATTR_HT_CAPABILITY = 31,
    NL80211_ATTR_SUPPORTED_IFTYPES = 32,
    NL80211_ATTR_REG_ALPHA2 = 33,
    NL80211_ATTR_REG_RULES = 34,
    NL80211_ATTR_MESH_CONFIG = 35,
    NL80211_ATTR_BSS_BASIC_RATES = 36,
    NL80211_ATTR_WIPHY_TXQ_PARAMS = 37,
    NL80211_ATTR_WIPHY_FREQ = 38,
    NL80211_ATTR_WIPHY_CHANNEL_TYPE = 39,
    NL80211_ATTR_KEY_DEFAULT_MGMT = 40,
    NL80211_ATTR_MGMT_SUBTYPE = 41,
    NL80211_ATTR_IE = 42,
    NL80211_ATTR_MAX_NUM_SCAN_SSIDS = 43,
    NL80211_ATTR_SCAN_FREQUENCIES = 44,
    NL80211_ATTR_SCAN_SSIDS = 45,
    NL80211_ATTR_GENERATION = 46,
    NL80211_ATTR_BSS = 47,
    NL80211_ATTR_REG_INITIATOR = 48,
    NL80211_ATTR_REG_TYPE = 49,
    NL80211_ATTR_SUPPORTED_COMMANDS = 50,
    NL80211_ATTR_FRAME = 51,
    NL80211_ATTR_SSID = 52,
    NL80211_ATTR_AUTH_TYPE = 53,
    NL80211_ATTR_REASON_CODE = 54,
    NL80211_ATTR_KEY_TYPE = 55,
    NL80211_ATTR_MAX_SCAN_IE_LEN = 56,
    NL80211_ATTR_CIPHER_SUITES = 57,
    NL80211_ATTR_FREQ_BEFORE = 58,
    NL80211_ATTR_FREQ_AFTER = 59,
    NL80211_ATTR_FREQ_FIXED = 60,
    NL80211_ATTR_WIPHY_RETRY_SHORT = 61,
    NL80211_ATTR_WIPHY_RETRY_LONG = 62,
    NL80211_ATTR_WIPHY_FRAG_THRESHOLD = 63,
    NL80211_ATTR_WIPHY_RTS_THRESHOLD = 64,
    NL80211_ATTR_TIMED_OUT = 65,
    NL80211_ATTR_USE_MFP = 66,
    NL80211_ATTR_STA_FLAGS2 = 67,
    NL80211_ATTR_CONTROL_PORT = 68,
    NL80211_ATTR_TESTDATA = 69,
    NL80211_ATTR_PRIVACY = 70,
    NL80211_ATTR_DISCONNECTED_BY_AP = 71,
    NL80211_ATTR_STATUS_CODE = 72,
    NL80211_ATTR_CIPHER_SUITES_PAIRWISE = 73,
    NL80211_ATTR_CIPHER_SUITE_GROUP = 74,
    NL80211_ATTR_WPA_VERSIONS = 75,
    NL80211_ATTR_AKM_SUITES = 76,
    NL80211_ATTR_REQ_IE = 77,
    NL80211_ATTR_RESP_IE = 78,
    NL80211_ATTR_PREV_BSSID = 79,
    NL80211_ATTR_KEY = 80,
    NL80211_ATTR_KEYS = 81,
    NL80211_ATTR_PID = 82,
    NL80211_ATTR_4ADDR = 83,
    NL80211_ATTR_SURVEY_INFO = 84,
    NL80211_ATTR_PMKID = 85,
    NL80211_ATTR_MAX_NUM_PMKIDS = 86,
    NL80211_ATTR_DURATION = 87,
    NL80211_ATTR_COOKIE = 88,
    NL80211_ATTR_WIPHY_COVERAGE_CLASS = 89,
    NL80211_ATTR_TX_RATES = 90,
    NL80211_ATTR_FRAME_MATCH = 91,
    NL80211_ATTR_ACK = 92,
    NL80211_ATTR_PS_STATE = 93,
    NL80211_ATTR_CQM = 94,
    NL80211_ATTR_LOCAL_STATE_CHANGE = 95,
    NL80211_ATTR_AP_ISOLATE = 96,
    NL80211_ATTR_WIPHY_TX_POWER_SETTING = 97,
    NL80211_ATTR_WIPHY_TX_POWER_LEVEL = 98,
    NL80211_ATTR_TX_FRAME_TYPES = 99,
    NL80211_ATTR_RX_FRAME_TYPES = 100,
    NL80211_ATTR_FRAME_TYPE = 101,
    NL80211_ATTR_CONTROL_PORT_ETHERTYPE = 102,
    NL80211_ATTR_CONTROL_PORT_NO_ENCRYPT = 103,
    NL80211_ATTR_SUPPORT_IBSS_RSN = 104,
    NL80211_ATTR_WIPHY_ANTENNA_TX = 105,
    NL80211_ATTR_WIPHY_ANTENNA_RX = 106,
    NL80211_ATTR_MCAST_RATE = 107,
    NL80211_ATTR_OFFCHANNEL_TX_OK = 108,
    NL80211_ATTR_BSS_HT_OPMODE = 109,
    NL80211_ATTR_KEY_DEFAULT_TYPES = 110,
    NL80211_ATTR_MAX_REMAIN_ON_CHANNEL_DURATION = 111,
    NL80211_ATTR_MESH_SETUP = 112,
    NL80211_ATTR_WIPHY_ANTENNA_AVAIL_TX = 113,
    NL80211_ATTR_WIPHY_ANTENNA_AVAIL_RX = 114,
    NL80211_ATTR_SUPPORT_MESH_AUTH = 115,
    NL80211_ATTR_STA_PLINK_STATE = 116,
    NL80211_ATTR_WOWLAN_TRIGGERS = 117,
    NL80211_ATTR_WOWLAN_TRIGGERS_SUPPORTED = 118,
    NL80211_ATTR_SCHED_SCAN_INTERVAL = 119,
    NL80211_ATTR_INTERFACE_COMBINATIONS = 120,
    NL80211_ATTR_SOFTWARE_IFTYPES = 121,
    NL80211_ATTR_REKEY_DATA = 122,
    NL80211_ATTR_MAX_NUM_SCHED_SCAN_SSIDS = 123,
    NL80211_ATTR_MAX_SCHED_SCAN_IE_LEN = 124,
    NL80211_ATTR_SCAN_SUPP_RATES = 125,
    NL80211_ATTR_HIDDEN_SSID = 126,
    NL80211_ATTR_IE_PROBE_RESP = 127,
    NL80211_ATTR_IE_ASSOC_RESP = 128,
    NL80211_ATTR_STA_WME = 129,
    NL80211_ATTR_SUPPORT_AP_UAPSD = 130,
    NL80211_ATTR_ROAM_SUPPORT = 131,
    NL80211_ATTR_SCHED_SCAN_MATCH = 132,
    NL80211_ATTR_MAX_MATCH_SETS = 133,
    NL80211_ATTR_PMKSA_CANDIDATE = 134,
    NL80211_ATTR_TX_NO_CCK_RATE = 135,
    NL80211_ATTR_TDLS_ACTION = 136,
    NL80211_ATTR_TDLS_DIALOG_TOKEN = 137,
    NL80211_ATTR_TDLS_OPERATION = 138,
    NL80211_ATTR_TDLS_SUPPORT = 139,
    NL80211_ATTR_TDLS_EXTERNAL_SETUP = 140,
    NL80211_ATTR_DEVICE_AP_SME = 141,
    NL80211_ATTR_DONT_WAIT_FOR_ACK = 142,
    NL80211_ATTR_FEATURE_FLAGS = 143,
    NL80211_ATTR_PROBE_RESP_OFFLOAD = 144,
    NL80211_ATTR_PROBE_RESP = 145,
    NL80211_ATTR_DFS_REGION = 146,
    NL80211_ATTR_DISABLE_HT = 147,
    NL80211_ATTR_HT_CAPABILITY_MASK = 148,
    NL80211_ATTR_NOACK_MAP = 149,
    NL80211_ATTR_INACTIVITY_TIMEOUT = 150,
    NL80211_ATTR_RX_SIGNAL_DBM = 151,
    NL80211_ATTR_BG_SCAN_PERIOD = 152,
    NL80211_ATTR_WDEV = 153,
    NL80211_ATTR_USER_REG_HINT_TYPE = 154,
    NL80211_ATTR_CONN_FAILED_REASON = 155,
    NL80211_ATTR_AUTH_DATA = 156,
    NL80211_ATTR_VHT_CAPABILITY = 157,
    NL80211_ATTR_SCAN_FLAGS = 158,
    NL80211_ATTR_CHANNEL_WIDTH = 159,
    NL80211_ATTR_CENTER_FREQ1 = 160,
    NL80211_ATTR_CENTER_FREQ2 = 161,
    NL80211_ATTR_P2P_CTWINDOW = 162,
    NL80211_ATTR_P2P_OPPPS = 163,
    NL80211_ATTR_LOCAL_MESH_POWER_MODE = 164,
    NL80211_ATTR_ACL_POLICY = 165,
    NL80211_ATTR_MAC_ADDRS = 166,
    NL80211_ATTR_MAC_ACL_MAX = 167,
    NL80211_ATTR_RADAR_EVENT = 168,
    NL80211_ATTR_EXT_CAPA = 169,
    NL80211_ATTR_EXT_CAPA_MASK = 170,
    NL80211_ATTR_STA_CAPABILITY = 171,
    NL80211_ATTR_STA_EXT_CAPABILITY = 172,
    NL80211_ATTR_PROTOCOL_FEATURES = 173,
    NL80211_ATTR_SPLIT_WIPHY_DUMP = 174,
    NL80211_ATTR_DISABLE_VHT = 175,
    NL80211_ATTR_VHT_CAPABILITY_MASK = 176,
    NL80211_ATTR_MDID = 177,
    NL80211_ATTR_IE_RIC = 178,
    NL80211_ATTR_CRIT_PROT_ID = 179,
    NL80211_ATTR_MAX_CRIT_PROT_DURATION = 180,
    NL80211_ATTR_PEER_AID = 181,
    NL80211_ATTR_COALESCE_RULE = 182,
    NL80211_ATTR_CH_SWITCH_COUNT = 183,
    NL80211_ATTR_CH_SWITCH_BLOCK_TX = 184,
    NL80211_ATTR_CSA_IES = 185,
    NL80211_ATTR_CSA_C_OFF_BEACON = 186,
    NL80211_ATTR_CSA_C_OFF_PRESP = 187,
    NL80211_ATTR_RXMGMT_FLAGS = 188,
    NL80211_ATTR_STA_SUPPORTED_CHANNELS = 189,
    NL80211_ATTR_STA_SUPPORTED_OPER_CLASSES = 190,
    NL80211_ATTR_HANDLE_DFS = 191,
    NL80211_ATTR_SUPPORT_5_MHZ = 192,
    NL80211_ATTR_SUPPORT_10_MHZ = 193,
    NL80211_ATTR_OPMODE_NOTIF = 194,
    NL80211_ATTR_VENDOR_ID = 195,
    NL80211_ATTR_VENDOR_SUBCMD = 196,
    NL80211_ATTR_VENDOR_DATA = 197,
    NL80211_ATTR_VENDOR_EVENTS = 198,
    NL80211_ATTR_QOS_MAP = 199,
    NL80211_ATTR_MAC_HINT = 200,
    NL80211_ATTR_WIPHY_FREQ_HINT = 201,
    NL80211_ATTR_MAX_AP_ASSOC_STA = 202,
    NL80211_ATTR_TDLS_PEER_CAPABILITY = 203,
    NL80211_ATTR_SOCKET_OWNER = 204,
    NL80211_ATTR_CSA_C_OFFSETS_TX = 205,
    NL80211_ATTR_MAX_CSA_COUNTERS = 206,
    NL80211_ATTR_TDLS_INITIATOR = 207,
    NL80211_ATTR_USE_RRM = 208,
    NL80211_ATTR_WIPHY_DYN_ACK = 209,
    NL80211_ATTR_TSID = 210,
    NL80211_ATTR_USER_PRIO = 211,
    NL80211_ATTR_ADMITTED_TIME = 212,
    NL80211_ATTR_SMPS_MODE = 213,
    NL80211_ATTR_OPER_CLASS = 214,
    NL80211_ATTR_MAC_MASK = 215,
    NL80211_ATTR_WIPHY_SELF_MANAGED_REG = 216,
    NL80211_ATTR_EXT_FEATURES = 217,
    NL80211_ATTR_SURVEY_RADIO_STATS = 218,
    NL80211_ATTR_NETNS_FD = 219,
    NL80211_ATTR_SCHED_SCAN_DELAY = 220,
    NL80211_ATTR_REG_INDOOR = 221,
    NL80211_ATTR_MAX_NUM_SCHED_SCAN_PLANS = 222,
    NL80211_ATTR_MAX_SCAN_PLAN_INTERVAL = 223,
    NL80211_ATTR_MAX_SCAN_PLAN_ITERATIONS = 224,
    NL80211_ATTR_SCHED_SCAN_PLANS = 225,
    NL80211_ATTR_PBSS = 226,
    NL80211_ATTR_BSS_SELECT = 227,
    NL80211_ATTR_STA_SUPPORT_P2P_PS = 228,
    NL80211_ATTR_PAD = 229,
    NL80211_ATTR_IFTYPE_EXT_CAPA = 230,
    NL80211_ATTR_MU_MIMO_GROUP_DATA = 231,
    NL80211_ATTR_MU_MIMO_FOLLOW_MAC_ADDR = 232,
    NL80211_ATTR_SCAN_START_TIME_TSF = 233,
    NL80211_ATTR_SCAN_START_TIME_TSF_BSSID = 234,
    NL80211_ATTR_MEASUREMENT_DURATION = 235,
    NL80211_ATTR_MEASUREMENT_DURATION_MANDATORY = 236,
    NL80211_ATTR_MESH_PEER_AID = 237,
    NL80211_ATTR_NAN_MASTER_PREF = 238,
    NL80211_ATTR_BANDS = 239,
    NL80211_ATTR_NAN_FUNC = 240,
    NL80211_ATTR_NAN_MATCH = 241,
    NL80211_ATTR_FILS_KEK = 242,
    NL80211_ATTR_FILS_NONCES = 243,
    NL80211_ATTR_MULTICAST_TO_UNICAST_ENABLED = 244,
    NL80211_ATTR_BSSID = 245,
    NL80211_ATTR_SCHED_SCAN_RELATIVE_RSSI = 246,
    NL80211_ATTR_SCHED_SCAN_RSSI_ADJUST = 247,
    NL80211_ATTR_TIMEOUT_REASON = 248,
    NL80211_ATTR_FILS_ERP_USERNAME = 249,
    NL80211_ATTR_FILS_ERP_REALM = 250,
    NL80211_ATTR_FILS_ERP_NEXT_SEQ_NUM = 251,
    NL80211_ATTR_FILS_ERP_RRK = 252,
    NL80211_ATTR_FILS_CACHE_ID = 253,
    NL80211_ATTR_PMK = 254,
    NL80211_ATTR_SCHED_SCAN_MULTI = 255,
    NL80211_ATTR_SCHED_SCAN_MAX_REQS = 256,
    NL80211_ATTR_WANT_1X_4WAY_HS = 257,
    NL80211_ATTR_PMKR0_NAME = 258,
    NL80211_ATTR_PORT_AUTHORIZED = 259,
    NL80211_ATTR_EXTERNAL_AUTH_ACTION = 260,
    NL80211_ATTR_EXTERNAL_AUTH_SUPPORT = 261,
    NL80211_ATTR_NSS = 262,
    NL80211_ATTR_ACK_SIGNAL = 263,
    NL80211_ATTR_CONTROL_PORT_OVER_NL80211 = 264,
    NL80211_ATTR_TXQ_STATS = 265,
    NL80211_ATTR_TXQ_LIMIT = 266,
    NL80211_ATTR_TXQ_MEMORY_LIMIT = 267,
    NL80211_ATTR_TXQ_QUANTUM = 268,
    NL80211_ATTR_HE_CAPABILITY = 269,
    NL80211_ATTR_FTM_RESPONDER = 270,
    NL80211_ATTR_FTM_RESPONDER_STATS = 271,
    NL80211_ATTR_TIMEOUT = 272,
    NL80211_ATTR_PEER_MEASUREMENTS = 273,
    NL80211_ATTR_AIRTIME_WEIGHT = 274,
    NL80211_ATTR_STA_TX_POWER_SETTING = 275,
    NL80211_ATTR_STA_TX_POWER = 276,
    NL80211_ATTR_SAE_PASSWORD = 277,
    NL80211_ATTR_TWT_RESPONDER = 278,
    NL80211_ATTR_HE_OBSS_PD = 279,
    NL80211_ATTR_WIPHY_EDMG_CHANNELS = 280,
    NL80211_ATTR_WIPHY_EDMG_BW_CONFIG = 281,
    NL80211_ATTR_VLAN_ID = 282,
    __NL80211_ATTR_AFTER_LAST = 283,
    NUM_NL80211_ATTR = 283,
    NL80211_ATTR_MAX = 282
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/event.h"
struct wl18xx_event_mailbox {
   __le32 events_vector ;
   u8 number_of_scan_results ;
   u8 number_of_sched_scan_results ;
   __le16 channel_switch_role_id_bitmap ;
   s8 rssi_snr_trigger_metric[8U] ;
   __le32 hlid_removed_bitmap ;
   __le16 rx_ba_role_id_bitmap ;
   __le16 rx_ba_allowed_bitmap ;
   __le16 roc_completed_bitmap ;
   __le16 bss_loss_bitmap ;
   __le16 tx_retry_exceeded_bitmap ;
   __le16 time_sync_tsf_high_msb ;
   __le16 inactive_sta_bitmap ;
   __le16 time_sync_tsf_high_lsb ;
   u8 rx_ba_role_id ;
   u8 rx_ba_link_id ;
   u8 rx_ba_win_size ;
   u8 padding ;
   u8 sc_ssid_len ;
   u8 sc_pwd_len ;
   u8 sc_token_len ;
   u8 padding1 ;
   u8 sc_ssid[32U] ;
   u8 sc_pwd[64U] ;
   u8 sc_token[32U] ;
   u8 sc_sync_channel ;
   u8 sc_sync_band ;
   __le16 time_sync_tsf_low_msb ;
   u8 radar_channel ;
   u8 radar_type ;
   __le16 time_sync_tsf_low_lsb ;
} __attribute__((__packed__));
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 197 
enum hrtimer_restart;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
struct device_private {
   void *driver_data ;
};
#line 164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned long irq_hw_number_t;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct ida {
   struct xarray xa ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/property.h"
typedef u32 phandle;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct property {
   char *name ;
   int length ;
   void *value ;
   struct property *next ;
   unsigned long _flags ;
   struct bin_attribute attr ;
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct device_node {
   char *name ;
   phandle phandle ;
   char *full_name ;
   struct fwnode_handle fwnode ;
   struct property *properties ;
   struct property *deadprops ;
   struct device_node *parent ;
   struct device_node *child ;
   struct device_node *sibling ;
   struct kobject kobj ;
   unsigned long _flags ;
   void *data ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_fwspec {
   struct fwnode_handle *fwnode ;
   int param_count ;
   u32 param[16U] ;
};
#line 68 
enum irq_domain_bus_token {
    DOMAIN_BUS_ANY = 0,
    DOMAIN_BUS_WIRED = 1,
    DOMAIN_BUS_GENERIC_MSI = 2,
    DOMAIN_BUS_PCI_MSI = 3,
    DOMAIN_BUS_PLATFORM_MSI = 4,
    DOMAIN_BUS_NEXUS = 5,
    DOMAIN_BUS_IPI = 6,
    DOMAIN_BUS_FSL_MC_MSI = 7,
    DOMAIN_BUS_TI_SCI_INTA_MSI = 8,
    DOMAIN_BUS_WAKEUP = 9
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain_ops {
   int (*match)(struct irq_domain *, struct device_node *, enum irq_domain_bus_token ) ;
   int (*select)(struct irq_domain *, struct irq_fwspec *, enum irq_domain_bus_token ) ;
   int (*map)(struct irq_domain *, unsigned int , irq_hw_number_t ) ;
   void (*unmap)(struct irq_domain *, unsigned int ) ;
   int (*xlate)(struct irq_domain *, struct device_node *, u32 *, unsigned int , unsigned long *, unsigned int *) ;
   int (*alloc)(struct irq_domain *, unsigned int , unsigned int , void *) ;
   void (*free)(struct irq_domain *, unsigned int , unsigned int ) ;
   int (*activate)(struct irq_domain *, struct irq_data *, bool ) ;
   void (*deactivate)(struct irq_domain *, struct irq_data *) ;
   int (*translate)(struct irq_domain *, struct irq_fwspec *, unsigned long *, unsigned int *) ;
   void (*debug_show)(struct seq_file *, struct irq_domain *, struct irq_data *, int ) ;
};
#line 132 
struct irq_domain_chip_generic;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain {
   struct list_head link ;
   char *name ;
   struct irq_domain_ops *ops ;
   void *host_data ;
   unsigned int flags ;
   unsigned int mapcount ;
   struct fwnode_handle *fwnode ;
   enum irq_domain_bus_token bus_token ;
   struct irq_domain_chip_generic *gc ;
   struct irq_domain *parent ;
   struct dentry *debugfs_file ;
   irq_hw_number_t hwirq_max ;
   unsigned int revmap_direct_max_irq ;
   unsigned int revmap_size ;
   struct xarray revmap_tree ;
   struct mutex revmap_tree_mutex ;
   unsigned int linear_revmap[] ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rtmutex.h"
struct rt_mutex {
   raw_spinlock_t wait_lock ;
   struct rb_root_cached waiters ;
   struct task_struct *owner ;
   int save_state ;
   char *name ;
   char *file ;
   int line ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
struct i2c_msg {
   __u16 addr ;
   __u16 flags ;
   __u16 len ;
   __u8 *buf ;
};
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
union i2c_smbus_data {
   __u8 byte ;
   __u16 word ;
   __u8 block[34U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm;
#line 28 
struct i2c_adapter;
#line 29 
struct i2c_client;
#line 33 
enum i2c_slave_event;
#line 33 
enum i2c_slave_event;
#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_client {
   unsigned short flags ;
   unsigned short addr ;
   char name[20U] ;
   struct i2c_adapter *adapter ;
   struct device dev ;
   int init_irq ;
   int irq ;
   struct list_head detected ;
   int (*slave_cb)(struct i2c_client *, enum i2c_slave_event , u8 *) ;
};
#line 360 
enum i2c_slave_event {
    I2C_SLAVE_READ_REQUESTED = 0,
    I2C_SLAVE_WRITE_REQUESTED = 1,
    I2C_SLAVE_READ_PROCESSED = 2,
    I2C_SLAVE_WRITE_RECEIVED = 3,
    I2C_SLAVE_STOP = 4
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm {
   int (*master_xfer)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*master_xfer_atomic)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*smbus_xfer)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   int (*smbus_xfer_atomic)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   u32 (*functionality)(struct i2c_adapter *) ;
   int (*reg_slave)(struct i2c_client *) ;
   int (*unreg_slave)(struct i2c_client *) ;
};
#line 565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_lock_operations {
   void (*lock_bus)(struct i2c_adapter *, unsigned int ) ;
   int (*trylock_bus)(struct i2c_adapter *, unsigned int ) ;
   void (*unlock_bus)(struct i2c_adapter *, unsigned int ) ;
};
#line 618 
struct gpio_desc;
#line 618  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_bus_recovery_info {
   int (*recover_bus)(struct i2c_adapter *) ;
   int (*get_scl)(struct i2c_adapter *) ;
   void (*set_scl)(struct i2c_adapter *, int ) ;
   int (*get_sda)(struct i2c_adapter *) ;
   void (*set_sda)(struct i2c_adapter *, int ) ;
   int (*get_bus_free)(struct i2c_adapter *) ;
   void (*prepare_recovery)(struct i2c_adapter *) ;
   void (*unprepare_recovery)(struct i2c_adapter *) ;
   struct gpio_desc *scl_gpiod ;
   struct gpio_desc *sda_gpiod ;
};
#line 661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter_quirks {
   u64 flags ;
   int max_num_msgs ;
   u16 max_write_len ;
   u16 max_read_len ;
   u16 max_comb_1st_msg_len ;
   u16 max_comb_2nd_msg_len ;
};
#line 692  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter {
   struct module *owner ;
   unsigned int class ;
   struct i2c_algorithm *algo ;
   void *algo_data ;
   struct i2c_lock_operations *lock_ops ;
   struct rt_mutex bus_lock ;
   struct rt_mutex mux_lock ;
   int timeout ;
   int retries ;
   struct device dev ;
   unsigned long locked_flags ;
   int nr ;
   char name[48U] ;
   struct completion dev_released ;
   struct mutex userspace_clients_lock ;
   struct list_head userspace_clients ;
   struct i2c_bus_recovery_info *bus_recovery_info ;
   struct i2c_adapter_quirks *quirks ;
   struct irq_domain *host_notify_domain ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cdev.h"
struct cdev {
   struct kobject kobj ;
   struct module *owner ;
   struct file_operations *ops ;
   struct list_head list ;
   dev_t dev ;
   unsigned int count ;
} __attribute__((__designated_init__));
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-common.h"
struct v4l2_edid {
   __u32 pad ;
   __u32 start_block ;
   __u32 blocks ;
   __u32 reserved[5U] ;
   __u8 *edid ;
};
#line 754 
enum v4l2_priority {
    V4L2_PRIORITY_UNSET = 0,
    V4L2_PRIORITY_BACKGROUND = 1,
    V4L2_PRIORITY_INTERACTIVE = 2,
    V4L2_PRIORITY_RECORD = 3,
    V4L2_PRIORITY_DEFAULT = 2
};
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_rect {
   __s32 left ;
   __s32 top ;
   __u32 width ;
   __u32 height ;
};
#line 420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_fract {
   __u32 numerator ;
   __u32 denominator ;
};
#line 1212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
typedef __u64 v4l2_std_id;
#line 1394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings {
   __u32 width ;
   __u32 height ;
   __u32 interlaced ;
   __u32 polarities ;
   __u64 pixelclock ;
   __u32 hfrontporch ;
   __u32 hsync ;
   __u32 hbackporch ;
   __u32 vfrontporch ;
   __u32 vsync ;
   __u32 vbackporch ;
   __u32 il_vfrontporch ;
   __u32 il_vsync ;
   __u32 il_vbackporch ;
   __u32 standards ;
   __u32 flags ;
   struct v4l2_fract picture_aspect ;
   __u8 cea861_vic ;
   __u8 hdmi_vic ;
   __u8 reserved[46U] ;
} __attribute__((__packed__));
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_10083 {
   struct v4l2_bt_timings bt ;
   __u32 reserved[32U] ;
};
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings {
   __u32 type ;
   union __anonunion_10083 __anonCompField_v4l2_dv_timings_77 ;
} __attribute__((__packed__));
#line 1536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_enum_dv_timings {
   __u32 index ;
   __u32 pad ;
   __u32 reserved[2U] ;
   struct v4l2_dv_timings timings ;
};
#line 1554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings_cap {
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u64 min_pixelclock ;
   __u64 max_pixelclock ;
   __u32 standards ;
   __u32 capabilities ;
   __u32 reserved[16U] ;
} __attribute__((__packed__));
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_10084 {
   struct v4l2_bt_timings_cap bt ;
   __u32 raw_data[32U] ;
};
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings_cap {
   __u32 type ;
   __u32 pad ;
   __u32 reserved[2U] ;
   union __anonunion_10084 __anonCompField_v4l2_dv_timings_cap_78 ;
};
#line 1803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_tuner {
   __u32 index ;
   __u8 name[32U] ;
   __u32 type ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 rxsubchans ;
   __u32 audmode ;
   __s32 signal ;
   __s32 afc ;
   __u32 reserved[4U] ;
};
#line 1817  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_modulator {
   __u32 index ;
   __u8 name[32U] ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 txsubchans ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 1860  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency {
   __u32 tuner ;
   __u32 type ;
   __u32 frequency ;
   __u32 reserved[8U] ;
};
#line 1871  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency_band {
   __u32 tuner ;
   __u32 type ;
   __u32 index ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 modulation ;
   __u32 reserved[9U] ;
};
#line 2043  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_vbi_format {
   __u32 sampling_rate ;
   __u32 offset ;
   __u32 samples_per_line ;
   __u32 sample_format ;
   __s32 start[2U] ;
   __u32 count[2U] ;
   __u32 flags ;
   __u32 reserved[2U] ;
};
#line 2071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_format {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 io_size ;
   __u32 reserved[2U] ;
};
#line 2095  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_cap {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 2106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_data {
   __u32 id ;
   __u32 field ;
   __u32 line ;
   __u32 reserved ;
   __u8 data[48U] ;
};
#line 2350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_event_subscription {
   __u32 type ;
   __u32 id ;
   __u32 flags ;
   __u32 reserved[5U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_10100 {
   __u32 addr ;
   char name[32U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_match {
   __u32 type ;
   union __anonunion_10100 __anonCompField_v4l2_dbg_match_87 ;
} __attribute__((__packed__));
#line 2383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_register {
   struct v4l2_dbg_match match ;
   __u32 size ;
   __u64 reg ;
   __u64 val ;
} __attribute__((__packed__));
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_device;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_gobj {
   struct media_device *mdev ;
   u32 id ;
   struct list_head list ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_enum {
   unsigned long *bmap ;
   int idx_max ;
};
#line 88 
struct media_entity;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_stack_10104 {
   struct media_entity *entity ;
   struct list_head *link ;
};
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_graph {
   struct __anonstruct_stack_10104 stack[16U] ;
   struct media_entity_enum ent_enum ;
   int top ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pipeline {
   int streaming_count ;
   struct media_graph graph ;
};
#line 132 
struct media_pad;
#line 132 
struct media_interface;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_10105 {
   struct media_gobj *gobj0 ;
   struct media_pad *source ;
   struct media_interface *intf ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_10106 {
   struct media_gobj *gobj1 ;
   struct media_pad *sink ;
   struct media_entity *entity ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_link {
   struct media_gobj graph_obj ;
   struct list_head list ;
   union __anonunion_10105 __anonCompField_media_link_90 ;
   union __anonunion_10106 __anonCompField_media_link_91 ;
   struct media_link *reverse ;
   unsigned long flags ;
   bool is_backlink ;
};
#line 149 
enum media_pad_signal_type {
    PAD_SIGNAL_DEFAULT = 0,
    PAD_SIGNAL_ANALOG = 1,
    PAD_SIGNAL_DV = 2,
    PAD_SIGNAL_AUDIO = 3
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pad {
   struct media_gobj graph_obj ;
   struct media_entity *entity ;
   u16 index ;
   enum media_pad_signal_type sig_type ;
   unsigned long flags ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_operations {
   int (*get_fwnode_pad)(struct fwnode_endpoint *) ;
   int (*link_setup)(struct media_entity *, struct media_pad *, struct media_pad *, u32 ) ;
   int (*link_validate)(struct media_link *) ;
};
#line 221 
enum media_entity_type {
    MEDIA_ENTITY_TYPE_BASE = 0,
    MEDIA_ENTITY_TYPE_VIDEO_DEVICE = 1,
    MEDIA_ENTITY_TYPE_V4L2_SUBDEV = 2
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_dev_10108 {
   u32 major ;
   u32 minor ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_info_10107 {
   struct __anonstruct_dev_10108 dev ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity {
   struct media_gobj graph_obj ;
   char *name ;
   enum media_entity_type obj_type ;
   u32 function ;
   unsigned long flags ;
   u16 num_pads ;
   u16 num_links ;
   u16 num_backlinks ;
   int internal_idx ;
   struct media_pad *pads ;
   struct list_head links ;
   struct media_entity_operations *ops ;
   int stream_count ;
   int use_count ;
   struct media_pipeline *pipe ;
   union __anonunion_info_10107 info ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_interface {
   struct media_gobj graph_obj ;
   struct list_head links ;
   u32 type ;
   u32 flags ;
};
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_intf_devnode {
   struct media_interface intf ;
   u32 major ;
   u32 minor ;
};
#line 1087 
enum vfl_devnode_type {
    VFL_TYPE_GRABBER = 0,
    VFL_TYPE_VBI = 1,
    VFL_TYPE_RADIO = 2,
    VFL_TYPE_SUBDEV = 3,
    VFL_TYPE_SDR = 4,
    VFL_TYPE_TOUCH = 5,
    VFL_TYPE_MAX = 6
};
#line 1097 
enum vfl_devnode_direction {
    VFL_DIR_RX = 0,
    VFL_DIR_TX = 1,
    VFL_DIR_M2M = 2
};
#line 1104 
struct video_device;
#line 1105 
struct v4l2_device;
#line 1106 
struct v4l2_ctrl_handler;
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_prio_state {
   atomic_t prios[4U] ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl32)(struct file *, unsigned int , unsigned long ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 256 
struct vb2_queue;
#line 256 
struct v4l2_ioctl_ops;
#line 256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct video_device {
   struct media_entity entity ;
   struct media_intf_devnode *intf_devnode ;
   struct media_pipeline pipe ;
   struct v4l2_file_operations *fops ;
   u32 device_caps ;
   struct device dev ;
   struct cdev *cdev ;
   struct v4l2_device *v4l2_dev ;
   struct device *dev_parent ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct vb2_queue *queue ;
   struct v4l2_prio_state *prio ;
   char name[32U] ;
   enum vfl_devnode_type vfl_type ;
   enum vfl_devnode_direction vfl_dir ;
   int minor ;
   u16 num ;
   unsigned long flags ;
   int index ;
   spinlock_t fh_lock ;
   struct list_head fh_list ;
   int dev_debug ;
   v4l2_std_id tvnorms ;
   void (*release)(struct video_device *) ;
   struct v4l2_ioctl_ops *ioctl_ops ;
   unsigned long valid_ioctls[3U] ;
   struct mutex *lock ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_subdev;
#line 96 
struct v4l2_subdev_ops;
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_priv_tun_config {
   int tuner ;
   void *priv ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_devnode {
   struct media_device *media_dev ;
   struct media_file_operations *fops ;
   struct device dev ;
   struct cdev cdev ;
   struct device *parent ;
   int minor ;
   unsigned long flags ;
   void (*release)(struct media_devnode *) ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_request;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device_ops {
   int (*link_notify)(struct media_link *, u32 , unsigned int ) ;
   struct media_request *(*req_alloc)(struct media_device *) ;
   void (*req_free)(struct media_request *) ;
   int (*req_validate)(struct media_request *) ;
   void (*req_queue)(struct media_request *) ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device {
   struct device *dev ;
   struct media_devnode *devnode ;
   char model[32U] ;
   char driver_name[32U] ;
   char serial[40U] ;
   char bus_info[32U] ;
   u32 hw_revision ;
   u64 topology_version ;
   u32 id ;
   struct ida entity_internal_idx ;
   int entity_internal_idx_max ;
   struct list_head entities ;
   struct list_head interfaces ;
   struct list_head pads ;
   struct list_head links ;
   struct list_head entity_notify ;
   struct mutex graph_mutex ;
   struct media_graph pm_count_walk ;
   void *source_priv ;
   int (*enable_source)(struct media_entity *, struct media_pipeline *) ;
   void (*disable_source)(struct media_entity *) ;
   struct media_device_ops *ops ;
   struct mutex req_queue_mutex ;
   atomic_t request_id ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-mediabus.h"
struct v4l2_mbus_framefmt {
   __u32 width ;
   __u32 height ;
   __u32 code ;
   __u32 field ;
   __u32 colorspace ;
   __u16 ycbcr_enc ;
   __u16 quantization ;
   __u16 xfer_func ;
   __u16 reserved[11U] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_format {
   __u32 which ;
   __u32 pad ;
   struct v4l2_mbus_framefmt format ;
   __u32 reserved[8U] ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_mbus_code_enum {
   __u32 pad ;
   __u32 index ;
   __u32 code ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_size_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval {
   __u32 pad ;
   struct v4l2_fract interval ;
   __u32 reserved[9U] ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 width ;
   __u32 height ;
   struct v4l2_fract interval ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_selection {
   __u32 which ;
   __u32 pad ;
   __u32 target ;
   __u32 flags ;
   struct v4l2_rect r ;
   __u32 reserved[8U] ;
};
#line 157 
struct v4l2_async_notifier;
#line 158 
enum v4l2_async_match_type {
    V4L2_ASYNC_MATCH_CUSTOM = 0,
    V4L2_ASYNC_MATCH_DEVNAME = 1,
    V4L2_ASYNC_MATCH_I2C = 2,
    V4L2_ASYNC_MATCH_FWNODE = 3
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_i2c_10122 {
   int adapter_id ;
   unsigned short address ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_custom_10123 {
   bool (*match)(struct device *, struct v4l2_async_subdev *) ;
   void *priv ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
union __anonunion_match_10121 {
   struct fwnode_handle *fwnode ;
   char *device_name ;
   struct __anonstruct_i2c_10122 i2c ;
   struct __anonstruct_custom_10123 custom ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_subdev {
   enum v4l2_async_match_type match_type ;
   union __anonunion_match_10121 match ;
   struct list_head list ;
   struct list_head asd_list ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier_operations {
   int (*bound)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
   int (*complete)(struct v4l2_async_notifier *) ;
   void (*unbind)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier {
   struct v4l2_async_notifier_operations *ops ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev *sd ;
   struct v4l2_async_notifier *parent ;
   struct list_head asd_list ;
   struct list_head waiting ;
   struct list_head done ;
   struct list_head list ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_m2m_ctx;
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_fh {
   struct list_head list ;
   struct video_device *vdev ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   enum v4l2_priority prio ;
   wait_queue_head_t wait ;
   struct mutex subscribe_lock ;
   struct list_head subscribed ;
   struct list_head available ;
   unsigned int navailable ;
   u32 sequence ;
   struct v4l2_m2m_ctx *m2m_ctx ;
};
#line 162 
enum v4l2_mbus_type {
    V4L2_MBUS_UNKNOWN = 0,
    V4L2_MBUS_PARALLEL = 1,
    V4L2_MBUS_BT656 = 2,
    V4L2_MBUS_CSI1 = 3,
    V4L2_MBUS_CCP2 = 4,
    V4L2_MBUS_CSI2_DPHY = 5,
    V4L2_MBUS_CSI2_CPHY = 6
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-mediabus.h"
struct v4l2_mbus_config {
   enum v4l2_mbus_type type ;
   unsigned int flags ;
};
#line 184 
struct v4l2_subdev_fh;
#line 185 
struct tuner_setup;
#line 186 
struct v4l2_mbus_frame_desc;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_decode_vbi_line {
   u32 is_second_field ;
   u8 *p ;
   u32 line ;
   u32 type ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_io_pin_config {
   u32 flags ;
   u8 pin ;
   u8 function ;
   u8 value ;
   u8 strength ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_core_ops {
   int (*log_status)(struct v4l2_subdev *) ;
   int (*s_io_pin_config)(struct v4l2_subdev *, size_t , struct v4l2_subdev_io_pin_config *) ;
   int (*init)(struct v4l2_subdev *, u32 ) ;
   int (*load_fw)(struct v4l2_subdev *) ;
   int (*reset)(struct v4l2_subdev *, u32 ) ;
   int (*s_gpio)(struct v4l2_subdev *, u32 ) ;
   long (*ioctl)(struct v4l2_subdev *, unsigned int , void *) ;
   long (*compat_ioctl32)(struct v4l2_subdev *, unsigned int , unsigned long ) ;
   int (*g_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_power)(struct v4l2_subdev *, int ) ;
   int (*interrupt_service_routine)(struct v4l2_subdev *, u32 , bool *) ;
   int (*subscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
   int (*unsubscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
};
#line 264  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_tuner_ops {
   int (*standby)(struct v4l2_subdev *) ;
   int (*s_radio)(struct v4l2_subdev *) ;
   int (*s_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*g_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*enum_freq_bands)(struct v4l2_subdev *, struct v4l2_frequency_band *) ;
   int (*g_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*s_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*g_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_type_addr)(struct v4l2_subdev *, struct tuner_setup *) ;
   int (*s_config)(struct v4l2_subdev *, struct v4l2_priv_tun_config *) ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_audio_ops {
   int (*s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_i2s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
};
#line 310 
enum v4l2_mbus_frame_desc_flags {
    V4L2_MBUS_FRAME_DESC_FL_LEN_MAX = 1,
    V4L2_MBUS_FRAME_DESC_FL_BLOB = 2
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc_entry {
   enum v4l2_mbus_frame_desc_flags flags ;
   u32 pixelcode ;
   u32 length ;
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc {
   struct v4l2_mbus_frame_desc_entry entry[4U] ;
   unsigned short num_entries ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_video_ops {
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_crystal_freq)(struct v4l2_subdev *, u32 , u32 ) ;
   int (*g_std)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*s_std)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*s_std_output)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*g_std_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*querystd)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_input_status)(struct v4l2_subdev *, u32 *) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
   int (*g_pixelaspect)(struct v4l2_subdev *, struct v4l2_fract *) ;
   int (*g_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*query_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_rx_buffer)(struct v4l2_subdev *, void *, unsigned int *) ;
};
#line 481  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_vbi_ops {
   int (*decode_vbi_line)(struct v4l2_subdev *, struct v4l2_decode_vbi_line *) ;
   int (*s_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_sliced_vbi_cap)(struct v4l2_subdev *, struct v4l2_sliced_vbi_cap *) ;
   int (*s_raw_fmt)(struct v4l2_subdev *, struct v4l2_vbi_format *) ;
   int (*g_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
   int (*s_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
};
#line 501  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_sensor_ops {
   int (*g_skip_top_lines)(struct v4l2_subdev *, u32 *) ;
   int (*g_skip_frames)(struct v4l2_subdev *, u32 *) ;
};
#line 505 
enum v4l2_subdev_ir_mode {
    V4L2_SUBDEV_IR_MODE_PULSE_WIDTH = 0
};
#line 540  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_parameters {
   unsigned int bytes_per_data_element ;
   enum v4l2_subdev_ir_mode mode ;
   bool enable ;
   bool interrupt_enable ;
   bool shutdown ;
   bool modulation ;
   u32 max_pulse_width ;
   unsigned int carrier_freq ;
   unsigned int duty_cycle ;
   bool invert_level ;
   bool invert_carrier_sense ;
   u32 noise_filter_min_width ;
   unsigned int carrier_range_lower ;
   unsigned int carrier_range_upper ;
   u32 resolution ;
};
#line 599  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_ops {
   int (*rx_read)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*rx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*rx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_write)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*tx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
};
#line 630  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_config {
   struct v4l2_mbus_framefmt try_fmt ;
   struct v4l2_rect try_crop ;
   struct v4l2_rect try_compose ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_ops {
   int (*init_cfg)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *) ;
   int (*enum_mbus_code)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_mbus_code_enum *) ;
   int (*enum_frame_size)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_size_enum *) ;
   int (*enum_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_interval_enum *) ;
   int (*get_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*set_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*get_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*set_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*get_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*set_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*dv_timings_cap)(struct v4l2_subdev *, struct v4l2_dv_timings_cap *) ;
   int (*enum_dv_timings)(struct v4l2_subdev *, struct v4l2_enum_dv_timings *) ;
   int (*link_validate)(struct v4l2_subdev *, struct media_link *, struct v4l2_subdev_format *, struct v4l2_subdev_format *) ;
   int (*get_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
   int (*set_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
};
#line 727  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ops {
   struct v4l2_subdev_core_ops *core ;
   struct v4l2_subdev_tuner_ops *tuner ;
   struct v4l2_subdev_audio_ops *audio ;
   struct v4l2_subdev_video_ops *video ;
   struct v4l2_subdev_vbi_ops *vbi ;
   struct v4l2_subdev_ir_ops *ir ;
   struct v4l2_subdev_sensor_ops *sensor ;
   struct v4l2_subdev_pad_ops *pad ;
};
#line 765  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_internal_ops {
   int (*registered)(struct v4l2_subdev *) ;
   void (*unregistered)(struct v4l2_subdev *) ;
   int (*open)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   int (*close)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   void (*release)(struct v4l2_subdev *) ;
};
#line 772 
struct regulator_bulk_data;
#line 797  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_platform_data {
   struct regulator_bulk_data *regulators ;
   int num_regulators ;
   void *host_priv ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev {
   struct media_entity entity ;
   struct list_head list ;
   struct module *owner ;
   bool owner_v4l2_dev ;
   u32 flags ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev_ops *ops ;
   struct v4l2_subdev_internal_ops *internal_ops ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   char name[32U] ;
   u32 grp_id ;
   void *dev_priv ;
   void *host_priv ;
   struct video_device *devnode ;
   struct device *dev ;
   struct fwnode_handle *fwnode ;
   struct list_head async_list ;
   struct v4l2_async_subdev *asd ;
   struct v4l2_async_notifier *notifier ;
   struct v4l2_async_notifier *subdev_notifier ;
   struct v4l2_subdev_platform_data *pdata ;
};
#line 906  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_fh {
   struct v4l2_fh vfh ;
   struct module *owner ;
   struct v4l2_subdev_pad_config *pad ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-device.h"
struct v4l2_device {
   struct device *dev ;
   struct media_device *mdev ;
   struct list_head subdevs ;
   spinlock_t lock ;
   char name[36U] ;
   void (*notify)(struct v4l2_subdev *, unsigned int , void *) ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct v4l2_prio_state prio ;
   struct kref ref ;
   void (*release)(struct v4l2_device *) ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
struct ptp_system_timestamp {
   struct timespec64 pre_ts ;
   struct timespec64 post_ts ;
};
#line 277 
struct dma_chan;
#line 279 
struct spi_controller;
#line 280 
struct spi_transfer;
#line 281 
struct spi_controller_mem_ops;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_statistics {
   spinlock_t lock ;
   unsigned long messages ;
   unsigned long transfers ;
   unsigned long errors ;
   unsigned long timedout ;
   unsigned long spi_sync ;
   unsigned long spi_sync_immediate ;
   unsigned long spi_async ;
   unsigned long long bytes ;
   unsigned long long bytes_rx ;
   unsigned long long bytes_tx ;
   unsigned long transfer_bytes_histo[17U] ;
   unsigned long transfers_split_maxsize ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_delay {
   u16 value ;
   u8 unit ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_device {
   struct device dev ;
   struct spi_controller *controller ;
   struct spi_controller *master ;
   u32 max_speed_hz ;
   u8 chip_select ;
   u8 bits_per_word ;
   bool rt ;
   u32 mode ;
   int irq ;
   void *controller_state ;
   void *controller_data ;
   char modalias[32U] ;
   char *driver_override ;
   int cs_gpio ;
   struct gpio_desc *cs_gpiod ;
   struct spi_delay word_delay ;
   struct spi_statistics statistics ;
};
#line 247 
struct spi_message;
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_controller {
   struct device dev ;
   struct list_head list ;
   s16 bus_num ;
   u16 num_chipselect ;
   u16 dma_alignment ;
   u32 mode_bits ;
   u32 bits_per_word_mask ;
   u32 min_speed_hz ;
   u32 max_speed_hz ;
   u16 flags ;
   bool slave ;
   size_t (*max_transfer_size)(struct spi_device *) ;
   size_t (*max_message_size)(struct spi_device *) ;
   struct mutex io_mutex ;
   spinlock_t bus_lock_spinlock ;
   struct mutex bus_lock_mutex ;
   bool bus_lock_flag ;
   int (*setup)(struct spi_device *) ;
   int (*set_cs_timing)(struct spi_device *, struct spi_delay *, struct spi_delay *, struct spi_delay *) ;
   int (*transfer)(struct spi_device *, struct spi_message *) ;
   void (*cleanup)(struct spi_device *) ;
   bool (*can_dma)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   bool queued ;
   struct kthread_worker kworker ;
   struct task_struct *kworker_task ;
   struct kthread_work pump_messages ;
   spinlock_t queue_lock ;
   struct list_head queue ;
   struct spi_message *cur_msg ;
   bool idling ;
   bool busy ;
   bool running ;
   bool rt ;
   bool auto_runtime_pm ;
   bool cur_msg_prepared ;
   bool cur_msg_mapped ;
   struct completion xfer_completion ;
   size_t max_dma_len ;
   int (*prepare_transfer_hardware)(struct spi_controller *) ;
   int (*transfer_one_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_transfer_hardware)(struct spi_controller *) ;
   int (*prepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*slave_abort)(struct spi_controller *) ;
   void (*set_cs)(struct spi_device *, bool ) ;
   int (*transfer_one)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   void (*handle_err)(struct spi_controller *, struct spi_message *) ;
   struct spi_controller_mem_ops *mem_ops ;
   struct spi_delay cs_setup ;
   struct spi_delay cs_hold ;
   struct spi_delay cs_inactive ;
   int *cs_gpios ;
   struct gpio_desc **cs_gpiods ;
   bool use_gpio_descriptors ;
   struct spi_statistics statistics ;
   struct dma_chan *dma_tx ;
   struct dma_chan *dma_rx ;
   void *dummy_rx ;
   void *dummy_tx ;
   int (*fw_translate_cs)(struct spi_controller *, unsigned int ) ;
   bool ptp_sts_supported ;
   unsigned long irq_flags ;
};
#line 890  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_transfer {
   void *tx_buf ;
   void *rx_buf ;
   unsigned int len ;
   dma_addr_t tx_dma ;
   dma_addr_t rx_dma ;
   struct sg_table tx_sg ;
   struct sg_table rx_sg ;
   unsigned int cs_change : 1 ;
   unsigned int tx_nbits : 3 ;
   unsigned int rx_nbits : 3 ;
   u8 bits_per_word ;
   u16 delay_usecs ;
   struct spi_delay delay ;
   struct spi_delay cs_change_delay ;
   struct spi_delay word_delay ;
   u32 speed_hz ;
   u32 effective_speed_hz ;
   unsigned int ptp_sts_word_pre ;
   unsigned int ptp_sts_word_post ;
   struct ptp_system_timestamp *ptp_sts ;
   bool timestamped_pre ;
   bool timestamped_post ;
   struct list_head transfer_list ;
};
#line 961  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_message {
   struct list_head transfers ;
   struct spi_device *spi ;
   unsigned int is_dma_mapped : 1 ;
   void (*complete)(void *) ;
   void *context ;
   unsigned int frame_length ;
   unsigned int actual_length ;
   int status ;
   struct list_head queue ;
   void *state ;
   struct list_head resources ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fix_screeninfo {
   char id[16U] ;
   unsigned long smem_start ;
   __u32 smem_len ;
   __u32 type ;
   __u32 type_aux ;
   __u32 visual ;
   __u16 xpanstep ;
   __u16 ypanstep ;
   __u16 ywrapstep ;
   __u32 line_length ;
   unsigned long mmio_start ;
   __u32 mmio_len ;
   __u32 accel ;
   __u16 capabilities ;
   __u16 reserved[2U] ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_bitfield {
   __u32 offset ;
   __u32 length ;
   __u32 msb_right ;
};
#line 241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_var_screeninfo {
   __u32 xres ;
   __u32 yres ;
   __u32 xres_virtual ;
   __u32 yres_virtual ;
   __u32 xoffset ;
   __u32 yoffset ;
   __u32 bits_per_pixel ;
   __u32 grayscale ;
   struct fb_bitfield red ;
   struct fb_bitfield green ;
   struct fb_bitfield blue ;
   struct fb_bitfield transp ;
   __u32 nonstd ;
   __u32 activate ;
   __u32 height ;
   __u32 width ;
   __u32 accel_flags ;
   __u32 pixclock ;
   __u32 left_margin ;
   __u32 right_margin ;
   __u32 upper_margin ;
   __u32 lower_margin ;
   __u32 hsync_len ;
   __u32 vsync_len ;
   __u32 sync ;
   __u32 vmode ;
   __u32 rotate ;
   __u32 colorspace ;
   __u32 reserved[4U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cmap {
   __u32 start ;
   __u32 len ;
   __u16 *red ;
   __u16 *green ;
   __u16 *blue ;
   __u16 *transp ;
};
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_copyarea {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 sx ;
   __u32 sy ;
};
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fillrect {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 color ;
   __u32 rop ;
};
#line 359  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_image {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 fg_color ;
   __u32 bg_color ;
   __u8 depth ;
   char *data ;
   struct fb_cmap cmap ;
};
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fbcurpos {
   __u16 x ;
   __u16 y ;
};
#line 387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cursor {
   __u16 set ;
   __u16 enable ;
   __u16 rop ;
   char *mask ;
   struct fbcurpos hot ;
   struct fb_image image ;
};
#line 400 
enum backlight_type {
    BACKLIGHT_RAW = 1,
    BACKLIGHT_PLATFORM = 2,
    BACKLIGHT_FIRMWARE = 3,
    BACKLIGHT_TYPE_MAX = 4
};
#line 412 
enum backlight_scale {
    BACKLIGHT_SCALE_UNKNOWN = 0,
    BACKLIGHT_SCALE_LINEAR = 1,
    BACKLIGHT_SCALE_NON_LINEAR = 2
};
#line 418 
struct backlight_device;
#line 419 
struct fb_info;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_ops {
   unsigned int options ;
   int (*update_status)(struct backlight_device *) ;
   int (*get_brightness)(struct backlight_device *) ;
   int (*check_fb)(struct backlight_device *, struct fb_info *) ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_properties {
   int brightness ;
   int max_brightness ;
   int power ;
   int fb_blank ;
   enum backlight_type type ;
   unsigned int state ;
   enum backlight_scale scale ;
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_device {
   struct backlight_properties props ;
   struct mutex update_lock ;
   struct mutex ops_lock ;
   struct backlight_ops *ops ;
   struct notifier_block fb_notif ;
   struct list_head entry ;
   struct device dev ;
   bool fb_bl_on[32U] ;
   int use_count ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_chroma {
   __u32 redx ;
   __u32 greenx ;
   __u32 bluex ;
   __u32 whitex ;
   __u32 redy ;
   __u32 greeny ;
   __u32 bluey ;
   __u32 whitey ;
};
#line 63 
struct fb_videomode;
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_monspecs {
   struct fb_chroma chroma ;
   struct fb_videomode *modedb ;
   __u8 manufacturer[4U] ;
   __u8 monitor[14U] ;
   __u8 serial_no[14U] ;
   __u8 ascii[14U] ;
   __u32 modedb_len ;
   __u32 model ;
   __u32 serial ;
   __u32 year ;
   __u32 week ;
   __u32 hfmin ;
   __u32 hfmax ;
   __u32 dclkmin ;
   __u32 dclkmax ;
   __u16 input ;
   __u16 dpms ;
   __u16 signal ;
   __u16 vfmin ;
   __u16 vfmax ;
   __u16 gamma ;
   __u16 gtf : 1 ;
   __u16 misc ;
   __u8 version ;
   __u8 revision ;
   __u8 max_x ;
   __u8 max_y ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_blit_caps {
   u32 x ;
   u32 y ;
   u32 len ;
   u32 flags ;
};
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_pixmap {
   u8 *addr ;
   u32 size ;
   u32 offset ;
   u32 buf_align ;
   u32 scan_align ;
   u32 access_align ;
   u32 flags ;
   u32 blit_x ;
   u32 blit_y ;
   void (*writeio)(struct fb_info *, void *, void *, unsigned int ) ;
   void (*readio)(struct fb_info *, void *, void *, unsigned int ) ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_deferred_io {
   unsigned long delay ;
   struct mutex lock ;
   struct list_head pagelist ;
   void (*first_io)(struct fb_info *) ;
   void (*deferred_io)(struct fb_info *, struct list_head *) ;
};
#line 228  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_ops {
   struct module *owner ;
   int (*fb_open)(struct fb_info *, int ) ;
   int (*fb_release)(struct fb_info *, int ) ;
   ssize_t (*fb_read)(struct fb_info *, char *, size_t , loff_t *) ;
   ssize_t (*fb_write)(struct fb_info *, char *, size_t , loff_t *) ;
   int (*fb_check_var)(struct fb_var_screeninfo *, struct fb_info *) ;
   int (*fb_set_par)(struct fb_info *) ;
   int (*fb_setcolreg)(unsigned int , unsigned int , unsigned int , unsigned int , unsigned int , struct fb_info *) ;
   int (*fb_setcmap)(struct fb_cmap *, struct fb_info *) ;
   int (*fb_blank)(int , struct fb_info *) ;
   int (*fb_pan_display)(struct fb_var_screeninfo *, struct fb_info *) ;
   void (*fb_fillrect)(struct fb_info *, struct fb_fillrect *) ;
   void (*fb_copyarea)(struct fb_info *, struct fb_copyarea *) ;
   void (*fb_imageblit)(struct fb_info *, struct fb_image *) ;
   int (*fb_cursor)(struct fb_info *, struct fb_cursor *) ;
   int (*fb_sync)(struct fb_info *) ;
   int (*fb_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_compat_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_mmap)(struct fb_info *, struct vm_area_struct *) ;
   void (*fb_get_caps)(struct fb_info *, struct fb_blit_caps *, struct fb_var_screeninfo *) ;
   void (*fb_destroy)(struct fb_info *) ;
   int (*fb_debug_enter)(struct fb_info *) ;
   int (*fb_debug_leave)(struct fb_info *) ;
};
#line 306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilemap {
   __u32 width ;
   __u32 height ;
   __u32 depth ;
   __u32 length ;
   __u8 *data ;
};
#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilerect {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 index ;
   __u32 fg ;
   __u32 bg ;
   __u32 rop ;
};
#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilearea {
   __u32 sx ;
   __u32 sy ;
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tileblit {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 fg ;
   __u32 bg ;
   __u32 length ;
   __u32 *indices ;
};
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilecursor {
   __u32 sx ;
   __u32 sy ;
   __u32 mode ;
   __u32 shape ;
   __u32 fg ;
   __u32 bg ;
};
#line 355  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tile_ops {
   void (*fb_settile)(struct fb_info *, struct fb_tilemap *) ;
   void (*fb_tilecopy)(struct fb_info *, struct fb_tilearea *) ;
   void (*fb_tilefill)(struct fb_info *, struct fb_tilerect *) ;
   void (*fb_tileblit)(struct fb_info *, struct fb_tileblit *) ;
   void (*fb_tilecursor)(struct fb_info *, struct fb_tilecursor *) ;
   int (*fb_get_tilemax)(struct fb_info *) ;
};
#line 499  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct aperture {
   resource_size_t base ;
   resource_size_t size ;
};
#line 497  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct apertures_struct {
   unsigned int count ;
   struct aperture ranges[0U] ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
union __anonunion_11024 {
   char *screen_base ;
   char *screen_buffer ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_info {
   atomic_t count ;
   int node ;
   int flags ;
   int fbcon_rotate_hint ;
   struct mutex lock ;
   struct mutex mm_lock ;
   struct fb_var_screeninfo var ;
   struct fb_fix_screeninfo fix ;
   struct fb_monspecs monspecs ;
   struct work_struct queue ;
   struct fb_pixmap pixmap ;
   struct fb_pixmap sprite ;
   struct fb_cmap cmap ;
   struct list_head modelist ;
   struct fb_videomode *mode ;
   struct backlight_device *bl_dev ;
   struct mutex bl_curve_mutex ;
   u8 bl_curve[128U] ;
   struct delayed_work deferred_work ;
   struct fb_deferred_io *fbdefio ;
   struct fb_ops *fbops ;
   struct device *device ;
   struct device *dev ;
   int class_flag ;
   struct fb_tile_ops *tileops ;
   union __anonunion_11024 __anonCompField_fb_info_73 ;
   unsigned long screen_size ;
   void *pseudo_palette ;
   u32 state ;
   void *fbcon_par ;
   void *par ;
   struct apertures_struct *apertures ;
   bool skip_vt_switch ;
};
#line 767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_videomode {
   char *name ;
   u32 refresh ;
   u32 xres ;
   u32 yres ;
   u32 pixclock ;
   u32 left_margin ;
   u32 right_margin ;
   u32 upper_margin ;
   u32 lower_margin ;
   u32 hsync_len ;
   u32 vsync_len ;
   u32 sync ;
   u32 vmode ;
   u32 flag ;
};
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct ldv_kmem_cache {
   char *name ;
   unsigned int size ;
};
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
typedef unsigned long pthread_t;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
union pthread_attr_t {
   char __size[56U] ;
   long __align ;
};
#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
typedef union pthread_attr_t pthread_attr_t;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 16  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 {
   struct file_operations *arg0 ;
   int signal_pending ;
};
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_platform_instance_wl18xx_driver_140 {
   struct platform_driver *arg0 ;
   int signal_pending ;
};
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/inline_asm.h"
#line 22 
void ldv_inline_asm(void);
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kasan-checks.h"
__inline static bool kasan_check_read(void *p, unsigned int size)
{
  #line 36 
  return (_Bool)1;
}

#line 204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool constant_test_bit(long nr, unsigned long *addr)
{
  #line 207 
  return (_Bool)(((*(addr + (unsigned long)(nr >> 6)) >> (nr & 63L)) & 1UL) != 0UL);
}

#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool variable_test_bit(long nr, unsigned long *addr)
{
  #line 212 
  bool oldbit;
  #line 213 
  ldv_inline_asm();
  #line 219 
  return oldbit;
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 114  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/io.i.aux"
static void cif_set_bit(long nr, unsigned long *addr);
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-non-atomic.h"
__inline static bool test_bit(long nr, unsigned long *addr)
{
  #line 111 
  int tmp_1;
  #line 110 
  kasan_check_read((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 111 
  if (0 != 0) {
    #line 111 
    tmp_1 = (int)constant_test_bit(nr,addr) != 0;
  }
  else {
    #line 111 
    tmp_1 = (int)variable_test_bit(nr,addr) != 0;
  }
  #line 111 
  return (_Bool)(tmp_1 != 0);
}

#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
#line 20 
unsigned long native_save_fl(void);
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
unsigned long native_save_fl(void)
{
  #line 22 
  unsigned long flags;
  #line 23 
  ldv_inline_asm();
  #line 35 
  return flags;
}

#line 38 
#line 39 
void native_restore_fl(unsigned long flags);
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
void native_restore_fl(unsigned long flags)
{
  #line 41 
  ldv_inline_asm();
  #line 42 
  return;
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 21 
void ldv_set_bit(long nr, unsigned long *addr);
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/io.h"
#line 41 
int wlcore_translate_addr(struct wl1271 *, int);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/io.h"
__inline static int wlcore_raw_write(struct wl1271 *wl, int addr, void *buf, size_t len, bool fixed)
{
  #line 48 
  int ret;
  #line 50 
  if ((int)test_bit(13L,& wl->flags) != 0) 
                                           #line 53 
                                           return -5;
  else {
    #line 51 
    int __ret_warn_on;
    {
      #line 51 
      int tmp_1;
      #line 51 
      if ((int)test_bit(3L,& wl->flags) != 0) 
        #line 51 
        if (addr != 131068) 
                            #line 51 
                            tmp_1 = 1; else 
                                            #line 51 
                                            tmp_1 = 0;
      else 
           #line 51 
           tmp_1 = 0;
      #line 51 
      __ret_warn_on = tmp_1;
      #line 51 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 52 
        ldv_inline_asm();
        #line 53 
        ldv_inline_asm();
      }
      }
    #line 50 
    if ((long)((long)(__ret_warn_on != 0)) != 0L) 
                                                  #line 53 
                                                  return -5;
  }
  #line 55 
  ret = (*((wl->if_ops)->write))(wl->dev,addr,buf,len,(_Bool)((bool)((int)fixed) != 0));
  #line 56 
  if (ret != 0 && wl->state != (unsigned int)WLCORE_STATE_OFF) 
                                                               #line 57 
                                                               cif_set_bit(13L,& wl->flags);
  #line 59 
  return ret;
}

#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/io.h"
__inline static int wlcore_raw_read(struct wl1271 *wl, int addr, void *buf, size_t len, bool fixed)
{
  #line 66 
  int ret;
  #line 68 
  if ((int)test_bit(13L,& wl->flags) != 0) 
                                           #line 71 
                                           return -5;
  else {
    #line 69 
    int __ret_warn_on;
    {
      #line 69 
      int tmp_1;
      #line 69 
      if ((int)test_bit(3L,& wl->flags) != 0) 
        #line 69 
        if (addr != 131068) 
                            #line 69 
                            tmp_1 = 1; else 
                                            #line 69 
                                            tmp_1 = 0;
      else 
           #line 69 
           tmp_1 = 0;
      #line 69 
      __ret_warn_on = tmp_1;
      #line 69 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 70 
        ldv_inline_asm();
        #line 71 
        ldv_inline_asm();
      }
      }
    #line 68 
    if ((long)((long)(__ret_warn_on != 0)) != 0L) 
                                                  #line 71 
                                                  return -5;
  }
  #line 73 
  ret = (*((wl->if_ops)->read))(wl->dev,addr,buf,len,(_Bool)((bool)((int)fixed) != 0));
  #line 74 
  if (ret != 0 && wl->state != (unsigned int)WLCORE_STATE_OFF) 
                                                               #line 75 
                                                               cif_set_bit(13L,& wl->flags);
  #line 77 
  return ret;
}

#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/io.h"
__inline static int wlcore_raw_read32(struct wl1271 *wl, int addr, u32 *val)
{
  #line 97 
  int ret;
  #line 99 
  ret = wlcore_raw_read(wl,addr,(void *)wl->buffer_32,4UL,(_Bool)0);
  #line 101 
  if (ret < 0) 
               #line 102 
               return ret;
  #line 104 
  if (val != (u32 *)0U) 
                        #line 105 
                        *val = *(wl->buffer_32);
  #line 107 
  return 0;
}

#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/io.h"
__inline static int wlcore_raw_write32(struct wl1271 *wl, int addr, u32 val)
{
  #line 113 
  *(wl->buffer_32) = val;
  #line 114 
  return wlcore_raw_write(wl,addr,(void *)wl->buffer_32,4UL,(_Bool)0);
}

#line 167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/io.h"
__inline static int wlcore_read32(struct wl1271 *wl, int addr, u32 *val)
{
  #line 170 
  ;
  #line 170 
  ;
  #line 170 
  return wlcore_raw_read32(wl,wlcore_translate_addr(wl,addr),val);
}

#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/io.h"
__inline static int wlcore_write32(struct wl1271 *wl, int addr, u32 val)
{
  #line 176 
  ;
  #line 176 
  ;
  #line 176 
  return wlcore_raw_write32(wl,wlcore_translate_addr(wl,addr),val);
}

#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/io.h"
#line 13 
int wl18xx_top_reg_write(struct wl1271 *wl, int addr, u16 val);
#line 12 
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/io.c"
int wl18xx_top_reg_read(struct wl1271 *wl, int addr, u16 *out);
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/io.h"
int wl18xx_top_reg_write(struct wl1271 *wl, int addr, u16 val)
{
  #line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/io.c"
  int __ret_warn_on;
  #line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/io.h"
  u32 tmp;
  #line 16 
  int ret;
  #line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/io.c"
  __ret_warn_on = ((unsigned int)addr & 1U) != 0U;
  #line 18 
  if ((long)(__ret_warn_on != 0) != 0L) {
    #line 19 
    ldv_inline_asm();
    #line 20 
    ldv_inline_asm();
  }
  #line 18 
  if ((long)((long)(__ret_warn_on != 0)) != 0L) 
                                                #line 19 
                                                return -22;
  #line 21 
  if (((unsigned int)addr & 3U) == 0U) {
    #line 22 
    ret = wlcore_read32(wl,addr,& tmp);
    #line 23 
    if (ret < 0) 
                 #line 24 
                 goto out;
    #line 26 
    tmp = (tmp & 4294901760U) | (unsigned int)val;
    #line 27 
    ret = wlcore_write32(wl,addr,tmp);
  }
  else {
    #line 29 
    ret = wlcore_read32(wl,addr + -2,& tmp);
    #line 30 
    if (ret < 0) 
                 #line 31 
                 goto out;
    #line 33 
    tmp = (tmp & 65535U) | (unsigned int)((int)val << 16);
    #line 34 
    ret = wlcore_write32(wl,addr + -2,tmp);
  }
  #line 37 
  out: 
       #line 37 
  ;
  #line 38 
  return ret;
}

#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/io.c"
int wl18xx_top_reg_read(struct wl1271 *wl, int addr, u16 *out)
{
  #line 46 
  int __ret_warn_on;
  #line 44 
  int ret;
  #line 43 
  u32 val = 0U;
  #line 46 
  __ret_warn_on = ((unsigned int)addr & 1U) != 0U;
  #line 46 
  if ((long)(__ret_warn_on != 0) != 0L) {
    #line 47 
    ldv_inline_asm();
    #line 48 
    ldv_inline_asm();
  }
  #line 46 
  if ((long)((long)(__ret_warn_on != 0)) != 0L) 
                                                #line 47 
                                                return -22;
  #line 49 
  if (((unsigned int)addr & 3U) == 0U) {
    #line 51 
    ret = wlcore_read32(wl,addr,& val);
    #line 52 
    if (ret >= 0 && out != (u16 *)0U) 
                                      #line 53 
                                      *out = (unsigned short)val;
  }
  else {
    #line 55 
    ret = wlcore_read32(wl,addr + -2,& val);
    #line 56 
    if (ret >= 0 && out != (u16 *)0U) 
                                      #line 57 
                                      *out = (unsigned short)(val >> 16);
  }
  #line 60 
  return ret;
}

#line 114  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/io.i.aux"
static void cif_set_bit(long nr, unsigned long *addr)
{
  #line 117 
  ldv_set_bit(nr,addr);
  #line 118 
  return;
}

#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
#line 171 
int printk(char * , ...);
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/jump_label.h"
__inline static bool arch_static_branch(struct static_key *key, bool branch)
{
  #line 27 
  ldv_inline_asm();
  #line 28 
  ldv_inline_asm();
  #line 34 
  return (_Bool)0;
  #line 35 
  l_yes: 
         #line 35 
  ;
  #line 36 
  return (_Bool)1;
}

#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
#line 56 
void __dynamic_pr_debug(struct _ddebug *, char * , ...);
#line 487  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
#line 487 
void print_hex_dump(char *, char *, int, int, int, void *, size_t, bool);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 14 
void *memcpy(void *, void *, size_t);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 23 
void *ldv_kzalloc(size_t size, gfp_t flags);
#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
#line 302 
unsigned long __msecs_to_jiffies(unsigned int);
#line 309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
__inline static unsigned long _msecs_to_jiffies(unsigned int m)
{
  #line 311 
  return (unsigned long)(((long)m + 3L) / 4L);
}

#line 364  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
__inline static unsigned long msecs_to_jiffies(unsigned int m)
{
  #line 366 
  if (0 != 0) {
    #line 367 
    if ((int)m < 0) 
                    #line 368 
                    return 4611686018427387902UL;
    #line 369 
    return _msecs_to_jiffies(m);
  }
  else {
    #line 371 
    return __msecs_to_jiffies(m);
  }
}

#line 465  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 465 
bool cancel_delayed_work(struct delayed_work *);
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 189 
void kfree(void *);
#line 668 
#line 422  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/scan.i.aux"
static void *kzalloc(size_t size, gfp_t flags);
#line 5383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
#line 5383 
void ieee80211_queue_delayed_work(struct ieee80211_hw *, struct delayed_work *, unsigned long);
#line 499  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/wlcore_i.h"
__inline static struct ieee80211_vif *wl12xx_wlvif_to_vif(struct wl12xx_vif *wlvif)
{
  #line 501 
  void *__mptr;
  #line 501 
  __mptr = (void *)wlvif;
  #line 501 
  return ((struct ieee80211_vif *)(__mptr + 18446744073709551216U));
}

#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/wlcore_i.h"
__inline static bool wlcore_is_p2p_mgmt(struct wl12xx_vif *wlvif)
{
  #line 506 
  ;
  #line 506 
  return (_Bool)(wl12xx_wlvif_to_vif(wlvif)->type == (unsigned int)NL80211_IFTYPE_P2P_DEVICE);
}

#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/cmd.h"
#line 18 
int wl1271_cmd_send(struct wl1271 *, u16, void *, size_t, size_t);
#line 48 
#line 48 
int wl12xx_cmd_build_probe_req(struct wl1271 *, struct wl12xx_vif *, u8, u8, u8 *, size_t, u8 *, size_t, u8 *, size_t, bool);
#line 152  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/scan.h"
#line 152 
bool wlcore_set_scan_chan_params(struct wl1271 *, struct wlcore_scan_channels *, struct ieee80211_channel **, u32, u32, int);
#line 160 
#line 160 
int wlcore_scan_sched_scan_ssid_list(struct wl1271 *, struct wl12xx_vif *, struct cfg80211_sched_scan_request *);
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/scan.h"
#line 328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/scan.c"
int wl18xx_scan_start(struct wl1271 *wl, struct wl12xx_vif *wlvif, struct cfg80211_scan_request *req);
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/scan.h"
#line 334  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/scan.c"
int wl18xx_scan_stop(struct wl1271 *wl, struct wl12xx_vif *wlvif);
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/scan.h"
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/scan.c"
void wl18xx_scan_completed(struct wl1271 *wl, struct wl12xx_vif *wlvif);
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/scan.h"
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/scan.c"
int wl18xx_sched_scan_start(struct wl1271 *wl, struct wl12xx_vif *wlvif, struct cfg80211_sched_scan_request *req, struct ieee80211_scan_ies *ies);
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/scan.h"
#line 324  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/scan.c"
void wl18xx_scan_sched_scan_stop(struct wl1271 *wl, struct wl12xx_vif *wlvif);
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/debug.h"
#line 46 
extern u32 wl12xx_debug_level;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/scan.c"
static void wl18xx_adjust_channels(struct wl18xx_cmd_scan_params *cmd, struct wlcore_scan_channels *cmd_channels)
{
  #line 15 
  memcpy((void *)(& cmd->passive),(void *)(& cmd_channels->passive),3UL);
  #line 16 
  memcpy((void *)(& cmd->active),(void *)(& cmd_channels->active),3UL);
  #line 17 
  cmd->dfs = cmd_channels->dfs;
  #line 18 
  cmd->passive_active = cmd_channels->passive_active;
  #line 20 
  memcpy((void *)(& cmd->__anonCompField_wl18xx_cmd_scan_params_201.__anonCompField___anonunion_2068_200.channels_2),(void *)(& cmd_channels->channels_2),168UL);
  #line 22 
  memcpy((void *)(& cmd->__anonCompField_wl18xx_cmd_scan_params_201.__anonCompField___anonunion_2068_200.channels_5),(void *)(& cmd_channels->channels_5),384UL);
  #line 23 
  return;
}

#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/scan.c"
static int wl18xx_scan_send(struct wl1271 *wl, struct wl12xx_vif *wlvif, struct cfg80211_scan_request *req)
{
  #line 46 
  int __ret_warn_on;
  #line 30 
  struct wl18xx_cmd_scan_params *cmd;
  #line 32 
  int ret;
  #line 31 
  struct wlcore_scan_channels *cmd_channels = (struct wlcore_scan_channels *)0;
  #line 34 
  cmd = (struct wl18xx_cmd_scan_params *)kzalloc(672UL,3264U);
  #line 35 
  if (cmd == (struct wl18xx_cmd_scan_params *)0) {
    #line 36 
    ret = -12;
    #line 37 
    goto out;
  }
  #line 41 
  if ((int)wlcore_is_p2p_mgmt(wlvif) != 0) 
                                           #line 42 
                                           cmd->role_id = wlvif->dev_role_id; else 
                                                                    #line 44 
                                                                    cmd->role_id = wlvif->role_id;
  #line 46 
  __ret_warn_on = (unsigned int)cmd->role_id == 255U;
  #line 46 
  if ((long)(__ret_warn_on != 0) != 0L) {
    #line 47 
    ldv_inline_asm();
    #line 48 
    ldv_inline_asm();
  }
  #line 46 
  if ((long)((long)(__ret_warn_on != 0)) != 0L) {
    #line 47 
    ret = -22;
    #line 48 
    goto out;
  }
  #line 51 
  cmd->scan_type = (unsigned char)0U;
  #line 52 
  cmd->rssi_threshold = (signed char)(-127);
  #line 53 
  cmd->snr_threshold = (signed char)0;
  #line 55 
  cmd->bss_type = (unsigned char)2U;
  #line 57 
  cmd->ssid_from_list = (unsigned char)0U;
  #line 58 
  cmd->filter = (unsigned char)0U;
  #line 59 
  cmd->add_broadcast = (unsigned char)0U;
  #line 61 
  cmd->urgency = (unsigned char)0U;
  #line 62 
  cmd->protect = (unsigned char)0U;
  #line 64 
  cmd->n_probe_reqs = (unsigned char)wl->conf.scan.num_probe_reqs;
  #line 65 
  cmd->terminate_after = (unsigned char)0U;
  {
    #line 68 
    int __ret_warn_on_0 = req->n_ssids > 1;
    #line 68 
    if ((long)(__ret_warn_on_0 != 0) != 0L) {
      #line 69 
      ldv_inline_asm();
      #line 70 
      ldv_inline_asm();
    }
    #line 68 
    long tmp_2 = (long)(__ret_warn_on_0 != 0);
  }
  #line 70 
  cmd_channels = (struct wlcore_scan_channels *)kzalloc(728UL,3264U);
  #line 71 
  if (cmd_channels == (struct wlcore_scan_channels *)0) {
    #line 72 
    ret = -12;
    #line 73 
    goto out;
  }
  #line 76 
  wlcore_set_scan_chan_params(wl,cmd_channels,(struct ieee80211_channel **)(& req->channels),req->n_channels,(unsigned int)req->n_ssids,0);
  #line 79 
  wl18xx_adjust_channels(cmd,cmd_channels);
  #line 85 
  cmd->total_cycles = (unsigned char)1U;
  #line 87 
  if ((int)req->no_cck != 0) 
                             #line 88 
                             cmd->rate = (unsigned char)2U;
  #line 90 
  cmd->tag = (unsigned char)1U;
  #line 92 
  if (req->n_ssids != 0) {
    #line 93 
    cmd->ssid_len = (req->ssids)->ssid_len;
    #line 94 
    memcpy((void *)(& cmd->ssid),(void *)(& (req->ssids)->ssid),(unsigned long)cmd->ssid_len);
  }
  #line 98 
  if ((unsigned int)cmd->active[0] != 0U) {
    #line 102 
    unsigned long tmp_3;
    #line 101 
    u8 *tmp_4;
    #line 99 
    u8 band = (unsigned char)0U;
    #line 100 
    ;
    #line 100 
    ;
    #line 102 
    if (req->ssids != (struct cfg80211_ssid *)0) 
                                                 #line 102 
                                                 tmp_3 = (unsigned long)(req->ssids)->ssid_len; else 
                                                                    #line 102 
                                                                    tmp_3 = 0UL;
    #line 101 
    if (req->ssids != (struct cfg80211_ssid *)0) 
                                                 #line 101 
                                                 tmp_4 = (u8 *)(& (req->ssids)->ssid); else 
                                                                    #line 101 
                                                                    tmp_4 = (u8 *)0U;
    #line 100 
    ;
    #line 100 
    ;
    #line 100 
    ;
    #line 100 
    ;
    #line 100 
    ret = wl12xx_cmd_build_probe_req(wl,wlvif,(unsigned char)((int)cmd->role_id),(unsigned char)((int)band),tmp_4,tmp_3,req->ie,req->ie_len,(u8 *)0U,0UL,(_Bool)0);
    #line 109 
    if (ret < 0) {
      #line 110 
      printk((char *)"\001");
      #line 111 
      goto out;
    }
  }
  #line 115 
  if ((unsigned int)cmd->active[1] != 0U || (unsigned int)cmd->dfs != 0U) {
    #line 119 
    unsigned long tmp_5;
    #line 118 
    u8 *tmp_6;
    #line 116 
    u8 band_0 = (unsigned char)1U;
    #line 117 
    ;
    #line 117 
    ;
    #line 119 
    if (req->ssids != (struct cfg80211_ssid *)0) 
                                                 #line 119 
                                                 tmp_5 = (unsigned long)(req->ssids)->ssid_len; else 
                                                                    #line 119 
                                                                    tmp_5 = 0UL;
    #line 118 
    if (req->ssids != (struct cfg80211_ssid *)0) 
                                                 #line 118 
                                                 tmp_6 = (u8 *)(& (req->ssids)->ssid); else 
                                                                    #line 118 
                                                                    tmp_6 = (u8 *)0U;
    #line 117 
    ;
    #line 117 
    ;
    #line 117 
    ;
    #line 117 
    ;
    #line 117 
    ret = wl12xx_cmd_build_probe_req(wl,wlvif,(unsigned char)((int)cmd->role_id),(unsigned char)((int)band_0),tmp_6,tmp_5,req->ie,req->ie_len,(u8 *)0U,0UL,(_Bool)0);
    #line 126 
    if (ret < 0) {
      #line 127 
      printk((char *)"\001");
      #line 128 
      goto out;
    }
  }
  #line 132 
  if ((wl12xx_debug_level & 256U) != 0U) {
    #line 132 
    bool branch;
    #line 132 
    struct _ddebug __UNIQUE_ID_ddebug559 = {.modname = (char *)"wl18xx", .function = (char *)"wl18xx_scan_send", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/scan.c", .format = (char *)"wlcore", .lineno = (unsigned int)132U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 132 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug559.key.dd_key_false.key,(_Bool)0);
    #line 132 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 132 
                                                print_hex_dump((char *)"\001",(char *)"wlcore",2,16,1,(void *)cmd,672UL,(_Bool)0);
  }
  #line 134 
  ret = wl1271_cmd_send(wl,(unsigned short)7,(void *)cmd,672UL,0UL);
  #line 135 
  if (ret < 0) {
    #line 136 
    printk((char *)"\001");
    #line 137 
    goto out;
  }
  #line 140 
  out: 
       #line 140 
  ;
  #line 141 
  kfree((void *)cmd_channels);
  #line 142 
  kfree((void *)cmd);
  #line 143 
  return ret;
}

#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/scan.c"
void wl18xx_scan_completed(struct wl1271 *wl, struct wl12xx_vif *wlvif)
{
  #line 148 
  wl->scan.failed = (_Bool)0;
  #line 149 
  cancel_delayed_work(& wl->scan_complete_work);
  #line 150 
  ;
  #line 150 
  ;
  #line 150 
  ieee80211_queue_delayed_work(wl->hw,& wl->scan_complete_work,msecs_to_jiffies(0U));
  #line 152 
  return;
}

#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/scan.c"
static int wl18xx_scan_sched_scan_config(struct wl1271 *wl, struct wl12xx_vif *wlvif, struct cfg80211_sched_scan_request *req, struct ieee80211_scan_ies *ies)
{
  #line 180 
  int __ret_warn_on;
  #line 160 
  struct wl18xx_cmd_scan_params *cmd;
  #line 163 
  int ret;
  #line 164 
  int filter_type;
  #line 161 
  struct wlcore_scan_channels *cmd_channels = (struct wlcore_scan_channels *)0;
  #line 162 
  struct conf_sched_scan_settings *c = & wl->conf.sched_scan;
  #line 166 
  if ((long)((wl12xx_debug_level & 4096U) != 0U) != 0L) {
    #line 166 
    bool branch;
    #line 166 
    struct _ddebug __UNIQUE_ID_ddebug560 = {.modname = (char *)"wl18xx", .function = (char *)"wl18xx_scan_sched_scan_config", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/scan.c", .format = (char *)"wlcore", .lineno = (unsigned int)166U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 166 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug560.key.dd_key_false.key,(_Bool)0);
    #line 166 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 166 
                                                __dynamic_pr_debug(& __UNIQUE_ID_ddebug560,(char *)"wlcore");
  }
  #line 168 
  filter_type = wlcore_scan_sched_scan_ssid_list(wl,wlvif,req);
  #line 169 
  if (filter_type < 0) 
                       #line 170 
                       return filter_type;
  #line 172 
  cmd = (struct wl18xx_cmd_scan_params *)kzalloc(672UL,3264U);
  #line 173 
  if (cmd == (struct wl18xx_cmd_scan_params *)0) {
    #line 174 
    ret = -12;
    #line 175 
    goto out;
  }
  #line 178 
  cmd->role_id = wlvif->role_id;
  #line 180 
  __ret_warn_on = (unsigned int)cmd->role_id == 255U;
  #line 180 
  if ((long)(__ret_warn_on != 0) != 0L) {
    #line 181 
    ldv_inline_asm();
    #line 182 
    ldv_inline_asm();
  }
  #line 180 
  if ((long)((long)(__ret_warn_on != 0)) != 0L) {
    #line 181 
    ret = -22;
    #line 182 
    goto out;
  }
  #line 185 
  cmd->scan_type = (unsigned char)1U;
  #line 186 
  cmd->rssi_threshold = c->rssi_threshold;
  #line 187 
  cmd->snr_threshold = c->snr_threshold;
  #line 190 
  cmd->bss_type = (unsigned char)2U;
  #line 192 
  cmd->ssid_from_list = (unsigned char)1U;
  #line 193 
  if (filter_type == 2) 
                        #line 194 
                        cmd->filter = (unsigned char)1U;
  #line 195 
  cmd->add_broadcast = (unsigned char)0U;
  #line 197 
  cmd->urgency = (unsigned char)0U;
  #line 198 
  cmd->protect = (unsigned char)0U;
  #line 200 
  cmd->n_probe_reqs = c->num_probe_reqs;
  #line 202 
  cmd->terminate_after = (unsigned char)0U;
  #line 204 
  cmd_channels = (struct wlcore_scan_channels *)kzalloc(728UL,3264U);
  #line 205 
  if (cmd_channels == (struct wlcore_scan_channels *)0) {
    #line 206 
    ret = -12;
    #line 207 
    goto out;
  }
  #line 211 
  wlcore_set_scan_chan_params(wl,cmd_channels,(struct ieee80211_channel **)(& req->channels),req->n_channels,(unsigned int)req->n_ssids,1);
  #line 214 
  wl18xx_adjust_channels(cmd,cmd_channels);
  #line 216 
  if (((unsigned int)c->num_short_intervals != 0U && (unsigned int)c->long_interval != 0U) && (long)c->long_interval > (long)(req->scan_plans)->interval * 1000L) {
    #line 218 
    cmd->short_cycles_msec = (unsigned short)((unsigned int)((unsigned short)(req->scan_plans)->interval) * 1000U);
    #line 220 
    cmd->long_cycles_msec = c->long_interval;
    #line 221 
    cmd->short_cycles_count = c->num_short_intervals;
  }
  else {
    #line 223 
    cmd->short_cycles_msec = (unsigned short)0U;
    #line 224 
    cmd->long_cycles_msec = (unsigned short)((unsigned int)((unsigned short)(req->scan_plans)->interval) * 1000U);
    #line 226 
    cmd->short_cycles_count = (unsigned char)0U;
  }
  #line 228 
  if ((long)((wl12xx_debug_level & 256U) != 0U) != 0L) {
    #line 228 
    bool branch_0;
    #line 228 
    struct _ddebug __UNIQUE_ID_ddebug562 = {.modname = (char *)"wl18xx", .function = (char *)"wl18xx_scan_sched_scan_config", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/scan.c", .format = (char *)"wlcore", .lineno = (unsigned int)228U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 228 
    branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug562.key.dd_key_false.key,(_Bool)0);
    #line 228 
    if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                  #line 228 
                                                  __dynamic_pr_debug(& __UNIQUE_ID_ddebug562,(char *)"wlcore",(int)cmd->short_cycles_msec,(int)cmd->long_cycles_msec,(int)cmd->short_cycles_count);
  }
  #line 233 
  cmd->total_cycles = (unsigned char)0U;
  #line 235 
  cmd->tag = (unsigned char)1U;
  #line 238 
  cmd->report_threshold = (unsigned char)1U;
  #line 239 
  cmd->terminate_on_report = (unsigned char)0U;
  #line 241 
  if ((unsigned int)cmd->active[0] != 0U) {
    #line 245 
    unsigned long tmp_4;
    #line 244 
    u8 *tmp_5;
    #line 242 
    u8 band = (unsigned char)0U;
    #line 243 
    ;
    #line 243 
    ;
    #line 243 
    ;
    #line 243 
    ;
    #line 245 
    if (req->ssids != (struct cfg80211_ssid *)0) 
                                                 #line 245 
                                                 tmp_4 = (unsigned long)(req->ssids)->ssid_len; else 
                                                                    #line 245 
                                                                    tmp_4 = 0UL;
    #line 244 
    if (req->ssids != (struct cfg80211_ssid *)0) 
                                                 #line 244 
                                                 tmp_5 = (u8 *)(& (req->ssids)->ssid); else 
                                                                    #line 244 
                                                                    tmp_5 = (u8 *)0U;
    #line 243 
    ;
    #line 243 
    ;
    #line 243 
    ;
    #line 243 
    ;
    #line 243 
    ret = wl12xx_cmd_build_probe_req(wl,wlvif,(unsigned char)((int)cmd->role_id),(unsigned char)((int)band),tmp_5,tmp_4,ies->ies[(int)band],ies->len[(int)band],ies->common_ies,ies->common_ie_len,(_Bool)1);
    #line 252 
    if (ret < 0) {
      #line 253 
      printk((char *)"\001");
      #line 254 
      goto out;
    }
  }
  #line 258 
  if ((unsigned int)cmd->active[1] != 0U || (unsigned int)cmd->dfs != 0U) {
    #line 262 
    unsigned long tmp_6;
    #line 261 
    u8 *tmp_7;
    #line 259 
    u8 band_0 = (unsigned char)1U;
    #line 260 
    ;
    #line 260 
    ;
    #line 260 
    ;
    #line 260 
    ;
    #line 262 
    if (req->ssids != (struct cfg80211_ssid *)0) 
                                                 #line 262 
                                                 tmp_6 = (unsigned long)(req->ssids)->ssid_len; else 
                                                                    #line 262 
                                                                    tmp_6 = 0UL;
    #line 261 
    if (req->ssids != (struct cfg80211_ssid *)0) 
                                                 #line 261 
                                                 tmp_7 = (u8 *)(& (req->ssids)->ssid); else 
                                                                    #line 261 
                                                                    tmp_7 = (u8 *)0U;
    #line 260 
    ;
    #line 260 
    ;
    #line 260 
    ;
    #line 260 
    ;
    #line 260 
    ret = wl12xx_cmd_build_probe_req(wl,wlvif,(unsigned char)((int)cmd->role_id),(unsigned char)((int)band_0),tmp_7,tmp_6,ies->ies[(int)band_0],ies->len[(int)band_0],ies->common_ies,ies->common_ie_len,(_Bool)1);
    #line 269 
    if (ret < 0) {
      #line 270 
      printk((char *)"\001");
      #line 271 
      goto out;
    }
  }
  #line 275 
  if ((wl12xx_debug_level & 256U) != 0U) {
    #line 275 
    bool branch_1;
    #line 275 
    struct _ddebug __UNIQUE_ID_ddebug565 = {.modname = (char *)"wl18xx", .function = (char *)"wl18xx_scan_sched_scan_config", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/scan.c", .format = (char *)"wlcore", .lineno = (unsigned int)275U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 275 
    branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug565.key.dd_key_false.key,(_Bool)0);
    #line 275 
    if ((long)((long)((int)branch_1 != 0)) != 0L) 
                                                  #line 275 
                                                  print_hex_dump((char *)"\001",(char *)"wlcore",2,16,1,(void *)cmd,672UL,(_Bool)0);
  }
  #line 277 
  ret = wl1271_cmd_send(wl,(unsigned short)7,(void *)cmd,672UL,0UL);
  #line 278 
  if (ret < 0) {
    #line 279 
    printk((char *)"\001");
    #line 280 
    goto out;
  }
  #line 283 
  out: 
       #line 283 
  ;
  #line 284 
  kfree((void *)cmd_channels);
  #line 285 
  kfree((void *)cmd);
  #line 286 
  return ret;
}

#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/scan.c"
int wl18xx_sched_scan_start(struct wl1271 *wl, struct wl12xx_vif *wlvif, struct cfg80211_sched_scan_request *req, struct ieee80211_scan_ies *ies)
{
  #line 293 
  return wl18xx_scan_sched_scan_config(wl,wlvif,req,ies);
}

#line 296  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/scan.c"
static int __wl18xx_scan_stop(struct wl1271 *wl, struct wl12xx_vif *wlvif, u8 scan_type)
{
  #line 299 
  struct wl18xx_cmd_scan_stop *stop;
  #line 300 
  int ret;
  #line 302 
  if ((long)((wl12xx_debug_level & 4096U) != 0U) != 0L) {
    #line 302 
    bool branch;
    #line 302 
    struct _ddebug __UNIQUE_ID_ddebug566 = {.modname = (char *)"wl18xx", .function = (char *)"__wl18xx_scan_stop", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/scan.c", .format = (char *)"wlcore", .lineno = (unsigned int)302U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 302 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug566.key.dd_key_false.key,(_Bool)0);
    #line 302 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 302 
                                                __dynamic_pr_debug(& __UNIQUE_ID_ddebug566,(char *)"wlcore");
  }
  #line 304 
  stop = (struct wl18xx_cmd_scan_stop *)kzalloc(8UL,3264U);
  #line 305 
  if (stop == (struct wl18xx_cmd_scan_stop *)0) {
    #line 306 
    printk((char *)"\001");
    #line 307 
    return -12;
  }
  #line 310 
  stop->role_id = wlvif->role_id;
  #line 311 
  stop->scan_type = scan_type;
  #line 313 
  ret = wl1271_cmd_send(wl,(unsigned short)8,(void *)stop,8UL,0UL);
  #line 314 
  if (ret < 0) {
    #line 315 
    printk((char *)"\001");
    #line 316 
    goto out_free;
  }
  #line 319 
  out_free: 
            #line 319 
  ;
  #line 320 
  kfree((void *)stop);
  #line 321 
  return ret;
}

#line 324  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/scan.c"
void wl18xx_scan_sched_scan_stop(struct wl1271 *wl, struct wl12xx_vif *wlvif)
{
  #line 326 
  __wl18xx_scan_stop(wl,wlvif,(unsigned char)1);
  #line 327 
  return;
}

#line 328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/scan.c"
int wl18xx_scan_start(struct wl1271 *wl, struct wl12xx_vif *wlvif, struct cfg80211_scan_request *req)
{
  #line 331 
  return wl18xx_scan_send(wl,wlvif,req);
}

#line 334  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/scan.c"
int wl18xx_scan_stop(struct wl1271 *wl, struct wl12xx_vif *wlvif)
{
  #line 336 
  return __wl18xx_scan_stop(wl,wlvif,(unsigned char)0);
}

#line 422  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/scan.i.aux"
static void *kzalloc(size_t size, gfp_t flags)
{
  #line 425 
  return ldv_kzalloc(size,flags);
}

#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 59 
void *__memmove(void *, void *, size_t);
#line 496  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 298  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/tx.i.aux"
static bool cif_queue_work(struct workqueue_struct *wq, struct work_struct *work);
#line 2011  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
#line 2011 
void skb_queue_tail(struct sk_buff_head *, struct sk_buff *);
#line 2253 
#line 2253 
void *skb_pull(struct sk_buff *, unsigned int);
#line 5170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
#line 5170 
unsigned int ieee80211_get_hdrlen_from_skb(struct sk_buff *);
#line 1114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
__inline static struct ieee80211_tx_info *IEEE80211_SKB_CB(struct sk_buff *skb)
{
  #line 1116 
  return (struct ieee80211_tx_info *)(& skb->cb);
}

#line 492  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/wlcore_i.h"
__inline static struct wl12xx_vif *wl12xx_vif_to_data(struct ieee80211_vif *vif)
{
  {
    #line 494 
    int __ret_warn_on = vif == (struct ieee80211_vif *)0;
    #line 494 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 495 
      ldv_inline_asm();
      #line 496 
      ldv_inline_asm();
    }
    #line 494 
    long tmp = (long)(__ret_warn_on != 0);
  }
  #line 495 
  return (struct wl12xx_vif *)(& vif->drv_priv);
}

#line 243  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/tx.h"
#line 243 
bool wl12xx_is_dummy_packet(struct wl1271 *, struct sk_buff *);
#line 247 
#line 247 
void wl1271_free_tx_id(struct wl1271 *, int);
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/tx.h"
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/tx.c"
void wl18xx_tx_immediate_complete(struct wl1271 *wl);
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/tx.c"
static void wl18xx_get_last_tx_rate(struct wl1271 *wl, struct ieee80211_vif *vif, u8 band, struct ieee80211_tx_rate *rate, u8 hlid)
{
  #line 21 
  u8 fw_rate = wl->links[(int)hlid].fw_rate_idx;
  #line 23 
  if ((unsigned int)fw_rate > 29U) {
    #line 24 
    printk((char *)"\001",(int)fw_rate);
    #line 25 
    rate->idx = (signed char)0;
    #line 26 
    rate->flags = (unsigned short)0U;
    #line 27 
    return;
  }
  #line 30 
  if ((unsigned int)fw_rate <= 11U) {
    #line 31 
    rate->idx = (signed char)fw_rate;
    #line 32 
    if ((unsigned int)band == 1U) 
                                  #line 33 
                                  rate->idx = (signed char)((unsigned int)rate->idx + 252U);
    #line 34 
    rate->flags = (unsigned short)0U;
  }
  else {
    #line 36 
    rate->flags = (unsigned short)8U;
    #line 37 
    rate->idx = (signed char)((unsigned int)fw_rate + 244U);
    #line 40 
    if ((unsigned int)fw_rate > 19U) 
                                     #line 41 
                                     rate->idx = (s8)((int)rate->idx - 1);
    #line 42 
    if ((unsigned int)fw_rate == 29U) 
                                      #line 43 
                                      rate->idx = (s8)((int)rate->idx - 1);
    #line 46 
    if ((unsigned int)fw_rate == 20U || (unsigned int)fw_rate == 29U) 
      #line 48 
      rate->flags = (unsigned short)((unsigned int)rate->flags | 128U);
    #line 50 
    if ((unsigned int)fw_rate > 20U && vif != (struct ieee80211_vif *)0) {
      #line 51 
      struct wl12xx_vif *wlvif = wl12xx_vif_to_data(vif);
      #line 52 
      if ((unsigned int)wlvif->channel_type + 4294967294U <= 1U) {
        #line 55 
        rate->idx = (signed char)((unsigned int)rate->idx + 248U);
        #line 56 
        rate->flags = (unsigned short)((unsigned int)rate->flags | 32U);
      }
    }
  }
  #line 60 
  return;
}

#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/tx.c"
static void wl18xx_tx_complete_packet(struct wl1271 *wl, u8 tx_stat_byte)
{
  #line 64 
  struct ieee80211_tx_info *info;
  #line 65 
  struct sk_buff *skb;
  #line 67 
  bool tx_success;
  #line 68 
  struct wl1271_tx_hw_descr *tx_desc;
  #line 66 
  int id = (int)tx_stat_byte & 127;
  #line 71 
  if ((long)(wl->num_tx_desc <= (unsigned int)id) != 0L || (long)(wl->tx_frames[id] == (struct sk_buff *)0) != 0L) {
    #line 72 
    printk((char *)"\001",id);
    #line 73 
    return;
  }
  #line 77 
  tx_success = (_Bool)(((unsigned long)tx_stat_byte & 128UL) == 0UL);
  #line 79 
  skb = wl->tx_frames[id];
  #line 80 
  info = IEEE80211_SKB_CB(skb);
  #line 81 
  tx_desc = (struct wl1271_tx_hw_descr *)skb->data;
  #line 83 
  if ((int)wl12xx_is_dummy_packet(wl,skb) != 0) {
    #line 84 
    wl1271_free_tx_id(wl,id);
    #line 85 
    return;
  }
  #line 89 
  if ((int)tx_success != 0 && (info->flags & 4U) == 0U) 
                                                        #line 90 
                                                        info->flags |= 512U;
  #line 95 
  wl18xx_get_last_tx_rate(wl,info->__anonCompField_ieee80211_tx_info_195.control.vif,(unsigned char)((int)info->band),& info->__anonCompField_ieee80211_tx_info_195.status.rates[0],(unsigned char)((int)tx_desc->hlid));
  #line 100 
  info->__anonCompField_ieee80211_tx_info_195.status.rates[0].count = (unsigned short)1U;
  #line 101 
  info->__anonCompField_ieee80211_tx_info_195.status.ack_signal = -1;
  #line 103 
  if (! tx_success) 
                    #line 104 
                    (wl->stats.retry_count) ++;
  #line 112 
  skb_pull(skb,16U);
  #line 115 
  if ((((unsigned long)wl->quirks & 256UL) != 0UL && info->__anonCompField_ieee80211_tx_info_195.control.hw_key != (struct ieee80211_key_conf *)0) && (info->__anonCompField_ieee80211_tx_info_195.control.hw_key)->cipher == 1027074U) {
    #line 118 
    int hdrlen = (int)ieee80211_get_hdrlen_from_skb(skb);
    #line 119 
    __memmove((void *)(skb->data + 4U),(void *)skb->data,(unsigned long)hdrlen);
    #line 120 
    skb_pull(skb,4U);
  }
  #line 123 
  if ((long)((wl12xx_debug_level & 64U) != 0U) != 0L) {
    #line 123 
    bool branch;
    #line 123 
    struct _ddebug __UNIQUE_ID_ddebug555 = {.modname = (char *)"wl18xx", .function = (char *)"wl18xx_tx_complete_packet", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/tx.c", .format = (char *)"wlcore", .lineno = (unsigned int)123U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 123 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug555.key.dd_key_false.key,(_Bool)0);
    #line 123 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 123 
                                                __dynamic_pr_debug(& __UNIQUE_ID_ddebug555,(char *)"wlcore",id,skb,(int)tx_success);
  }
  #line 127 
  skb_queue_tail(& wl->deferred_tx_queue,skb);
  #line 128 
  cif_queue_work(wl->freezable_wq,& wl->netstack_work);
  #line 129 
  wl1271_free_tx_id(wl,id);
  #line 130 
  return;
}

#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/tx.c"
void wl18xx_tx_immediate_complete(struct wl1271 *wl)
{
  #line 137 
  u8 i;
  #line 137 
  u8 hlid;
  #line 134 
  struct wl18xx_fw_status_priv *status_priv = (struct wl18xx_fw_status_priv *)(wl->fw_status)->priv;
  #line 136 
  struct wl18xx_priv *priv = (struct wl18xx_priv *)wl->priv;
  #line 140 
  if ((int)priv->last_fw_rls_idx == (int)status_priv->fw_release_idx) 
    #line 141 
    return;
  #line 144 
  hlid = (wl->fw_status)->counters.hlid;
  #line 146 
  if ((unsigned int)hlid <= 15U) {
    #line 147 
    wl->links[(int)hlid].fw_rate_idx = (wl->fw_status)->counters.tx_last_rate;
    #line 149 
    wl->links[(int)hlid].fw_rate_mbps = (wl->fw_status)->counters.tx_last_rate_mbps;
  }
  #line 154 
  if ((long)((wl12xx_debug_level & 64U) != 0U) != 0L) {
    #line 154 
    bool branch;
    #line 154 
    struct _ddebug __UNIQUE_ID_ddebug556 = {.modname = (char *)"wl18xx", .function = (char *)"wl18xx_tx_immediate_complete", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/tx.c", .format = (char *)"wlcore", .lineno = (unsigned int)154U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 154 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug556.key.dd_key_false.key,(_Bool)0);
    #line 154 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 154 
                                                __dynamic_pr_debug(& __UNIQUE_ID_ddebug556,(char *)"wlcore",(int)priv->last_fw_rls_idx,(int)status_priv->fw_release_idx);
  }
  #line 157 
  if ((unsigned int)status_priv->fw_release_idx > 32U) {
    #line 158 
    printk((char *)"\001",(int)status_priv->fw_release_idx);
    {
      #line 160 
      int __ret_warn_on = 1;
      #line 160 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 161 
        ldv_inline_asm();
        #line 162 
        ldv_inline_asm();
      }
      #line 160 
      long tmp_2 = (long)(__ret_warn_on != 0);
    }
    #line 161 
    return;
  }
  #line 164 
  i = priv->last_fw_rls_idx;
  #line 164 
  while ((int)status_priv->fw_release_idx != (int)i) {
    #line 167 
    wl18xx_tx_complete_packet(wl,(unsigned char)((int)status_priv->released_tx_desc[(int)i]));
    #line 170 
    (wl->tx_results_count) ++;
    #line 165 
    i = (unsigned char)(((int)i + 1) % 33);
  }
  #line 173 
  priv->last_fw_rls_idx = status_priv->fw_release_idx;
  #line 174 
  return;
}

#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/tx.i.aux"
#line 97 
_Bool emg_queue_work(struct workqueue_struct *arg0, struct work_struct *arg1);
#line 298  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/tx.i.aux"
static bool cif_queue_work(struct workqueue_struct *wq, struct work_struct *work)
{
  #line 302 
  return emg_queue_work(wq,work);
}

#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
#line 16 
extern struct module __this_module;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif_set_bit_0(long nr, unsigned long *addr);
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 18 
void *memset(void *, int, size_t);
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 26 
char *strncpy(char *, char *, __kernel_size_t);
#line 49 
#line 826  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static int cif_strcmp(char *cs, char *ct);
#line 186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 671  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void *cif_kmemdup(void *src, size_t len, gfp_t gfp);
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 224  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static long PTR_ERR(void *ptr);
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 231  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static bool IS_ERR(void *ptr);
#line 51 
#line 51 
int ldv_request_firmware(struct firmware **fw);
#line 52 
#line 52 
void ldv_release_firmware(struct firmware *fw);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 23 
bool ldv_is_err(void *ptr);
#line 26 
#line 26 
long ldv_ptr_err(void *ptr);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 23 
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp);
#line 26 
#line 26 
int ldv_strcmp(char *cs, char *ct);
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static void *dev_get_platdata(struct device *dev)
{
  #line 1583 
  return dev->platform_data;
}

#line 217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/platform_device.h"
#line 833  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static int cif___platform_driver_register(struct platform_driver *ldv_func_arg1, struct module *ldv_func_arg2);
#line 218  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/platform_device.h"
#line 841  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif_platform_driver_unregister(struct platform_driver *ldv_func_arg1);
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
#line 38 
void get_random_bytes(void *, int);
#line 2475  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_network_header(struct sk_buff *skb)
{
  #line 2477 
  return skb->head + (unsigned long)skb->network_header;
}

#line 2491  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_mac_header(struct sk_buff *skb)
{
  #line 2493 
  return skb->head + (unsigned long)skb->mac_header;
}

#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/firmware.h"
#line 812  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static int cif_request_firmware(struct firmware **fw, char *name, struct device *device);
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/firmware.h"
#line 819  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif_release_firmware(struct firmware *fw);
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/delay.h"
#line 11 
void __const_udelay(unsigned long);
#line 223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static void eth_random_addr(u8 *addr)
{
  #line 225 
  get_random_bytes((void *)addr,6);
  #line 226 
  *addr = (unsigned char)((unsigned int)*addr & 254U);
  #line 227 
  *addr = (unsigned char)((unsigned int)*addr | 2U);
  #line 228 
  return;
}

#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irq.h"
__inline static u32 irqd_get_trigger_type(struct irq_data *d)
{
  #line 270 
  return (d->common)->state_use_accessors & 15U;
}

#line 753 
#line 753 
struct irq_data *irq_get_irq_data(unsigned int);
#line 799  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irq.h"
__inline static u32 irq_get_trigger_type(unsigned int irq)
{
  #line 802 
  u32 tmp_1;
  #line 801 
  struct irq_data *d = irq_get_irq_data(irq);
  #line 802 
  if (d != (struct irq_data *)0) 
                                 #line 802 
                                 tmp_1 = irqd_get_trigger_type(d); else 
                                                                    #line 802 
                                                                    tmp_1 = 0U;
  #line 802 
  return tmp_1;
}

#line 5715  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
#line 5715 
void ieee80211_connection_loss(struct ieee80211_vif *);
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/boot.h"
#line 15 
int wlcore_boot_upload_firmware(struct wl1271 *);
#line 17 
#line 17 
int wlcore_boot_run_firmware(struct wl1271 *);
#line 499  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/wlcore.h"
#line 499 
int wlcore_probe(struct wl1271 *, struct platform_device *);
#line 500 
#line 500 
int wlcore_remove(struct platform_device *);
#line 501 
#line 501 
struct ieee80211_hw *wlcore_alloc_hw(size_t, u32, u32);
#line 503 
#line 503 
int wlcore_free_hw(struct wl1271 *);
#line 504 
#line 504 
int wlcore_set_key(struct wl1271 *, enum set_key_cmd, struct ieee80211_vif *, struct ieee80211_sta *, struct ieee80211_key_conf *);
#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/wlcore.h"
__inline static void wlcore_set_ht_cap(struct wl1271 *wl, enum nl80211_band band, struct ieee80211_sta_ht_cap *ht_cap)
{
  #line 516 
  memcpy((void *)(& wl->ht_cap[(unsigned int)band]),(void *)ht_cap,22UL);
  #line 517 
  return;
}

#line 523  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/wlcore.h"
__inline static void wlcore_set_min_fw_ver(struct wl1271 *wl, unsigned int chip, unsigned int iftype_sr, unsigned int major_sr, unsigned int subtype_sr, unsigned int minor_sr, unsigned int iftype_mr, unsigned int major_mr, unsigned int subtype_mr, unsigned int minor_mr)
{
  #line 529 
  wl->min_sr_fw_ver[0] = chip;
  #line 530 
  wl->min_sr_fw_ver[1] = iftype_sr;
  #line 531 
  wl->min_sr_fw_ver[2] = major_sr;
  #line 532 
  wl->min_sr_fw_ver[3] = subtype_sr;
  #line 533 
  wl->min_sr_fw_ver[4] = minor_sr;
  #line 535 
  wl->min_mr_fw_ver[0] = chip;
  #line 536 
  wl->min_mr_fw_ver[1] = iftype_mr;
  #line 537 
  wl->min_mr_fw_ver[2] = major_mr;
  #line 538 
  wl->min_mr_fw_ver[3] = subtype_mr;
  #line 539 
  wl->min_mr_fw_ver[4] = minor_mr;
  #line 540 
  return;
}

#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/io.h"
#line 34 
void wlcore_disable_interrupts(struct wl1271 *);
#line 36 
#line 36 
void wlcore_enable_interrupts(struct wl1271 *);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/io.h"
__inline static int wlcore_raw_write_0(struct wl1271 *wl, int addr, void *buf, size_t len, bool fixed)
{
  #line 48 
  int ret;
  #line 50 
  if ((int)test_bit(13L,& wl->flags) != 0) 
                                           #line 53 
                                           return -5;
  else {
    #line 51 
    int __ret_warn_on;
    {
      #line 51 
      int tmp_1;
      #line 51 
      if ((int)test_bit(3L,& wl->flags) != 0) 
        #line 51 
        if (addr != 131068) 
                            #line 51 
                            tmp_1 = 1; else 
                                            #line 51 
                                            tmp_1 = 0;
      else 
           #line 51 
           tmp_1 = 0;
      #line 51 
      __ret_warn_on = tmp_1;
      #line 51 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 52 
        ldv_inline_asm();
        #line 53 
        ldv_inline_asm();
      }
      }
    #line 50 
    if ((long)((long)(__ret_warn_on != 0)) != 0L) 
                                                  #line 53 
                                                  return -5;
  }
  #line 55 
  ret = (*((wl->if_ops)->write))(wl->dev,addr,buf,len,(_Bool)((bool)((int)fixed) != 0));
  #line 56 
  if (ret != 0 && wl->state != (unsigned int)WLCORE_STATE_OFF) 
                                                               #line 57 
                                                               cif_set_bit_0(13L,& wl->flags);
  #line 59 
  return ret;
}

#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/io.h"
__inline static int wlcore_raw_read_0(struct wl1271 *wl, int addr, void *buf, size_t len, bool fixed)
{
  #line 66 
  int ret;
  #line 68 
  if ((int)test_bit(13L,& wl->flags) != 0) 
                                           #line 71 
                                           return -5;
  else {
    #line 69 
    int __ret_warn_on;
    {
      #line 69 
      int tmp_1;
      #line 69 
      if ((int)test_bit(3L,& wl->flags) != 0) 
        #line 69 
        if (addr != 131068) 
                            #line 69 
                            tmp_1 = 1; else 
                                            #line 69 
                                            tmp_1 = 0;
      else 
           #line 69 
           tmp_1 = 0;
      #line 69 
      __ret_warn_on = tmp_1;
      #line 69 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 70 
        ldv_inline_asm();
        #line 71 
        ldv_inline_asm();
      }
      }
    #line 68 
    if ((long)((long)(__ret_warn_on != 0)) != 0L) 
                                                  #line 71 
                                                  return -5;
  }
  #line 73 
  ret = (*((wl->if_ops)->read))(wl->dev,addr,buf,len,(_Bool)((bool)((int)fixed) != 0));
  #line 74 
  if (ret != 0 && wl->state != (unsigned int)WLCORE_STATE_OFF) 
                                                               #line 75 
                                                               cif_set_bit_0(13L,& wl->flags);
  #line 77 
  return ret;
}

#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/io.h"
__inline static int wlcore_raw_read32_0(struct wl1271 *wl, int addr, u32 *val)
{
  #line 97 
  int ret;
  #line 99 
  ret = wlcore_raw_read_0(wl,addr,(void *)wl->buffer_32,4UL,(_Bool)0);
  #line 101 
  if (ret < 0) 
               #line 102 
               return ret;
  #line 104 
  if (val != (u32 *)0U) 
                        #line 105 
                        *val = *(wl->buffer_32);
  #line 107 
  return 0;
}

#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/io.h"
__inline static int wlcore_raw_write32_0(struct wl1271 *wl, int addr, u32 val)
{
  #line 113 
  *(wl->buffer_32) = val;
  #line 114 
  return wlcore_raw_write_0(wl,addr,(void *)wl->buffer_32,4UL,(_Bool)0);
}

#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/io.h"
__inline static int wlcore_write(struct wl1271 *wl, int addr, void *buf, size_t len, bool fixed)
{
  #line 131 
  int physical;
  #line 133 
  physical = wlcore_translate_addr(wl,addr);
  #line 135 
  return wlcore_raw_write_0(wl,physical,buf,len,
                         (_Bool)((bool)((int)fixed) != 0));
}

#line 167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/io.h"
__inline static int wlcore_read32_0(struct wl1271 *wl, int addr, u32 *val)
{
  #line 170 
  ;
  #line 170 
  ;
  #line 170 
  return wlcore_raw_read32_0(wl,wlcore_translate_addr(wl,addr),val);
}

#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/io.h"
__inline static int wlcore_write32_0(struct wl1271 *wl, int addr, u32 val)
{
  #line 176 
  ;
  #line 176 
  ;
  #line 176 
  return wlcore_raw_write32_0(wl,wlcore_translate_addr(wl,addr),val);
}

#line 179  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/io.h"
__inline static int wlcore_read_reg(struct wl1271 *wl, int reg, u32 *val)
{
  #line 182 
  ;
  #line 182 
  ;
  #line 182 
  return wlcore_raw_read32_0(wl,
                            wlcore_translate_addr(wl,*(wl->rtable + (unsigned long)reg)),
                            val);
}

#line 187  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/io.h"
__inline static int wlcore_write_reg(struct wl1271 *wl, int reg, u32 val)
{
  #line 190 
  ;
  #line 190 
  ;
  #line 190 
  return wlcore_raw_write32_0(wl,
                             wlcore_translate_addr(wl,*(wl->rtable + (unsigned long)reg)),
                             val);
}

#line 220 
#line 220 
int wlcore_set_partition(struct wl1271 *, struct wlcore_partition_set *);
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/cmd.h"
#line 72 
int wl18xx_cmd_channel_switch(struct wl1271 *wl, struct wl12xx_vif *wlvif, struct ieee80211_channel_switch *ch_switch);
#line 75 
#line 75 
int wl18xx_cmd_smart_config_start(struct wl1271 *wl, u32 group_bitmap);
#line 76 
#line 76 
int wl18xx_cmd_smart_config_stop(struct wl1271 *wl);
#line 77 
#line 77 
int wl18xx_cmd_smart_config_set_group_key(struct wl1271 *wl, u16 group_id, u8 key_len, u8 *key);
#line 79 
#line 79 
int wl18xx_cmd_set_cac(struct wl1271 *wl, struct wl12xx_vif *wlvif, bool start);
#line 81 
#line 81 
int wl18xx_cmd_dfs_master_restart(struct wl1271 *wl, struct wl12xx_vif *wlvif);
#line 389  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/acx.h"
#line 389 
int wl18xx_acx_host_if_cfg_bitmap(struct wl1271 *wl, u32 host_cfg_bitmap, u32 sdio_blk_size, u32 extra_mem_blks, u32 len_field_size);
#line 392 
#line 392 
int wl18xx_acx_set_checksum_state(struct wl1271 *wl);
#line 394 
#line 394 
int wl18xx_acx_peer_ht_operation_mode(struct wl1271 *wl, u8 hlid, bool wide);
#line 395 
#line 395 
int wl18xx_acx_set_peer_cap(struct wl1271 *wl, struct ieee80211_sta_ht_cap *ht_cap, bool allow_ht_operation, u32 rate_set, u8 hlid);
#line 399 
#line 399 
int wl18xx_acx_interrupt_notify_config(struct wl1271 *wl, bool action);
#line 400 
#line 400 
int wl18xx_acx_rx_ba_filter(struct wl1271 *wl, bool action);
#line 401 
#line 401 
int wl18xx_acx_ap_sleep(struct wl1271 *wl);
#line 402 
#line 402 
int wl18xx_acx_dynamic_fw_traces(struct wl1271 *wl);
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/event.h"
#line 106 
int wl18xx_wait_for_event(struct wl1271 *wl, enum wlcore_wait_event event, bool *timeout);
#line 108 
#line 108 
int wl18xx_process_mailbox_events(struct wl1271 *wl);
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.h"
#line 11 
int wl18xx_debugfs_add_files(struct wl1271 *wl, struct dentry *rootdir);
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/main.c"
static char *ht_mode_param = (char *)0;
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/main.c"
static char *board_type_param = (char *)0;
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/main.c"
static bool checksum_param = (_Bool)0;
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/main.c"
static int num_rx_desc_param = -1;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/main.c"
static int dc2dc_param = -1;
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/main.c"
static int n_antennas_2_param = -1;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/main.c"
static int n_antennas_5_param = -1;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/main.c"
static int low_band_component_param = -1;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/main.c"
static int low_band_component_type_param = -1;
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/main.c"
static int high_band_component_param = -1;
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/main.c"
static int high_band_component_type_param = -1;
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/main.c"
static int pwr_limit_reference_11_abg_param = -1;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/main.c"
static u8 wl18xx_rate_to_idx_2ghz[29U] = {(unsigned char)15U, (unsigned char)14U, (unsigned char)13U, (unsigned char)12U, (unsigned char)11U, (unsigned char)10U, (unsigned char)9U, (unsigned char)8U, (unsigned char)7U, (unsigned char)6U, (unsigned char)5U, (unsigned char)4U, (unsigned char)3U, (unsigned char)2U, (unsigned char)1U, [16] = (unsigned char)11U, (unsigned char)10U, (unsigned char)9U, (unsigned char)8U, (unsigned char)255U, (unsigned char)7U, (unsigned char)6U, (unsigned char)3U, (unsigned char)5U, (unsigned char)4U, (unsigned char)2U, (unsigned char)1U};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/main.c"
static u8 wl18xx_rate_to_idx_5ghz[29U] = {(unsigned char)15U, (unsigned char)14U, (unsigned char)13U, (unsigned char)12U, (unsigned char)11U, (unsigned char)10U, (unsigned char)9U, (unsigned char)8U, (unsigned char)7U, (unsigned char)6U, (unsigned char)5U, (unsigned char)4U, (unsigned char)3U, (unsigned char)2U, (unsigned char)1U, [16] = (unsigned char)7U, (unsigned char)6U, (unsigned char)5U, (unsigned char)4U, (unsigned char)255U, (unsigned char)3U, (unsigned char)2U, (unsigned char)255U, (unsigned char)1U, [26] = (unsigned char)255U, (unsigned char)255U, (unsigned char)255U};
#line 126  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/main.c"
static u8 *wl18xx_band_rate_to_idx[2U] = {(u8 *)(& wl18xx_rate_to_idx_2ghz), (u8 *)(& wl18xx_rate_to_idx_5ghz)};
#line 164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/main.c"
static struct wlcore_conf wl18xx_conf = {.sg = {.params = {[26] = 170U, 50U, [31] = 200U, [35] = 1U, [37] = 60U, [39] = 1200U, [41] = 1U, 3U, 6U, [46] = 2U, [49] = 3U, [51] = 2U, 30U}, .state = (unsigned char)1U}, .rx = {.rx_msdu_life_time = 512000U, .ps_poll_timeout = (unsigned short)15U, .upsd_timeout = (unsigned short)15U, .rts_threshold = (unsigned short)2353U, .irq_blk_threshold = (unsigned short)65535U, .irq_timeout = (unsigned short)600U}, .tx = {.sta_rc_conf = {.short_retry_limit = (unsigned char)10U, .long_retry_limit = (unsigned char)10U}, .ac_conf_count = (unsigned char)4U, .ac_conf = {{.cw_min = (unsigned char)15U, .cw_max = (unsigned short)63U, .aifsn = (unsigned char)3U}, {.ac = (unsigned char)1U, .cw_min = (unsigned char)15U, .cw_max = (unsigned short)63U, .aifsn = (unsigned char)7U}, {.ac = (unsigned char)2U, .cw_min = (unsigned char)15U, .cw_max = (unsigned short)63U, .aifsn = (unsigned char)1U, .tx_op_limit = (unsigned short)3008U}, {.ac = (unsigned char)3U, .cw_min = (unsigned char)15U, .cw_max = (unsigned short)63U, .aifsn = (unsigned char)1U, .tx_op_limit = (unsigned short)1504U}}, .max_tx_retries = (unsigned char)100U, .ap_aging_period = (unsigned short)300U, .tid_conf_count = (unsigned char)4U, .tid_conf = {{.channel_type = (unsigned char)1U}, {.queue_id = (unsigned char)1U, .channel_type = (unsigned char)1U, .tsid = (unsigned char)1U}, {.queue_id = (unsigned char)2U, .channel_type = (unsigned char)1U, .tsid = (unsigned char)2U}, {.queue_id = (unsigned char)3U, .channel_type = (unsigned char)1U, .tsid = (unsigned char)3U}}, .frag_threshold = (unsigned short)2352U, .tx_compl_timeout = (unsigned short)350U, .tx_compl_threshold = (unsigned short)10U, .basic_rate = 1U, .basic_rate_5 = 8U, .tmpl_short_retry_limit = (unsigned char)10U, .tmpl_long_retry_limit = (unsigned char)10U, .tx_watchdog_timeout = 5000U, .slow_link_thold = (unsigned char)3U, .fast_link_thold = (unsigned char)30U}, .conn = {.wake_up_event = (unsigned char)2U, .listen_interval = (unsigned char)1U, .suspend_wake_up_event = (unsigned char)4U, .suspend_listen_interval = (unsigned char)3U, .bcn_filt_mode = (unsigned char)1U, .bcn_filt_ie_count = (unsigned char)3U, .bcn_filt_ie = {{.ie = (unsigned char)37U, .rule = (unsigned char)2U}, {.ie = (unsigned char)61U, .rule = (unsigned char)1U}, {.ie = (unsigned char)42U, .rule = (unsigned char)1U}}, .synch_fail_thold = 12U, .bss_lose_timeout = 400U, .beacon_rx_timeout = 10000U, .broadcast_timeout = 20000U, .rx_broadcast_in_ps = (unsigned char)1U, .ps_poll_threshold = (unsigned char)10U, .bet_enable = (unsigned char)1U, .bet_max_consecutive = (unsigned char)50U, .psm_entry_retries = (unsigned char)8U, .psm_exit_retries = (unsigned char)16U, .psm_entry_nullfunc_retries = (unsigned char)3U, .dynamic_ps_timeout = (unsigned short)1500U, .keep_alive_interval = 55000U, .max_listen_interval = (unsigned char)20U, .sta_sleep_auth = (unsigned char)255U}, .itrim = {.timeout = 50000U}, .pm_config = {.host_clk_settling_time = 5000U, .host_fast_wakeup_support = (unsigned char)1U}, .roam_trigger = {.trigger_pacing = (unsigned short)1U, .avg_weight_rssi_beacon = (unsigned char)20U, .avg_weight_rssi_data = (unsigned char)10U, .avg_weight_snr_beacon = (unsigned char)20U, .avg_weight_snr_data = (unsigned char)10U}, .scan = {.min_dwell_time_active = 7500U, .max_dwell_time_active = 30000U, .min_dwell_time_active_long = 25000U, .max_dwell_time_active_long = 50000U, .dwell_time_passive = 100000U, .dwell_time_dfs = 150000U, .num_probe_reqs = (unsigned short)2U, .split_scan_timeout = 50000U}, .sched_scan = {.base_dwell_time = 7500U, .max_dwell_time_delta = 22500U, .dwell_time_delta_per_probe = 2000U, .dwell_time_delta_per_probe_5 = 350U, .dwell_time_passive = 100000U, .dwell_time_dfs = 150000U, .num_probe_reqs = (unsigned char)2U, .rssi_threshold = (signed char)(-90), .num_short_intervals = (unsigned char)14U, .long_interval = (unsigned short)30000U}, .ht = {.rx_ba_win_size = (unsigned char)32U, .tx_ba_win_size = (unsigned char)64U, .inactivity_timeout = (unsigned short)10000U, .tx_ba_tid_bitmap = (unsigned char)63U}, .mem = {.num_stations = (unsigned char)1U, .ssid_profiles = (unsigned char)1U, .rx_block_num = (unsigned char)40U, .tx_min_block_num = (unsigned char)40U, .dynamic_memory = (unsigned char)1U, .min_req_tx_blocks = (unsigned char)45U, .min_req_rx_blocks = (unsigned char)22U, .tx_min = (unsigned char)27U}, .fm_coex = {.enable = (unsigned char)1U, .swallow_period = (unsigned char)5U, .n_divider_fref_set_1 = (unsigned char)255U, .n_divider_fref_set_2 = (unsigned char)12U, .m_divider_fref_set_1 = (unsigned short)65535U, .m_divider_fref_set_2 = (unsigned short)148U, .coex_pll_stabilization_time = 4294967295U, .ldo_stabilization_time = (unsigned short)65535U, .fm_disturbed_band_margin = (unsigned char)255U, .swallow_clk_diff = (unsigned char)255U}, .rx_streaming = {.duration = 150U, .queues = (unsigned char)1U, .interval = (unsigned char)20U}, .fwlog = {.output = (unsigned char)1U}, .rate = {.rate_retry_score = (unsigned short)32000U, .per_add = (unsigned short)8192U, .per_th1 = (unsigned short)2048U, .per_th2 = (unsigned short)4096U, .max_per = (unsigned short)8100U, .inverse_curiosity_factor = (unsigned char)5U, .tx_fail_low_th = (unsigned char)4U, .tx_fail_high_th = (unsigned char)10U, .per_alpha_shift = (unsigned char)4U, .per_add_shift = (unsigned char)13U, .per_beta1_shift = (unsigned char)10U, .per_beta2_shift = (unsigned char)8U, .rate_check_up = (unsigned char)2U, .rate_check_down = (unsigned char)12U}, .hangover = {.hangover_period = (unsigned char)20U, .dynamic_mode = (unsigned char)1U, .early_termination_mode = (unsigned char)1U, .max_period = (unsigned char)20U, .min_period = (unsigned char)1U, .increase_delta = (unsigned char)1U, .decrease_delta = (unsigned char)2U, .quiet_time = (unsigned char)4U, .increase_time = (unsigned char)1U, .window_size = (unsigned char)16U}};
#line 508  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/main.c"
static struct wl18xx_priv_conf wl18xx_default_priv_conf = {.ht = {.mode = (unsigned char)1U}, .phy = {.low_band_component = (unsigned char)2U, .low_band_component_type = (unsigned char)5U, .high_band_component = (unsigned char)1U, .high_band_component_type = (unsigned char)9U, .number_of_assembled_ant2_4 = (unsigned char)2U, .number_of_assembled_ant5 = (unsigned char)1U, .xtal_itrim_val = (unsigned char)4U, .io_configuration = (unsigned char)1U, .per_chan_pwr_limit_arr_11abg = {(unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U}, .pwr_limit_reference_11_abg = (unsigned char)100U, .per_chan_pwr_limit_arr_11p = {(unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U}, .pwr_limit_reference_11p = (unsigned char)100U, .primary_clock_setting_time = (unsigned char)5U, .secondary_clock_setting_time = (unsigned char)5U, .board_type = (unsigned char)2U, .low_power_val = (signed char)(-1), .med_power_val = (signed char)(-1), .high_power_val = (signed char)(-1), .tx_rf_margin = (unsigned char)1U, .low_power_val_2nd = (signed char)(-1), .med_power_val_2nd = (signed char)(-1), .high_power_val_2nd = (signed char)(-1)}};
#line 580  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/main.c"
static struct wlcore_partition_set wl18xx_ptable[6U] = {{.mem = {.size = 81920U}, .reg = {.size = 49151U, .start = 8454144U}}, {.mem = {.size = 20732U, .start = 8388608U}, .reg = {.size = 4096U, .start = 11535364U}, .mem2 = {.size = 1024U, .start = 12582912U}, .mem3 = {.size = 4128U, .start = 4199828U}}, {.mem = {.size = 780U, .start = 7340032U}, .reg = {.size = 83320U, .start = 8396800U}, .mem2 = {.size = 4096U, .start = 11535364U}, .mem3 = {.size = 1024U, .start = 12582912U}}, [4] = {.mem = {.size = 73728U, .start = 10485760U}, .reg = {.size = 20480U, .start = 8417280U}, .mem2 = {.size = 45056U, .start = 8388608U}, .mem3 = {.size = 4128U, .start = 4199828U}}, {.mem = {.size = 92740U, .start = 2157076480U}}};
#line 614  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/main.c"
static int wl18xx_rtable[13U] = {8396804, 8409320, 8409328, 8475884, 8475888, 8409208, 8409308, 8475900, 8475692, 11536308, 12582936, 12582920, 20728};
#line 634  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/main.c"
static struct wl18xx_clk_cfg wl18xx_clk_table_coex[10U] = {[1] = {.n = 8U, .m = 121U}, {.n = 8U, .m = 120U}, {.n = 8U, .m = 117U}, {.n = 10U, .m = 128U}, {.n = 11U, .m = 104U}, {.n = 8U, .m = 120U}, {.n = 8U, .m = 117U}, {.n = 10U, .m = 128U}, {.n = 11U, .m = 104U}};
#line 646  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/main.c"
static struct wl18xx_clk_cfg wl18xx_clk_table[10U] = {[1] = {.n = 7U, .m = 104U, .p = 801U, .q = 4U, .swallow = (_Bool)1}, {.n = 9U, .m = 132U, .p = 3751U, .q = 4U, .swallow = (_Bool)1}, {.n = 7U, .m = 100U}, {.n = 8U, .m = 100U}, {.n = 13U, .m = 120U}, {.n = 9U, .m = 132U, .p = 3751U, .q = 4U, .swallow = (_Bool)1}, {.n = 7U, .m = 100U}, {.n = 8U, .m = 100U}, {.n = 13U, .m = 120U}};
#line 661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/main.c"
static int wl18xx_identify_chip(struct wl1271 *wl)
{
  #line 663 
  int ret = 0;
  #line 665 
  switch (wl->chip.id) {
    #line 666 
    case (u32)100860177: 
                         #line 666 
    ;
    #line 667 
    if ((long)((wl12xx_debug_level & 4U) != 0U) != 0L) {
      #line 667 
      bool branch;
      #line 667 
      struct _ddebug __UNIQUE_ID_ddebug557 = {.modname = (char *)"wl18xx", .function = (char *)"wl18xx_identify_chip", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/main.c", .format = (char *)"wlcore", .lineno = (unsigned int)667U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 667 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug557.key.dd_key_false.key,(_Bool)0);
      #line 667 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 667 
                                                  __dynamic_pr_debug(& __UNIQUE_ID_ddebug557,(char *)"wlcore",wl->chip.id);
    }
    #line 669 
    wl->sr_fw_name = (char *)"ti-connectivity/wl18xx-fw-4.bin";
    #line 671 
    wl->plt_fw_name = (char *)"ti-connectivity/wl18xx-fw-4.bin";
    #line 672 
    wl->quirks |= 3724U;
    #line 679 
    wlcore_set_min_fw_ver(wl,8U,9U,4294967295U,4294967295U,58U,0U,0U,0U,0U);
    #line 684 
    break;
    #line 685 
    case (u32)100860161: 
                         #line 685 
    ;
    #line 686 
    printk((char *)"\001",wl->chip.id);
    #line 688 
    ret = -19;
    #line 689 
    goto out;
    #line 691 
    default: 
             #line 691 
    ;
    #line 692 
    printk((char *)"\001",wl->chip.id);
    #line 693 
    ret = -19;
    #line 694 
    goto out;
  }
  #line 697 
  wl->fw_mem_block_size = 272U;
  #line 698 
  wl->fwlog_end = 1073741824U;
  #line 700 
  wl->scan_templ_id_2_4 = (unsigned char)2U;
  #line 701 
  wl->scan_templ_id_5 = (unsigned char)3U;
  #line 702 
  wl->sched_scan_templ_id_2_4 = (unsigned char)19U;
  #line 703 
  wl->sched_scan_templ_id_5 = (unsigned char)20U;
  #line 704 
  wl->max_channels_5 = (unsigned char)32U;
  #line 705 
  wl->ba_rx_session_count_max = 13;
  #line 706 
  out: 
       #line 706 
  ;
  #line 707 
  return ret;
}

#line 710  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/main.c"
static int wl18xx_set_clk(struct wl1271 *wl)
{
  #line 712 
  u16 clk_freq;
  #line 713 
  int ret;
  #line 715 
  ret = wlcore_set_partition(wl,wl->ptable + 4U);
  #line 716 
  if (ret < 0) 
               #line 717 
               goto out;
  #line 721 
  ret = wl18xx_top_reg_read(wl,10494118,& clk_freq);
  #line 722 
  if (ret < 0) 
               #line 723 
               goto out;
  #line 725 
  if ((long)((wl12xx_debug_level & 4U) != 0U) != 0L) {
    #line 725 
    bool branch;
    #line 725 
    struct _ddebug __UNIQUE_ID_ddebug558 = {.modname = (char *)"wl18xx", .function = (char *)"wl18xx_set_clk", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/main.c", .format = (char *)"wlcore", .lineno = (unsigned int)725U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 725 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug558.key.dd_key_false.key,(_Bool)0);
    #line 725 
    if ((long)((long)((int)branch != 0)) != 0L) {
      #line 725 
      char *tmp;
      #line 725 
      if ((int)wl18xx_clk_table[(int)clk_freq].swallow != 0) 
                                                             #line 725 
                                                             tmp = (char *)"swallow"; else 
                                                                    #line 725 
                                                                    tmp = (char *)"spit";
      #line 725 
      ;
      #line 725 
      ;
      #line 725 
      ;
      #line 725 
      ;
      #line 725 
      ;
      #line 725 
      __dynamic_pr_debug(& __UNIQUE_ID_ddebug558,(char *)"wlcore",(int)clk_freq,wl18xx_clk_table[(int)clk_freq].n,wl18xx_clk_table[(int)clk_freq].m,wl18xx_clk_table[(int)clk_freq].p,wl18xx_clk_table[(int)clk_freq].q,tmp);
    }
  }
  #line 731 
  ret = wl18xx_top_reg_write(wl,10494852,(unsigned short)((int)((unsigned short)wl18xx_clk_table_coex[(int)clk_freq].n)));
  #line 733 
  if (ret < 0) 
               #line 734 
               goto out;
  #line 736 
  ret = wl18xx_top_reg_write(wl,10494850,(unsigned short)((int)((unsigned short)wl18xx_clk_table_coex[(int)clk_freq].m)));
  #line 738 
  if (ret < 0) 
               #line 739 
               goto out;
  #line 742 
  ret = wl18xx_top_reg_write(wl,10494862,(unsigned short)2);
  #line 744 
  if (ret < 0) 
               #line 745 
               goto out;
  #line 747 
  ret = wl18xx_top_reg_write(wl,10494818,(unsigned short)((int)((unsigned short)wl18xx_clk_table[(int)clk_freq].n)));
  #line 749 
  if (ret < 0) 
               #line 750 
               goto out;
  #line 752 
  ret = wl18xx_top_reg_write(wl,10494816,(unsigned short)((int)((unsigned short)wl18xx_clk_table[(int)clk_freq].m)));
  #line 754 
  if (ret < 0) 
               #line 755 
               goto out;
  #line 757 
  if ((int)wl18xx_clk_table[(int)clk_freq].swallow != 0) {
    #line 759 
    ret = wl18xx_top_reg_write(wl,10494820,(unsigned short)((int)((unsigned short)wl18xx_clk_table[(int)clk_freq].q)));
    #line 762 
    if (ret < 0) 
                 #line 763 
                 goto out;
    #line 766 
    ret = wl18xx_top_reg_write(wl,10494822,(unsigned short)((int)((unsigned short)(wl18xx_clk_table[(int)clk_freq].q >> 16)) & 127));
    #line 769 
    if (ret < 0) 
                 #line 770 
                 goto out;
    #line 773 
    ret = wl18xx_top_reg_write(wl,10494824,(unsigned short)((int)((unsigned short)wl18xx_clk_table[(int)clk_freq].p)));
    #line 776 
    if (ret < 0) 
                 #line 777 
                 goto out;
    #line 780 
    ret = wl18xx_top_reg_write(wl,10494826,(unsigned short)((int)((unsigned short)(wl18xx_clk_table[(int)clk_freq].p >> 16)) & 15));
    #line 783 
    if (ret < 0) 
                 #line 784 
                 goto out;
  }
  else {
    #line 786 
    ret = wl18xx_top_reg_write(wl,10494828,(unsigned short)18);
    #line 788 
    if (ret < 0) 
                 #line 789 
                 goto out;
  }
  #line 793 
  ret = wl18xx_top_reg_write(wl,10494872,(unsigned short)0);
  #line 795 
  if (ret < 0) 
               #line 796 
               goto out;
  #line 799 
  ret = wl18xx_top_reg_write(wl,10494866,(unsigned short)7);
  #line 800 
  if (ret < 0) 
               #line 801 
               goto out;
  #line 803 
  __const_udelay(4295000UL);
  #line 806 
  ret = wl18xx_top_reg_write(wl,10494866,(unsigned short)2);
  #line 807 
  if (ret < 0) 
               #line 808 
               goto out;
  #line 811 
  ret = wl18xx_top_reg_write(wl,10494862,(unsigned short)17);
  #line 814 
  out: 
       #line 814 
  ;
  #line 815 
  return ret;
}

#line 818  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/main.c"
static int wl18xx_boot_soft_reset(struct wl1271 *wl)
{
  #line 820 
  int ret;
  #line 823 
  ret = wlcore_write32_0(wl,8475708,0U);
  #line 824 
  if (ret < 0) 
               #line 825 
               goto out;
  #line 828 
  ret = wlcore_write32_0(wl,8397208,65535U);
  #line 830 
  out: 
       #line 830 
  ;
  #line 831 
  return ret;
}

#line 834  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/main.c"
static int wl18xx_pre_boot(struct wl1271 *wl)
{
  #line 836 
  int ret;
  #line 838 
  ret = wl18xx_set_clk(wl);
  #line 839 
  if (ret < 0) 
               #line 840 
               goto out;
  #line 843 
  ret = wlcore_write32_0(wl,8417536,4U);
  #line 844 
  if (ret < 0) 
               #line 845 
               goto out;
  #line 847 
  __const_udelay(2147500UL);
  #line 849 
  ret = wlcore_set_partition(wl,wl->ptable + 2U);
  #line 850 
  if (ret < 0) 
               #line 851 
               goto out;
  #line 854 
  ret = wlcore_write_reg(wl,6,4294967295U);
  #line 855 
  if (ret < 0) 
               #line 856 
               goto out;
  #line 858 
  ret = wl18xx_boot_soft_reset(wl);
  #line 860 
  out: 
       #line 860 
  ;
  #line 861 
  return ret;
}

#line 864  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/main.c"
static int wl18xx_pre_upload(struct wl1271 *wl)
{
  #line 866 
  u32 tmp;
  #line 867 
  int ret;
  #line 868 
  u16 irq_invert;
  #line 873 
  ret = wlcore_set_partition(wl,wl->ptable + 2U);
  #line 874 
  if (ret < 0) 
               #line 875 
               goto out;
  #line 878 
  ret = wlcore_write32_0(wl,8475900,8475900U);
  #line 879 
  if (ret < 0) 
               #line 880 
               goto out;
  #line 882 
  ret = wlcore_read_reg(wl,8,& tmp);
  #line 883 
  if (ret < 0) 
               #line 884 
               goto out;
  #line 886 
  if ((long)((wl12xx_debug_level & 4U) != 0U) != 0L) {
    #line 886 
    bool branch;
    #line 886 
    struct _ddebug __UNIQUE_ID_ddebug559 = {.modname = (char *)"wl18xx", .function = (char *)"wl18xx_pre_upload", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/main.c", .format = (char *)"wlcore", .lineno = (unsigned int)886U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 886 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug559.key.dd_key_false.key,(_Bool)0);
    #line 886 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 886 
                                                __dynamic_pr_debug(& __UNIQUE_ID_ddebug559,(char *)"wlcore",tmp);
  }
  #line 888 
  ret = wlcore_read32_0(wl,8475892,& tmp);
  #line 889 
  if (ret < 0) 
               #line 890 
               goto out;
  #line 899 
  ret = wlcore_set_partition(wl,wl->ptable + 5U);
  #line 900 
  if (ret < 0) 
               #line 901 
               goto out;
  #line 904 
  ret = wlcore_write32_0(wl,-2137798080,2147483648U);
  #line 906 
  if (ret < 0) 
               #line 907 
               goto out;
  #line 910 
  ret = wlcore_write32_0(wl,-2137798080,3221225472U);
  #line 912 
  if (ret < 0) 
               #line 913 
               goto out;
  #line 916 
  ret = wlcore_write32_0(wl,-2137798080,1073741824U);
  #line 918 
  if (ret < 0) 
               #line 919 
               goto out;
  #line 921 
  ret = (int)irq_get_trigger_type((unsigned int)wl->irq);
  #line 922 
  if (ret == 8 || ret == 2) {
    #line 923 
    printk((char *)"\001",ret);
    #line 924 
    ret = wlcore_set_partition(wl,wl->ptable + 4U);
    #line 926 
    if (ret < 0) 
                 #line 927 
                 goto out;
    #line 929 
    ret = wl18xx_top_reg_read(wl,10485860,& irq_invert);
    #line 930 
    if (ret < 0) 
                 #line 931 
                 goto out;
    #line 933 
    irq_invert = (unsigned short)((unsigned int)irq_invert | 2U);
    #line 934 
    ret = wl18xx_top_reg_write(wl,10485860,(unsigned short)((int)irq_invert));
    #line 935 
    if (ret < 0) 
                 #line 936 
                 goto out;
    #line 938 
    ret = wlcore_set_partition(wl,wl->ptable + 5U);
  }
  #line 941 
  out: 
       #line 941 
  ;
  #line 942 
  return ret;
}

#line 945  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/main.c"
static int wl18xx_set_mac_and_phy(struct wl1271 *wl)
{
  #line 948 
  struct wl18xx_mac_and_phy_params *params;
  #line 949 
  int ret;
  #line 947 
  struct wl18xx_priv *priv = (struct wl18xx_priv *)wl->priv;
  #line 951 
  params = (struct wl18xx_mac_and_phy_params *)cif_kmemdup((void *)(& priv->conf.phy),288UL,3264U);
  #line 952 
  if (params == (struct wl18xx_mac_and_phy_params *)0) {
    #line 953 
    ret = -12;
    #line 954 
    goto out;
  }
  #line 957 
  ret = wlcore_set_partition(wl,wl->ptable + 5U);
  #line 958 
  if (ret < 0) 
               #line 959 
               goto out;
  #line 961 
  ret = wlcore_write(wl,-2137890816,(void *)params,288UL,(_Bool)0);
  #line 964 
  out: 
       #line 964 
  ;
  #line 965 
  kfree((void *)params);
  #line 966 
  return ret;
}

#line 969  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/main.c"
static int wl18xx_enable_interrupts(struct wl1271 *wl)
{
  #line 971 
  u32 event_mask;
  #line 971 
  u32 intr_mask;
  #line 972 
  int ret;
  #line 974 
  event_mask = 639U;
  #line 975 
  intr_mask = 621U;
  #line 977 
  ret = wlcore_write_reg(wl,6,event_mask);
  #line 978 
  if (ret < 0) 
               #line 979 
               goto out;
  #line 981 
  wlcore_enable_interrupts(wl);
  #line 983 
  ret = wlcore_write_reg(wl,6,~ intr_mask);
  #line 985 
  if (ret < 0) 
               #line 986 
               goto disable_interrupts;
  #line 988 
  return ret;
  #line 990 
  disable_interrupts: 
                      #line 990 
  ;
  #line 991 
  wlcore_disable_interrupts(wl);
  #line 993 
  out: 
       #line 993 
  ;
  #line 994 
  return ret;
}

#line 997  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/main.c"
static int wl18xx_boot(struct wl1271 *wl)
{
  #line 999 
  int ret;
  #line 1001 
  ret = wl18xx_pre_boot(wl);
  #line 1002 
  if (ret < 0) 
               #line 1003 
               goto out;
  #line 1005 
  ret = wl18xx_pre_upload(wl);
  #line 1006 
  if (ret < 0) 
               #line 1007 
               goto out;
  #line 1009 
  ret = wlcore_boot_upload_firmware(wl);
  #line 1010 
  if (ret < 0) 
               #line 1011 
               goto out;
  #line 1013 
  ret = wl18xx_set_mac_and_phy(wl);
  #line 1014 
  if (ret < 0) 
               #line 1015 
               goto out;
  #line 1017 
  wl->event_mask = 67104513U;
  #line 1036 
  wl->ap_event_mask = 4096U;
  #line 1038 
  ret = wlcore_boot_run_firmware(wl);
  #line 1039 
  if (ret < 0) 
               #line 1040 
               goto out;
  #line 1042 
  ret = wl18xx_enable_interrupts(wl);
  #line 1044 
  out: 
       #line 1044 
  ;
  #line 1045 
  return ret;
}

#line 1048  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/main.c"
static int wl18xx_trigger_cmd(struct wl1271 *wl, int cmd_box_addr, void *buf, size_t len)
{
  #line 1051 
  struct wl18xx_priv *priv = (struct wl18xx_priv *)wl->priv;
  #line 1053 
  memcpy((void *)(& priv->cmd_buf),buf,len);
  #line 1054 
  memset((void *)((u8 *)(& priv->cmd_buf) + len),0,740UL - len);
  #line 1056 
  return wlcore_write(wl,cmd_box_addr,(void *)(& priv->cmd_buf),740UL,(_Bool)0);
}

#line 1060  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/main.c"
static int wl18xx_ack_event(struct wl1271 *wl)
{
  #line 1062 
  return wlcore_write_reg(wl,5,536870912U);
}

#line 1066  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/main.c"
static u32 wl18xx_calc_tx_blocks(struct wl1271 *wl, u32 len, u32 spare_blks)
{
  #line 1068 
  u32 blk_size = 268U;
  #line 1069 
  return ((len + blk_size) + 4294967295U) / blk_size + spare_blks;
}

#line 1073  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/main.c"
static void wl18xx_set_tx_desc_blocks(struct wl1271 *wl, struct wl1271_tx_hw_descr *desc, u32 blks, u32 spare_blks)
{
  #line 1076 
  desc->__anonCompField_wl1271_tx_hw_descr_200.wl18xx_mem.total_mem_blocks = (unsigned char)blks;
  #line 1077 
  return;
}

#line 1080  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/main.c"
static void wl18xx_set_tx_desc_data_len(struct wl1271 *wl, struct wl1271_tx_hw_descr *desc, struct sk_buff *skb)
{
  #line 1083 
  desc->length = (unsigned short)skb->len;
  #line 1086 
  if (((unsigned long)wl->quirks & 128UL) != 0UL) 
                                                  #line 1087 
                                                  desc->__anonCompField_wl1271_tx_hw_descr_200.wl18xx_mem.ctrl = (unsigned char)128U; else 
                                                                    #line 1089 
                                                                    desc->__anonCompField_wl1271_tx_hw_descr_200.wl18xx_mem.ctrl = (unsigned char)0U;
  #line 1091 
  if ((long)((wl12xx_debug_level & 64U) != 0U) != 0L) {
    #line 1091 
    bool branch;
    #line 1091 
    struct _ddebug __UNIQUE_ID_ddebug560 = {.modname = (char *)"wl18xx", .function = (char *)"wl18xx_set_tx_desc_data_len", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/main.c", .format = (char *)"wlcore", .lineno = (unsigned int)1091U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1091 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug560.key.dd_key_false.key,(_Bool)0);
    #line 1091 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 1091 
                                                __dynamic_pr_debug(& __UNIQUE_ID_ddebug560,(char *)"wlcore",(int)desc->hlid,(int)desc->length,(int)desc->life_time,(int)desc->__anonCompField_wl1271_tx_hw_descr_200.wl18xx_mem.total_mem_blocks);
  }
  #line 1093 
  return;
}

#line 1099  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/main.c"
static int wl18xx_get_rx_buf_align(struct wl1271 *wl, u32 rx_desc)
{
  #line 1101 
  if (((unsigned long)rx_desc & 1073741824UL) != 0UL) 
                                                      #line 1102 
                                                      return 2;
  #line 1104 
  return 0;
}

#line 1107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/main.c"
static u32 wl18xx_get_rx_packet_len(struct wl1271 *wl, void *rx_data, u32 data_len)
{
  #line 1110 
  struct wl1271_rx_descriptor *desc = (struct wl1271_rx_descriptor *)rx_data;
  #line 1113 
  if (data_len <= 15U) 
                       #line 1114 
                       return 0U;
  #line 1116 
  return data_len + 4294967280U;
}

#line 1119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/main.c"
static void wl18xx_tx_immediate_completion(struct wl1271 *wl)
{
  #line 1121 
  wl18xx_tx_immediate_complete(wl);
  #line 1122 
  return;
}

#line 1124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/main.c"
static int wl18xx_set_host_cfg_bitmap(struct wl1271 *wl, u32 extra_mem_blk)
{
  #line 1126 
  int ret;
  #line 1127 
  u32 sdio_align_size = 0U;
  #line 1128 
  u32 host_cfg_bitmap = 65U;
  #line 1132 
  if (((unsigned long)wl->quirks & 4UL) != 0UL) {
    #line 1133 
    host_cfg_bitmap |= 8U;
    #line 1134 
    sdio_align_size = 256U;
  }
  #line 1138 
  if (((unsigned long)wl->quirks & 8UL) != 0UL) {
    #line 1139 
    host_cfg_bitmap |= 16U;
    #line 1140 
    sdio_align_size = 256U;
  }
  #line 1143 
  ret = wl18xx_acx_host_if_cfg_bitmap(wl,host_cfg_bitmap,sdio_align_size,extra_mem_blk,15U);
  #line 1146 
  if (ret < 0) 
               #line 1147 
               return ret;
  #line 1149 
  return 0;
}

#line 1152  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/main.c"
static int wl18xx_hw_init(struct wl1271 *wl)
{
  #line 1154 
  int ret;
  #line 1155 
  struct wl18xx_priv *priv = (struct wl18xx_priv *)wl->priv;
  #line 1158 
  priv->last_fw_rls_idx = (unsigned char)0U;
  #line 1159 
  priv->extra_spare_key_count = 0;
  #line 1162 
  ret = wl18xx_set_host_cfg_bitmap(wl,1U);
  #line 1163 
  if (ret < 0) 
               #line 1164 
               return ret;
  #line 1167 
  ret = wl18xx_acx_dynamic_fw_traces(wl);
  #line 1168 
  if (ret < 0) 
               #line 1169 
               return ret;
  #line 1171 
  if ((int)checksum_param != 0) {
    #line 1172 
    ret = wl18xx_acx_set_checksum_state(wl);
    #line 1173 
    if (ret != 0) 
                  #line 1174 
                  return ret;
  }
  #line 1177 
  return ret;
}

#line 1180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/main.c"
static void wl18xx_convert_fw_status(struct wl1271 *wl, void *raw_fw_status, struct wl_fw_status *fw_status)
{
  #line 1183 
  struct wl18xx_fw_status *int_fw_status = (struct wl18xx_fw_status *)raw_fw_status;
  #line 1185 
  fw_status->intr = int_fw_status->intr;
  #line 1186 
  fw_status->fw_rx_counter = int_fw_status->fw_rx_counter;
  #line 1187 
  fw_status->drv_rx_counter = int_fw_status->drv_rx_counter;
  #line 1188 
  fw_status->tx_results_counter = int_fw_status->tx_results_counter;
  #line 1189 
  fw_status->rx_pkt_descs = (__le32 *)(& int_fw_status->rx_pkt_descs);
  #line 1191 
  fw_status->fw_localtime = int_fw_status->fw_localtime;
  #line 1192 
  fw_status->link_ps_bitmap = int_fw_status->link_ps_bitmap;
  #line 1193 
  fw_status->link_fast_bitmap = int_fw_status->link_fast_bitmap;
  #line 1195 
  fw_status->total_released_blks = int_fw_status->total_released_blks;
  #line 1197 
  fw_status->tx_total = int_fw_status->tx_total;
  #line 1199 
  fw_status->counters.tx_released_pkts = (u8 *)(& int_fw_status->counters.tx_released_pkts);
  #line 1201 
  fw_status->counters.tx_lnk_free_pkts = (u8 *)(& int_fw_status->counters.tx_lnk_free_pkts);
  #line 1203 
  fw_status->counters.tx_voice_released_blks = int_fw_status->counters.tx_voice_released_blks;
  #line 1205 
  fw_status->counters.tx_last_rate = int_fw_status->counters.tx_last_rate;
  #line 1207 
  fw_status->counters.tx_last_rate_mbps = int_fw_status->counters.tx_last_rate_mbps;
  #line 1209 
  fw_status->counters.hlid = int_fw_status->counters.hlid;
  #line 1212 
  fw_status->log_start_addr = int_fw_status->log_start_addr;
  #line 1214 
  fw_status->priv = (void *)(& int_fw_status->priv);
  #line 1215 
  return;
}

#line 1217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/main.c"
static void wl18xx_set_tx_desc_csum(struct wl1271 *wl, struct wl1271_tx_hw_descr *desc, struct sk_buff *skb)
{
  #line 1235 
  int __ret_warn_on;
  #line 1221 
  u32 ip_hdr_offset;
  #line 1222 
  struct iphdr *ip_hdr;
  #line 1224 
  if (! checksum_param) {
    #line 1225 
    desc->__anonCompField_wl1271_tx_hw_descr_201.wl18xx_checksum_data = (unsigned char)0U;
    #line 1226 
    return;
  }
  #line 1229 
  if ((unsigned int)skb->ip_summed != 3U) {
    #line 1230 
    desc->__anonCompField_wl1271_tx_hw_descr_201.wl18xx_checksum_data = (unsigned char)0U;
    #line 1231 
    return;
  }
  #line 1234 
  ip_hdr_offset = (unsigned int)(skb_network_header(skb) - skb_mac_header(skb));
  #line 1235 
  __ret_warn_on = ip_hdr_offset > 127U;
  #line 1235 
  if ((long)(__ret_warn_on != 0) != 0L) {
    #line 1236 
    ldv_inline_asm();
    #line 1237 
    ldv_inline_asm();
  }
  #line 1235 
  if ((long)((long)(__ret_warn_on != 0)) != 0L) {
    #line 1236 
    desc->__anonCompField_wl1271_tx_hw_descr_201.wl18xx_checksum_data = (unsigned char)0U;
    #line 1237 
    return;
  }
  #line 1240 
  desc->__anonCompField_wl1271_tx_hw_descr_201.wl18xx_checksum_data = (unsigned char)((int)((unsigned char)ip_hdr_offset) << 1U);
  #line 1243 
  ip_hdr = (struct iphdr *)skb_network_header(skb);
  #line 1244 
  desc->__anonCompField_wl1271_tx_hw_descr_201.wl18xx_checksum_data = (unsigned char)((int)desc->__anonCompField_wl1271_tx_hw_descr_201.wl18xx_checksum_data | ((int)ip_hdr->protocol & 1));
  #line 1245 
  return;
}

#line 1247  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/main.c"
static void wl18xx_set_rx_csum(struct wl1271 *wl, struct wl1271_rx_descriptor *desc, struct sk_buff *skb)
{
  #line 1251 
  if (((int)desc->status & 64) != 0) 
                                     #line 1252 
                                     skb->ip_summed = (unsigned char)1U;
  #line 1253 
  return;
}

#line 1255  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/main.c"
static bool wl18xx_is_mimo_supported(struct wl1271 *wl)
{
  #line 1257 
  struct wl18xx_priv *priv = (struct wl18xx_priv *)wl->priv;
  #line 1263 
  return (_Bool)((((unsigned int)priv->conf.phy.number_of_assembled_ant2_4 > 1U && (unsigned int)priv->conf.ht.mode != 1U) && (unsigned int)priv->conf.ht.mode != 2U) != 0);
}

#line 1271  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/main.c"
static u32 wl18xx_sta_get_ap_rate_mask(struct wl1271 *wl, struct wl12xx_vif *wlvif)
{
  #line 1274 
  u32 hw_rate_set = wlvif->rate_set;
  #line 1276 
  if ((unsigned int)wlvif->channel_type + 4294967294U <= 1U) {
    #line 1278 
    if ((long)((wl12xx_debug_level & 8192U) != 0U) != 0L) {
      #line 1278 
      bool branch;
      #line 1278 
      struct _ddebug __UNIQUE_ID_ddebug566 = {.modname = (char *)"wl18xx", .function = (char *)"wl18xx_sta_get_ap_rate_mask", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/main.c", .format = (char *)"wlcore", .lineno = (unsigned int)1278U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1278 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug566.key.dd_key_false.key,(_Bool)0);
      #line 1278 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 1278 
                                                  __dynamic_pr_debug(& __UNIQUE_ID_ddebug566,(char *)"wlcore");
    }
    #line 1279 
    hw_rate_set |= 2147483648U;
    #line 1282 
    hw_rate_set &= 3760193535U;
  }
  else {
    #line 1283 
    if ((int)wl18xx_is_mimo_supported(wl) != 0) {
      #line 1284 
      if ((long)((wl12xx_debug_level & 8192U) != 0U) != 0L) {
        #line 1284 
        bool branch_0;
        #line 1284 
        struct _ddebug __UNIQUE_ID_ddebug567 = {.modname = (char *)"wl18xx", .function = (char *)"wl18xx_sta_get_ap_rate_mask", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/main.c", .format = (char *)"wlcore", .lineno = (unsigned int)1284U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 1284 
        branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug567.key.dd_key_false.key,(_Bool)0);
        #line 1284 
        if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                      #line 1284 
                                                      __dynamic_pr_debug(& __UNIQUE_ID_ddebug567,(char *)"wlcore");
      }
      #line 1285 
      hw_rate_set |= 534773760U;
    }
  }
  #line 1288 
  return hw_rate_set;
}

#line 1291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/main.c"
static u32 wl18xx_ap_get_mimo_wide_rate_mask(struct wl1271 *wl, struct wl12xx_vif *wlvif)
{
  #line 1294 
  if ((unsigned int)wlvif->channel_type + 4294967294U <= 1U) {
    #line 1299 
    int __ret_warn_on;
    #line 1296 
    if ((long)((wl12xx_debug_level & 8192U) != 0U) != 0L) {
      #line 1296 
      bool branch;
      #line 1296 
      struct _ddebug __UNIQUE_ID_ddebug568 = {.modname = (char *)"wl18xx", .function = (char *)"wl18xx_ap_get_mimo_wide_rate_mask", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/main.c", .format = (char *)"wlcore", .lineno = (unsigned int)1296U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1296 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug568.key.dd_key_false.key,(_Bool)0);
      #line 1296 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 1296 
                                                  __dynamic_pr_debug(& __UNIQUE_ID_ddebug568,(char *)"wlcore");
    }
    #line 1299 
    __ret_warn_on = wlvif->band != (unsigned int)NL80211_BAND_5GHZ;
    #line 1299 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 1300 
      ldv_inline_asm();
      #line 1301 
      ldv_inline_asm();
    }
    #line 1299 
    if ((long)((long)(__ret_warn_on != 0)) != 0L) 
                                                  #line 1300 
                                                  return 0U;
    #line 1302 
    return 2147483648U;
  }
  else {
    #line 1303 
    if ((int)wl18xx_is_mimo_supported(wl) != 0) 
      #line 1303 
      if (wlvif->band == (unsigned int)NL80211_BAND_2GHZ) {
        #line 1305 
        if ((long)((wl12xx_debug_level & 8192U) != 0U) != 0L) {
          #line 1305 
          bool branch_0;
          #line 1305 
          struct _ddebug __UNIQUE_ID_ddebug570 = {.modname = (char *)"wl18xx", .function = (char *)"wl18xx_ap_get_mimo_wide_rate_mask", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/main.c", .format = (char *)"wlcore", .lineno = (unsigned int)1305U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
          #line 1305 
          branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug570.key.dd_key_false.key,(_Bool)0);
          #line 1305 
          if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                        #line 1305 
                                                        __dynamic_pr_debug(& __UNIQUE_ID_ddebug570,(char *)"wlcore");
        }
        #line 1310 
        return 534773760U;
      }
      else 
           #line 1312 
           return 0U;
    else 
         #line 1312 
         return 0U;
  }
}

#line 1316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/main.c"
static char *wl18xx_rdl_name(enum wl18xx_rdl_num rdl_num)
{
  #line 1318 
  switch ((unsigned int)rdl_num) {
    #line 1319 
    case (unsigned int)1: 
                          #line 1319 
    ;
    #line 1320 
    return (char *)"183xH";
    #line 1321 
    case (unsigned int)2: 
                          #line 1321 
    ;
    #line 1322 
    return (char *)"183x or 180x";
    #line 1323 
    case (unsigned int)3: 
                          #line 1323 
    ;
    #line 1324 
    return (char *)"187xH";
    #line 1325 
    case (unsigned int)4: 
                          #line 1325 
    ;
    #line 1326 
    return (char *)"187x";
    #line 1327 
    case (unsigned int)17: 
                           #line 1327 
    ;
    #line 1328 
    return (char *)"RDL11 - Not Supported";
    #line 1329 
    case (unsigned int)18: 
                           #line 1329 
    ;
    #line 1330 
    return (char *)"180xD";
    #line 1331 
    case (unsigned int)19: 
                           #line 1331 
    ;
    #line 1332 
    return (char *)"RDL13 - Not Supported (1893Q)";
    #line 1333 
    case (unsigned int)20: 
                           #line 1333 
    ;
    #line 1334 
    return (char *)"18xxQ";
    #line 1335 
    case (unsigned int)0: 
                          #line 1335 
    ;
    #line 1336 
    return (char *)"UNTRIMMED";
    #line 1337 
    default: 
             #line 1337 
    ;
    #line 1338 
    return (char *)"UNKNOWN";
  }
}

#line 1342  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/main.c"
static int wl18xx_get_pg_ver(struct wl1271 *wl, s8 *ver)
{
  #line 1344 
  u32 fuse;
  #line 1346 
  int ret;
  #line 1345 
  s8 rom = (signed char)0;
  #line 1345 
  s8 metal = (signed char)0;
  #line 1345 
  s8 pg_ver = (signed char)0;
  #line 1345 
  s8 rdl_ver = (signed char)0;
  #line 1345 
  s8 package_type = (signed char)0;
  #line 1348 
  ret = wlcore_set_partition(wl,wl->ptable + 4U);
  #line 1349 
  if (ret < 0) 
               #line 1350 
               goto out;
  #line 1352 
  ret = wlcore_read32_0(wl,10495508,& fuse);
  #line 1353 
  if (ret < 0) 
               #line 1354 
               goto out;
  #line 1356 
  package_type = (signed char)((int)((signed char)(fuse >> 13)) & 1);
  #line 1358 
  ret = wlcore_read32_0(wl,10495500,& fuse);
  #line 1359 
  if (ret < 0) 
               #line 1360 
               goto out;
  #line 1362 
  pg_ver = (signed char)((int)((signed char)(fuse >> 4)) & 7);
  #line 1363 
  rom = (signed char)((int)((signed char)(fuse >> 9)) & 31);
  #line 1365 
  if ((int)rom <= 14 && (int)package_type == 0) 
                                                #line 1366 
                                                metal = (signed char)((int)((signed char)(fuse >> 2)) & 3); else 
                                                                    #line 1369 
                                                                    metal = (signed char)((int)((signed char)(fuse >> 7)) & 3);
  #line 1372 
  ret = wlcore_read32_0(wl,10495508,& fuse);
  #line 1373 
  if (ret < 0) 
               #line 1374 
               goto out;
  #line 1376 
  rdl_ver = (signed char)((int)((signed char)(fuse >> 8)) & 31);
  #line 1378 
  ;
  #line 1378 
  ;
  #line 1378 
  ;
  #line 1378 
  printk((char *)"\001",wl18xx_rdl_name((enum wl18xx_rdl_num)rdl_ver),(int)pg_ver,(int)metal,(int)rom);
  #line 1381 
  if (ver != (s8 *)0) 
                      #line 1382 
                      *ver = pg_ver;
  #line 1384 
  ret = wlcore_set_partition(wl,wl->ptable + 2U);
  #line 1386 
  out: 
       #line 1386 
  ;
  #line 1387 
  return ret;
}

#line 1390  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/main.c"
static int wl18xx_load_conf_file(struct device *dev, struct wlcore_conf *conf, struct wl18xx_priv_conf *priv_conf, char *file)
{
  #line 1394 
  struct wlcore_conf_file *conf_file;
  #line 1395 
  struct firmware *fw;
  #line 1396 
  int ret;
  #line 1398 
  ret = cif_request_firmware(& fw,file,dev);
  #line 1399 
  if (ret < 0) {
    #line 1400 
    printk((char *)"\001",file,ret);
    #line 1402 
    return ret;
  }
  #line 1405 
  if (fw->size != 1229UL) {
    #line 1406 
    printk((char *)"\001",file,1229UL,fw->size);
    #line 1408 
    ret = -22;
    #line 1409 
    goto out_release;
  }
  #line 1412 
  conf_file = (struct wlcore_conf_file *)fw->data;
  #line 1414 
  if (conf_file->header.magic != 283181258U) {
    #line 1415 
    printk((char *)"\001",283181258,conf_file->header.magic);
    #line 1418 
    ret = -22;
    #line 1419 
    goto out_release;
  }
  #line 1422 
  if (conf_file->header.version != 458759U) {
    #line 1423 
    printk((char *)"\001",458759,conf_file->header.version);
    #line 1426 
    ret = -22;
    #line 1427 
    goto out_release;
  }
  #line 1430 
  memcpy((void *)conf,(void *)(& conf_file->core),924UL);
  #line 1431 
  memcpy((void *)priv_conf,(void *)(& conf_file->priv),293UL);
  #line 1433 
  out_release: 
               #line 1433 
  ;
  #line 1434 
  cif_release_firmware(fw);
  #line 1435 
  return ret;
}

#line 1438  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/main.c"
static int wl18xx_conf_init(struct wl1271 *wl, struct device *dev)
{
  #line 1440 
  struct platform_device *pdev = wl->pdev;
  #line 1441 
  struct wlcore_platdev_data *pdata = dev_get_platdata(& pdev->dev);
  #line 1442 
  struct wl18xx_priv *priv = (struct wl18xx_priv *)wl->priv;
  #line 1444 
  if (wl18xx_load_conf_file(dev,& wl->conf,& priv->conf,
                              (pdata->family)->cfg_name) < 0) {
    #line 1446 
    printk((char *)"\001");
    #line 1449 
    memcpy((void *)(& wl->conf),(void *)(& wl18xx_conf),924UL);
    #line 1451 
    memcpy((void *)(& priv->conf),(void *)(& wl18xx_default_priv_conf),293UL);
  }
  #line 1455 
  return 0;
}

#line 1458  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/main.c"
static int wl18xx_plt_init(struct wl1271 *wl)
{
  #line 1460 
  int ret;
  #line 1463 
  if (wl->plt_mode == (unsigned int)PLT_FEM_DETECT) {
    #line 1464 
    printk((char *)"\001");
    #line 1465 
    return -22;
  }
  #line 1468 
  ret = wlcore_write32_0(wl,8475932,3132800702U);
  #line 1469 
  if (ret < 0) 
               #line 1470 
               return ret;
  #line 1472 
  return (*((wl->ops)->boot))(wl);
}

#line 1475  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/main.c"
static int wl18xx_get_mac(struct wl1271 *wl)
{
  #line 1477 
  u32 mac1;
  #line 1477 
  u32 mac2;
  #line 1478 
  int ret;
  #line 1480 
  ret = wlcore_set_partition(wl,wl->ptable + 4U);
  #line 1481 
  if (ret < 0) 
               #line 1482 
               goto out;
  #line 1484 
  ret = wlcore_read32_0(wl,10495490,& mac1);
  #line 1485 
  if (ret < 0) 
               #line 1486 
               goto out;
  #line 1488 
  ret = wlcore_read32_0(wl,10495494,& mac2);
  #line 1489 
  if (ret < 0) 
               #line 1490 
               goto out;
  #line 1493 
  wl->fuse_oui_addr = ((mac2 << 8) & 16776960U) + (mac1 >> 24);
  #line 1495 
  wl->fuse_nic_addr = mac1 & 16777215U;
  #line 1497 
  if (wl->fuse_oui_addr == 0U && wl->fuse_nic_addr == 0U) {
    #line 1498 
    u8 mac[6U];
    #line 1500 
    eth_random_addr((u8 *)(& mac));
    #line 1502 
    wl->fuse_oui_addr = (unsigned int)((((int)mac[0] << 16) + ((int)mac[1] << 8)) + (int)mac[2]);
    #line 1503 
    wl->fuse_nic_addr = (unsigned int)((((int)mac[3] << 16) + ((int)mac[4] << 8)) + (int)mac[5]);
    #line 1504 
    printk((char *)"\001");
  }
  #line 1507 
  ret = wlcore_set_partition(wl,wl->ptable);
  #line 1509 
  out: 
       #line 1509 
  ;
  #line 1510 
  return ret;
}

#line 1513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/main.c"
static int wl18xx_handle_static_data(struct wl1271 *wl, struct wl1271_static_data *static_data)
{
  #line 1516 
  struct wl18xx_static_data_priv *static_data_priv = (struct wl18xx_static_data_priv *)(& static_data->priv);
  #line 1519 
  strncpy((char *)(& wl->chip.phy_fw_ver_str),(char *)(& static_data_priv->phy_version),32UL);
  #line 1523 
  wl->chip.phy_fw_ver_str[31UL] = (char)0;
  #line 1525 
  printk((char *)"\001",(char *)(& static_data_priv->phy_version));
  #line 1527 
  return 0;
}

#line 1530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/main.c"
static int wl18xx_get_spare_blocks(struct wl1271 *wl, bool is_gem)
{
  #line 1532 
  struct wl18xx_priv *priv = (struct wl18xx_priv *)wl->priv;
  #line 1535 
  if (priv->extra_spare_key_count != 0) 
                                        #line 1536 
                                        return 2;
  #line 1538 
  return 1;
}

#line 1541  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/main.c"
static int wl18xx_set_key(struct wl1271 *wl, enum set_key_cmd cmd, struct ieee80211_vif *vif, struct ieee80211_sta *sta, struct ieee80211_key_conf *key_conf)
{
  #line 1547 
  bool special_enc;
  #line 1548 
  int ret;
  #line 1546 
  struct wl18xx_priv *priv = (struct wl18xx_priv *)wl->priv;
  #line 1547 
  bool change_spare = (_Bool)0;
  #line 1550 
  if ((long)((wl12xx_debug_level & 512U) != 0U) != 0L) {
    #line 1550 
    bool branch;
    #line 1550 
    struct _ddebug __UNIQUE_ID_ddebug571 = {.modname = (char *)"wl18xx", .function = (char *)"wl18xx_set_key", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/main.c", .format = (char *)"wlcore", .lineno = (unsigned int)1550U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1550 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug571.key.dd_key_false.key,(_Bool)0);
    #line 1550 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 1550 
                                                __dynamic_pr_debug(& __UNIQUE_ID_ddebug571,(char *)"wlcore",priv->extra_spare_key_count);
  }
  #line 1553 
  special_enc = (_Bool)((key_conf->cipher == 1339905U || key_conf->cipher == 1027074U) != 0);
  #line 1556 
  ret = wlcore_set_key(wl,cmd,vif,sta,key_conf);
  #line 1557 
  if (ret < 0) 
               #line 1558 
               goto out;
  #line 1564 
  if ((int)special_enc != 0) 
    #line 1565 
    if (cmd == (unsigned int)SET_KEY) {
      #line 1567 
      change_spare = (_Bool)(priv->extra_spare_key_count == 0);
      #line 1568 
      (priv->extra_spare_key_count) ++;
    }
    else 
      #line 1569 
      if (cmd == (unsigned int)DISABLE_KEY) {
        #line 1571 
        change_spare = (_Bool)(priv->extra_spare_key_count == 1);
        #line 1572 
        (priv->extra_spare_key_count) --;
      }
  #line 1576 
  if ((long)((wl12xx_debug_level & 512U) != 0U) != 0L) {
    #line 1576 
    bool branch_0;
    #line 1576 
    struct _ddebug __UNIQUE_ID_ddebug572 = {.modname = (char *)"wl18xx", .function = (char *)"wl18xx_set_key", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/main.c", .format = (char *)"wlcore", .lineno = (unsigned int)1576U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1576 
    branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug572.key.dd_key_false.key,(_Bool)0);
    #line 1576 
    if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                  #line 1576 
                                                  __dynamic_pr_debug(& __UNIQUE_ID_ddebug572,(char *)"wlcore",priv->extra_spare_key_count);
  }
  #line 1579 
  if (! change_spare) 
                      #line 1580 
                      goto out;
  #line 1583 
  if (priv->extra_spare_key_count != 0) 
                                        #line 1584 
                                        ret = wl18xx_set_host_cfg_bitmap(wl,2U); else 
                                                                    #line 1587 
                                                                    ret = wl18xx_set_host_cfg_bitmap(wl,1U);
  #line 1590 
  out: 
       #line 1590 
  ;
  #line 1591 
  return ret;
}

#line 1594  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/main.c"
static u32 wl18xx_pre_pkt_send(struct wl1271 *wl, u32 buf_offset, u32 last_len)
{
  #line 1597 
  if (((unsigned long)wl->quirks & 128UL) != 0UL) {
    #line 1598 
    struct wl1271_tx_hw_descr *last_desc;
    #line 1601 
    last_desc = (struct wl1271_tx_hw_descr *)(wl->aggr_buf + ((unsigned long)buf_offset + (unsigned long)(- last_len)));
    #line 1605 
    last_desc->__anonCompField_wl1271_tx_hw_descr_200.wl18xx_mem.ctrl = (unsigned char)((unsigned int)last_desc->__anonCompField_wl1271_tx_hw_descr_200.wl18xx_mem.ctrl & 127U);
    #line 1606 
    return (buf_offset + 255U) & 4294967040U;
  }
  #line 1610 
  return buf_offset;
}

#line 1613  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/main.c"
static void wl18xx_sta_rc_update(struct wl1271 *wl, struct wl12xx_vif *wlvif)
{
  #line 1621 
  int __ret_warn_on;
  #line 1616 
  bool wide = (_Bool)(wlvif->rc_update_bw != (unsigned int)IEEE80211_STA_RX_BW_20);
  #line 1618 
  if ((long)((wl12xx_debug_level & 2048U) != 0U) != 0L) {
    #line 1618 
    bool branch;
    #line 1618 
    struct _ddebug __UNIQUE_ID_ddebug575 = {.modname = (char *)"wl18xx", .function = (char *)"wl18xx_sta_rc_update", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/main.c", .format = (char *)"wlcore", .lineno = (unsigned int)1618U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1618 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug575.key.dd_key_false.key,(_Bool)0);
    #line 1618 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 1618 
                                                __dynamic_pr_debug(& __UNIQUE_ID_ddebug575,(char *)"wlcore",(int)wide);
  }
  #line 1621 
  __ret_warn_on = (unsigned int)wlvif->bss_type != 2U;
  #line 1621 
  if ((long)(__ret_warn_on != 0) != 0L) {
    #line 1622 
    ldv_inline_asm();
    #line 1623 
    ldv_inline_asm();
  }
  #line 1621 
  if ((long)((long)(__ret_warn_on != 0)) != 0L) 
                                                #line 1622 
                                                return;
  #line 1625 
  if (! test_bit(1L,& wlvif->flags)) 
                                     #line 1626 
                                     return;
  #line 1632 
  if ((unsigned int)wlvif->__anonCompField_wl12xx_vif_197.sta.role_chan_type + 4294967294U <= 1U) 
    #line 1634 
    wl18xx_acx_peer_ht_operation_mode(wl,(unsigned char)((int)wlvif->__anonCompField_wl12xx_vif_197.sta.hlid),(_Bool)((bool)((int)wide) != 0));
  else {
    #line 1636 
    ieee80211_connection_loss(wl12xx_wlvif_to_vif(wlvif));
  }
  #line 1637 
  return;
}

#line 1639  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/main.c"
static int wl18xx_set_peer_cap(struct wl1271 *wl, struct ieee80211_sta_ht_cap *ht_cap, bool allow_ht_operation, u32 rate_set, u8 hlid)
{
  #line 1644 
  return wl18xx_acx_set_peer_cap(wl,ht_cap,
                              (_Bool)((bool)((int)allow_ht_operation) != 0),
                              rate_set,(unsigned char)((int)hlid));
}

#line 1648  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/main.c"
static bool wl18xx_lnk_high_prio(struct wl1271 *wl, u8 hlid, struct wl1271_link *lnk)
{
  #line 1651 
  u8 thold;
  #line 1654 
  unsigned long suspend_bitmap;
  #line 1652 
  struct wl18xx_fw_status_priv *status_priv = (struct wl18xx_fw_status_priv *)(wl->fw_status)->priv;
  #line 1657 
  if (status_priv == (struct wl18xx_fw_status_priv *)0) 
                                                        #line 1658 
                                                        return (_Bool)0;
  #line 1661 
  suspend_bitmap = (unsigned long)status_priv->link_suspend_bitmap;
  #line 1662 
  if ((int)test_bit((long)hlid,& suspend_bitmap) != 0) 
                                                       #line 1663 
                                                       return (_Bool)0;
  #line 1666 
  if ((int)test_bit((long)hlid,& wl->fw_fast_lnk_map) != 0) {
    #line 1667 
    if (test_bit((long)hlid,& wl->ap_fw_ps_map)) 
                                                 #line 1670 
                                                 thold = status_priv->tx_slow_link_prio_threshold; else 
                                                                    #line 1668 
                                                                    thold = status_priv->tx_fast_link_prio_threshold;
  }
  else 
       #line 1670 
       thold = status_priv->tx_slow_link_prio_threshold;
  #line 1672 
  return (_Bool)((int)lnk->allocated_pkts < (int)thold);
}

#line 1675  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/main.c"
static bool wl18xx_lnk_low_prio(struct wl1271 *wl, u8 hlid, struct wl1271_link *lnk)
{
  #line 1678 
  u8 thold;
  #line 1681 
  unsigned long suspend_bitmap;
  #line 1679 
  struct wl18xx_fw_status_priv *status_priv = (struct wl18xx_fw_status_priv *)(wl->fw_status)->priv;
  #line 1684 
  if (status_priv == (struct wl18xx_fw_status_priv *)0) 
                                                        #line 1685 
                                                        return (_Bool)1;
  #line 1687 
  suspend_bitmap = (unsigned long)status_priv->link_suspend_bitmap;
  #line 1688 
  if ((int)test_bit((long)hlid,& suspend_bitmap) != 0) 
                                                       #line 1689 
                                                       thold = status_priv->tx_suspend_threshold;
  else {
    #line 1690 
    if ((int)test_bit((long)hlid,& wl->fw_fast_lnk_map) != 0) {
      #line 1691 
      if (test_bit((long)hlid,& wl->ap_fw_ps_map)) 
                                                   #line 1694 
                                                   thold = status_priv->tx_slow_stop_threshold; else 
                                                                    #line 1692 
                                                                    thold = status_priv->tx_fast_stop_threshold;
    }
    else 
         #line 1694 
         thold = status_priv->tx_slow_stop_threshold;
  }
  #line 1696 
  return (_Bool)((int)lnk->allocated_pkts < (int)thold);
}

#line 1699  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/main.c"
static u32 wl18xx_convert_hwaddr(struct wl1271 *wl, u32 hwaddr)
{
  #line 1701 
  return hwaddr & 2147483647U;
}

#line 1704 
#line 1870 
static int wl18xx_setup(struct wl1271 *wl);
#line 1706  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/main.c"
static struct wlcore_ops wl18xx_ops = {.setup = & wl18xx_setup, .identify_chip = & wl18xx_identify_chip, .boot = & wl18xx_boot, .plt_init = & wl18xx_plt_init, .trigger_cmd = & wl18xx_trigger_cmd, .ack_event = & wl18xx_ack_event, .wait_for_event = & wl18xx_wait_for_event, .process_mailbox_events = & wl18xx_process_mailbox_events, .calc_tx_blocks = & wl18xx_calc_tx_blocks, .set_tx_desc_blocks = & wl18xx_set_tx_desc_blocks, .set_tx_desc_data_len = & wl18xx_set_tx_desc_data_len, .get_rx_buf_align = & wl18xx_get_rx_buf_align, .get_rx_packet_len = & wl18xx_get_rx_packet_len, .tx_immediate_compl = & wl18xx_tx_immediate_completion, .hw_init = & wl18xx_hw_init, .convert_fw_status = & wl18xx_convert_fw_status, .sta_get_ap_rate_mask = & wl18xx_sta_get_ap_rate_mask, .get_pg_ver = & wl18xx_get_pg_ver, .get_mac = & wl18xx_get_mac, .set_tx_desc_csum = & wl18xx_set_tx_desc_csum, .set_rx_csum = & wl18xx_set_rx_csum, .ap_get_mimo_wide_rate_mask = & wl18xx_ap_get_mimo_wide_rate_mask, .debugfs_init = & wl18xx_debugfs_add_files, .handle_static_data = & wl18xx_handle_static_data, .scan_start = & wl18xx_scan_start, .scan_stop = & wl18xx_scan_stop, .sched_scan_start = & wl18xx_sched_scan_start, .sched_scan_stop = & wl18xx_scan_sched_scan_stop, .get_spare_blocks = & wl18xx_get_spare_blocks, .set_key = & wl18xx_set_key, .channel_switch = & wl18xx_cmd_channel_switch, .pre_pkt_send = & wl18xx_pre_pkt_send, .sta_rc_update = & wl18xx_sta_rc_update, .set_peer_cap = & wl18xx_set_peer_cap, .convert_hwaddr = & wl18xx_convert_hwaddr, .lnk_high_prio = & wl18xx_lnk_high_prio, .lnk_low_prio = & wl18xx_lnk_low_prio, .interrupt_notify = & wl18xx_acx_interrupt_notify_config, .rx_ba_filter = & wl18xx_acx_rx_ba_filter, .ap_sleep = & wl18xx_acx_ap_sleep, .smart_config_start = & wl18xx_cmd_smart_config_start, .smart_config_stop = & wl18xx_cmd_smart_config_stop, .smart_config_set_group_key = & wl18xx_cmd_smart_config_set_group_key, .set_cac = & wl18xx_cmd_set_cac, .dfs_master_restart = & wl18xx_cmd_dfs_master_restart};
#line 1756  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/main.c"
static struct ieee80211_sta_ht_cap wl18xx_siso40_ht_cap_2ghz = {.cap = (unsigned short)4210U, .ht_supported = (_Bool)1, .ampdu_factor = (unsigned char)1U, .ampdu_density = (unsigned char)7U, .mcs = {.rx_mask = {(unsigned char)255U}, .rx_highest = (unsigned short)150U, .tx_params = (unsigned char)1U}};
#line 1771  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/main.c"
static struct ieee80211_sta_ht_cap wl18xx_siso40_ht_cap_5ghz = {.cap = (unsigned short)114U, .ht_supported = (_Bool)1, .ampdu_factor = (unsigned char)1U, .ampdu_density = (unsigned char)7U, .mcs = {.rx_mask = {(unsigned char)255U}, .rx_highest = (unsigned short)150U, .tx_params = (unsigned char)1U}};
#line 1786  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/main.c"
static struct ieee80211_sta_ht_cap wl18xx_siso20_ht_cap = {.cap = (unsigned short)48U, .ht_supported = (_Bool)1, .ampdu_factor = (unsigned char)1U, .ampdu_density = (unsigned char)7U, .mcs = {.rx_mask = {(unsigned char)255U}, .rx_highest = (unsigned short)72U, .tx_params = (unsigned char)1U}};
#line 1800  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/main.c"
static struct ieee80211_sta_ht_cap wl18xx_mimo_ht_cap_2ghz = {.cap = (unsigned short)48U, .ht_supported = (_Bool)1, .ampdu_factor = (unsigned char)1U, .ampdu_density = (unsigned char)7U, .mcs = {.rx_mask = {(unsigned char)255U, (unsigned char)255U}, .rx_highest = (unsigned short)144U, .tx_params = (unsigned char)1U}};
#line 1813  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/main.c"
static struct ieee80211_iface_limit wl18xx_iface_limits[3U] = {{.max = (unsigned short)2U, .types = (unsigned short)4U}, {.max = (unsigned short)1U, .types = (unsigned short)904U}, {.max = (unsigned short)1U, .types = (unsigned short)1024U}};
#line 1833  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/main.c"
static struct ieee80211_iface_limit wl18xx_iface_ap_limits[3U] = {{.max = (unsigned short)2U, .types = (unsigned short)8U}, {.max = (unsigned short)1U, .types = (unsigned short)128U}, {.max = (unsigned short)1U, .types = (unsigned short)1024U}};
#line 1851  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/main.c"
static struct ieee80211_iface_combination wl18xx_iface_combinations[2U] = {{.limits = (struct ieee80211_iface_limit *)(& wl18xx_iface_limits), .num_different_channels = 2U, .max_interfaces = (unsigned short)3U, .n_limits = (unsigned char)3U}, {.limits = (struct ieee80211_iface_limit *)(& wl18xx_iface_ap_limits), .num_different_channels = 1U, .max_interfaces = (unsigned short)2U, .n_limits = (unsigned char)3U, .radar_detect_widths = (unsigned char)15U}};
#line 1870  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/main.c"
static int wl18xx_setup(struct wl1271 *wl)
{
  #line 1873 
  int ret;
  #line 1872 
  struct wl18xx_priv *priv = (struct wl18xx_priv *)wl->priv;
  #line 1879 
  wl->rtable = (int *)(& wl18xx_rtable);
  #line 1880 
  wl->num_tx_desc = 32U;
  #line 1881 
  wl->num_rx_desc = 32U;
  #line 1882 
  wl->num_links = (unsigned char)16U;
  #line 1883 
  wl->max_ap_stations = (unsigned char)10U;
  #line 1884 
  wl->iface_combinations = (struct ieee80211_iface_combination *)(& wl18xx_iface_combinations);
  #line 1885 
  wl->n_iface_combinations = (unsigned char)2U;
  #line 1886 
  wl->num_mac_addr = 2;
  #line 1887 
  wl->band_rate_to_idx = (u8 **)(& wl18xx_band_rate_to_idx);
  #line 1888 
  wl->hw_tx_rate_tbl_size = (unsigned char)29U;
  #line 1889 
  wl->hw_min_ht_rate = (unsigned char)15U;
  #line 1890 
  wl->fw_status_len = 236UL;
  #line 1891 
  wl->fw_status_priv_len = 52UL;
  #line 1892 
  wl->stats.fw_stats_len = 1100UL;
  #line 1893 
  wl->static_data_priv_len = 20UL;
  #line 1895 
  if (num_rx_desc_param != -1) 
                               #line 1896 
                               wl->num_rx_desc = (unsigned int)num_rx_desc_param;
  #line 1898 
  ret = wl18xx_conf_init(wl,wl->dev);
  #line 1899 
  if (ret < 0) 
               #line 1900 
               return ret;
  #line 1903 
  if (board_type_param != (char *)0) {
    #line 1904 
    if (cif_strcmp(board_type_param,(char *)"fpga") == 0) 
                                                          #line 1905 
                                                          priv->conf.phy.board_type = (unsigned char)3U;
    else {
      #line 1906 
      if (cif_strcmp(board_type_param,(char *)"hdk") == 0) 
                                                           #line 1907 
                                                           priv->conf.phy.board_type = (unsigned char)2U;
      else {
        #line 1908 
        if (cif_strcmp(board_type_param,(char *)"dvp") == 0) 
                                                             #line 1909 
                                                             priv->conf.phy.board_type = (unsigned char)1U;
        else {
          #line 1910 
          if (cif_strcmp(board_type_param,(char *)"evb") == 0) 
                                                               #line 1911 
                                                               priv->conf.phy.board_type = (unsigned char)0U;
          else {
            #line 1912 
            if (cif_strcmp(board_type_param,(char *)"com8") == 0) 
                                                                  #line 1913 
                                                                  priv->conf.phy.board_type = (unsigned char)4U;
            else {
              #line 1915 
              printk((char *)"\001",board_type_param);
              #line 1917 
              return -22;
            }
          }
        }
      }
    }
  }
  #line 1921 
  if ((unsigned int)priv->conf.phy.board_type > 4U) {
    #line 1922 
    printk((char *)"\001",(int)priv->conf.phy.board_type);
    #line 1924 
    return -22;
  }
  #line 1927 
  if (low_band_component_param != -1) 
                                      #line 1928 
                                      priv->conf.phy.low_band_component = (unsigned char)low_band_component_param;
  #line 1929 
  if (low_band_component_type_param != -1) 
                                           #line 1930 
                                           priv->conf.phy.low_band_component_type = (unsigned char)low_band_component_type_param;
  #line 1932 
  if (high_band_component_param != -1) 
                                       #line 1933 
                                       priv->conf.phy.high_band_component = (unsigned char)high_band_component_param;
  #line 1934 
  if (high_band_component_type_param != -1) 
                                            #line 1935 
                                            priv->conf.phy.high_band_component_type = (unsigned char)high_band_component_type_param;
  #line 1937 
  if (pwr_limit_reference_11_abg_param != -1) 
                                              #line 1938 
                                              priv->conf.phy.pwr_limit_reference_11_abg = (unsigned char)pwr_limit_reference_11_abg_param;
  #line 1940 
  if (n_antennas_2_param != -1) 
                                #line 1941 
                                priv->conf.phy.number_of_assembled_ant2_4 = (unsigned char)n_antennas_2_param;
  #line 1942 
  if (n_antennas_5_param != -1) 
                                #line 1943 
                                priv->conf.phy.number_of_assembled_ant5 = (unsigned char)n_antennas_5_param;
  #line 1944 
  if (dc2dc_param != -1) 
                         #line 1945 
                         priv->conf.phy.external_pa_dc2dc = (unsigned char)dc2dc_param;
  #line 1947 
  if (ht_mode_param != (char *)0) {
    #line 1948 
    if (cif_strcmp(ht_mode_param,(char *)"default") == 0) 
                                                          #line 1949 
                                                          priv->conf.ht.mode = (unsigned char)0U;
    else {
      #line 1950 
      if (cif_strcmp(ht_mode_param,(char *)"wide") == 0) 
                                                         #line 1951 
                                                         priv->conf.ht.mode = (unsigned char)1U;
      else {
        #line 1952 
        if (cif_strcmp(ht_mode_param,(char *)"siso20") == 0) 
                                                             #line 1953 
                                                             priv->conf.ht.mode = (unsigned char)2U;
        else {
          #line 1955 
          printk((char *)"\001",ht_mode_param);
          #line 1956 
          return -22;
        }
      }
    }
  }
  #line 1960 
  if ((unsigned int)priv->conf.ht.mode == 0U) {
    #line 1965 
    if ((int)wl18xx_is_mimo_supported(wl) != 0) 
                                                #line 1966 
                                                wlcore_set_ht_cap(wl,(enum nl80211_band)NL80211_BAND_2GHZ,& wl18xx_mimo_ht_cap_2ghz); else 
                                                                    #line 1969 
                                                                    wlcore_set_ht_cap(wl,(enum nl80211_band)NL80211_BAND_2GHZ,& wl18xx_siso40_ht_cap_2ghz);
    #line 1973 
    wlcore_set_ht_cap(wl,(enum nl80211_band)NL80211_BAND_5GHZ,& wl18xx_siso40_ht_cap_5ghz);
  }
  else 
    #line 1975 
    if ((unsigned int)priv->conf.ht.mode == 1U) {
      #line 1976 
      wlcore_set_ht_cap(wl,(enum nl80211_band)NL80211_BAND_2GHZ,& wl18xx_siso40_ht_cap_2ghz);
      #line 1978 
      wlcore_set_ht_cap(wl,(enum nl80211_band)NL80211_BAND_5GHZ,& wl18xx_siso40_ht_cap_5ghz);
    }
    else 
      #line 1980 
      if ((unsigned int)priv->conf.ht.mode == 2U) {
        #line 1981 
        wlcore_set_ht_cap(wl,(enum nl80211_band)NL80211_BAND_2GHZ,& wl18xx_siso20_ht_cap);
        #line 1983 
        wlcore_set_ht_cap(wl,(enum nl80211_band)NL80211_BAND_5GHZ,& wl18xx_siso20_ht_cap);
      }
  #line 1987 
  if (! checksum_param) {
    #line 1988 
    wl18xx_ops.set_rx_csum = (void (*)(struct wl1271 *, struct wl1271_rx_descriptor *, struct sk_buff *))0;
    #line 1989 
    wl18xx_ops.init_vif = (int (*)(struct wl1271 *, struct wl12xx_vif *))0;
  }
  #line 1993 
  wl->enable_11a = (_Bool)((unsigned int)priv->conf.phy.number_of_assembled_ant5 != 0U);
  #line 1995 
  return 0;
}

#line 1998  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/main.c"
static int wl18xx_probe(struct platform_device *pdev)
{
  #line 2000 
  struct wl1271 *wl;
  #line 2001 
  struct ieee80211_hw *hw;
  #line 2002 
  int ret;
  #line 2004 
  hw = wlcore_alloc_hw(1040UL,53248U,180U);
  #line 2007 
  if ((int)IS_ERR((void *)hw) != 0) {
    #line 2008 
    printk((char *)"\001");
    #line 2009 
    ret = (int)PTR_ERR((void *)hw);
    #line 2010 
    goto out;
  }
  #line 2013 
  wl = (struct wl1271 *)hw->priv;
  #line 2014 
  wl->ops = & wl18xx_ops;
  #line 2015 
  wl->ptable = (struct wlcore_partition_set *)(& wl18xx_ptable);
  #line 2016 
  ret = wlcore_probe(wl,pdev);
  #line 2017 
  if (ret != 0) 
                #line 2018 
                goto out_free;
  #line 2020 
  return ret;
  #line 2022 
  out_free: 
            #line 2022 
  ;
  #line 2023 
  wlcore_free_hw(wl);
  #line 2024 
  out: 
       #line 2024 
  ;
  #line 2025 
  return ret;
}

#line 2028  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/main.c"
static struct platform_device_id wl18xx_id_table[2U] = {{.name = {(char)'w', (char)'l', (char)'1', (char)'8', (char)'x', (char)'x'}}};
#line 2032  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/main.c"
struct platform_device_id __mod_platform__wl18xx_id_table_device_table[2U];
#line 2034  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/main.c"
static struct platform_driver wl18xx_driver = {.probe = & wl18xx_probe, .remove = & wlcore_remove, .driver = {.name = (char *)"wl18xx_driver"}, .id_table = (struct platform_device_id *)(& wl18xx_id_table)};
#line 2043  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/main.c"
static int wl18xx_driver_init(void)
{
  #line 2043 
  return cif___platform_driver_register(& wl18xx_driver,& __this_module);
}

#line 2043  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/main.c"
static void wl18xx_driver_exit(void)
{
  #line 2043 
  cif_platform_driver_unregister(& wl18xx_driver);
  #line 2044 
  return;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
struct platform_driver *emg_alias_wl18xx_driver = & wl18xx_driver;
#line 94  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
int (*emg_alias_wlcore_remove)(struct platform_device *) = & wlcore_remove;
#line 97 
#line 97 
int emg___platform_driver_register(struct platform_driver *arg0, struct module *arg1);
#line 100 
#line 100 
void emg_platform_driver_unregister(struct platform_driver *arg0);
#line 105  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
int emg_wrapper_wl18xx_probe(struct platform_device *arg0)
{
  #line 106 
  return wl18xx_probe(arg0);
}

#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
void emg_wl18xx_driver_exit(void)
{
  #line 111 
  wl18xx_driver_exit();
  #line 112 
  return;
}

#line 114  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
int emg_wl18xx_driver_init(void)
{
  #line 115 
  return wl18xx_driver_init();
}

#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif_set_bit_0(long nr, unsigned long *addr)
{
  #line 136 
  ldv_set_bit(nr,addr);
  #line 137 
  return;
}

#line 224  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static long PTR_ERR(void *ptr)
{
  #line 227 
  return ldv_ptr_err(ptr);
}

#line 231  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static bool IS_ERR(void *ptr)
{
  #line 234 
  return ldv_is_err(ptr);
}

#line 671  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void *cif_kmemdup(void *src, size_t len, gfp_t gfp)
{
  #line 674 
  return ldv_kmemdup(src,len,gfp);
}

#line 812  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static int cif_request_firmware(struct firmware **fw, char *name, struct device *device)
{
  #line 815 
  return ldv_request_firmware(fw);
}

#line 819  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif_release_firmware(struct firmware *fw)
{
  #line 822 
  ldv_release_firmware(fw);
  #line 823 
  return;
}

#line 826  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static int cif_strcmp(char *cs, char *ct)
{
  #line 829 
  return ldv_strcmp(cs,ct);
}

#line 833  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static int cif___platform_driver_register(struct platform_driver *ldv_func_arg1, struct module *ldv_func_arg2)
{
  #line 837 
  return emg___platform_driver_register(ldv_func_arg1,ldv_func_arg2);
}

#line 841  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif_platform_driver_unregister(struct platform_driver *ldv_func_arg1)
{
  #line 845 
  emg_platform_driver_unregister(ldv_func_arg1);
  #line 846 
  return;
}

#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 488  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/acx.i.aux"
static void *kzalloc_0(size_t size, gfp_t flags);
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/cmd.h"
#line 34 
int wl1271_cmd_configure(struct wl1271 *, u16, void *, size_t);
#line 393  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/acx.h"
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/acx.c"
int wl18xx_acx_clear_statistics(struct wl1271 *wl);
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/acx.h"
#line 299  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/acx.c"
int wl18xx_acx_time_sync_cfg(struct wl1271 *wl);
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/acx.c"
int wl18xx_acx_host_if_cfg_bitmap(struct wl1271 *wl, u32 host_cfg_bitmap, u32 sdio_blk_size, u32 extra_mem_blks, u32 len_field_size)
{
  #line 19 
  struct wl18xx_acx_host_config_bitmap *bitmap_conf;
  #line 20 
  int ret;
  #line 22 
  if ((long)((wl12xx_debug_level & 8192U) != 0U) != 0L) {
    #line 22 
    bool branch;
    #line 22 
    struct _ddebug __UNIQUE_ID_ddebug555 = {.modname = (char *)"wl18xx", .function = (char *)"wl18xx_acx_host_if_cfg_bitmap", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/acx.c", .format = (char *)"wlcore", .lineno = (unsigned int)22U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 22 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug555.key.dd_key_false.key,(_Bool)0);
    #line 22 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 22 
                                                __dynamic_pr_debug(& __UNIQUE_ID_ddebug555,(char *)"wlcore",host_cfg_bitmap,sdio_blk_size,extra_mem_blks,len_field_size);
  }
  #line 26 
  bitmap_conf = (struct wl18xx_acx_host_config_bitmap *)kzalloc_0(24UL,3264U);
  #line 27 
  if (bitmap_conf == (struct wl18xx_acx_host_config_bitmap *)0) {
    #line 28 
    ret = -12;
    #line 29 
    goto out;
  }
  #line 32 
  bitmap_conf->host_cfg_bitmap = host_cfg_bitmap;
  #line 33 
  bitmap_conf->host_sdio_block_size = sdio_blk_size;
  #line 34 
  bitmap_conf->extra_mem_blocks = extra_mem_blks;
  #line 35 
  bitmap_conf->length_field_size = len_field_size;
  #line 37 
  ret = wl1271_cmd_configure(wl,(unsigned short)57,(void *)bitmap_conf,24UL);
  #line 39 
  if (ret < 0) {
    #line 40 
    printk((char *)"\001",ret);
    #line 41 
    goto out;
  }
  #line 44 
  out: 
       #line 44 
  ;
  #line 45 
  kfree((void *)bitmap_conf);
  #line 47 
  return ret;
}

#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/acx.c"
int wl18xx_acx_set_checksum_state(struct wl1271 *wl)
{
  #line 52 
  struct wl18xx_acx_checksum_state *acx;
  #line 53 
  int ret;
  #line 55 
  if ((long)((wl12xx_debug_level & 8192U) != 0U) != 0L) {
    #line 55 
    bool branch;
    #line 55 
    struct _ddebug __UNIQUE_ID_ddebug556 = {.modname = (char *)"wl18xx", .function = (char *)"wl18xx_acx_set_checksum_state", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/acx.c", .format = (char *)"wlcore", .lineno = (unsigned int)55U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 55 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug556.key.dd_key_false.key,(_Bool)0);
    #line 55 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 55 
                                                __dynamic_pr_debug(& __UNIQUE_ID_ddebug556,(char *)"wlcore");
  }
  #line 57 
  acx = (struct wl18xx_acx_checksum_state *)kzalloc_0(12UL,3264U);
  #line 58 
  if (acx == (struct wl18xx_acx_checksum_state *)0) {
    #line 59 
    ret = -12;
    #line 60 
    goto out;
  }
  #line 63 
  acx->checksum_state = (unsigned char)1U;
  #line 65 
  ret = wl1271_cmd_configure(wl,(unsigned short)82,(void *)acx,12UL);
  #line 66 
  if (ret < 0) {
    #line 67 
    printk((char *)"\001",ret);
    #line 68 
    goto out;
  }
  #line 71 
  out: 
       #line 71 
  ;
  #line 72 
  kfree((void *)acx);
  #line 73 
  return ret;
}

#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/acx.c"
int wl18xx_acx_clear_statistics(struct wl1271 *wl)
{
  #line 78 
  struct wl18xx_acx_clear_statistics *acx;
  #line 79 
  int ret = 0;
  #line 81 
  if ((long)((wl12xx_debug_level & 8192U) != 0U) != 0L) {
    #line 81 
    bool branch;
    #line 81 
    struct _ddebug __UNIQUE_ID_ddebug557 = {.modname = (char *)"wl18xx", .function = (char *)"wl18xx_acx_clear_statistics", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/acx.c", .format = (char *)"wlcore", .lineno = (unsigned int)81U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 81 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug557.key.dd_key_false.key,(_Bool)0);
    #line 81 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 81 
                                                __dynamic_pr_debug(& __UNIQUE_ID_ddebug557,(char *)"wlcore");
  }
  #line 83 
  acx = (struct wl18xx_acx_clear_statistics *)kzalloc_0(8UL,3264U);
  #line 84 
  if (acx == (struct wl18xx_acx_clear_statistics *)0) {
    #line 85 
    ret = -12;
    #line 86 
    goto out;
  }
  #line 89 
  ret = wl1271_cmd_configure(wl,(unsigned short)84,(void *)acx,8UL);
  #line 90 
  if (ret < 0) {
    #line 91 
    printk((char *)"\001",ret);
    #line 92 
    goto out;
  }
  #line 95 
  out: 
       #line 95 
  ;
  #line 96 
  kfree((void *)acx);
  #line 97 
  return ret;
}

#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/acx.c"
int wl18xx_acx_peer_ht_operation_mode(struct wl1271 *wl, u8 hlid, bool wide)
{
  #line 102 
  struct wlcore_peer_ht_operation_mode *acx;
  #line 103 
  int ret;
  #line 105 
  if ((long)((wl12xx_debug_level & 8192U) != 0U) != 0L) {
    #line 105 
    bool branch;
    #line 105 
    struct _ddebug __UNIQUE_ID_ddebug558 = {.modname = (char *)"wl18xx", .function = (char *)"wl18xx_acx_peer_ht_operation_mode", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/acx.c", .format = (char *)"wlcore", .lineno = (unsigned int)105U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 105 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug558.key.dd_key_false.key,(_Bool)0);
    #line 105 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 105 
                                                __dynamic_pr_debug(& __UNIQUE_ID_ddebug558,(char *)"wlcore",(int)hlid,(int)wide);
  }
  #line 108 
  acx = (struct wlcore_peer_ht_operation_mode *)kzalloc_0(12UL,3264U);
  #line 109 
  if (acx == (struct wlcore_peer_ht_operation_mode *)0) {
    #line 110 
    ret = -12;
    #line 111 
    goto out;
  }
  #line 114 
  acx->hlid = hlid;
  #line 115 
  acx->bandwidth = (unsigned char)((int)wide != 0);
  #line 117 
  ret = wl1271_cmd_configure(wl,(unsigned short)81,(void *)acx,12UL);
  #line 120 
  if (ret < 0) {
    #line 121 
    printk((char *)"\001",ret);
    #line 122 
    goto out;
  }
  #line 125 
  out: 
       #line 125 
  ;
  #line 126 
  kfree((void *)acx);
  #line 127 
  return ret;
}

#line 136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/acx.c"
int wl18xx_acx_set_peer_cap(struct wl1271 *wl, struct ieee80211_sta_ht_cap *ht_cap, bool allow_ht_operation, u32 rate_set, u8 hlid)
{
  #line 141 
  struct wlcore_acx_peer_cap *acx;
  #line 142 
  int ret = 0;
  #line 143 
  u32 ht_capabilites = 0U;
  #line 145 
  if ((long)((wl12xx_debug_level & 8192U) != 0U) != 0L) {
    #line 145 
    bool branch;
    #line 145 
    struct _ddebug __UNIQUE_ID_ddebug559 = {.modname = (char *)"wl18xx", .function = (char *)"wl18xx_acx_set_peer_cap", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/acx.c", .format = (char *)"wlcore", .lineno = (unsigned int)145U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 145 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug559.key.dd_key_false.key,(_Bool)0);
    #line 145 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 145 
                                                __dynamic_pr_debug(& __UNIQUE_ID_ddebug559,(char *)"wlcore",(int)ht_cap->ht_supported,(int)ht_cap->cap,rate_set);
  }
  #line 149 
  acx = (struct wlcore_acx_peer_cap *)kzalloc_0(20UL,3264U);
  #line 150 
  if (acx == (struct wlcore_acx_peer_cap *)0) {
    #line 151 
    ret = -12;
    #line 152 
    goto out;
  }
  #line 155 
  if ((int)allow_ht_operation != 0 && (int)ht_cap->ht_supported != 0) {
    #line 157 
    ht_capabilites = (unsigned int)ht_cap->cap;
    #line 163 
    ht_capabilites |= 65536U;
    #line 166 
    acx->ampdu_max_length = ht_cap->ampdu_factor;
    #line 167 
    acx->ampdu_min_spacing = ht_cap->ampdu_density;
  }
  #line 170 
  acx->hlid = hlid;
  #line 171 
  acx->ht_capabilites = ht_capabilites;
  #line 172 
  acx->supported_rates = rate_set;
  #line 174 
  ret = wl1271_cmd_configure(wl,(unsigned short)86,(void *)acx,20UL);
  #line 175 
  if (ret < 0) {
    #line 176 
    printk((char *)"\001",ret);
    #line 177 
    goto out;
  }
  #line 180 
  out: 
       #line 180 
  ;
  #line 181 
  kfree((void *)acx);
  #line 182 
  return ret;
}

#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/acx.c"
int wl18xx_acx_interrupt_notify_config(struct wl1271 *wl, bool action)
{
  #line 192 
  struct wl18xx_acx_interrupt_notify *acx;
  #line 193 
  int ret = 0;
  #line 195 
  acx = (struct wl18xx_acx_interrupt_notify *)kzalloc_0(12UL,3264U);
  #line 196 
  if (acx == (struct wl18xx_acx_interrupt_notify *)0) {
    #line 197 
    ret = -12;
    #line 198 
    goto out;
  }
  #line 201 
  acx->enable = (unsigned int)action;
  #line 202 
  ret = wl1271_cmd_configure(wl,(unsigned short)87,(void *)acx,12UL);
  #line 203 
  if (ret < 0) {
    #line 204 
    printk((char *)"\001",ret);
    #line 205 
    goto out;
  }
  #line 208 
  out: 
       #line 208 
  ;
  #line 209 
  kfree((void *)acx);
  #line 210 
  return ret;
}

#line 217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/acx.c"
int wl18xx_acx_rx_ba_filter(struct wl1271 *wl, bool action)
{
  #line 219 
  struct wl18xx_acx_rx_ba_filter *acx;
  #line 220 
  int ret = 0;
  #line 222 
  acx = (struct wl18xx_acx_rx_ba_filter *)kzalloc_0(12UL,3264U);
  #line 223 
  if (acx == (struct wl18xx_acx_rx_ba_filter *)0) {
    #line 224 
    ret = -12;
    #line 225 
    goto out;
  }
  #line 228 
  acx->enable = (unsigned int)action;
  #line 229 
  ret = wl1271_cmd_configure(wl,(unsigned short)88,(void *)acx,12UL);
  #line 230 
  if (ret < 0) {
    #line 231 
    printk((char *)"\001",ret);
    #line 233 
    goto out;
  }
  #line 236 
  out: 
       #line 236 
  ;
  #line 237 
  kfree((void *)acx);
  #line 238 
  return ret;
}

#line 241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/acx.c"
int wl18xx_acx_ap_sleep(struct wl1271 *wl)
{
  #line 244 
  struct acx_ap_sleep_cfg *acx;
  #line 246 
  int ret;
  #line 243 
  struct wl18xx_priv *priv = (struct wl18xx_priv *)wl->priv;
  #line 245 
  struct conf_ap_sleep_settings *conf = & priv->conf.ap_sleep;
  #line 248 
  if ((long)((wl12xx_debug_level & 8192U) != 0U) != 0L) {
    #line 248 
    bool branch;
    #line 248 
    struct _ddebug __UNIQUE_ID_ddebug560 = {.modname = (char *)"wl18xx", .function = (char *)"wl18xx_acx_ap_sleep", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/acx.c", .format = (char *)"wlcore", .lineno = (unsigned int)248U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 248 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug560.key.dd_key_false.key,(_Bool)0);
    #line 248 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 248 
                                                __dynamic_pr_debug(& __UNIQUE_ID_ddebug560,(char *)"wlcore");
  }
  #line 250 
  acx = (struct acx_ap_sleep_cfg *)kzalloc_0(12UL,3264U);
  #line 251 
  if (acx == (struct acx_ap_sleep_cfg *)0) {
    #line 252 
    ret = -12;
    #line 253 
    goto out;
  }
  #line 256 
  acx->idle_duty_cycle = conf->idle_duty_cycle;
  #line 257 
  acx->connected_duty_cycle = conf->connected_duty_cycle;
  #line 258 
  acx->max_stations_thresh = conf->max_stations_thresh;
  #line 259 
  acx->idle_conn_thresh = conf->idle_conn_thresh;
  #line 261 
  ret = wl1271_cmd_configure(wl,(unsigned short)89,(void *)acx,12UL);
  #line 262 
  if (ret < 0) {
    #line 263 
    printk((char *)"\001",ret);
    #line 264 
    goto out;
  }
  #line 267 
  out: 
       #line 267 
  ;
  #line 268 
  kfree((void *)acx);
  #line 269 
  return ret;
}

#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/acx.c"
int wl18xx_acx_dynamic_fw_traces(struct wl1271 *wl)
{
  #line 274 
  struct acx_dynamic_fw_traces_cfg *acx;
  #line 275 
  int ret;
  #line 277 
  if ((long)((wl12xx_debug_level & 8192U) != 0U) != 0L) {
    #line 277 
    bool branch;
    #line 277 
    struct _ddebug __UNIQUE_ID_ddebug561 = {.modname = (char *)"wl18xx", .function = (char *)"wl18xx_acx_dynamic_fw_traces", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/acx.c", .format = (char *)"wlcore", .lineno = (unsigned int)277U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 277 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug561.key.dd_key_false.key,(_Bool)0);
    #line 277 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 277 
                                                __dynamic_pr_debug(& __UNIQUE_ID_ddebug561,(char *)"wlcore",wl->dynamic_fw_traces);
  }
  #line 280 
  acx = (struct acx_dynamic_fw_traces_cfg *)kzalloc_0(12UL,3264U);
  #line 281 
  if (acx == (struct acx_dynamic_fw_traces_cfg *)0) {
    #line 282 
    ret = -12;
    #line 283 
    goto out;
  }
  #line 286 
  acx->dynamic_fw_traces = wl->dynamic_fw_traces;
  #line 288 
  ret = wl1271_cmd_configure(wl,(unsigned short)90,(void *)acx,12UL);
  #line 290 
  if (ret < 0) {
    #line 291 
    printk((char *)"\001",ret);
    #line 292 
    goto out;
  }
  #line 294 
  out: 
       #line 294 
  ;
  #line 295 
  kfree((void *)acx);
  #line 296 
  return ret;
}

#line 299  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/acx.c"
int wl18xx_acx_time_sync_cfg(struct wl1271 *wl)
{
  #line 301 
  struct acx_time_sync_cfg *acx;
  #line 302 
  int ret;
  #line 304 
  if ((long)((wl12xx_debug_level & 8192U) != 0U) != 0L) {
    #line 304 
    bool branch;
    #line 304 
    struct _ddebug __UNIQUE_ID_ddebug562 = {.modname = (char *)"wl18xx", .function = (char *)"wl18xx_acx_time_sync_cfg", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/acx.c", .format = (char *)"wlcore", .lineno = (unsigned int)304U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 304 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug562.key.dd_key_false.key,(_Bool)0);
    #line 304 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 304 
                                                __dynamic_pr_debug(& __UNIQUE_ID_ddebug562,(char *)"wlcore",wl->conf.sg.params[3],(u8 *)(& wl->zone_master_mac_addr));
  }
  #line 308 
  acx = (struct acx_time_sync_cfg *)kzalloc_0(16UL,3264U);
  #line 309 
  if (acx == (struct acx_time_sync_cfg *)0) {
    #line 310 
    ret = -12;
    #line 311 
    goto out;
  }
  #line 314 
  acx->sync_mode = (unsigned char)wl->conf.sg.params[3];
  #line 315 
  memcpy((void *)(& acx->zone_mac_addr),(void *)(& wl->zone_master_mac_addr),6UL);
  #line 317 
  ret = wl1271_cmd_configure(wl,(unsigned short)91,(void *)acx,16UL);
  #line 319 
  if (ret < 0) {
    #line 320 
    printk((char *)"\001",ret);
    #line 321 
    goto out;
  }
  #line 323 
  out: 
       #line 323 
  ;
  #line 324 
  kfree((void *)acx);
  #line 325 
  return ret;
}

#line 488  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/acx.i.aux"
static void *kzalloc_0(size_t size, gfp_t flags)
{
  #line 491 
  return ldv_kzalloc(size,flags);
}

/* compiler builtin: 
   void *__builtin_memcpy(void *, void const *, unsigned long);   */
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler.h"
__inline static void __read_once_size(void *p, void *res, int size)
{
  #line 199 
  switch (size) {
    #line 199 
    case 1: 
            #line 199 
    ;
    #line 199 
    *((__u8 *)res) = *((__u8 *)p);
    #line 199 
    break;
    #line 199 
    case 2: 
            #line 199 
    ;
    #line 199 
    *((__u16 *)res) = *((__u16 *)p);
    #line 199 
    break;
    #line 199 
    case 4: 
            #line 199 
    ;
    #line 199 
    *((__u32 *)res) = *((__u32 *)p);
    #line 199 
    break;
    #line 199 
    case 8: 
            #line 199 
    ;
    #line 199 
    *((__u64 *)res) = *((__u64 *)p);
    #line 199 
    break;
    #line 199 
    default: 
             #line 199 
    ;
    #line 200 
    ldv_inline_asm();
    #line 199 
    __builtin_memcpy(res,(void const *)p,(unsigned long)size);
    #line 200 
    ldv_inline_asm();
  }
  #line 203 
  return;
}

#line 220  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler.h"
__inline static void __write_once_size(void *p, void *res, int size)
{
  #line 222 
  switch (size) {
    #line 223 
    case 1: 
            #line 223 
    ;
    #line 223 
    *((__u8 *)p) = *((__u8 *)res);
    #line 223 
    break;
    #line 224 
    case 2: 
            #line 224 
    ;
    #line 224 
    *((__u16 *)p) = *((__u16 *)res);
    #line 224 
    break;
    #line 225 
    case 4: 
            #line 225 
    ;
    #line 225 
    *((__u32 *)p) = *((__u32 *)res);
    #line 225 
    break;
    #line 226 
    case 8: 
            #line 226 
    ;
    #line 226 
    *((__u64 *)p) = *((__u64 *)res);
    #line 226 
    break;
    #line 227 
    default: 
             #line 227 
    ;
    #line 228 
    ldv_inline_asm();
    #line 229 
    __builtin_memcpy(p,(void const *)res,(unsigned long)size);
    #line 230 
    ldv_inline_asm();
  }
  #line 232 
  return;
}

#line 416  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
#line 416 
int kstrtoul_from_user(char *, size_t, unsigned int, unsigned long *);
#line 422 
#line 422 
int kstrtou8_from_user(char *, size_t, unsigned int, u8 *);
#line 472 
#line 472 
int snprintf(char *, size_t, char * , ...);
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg.h"
#line 15 
void __cmpxchg_wrong_size(void);
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg_64.h"
__inline static int arch_atomic_read(atomic_t *v)
{
  #line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
  union __anonunion___u_5259 __u;
  #line 31 
  __read_once_size((void *)(& v->counter),(void *)(& __u.__c),4);
  #line 31 
  return (__u.__val);
}

#line 198  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
__inline static bool arch_atomic_try_cmpxchg(atomic_t *v, int *old, int new)
{
  #line 200 
  bool success;
  {
    #line 200 
    int *_old = old;
    #line 200 
    int __old = *_old;
    #line 200 
    int __new = new;
    #line 200 
    switch (4UL) {
      #line 200 
      case (unsigned long)1: 
                             #line 200 
      ;
      {
        #line 200 
        u8 *__ptr = (u8 *)(& v->counter);
        #line 201 
        ldv_inline_asm();
        #line 200 
        break;
      }
      #line 200 
      case (unsigned long)2: 
                             #line 200 
      ;
      {
        #line 200 
        u16 *__ptr_0 = (u16 *)(& v->counter);
        #line 201 
        ldv_inline_asm();
        #line 200 
        break;
      }
      #line 200 
      case (unsigned long)4: 
                             #line 200 
      ;
      {
        #line 200 
        u32 *__ptr_1 = (u32 *)(& v->counter);
        #line 201 
        ldv_inline_asm();
        #line 200 
        break;
      }
      #line 200 
      case (unsigned long)8: 
                             #line 200 
      ;
      {
        #line 200 
        u64 *__ptr_2 = (u64 *)(& v->counter);
        #line 201 
        ldv_inline_asm();
        #line 200 
        break;
      }
      #line 200 
      default: 
               #line 200 
      ;
      #line 200 
      __cmpxchg_wrong_size();
    }
    #line 200 
    if ((long)(! success) != 0L) 
                                 #line 200 
                                 *_old = __old;
    }
  #line 200 
  return (_Bool)((long)((long)((int)success != 0)) != 0L);
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static int atomic_read(atomic_t *v)
{
  #line 26 
  kasan_check_read((void *)v,4U);
  #line 27 
  return arch_atomic_read(v);
}

#line 691  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static bool atomic_try_cmpxchg(atomic_t *v, int *old, int new)
{
  #line 693 
  kasan_check_read((void *)v,4U);
  #line 694 
  kasan_check_read((void *)old,4U);
  #line 695 
  return arch_atomic_try_cmpxchg(v,old,new);
}

#line 1084  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/atomic-fallback.h"
__inline static int atomic_fetch_add_unless(atomic_t *v, int a, int u)
{
  #line 1086 
  int c = atomic_read(v);
  #line 1088 
  while (! ((long)(c == u) != 0L)) {
    #line 1091 
    if (atomic_try_cmpxchg(v,& c,c + a)) 
                                         #line 1088 
                                         break;
  }
  #line 1093 
  return c;
}

#line 1109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/atomic-fallback.h"
__inline static bool atomic_add_unless(atomic_t *v, int a, int u)
{
  #line 1111 
  ;
  #line 1111 
  return (_Bool)(atomic_fetch_add_unless(v,a,u) != u);
}

#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
#line 1605 
static void cif_mutex_lock_mutex_of_wl1271(struct mutex *lock);
#line 29 
#line 29 
void ldv_mutex_model_lock(struct mutex *, char *);
#line 31 
#line 31 
void ldv_mutex_model_unlock(struct mutex *, char *);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 24 
void *ldv_kmalloc(size_t size, gfp_t flags);
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
#line 1612  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
static void cif_mutex_unlock_mutex_of_wl1271(struct mutex *lock);
#line 177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timekeeping.h"
#line 177 
u64 ktime_get_mono_fast_ns(void);
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_runtime.h"
#line 39 
int __pm_runtime_suspend(struct device *, int);
#line 40 
#line 40 
int __pm_runtime_resume(struct device *, int);
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_runtime.h"
__inline static void pm_runtime_put_noidle(struct device *dev)
{
  #line 75 
  atomic_add_unless(& dev->power.usage_count,-1,0);
  #line 76 
  return;
}

#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_runtime.h"
__inline static void pm_runtime_mark_last_busy(struct device *dev)
{
  #line 108 
  union __anonunion___u_5513 __u = {.__val = ktime_get_mono_fast_ns()};
  #line 107 
  __write_once_size((void *)(& dev->power.last_busy),(void *)(& __u.__c),8);
  #line 107 
  u64 tmp_2 = __u.__val;
  #line 109 
  return;
}

#line 224  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_runtime.h"
__inline static int pm_runtime_get_sync(struct device *dev)
{
  #line 226 
  return __pm_runtime_resume(dev,4);
}

#line 234  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_runtime.h"
__inline static int pm_runtime_put_autosuspend(struct device *dev)
{
  #line 236 
  return __pm_runtime_suspend(dev,13);
}

#line 3013  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
#line 3013 
loff_t default_llseek(struct file *, loff_t, int);
#line 3135 
#line 3135 
loff_t generic_file_llseek(struct file *, loff_t, int);
#line 3300 
#line 3300 
int simple_open(struct inode *, struct file *);
#line 3337 
#line 3337 
ssize_t simple_read_from_buffer(void *, size_t, loff_t *, void *, size_t);
#line 542  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 1265  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
static void *kmalloc(size_t size, gfp_t flags);
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/debugfs.h"
#line 1627  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
static struct dentry *cif_debugfs_create_file(char *name, umode_t mode, struct dentry *parent, void *data, struct file_operations *fops);
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/debugfs.h"
#line 1619  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
static struct dentry *cif_debugfs_create_dir(char *name, struct dentry *parent);
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/debugfs.h"
#line 15 
int wl1271_format_buffer(char *, size_t, loff_t *, char * , ...);
#line 21 
#line 21 
void wl1271_debugfs_update_stats(struct wl1271 *);
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/cmd.h"
#line 81 
int wlcore_cmd_generic_cfg(struct wl1271 *, struct wl12xx_vif *, u8, u8, u8);
#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/cmd.h"
#line 80 
int wl18xx_cmd_radar_detection_debug(struct wl1271 *wl, u8 channel);
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t error_error_frame_non_ctrl_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 27 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 27 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 27 
  wl1271_debugfs_update_stats(wl);
  #line 27 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->error.error_frame_non_ctrl);
}

#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations error_error_frame_non_ctrl_ops = {.llseek = & generic_file_llseek, .read = & error_error_frame_non_ctrl_read, .open = & simple_open};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t error_error_frame_ctrl_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 28 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 28 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 28 
  wl1271_debugfs_update_stats(wl);
  #line 28 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->error.error_frame_ctrl);
}

#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations error_error_frame_ctrl_ops = {.llseek = & generic_file_llseek, .read = & error_error_frame_ctrl_read, .open = & simple_open};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t error_error_frame_during_protection_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 29 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 29 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 29 
  wl1271_debugfs_update_stats(wl);
  #line 29 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->error.error_frame_during_protection);
}

#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations error_error_frame_during_protection_ops = {.llseek = & generic_file_llseek, .read = & error_error_frame_during_protection_read, .open = & simple_open};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t error_null_frame_tx_start_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 30 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 30 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 30 
  wl1271_debugfs_update_stats(wl);
  #line 30 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->error.null_frame_tx_start);
}

#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations error_null_frame_tx_start_ops = {.llseek = & generic_file_llseek, .read = & error_null_frame_tx_start_read, .open = & simple_open};
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t error_null_frame_cts_start_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 31 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 31 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 31 
  wl1271_debugfs_update_stats(wl);
  #line 31 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->error.null_frame_cts_start);
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations error_null_frame_cts_start_ops = {.llseek = & generic_file_llseek, .read = & error_null_frame_cts_start_read, .open = & simple_open};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t error_bar_retry_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 32 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 32 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 32 
  wl1271_debugfs_update_stats(wl);
  #line 32 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->error.bar_retry);
}

#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations error_bar_retry_ops = {.llseek = & generic_file_llseek, .read = & error_bar_retry_read, .open = & simple_open};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t error_num_frame_cts_nul_flid_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 33 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 33 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 33 
  wl1271_debugfs_update_stats(wl);
  #line 33 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->error.num_frame_cts_nul_flid);
}

#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations error_num_frame_cts_nul_flid_ops = {.llseek = & generic_file_llseek, .read = & error_num_frame_cts_nul_flid_read, .open = & simple_open};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t error_tx_abort_failure_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 34 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 34 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 34 
  wl1271_debugfs_update_stats(wl);
  #line 34 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->error.tx_abort_failure);
}

#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations error_tx_abort_failure_ops = {.llseek = & generic_file_llseek, .read = & error_tx_abort_failure_read, .open = & simple_open};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t error_tx_resume_failure_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 35 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 35 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 35 
  wl1271_debugfs_update_stats(wl);
  #line 35 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->error.tx_resume_failure);
}

#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations error_tx_resume_failure_ops = {.llseek = & generic_file_llseek, .read = & error_tx_resume_failure_read, .open = & simple_open};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t error_rx_cmplt_db_overflow_cnt_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 36 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 36 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 36 
  wl1271_debugfs_update_stats(wl);
  #line 36 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->error.rx_cmplt_db_overflow_cnt);
}

#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations error_rx_cmplt_db_overflow_cnt_ops = {.llseek = & generic_file_llseek, .read = & error_rx_cmplt_db_overflow_cnt_read, .open = & simple_open};
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t error_elp_while_rx_exch_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 37 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 37 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 37 
  wl1271_debugfs_update_stats(wl);
  #line 37 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->error.elp_while_rx_exch);
}

#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations error_elp_while_rx_exch_ops = {.llseek = & generic_file_llseek, .read = & error_elp_while_rx_exch_read, .open = & simple_open};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t error_elp_while_tx_exch_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 38 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 38 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 38 
  wl1271_debugfs_update_stats(wl);
  #line 38 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->error.elp_while_tx_exch);
}

#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations error_elp_while_tx_exch_ops = {.llseek = & generic_file_llseek, .read = & error_elp_while_tx_exch_read, .open = & simple_open};
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t error_elp_while_tx_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 39 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 39 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 39 
  wl1271_debugfs_update_stats(wl);
  #line 39 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->error.elp_while_tx);
}

#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations error_elp_while_tx_ops = {.llseek = & generic_file_llseek, .read = & error_elp_while_tx_read, .open = & simple_open};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t error_elp_while_nvic_pending_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 40 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 40 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 40 
  wl1271_debugfs_update_stats(wl);
  #line 40 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->error.elp_while_nvic_pending);
}

#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations error_elp_while_nvic_pending_ops = {.llseek = & generic_file_llseek, .read = & error_elp_while_nvic_pending_read, .open = & simple_open};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t error_rx_excessive_frame_len_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 41 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 41 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 41 
  wl1271_debugfs_update_stats(wl);
  #line 41 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->error.rx_excessive_frame_len);
}

#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations error_rx_excessive_frame_len_ops = {.llseek = & generic_file_llseek, .read = & error_rx_excessive_frame_len_read, .open = & simple_open};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t error_burst_mismatch_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 42 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 42 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 42 
  wl1271_debugfs_update_stats(wl);
  #line 42 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->error.burst_mismatch);
}

#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations error_burst_mismatch_ops = {.llseek = & generic_file_llseek, .read = & error_burst_mismatch_read, .open = & simple_open};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t error_tbc_exch_mismatch_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 43 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 43 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 43 
  wl1271_debugfs_update_stats(wl);
  #line 43 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->error.tbc_exch_mismatch);
}

#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations error_tbc_exch_mismatch_ops = {.llseek = & generic_file_llseek, .read = & error_tbc_exch_mismatch_read, .open = & simple_open};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t tx_tx_prepared_descs_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 45 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 45 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 45 
  wl1271_debugfs_update_stats(wl);
  #line 45 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->tx.tx_prepared_descs);
}

#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations tx_tx_prepared_descs_ops = {.llseek = & generic_file_llseek, .read = & tx_tx_prepared_descs_read, .open = & simple_open};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t tx_tx_cmplt_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 46 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 46 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 46 
  wl1271_debugfs_update_stats(wl);
  #line 46 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->tx.tx_cmplt);
}

#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations tx_tx_cmplt_ops = {.llseek = & generic_file_llseek, .read = & tx_tx_cmplt_read, .open = & simple_open};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t tx_tx_template_prepared_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 47 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 47 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 47 
  wl1271_debugfs_update_stats(wl);
  #line 47 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->tx.tx_template_prepared);
}

#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations tx_tx_template_prepared_ops = {.llseek = & generic_file_llseek, .read = & tx_tx_template_prepared_read, .open = & simple_open};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t tx_tx_data_prepared_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 48 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 48 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 48 
  wl1271_debugfs_update_stats(wl);
  #line 48 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->tx.tx_data_prepared);
}

#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations tx_tx_data_prepared_ops = {.llseek = & generic_file_llseek, .read = & tx_tx_data_prepared_read, .open = & simple_open};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t tx_tx_template_programmed_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 49 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 49 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 49 
  wl1271_debugfs_update_stats(wl);
  #line 49 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->tx.tx_template_programmed);
}

#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations tx_tx_template_programmed_ops = {.llseek = & generic_file_llseek, .read = & tx_tx_template_programmed_read, .open = & simple_open};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t tx_tx_data_programmed_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 50 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 50 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 50 
  wl1271_debugfs_update_stats(wl);
  #line 50 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->tx.tx_data_programmed);
}

#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations tx_tx_data_programmed_ops = {.llseek = & generic_file_llseek, .read = & tx_tx_data_programmed_read, .open = & simple_open};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t tx_tx_burst_programmed_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 51 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 51 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 51 
  wl1271_debugfs_update_stats(wl);
  #line 51 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->tx.tx_burst_programmed);
}

#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations tx_tx_burst_programmed_ops = {.llseek = & generic_file_llseek, .read = & tx_tx_burst_programmed_read, .open = & simple_open};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t tx_tx_starts_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 52 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 52 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 52 
  wl1271_debugfs_update_stats(wl);
  #line 52 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->tx.tx_starts);
}

#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations tx_tx_starts_ops = {.llseek = & generic_file_llseek, .read = & tx_tx_starts_read, .open = & simple_open};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t tx_tx_stop_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 53 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 53 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 53 
  wl1271_debugfs_update_stats(wl);
  #line 53 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",stats->tx.tx_stop);
}

#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations tx_tx_stop_ops = {.llseek = & generic_file_llseek, .read = & tx_tx_stop_read, .open = & simple_open};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t tx_tx_start_templates_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 54 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 54 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 54 
  wl1271_debugfs_update_stats(wl);
  #line 54 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->tx.tx_start_templates);
}

#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations tx_tx_start_templates_ops = {.llseek = & generic_file_llseek, .read = & tx_tx_start_templates_read, .open = & simple_open};
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t tx_tx_start_int_templates_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 55 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 55 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 55 
  wl1271_debugfs_update_stats(wl);
  #line 55 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->tx.tx_start_int_templates);
}

#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations tx_tx_start_int_templates_ops = {.llseek = & generic_file_llseek, .read = & tx_tx_start_int_templates_read, .open = & simple_open};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t tx_tx_start_fw_gen_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 56 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 56 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 56 
  wl1271_debugfs_update_stats(wl);
  #line 56 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->tx.tx_start_fw_gen);
}

#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations tx_tx_start_fw_gen_ops = {.llseek = & generic_file_llseek, .read = & tx_tx_start_fw_gen_read, .open = & simple_open};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t tx_tx_start_data_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 57 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 57 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 57 
  wl1271_debugfs_update_stats(wl);
  #line 57 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->tx.tx_start_data);
}

#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations tx_tx_start_data_ops = {.llseek = & generic_file_llseek, .read = & tx_tx_start_data_read, .open = & simple_open};
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t tx_tx_start_null_frame_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 58 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 58 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 58 
  wl1271_debugfs_update_stats(wl);
  #line 58 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->tx.tx_start_null_frame);
}

#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations tx_tx_start_null_frame_ops = {.llseek = & generic_file_llseek, .read = & tx_tx_start_null_frame_read, .open = & simple_open};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t tx_tx_exch_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 59 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 59 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 59 
  wl1271_debugfs_update_stats(wl);
  #line 59 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",stats->tx.tx_exch);
}

#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations tx_tx_exch_ops = {.llseek = & generic_file_llseek, .read = & tx_tx_exch_read, .open = & simple_open};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t tx_tx_retry_template_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 60 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 60 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 60 
  wl1271_debugfs_update_stats(wl);
  #line 60 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->tx.tx_retry_template);
}

#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations tx_tx_retry_template_ops = {.llseek = & generic_file_llseek, .read = & tx_tx_retry_template_read, .open = & simple_open};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t tx_tx_retry_data_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 61 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 61 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 61 
  wl1271_debugfs_update_stats(wl);
  #line 61 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->tx.tx_retry_data);
}

#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations tx_tx_retry_data_ops = {.llseek = & generic_file_llseek, .read = & tx_tx_retry_data_read, .open = & simple_open};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t tx_tx_retry_per_rate_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 62 
  int res;
  #line 62 
  int i;
  #line 62 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 62 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 62 
  char buf[256U] = {(char)'\000'};
  #line 62 
  wl1271_debugfs_update_stats(wl);
  #line 62 
  i = 0;
  #line 62 
  while (i <= 29) {
    #line 62 
    res = snprintf((char *)(& buf),256UL,(char *)"%s[%d] = %d\n",(char *)(& buf),i,stats->tx.tx_retry_per_rate[i]);
    #line 62 
    i ++;
  }
  #line 62 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%s",(char *)(& buf));
}

#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations tx_tx_retry_per_rate_ops = {.llseek = & generic_file_llseek, .read = & tx_tx_retry_per_rate_read, .open = & simple_open};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t tx_tx_exch_pending_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 64 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 64 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 64 
  wl1271_debugfs_update_stats(wl);
  #line 64 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->tx.tx_exch_pending);
}

#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations tx_tx_exch_pending_ops = {.llseek = & generic_file_llseek, .read = & tx_tx_exch_pending_read, .open = & simple_open};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t tx_tx_exch_expiry_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 65 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 65 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 65 
  wl1271_debugfs_update_stats(wl);
  #line 65 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->tx.tx_exch_expiry);
}

#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations tx_tx_exch_expiry_ops = {.llseek = & generic_file_llseek, .read = & tx_tx_exch_expiry_read, .open = & simple_open};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t tx_tx_done_template_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 66 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 66 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 66 
  wl1271_debugfs_update_stats(wl);
  #line 66 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->tx.tx_done_template);
}

#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations tx_tx_done_template_ops = {.llseek = & generic_file_llseek, .read = & tx_tx_done_template_read, .open = & simple_open};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t tx_tx_done_data_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 67 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 67 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 67 
  wl1271_debugfs_update_stats(wl);
  #line 67 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->tx.tx_done_data);
}

#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations tx_tx_done_data_ops = {.llseek = & generic_file_llseek, .read = & tx_tx_done_data_read, .open = & simple_open};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t tx_tx_done_int_template_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 68 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 68 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 68 
  wl1271_debugfs_update_stats(wl);
  #line 68 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->tx.tx_done_int_template);
}

#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations tx_tx_done_int_template_ops = {.llseek = & generic_file_llseek, .read = & tx_tx_done_int_template_read, .open = & simple_open};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t tx_tx_cfe1_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 69 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 69 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 69 
  wl1271_debugfs_update_stats(wl);
  #line 69 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",stats->tx.tx_cfe1);
}

#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations tx_tx_cfe1_ops = {.llseek = & generic_file_llseek, .read = & tx_tx_cfe1_read, .open = & simple_open};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t tx_tx_cfe2_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 70 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 70 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 70 
  wl1271_debugfs_update_stats(wl);
  #line 70 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",stats->tx.tx_cfe2);
}

#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations tx_tx_cfe2_ops = {.llseek = & generic_file_llseek, .read = & tx_tx_cfe2_read, .open = & simple_open};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t tx_frag_called_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 71 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 71 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 71 
  wl1271_debugfs_update_stats(wl);
  #line 71 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->tx.frag_called);
}

#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations tx_frag_called_ops = {.llseek = & generic_file_llseek, .read = & tx_frag_called_read, .open = & simple_open};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t tx_frag_mpdu_alloc_failed_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 72 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 72 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 72 
  wl1271_debugfs_update_stats(wl);
  #line 72 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->tx.frag_mpdu_alloc_failed);
}

#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations tx_frag_mpdu_alloc_failed_ops = {.llseek = & generic_file_llseek, .read = & tx_frag_mpdu_alloc_failed_read, .open = & simple_open};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t tx_frag_init_called_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 73 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 73 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 73 
  wl1271_debugfs_update_stats(wl);
  #line 73 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->tx.frag_init_called);
}

#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations tx_frag_init_called_ops = {.llseek = & generic_file_llseek, .read = & tx_frag_init_called_read, .open = & simple_open};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t tx_frag_in_process_called_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 74 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 74 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 74 
  wl1271_debugfs_update_stats(wl);
  #line 74 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->tx.frag_in_process_called);
}

#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations tx_frag_in_process_called_ops = {.llseek = & generic_file_llseek, .read = & tx_frag_in_process_called_read, .open = & simple_open};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t tx_frag_tkip_called_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 75 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 75 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 75 
  wl1271_debugfs_update_stats(wl);
  #line 75 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->tx.frag_tkip_called);
}

#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations tx_frag_tkip_called_ops = {.llseek = & generic_file_llseek, .read = & tx_frag_tkip_called_read, .open = & simple_open};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t tx_frag_key_not_found_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 76 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 76 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 76 
  wl1271_debugfs_update_stats(wl);
  #line 76 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->tx.frag_key_not_found);
}

#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations tx_frag_key_not_found_ops = {.llseek = & generic_file_llseek, .read = & tx_frag_key_not_found_read, .open = & simple_open};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t tx_frag_need_fragmentation_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 77 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 77 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 77 
  wl1271_debugfs_update_stats(wl);
  #line 77 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->tx.frag_need_fragmentation);
}

#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations tx_frag_need_fragmentation_ops = {.llseek = & generic_file_llseek, .read = & tx_frag_need_fragmentation_read, .open = & simple_open};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t tx_frag_bad_mblk_num_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 78 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 78 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 78 
  wl1271_debugfs_update_stats(wl);
  #line 78 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->tx.frag_bad_mblk_num);
}

#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations tx_frag_bad_mblk_num_ops = {.llseek = & generic_file_llseek, .read = & tx_frag_bad_mblk_num_read, .open = & simple_open};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t tx_frag_failed_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 79 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 79 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 79 
  wl1271_debugfs_update_stats(wl);
  #line 79 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->tx.frag_failed);
}

#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations tx_frag_failed_ops = {.llseek = & generic_file_llseek, .read = & tx_frag_failed_read, .open = & simple_open};
#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t tx_frag_cache_hit_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 80 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 80 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 80 
  wl1271_debugfs_update_stats(wl);
  #line 80 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->tx.frag_cache_hit);
}

#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations tx_frag_cache_hit_ops = {.llseek = & generic_file_llseek, .read = & tx_frag_cache_hit_read, .open = & simple_open};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t tx_frag_cache_miss_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 81 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 81 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 81 
  wl1271_debugfs_update_stats(wl);
  #line 81 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->tx.frag_cache_miss);
}

#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations tx_frag_cache_miss_ops = {.llseek = & generic_file_llseek, .read = & tx_frag_cache_miss_read, .open = & simple_open};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t rx_rx_beacon_early_term_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 83 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 83 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 83 
  wl1271_debugfs_update_stats(wl);
  #line 83 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->rx.rx_beacon_early_term);
}

#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations rx_rx_beacon_early_term_ops = {.llseek = & generic_file_llseek, .read = & rx_rx_beacon_early_term_read, .open = & simple_open};
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t rx_rx_out_of_mpdu_nodes_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 84 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 84 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 84 
  wl1271_debugfs_update_stats(wl);
  #line 84 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->rx.rx_out_of_mpdu_nodes);
}

#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations rx_rx_out_of_mpdu_nodes_ops = {.llseek = & generic_file_llseek, .read = & rx_rx_out_of_mpdu_nodes_read, .open = & simple_open};
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t rx_rx_hdr_overflow_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 85 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 85 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 85 
  wl1271_debugfs_update_stats(wl);
  #line 85 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->rx.rx_hdr_overflow);
}

#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations rx_rx_hdr_overflow_ops = {.llseek = & generic_file_llseek, .read = & rx_rx_hdr_overflow_read, .open = & simple_open};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t rx_rx_dropped_frame_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 86 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 86 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 86 
  wl1271_debugfs_update_stats(wl);
  #line 86 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->rx.rx_dropped_frame);
}

#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations rx_rx_dropped_frame_ops = {.llseek = & generic_file_llseek, .read = & rx_rx_dropped_frame_read, .open = & simple_open};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t rx_rx_done_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 87 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 87 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 87 
  wl1271_debugfs_update_stats(wl);
  #line 87 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",stats->rx.rx_done);
}

#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations rx_rx_done_ops = {.llseek = & generic_file_llseek, .read = & rx_rx_done_read, .open = & simple_open};
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t rx_rx_defrag_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 88 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 88 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 88 
  wl1271_debugfs_update_stats(wl);
  #line 88 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->rx.rx_defrag);
}

#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations rx_rx_defrag_ops = {.llseek = & generic_file_llseek, .read = & rx_rx_defrag_read, .open = & simple_open};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t rx_rx_defrag_end_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 89 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 89 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 89 
  wl1271_debugfs_update_stats(wl);
  #line 89 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->rx.rx_defrag_end);
}

#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations rx_rx_defrag_end_ops = {.llseek = & generic_file_llseek, .read = & rx_rx_defrag_end_read, .open = & simple_open};
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t rx_rx_cmplt_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 90 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 90 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 90 
  wl1271_debugfs_update_stats(wl);
  #line 90 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->rx.rx_cmplt);
}

#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations rx_rx_cmplt_ops = {.llseek = & generic_file_llseek, .read = & rx_rx_cmplt_read, .open = & simple_open};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t rx_rx_pre_complt_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 91 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 91 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 91 
  wl1271_debugfs_update_stats(wl);
  #line 91 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->rx.rx_pre_complt);
}

#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations rx_rx_pre_complt_ops = {.llseek = & generic_file_llseek, .read = & rx_rx_pre_complt_read, .open = & simple_open};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t rx_rx_cmplt_task_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 92 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 92 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 92 
  wl1271_debugfs_update_stats(wl);
  #line 92 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->rx.rx_cmplt_task);
}

#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations rx_rx_cmplt_task_ops = {.llseek = & generic_file_llseek, .read = & rx_rx_cmplt_task_read, .open = & simple_open};
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t rx_rx_phy_hdr_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 93 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 93 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 93 
  wl1271_debugfs_update_stats(wl);
  #line 93 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->rx.rx_phy_hdr);
}

#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations rx_rx_phy_hdr_ops = {.llseek = & generic_file_llseek, .read = & rx_rx_phy_hdr_read, .open = & simple_open};
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t rx_rx_timeout_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 94 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 94 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 94 
  wl1271_debugfs_update_stats(wl);
  #line 94 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->rx.rx_timeout);
}

#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations rx_rx_timeout_ops = {.llseek = & generic_file_llseek, .read = & rx_rx_timeout_read, .open = & simple_open};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t rx_rx_rts_timeout_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 95 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 95 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 95 
  wl1271_debugfs_update_stats(wl);
  #line 95 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->rx.rx_rts_timeout);
}

#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations rx_rx_rts_timeout_ops = {.llseek = & generic_file_llseek, .read = & rx_rx_rts_timeout_read, .open = & simple_open};
#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t rx_rx_timeout_wa_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 96 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 96 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 96 
  wl1271_debugfs_update_stats(wl);
  #line 96 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->rx.rx_timeout_wa);
}

#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations rx_rx_timeout_wa_ops = {.llseek = & generic_file_llseek, .read = & rx_rx_timeout_wa_read, .open = & simple_open};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t rx_defrag_called_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 97 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 97 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 97 
  wl1271_debugfs_update_stats(wl);
  #line 97 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->rx.defrag_called);
}

#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations rx_defrag_called_ops = {.llseek = & generic_file_llseek, .read = & rx_defrag_called_read, .open = & simple_open};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t rx_defrag_init_called_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 98 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 98 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 98 
  wl1271_debugfs_update_stats(wl);
  #line 98 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->rx.defrag_init_called);
}

#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations rx_defrag_init_called_ops = {.llseek = & generic_file_llseek, .read = & rx_defrag_init_called_read, .open = & simple_open};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t rx_defrag_in_process_called_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 99 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 99 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 99 
  wl1271_debugfs_update_stats(wl);
  #line 99 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->rx.defrag_in_process_called);
}

#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations rx_defrag_in_process_called_ops = {.llseek = & generic_file_llseek, .read = & rx_defrag_in_process_called_read, .open = & simple_open};
#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t rx_defrag_tkip_called_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 100 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 100 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 100 
  wl1271_debugfs_update_stats(wl);
  #line 100 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->rx.defrag_tkip_called);
}

#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations rx_defrag_tkip_called_ops = {.llseek = & generic_file_llseek, .read = & rx_defrag_tkip_called_read, .open = & simple_open};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t rx_defrag_need_defrag_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 101 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 101 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 101 
  wl1271_debugfs_update_stats(wl);
  #line 101 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->rx.defrag_need_defrag);
}

#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations rx_defrag_need_defrag_ops = {.llseek = & generic_file_llseek, .read = & rx_defrag_need_defrag_read, .open = & simple_open};
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t rx_defrag_decrypt_failed_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 102 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 102 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 102 
  wl1271_debugfs_update_stats(wl);
  #line 102 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->rx.defrag_decrypt_failed);
}

#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations rx_defrag_decrypt_failed_ops = {.llseek = & generic_file_llseek, .read = & rx_defrag_decrypt_failed_read, .open = & simple_open};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t rx_decrypt_key_not_found_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 103 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 103 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 103 
  wl1271_debugfs_update_stats(wl);
  #line 103 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->rx.decrypt_key_not_found);
}

#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations rx_decrypt_key_not_found_ops = {.llseek = & generic_file_llseek, .read = & rx_decrypt_key_not_found_read, .open = & simple_open};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t rx_defrag_need_decrypt_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 104 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 104 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 104 
  wl1271_debugfs_update_stats(wl);
  #line 104 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->rx.defrag_need_decrypt);
}

#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations rx_defrag_need_decrypt_ops = {.llseek = & generic_file_llseek, .read = & rx_defrag_need_decrypt_read, .open = & simple_open};
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t rx_rx_tkip_replays_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 105 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 105 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 105 
  wl1271_debugfs_update_stats(wl);
  #line 105 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->rx.rx_tkip_replays);
}

#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations rx_rx_tkip_replays_ops = {.llseek = & generic_file_llseek, .read = & rx_rx_tkip_replays_read, .open = & simple_open};
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t rx_rx_xfr_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 106 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 106 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 106 
  wl1271_debugfs_update_stats(wl);
  #line 106 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",stats->rx.rx_xfr);
}

#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations rx_rx_xfr_ops = {.llseek = & generic_file_llseek, .read = & rx_rx_xfr_read, .open = & simple_open};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t isr_irqs_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 108 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 108 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 108 
  wl1271_debugfs_update_stats(wl);
  #line 108 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",stats->isr.irqs);
}

#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations isr_irqs_ops = {.llseek = & generic_file_llseek, .read = & isr_irqs_read, .open = & simple_open};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t pwr_missing_bcns_cnt_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 110 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 110 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 110 
  wl1271_debugfs_update_stats(wl);
  #line 110 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->pwr.missing_bcns_cnt);
}

#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations pwr_missing_bcns_cnt_ops = {.llseek = & generic_file_llseek, .read = & pwr_missing_bcns_cnt_read, .open = & simple_open};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t pwr_rcvd_bcns_cnt_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 111 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 111 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 111 
  wl1271_debugfs_update_stats(wl);
  #line 111 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->pwr.rcvd_bcns_cnt);
}

#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations pwr_rcvd_bcns_cnt_ops = {.llseek = & generic_file_llseek, .read = & pwr_rcvd_bcns_cnt_read, .open = & simple_open};
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t pwr_connection_out_of_sync_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 112 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 112 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 112 
  wl1271_debugfs_update_stats(wl);
  #line 112 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->pwr.connection_out_of_sync);
}

#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations pwr_connection_out_of_sync_ops = {.llseek = & generic_file_llseek, .read = & pwr_connection_out_of_sync_read, .open = & simple_open};
#line 113  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t pwr_cont_miss_bcns_spread_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 113 
  int res;
  #line 113 
  int i;
  #line 113 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 113 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 113 
  char buf[256U] = {(char)'\000'};
  #line 113 
  wl1271_debugfs_update_stats(wl);
  #line 113 
  i = 0;
  #line 113 
  while (i <= 9) {
    #line 113 
    res = snprintf((char *)(& buf),256UL,(char *)"%s[%d] = %d\n",(char *)(& buf),i,stats->pwr.cont_miss_bcns_spread[i]);
    #line 113 
    i ++;
  }
  #line 113 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%s",(char *)(& buf));
}

#line 113  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations pwr_cont_miss_bcns_spread_ops = {.llseek = & generic_file_llseek, .read = & pwr_cont_miss_bcns_spread_read, .open = & simple_open};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t pwr_rcvd_awake_bcns_cnt_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 115 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 115 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 115 
  wl1271_debugfs_update_stats(wl);
  #line 115 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->pwr.rcvd_awake_bcns_cnt);
}

#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations pwr_rcvd_awake_bcns_cnt_ops = {.llseek = & generic_file_llseek, .read = & pwr_rcvd_awake_bcns_cnt_read, .open = & simple_open};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t pwr_sleep_time_count_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 116 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 116 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 116 
  wl1271_debugfs_update_stats(wl);
  #line 116 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->pwr.sleep_time_count);
}

#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations pwr_sleep_time_count_ops = {.llseek = & generic_file_llseek, .read = & pwr_sleep_time_count_read, .open = & simple_open};
#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t pwr_sleep_time_avg_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 117 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 117 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 117 
  wl1271_debugfs_update_stats(wl);
  #line 117 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->pwr.sleep_time_avg);
}

#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations pwr_sleep_time_avg_ops = {.llseek = & generic_file_llseek, .read = & pwr_sleep_time_avg_read, .open = & simple_open};
#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t pwr_sleep_cycle_avg_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 118 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 118 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 118 
  wl1271_debugfs_update_stats(wl);
  #line 118 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->pwr.sleep_cycle_avg);
}

#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations pwr_sleep_cycle_avg_ops = {.llseek = & generic_file_llseek, .read = & pwr_sleep_cycle_avg_read, .open = & simple_open};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t pwr_sleep_percent_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 119 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 119 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 119 
  wl1271_debugfs_update_stats(wl);
  #line 119 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->pwr.sleep_percent);
}

#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations pwr_sleep_percent_ops = {.llseek = & generic_file_llseek, .read = & pwr_sleep_percent_read, .open = & simple_open};
#line 120  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t pwr_ap_sleep_active_conf_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 120 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 120 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 120 
  wl1271_debugfs_update_stats(wl);
  #line 120 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->pwr.ap_sleep_active_conf);
}

#line 120  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations pwr_ap_sleep_active_conf_ops = {.llseek = & generic_file_llseek, .read = & pwr_ap_sleep_active_conf_read, .open = & simple_open};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t pwr_ap_sleep_user_conf_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 121 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 121 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 121 
  wl1271_debugfs_update_stats(wl);
  #line 121 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->pwr.ap_sleep_user_conf);
}

#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations pwr_ap_sleep_user_conf_ops = {.llseek = & generic_file_llseek, .read = & pwr_ap_sleep_user_conf_read, .open = & simple_open};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t pwr_ap_sleep_counter_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 122 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 122 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 122 
  wl1271_debugfs_update_stats(wl);
  #line 122 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->pwr.ap_sleep_counter);
}

#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations pwr_ap_sleep_counter_ops = {.llseek = & generic_file_llseek, .read = & pwr_ap_sleep_counter_read, .open = & simple_open};
#line 124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t rx_filter_beacon_filter_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 124 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 124 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 124 
  wl1271_debugfs_update_stats(wl);
  #line 124 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->rx_filter.beacon_filter);
}

#line 124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations rx_filter_beacon_filter_ops = {.llseek = & generic_file_llseek, .read = & rx_filter_beacon_filter_read, .open = & simple_open};
#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t rx_filter_arp_filter_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 125 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 125 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 125 
  wl1271_debugfs_update_stats(wl);
  #line 125 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->rx_filter.arp_filter);
}

#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations rx_filter_arp_filter_ops = {.llseek = & generic_file_llseek, .read = & rx_filter_arp_filter_read, .open = & simple_open};
#line 126  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t rx_filter_mc_filter_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 126 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 126 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 126 
  wl1271_debugfs_update_stats(wl);
  #line 126 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->rx_filter.mc_filter);
}

#line 126  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations rx_filter_mc_filter_ops = {.llseek = & generic_file_llseek, .read = & rx_filter_mc_filter_read, .open = & simple_open};
#line 127  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t rx_filter_dup_filter_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 127 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 127 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 127 
  wl1271_debugfs_update_stats(wl);
  #line 127 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->rx_filter.dup_filter);
}

#line 127  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations rx_filter_dup_filter_ops = {.llseek = & generic_file_llseek, .read = & rx_filter_dup_filter_read, .open = & simple_open};
#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t rx_filter_data_filter_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 128 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 128 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 128 
  wl1271_debugfs_update_stats(wl);
  #line 128 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->rx_filter.data_filter);
}

#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations rx_filter_data_filter_ops = {.llseek = & generic_file_llseek, .read = & rx_filter_data_filter_read, .open = & simple_open};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t rx_filter_ibss_filter_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 129 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 129 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 129 
  wl1271_debugfs_update_stats(wl);
  #line 129 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->rx_filter.ibss_filter);
}

#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations rx_filter_ibss_filter_ops = {.llseek = & generic_file_llseek, .read = & rx_filter_ibss_filter_read, .open = & simple_open};
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t rx_filter_protection_filter_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 130 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 130 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 130 
  wl1271_debugfs_update_stats(wl);
  #line 130 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->rx_filter.protection_filter);
}

#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations rx_filter_protection_filter_ops = {.llseek = & generic_file_llseek, .read = & rx_filter_protection_filter_read, .open = & simple_open};
#line 131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t rx_filter_accum_arp_pend_requests_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 131 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 131 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 131 
  wl1271_debugfs_update_stats(wl);
  #line 131 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->rx_filter.accum_arp_pend_requests);
}

#line 131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations rx_filter_accum_arp_pend_requests_ops = {.llseek = & generic_file_llseek, .read = & rx_filter_accum_arp_pend_requests_read, .open = & simple_open};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t rx_filter_max_arp_queue_dep_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 132 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 132 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 132 
  wl1271_debugfs_update_stats(wl);
  #line 132 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->rx_filter.max_arp_queue_dep);
}

#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations rx_filter_max_arp_queue_dep_ops = {.llseek = & generic_file_llseek, .read = & rx_filter_max_arp_queue_dep_read, .open = & simple_open};
#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t rx_rate_rx_frames_per_rates_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 134 
  int res;
  #line 134 
  int i;
  #line 134 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 134 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 134 
  char buf[256U] = {(char)'\000'};
  #line 134 
  wl1271_debugfs_update_stats(wl);
  #line 134 
  i = 0;
  #line 134 
  while (i <= 49) {
    #line 134 
    res = snprintf((char *)(& buf),256UL,(char *)"%s[%d] = %d\n",(char *)(& buf),i,stats->rx_rate.rx_frames_per_rates[i]);
    #line 134 
    i ++;
  }
  #line 134 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%s",(char *)(& buf));
}

#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations rx_rate_rx_frames_per_rates_ops = {.llseek = & generic_file_llseek, .read = & rx_rate_rx_frames_per_rates_read, .open = & simple_open};
#line 136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t aggr_size_tx_agg_rate_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 136 
  int res;
  #line 136 
  int i;
  #line 136 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 136 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 136 
  char buf[256U] = {(char)'\000'};
  #line 136 
  wl1271_debugfs_update_stats(wl);
  #line 136 
  i = 0;
  #line 136 
  while (i <= 15) {
    #line 136 
    res = snprintf((char *)(& buf),256UL,(char *)"%s[%d] = %d\n",(char *)(& buf),i,stats->aggr_size.tx_agg_rate[i]);
    #line 136 
    i ++;
  }
  #line 136 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%s",(char *)(& buf));
}

#line 136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations aggr_size_tx_agg_rate_ops = {.llseek = & generic_file_llseek, .read = & aggr_size_tx_agg_rate_read, .open = & simple_open};
#line 138  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t aggr_size_tx_agg_len_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 138 
  int res;
  #line 138 
  int i;
  #line 138 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 138 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 138 
  char buf[256U] = {(char)'\000'};
  #line 138 
  wl1271_debugfs_update_stats(wl);
  #line 138 
  i = 0;
  #line 138 
  while (i <= 15) {
    #line 138 
    res = snprintf((char *)(& buf),256UL,(char *)"%s[%d] = %d\n",(char *)(& buf),i,stats->aggr_size.tx_agg_len[i]);
    #line 138 
    i ++;
  }
  #line 138 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%s",(char *)(& buf));
}

#line 138  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations aggr_size_tx_agg_len_ops = {.llseek = & generic_file_llseek, .read = & aggr_size_tx_agg_len_read, .open = & simple_open};
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t aggr_size_rx_size_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 140 
  int res;
  #line 140 
  int i;
  #line 140 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 140 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 140 
  char buf[256U] = {(char)'\000'};
  #line 140 
  wl1271_debugfs_update_stats(wl);
  #line 140 
  i = 0;
  #line 140 
  while (i <= 15) {
    #line 140 
    res = snprintf((char *)(& buf),256UL,(char *)"%s[%d] = %d\n",(char *)(& buf),i,stats->aggr_size.rx_size[i]);
    #line 140 
    i ++;
  }
  #line 140 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%s",(char *)(& buf));
}

#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations aggr_size_rx_size_ops = {.llseek = & generic_file_llseek, .read = & aggr_size_rx_size_read, .open = & simple_open};
#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t pipeline_hs_tx_stat_fifo_int_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 143 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 143 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 143 
  wl1271_debugfs_update_stats(wl);
  #line 143 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->pipeline.hs_tx_stat_fifo_int);
}

#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations pipeline_hs_tx_stat_fifo_int_ops = {.llseek = & generic_file_llseek, .read = & pipeline_hs_tx_stat_fifo_int_read, .open = & simple_open};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t pipeline_enc_tx_stat_fifo_int_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 144 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 144 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 144 
  wl1271_debugfs_update_stats(wl);
  #line 144 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->pipeline.enc_tx_stat_fifo_int);
}

#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations pipeline_enc_tx_stat_fifo_int_ops = {.llseek = & generic_file_llseek, .read = & pipeline_enc_tx_stat_fifo_int_read, .open = & simple_open};
#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t pipeline_enc_rx_stat_fifo_int_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 145 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 145 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 145 
  wl1271_debugfs_update_stats(wl);
  #line 145 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->pipeline.enc_rx_stat_fifo_int);
}

#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations pipeline_enc_rx_stat_fifo_int_ops = {.llseek = & generic_file_llseek, .read = & pipeline_enc_rx_stat_fifo_int_read, .open = & simple_open};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t pipeline_rx_complete_stat_fifo_int_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 146 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 146 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 146 
  wl1271_debugfs_update_stats(wl);
  #line 146 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->pipeline.rx_complete_stat_fifo_int);
}

#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations pipeline_rx_complete_stat_fifo_int_ops = {.llseek = & generic_file_llseek, .read = & pipeline_rx_complete_stat_fifo_int_read, .open = & simple_open};
#line 147  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t pipeline_pre_proc_swi_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 147 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 147 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 147 
  wl1271_debugfs_update_stats(wl);
  #line 147 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->pipeline.pre_proc_swi);
}

#line 147  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations pipeline_pre_proc_swi_ops = {.llseek = & generic_file_llseek, .read = & pipeline_pre_proc_swi_read, .open = & simple_open};
#line 148  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t pipeline_post_proc_swi_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 148 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 148 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 148 
  wl1271_debugfs_update_stats(wl);
  #line 148 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->pipeline.post_proc_swi);
}

#line 148  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations pipeline_post_proc_swi_ops = {.llseek = & generic_file_llseek, .read = & pipeline_post_proc_swi_read, .open = & simple_open};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t pipeline_sec_frag_swi_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 149 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 149 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 149 
  wl1271_debugfs_update_stats(wl);
  #line 149 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->pipeline.sec_frag_swi);
}

#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations pipeline_sec_frag_swi_ops = {.llseek = & generic_file_llseek, .read = & pipeline_sec_frag_swi_read, .open = & simple_open};
#line 150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t pipeline_pre_to_defrag_swi_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 150 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 150 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 150 
  wl1271_debugfs_update_stats(wl);
  #line 150 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->pipeline.pre_to_defrag_swi);
}

#line 150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations pipeline_pre_to_defrag_swi_ops = {.llseek = & generic_file_llseek, .read = & pipeline_pre_to_defrag_swi_read, .open = & simple_open};
#line 151  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t pipeline_defrag_to_rx_xfer_swi_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 151 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 151 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 151 
  wl1271_debugfs_update_stats(wl);
  #line 151 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->pipeline.defrag_to_rx_xfer_swi);
}

#line 151  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations pipeline_defrag_to_rx_xfer_swi_ops = {.llseek = & generic_file_llseek, .read = & pipeline_defrag_to_rx_xfer_swi_read, .open = & simple_open};
#line 152  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t pipeline_dec_packet_in_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 152 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 152 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 152 
  wl1271_debugfs_update_stats(wl);
  #line 152 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->pipeline.dec_packet_in);
}

#line 152  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations pipeline_dec_packet_in_ops = {.llseek = & generic_file_llseek, .read = & pipeline_dec_packet_in_read, .open = & simple_open};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t pipeline_dec_packet_in_fifo_full_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 153 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 153 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 153 
  wl1271_debugfs_update_stats(wl);
  #line 153 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->pipeline.dec_packet_in_fifo_full);
}

#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations pipeline_dec_packet_in_fifo_full_ops = {.llseek = & generic_file_llseek, .read = & pipeline_dec_packet_in_fifo_full_read, .open = & simple_open};
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t pipeline_dec_packet_out_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 154 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 154 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 154 
  wl1271_debugfs_update_stats(wl);
  #line 154 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->pipeline.dec_packet_out);
}

#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations pipeline_dec_packet_out_ops = {.llseek = & generic_file_llseek, .read = & pipeline_dec_packet_out_read, .open = & simple_open};
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t pipeline_pipeline_fifo_full_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 156 
  int res;
  #line 156 
  int i;
  #line 156 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 156 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 156 
  char buf[256U] = {(char)'\000'};
  #line 156 
  wl1271_debugfs_update_stats(wl);
  #line 156 
  i = 0;
  #line 156 
  while (i <= 10) {
    #line 156 
    res = snprintf((char *)(& buf),256UL,(char *)"%s[%d] = %d\n",(char *)(& buf),i,(int)stats->pipeline.pipeline_fifo_full[i]);
    #line 156 
    i ++;
  }
  #line 156 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%s",(char *)(& buf));
}

#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations pipeline_pipeline_fifo_full_ops = {.llseek = & generic_file_llseek, .read = & pipeline_pipeline_fifo_full_read, .open = & simple_open};
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t diversity_num_of_packets_per_ant_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 159 
  int res;
  #line 159 
  int i;
  #line 159 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 159 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 159 
  char buf[256U] = {(char)'\000'};
  #line 159 
  wl1271_debugfs_update_stats(wl);
  #line 159 
  i = 0;
  #line 159 
  while (i <= 1) {
    #line 159 
    res = snprintf((char *)(& buf),256UL,(char *)"%s[%d] = %d\n",(char *)(& buf),i,stats->diversity.num_of_packets_per_ant[i]);
    #line 159 
    i ++;
  }
  #line 159 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%s",(char *)(& buf));
}

#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations diversity_num_of_packets_per_ant_ops = {.llseek = & generic_file_llseek, .read = & diversity_num_of_packets_per_ant_read, .open = & simple_open};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t diversity_total_num_of_toggles_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 161 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 161 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 161 
  wl1271_debugfs_update_stats(wl);
  #line 161 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->diversity.total_num_of_toggles);
}

#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations diversity_total_num_of_toggles_ops = {.llseek = & generic_file_llseek, .read = & diversity_total_num_of_toggles_read, .open = & simple_open};
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t thermal_irq_thr_low_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 163 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 163 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 163 
  wl1271_debugfs_update_stats(wl);
  #line 163 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           (int)stats->thermal.irq_thr_low);
}

#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations thermal_irq_thr_low_ops = {.llseek = & generic_file_llseek, .read = & thermal_irq_thr_low_read, .open = & simple_open};
#line 164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t thermal_irq_thr_high_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 164 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 164 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 164 
  wl1271_debugfs_update_stats(wl);
  #line 164 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           (int)stats->thermal.irq_thr_high);
}

#line 164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations thermal_irq_thr_high_ops = {.llseek = & generic_file_llseek, .read = & thermal_irq_thr_high_read, .open = & simple_open};
#line 165  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t thermal_tx_stop_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 165 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 165 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 165 
  wl1271_debugfs_update_stats(wl);
  #line 165 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           (int)stats->thermal.tx_stop);
}

#line 165  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations thermal_tx_stop_ops = {.llseek = & generic_file_llseek, .read = & thermal_tx_stop_read, .open = & simple_open};
#line 166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t thermal_tx_resume_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 166 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 166 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 166 
  wl1271_debugfs_update_stats(wl);
  #line 166 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           (int)stats->thermal.tx_resume);
}

#line 166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations thermal_tx_resume_ops = {.llseek = & generic_file_llseek, .read = & thermal_tx_resume_read, .open = & simple_open};
#line 167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t thermal_false_irq_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 167 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 167 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 167 
  wl1271_debugfs_update_stats(wl);
  #line 167 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           (int)stats->thermal.false_irq);
}

#line 167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations thermal_false_irq_ops = {.llseek = & generic_file_llseek, .read = & thermal_false_irq_read, .open = & simple_open};
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t thermal_adc_source_unexpected_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 168 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 168 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 168 
  wl1271_debugfs_update_stats(wl);
  #line 168 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           (int)stats->thermal.adc_source_unexpected);
}

#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations thermal_adc_source_unexpected_ops = {.llseek = & generic_file_llseek, .read = & thermal_adc_source_unexpected_read, .open = & simple_open};
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t calib_fail_count_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 170 
  int res;
  #line 170 
  int i;
  #line 170 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 170 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 170 
  char buf[256U] = {(char)'\000'};
  #line 170 
  wl1271_debugfs_update_stats(wl);
  #line 170 
  i = 0;
  #line 170 
  while (i <= 17) {
    #line 170 
    res = snprintf((char *)(& buf),256UL,(char *)"%s[%d] = %d\n",(char *)(& buf),i,(int)stats->calib.fail_count[i]);
    #line 170 
    i ++;
  }
  #line 170 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%s",(char *)(& buf));
}

#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations calib_fail_count_ops = {.llseek = & generic_file_llseek, .read = & calib_fail_count_read, .open = & simple_open};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t calib_calib_count_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 172 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 172 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 172 
  wl1271_debugfs_update_stats(wl);
  #line 172 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%u",
                           stats->calib.calib_count);
}

#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations calib_calib_count_ops = {.llseek = & generic_file_llseek, .read = & calib_calib_count_read, .open = & simple_open};
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t roaming_rssi_level_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 174 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 174 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 174 
  wl1271_debugfs_update_stats(wl);
  #line 174 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%d",
                           stats->roaming.rssi_level);
}

#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations roaming_rssi_level_ops = {.llseek = & generic_file_llseek, .read = & roaming_rssi_level_read, .open = & simple_open};
#line 176  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t dfs_num_of_radar_detections_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 176 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 176 
  struct wl18xx_acx_statistics *stats = (struct wl18xx_acx_statistics *)wl->stats.fw_stats;
  #line 176 
  wl1271_debugfs_update_stats(wl);
  #line 176 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%d",
                           stats->dfs.num_of_radar_detections);
}

#line 176  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations dfs_num_of_radar_detections_ops = {.llseek = & generic_file_llseek, .read = & dfs_num_of_radar_detections_read, .open = & simple_open};
#line 178  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t conf_read(struct file *file, char *user_buf, size_t count, loff_t *ppos)
{
  #line 183 
  struct wlcore_conf_header header;
  #line 184 
  char *buf;
  #line 184 
  char *pos;
  #line 185 
  size_t len;
  #line 186 
  int ret;
  #line 181 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 182 
  struct wl18xx_priv *priv = (struct wl18xx_priv *)wl->priv;
  #line 188 
  len = 1229UL;
  #line 189 
  buf = (char *)kmalloc(len,3264U);
  #line 190 
  if (buf == (char *)0) 
                        #line 191 
                        return -12L;
  #line 193 
  header.magic = 283181258U;
  #line 194 
  header.version = 458759U;
  #line 195 
  header.checksum = 0U;
  #line 197 
  cif_mutex_lock_mutex_of_wl1271(& wl->mutex);
  #line 199 
  pos = buf;
  #line 200 
  memcpy((void *)pos,(void *)(& header),12UL);
  #line 201 
  pos += 12UL;
  #line 202 
  memcpy((void *)pos,(void *)(& wl->conf),924UL);
  #line 203 
  pos += 924UL;
  #line 204 
  memcpy((void *)pos,(void *)(& priv->conf),293UL);
  #line 206 
  cif_mutex_unlock_mutex_of_wl1271(& wl->mutex);
  #line 208 
  ret = (int)simple_read_from_buffer((void *)user_buf,count,ppos,(void *)buf,len);
  #line 210 
  kfree((void *)buf);
  #line 211 
  return (long)ret;
}

#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations conf_ops = {.llseek = & default_llseek, .read = & conf_read, .open = & simple_open};
#line 220  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t clear_fw_stats_write(struct file *file, char *user_buf, size_t count, loff_t *ppos)
{
  #line 225 
  int ret;
  #line 224 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 227 
  cif_mutex_lock_mutex_of_wl1271(& wl->mutex);
  #line 229 
  if ((long)(wl->state != (unsigned int)WLCORE_STATE_ON) != 0L) 
                                                                #line 230 
                                                                goto out;
  #line 232 
  ret = wl18xx_acx_clear_statistics(wl);
  #line 233 
  if (ret < 0) {
    #line 234 
    count = (unsigned long)ret;
    #line 235 
    goto out;
  }
  #line 237 
  out: 
       #line 237 
  ;
  #line 238 
  cif_mutex_unlock_mutex_of_wl1271(& wl->mutex);
  #line 239 
  return (long)count;
}

#line 242  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations clear_fw_stats_ops = {.llseek = & default_llseek, .write = & clear_fw_stats_write, .open = & simple_open};
#line 248  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t radar_detection_write(struct file *file, char *user_buf, size_t count, loff_t *ppos)
{
  #line 253 
  int ret;
  #line 254 
  u8 channel;
  #line 252 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 256 
  ret = kstrtou8_from_user(user_buf,count,10U,& channel);
  #line 257 
  if (ret < 0) {
    #line 258 
    printk((char *)"\001");
    #line 259 
    return -22L;
  }
  #line 262 
  cif_mutex_lock_mutex_of_wl1271(& wl->mutex);
  #line 264 
  if ((long)(wl->state != (unsigned int)WLCORE_STATE_ON) != 0L) 
                                                                #line 265 
                                                                goto out;
  #line 267 
  ret = pm_runtime_get_sync(wl->dev);
  #line 268 
  if (ret < 0) {
    #line 269 
    pm_runtime_put_noidle(wl->dev);
    #line 270 
    goto out;
  }
  #line 273 
  ret = wl18xx_cmd_radar_detection_debug(wl,(unsigned char)((int)channel));
  #line 274 
  if (ret < 0) 
               #line 275 
               count = (unsigned long)ret;
  #line 277 
  pm_runtime_mark_last_busy(wl->dev);
  #line 278 
  pm_runtime_put_autosuspend(wl->dev);
  #line 279 
  out: 
       #line 279 
  ;
  #line 280 
  cif_mutex_unlock_mutex_of_wl1271(& wl->mutex);
  #line 281 
  return (long)count;
}

#line 284  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations radar_detection_ops = {.llseek = & default_llseek, .write = & radar_detection_write, .open = & simple_open};
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t dynamic_fw_traces_write(struct file *file, char *user_buf, size_t count, loff_t *ppos)
{
  #line 295 
  unsigned long value;
  #line 296 
  int ret;
  #line 294 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 298 
  ret = kstrtoul_from_user(user_buf,count,0U,& value);
  #line 299 
  if (ret < 0) 
               #line 300 
               return (long)ret;
  #line 302 
  cif_mutex_lock_mutex_of_wl1271(& wl->mutex);
  #line 304 
  wl->dynamic_fw_traces = (unsigned int)value;
  #line 306 
  if ((long)(wl->state != (unsigned int)WLCORE_STATE_ON) != 0L) 
                                                                #line 307 
                                                                goto out;
  #line 309 
  ret = pm_runtime_get_sync(wl->dev);
  #line 310 
  if (ret < 0) {
    #line 311 
    pm_runtime_put_noidle(wl->dev);
    #line 312 
    goto out;
  }
  #line 315 
  ret = wl18xx_acx_dynamic_fw_traces(wl);
  #line 316 
  if (ret < 0) 
               #line 317 
               count = (unsigned long)ret;
  #line 319 
  pm_runtime_mark_last_busy(wl->dev);
  #line 320 
  pm_runtime_put_autosuspend(wl->dev);
  #line 321 
  out: 
       #line 321 
  ;
  #line 322 
  cif_mutex_unlock_mutex_of_wl1271(& wl->mutex);
  #line 323 
  return (long)count;
}

#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t dynamic_fw_traces_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 330 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 331 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%d\n",
                           wl->dynamic_fw_traces);
}

#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations dynamic_fw_traces_ops = {.llseek = & default_llseek, .read = & dynamic_fw_traces_read, .write = & dynamic_fw_traces_write, .open = & simple_open};
#line 343  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t radar_debug_mode_write(struct file *file, char *user_buf, size_t count, loff_t *ppos)
{
  #line 377 
  void *__mptr;
  #line 348 
  struct wl12xx_vif *wlvif;
  #line 349 
  unsigned long value;
  #line 350 
  int ret;
  #line 347 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 352 
  ret = kstrtoul_from_user(user_buf,count,10U,& value);
  #line 353 
  if (ret < 0) {
    #line 354 
    printk((char *)"\001");
    #line 355 
    return -22L;
  }
  #line 359 
  if (value > 1UL) {
    #line 360 
    printk((char *)"\001");
    #line 361 
    return -22L;
  }
  #line 364 
  cif_mutex_lock_mutex_of_wl1271(& wl->mutex);
  #line 366 
  wl->radar_debug_mode = (_Bool)(value != 0UL);
  #line 368 
  if ((long)(wl->state != (unsigned int)WLCORE_STATE_ON) != 0L) 
                                                                #line 369 
                                                                goto out;
  #line 371 
  ret = pm_runtime_get_sync(wl->dev);
  #line 372 
  if (ret < 0) {
    #line 373 
    pm_runtime_put_noidle(wl->dev);
    #line 374 
    goto out;
  }
  #line 377 
  __mptr = (void *)wl->wlvif_list.next;
  #line 377 
  wlvif = ((struct wl12xx_vif *)(__mptr + 18446744073709551608U));
  #line 377 
  while (& wlvif->list != & wl->wlvif_list) {
    #line 377 
    void *__mptr_0;
    #line 377 
    if ((unsigned int)wlvif->bss_type == 3U) 
                                             #line 378 
                                             wlcore_cmd_generic_cfg(wl,wlvif,(unsigned char)2,(unsigned char)((int)wl->radar_debug_mode),(unsigned char)0);
    #line 377 
    __mptr_0 = (void *)wlvif->list.next;
    #line 377 
    wlvif = ((struct wl12xx_vif *)(__mptr_0 + 18446744073709551608U));
  }
  #line 383 
  pm_runtime_mark_last_busy(wl->dev);
  #line 384 
  pm_runtime_put_autosuspend(wl->dev);
  #line 385 
  out: 
       #line 385 
  ;
  #line 386 
  cif_mutex_unlock_mutex_of_wl1271(& wl->mutex);
  #line 387 
  return (long)count;
}

#line 390  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static ssize_t radar_debug_mode_read(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 394 
  struct wl1271 *wl = (struct wl1271 *)file->private_data;
  #line 396 
  return (long)wl1271_format_buffer(userbuf,count,ppos,(char *)"%d\n",
                           (int)wl->radar_debug_mode);
}

#line 400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
static struct file_operations radar_debug_mode_ops = {.llseek = & default_llseek, .read = & radar_debug_mode_read, .write = & radar_debug_mode_write, .open = & simple_open};
#line 408  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/debugfs.c"
int wl18xx_debugfs_add_files(struct wl1271 *wl, struct dentry *rootdir)
{
  #line 411 
  struct dentry *stats;
  #line 411 
  struct dentry *moddir;
  #line 413 
  moddir = cif_debugfs_create_dir((char *)"wl18xx",rootdir);
  #line 414 
  stats = cif_debugfs_create_dir((char *)"fw_stats",moddir);
  #line 416 
  cif_debugfs_create_file((char *)"clear_fw_stats",(unsigned short)256,stats,(void *)wl,& clear_fw_stats_ops);
  #line 418 
  cif_debugfs_create_file((char *)"error_error_frame_non_ctrl",(unsigned short)256,stats,(void *)wl,& error_error_frame_non_ctrl_ops);
  #line 419 
  cif_debugfs_create_file((char *)"error_error_frame_ctrl",(unsigned short)256,stats,(void *)wl,& error_error_frame_ctrl_ops);
  #line 420 
  cif_debugfs_create_file((char *)"error_error_frame_during_protection",(unsigned short)256,stats,(void *)wl,& error_error_frame_during_protection_ops);
  #line 421 
  cif_debugfs_create_file((char *)"error_null_frame_tx_start",(unsigned short)256,stats,(void *)wl,& error_null_frame_tx_start_ops);
  #line 422 
  cif_debugfs_create_file((char *)"error_null_frame_cts_start",(unsigned short)256,stats,(void *)wl,& error_null_frame_cts_start_ops);
  #line 423 
  cif_debugfs_create_file((char *)"error_bar_retry",(unsigned short)256,stats,(void *)wl,& error_bar_retry_ops);
  #line 424 
  cif_debugfs_create_file((char *)"error_num_frame_cts_nul_flid",(unsigned short)256,stats,(void *)wl,& error_num_frame_cts_nul_flid_ops);
  #line 425 
  cif_debugfs_create_file((char *)"error_tx_abort_failure",(unsigned short)256,stats,(void *)wl,& error_tx_abort_failure_ops);
  #line 426 
  cif_debugfs_create_file((char *)"error_tx_resume_failure",(unsigned short)256,stats,(void *)wl,& error_tx_resume_failure_ops);
  #line 427 
  cif_debugfs_create_file((char *)"error_rx_cmplt_db_overflow_cnt",(unsigned short)256,stats,(void *)wl,& error_rx_cmplt_db_overflow_cnt_ops);
  #line 428 
  cif_debugfs_create_file((char *)"error_elp_while_rx_exch",(unsigned short)256,stats,(void *)wl,& error_elp_while_rx_exch_ops);
  #line 429 
  cif_debugfs_create_file((char *)"error_elp_while_tx_exch",(unsigned short)256,stats,(void *)wl,& error_elp_while_tx_exch_ops);
  #line 430 
  cif_debugfs_create_file((char *)"error_elp_while_tx",(unsigned short)256,stats,(void *)wl,& error_elp_while_tx_ops);
  #line 431 
  cif_debugfs_create_file((char *)"error_elp_while_nvic_pending",(unsigned short)256,stats,(void *)wl,& error_elp_while_nvic_pending_ops);
  #line 432 
  cif_debugfs_create_file((char *)"error_rx_excessive_frame_len",(unsigned short)256,stats,(void *)wl,& error_rx_excessive_frame_len_ops);
  #line 433 
  cif_debugfs_create_file((char *)"error_burst_mismatch",(unsigned short)256,stats,(void *)wl,& error_burst_mismatch_ops);
  #line 434 
  cif_debugfs_create_file((char *)"error_tbc_exch_mismatch",(unsigned short)256,stats,(void *)wl,& error_tbc_exch_mismatch_ops);
  #line 436 
  cif_debugfs_create_file((char *)"tx_tx_prepared_descs",(unsigned short)256,stats,(void *)wl,& tx_tx_prepared_descs_ops);
  #line 437 
  cif_debugfs_create_file((char *)"tx_tx_cmplt",(unsigned short)256,stats,(void *)wl,& tx_tx_cmplt_ops);
  #line 438 
  cif_debugfs_create_file((char *)"tx_tx_template_prepared",(unsigned short)256,stats,(void *)wl,& tx_tx_template_prepared_ops);
  #line 439 
  cif_debugfs_create_file((char *)"tx_tx_data_prepared",(unsigned short)256,stats,(void *)wl,& tx_tx_data_prepared_ops);
  #line 440 
  cif_debugfs_create_file((char *)"tx_tx_template_programmed",(unsigned short)256,stats,(void *)wl,& tx_tx_template_programmed_ops);
  #line 441 
  cif_debugfs_create_file((char *)"tx_tx_data_programmed",(unsigned short)256,stats,(void *)wl,& tx_tx_data_programmed_ops);
  #line 442 
  cif_debugfs_create_file((char *)"tx_tx_burst_programmed",(unsigned short)256,stats,(void *)wl,& tx_tx_burst_programmed_ops);
  #line 443 
  cif_debugfs_create_file((char *)"tx_tx_starts",(unsigned short)256,stats,(void *)wl,& tx_tx_starts_ops);
  #line 444 
  cif_debugfs_create_file((char *)"tx_tx_stop",(unsigned short)256,stats,(void *)wl,& tx_tx_stop_ops);
  #line 445 
  cif_debugfs_create_file((char *)"tx_tx_start_templates",(unsigned short)256,stats,(void *)wl,& tx_tx_start_templates_ops);
  #line 446 
  cif_debugfs_create_file((char *)"tx_tx_start_int_templates",(unsigned short)256,stats,(void *)wl,& tx_tx_start_int_templates_ops);
  #line 447 
  cif_debugfs_create_file((char *)"tx_tx_start_fw_gen",(unsigned short)256,stats,(void *)wl,& tx_tx_start_fw_gen_ops);
  #line 448 
  cif_debugfs_create_file((char *)"tx_tx_start_data",(unsigned short)256,stats,(void *)wl,& tx_tx_start_data_ops);
  #line 449 
  cif_debugfs_create_file((char *)"tx_tx_start_null_frame",(unsigned short)256,stats,(void *)wl,& tx_tx_start_null_frame_ops);
  #line 450 
  cif_debugfs_create_file((char *)"tx_tx_exch",(unsigned short)256,stats,(void *)wl,& tx_tx_exch_ops);
  #line 451 
  cif_debugfs_create_file((char *)"tx_tx_retry_template",(unsigned short)256,stats,(void *)wl,& tx_tx_retry_template_ops);
  #line 452 
  cif_debugfs_create_file((char *)"tx_tx_retry_data",(unsigned short)256,stats,(void *)wl,& tx_tx_retry_data_ops);
  #line 453 
  cif_debugfs_create_file((char *)"tx_tx_retry_per_rate",(unsigned short)256,stats,(void *)wl,& tx_tx_retry_per_rate_ops);
  #line 454 
  cif_debugfs_create_file((char *)"tx_tx_exch_pending",(unsigned short)256,stats,(void *)wl,& tx_tx_exch_pending_ops);
  #line 455 
  cif_debugfs_create_file((char *)"tx_tx_exch_expiry",(unsigned short)256,stats,(void *)wl,& tx_tx_exch_expiry_ops);
  #line 456 
  cif_debugfs_create_file((char *)"tx_tx_done_template",(unsigned short)256,stats,(void *)wl,& tx_tx_done_template_ops);
  #line 457 
  cif_debugfs_create_file((char *)"tx_tx_done_data",(unsigned short)256,stats,(void *)wl,& tx_tx_done_data_ops);
  #line 458 
  cif_debugfs_create_file((char *)"tx_tx_done_int_template",(unsigned short)256,stats,(void *)wl,& tx_tx_done_int_template_ops);
  #line 459 
  cif_debugfs_create_file((char *)"tx_tx_cfe1",(unsigned short)256,stats,(void *)wl,& tx_tx_cfe1_ops);
  #line 460 
  cif_debugfs_create_file((char *)"tx_tx_cfe2",(unsigned short)256,stats,(void *)wl,& tx_tx_cfe2_ops);
  #line 461 
  cif_debugfs_create_file((char *)"tx_frag_called",(unsigned short)256,stats,(void *)wl,& tx_frag_called_ops);
  #line 462 
  cif_debugfs_create_file((char *)"tx_frag_mpdu_alloc_failed",(unsigned short)256,stats,(void *)wl,& tx_frag_mpdu_alloc_failed_ops);
  #line 463 
  cif_debugfs_create_file((char *)"tx_frag_init_called",(unsigned short)256,stats,(void *)wl,& tx_frag_init_called_ops);
  #line 464 
  cif_debugfs_create_file((char *)"tx_frag_in_process_called",(unsigned short)256,stats,(void *)wl,& tx_frag_in_process_called_ops);
  #line 465 
  cif_debugfs_create_file((char *)"tx_frag_tkip_called",(unsigned short)256,stats,(void *)wl,& tx_frag_tkip_called_ops);
  #line 466 
  cif_debugfs_create_file((char *)"tx_frag_key_not_found",(unsigned short)256,stats,(void *)wl,& tx_frag_key_not_found_ops);
  #line 467 
  cif_debugfs_create_file((char *)"tx_frag_need_fragmentation",(unsigned short)256,stats,(void *)wl,& tx_frag_need_fragmentation_ops);
  #line 468 
  cif_debugfs_create_file((char *)"tx_frag_bad_mblk_num",(unsigned short)256,stats,(void *)wl,& tx_frag_bad_mblk_num_ops);
  #line 469 
  cif_debugfs_create_file((char *)"tx_frag_failed",(unsigned short)256,stats,(void *)wl,& tx_frag_failed_ops);
  #line 470 
  cif_debugfs_create_file((char *)"tx_frag_cache_hit",(unsigned short)256,stats,(void *)wl,& tx_frag_cache_hit_ops);
  #line 471 
  cif_debugfs_create_file((char *)"tx_frag_cache_miss",(unsigned short)256,stats,(void *)wl,& tx_frag_cache_miss_ops);
  #line 473 
  cif_debugfs_create_file((char *)"rx_rx_beacon_early_term",(unsigned short)256,stats,(void *)wl,& rx_rx_beacon_early_term_ops);
  #line 474 
  cif_debugfs_create_file((char *)"rx_rx_out_of_mpdu_nodes",(unsigned short)256,stats,(void *)wl,& rx_rx_out_of_mpdu_nodes_ops);
  #line 475 
  cif_debugfs_create_file((char *)"rx_rx_hdr_overflow",(unsigned short)256,stats,(void *)wl,& rx_rx_hdr_overflow_ops);
  #line 476 
  cif_debugfs_create_file((char *)"rx_rx_dropped_frame",(unsigned short)256,stats,(void *)wl,& rx_rx_dropped_frame_ops);
  #line 477 
  cif_debugfs_create_file((char *)"rx_rx_done",(unsigned short)256,stats,(void *)wl,& rx_rx_done_ops);
  #line 478 
  cif_debugfs_create_file((char *)"rx_rx_defrag",(unsigned short)256,stats,(void *)wl,& rx_rx_defrag_ops);
  #line 479 
  cif_debugfs_create_file((char *)"rx_rx_defrag_end",(unsigned short)256,stats,(void *)wl,& rx_rx_defrag_end_ops);
  #line 480 
  cif_debugfs_create_file((char *)"rx_rx_cmplt",(unsigned short)256,stats,(void *)wl,& rx_rx_cmplt_ops);
  #line 481 
  cif_debugfs_create_file((char *)"rx_rx_pre_complt",(unsigned short)256,stats,(void *)wl,& rx_rx_pre_complt_ops);
  #line 482 
  cif_debugfs_create_file((char *)"rx_rx_cmplt_task",(unsigned short)256,stats,(void *)wl,& rx_rx_cmplt_task_ops);
  #line 483 
  cif_debugfs_create_file((char *)"rx_rx_phy_hdr",(unsigned short)256,stats,(void *)wl,& rx_rx_phy_hdr_ops);
  #line 484 
  cif_debugfs_create_file((char *)"rx_rx_timeout",(unsigned short)256,stats,(void *)wl,& rx_rx_timeout_ops);
  #line 485 
  cif_debugfs_create_file((char *)"rx_rx_rts_timeout",(unsigned short)256,stats,(void *)wl,& rx_rx_rts_timeout_ops);
  #line 486 
  cif_debugfs_create_file((char *)"rx_rx_timeout_wa",(unsigned short)256,stats,(void *)wl,& rx_rx_timeout_wa_ops);
  #line 487 
  cif_debugfs_create_file((char *)"rx_defrag_called",(unsigned short)256,stats,(void *)wl,& rx_defrag_called_ops);
  #line 488 
  cif_debugfs_create_file((char *)"rx_defrag_init_called",(unsigned short)256,stats,(void *)wl,& rx_defrag_init_called_ops);
  #line 489 
  cif_debugfs_create_file((char *)"rx_defrag_in_process_called",(unsigned short)256,stats,(void *)wl,& rx_defrag_in_process_called_ops);
  #line 490 
  cif_debugfs_create_file((char *)"rx_defrag_tkip_called",(unsigned short)256,stats,(void *)wl,& rx_defrag_tkip_called_ops);
  #line 491 
  cif_debugfs_create_file((char *)"rx_defrag_need_defrag",(unsigned short)256,stats,(void *)wl,& rx_defrag_need_defrag_ops);
  #line 492 
  cif_debugfs_create_file((char *)"rx_defrag_decrypt_failed",(unsigned short)256,stats,(void *)wl,& rx_defrag_decrypt_failed_ops);
  #line 493 
  cif_debugfs_create_file((char *)"rx_decrypt_key_not_found",(unsigned short)256,stats,(void *)wl,& rx_decrypt_key_not_found_ops);
  #line 494 
  cif_debugfs_create_file((char *)"rx_defrag_need_decrypt",(unsigned short)256,stats,(void *)wl,& rx_defrag_need_decrypt_ops);
  #line 495 
  cif_debugfs_create_file((char *)"rx_rx_tkip_replays",(unsigned short)256,stats,(void *)wl,& rx_rx_tkip_replays_ops);
  #line 496 
  cif_debugfs_create_file((char *)"rx_rx_xfr",(unsigned short)256,stats,(void *)wl,& rx_rx_xfr_ops);
  #line 498 
  cif_debugfs_create_file((char *)"isr_irqs",(unsigned short)256,stats,(void *)wl,& isr_irqs_ops);
  #line 500 
  cif_debugfs_create_file((char *)"pwr_missing_bcns_cnt",(unsigned short)256,stats,(void *)wl,& pwr_missing_bcns_cnt_ops);
  #line 501 
  cif_debugfs_create_file((char *)"pwr_rcvd_bcns_cnt",(unsigned short)256,stats,(void *)wl,& pwr_rcvd_bcns_cnt_ops);
  #line 502 
  cif_debugfs_create_file((char *)"pwr_connection_out_of_sync",(unsigned short)256,stats,(void *)wl,& pwr_connection_out_of_sync_ops);
  #line 503 
  cif_debugfs_create_file((char *)"pwr_cont_miss_bcns_spread",(unsigned short)256,stats,(void *)wl,& pwr_cont_miss_bcns_spread_ops);
  #line 504 
  cif_debugfs_create_file((char *)"pwr_rcvd_awake_bcns_cnt",(unsigned short)256,stats,(void *)wl,& pwr_rcvd_awake_bcns_cnt_ops);
  #line 505 
  cif_debugfs_create_file((char *)"pwr_sleep_time_count",(unsigned short)256,stats,(void *)wl,& pwr_sleep_time_count_ops);
  #line 506 
  cif_debugfs_create_file((char *)"pwr_sleep_time_avg",(unsigned short)256,stats,(void *)wl,& pwr_sleep_time_avg_ops);
  #line 507 
  cif_debugfs_create_file((char *)"pwr_sleep_cycle_avg",(unsigned short)256,stats,(void *)wl,& pwr_sleep_cycle_avg_ops);
  #line 508 
  cif_debugfs_create_file((char *)"pwr_sleep_percent",(unsigned short)256,stats,(void *)wl,& pwr_sleep_percent_ops);
  #line 509 
  cif_debugfs_create_file((char *)"pwr_ap_sleep_active_conf",(unsigned short)256,stats,(void *)wl,& pwr_ap_sleep_active_conf_ops);
  #line 510 
  cif_debugfs_create_file((char *)"pwr_ap_sleep_user_conf",(unsigned short)256,stats,(void *)wl,& pwr_ap_sleep_user_conf_ops);
  #line 511 
  cif_debugfs_create_file((char *)"pwr_ap_sleep_counter",(unsigned short)256,stats,(void *)wl,& pwr_ap_sleep_counter_ops);
  #line 513 
  cif_debugfs_create_file((char *)"rx_filter_beacon_filter",(unsigned short)256,stats,(void *)wl,& rx_filter_beacon_filter_ops);
  #line 514 
  cif_debugfs_create_file((char *)"rx_filter_arp_filter",(unsigned short)256,stats,(void *)wl,& rx_filter_arp_filter_ops);
  #line 515 
  cif_debugfs_create_file((char *)"rx_filter_mc_filter",(unsigned short)256,stats,(void *)wl,& rx_filter_mc_filter_ops);
  #line 516 
  cif_debugfs_create_file((char *)"rx_filter_dup_filter",(unsigned short)256,stats,(void *)wl,& rx_filter_dup_filter_ops);
  #line 517 
  cif_debugfs_create_file((char *)"rx_filter_data_filter",(unsigned short)256,stats,(void *)wl,& rx_filter_data_filter_ops);
  #line 518 
  cif_debugfs_create_file((char *)"rx_filter_ibss_filter",(unsigned short)256,stats,(void *)wl,& rx_filter_ibss_filter_ops);
  #line 519 
  cif_debugfs_create_file((char *)"rx_filter_protection_filter",(unsigned short)256,stats,(void *)wl,& rx_filter_protection_filter_ops);
  #line 520 
  cif_debugfs_create_file((char *)"rx_filter_accum_arp_pend_requests",(unsigned short)256,stats,(void *)wl,& rx_filter_accum_arp_pend_requests_ops);
  #line 521 
  cif_debugfs_create_file((char *)"rx_filter_max_arp_queue_dep",(unsigned short)256,stats,(void *)wl,& rx_filter_max_arp_queue_dep_ops);
  #line 523 
  cif_debugfs_create_file((char *)"rx_rate_rx_frames_per_rates",(unsigned short)256,stats,(void *)wl,& rx_rate_rx_frames_per_rates_ops);
  #line 525 
  cif_debugfs_create_file((char *)"aggr_size_tx_agg_rate",(unsigned short)256,stats,(void *)wl,& aggr_size_tx_agg_rate_ops);
  #line 526 
  cif_debugfs_create_file((char *)"aggr_size_tx_agg_len",(unsigned short)256,stats,(void *)wl,& aggr_size_tx_agg_len_ops);
  #line 527 
  cif_debugfs_create_file((char *)"aggr_size_rx_size",(unsigned short)256,stats,(void *)wl,& aggr_size_rx_size_ops);
  #line 529 
  cif_debugfs_create_file((char *)"pipeline_hs_tx_stat_fifo_int",(unsigned short)256,stats,(void *)wl,& pipeline_hs_tx_stat_fifo_int_ops);
  #line 530 
  cif_debugfs_create_file((char *)"pipeline_enc_tx_stat_fifo_int",(unsigned short)256,stats,(void *)wl,& pipeline_enc_tx_stat_fifo_int_ops);
  #line 531 
  cif_debugfs_create_file((char *)"pipeline_enc_rx_stat_fifo_int",(unsigned short)256,stats,(void *)wl,& pipeline_enc_rx_stat_fifo_int_ops);
  #line 532 
  cif_debugfs_create_file((char *)"pipeline_rx_complete_stat_fifo_int",(unsigned short)256,stats,(void *)wl,& pipeline_rx_complete_stat_fifo_int_ops);
  #line 533 
  cif_debugfs_create_file((char *)"pipeline_pre_proc_swi",(unsigned short)256,stats,(void *)wl,& pipeline_pre_proc_swi_ops);
  #line 534 
  cif_debugfs_create_file((char *)"pipeline_post_proc_swi",(unsigned short)256,stats,(void *)wl,& pipeline_post_proc_swi_ops);
  #line 535 
  cif_debugfs_create_file((char *)"pipeline_sec_frag_swi",(unsigned short)256,stats,(void *)wl,& pipeline_sec_frag_swi_ops);
  #line 536 
  cif_debugfs_create_file((char *)"pipeline_pre_to_defrag_swi",(unsigned short)256,stats,(void *)wl,& pipeline_pre_to_defrag_swi_ops);
  #line 537 
  cif_debugfs_create_file((char *)"pipeline_defrag_to_rx_xfer_swi",(unsigned short)256,stats,(void *)wl,& pipeline_defrag_to_rx_xfer_swi_ops);
  #line 538 
  cif_debugfs_create_file((char *)"pipeline_dec_packet_in",(unsigned short)256,stats,(void *)wl,& pipeline_dec_packet_in_ops);
  #line 539 
  cif_debugfs_create_file((char *)"pipeline_dec_packet_in_fifo_full",(unsigned short)256,stats,(void *)wl,& pipeline_dec_packet_in_fifo_full_ops);
  #line 540 
  cif_debugfs_create_file((char *)"pipeline_dec_packet_out",(unsigned short)256,stats,(void *)wl,& pipeline_dec_packet_out_ops);
  #line 541 
  cif_debugfs_create_file((char *)"pipeline_pipeline_fifo_full",(unsigned short)256,stats,(void *)wl,& pipeline_pipeline_fifo_full_ops);
  #line 543 
  cif_debugfs_create_file((char *)"diversity_num_of_packets_per_ant",(unsigned short)256,stats,(void *)wl,& diversity_num_of_packets_per_ant_ops);
  #line 544 
  cif_debugfs_create_file((char *)"diversity_total_num_of_toggles",(unsigned short)256,stats,(void *)wl,& diversity_total_num_of_toggles_ops);
  #line 546 
  cif_debugfs_create_file((char *)"thermal_irq_thr_low",(unsigned short)256,stats,(void *)wl,& thermal_irq_thr_low_ops);
  #line 547 
  cif_debugfs_create_file((char *)"thermal_irq_thr_high",(unsigned short)256,stats,(void *)wl,& thermal_irq_thr_high_ops);
  #line 548 
  cif_debugfs_create_file((char *)"thermal_tx_stop",(unsigned short)256,stats,(void *)wl,& thermal_tx_stop_ops);
  #line 549 
  cif_debugfs_create_file((char *)"thermal_tx_resume",(unsigned short)256,stats,(void *)wl,& thermal_tx_resume_ops);
  #line 550 
  cif_debugfs_create_file((char *)"thermal_false_irq",(unsigned short)256,stats,(void *)wl,& thermal_false_irq_ops);
  #line 551 
  cif_debugfs_create_file((char *)"thermal_adc_source_unexpected",(unsigned short)256,stats,(void *)wl,& thermal_adc_source_unexpected_ops);
  #line 553 
  cif_debugfs_create_file((char *)"calib_fail_count",(unsigned short)256,stats,(void *)wl,& calib_fail_count_ops);
  #line 555 
  cif_debugfs_create_file((char *)"calib_calib_count",(unsigned short)256,stats,(void *)wl,& calib_calib_count_ops);
  #line 557 
  cif_debugfs_create_file((char *)"roaming_rssi_level",(unsigned short)256,stats,(void *)wl,& roaming_rssi_level_ops);
  #line 559 
  cif_debugfs_create_file((char *)"dfs_num_of_radar_detections",(unsigned short)256,stats,(void *)wl,& dfs_num_of_radar_detections_ops);
  #line 561 
  cif_debugfs_create_file((char *)"conf",(unsigned short)256,moddir,(void *)wl,& conf_ops);
  #line 562 
  cif_debugfs_create_file((char *)"radar_detection",(unsigned short)256,moddir,(void *)wl,& radar_detection_ops);
  #line 564 
  cif_debugfs_create_file((char *)"radar_debug_mode",(unsigned short)256,moddir,(void *)wl,& radar_debug_mode_ops);
  #line 566 
  cif_debugfs_create_file((char *)"dynamic_fw_traces",(unsigned short)256,moddir,(void *)wl,& dynamic_fw_traces_ops);
  #line 568 
  return 0;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_aggr_size_rx_size_ops = & aggr_size_rx_size_ops;
#line 94  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_aggr_size_tx_agg_len_ops = & aggr_size_tx_agg_len_ops;
#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_aggr_size_tx_agg_rate_ops = & aggr_size_tx_agg_rate_ops;
#line 96  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_calib_calib_count_ops = & calib_calib_count_ops;
#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_calib_fail_count_ops = & calib_fail_count_ops;
#line 98  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_clear_fw_stats_ops = & clear_fw_stats_ops;
#line 99  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_conf_ops = & conf_ops;
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_dfs_num_of_radar_detections_ops = & dfs_num_of_radar_detections_ops;
#line 101  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_diversity_num_of_packets_per_ant_ops = & diversity_num_of_packets_per_ant_ops;
#line 102  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_diversity_total_num_of_toggles_ops = & diversity_total_num_of_toggles_ops;
#line 103  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_dynamic_fw_traces_ops = & dynamic_fw_traces_ops;
#line 104  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_error_bar_retry_ops = & error_bar_retry_ops;
#line 105  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_error_burst_mismatch_ops = & error_burst_mismatch_ops;
#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_error_elp_while_nvic_pending_ops = & error_elp_while_nvic_pending_ops;
#line 107  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_error_elp_while_rx_exch_ops = & error_elp_while_rx_exch_ops;
#line 108  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_error_elp_while_tx_exch_ops = & error_elp_while_tx_exch_ops;
#line 109  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_error_elp_while_tx_ops = & error_elp_while_tx_ops;
#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_error_error_frame_ctrl_ops = & error_error_frame_ctrl_ops;
#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_error_error_frame_during_protection_ops = & error_error_frame_during_protection_ops;
#line 112  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_error_error_frame_non_ctrl_ops = & error_error_frame_non_ctrl_ops;
#line 113  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_error_null_frame_cts_start_ops = & error_null_frame_cts_start_ops;
#line 114  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_error_null_frame_tx_start_ops = & error_null_frame_tx_start_ops;
#line 115  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_error_num_frame_cts_nul_flid_ops = & error_num_frame_cts_nul_flid_ops;
#line 116  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_error_rx_cmplt_db_overflow_cnt_ops = & error_rx_cmplt_db_overflow_cnt_ops;
#line 117  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_error_rx_excessive_frame_len_ops = & error_rx_excessive_frame_len_ops;
#line 118  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_error_tbc_exch_mismatch_ops = & error_tbc_exch_mismatch_ops;
#line 119  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_error_tx_abort_failure_ops = & error_tx_abort_failure_ops;
#line 120  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_error_tx_resume_failure_ops = & error_tx_resume_failure_ops;
#line 121  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_isr_irqs_ops = & isr_irqs_ops;
#line 122  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_pipeline_dec_packet_in_fifo_full_ops = & pipeline_dec_packet_in_fifo_full_ops;
#line 123  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_pipeline_dec_packet_in_ops = & pipeline_dec_packet_in_ops;
#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_pipeline_dec_packet_out_ops = & pipeline_dec_packet_out_ops;
#line 125  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_pipeline_defrag_to_rx_xfer_swi_ops = & pipeline_defrag_to_rx_xfer_swi_ops;
#line 126  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_pipeline_enc_rx_stat_fifo_int_ops = & pipeline_enc_rx_stat_fifo_int_ops;
#line 127  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_pipeline_enc_tx_stat_fifo_int_ops = & pipeline_enc_tx_stat_fifo_int_ops;
#line 128  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_pipeline_hs_tx_stat_fifo_int_ops = & pipeline_hs_tx_stat_fifo_int_ops;
#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_pipeline_pipeline_fifo_full_ops = & pipeline_pipeline_fifo_full_ops;
#line 130  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_pipeline_post_proc_swi_ops = & pipeline_post_proc_swi_ops;
#line 131  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_pipeline_pre_proc_swi_ops = & pipeline_pre_proc_swi_ops;
#line 132  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_pipeline_pre_to_defrag_swi_ops = & pipeline_pre_to_defrag_swi_ops;
#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_pipeline_rx_complete_stat_fifo_int_ops = & pipeline_rx_complete_stat_fifo_int_ops;
#line 134  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_pipeline_sec_frag_swi_ops = & pipeline_sec_frag_swi_ops;
#line 135  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_pwr_ap_sleep_active_conf_ops = & pwr_ap_sleep_active_conf_ops;
#line 136  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_pwr_ap_sleep_counter_ops = & pwr_ap_sleep_counter_ops;
#line 137  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_pwr_ap_sleep_user_conf_ops = & pwr_ap_sleep_user_conf_ops;
#line 138  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_pwr_connection_out_of_sync_ops = & pwr_connection_out_of_sync_ops;
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_pwr_cont_miss_bcns_spread_ops = & pwr_cont_miss_bcns_spread_ops;
#line 140  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_pwr_missing_bcns_cnt_ops = & pwr_missing_bcns_cnt_ops;
#line 141  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_pwr_rcvd_awake_bcns_cnt_ops = & pwr_rcvd_awake_bcns_cnt_ops;
#line 142  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_pwr_rcvd_bcns_cnt_ops = & pwr_rcvd_bcns_cnt_ops;
#line 143  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_pwr_sleep_cycle_avg_ops = & pwr_sleep_cycle_avg_ops;
#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_pwr_sleep_percent_ops = & pwr_sleep_percent_ops;
#line 145  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_pwr_sleep_time_avg_ops = & pwr_sleep_time_avg_ops;
#line 146  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_pwr_sleep_time_count_ops = & pwr_sleep_time_count_ops;
#line 147  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_radar_debug_mode_ops = & radar_debug_mode_ops;
#line 148  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_radar_detection_ops = & radar_detection_ops;
#line 149  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_roaming_rssi_level_ops = & roaming_rssi_level_ops;
#line 150  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_rx_decrypt_key_not_found_ops = & rx_decrypt_key_not_found_ops;
#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_rx_defrag_called_ops = & rx_defrag_called_ops;
#line 152  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_rx_defrag_decrypt_failed_ops = & rx_defrag_decrypt_failed_ops;
#line 153  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_rx_defrag_in_process_called_ops = & rx_defrag_in_process_called_ops;
#line 154  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_rx_defrag_init_called_ops = & rx_defrag_init_called_ops;
#line 155  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_rx_defrag_need_decrypt_ops = & rx_defrag_need_decrypt_ops;
#line 156  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_rx_defrag_need_defrag_ops = & rx_defrag_need_defrag_ops;
#line 157  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_rx_defrag_tkip_called_ops = & rx_defrag_tkip_called_ops;
#line 158  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_rx_filter_accum_arp_pend_requests_ops = & rx_filter_accum_arp_pend_requests_ops;
#line 159  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_rx_filter_arp_filter_ops = & rx_filter_arp_filter_ops;
#line 160  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_rx_filter_beacon_filter_ops = & rx_filter_beacon_filter_ops;
#line 161  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_rx_filter_data_filter_ops = & rx_filter_data_filter_ops;
#line 162  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_rx_filter_dup_filter_ops = & rx_filter_dup_filter_ops;
#line 163  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_rx_filter_ibss_filter_ops = & rx_filter_ibss_filter_ops;
#line 164  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_rx_filter_max_arp_queue_dep_ops = & rx_filter_max_arp_queue_dep_ops;
#line 165  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_rx_filter_mc_filter_ops = & rx_filter_mc_filter_ops;
#line 166  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_rx_filter_protection_filter_ops = & rx_filter_protection_filter_ops;
#line 167  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_rx_rate_rx_frames_per_rates_ops = & rx_rate_rx_frames_per_rates_ops;
#line 168  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_rx_rx_beacon_early_term_ops = & rx_rx_beacon_early_term_ops;
#line 169  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_rx_rx_cmplt_ops = & rx_rx_cmplt_ops;
#line 170  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_rx_rx_cmplt_task_ops = & rx_rx_cmplt_task_ops;
#line 171  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_rx_rx_defrag_end_ops = & rx_rx_defrag_end_ops;
#line 172  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_rx_rx_defrag_ops = & rx_rx_defrag_ops;
#line 173  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_rx_rx_done_ops = & rx_rx_done_ops;
#line 174  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_rx_rx_dropped_frame_ops = & rx_rx_dropped_frame_ops;
#line 175  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_rx_rx_hdr_overflow_ops = & rx_rx_hdr_overflow_ops;
#line 176  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_rx_rx_out_of_mpdu_nodes_ops = & rx_rx_out_of_mpdu_nodes_ops;
#line 177  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_rx_rx_phy_hdr_ops = & rx_rx_phy_hdr_ops;
#line 178  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_rx_rx_pre_complt_ops = & rx_rx_pre_complt_ops;
#line 179  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_rx_rx_rts_timeout_ops = & rx_rx_rts_timeout_ops;
#line 180  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_rx_rx_timeout_ops = & rx_rx_timeout_ops;
#line 181  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_rx_rx_timeout_wa_ops = & rx_rx_timeout_wa_ops;
#line 182  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_rx_rx_tkip_replays_ops = & rx_rx_tkip_replays_ops;
#line 183  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_rx_rx_xfr_ops = & rx_rx_xfr_ops;
#line 184  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_thermal_adc_source_unexpected_ops = & thermal_adc_source_unexpected_ops;
#line 185  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_thermal_false_irq_ops = & thermal_false_irq_ops;
#line 186  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_thermal_irq_thr_high_ops = & thermal_irq_thr_high_ops;
#line 187  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_thermal_irq_thr_low_ops = & thermal_irq_thr_low_ops;
#line 188  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_thermal_tx_resume_ops = & thermal_tx_resume_ops;
#line 189  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_thermal_tx_stop_ops = & thermal_tx_stop_ops;
#line 190  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_tx_frag_bad_mblk_num_ops = & tx_frag_bad_mblk_num_ops;
#line 191  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_tx_frag_cache_hit_ops = & tx_frag_cache_hit_ops;
#line 192  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_tx_frag_cache_miss_ops = & tx_frag_cache_miss_ops;
#line 193  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_tx_frag_called_ops = & tx_frag_called_ops;
#line 194  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_tx_frag_failed_ops = & tx_frag_failed_ops;
#line 195  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_tx_frag_in_process_called_ops = & tx_frag_in_process_called_ops;
#line 196  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_tx_frag_init_called_ops = & tx_frag_init_called_ops;
#line 197  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_tx_frag_key_not_found_ops = & tx_frag_key_not_found_ops;
#line 198  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_tx_frag_mpdu_alloc_failed_ops = & tx_frag_mpdu_alloc_failed_ops;
#line 199  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_tx_frag_need_fragmentation_ops = & tx_frag_need_fragmentation_ops;
#line 200  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_tx_frag_tkip_called_ops = & tx_frag_tkip_called_ops;
#line 201  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_tx_tx_burst_programmed_ops = & tx_tx_burst_programmed_ops;
#line 202  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_tx_tx_cfe1_ops = & tx_tx_cfe1_ops;
#line 203  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_tx_tx_cfe2_ops = & tx_tx_cfe2_ops;
#line 204  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_tx_tx_cmplt_ops = & tx_tx_cmplt_ops;
#line 205  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_tx_tx_data_prepared_ops = & tx_tx_data_prepared_ops;
#line 206  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_tx_tx_data_programmed_ops = & tx_tx_data_programmed_ops;
#line 207  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_tx_tx_done_data_ops = & tx_tx_done_data_ops;
#line 208  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_tx_tx_done_int_template_ops = & tx_tx_done_int_template_ops;
#line 209  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_tx_tx_done_template_ops = & tx_tx_done_template_ops;
#line 210  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_tx_tx_exch_expiry_ops = & tx_tx_exch_expiry_ops;
#line 211  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_tx_tx_exch_ops = & tx_tx_exch_ops;
#line 212  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_tx_tx_exch_pending_ops = & tx_tx_exch_pending_ops;
#line 213  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_tx_tx_prepared_descs_ops = & tx_tx_prepared_descs_ops;
#line 214  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_tx_tx_retry_data_ops = & tx_tx_retry_data_ops;
#line 215  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_tx_tx_retry_per_rate_ops = & tx_tx_retry_per_rate_ops;
#line 216  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_tx_tx_retry_template_ops = & tx_tx_retry_template_ops;
#line 217  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_tx_tx_start_data_ops = & tx_tx_start_data_ops;
#line 218  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_tx_tx_start_fw_gen_ops = & tx_tx_start_fw_gen_ops;
#line 219  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_tx_tx_start_int_templates_ops = & tx_tx_start_int_templates_ops;
#line 220  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_tx_tx_start_null_frame_ops = & tx_tx_start_null_frame_ops;
#line 221  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_tx_tx_start_templates_ops = & tx_tx_start_templates_ops;
#line 222  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_tx_tx_starts_ops = & tx_tx_starts_ops;
#line 223  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_tx_tx_stop_ops = & tx_tx_stop_ops;
#line 224  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_tx_tx_template_prepared_ops = & tx_tx_template_prepared_ops;
#line 225  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_tx_tx_template_programmed_ops = & tx_tx_template_programmed_ops;
#line 229 
#line 229 
struct dentry *emg_debugfs_create_dir(char *arg0, struct dentry *arg1);
#line 230 
#line 230 
struct dentry *emg_debugfs_create_file(char *arg0, unsigned short arg1, struct dentry *arg2, void *arg3, struct file_operations *arg4);
#line 236  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_aggr_size_rx_size_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 237 
  return aggr_size_rx_size_read(arg0,arg1,arg2,arg3);
}

#line 241  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_aggr_size_tx_agg_len_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 242 
  return aggr_size_tx_agg_len_read(arg0,arg1,arg2,arg3);
}

#line 246  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_aggr_size_tx_agg_rate_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 247 
  return aggr_size_tx_agg_rate_read(arg0,arg1,arg2,arg3);
}

#line 251  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_calib_calib_count_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 252 
  return calib_calib_count_read(arg0,arg1,arg2,arg3);
}

#line 256  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_calib_fail_count_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 257 
  return calib_fail_count_read(arg0,arg1,arg2,arg3);
}

#line 261  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_clear_fw_stats_write(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 262 
  return clear_fw_stats_write(arg0,arg1,arg2,arg3);
}

#line 266  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_conf_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 267 
  return conf_read(arg0,arg1,arg2,arg3);
}

#line 271  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_dfs_num_of_radar_detections_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 272 
  return dfs_num_of_radar_detections_read(arg0,arg1,arg2,arg3);
}

#line 276  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_diversity_num_of_packets_per_ant_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 277 
  return diversity_num_of_packets_per_ant_read(arg0,arg1,arg2,arg3);
}

#line 281  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_diversity_total_num_of_toggles_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 282 
  return diversity_total_num_of_toggles_read(arg0,arg1,arg2,arg3);
}

#line 286  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_dynamic_fw_traces_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 287 
  return dynamic_fw_traces_read(arg0,arg1,arg2,arg3);
}

#line 291  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_dynamic_fw_traces_write(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 292 
  return dynamic_fw_traces_write(arg0,arg1,arg2,arg3);
}

#line 296  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_error_bar_retry_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 297 
  return error_bar_retry_read(arg0,arg1,arg2,arg3);
}

#line 301  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_error_burst_mismatch_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 302 
  return error_burst_mismatch_read(arg0,arg1,arg2,arg3);
}

#line 306  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_error_elp_while_nvic_pending_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 307 
  return error_elp_while_nvic_pending_read(arg0,arg1,arg2,arg3);
}

#line 311  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_error_elp_while_rx_exch_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 312 
  return error_elp_while_rx_exch_read(arg0,arg1,arg2,arg3);
}

#line 316  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_error_elp_while_tx_exch_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 317 
  return error_elp_while_tx_exch_read(arg0,arg1,arg2,arg3);
}

#line 321  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_error_elp_while_tx_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 322 
  return error_elp_while_tx_read(arg0,arg1,arg2,arg3);
}

#line 326  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_error_error_frame_ctrl_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 327 
  return error_error_frame_ctrl_read(arg0,arg1,arg2,arg3);
}

#line 331  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_error_error_frame_during_protection_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 332 
  return error_error_frame_during_protection_read(arg0,arg1,arg2,arg3);
}

#line 336  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_error_error_frame_non_ctrl_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 337 
  return error_error_frame_non_ctrl_read(arg0,arg1,arg2,arg3);
}

#line 341  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_error_null_frame_cts_start_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 342 
  return error_null_frame_cts_start_read(arg0,arg1,arg2,arg3);
}

#line 346  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_error_null_frame_tx_start_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 347 
  return error_null_frame_tx_start_read(arg0,arg1,arg2,arg3);
}

#line 351  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_error_num_frame_cts_nul_flid_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 352 
  return error_num_frame_cts_nul_flid_read(arg0,arg1,arg2,arg3);
}

#line 356  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_error_rx_cmplt_db_overflow_cnt_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 357 
  return error_rx_cmplt_db_overflow_cnt_read(arg0,arg1,arg2,arg3);
}

#line 361  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_error_rx_excessive_frame_len_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 362 
  return error_rx_excessive_frame_len_read(arg0,arg1,arg2,arg3);
}

#line 366  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_error_tbc_exch_mismatch_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 367 
  return error_tbc_exch_mismatch_read(arg0,arg1,arg2,arg3);
}

#line 371  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_error_tx_abort_failure_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 372 
  return error_tx_abort_failure_read(arg0,arg1,arg2,arg3);
}

#line 376  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_error_tx_resume_failure_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 377 
  return error_tx_resume_failure_read(arg0,arg1,arg2,arg3);
}

#line 381  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_isr_irqs_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 382 
  return isr_irqs_read(arg0,arg1,arg2,arg3);
}

#line 386  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_pipeline_dec_packet_in_fifo_full_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 387 
  return pipeline_dec_packet_in_fifo_full_read(arg0,arg1,arg2,arg3);
}

#line 391  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_pipeline_dec_packet_in_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 392 
  return pipeline_dec_packet_in_read(arg0,arg1,arg2,arg3);
}

#line 396  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_pipeline_dec_packet_out_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 397 
  return pipeline_dec_packet_out_read(arg0,arg1,arg2,arg3);
}

#line 401  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_pipeline_defrag_to_rx_xfer_swi_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 402 
  return pipeline_defrag_to_rx_xfer_swi_read(arg0,arg1,arg2,arg3);
}

#line 406  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_pipeline_enc_rx_stat_fifo_int_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 407 
  return pipeline_enc_rx_stat_fifo_int_read(arg0,arg1,arg2,arg3);
}

#line 411  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_pipeline_enc_tx_stat_fifo_int_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 412 
  return pipeline_enc_tx_stat_fifo_int_read(arg0,arg1,arg2,arg3);
}

#line 416  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_pipeline_hs_tx_stat_fifo_int_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 417 
  return pipeline_hs_tx_stat_fifo_int_read(arg0,arg1,arg2,arg3);
}

#line 421  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_pipeline_pipeline_fifo_full_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 422 
  return pipeline_pipeline_fifo_full_read(arg0,arg1,arg2,arg3);
}

#line 426  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_pipeline_post_proc_swi_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 427 
  return pipeline_post_proc_swi_read(arg0,arg1,arg2,arg3);
}

#line 431  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_pipeline_pre_proc_swi_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 432 
  return pipeline_pre_proc_swi_read(arg0,arg1,arg2,arg3);
}

#line 436  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_pipeline_pre_to_defrag_swi_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 437 
  return pipeline_pre_to_defrag_swi_read(arg0,arg1,arg2,arg3);
}

#line 441  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_pipeline_rx_complete_stat_fifo_int_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 442 
  return pipeline_rx_complete_stat_fifo_int_read(arg0,arg1,arg2,arg3);
}

#line 446  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_pipeline_sec_frag_swi_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 447 
  return pipeline_sec_frag_swi_read(arg0,arg1,arg2,arg3);
}

#line 451  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_pwr_ap_sleep_active_conf_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 452 
  return pwr_ap_sleep_active_conf_read(arg0,arg1,arg2,arg3);
}

#line 456  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_pwr_ap_sleep_counter_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 457 
  return pwr_ap_sleep_counter_read(arg0,arg1,arg2,arg3);
}

#line 461  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_pwr_ap_sleep_user_conf_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 462 
  return pwr_ap_sleep_user_conf_read(arg0,arg1,arg2,arg3);
}

#line 466  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_pwr_connection_out_of_sync_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 467 
  return pwr_connection_out_of_sync_read(arg0,arg1,arg2,arg3);
}

#line 471  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_pwr_cont_miss_bcns_spread_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 472 
  return pwr_cont_miss_bcns_spread_read(arg0,arg1,arg2,arg3);
}

#line 476  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_pwr_missing_bcns_cnt_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 477 
  return pwr_missing_bcns_cnt_read(arg0,arg1,arg2,arg3);
}

#line 481  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_pwr_rcvd_awake_bcns_cnt_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 482 
  return pwr_rcvd_awake_bcns_cnt_read(arg0,arg1,arg2,arg3);
}

#line 486  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_pwr_rcvd_bcns_cnt_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 487 
  return pwr_rcvd_bcns_cnt_read(arg0,arg1,arg2,arg3);
}

#line 491  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_pwr_sleep_cycle_avg_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 492 
  return pwr_sleep_cycle_avg_read(arg0,arg1,arg2,arg3);
}

#line 496  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_pwr_sleep_percent_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 497 
  return pwr_sleep_percent_read(arg0,arg1,arg2,arg3);
}

#line 501  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_pwr_sleep_time_avg_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 502 
  return pwr_sleep_time_avg_read(arg0,arg1,arg2,arg3);
}

#line 506  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_pwr_sleep_time_count_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 507 
  return pwr_sleep_time_count_read(arg0,arg1,arg2,arg3);
}

#line 511  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_radar_debug_mode_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 512 
  return radar_debug_mode_read(arg0,arg1,arg2,arg3);
}

#line 516  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_radar_debug_mode_write(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 517 
  return radar_debug_mode_write(arg0,arg1,arg2,arg3);
}

#line 521  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_radar_detection_write(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 522 
  return radar_detection_write(arg0,arg1,arg2,arg3);
}

#line 526  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_roaming_rssi_level_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 527 
  return roaming_rssi_level_read(arg0,arg1,arg2,arg3);
}

#line 531  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_rx_decrypt_key_not_found_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 532 
  return rx_decrypt_key_not_found_read(arg0,arg1,arg2,arg3);
}

#line 536  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_rx_defrag_called_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 537 
  return rx_defrag_called_read(arg0,arg1,arg2,arg3);
}

#line 541  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_rx_defrag_decrypt_failed_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 542 
  return rx_defrag_decrypt_failed_read(arg0,arg1,arg2,arg3);
}

#line 546  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_rx_defrag_in_process_called_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 547 
  return rx_defrag_in_process_called_read(arg0,arg1,arg2,arg3);
}

#line 551  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_rx_defrag_init_called_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 552 
  return rx_defrag_init_called_read(arg0,arg1,arg2,arg3);
}

#line 556  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_rx_defrag_need_decrypt_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 557 
  return rx_defrag_need_decrypt_read(arg0,arg1,arg2,arg3);
}

#line 561  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_rx_defrag_need_defrag_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 562 
  return rx_defrag_need_defrag_read(arg0,arg1,arg2,arg3);
}

#line 566  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_rx_defrag_tkip_called_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 567 
  return rx_defrag_tkip_called_read(arg0,arg1,arg2,arg3);
}

#line 571  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_rx_filter_accum_arp_pend_requests_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 572 
  return rx_filter_accum_arp_pend_requests_read(arg0,arg1,arg2,arg3);
}

#line 576  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_rx_filter_arp_filter_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 577 
  return rx_filter_arp_filter_read(arg0,arg1,arg2,arg3);
}

#line 581  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_rx_filter_beacon_filter_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 582 
  return rx_filter_beacon_filter_read(arg0,arg1,arg2,arg3);
}

#line 586  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_rx_filter_data_filter_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 587 
  return rx_filter_data_filter_read(arg0,arg1,arg2,arg3);
}

#line 591  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_rx_filter_dup_filter_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 592 
  return rx_filter_dup_filter_read(arg0,arg1,arg2,arg3);
}

#line 596  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_rx_filter_ibss_filter_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 597 
  return rx_filter_ibss_filter_read(arg0,arg1,arg2,arg3);
}

#line 601  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_rx_filter_max_arp_queue_dep_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 602 
  return rx_filter_max_arp_queue_dep_read(arg0,arg1,arg2,arg3);
}

#line 606  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_rx_filter_mc_filter_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 607 
  return rx_filter_mc_filter_read(arg0,arg1,arg2,arg3);
}

#line 611  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_rx_filter_protection_filter_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 612 
  return rx_filter_protection_filter_read(arg0,arg1,arg2,arg3);
}

#line 616  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_rx_rate_rx_frames_per_rates_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 617 
  return rx_rate_rx_frames_per_rates_read(arg0,arg1,arg2,arg3);
}

#line 621  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_rx_rx_beacon_early_term_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 622 
  return rx_rx_beacon_early_term_read(arg0,arg1,arg2,arg3);
}

#line 626  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_rx_rx_cmplt_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 627 
  return rx_rx_cmplt_read(arg0,arg1,arg2,arg3);
}

#line 631  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_rx_rx_cmplt_task_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 632 
  return rx_rx_cmplt_task_read(arg0,arg1,arg2,arg3);
}

#line 636  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_rx_rx_defrag_end_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 637 
  return rx_rx_defrag_end_read(arg0,arg1,arg2,arg3);
}

#line 641  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_rx_rx_defrag_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 642 
  return rx_rx_defrag_read(arg0,arg1,arg2,arg3);
}

#line 646  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_rx_rx_done_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 647 
  return rx_rx_done_read(arg0,arg1,arg2,arg3);
}

#line 651  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_rx_rx_dropped_frame_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 652 
  return rx_rx_dropped_frame_read(arg0,arg1,arg2,arg3);
}

#line 656  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_rx_rx_hdr_overflow_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 657 
  return rx_rx_hdr_overflow_read(arg0,arg1,arg2,arg3);
}

#line 661  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_rx_rx_out_of_mpdu_nodes_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 662 
  return rx_rx_out_of_mpdu_nodes_read(arg0,arg1,arg2,arg3);
}

#line 666  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_rx_rx_phy_hdr_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 667 
  return rx_rx_phy_hdr_read(arg0,arg1,arg2,arg3);
}

#line 671  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_rx_rx_pre_complt_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 672 
  return rx_rx_pre_complt_read(arg0,arg1,arg2,arg3);
}

#line 676  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_rx_rx_rts_timeout_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 677 
  return rx_rx_rts_timeout_read(arg0,arg1,arg2,arg3);
}

#line 681  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_rx_rx_timeout_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 682 
  return rx_rx_timeout_read(arg0,arg1,arg2,arg3);
}

#line 686  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_rx_rx_timeout_wa_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 687 
  return rx_rx_timeout_wa_read(arg0,arg1,arg2,arg3);
}

#line 691  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_rx_rx_tkip_replays_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 692 
  return rx_rx_tkip_replays_read(arg0,arg1,arg2,arg3);
}

#line 696  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_rx_rx_xfr_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 697 
  return rx_rx_xfr_read(arg0,arg1,arg2,arg3);
}

#line 701  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_thermal_adc_source_unexpected_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 702 
  return thermal_adc_source_unexpected_read(arg0,arg1,arg2,arg3);
}

#line 706  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_thermal_false_irq_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 707 
  return thermal_false_irq_read(arg0,arg1,arg2,arg3);
}

#line 711  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_thermal_irq_thr_high_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 712 
  return thermal_irq_thr_high_read(arg0,arg1,arg2,arg3);
}

#line 716  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_thermal_irq_thr_low_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 717 
  return thermal_irq_thr_low_read(arg0,arg1,arg2,arg3);
}

#line 721  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_thermal_tx_resume_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 722 
  return thermal_tx_resume_read(arg0,arg1,arg2,arg3);
}

#line 726  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_thermal_tx_stop_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 727 
  return thermal_tx_stop_read(arg0,arg1,arg2,arg3);
}

#line 731  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_tx_frag_bad_mblk_num_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 732 
  return tx_frag_bad_mblk_num_read(arg0,arg1,arg2,arg3);
}

#line 736  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_tx_frag_cache_hit_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 737 
  return tx_frag_cache_hit_read(arg0,arg1,arg2,arg3);
}

#line 741  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_tx_frag_cache_miss_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 742 
  return tx_frag_cache_miss_read(arg0,arg1,arg2,arg3);
}

#line 746  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_tx_frag_called_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 747 
  return tx_frag_called_read(arg0,arg1,arg2,arg3);
}

#line 751  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_tx_frag_failed_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 752 
  return tx_frag_failed_read(arg0,arg1,arg2,arg3);
}

#line 756  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_tx_frag_in_process_called_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 757 
  return tx_frag_in_process_called_read(arg0,arg1,arg2,arg3);
}

#line 761  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_tx_frag_init_called_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 762 
  return tx_frag_init_called_read(arg0,arg1,arg2,arg3);
}

#line 766  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_tx_frag_key_not_found_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 767 
  return tx_frag_key_not_found_read(arg0,arg1,arg2,arg3);
}

#line 771  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_tx_frag_mpdu_alloc_failed_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 772 
  return tx_frag_mpdu_alloc_failed_read(arg0,arg1,arg2,arg3);
}

#line 776  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_tx_frag_need_fragmentation_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 777 
  return tx_frag_need_fragmentation_read(arg0,arg1,arg2,arg3);
}

#line 781  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_tx_frag_tkip_called_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 782 
  return tx_frag_tkip_called_read(arg0,arg1,arg2,arg3);
}

#line 786  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_tx_tx_burst_programmed_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 787 
  return tx_tx_burst_programmed_read(arg0,arg1,arg2,arg3);
}

#line 791  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_tx_tx_cfe1_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 792 
  return tx_tx_cfe1_read(arg0,arg1,arg2,arg3);
}

#line 796  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_tx_tx_cfe2_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 797 
  return tx_tx_cfe2_read(arg0,arg1,arg2,arg3);
}

#line 801  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_tx_tx_cmplt_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 802 
  return tx_tx_cmplt_read(arg0,arg1,arg2,arg3);
}

#line 806  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_tx_tx_data_prepared_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 807 
  return tx_tx_data_prepared_read(arg0,arg1,arg2,arg3);
}

#line 811  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_tx_tx_data_programmed_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 812 
  return tx_tx_data_programmed_read(arg0,arg1,arg2,arg3);
}

#line 816  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_tx_tx_done_data_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 817 
  return tx_tx_done_data_read(arg0,arg1,arg2,arg3);
}

#line 821  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_tx_tx_done_int_template_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 822 
  return tx_tx_done_int_template_read(arg0,arg1,arg2,arg3);
}

#line 826  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_tx_tx_done_template_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 827 
  return tx_tx_done_template_read(arg0,arg1,arg2,arg3);
}

#line 831  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_tx_tx_exch_expiry_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 832 
  return tx_tx_exch_expiry_read(arg0,arg1,arg2,arg3);
}

#line 836  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_tx_tx_exch_pending_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 837 
  return tx_tx_exch_pending_read(arg0,arg1,arg2,arg3);
}

#line 841  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_tx_tx_exch_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 842 
  return tx_tx_exch_read(arg0,arg1,arg2,arg3);
}

#line 846  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_tx_tx_prepared_descs_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 847 
  return tx_tx_prepared_descs_read(arg0,arg1,arg2,arg3);
}

#line 851  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_tx_tx_retry_data_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 852 
  return tx_tx_retry_data_read(arg0,arg1,arg2,arg3);
}

#line 856  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_tx_tx_retry_per_rate_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 857 
  return tx_tx_retry_per_rate_read(arg0,arg1,arg2,arg3);
}

#line 861  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_tx_tx_retry_template_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 862 
  return tx_tx_retry_template_read(arg0,arg1,arg2,arg3);
}

#line 866  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_tx_tx_start_data_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 867 
  return tx_tx_start_data_read(arg0,arg1,arg2,arg3);
}

#line 871  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_tx_tx_start_fw_gen_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 872 
  return tx_tx_start_fw_gen_read(arg0,arg1,arg2,arg3);
}

#line 876  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_tx_tx_start_int_templates_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 877 
  return tx_tx_start_int_templates_read(arg0,arg1,arg2,arg3);
}

#line 881  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_tx_tx_start_null_frame_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 882 
  return tx_tx_start_null_frame_read(arg0,arg1,arg2,arg3);
}

#line 886  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_tx_tx_start_templates_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 887 
  return tx_tx_start_templates_read(arg0,arg1,arg2,arg3);
}

#line 891  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_tx_tx_starts_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 892 
  return tx_tx_starts_read(arg0,arg1,arg2,arg3);
}

#line 896  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_tx_tx_stop_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 897 
  return tx_tx_stop_read(arg0,arg1,arg2,arg3);
}

#line 901  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_tx_tx_template_prepared_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 902 
  return tx_tx_template_prepared_read(arg0,arg1,arg2,arg3);
}

#line 906  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
long emg_wrapper_tx_tx_template_programmed_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 907 
  return tx_tx_template_programmed_read(arg0,arg1,arg2,arg3);
}

#line 1265  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
static void *kmalloc(size_t size, gfp_t flags)
{
  #line 1268 
  return ldv_kmalloc(size,flags);
}

#line 1605  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
static void cif_mutex_lock_mutex_of_wl1271(struct mutex *lock)
{
  #line 1608 
  ldv_mutex_model_lock(lock,(char *)"mutex_of_wl1271");
  #line 1609 
  return;
}

#line 1612  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
static void cif_mutex_unlock_mutex_of_wl1271(struct mutex *lock)
{
  #line 1615 
  ldv_mutex_model_unlock(lock,(char *)"mutex_of_wl1271");
  #line 1616 
  return;
}

#line 1619  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
static struct dentry *cif_debugfs_create_dir(char *name, struct dentry *parent)
{
  #line 1623 
  return emg_debugfs_create_dir(name,parent);
}

#line 1627  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
static struct dentry *cif_debugfs_create_file(char *name, umode_t mode, struct dentry *parent, void *data, struct file_operations *fops)
{
  #line 1631 
  return emg_debugfs_create_file(name,(unsigned short)((int)mode),parent,data,
                              fops);
}

/* compiler builtin: 
   void __builtin_unreachable(void);   */
#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 488  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/cmd.i.aux"
static void *kzalloc_1(size_t size, gfp_t flags);
#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/cmd.h"
#line 96 
u8 wlcore_get_native_channel_type(u8);
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/hw_ops.h"
__inline static u32 wlcore_hw_sta_get_ap_rate_mask(struct wl1271 *wl, struct wl12xx_vif *wlvif)
{
  #line 107 
  if ((wl->ops)->sta_get_ap_rate_mask == (u32 (*)(struct wl1271 *, struct wl12xx_vif *))0) {
    #line 109 
    ldv_inline_asm();
    #line 110 
    ldv_inline_asm();
    #line 111 
    ldv_inline_asm();
    #line 108 
    ;
  }
  #line 110 
  return (*((wl->ops)->sta_get_ap_rate_mask))(wl,wlvif);
}

#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/hw_ops.h"
__inline static u32 wlcore_hw_ap_get_mimo_wide_rate_mask(struct wl1271 *wl, struct wl12xx_vif *wlvif)
{
  #line 145 
  if ((wl->ops)->ap_get_mimo_wide_rate_mask != (u32 (*)(struct wl1271 *, struct wl12xx_vif *))0) {
    #line 146 
    return (*((wl->ops)->ap_get_mimo_wide_rate_mask))(wl,wlvif);
  }
  #line 148 
  return 0U;
}

#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/cmd.c"
int wl18xx_cmd_channel_switch(struct wl1271 *wl, struct wl12xx_vif *wlvif, struct ieee80211_channel_switch *ch_switch)
{
  #line 18 
  struct wl18xx_cmd_channel_switch *cmd;
  #line 19 
  u32 supported_rates;
  #line 20 
  int ret;
  #line 22 
  if ((long)((wl12xx_debug_level & 8192U) != 0U) != 0L) {
    #line 22 
    bool branch;
    #line 22 
    struct _ddebug __UNIQUE_ID_ddebug568 = {.modname = (char *)"wl18xx", .function = (char *)"wl18xx_cmd_channel_switch", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/cmd.c", .format = (char *)"wlcore", .lineno = (unsigned int)22U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 22 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug568.key.dd_key_false.key,(_Bool)0);
    #line 22 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 22 
                                                __dynamic_pr_debug(& __UNIQUE_ID_ddebug568,(char *)"wlcore",(int)ch_switch->count);
  }
  #line 25 
  cmd = (struct wl18xx_cmd_channel_switch *)kzalloc_1(16UL,3264U);
  #line 26 
  if (cmd == (struct wl18xx_cmd_channel_switch *)0) {
    #line 27 
    ret = -12;
    #line 28 
    goto out;
  }
  #line 31 
  cmd->role_id = wlvif->role_id;
  #line 32 
  cmd->channel = (unsigned char)(ch_switch->chandef.chan)->hw_value;
  #line 33 
  cmd->switch_time = ch_switch->count;
  #line 34 
  cmd->stop_tx = (unsigned char)ch_switch->block_tx;
  #line 36 
  switch ((unsigned int)(ch_switch->chandef.chan)->band) {
    #line 37 
    case (unsigned int)0: 
                          #line 37 
    ;
    #line 38 
    cmd->band = (unsigned char)0U;
    #line 39 
    break;
    #line 40 
    case (unsigned int)1: 
                          #line 40 
    ;
    #line 41 
    cmd->band = (unsigned char)1U;
    #line 42 
    break;
    #line 43 
    default: 
             #line 43 
    ;
    #line 44 
    printk((char *)"\001",(unsigned int)(ch_switch->chandef.chan)->band);
    #line 46 
    ret = -22;
    #line 47 
    goto out_free;
  }
  #line 50 
  supported_rates = 2096895U;
  #line 51 
  if ((unsigned int)wlvif->bss_type == 2U) {
    #line 52 
    supported_rates = wlcore_hw_sta_get_ap_rate_mask(wl,wlvif) | supported_rates;
  }
  else {
    #line 55 
    supported_rates = wlcore_hw_ap_get_mimo_wide_rate_mask(wl,wlvif) | supported_rates;
  }
  #line 56 
  if ((unsigned int)wlvif->p2p != 0U) 
                                      #line 57 
                                      supported_rates &= 4294967256U;
  #line 58 
  cmd->local_supported_rates = supported_rates;
  #line 59 
  cmd->channel_type = (unsigned char)wlvif->channel_type;
  #line 61 
  ret = wl1271_cmd_send(wl,(unsigned short)20,(void *)cmd,16UL,0UL);
  #line 62 
  if (ret < 0) {
    #line 63 
    printk((char *)"\001");
    #line 64 
    goto out_free;
  }
  #line 67 
  out_free: 
            #line 67 
  ;
  #line 68 
  kfree((void *)cmd);
  #line 69 
  out: 
       #line 69 
  ;
  #line 70 
  return ret;
}

#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/cmd.c"
int wl18xx_cmd_smart_config_start(struct wl1271 *wl, u32 group_bitmap)
{
  #line 75 
  struct wl18xx_cmd_smart_config_start *cmd;
  #line 76 
  int ret = 0;
  #line 78 
  if ((long)((wl12xx_debug_level & 4096U) != 0U) != 0L) {
    #line 78 
    bool branch;
    #line 78 
    struct _ddebug __UNIQUE_ID_ddebug569 = {.modname = (char *)"wl18xx", .function = (char *)"wl18xx_cmd_smart_config_start", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/cmd.c", .format = (char *)"wlcore", .lineno = (unsigned int)78U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 78 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug569.key.dd_key_false.key,(_Bool)0);
    #line 78 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 78 
                                                __dynamic_pr_debug(& __UNIQUE_ID_ddebug569,(char *)"wlcore",group_bitmap);
  }
  #line 81 
  cmd = (struct wl18xx_cmd_smart_config_start *)kzalloc_1(8UL,3264U);
  #line 82 
  if (cmd == (struct wl18xx_cmd_smart_config_start *)0) {
    #line 83 
    ret = -12;
    #line 84 
    goto out;
  }
  #line 87 
  cmd->group_id_bitmask = group_bitmap;
  #line 89 
  ret = wl1271_cmd_send(wl,(unsigned short)61,(void *)cmd,8UL,0UL);
  #line 90 
  if (ret < 0) {
    #line 91 
    printk((char *)"\001");
    #line 92 
    goto out_free;
  }
  #line 95 
  out_free: 
            #line 95 
  ;
  #line 96 
  kfree((void *)cmd);
  #line 97 
  out: 
       #line 97 
  ;
  #line 98 
  return ret;
}

#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/cmd.c"
int wl18xx_cmd_smart_config_stop(struct wl1271 *wl)
{
  #line 103 
  struct wl1271_cmd_header *cmd;
  #line 104 
  int ret = 0;
  #line 106 
  if ((long)((wl12xx_debug_level & 4096U) != 0U) != 0L) {
    #line 106 
    bool branch;
    #line 106 
    struct _ddebug __UNIQUE_ID_ddebug570 = {.modname = (char *)"wl18xx", .function = (char *)"wl18xx_cmd_smart_config_stop", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/cmd.c", .format = (char *)"wlcore", .lineno = (unsigned int)106U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 106 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug570.key.dd_key_false.key,(_Bool)0);
    #line 106 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 106 
                                                __dynamic_pr_debug(& __UNIQUE_ID_ddebug570,(char *)"wlcore");
  }
  #line 108 
  cmd = (struct wl1271_cmd_header *)kzalloc_1(4UL,3264U);
  #line 109 
  if (cmd == (struct wl1271_cmd_header *)0) {
    #line 110 
    ret = -12;
    #line 111 
    goto out;
  }
  #line 114 
  ret = wl1271_cmd_send(wl,(unsigned short)62,(void *)cmd,4UL,0UL);
  #line 115 
  if (ret < 0) {
    #line 116 
    printk((char *)"\001");
    #line 117 
    goto out_free;
  }
  #line 120 
  out_free: 
            #line 120 
  ;
  #line 121 
  kfree((void *)cmd);
  #line 122 
  out: 
       #line 122 
  ;
  #line 123 
  return ret;
}

#line 126  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/cmd.c"
int wl18xx_cmd_smart_config_set_group_key(struct wl1271 *wl, u16 group_id, u8 key_len, u8 *key)
{
  #line 129 
  struct wl18xx_cmd_smart_config_set_group_key *cmd;
  #line 130 
  int ret = 0;
  #line 132 
  if ((long)((wl12xx_debug_level & 4096U) != 0U) != 0L) {
    #line 132 
    bool branch;
    #line 132 
    struct _ddebug __UNIQUE_ID_ddebug571 = {.modname = (char *)"wl18xx", .function = (char *)"wl18xx_cmd_smart_config_set_group_key", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/cmd.c", .format = (char *)"wlcore", .lineno = (unsigned int)132U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 132 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug571.key.dd_key_false.key,(_Bool)0);
    #line 132 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 132 
                                                __dynamic_pr_debug(& __UNIQUE_ID_ddebug571,(char *)"wlcore",(int)group_id);
  }
  #line 135 
  if ((unsigned int)key_len != 16U) {
    #line 136 
    printk((char *)"\001",(int)key_len);
    #line 137 
    return -7;
  }
  #line 140 
  cmd = (struct wl18xx_cmd_smart_config_set_group_key *)kzalloc_1(24UL,3264U);
  #line 141 
  if (cmd == (struct wl18xx_cmd_smart_config_set_group_key *)0) {
    #line 142 
    ret = -12;
    #line 143 
    goto out;
  }
  #line 146 
  cmd->group_id = (unsigned int)group_id;
  #line 147 
  memcpy((void *)(& cmd->key),(void *)key,(unsigned long)key_len);
  #line 149 
  ret = wl1271_cmd_send(wl,(unsigned short)63,(void *)cmd,24UL,0UL);
  #line 151 
  if (ret < 0) {
    #line 152 
    printk((char *)"\001");
    #line 153 
    goto out_free;
  }
  #line 156 
  out_free: 
            #line 156 
  ;
  #line 157 
  kfree((void *)cmd);
  #line 158 
  out: 
       #line 158 
  ;
  #line 159 
  return ret;
}

#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/cmd.c"
int wl18xx_cmd_set_cac(struct wl1271 *wl, struct wl12xx_vif *wlvif, bool start)
{
  #line 164 
  struct wlcore_cmd_cac_start *cmd;
  #line 180 
  int tmp_2;
  #line 165 
  int ret = 0;
  #line 167 
  if ((long)((wl12xx_debug_level & 4096U) != 0U) != 0L) {
    #line 167 
    bool branch;
    #line 167 
    struct _ddebug __UNIQUE_ID_ddebug572 = {.modname = (char *)"wl18xx", .function = (char *)"wl18xx_cmd_set_cac", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/cmd.c", .format = (char *)"wlcore", .lineno = (unsigned int)167U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 167 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug572.key.dd_key_false.key,(_Bool)0);
    #line 167 
    if ((long)((long)((int)branch != 0)) != 0L) {
      #line 167 
      char *tmp;
      #line 167 
      if ((int)start != 0) 
                           #line 167 
                           tmp = (char *)"start"; else 
                                                       #line 167 
                                                       tmp = (char *)"stop";
      #line 167 
      ;
      #line 167 
      __dynamic_pr_debug(& __UNIQUE_ID_ddebug572,(char *)"wlcore",wlvif->channel,tmp);
    }
  }
  #line 170 
  cmd = (struct wlcore_cmd_cac_start *)kzalloc_1(8UL,3264U);
  #line 171 
  if (cmd == (struct wlcore_cmd_cac_start *)0) 
                                               #line 172 
                                               return -12;
  #line 174 
  cmd->role_id = wlvif->role_id;
  #line 175 
  cmd->channel = (unsigned char)wlvif->channel;
  #line 176 
  if (wlvif->band == (unsigned int)NL80211_BAND_5GHZ) 
                                                      #line 177 
                                                      cmd->band = (unsigned char)1U;
  #line 178 
  cmd->bandwidth = wlcore_get_native_channel_type((unsigned char)((int)((unsigned char)wlvif->channel_type)));
  #line 180 
  ;
  #line 180 
  if ((int)start != 0) 
                       #line 180 
                       tmp_2 = 64; else 
                                        #line 180 
                                        tmp_2 = 65;
  #line 180 
  ;
  #line 180 
  ret = wl1271_cmd_send(wl,(unsigned short)tmp_2,(void *)cmd,8UL,0UL);
  #line 183 
  if (ret < 0) {
    #line 184 
    printk((char *)"\001");
    #line 185 
    goto out_free;
  }
  #line 188 
  out_free: 
            #line 188 
  ;
  #line 189 
  kfree((void *)cmd);
  #line 190 
  return ret;
}

#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/cmd.c"
int wl18xx_cmd_radar_detection_debug(struct wl1271 *wl, u8 channel)
{
  #line 195 
  struct wl18xx_cmd_dfs_radar_debug *cmd;
  #line 196 
  int ret = 0;
  #line 198 
  if ((long)((wl12xx_debug_level & 4096U) != 0U) != 0L) {
    #line 198 
    bool branch;
    #line 198 
    struct _ddebug __UNIQUE_ID_ddebug573 = {.modname = (char *)"wl18xx", .function = (char *)"wl18xx_cmd_radar_detection_debug", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/cmd.c", .format = (char *)"wlcore", .lineno = (unsigned int)198U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 198 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug573.key.dd_key_false.key,(_Bool)0);
    #line 198 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 198 
                                                __dynamic_pr_debug(& __UNIQUE_ID_ddebug573,(char *)"wlcore",(int)channel);
  }
  #line 201 
  cmd = (struct wl18xx_cmd_dfs_radar_debug *)kzalloc_1(8UL,3264U);
  #line 202 
  if (cmd == (struct wl18xx_cmd_dfs_radar_debug *)0) 
                                                     #line 203 
                                                     return -12;
  #line 205 
  cmd->channel = channel;
  #line 207 
  ret = wl1271_cmd_send(wl,(unsigned short)67,(void *)cmd,8UL,0UL);
  #line 209 
  if (ret < 0) {
    #line 210 
    printk((char *)"\001");
    #line 211 
    goto out_free;
  }
  #line 214 
  out_free: 
            #line 214 
  ;
  #line 215 
  kfree((void *)cmd);
  #line 216 
  return ret;
}

#line 219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/cmd.c"
int wl18xx_cmd_dfs_master_restart(struct wl1271 *wl, struct wl12xx_vif *wlvif)
{
  #line 221 
  struct wl18xx_cmd_dfs_master_restart *cmd;
  #line 222 
  int ret = 0;
  #line 224 
  if ((long)((wl12xx_debug_level & 4096U) != 0U) != 0L) {
    #line 224 
    bool branch;
    #line 224 
    struct _ddebug __UNIQUE_ID_ddebug574 = {.modname = (char *)"wl18xx", .function = (char *)"wl18xx_cmd_dfs_master_restart", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/cmd.c", .format = (char *)"wlcore", .lineno = (unsigned int)224U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 224 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug574.key.dd_key_false.key,(_Bool)0);
    #line 224 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 224 
                                                __dynamic_pr_debug(& __UNIQUE_ID_ddebug574,(char *)"wlcore",(int)wlvif->role_id);
  }
  #line 227 
  cmd = (struct wl18xx_cmd_dfs_master_restart *)kzalloc_1(8UL,3264U);
  #line 228 
  if (cmd == (struct wl18xx_cmd_dfs_master_restart *)0) 
                                                        #line 229 
                                                        return -12;
  #line 231 
  cmd->role_id = wlvif->role_id;
  #line 233 
  ret = wl1271_cmd_send(wl,(unsigned short)66,(void *)cmd,8UL,0UL);
  #line 235 
  if (ret < 0) {
    #line 236 
    printk((char *)"\001");
    #line 237 
    goto out_free;
  }
  #line 239 
  out_free: 
            #line 239 
  ;
  #line 240 
  kfree((void *)cmd);
  #line 241 
  return ret;
}

#line 488  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/0/concurrency safety/weaver/cmd.i.aux"
static void *kzalloc_1(size_t size, gfp_t flags)
{
  #line 491 
  return ldv_kzalloc(size,flags);
}

#line 1019  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
#line 1019 
void kfree_skb(struct sk_buff *);
#line 460  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
#line 460 
int nla_put(struct sk_buff *, int, int, void *);
#line 1242  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
__inline static int nla_put_u32(struct sk_buff *skb, int attrtype, u32 value)
{
  #line 1244 
  u32 tmp = value;
  #line 1246 
  return nla_put(skb,attrtype,4,(void *)(& tmp));
}

#line 5027  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
#line 5027 
int ieee80211_channel_to_frequency(int, enum nl80211_band);
#line 6121 
#line 6121 
struct sk_buff *__cfg80211_alloc_event_skb(struct wiphy *, struct wireless_dev *, enum nl80211_commands, enum nl80211_attrs, unsigned int, int, int, gfp_t);
#line 6129 
#line 6129 
void __cfg80211_send_event_skb(struct sk_buff *, gfp_t);
#line 6206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
__inline static struct sk_buff *cfg80211_vendor_event_alloc(struct wiphy *wiphy, struct wireless_dev *wdev, int approxlen, int event_idx, gfp_t gfp)
{
  #line 6209 
  return __cfg80211_alloc_event_skb(wiphy,wdev,
                                 (enum nl80211_commands)NL80211_CMD_VENDOR,
                                 (enum nl80211_attrs)NL80211_ATTR_VENDOR_DATA,
                                 0U,event_idx,approxlen,gfp);
}

#line 6257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
__inline static void cfg80211_vendor_event(struct sk_buff *skb, gfp_t gfp)
{
  #line 6259 
  __cfg80211_send_event_skb(skb,gfp);
  #line 6260 
  return;
}

#line 5452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
#line 5452 
struct ieee80211_sta *ieee80211_find_sta(struct ieee80211_vif *, u8 *);
#line 5771 
#line 5771 
void ieee80211_radar_detected(struct ieee80211_hw *);
#line 5821 
#line 5821 
void ieee80211_stop_rx_ba_session(struct ieee80211_vif *, u16, u8 *);
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/event.h"
#line 67 
void wlcore_event_sched_scan_completed(struct wl1271 *, u8);
#line 69 
#line 69 
void wlcore_event_ba_rx_constraint(struct wl1271 *, unsigned long, unsigned long);
#line 72 
#line 72 
void wlcore_event_channel_switch(struct wl1271 *, unsigned long, bool);
#line 75 
#line 75 
void wlcore_event_beacon_loss(struct wl1271 *, unsigned long);
#line 76 
#line 76 
void wlcore_event_dummy_packet(struct wl1271 *);
#line 77 
#line 77 
void wlcore_event_max_tx_failure(struct wl1271 *, unsigned long);
#line 78 
#line 78 
void wlcore_event_inactive_sta(struct wl1271 *, unsigned long);
#line 79 
#line 79 
void wlcore_event_roc_complete(struct wl1271 *);
#line 80 
#line 80 
void wlcore_event_rssi_trigger(struct wl1271 *, s8 *);
#line 81 
#line 81 
int wlcore_event_fw_logger(struct wl1271 *);
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/cmd.h"
#line 94 
int wlcore_cmd_wait_for_event_or_timeout(struct wl1271 *, u32, bool *);
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wlcore/scan.h"
#line 28 
void wlcore_scan_sched_scan_results(struct wl1271 *);
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/event.c"
int wl18xx_wait_for_event(struct wl1271 *wl, enum wlcore_wait_event event, bool *timeout)
{
  #line 19 
  u32 local_event;
  #line 21 
  switch ((unsigned int)event) {
    #line 22 
    case (unsigned int)1: 
                          #line 22 
    ;
    #line 23 
    local_event = 32768U;
    #line 24 
    break;
    #line 26 
    case (unsigned int)2: 
                          #line 26 
    ;
    #line 27 
    local_event = 524288U;
    #line 28 
    break;
    #line 30 
    default: 
             #line 30 
    ;
    #line 32 
    return 0;
  }
  #line 34 
  return wlcore_cmd_wait_for_event_or_timeout(wl,local_event,timeout);
}

#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/event.c"
static char *wl18xx_radar_type_decode(u8 radar_type)
{
  #line 39 
  switch ((int)radar_type) {
    #line 40 
    case 1: 
            #line 40 
    ;
    #line 41 
    return (char *)"REGULAR";
    #line 42 
    case 2: 
            #line 42 
    ;
    #line 43 
    return (char *)"CHIRP";
    #line 44 
    case 0: 
            #line 44 
    ;
    #line 45 
    default: 
             #line 45 
    ;
    #line 46 
    return (char *)"N/A";
  }
}

#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/event.c"
static int wlcore_smart_config_sync_event(struct wl1271 *wl, u8 sync_channel, u8 sync_band)
{
  #line 53 
  struct sk_buff *skb;
  #line 54 
  enum nl80211_band band;
  #line 55 
  int freq;
  #line 57 
  if ((unsigned int)sync_band == 1U) 
                                     #line 58 
                                     band = NL80211_BAND_5GHZ; else 
                                                                    #line 60 
                                                                    band = NL80211_BAND_2GHZ;
  #line 62 
  freq = ieee80211_channel_to_frequency((int)sync_channel,band);
  #line 64 
  if ((long)((wl12xx_debug_level & 32U) != 0U) != 0L) {
    #line 64 
    bool branch;
    #line 64 
    struct _ddebug __UNIQUE_ID_ddebug558 = {.modname = (char *)"wl18xx", .function = (char *)"wlcore_smart_config_sync_event", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/event.c", .format = (char *)"wlcore", .lineno = (unsigned int)64U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 64 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug558.key.dd_key_false.key,(_Bool)0);
    #line 64 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 64 
                                                __dynamic_pr_debug(& __UNIQUE_ID_ddebug558,(char *)"wlcore",freq,(int)sync_channel,(int)sync_band);
  }
  #line 67 
  skb = cfg80211_vendor_event_alloc((wl->hw)->wiphy,(struct wireless_dev *)0,20,0,3264U);
  #line 71 
  if (nla_put_u32(skb,0,(unsigned int)freq) != 0) {
    #line 72 
    kfree_skb(skb);
    #line 73 
    return -90;
  }
  #line 75 
  cfg80211_vendor_event(skb,3264U);
  #line 76 
  return 0;
}

#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/event.c"
static int wlcore_smart_config_decode_event(struct wl1271 *wl, u8 ssid_len, u8 *ssid, u8 pwd_len, u8 *pwd)
{
  #line 83 
  struct sk_buff *skb;
  #line 85 
  if ((long)((wl12xx_debug_level & 32U) != 0U) != 0L) {
    #line 85 
    bool branch;
    #line 85 
    struct _ddebug __UNIQUE_ID_ddebug559 = {.modname = (char *)"wl18xx", .function = (char *)"wlcore_smart_config_decode_event", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/event.c", .format = (char *)"wlcore", .lineno = (unsigned int)85U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 85 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug559.key.dd_key_false.key,(_Bool)0);
    #line 85 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 85 
                                                __dynamic_pr_debug(& __UNIQUE_ID_ddebug559,(char *)"wlcore");
  }
  #line 86 
  if ((wl12xx_debug_level & 32U) != 0U) {
    #line 86 
    bool branch_0;
    #line 86 
    struct _ddebug __UNIQUE_ID_ddebug562 = {.modname = (char *)"wl18xx", .function = (char *)"wlcore_smart_config_decode_event", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/event.c", .format = (char *)"wlcore", .lineno = (unsigned int)86U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 86 
    branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug562.key.dd_key_false.key,(_Bool)0);
    #line 86 
    if ((long)((long)((int)branch_0 != 0)) != 0L) {
      #line 86 
      unsigned long __UNIQUE_ID___x560;
      #line 86 
      unsigned long tmp_0;
      {
        #line 86 
        __UNIQUE_ID___x560 = (unsigned long)ssid_len;
        #line 86 
        unsigned long __UNIQUE_ID___y561 = 1024UL;
        #line 86 
        if (__UNIQUE_ID___x560 < __UNIQUE_ID___y561) 
                                                     #line 86 
                                                     tmp_0 = __UNIQUE_ID___x560; else 
                                                                    #line 86 
                                                                    tmp_0 = __UNIQUE_ID___y561;
        }
      #line 86 
      ;
      #line 86 
      print_hex_dump((char *)"\001",(char *)"wlcore",2,16,1,(void *)ssid,tmp_0,(_Bool)1);
    }
  }
  #line 88 
  skb = cfg80211_vendor_event_alloc((wl->hw)->wiphy,(struct wireless_dev *)0,((int)ssid_len + (int)pwd_len) + 20,1,3264U);
  #line 93 
  if (nla_put(skb,2,(int)ssid_len,(void *)ssid) != 0) 
                                                      #line 93 
                                                      goto _LOR;
  else {
    #line 93 
    if (nla_put(skb,1,(int)pwd_len,(void *)pwd) != 0) {
      #line 93 
      _LOR: {
              #line 95 
              kfree_skb(skb);
              #line 96 
              return -90;
            }
    }
  }
  #line 98 
  cfg80211_vendor_event(skb,3264U);
  #line 99 
  return 0;
}

#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/event.c"
static void wlcore_event_time_sync(struct wl1271 *wl, u16 tsf_high_msb, u16 tsf_high_lsb, u16 tsf_low_msb, u16 tsf_low_lsb)
{
  #line 106 
  u32 clock_low;
  #line 107 
  u32 clock_high;
  #line 109 
  clock_high = (unsigned int)(((int)tsf_high_msb << 16) | (int)tsf_high_lsb);
  #line 110 
  clock_low = (unsigned int)(((int)tsf_low_msb << 16) | (int)tsf_low_lsb);
  #line 112 
  printk((char *)"\001",clock_high,clock_low);
  #line 113 
  return;
}

#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/event.c"
int wl18xx_process_mailbox_events(struct wl1271 *wl)
{
  #line 119 
  u32 vector;
  #line 118 
  struct wl18xx_event_mailbox *mbox = (struct wl18xx_event_mailbox *)wl->mbox;
  #line 121 
  vector = mbox->events_vector;
  #line 122 
  if ((long)((wl12xx_debug_level & 32U) != 0U) != 0L) {
    #line 122 
    bool branch;
    #line 122 
    struct _ddebug __UNIQUE_ID_ddebug563 = {.modname = (char *)"wl18xx", .function = (char *)"wl18xx_process_mailbox_events", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/event.c", .format = (char *)"wlcore", .lineno = (unsigned int)122U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 122 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug563.key.dd_key_false.key,(_Bool)0);
    #line 122 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 122 
                                                __dynamic_pr_debug(& __UNIQUE_ID_ddebug563,(char *)"wlcore",vector);
  }
  #line 124 
  if ((vector & 256U) != 0U) {
    #line 125 
    if ((long)((wl12xx_debug_level & 32U) != 0U) != 0L) {
      #line 125 
      bool branch_0;
      #line 125 
      struct _ddebug __UNIQUE_ID_ddebug564 = {.modname = (char *)"wl18xx", .function = (char *)"wl18xx_process_mailbox_events", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/event.c", .format = (char *)"wlcore", .lineno = (unsigned int)125U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 125 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug564.key.dd_key_false.key,(_Bool)0);
      #line 125 
      if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                    #line 125 
                                                    __dynamic_pr_debug(& __UNIQUE_ID_ddebug564,(char *)"wlcore",(int)mbox->number_of_scan_results);
    }
    #line 128 
    if (wl->scan_wlvif != (struct wl12xx_vif *)0) 
                                                  #line 129 
                                                  wl18xx_scan_completed(wl,wl->scan_wlvif);
  }
  #line 132 
  if ((vector & 16777216U) != 0U) 
                                  #line 133 
                                  wlcore_event_time_sync(wl,(unsigned short)((int)mbox->time_sync_tsf_high_msb),(unsigned short)((int)mbox->time_sync_tsf_high_lsb),(unsigned short)((int)mbox->time_sync_tsf_low_msb),(unsigned short)((int)mbox->time_sync_tsf_low_lsb));
  #line 139 
  if ((vector & 512U) != 0U) {
    #line 140 
    ;
    #line 140 
    printk((char *)"\001",(int)mbox->radar_channel,wl18xx_radar_type_decode((unsigned char)((int)mbox->radar_type)));
    #line 144 
    if (! wl->radar_debug_mode) 
                                #line 145 
                                ieee80211_radar_detected(wl->hw);
  }
  #line 148 
  if ((vector & 1048576U) != 0U) {
    #line 149 
    if ((long)((wl12xx_debug_level & 32U) != 0U) != 0L) {
      #line 149 
      bool branch_1;
      #line 149 
      struct _ddebug __UNIQUE_ID_ddebug565 = {.modname = (char *)"wl18xx", .function = (char *)"wl18xx_process_mailbox_events", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ti/wl18xx/event.c", .format = (char *)"wlcore", .lineno = (unsigned int)149U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 149 
      branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug565.key.dd_key_false.key,(_Bool)0);
      #line 149 
      if ((long)((long)((int)branch_1 != 0)) != 0L) 
                                                    #line 149 
                                                    __dynamic_pr_debug(& __UNIQUE_ID_ddebug565,(char *)"wlcore",(int)mbox->number_of_sched_scan_results);
    }
    #line 153 
    wlcore_scan_sched_scan_results(wl);
  }
  #line 156 
  if ((vector & 65536U) != 0U) 
                               #line 157 
                               wlcore_event_sched_scan_completed(wl,(unsigned char)1);
  #line 159 
  if ((vector & 1U) != 0U) 
                           #line 160 
                           wlcore_event_rssi_trigger(wl,(s8 *)(& mbox->rssi_snr_trigger_metric));
  #line 162 
  if ((vector & 131072U) != 0U) 
                                #line 163 
                                wlcore_event_ba_rx_constraint(wl,(unsigned long)mbox->rx_ba_role_id_bitmap,(unsigned long)mbox->rx_ba_allowed_bitmap);
  #line 167 
  if ((vector & 2048U) != 0U) 
                              #line 168 
                              wlcore_event_beacon_loss(wl,(unsigned long)mbox->bss_loss_bitmap);
  #line 171 
  if ((vector & 1024U) != 0U) 
                              #line 172 
                              wlcore_event_channel_switch(wl,(unsigned long)mbox->channel_switch_role_id_bitmap,(_Bool)1);
  #line 176 
  if ((vector & 8192U) != 0U) 
                              #line 177 
                              wlcore_event_dummy_packet(wl);
  #line 183 
  if ((vector & 4096U) != 0U) 
                              #line 184 
                              wlcore_event_max_tx_failure(wl,(unsigned long)mbox->tx_retry_exceeded_bitmap);
  #line 187 
  if ((vector & 16384U) != 0U) 
                               #line 188 
                               wlcore_event_inactive_sta(wl,(unsigned long)mbox->inactive_sta_bitmap);
  #line 191 
  if ((vector & 262144U) != 0U) 
                                #line 192 
                                wlcore_event_roc_complete(wl);
  #line 194 
  if ((vector & 4194304U) != 0U) 
                                 #line 195 
                                 wlcore_smart_config_sync_event(wl,(unsigned char)((int)mbox->sc_sync_channel),(unsigned char)((int)mbox->sc_sync_band));
  #line 198 
  if ((vector & 8388608U) != 0U) 
                                 #line 199 
                                 wlcore_smart_config_decode_event(wl,(unsigned char)((int)mbox->sc_ssid_len),(u8 *)(& mbox->sc_ssid),(unsigned char)((int)mbox->sc_pwd_len),(u8 *)(& mbox->sc_pwd));
  #line 204 
  if ((vector & 33554432U) != 0U) 
                                  #line 205 
                                  wlcore_event_fw_logger(wl);
  #line 207 
  if ((vector & 2097152U) != 0U) {
    #line 208 
    struct wl12xx_vif *wlvif;
    #line 209 
    struct ieee80211_vif *vif;
    #line 210 
    struct ieee80211_sta *sta;
    #line 213 
    u8 *addr;
    #line 211 
    u8 link_id = mbox->rx_ba_link_id;
    #line 212 
    u8 win_size = mbox->rx_ba_win_size;
    #line 215 
    wlvif = wl->links[(int)link_id].wlvif;
    #line 216 
    vif = wl12xx_wlvif_to_vif(wlvif);
    #line 221 
    if ((unsigned int)wlvif->bss_type != 3U) 
                                             #line 222 
                                             addr = vif->bss_conf.bssid; else 
                                                                    #line 224 
                                                                    addr = (u8 *)(& wl->links[(int)link_id].addr);
    #line 226 
    sta = ieee80211_find_sta(vif,addr);
    #line 227 
    if (sta != (struct ieee80211_sta *)0) {
      #line 228 
      sta->max_rx_aggregation_subframes = (unsigned short)win_size;
      #line 229 
      ieee80211_stop_rx_ba_session(vif,(unsigned short)((int)wl->links[(int)link_id].ba_bitmap),addr);
    }
  }
  #line 235 
  return 0;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/common/inline_asm.c"
void ldv_inline_asm(void)
{
  #line 24 
  return;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_add(int i, atomic_t *v)
{
  #line 22 
  v->counter += i;
  #line 23 
  return;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_sub(int i, atomic_t *v)
{
  #line 27 
  v->counter -= i;
  #line 28 
  return;
}

#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_sub_and_test(int i, atomic_t *v)
{
  #line 32 
  v->counter -= i;
  #line 33 
  if (v->counter != 0) 
                       #line 34 
                       return 0;
  #line 36 
  return 1;
}

#line 39  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_inc(atomic_t *v)
{
  #line 41 
  (v->counter) ++;
  #line 42 
  return;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_dec(atomic_t *v)
{
  #line 46 
  (v->counter) --;
  #line 47 
  return;
}

#line 49  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_dec_and_test(atomic_t *v)
{
  #line 51 
  (v->counter) --;
  #line 52 
  if (v->counter != 0) 
                       #line 53 
                       return 0;
  #line 55 
  return 1;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_and_test(atomic_t *v)
{
  #line 60 
  (v->counter) ++;
  #line 61 
  if (v->counter != 0) 
                       #line 62 
                       return 0;
  #line 64 
  return 1;
}

#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_return(int i, atomic_t *v)
{
  #line 69 
  v->counter += i;
  #line 70 
  return v->counter;
}

#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_negative(int i, atomic_t *v)
{
  #line 75 
  v->counter += i;
  #line 76 
  return v->counter < 0;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_short(short *v)
{
  #line 81 
  *v = (short)((unsigned int)*v + 1U);
  #line 82 
  return (int)*v;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
static struct task_struct ldv_current;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
struct task_struct *ldv_get_current(void)
{
  #line 28 
  ldv_current.pid = 1;
  #line 29 
  return & ldv_current;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void);
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void);
#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void);
#line 112  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val);
#line 132  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val);
#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 133 
void ldv_check_return_value_probe(int);
#line 141 
#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 23 
void __VERIFIER_assume(int);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static bool __ldv_in_interrupt_context = (_Bool)0;
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void)
{
  #line 31 
  __ldv_in_interrupt_context = (_Bool)1;
  #line 32 
  return;
}

#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void)
{
  #line 37 
  __ldv_in_interrupt_context = (_Bool)0;
  #line 38 
  return;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void)
{
  #line 42 
  return __ldv_in_interrupt_context;
}

#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static int ldv_filter_positive_int(int val)
{
  #line 47 
  __VERIFIER_assume(val <= 0);
  #line 48 
  return val;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val)
{
  #line 57 
  return ldv_filter_positive_int(init_ret_val);
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val)
{
  #line 63 
  ldv_check_return_value_probe(probe_ret_val);
  #line 64 
  return ldv_filter_positive_int(probe_ret_val);
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val)
{
  #line 70 
  return ldv_filter_positive_int(ret_val);
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/list.h"
#line 28 
void ldv_save_allocated_memory_to_list(void *);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data);
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 57 
void *ldv_xzalloc(size_t size);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev)
{
  #line 31 
  if (dev != (struct device *)0 && dev->p != (struct device_private *)0) 
    #line 32 
    return (dev->p)->driver_data;
  #line 34 
  return (void *)0;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data)
{
  #line 45 
  dev->p = (struct device_private *)ldv_xzalloc(8UL);
  #line 46 
  ldv_save_allocated_memory_to_list((void *)dev->p);
  #line 47 
  (dev->p)->driver_data = data;
  #line 49 
  return 0;
}

#line 156  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 156 
void ldv_check_alloc_flags(gfp_t);
#line 48  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 48 
void *ldv_malloc(size_t size);
#line 49 
#line 49 
void *ldv_calloc(size_t nmemb, size_t size);
#line 50 
#line 50 
void *ldv_zalloc(size_t size);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc(size_t size, gfp_t flags)
{
  #line 26 
  void *res;
  #line 28 
  ldv_check_alloc_flags(flags);
  #line 29 
  res = ldv_malloc(size);
  #line 30 
  ldv_save_allocated_memory_to_list(res);
  #line 32 
  return res;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kzalloc(size_t size, gfp_t flags)
{
  #line 37 
  void *res;
  #line 39 
  ldv_check_alloc_flags(flags);
  #line 40 
  res = ldv_zalloc(size);
  #line 41 
  ldv_save_allocated_memory_to_list(res);
  #line 43 
  return res;
}

#line 46  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 48 
  void *res;
  #line 50 
  ldv_check_alloc_flags(flags);
  #line 51 
  res = ldv_malloc(n * size);
  #line 52 
  ldv_save_allocated_memory_to_list(res);
  #line 54 
  return res;
}

#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 59 
  void *res;
  #line 61 
  ldv_check_alloc_flags(flags);
  #line 62 
  res = ldv_calloc(n,size);
  #line 63 
  ldv_save_allocated_memory_to_list(res);
  #line 65 
  return res;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 51 
void ldv_free(void *s);
#line 59 
#line 59 
void *ldv_malloc_unknown_size(void);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 31 
int ldv_undef_int_positive(void);
#line 40 
#line 40 
int ldv_undef_int_nonpositive(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
int ldv_request_firmware(struct firmware **fw)
{
  #line 27 
  int retval;
  #line 26 
  struct firmware *_fw = (struct firmware *)0;
  #line 29 
  retval = ldv_undef_int_nonpositive();
  #line 31 
  if (retval == 0) {
    #line 33 
    _fw = (struct firmware *)ldv_xzalloc(32UL);
    #line 34 
    _fw->data = (u8 *)ldv_malloc_unknown_size();
    #line 35 
    __VERIFIER_assume(_fw->data != (u8 *)0U);
    #line 36 
    _fw->size = (unsigned long)ldv_undef_int_positive();
  }
  #line 39 
  *fw = _fw;
  #line 41 
  return retval;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
void ldv_release_firmware(struct firmware *fw)
{
  #line 46 
  if (fw != (struct firmware *)0) {
    #line 48 
    ldv_free((void *)fw->data);
    #line 49 
    ldv_free((void *)fw);
  }
  #line 51 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/i2c.h"
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values);
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 55 
void *ldv_xmalloc(size_t size);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 23 
int ldv_undef_int(void);
#line 34 
#line 34 
int ldv_undef_int_negative(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values)
{
  #line 27 
  __u8 size;
  #line 28 
  char *bytes;
  #line 30 
  if (ldv_undef_int() != 0) {
    #line 33 
    size = (unsigned char)ldv_undef_int_positive();
    #line 35 
    __VERIFIER_assume((unsigned int)size <= 32U);
    #line 37 
    bytes = (char *)ldv_xmalloc((unsigned long)size);
    #line 39 
    memcpy((void *)values,(void *)bytes,(unsigned long)size);
    #line 40 
    ldv_free((void *)bytes);
    #line 42 
    return (int)size;
  }
  else {
    #line 46 
    return ldv_undef_int_negative();
  }
}

#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
__inline static void v4l2_set_subdevdata(struct v4l2_subdev *sd, void *p)
{
  #line 990 
  sd->dev_priv = p;
  #line 991 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/media/v4l2-common.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops)
{
  #line 26 
  sd->ops = ops;
  #line 27 
  v4l2_set_subdevdata(sd,(void *)client);
  #line 28 
  ldv_dev_set_drvdata(& client->dev,(void *)sd);
  #line 29 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/spi.c"
struct spi_controller *ldv_spi_alloc_master(struct device *host, unsigned int size)
{
  #line 25 
  struct spi_controller *master;
  #line 27 
  master = (struct spi_controller *)ldv_zalloc((unsigned long)size + 2936UL);
  #line 29 
  if (master == (struct spi_controller *)0) 
                                            #line 30 
                                            return (struct spi_controller *)0;
  #line 32 
  ldv_dev_set_drvdata(& master->dev,(void *)(master + 1U));
  #line 34 
  return master;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size)
{
  #line 25 
  struct fb_info *info;
  #line 27 
  info = (struct fb_info *)ldv_zalloc(size + 1568UL);
  #line 29 
  if (info == (struct fb_info *)0) 
                                   #line 30 
                                   return (struct fb_info *)0;
  #line 32 
  if (size != 0UL) 
                   #line 33 
                   info->par = (void *)((char *)info + 1568UL);
  #line 35 
  return info;
}

#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info)
{
  #line 40 
  if (info == (struct fb_info *)0) 
                                   #line 41 
                                   return;
  #line 44 
  ldv_free((void *)info->apertures);
  #line 46 
  ldv_free((void *)info);
  #line 47 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err_or_null(void *ptr);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err(void *ptr)
{
  #line 29 
  if ((unsigned long)ptr > 18446744073709547520UL) 
                                                   #line 30 
                                                   return (_Bool)1; else 
                                                                    #line 32 
                                                                    return (_Bool)0;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error)
{
  #line 37 
  unsigned long result;
  #line 39 
  __VERIFIER_assume(error < 0L);
  #line 40 
  __VERIFIER_assume(error >= -4095L);
  #line 41 
  result = 18446744073709547520UL - (unsigned long)error;
  #line 42 
  __VERIFIER_assume(result > 18446744073709547520UL);
  #line 44 
  return (void *)result;
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_ptr_err(void *ptr)
{
  #line 49 
  long result;
  #line 51 
  __VERIFIER_assume((unsigned long)ptr > 18446744073709547520UL);
  #line 52 
  result = (long)(18446744073709547520UL - (unsigned long)ptr);
  #line 53 
  __VERIFIER_assume(result < 0L);
  #line 54 
  __VERIFIER_assume(result >= -4095L);
  #line 56 
  return result;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err_or_null(void *ptr)
{
  #line 61 
  int tmp_0;
  #line 61 
  if (ptr == (void *)0) 
                        #line 61 
                        tmp_0 = 1;
  else {
    #line 61 
    if ((int)ldv_is_err(ptr) != 0) 
                                   #line 61 
                                   tmp_0 = 1; else 
                                                   #line 61 
                                                   tmp_0 = 0;
  }
  #line 61 
  return (_Bool)(tmp_0 != 0);
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/panic.h"
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void)
{
  #line 23 
  __VERIFIER_assume(0);
  #line 24 
  return;
}

#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_clear_bit(long nr, unsigned long *addr);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 22 
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 23 
#line 23 
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_set_bit(long nr, unsigned long *addr)
{
  #line 24 
  *(addr + (unsigned long)nr / 64UL) |= 1UL << ((unsigned long)nr & 63UL);
  #line 25 
  return;
}

#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_clear_bit(long nr, unsigned long *addr)
{
  #line 29 
  *(addr + (unsigned long)nr / 64UL) &= ~ (1UL << ((unsigned long)nr & 63UL));
  #line 30 
  return;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits)
{
  #line 34 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 35 
  unsigned int size = start + (unsigned int)nbits;
  #line 36 
  int bits_to_set = (int)(64U - (start & 63U));
  #line 37 
  unsigned long mask_to_set = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 39 
  while (nbits - bits_to_set >= 0) {
    #line 40 
    *p |= mask_to_set;
    #line 41 
    nbits -= bits_to_set;
    #line 42 
    bits_to_set = 64;
    #line 43 
    mask_to_set = 18446744073709551615UL;
    #line 44 
    p ++;
  }
  #line 46 
  if (nbits != 0) {
    #line 47 
    mask_to_set = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_set;
    #line 48 
    *p |= mask_to_set;
  }
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits)
{
  #line 54 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 55 
  unsigned int size = start + (unsigned int)nbits;
  #line 56 
  int bits_to_clear = (int)(64U - (start & 63U));
  #line 57 
  unsigned long mask_to_clear = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 59 
  while (nbits - bits_to_clear >= 0) {
    #line 60 
    *p &= ~ mask_to_clear;
    #line 61 
    nbits -= bits_to_clear;
    #line 62 
    bits_to_clear = 64;
    #line 63 
    mask_to_clear = 18446744073709551615UL;
    #line 64 
    p ++;
  }
  #line 66 
  if (nbits != 0) {
    #line 67 
    mask_to_clear = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_clear;
    #line 68 
    *p &= ~ mask_to_clear;
  }
  #line 70 
  return;
}

#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits)
{
  #line 74 
  unsigned int len = (unsigned int)(((unsigned long)nbits + 63UL) / 64UL) * 8U;
  #line 75 
  memset((void *)dst,0,(unsigned long)len);
  #line 76 
  return;
}

#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask)
{
  #line 80 
  unsigned long index;
  #line 80 
  unsigned long end;
  #line 80 
  unsigned long i;
  #line 82 
  again: 
         #line 82 
  ;
  #line 83 
  index = ldv_find_next_zero_bit(map,size,start);
  #line 84 
  index = (index + align_mask) & ~ align_mask;
  #line 85 
  end = (unsigned long)nr + index;
  #line 87 
  if (end > size) 
                  #line 88 
                  return end;
  #line 90 
  i = ldv_find_next_bit(map,end,index);
  #line 92 
  if (i < end) {
    #line 93 
    start = i + 1UL;
    #line 94 
    goto again;
  }
  #line 97 
  return index;
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 25 
void ldv_check_find_bit_offset(unsigned long, unsigned long);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_ffs(unsigned long word)
{
  #line 23 
  int num = 0;
  #line 25 
  if ((word & 4294967295UL) == 0UL) {
    #line 26 
    num += 32;
    #line 27 
    word >>= 32;
  }
  #line 29 
  if ((word & 65535UL) == 0UL) {
    #line 30 
    num += 16;
    #line 31 
    word >>= 16;
  }
  #line 33 
  if ((word & 255UL) == 0UL) {
    #line 34 
    num += 8;
    #line 35 
    word >>= 8;
  }
  #line 37 
  if ((word & 15UL) == 0UL) {
    #line 38 
    num += 4;
    #line 39 
    word >>= 4;
  }
  #line 41 
  if ((word & 3UL) == 0UL) {
    #line 42 
    num += 2;
    #line 43 
    word >>= 2;
  }
  #line 45 
  if ((word & 1UL) == 0UL) 
                           #line 46 
                           num ++;
  #line 48 
  return (unsigned long)num;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_min(unsigned long a, unsigned long b)
{
  #line 53 
  if (a < b) 
             #line 54 
             return a;
  #line 56 
  return b;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_restrict_find_bit_res(unsigned long res, unsigned long size)
{
  #line 62 
  __VERIFIER_assume(1);
  #line 63 
  __VERIFIER_assume(res <= size);
  #line 65 
  return res;
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size)
{
  #line 70 
  unsigned long i;
  #line 72 
  i = 0UL;
  #line 72 
  while (i * 64UL < size) {
    #line 73 
    if (*(addr + i) != 0UL) {
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      return ldv_restrict_find_bit_res(ldv_min(i * 64UL + ldv_ffs(*(addr + i)),size),
                                  size);
    }
    #line 72 
    i ++;
  }
  #line 76 
  return size;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 81 
  unsigned long tmp;
  #line 83 
  ldv_check_find_bit_offset(size,offset);
  #line 85 
  tmp = *(addr + offset / 64UL);
  #line 86 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 87 
  offset &= 18446744073709551552UL;
  #line 89 
  while (tmp == 0UL) {
    #line 90 
    offset += 64UL;
    #line 91 
    if (offset >= size) 
                        #line 92 
                        return size;
    #line 94 
    tmp = *(addr + offset / 64UL);
  }
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 102 
  unsigned long tmp;
  #line 104 
  ldv_check_find_bit_offset(size,offset);
  #line 106 
  tmp = *(addr + offset / 64UL);
  #line 107 
  tmp = ~ tmp;
  #line 108 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 109 
  offset &= 18446744073709551552UL;
  #line 111 
  while (tmp == 0UL) {
    #line 112 
    offset += 64UL;
    #line 113 
    if (offset >= size) 
                        #line 114 
                        return size;
    #line 116 
    tmp = *(addr + offset / 64UL);
    #line 117 
    tmp = ~ tmp;
  }
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
size_t ldv_strlen(char *s);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
size_t ldv_strlen(char *s)
{
  #line 23 
  unsigned int len = 0U;
  #line 25 
  while ((int)*s != 0) {
    #line 26 
    len ++;
    #line 25 
    s ++;
  }
  #line 28 
  return (unsigned long)len;
}

#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strcmp(char *cs, char *ct)
{
  #line 33 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 34 
    if ((int)*cs != (int)*ct) 
                              #line 35 
                              break;
    #line 33 
    cs ++;
    #line 33 
    ct ++;
  }
  #line 37 
  return (int)*cs - (int)*ct;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count)
{
  #line 42 
  if (count == 0UL) 
                    #line 43 
                    return 0;
  #line 45 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 46 
    if ((int)*cs != (int)*ct) 
                              #line 47 
                              break;
    #line 49 
    count --;
    #line 51 
    if (count == 0UL) 
                      #line 52 
                      break;
    #line 45 
    cs ++;
    #line 45 
    ct ++;
  }
  #line 55 
  return (int)*cs - (int)*ct;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_memcmp(void *cs, void *ct, size_t count)
{
  #line 60 
  unsigned char *su1;
  #line 60 
  unsigned char *su2;
  #line 61 
  int res = 0;
  #line 63 
  su1 = (unsigned char *)cs;
  #line 63 
  su2 = (unsigned char *)ct;
  #line 63 
  while (count != 0UL) {
    #line 64 
    res = (int)*su1 - (int)*su2;
    #line 64 
    if (res != 0) 
                  #line 65 
                  break;
    #line 63 
    su1 ++;
    #line 63 
    su2 ++;
    #line 63 
    count --;
  }
  #line 67 
  return res;
}

#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct)
{
  #line 72 
  size_t cs_len;
  #line 72 
  size_t ct_len;
  #line 74 
  cs_len = ldv_strlen(cs);
  #line 75 
  ct_len = ldv_strlen(ct);
  #line 77 
  while (cs_len >= ct_len) {
    #line 78 
    if (ldv_memcmp((void *)cs,(void *)ct,ct_len) == 0) 
                                                       #line 79 
                                                       return cs;
    #line 81 
    cs_len --;
    #line 82 
    cs ++;
  }
  #line 85 
  return (char *)0;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/list.h"
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/list.c"
void ldv_init_list_head(struct list_head *list);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/list.c"
void ldv_init_list_head(struct list_head *list)
{
  #line 23 
  list->next = list;
  #line 24 
  list->prev = list;
  #line 25 
  return;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags);
#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags);
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags);
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp);
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc(size_t size, gfp_t flags)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(flags);
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kzalloc(size_t size, gfp_t flags)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_flags(flags);
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 45 
  void *res;
  #line 47 
  ldv_check_alloc_flags(flags);
  #line 48 
  res = ldv_malloc(n * size);
  #line 50 
  return res;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 55 
  void *res;
  #line 57 
  ldv_check_alloc_flags(flags);
  #line 58 
  res = ldv_calloc(n,size);
  #line 60 
  return res;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size)
{
  #line 71 
  struct kmem_cache *res;
  #line 72 
  struct ldv_kmem_cache *ldv_res;
  #line 74 
  res = (struct kmem_cache *)ldv_zalloc(16UL);
  #line 76 
  if (res != (struct kmem_cache *)0) {
    #line 77 
    ldv_res = (struct ldv_kmem_cache *)res;
    #line 78 
    ldv_res->name = name;
    #line 79 
    ldv_res->size = size;
  }
  #line 82 
  return res;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 87 
  return ldv_kmalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 92 
  return ldv_kzalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp)
{
  #line 97 
  ldv_free(objp);
  #line 98 
  return;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep)
{
  #line 102 
  ldv_free((void *)cachep);
  #line 103 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/util.c"
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(gfp);
  #line 28 
  res = ldv_malloc(len);
  #line 30 
  if (res != (void *)0) 
                        #line 31 
                        memcpy(res,src,len);
  #line 33 
  return res;
}

#line 162  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 162 
void ldv_check_alloc_nonatomic(void);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vmalloc(unsigned long size);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vzalloc(unsigned long size);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void ldv_vfree(void *addr);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vmalloc(unsigned long size)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_nonatomic();
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vzalloc(unsigned long size)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_nonatomic();
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void ldv_vfree(void *addr)
{
  #line 45 
  ldv_free(addr);
  #line 46 
  return;
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 28 
void *malloc(size_t);
#line 29 
#line 29 
void *calloc(size_t, size_t);
#line 30 
#line 30 
void free(void *);
#line 45 
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures;
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size);
#line 60  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void);
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void);
#line 64  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size);
#line 65  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size);
#line 66  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size);
#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s);
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size);
#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size);
#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size);
#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size);
#line 75  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void);
#line 76  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void);
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void);
#line 83  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size);
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size);
#line 87  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 87 
void *external_allocated_data(void);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures = 1U;
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size)
{
  #line 26 
  void *res;
  #line 28 
  if (ldv_is_memory_alloc_failures != 0U) {
    #line 28 
    if (ldv_undef_int() != 0) 
                              #line 29 
                              return (void *)0;
  }
  #line 32 
  res = malloc(size);
  #line 33 
  __VERIFIER_assume(res != (void *)0);
  #line 34 
  return res;
}

#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size)
{
  #line 39 
  return calloc(nmemb,size);
}

#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size)
{
  #line 44 
  return calloc(1UL,size);
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s)
{
  #line 49 
  free(s);
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size)
{
  #line 54 
  void *res;
  #line 56 
  if (ptr != (void *)0 && size == 0UL) {
    #line 57 
    free(ptr);
    #line 58 
    return (void *)0;
  }
  #line 61 
  if (ptr == (void *)0) {
    #line 62 
    res = malloc(size);
    #line 63 
    return res;
  }
  #line 66 
  if (ldv_undef_int() != 0) {
    #line 68 
    res = malloc(size);
    #line 69 
    __VERIFIER_assume(res != (void *)0);
    #line 71 
    memcpy(res,ptr,size);
    #line 72 
    free(ptr);
    #line 74 
    return res;
  }
  else 
       #line 77 
       return (void *)0;
}

#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size)
{
  #line 82 
  void *res;
  #line 84 
  res = malloc(size);
  #line 85 
  __VERIFIER_assume(res != (void *)0);
  #line 87 
  return res;
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size)
{
  #line 92 
  void *res;
  #line 94 
  res = calloc(nmemb,size);
  #line 95 
  __VERIFIER_assume(res != (void *)0);
  #line 97 
  return res;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size)
{
  #line 102 
  void *res;
  #line 104 
  res = calloc(1UL,size);
  #line 105 
  __VERIFIER_assume(res != (void *)0);
  #line 107 
  return res;
}

#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void)
{
  #line 112 
  void *res;
  #line 114 
  if (ldv_undef_int() != 0) {
    #line 116 
    res = external_allocated_data();
    #line 117 
    __VERIFIER_assume(res != (void *)0);
    #line 118 
    return res;
  }
  else 
       #line 121 
       return (void *)0;
}

#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void)
{
  #line 126 
  void *res;
  #line 128 
  if (ldv_undef_int() != 0) {
    #line 130 
    res = external_allocated_data();
    #line 131 
    memset(res,0,8UL);
    #line 132 
    __VERIFIER_assume(res != (void *)0);
    #line 133 
    return res;
  }
  else 
       #line 136 
       return (void *)0;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void)
{
  #line 141 
  return ldv_reference_calloc_unknown_size();
}

#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size)
{
  #line 146 
  void *res;
  #line 149 
  res = external_allocated_data();
  #line 150 
  __VERIFIER_assume(res != (void *)0);
  #line 152 
  return res;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc(size_t size)
{
  #line 25 
  void *res;
  #line 26 
  res = ldv_reference_malloc(size);
  #line 27 
  if (res != (void *)0) {
    #line 28 
    int tmp_0;
    #line 28 
    if (ldv_is_err(res)) 
                         #line 28 
                         tmp_0 = 0; else 
                                         #line 28 
                                         tmp_0 = 1;
    #line 28 
    __VERIFIER_assume(tmp_0);
  }
  #line 29 
  return res;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc(size_t nmemb, size_t size)
{
  #line 34 
  void *res;
  #line 35 
  res = ldv_reference_calloc(nmemb,size);
  #line 36 
  if (res != (void *)0) {
    #line 37 
    int tmp_0;
    #line 37 
    if (ldv_is_err(res)) 
                         #line 37 
                         tmp_0 = 0; else 
                                         #line 37 
                                         tmp_0 = 1;
    #line 37 
    __VERIFIER_assume(tmp_0);
  }
  #line 38 
  return res;
}

#line 41  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc(size_t size)
{
  #line 43 
  void *res;
  #line 44 
  res = ldv_reference_zalloc(size);
  #line 45 
  if (res != (void *)0) {
    #line 46 
    int tmp_0;
    #line 46 
    if (ldv_is_err(res)) 
                         #line 46 
                         tmp_0 = 0; else 
                                         #line 46 
                                         tmp_0 = 1;
    #line 46 
    __VERIFIER_assume(tmp_0);
  }
  #line 47 
  return res;
}

#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void ldv_free(void *s)
{
  #line 52 
  ldv_reference_free(s);
  #line 53 
  return;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc(size_t size)
{
  #line 57 
  void *res;
  #line 59 
  int tmp_0;
  #line 58 
  res = ldv_reference_xmalloc(size);
  #line 59 
  if (ldv_is_err(res)) 
                       #line 59 
                       tmp_0 = 0; else 
                                       #line 59 
                                       tmp_0 = 1;
  #line 59 
  __VERIFIER_assume(tmp_0);
  #line 60 
  return res;
}

#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size)
{
  #line 65 
  void *res;
  #line 67 
  int tmp_0;
  #line 66 
  res = ldv_reference_xcalloc(nmemb,size);
  #line 67 
  if (ldv_is_err(res)) 
                       #line 67 
                       tmp_0 = 0; else 
                                       #line 67 
                                       tmp_0 = 1;
  #line 67 
  __VERIFIER_assume(tmp_0);
  #line 68 
  return res;
}

#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xzalloc(size_t size)
{
  #line 73 
  void *res;
  #line 75 
  int tmp_0;
  #line 74 
  res = ldv_reference_xzalloc(size);
  #line 75 
  if (ldv_is_err(res)) 
                       #line 75 
                       tmp_0 = 0; else 
                                       #line 75 
                                       tmp_0 = 1;
  #line 75 
  __VERIFIER_assume(tmp_0);
  #line 76 
  return res;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc_unknown_size(void)
{
  #line 81 
  void *res;
  #line 82 
  res = ldv_reference_malloc_unknown_size();
  #line 83 
  if (res != (void *)0) {
    #line 84 
    int tmp_0;
    #line 84 
    if (ldv_is_err(res)) 
                         #line 84 
                         tmp_0 = 0; else 
                                         #line 84 
                                         tmp_0 = 1;
    #line 84 
    __VERIFIER_assume(tmp_0);
  }
  #line 85 
  return res;
}

#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void)
{
  #line 90 
  void *res;
  #line 91 
  res = ldv_reference_calloc_unknown_size();
  #line 92 
  if (res != (void *)0) {
    #line 93 
    int tmp_0;
    #line 93 
    if (ldv_is_err(res)) 
                         #line 93 
                         tmp_0 = 0; else 
                                         #line 93 
                                         tmp_0 = 1;
    #line 93 
    __VERIFIER_assume(tmp_0);
  }
  #line 94 
  return res;
}

#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void)
{
  #line 99 
  void *res;
  #line 100 
  res = ldv_reference_zalloc_unknown_size();
  #line 101 
  if (res != (void *)0) {
    #line 102 
    int tmp_0;
    #line 102 
    if (ldv_is_err(res)) 
                         #line 102 
                         tmp_0 = 0; else 
                                         #line 102 
                                         tmp_0 = 1;
    #line 102 
    __VERIFIER_assume(tmp_0);
  }
  #line 103 
  return res;
}

#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size)
{
  #line 108 
  void *res;
  #line 110 
  int tmp_0;
  #line 109 
  res = ldv_reference_xmalloc_unknown_size(size);
  #line 110 
  if (ldv_is_err(res)) 
                       #line 110 
                       tmp_0 = 0; else 
                                       #line 110 
                                       tmp_0 = 1;
  #line 110 
  __VERIFIER_assume(tmp_0);
  #line 111 
  return res;
}

/* compiler builtin: 
   long __builtin_expect(long exp, long c);   */
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 22 
void __VERIFIER_error(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
long __builtin_expect(long exp, long c)
{
  #line 26 
  return exp;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/gcc.c"
void __builtin_trap(void)
{
  #line 37 
  __VERIFIER_error();
  #line 38 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void);
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void);
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void);
#line 54  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end);
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end);
#line 29 
#line 29 
int __VERIFIER_nondet_int(void);
#line 31 
#line 31 
long __VERIFIER_nondet_long(void);
#line 38 
#line 38 
unsigned int __VERIFIER_nondet_uint(void);
#line 41 
#line 41 
unsigned long __VERIFIER_nondet_ulong(void);
#line 42 
#line 42 
unsigned long long __VERIFIER_nondet_ulonglong(void);
#line 43 
#line 43 
void *__VERIFIER_nondet_pointer(void);
#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int(void)
{
  #line 48 
  int undef_int = __VERIFIER_nondet_int();
  #line 50 
  return undef_int;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void)
{
  #line 56 
  long undef_long = __VERIFIER_nondet_long();
  #line 58 
  return undef_long;
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void)
{
  #line 64 
  unsigned int undef_uint = __VERIFIER_nondet_uint();
  #line 66 
  return undef_uint;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void)
{
  #line 72 
  void *undef_ptr = __VERIFIER_nondet_pointer();
  #line 74 
  return undef_ptr;
}

#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void)
{
  #line 80 
  unsigned long undef_ulong = __VERIFIER_nondet_ulong();
  #line 82 
  return undef_ulong;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void)
{
  #line 88 
  unsigned long long undef_ulonglong = __VERIFIER_nondet_ulonglong();
  #line 90 
  return undef_ulonglong;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_positive(void)
{
  #line 95 
  int ret = ldv_undef_int();
  #line 97 
  __VERIFIER_assume(ret > 0);
  #line 99 
  return ret;
}

#line 102  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_negative(void)
{
  #line 104 
  int ret = ldv_undef_int();
  #line 106 
  __VERIFIER_assume(ret < 0);
  #line 108 
  return ret;
}

#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void)
{
  #line 113 
  int ret = ldv_undef_int();
  #line 115 
  __VERIFIER_assume(ret >= 0);
  #line 117 
  return ret;
}

#line 120  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonpositive(void)
{
  #line 122 
  int ret = ldv_undef_int();
  #line 124 
  __VERIFIER_assume(ret <= 0);
  #line 126 
  return ret;
}

#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void)
{
  #line 131 
  void *ret = ldv_undef_ptr();
  #line 133 
  __VERIFIER_assume(ret != (void *)0);
  #line 135 
  return ret;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end)
{
  #line 141 
  int ret;
  #line 143 
  ret = ldv_undef_int();
  #line 144 
  __VERIFIER_assume(ret >= begin);
  #line 145 
  __VERIFIER_assume(ret <= end);
  #line 147 
  return ret;
}

#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end)
{
  #line 153 
  int ret;
  #line 155 
  ret = begin;
  #line 155 
  while (ret < end) {
    #line 156 
    if (ldv_undef_int() != 0) 
                              #line 157 
                              break;
    #line 155 
    ret ++;
  }
  #line 159 
  return ret;
}

#line 62  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 62 
void ldv_initialize(void);
#line 123 
#line 123 
void ldv_pre_probe(void);
#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
#line 35 
int pthread_create(pthread_t *, pthread_attr_t *, void *(*)(void *), void *);
#line 39 
#line 39 
int pthread_join(pthread_t, void **);
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
__inline static void *ERR_PTR(long error)
{
  #line 26 
  return (void *)error;
}

#line 309  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
#line 1673 
void emg_dispatch_deregister_5(struct platform_driver *arg0);
#line 310 
#line 589 
void emg_dispatch_register_2(struct platform_driver *arg0);
#line 311 
#line 600 
void emg_dispatch_register_4(struct file_operations *arg0);
#line 312 
#line 25747 
void *emg_entry_point_insmod(void *arg0);
#line 313 
#line 1682 
void *emg_file_operations_character_driver_scenario_aggr_size_rx_size_ops(void *arg0);
#line 314 
#line 1861 
void *emg_file_operations_character_driver_scenario_aggr_size_tx_agg_len_ops(void *arg0);
#line 315 
#line 2040 
void *emg_file_operations_character_driver_scenario_aggr_size_tx_agg_rate_ops(void *arg0);
#line 316 
#line 2219 
void *emg_file_operations_character_driver_scenario_calib_calib_count_ops(void *arg0);
#line 317 
#line 2398 
void *emg_file_operations_character_driver_scenario_calib_fail_count_ops(void *arg0);
#line 318 
#line 2577 
void *emg_file_operations_character_driver_scenario_clear_fw_stats_ops(void *arg0);
#line 319 
#line 2730 
void *emg_file_operations_character_driver_scenario_conf_ops(void *arg0);
#line 320 
#line 2909 
void *emg_file_operations_character_driver_scenario_dfs_num_of_radar_detections_ops(void *arg0);
#line 321 
#line 3088 
void *emg_file_operations_character_driver_scenario_diversity_num_of_packets_per_ant_ops(void *arg0);
#line 322 
#line 3267 
void *emg_file_operations_character_driver_scenario_diversity_total_num_of_toggles_ops(void *arg0);
#line 323 
#line 3446 
void *emg_file_operations_character_driver_scenario_dynamic_fw_traces_ops(void *arg0);
#line 324 
#line 3623 
void *emg_file_operations_character_driver_scenario_error_bar_retry_ops(void *arg0);
#line 325 
#line 3802 
void *emg_file_operations_character_driver_scenario_error_burst_mismatch_ops(void *arg0);
#line 326 
#line 3981 
void *emg_file_operations_character_driver_scenario_error_elp_while_nvic_pending_ops(void *arg0);
#line 327 
#line 4160 
void *emg_file_operations_character_driver_scenario_error_elp_while_rx_exch_ops(void *arg0);
#line 328 
#line 4339 
void *emg_file_operations_character_driver_scenario_error_elp_while_tx_exch_ops(void *arg0);
#line 329 
#line 4518 
void *emg_file_operations_character_driver_scenario_error_elp_while_tx_ops(void *arg0);
#line 330 
#line 4697 
void *emg_file_operations_character_driver_scenario_error_error_frame_ctrl_ops(void *arg0);
#line 331 
#line 4876 
void *emg_file_operations_character_driver_scenario_error_error_frame_during_protection_ops(void *arg0);
#line 332 
#line 5055 
void *emg_file_operations_character_driver_scenario_error_error_frame_non_ctrl_ops(void *arg0);
#line 333 
#line 5234 
void *emg_file_operations_character_driver_scenario_error_null_frame_cts_start_ops(void *arg0);
#line 334 
#line 5413 
void *emg_file_operations_character_driver_scenario_error_null_frame_tx_start_ops(void *arg0);
#line 335 
#line 5592 
void *emg_file_operations_character_driver_scenario_error_num_frame_cts_nul_flid_ops(void *arg0);
#line 336 
#line 5771 
void *emg_file_operations_character_driver_scenario_error_rx_cmplt_db_overflow_cnt_ops(void *arg0);
#line 337 
#line 5950 
void *emg_file_operations_character_driver_scenario_error_rx_excessive_frame_len_ops(void *arg0);
#line 338 
#line 6129 
void *emg_file_operations_character_driver_scenario_error_tbc_exch_mismatch_ops(void *arg0);
#line 339 
#line 6308 
void *emg_file_operations_character_driver_scenario_error_tx_abort_failure_ops(void *arg0);
#line 340 
#line 6487 
void *emg_file_operations_character_driver_scenario_error_tx_resume_failure_ops(void *arg0);
#line 341 
#line 6666 
void *emg_file_operations_character_driver_scenario_isr_irqs_ops(void *arg0);
#line 342 
#line 6845 
void *emg_file_operations_character_driver_scenario_pipeline_dec_packet_in_fifo_full_ops(void *arg0);
#line 343 
#line 7024 
void *emg_file_operations_character_driver_scenario_pipeline_dec_packet_in_ops(void *arg0);
#line 344 
#line 7203 
void *emg_file_operations_character_driver_scenario_pipeline_dec_packet_out_ops(void *arg0);
#line 345 
#line 7382 
void *emg_file_operations_character_driver_scenario_pipeline_defrag_to_rx_xfer_swi_ops(void *arg0);
#line 346 
#line 7561 
void *emg_file_operations_character_driver_scenario_pipeline_enc_rx_stat_fifo_int_ops(void *arg0);
#line 347 
#line 7740 
void *emg_file_operations_character_driver_scenario_pipeline_enc_tx_stat_fifo_int_ops(void *arg0);
#line 348 
#line 7919 
void *emg_file_operations_character_driver_scenario_pipeline_hs_tx_stat_fifo_int_ops(void *arg0);
#line 349 
#line 8098 
void *emg_file_operations_character_driver_scenario_pipeline_pipeline_fifo_full_ops(void *arg0);
#line 350 
#line 8277 
void *emg_file_operations_character_driver_scenario_pipeline_post_proc_swi_ops(void *arg0);
#line 351 
#line 8456 
void *emg_file_operations_character_driver_scenario_pipeline_pre_proc_swi_ops(void *arg0);
#line 352 
#line 8635 
void *emg_file_operations_character_driver_scenario_pipeline_pre_to_defrag_swi_ops(void *arg0);
#line 353 
#line 8814 
void *emg_file_operations_character_driver_scenario_pipeline_rx_complete_stat_fifo_int_ops(void *arg0);
#line 354 
#line 8993 
void *emg_file_operations_character_driver_scenario_pipeline_sec_frag_swi_ops(void *arg0);
#line 355 
#line 9172 
void *emg_file_operations_character_driver_scenario_pwr_ap_sleep_active_conf_ops(void *arg0);
#line 356 
#line 9351 
void *emg_file_operations_character_driver_scenario_pwr_ap_sleep_counter_ops(void *arg0);
#line 357 
#line 9530 
void *emg_file_operations_character_driver_scenario_pwr_ap_sleep_user_conf_ops(void *arg0);
#line 358 
#line 9709 
void *emg_file_operations_character_driver_scenario_pwr_connection_out_of_sync_ops(void *arg0);
#line 359 
#line 9888 
void *emg_file_operations_character_driver_scenario_pwr_cont_miss_bcns_spread_ops(void *arg0);
#line 360 
#line 10067 
void *emg_file_operations_character_driver_scenario_pwr_missing_bcns_cnt_ops(void *arg0);
#line 361 
#line 10246 
void *emg_file_operations_character_driver_scenario_pwr_rcvd_awake_bcns_cnt_ops(void *arg0);
#line 362 
#line 10425 
void *emg_file_operations_character_driver_scenario_pwr_rcvd_bcns_cnt_ops(void *arg0);
#line 363 
#line 10604 
void *emg_file_operations_character_driver_scenario_pwr_sleep_cycle_avg_ops(void *arg0);
#line 364 
#line 10783 
void *emg_file_operations_character_driver_scenario_pwr_sleep_percent_ops(void *arg0);
#line 365 
#line 10962 
void *emg_file_operations_character_driver_scenario_pwr_sleep_time_avg_ops(void *arg0);
#line 366 
#line 11141 
void *emg_file_operations_character_driver_scenario_pwr_sleep_time_count_ops(void *arg0);
#line 367 
#line 11320 
void *emg_file_operations_character_driver_scenario_radar_debug_mode_ops(void *arg0);
#line 368 
#line 11497 
void *emg_file_operations_character_driver_scenario_radar_detection_ops(void *arg0);
#line 369 
#line 11650 
void *emg_file_operations_character_driver_scenario_roaming_rssi_level_ops(void *arg0);
#line 370 
#line 11829 
void *emg_file_operations_character_driver_scenario_rx_decrypt_key_not_found_ops(void *arg0);
#line 371 
#line 12008 
void *emg_file_operations_character_driver_scenario_rx_defrag_called_ops(void *arg0);
#line 372 
#line 12187 
void *emg_file_operations_character_driver_scenario_rx_defrag_decrypt_failed_ops(void *arg0);
#line 373 
#line 12366 
void *emg_file_operations_character_driver_scenario_rx_defrag_in_process_called_ops(void *arg0);
#line 374 
#line 12545 
void *emg_file_operations_character_driver_scenario_rx_defrag_init_called_ops(void *arg0);
#line 375 
#line 12724 
void *emg_file_operations_character_driver_scenario_rx_defrag_need_decrypt_ops(void *arg0);
#line 376 
#line 12903 
void *emg_file_operations_character_driver_scenario_rx_defrag_need_defrag_ops(void *arg0);
#line 377 
#line 13082 
void *emg_file_operations_character_driver_scenario_rx_defrag_tkip_called_ops(void *arg0);
#line 378 
#line 13261 
void *emg_file_operations_character_driver_scenario_rx_filter_accum_arp_pend_requests_ops(void *arg0);
#line 379 
#line 13440 
void *emg_file_operations_character_driver_scenario_rx_filter_arp_filter_ops(void *arg0);
#line 380 
#line 13619 
void *emg_file_operations_character_driver_scenario_rx_filter_beacon_filter_ops(void *arg0);
#line 381 
#line 13798 
void *emg_file_operations_character_driver_scenario_rx_filter_data_filter_ops(void *arg0);
#line 382 
#line 13977 
void *emg_file_operations_character_driver_scenario_rx_filter_dup_filter_ops(void *arg0);
#line 383 
#line 14156 
void *emg_file_operations_character_driver_scenario_rx_filter_ibss_filter_ops(void *arg0);
#line 384 
#line 14335 
void *emg_file_operations_character_driver_scenario_rx_filter_max_arp_queue_dep_ops(void *arg0);
#line 385 
#line 14514 
void *emg_file_operations_character_driver_scenario_rx_filter_mc_filter_ops(void *arg0);
#line 386 
#line 14693 
void *emg_file_operations_character_driver_scenario_rx_filter_protection_filter_ops(void *arg0);
#line 387 
#line 14872 
void *emg_file_operations_character_driver_scenario_rx_rate_rx_frames_per_rates_ops(void *arg0);
#line 388 
#line 15051 
void *emg_file_operations_character_driver_scenario_rx_rx_beacon_early_term_ops(void *arg0);
#line 389 
#line 15230 
void *emg_file_operations_character_driver_scenario_rx_rx_cmplt_ops(void *arg0);
#line 390 
#line 15409 
void *emg_file_operations_character_driver_scenario_rx_rx_cmplt_task_ops(void *arg0);
#line 391 
#line 15588 
void *emg_file_operations_character_driver_scenario_rx_rx_defrag_end_ops(void *arg0);
#line 392 
#line 15767 
void *emg_file_operations_character_driver_scenario_rx_rx_defrag_ops(void *arg0);
#line 393 
#line 15946 
void *emg_file_operations_character_driver_scenario_rx_rx_done_ops(void *arg0);
#line 394 
#line 16125 
void *emg_file_operations_character_driver_scenario_rx_rx_dropped_frame_ops(void *arg0);
#line 395 
#line 16304 
void *emg_file_operations_character_driver_scenario_rx_rx_hdr_overflow_ops(void *arg0);
#line 396 
#line 16483 
void *emg_file_operations_character_driver_scenario_rx_rx_out_of_mpdu_nodes_ops(void *arg0);
#line 397 
#line 16662 
void *emg_file_operations_character_driver_scenario_rx_rx_phy_hdr_ops(void *arg0);
#line 398 
#line 16841 
void *emg_file_operations_character_driver_scenario_rx_rx_pre_complt_ops(void *arg0);
#line 399 
#line 17020 
void *emg_file_operations_character_driver_scenario_rx_rx_rts_timeout_ops(void *arg0);
#line 400 
#line 17199 
void *emg_file_operations_character_driver_scenario_rx_rx_timeout_ops(void *arg0);
#line 401 
#line 17378 
void *emg_file_operations_character_driver_scenario_rx_rx_timeout_wa_ops(void *arg0);
#line 402 
#line 17557 
void *emg_file_operations_character_driver_scenario_rx_rx_tkip_replays_ops(void *arg0);
#line 403 
#line 17736 
void *emg_file_operations_character_driver_scenario_rx_rx_xfr_ops(void *arg0);
#line 404 
#line 17915 
void *emg_file_operations_character_driver_scenario_thermal_adc_source_unexpected_ops(void *arg0);
#line 405 
#line 18094 
void *emg_file_operations_character_driver_scenario_thermal_false_irq_ops(void *arg0);
#line 406 
#line 18273 
void *emg_file_operations_character_driver_scenario_thermal_irq_thr_high_ops(void *arg0);
#line 407 
#line 18452 
void *emg_file_operations_character_driver_scenario_thermal_irq_thr_low_ops(void *arg0);
#line 408 
#line 18631 
void *emg_file_operations_character_driver_scenario_thermal_tx_resume_ops(void *arg0);
#line 409 
#line 18810 
void *emg_file_operations_character_driver_scenario_thermal_tx_stop_ops(void *arg0);
#line 410 
#line 18989 
void *emg_file_operations_character_driver_scenario_tx_frag_bad_mblk_num_ops(void *arg0);
#line 411 
#line 19168 
void *emg_file_operations_character_driver_scenario_tx_frag_cache_hit_ops(void *arg0);
#line 412 
#line 19347 
void *emg_file_operations_character_driver_scenario_tx_frag_cache_miss_ops(void *arg0);
#line 413 
#line 19526 
void *emg_file_operations_character_driver_scenario_tx_frag_called_ops(void *arg0);
#line 414 
#line 19705 
void *emg_file_operations_character_driver_scenario_tx_frag_failed_ops(void *arg0);
#line 415 
#line 19884 
void *emg_file_operations_character_driver_scenario_tx_frag_in_process_called_ops(void *arg0);
#line 416 
#line 20063 
void *emg_file_operations_character_driver_scenario_tx_frag_init_called_ops(void *arg0);
#line 417 
#line 20242 
void *emg_file_operations_character_driver_scenario_tx_frag_key_not_found_ops(void *arg0);
#line 418 
#line 20421 
void *emg_file_operations_character_driver_scenario_tx_frag_mpdu_alloc_failed_ops(void *arg0);
#line 419 
#line 20600 
void *emg_file_operations_character_driver_scenario_tx_frag_need_fragmentation_ops(void *arg0);
#line 420 
#line 20779 
void *emg_file_operations_character_driver_scenario_tx_frag_tkip_called_ops(void *arg0);
#line 421 
#line 20958 
void *emg_file_operations_character_driver_scenario_tx_tx_burst_programmed_ops(void *arg0);
#line 422 
#line 21137 
void *emg_file_operations_character_driver_scenario_tx_tx_cfe1_ops(void *arg0);
#line 423 
#line 21316 
void *emg_file_operations_character_driver_scenario_tx_tx_cfe2_ops(void *arg0);
#line 424 
#line 21495 
void *emg_file_operations_character_driver_scenario_tx_tx_cmplt_ops(void *arg0);
#line 425 
#line 21674 
void *emg_file_operations_character_driver_scenario_tx_tx_data_prepared_ops(void *arg0);
#line 426 
#line 21853 
void *emg_file_operations_character_driver_scenario_tx_tx_data_programmed_ops(void *arg0);
#line 427 
#line 22032 
void *emg_file_operations_character_driver_scenario_tx_tx_done_data_ops(void *arg0);
#line 428 
#line 22211 
void *emg_file_operations_character_driver_scenario_tx_tx_done_int_template_ops(void *arg0);
#line 429 
#line 22390 
void *emg_file_operations_character_driver_scenario_tx_tx_done_template_ops(void *arg0);
#line 430 
#line 22569 
void *emg_file_operations_character_driver_scenario_tx_tx_exch_expiry_ops(void *arg0);
#line 431 
#line 22748 
void *emg_file_operations_character_driver_scenario_tx_tx_exch_ops(void *arg0);
#line 432 
#line 22927 
void *emg_file_operations_character_driver_scenario_tx_tx_exch_pending_ops(void *arg0);
#line 433 
#line 23106 
void *emg_file_operations_character_driver_scenario_tx_tx_prepared_descs_ops(void *arg0);
#line 434 
#line 23285 
void *emg_file_operations_character_driver_scenario_tx_tx_retry_data_ops(void *arg0);
#line 435 
#line 23464 
void *emg_file_operations_character_driver_scenario_tx_tx_retry_per_rate_ops(void *arg0);
#line 436 
#line 23643 
void *emg_file_operations_character_driver_scenario_tx_tx_retry_template_ops(void *arg0);
#line 437 
#line 23822 
void *emg_file_operations_character_driver_scenario_tx_tx_start_data_ops(void *arg0);
#line 438 
#line 24001 
void *emg_file_operations_character_driver_scenario_tx_tx_start_fw_gen_ops(void *arg0);
#line 439 
#line 24180 
void *emg_file_operations_character_driver_scenario_tx_tx_start_int_templates_ops(void *arg0);
#line 440 
#line 24359 
void *emg_file_operations_character_driver_scenario_tx_tx_start_null_frame_ops(void *arg0);
#line 441 
#line 24538 
void *emg_file_operations_character_driver_scenario_tx_tx_start_templates_ops(void *arg0);
#line 442 
#line 24717 
void *emg_file_operations_character_driver_scenario_tx_tx_starts_ops(void *arg0);
#line 443 
#line 24896 
void *emg_file_operations_character_driver_scenario_tx_tx_stop_ops(void *arg0);
#line 444 
#line 25075 
void *emg_file_operations_character_driver_scenario_tx_tx_template_prepared_ops(void *arg0);
#line 445 
#line 25254 
void *emg_file_operations_character_driver_scenario_tx_tx_template_programmed_ops(void *arg0);
#line 447 
#line 25433 
void *emg_platform_platform_instance_wl18xx_driver(void *arg0);
#line 449 
#line 25776 
int main(void);
#line 452  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_10;
#line 453  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_100;
#line 454  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_101;
#line 455  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_102;
#line 456  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_103;
#line 457  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_104;
#line 458  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_105;
#line 459  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_106;
#line 460  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_107;
#line 461  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_108;
#line 462  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_109;
#line 463  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_11;
#line 464  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_110;
#line 465  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_111;
#line 466  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_112;
#line 467  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_113;
#line 468  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_114;
#line 469  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_115;
#line 470  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_116;
#line 471  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_117;
#line 472  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_118;
#line 473  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_119;
#line 474  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_12;
#line 475  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_120;
#line 476  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_121;
#line 477  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_122;
#line 478  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_123;
#line 479  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_124;
#line 480  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_125;
#line 481  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_126;
#line 482  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_127;
#line 483  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_128;
#line 484  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_129;
#line 485  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_13;
#line 486  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_130;
#line 487  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_131;
#line 488  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_132;
#line 489  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_133;
#line 490  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_134;
#line 491  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_135;
#line 492  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_136;
#line 493  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_137;
#line 494  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_138;
#line 495  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_139;
#line 496  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_14;
#line 497  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_140;
#line 498  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_15;
#line 499  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_16;
#line 500  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_17;
#line 501  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_18;
#line 502  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_19;
#line 503  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_20;
#line 504  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_21;
#line 505  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_22;
#line 506  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_23;
#line 507  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_24;
#line 508  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_25;
#line 509  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_26;
#line 510  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_27;
#line 511  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_28;
#line 512  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_29;
#line 513  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_30;
#line 514  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_31;
#line 515  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_32;
#line 516  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_33;
#line 517  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_34;
#line 518  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_35;
#line 519  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_36;
#line 520  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_37;
#line 521  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_38;
#line 522  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_39;
#line 523  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_40;
#line 524  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_41;
#line 525  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_42;
#line 526  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_43;
#line 527  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_44;
#line 528  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_45;
#line 529  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_46;
#line 530  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_47;
#line 531  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_48;
#line 532  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_49;
#line 533  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_50;
#line 534  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_51;
#line 535  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_52;
#line 536  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_53;
#line 537  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_54;
#line 538  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_55;
#line 539  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_56;
#line 540  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_57;
#line 541  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_58;
#line 542  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_59;
#line 543  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_60;
#line 544  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_61;
#line 545  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_62;
#line 546  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_63;
#line 547  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_64;
#line 548  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_65;
#line 549  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_66;
#line 550  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_67;
#line 551  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_68;
#line 552  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_69;
#line 553  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_7;
#line 554  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_70;
#line 555  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_71;
#line 556  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_72;
#line 557  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_73;
#line 558  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_74;
#line 559  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_75;
#line 560  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_76;
#line 561  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_77;
#line 562  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_78;
#line 563  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_79;
#line 564  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_8;
#line 565  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_80;
#line 566  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_81;
#line 567  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_82;
#line 568  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_83;
#line 569  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_84;
#line 570  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_85;
#line 571  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_86;
#line 572  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_87;
#line 573  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_88;
#line 574  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_89;
#line 575  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_9;
#line 576  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_90;
#line 577  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_91;
#line 578  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_92;
#line 579  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_93;
#line 580  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_94;
#line 581  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_95;
#line 582  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_96;
#line 583  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_97;
#line 584  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_98;
#line 585  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_99;
#line 589  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_2(struct platform_driver *arg0)
{
  #line 590 
  int ret;
  #line 591 
  struct emg_struct_platform_instance_wl18xx_driver_140 *cf_arg_140;
  #line 592 
  cf_arg_140 = (struct emg_struct_platform_instance_wl18xx_driver_140 *)ldv_xmalloc(16UL);
  #line 593 
  cf_arg_140->arg0 = arg0;
  #line 594 
  ret = pthread_create(& emg_thread_140,(pthread_attr_t *)0,& emg_platform_platform_instance_wl18xx_driver,(void *)cf_arg_140);
  #line 595 
  __VERIFIER_assume(ret == 0);
  #line 596 
  return;
}

#line 600  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_4(struct file_operations *arg0)
{
  #line 601 
  int ret;
  #line 602 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_10;
  #line 603 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_100;
  #line 604 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_101;
  #line 605 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_102;
  #line 606 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_103;
  #line 607 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_104;
  #line 608 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_105;
  #line 609 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_106;
  #line 610 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_107;
  #line 611 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_108;
  #line 612 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_109;
  #line 613 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_11;
  #line 614 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_110;
  #line 615 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_111;
  #line 616 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_112;
  #line 617 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_113;
  #line 618 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_114;
  #line 619 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_115;
  #line 620 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_116;
  #line 621 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_117;
  #line 622 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_118;
  #line 623 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_119;
  #line 624 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_12;
  #line 625 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_120;
  #line 626 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_121;
  #line 627 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_122;
  #line 628 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_123;
  #line 629 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_124;
  #line 630 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_125;
  #line 631 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_126;
  #line 632 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_127;
  #line 633 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_128;
  #line 634 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_129;
  #line 635 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_13;
  #line 636 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_130;
  #line 637 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_131;
  #line 638 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_132;
  #line 639 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_133;
  #line 640 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_134;
  #line 641 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_135;
  #line 642 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_136;
  #line 643 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_137;
  #line 644 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_138;
  #line 645 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_139;
  #line 646 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_14;
  #line 647 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_15;
  #line 648 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_16;
  #line 649 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_17;
  #line 650 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_18;
  #line 651 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_19;
  #line 652 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_20;
  #line 653 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_21;
  #line 654 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_22;
  #line 655 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_23;
  #line 656 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_24;
  #line 657 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_25;
  #line 658 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_26;
  #line 659 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_27;
  #line 660 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_28;
  #line 661 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_29;
  #line 662 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_30;
  #line 663 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_31;
  #line 664 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_32;
  #line 665 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_33;
  #line 666 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_34;
  #line 667 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_35;
  #line 668 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_36;
  #line 669 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_37;
  #line 670 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_38;
  #line 671 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_39;
  #line 672 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_40;
  #line 673 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_41;
  #line 674 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_42;
  #line 675 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_43;
  #line 676 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_44;
  #line 677 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_45;
  #line 678 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_46;
  #line 679 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_47;
  #line 680 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_48;
  #line 681 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_49;
  #line 682 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_50;
  #line 683 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_51;
  #line 684 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_52;
  #line 685 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_53;
  #line 686 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_54;
  #line 687 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_55;
  #line 688 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_56;
  #line 689 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_57;
  #line 690 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_58;
  #line 691 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_59;
  #line 692 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_60;
  #line 693 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_61;
  #line 694 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_62;
  #line 695 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_63;
  #line 696 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_64;
  #line 697 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_65;
  #line 698 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_66;
  #line 699 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_67;
  #line 700 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_68;
  #line 701 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_69;
  #line 702 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_7;
  #line 703 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_70;
  #line 704 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_71;
  #line 705 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_72;
  #line 706 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_73;
  #line 707 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_74;
  #line 708 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_75;
  #line 709 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_76;
  #line 710 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_77;
  #line 711 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_78;
  #line 712 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_79;
  #line 713 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_8;
  #line 714 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_80;
  #line 715 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_81;
  #line 716 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_82;
  #line 717 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_83;
  #line 718 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_84;
  #line 719 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_85;
  #line 720 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_86;
  #line 721 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_87;
  #line 722 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_88;
  #line 723 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_89;
  #line 724 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_9;
  #line 725 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_90;
  #line 726 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_91;
  #line 727 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_92;
  #line 728 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_93;
  #line 729 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_94;
  #line 730 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_95;
  #line 731 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_96;
  #line 732 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_97;
  #line 733 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_98;
  #line 734 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *cf_arg_99;
  #line 735 
  switch (ldv_undef_int()) {
    #line 736 
    case 0: 
            #line 736 
    ;
    #line 737 
    cf_arg_10 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 738 
    cf_arg_10->arg0 = arg0;
    #line 739 
    ret = pthread_create(& emg_thread_10,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_calib_calib_count_ops,(void *)cf_arg_10);
    #line 740 
    __VERIFIER_assume(ret == 0);
    #line 741 
    break;
    #line 743 
    case 1: 
            #line 743 
    ;
    #line 744 
    cf_arg_100 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 745 
    cf_arg_100->arg0 = arg0;
    #line 746 
    ret = pthread_create(& emg_thread_100,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_thermal_irq_thr_high_ops,(void *)cf_arg_100);
    #line 747 
    __VERIFIER_assume(ret == 0);
    #line 748 
    break;
    #line 750 
    case 2: 
            #line 750 
    ;
    #line 751 
    cf_arg_101 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 752 
    cf_arg_101->arg0 = arg0;
    #line 753 
    ret = pthread_create(& emg_thread_101,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_thermal_irq_thr_low_ops,(void *)cf_arg_101);
    #line 754 
    __VERIFIER_assume(ret == 0);
    #line 755 
    break;
    #line 757 
    case 3: 
            #line 757 
    ;
    #line 758 
    cf_arg_102 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 759 
    cf_arg_102->arg0 = arg0;
    #line 760 
    ret = pthread_create(& emg_thread_102,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_thermal_tx_resume_ops,(void *)cf_arg_102);
    #line 761 
    __VERIFIER_assume(ret == 0);
    #line 762 
    break;
    #line 764 
    case 4: 
            #line 764 
    ;
    #line 765 
    cf_arg_103 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 766 
    cf_arg_103->arg0 = arg0;
    #line 767 
    ret = pthread_create(& emg_thread_103,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_thermal_tx_stop_ops,(void *)cf_arg_103);
    #line 768 
    __VERIFIER_assume(ret == 0);
    #line 769 
    break;
    #line 771 
    case 5: 
            #line 771 
    ;
    #line 772 
    cf_arg_104 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 773 
    cf_arg_104->arg0 = arg0;
    #line 774 
    ret = pthread_create(& emg_thread_104,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_tx_frag_bad_mblk_num_ops,(void *)cf_arg_104);
    #line 775 
    __VERIFIER_assume(ret == 0);
    #line 776 
    break;
    #line 778 
    case 6: 
            #line 778 
    ;
    #line 779 
    cf_arg_105 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 780 
    cf_arg_105->arg0 = arg0;
    #line 781 
    ret = pthread_create(& emg_thread_105,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_tx_frag_cache_hit_ops,(void *)cf_arg_105);
    #line 782 
    __VERIFIER_assume(ret == 0);
    #line 783 
    break;
    #line 785 
    case 7: 
            #line 785 
    ;
    #line 786 
    cf_arg_106 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 787 
    cf_arg_106->arg0 = arg0;
    #line 788 
    ret = pthread_create(& emg_thread_106,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_tx_frag_cache_miss_ops,(void *)cf_arg_106);
    #line 789 
    __VERIFIER_assume(ret == 0);
    #line 790 
    break;
    #line 792 
    case 8: 
            #line 792 
    ;
    #line 793 
    cf_arg_107 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 794 
    cf_arg_107->arg0 = arg0;
    #line 795 
    ret = pthread_create(& emg_thread_107,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_tx_frag_called_ops,(void *)cf_arg_107);
    #line 796 
    __VERIFIER_assume(ret == 0);
    #line 797 
    break;
    #line 799 
    case 9: 
            #line 799 
    ;
    #line 800 
    cf_arg_108 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 801 
    cf_arg_108->arg0 = arg0;
    #line 802 
    ret = pthread_create(& emg_thread_108,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_tx_frag_failed_ops,(void *)cf_arg_108);
    #line 803 
    __VERIFIER_assume(ret == 0);
    #line 804 
    break;
    #line 806 
    case 10: 
             #line 806 
    ;
    #line 807 
    cf_arg_109 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 808 
    cf_arg_109->arg0 = arg0;
    #line 809 
    ret = pthread_create(& emg_thread_109,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_tx_frag_in_process_called_ops,(void *)cf_arg_109);
    #line 810 
    __VERIFIER_assume(ret == 0);
    #line 811 
    break;
    #line 813 
    case 11: 
             #line 813 
    ;
    #line 814 
    cf_arg_11 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 815 
    cf_arg_11->arg0 = arg0;
    #line 816 
    ret = pthread_create(& emg_thread_11,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_calib_fail_count_ops,(void *)cf_arg_11);
    #line 817 
    __VERIFIER_assume(ret == 0);
    #line 818 
    break;
    #line 820 
    case 12: 
             #line 820 
    ;
    #line 821 
    cf_arg_110 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 822 
    cf_arg_110->arg0 = arg0;
    #line 823 
    ret = pthread_create(& emg_thread_110,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_tx_frag_init_called_ops,(void *)cf_arg_110);
    #line 824 
    __VERIFIER_assume(ret == 0);
    #line 825 
    break;
    #line 827 
    case 13: 
             #line 827 
    ;
    #line 828 
    cf_arg_111 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 829 
    cf_arg_111->arg0 = arg0;
    #line 830 
    ret = pthread_create(& emg_thread_111,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_tx_frag_key_not_found_ops,(void *)cf_arg_111);
    #line 831 
    __VERIFIER_assume(ret == 0);
    #line 832 
    break;
    #line 834 
    case 14: 
             #line 834 
    ;
    #line 835 
    cf_arg_112 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 836 
    cf_arg_112->arg0 = arg0;
    #line 837 
    ret = pthread_create(& emg_thread_112,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_tx_frag_mpdu_alloc_failed_ops,(void *)cf_arg_112);
    #line 838 
    __VERIFIER_assume(ret == 0);
    #line 839 
    break;
    #line 841 
    case 15: 
             #line 841 
    ;
    #line 842 
    cf_arg_113 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 843 
    cf_arg_113->arg0 = arg0;
    #line 844 
    ret = pthread_create(& emg_thread_113,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_tx_frag_need_fragmentation_ops,(void *)cf_arg_113);
    #line 845 
    __VERIFIER_assume(ret == 0);
    #line 846 
    break;
    #line 848 
    case 16: 
             #line 848 
    ;
    #line 849 
    cf_arg_114 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 850 
    cf_arg_114->arg0 = arg0;
    #line 851 
    ret = pthread_create(& emg_thread_114,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_tx_frag_tkip_called_ops,(void *)cf_arg_114);
    #line 852 
    __VERIFIER_assume(ret == 0);
    #line 853 
    break;
    #line 855 
    case 17: 
             #line 855 
    ;
    #line 856 
    cf_arg_115 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 857 
    cf_arg_115->arg0 = arg0;
    #line 858 
    ret = pthread_create(& emg_thread_115,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_tx_tx_burst_programmed_ops,(void *)cf_arg_115);
    #line 859 
    __VERIFIER_assume(ret == 0);
    #line 860 
    break;
    #line 862 
    case 18: 
             #line 862 
    ;
    #line 863 
    cf_arg_116 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 864 
    cf_arg_116->arg0 = arg0;
    #line 865 
    ret = pthread_create(& emg_thread_116,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_tx_tx_cfe1_ops,(void *)cf_arg_116);
    #line 866 
    __VERIFIER_assume(ret == 0);
    #line 867 
    break;
    #line 869 
    case 19: 
             #line 869 
    ;
    #line 870 
    cf_arg_117 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 871 
    cf_arg_117->arg0 = arg0;
    #line 872 
    ret = pthread_create(& emg_thread_117,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_tx_tx_cfe2_ops,(void *)cf_arg_117);
    #line 873 
    __VERIFIER_assume(ret == 0);
    #line 874 
    break;
    #line 876 
    case 20: 
             #line 876 
    ;
    #line 877 
    cf_arg_118 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 878 
    cf_arg_118->arg0 = arg0;
    #line 879 
    ret = pthread_create(& emg_thread_118,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_tx_tx_cmplt_ops,(void *)cf_arg_118);
    #line 880 
    __VERIFIER_assume(ret == 0);
    #line 881 
    break;
    #line 883 
    case 21: 
             #line 883 
    ;
    #line 884 
    cf_arg_119 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 885 
    cf_arg_119->arg0 = arg0;
    #line 886 
    ret = pthread_create(& emg_thread_119,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_tx_tx_data_prepared_ops,(void *)cf_arg_119);
    #line 887 
    __VERIFIER_assume(ret == 0);
    #line 888 
    break;
    #line 890 
    case 22: 
             #line 890 
    ;
    #line 891 
    cf_arg_12 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 892 
    cf_arg_12->arg0 = arg0;
    #line 893 
    ret = pthread_create(& emg_thread_12,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_clear_fw_stats_ops,(void *)cf_arg_12);
    #line 894 
    __VERIFIER_assume(ret == 0);
    #line 895 
    break;
    #line 897 
    case 23: 
             #line 897 
    ;
    #line 898 
    cf_arg_120 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 899 
    cf_arg_120->arg0 = arg0;
    #line 900 
    ret = pthread_create(& emg_thread_120,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_tx_tx_data_programmed_ops,(void *)cf_arg_120);
    #line 901 
    __VERIFIER_assume(ret == 0);
    #line 902 
    break;
    #line 904 
    case 24: 
             #line 904 
    ;
    #line 905 
    cf_arg_121 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 906 
    cf_arg_121->arg0 = arg0;
    #line 907 
    ret = pthread_create(& emg_thread_121,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_tx_tx_done_data_ops,(void *)cf_arg_121);
    #line 908 
    __VERIFIER_assume(ret == 0);
    #line 909 
    break;
    #line 911 
    case 25: 
             #line 911 
    ;
    #line 912 
    cf_arg_122 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 913 
    cf_arg_122->arg0 = arg0;
    #line 914 
    ret = pthread_create(& emg_thread_122,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_tx_tx_done_int_template_ops,(void *)cf_arg_122);
    #line 915 
    __VERIFIER_assume(ret == 0);
    #line 916 
    break;
    #line 918 
    case 26: 
             #line 918 
    ;
    #line 919 
    cf_arg_123 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 920 
    cf_arg_123->arg0 = arg0;
    #line 921 
    ret = pthread_create(& emg_thread_123,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_tx_tx_done_template_ops,(void *)cf_arg_123);
    #line 922 
    __VERIFIER_assume(ret == 0);
    #line 923 
    break;
    #line 925 
    case 27: 
             #line 925 
    ;
    #line 926 
    cf_arg_124 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 927 
    cf_arg_124->arg0 = arg0;
    #line 928 
    ret = pthread_create(& emg_thread_124,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_tx_tx_exch_expiry_ops,(void *)cf_arg_124);
    #line 929 
    __VERIFIER_assume(ret == 0);
    #line 930 
    break;
    #line 932 
    case 28: 
             #line 932 
    ;
    #line 933 
    cf_arg_125 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 934 
    cf_arg_125->arg0 = arg0;
    #line 935 
    ret = pthread_create(& emg_thread_125,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_tx_tx_exch_ops,(void *)cf_arg_125);
    #line 936 
    __VERIFIER_assume(ret == 0);
    #line 937 
    break;
    #line 939 
    case 29: 
             #line 939 
    ;
    #line 940 
    cf_arg_126 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 941 
    cf_arg_126->arg0 = arg0;
    #line 942 
    ret = pthread_create(& emg_thread_126,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_tx_tx_exch_pending_ops,(void *)cf_arg_126);
    #line 943 
    __VERIFIER_assume(ret == 0);
    #line 944 
    break;
    #line 946 
    case 30: 
             #line 946 
    ;
    #line 947 
    cf_arg_127 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 948 
    cf_arg_127->arg0 = arg0;
    #line 949 
    ret = pthread_create(& emg_thread_127,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_tx_tx_prepared_descs_ops,(void *)cf_arg_127);
    #line 950 
    __VERIFIER_assume(ret == 0);
    #line 951 
    break;
    #line 953 
    case 31: 
             #line 953 
    ;
    #line 954 
    cf_arg_128 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 955 
    cf_arg_128->arg0 = arg0;
    #line 956 
    ret = pthread_create(& emg_thread_128,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_tx_tx_retry_data_ops,(void *)cf_arg_128);
    #line 957 
    __VERIFIER_assume(ret == 0);
    #line 958 
    break;
    #line 960 
    case 32: 
             #line 960 
    ;
    #line 961 
    cf_arg_129 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 962 
    cf_arg_129->arg0 = arg0;
    #line 963 
    ret = pthread_create(& emg_thread_129,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_tx_tx_retry_per_rate_ops,(void *)cf_arg_129);
    #line 964 
    __VERIFIER_assume(ret == 0);
    #line 965 
    break;
    #line 967 
    case 33: 
             #line 967 
    ;
    #line 968 
    cf_arg_13 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 969 
    cf_arg_13->arg0 = arg0;
    #line 970 
    ret = pthread_create(& emg_thread_13,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_conf_ops,(void *)cf_arg_13);
    #line 971 
    __VERIFIER_assume(ret == 0);
    #line 972 
    break;
    #line 974 
    case 34: 
             #line 974 
    ;
    #line 975 
    cf_arg_130 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 976 
    cf_arg_130->arg0 = arg0;
    #line 977 
    ret = pthread_create(& emg_thread_130,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_tx_tx_retry_template_ops,(void *)cf_arg_130);
    #line 978 
    __VERIFIER_assume(ret == 0);
    #line 979 
    break;
    #line 981 
    case 35: 
             #line 981 
    ;
    #line 982 
    cf_arg_131 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 983 
    cf_arg_131->arg0 = arg0;
    #line 984 
    ret = pthread_create(& emg_thread_131,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_tx_tx_start_data_ops,(void *)cf_arg_131);
    #line 985 
    __VERIFIER_assume(ret == 0);
    #line 986 
    break;
    #line 988 
    case 36: 
             #line 988 
    ;
    #line 989 
    cf_arg_132 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 990 
    cf_arg_132->arg0 = arg0;
    #line 991 
    ret = pthread_create(& emg_thread_132,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_tx_tx_start_fw_gen_ops,(void *)cf_arg_132);
    #line 992 
    __VERIFIER_assume(ret == 0);
    #line 993 
    break;
    #line 995 
    case 37: 
             #line 995 
    ;
    #line 996 
    cf_arg_133 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 997 
    cf_arg_133->arg0 = arg0;
    #line 998 
    ret = pthread_create(& emg_thread_133,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_tx_tx_start_int_templates_ops,(void *)cf_arg_133);
    #line 999 
    __VERIFIER_assume(ret == 0);
    #line 1000 
    break;
    #line 1002 
    case 38: 
             #line 1002 
    ;
    #line 1003 
    cf_arg_134 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 1004 
    cf_arg_134->arg0 = arg0;
    #line 1005 
    ret = pthread_create(& emg_thread_134,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_tx_tx_start_null_frame_ops,(void *)cf_arg_134);
    #line 1006 
    __VERIFIER_assume(ret == 0);
    #line 1007 
    break;
    #line 1009 
    case 39: 
             #line 1009 
    ;
    #line 1010 
    cf_arg_135 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 1011 
    cf_arg_135->arg0 = arg0;
    #line 1012 
    ret = pthread_create(& emg_thread_135,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_tx_tx_start_templates_ops,(void *)cf_arg_135);
    #line 1013 
    __VERIFIER_assume(ret == 0);
    #line 1014 
    break;
    #line 1016 
    case 40: 
             #line 1016 
    ;
    #line 1017 
    cf_arg_136 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 1018 
    cf_arg_136->arg0 = arg0;
    #line 1019 
    ret = pthread_create(& emg_thread_136,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_tx_tx_starts_ops,(void *)cf_arg_136);
    #line 1020 
    __VERIFIER_assume(ret == 0);
    #line 1021 
    break;
    #line 1023 
    case 41: 
             #line 1023 
    ;
    #line 1024 
    cf_arg_137 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 1025 
    cf_arg_137->arg0 = arg0;
    #line 1026 
    ret = pthread_create(& emg_thread_137,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_tx_tx_stop_ops,(void *)cf_arg_137);
    #line 1027 
    __VERIFIER_assume(ret == 0);
    #line 1028 
    break;
    #line 1030 
    case 42: 
             #line 1030 
    ;
    #line 1031 
    cf_arg_138 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 1032 
    cf_arg_138->arg0 = arg0;
    #line 1033 
    ret = pthread_create(& emg_thread_138,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_tx_tx_template_prepared_ops,(void *)cf_arg_138);
    #line 1034 
    __VERIFIER_assume(ret == 0);
    #line 1035 
    break;
    #line 1037 
    case 43: 
             #line 1037 
    ;
    #line 1038 
    cf_arg_139 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 1039 
    cf_arg_139->arg0 = arg0;
    #line 1040 
    ret = pthread_create(& emg_thread_139,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_tx_tx_template_programmed_ops,(void *)cf_arg_139);
    #line 1041 
    __VERIFIER_assume(ret == 0);
    #line 1042 
    break;
    #line 1044 
    case 44: 
             #line 1044 
    ;
    #line 1045 
    cf_arg_14 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 1046 
    cf_arg_14->arg0 = arg0;
    #line 1047 
    ret = pthread_create(& emg_thread_14,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_dfs_num_of_radar_detections_ops,(void *)cf_arg_14);
    #line 1048 
    __VERIFIER_assume(ret == 0);
    #line 1049 
    break;
    #line 1051 
    case 45: 
             #line 1051 
    ;
    #line 1052 
    cf_arg_15 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 1053 
    cf_arg_15->arg0 = arg0;
    #line 1054 
    ret = pthread_create(& emg_thread_15,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_diversity_num_of_packets_per_ant_ops,(void *)cf_arg_15);
    #line 1055 
    __VERIFIER_assume(ret == 0);
    #line 1056 
    break;
    #line 1058 
    case 46: 
             #line 1058 
    ;
    #line 1059 
    cf_arg_16 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 1060 
    cf_arg_16->arg0 = arg0;
    #line 1061 
    ret = pthread_create(& emg_thread_16,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_diversity_total_num_of_toggles_ops,(void *)cf_arg_16);
    #line 1062 
    __VERIFIER_assume(ret == 0);
    #line 1063 
    break;
    #line 1065 
    case 47: 
             #line 1065 
    ;
    #line 1066 
    cf_arg_17 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 1067 
    cf_arg_17->arg0 = arg0;
    #line 1068 
    ret = pthread_create(& emg_thread_17,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_dynamic_fw_traces_ops,(void *)cf_arg_17);
    #line 1069 
    __VERIFIER_assume(ret == 0);
    #line 1070 
    break;
    #line 1072 
    case 48: 
             #line 1072 
    ;
    #line 1073 
    cf_arg_18 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 1074 
    cf_arg_18->arg0 = arg0;
    #line 1075 
    ret = pthread_create(& emg_thread_18,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_error_bar_retry_ops,(void *)cf_arg_18);
    #line 1076 
    __VERIFIER_assume(ret == 0);
    #line 1077 
    break;
    #line 1079 
    case 49: 
             #line 1079 
    ;
    #line 1080 
    cf_arg_19 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 1081 
    cf_arg_19->arg0 = arg0;
    #line 1082 
    ret = pthread_create(& emg_thread_19,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_error_burst_mismatch_ops,(void *)cf_arg_19);
    #line 1083 
    __VERIFIER_assume(ret == 0);
    #line 1084 
    break;
    #line 1086 
    case 50: 
             #line 1086 
    ;
    #line 1087 
    cf_arg_20 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 1088 
    cf_arg_20->arg0 = arg0;
    #line 1089 
    ret = pthread_create(& emg_thread_20,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_error_elp_while_nvic_pending_ops,(void *)cf_arg_20);
    #line 1090 
    __VERIFIER_assume(ret == 0);
    #line 1091 
    break;
    #line 1093 
    case 51: 
             #line 1093 
    ;
    #line 1094 
    cf_arg_21 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 1095 
    cf_arg_21->arg0 = arg0;
    #line 1096 
    ret = pthread_create(& emg_thread_21,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_error_elp_while_rx_exch_ops,(void *)cf_arg_21);
    #line 1097 
    __VERIFIER_assume(ret == 0);
    #line 1098 
    break;
    #line 1100 
    case 52: 
             #line 1100 
    ;
    #line 1101 
    cf_arg_22 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 1102 
    cf_arg_22->arg0 = arg0;
    #line 1103 
    ret = pthread_create(& emg_thread_22,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_error_elp_while_tx_exch_ops,(void *)cf_arg_22);
    #line 1104 
    __VERIFIER_assume(ret == 0);
    #line 1105 
    break;
    #line 1107 
    case 53: 
             #line 1107 
    ;
    #line 1108 
    cf_arg_23 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 1109 
    cf_arg_23->arg0 = arg0;
    #line 1110 
    ret = pthread_create(& emg_thread_23,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_error_elp_while_tx_ops,(void *)cf_arg_23);
    #line 1111 
    __VERIFIER_assume(ret == 0);
    #line 1112 
    break;
    #line 1114 
    case 54: 
             #line 1114 
    ;
    #line 1115 
    cf_arg_24 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 1116 
    cf_arg_24->arg0 = arg0;
    #line 1117 
    ret = pthread_create(& emg_thread_24,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_error_error_frame_ctrl_ops,(void *)cf_arg_24);
    #line 1118 
    __VERIFIER_assume(ret == 0);
    #line 1119 
    break;
    #line 1121 
    case 55: 
             #line 1121 
    ;
    #line 1122 
    cf_arg_25 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 1123 
    cf_arg_25->arg0 = arg0;
    #line 1124 
    ret = pthread_create(& emg_thread_25,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_error_error_frame_during_protection_ops,(void *)cf_arg_25);
    #line 1125 
    __VERIFIER_assume(ret == 0);
    #line 1126 
    break;
    #line 1128 
    case 56: 
             #line 1128 
    ;
    #line 1129 
    cf_arg_26 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 1130 
    cf_arg_26->arg0 = arg0;
    #line 1131 
    ret = pthread_create(& emg_thread_26,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_error_error_frame_non_ctrl_ops,(void *)cf_arg_26);
    #line 1132 
    __VERIFIER_assume(ret == 0);
    #line 1133 
    break;
    #line 1135 
    case 57: 
             #line 1135 
    ;
    #line 1136 
    cf_arg_27 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 1137 
    cf_arg_27->arg0 = arg0;
    #line 1138 
    ret = pthread_create(& emg_thread_27,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_error_null_frame_cts_start_ops,(void *)cf_arg_27);
    #line 1139 
    __VERIFIER_assume(ret == 0);
    #line 1140 
    break;
    #line 1142 
    case 58: 
             #line 1142 
    ;
    #line 1143 
    cf_arg_28 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 1144 
    cf_arg_28->arg0 = arg0;
    #line 1145 
    ret = pthread_create(& emg_thread_28,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_error_null_frame_tx_start_ops,(void *)cf_arg_28);
    #line 1146 
    __VERIFIER_assume(ret == 0);
    #line 1147 
    break;
    #line 1149 
    case 59: 
             #line 1149 
    ;
    #line 1150 
    cf_arg_29 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 1151 
    cf_arg_29->arg0 = arg0;
    #line 1152 
    ret = pthread_create(& emg_thread_29,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_error_num_frame_cts_nul_flid_ops,(void *)cf_arg_29);
    #line 1153 
    __VERIFIER_assume(ret == 0);
    #line 1154 
    break;
    #line 1156 
    case 60: 
             #line 1156 
    ;
    #line 1157 
    cf_arg_30 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 1158 
    cf_arg_30->arg0 = arg0;
    #line 1159 
    ret = pthread_create(& emg_thread_30,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_error_rx_cmplt_db_overflow_cnt_ops,(void *)cf_arg_30);
    #line 1160 
    __VERIFIER_assume(ret == 0);
    #line 1161 
    break;
    #line 1163 
    case 61: 
             #line 1163 
    ;
    #line 1164 
    cf_arg_31 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 1165 
    cf_arg_31->arg0 = arg0;
    #line 1166 
    ret = pthread_create(& emg_thread_31,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_error_rx_excessive_frame_len_ops,(void *)cf_arg_31);
    #line 1167 
    __VERIFIER_assume(ret == 0);
    #line 1168 
    break;
    #line 1170 
    case 62: 
             #line 1170 
    ;
    #line 1171 
    cf_arg_32 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 1172 
    cf_arg_32->arg0 = arg0;
    #line 1173 
    ret = pthread_create(& emg_thread_32,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_error_tbc_exch_mismatch_ops,(void *)cf_arg_32);
    #line 1174 
    __VERIFIER_assume(ret == 0);
    #line 1175 
    break;
    #line 1177 
    case 63: 
             #line 1177 
    ;
    #line 1178 
    cf_arg_33 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 1179 
    cf_arg_33->arg0 = arg0;
    #line 1180 
    ret = pthread_create(& emg_thread_33,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_error_tx_abort_failure_ops,(void *)cf_arg_33);
    #line 1181 
    __VERIFIER_assume(ret == 0);
    #line 1182 
    break;
    #line 1184 
    case 64: 
             #line 1184 
    ;
    #line 1185 
    cf_arg_34 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 1186 
    cf_arg_34->arg0 = arg0;
    #line 1187 
    ret = pthread_create(& emg_thread_34,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_error_tx_resume_failure_ops,(void *)cf_arg_34);
    #line 1188 
    __VERIFIER_assume(ret == 0);
    #line 1189 
    break;
    #line 1191 
    case 65: 
             #line 1191 
    ;
    #line 1192 
    cf_arg_35 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 1193 
    cf_arg_35->arg0 = arg0;
    #line 1194 
    ret = pthread_create(& emg_thread_35,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_isr_irqs_ops,(void *)cf_arg_35);
    #line 1195 
    __VERIFIER_assume(ret == 0);
    #line 1196 
    break;
    #line 1198 
    case 66: 
             #line 1198 
    ;
    #line 1199 
    cf_arg_36 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 1200 
    cf_arg_36->arg0 = arg0;
    #line 1201 
    ret = pthread_create(& emg_thread_36,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_pipeline_dec_packet_in_fifo_full_ops,(void *)cf_arg_36);
    #line 1202 
    __VERIFIER_assume(ret == 0);
    #line 1203 
    break;
    #line 1205 
    case 67: 
             #line 1205 
    ;
    #line 1206 
    cf_arg_37 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 1207 
    cf_arg_37->arg0 = arg0;
    #line 1208 
    ret = pthread_create(& emg_thread_37,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_pipeline_dec_packet_in_ops,(void *)cf_arg_37);
    #line 1209 
    __VERIFIER_assume(ret == 0);
    #line 1210 
    break;
    #line 1212 
    case 68: 
             #line 1212 
    ;
    #line 1213 
    cf_arg_38 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 1214 
    cf_arg_38->arg0 = arg0;
    #line 1215 
    ret = pthread_create(& emg_thread_38,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_pipeline_dec_packet_out_ops,(void *)cf_arg_38);
    #line 1216 
    __VERIFIER_assume(ret == 0);
    #line 1217 
    break;
    #line 1219 
    case 69: 
             #line 1219 
    ;
    #line 1220 
    cf_arg_39 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 1221 
    cf_arg_39->arg0 = arg0;
    #line 1222 
    ret = pthread_create(& emg_thread_39,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_pipeline_defrag_to_rx_xfer_swi_ops,(void *)cf_arg_39);
    #line 1223 
    __VERIFIER_assume(ret == 0);
    #line 1224 
    break;
    #line 1226 
    case 70: 
             #line 1226 
    ;
    #line 1227 
    cf_arg_40 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 1228 
    cf_arg_40->arg0 = arg0;
    #line 1229 
    ret = pthread_create(& emg_thread_40,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_pipeline_enc_rx_stat_fifo_int_ops,(void *)cf_arg_40);
    #line 1230 
    __VERIFIER_assume(ret == 0);
    #line 1231 
    break;
    #line 1233 
    case 71: 
             #line 1233 
    ;
    #line 1234 
    cf_arg_41 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 1235 
    cf_arg_41->arg0 = arg0;
    #line 1236 
    ret = pthread_create(& emg_thread_41,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_pipeline_enc_tx_stat_fifo_int_ops,(void *)cf_arg_41);
    #line 1237 
    __VERIFIER_assume(ret == 0);
    #line 1238 
    break;
    #line 1240 
    case 72: 
             #line 1240 
    ;
    #line 1241 
    cf_arg_42 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 1242 
    cf_arg_42->arg0 = arg0;
    #line 1243 
    ret = pthread_create(& emg_thread_42,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_pipeline_hs_tx_stat_fifo_int_ops,(void *)cf_arg_42);
    #line 1244 
    __VERIFIER_assume(ret == 0);
    #line 1245 
    break;
    #line 1247 
    case 73: 
             #line 1247 
    ;
    #line 1248 
    cf_arg_43 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 1249 
    cf_arg_43->arg0 = arg0;
    #line 1250 
    ret = pthread_create(& emg_thread_43,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_pipeline_pipeline_fifo_full_ops,(void *)cf_arg_43);
    #line 1251 
    __VERIFIER_assume(ret == 0);
    #line 1252 
    break;
    #line 1254 
    case 74: 
             #line 1254 
    ;
    #line 1255 
    cf_arg_44 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 1256 
    cf_arg_44->arg0 = arg0;
    #line 1257 
    ret = pthread_create(& emg_thread_44,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_pipeline_post_proc_swi_ops,(void *)cf_arg_44);
    #line 1258 
    __VERIFIER_assume(ret == 0);
    #line 1259 
    break;
    #line 1261 
    case 75: 
             #line 1261 
    ;
    #line 1262 
    cf_arg_45 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 1263 
    cf_arg_45->arg0 = arg0;
    #line 1264 
    ret = pthread_create(& emg_thread_45,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_pipeline_pre_proc_swi_ops,(void *)cf_arg_45);
    #line 1265 
    __VERIFIER_assume(ret == 0);
    #line 1266 
    break;
    #line 1268 
    case 76: 
             #line 1268 
    ;
    #line 1269 
    cf_arg_46 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 1270 
    cf_arg_46->arg0 = arg0;
    #line 1271 
    ret = pthread_create(& emg_thread_46,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_pipeline_pre_to_defrag_swi_ops,(void *)cf_arg_46);
    #line 1272 
    __VERIFIER_assume(ret == 0);
    #line 1273 
    break;
    #line 1275 
    case 77: 
             #line 1275 
    ;
    #line 1276 
    cf_arg_47 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 1277 
    cf_arg_47->arg0 = arg0;
    #line 1278 
    ret = pthread_create(& emg_thread_47,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_pipeline_rx_complete_stat_fifo_int_ops,(void *)cf_arg_47);
    #line 1279 
    __VERIFIER_assume(ret == 0);
    #line 1280 
    break;
    #line 1282 
    case 78: 
             #line 1282 
    ;
    #line 1283 
    cf_arg_48 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 1284 
    cf_arg_48->arg0 = arg0;
    #line 1285 
    ret = pthread_create(& emg_thread_48,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_pipeline_sec_frag_swi_ops,(void *)cf_arg_48);
    #line 1286 
    __VERIFIER_assume(ret == 0);
    #line 1287 
    break;
    #line 1289 
    case 79: 
             #line 1289 
    ;
    #line 1290 
    cf_arg_49 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 1291 
    cf_arg_49->arg0 = arg0;
    #line 1292 
    ret = pthread_create(& emg_thread_49,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_pwr_ap_sleep_active_conf_ops,(void *)cf_arg_49);
    #line 1293 
    __VERIFIER_assume(ret == 0);
    #line 1294 
    break;
    #line 1296 
    case 80: 
             #line 1296 
    ;
    #line 1297 
    cf_arg_50 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 1298 
    cf_arg_50->arg0 = arg0;
    #line 1299 
    ret = pthread_create(& emg_thread_50,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_pwr_ap_sleep_counter_ops,(void *)cf_arg_50);
    #line 1300 
    __VERIFIER_assume(ret == 0);
    #line 1301 
    break;
    #line 1303 
    case 81: 
             #line 1303 
    ;
    #line 1304 
    cf_arg_51 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 1305 
    cf_arg_51->arg0 = arg0;
    #line 1306 
    ret = pthread_create(& emg_thread_51,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_pwr_ap_sleep_user_conf_ops,(void *)cf_arg_51);
    #line 1307 
    __VERIFIER_assume(ret == 0);
    #line 1308 
    break;
    #line 1310 
    case 82: 
             #line 1310 
    ;
    #line 1311 
    cf_arg_52 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 1312 
    cf_arg_52->arg0 = arg0;
    #line 1313 
    ret = pthread_create(& emg_thread_52,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_pwr_connection_out_of_sync_ops,(void *)cf_arg_52);
    #line 1314 
    __VERIFIER_assume(ret == 0);
    #line 1315 
    break;
    #line 1317 
    case 83: 
             #line 1317 
    ;
    #line 1318 
    cf_arg_53 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 1319 
    cf_arg_53->arg0 = arg0;
    #line 1320 
    ret = pthread_create(& emg_thread_53,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_pwr_cont_miss_bcns_spread_ops,(void *)cf_arg_53);
    #line 1321 
    __VERIFIER_assume(ret == 0);
    #line 1322 
    break;
    #line 1324 
    case 84: 
             #line 1324 
    ;
    #line 1325 
    cf_arg_54 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 1326 
    cf_arg_54->arg0 = arg0;
    #line 1327 
    ret = pthread_create(& emg_thread_54,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_pwr_missing_bcns_cnt_ops,(void *)cf_arg_54);
    #line 1328 
    __VERIFIER_assume(ret == 0);
    #line 1329 
    break;
    #line 1331 
    case 85: 
             #line 1331 
    ;
    #line 1332 
    cf_arg_55 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 1333 
    cf_arg_55->arg0 = arg0;
    #line 1334 
    ret = pthread_create(& emg_thread_55,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_pwr_rcvd_awake_bcns_cnt_ops,(void *)cf_arg_55);
    #line 1335 
    __VERIFIER_assume(ret == 0);
    #line 1336 
    break;
    #line 1338 
    case 86: 
             #line 1338 
    ;
    #line 1339 
    cf_arg_56 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 1340 
    cf_arg_56->arg0 = arg0;
    #line 1341 
    ret = pthread_create(& emg_thread_56,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_pwr_rcvd_bcns_cnt_ops,(void *)cf_arg_56);
    #line 1342 
    __VERIFIER_assume(ret == 0);
    #line 1343 
    break;
    #line 1345 
    case 87: 
             #line 1345 
    ;
    #line 1346 
    cf_arg_57 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 1347 
    cf_arg_57->arg0 = arg0;
    #line 1348 
    ret = pthread_create(& emg_thread_57,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_pwr_sleep_cycle_avg_ops,(void *)cf_arg_57);
    #line 1349 
    __VERIFIER_assume(ret == 0);
    #line 1350 
    break;
    #line 1352 
    case 88: 
             #line 1352 
    ;
    #line 1353 
    cf_arg_58 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 1354 
    cf_arg_58->arg0 = arg0;
    #line 1355 
    ret = pthread_create(& emg_thread_58,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_pwr_sleep_percent_ops,(void *)cf_arg_58);
    #line 1356 
    __VERIFIER_assume(ret == 0);
    #line 1357 
    break;
    #line 1359 
    case 89: 
             #line 1359 
    ;
    #line 1360 
    cf_arg_59 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 1361 
    cf_arg_59->arg0 = arg0;
    #line 1362 
    ret = pthread_create(& emg_thread_59,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_pwr_sleep_time_avg_ops,(void *)cf_arg_59);
    #line 1363 
    __VERIFIER_assume(ret == 0);
    #line 1364 
    break;
    #line 1366 
    case 90: 
             #line 1366 
    ;
    #line 1367 
    cf_arg_60 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 1368 
    cf_arg_60->arg0 = arg0;
    #line 1369 
    ret = pthread_create(& emg_thread_60,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_pwr_sleep_time_count_ops,(void *)cf_arg_60);
    #line 1370 
    __VERIFIER_assume(ret == 0);
    #line 1371 
    break;
    #line 1373 
    case 91: 
             #line 1373 
    ;
    #line 1374 
    cf_arg_61 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 1375 
    cf_arg_61->arg0 = arg0;
    #line 1376 
    ret = pthread_create(& emg_thread_61,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_radar_debug_mode_ops,(void *)cf_arg_61);
    #line 1377 
    __VERIFIER_assume(ret == 0);
    #line 1378 
    break;
    #line 1380 
    case 92: 
             #line 1380 
    ;
    #line 1381 
    cf_arg_62 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 1382 
    cf_arg_62->arg0 = arg0;
    #line 1383 
    ret = pthread_create(& emg_thread_62,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_radar_detection_ops,(void *)cf_arg_62);
    #line 1384 
    __VERIFIER_assume(ret == 0);
    #line 1385 
    break;
    #line 1387 
    case 93: 
             #line 1387 
    ;
    #line 1388 
    cf_arg_63 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 1389 
    cf_arg_63->arg0 = arg0;
    #line 1390 
    ret = pthread_create(& emg_thread_63,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_roaming_rssi_level_ops,(void *)cf_arg_63);
    #line 1391 
    __VERIFIER_assume(ret == 0);
    #line 1392 
    break;
    #line 1394 
    case 94: 
             #line 1394 
    ;
    #line 1395 
    cf_arg_64 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 1396 
    cf_arg_64->arg0 = arg0;
    #line 1397 
    ret = pthread_create(& emg_thread_64,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_rx_decrypt_key_not_found_ops,(void *)cf_arg_64);
    #line 1398 
    __VERIFIER_assume(ret == 0);
    #line 1399 
    break;
    #line 1401 
    case 95: 
             #line 1401 
    ;
    #line 1402 
    cf_arg_65 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 1403 
    cf_arg_65->arg0 = arg0;
    #line 1404 
    ret = pthread_create(& emg_thread_65,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_rx_defrag_called_ops,(void *)cf_arg_65);
    #line 1405 
    __VERIFIER_assume(ret == 0);
    #line 1406 
    break;
    #line 1408 
    case 96: 
             #line 1408 
    ;
    #line 1409 
    cf_arg_66 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 1410 
    cf_arg_66->arg0 = arg0;
    #line 1411 
    ret = pthread_create(& emg_thread_66,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_rx_defrag_decrypt_failed_ops,(void *)cf_arg_66);
    #line 1412 
    __VERIFIER_assume(ret == 0);
    #line 1413 
    break;
    #line 1415 
    case 97: 
             #line 1415 
    ;
    #line 1416 
    cf_arg_67 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 1417 
    cf_arg_67->arg0 = arg0;
    #line 1418 
    ret = pthread_create(& emg_thread_67,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_rx_defrag_in_process_called_ops,(void *)cf_arg_67);
    #line 1419 
    __VERIFIER_assume(ret == 0);
    #line 1420 
    break;
    #line 1422 
    case 98: 
             #line 1422 
    ;
    #line 1423 
    cf_arg_68 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 1424 
    cf_arg_68->arg0 = arg0;
    #line 1425 
    ret = pthread_create(& emg_thread_68,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_rx_defrag_init_called_ops,(void *)cf_arg_68);
    #line 1426 
    __VERIFIER_assume(ret == 0);
    #line 1427 
    break;
    #line 1429 
    case 99: 
             #line 1429 
    ;
    #line 1430 
    cf_arg_69 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 1431 
    cf_arg_69->arg0 = arg0;
    #line 1432 
    ret = pthread_create(& emg_thread_69,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_rx_defrag_need_decrypt_ops,(void *)cf_arg_69);
    #line 1433 
    __VERIFIER_assume(ret == 0);
    #line 1434 
    break;
    #line 1436 
    case 100: 
              #line 1436 
    ;
    #line 1437 
    cf_arg_7 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 1438 
    cf_arg_7->arg0 = arg0;
    #line 1439 
    ret = pthread_create(& emg_thread_7,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_aggr_size_rx_size_ops,(void *)cf_arg_7);
    #line 1440 
    __VERIFIER_assume(ret == 0);
    #line 1441 
    break;
    #line 1443 
    case 101: 
              #line 1443 
    ;
    #line 1444 
    cf_arg_70 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 1445 
    cf_arg_70->arg0 = arg0;
    #line 1446 
    ret = pthread_create(& emg_thread_70,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_rx_defrag_need_defrag_ops,(void *)cf_arg_70);
    #line 1447 
    __VERIFIER_assume(ret == 0);
    #line 1448 
    break;
    #line 1450 
    case 102: 
              #line 1450 
    ;
    #line 1451 
    cf_arg_71 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 1452 
    cf_arg_71->arg0 = arg0;
    #line 1453 
    ret = pthread_create(& emg_thread_71,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_rx_defrag_tkip_called_ops,(void *)cf_arg_71);
    #line 1454 
    __VERIFIER_assume(ret == 0);
    #line 1455 
    break;
    #line 1457 
    case 103: 
              #line 1457 
    ;
    #line 1458 
    cf_arg_72 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 1459 
    cf_arg_72->arg0 = arg0;
    #line 1460 
    ret = pthread_create(& emg_thread_72,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_rx_filter_accum_arp_pend_requests_ops,(void *)cf_arg_72);
    #line 1461 
    __VERIFIER_assume(ret == 0);
    #line 1462 
    break;
    #line 1464 
    case 104: 
              #line 1464 
    ;
    #line 1465 
    cf_arg_73 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 1466 
    cf_arg_73->arg0 = arg0;
    #line 1467 
    ret = pthread_create(& emg_thread_73,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_rx_filter_arp_filter_ops,(void *)cf_arg_73);
    #line 1468 
    __VERIFIER_assume(ret == 0);
    #line 1469 
    break;
    #line 1471 
    case 105: 
              #line 1471 
    ;
    #line 1472 
    cf_arg_74 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 1473 
    cf_arg_74->arg0 = arg0;
    #line 1474 
    ret = pthread_create(& emg_thread_74,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_rx_filter_beacon_filter_ops,(void *)cf_arg_74);
    #line 1475 
    __VERIFIER_assume(ret == 0);
    #line 1476 
    break;
    #line 1478 
    case 106: 
              #line 1478 
    ;
    #line 1479 
    cf_arg_75 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 1480 
    cf_arg_75->arg0 = arg0;
    #line 1481 
    ret = pthread_create(& emg_thread_75,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_rx_filter_data_filter_ops,(void *)cf_arg_75);
    #line 1482 
    __VERIFIER_assume(ret == 0);
    #line 1483 
    break;
    #line 1485 
    case 107: 
              #line 1485 
    ;
    #line 1486 
    cf_arg_76 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 1487 
    cf_arg_76->arg0 = arg0;
    #line 1488 
    ret = pthread_create(& emg_thread_76,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_rx_filter_dup_filter_ops,(void *)cf_arg_76);
    #line 1489 
    __VERIFIER_assume(ret == 0);
    #line 1490 
    break;
    #line 1492 
    case 108: 
              #line 1492 
    ;
    #line 1493 
    cf_arg_77 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 1494 
    cf_arg_77->arg0 = arg0;
    #line 1495 
    ret = pthread_create(& emg_thread_77,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_rx_filter_ibss_filter_ops,(void *)cf_arg_77);
    #line 1496 
    __VERIFIER_assume(ret == 0);
    #line 1497 
    break;
    #line 1499 
    case 109: 
              #line 1499 
    ;
    #line 1500 
    cf_arg_78 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 1501 
    cf_arg_78->arg0 = arg0;
    #line 1502 
    ret = pthread_create(& emg_thread_78,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_rx_filter_max_arp_queue_dep_ops,(void *)cf_arg_78);
    #line 1503 
    __VERIFIER_assume(ret == 0);
    #line 1504 
    break;
    #line 1506 
    case 110: 
              #line 1506 
    ;
    #line 1507 
    cf_arg_79 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 1508 
    cf_arg_79->arg0 = arg0;
    #line 1509 
    ret = pthread_create(& emg_thread_79,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_rx_filter_mc_filter_ops,(void *)cf_arg_79);
    #line 1510 
    __VERIFIER_assume(ret == 0);
    #line 1511 
    break;
    #line 1513 
    case 111: 
              #line 1513 
    ;
    #line 1514 
    cf_arg_8 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 1515 
    cf_arg_8->arg0 = arg0;
    #line 1516 
    ret = pthread_create(& emg_thread_8,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_aggr_size_tx_agg_len_ops,(void *)cf_arg_8);
    #line 1517 
    __VERIFIER_assume(ret == 0);
    #line 1518 
    break;
    #line 1520 
    case 112: 
              #line 1520 
    ;
    #line 1521 
    cf_arg_80 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 1522 
    cf_arg_80->arg0 = arg0;
    #line 1523 
    ret = pthread_create(& emg_thread_80,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_rx_filter_protection_filter_ops,(void *)cf_arg_80);
    #line 1524 
    __VERIFIER_assume(ret == 0);
    #line 1525 
    break;
    #line 1527 
    case 113: 
              #line 1527 
    ;
    #line 1528 
    cf_arg_81 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 1529 
    cf_arg_81->arg0 = arg0;
    #line 1530 
    ret = pthread_create(& emg_thread_81,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_rx_rate_rx_frames_per_rates_ops,(void *)cf_arg_81);
    #line 1531 
    __VERIFIER_assume(ret == 0);
    #line 1532 
    break;
    #line 1534 
    case 114: 
              #line 1534 
    ;
    #line 1535 
    cf_arg_82 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 1536 
    cf_arg_82->arg0 = arg0;
    #line 1537 
    ret = pthread_create(& emg_thread_82,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_rx_rx_beacon_early_term_ops,(void *)cf_arg_82);
    #line 1538 
    __VERIFIER_assume(ret == 0);
    #line 1539 
    break;
    #line 1541 
    case 115: 
              #line 1541 
    ;
    #line 1542 
    cf_arg_83 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 1543 
    cf_arg_83->arg0 = arg0;
    #line 1544 
    ret = pthread_create(& emg_thread_83,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_rx_rx_cmplt_ops,(void *)cf_arg_83);
    #line 1545 
    __VERIFIER_assume(ret == 0);
    #line 1546 
    break;
    #line 1548 
    case 116: 
              #line 1548 
    ;
    #line 1549 
    cf_arg_84 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 1550 
    cf_arg_84->arg0 = arg0;
    #line 1551 
    ret = pthread_create(& emg_thread_84,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_rx_rx_cmplt_task_ops,(void *)cf_arg_84);
    #line 1552 
    __VERIFIER_assume(ret == 0);
    #line 1553 
    break;
    #line 1555 
    case 117: 
              #line 1555 
    ;
    #line 1556 
    cf_arg_85 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 1557 
    cf_arg_85->arg0 = arg0;
    #line 1558 
    ret = pthread_create(& emg_thread_85,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_rx_rx_defrag_end_ops,(void *)cf_arg_85);
    #line 1559 
    __VERIFIER_assume(ret == 0);
    #line 1560 
    break;
    #line 1562 
    case 118: 
              #line 1562 
    ;
    #line 1563 
    cf_arg_86 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 1564 
    cf_arg_86->arg0 = arg0;
    #line 1565 
    ret = pthread_create(& emg_thread_86,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_rx_rx_defrag_ops,(void *)cf_arg_86);
    #line 1566 
    __VERIFIER_assume(ret == 0);
    #line 1567 
    break;
    #line 1569 
    case 119: 
              #line 1569 
    ;
    #line 1570 
    cf_arg_87 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 1571 
    cf_arg_87->arg0 = arg0;
    #line 1572 
    ret = pthread_create(& emg_thread_87,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_rx_rx_done_ops,(void *)cf_arg_87);
    #line 1573 
    __VERIFIER_assume(ret == 0);
    #line 1574 
    break;
    #line 1576 
    case 120: 
              #line 1576 
    ;
    #line 1577 
    cf_arg_88 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 1578 
    cf_arg_88->arg0 = arg0;
    #line 1579 
    ret = pthread_create(& emg_thread_88,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_rx_rx_dropped_frame_ops,(void *)cf_arg_88);
    #line 1580 
    __VERIFIER_assume(ret == 0);
    #line 1581 
    break;
    #line 1583 
    case 121: 
              #line 1583 
    ;
    #line 1584 
    cf_arg_89 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 1585 
    cf_arg_89->arg0 = arg0;
    #line 1586 
    ret = pthread_create(& emg_thread_89,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_rx_rx_hdr_overflow_ops,(void *)cf_arg_89);
    #line 1587 
    __VERIFIER_assume(ret == 0);
    #line 1588 
    break;
    #line 1590 
    case 122: 
              #line 1590 
    ;
    #line 1591 
    cf_arg_9 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 1592 
    cf_arg_9->arg0 = arg0;
    #line 1593 
    ret = pthread_create(& emg_thread_9,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_aggr_size_tx_agg_rate_ops,(void *)cf_arg_9);
    #line 1594 
    __VERIFIER_assume(ret == 0);
    #line 1595 
    break;
    #line 1597 
    case 123: 
              #line 1597 
    ;
    #line 1598 
    cf_arg_90 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 1599 
    cf_arg_90->arg0 = arg0;
    #line 1600 
    ret = pthread_create(& emg_thread_90,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_rx_rx_out_of_mpdu_nodes_ops,(void *)cf_arg_90);
    #line 1601 
    __VERIFIER_assume(ret == 0);
    #line 1602 
    break;
    #line 1604 
    case 124: 
              #line 1604 
    ;
    #line 1605 
    cf_arg_91 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 1606 
    cf_arg_91->arg0 = arg0;
    #line 1607 
    ret = pthread_create(& emg_thread_91,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_rx_rx_phy_hdr_ops,(void *)cf_arg_91);
    #line 1608 
    __VERIFIER_assume(ret == 0);
    #line 1609 
    break;
    #line 1611 
    case 125: 
              #line 1611 
    ;
    #line 1612 
    cf_arg_92 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 1613 
    cf_arg_92->arg0 = arg0;
    #line 1614 
    ret = pthread_create(& emg_thread_92,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_rx_rx_pre_complt_ops,(void *)cf_arg_92);
    #line 1615 
    __VERIFIER_assume(ret == 0);
    #line 1616 
    break;
    #line 1618 
    case 126: 
              #line 1618 
    ;
    #line 1619 
    cf_arg_93 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 1620 
    cf_arg_93->arg0 = arg0;
    #line 1621 
    ret = pthread_create(& emg_thread_93,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_rx_rx_rts_timeout_ops,(void *)cf_arg_93);
    #line 1622 
    __VERIFIER_assume(ret == 0);
    #line 1623 
    break;
    #line 1625 
    case 127: 
              #line 1625 
    ;
    #line 1626 
    cf_arg_94 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 1627 
    cf_arg_94->arg0 = arg0;
    #line 1628 
    ret = pthread_create(& emg_thread_94,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_rx_rx_timeout_ops,(void *)cf_arg_94);
    #line 1629 
    __VERIFIER_assume(ret == 0);
    #line 1630 
    break;
    #line 1632 
    case 128: 
              #line 1632 
    ;
    #line 1633 
    cf_arg_95 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 1634 
    cf_arg_95->arg0 = arg0;
    #line 1635 
    ret = pthread_create(& emg_thread_95,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_rx_rx_timeout_wa_ops,(void *)cf_arg_95);
    #line 1636 
    __VERIFIER_assume(ret == 0);
    #line 1637 
    break;
    #line 1639 
    case 129: 
              #line 1639 
    ;
    #line 1640 
    cf_arg_96 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 1641 
    cf_arg_96->arg0 = arg0;
    #line 1642 
    ret = pthread_create(& emg_thread_96,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_rx_rx_tkip_replays_ops,(void *)cf_arg_96);
    #line 1643 
    __VERIFIER_assume(ret == 0);
    #line 1644 
    break;
    #line 1646 
    case 130: 
              #line 1646 
    ;
    #line 1647 
    cf_arg_97 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 1648 
    cf_arg_97->arg0 = arg0;
    #line 1649 
    ret = pthread_create(& emg_thread_97,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_rx_rx_xfr_ops,(void *)cf_arg_97);
    #line 1650 
    __VERIFIER_assume(ret == 0);
    #line 1651 
    break;
    #line 1653 
    case 131: 
              #line 1653 
    ;
    #line 1654 
    cf_arg_98 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 1655 
    cf_arg_98->arg0 = arg0;
    #line 1656 
    ret = pthread_create(& emg_thread_98,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_thermal_adc_source_unexpected_ops,(void *)cf_arg_98);
    #line 1657 
    __VERIFIER_assume(ret == 0);
    #line 1658 
    break;
    #line 1660 
    case 132: 
              #line 1660 
    ;
    #line 1661 
    cf_arg_99 = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)ldv_xmalloc(16UL);
    #line 1662 
    cf_arg_99->arg0 = arg0;
    #line 1663 
    ret = pthread_create(& emg_thread_99,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_thermal_false_irq_ops,(void *)cf_arg_99);
    #line 1664 
    __VERIFIER_assume(ret == 0);
    #line 1665 
    break;
    #line 1667 
    default: 
             #line 1667 
    ;
    #line 1667 
    __VERIFIER_assume(0);
  }
  #line 1669 
  return;
}

#line 1673  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_deregister_5(struct platform_driver *arg0)
{
  #line 1674 
  int ret;
  #line 1675 
  struct emg_struct_platform_instance_wl18xx_driver_140 *cf_arg_140;
  #line 1676 
  ret = pthread_join(emg_thread_140,(void **)0);
  #line 1677 
  __VERIFIER_assume(ret == 0);
  #line 1678 
  return;
}

#line 1682  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_aggr_size_rx_size_ops(void *arg0)
{
  #line 1685 
  struct file_operations *emg_7_container;
  #line 1686 
  long long emg_7_emg_param_1_0;
  #line 1687 
  char *emg_7_emg_param_1_2;
  #line 1688 
  char *emg_7_emg_param_1_4;
  #line 1689 
  int emg_7_emg_param_2_1;
  #line 1690 
  long long *emg_7_emg_param_3_3;
  #line 1691 
  long long *emg_7_emg_param_3_5;
  #line 1692 
  struct file *emg_7_resource_0;
  #line 1693 
  struct inode *emg_7_resource_1;
  #line 1694 
  int emg_7_ret;
  #line 1695 
  unsigned long emg_7_size_cnt;
  #line 1696 
  int emg_repeat_cnt_main_7_1 = 1;
  #line 1697 
  int emg_repeat_cnt_call_7 = 1;
  #line 1698 
  int emg_repeat_cnt_main_7_0 = 1;
  #line 1700 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 1704 
  emg_7_ret = ldv_undef_int();
  #line 1705 
  emg_7_container = emg_alias_aggr_size_rx_size_ops;
  #line 1706 
  emg_7_ret = ldv_undef_int();
  #line 1708 
  __VERIFIER_assume(data->arg0 == emg_alias_aggr_size_rx_size_ops);
  #line 1710 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 1711 
    emg_7_container = data->arg0;
    #line 1712 
    ldv_free((void *)data);
  }
  #line 1717 
  emg_7_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 1718 
  emg_7_size_cnt = (unsigned long)ldv_undef_int();
  #line 1722 
  goto emg_main_7;
  #line 1726 
  return (void *)0;
  #line 1729 
  emg_call_7: 
              #line 1729 
  ;
  #line 1730 
  if (ldv_undef_int() != 0) {
    #line 1731 
    switch (ldv_undef_int()) {
      #line 1732 
      case 0: 
              #line 1732 
      ;
      #line 1734 
      emg_7_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 1734 
      emg_7_emg_param_1_2 = emg_7_emg_param_1_2;
      #line 1735 
      emg_7_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 1735 
      emg_7_emg_param_3_3 = emg_7_emg_param_3_3;
      #line 1739 
      emg_wrapper_aggr_size_rx_size_read(emg_7_resource_0,emg_7_emg_param_1_2,emg_7_size_cnt,emg_7_emg_param_3_3);
      #line 1743 
      ldv_free((void *)emg_7_emg_param_1_2);
      #line 1744 
      ldv_free((void *)emg_7_emg_param_3_3);
      #line 1746 
      break;
      #line 1748 
      case 1: 
              #line 1748 
      ;
      #line 1750 
      generic_file_llseek(emg_7_resource_0,emg_7_emg_param_1_0,emg_7_emg_param_2_1);
      #line 1752 
      break;
      #line 1754 
      case 2: 
              #line 1754 
      ;
      #line 1761 
      __VERIFIER_assume(emg_7_size_cnt <= 2147479552UL);
      #line 1762 
      emg_7_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 1762 
      emg_7_emg_param_1_4 = emg_7_emg_param_1_4;
      #line 1763 
      emg_7_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 1763 
      emg_7_emg_param_3_5 = emg_7_emg_param_3_5;
      #line 1767 
      if (emg_7_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 1768 
        (*(emg_7_container->write))(emg_7_resource_0,emg_7_emg_param_1_4,emg_7_size_cnt,emg_7_emg_param_3_5);
      #line 1773 
      ldv_free((void *)emg_7_emg_param_1_4);
      #line 1774 
      ldv_free((void *)emg_7_emg_param_3_5);
      #line 1776 
      break;
      #line 1778 
      default: 
               #line 1778 
      ;
      #line 1778 
      __VERIFIER_assume(0);
    }
    #line 1781 
    if (emg_repeat_cnt_call_7 > 0) {
      #line 1782 
      emg_repeat_cnt_call_7 --;
      #line 1784 
      goto emg_call_7;
    }
    else 
         #line 1786 
         __VERIFIER_assume(0);
  }
  else {
    #line 1792 
    if (emg_7_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 1793 
      (*(emg_7_container->release))(emg_7_resource_1,emg_7_resource_0);
    #line 1797 
    if (emg_repeat_cnt_main_7_0 > 0) {
      #line 1798 
      emg_repeat_cnt_main_7_0 --;
      #line 1800 
      goto emg_main_7;
    }
    else 
         #line 1802 
         __VERIFIER_assume(0);
  }
  #line 1808 
  return (void *)0;
  #line 1811 
  emg_main_7: 
              #line 1811 
  ;
  #line 1812 
  if (ldv_undef_int() != 0) {
    #line 1814 
    emg_7_ret = simple_open(emg_7_resource_1,emg_7_resource_0);
    #line 1819 
    emg_7_ret = ldv_filter_err_code(emg_7_ret);
    #line 1822 
    if (ldv_undef_int() != 0) {
      #line 1824 
      __VERIFIER_assume(emg_7_ret == 0);
      #line 1828 
      goto emg_call_7;
    }
    else {
      #line 1833 
      __VERIFIER_assume(emg_7_ret != 0);
      #line 1836 
      if (emg_repeat_cnt_main_7_1 > 0) {
        #line 1837 
        emg_repeat_cnt_main_7_1 --;
        #line 1839 
        goto emg_main_7;
      }
      else 
           #line 1841 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 1848 
       ldv_free((void *)emg_7_resource_0);
  #line 1856 
  return (void *)0;
}

#line 1861  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_aggr_size_tx_agg_len_ops(void *arg0)
{
  #line 1864 
  struct file_operations *emg_8_container;
  #line 1865 
  long long emg_8_emg_param_1_0;
  #line 1866 
  char *emg_8_emg_param_1_2;
  #line 1867 
  char *emg_8_emg_param_1_4;
  #line 1868 
  int emg_8_emg_param_2_1;
  #line 1869 
  long long *emg_8_emg_param_3_3;
  #line 1870 
  long long *emg_8_emg_param_3_5;
  #line 1871 
  struct file *emg_8_resource_0;
  #line 1872 
  struct inode *emg_8_resource_1;
  #line 1873 
  int emg_8_ret;
  #line 1874 
  unsigned long emg_8_size_cnt;
  #line 1875 
  int emg_repeat_cnt_call_8 = 1;
  #line 1876 
  int emg_repeat_cnt_main_8_0 = 1;
  #line 1877 
  int emg_repeat_cnt_main_8_1 = 1;
  #line 1879 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 1883 
  emg_8_ret = ldv_undef_int();
  #line 1884 
  emg_8_container = emg_alias_aggr_size_tx_agg_len_ops;
  #line 1885 
  emg_8_ret = ldv_undef_int();
  #line 1887 
  __VERIFIER_assume(data->arg0 == emg_alias_aggr_size_tx_agg_len_ops);
  #line 1889 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 1890 
    emg_8_container = data->arg0;
    #line 1891 
    ldv_free((void *)data);
  }
  #line 1896 
  emg_8_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 1897 
  emg_8_size_cnt = (unsigned long)ldv_undef_int();
  #line 1901 
  goto emg_main_8;
  #line 1905 
  return (void *)0;
  #line 1908 
  emg_call_8: 
              #line 1908 
  ;
  #line 1909 
  if (ldv_undef_int() != 0) {
    #line 1910 
    switch (ldv_undef_int()) {
      #line 1911 
      case 0: 
              #line 1911 
      ;
      #line 1913 
      emg_8_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 1913 
      emg_8_emg_param_1_2 = emg_8_emg_param_1_2;
      #line 1914 
      emg_8_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 1914 
      emg_8_emg_param_3_3 = emg_8_emg_param_3_3;
      #line 1918 
      emg_wrapper_aggr_size_tx_agg_len_read(emg_8_resource_0,emg_8_emg_param_1_2,emg_8_size_cnt,emg_8_emg_param_3_3);
      #line 1922 
      ldv_free((void *)emg_8_emg_param_1_2);
      #line 1923 
      ldv_free((void *)emg_8_emg_param_3_3);
      #line 1925 
      break;
      #line 1927 
      case 1: 
              #line 1927 
      ;
      #line 1929 
      generic_file_llseek(emg_8_resource_0,emg_8_emg_param_1_0,emg_8_emg_param_2_1);
      #line 1931 
      break;
      #line 1933 
      case 2: 
              #line 1933 
      ;
      #line 1940 
      __VERIFIER_assume(emg_8_size_cnt <= 2147479552UL);
      #line 1941 
      emg_8_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 1941 
      emg_8_emg_param_1_4 = emg_8_emg_param_1_4;
      #line 1942 
      emg_8_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 1942 
      emg_8_emg_param_3_5 = emg_8_emg_param_3_5;
      #line 1946 
      if (emg_8_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 1947 
        (*(emg_8_container->write))(emg_8_resource_0,emg_8_emg_param_1_4,emg_8_size_cnt,emg_8_emg_param_3_5);
      #line 1952 
      ldv_free((void *)emg_8_emg_param_1_4);
      #line 1953 
      ldv_free((void *)emg_8_emg_param_3_5);
      #line 1955 
      break;
      #line 1957 
      default: 
               #line 1957 
      ;
      #line 1957 
      __VERIFIER_assume(0);
    }
    #line 1960 
    if (emg_repeat_cnt_call_8 > 0) {
      #line 1961 
      emg_repeat_cnt_call_8 --;
      #line 1963 
      goto emg_call_8;
    }
    else 
         #line 1965 
         __VERIFIER_assume(0);
  }
  else {
    #line 1971 
    if (emg_8_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 1972 
      (*(emg_8_container->release))(emg_8_resource_1,emg_8_resource_0);
    #line 1976 
    if (emg_repeat_cnt_main_8_0 > 0) {
      #line 1977 
      emg_repeat_cnt_main_8_0 --;
      #line 1979 
      goto emg_main_8;
    }
    else 
         #line 1981 
         __VERIFIER_assume(0);
  }
  #line 1987 
  return (void *)0;
  #line 1990 
  emg_main_8: 
              #line 1990 
  ;
  #line 1991 
  if (ldv_undef_int() != 0) {
    #line 1993 
    emg_8_ret = simple_open(emg_8_resource_1,emg_8_resource_0);
    #line 1998 
    emg_8_ret = ldv_filter_err_code(emg_8_ret);
    #line 2001 
    if (ldv_undef_int() != 0) {
      #line 2003 
      __VERIFIER_assume(emg_8_ret == 0);
      #line 2007 
      goto emg_call_8;
    }
    else {
      #line 2012 
      __VERIFIER_assume(emg_8_ret != 0);
      #line 2015 
      if (emg_repeat_cnt_main_8_1 > 0) {
        #line 2016 
        emg_repeat_cnt_main_8_1 --;
        #line 2018 
        goto emg_main_8;
      }
      else 
           #line 2020 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 2027 
       ldv_free((void *)emg_8_resource_0);
  #line 2035 
  return (void *)0;
}

#line 2040  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_aggr_size_tx_agg_rate_ops(void *arg0)
{
  #line 2043 
  struct file_operations *emg_9_container;
  #line 2044 
  long long emg_9_emg_param_1_0;
  #line 2045 
  char *emg_9_emg_param_1_2;
  #line 2046 
  char *emg_9_emg_param_1_4;
  #line 2047 
  int emg_9_emg_param_2_1;
  #line 2048 
  long long *emg_9_emg_param_3_3;
  #line 2049 
  long long *emg_9_emg_param_3_5;
  #line 2050 
  struct file *emg_9_resource_0;
  #line 2051 
  struct inode *emg_9_resource_1;
  #line 2052 
  int emg_9_ret;
  #line 2053 
  unsigned long emg_9_size_cnt;
  #line 2054 
  int emg_repeat_cnt_main_9_1 = 1;
  #line 2055 
  int emg_repeat_cnt_call_9 = 1;
  #line 2056 
  int emg_repeat_cnt_main_9_0 = 1;
  #line 2058 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 2062 
  emg_9_ret = ldv_undef_int();
  #line 2063 
  emg_9_container = emg_alias_aggr_size_tx_agg_rate_ops;
  #line 2064 
  emg_9_ret = ldv_undef_int();
  #line 2066 
  __VERIFIER_assume(data->arg0 == emg_alias_aggr_size_tx_agg_rate_ops);
  #line 2068 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 2069 
    emg_9_container = data->arg0;
    #line 2070 
    ldv_free((void *)data);
  }
  #line 2075 
  emg_9_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 2076 
  emg_9_size_cnt = (unsigned long)ldv_undef_int();
  #line 2080 
  goto emg_main_9;
  #line 2084 
  return (void *)0;
  #line 2087 
  emg_call_9: 
              #line 2087 
  ;
  #line 2088 
  if (ldv_undef_int() != 0) {
    #line 2089 
    switch (ldv_undef_int()) {
      #line 2090 
      case 0: 
              #line 2090 
      ;
      #line 2092 
      emg_9_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 2092 
      emg_9_emg_param_1_2 = emg_9_emg_param_1_2;
      #line 2093 
      emg_9_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 2093 
      emg_9_emg_param_3_3 = emg_9_emg_param_3_3;
      #line 2097 
      emg_wrapper_aggr_size_tx_agg_rate_read(emg_9_resource_0,emg_9_emg_param_1_2,emg_9_size_cnt,emg_9_emg_param_3_3);
      #line 2101 
      ldv_free((void *)emg_9_emg_param_1_2);
      #line 2102 
      ldv_free((void *)emg_9_emg_param_3_3);
      #line 2104 
      break;
      #line 2106 
      case 1: 
              #line 2106 
      ;
      #line 2108 
      generic_file_llseek(emg_9_resource_0,emg_9_emg_param_1_0,emg_9_emg_param_2_1);
      #line 2110 
      break;
      #line 2112 
      case 2: 
              #line 2112 
      ;
      #line 2119 
      __VERIFIER_assume(emg_9_size_cnt <= 2147479552UL);
      #line 2120 
      emg_9_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 2120 
      emg_9_emg_param_1_4 = emg_9_emg_param_1_4;
      #line 2121 
      emg_9_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 2121 
      emg_9_emg_param_3_5 = emg_9_emg_param_3_5;
      #line 2125 
      if (emg_9_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 2126 
        (*(emg_9_container->write))(emg_9_resource_0,emg_9_emg_param_1_4,emg_9_size_cnt,emg_9_emg_param_3_5);
      #line 2131 
      ldv_free((void *)emg_9_emg_param_1_4);
      #line 2132 
      ldv_free((void *)emg_9_emg_param_3_5);
      #line 2134 
      break;
      #line 2136 
      default: 
               #line 2136 
      ;
      #line 2136 
      __VERIFIER_assume(0);
    }
    #line 2139 
    if (emg_repeat_cnt_call_9 > 0) {
      #line 2140 
      emg_repeat_cnt_call_9 --;
      #line 2142 
      goto emg_call_9;
    }
    else 
         #line 2144 
         __VERIFIER_assume(0);
  }
  else {
    #line 2150 
    if (emg_9_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 2151 
      (*(emg_9_container->release))(emg_9_resource_1,emg_9_resource_0);
    #line 2155 
    if (emg_repeat_cnt_main_9_0 > 0) {
      #line 2156 
      emg_repeat_cnt_main_9_0 --;
      #line 2158 
      goto emg_main_9;
    }
    else 
         #line 2160 
         __VERIFIER_assume(0);
  }
  #line 2166 
  return (void *)0;
  #line 2169 
  emg_main_9: 
              #line 2169 
  ;
  #line 2170 
  if (ldv_undef_int() != 0) {
    #line 2172 
    emg_9_ret = simple_open(emg_9_resource_1,emg_9_resource_0);
    #line 2177 
    emg_9_ret = ldv_filter_err_code(emg_9_ret);
    #line 2180 
    if (ldv_undef_int() != 0) {
      #line 2182 
      __VERIFIER_assume(emg_9_ret == 0);
      #line 2186 
      goto emg_call_9;
    }
    else {
      #line 2191 
      __VERIFIER_assume(emg_9_ret != 0);
      #line 2194 
      if (emg_repeat_cnt_main_9_1 > 0) {
        #line 2195 
        emg_repeat_cnt_main_9_1 --;
        #line 2197 
        goto emg_main_9;
      }
      else 
           #line 2199 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 2206 
       ldv_free((void *)emg_9_resource_0);
  #line 2214 
  return (void *)0;
}

#line 2219  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_calib_calib_count_ops(void *arg0)
{
  #line 2222 
  struct file_operations *emg_10_container;
  #line 2223 
  long long emg_10_emg_param_1_0;
  #line 2224 
  char *emg_10_emg_param_1_2;
  #line 2225 
  char *emg_10_emg_param_1_4;
  #line 2226 
  int emg_10_emg_param_2_1;
  #line 2227 
  long long *emg_10_emg_param_3_3;
  #line 2228 
  long long *emg_10_emg_param_3_5;
  #line 2229 
  struct file *emg_10_resource_0;
  #line 2230 
  struct inode *emg_10_resource_1;
  #line 2231 
  int emg_10_ret;
  #line 2232 
  unsigned long emg_10_size_cnt;
  #line 2233 
  int emg_repeat_cnt_call_10 = 1;
  #line 2234 
  int emg_repeat_cnt_main_10_1 = 1;
  #line 2235 
  int emg_repeat_cnt_main_10_0 = 1;
  #line 2237 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 2241 
  emg_10_ret = ldv_undef_int();
  #line 2242 
  emg_10_container = emg_alias_calib_calib_count_ops;
  #line 2243 
  emg_10_ret = ldv_undef_int();
  #line 2245 
  __VERIFIER_assume(data->arg0 == emg_alias_calib_calib_count_ops);
  #line 2247 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 2248 
    emg_10_container = data->arg0;
    #line 2249 
    ldv_free((void *)data);
  }
  #line 2254 
  emg_10_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 2255 
  emg_10_size_cnt = (unsigned long)ldv_undef_int();
  #line 2259 
  goto emg_main_10;
  #line 2263 
  return (void *)0;
  #line 2266 
  emg_call_10: 
               #line 2266 
  ;
  #line 2267 
  if (ldv_undef_int() != 0) {
    #line 2268 
    switch (ldv_undef_int()) {
      #line 2269 
      case 0: 
              #line 2269 
      ;
      #line 2271 
      emg_10_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 2271 
      emg_10_emg_param_1_2 = emg_10_emg_param_1_2;
      #line 2272 
      emg_10_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 2272 
      emg_10_emg_param_3_3 = emg_10_emg_param_3_3;
      #line 2276 
      emg_wrapper_calib_calib_count_read(emg_10_resource_0,emg_10_emg_param_1_2,emg_10_size_cnt,emg_10_emg_param_3_3);
      #line 2280 
      ldv_free((void *)emg_10_emg_param_1_2);
      #line 2281 
      ldv_free((void *)emg_10_emg_param_3_3);
      #line 2283 
      break;
      #line 2285 
      case 1: 
              #line 2285 
      ;
      #line 2287 
      generic_file_llseek(emg_10_resource_0,emg_10_emg_param_1_0,emg_10_emg_param_2_1);
      #line 2289 
      break;
      #line 2291 
      case 2: 
              #line 2291 
      ;
      #line 2298 
      __VERIFIER_assume(emg_10_size_cnt <= 2147479552UL);
      #line 2299 
      emg_10_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 2299 
      emg_10_emg_param_1_4 = emg_10_emg_param_1_4;
      #line 2300 
      emg_10_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 2300 
      emg_10_emg_param_3_5 = emg_10_emg_param_3_5;
      #line 2304 
      if (emg_10_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 2305 
        (*(emg_10_container->write))(emg_10_resource_0,emg_10_emg_param_1_4,emg_10_size_cnt,emg_10_emg_param_3_5);
      #line 2310 
      ldv_free((void *)emg_10_emg_param_1_4);
      #line 2311 
      ldv_free((void *)emg_10_emg_param_3_5);
      #line 2313 
      break;
      #line 2315 
      default: 
               #line 2315 
      ;
      #line 2315 
      __VERIFIER_assume(0);
    }
    #line 2318 
    if (emg_repeat_cnt_call_10 > 0) {
      #line 2319 
      emg_repeat_cnt_call_10 --;
      #line 2321 
      goto emg_call_10;
    }
    else 
         #line 2323 
         __VERIFIER_assume(0);
  }
  else {
    #line 2329 
    if (emg_10_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 2330 
      (*(emg_10_container->release))(emg_10_resource_1,emg_10_resource_0);
    #line 2334 
    if (emg_repeat_cnt_main_10_0 > 0) {
      #line 2335 
      emg_repeat_cnt_main_10_0 --;
      #line 2337 
      goto emg_main_10;
    }
    else 
         #line 2339 
         __VERIFIER_assume(0);
  }
  #line 2345 
  return (void *)0;
  #line 2348 
  emg_main_10: 
               #line 2348 
  ;
  #line 2349 
  if (ldv_undef_int() != 0) {
    #line 2351 
    emg_10_ret = simple_open(emg_10_resource_1,emg_10_resource_0);
    #line 2356 
    emg_10_ret = ldv_filter_err_code(emg_10_ret);
    #line 2359 
    if (ldv_undef_int() != 0) {
      #line 2361 
      __VERIFIER_assume(emg_10_ret == 0);
      #line 2365 
      goto emg_call_10;
    }
    else {
      #line 2370 
      __VERIFIER_assume(emg_10_ret != 0);
      #line 2373 
      if (emg_repeat_cnt_main_10_1 > 0) {
        #line 2374 
        emg_repeat_cnt_main_10_1 --;
        #line 2376 
        goto emg_main_10;
      }
      else 
           #line 2378 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 2385 
       ldv_free((void *)emg_10_resource_0);
  #line 2393 
  return (void *)0;
}

#line 2398  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_calib_fail_count_ops(void *arg0)
{
  #line 2401 
  struct file_operations *emg_11_container;
  #line 2402 
  long long emg_11_emg_param_1_0;
  #line 2403 
  char *emg_11_emg_param_1_2;
  #line 2404 
  char *emg_11_emg_param_1_4;
  #line 2405 
  int emg_11_emg_param_2_1;
  #line 2406 
  long long *emg_11_emg_param_3_3;
  #line 2407 
  long long *emg_11_emg_param_3_5;
  #line 2408 
  struct file *emg_11_resource_0;
  #line 2409 
  struct inode *emg_11_resource_1;
  #line 2410 
  int emg_11_ret;
  #line 2411 
  unsigned long emg_11_size_cnt;
  #line 2412 
  int emg_repeat_cnt_call_11 = 1;
  #line 2413 
  int emg_repeat_cnt_main_11_1 = 1;
  #line 2414 
  int emg_repeat_cnt_main_11_0 = 1;
  #line 2416 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 2420 
  emg_11_ret = ldv_undef_int();
  #line 2421 
  emg_11_container = emg_alias_calib_fail_count_ops;
  #line 2422 
  emg_11_ret = ldv_undef_int();
  #line 2424 
  __VERIFIER_assume(data->arg0 == emg_alias_calib_fail_count_ops);
  #line 2426 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 2427 
    emg_11_container = data->arg0;
    #line 2428 
    ldv_free((void *)data);
  }
  #line 2433 
  emg_11_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 2434 
  emg_11_size_cnt = (unsigned long)ldv_undef_int();
  #line 2438 
  goto emg_main_11;
  #line 2442 
  return (void *)0;
  #line 2445 
  emg_call_11: 
               #line 2445 
  ;
  #line 2446 
  if (ldv_undef_int() != 0) {
    #line 2447 
    switch (ldv_undef_int()) {
      #line 2448 
      case 0: 
              #line 2448 
      ;
      #line 2450 
      emg_11_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 2450 
      emg_11_emg_param_1_2 = emg_11_emg_param_1_2;
      #line 2451 
      emg_11_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 2451 
      emg_11_emg_param_3_3 = emg_11_emg_param_3_3;
      #line 2455 
      emg_wrapper_calib_fail_count_read(emg_11_resource_0,emg_11_emg_param_1_2,emg_11_size_cnt,emg_11_emg_param_3_3);
      #line 2459 
      ldv_free((void *)emg_11_emg_param_1_2);
      #line 2460 
      ldv_free((void *)emg_11_emg_param_3_3);
      #line 2462 
      break;
      #line 2464 
      case 1: 
              #line 2464 
      ;
      #line 2466 
      generic_file_llseek(emg_11_resource_0,emg_11_emg_param_1_0,emg_11_emg_param_2_1);
      #line 2468 
      break;
      #line 2470 
      case 2: 
              #line 2470 
      ;
      #line 2477 
      __VERIFIER_assume(emg_11_size_cnt <= 2147479552UL);
      #line 2478 
      emg_11_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 2478 
      emg_11_emg_param_1_4 = emg_11_emg_param_1_4;
      #line 2479 
      emg_11_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 2479 
      emg_11_emg_param_3_5 = emg_11_emg_param_3_5;
      #line 2483 
      if (emg_11_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 2484 
        (*(emg_11_container->write))(emg_11_resource_0,emg_11_emg_param_1_4,emg_11_size_cnt,emg_11_emg_param_3_5);
      #line 2489 
      ldv_free((void *)emg_11_emg_param_1_4);
      #line 2490 
      ldv_free((void *)emg_11_emg_param_3_5);
      #line 2492 
      break;
      #line 2494 
      default: 
               #line 2494 
      ;
      #line 2494 
      __VERIFIER_assume(0);
    }
    #line 2497 
    if (emg_repeat_cnt_call_11 > 0) {
      #line 2498 
      emg_repeat_cnt_call_11 --;
      #line 2500 
      goto emg_call_11;
    }
    else 
         #line 2502 
         __VERIFIER_assume(0);
  }
  else {
    #line 2508 
    if (emg_11_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 2509 
      (*(emg_11_container->release))(emg_11_resource_1,emg_11_resource_0);
    #line 2513 
    if (emg_repeat_cnt_main_11_0 > 0) {
      #line 2514 
      emg_repeat_cnt_main_11_0 --;
      #line 2516 
      goto emg_main_11;
    }
    else 
         #line 2518 
         __VERIFIER_assume(0);
  }
  #line 2524 
  return (void *)0;
  #line 2527 
  emg_main_11: 
               #line 2527 
  ;
  #line 2528 
  if (ldv_undef_int() != 0) {
    #line 2530 
    emg_11_ret = simple_open(emg_11_resource_1,emg_11_resource_0);
    #line 2535 
    emg_11_ret = ldv_filter_err_code(emg_11_ret);
    #line 2538 
    if (ldv_undef_int() != 0) {
      #line 2540 
      __VERIFIER_assume(emg_11_ret == 0);
      #line 2544 
      goto emg_call_11;
    }
    else {
      #line 2549 
      __VERIFIER_assume(emg_11_ret != 0);
      #line 2552 
      if (emg_repeat_cnt_main_11_1 > 0) {
        #line 2553 
        emg_repeat_cnt_main_11_1 --;
        #line 2555 
        goto emg_main_11;
      }
      else 
           #line 2557 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 2564 
       ldv_free((void *)emg_11_resource_0);
  #line 2572 
  return (void *)0;
}

#line 2577  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_clear_fw_stats_ops(void *arg0)
{
  #line 2580 
  struct file_operations *emg_12_container;
  #line 2581 
  long long emg_12_emg_param_1_0;
  #line 2582 
  char *emg_12_emg_param_1_2;
  #line 2583 
  int emg_12_emg_param_2_1;
  #line 2584 
  long long *emg_12_emg_param_3_3;
  #line 2585 
  struct file *emg_12_resource_0;
  #line 2586 
  struct inode *emg_12_resource_1;
  #line 2587 
  int emg_12_ret;
  #line 2588 
  unsigned long emg_12_size_cnt;
  #line 2589 
  int emg_repeat_cnt_main_12_0 = 1;
  #line 2590 
  int emg_repeat_cnt_call_12 = 1;
  #line 2591 
  int emg_repeat_cnt_main_12_1 = 1;
  #line 2593 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 2597 
  emg_12_ret = ldv_undef_int();
  #line 2598 
  emg_12_container = emg_alias_clear_fw_stats_ops;
  #line 2599 
  emg_12_ret = ldv_undef_int();
  #line 2601 
  __VERIFIER_assume(data->arg0 == emg_alias_clear_fw_stats_ops);
  #line 2603 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 2604 
    emg_12_container = data->arg0;
    #line 2605 
    ldv_free((void *)data);
  }
  #line 2610 
  emg_12_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 2611 
  emg_12_size_cnt = (unsigned long)ldv_undef_int();
  #line 2615 
  goto emg_main_12;
  #line 2619 
  return (void *)0;
  #line 2622 
  emg_call_12: 
               #line 2622 
  ;
  #line 2623 
  if (ldv_undef_int() != 0) {
    #line 2624 
    if (ldv_undef_int() != 0) 
                              #line 2626 
                              default_llseek(emg_12_resource_0,emg_12_emg_param_1_0,emg_12_emg_param_2_1);
    else {
      #line 2635 
      __VERIFIER_assume(emg_12_size_cnt <= 2147479552UL);
      #line 2636 
      emg_12_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 2636 
      emg_12_emg_param_1_2 = emg_12_emg_param_1_2;
      #line 2637 
      emg_12_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 2637 
      emg_12_emg_param_3_3 = emg_12_emg_param_3_3;
      #line 2641 
      emg_wrapper_clear_fw_stats_write(emg_12_resource_0,emg_12_emg_param_1_2,emg_12_size_cnt,emg_12_emg_param_3_3);
      #line 2645 
      ldv_free((void *)emg_12_emg_param_1_2);
      #line 2646 
      ldv_free((void *)emg_12_emg_param_3_3);
    }
    #line 2650 
    if (emg_repeat_cnt_call_12 > 0) {
      #line 2651 
      emg_repeat_cnt_call_12 --;
      #line 2653 
      goto emg_call_12;
    }
    else 
         #line 2655 
         __VERIFIER_assume(0);
  }
  else {
    #line 2661 
    if (emg_12_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 2662 
      (*(emg_12_container->release))(emg_12_resource_1,emg_12_resource_0);
    #line 2666 
    if (emg_repeat_cnt_main_12_0 > 0) {
      #line 2667 
      emg_repeat_cnt_main_12_0 --;
      #line 2669 
      goto emg_main_12;
    }
    else 
         #line 2671 
         __VERIFIER_assume(0);
  }
  #line 2677 
  return (void *)0;
  #line 2680 
  emg_main_12: 
               #line 2680 
  ;
  #line 2681 
  if (ldv_undef_int() != 0) {
    #line 2683 
    emg_12_ret = simple_open(emg_12_resource_1,emg_12_resource_0);
    #line 2688 
    emg_12_ret = ldv_filter_err_code(emg_12_ret);
    #line 2691 
    if (ldv_undef_int() != 0) {
      #line 2693 
      __VERIFIER_assume(emg_12_ret == 0);
      #line 2697 
      goto emg_call_12;
    }
    else {
      #line 2702 
      __VERIFIER_assume(emg_12_ret != 0);
      #line 2705 
      if (emg_repeat_cnt_main_12_1 > 0) {
        #line 2706 
        emg_repeat_cnt_main_12_1 --;
        #line 2708 
        goto emg_main_12;
      }
      else 
           #line 2710 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 2717 
       ldv_free((void *)emg_12_resource_0);
  #line 2725 
  return (void *)0;
}

#line 2730  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_conf_ops(void *arg0)
{
  #line 2733 
  struct file_operations *emg_13_container;
  #line 2734 
  long long emg_13_emg_param_1_0;
  #line 2735 
  char *emg_13_emg_param_1_2;
  #line 2736 
  char *emg_13_emg_param_1_4;
  #line 2737 
  int emg_13_emg_param_2_1;
  #line 2738 
  long long *emg_13_emg_param_3_3;
  #line 2739 
  long long *emg_13_emg_param_3_5;
  #line 2740 
  struct file *emg_13_resource_0;
  #line 2741 
  struct inode *emg_13_resource_1;
  #line 2742 
  int emg_13_ret;
  #line 2743 
  unsigned long emg_13_size_cnt;
  #line 2744 
  int emg_repeat_cnt_main_13_1 = 1;
  #line 2745 
  int emg_repeat_cnt_main_13_0 = 1;
  #line 2746 
  int emg_repeat_cnt_call_13 = 1;
  #line 2748 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 2752 
  emg_13_ret = ldv_undef_int();
  #line 2753 
  emg_13_container = emg_alias_conf_ops;
  #line 2754 
  emg_13_ret = ldv_undef_int();
  #line 2756 
  __VERIFIER_assume(data->arg0 == emg_alias_conf_ops);
  #line 2758 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 2759 
    emg_13_container = data->arg0;
    #line 2760 
    ldv_free((void *)data);
  }
  #line 2765 
  emg_13_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 2766 
  emg_13_size_cnt = (unsigned long)ldv_undef_int();
  #line 2770 
  goto emg_main_13;
  #line 2774 
  return (void *)0;
  #line 2777 
  emg_call_13: 
               #line 2777 
  ;
  #line 2778 
  if (ldv_undef_int() != 0) {
    #line 2779 
    switch (ldv_undef_int()) {
      #line 2780 
      case 0: 
              #line 2780 
      ;
      #line 2782 
      emg_13_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 2782 
      emg_13_emg_param_1_2 = emg_13_emg_param_1_2;
      #line 2783 
      emg_13_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 2783 
      emg_13_emg_param_3_3 = emg_13_emg_param_3_3;
      #line 2787 
      emg_wrapper_conf_read(emg_13_resource_0,emg_13_emg_param_1_2,emg_13_size_cnt,emg_13_emg_param_3_3);
      #line 2791 
      ldv_free((void *)emg_13_emg_param_1_2);
      #line 2792 
      ldv_free((void *)emg_13_emg_param_3_3);
      #line 2794 
      break;
      #line 2796 
      case 1: 
              #line 2796 
      ;
      #line 2798 
      default_llseek(emg_13_resource_0,emg_13_emg_param_1_0,emg_13_emg_param_2_1);
      #line 2800 
      break;
      #line 2802 
      case 2: 
              #line 2802 
      ;
      #line 2809 
      __VERIFIER_assume(emg_13_size_cnt <= 2147479552UL);
      #line 2810 
      emg_13_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 2810 
      emg_13_emg_param_1_4 = emg_13_emg_param_1_4;
      #line 2811 
      emg_13_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 2811 
      emg_13_emg_param_3_5 = emg_13_emg_param_3_5;
      #line 2815 
      if (emg_13_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 2816 
        (*(emg_13_container->write))(emg_13_resource_0,emg_13_emg_param_1_4,emg_13_size_cnt,emg_13_emg_param_3_5);
      #line 2821 
      ldv_free((void *)emg_13_emg_param_1_4);
      #line 2822 
      ldv_free((void *)emg_13_emg_param_3_5);
      #line 2824 
      break;
      #line 2826 
      default: 
               #line 2826 
      ;
      #line 2826 
      __VERIFIER_assume(0);
    }
    #line 2829 
    if (emg_repeat_cnt_call_13 > 0) {
      #line 2830 
      emg_repeat_cnt_call_13 --;
      #line 2832 
      goto emg_call_13;
    }
    else 
         #line 2834 
         __VERIFIER_assume(0);
  }
  else {
    #line 2840 
    if (emg_13_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 2841 
      (*(emg_13_container->release))(emg_13_resource_1,emg_13_resource_0);
    #line 2845 
    if (emg_repeat_cnt_main_13_0 > 0) {
      #line 2846 
      emg_repeat_cnt_main_13_0 --;
      #line 2848 
      goto emg_main_13;
    }
    else 
         #line 2850 
         __VERIFIER_assume(0);
  }
  #line 2856 
  return (void *)0;
  #line 2859 
  emg_main_13: 
               #line 2859 
  ;
  #line 2860 
  if (ldv_undef_int() != 0) {
    #line 2862 
    emg_13_ret = simple_open(emg_13_resource_1,emg_13_resource_0);
    #line 2867 
    emg_13_ret = ldv_filter_err_code(emg_13_ret);
    #line 2870 
    if (ldv_undef_int() != 0) {
      #line 2872 
      __VERIFIER_assume(emg_13_ret == 0);
      #line 2876 
      goto emg_call_13;
    }
    else {
      #line 2881 
      __VERIFIER_assume(emg_13_ret != 0);
      #line 2884 
      if (emg_repeat_cnt_main_13_1 > 0) {
        #line 2885 
        emg_repeat_cnt_main_13_1 --;
        #line 2887 
        goto emg_main_13;
      }
      else 
           #line 2889 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 2896 
       ldv_free((void *)emg_13_resource_0);
  #line 2904 
  return (void *)0;
}

#line 2909  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_dfs_num_of_radar_detections_ops(void *arg0)
{
  #line 2912 
  struct file_operations *emg_14_container;
  #line 2913 
  long long emg_14_emg_param_1_0;
  #line 2914 
  char *emg_14_emg_param_1_2;
  #line 2915 
  char *emg_14_emg_param_1_4;
  #line 2916 
  int emg_14_emg_param_2_1;
  #line 2917 
  long long *emg_14_emg_param_3_3;
  #line 2918 
  long long *emg_14_emg_param_3_5;
  #line 2919 
  struct file *emg_14_resource_0;
  #line 2920 
  struct inode *emg_14_resource_1;
  #line 2921 
  int emg_14_ret;
  #line 2922 
  unsigned long emg_14_size_cnt;
  #line 2923 
  int emg_repeat_cnt_main_14_1 = 1;
  #line 2924 
  int emg_repeat_cnt_main_14_0 = 1;
  #line 2925 
  int emg_repeat_cnt_call_14 = 1;
  #line 2927 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 2931 
  emg_14_ret = ldv_undef_int();
  #line 2932 
  emg_14_container = emg_alias_dfs_num_of_radar_detections_ops;
  #line 2933 
  emg_14_ret = ldv_undef_int();
  #line 2935 
  __VERIFIER_assume(data->arg0 == emg_alias_dfs_num_of_radar_detections_ops);
  #line 2937 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 2938 
    emg_14_container = data->arg0;
    #line 2939 
    ldv_free((void *)data);
  }
  #line 2944 
  emg_14_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 2945 
  emg_14_size_cnt = (unsigned long)ldv_undef_int();
  #line 2949 
  goto emg_main_14;
  #line 2953 
  return (void *)0;
  #line 2956 
  emg_call_14: 
               #line 2956 
  ;
  #line 2957 
  if (ldv_undef_int() != 0) {
    #line 2958 
    switch (ldv_undef_int()) {
      #line 2959 
      case 0: 
              #line 2959 
      ;
      #line 2961 
      emg_14_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 2961 
      emg_14_emg_param_1_2 = emg_14_emg_param_1_2;
      #line 2962 
      emg_14_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 2962 
      emg_14_emg_param_3_3 = emg_14_emg_param_3_3;
      #line 2966 
      emg_wrapper_dfs_num_of_radar_detections_read(emg_14_resource_0,emg_14_emg_param_1_2,emg_14_size_cnt,emg_14_emg_param_3_3);
      #line 2970 
      ldv_free((void *)emg_14_emg_param_1_2);
      #line 2971 
      ldv_free((void *)emg_14_emg_param_3_3);
      #line 2973 
      break;
      #line 2975 
      case 1: 
              #line 2975 
      ;
      #line 2977 
      generic_file_llseek(emg_14_resource_0,emg_14_emg_param_1_0,emg_14_emg_param_2_1);
      #line 2979 
      break;
      #line 2981 
      case 2: 
              #line 2981 
      ;
      #line 2988 
      __VERIFIER_assume(emg_14_size_cnt <= 2147479552UL);
      #line 2989 
      emg_14_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 2989 
      emg_14_emg_param_1_4 = emg_14_emg_param_1_4;
      #line 2990 
      emg_14_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 2990 
      emg_14_emg_param_3_5 = emg_14_emg_param_3_5;
      #line 2994 
      if (emg_14_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 2995 
        (*(emg_14_container->write))(emg_14_resource_0,emg_14_emg_param_1_4,emg_14_size_cnt,emg_14_emg_param_3_5);
      #line 3000 
      ldv_free((void *)emg_14_emg_param_1_4);
      #line 3001 
      ldv_free((void *)emg_14_emg_param_3_5);
      #line 3003 
      break;
      #line 3005 
      default: 
               #line 3005 
      ;
      #line 3005 
      __VERIFIER_assume(0);
    }
    #line 3008 
    if (emg_repeat_cnt_call_14 > 0) {
      #line 3009 
      emg_repeat_cnt_call_14 --;
      #line 3011 
      goto emg_call_14;
    }
    else 
         #line 3013 
         __VERIFIER_assume(0);
  }
  else {
    #line 3019 
    if (emg_14_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 3020 
      (*(emg_14_container->release))(emg_14_resource_1,emg_14_resource_0);
    #line 3024 
    if (emg_repeat_cnt_main_14_1 > 0) {
      #line 3025 
      emg_repeat_cnt_main_14_1 --;
      #line 3027 
      goto emg_main_14;
    }
    else 
         #line 3029 
         __VERIFIER_assume(0);
  }
  #line 3035 
  return (void *)0;
  #line 3038 
  emg_main_14: 
               #line 3038 
  ;
  #line 3039 
  if (ldv_undef_int() != 0) {
    #line 3041 
    emg_14_ret = simple_open(emg_14_resource_1,emg_14_resource_0);
    #line 3046 
    emg_14_ret = ldv_filter_err_code(emg_14_ret);
    #line 3049 
    if (ldv_undef_int() != 0) {
      #line 3051 
      __VERIFIER_assume(emg_14_ret == 0);
      #line 3055 
      goto emg_call_14;
    }
    else {
      #line 3060 
      __VERIFIER_assume(emg_14_ret != 0);
      #line 3063 
      if (emg_repeat_cnt_main_14_0 > 0) {
        #line 3064 
        emg_repeat_cnt_main_14_0 --;
        #line 3066 
        goto emg_main_14;
      }
      else 
           #line 3068 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 3075 
       ldv_free((void *)emg_14_resource_0);
  #line 3083 
  return (void *)0;
}

#line 3088  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_diversity_num_of_packets_per_ant_ops(void *arg0)
{
  #line 3091 
  struct file_operations *emg_15_container;
  #line 3092 
  long long emg_15_emg_param_1_0;
  #line 3093 
  char *emg_15_emg_param_1_2;
  #line 3094 
  char *emg_15_emg_param_1_4;
  #line 3095 
  int emg_15_emg_param_2_1;
  #line 3096 
  long long *emg_15_emg_param_3_3;
  #line 3097 
  long long *emg_15_emg_param_3_5;
  #line 3098 
  struct file *emg_15_resource_0;
  #line 3099 
  struct inode *emg_15_resource_1;
  #line 3100 
  int emg_15_ret;
  #line 3101 
  unsigned long emg_15_size_cnt;
  #line 3102 
  int emg_repeat_cnt_main_15_1 = 1;
  #line 3103 
  int emg_repeat_cnt_call_15 = 1;
  #line 3104 
  int emg_repeat_cnt_main_15_0 = 1;
  #line 3106 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 3110 
  emg_15_ret = ldv_undef_int();
  #line 3111 
  emg_15_container = emg_alias_diversity_num_of_packets_per_ant_ops;
  #line 3112 
  emg_15_ret = ldv_undef_int();
  #line 3114 
  __VERIFIER_assume(data->arg0 == emg_alias_diversity_num_of_packets_per_ant_ops);
  #line 3116 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 3117 
    emg_15_container = data->arg0;
    #line 3118 
    ldv_free((void *)data);
  }
  #line 3123 
  emg_15_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 3124 
  emg_15_size_cnt = (unsigned long)ldv_undef_int();
  #line 3128 
  goto emg_main_15;
  #line 3132 
  return (void *)0;
  #line 3135 
  emg_call_15: 
               #line 3135 
  ;
  #line 3136 
  if (ldv_undef_int() != 0) {
    #line 3137 
    switch (ldv_undef_int()) {
      #line 3138 
      case 0: 
              #line 3138 
      ;
      #line 3140 
      emg_15_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 3140 
      emg_15_emg_param_1_2 = emg_15_emg_param_1_2;
      #line 3141 
      emg_15_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 3141 
      emg_15_emg_param_3_3 = emg_15_emg_param_3_3;
      #line 3145 
      emg_wrapper_diversity_num_of_packets_per_ant_read(emg_15_resource_0,emg_15_emg_param_1_2,emg_15_size_cnt,emg_15_emg_param_3_3);
      #line 3149 
      ldv_free((void *)emg_15_emg_param_1_2);
      #line 3150 
      ldv_free((void *)emg_15_emg_param_3_3);
      #line 3152 
      break;
      #line 3154 
      case 1: 
              #line 3154 
      ;
      #line 3156 
      generic_file_llseek(emg_15_resource_0,emg_15_emg_param_1_0,emg_15_emg_param_2_1);
      #line 3158 
      break;
      #line 3160 
      case 2: 
              #line 3160 
      ;
      #line 3167 
      __VERIFIER_assume(emg_15_size_cnt <= 2147479552UL);
      #line 3168 
      emg_15_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 3168 
      emg_15_emg_param_1_4 = emg_15_emg_param_1_4;
      #line 3169 
      emg_15_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 3169 
      emg_15_emg_param_3_5 = emg_15_emg_param_3_5;
      #line 3173 
      if (emg_15_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 3174 
        (*(emg_15_container->write))(emg_15_resource_0,emg_15_emg_param_1_4,emg_15_size_cnt,emg_15_emg_param_3_5);
      #line 3179 
      ldv_free((void *)emg_15_emg_param_1_4);
      #line 3180 
      ldv_free((void *)emg_15_emg_param_3_5);
      #line 3182 
      break;
      #line 3184 
      default: 
               #line 3184 
      ;
      #line 3184 
      __VERIFIER_assume(0);
    }
    #line 3187 
    if (emg_repeat_cnt_call_15 > 0) {
      #line 3188 
      emg_repeat_cnt_call_15 --;
      #line 3190 
      goto emg_call_15;
    }
    else 
         #line 3192 
         __VERIFIER_assume(0);
  }
  else {
    #line 3198 
    if (emg_15_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 3199 
      (*(emg_15_container->release))(emg_15_resource_1,emg_15_resource_0);
    #line 3203 
    if (emg_repeat_cnt_main_15_0 > 0) {
      #line 3204 
      emg_repeat_cnt_main_15_0 --;
      #line 3206 
      goto emg_main_15;
    }
    else 
         #line 3208 
         __VERIFIER_assume(0);
  }
  #line 3214 
  return (void *)0;
  #line 3217 
  emg_main_15: 
               #line 3217 
  ;
  #line 3218 
  if (ldv_undef_int() != 0) {
    #line 3220 
    emg_15_ret = simple_open(emg_15_resource_1,emg_15_resource_0);
    #line 3225 
    emg_15_ret = ldv_filter_err_code(emg_15_ret);
    #line 3228 
    if (ldv_undef_int() != 0) {
      #line 3230 
      __VERIFIER_assume(emg_15_ret == 0);
      #line 3234 
      goto emg_call_15;
    }
    else {
      #line 3239 
      __VERIFIER_assume(emg_15_ret != 0);
      #line 3242 
      if (emg_repeat_cnt_main_15_1 > 0) {
        #line 3243 
        emg_repeat_cnt_main_15_1 --;
        #line 3245 
        goto emg_main_15;
      }
      else 
           #line 3247 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 3254 
       ldv_free((void *)emg_15_resource_0);
  #line 3262 
  return (void *)0;
}

#line 3267  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_diversity_total_num_of_toggles_ops(void *arg0)
{
  #line 3270 
  struct file_operations *emg_16_container;
  #line 3271 
  long long emg_16_emg_param_1_0;
  #line 3272 
  char *emg_16_emg_param_1_2;
  #line 3273 
  char *emg_16_emg_param_1_4;
  #line 3274 
  int emg_16_emg_param_2_1;
  #line 3275 
  long long *emg_16_emg_param_3_3;
  #line 3276 
  long long *emg_16_emg_param_3_5;
  #line 3277 
  struct file *emg_16_resource_0;
  #line 3278 
  struct inode *emg_16_resource_1;
  #line 3279 
  int emg_16_ret;
  #line 3280 
  unsigned long emg_16_size_cnt;
  #line 3281 
  int emg_repeat_cnt_main_16_0 = 1;
  #line 3282 
  int emg_repeat_cnt_main_16_1 = 1;
  #line 3283 
  int emg_repeat_cnt_call_16 = 1;
  #line 3285 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 3289 
  emg_16_ret = ldv_undef_int();
  #line 3290 
  emg_16_container = emg_alias_diversity_total_num_of_toggles_ops;
  #line 3291 
  emg_16_ret = ldv_undef_int();
  #line 3293 
  __VERIFIER_assume(data->arg0 == emg_alias_diversity_total_num_of_toggles_ops);
  #line 3295 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 3296 
    emg_16_container = data->arg0;
    #line 3297 
    ldv_free((void *)data);
  }
  #line 3302 
  emg_16_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 3303 
  emg_16_size_cnt = (unsigned long)ldv_undef_int();
  #line 3307 
  goto emg_main_16;
  #line 3311 
  return (void *)0;
  #line 3314 
  emg_call_16: 
               #line 3314 
  ;
  #line 3315 
  if (ldv_undef_int() != 0) {
    #line 3316 
    switch (ldv_undef_int()) {
      #line 3317 
      case 0: 
              #line 3317 
      ;
      #line 3319 
      emg_16_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 3319 
      emg_16_emg_param_1_2 = emg_16_emg_param_1_2;
      #line 3320 
      emg_16_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 3320 
      emg_16_emg_param_3_3 = emg_16_emg_param_3_3;
      #line 3324 
      emg_wrapper_diversity_total_num_of_toggles_read(emg_16_resource_0,emg_16_emg_param_1_2,emg_16_size_cnt,emg_16_emg_param_3_3);
      #line 3328 
      ldv_free((void *)emg_16_emg_param_1_2);
      #line 3329 
      ldv_free((void *)emg_16_emg_param_3_3);
      #line 3331 
      break;
      #line 3333 
      case 1: 
              #line 3333 
      ;
      #line 3335 
      generic_file_llseek(emg_16_resource_0,emg_16_emg_param_1_0,emg_16_emg_param_2_1);
      #line 3337 
      break;
      #line 3339 
      case 2: 
              #line 3339 
      ;
      #line 3346 
      __VERIFIER_assume(emg_16_size_cnt <= 2147479552UL);
      #line 3347 
      emg_16_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 3347 
      emg_16_emg_param_1_4 = emg_16_emg_param_1_4;
      #line 3348 
      emg_16_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 3348 
      emg_16_emg_param_3_5 = emg_16_emg_param_3_5;
      #line 3352 
      if (emg_16_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 3353 
        (*(emg_16_container->write))(emg_16_resource_0,emg_16_emg_param_1_4,emg_16_size_cnt,emg_16_emg_param_3_5);
      #line 3358 
      ldv_free((void *)emg_16_emg_param_1_4);
      #line 3359 
      ldv_free((void *)emg_16_emg_param_3_5);
      #line 3361 
      break;
      #line 3363 
      default: 
               #line 3363 
      ;
      #line 3363 
      __VERIFIER_assume(0);
    }
    #line 3366 
    if (emg_repeat_cnt_call_16 > 0) {
      #line 3367 
      emg_repeat_cnt_call_16 --;
      #line 3369 
      goto emg_call_16;
    }
    else 
         #line 3371 
         __VERIFIER_assume(0);
  }
  else {
    #line 3377 
    if (emg_16_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 3378 
      (*(emg_16_container->release))(emg_16_resource_1,emg_16_resource_0);
    #line 3382 
    if (emg_repeat_cnt_main_16_0 > 0) {
      #line 3383 
      emg_repeat_cnt_main_16_0 --;
      #line 3385 
      goto emg_main_16;
    }
    else 
         #line 3387 
         __VERIFIER_assume(0);
  }
  #line 3393 
  return (void *)0;
  #line 3396 
  emg_main_16: 
               #line 3396 
  ;
  #line 3397 
  if (ldv_undef_int() != 0) {
    #line 3399 
    emg_16_ret = simple_open(emg_16_resource_1,emg_16_resource_0);
    #line 3404 
    emg_16_ret = ldv_filter_err_code(emg_16_ret);
    #line 3407 
    if (ldv_undef_int() != 0) {
      #line 3409 
      __VERIFIER_assume(emg_16_ret == 0);
      #line 3413 
      goto emg_call_16;
    }
    else {
      #line 3418 
      __VERIFIER_assume(emg_16_ret != 0);
      #line 3421 
      if (emg_repeat_cnt_main_16_1 > 0) {
        #line 3422 
        emg_repeat_cnt_main_16_1 --;
        #line 3424 
        goto emg_main_16;
      }
      else 
           #line 3426 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 3433 
       ldv_free((void *)emg_16_resource_0);
  #line 3441 
  return (void *)0;
}

#line 3446  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_dynamic_fw_traces_ops(void *arg0)
{
  #line 3449 
  struct file_operations *emg_17_container;
  #line 3450 
  long long emg_17_emg_param_1_0;
  #line 3451 
  char *emg_17_emg_param_1_2;
  #line 3452 
  char *emg_17_emg_param_1_4;
  #line 3453 
  int emg_17_emg_param_2_1;
  #line 3454 
  long long *emg_17_emg_param_3_3;
  #line 3455 
  long long *emg_17_emg_param_3_5;
  #line 3456 
  struct file *emg_17_resource_0;
  #line 3457 
  struct inode *emg_17_resource_1;
  #line 3458 
  int emg_17_ret;
  #line 3459 
  unsigned long emg_17_size_cnt;
  #line 3460 
  int emg_repeat_cnt_main_17_1 = 1;
  #line 3461 
  int emg_repeat_cnt_main_17_0 = 1;
  #line 3462 
  int emg_repeat_cnt_call_17 = 1;
  #line 3464 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 3468 
  emg_17_ret = ldv_undef_int();
  #line 3469 
  emg_17_container = emg_alias_dynamic_fw_traces_ops;
  #line 3470 
  emg_17_ret = ldv_undef_int();
  #line 3472 
  __VERIFIER_assume(data->arg0 == emg_alias_dynamic_fw_traces_ops);
  #line 3474 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 3475 
    emg_17_container = data->arg0;
    #line 3476 
    ldv_free((void *)data);
  }
  #line 3481 
  emg_17_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 3482 
  emg_17_size_cnt = (unsigned long)ldv_undef_int();
  #line 3486 
  goto emg_main_17;
  #line 3490 
  return (void *)0;
  #line 3493 
  emg_call_17: 
               #line 3493 
  ;
  #line 3494 
  if (ldv_undef_int() != 0) {
    #line 3495 
    switch (ldv_undef_int()) {
      #line 3496 
      case 0: 
              #line 3496 
      ;
      #line 3498 
      emg_17_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 3498 
      emg_17_emg_param_1_2 = emg_17_emg_param_1_2;
      #line 3499 
      emg_17_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 3499 
      emg_17_emg_param_3_3 = emg_17_emg_param_3_3;
      #line 3503 
      emg_wrapper_dynamic_fw_traces_read(emg_17_resource_0,emg_17_emg_param_1_2,emg_17_size_cnt,emg_17_emg_param_3_3);
      #line 3507 
      ldv_free((void *)emg_17_emg_param_1_2);
      #line 3508 
      ldv_free((void *)emg_17_emg_param_3_3);
      #line 3510 
      break;
      #line 3512 
      case 1: 
              #line 3512 
      ;
      #line 3514 
      default_llseek(emg_17_resource_0,emg_17_emg_param_1_0,emg_17_emg_param_2_1);
      #line 3516 
      break;
      #line 3518 
      case 2: 
              #line 3518 
      ;
      #line 3525 
      __VERIFIER_assume(emg_17_size_cnt <= 2147479552UL);
      #line 3526 
      emg_17_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 3526 
      emg_17_emg_param_1_4 = emg_17_emg_param_1_4;
      #line 3527 
      emg_17_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 3527 
      emg_17_emg_param_3_5 = emg_17_emg_param_3_5;
      #line 3531 
      emg_wrapper_dynamic_fw_traces_write(emg_17_resource_0,emg_17_emg_param_1_4,emg_17_size_cnt,emg_17_emg_param_3_5);
      #line 3535 
      ldv_free((void *)emg_17_emg_param_1_4);
      #line 3536 
      ldv_free((void *)emg_17_emg_param_3_5);
      #line 3538 
      break;
      #line 3540 
      default: 
               #line 3540 
      ;
      #line 3540 
      __VERIFIER_assume(0);
    }
    #line 3543 
    if (emg_repeat_cnt_call_17 > 0) {
      #line 3544 
      emg_repeat_cnt_call_17 --;
      #line 3546 
      goto emg_call_17;
    }
    else 
         #line 3548 
         __VERIFIER_assume(0);
  }
  else {
    #line 3554 
    if (emg_17_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 3555 
      (*(emg_17_container->release))(emg_17_resource_1,emg_17_resource_0);
    #line 3559 
    if (emg_repeat_cnt_main_17_0 > 0) {
      #line 3560 
      emg_repeat_cnt_main_17_0 --;
      #line 3562 
      goto emg_main_17;
    }
    else 
         #line 3564 
         __VERIFIER_assume(0);
  }
  #line 3570 
  return (void *)0;
  #line 3573 
  emg_main_17: 
               #line 3573 
  ;
  #line 3574 
  if (ldv_undef_int() != 0) {
    #line 3576 
    emg_17_ret = simple_open(emg_17_resource_1,emg_17_resource_0);
    #line 3581 
    emg_17_ret = ldv_filter_err_code(emg_17_ret);
    #line 3584 
    if (ldv_undef_int() != 0) {
      #line 3586 
      __VERIFIER_assume(emg_17_ret == 0);
      #line 3590 
      goto emg_call_17;
    }
    else {
      #line 3595 
      __VERIFIER_assume(emg_17_ret != 0);
      #line 3598 
      if (emg_repeat_cnt_main_17_1 > 0) {
        #line 3599 
        emg_repeat_cnt_main_17_1 --;
        #line 3601 
        goto emg_main_17;
      }
      else 
           #line 3603 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 3610 
       ldv_free((void *)emg_17_resource_0);
  #line 3618 
  return (void *)0;
}

#line 3623  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_error_bar_retry_ops(void *arg0)
{
  #line 3626 
  struct file_operations *emg_18_container;
  #line 3627 
  long long emg_18_emg_param_1_0;
  #line 3628 
  char *emg_18_emg_param_1_2;
  #line 3629 
  char *emg_18_emg_param_1_4;
  #line 3630 
  int emg_18_emg_param_2_1;
  #line 3631 
  long long *emg_18_emg_param_3_3;
  #line 3632 
  long long *emg_18_emg_param_3_5;
  #line 3633 
  struct file *emg_18_resource_0;
  #line 3634 
  struct inode *emg_18_resource_1;
  #line 3635 
  int emg_18_ret;
  #line 3636 
  unsigned long emg_18_size_cnt;
  #line 3637 
  int emg_repeat_cnt_main_18_1 = 1;
  #line 3638 
  int emg_repeat_cnt_main_18_0 = 1;
  #line 3639 
  int emg_repeat_cnt_call_18 = 1;
  #line 3641 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 3645 
  emg_18_ret = ldv_undef_int();
  #line 3646 
  emg_18_container = emg_alias_error_bar_retry_ops;
  #line 3647 
  emg_18_ret = ldv_undef_int();
  #line 3649 
  __VERIFIER_assume(data->arg0 == emg_alias_error_bar_retry_ops);
  #line 3651 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 3652 
    emg_18_container = data->arg0;
    #line 3653 
    ldv_free((void *)data);
  }
  #line 3658 
  emg_18_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 3659 
  emg_18_size_cnt = (unsigned long)ldv_undef_int();
  #line 3663 
  goto emg_main_18;
  #line 3667 
  return (void *)0;
  #line 3670 
  emg_call_18: 
               #line 3670 
  ;
  #line 3671 
  if (ldv_undef_int() != 0) {
    #line 3672 
    switch (ldv_undef_int()) {
      #line 3673 
      case 0: 
              #line 3673 
      ;
      #line 3675 
      emg_18_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 3675 
      emg_18_emg_param_1_2 = emg_18_emg_param_1_2;
      #line 3676 
      emg_18_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 3676 
      emg_18_emg_param_3_3 = emg_18_emg_param_3_3;
      #line 3680 
      emg_wrapper_error_bar_retry_read(emg_18_resource_0,emg_18_emg_param_1_2,emg_18_size_cnt,emg_18_emg_param_3_3);
      #line 3684 
      ldv_free((void *)emg_18_emg_param_1_2);
      #line 3685 
      ldv_free((void *)emg_18_emg_param_3_3);
      #line 3687 
      break;
      #line 3689 
      case 1: 
              #line 3689 
      ;
      #line 3691 
      generic_file_llseek(emg_18_resource_0,emg_18_emg_param_1_0,emg_18_emg_param_2_1);
      #line 3693 
      break;
      #line 3695 
      case 2: 
              #line 3695 
      ;
      #line 3702 
      __VERIFIER_assume(emg_18_size_cnt <= 2147479552UL);
      #line 3703 
      emg_18_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 3703 
      emg_18_emg_param_1_4 = emg_18_emg_param_1_4;
      #line 3704 
      emg_18_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 3704 
      emg_18_emg_param_3_5 = emg_18_emg_param_3_5;
      #line 3708 
      if (emg_18_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 3709 
        (*(emg_18_container->write))(emg_18_resource_0,emg_18_emg_param_1_4,emg_18_size_cnt,emg_18_emg_param_3_5);
      #line 3714 
      ldv_free((void *)emg_18_emg_param_1_4);
      #line 3715 
      ldv_free((void *)emg_18_emg_param_3_5);
      #line 3717 
      break;
      #line 3719 
      default: 
               #line 3719 
      ;
      #line 3719 
      __VERIFIER_assume(0);
    }
    #line 3722 
    if (emg_repeat_cnt_call_18 > 0) {
      #line 3723 
      emg_repeat_cnt_call_18 --;
      #line 3725 
      goto emg_call_18;
    }
    else 
         #line 3727 
         __VERIFIER_assume(0);
  }
  else {
    #line 3733 
    if (emg_18_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 3734 
      (*(emg_18_container->release))(emg_18_resource_1,emg_18_resource_0);
    #line 3738 
    if (emg_repeat_cnt_main_18_1 > 0) {
      #line 3739 
      emg_repeat_cnt_main_18_1 --;
      #line 3741 
      goto emg_main_18;
    }
    else 
         #line 3743 
         __VERIFIER_assume(0);
  }
  #line 3749 
  return (void *)0;
  #line 3752 
  emg_main_18: 
               #line 3752 
  ;
  #line 3753 
  if (ldv_undef_int() != 0) {
    #line 3755 
    emg_18_ret = simple_open(emg_18_resource_1,emg_18_resource_0);
    #line 3760 
    emg_18_ret = ldv_filter_err_code(emg_18_ret);
    #line 3763 
    if (ldv_undef_int() != 0) {
      #line 3765 
      __VERIFIER_assume(emg_18_ret == 0);
      #line 3769 
      goto emg_call_18;
    }
    else {
      #line 3774 
      __VERIFIER_assume(emg_18_ret != 0);
      #line 3777 
      if (emg_repeat_cnt_main_18_0 > 0) {
        #line 3778 
        emg_repeat_cnt_main_18_0 --;
        #line 3780 
        goto emg_main_18;
      }
      else 
           #line 3782 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 3789 
       ldv_free((void *)emg_18_resource_0);
  #line 3797 
  return (void *)0;
}

#line 3802  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_error_burst_mismatch_ops(void *arg0)
{
  #line 3805 
  struct file_operations *emg_19_container;
  #line 3806 
  long long emg_19_emg_param_1_0;
  #line 3807 
  char *emg_19_emg_param_1_2;
  #line 3808 
  char *emg_19_emg_param_1_4;
  #line 3809 
  int emg_19_emg_param_2_1;
  #line 3810 
  long long *emg_19_emg_param_3_3;
  #line 3811 
  long long *emg_19_emg_param_3_5;
  #line 3812 
  struct file *emg_19_resource_0;
  #line 3813 
  struct inode *emg_19_resource_1;
  #line 3814 
  int emg_19_ret;
  #line 3815 
  unsigned long emg_19_size_cnt;
  #line 3816 
  int emg_repeat_cnt_call_19 = 1;
  #line 3817 
  int emg_repeat_cnt_main_19_0 = 1;
  #line 3818 
  int emg_repeat_cnt_main_19_1 = 1;
  #line 3820 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 3824 
  emg_19_ret = ldv_undef_int();
  #line 3825 
  emg_19_container = emg_alias_error_burst_mismatch_ops;
  #line 3826 
  emg_19_ret = ldv_undef_int();
  #line 3828 
  __VERIFIER_assume(data->arg0 == emg_alias_error_burst_mismatch_ops);
  #line 3830 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 3831 
    emg_19_container = data->arg0;
    #line 3832 
    ldv_free((void *)data);
  }
  #line 3837 
  emg_19_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 3838 
  emg_19_size_cnt = (unsigned long)ldv_undef_int();
  #line 3842 
  goto emg_main_19;
  #line 3846 
  return (void *)0;
  #line 3849 
  emg_call_19: 
               #line 3849 
  ;
  #line 3850 
  if (ldv_undef_int() != 0) {
    #line 3851 
    switch (ldv_undef_int()) {
      #line 3852 
      case 0: 
              #line 3852 
      ;
      #line 3854 
      emg_19_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 3854 
      emg_19_emg_param_1_2 = emg_19_emg_param_1_2;
      #line 3855 
      emg_19_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 3855 
      emg_19_emg_param_3_3 = emg_19_emg_param_3_3;
      #line 3859 
      emg_wrapper_error_burst_mismatch_read(emg_19_resource_0,emg_19_emg_param_1_2,emg_19_size_cnt,emg_19_emg_param_3_3);
      #line 3863 
      ldv_free((void *)emg_19_emg_param_1_2);
      #line 3864 
      ldv_free((void *)emg_19_emg_param_3_3);
      #line 3866 
      break;
      #line 3868 
      case 1: 
              #line 3868 
      ;
      #line 3870 
      generic_file_llseek(emg_19_resource_0,emg_19_emg_param_1_0,emg_19_emg_param_2_1);
      #line 3872 
      break;
      #line 3874 
      case 2: 
              #line 3874 
      ;
      #line 3881 
      __VERIFIER_assume(emg_19_size_cnt <= 2147479552UL);
      #line 3882 
      emg_19_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 3882 
      emg_19_emg_param_1_4 = emg_19_emg_param_1_4;
      #line 3883 
      emg_19_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 3883 
      emg_19_emg_param_3_5 = emg_19_emg_param_3_5;
      #line 3887 
      if (emg_19_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 3888 
        (*(emg_19_container->write))(emg_19_resource_0,emg_19_emg_param_1_4,emg_19_size_cnt,emg_19_emg_param_3_5);
      #line 3893 
      ldv_free((void *)emg_19_emg_param_1_4);
      #line 3894 
      ldv_free((void *)emg_19_emg_param_3_5);
      #line 3896 
      break;
      #line 3898 
      default: 
               #line 3898 
      ;
      #line 3898 
      __VERIFIER_assume(0);
    }
    #line 3901 
    if (emg_repeat_cnt_call_19 > 0) {
      #line 3902 
      emg_repeat_cnt_call_19 --;
      #line 3904 
      goto emg_call_19;
    }
    else 
         #line 3906 
         __VERIFIER_assume(0);
  }
  else {
    #line 3912 
    if (emg_19_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 3913 
      (*(emg_19_container->release))(emg_19_resource_1,emg_19_resource_0);
    #line 3917 
    if (emg_repeat_cnt_main_19_1 > 0) {
      #line 3918 
      emg_repeat_cnt_main_19_1 --;
      #line 3920 
      goto emg_main_19;
    }
    else 
         #line 3922 
         __VERIFIER_assume(0);
  }
  #line 3928 
  return (void *)0;
  #line 3931 
  emg_main_19: 
               #line 3931 
  ;
  #line 3932 
  if (ldv_undef_int() != 0) {
    #line 3934 
    emg_19_ret = simple_open(emg_19_resource_1,emg_19_resource_0);
    #line 3939 
    emg_19_ret = ldv_filter_err_code(emg_19_ret);
    #line 3942 
    if (ldv_undef_int() != 0) {
      #line 3944 
      __VERIFIER_assume(emg_19_ret == 0);
      #line 3948 
      goto emg_call_19;
    }
    else {
      #line 3953 
      __VERIFIER_assume(emg_19_ret != 0);
      #line 3956 
      if (emg_repeat_cnt_main_19_0 > 0) {
        #line 3957 
        emg_repeat_cnt_main_19_0 --;
        #line 3959 
        goto emg_main_19;
      }
      else 
           #line 3961 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 3968 
       ldv_free((void *)emg_19_resource_0);
  #line 3976 
  return (void *)0;
}

#line 3981  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_error_elp_while_nvic_pending_ops(void *arg0)
{
  #line 3984 
  struct file_operations *emg_20_container;
  #line 3985 
  long long emg_20_emg_param_1_0;
  #line 3986 
  char *emg_20_emg_param_1_2;
  #line 3987 
  char *emg_20_emg_param_1_4;
  #line 3988 
  int emg_20_emg_param_2_1;
  #line 3989 
  long long *emg_20_emg_param_3_3;
  #line 3990 
  long long *emg_20_emg_param_3_5;
  #line 3991 
  struct file *emg_20_resource_0;
  #line 3992 
  struct inode *emg_20_resource_1;
  #line 3993 
  int emg_20_ret;
  #line 3994 
  unsigned long emg_20_size_cnt;
  #line 3995 
  int emg_repeat_cnt_main_20_0 = 1;
  #line 3996 
  int emg_repeat_cnt_main_20_1 = 1;
  #line 3997 
  int emg_repeat_cnt_call_20 = 1;
  #line 3999 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 4003 
  emg_20_ret = ldv_undef_int();
  #line 4004 
  emg_20_container = emg_alias_error_elp_while_nvic_pending_ops;
  #line 4005 
  emg_20_ret = ldv_undef_int();
  #line 4007 
  __VERIFIER_assume(data->arg0 == emg_alias_error_elp_while_nvic_pending_ops);
  #line 4009 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 4010 
    emg_20_container = data->arg0;
    #line 4011 
    ldv_free((void *)data);
  }
  #line 4016 
  emg_20_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 4017 
  emg_20_size_cnt = (unsigned long)ldv_undef_int();
  #line 4021 
  goto emg_main_20;
  #line 4025 
  return (void *)0;
  #line 4028 
  emg_call_20: 
               #line 4028 
  ;
  #line 4029 
  if (ldv_undef_int() != 0) {
    #line 4030 
    switch (ldv_undef_int()) {
      #line 4031 
      case 0: 
              #line 4031 
      ;
      #line 4033 
      emg_20_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 4033 
      emg_20_emg_param_1_2 = emg_20_emg_param_1_2;
      #line 4034 
      emg_20_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 4034 
      emg_20_emg_param_3_3 = emg_20_emg_param_3_3;
      #line 4038 
      emg_wrapper_error_elp_while_nvic_pending_read(emg_20_resource_0,emg_20_emg_param_1_2,emg_20_size_cnt,emg_20_emg_param_3_3);
      #line 4042 
      ldv_free((void *)emg_20_emg_param_1_2);
      #line 4043 
      ldv_free((void *)emg_20_emg_param_3_3);
      #line 4045 
      break;
      #line 4047 
      case 1: 
              #line 4047 
      ;
      #line 4049 
      generic_file_llseek(emg_20_resource_0,emg_20_emg_param_1_0,emg_20_emg_param_2_1);
      #line 4051 
      break;
      #line 4053 
      case 2: 
              #line 4053 
      ;
      #line 4060 
      __VERIFIER_assume(emg_20_size_cnt <= 2147479552UL);
      #line 4061 
      emg_20_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 4061 
      emg_20_emg_param_1_4 = emg_20_emg_param_1_4;
      #line 4062 
      emg_20_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 4062 
      emg_20_emg_param_3_5 = emg_20_emg_param_3_5;
      #line 4066 
      if (emg_20_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 4067 
        (*(emg_20_container->write))(emg_20_resource_0,emg_20_emg_param_1_4,emg_20_size_cnt,emg_20_emg_param_3_5);
      #line 4072 
      ldv_free((void *)emg_20_emg_param_1_4);
      #line 4073 
      ldv_free((void *)emg_20_emg_param_3_5);
      #line 4075 
      break;
      #line 4077 
      default: 
               #line 4077 
      ;
      #line 4077 
      __VERIFIER_assume(0);
    }
    #line 4080 
    if (emg_repeat_cnt_call_20 > 0) {
      #line 4081 
      emg_repeat_cnt_call_20 --;
      #line 4083 
      goto emg_call_20;
    }
    else 
         #line 4085 
         __VERIFIER_assume(0);
  }
  else {
    #line 4091 
    if (emg_20_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 4092 
      (*(emg_20_container->release))(emg_20_resource_1,emg_20_resource_0);
    #line 4096 
    if (emg_repeat_cnt_main_20_0 > 0) {
      #line 4097 
      emg_repeat_cnt_main_20_0 --;
      #line 4099 
      goto emg_main_20;
    }
    else 
         #line 4101 
         __VERIFIER_assume(0);
  }
  #line 4107 
  return (void *)0;
  #line 4110 
  emg_main_20: 
               #line 4110 
  ;
  #line 4111 
  if (ldv_undef_int() != 0) {
    #line 4113 
    emg_20_ret = simple_open(emg_20_resource_1,emg_20_resource_0);
    #line 4118 
    emg_20_ret = ldv_filter_err_code(emg_20_ret);
    #line 4121 
    if (ldv_undef_int() != 0) {
      #line 4123 
      __VERIFIER_assume(emg_20_ret == 0);
      #line 4127 
      goto emg_call_20;
    }
    else {
      #line 4132 
      __VERIFIER_assume(emg_20_ret != 0);
      #line 4135 
      if (emg_repeat_cnt_main_20_1 > 0) {
        #line 4136 
        emg_repeat_cnt_main_20_1 --;
        #line 4138 
        goto emg_main_20;
      }
      else 
           #line 4140 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 4147 
       ldv_free((void *)emg_20_resource_0);
  #line 4155 
  return (void *)0;
}

#line 4160  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_error_elp_while_rx_exch_ops(void *arg0)
{
  #line 4163 
  struct file_operations *emg_21_container;
  #line 4164 
  long long emg_21_emg_param_1_0;
  #line 4165 
  char *emg_21_emg_param_1_2;
  #line 4166 
  char *emg_21_emg_param_1_4;
  #line 4167 
  int emg_21_emg_param_2_1;
  #line 4168 
  long long *emg_21_emg_param_3_3;
  #line 4169 
  long long *emg_21_emg_param_3_5;
  #line 4170 
  struct file *emg_21_resource_0;
  #line 4171 
  struct inode *emg_21_resource_1;
  #line 4172 
  int emg_21_ret;
  #line 4173 
  unsigned long emg_21_size_cnt;
  #line 4174 
  int emg_repeat_cnt_main_21_1 = 1;
  #line 4175 
  int emg_repeat_cnt_call_21 = 1;
  #line 4176 
  int emg_repeat_cnt_main_21_0 = 1;
  #line 4178 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 4182 
  emg_21_ret = ldv_undef_int();
  #line 4183 
  emg_21_container = emg_alias_error_elp_while_rx_exch_ops;
  #line 4184 
  emg_21_ret = ldv_undef_int();
  #line 4186 
  __VERIFIER_assume(data->arg0 == emg_alias_error_elp_while_rx_exch_ops);
  #line 4188 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 4189 
    emg_21_container = data->arg0;
    #line 4190 
    ldv_free((void *)data);
  }
  #line 4195 
  emg_21_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 4196 
  emg_21_size_cnt = (unsigned long)ldv_undef_int();
  #line 4200 
  goto emg_main_21;
  #line 4204 
  return (void *)0;
  #line 4207 
  emg_call_21: 
               #line 4207 
  ;
  #line 4208 
  if (ldv_undef_int() != 0) {
    #line 4209 
    switch (ldv_undef_int()) {
      #line 4210 
      case 0: 
              #line 4210 
      ;
      #line 4212 
      emg_21_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 4212 
      emg_21_emg_param_1_2 = emg_21_emg_param_1_2;
      #line 4213 
      emg_21_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 4213 
      emg_21_emg_param_3_3 = emg_21_emg_param_3_3;
      #line 4217 
      emg_wrapper_error_elp_while_rx_exch_read(emg_21_resource_0,emg_21_emg_param_1_2,emg_21_size_cnt,emg_21_emg_param_3_3);
      #line 4221 
      ldv_free((void *)emg_21_emg_param_1_2);
      #line 4222 
      ldv_free((void *)emg_21_emg_param_3_3);
      #line 4224 
      break;
      #line 4226 
      case 1: 
              #line 4226 
      ;
      #line 4228 
      generic_file_llseek(emg_21_resource_0,emg_21_emg_param_1_0,emg_21_emg_param_2_1);
      #line 4230 
      break;
      #line 4232 
      case 2: 
              #line 4232 
      ;
      #line 4239 
      __VERIFIER_assume(emg_21_size_cnt <= 2147479552UL);
      #line 4240 
      emg_21_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 4240 
      emg_21_emg_param_1_4 = emg_21_emg_param_1_4;
      #line 4241 
      emg_21_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 4241 
      emg_21_emg_param_3_5 = emg_21_emg_param_3_5;
      #line 4245 
      if (emg_21_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 4246 
        (*(emg_21_container->write))(emg_21_resource_0,emg_21_emg_param_1_4,emg_21_size_cnt,emg_21_emg_param_3_5);
      #line 4251 
      ldv_free((void *)emg_21_emg_param_1_4);
      #line 4252 
      ldv_free((void *)emg_21_emg_param_3_5);
      #line 4254 
      break;
      #line 4256 
      default: 
               #line 4256 
      ;
      #line 4256 
      __VERIFIER_assume(0);
    }
    #line 4259 
    if (emg_repeat_cnt_call_21 > 0) {
      #line 4260 
      emg_repeat_cnt_call_21 --;
      #line 4262 
      goto emg_call_21;
    }
    else 
         #line 4264 
         __VERIFIER_assume(0);
  }
  else {
    #line 4270 
    if (emg_21_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 4271 
      (*(emg_21_container->release))(emg_21_resource_1,emg_21_resource_0);
    #line 4275 
    if (emg_repeat_cnt_main_21_0 > 0) {
      #line 4276 
      emg_repeat_cnt_main_21_0 --;
      #line 4278 
      goto emg_main_21;
    }
    else 
         #line 4280 
         __VERIFIER_assume(0);
  }
  #line 4286 
  return (void *)0;
  #line 4289 
  emg_main_21: 
               #line 4289 
  ;
  #line 4290 
  if (ldv_undef_int() != 0) {
    #line 4292 
    emg_21_ret = simple_open(emg_21_resource_1,emg_21_resource_0);
    #line 4297 
    emg_21_ret = ldv_filter_err_code(emg_21_ret);
    #line 4300 
    if (ldv_undef_int() != 0) {
      #line 4302 
      __VERIFIER_assume(emg_21_ret == 0);
      #line 4306 
      goto emg_call_21;
    }
    else {
      #line 4311 
      __VERIFIER_assume(emg_21_ret != 0);
      #line 4314 
      if (emg_repeat_cnt_main_21_1 > 0) {
        #line 4315 
        emg_repeat_cnt_main_21_1 --;
        #line 4317 
        goto emg_main_21;
      }
      else 
           #line 4319 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 4326 
       ldv_free((void *)emg_21_resource_0);
  #line 4334 
  return (void *)0;
}

#line 4339  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_error_elp_while_tx_exch_ops(void *arg0)
{
  #line 4342 
  struct file_operations *emg_22_container;
  #line 4343 
  long long emg_22_emg_param_1_0;
  #line 4344 
  char *emg_22_emg_param_1_2;
  #line 4345 
  char *emg_22_emg_param_1_4;
  #line 4346 
  int emg_22_emg_param_2_1;
  #line 4347 
  long long *emg_22_emg_param_3_3;
  #line 4348 
  long long *emg_22_emg_param_3_5;
  #line 4349 
  struct file *emg_22_resource_0;
  #line 4350 
  struct inode *emg_22_resource_1;
  #line 4351 
  int emg_22_ret;
  #line 4352 
  unsigned long emg_22_size_cnt;
  #line 4353 
  int emg_repeat_cnt_main_22_1 = 1;
  #line 4354 
  int emg_repeat_cnt_main_22_0 = 1;
  #line 4355 
  int emg_repeat_cnt_call_22 = 1;
  #line 4357 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 4361 
  emg_22_ret = ldv_undef_int();
  #line 4362 
  emg_22_container = emg_alias_error_elp_while_tx_exch_ops;
  #line 4363 
  emg_22_ret = ldv_undef_int();
  #line 4365 
  __VERIFIER_assume(data->arg0 == emg_alias_error_elp_while_tx_exch_ops);
  #line 4367 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 4368 
    emg_22_container = data->arg0;
    #line 4369 
    ldv_free((void *)data);
  }
  #line 4374 
  emg_22_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 4375 
  emg_22_size_cnt = (unsigned long)ldv_undef_int();
  #line 4379 
  goto emg_main_22;
  #line 4383 
  return (void *)0;
  #line 4386 
  emg_call_22: 
               #line 4386 
  ;
  #line 4387 
  if (ldv_undef_int() != 0) {
    #line 4388 
    switch (ldv_undef_int()) {
      #line 4389 
      case 0: 
              #line 4389 
      ;
      #line 4391 
      emg_22_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 4391 
      emg_22_emg_param_1_2 = emg_22_emg_param_1_2;
      #line 4392 
      emg_22_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 4392 
      emg_22_emg_param_3_3 = emg_22_emg_param_3_3;
      #line 4396 
      emg_wrapper_error_elp_while_tx_exch_read(emg_22_resource_0,emg_22_emg_param_1_2,emg_22_size_cnt,emg_22_emg_param_3_3);
      #line 4400 
      ldv_free((void *)emg_22_emg_param_1_2);
      #line 4401 
      ldv_free((void *)emg_22_emg_param_3_3);
      #line 4403 
      break;
      #line 4405 
      case 1: 
              #line 4405 
      ;
      #line 4407 
      generic_file_llseek(emg_22_resource_0,emg_22_emg_param_1_0,emg_22_emg_param_2_1);
      #line 4409 
      break;
      #line 4411 
      case 2: 
              #line 4411 
      ;
      #line 4418 
      __VERIFIER_assume(emg_22_size_cnt <= 2147479552UL);
      #line 4419 
      emg_22_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 4419 
      emg_22_emg_param_1_4 = emg_22_emg_param_1_4;
      #line 4420 
      emg_22_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 4420 
      emg_22_emg_param_3_5 = emg_22_emg_param_3_5;
      #line 4424 
      if (emg_22_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 4425 
        (*(emg_22_container->write))(emg_22_resource_0,emg_22_emg_param_1_4,emg_22_size_cnt,emg_22_emg_param_3_5);
      #line 4430 
      ldv_free((void *)emg_22_emg_param_1_4);
      #line 4431 
      ldv_free((void *)emg_22_emg_param_3_5);
      #line 4433 
      break;
      #line 4435 
      default: 
               #line 4435 
      ;
      #line 4435 
      __VERIFIER_assume(0);
    }
    #line 4438 
    if (emg_repeat_cnt_call_22 > 0) {
      #line 4439 
      emg_repeat_cnt_call_22 --;
      #line 4441 
      goto emg_call_22;
    }
    else 
         #line 4443 
         __VERIFIER_assume(0);
  }
  else {
    #line 4449 
    if (emg_22_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 4450 
      (*(emg_22_container->release))(emg_22_resource_1,emg_22_resource_0);
    #line 4454 
    if (emg_repeat_cnt_main_22_1 > 0) {
      #line 4455 
      emg_repeat_cnt_main_22_1 --;
      #line 4457 
      goto emg_main_22;
    }
    else 
         #line 4459 
         __VERIFIER_assume(0);
  }
  #line 4465 
  return (void *)0;
  #line 4468 
  emg_main_22: 
               #line 4468 
  ;
  #line 4469 
  if (ldv_undef_int() != 0) {
    #line 4471 
    emg_22_ret = simple_open(emg_22_resource_1,emg_22_resource_0);
    #line 4476 
    emg_22_ret = ldv_filter_err_code(emg_22_ret);
    #line 4479 
    if (ldv_undef_int() != 0) {
      #line 4481 
      __VERIFIER_assume(emg_22_ret == 0);
      #line 4485 
      goto emg_call_22;
    }
    else {
      #line 4490 
      __VERIFIER_assume(emg_22_ret != 0);
      #line 4493 
      if (emg_repeat_cnt_main_22_0 > 0) {
        #line 4494 
        emg_repeat_cnt_main_22_0 --;
        #line 4496 
        goto emg_main_22;
      }
      else 
           #line 4498 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 4505 
       ldv_free((void *)emg_22_resource_0);
  #line 4513 
  return (void *)0;
}

#line 4518  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_error_elp_while_tx_ops(void *arg0)
{
  #line 4521 
  struct file_operations *emg_23_container;
  #line 4522 
  long long emg_23_emg_param_1_0;
  #line 4523 
  char *emg_23_emg_param_1_2;
  #line 4524 
  char *emg_23_emg_param_1_4;
  #line 4525 
  int emg_23_emg_param_2_1;
  #line 4526 
  long long *emg_23_emg_param_3_3;
  #line 4527 
  long long *emg_23_emg_param_3_5;
  #line 4528 
  struct file *emg_23_resource_0;
  #line 4529 
  struct inode *emg_23_resource_1;
  #line 4530 
  int emg_23_ret;
  #line 4531 
  unsigned long emg_23_size_cnt;
  #line 4532 
  int emg_repeat_cnt_main_23_1 = 1;
  #line 4533 
  int emg_repeat_cnt_call_23 = 1;
  #line 4534 
  int emg_repeat_cnt_main_23_0 = 1;
  #line 4536 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 4540 
  emg_23_ret = ldv_undef_int();
  #line 4541 
  emg_23_container = emg_alias_error_elp_while_tx_ops;
  #line 4542 
  emg_23_ret = ldv_undef_int();
  #line 4544 
  __VERIFIER_assume(data->arg0 == emg_alias_error_elp_while_tx_ops);
  #line 4546 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 4547 
    emg_23_container = data->arg0;
    #line 4548 
    ldv_free((void *)data);
  }
  #line 4553 
  emg_23_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 4554 
  emg_23_size_cnt = (unsigned long)ldv_undef_int();
  #line 4558 
  goto emg_main_23;
  #line 4562 
  return (void *)0;
  #line 4565 
  emg_call_23: 
               #line 4565 
  ;
  #line 4566 
  if (ldv_undef_int() != 0) {
    #line 4567 
    switch (ldv_undef_int()) {
      #line 4568 
      case 0: 
              #line 4568 
      ;
      #line 4570 
      emg_23_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 4570 
      emg_23_emg_param_1_2 = emg_23_emg_param_1_2;
      #line 4571 
      emg_23_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 4571 
      emg_23_emg_param_3_3 = emg_23_emg_param_3_3;
      #line 4575 
      emg_wrapper_error_elp_while_tx_read(emg_23_resource_0,emg_23_emg_param_1_2,emg_23_size_cnt,emg_23_emg_param_3_3);
      #line 4579 
      ldv_free((void *)emg_23_emg_param_1_2);
      #line 4580 
      ldv_free((void *)emg_23_emg_param_3_3);
      #line 4582 
      break;
      #line 4584 
      case 1: 
              #line 4584 
      ;
      #line 4586 
      generic_file_llseek(emg_23_resource_0,emg_23_emg_param_1_0,emg_23_emg_param_2_1);
      #line 4588 
      break;
      #line 4590 
      case 2: 
              #line 4590 
      ;
      #line 4597 
      __VERIFIER_assume(emg_23_size_cnt <= 2147479552UL);
      #line 4598 
      emg_23_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 4598 
      emg_23_emg_param_1_4 = emg_23_emg_param_1_4;
      #line 4599 
      emg_23_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 4599 
      emg_23_emg_param_3_5 = emg_23_emg_param_3_5;
      #line 4603 
      if (emg_23_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 4604 
        (*(emg_23_container->write))(emg_23_resource_0,emg_23_emg_param_1_4,emg_23_size_cnt,emg_23_emg_param_3_5);
      #line 4609 
      ldv_free((void *)emg_23_emg_param_1_4);
      #line 4610 
      ldv_free((void *)emg_23_emg_param_3_5);
      #line 4612 
      break;
      #line 4614 
      default: 
               #line 4614 
      ;
      #line 4614 
      __VERIFIER_assume(0);
    }
    #line 4617 
    if (emg_repeat_cnt_call_23 > 0) {
      #line 4618 
      emg_repeat_cnt_call_23 --;
      #line 4620 
      goto emg_call_23;
    }
    else 
         #line 4622 
         __VERIFIER_assume(0);
  }
  else {
    #line 4628 
    if (emg_23_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 4629 
      (*(emg_23_container->release))(emg_23_resource_1,emg_23_resource_0);
    #line 4633 
    if (emg_repeat_cnt_main_23_1 > 0) {
      #line 4634 
      emg_repeat_cnt_main_23_1 --;
      #line 4636 
      goto emg_main_23;
    }
    else 
         #line 4638 
         __VERIFIER_assume(0);
  }
  #line 4644 
  return (void *)0;
  #line 4647 
  emg_main_23: 
               #line 4647 
  ;
  #line 4648 
  if (ldv_undef_int() != 0) {
    #line 4650 
    emg_23_ret = simple_open(emg_23_resource_1,emg_23_resource_0);
    #line 4655 
    emg_23_ret = ldv_filter_err_code(emg_23_ret);
    #line 4658 
    if (ldv_undef_int() != 0) {
      #line 4660 
      __VERIFIER_assume(emg_23_ret == 0);
      #line 4664 
      goto emg_call_23;
    }
    else {
      #line 4669 
      __VERIFIER_assume(emg_23_ret != 0);
      #line 4672 
      if (emg_repeat_cnt_main_23_0 > 0) {
        #line 4673 
        emg_repeat_cnt_main_23_0 --;
        #line 4675 
        goto emg_main_23;
      }
      else 
           #line 4677 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 4684 
       ldv_free((void *)emg_23_resource_0);
  #line 4692 
  return (void *)0;
}

#line 4697  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_error_error_frame_ctrl_ops(void *arg0)
{
  #line 4700 
  struct file_operations *emg_24_container;
  #line 4701 
  long long emg_24_emg_param_1_0;
  #line 4702 
  char *emg_24_emg_param_1_2;
  #line 4703 
  char *emg_24_emg_param_1_4;
  #line 4704 
  int emg_24_emg_param_2_1;
  #line 4705 
  long long *emg_24_emg_param_3_3;
  #line 4706 
  long long *emg_24_emg_param_3_5;
  #line 4707 
  struct file *emg_24_resource_0;
  #line 4708 
  struct inode *emg_24_resource_1;
  #line 4709 
  int emg_24_ret;
  #line 4710 
  unsigned long emg_24_size_cnt;
  #line 4711 
  int emg_repeat_cnt_main_24_1 = 1;
  #line 4712 
  int emg_repeat_cnt_main_24_0 = 1;
  #line 4713 
  int emg_repeat_cnt_call_24 = 1;
  #line 4715 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 4719 
  emg_24_ret = ldv_undef_int();
  #line 4720 
  emg_24_container = emg_alias_error_error_frame_ctrl_ops;
  #line 4721 
  emg_24_ret = ldv_undef_int();
  #line 4723 
  __VERIFIER_assume(data->arg0 == emg_alias_error_error_frame_ctrl_ops);
  #line 4725 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 4726 
    emg_24_container = data->arg0;
    #line 4727 
    ldv_free((void *)data);
  }
  #line 4732 
  emg_24_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 4733 
  emg_24_size_cnt = (unsigned long)ldv_undef_int();
  #line 4737 
  goto emg_main_24;
  #line 4741 
  return (void *)0;
  #line 4744 
  emg_call_24: 
               #line 4744 
  ;
  #line 4745 
  if (ldv_undef_int() != 0) {
    #line 4746 
    switch (ldv_undef_int()) {
      #line 4747 
      case 0: 
              #line 4747 
      ;
      #line 4749 
      emg_24_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 4749 
      emg_24_emg_param_1_2 = emg_24_emg_param_1_2;
      #line 4750 
      emg_24_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 4750 
      emg_24_emg_param_3_3 = emg_24_emg_param_3_3;
      #line 4754 
      emg_wrapper_error_error_frame_ctrl_read(emg_24_resource_0,emg_24_emg_param_1_2,emg_24_size_cnt,emg_24_emg_param_3_3);
      #line 4758 
      ldv_free((void *)emg_24_emg_param_1_2);
      #line 4759 
      ldv_free((void *)emg_24_emg_param_3_3);
      #line 4761 
      break;
      #line 4763 
      case 1: 
              #line 4763 
      ;
      #line 4765 
      generic_file_llseek(emg_24_resource_0,emg_24_emg_param_1_0,emg_24_emg_param_2_1);
      #line 4767 
      break;
      #line 4769 
      case 2: 
              #line 4769 
      ;
      #line 4776 
      __VERIFIER_assume(emg_24_size_cnt <= 2147479552UL);
      #line 4777 
      emg_24_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 4777 
      emg_24_emg_param_1_4 = emg_24_emg_param_1_4;
      #line 4778 
      emg_24_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 4778 
      emg_24_emg_param_3_5 = emg_24_emg_param_3_5;
      #line 4782 
      if (emg_24_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 4783 
        (*(emg_24_container->write))(emg_24_resource_0,emg_24_emg_param_1_4,emg_24_size_cnt,emg_24_emg_param_3_5);
      #line 4788 
      ldv_free((void *)emg_24_emg_param_1_4);
      #line 4789 
      ldv_free((void *)emg_24_emg_param_3_5);
      #line 4791 
      break;
      #line 4793 
      default: 
               #line 4793 
      ;
      #line 4793 
      __VERIFIER_assume(0);
    }
    #line 4796 
    if (emg_repeat_cnt_call_24 > 0) {
      #line 4797 
      emg_repeat_cnt_call_24 --;
      #line 4799 
      goto emg_call_24;
    }
    else 
         #line 4801 
         __VERIFIER_assume(0);
  }
  else {
    #line 4807 
    if (emg_24_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 4808 
      (*(emg_24_container->release))(emg_24_resource_1,emg_24_resource_0);
    #line 4812 
    if (emg_repeat_cnt_main_24_0 > 0) {
      #line 4813 
      emg_repeat_cnt_main_24_0 --;
      #line 4815 
      goto emg_main_24;
    }
    else 
         #line 4817 
         __VERIFIER_assume(0);
  }
  #line 4823 
  return (void *)0;
  #line 4826 
  emg_main_24: 
               #line 4826 
  ;
  #line 4827 
  if (ldv_undef_int() != 0) {
    #line 4829 
    emg_24_ret = simple_open(emg_24_resource_1,emg_24_resource_0);
    #line 4834 
    emg_24_ret = ldv_filter_err_code(emg_24_ret);
    #line 4837 
    if (ldv_undef_int() != 0) {
      #line 4839 
      __VERIFIER_assume(emg_24_ret == 0);
      #line 4843 
      goto emg_call_24;
    }
    else {
      #line 4848 
      __VERIFIER_assume(emg_24_ret != 0);
      #line 4851 
      if (emg_repeat_cnt_main_24_1 > 0) {
        #line 4852 
        emg_repeat_cnt_main_24_1 --;
        #line 4854 
        goto emg_main_24;
      }
      else 
           #line 4856 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 4863 
       ldv_free((void *)emg_24_resource_0);
  #line 4871 
  return (void *)0;
}

#line 4876  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_error_error_frame_during_protection_ops(void *arg0)
{
  #line 4879 
  struct file_operations *emg_25_container;
  #line 4880 
  long long emg_25_emg_param_1_0;
  #line 4881 
  char *emg_25_emg_param_1_2;
  #line 4882 
  char *emg_25_emg_param_1_4;
  #line 4883 
  int emg_25_emg_param_2_1;
  #line 4884 
  long long *emg_25_emg_param_3_3;
  #line 4885 
  long long *emg_25_emg_param_3_5;
  #line 4886 
  struct file *emg_25_resource_0;
  #line 4887 
  struct inode *emg_25_resource_1;
  #line 4888 
  int emg_25_ret;
  #line 4889 
  unsigned long emg_25_size_cnt;
  #line 4890 
  int emg_repeat_cnt_main_25_1 = 1;
  #line 4891 
  int emg_repeat_cnt_main_25_0 = 1;
  #line 4892 
  int emg_repeat_cnt_call_25 = 1;
  #line 4894 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 4898 
  emg_25_ret = ldv_undef_int();
  #line 4899 
  emg_25_container = emg_alias_error_error_frame_during_protection_ops;
  #line 4900 
  emg_25_ret = ldv_undef_int();
  #line 4902 
  __VERIFIER_assume(data->arg0 == emg_alias_error_error_frame_during_protection_ops);
  #line 4904 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 4905 
    emg_25_container = data->arg0;
    #line 4906 
    ldv_free((void *)data);
  }
  #line 4911 
  emg_25_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 4912 
  emg_25_size_cnt = (unsigned long)ldv_undef_int();
  #line 4916 
  goto emg_main_25;
  #line 4920 
  return (void *)0;
  #line 4923 
  emg_call_25: 
               #line 4923 
  ;
  #line 4924 
  if (ldv_undef_int() != 0) {
    #line 4925 
    switch (ldv_undef_int()) {
      #line 4926 
      case 0: 
              #line 4926 
      ;
      #line 4928 
      emg_25_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 4928 
      emg_25_emg_param_1_2 = emg_25_emg_param_1_2;
      #line 4929 
      emg_25_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 4929 
      emg_25_emg_param_3_3 = emg_25_emg_param_3_3;
      #line 4933 
      emg_wrapper_error_error_frame_during_protection_read(emg_25_resource_0,emg_25_emg_param_1_2,emg_25_size_cnt,emg_25_emg_param_3_3);
      #line 4937 
      ldv_free((void *)emg_25_emg_param_1_2);
      #line 4938 
      ldv_free((void *)emg_25_emg_param_3_3);
      #line 4940 
      break;
      #line 4942 
      case 1: 
              #line 4942 
      ;
      #line 4944 
      generic_file_llseek(emg_25_resource_0,emg_25_emg_param_1_0,emg_25_emg_param_2_1);
      #line 4946 
      break;
      #line 4948 
      case 2: 
              #line 4948 
      ;
      #line 4955 
      __VERIFIER_assume(emg_25_size_cnt <= 2147479552UL);
      #line 4956 
      emg_25_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 4956 
      emg_25_emg_param_1_4 = emg_25_emg_param_1_4;
      #line 4957 
      emg_25_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 4957 
      emg_25_emg_param_3_5 = emg_25_emg_param_3_5;
      #line 4961 
      if (emg_25_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 4962 
        (*(emg_25_container->write))(emg_25_resource_0,emg_25_emg_param_1_4,emg_25_size_cnt,emg_25_emg_param_3_5);
      #line 4967 
      ldv_free((void *)emg_25_emg_param_1_4);
      #line 4968 
      ldv_free((void *)emg_25_emg_param_3_5);
      #line 4970 
      break;
      #line 4972 
      default: 
               #line 4972 
      ;
      #line 4972 
      __VERIFIER_assume(0);
    }
    #line 4975 
    if (emg_repeat_cnt_call_25 > 0) {
      #line 4976 
      emg_repeat_cnt_call_25 --;
      #line 4978 
      goto emg_call_25;
    }
    else 
         #line 4980 
         __VERIFIER_assume(0);
  }
  else {
    #line 4986 
    if (emg_25_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 4987 
      (*(emg_25_container->release))(emg_25_resource_1,emg_25_resource_0);
    #line 4991 
    if (emg_repeat_cnt_main_25_0 > 0) {
      #line 4992 
      emg_repeat_cnt_main_25_0 --;
      #line 4994 
      goto emg_main_25;
    }
    else 
         #line 4996 
         __VERIFIER_assume(0);
  }
  #line 5002 
  return (void *)0;
  #line 5005 
  emg_main_25: 
               #line 5005 
  ;
  #line 5006 
  if (ldv_undef_int() != 0) {
    #line 5008 
    emg_25_ret = simple_open(emg_25_resource_1,emg_25_resource_0);
    #line 5013 
    emg_25_ret = ldv_filter_err_code(emg_25_ret);
    #line 5016 
    if (ldv_undef_int() != 0) {
      #line 5018 
      __VERIFIER_assume(emg_25_ret == 0);
      #line 5022 
      goto emg_call_25;
    }
    else {
      #line 5027 
      __VERIFIER_assume(emg_25_ret != 0);
      #line 5030 
      if (emg_repeat_cnt_main_25_1 > 0) {
        #line 5031 
        emg_repeat_cnt_main_25_1 --;
        #line 5033 
        goto emg_main_25;
      }
      else 
           #line 5035 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 5042 
       ldv_free((void *)emg_25_resource_0);
  #line 5050 
  return (void *)0;
}

#line 5055  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_error_error_frame_non_ctrl_ops(void *arg0)
{
  #line 5058 
  struct file_operations *emg_26_container;
  #line 5059 
  long long emg_26_emg_param_1_0;
  #line 5060 
  char *emg_26_emg_param_1_2;
  #line 5061 
  char *emg_26_emg_param_1_4;
  #line 5062 
  int emg_26_emg_param_2_1;
  #line 5063 
  long long *emg_26_emg_param_3_3;
  #line 5064 
  long long *emg_26_emg_param_3_5;
  #line 5065 
  struct file *emg_26_resource_0;
  #line 5066 
  struct inode *emg_26_resource_1;
  #line 5067 
  int emg_26_ret;
  #line 5068 
  unsigned long emg_26_size_cnt;
  #line 5069 
  int emg_repeat_cnt_main_26_0 = 1;
  #line 5070 
  int emg_repeat_cnt_call_26 = 1;
  #line 5071 
  int emg_repeat_cnt_main_26_1 = 1;
  #line 5073 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 5077 
  emg_26_ret = ldv_undef_int();
  #line 5078 
  emg_26_container = emg_alias_error_error_frame_non_ctrl_ops;
  #line 5079 
  emg_26_ret = ldv_undef_int();
  #line 5081 
  __VERIFIER_assume(data->arg0 == emg_alias_error_error_frame_non_ctrl_ops);
  #line 5083 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 5084 
    emg_26_container = data->arg0;
    #line 5085 
    ldv_free((void *)data);
  }
  #line 5090 
  emg_26_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 5091 
  emg_26_size_cnt = (unsigned long)ldv_undef_int();
  #line 5095 
  goto emg_main_26;
  #line 5099 
  return (void *)0;
  #line 5102 
  emg_call_26: 
               #line 5102 
  ;
  #line 5103 
  if (ldv_undef_int() != 0) {
    #line 5104 
    switch (ldv_undef_int()) {
      #line 5105 
      case 0: 
              #line 5105 
      ;
      #line 5107 
      emg_26_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 5107 
      emg_26_emg_param_1_2 = emg_26_emg_param_1_2;
      #line 5108 
      emg_26_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 5108 
      emg_26_emg_param_3_3 = emg_26_emg_param_3_3;
      #line 5112 
      emg_wrapper_error_error_frame_non_ctrl_read(emg_26_resource_0,emg_26_emg_param_1_2,emg_26_size_cnt,emg_26_emg_param_3_3);
      #line 5116 
      ldv_free((void *)emg_26_emg_param_1_2);
      #line 5117 
      ldv_free((void *)emg_26_emg_param_3_3);
      #line 5119 
      break;
      #line 5121 
      case 1: 
              #line 5121 
      ;
      #line 5123 
      generic_file_llseek(emg_26_resource_0,emg_26_emg_param_1_0,emg_26_emg_param_2_1);
      #line 5125 
      break;
      #line 5127 
      case 2: 
              #line 5127 
      ;
      #line 5134 
      __VERIFIER_assume(emg_26_size_cnt <= 2147479552UL);
      #line 5135 
      emg_26_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 5135 
      emg_26_emg_param_1_4 = emg_26_emg_param_1_4;
      #line 5136 
      emg_26_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 5136 
      emg_26_emg_param_3_5 = emg_26_emg_param_3_5;
      #line 5140 
      if (emg_26_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 5141 
        (*(emg_26_container->write))(emg_26_resource_0,emg_26_emg_param_1_4,emg_26_size_cnt,emg_26_emg_param_3_5);
      #line 5146 
      ldv_free((void *)emg_26_emg_param_1_4);
      #line 5147 
      ldv_free((void *)emg_26_emg_param_3_5);
      #line 5149 
      break;
      #line 5151 
      default: 
               #line 5151 
      ;
      #line 5151 
      __VERIFIER_assume(0);
    }
    #line 5154 
    if (emg_repeat_cnt_call_26 > 0) {
      #line 5155 
      emg_repeat_cnt_call_26 --;
      #line 5157 
      goto emg_call_26;
    }
    else 
         #line 5159 
         __VERIFIER_assume(0);
  }
  else {
    #line 5165 
    if (emg_26_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 5166 
      (*(emg_26_container->release))(emg_26_resource_1,emg_26_resource_0);
    #line 5170 
    if (emg_repeat_cnt_main_26_0 > 0) {
      #line 5171 
      emg_repeat_cnt_main_26_0 --;
      #line 5173 
      goto emg_main_26;
    }
    else 
         #line 5175 
         __VERIFIER_assume(0);
  }
  #line 5181 
  return (void *)0;
  #line 5184 
  emg_main_26: 
               #line 5184 
  ;
  #line 5185 
  if (ldv_undef_int() != 0) {
    #line 5187 
    emg_26_ret = simple_open(emg_26_resource_1,emg_26_resource_0);
    #line 5192 
    emg_26_ret = ldv_filter_err_code(emg_26_ret);
    #line 5195 
    if (ldv_undef_int() != 0) {
      #line 5197 
      __VERIFIER_assume(emg_26_ret == 0);
      #line 5201 
      goto emg_call_26;
    }
    else {
      #line 5206 
      __VERIFIER_assume(emg_26_ret != 0);
      #line 5209 
      if (emg_repeat_cnt_main_26_1 > 0) {
        #line 5210 
        emg_repeat_cnt_main_26_1 --;
        #line 5212 
        goto emg_main_26;
      }
      else 
           #line 5214 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 5221 
       ldv_free((void *)emg_26_resource_0);
  #line 5229 
  return (void *)0;
}

#line 5234  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_error_null_frame_cts_start_ops(void *arg0)
{
  #line 5237 
  struct file_operations *emg_27_container;
  #line 5238 
  long long emg_27_emg_param_1_0;
  #line 5239 
  char *emg_27_emg_param_1_2;
  #line 5240 
  char *emg_27_emg_param_1_4;
  #line 5241 
  int emg_27_emg_param_2_1;
  #line 5242 
  long long *emg_27_emg_param_3_3;
  #line 5243 
  long long *emg_27_emg_param_3_5;
  #line 5244 
  struct file *emg_27_resource_0;
  #line 5245 
  struct inode *emg_27_resource_1;
  #line 5246 
  int emg_27_ret;
  #line 5247 
  unsigned long emg_27_size_cnt;
  #line 5248 
  int emg_repeat_cnt_main_27_0 = 1;
  #line 5249 
  int emg_repeat_cnt_call_27 = 1;
  #line 5250 
  int emg_repeat_cnt_main_27_1 = 1;
  #line 5252 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 5256 
  emg_27_ret = ldv_undef_int();
  #line 5257 
  emg_27_container = emg_alias_error_null_frame_cts_start_ops;
  #line 5258 
  emg_27_ret = ldv_undef_int();
  #line 5260 
  __VERIFIER_assume(data->arg0 == emg_alias_error_null_frame_cts_start_ops);
  #line 5262 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 5263 
    emg_27_container = data->arg0;
    #line 5264 
    ldv_free((void *)data);
  }
  #line 5269 
  emg_27_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 5270 
  emg_27_size_cnt = (unsigned long)ldv_undef_int();
  #line 5274 
  goto emg_main_27;
  #line 5278 
  return (void *)0;
  #line 5281 
  emg_call_27: 
               #line 5281 
  ;
  #line 5282 
  if (ldv_undef_int() != 0) {
    #line 5283 
    switch (ldv_undef_int()) {
      #line 5284 
      case 0: 
              #line 5284 
      ;
      #line 5286 
      emg_27_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 5286 
      emg_27_emg_param_1_2 = emg_27_emg_param_1_2;
      #line 5287 
      emg_27_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 5287 
      emg_27_emg_param_3_3 = emg_27_emg_param_3_3;
      #line 5291 
      emg_wrapper_error_null_frame_cts_start_read(emg_27_resource_0,emg_27_emg_param_1_2,emg_27_size_cnt,emg_27_emg_param_3_3);
      #line 5295 
      ldv_free((void *)emg_27_emg_param_1_2);
      #line 5296 
      ldv_free((void *)emg_27_emg_param_3_3);
      #line 5298 
      break;
      #line 5300 
      case 1: 
              #line 5300 
      ;
      #line 5302 
      generic_file_llseek(emg_27_resource_0,emg_27_emg_param_1_0,emg_27_emg_param_2_1);
      #line 5304 
      break;
      #line 5306 
      case 2: 
              #line 5306 
      ;
      #line 5313 
      __VERIFIER_assume(emg_27_size_cnt <= 2147479552UL);
      #line 5314 
      emg_27_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 5314 
      emg_27_emg_param_1_4 = emg_27_emg_param_1_4;
      #line 5315 
      emg_27_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 5315 
      emg_27_emg_param_3_5 = emg_27_emg_param_3_5;
      #line 5319 
      if (emg_27_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 5320 
        (*(emg_27_container->write))(emg_27_resource_0,emg_27_emg_param_1_4,emg_27_size_cnt,emg_27_emg_param_3_5);
      #line 5325 
      ldv_free((void *)emg_27_emg_param_1_4);
      #line 5326 
      ldv_free((void *)emg_27_emg_param_3_5);
      #line 5328 
      break;
      #line 5330 
      default: 
               #line 5330 
      ;
      #line 5330 
      __VERIFIER_assume(0);
    }
    #line 5333 
    if (emg_repeat_cnt_call_27 > 0) {
      #line 5334 
      emg_repeat_cnt_call_27 --;
      #line 5336 
      goto emg_call_27;
    }
    else 
         #line 5338 
         __VERIFIER_assume(0);
  }
  else {
    #line 5344 
    if (emg_27_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 5345 
      (*(emg_27_container->release))(emg_27_resource_1,emg_27_resource_0);
    #line 5349 
    if (emg_repeat_cnt_main_27_0 > 0) {
      #line 5350 
      emg_repeat_cnt_main_27_0 --;
      #line 5352 
      goto emg_main_27;
    }
    else 
         #line 5354 
         __VERIFIER_assume(0);
  }
  #line 5360 
  return (void *)0;
  #line 5363 
  emg_main_27: 
               #line 5363 
  ;
  #line 5364 
  if (ldv_undef_int() != 0) {
    #line 5366 
    emg_27_ret = simple_open(emg_27_resource_1,emg_27_resource_0);
    #line 5371 
    emg_27_ret = ldv_filter_err_code(emg_27_ret);
    #line 5374 
    if (ldv_undef_int() != 0) {
      #line 5376 
      __VERIFIER_assume(emg_27_ret == 0);
      #line 5380 
      goto emg_call_27;
    }
    else {
      #line 5385 
      __VERIFIER_assume(emg_27_ret != 0);
      #line 5388 
      if (emg_repeat_cnt_main_27_1 > 0) {
        #line 5389 
        emg_repeat_cnt_main_27_1 --;
        #line 5391 
        goto emg_main_27;
      }
      else 
           #line 5393 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 5400 
       ldv_free((void *)emg_27_resource_0);
  #line 5408 
  return (void *)0;
}

#line 5413  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_error_null_frame_tx_start_ops(void *arg0)
{
  #line 5416 
  struct file_operations *emg_28_container;
  #line 5417 
  long long emg_28_emg_param_1_0;
  #line 5418 
  char *emg_28_emg_param_1_2;
  #line 5419 
  char *emg_28_emg_param_1_4;
  #line 5420 
  int emg_28_emg_param_2_1;
  #line 5421 
  long long *emg_28_emg_param_3_3;
  #line 5422 
  long long *emg_28_emg_param_3_5;
  #line 5423 
  struct file *emg_28_resource_0;
  #line 5424 
  struct inode *emg_28_resource_1;
  #line 5425 
  int emg_28_ret;
  #line 5426 
  unsigned long emg_28_size_cnt;
  #line 5427 
  int emg_repeat_cnt_main_28_1 = 1;
  #line 5428 
  int emg_repeat_cnt_main_28_0 = 1;
  #line 5429 
  int emg_repeat_cnt_call_28 = 1;
  #line 5431 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 5435 
  emg_28_ret = ldv_undef_int();
  #line 5436 
  emg_28_container = emg_alias_error_null_frame_tx_start_ops;
  #line 5437 
  emg_28_ret = ldv_undef_int();
  #line 5439 
  __VERIFIER_assume(data->arg0 == emg_alias_error_null_frame_tx_start_ops);
  #line 5441 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 5442 
    emg_28_container = data->arg0;
    #line 5443 
    ldv_free((void *)data);
  }
  #line 5448 
  emg_28_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 5449 
  emg_28_size_cnt = (unsigned long)ldv_undef_int();
  #line 5453 
  goto emg_main_28;
  #line 5457 
  return (void *)0;
  #line 5460 
  emg_call_28: 
               #line 5460 
  ;
  #line 5461 
  if (ldv_undef_int() != 0) {
    #line 5462 
    switch (ldv_undef_int()) {
      #line 5463 
      case 0: 
              #line 5463 
      ;
      #line 5465 
      emg_28_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 5465 
      emg_28_emg_param_1_2 = emg_28_emg_param_1_2;
      #line 5466 
      emg_28_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 5466 
      emg_28_emg_param_3_3 = emg_28_emg_param_3_3;
      #line 5470 
      emg_wrapper_error_null_frame_tx_start_read(emg_28_resource_0,emg_28_emg_param_1_2,emg_28_size_cnt,emg_28_emg_param_3_3);
      #line 5474 
      ldv_free((void *)emg_28_emg_param_1_2);
      #line 5475 
      ldv_free((void *)emg_28_emg_param_3_3);
      #line 5477 
      break;
      #line 5479 
      case 1: 
              #line 5479 
      ;
      #line 5481 
      generic_file_llseek(emg_28_resource_0,emg_28_emg_param_1_0,emg_28_emg_param_2_1);
      #line 5483 
      break;
      #line 5485 
      case 2: 
              #line 5485 
      ;
      #line 5492 
      __VERIFIER_assume(emg_28_size_cnt <= 2147479552UL);
      #line 5493 
      emg_28_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 5493 
      emg_28_emg_param_1_4 = emg_28_emg_param_1_4;
      #line 5494 
      emg_28_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 5494 
      emg_28_emg_param_3_5 = emg_28_emg_param_3_5;
      #line 5498 
      if (emg_28_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 5499 
        (*(emg_28_container->write))(emg_28_resource_0,emg_28_emg_param_1_4,emg_28_size_cnt,emg_28_emg_param_3_5);
      #line 5504 
      ldv_free((void *)emg_28_emg_param_1_4);
      #line 5505 
      ldv_free((void *)emg_28_emg_param_3_5);
      #line 5507 
      break;
      #line 5509 
      default: 
               #line 5509 
      ;
      #line 5509 
      __VERIFIER_assume(0);
    }
    #line 5512 
    if (emg_repeat_cnt_call_28 > 0) {
      #line 5513 
      emg_repeat_cnt_call_28 --;
      #line 5515 
      goto emg_call_28;
    }
    else 
         #line 5517 
         __VERIFIER_assume(0);
  }
  else {
    #line 5523 
    if (emg_28_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 5524 
      (*(emg_28_container->release))(emg_28_resource_1,emg_28_resource_0);
    #line 5528 
    if (emg_repeat_cnt_main_28_0 > 0) {
      #line 5529 
      emg_repeat_cnt_main_28_0 --;
      #line 5531 
      goto emg_main_28;
    }
    else 
         #line 5533 
         __VERIFIER_assume(0);
  }
  #line 5539 
  return (void *)0;
  #line 5542 
  emg_main_28: 
               #line 5542 
  ;
  #line 5543 
  if (ldv_undef_int() != 0) {
    #line 5545 
    emg_28_ret = simple_open(emg_28_resource_1,emg_28_resource_0);
    #line 5550 
    emg_28_ret = ldv_filter_err_code(emg_28_ret);
    #line 5553 
    if (ldv_undef_int() != 0) {
      #line 5555 
      __VERIFIER_assume(emg_28_ret == 0);
      #line 5559 
      goto emg_call_28;
    }
    else {
      #line 5564 
      __VERIFIER_assume(emg_28_ret != 0);
      #line 5567 
      if (emg_repeat_cnt_main_28_1 > 0) {
        #line 5568 
        emg_repeat_cnt_main_28_1 --;
        #line 5570 
        goto emg_main_28;
      }
      else 
           #line 5572 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 5579 
       ldv_free((void *)emg_28_resource_0);
  #line 5587 
  return (void *)0;
}

#line 5592  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_error_num_frame_cts_nul_flid_ops(void *arg0)
{
  #line 5595 
  struct file_operations *emg_29_container;
  #line 5596 
  long long emg_29_emg_param_1_0;
  #line 5597 
  char *emg_29_emg_param_1_2;
  #line 5598 
  char *emg_29_emg_param_1_4;
  #line 5599 
  int emg_29_emg_param_2_1;
  #line 5600 
  long long *emg_29_emg_param_3_3;
  #line 5601 
  long long *emg_29_emg_param_3_5;
  #line 5602 
  struct file *emg_29_resource_0;
  #line 5603 
  struct inode *emg_29_resource_1;
  #line 5604 
  int emg_29_ret;
  #line 5605 
  unsigned long emg_29_size_cnt;
  #line 5606 
  int emg_repeat_cnt_main_29_1 = 1;
  #line 5607 
  int emg_repeat_cnt_call_29 = 1;
  #line 5608 
  int emg_repeat_cnt_main_29_0 = 1;
  #line 5610 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 5614 
  emg_29_ret = ldv_undef_int();
  #line 5615 
  emg_29_container = emg_alias_error_num_frame_cts_nul_flid_ops;
  #line 5616 
  emg_29_ret = ldv_undef_int();
  #line 5618 
  __VERIFIER_assume(data->arg0 == emg_alias_error_num_frame_cts_nul_flid_ops);
  #line 5620 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 5621 
    emg_29_container = data->arg0;
    #line 5622 
    ldv_free((void *)data);
  }
  #line 5627 
  emg_29_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 5628 
  emg_29_size_cnt = (unsigned long)ldv_undef_int();
  #line 5632 
  goto emg_main_29;
  #line 5636 
  return (void *)0;
  #line 5639 
  emg_call_29: 
               #line 5639 
  ;
  #line 5640 
  if (ldv_undef_int() != 0) {
    #line 5641 
    switch (ldv_undef_int()) {
      #line 5642 
      case 0: 
              #line 5642 
      ;
      #line 5644 
      emg_29_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 5644 
      emg_29_emg_param_1_2 = emg_29_emg_param_1_2;
      #line 5645 
      emg_29_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 5645 
      emg_29_emg_param_3_3 = emg_29_emg_param_3_3;
      #line 5649 
      emg_wrapper_error_num_frame_cts_nul_flid_read(emg_29_resource_0,emg_29_emg_param_1_2,emg_29_size_cnt,emg_29_emg_param_3_3);
      #line 5653 
      ldv_free((void *)emg_29_emg_param_1_2);
      #line 5654 
      ldv_free((void *)emg_29_emg_param_3_3);
      #line 5656 
      break;
      #line 5658 
      case 1: 
              #line 5658 
      ;
      #line 5660 
      generic_file_llseek(emg_29_resource_0,emg_29_emg_param_1_0,emg_29_emg_param_2_1);
      #line 5662 
      break;
      #line 5664 
      case 2: 
              #line 5664 
      ;
      #line 5671 
      __VERIFIER_assume(emg_29_size_cnt <= 2147479552UL);
      #line 5672 
      emg_29_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 5672 
      emg_29_emg_param_1_4 = emg_29_emg_param_1_4;
      #line 5673 
      emg_29_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 5673 
      emg_29_emg_param_3_5 = emg_29_emg_param_3_5;
      #line 5677 
      if (emg_29_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 5678 
        (*(emg_29_container->write))(emg_29_resource_0,emg_29_emg_param_1_4,emg_29_size_cnt,emg_29_emg_param_3_5);
      #line 5683 
      ldv_free((void *)emg_29_emg_param_1_4);
      #line 5684 
      ldv_free((void *)emg_29_emg_param_3_5);
      #line 5686 
      break;
      #line 5688 
      default: 
               #line 5688 
      ;
      #line 5688 
      __VERIFIER_assume(0);
    }
    #line 5691 
    if (emg_repeat_cnt_call_29 > 0) {
      #line 5692 
      emg_repeat_cnt_call_29 --;
      #line 5694 
      goto emg_call_29;
    }
    else 
         #line 5696 
         __VERIFIER_assume(0);
  }
  else {
    #line 5702 
    if (emg_29_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 5703 
      (*(emg_29_container->release))(emg_29_resource_1,emg_29_resource_0);
    #line 5707 
    if (emg_repeat_cnt_main_29_1 > 0) {
      #line 5708 
      emg_repeat_cnt_main_29_1 --;
      #line 5710 
      goto emg_main_29;
    }
    else 
         #line 5712 
         __VERIFIER_assume(0);
  }
  #line 5718 
  return (void *)0;
  #line 5721 
  emg_main_29: 
               #line 5721 
  ;
  #line 5722 
  if (ldv_undef_int() != 0) {
    #line 5724 
    emg_29_ret = simple_open(emg_29_resource_1,emg_29_resource_0);
    #line 5729 
    emg_29_ret = ldv_filter_err_code(emg_29_ret);
    #line 5732 
    if (ldv_undef_int() != 0) {
      #line 5734 
      __VERIFIER_assume(emg_29_ret == 0);
      #line 5738 
      goto emg_call_29;
    }
    else {
      #line 5743 
      __VERIFIER_assume(emg_29_ret != 0);
      #line 5746 
      if (emg_repeat_cnt_main_29_0 > 0) {
        #line 5747 
        emg_repeat_cnt_main_29_0 --;
        #line 5749 
        goto emg_main_29;
      }
      else 
           #line 5751 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 5758 
       ldv_free((void *)emg_29_resource_0);
  #line 5766 
  return (void *)0;
}

#line 5771  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_error_rx_cmplt_db_overflow_cnt_ops(void *arg0)
{
  #line 5774 
  struct file_operations *emg_30_container;
  #line 5775 
  long long emg_30_emg_param_1_0;
  #line 5776 
  char *emg_30_emg_param_1_2;
  #line 5777 
  char *emg_30_emg_param_1_4;
  #line 5778 
  int emg_30_emg_param_2_1;
  #line 5779 
  long long *emg_30_emg_param_3_3;
  #line 5780 
  long long *emg_30_emg_param_3_5;
  #line 5781 
  struct file *emg_30_resource_0;
  #line 5782 
  struct inode *emg_30_resource_1;
  #line 5783 
  int emg_30_ret;
  #line 5784 
  unsigned long emg_30_size_cnt;
  #line 5785 
  int emg_repeat_cnt_main_30_1 = 1;
  #line 5786 
  int emg_repeat_cnt_call_30 = 1;
  #line 5787 
  int emg_repeat_cnt_main_30_0 = 1;
  #line 5789 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 5793 
  emg_30_ret = ldv_undef_int();
  #line 5794 
  emg_30_container = emg_alias_error_rx_cmplt_db_overflow_cnt_ops;
  #line 5795 
  emg_30_ret = ldv_undef_int();
  #line 5797 
  __VERIFIER_assume(data->arg0 == emg_alias_error_rx_cmplt_db_overflow_cnt_ops);
  #line 5799 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 5800 
    emg_30_container = data->arg0;
    #line 5801 
    ldv_free((void *)data);
  }
  #line 5806 
  emg_30_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 5807 
  emg_30_size_cnt = (unsigned long)ldv_undef_int();
  #line 5811 
  goto emg_main_30;
  #line 5815 
  return (void *)0;
  #line 5818 
  emg_call_30: 
               #line 5818 
  ;
  #line 5819 
  if (ldv_undef_int() != 0) {
    #line 5820 
    switch (ldv_undef_int()) {
      #line 5821 
      case 0: 
              #line 5821 
      ;
      #line 5823 
      emg_30_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 5823 
      emg_30_emg_param_1_2 = emg_30_emg_param_1_2;
      #line 5824 
      emg_30_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 5824 
      emg_30_emg_param_3_3 = emg_30_emg_param_3_3;
      #line 5828 
      emg_wrapper_error_rx_cmplt_db_overflow_cnt_read(emg_30_resource_0,emg_30_emg_param_1_2,emg_30_size_cnt,emg_30_emg_param_3_3);
      #line 5832 
      ldv_free((void *)emg_30_emg_param_1_2);
      #line 5833 
      ldv_free((void *)emg_30_emg_param_3_3);
      #line 5835 
      break;
      #line 5837 
      case 1: 
              #line 5837 
      ;
      #line 5839 
      generic_file_llseek(emg_30_resource_0,emg_30_emg_param_1_0,emg_30_emg_param_2_1);
      #line 5841 
      break;
      #line 5843 
      case 2: 
              #line 5843 
      ;
      #line 5850 
      __VERIFIER_assume(emg_30_size_cnt <= 2147479552UL);
      #line 5851 
      emg_30_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 5851 
      emg_30_emg_param_1_4 = emg_30_emg_param_1_4;
      #line 5852 
      emg_30_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 5852 
      emg_30_emg_param_3_5 = emg_30_emg_param_3_5;
      #line 5856 
      if (emg_30_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 5857 
        (*(emg_30_container->write))(emg_30_resource_0,emg_30_emg_param_1_4,emg_30_size_cnt,emg_30_emg_param_3_5);
      #line 5862 
      ldv_free((void *)emg_30_emg_param_1_4);
      #line 5863 
      ldv_free((void *)emg_30_emg_param_3_5);
      #line 5865 
      break;
      #line 5867 
      default: 
               #line 5867 
      ;
      #line 5867 
      __VERIFIER_assume(0);
    }
    #line 5870 
    if (emg_repeat_cnt_call_30 > 0) {
      #line 5871 
      emg_repeat_cnt_call_30 --;
      #line 5873 
      goto emg_call_30;
    }
    else 
         #line 5875 
         __VERIFIER_assume(0);
  }
  else {
    #line 5881 
    if (emg_30_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 5882 
      (*(emg_30_container->release))(emg_30_resource_1,emg_30_resource_0);
    #line 5886 
    if (emg_repeat_cnt_main_30_0 > 0) {
      #line 5887 
      emg_repeat_cnt_main_30_0 --;
      #line 5889 
      goto emg_main_30;
    }
    else 
         #line 5891 
         __VERIFIER_assume(0);
  }
  #line 5897 
  return (void *)0;
  #line 5900 
  emg_main_30: 
               #line 5900 
  ;
  #line 5901 
  if (ldv_undef_int() != 0) {
    #line 5903 
    emg_30_ret = simple_open(emg_30_resource_1,emg_30_resource_0);
    #line 5908 
    emg_30_ret = ldv_filter_err_code(emg_30_ret);
    #line 5911 
    if (ldv_undef_int() != 0) {
      #line 5913 
      __VERIFIER_assume(emg_30_ret == 0);
      #line 5917 
      goto emg_call_30;
    }
    else {
      #line 5922 
      __VERIFIER_assume(emg_30_ret != 0);
      #line 5925 
      if (emg_repeat_cnt_main_30_1 > 0) {
        #line 5926 
        emg_repeat_cnt_main_30_1 --;
        #line 5928 
        goto emg_main_30;
      }
      else 
           #line 5930 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 5937 
       ldv_free((void *)emg_30_resource_0);
  #line 5945 
  return (void *)0;
}

#line 5950  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_error_rx_excessive_frame_len_ops(void *arg0)
{
  #line 5953 
  struct file_operations *emg_31_container;
  #line 5954 
  long long emg_31_emg_param_1_0;
  #line 5955 
  char *emg_31_emg_param_1_2;
  #line 5956 
  char *emg_31_emg_param_1_4;
  #line 5957 
  int emg_31_emg_param_2_1;
  #line 5958 
  long long *emg_31_emg_param_3_3;
  #line 5959 
  long long *emg_31_emg_param_3_5;
  #line 5960 
  struct file *emg_31_resource_0;
  #line 5961 
  struct inode *emg_31_resource_1;
  #line 5962 
  int emg_31_ret;
  #line 5963 
  unsigned long emg_31_size_cnt;
  #line 5964 
  int emg_repeat_cnt_call_31 = 1;
  #line 5965 
  int emg_repeat_cnt_main_31_1 = 1;
  #line 5966 
  int emg_repeat_cnt_main_31_0 = 1;
  #line 5968 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 5972 
  emg_31_ret = ldv_undef_int();
  #line 5973 
  emg_31_container = emg_alias_error_rx_excessive_frame_len_ops;
  #line 5974 
  emg_31_ret = ldv_undef_int();
  #line 5976 
  __VERIFIER_assume(data->arg0 == emg_alias_error_rx_excessive_frame_len_ops);
  #line 5978 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 5979 
    emg_31_container = data->arg0;
    #line 5980 
    ldv_free((void *)data);
  }
  #line 5985 
  emg_31_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 5986 
  emg_31_size_cnt = (unsigned long)ldv_undef_int();
  #line 5990 
  goto emg_main_31;
  #line 5994 
  return (void *)0;
  #line 5997 
  emg_call_31: 
               #line 5997 
  ;
  #line 5998 
  if (ldv_undef_int() != 0) {
    #line 5999 
    switch (ldv_undef_int()) {
      #line 6000 
      case 0: 
              #line 6000 
      ;
      #line 6002 
      emg_31_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 6002 
      emg_31_emg_param_1_2 = emg_31_emg_param_1_2;
      #line 6003 
      emg_31_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 6003 
      emg_31_emg_param_3_3 = emg_31_emg_param_3_3;
      #line 6007 
      emg_wrapper_error_rx_excessive_frame_len_read(emg_31_resource_0,emg_31_emg_param_1_2,emg_31_size_cnt,emg_31_emg_param_3_3);
      #line 6011 
      ldv_free((void *)emg_31_emg_param_1_2);
      #line 6012 
      ldv_free((void *)emg_31_emg_param_3_3);
      #line 6014 
      break;
      #line 6016 
      case 1: 
              #line 6016 
      ;
      #line 6018 
      generic_file_llseek(emg_31_resource_0,emg_31_emg_param_1_0,emg_31_emg_param_2_1);
      #line 6020 
      break;
      #line 6022 
      case 2: 
              #line 6022 
      ;
      #line 6029 
      __VERIFIER_assume(emg_31_size_cnt <= 2147479552UL);
      #line 6030 
      emg_31_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 6030 
      emg_31_emg_param_1_4 = emg_31_emg_param_1_4;
      #line 6031 
      emg_31_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 6031 
      emg_31_emg_param_3_5 = emg_31_emg_param_3_5;
      #line 6035 
      if (emg_31_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 6036 
        (*(emg_31_container->write))(emg_31_resource_0,emg_31_emg_param_1_4,emg_31_size_cnt,emg_31_emg_param_3_5);
      #line 6041 
      ldv_free((void *)emg_31_emg_param_1_4);
      #line 6042 
      ldv_free((void *)emg_31_emg_param_3_5);
      #line 6044 
      break;
      #line 6046 
      default: 
               #line 6046 
      ;
      #line 6046 
      __VERIFIER_assume(0);
    }
    #line 6049 
    if (emg_repeat_cnt_call_31 > 0) {
      #line 6050 
      emg_repeat_cnt_call_31 --;
      #line 6052 
      goto emg_call_31;
    }
    else 
         #line 6054 
         __VERIFIER_assume(0);
  }
  else {
    #line 6060 
    if (emg_31_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 6061 
      (*(emg_31_container->release))(emg_31_resource_1,emg_31_resource_0);
    #line 6065 
    if (emg_repeat_cnt_main_31_0 > 0) {
      #line 6066 
      emg_repeat_cnt_main_31_0 --;
      #line 6068 
      goto emg_main_31;
    }
    else 
         #line 6070 
         __VERIFIER_assume(0);
  }
  #line 6076 
  return (void *)0;
  #line 6079 
  emg_main_31: 
               #line 6079 
  ;
  #line 6080 
  if (ldv_undef_int() != 0) {
    #line 6082 
    emg_31_ret = simple_open(emg_31_resource_1,emg_31_resource_0);
    #line 6087 
    emg_31_ret = ldv_filter_err_code(emg_31_ret);
    #line 6090 
    if (ldv_undef_int() != 0) {
      #line 6092 
      __VERIFIER_assume(emg_31_ret == 0);
      #line 6096 
      goto emg_call_31;
    }
    else {
      #line 6101 
      __VERIFIER_assume(emg_31_ret != 0);
      #line 6104 
      if (emg_repeat_cnt_main_31_1 > 0) {
        #line 6105 
        emg_repeat_cnt_main_31_1 --;
        #line 6107 
        goto emg_main_31;
      }
      else 
           #line 6109 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 6116 
       ldv_free((void *)emg_31_resource_0);
  #line 6124 
  return (void *)0;
}

#line 6129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_error_tbc_exch_mismatch_ops(void *arg0)
{
  #line 6132 
  struct file_operations *emg_32_container;
  #line 6133 
  long long emg_32_emg_param_1_0;
  #line 6134 
  char *emg_32_emg_param_1_2;
  #line 6135 
  char *emg_32_emg_param_1_4;
  #line 6136 
  int emg_32_emg_param_2_1;
  #line 6137 
  long long *emg_32_emg_param_3_3;
  #line 6138 
  long long *emg_32_emg_param_3_5;
  #line 6139 
  struct file *emg_32_resource_0;
  #line 6140 
  struct inode *emg_32_resource_1;
  #line 6141 
  int emg_32_ret;
  #line 6142 
  unsigned long emg_32_size_cnt;
  #line 6143 
  int emg_repeat_cnt_main_32_0 = 1;
  #line 6144 
  int emg_repeat_cnt_call_32 = 1;
  #line 6145 
  int emg_repeat_cnt_main_32_1 = 1;
  #line 6147 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 6151 
  emg_32_ret = ldv_undef_int();
  #line 6152 
  emg_32_container = emg_alias_error_tbc_exch_mismatch_ops;
  #line 6153 
  emg_32_ret = ldv_undef_int();
  #line 6155 
  __VERIFIER_assume(data->arg0 == emg_alias_error_tbc_exch_mismatch_ops);
  #line 6157 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 6158 
    emg_32_container = data->arg0;
    #line 6159 
    ldv_free((void *)data);
  }
  #line 6164 
  emg_32_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 6165 
  emg_32_size_cnt = (unsigned long)ldv_undef_int();
  #line 6169 
  goto emg_main_32;
  #line 6173 
  return (void *)0;
  #line 6176 
  emg_call_32: 
               #line 6176 
  ;
  #line 6177 
  if (ldv_undef_int() != 0) {
    #line 6178 
    switch (ldv_undef_int()) {
      #line 6179 
      case 0: 
              #line 6179 
      ;
      #line 6181 
      emg_32_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 6181 
      emg_32_emg_param_1_2 = emg_32_emg_param_1_2;
      #line 6182 
      emg_32_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 6182 
      emg_32_emg_param_3_3 = emg_32_emg_param_3_3;
      #line 6186 
      emg_wrapper_error_tbc_exch_mismatch_read(emg_32_resource_0,emg_32_emg_param_1_2,emg_32_size_cnt,emg_32_emg_param_3_3);
      #line 6190 
      ldv_free((void *)emg_32_emg_param_1_2);
      #line 6191 
      ldv_free((void *)emg_32_emg_param_3_3);
      #line 6193 
      break;
      #line 6195 
      case 1: 
              #line 6195 
      ;
      #line 6197 
      generic_file_llseek(emg_32_resource_0,emg_32_emg_param_1_0,emg_32_emg_param_2_1);
      #line 6199 
      break;
      #line 6201 
      case 2: 
              #line 6201 
      ;
      #line 6208 
      __VERIFIER_assume(emg_32_size_cnt <= 2147479552UL);
      #line 6209 
      emg_32_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 6209 
      emg_32_emg_param_1_4 = emg_32_emg_param_1_4;
      #line 6210 
      emg_32_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 6210 
      emg_32_emg_param_3_5 = emg_32_emg_param_3_5;
      #line 6214 
      if (emg_32_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 6215 
        (*(emg_32_container->write))(emg_32_resource_0,emg_32_emg_param_1_4,emg_32_size_cnt,emg_32_emg_param_3_5);
      #line 6220 
      ldv_free((void *)emg_32_emg_param_1_4);
      #line 6221 
      ldv_free((void *)emg_32_emg_param_3_5);
      #line 6223 
      break;
      #line 6225 
      default: 
               #line 6225 
      ;
      #line 6225 
      __VERIFIER_assume(0);
    }
    #line 6228 
    if (emg_repeat_cnt_call_32 > 0) {
      #line 6229 
      emg_repeat_cnt_call_32 --;
      #line 6231 
      goto emg_call_32;
    }
    else 
         #line 6233 
         __VERIFIER_assume(0);
  }
  else {
    #line 6239 
    if (emg_32_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 6240 
      (*(emg_32_container->release))(emg_32_resource_1,emg_32_resource_0);
    #line 6244 
    if (emg_repeat_cnt_main_32_0 > 0) {
      #line 6245 
      emg_repeat_cnt_main_32_0 --;
      #line 6247 
      goto emg_main_32;
    }
    else 
         #line 6249 
         __VERIFIER_assume(0);
  }
  #line 6255 
  return (void *)0;
  #line 6258 
  emg_main_32: 
               #line 6258 
  ;
  #line 6259 
  if (ldv_undef_int() != 0) {
    #line 6261 
    emg_32_ret = simple_open(emg_32_resource_1,emg_32_resource_0);
    #line 6266 
    emg_32_ret = ldv_filter_err_code(emg_32_ret);
    #line 6269 
    if (ldv_undef_int() != 0) {
      #line 6271 
      __VERIFIER_assume(emg_32_ret == 0);
      #line 6275 
      goto emg_call_32;
    }
    else {
      #line 6280 
      __VERIFIER_assume(emg_32_ret != 0);
      #line 6283 
      if (emg_repeat_cnt_main_32_1 > 0) {
        #line 6284 
        emg_repeat_cnt_main_32_1 --;
        #line 6286 
        goto emg_main_32;
      }
      else 
           #line 6288 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 6295 
       ldv_free((void *)emg_32_resource_0);
  #line 6303 
  return (void *)0;
}

#line 6308  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_error_tx_abort_failure_ops(void *arg0)
{
  #line 6311 
  struct file_operations *emg_33_container;
  #line 6312 
  long long emg_33_emg_param_1_0;
  #line 6313 
  char *emg_33_emg_param_1_2;
  #line 6314 
  char *emg_33_emg_param_1_4;
  #line 6315 
  int emg_33_emg_param_2_1;
  #line 6316 
  long long *emg_33_emg_param_3_3;
  #line 6317 
  long long *emg_33_emg_param_3_5;
  #line 6318 
  struct file *emg_33_resource_0;
  #line 6319 
  struct inode *emg_33_resource_1;
  #line 6320 
  int emg_33_ret;
  #line 6321 
  unsigned long emg_33_size_cnt;
  #line 6322 
  int emg_repeat_cnt_main_33_0 = 1;
  #line 6323 
  int emg_repeat_cnt_call_33 = 1;
  #line 6324 
  int emg_repeat_cnt_main_33_1 = 1;
  #line 6326 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 6330 
  emg_33_ret = ldv_undef_int();
  #line 6331 
  emg_33_container = emg_alias_error_tx_abort_failure_ops;
  #line 6332 
  emg_33_ret = ldv_undef_int();
  #line 6334 
  __VERIFIER_assume(data->arg0 == emg_alias_error_tx_abort_failure_ops);
  #line 6336 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 6337 
    emg_33_container = data->arg0;
    #line 6338 
    ldv_free((void *)data);
  }
  #line 6343 
  emg_33_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 6344 
  emg_33_size_cnt = (unsigned long)ldv_undef_int();
  #line 6348 
  goto emg_main_33;
  #line 6352 
  return (void *)0;
  #line 6355 
  emg_call_33: 
               #line 6355 
  ;
  #line 6356 
  if (ldv_undef_int() != 0) {
    #line 6357 
    switch (ldv_undef_int()) {
      #line 6358 
      case 0: 
              #line 6358 
      ;
      #line 6360 
      emg_33_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 6360 
      emg_33_emg_param_1_2 = emg_33_emg_param_1_2;
      #line 6361 
      emg_33_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 6361 
      emg_33_emg_param_3_3 = emg_33_emg_param_3_3;
      #line 6365 
      emg_wrapper_error_tx_abort_failure_read(emg_33_resource_0,emg_33_emg_param_1_2,emg_33_size_cnt,emg_33_emg_param_3_3);
      #line 6369 
      ldv_free((void *)emg_33_emg_param_1_2);
      #line 6370 
      ldv_free((void *)emg_33_emg_param_3_3);
      #line 6372 
      break;
      #line 6374 
      case 1: 
              #line 6374 
      ;
      #line 6376 
      generic_file_llseek(emg_33_resource_0,emg_33_emg_param_1_0,emg_33_emg_param_2_1);
      #line 6378 
      break;
      #line 6380 
      case 2: 
              #line 6380 
      ;
      #line 6387 
      __VERIFIER_assume(emg_33_size_cnt <= 2147479552UL);
      #line 6388 
      emg_33_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 6388 
      emg_33_emg_param_1_4 = emg_33_emg_param_1_4;
      #line 6389 
      emg_33_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 6389 
      emg_33_emg_param_3_5 = emg_33_emg_param_3_5;
      #line 6393 
      if (emg_33_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 6394 
        (*(emg_33_container->write))(emg_33_resource_0,emg_33_emg_param_1_4,emg_33_size_cnt,emg_33_emg_param_3_5);
      #line 6399 
      ldv_free((void *)emg_33_emg_param_1_4);
      #line 6400 
      ldv_free((void *)emg_33_emg_param_3_5);
      #line 6402 
      break;
      #line 6404 
      default: 
               #line 6404 
      ;
      #line 6404 
      __VERIFIER_assume(0);
    }
    #line 6407 
    if (emg_repeat_cnt_call_33 > 0) {
      #line 6408 
      emg_repeat_cnt_call_33 --;
      #line 6410 
      goto emg_call_33;
    }
    else 
         #line 6412 
         __VERIFIER_assume(0);
  }
  else {
    #line 6418 
    if (emg_33_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 6419 
      (*(emg_33_container->release))(emg_33_resource_1,emg_33_resource_0);
    #line 6423 
    if (emg_repeat_cnt_main_33_1 > 0) {
      #line 6424 
      emg_repeat_cnt_main_33_1 --;
      #line 6426 
      goto emg_main_33;
    }
    else 
         #line 6428 
         __VERIFIER_assume(0);
  }
  #line 6434 
  return (void *)0;
  #line 6437 
  emg_main_33: 
               #line 6437 
  ;
  #line 6438 
  if (ldv_undef_int() != 0) {
    #line 6440 
    emg_33_ret = simple_open(emg_33_resource_1,emg_33_resource_0);
    #line 6445 
    emg_33_ret = ldv_filter_err_code(emg_33_ret);
    #line 6448 
    if (ldv_undef_int() != 0) {
      #line 6450 
      __VERIFIER_assume(emg_33_ret == 0);
      #line 6454 
      goto emg_call_33;
    }
    else {
      #line 6459 
      __VERIFIER_assume(emg_33_ret != 0);
      #line 6462 
      if (emg_repeat_cnt_main_33_0 > 0) {
        #line 6463 
        emg_repeat_cnt_main_33_0 --;
        #line 6465 
        goto emg_main_33;
      }
      else 
           #line 6467 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 6474 
       ldv_free((void *)emg_33_resource_0);
  #line 6482 
  return (void *)0;
}

#line 6487  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_error_tx_resume_failure_ops(void *arg0)
{
  #line 6490 
  struct file_operations *emg_34_container;
  #line 6491 
  long long emg_34_emg_param_1_0;
  #line 6492 
  char *emg_34_emg_param_1_2;
  #line 6493 
  char *emg_34_emg_param_1_4;
  #line 6494 
  int emg_34_emg_param_2_1;
  #line 6495 
  long long *emg_34_emg_param_3_3;
  #line 6496 
  long long *emg_34_emg_param_3_5;
  #line 6497 
  struct file *emg_34_resource_0;
  #line 6498 
  struct inode *emg_34_resource_1;
  #line 6499 
  int emg_34_ret;
  #line 6500 
  unsigned long emg_34_size_cnt;
  #line 6501 
  int emg_repeat_cnt_main_34_1 = 1;
  #line 6502 
  int emg_repeat_cnt_call_34 = 1;
  #line 6503 
  int emg_repeat_cnt_main_34_0 = 1;
  #line 6505 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 6509 
  emg_34_ret = ldv_undef_int();
  #line 6510 
  emg_34_container = emg_alias_error_tx_resume_failure_ops;
  #line 6511 
  emg_34_ret = ldv_undef_int();
  #line 6513 
  __VERIFIER_assume(data->arg0 == emg_alias_error_tx_resume_failure_ops);
  #line 6515 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 6516 
    emg_34_container = data->arg0;
    #line 6517 
    ldv_free((void *)data);
  }
  #line 6522 
  emg_34_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 6523 
  emg_34_size_cnt = (unsigned long)ldv_undef_int();
  #line 6527 
  goto emg_main_34;
  #line 6531 
  return (void *)0;
  #line 6534 
  emg_call_34: 
               #line 6534 
  ;
  #line 6535 
  if (ldv_undef_int() != 0) {
    #line 6536 
    switch (ldv_undef_int()) {
      #line 6537 
      case 0: 
              #line 6537 
      ;
      #line 6539 
      emg_34_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 6539 
      emg_34_emg_param_1_2 = emg_34_emg_param_1_2;
      #line 6540 
      emg_34_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 6540 
      emg_34_emg_param_3_3 = emg_34_emg_param_3_3;
      #line 6544 
      emg_wrapper_error_tx_resume_failure_read(emg_34_resource_0,emg_34_emg_param_1_2,emg_34_size_cnt,emg_34_emg_param_3_3);
      #line 6548 
      ldv_free((void *)emg_34_emg_param_1_2);
      #line 6549 
      ldv_free((void *)emg_34_emg_param_3_3);
      #line 6551 
      break;
      #line 6553 
      case 1: 
              #line 6553 
      ;
      #line 6555 
      generic_file_llseek(emg_34_resource_0,emg_34_emg_param_1_0,emg_34_emg_param_2_1);
      #line 6557 
      break;
      #line 6559 
      case 2: 
              #line 6559 
      ;
      #line 6566 
      __VERIFIER_assume(emg_34_size_cnt <= 2147479552UL);
      #line 6567 
      emg_34_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 6567 
      emg_34_emg_param_1_4 = emg_34_emg_param_1_4;
      #line 6568 
      emg_34_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 6568 
      emg_34_emg_param_3_5 = emg_34_emg_param_3_5;
      #line 6572 
      if (emg_34_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 6573 
        (*(emg_34_container->write))(emg_34_resource_0,emg_34_emg_param_1_4,emg_34_size_cnt,emg_34_emg_param_3_5);
      #line 6578 
      ldv_free((void *)emg_34_emg_param_1_4);
      #line 6579 
      ldv_free((void *)emg_34_emg_param_3_5);
      #line 6581 
      break;
      #line 6583 
      default: 
               #line 6583 
      ;
      #line 6583 
      __VERIFIER_assume(0);
    }
    #line 6586 
    if (emg_repeat_cnt_call_34 > 0) {
      #line 6587 
      emg_repeat_cnt_call_34 --;
      #line 6589 
      goto emg_call_34;
    }
    else 
         #line 6591 
         __VERIFIER_assume(0);
  }
  else {
    #line 6597 
    if (emg_34_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 6598 
      (*(emg_34_container->release))(emg_34_resource_1,emg_34_resource_0);
    #line 6602 
    if (emg_repeat_cnt_main_34_1 > 0) {
      #line 6603 
      emg_repeat_cnt_main_34_1 --;
      #line 6605 
      goto emg_main_34;
    }
    else 
         #line 6607 
         __VERIFIER_assume(0);
  }
  #line 6613 
  return (void *)0;
  #line 6616 
  emg_main_34: 
               #line 6616 
  ;
  #line 6617 
  if (ldv_undef_int() != 0) {
    #line 6619 
    emg_34_ret = simple_open(emg_34_resource_1,emg_34_resource_0);
    #line 6624 
    emg_34_ret = ldv_filter_err_code(emg_34_ret);
    #line 6627 
    if (ldv_undef_int() != 0) {
      #line 6629 
      __VERIFIER_assume(emg_34_ret == 0);
      #line 6633 
      goto emg_call_34;
    }
    else {
      #line 6638 
      __VERIFIER_assume(emg_34_ret != 0);
      #line 6641 
      if (emg_repeat_cnt_main_34_0 > 0) {
        #line 6642 
        emg_repeat_cnt_main_34_0 --;
        #line 6644 
        goto emg_main_34;
      }
      else 
           #line 6646 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 6653 
       ldv_free((void *)emg_34_resource_0);
  #line 6661 
  return (void *)0;
}

#line 6666  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_isr_irqs_ops(void *arg0)
{
  #line 6669 
  struct file_operations *emg_35_container;
  #line 6670 
  long long emg_35_emg_param_1_0;
  #line 6671 
  char *emg_35_emg_param_1_2;
  #line 6672 
  char *emg_35_emg_param_1_4;
  #line 6673 
  int emg_35_emg_param_2_1;
  #line 6674 
  long long *emg_35_emg_param_3_3;
  #line 6675 
  long long *emg_35_emg_param_3_5;
  #line 6676 
  struct file *emg_35_resource_0;
  #line 6677 
  struct inode *emg_35_resource_1;
  #line 6678 
  int emg_35_ret;
  #line 6679 
  unsigned long emg_35_size_cnt;
  #line 6680 
  int emg_repeat_cnt_main_35_1 = 1;
  #line 6681 
  int emg_repeat_cnt_call_35 = 1;
  #line 6682 
  int emg_repeat_cnt_main_35_0 = 1;
  #line 6684 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 6688 
  emg_35_ret = ldv_undef_int();
  #line 6689 
  emg_35_container = emg_alias_isr_irqs_ops;
  #line 6690 
  emg_35_ret = ldv_undef_int();
  #line 6692 
  __VERIFIER_assume(data->arg0 == emg_alias_isr_irqs_ops);
  #line 6694 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 6695 
    emg_35_container = data->arg0;
    #line 6696 
    ldv_free((void *)data);
  }
  #line 6701 
  emg_35_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 6702 
  emg_35_size_cnt = (unsigned long)ldv_undef_int();
  #line 6706 
  goto emg_main_35;
  #line 6710 
  return (void *)0;
  #line 6713 
  emg_call_35: 
               #line 6713 
  ;
  #line 6714 
  if (ldv_undef_int() != 0) {
    #line 6715 
    switch (ldv_undef_int()) {
      #line 6716 
      case 0: 
              #line 6716 
      ;
      #line 6718 
      emg_35_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 6718 
      emg_35_emg_param_1_2 = emg_35_emg_param_1_2;
      #line 6719 
      emg_35_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 6719 
      emg_35_emg_param_3_3 = emg_35_emg_param_3_3;
      #line 6723 
      emg_wrapper_isr_irqs_read(emg_35_resource_0,emg_35_emg_param_1_2,emg_35_size_cnt,emg_35_emg_param_3_3);
      #line 6727 
      ldv_free((void *)emg_35_emg_param_1_2);
      #line 6728 
      ldv_free((void *)emg_35_emg_param_3_3);
      #line 6730 
      break;
      #line 6732 
      case 1: 
              #line 6732 
      ;
      #line 6734 
      generic_file_llseek(emg_35_resource_0,emg_35_emg_param_1_0,emg_35_emg_param_2_1);
      #line 6736 
      break;
      #line 6738 
      case 2: 
              #line 6738 
      ;
      #line 6745 
      __VERIFIER_assume(emg_35_size_cnt <= 2147479552UL);
      #line 6746 
      emg_35_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 6746 
      emg_35_emg_param_1_4 = emg_35_emg_param_1_4;
      #line 6747 
      emg_35_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 6747 
      emg_35_emg_param_3_5 = emg_35_emg_param_3_5;
      #line 6751 
      if (emg_35_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 6752 
        (*(emg_35_container->write))(emg_35_resource_0,emg_35_emg_param_1_4,emg_35_size_cnt,emg_35_emg_param_3_5);
      #line 6757 
      ldv_free((void *)emg_35_emg_param_1_4);
      #line 6758 
      ldv_free((void *)emg_35_emg_param_3_5);
      #line 6760 
      break;
      #line 6762 
      default: 
               #line 6762 
      ;
      #line 6762 
      __VERIFIER_assume(0);
    }
    #line 6765 
    if (emg_repeat_cnt_call_35 > 0) {
      #line 6766 
      emg_repeat_cnt_call_35 --;
      #line 6768 
      goto emg_call_35;
    }
    else 
         #line 6770 
         __VERIFIER_assume(0);
  }
  else {
    #line 6776 
    if (emg_35_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 6777 
      (*(emg_35_container->release))(emg_35_resource_1,emg_35_resource_0);
    #line 6781 
    if (emg_repeat_cnt_main_35_0 > 0) {
      #line 6782 
      emg_repeat_cnt_main_35_0 --;
      #line 6784 
      goto emg_main_35;
    }
    else 
         #line 6786 
         __VERIFIER_assume(0);
  }
  #line 6792 
  return (void *)0;
  #line 6795 
  emg_main_35: 
               #line 6795 
  ;
  #line 6796 
  if (ldv_undef_int() != 0) {
    #line 6798 
    emg_35_ret = simple_open(emg_35_resource_1,emg_35_resource_0);
    #line 6803 
    emg_35_ret = ldv_filter_err_code(emg_35_ret);
    #line 6806 
    if (ldv_undef_int() != 0) {
      #line 6808 
      __VERIFIER_assume(emg_35_ret == 0);
      #line 6812 
      goto emg_call_35;
    }
    else {
      #line 6817 
      __VERIFIER_assume(emg_35_ret != 0);
      #line 6820 
      if (emg_repeat_cnt_main_35_1 > 0) {
        #line 6821 
        emg_repeat_cnt_main_35_1 --;
        #line 6823 
        goto emg_main_35;
      }
      else 
           #line 6825 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 6832 
       ldv_free((void *)emg_35_resource_0);
  #line 6840 
  return (void *)0;
}

#line 6845  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_pipeline_dec_packet_in_fifo_full_ops(void *arg0)
{
  #line 6848 
  struct file_operations *emg_36_container;
  #line 6849 
  long long emg_36_emg_param_1_0;
  #line 6850 
  char *emg_36_emg_param_1_2;
  #line 6851 
  char *emg_36_emg_param_1_4;
  #line 6852 
  int emg_36_emg_param_2_1;
  #line 6853 
  long long *emg_36_emg_param_3_3;
  #line 6854 
  long long *emg_36_emg_param_3_5;
  #line 6855 
  struct file *emg_36_resource_0;
  #line 6856 
  struct inode *emg_36_resource_1;
  #line 6857 
  int emg_36_ret;
  #line 6858 
  unsigned long emg_36_size_cnt;
  #line 6859 
  int emg_repeat_cnt_call_36 = 1;
  #line 6860 
  int emg_repeat_cnt_main_36_0 = 1;
  #line 6861 
  int emg_repeat_cnt_main_36_1 = 1;
  #line 6863 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 6867 
  emg_36_ret = ldv_undef_int();
  #line 6868 
  emg_36_container = emg_alias_pipeline_dec_packet_in_fifo_full_ops;
  #line 6869 
  emg_36_ret = ldv_undef_int();
  #line 6871 
  __VERIFIER_assume(data->arg0 == emg_alias_pipeline_dec_packet_in_fifo_full_ops);
  #line 6873 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 6874 
    emg_36_container = data->arg0;
    #line 6875 
    ldv_free((void *)data);
  }
  #line 6880 
  emg_36_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 6881 
  emg_36_size_cnt = (unsigned long)ldv_undef_int();
  #line 6885 
  goto emg_main_36;
  #line 6889 
  return (void *)0;
  #line 6892 
  emg_call_36: 
               #line 6892 
  ;
  #line 6893 
  if (ldv_undef_int() != 0) {
    #line 6894 
    switch (ldv_undef_int()) {
      #line 6895 
      case 0: 
              #line 6895 
      ;
      #line 6897 
      emg_36_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 6897 
      emg_36_emg_param_1_2 = emg_36_emg_param_1_2;
      #line 6898 
      emg_36_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 6898 
      emg_36_emg_param_3_3 = emg_36_emg_param_3_3;
      #line 6902 
      emg_wrapper_pipeline_dec_packet_in_fifo_full_read(emg_36_resource_0,emg_36_emg_param_1_2,emg_36_size_cnt,emg_36_emg_param_3_3);
      #line 6906 
      ldv_free((void *)emg_36_emg_param_1_2);
      #line 6907 
      ldv_free((void *)emg_36_emg_param_3_3);
      #line 6909 
      break;
      #line 6911 
      case 1: 
              #line 6911 
      ;
      #line 6913 
      generic_file_llseek(emg_36_resource_0,emg_36_emg_param_1_0,emg_36_emg_param_2_1);
      #line 6915 
      break;
      #line 6917 
      case 2: 
              #line 6917 
      ;
      #line 6924 
      __VERIFIER_assume(emg_36_size_cnt <= 2147479552UL);
      #line 6925 
      emg_36_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 6925 
      emg_36_emg_param_1_4 = emg_36_emg_param_1_4;
      #line 6926 
      emg_36_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 6926 
      emg_36_emg_param_3_5 = emg_36_emg_param_3_5;
      #line 6930 
      if (emg_36_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 6931 
        (*(emg_36_container->write))(emg_36_resource_0,emg_36_emg_param_1_4,emg_36_size_cnt,emg_36_emg_param_3_5);
      #line 6936 
      ldv_free((void *)emg_36_emg_param_1_4);
      #line 6937 
      ldv_free((void *)emg_36_emg_param_3_5);
      #line 6939 
      break;
      #line 6941 
      default: 
               #line 6941 
      ;
      #line 6941 
      __VERIFIER_assume(0);
    }
    #line 6944 
    if (emg_repeat_cnt_call_36 > 0) {
      #line 6945 
      emg_repeat_cnt_call_36 --;
      #line 6947 
      goto emg_call_36;
    }
    else 
         #line 6949 
         __VERIFIER_assume(0);
  }
  else {
    #line 6955 
    if (emg_36_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 6956 
      (*(emg_36_container->release))(emg_36_resource_1,emg_36_resource_0);
    #line 6960 
    if (emg_repeat_cnt_main_36_0 > 0) {
      #line 6961 
      emg_repeat_cnt_main_36_0 --;
      #line 6963 
      goto emg_main_36;
    }
    else 
         #line 6965 
         __VERIFIER_assume(0);
  }
  #line 6971 
  return (void *)0;
  #line 6974 
  emg_main_36: 
               #line 6974 
  ;
  #line 6975 
  if (ldv_undef_int() != 0) {
    #line 6977 
    emg_36_ret = simple_open(emg_36_resource_1,emg_36_resource_0);
    #line 6982 
    emg_36_ret = ldv_filter_err_code(emg_36_ret);
    #line 6985 
    if (ldv_undef_int() != 0) {
      #line 6987 
      __VERIFIER_assume(emg_36_ret == 0);
      #line 6991 
      goto emg_call_36;
    }
    else {
      #line 6996 
      __VERIFIER_assume(emg_36_ret != 0);
      #line 6999 
      if (emg_repeat_cnt_main_36_1 > 0) {
        #line 7000 
        emg_repeat_cnt_main_36_1 --;
        #line 7002 
        goto emg_main_36;
      }
      else 
           #line 7004 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 7011 
       ldv_free((void *)emg_36_resource_0);
  #line 7019 
  return (void *)0;
}

#line 7024  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_pipeline_dec_packet_in_ops(void *arg0)
{
  #line 7027 
  struct file_operations *emg_37_container;
  #line 7028 
  long long emg_37_emg_param_1_0;
  #line 7029 
  char *emg_37_emg_param_1_2;
  #line 7030 
  char *emg_37_emg_param_1_4;
  #line 7031 
  int emg_37_emg_param_2_1;
  #line 7032 
  long long *emg_37_emg_param_3_3;
  #line 7033 
  long long *emg_37_emg_param_3_5;
  #line 7034 
  struct file *emg_37_resource_0;
  #line 7035 
  struct inode *emg_37_resource_1;
  #line 7036 
  int emg_37_ret;
  #line 7037 
  unsigned long emg_37_size_cnt;
  #line 7038 
  int emg_repeat_cnt_main_37_0 = 1;
  #line 7039 
  int emg_repeat_cnt_call_37 = 1;
  #line 7040 
  int emg_repeat_cnt_main_37_1 = 1;
  #line 7042 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 7046 
  emg_37_ret = ldv_undef_int();
  #line 7047 
  emg_37_container = emg_alias_pipeline_dec_packet_in_ops;
  #line 7048 
  emg_37_ret = ldv_undef_int();
  #line 7050 
  __VERIFIER_assume(data->arg0 == emg_alias_pipeline_dec_packet_in_ops);
  #line 7052 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 7053 
    emg_37_container = data->arg0;
    #line 7054 
    ldv_free((void *)data);
  }
  #line 7059 
  emg_37_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 7060 
  emg_37_size_cnt = (unsigned long)ldv_undef_int();
  #line 7064 
  goto emg_main_37;
  #line 7068 
  return (void *)0;
  #line 7071 
  emg_call_37: 
               #line 7071 
  ;
  #line 7072 
  if (ldv_undef_int() != 0) {
    #line 7073 
    switch (ldv_undef_int()) {
      #line 7074 
      case 0: 
              #line 7074 
      ;
      #line 7076 
      emg_37_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 7076 
      emg_37_emg_param_1_2 = emg_37_emg_param_1_2;
      #line 7077 
      emg_37_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 7077 
      emg_37_emg_param_3_3 = emg_37_emg_param_3_3;
      #line 7081 
      emg_wrapper_pipeline_dec_packet_in_read(emg_37_resource_0,emg_37_emg_param_1_2,emg_37_size_cnt,emg_37_emg_param_3_3);
      #line 7085 
      ldv_free((void *)emg_37_emg_param_1_2);
      #line 7086 
      ldv_free((void *)emg_37_emg_param_3_3);
      #line 7088 
      break;
      #line 7090 
      case 1: 
              #line 7090 
      ;
      #line 7092 
      generic_file_llseek(emg_37_resource_0,emg_37_emg_param_1_0,emg_37_emg_param_2_1);
      #line 7094 
      break;
      #line 7096 
      case 2: 
              #line 7096 
      ;
      #line 7103 
      __VERIFIER_assume(emg_37_size_cnt <= 2147479552UL);
      #line 7104 
      emg_37_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 7104 
      emg_37_emg_param_1_4 = emg_37_emg_param_1_4;
      #line 7105 
      emg_37_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 7105 
      emg_37_emg_param_3_5 = emg_37_emg_param_3_5;
      #line 7109 
      if (emg_37_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 7110 
        (*(emg_37_container->write))(emg_37_resource_0,emg_37_emg_param_1_4,emg_37_size_cnt,emg_37_emg_param_3_5);
      #line 7115 
      ldv_free((void *)emg_37_emg_param_1_4);
      #line 7116 
      ldv_free((void *)emg_37_emg_param_3_5);
      #line 7118 
      break;
      #line 7120 
      default: 
               #line 7120 
      ;
      #line 7120 
      __VERIFIER_assume(0);
    }
    #line 7123 
    if (emg_repeat_cnt_call_37 > 0) {
      #line 7124 
      emg_repeat_cnt_call_37 --;
      #line 7126 
      goto emg_call_37;
    }
    else 
         #line 7128 
         __VERIFIER_assume(0);
  }
  else {
    #line 7134 
    if (emg_37_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 7135 
      (*(emg_37_container->release))(emg_37_resource_1,emg_37_resource_0);
    #line 7139 
    if (emg_repeat_cnt_main_37_1 > 0) {
      #line 7140 
      emg_repeat_cnt_main_37_1 --;
      #line 7142 
      goto emg_main_37;
    }
    else 
         #line 7144 
         __VERIFIER_assume(0);
  }
  #line 7150 
  return (void *)0;
  #line 7153 
  emg_main_37: 
               #line 7153 
  ;
  #line 7154 
  if (ldv_undef_int() != 0) {
    #line 7156 
    emg_37_ret = simple_open(emg_37_resource_1,emg_37_resource_0);
    #line 7161 
    emg_37_ret = ldv_filter_err_code(emg_37_ret);
    #line 7164 
    if (ldv_undef_int() != 0) {
      #line 7166 
      __VERIFIER_assume(emg_37_ret == 0);
      #line 7170 
      goto emg_call_37;
    }
    else {
      #line 7175 
      __VERIFIER_assume(emg_37_ret != 0);
      #line 7178 
      if (emg_repeat_cnt_main_37_0 > 0) {
        #line 7179 
        emg_repeat_cnt_main_37_0 --;
        #line 7181 
        goto emg_main_37;
      }
      else 
           #line 7183 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 7190 
       ldv_free((void *)emg_37_resource_0);
  #line 7198 
  return (void *)0;
}

#line 7203  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_pipeline_dec_packet_out_ops(void *arg0)
{
  #line 7206 
  struct file_operations *emg_38_container;
  #line 7207 
  long long emg_38_emg_param_1_0;
  #line 7208 
  char *emg_38_emg_param_1_2;
  #line 7209 
  char *emg_38_emg_param_1_4;
  #line 7210 
  int emg_38_emg_param_2_1;
  #line 7211 
  long long *emg_38_emg_param_3_3;
  #line 7212 
  long long *emg_38_emg_param_3_5;
  #line 7213 
  struct file *emg_38_resource_0;
  #line 7214 
  struct inode *emg_38_resource_1;
  #line 7215 
  int emg_38_ret;
  #line 7216 
  unsigned long emg_38_size_cnt;
  #line 7217 
  int emg_repeat_cnt_call_38 = 1;
  #line 7218 
  int emg_repeat_cnt_main_38_1 = 1;
  #line 7219 
  int emg_repeat_cnt_main_38_0 = 1;
  #line 7221 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 7225 
  emg_38_ret = ldv_undef_int();
  #line 7226 
  emg_38_container = emg_alias_pipeline_dec_packet_out_ops;
  #line 7227 
  emg_38_ret = ldv_undef_int();
  #line 7229 
  __VERIFIER_assume(data->arg0 == emg_alias_pipeline_dec_packet_out_ops);
  #line 7231 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 7232 
    emg_38_container = data->arg0;
    #line 7233 
    ldv_free((void *)data);
  }
  #line 7238 
  emg_38_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 7239 
  emg_38_size_cnt = (unsigned long)ldv_undef_int();
  #line 7243 
  goto emg_main_38;
  #line 7247 
  return (void *)0;
  #line 7250 
  emg_call_38: 
               #line 7250 
  ;
  #line 7251 
  if (ldv_undef_int() != 0) {
    #line 7252 
    switch (ldv_undef_int()) {
      #line 7253 
      case 0: 
              #line 7253 
      ;
      #line 7255 
      emg_38_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 7255 
      emg_38_emg_param_1_2 = emg_38_emg_param_1_2;
      #line 7256 
      emg_38_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 7256 
      emg_38_emg_param_3_3 = emg_38_emg_param_3_3;
      #line 7260 
      emg_wrapper_pipeline_dec_packet_out_read(emg_38_resource_0,emg_38_emg_param_1_2,emg_38_size_cnt,emg_38_emg_param_3_3);
      #line 7264 
      ldv_free((void *)emg_38_emg_param_1_2);
      #line 7265 
      ldv_free((void *)emg_38_emg_param_3_3);
      #line 7267 
      break;
      #line 7269 
      case 1: 
              #line 7269 
      ;
      #line 7271 
      generic_file_llseek(emg_38_resource_0,emg_38_emg_param_1_0,emg_38_emg_param_2_1);
      #line 7273 
      break;
      #line 7275 
      case 2: 
              #line 7275 
      ;
      #line 7282 
      __VERIFIER_assume(emg_38_size_cnt <= 2147479552UL);
      #line 7283 
      emg_38_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 7283 
      emg_38_emg_param_1_4 = emg_38_emg_param_1_4;
      #line 7284 
      emg_38_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 7284 
      emg_38_emg_param_3_5 = emg_38_emg_param_3_5;
      #line 7288 
      if (emg_38_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 7289 
        (*(emg_38_container->write))(emg_38_resource_0,emg_38_emg_param_1_4,emg_38_size_cnt,emg_38_emg_param_3_5);
      #line 7294 
      ldv_free((void *)emg_38_emg_param_1_4);
      #line 7295 
      ldv_free((void *)emg_38_emg_param_3_5);
      #line 7297 
      break;
      #line 7299 
      default: 
               #line 7299 
      ;
      #line 7299 
      __VERIFIER_assume(0);
    }
    #line 7302 
    if (emg_repeat_cnt_call_38 > 0) {
      #line 7303 
      emg_repeat_cnt_call_38 --;
      #line 7305 
      goto emg_call_38;
    }
    else 
         #line 7307 
         __VERIFIER_assume(0);
  }
  else {
    #line 7313 
    if (emg_38_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 7314 
      (*(emg_38_container->release))(emg_38_resource_1,emg_38_resource_0);
    #line 7318 
    if (emg_repeat_cnt_main_38_0 > 0) {
      #line 7319 
      emg_repeat_cnt_main_38_0 --;
      #line 7321 
      goto emg_main_38;
    }
    else 
         #line 7323 
         __VERIFIER_assume(0);
  }
  #line 7329 
  return (void *)0;
  #line 7332 
  emg_main_38: 
               #line 7332 
  ;
  #line 7333 
  if (ldv_undef_int() != 0) {
    #line 7335 
    emg_38_ret = simple_open(emg_38_resource_1,emg_38_resource_0);
    #line 7340 
    emg_38_ret = ldv_filter_err_code(emg_38_ret);
    #line 7343 
    if (ldv_undef_int() != 0) {
      #line 7345 
      __VERIFIER_assume(emg_38_ret == 0);
      #line 7349 
      goto emg_call_38;
    }
    else {
      #line 7354 
      __VERIFIER_assume(emg_38_ret != 0);
      #line 7357 
      if (emg_repeat_cnt_main_38_1 > 0) {
        #line 7358 
        emg_repeat_cnt_main_38_1 --;
        #line 7360 
        goto emg_main_38;
      }
      else 
           #line 7362 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 7369 
       ldv_free((void *)emg_38_resource_0);
  #line 7377 
  return (void *)0;
}

#line 7382  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_pipeline_defrag_to_rx_xfer_swi_ops(void *arg0)
{
  #line 7385 
  struct file_operations *emg_39_container;
  #line 7386 
  long long emg_39_emg_param_1_0;
  #line 7387 
  char *emg_39_emg_param_1_2;
  #line 7388 
  char *emg_39_emg_param_1_4;
  #line 7389 
  int emg_39_emg_param_2_1;
  #line 7390 
  long long *emg_39_emg_param_3_3;
  #line 7391 
  long long *emg_39_emg_param_3_5;
  #line 7392 
  struct file *emg_39_resource_0;
  #line 7393 
  struct inode *emg_39_resource_1;
  #line 7394 
  int emg_39_ret;
  #line 7395 
  unsigned long emg_39_size_cnt;
  #line 7396 
  int emg_repeat_cnt_call_39 = 1;
  #line 7397 
  int emg_repeat_cnt_main_39_0 = 1;
  #line 7398 
  int emg_repeat_cnt_main_39_1 = 1;
  #line 7400 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 7404 
  emg_39_ret = ldv_undef_int();
  #line 7405 
  emg_39_container = emg_alias_pipeline_defrag_to_rx_xfer_swi_ops;
  #line 7406 
  emg_39_ret = ldv_undef_int();
  #line 7408 
  __VERIFIER_assume(data->arg0 == emg_alias_pipeline_defrag_to_rx_xfer_swi_ops);
  #line 7410 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 7411 
    emg_39_container = data->arg0;
    #line 7412 
    ldv_free((void *)data);
  }
  #line 7417 
  emg_39_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 7418 
  emg_39_size_cnt = (unsigned long)ldv_undef_int();
  #line 7422 
  goto emg_main_39;
  #line 7426 
  return (void *)0;
  #line 7429 
  emg_call_39: 
               #line 7429 
  ;
  #line 7430 
  if (ldv_undef_int() != 0) {
    #line 7431 
    switch (ldv_undef_int()) {
      #line 7432 
      case 0: 
              #line 7432 
      ;
      #line 7434 
      emg_39_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 7434 
      emg_39_emg_param_1_2 = emg_39_emg_param_1_2;
      #line 7435 
      emg_39_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 7435 
      emg_39_emg_param_3_3 = emg_39_emg_param_3_3;
      #line 7439 
      emg_wrapper_pipeline_defrag_to_rx_xfer_swi_read(emg_39_resource_0,emg_39_emg_param_1_2,emg_39_size_cnt,emg_39_emg_param_3_3);
      #line 7443 
      ldv_free((void *)emg_39_emg_param_1_2);
      #line 7444 
      ldv_free((void *)emg_39_emg_param_3_3);
      #line 7446 
      break;
      #line 7448 
      case 1: 
              #line 7448 
      ;
      #line 7450 
      generic_file_llseek(emg_39_resource_0,emg_39_emg_param_1_0,emg_39_emg_param_2_1);
      #line 7452 
      break;
      #line 7454 
      case 2: 
              #line 7454 
      ;
      #line 7461 
      __VERIFIER_assume(emg_39_size_cnt <= 2147479552UL);
      #line 7462 
      emg_39_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 7462 
      emg_39_emg_param_1_4 = emg_39_emg_param_1_4;
      #line 7463 
      emg_39_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 7463 
      emg_39_emg_param_3_5 = emg_39_emg_param_3_5;
      #line 7467 
      if (emg_39_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 7468 
        (*(emg_39_container->write))(emg_39_resource_0,emg_39_emg_param_1_4,emg_39_size_cnt,emg_39_emg_param_3_5);
      #line 7473 
      ldv_free((void *)emg_39_emg_param_1_4);
      #line 7474 
      ldv_free((void *)emg_39_emg_param_3_5);
      #line 7476 
      break;
      #line 7478 
      default: 
               #line 7478 
      ;
      #line 7478 
      __VERIFIER_assume(0);
    }
    #line 7481 
    if (emg_repeat_cnt_call_39 > 0) {
      #line 7482 
      emg_repeat_cnt_call_39 --;
      #line 7484 
      goto emg_call_39;
    }
    else 
         #line 7486 
         __VERIFIER_assume(0);
  }
  else {
    #line 7492 
    if (emg_39_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 7493 
      (*(emg_39_container->release))(emg_39_resource_1,emg_39_resource_0);
    #line 7497 
    if (emg_repeat_cnt_main_39_1 > 0) {
      #line 7498 
      emg_repeat_cnt_main_39_1 --;
      #line 7500 
      goto emg_main_39;
    }
    else 
         #line 7502 
         __VERIFIER_assume(0);
  }
  #line 7508 
  return (void *)0;
  #line 7511 
  emg_main_39: 
               #line 7511 
  ;
  #line 7512 
  if (ldv_undef_int() != 0) {
    #line 7514 
    emg_39_ret = simple_open(emg_39_resource_1,emg_39_resource_0);
    #line 7519 
    emg_39_ret = ldv_filter_err_code(emg_39_ret);
    #line 7522 
    if (ldv_undef_int() != 0) {
      #line 7524 
      __VERIFIER_assume(emg_39_ret == 0);
      #line 7528 
      goto emg_call_39;
    }
    else {
      #line 7533 
      __VERIFIER_assume(emg_39_ret != 0);
      #line 7536 
      if (emg_repeat_cnt_main_39_0 > 0) {
        #line 7537 
        emg_repeat_cnt_main_39_0 --;
        #line 7539 
        goto emg_main_39;
      }
      else 
           #line 7541 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 7548 
       ldv_free((void *)emg_39_resource_0);
  #line 7556 
  return (void *)0;
}

#line 7561  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_pipeline_enc_rx_stat_fifo_int_ops(void *arg0)
{
  #line 7564 
  struct file_operations *emg_40_container;
  #line 7565 
  long long emg_40_emg_param_1_0;
  #line 7566 
  char *emg_40_emg_param_1_2;
  #line 7567 
  char *emg_40_emg_param_1_4;
  #line 7568 
  int emg_40_emg_param_2_1;
  #line 7569 
  long long *emg_40_emg_param_3_3;
  #line 7570 
  long long *emg_40_emg_param_3_5;
  #line 7571 
  struct file *emg_40_resource_0;
  #line 7572 
  struct inode *emg_40_resource_1;
  #line 7573 
  int emg_40_ret;
  #line 7574 
  unsigned long emg_40_size_cnt;
  #line 7575 
  int emg_repeat_cnt_main_40_1 = 1;
  #line 7576 
  int emg_repeat_cnt_call_40 = 1;
  #line 7577 
  int emg_repeat_cnt_main_40_0 = 1;
  #line 7579 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 7583 
  emg_40_ret = ldv_undef_int();
  #line 7584 
  emg_40_container = emg_alias_pipeline_enc_rx_stat_fifo_int_ops;
  #line 7585 
  emg_40_ret = ldv_undef_int();
  #line 7587 
  __VERIFIER_assume(data->arg0 == emg_alias_pipeline_enc_rx_stat_fifo_int_ops);
  #line 7589 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 7590 
    emg_40_container = data->arg0;
    #line 7591 
    ldv_free((void *)data);
  }
  #line 7596 
  emg_40_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 7597 
  emg_40_size_cnt = (unsigned long)ldv_undef_int();
  #line 7601 
  goto emg_main_40;
  #line 7605 
  return (void *)0;
  #line 7608 
  emg_call_40: 
               #line 7608 
  ;
  #line 7609 
  if (ldv_undef_int() != 0) {
    #line 7610 
    switch (ldv_undef_int()) {
      #line 7611 
      case 0: 
              #line 7611 
      ;
      #line 7613 
      emg_40_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 7613 
      emg_40_emg_param_1_2 = emg_40_emg_param_1_2;
      #line 7614 
      emg_40_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 7614 
      emg_40_emg_param_3_3 = emg_40_emg_param_3_3;
      #line 7618 
      emg_wrapper_pipeline_enc_rx_stat_fifo_int_read(emg_40_resource_0,emg_40_emg_param_1_2,emg_40_size_cnt,emg_40_emg_param_3_3);
      #line 7622 
      ldv_free((void *)emg_40_emg_param_1_2);
      #line 7623 
      ldv_free((void *)emg_40_emg_param_3_3);
      #line 7625 
      break;
      #line 7627 
      case 1: 
              #line 7627 
      ;
      #line 7629 
      generic_file_llseek(emg_40_resource_0,emg_40_emg_param_1_0,emg_40_emg_param_2_1);
      #line 7631 
      break;
      #line 7633 
      case 2: 
              #line 7633 
      ;
      #line 7640 
      __VERIFIER_assume(emg_40_size_cnt <= 2147479552UL);
      #line 7641 
      emg_40_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 7641 
      emg_40_emg_param_1_4 = emg_40_emg_param_1_4;
      #line 7642 
      emg_40_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 7642 
      emg_40_emg_param_3_5 = emg_40_emg_param_3_5;
      #line 7646 
      if (emg_40_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 7647 
        (*(emg_40_container->write))(emg_40_resource_0,emg_40_emg_param_1_4,emg_40_size_cnt,emg_40_emg_param_3_5);
      #line 7652 
      ldv_free((void *)emg_40_emg_param_1_4);
      #line 7653 
      ldv_free((void *)emg_40_emg_param_3_5);
      #line 7655 
      break;
      #line 7657 
      default: 
               #line 7657 
      ;
      #line 7657 
      __VERIFIER_assume(0);
    }
    #line 7660 
    if (emg_repeat_cnt_call_40 > 0) {
      #line 7661 
      emg_repeat_cnt_call_40 --;
      #line 7663 
      goto emg_call_40;
    }
    else 
         #line 7665 
         __VERIFIER_assume(0);
  }
  else {
    #line 7671 
    if (emg_40_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 7672 
      (*(emg_40_container->release))(emg_40_resource_1,emg_40_resource_0);
    #line 7676 
    if (emg_repeat_cnt_main_40_1 > 0) {
      #line 7677 
      emg_repeat_cnt_main_40_1 --;
      #line 7679 
      goto emg_main_40;
    }
    else 
         #line 7681 
         __VERIFIER_assume(0);
  }
  #line 7687 
  return (void *)0;
  #line 7690 
  emg_main_40: 
               #line 7690 
  ;
  #line 7691 
  if (ldv_undef_int() != 0) {
    #line 7693 
    emg_40_ret = simple_open(emg_40_resource_1,emg_40_resource_0);
    #line 7698 
    emg_40_ret = ldv_filter_err_code(emg_40_ret);
    #line 7701 
    if (ldv_undef_int() != 0) {
      #line 7703 
      __VERIFIER_assume(emg_40_ret == 0);
      #line 7707 
      goto emg_call_40;
    }
    else {
      #line 7712 
      __VERIFIER_assume(emg_40_ret != 0);
      #line 7715 
      if (emg_repeat_cnt_main_40_0 > 0) {
        #line 7716 
        emg_repeat_cnt_main_40_0 --;
        #line 7718 
        goto emg_main_40;
      }
      else 
           #line 7720 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 7727 
       ldv_free((void *)emg_40_resource_0);
  #line 7735 
  return (void *)0;
}

#line 7740  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_pipeline_enc_tx_stat_fifo_int_ops(void *arg0)
{
  #line 7743 
  struct file_operations *emg_41_container;
  #line 7744 
  long long emg_41_emg_param_1_0;
  #line 7745 
  char *emg_41_emg_param_1_2;
  #line 7746 
  char *emg_41_emg_param_1_4;
  #line 7747 
  int emg_41_emg_param_2_1;
  #line 7748 
  long long *emg_41_emg_param_3_3;
  #line 7749 
  long long *emg_41_emg_param_3_5;
  #line 7750 
  struct file *emg_41_resource_0;
  #line 7751 
  struct inode *emg_41_resource_1;
  #line 7752 
  int emg_41_ret;
  #line 7753 
  unsigned long emg_41_size_cnt;
  #line 7754 
  int emg_repeat_cnt_main_41_0 = 1;
  #line 7755 
  int emg_repeat_cnt_call_41 = 1;
  #line 7756 
  int emg_repeat_cnt_main_41_1 = 1;
  #line 7758 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 7762 
  emg_41_ret = ldv_undef_int();
  #line 7763 
  emg_41_container = emg_alias_pipeline_enc_tx_stat_fifo_int_ops;
  #line 7764 
  emg_41_ret = ldv_undef_int();
  #line 7766 
  __VERIFIER_assume(data->arg0 == emg_alias_pipeline_enc_tx_stat_fifo_int_ops);
  #line 7768 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 7769 
    emg_41_container = data->arg0;
    #line 7770 
    ldv_free((void *)data);
  }
  #line 7775 
  emg_41_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 7776 
  emg_41_size_cnt = (unsigned long)ldv_undef_int();
  #line 7780 
  goto emg_main_41;
  #line 7784 
  return (void *)0;
  #line 7787 
  emg_call_41: 
               #line 7787 
  ;
  #line 7788 
  if (ldv_undef_int() != 0) {
    #line 7789 
    switch (ldv_undef_int()) {
      #line 7790 
      case 0: 
              #line 7790 
      ;
      #line 7792 
      emg_41_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 7792 
      emg_41_emg_param_1_2 = emg_41_emg_param_1_2;
      #line 7793 
      emg_41_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 7793 
      emg_41_emg_param_3_3 = emg_41_emg_param_3_3;
      #line 7797 
      emg_wrapper_pipeline_enc_tx_stat_fifo_int_read(emg_41_resource_0,emg_41_emg_param_1_2,emg_41_size_cnt,emg_41_emg_param_3_3);
      #line 7801 
      ldv_free((void *)emg_41_emg_param_1_2);
      #line 7802 
      ldv_free((void *)emg_41_emg_param_3_3);
      #line 7804 
      break;
      #line 7806 
      case 1: 
              #line 7806 
      ;
      #line 7808 
      generic_file_llseek(emg_41_resource_0,emg_41_emg_param_1_0,emg_41_emg_param_2_1);
      #line 7810 
      break;
      #line 7812 
      case 2: 
              #line 7812 
      ;
      #line 7819 
      __VERIFIER_assume(emg_41_size_cnt <= 2147479552UL);
      #line 7820 
      emg_41_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 7820 
      emg_41_emg_param_1_4 = emg_41_emg_param_1_4;
      #line 7821 
      emg_41_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 7821 
      emg_41_emg_param_3_5 = emg_41_emg_param_3_5;
      #line 7825 
      if (emg_41_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 7826 
        (*(emg_41_container->write))(emg_41_resource_0,emg_41_emg_param_1_4,emg_41_size_cnt,emg_41_emg_param_3_5);
      #line 7831 
      ldv_free((void *)emg_41_emg_param_1_4);
      #line 7832 
      ldv_free((void *)emg_41_emg_param_3_5);
      #line 7834 
      break;
      #line 7836 
      default: 
               #line 7836 
      ;
      #line 7836 
      __VERIFIER_assume(0);
    }
    #line 7839 
    if (emg_repeat_cnt_call_41 > 0) {
      #line 7840 
      emg_repeat_cnt_call_41 --;
      #line 7842 
      goto emg_call_41;
    }
    else 
         #line 7844 
         __VERIFIER_assume(0);
  }
  else {
    #line 7850 
    if (emg_41_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 7851 
      (*(emg_41_container->release))(emg_41_resource_1,emg_41_resource_0);
    #line 7855 
    if (emg_repeat_cnt_main_41_0 > 0) {
      #line 7856 
      emg_repeat_cnt_main_41_0 --;
      #line 7858 
      goto emg_main_41;
    }
    else 
         #line 7860 
         __VERIFIER_assume(0);
  }
  #line 7866 
  return (void *)0;
  #line 7869 
  emg_main_41: 
               #line 7869 
  ;
  #line 7870 
  if (ldv_undef_int() != 0) {
    #line 7872 
    emg_41_ret = simple_open(emg_41_resource_1,emg_41_resource_0);
    #line 7877 
    emg_41_ret = ldv_filter_err_code(emg_41_ret);
    #line 7880 
    if (ldv_undef_int() != 0) {
      #line 7882 
      __VERIFIER_assume(emg_41_ret == 0);
      #line 7886 
      goto emg_call_41;
    }
    else {
      #line 7891 
      __VERIFIER_assume(emg_41_ret != 0);
      #line 7894 
      if (emg_repeat_cnt_main_41_1 > 0) {
        #line 7895 
        emg_repeat_cnt_main_41_1 --;
        #line 7897 
        goto emg_main_41;
      }
      else 
           #line 7899 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 7906 
       ldv_free((void *)emg_41_resource_0);
  #line 7914 
  return (void *)0;
}

#line 7919  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_pipeline_hs_tx_stat_fifo_int_ops(void *arg0)
{
  #line 7922 
  struct file_operations *emg_42_container;
  #line 7923 
  long long emg_42_emg_param_1_0;
  #line 7924 
  char *emg_42_emg_param_1_2;
  #line 7925 
  char *emg_42_emg_param_1_4;
  #line 7926 
  int emg_42_emg_param_2_1;
  #line 7927 
  long long *emg_42_emg_param_3_3;
  #line 7928 
  long long *emg_42_emg_param_3_5;
  #line 7929 
  struct file *emg_42_resource_0;
  #line 7930 
  struct inode *emg_42_resource_1;
  #line 7931 
  int emg_42_ret;
  #line 7932 
  unsigned long emg_42_size_cnt;
  #line 7933 
  int emg_repeat_cnt_main_42_0 = 1;
  #line 7934 
  int emg_repeat_cnt_call_42 = 1;
  #line 7935 
  int emg_repeat_cnt_main_42_1 = 1;
  #line 7937 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 7941 
  emg_42_ret = ldv_undef_int();
  #line 7942 
  emg_42_container = emg_alias_pipeline_hs_tx_stat_fifo_int_ops;
  #line 7943 
  emg_42_ret = ldv_undef_int();
  #line 7945 
  __VERIFIER_assume(data->arg0 == emg_alias_pipeline_hs_tx_stat_fifo_int_ops);
  #line 7947 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 7948 
    emg_42_container = data->arg0;
    #line 7949 
    ldv_free((void *)data);
  }
  #line 7954 
  emg_42_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 7955 
  emg_42_size_cnt = (unsigned long)ldv_undef_int();
  #line 7959 
  goto emg_main_42;
  #line 7963 
  return (void *)0;
  #line 7966 
  emg_call_42: 
               #line 7966 
  ;
  #line 7967 
  if (ldv_undef_int() != 0) {
    #line 7968 
    switch (ldv_undef_int()) {
      #line 7969 
      case 0: 
              #line 7969 
      ;
      #line 7971 
      emg_42_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 7971 
      emg_42_emg_param_1_2 = emg_42_emg_param_1_2;
      #line 7972 
      emg_42_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 7972 
      emg_42_emg_param_3_3 = emg_42_emg_param_3_3;
      #line 7976 
      emg_wrapper_pipeline_hs_tx_stat_fifo_int_read(emg_42_resource_0,emg_42_emg_param_1_2,emg_42_size_cnt,emg_42_emg_param_3_3);
      #line 7980 
      ldv_free((void *)emg_42_emg_param_1_2);
      #line 7981 
      ldv_free((void *)emg_42_emg_param_3_3);
      #line 7983 
      break;
      #line 7985 
      case 1: 
              #line 7985 
      ;
      #line 7987 
      generic_file_llseek(emg_42_resource_0,emg_42_emg_param_1_0,emg_42_emg_param_2_1);
      #line 7989 
      break;
      #line 7991 
      case 2: 
              #line 7991 
      ;
      #line 7998 
      __VERIFIER_assume(emg_42_size_cnt <= 2147479552UL);
      #line 7999 
      emg_42_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 7999 
      emg_42_emg_param_1_4 = emg_42_emg_param_1_4;
      #line 8000 
      emg_42_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 8000 
      emg_42_emg_param_3_5 = emg_42_emg_param_3_5;
      #line 8004 
      if (emg_42_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 8005 
        (*(emg_42_container->write))(emg_42_resource_0,emg_42_emg_param_1_4,emg_42_size_cnt,emg_42_emg_param_3_5);
      #line 8010 
      ldv_free((void *)emg_42_emg_param_1_4);
      #line 8011 
      ldv_free((void *)emg_42_emg_param_3_5);
      #line 8013 
      break;
      #line 8015 
      default: 
               #line 8015 
      ;
      #line 8015 
      __VERIFIER_assume(0);
    }
    #line 8018 
    if (emg_repeat_cnt_call_42 > 0) {
      #line 8019 
      emg_repeat_cnt_call_42 --;
      #line 8021 
      goto emg_call_42;
    }
    else 
         #line 8023 
         __VERIFIER_assume(0);
  }
  else {
    #line 8029 
    if (emg_42_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 8030 
      (*(emg_42_container->release))(emg_42_resource_1,emg_42_resource_0);
    #line 8034 
    if (emg_repeat_cnt_main_42_0 > 0) {
      #line 8035 
      emg_repeat_cnt_main_42_0 --;
      #line 8037 
      goto emg_main_42;
    }
    else 
         #line 8039 
         __VERIFIER_assume(0);
  }
  #line 8045 
  return (void *)0;
  #line 8048 
  emg_main_42: 
               #line 8048 
  ;
  #line 8049 
  if (ldv_undef_int() != 0) {
    #line 8051 
    emg_42_ret = simple_open(emg_42_resource_1,emg_42_resource_0);
    #line 8056 
    emg_42_ret = ldv_filter_err_code(emg_42_ret);
    #line 8059 
    if (ldv_undef_int() != 0) {
      #line 8061 
      __VERIFIER_assume(emg_42_ret == 0);
      #line 8065 
      goto emg_call_42;
    }
    else {
      #line 8070 
      __VERIFIER_assume(emg_42_ret != 0);
      #line 8073 
      if (emg_repeat_cnt_main_42_1 > 0) {
        #line 8074 
        emg_repeat_cnt_main_42_1 --;
        #line 8076 
        goto emg_main_42;
      }
      else 
           #line 8078 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 8085 
       ldv_free((void *)emg_42_resource_0);
  #line 8093 
  return (void *)0;
}

#line 8098  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_pipeline_pipeline_fifo_full_ops(void *arg0)
{
  #line 8101 
  struct file_operations *emg_43_container;
  #line 8102 
  long long emg_43_emg_param_1_0;
  #line 8103 
  char *emg_43_emg_param_1_2;
  #line 8104 
  char *emg_43_emg_param_1_4;
  #line 8105 
  int emg_43_emg_param_2_1;
  #line 8106 
  long long *emg_43_emg_param_3_3;
  #line 8107 
  long long *emg_43_emg_param_3_5;
  #line 8108 
  struct file *emg_43_resource_0;
  #line 8109 
  struct inode *emg_43_resource_1;
  #line 8110 
  int emg_43_ret;
  #line 8111 
  unsigned long emg_43_size_cnt;
  #line 8112 
  int emg_repeat_cnt_call_43 = 1;
  #line 8113 
  int emg_repeat_cnt_main_43_0 = 1;
  #line 8114 
  int emg_repeat_cnt_main_43_1 = 1;
  #line 8116 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 8120 
  emg_43_ret = ldv_undef_int();
  #line 8121 
  emg_43_container = emg_alias_pipeline_pipeline_fifo_full_ops;
  #line 8122 
  emg_43_ret = ldv_undef_int();
  #line 8124 
  __VERIFIER_assume(data->arg0 == emg_alias_pipeline_pipeline_fifo_full_ops);
  #line 8126 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 8127 
    emg_43_container = data->arg0;
    #line 8128 
    ldv_free((void *)data);
  }
  #line 8133 
  emg_43_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 8134 
  emg_43_size_cnt = (unsigned long)ldv_undef_int();
  #line 8138 
  goto emg_main_43;
  #line 8142 
  return (void *)0;
  #line 8145 
  emg_call_43: 
               #line 8145 
  ;
  #line 8146 
  if (ldv_undef_int() != 0) {
    #line 8147 
    switch (ldv_undef_int()) {
      #line 8148 
      case 0: 
              #line 8148 
      ;
      #line 8150 
      emg_43_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 8150 
      emg_43_emg_param_1_2 = emg_43_emg_param_1_2;
      #line 8151 
      emg_43_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 8151 
      emg_43_emg_param_3_3 = emg_43_emg_param_3_3;
      #line 8155 
      emg_wrapper_pipeline_pipeline_fifo_full_read(emg_43_resource_0,emg_43_emg_param_1_2,emg_43_size_cnt,emg_43_emg_param_3_3);
      #line 8159 
      ldv_free((void *)emg_43_emg_param_1_2);
      #line 8160 
      ldv_free((void *)emg_43_emg_param_3_3);
      #line 8162 
      break;
      #line 8164 
      case 1: 
              #line 8164 
      ;
      #line 8166 
      generic_file_llseek(emg_43_resource_0,emg_43_emg_param_1_0,emg_43_emg_param_2_1);
      #line 8168 
      break;
      #line 8170 
      case 2: 
              #line 8170 
      ;
      #line 8177 
      __VERIFIER_assume(emg_43_size_cnt <= 2147479552UL);
      #line 8178 
      emg_43_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 8178 
      emg_43_emg_param_1_4 = emg_43_emg_param_1_4;
      #line 8179 
      emg_43_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 8179 
      emg_43_emg_param_3_5 = emg_43_emg_param_3_5;
      #line 8183 
      if (emg_43_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 8184 
        (*(emg_43_container->write))(emg_43_resource_0,emg_43_emg_param_1_4,emg_43_size_cnt,emg_43_emg_param_3_5);
      #line 8189 
      ldv_free((void *)emg_43_emg_param_1_4);
      #line 8190 
      ldv_free((void *)emg_43_emg_param_3_5);
      #line 8192 
      break;
      #line 8194 
      default: 
               #line 8194 
      ;
      #line 8194 
      __VERIFIER_assume(0);
    }
    #line 8197 
    if (emg_repeat_cnt_call_43 > 0) {
      #line 8198 
      emg_repeat_cnt_call_43 --;
      #line 8200 
      goto emg_call_43;
    }
    else 
         #line 8202 
         __VERIFIER_assume(0);
  }
  else {
    #line 8208 
    if (emg_43_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 8209 
      (*(emg_43_container->release))(emg_43_resource_1,emg_43_resource_0);
    #line 8213 
    if (emg_repeat_cnt_main_43_0 > 0) {
      #line 8214 
      emg_repeat_cnt_main_43_0 --;
      #line 8216 
      goto emg_main_43;
    }
    else 
         #line 8218 
         __VERIFIER_assume(0);
  }
  #line 8224 
  return (void *)0;
  #line 8227 
  emg_main_43: 
               #line 8227 
  ;
  #line 8228 
  if (ldv_undef_int() != 0) {
    #line 8230 
    emg_43_ret = simple_open(emg_43_resource_1,emg_43_resource_0);
    #line 8235 
    emg_43_ret = ldv_filter_err_code(emg_43_ret);
    #line 8238 
    if (ldv_undef_int() != 0) {
      #line 8240 
      __VERIFIER_assume(emg_43_ret == 0);
      #line 8244 
      goto emg_call_43;
    }
    else {
      #line 8249 
      __VERIFIER_assume(emg_43_ret != 0);
      #line 8252 
      if (emg_repeat_cnt_main_43_1 > 0) {
        #line 8253 
        emg_repeat_cnt_main_43_1 --;
        #line 8255 
        goto emg_main_43;
      }
      else 
           #line 8257 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 8264 
       ldv_free((void *)emg_43_resource_0);
  #line 8272 
  return (void *)0;
}

#line 8277  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_pipeline_post_proc_swi_ops(void *arg0)
{
  #line 8280 
  struct file_operations *emg_44_container;
  #line 8281 
  long long emg_44_emg_param_1_0;
  #line 8282 
  char *emg_44_emg_param_1_2;
  #line 8283 
  char *emg_44_emg_param_1_4;
  #line 8284 
  int emg_44_emg_param_2_1;
  #line 8285 
  long long *emg_44_emg_param_3_3;
  #line 8286 
  long long *emg_44_emg_param_3_5;
  #line 8287 
  struct file *emg_44_resource_0;
  #line 8288 
  struct inode *emg_44_resource_1;
  #line 8289 
  int emg_44_ret;
  #line 8290 
  unsigned long emg_44_size_cnt;
  #line 8291 
  int emg_repeat_cnt_main_44_0 = 1;
  #line 8292 
  int emg_repeat_cnt_main_44_1 = 1;
  #line 8293 
  int emg_repeat_cnt_call_44 = 1;
  #line 8295 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 8299 
  emg_44_ret = ldv_undef_int();
  #line 8300 
  emg_44_container = emg_alias_pipeline_post_proc_swi_ops;
  #line 8301 
  emg_44_ret = ldv_undef_int();
  #line 8303 
  __VERIFIER_assume(data->arg0 == emg_alias_pipeline_post_proc_swi_ops);
  #line 8305 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 8306 
    emg_44_container = data->arg0;
    #line 8307 
    ldv_free((void *)data);
  }
  #line 8312 
  emg_44_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 8313 
  emg_44_size_cnt = (unsigned long)ldv_undef_int();
  #line 8317 
  goto emg_main_44;
  #line 8321 
  return (void *)0;
  #line 8324 
  emg_call_44: 
               #line 8324 
  ;
  #line 8325 
  if (ldv_undef_int() != 0) {
    #line 8326 
    switch (ldv_undef_int()) {
      #line 8327 
      case 0: 
              #line 8327 
      ;
      #line 8329 
      emg_44_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 8329 
      emg_44_emg_param_1_2 = emg_44_emg_param_1_2;
      #line 8330 
      emg_44_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 8330 
      emg_44_emg_param_3_3 = emg_44_emg_param_3_3;
      #line 8334 
      emg_wrapper_pipeline_post_proc_swi_read(emg_44_resource_0,emg_44_emg_param_1_2,emg_44_size_cnt,emg_44_emg_param_3_3);
      #line 8338 
      ldv_free((void *)emg_44_emg_param_1_2);
      #line 8339 
      ldv_free((void *)emg_44_emg_param_3_3);
      #line 8341 
      break;
      #line 8343 
      case 1: 
              #line 8343 
      ;
      #line 8345 
      generic_file_llseek(emg_44_resource_0,emg_44_emg_param_1_0,emg_44_emg_param_2_1);
      #line 8347 
      break;
      #line 8349 
      case 2: 
              #line 8349 
      ;
      #line 8356 
      __VERIFIER_assume(emg_44_size_cnt <= 2147479552UL);
      #line 8357 
      emg_44_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 8357 
      emg_44_emg_param_1_4 = emg_44_emg_param_1_4;
      #line 8358 
      emg_44_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 8358 
      emg_44_emg_param_3_5 = emg_44_emg_param_3_5;
      #line 8362 
      if (emg_44_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 8363 
        (*(emg_44_container->write))(emg_44_resource_0,emg_44_emg_param_1_4,emg_44_size_cnt,emg_44_emg_param_3_5);
      #line 8368 
      ldv_free((void *)emg_44_emg_param_1_4);
      #line 8369 
      ldv_free((void *)emg_44_emg_param_3_5);
      #line 8371 
      break;
      #line 8373 
      default: 
               #line 8373 
      ;
      #line 8373 
      __VERIFIER_assume(0);
    }
    #line 8376 
    if (emg_repeat_cnt_call_44 > 0) {
      #line 8377 
      emg_repeat_cnt_call_44 --;
      #line 8379 
      goto emg_call_44;
    }
    else 
         #line 8381 
         __VERIFIER_assume(0);
  }
  else {
    #line 8387 
    if (emg_44_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 8388 
      (*(emg_44_container->release))(emg_44_resource_1,emg_44_resource_0);
    #line 8392 
    if (emg_repeat_cnt_main_44_0 > 0) {
      #line 8393 
      emg_repeat_cnt_main_44_0 --;
      #line 8395 
      goto emg_main_44;
    }
    else 
         #line 8397 
         __VERIFIER_assume(0);
  }
  #line 8403 
  return (void *)0;
  #line 8406 
  emg_main_44: 
               #line 8406 
  ;
  #line 8407 
  if (ldv_undef_int() != 0) {
    #line 8409 
    emg_44_ret = simple_open(emg_44_resource_1,emg_44_resource_0);
    #line 8414 
    emg_44_ret = ldv_filter_err_code(emg_44_ret);
    #line 8417 
    if (ldv_undef_int() != 0) {
      #line 8419 
      __VERIFIER_assume(emg_44_ret == 0);
      #line 8423 
      goto emg_call_44;
    }
    else {
      #line 8428 
      __VERIFIER_assume(emg_44_ret != 0);
      #line 8431 
      if (emg_repeat_cnt_main_44_1 > 0) {
        #line 8432 
        emg_repeat_cnt_main_44_1 --;
        #line 8434 
        goto emg_main_44;
      }
      else 
           #line 8436 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 8443 
       ldv_free((void *)emg_44_resource_0);
  #line 8451 
  return (void *)0;
}

#line 8456  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_pipeline_pre_proc_swi_ops(void *arg0)
{
  #line 8459 
  struct file_operations *emg_45_container;
  #line 8460 
  long long emg_45_emg_param_1_0;
  #line 8461 
  char *emg_45_emg_param_1_2;
  #line 8462 
  char *emg_45_emg_param_1_4;
  #line 8463 
  int emg_45_emg_param_2_1;
  #line 8464 
  long long *emg_45_emg_param_3_3;
  #line 8465 
  long long *emg_45_emg_param_3_5;
  #line 8466 
  struct file *emg_45_resource_0;
  #line 8467 
  struct inode *emg_45_resource_1;
  #line 8468 
  int emg_45_ret;
  #line 8469 
  unsigned long emg_45_size_cnt;
  #line 8470 
  int emg_repeat_cnt_call_45 = 1;
  #line 8471 
  int emg_repeat_cnt_main_45_0 = 1;
  #line 8472 
  int emg_repeat_cnt_main_45_1 = 1;
  #line 8474 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 8478 
  emg_45_ret = ldv_undef_int();
  #line 8479 
  emg_45_container = emg_alias_pipeline_pre_proc_swi_ops;
  #line 8480 
  emg_45_ret = ldv_undef_int();
  #line 8482 
  __VERIFIER_assume(data->arg0 == emg_alias_pipeline_pre_proc_swi_ops);
  #line 8484 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 8485 
    emg_45_container = data->arg0;
    #line 8486 
    ldv_free((void *)data);
  }
  #line 8491 
  emg_45_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 8492 
  emg_45_size_cnt = (unsigned long)ldv_undef_int();
  #line 8496 
  goto emg_main_45;
  #line 8500 
  return (void *)0;
  #line 8503 
  emg_call_45: 
               #line 8503 
  ;
  #line 8504 
  if (ldv_undef_int() != 0) {
    #line 8505 
    switch (ldv_undef_int()) {
      #line 8506 
      case 0: 
              #line 8506 
      ;
      #line 8508 
      emg_45_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 8508 
      emg_45_emg_param_1_2 = emg_45_emg_param_1_2;
      #line 8509 
      emg_45_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 8509 
      emg_45_emg_param_3_3 = emg_45_emg_param_3_3;
      #line 8513 
      emg_wrapper_pipeline_pre_proc_swi_read(emg_45_resource_0,emg_45_emg_param_1_2,emg_45_size_cnt,emg_45_emg_param_3_3);
      #line 8517 
      ldv_free((void *)emg_45_emg_param_1_2);
      #line 8518 
      ldv_free((void *)emg_45_emg_param_3_3);
      #line 8520 
      break;
      #line 8522 
      case 1: 
              #line 8522 
      ;
      #line 8524 
      generic_file_llseek(emg_45_resource_0,emg_45_emg_param_1_0,emg_45_emg_param_2_1);
      #line 8526 
      break;
      #line 8528 
      case 2: 
              #line 8528 
      ;
      #line 8535 
      __VERIFIER_assume(emg_45_size_cnt <= 2147479552UL);
      #line 8536 
      emg_45_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 8536 
      emg_45_emg_param_1_4 = emg_45_emg_param_1_4;
      #line 8537 
      emg_45_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 8537 
      emg_45_emg_param_3_5 = emg_45_emg_param_3_5;
      #line 8541 
      if (emg_45_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 8542 
        (*(emg_45_container->write))(emg_45_resource_0,emg_45_emg_param_1_4,emg_45_size_cnt,emg_45_emg_param_3_5);
      #line 8547 
      ldv_free((void *)emg_45_emg_param_1_4);
      #line 8548 
      ldv_free((void *)emg_45_emg_param_3_5);
      #line 8550 
      break;
      #line 8552 
      default: 
               #line 8552 
      ;
      #line 8552 
      __VERIFIER_assume(0);
    }
    #line 8555 
    if (emg_repeat_cnt_call_45 > 0) {
      #line 8556 
      emg_repeat_cnt_call_45 --;
      #line 8558 
      goto emg_call_45;
    }
    else 
         #line 8560 
         __VERIFIER_assume(0);
  }
  else {
    #line 8566 
    if (emg_45_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 8567 
      (*(emg_45_container->release))(emg_45_resource_1,emg_45_resource_0);
    #line 8571 
    if (emg_repeat_cnt_main_45_1 > 0) {
      #line 8572 
      emg_repeat_cnt_main_45_1 --;
      #line 8574 
      goto emg_main_45;
    }
    else 
         #line 8576 
         __VERIFIER_assume(0);
  }
  #line 8582 
  return (void *)0;
  #line 8585 
  emg_main_45: 
               #line 8585 
  ;
  #line 8586 
  if (ldv_undef_int() != 0) {
    #line 8588 
    emg_45_ret = simple_open(emg_45_resource_1,emg_45_resource_0);
    #line 8593 
    emg_45_ret = ldv_filter_err_code(emg_45_ret);
    #line 8596 
    if (ldv_undef_int() != 0) {
      #line 8598 
      __VERIFIER_assume(emg_45_ret == 0);
      #line 8602 
      goto emg_call_45;
    }
    else {
      #line 8607 
      __VERIFIER_assume(emg_45_ret != 0);
      #line 8610 
      if (emg_repeat_cnt_main_45_0 > 0) {
        #line 8611 
        emg_repeat_cnt_main_45_0 --;
        #line 8613 
        goto emg_main_45;
      }
      else 
           #line 8615 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 8622 
       ldv_free((void *)emg_45_resource_0);
  #line 8630 
  return (void *)0;
}

#line 8635  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_pipeline_pre_to_defrag_swi_ops(void *arg0)
{
  #line 8638 
  struct file_operations *emg_46_container;
  #line 8639 
  long long emg_46_emg_param_1_0;
  #line 8640 
  char *emg_46_emg_param_1_2;
  #line 8641 
  char *emg_46_emg_param_1_4;
  #line 8642 
  int emg_46_emg_param_2_1;
  #line 8643 
  long long *emg_46_emg_param_3_3;
  #line 8644 
  long long *emg_46_emg_param_3_5;
  #line 8645 
  struct file *emg_46_resource_0;
  #line 8646 
  struct inode *emg_46_resource_1;
  #line 8647 
  int emg_46_ret;
  #line 8648 
  unsigned long emg_46_size_cnt;
  #line 8649 
  int emg_repeat_cnt_main_46_0 = 1;
  #line 8650 
  int emg_repeat_cnt_main_46_1 = 1;
  #line 8651 
  int emg_repeat_cnt_call_46 = 1;
  #line 8653 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 8657 
  emg_46_ret = ldv_undef_int();
  #line 8658 
  emg_46_container = emg_alias_pipeline_pre_to_defrag_swi_ops;
  #line 8659 
  emg_46_ret = ldv_undef_int();
  #line 8661 
  __VERIFIER_assume(data->arg0 == emg_alias_pipeline_pre_to_defrag_swi_ops);
  #line 8663 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 8664 
    emg_46_container = data->arg0;
    #line 8665 
    ldv_free((void *)data);
  }
  #line 8670 
  emg_46_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 8671 
  emg_46_size_cnt = (unsigned long)ldv_undef_int();
  #line 8675 
  goto emg_main_46;
  #line 8679 
  return (void *)0;
  #line 8682 
  emg_call_46: 
               #line 8682 
  ;
  #line 8683 
  if (ldv_undef_int() != 0) {
    #line 8684 
    switch (ldv_undef_int()) {
      #line 8685 
      case 0: 
              #line 8685 
      ;
      #line 8687 
      emg_46_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 8687 
      emg_46_emg_param_1_2 = emg_46_emg_param_1_2;
      #line 8688 
      emg_46_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 8688 
      emg_46_emg_param_3_3 = emg_46_emg_param_3_3;
      #line 8692 
      emg_wrapper_pipeline_pre_to_defrag_swi_read(emg_46_resource_0,emg_46_emg_param_1_2,emg_46_size_cnt,emg_46_emg_param_3_3);
      #line 8696 
      ldv_free((void *)emg_46_emg_param_1_2);
      #line 8697 
      ldv_free((void *)emg_46_emg_param_3_3);
      #line 8699 
      break;
      #line 8701 
      case 1: 
              #line 8701 
      ;
      #line 8703 
      generic_file_llseek(emg_46_resource_0,emg_46_emg_param_1_0,emg_46_emg_param_2_1);
      #line 8705 
      break;
      #line 8707 
      case 2: 
              #line 8707 
      ;
      #line 8714 
      __VERIFIER_assume(emg_46_size_cnt <= 2147479552UL);
      #line 8715 
      emg_46_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 8715 
      emg_46_emg_param_1_4 = emg_46_emg_param_1_4;
      #line 8716 
      emg_46_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 8716 
      emg_46_emg_param_3_5 = emg_46_emg_param_3_5;
      #line 8720 
      if (emg_46_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 8721 
        (*(emg_46_container->write))(emg_46_resource_0,emg_46_emg_param_1_4,emg_46_size_cnt,emg_46_emg_param_3_5);
      #line 8726 
      ldv_free((void *)emg_46_emg_param_1_4);
      #line 8727 
      ldv_free((void *)emg_46_emg_param_3_5);
      #line 8729 
      break;
      #line 8731 
      default: 
               #line 8731 
      ;
      #line 8731 
      __VERIFIER_assume(0);
    }
    #line 8734 
    if (emg_repeat_cnt_call_46 > 0) {
      #line 8735 
      emg_repeat_cnt_call_46 --;
      #line 8737 
      goto emg_call_46;
    }
    else 
         #line 8739 
         __VERIFIER_assume(0);
  }
  else {
    #line 8745 
    if (emg_46_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 8746 
      (*(emg_46_container->release))(emg_46_resource_1,emg_46_resource_0);
    #line 8750 
    if (emg_repeat_cnt_main_46_0 > 0) {
      #line 8751 
      emg_repeat_cnt_main_46_0 --;
      #line 8753 
      goto emg_main_46;
    }
    else 
         #line 8755 
         __VERIFIER_assume(0);
  }
  #line 8761 
  return (void *)0;
  #line 8764 
  emg_main_46: 
               #line 8764 
  ;
  #line 8765 
  if (ldv_undef_int() != 0) {
    #line 8767 
    emg_46_ret = simple_open(emg_46_resource_1,emg_46_resource_0);
    #line 8772 
    emg_46_ret = ldv_filter_err_code(emg_46_ret);
    #line 8775 
    if (ldv_undef_int() != 0) {
      #line 8777 
      __VERIFIER_assume(emg_46_ret == 0);
      #line 8781 
      goto emg_call_46;
    }
    else {
      #line 8786 
      __VERIFIER_assume(emg_46_ret != 0);
      #line 8789 
      if (emg_repeat_cnt_main_46_1 > 0) {
        #line 8790 
        emg_repeat_cnt_main_46_1 --;
        #line 8792 
        goto emg_main_46;
      }
      else 
           #line 8794 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 8801 
       ldv_free((void *)emg_46_resource_0);
  #line 8809 
  return (void *)0;
}

#line 8814  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_pipeline_rx_complete_stat_fifo_int_ops(void *arg0)
{
  #line 8817 
  struct file_operations *emg_47_container;
  #line 8818 
  long long emg_47_emg_param_1_0;
  #line 8819 
  char *emg_47_emg_param_1_2;
  #line 8820 
  char *emg_47_emg_param_1_4;
  #line 8821 
  int emg_47_emg_param_2_1;
  #line 8822 
  long long *emg_47_emg_param_3_3;
  #line 8823 
  long long *emg_47_emg_param_3_5;
  #line 8824 
  struct file *emg_47_resource_0;
  #line 8825 
  struct inode *emg_47_resource_1;
  #line 8826 
  int emg_47_ret;
  #line 8827 
  unsigned long emg_47_size_cnt;
  #line 8828 
  int emg_repeat_cnt_main_47_0 = 1;
  #line 8829 
  int emg_repeat_cnt_main_47_1 = 1;
  #line 8830 
  int emg_repeat_cnt_call_47 = 1;
  #line 8832 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 8836 
  emg_47_ret = ldv_undef_int();
  #line 8837 
  emg_47_container = emg_alias_pipeline_rx_complete_stat_fifo_int_ops;
  #line 8838 
  emg_47_ret = ldv_undef_int();
  #line 8840 
  __VERIFIER_assume(data->arg0 == emg_alias_pipeline_rx_complete_stat_fifo_int_ops);
  #line 8842 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 8843 
    emg_47_container = data->arg0;
    #line 8844 
    ldv_free((void *)data);
  }
  #line 8849 
  emg_47_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 8850 
  emg_47_size_cnt = (unsigned long)ldv_undef_int();
  #line 8854 
  goto emg_main_47;
  #line 8858 
  return (void *)0;
  #line 8861 
  emg_call_47: 
               #line 8861 
  ;
  #line 8862 
  if (ldv_undef_int() != 0) {
    #line 8863 
    switch (ldv_undef_int()) {
      #line 8864 
      case 0: 
              #line 8864 
      ;
      #line 8866 
      emg_47_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 8866 
      emg_47_emg_param_1_2 = emg_47_emg_param_1_2;
      #line 8867 
      emg_47_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 8867 
      emg_47_emg_param_3_3 = emg_47_emg_param_3_3;
      #line 8871 
      emg_wrapper_pipeline_rx_complete_stat_fifo_int_read(emg_47_resource_0,emg_47_emg_param_1_2,emg_47_size_cnt,emg_47_emg_param_3_3);
      #line 8875 
      ldv_free((void *)emg_47_emg_param_1_2);
      #line 8876 
      ldv_free((void *)emg_47_emg_param_3_3);
      #line 8878 
      break;
      #line 8880 
      case 1: 
              #line 8880 
      ;
      #line 8882 
      generic_file_llseek(emg_47_resource_0,emg_47_emg_param_1_0,emg_47_emg_param_2_1);
      #line 8884 
      break;
      #line 8886 
      case 2: 
              #line 8886 
      ;
      #line 8893 
      __VERIFIER_assume(emg_47_size_cnt <= 2147479552UL);
      #line 8894 
      emg_47_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 8894 
      emg_47_emg_param_1_4 = emg_47_emg_param_1_4;
      #line 8895 
      emg_47_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 8895 
      emg_47_emg_param_3_5 = emg_47_emg_param_3_5;
      #line 8899 
      if (emg_47_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 8900 
        (*(emg_47_container->write))(emg_47_resource_0,emg_47_emg_param_1_4,emg_47_size_cnt,emg_47_emg_param_3_5);
      #line 8905 
      ldv_free((void *)emg_47_emg_param_1_4);
      #line 8906 
      ldv_free((void *)emg_47_emg_param_3_5);
      #line 8908 
      break;
      #line 8910 
      default: 
               #line 8910 
      ;
      #line 8910 
      __VERIFIER_assume(0);
    }
    #line 8913 
    if (emg_repeat_cnt_call_47 > 0) {
      #line 8914 
      emg_repeat_cnt_call_47 --;
      #line 8916 
      goto emg_call_47;
    }
    else 
         #line 8918 
         __VERIFIER_assume(0);
  }
  else {
    #line 8924 
    if (emg_47_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 8925 
      (*(emg_47_container->release))(emg_47_resource_1,emg_47_resource_0);
    #line 8929 
    if (emg_repeat_cnt_main_47_0 > 0) {
      #line 8930 
      emg_repeat_cnt_main_47_0 --;
      #line 8932 
      goto emg_main_47;
    }
    else 
         #line 8934 
         __VERIFIER_assume(0);
  }
  #line 8940 
  return (void *)0;
  #line 8943 
  emg_main_47: 
               #line 8943 
  ;
  #line 8944 
  if (ldv_undef_int() != 0) {
    #line 8946 
    emg_47_ret = simple_open(emg_47_resource_1,emg_47_resource_0);
    #line 8951 
    emg_47_ret = ldv_filter_err_code(emg_47_ret);
    #line 8954 
    if (ldv_undef_int() != 0) {
      #line 8956 
      __VERIFIER_assume(emg_47_ret == 0);
      #line 8960 
      goto emg_call_47;
    }
    else {
      #line 8965 
      __VERIFIER_assume(emg_47_ret != 0);
      #line 8968 
      if (emg_repeat_cnt_main_47_1 > 0) {
        #line 8969 
        emg_repeat_cnt_main_47_1 --;
        #line 8971 
        goto emg_main_47;
      }
      else 
           #line 8973 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 8980 
       ldv_free((void *)emg_47_resource_0);
  #line 8988 
  return (void *)0;
}

#line 8993  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_pipeline_sec_frag_swi_ops(void *arg0)
{
  #line 8996 
  struct file_operations *emg_48_container;
  #line 8997 
  long long emg_48_emg_param_1_0;
  #line 8998 
  char *emg_48_emg_param_1_2;
  #line 8999 
  char *emg_48_emg_param_1_4;
  #line 9000 
  int emg_48_emg_param_2_1;
  #line 9001 
  long long *emg_48_emg_param_3_3;
  #line 9002 
  long long *emg_48_emg_param_3_5;
  #line 9003 
  struct file *emg_48_resource_0;
  #line 9004 
  struct inode *emg_48_resource_1;
  #line 9005 
  int emg_48_ret;
  #line 9006 
  unsigned long emg_48_size_cnt;
  #line 9007 
  int emg_repeat_cnt_call_48 = 1;
  #line 9008 
  int emg_repeat_cnt_main_48_1 = 1;
  #line 9009 
  int emg_repeat_cnt_main_48_0 = 1;
  #line 9011 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 9015 
  emg_48_ret = ldv_undef_int();
  #line 9016 
  emg_48_container = emg_alias_pipeline_sec_frag_swi_ops;
  #line 9017 
  emg_48_ret = ldv_undef_int();
  #line 9019 
  __VERIFIER_assume(data->arg0 == emg_alias_pipeline_sec_frag_swi_ops);
  #line 9021 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 9022 
    emg_48_container = data->arg0;
    #line 9023 
    ldv_free((void *)data);
  }
  #line 9028 
  emg_48_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 9029 
  emg_48_size_cnt = (unsigned long)ldv_undef_int();
  #line 9033 
  goto emg_main_48;
  #line 9037 
  return (void *)0;
  #line 9040 
  emg_call_48: 
               #line 9040 
  ;
  #line 9041 
  if (ldv_undef_int() != 0) {
    #line 9042 
    switch (ldv_undef_int()) {
      #line 9043 
      case 0: 
              #line 9043 
      ;
      #line 9045 
      emg_48_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 9045 
      emg_48_emg_param_1_2 = emg_48_emg_param_1_2;
      #line 9046 
      emg_48_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 9046 
      emg_48_emg_param_3_3 = emg_48_emg_param_3_3;
      #line 9050 
      emg_wrapper_pipeline_sec_frag_swi_read(emg_48_resource_0,emg_48_emg_param_1_2,emg_48_size_cnt,emg_48_emg_param_3_3);
      #line 9054 
      ldv_free((void *)emg_48_emg_param_1_2);
      #line 9055 
      ldv_free((void *)emg_48_emg_param_3_3);
      #line 9057 
      break;
      #line 9059 
      case 1: 
              #line 9059 
      ;
      #line 9061 
      generic_file_llseek(emg_48_resource_0,emg_48_emg_param_1_0,emg_48_emg_param_2_1);
      #line 9063 
      break;
      #line 9065 
      case 2: 
              #line 9065 
      ;
      #line 9072 
      __VERIFIER_assume(emg_48_size_cnt <= 2147479552UL);
      #line 9073 
      emg_48_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 9073 
      emg_48_emg_param_1_4 = emg_48_emg_param_1_4;
      #line 9074 
      emg_48_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 9074 
      emg_48_emg_param_3_5 = emg_48_emg_param_3_5;
      #line 9078 
      if (emg_48_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 9079 
        (*(emg_48_container->write))(emg_48_resource_0,emg_48_emg_param_1_4,emg_48_size_cnt,emg_48_emg_param_3_5);
      #line 9084 
      ldv_free((void *)emg_48_emg_param_1_4);
      #line 9085 
      ldv_free((void *)emg_48_emg_param_3_5);
      #line 9087 
      break;
      #line 9089 
      default: 
               #line 9089 
      ;
      #line 9089 
      __VERIFIER_assume(0);
    }
    #line 9092 
    if (emg_repeat_cnt_call_48 > 0) {
      #line 9093 
      emg_repeat_cnt_call_48 --;
      #line 9095 
      goto emg_call_48;
    }
    else 
         #line 9097 
         __VERIFIER_assume(0);
  }
  else {
    #line 9103 
    if (emg_48_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 9104 
      (*(emg_48_container->release))(emg_48_resource_1,emg_48_resource_0);
    #line 9108 
    if (emg_repeat_cnt_main_48_0 > 0) {
      #line 9109 
      emg_repeat_cnt_main_48_0 --;
      #line 9111 
      goto emg_main_48;
    }
    else 
         #line 9113 
         __VERIFIER_assume(0);
  }
  #line 9119 
  return (void *)0;
  #line 9122 
  emg_main_48: 
               #line 9122 
  ;
  #line 9123 
  if (ldv_undef_int() != 0) {
    #line 9125 
    emg_48_ret = simple_open(emg_48_resource_1,emg_48_resource_0);
    #line 9130 
    emg_48_ret = ldv_filter_err_code(emg_48_ret);
    #line 9133 
    if (ldv_undef_int() != 0) {
      #line 9135 
      __VERIFIER_assume(emg_48_ret == 0);
      #line 9139 
      goto emg_call_48;
    }
    else {
      #line 9144 
      __VERIFIER_assume(emg_48_ret != 0);
      #line 9147 
      if (emg_repeat_cnt_main_48_1 > 0) {
        #line 9148 
        emg_repeat_cnt_main_48_1 --;
        #line 9150 
        goto emg_main_48;
      }
      else 
           #line 9152 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 9159 
       ldv_free((void *)emg_48_resource_0);
  #line 9167 
  return (void *)0;
}

#line 9172  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_pwr_ap_sleep_active_conf_ops(void *arg0)
{
  #line 9175 
  struct file_operations *emg_49_container;
  #line 9176 
  long long emg_49_emg_param_1_0;
  #line 9177 
  char *emg_49_emg_param_1_2;
  #line 9178 
  char *emg_49_emg_param_1_4;
  #line 9179 
  int emg_49_emg_param_2_1;
  #line 9180 
  long long *emg_49_emg_param_3_3;
  #line 9181 
  long long *emg_49_emg_param_3_5;
  #line 9182 
  struct file *emg_49_resource_0;
  #line 9183 
  struct inode *emg_49_resource_1;
  #line 9184 
  int emg_49_ret;
  #line 9185 
  unsigned long emg_49_size_cnt;
  #line 9186 
  int emg_repeat_cnt_main_49_1 = 1;
  #line 9187 
  int emg_repeat_cnt_call_49 = 1;
  #line 9188 
  int emg_repeat_cnt_main_49_0 = 1;
  #line 9190 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 9194 
  emg_49_ret = ldv_undef_int();
  #line 9195 
  emg_49_container = emg_alias_pwr_ap_sleep_active_conf_ops;
  #line 9196 
  emg_49_ret = ldv_undef_int();
  #line 9198 
  __VERIFIER_assume(data->arg0 == emg_alias_pwr_ap_sleep_active_conf_ops);
  #line 9200 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 9201 
    emg_49_container = data->arg0;
    #line 9202 
    ldv_free((void *)data);
  }
  #line 9207 
  emg_49_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 9208 
  emg_49_size_cnt = (unsigned long)ldv_undef_int();
  #line 9212 
  goto emg_main_49;
  #line 9216 
  return (void *)0;
  #line 9219 
  emg_call_49: 
               #line 9219 
  ;
  #line 9220 
  if (ldv_undef_int() != 0) {
    #line 9221 
    switch (ldv_undef_int()) {
      #line 9222 
      case 0: 
              #line 9222 
      ;
      #line 9224 
      emg_49_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 9224 
      emg_49_emg_param_1_2 = emg_49_emg_param_1_2;
      #line 9225 
      emg_49_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 9225 
      emg_49_emg_param_3_3 = emg_49_emg_param_3_3;
      #line 9229 
      emg_wrapper_pwr_ap_sleep_active_conf_read(emg_49_resource_0,emg_49_emg_param_1_2,emg_49_size_cnt,emg_49_emg_param_3_3);
      #line 9233 
      ldv_free((void *)emg_49_emg_param_1_2);
      #line 9234 
      ldv_free((void *)emg_49_emg_param_3_3);
      #line 9236 
      break;
      #line 9238 
      case 1: 
              #line 9238 
      ;
      #line 9240 
      generic_file_llseek(emg_49_resource_0,emg_49_emg_param_1_0,emg_49_emg_param_2_1);
      #line 9242 
      break;
      #line 9244 
      case 2: 
              #line 9244 
      ;
      #line 9251 
      __VERIFIER_assume(emg_49_size_cnt <= 2147479552UL);
      #line 9252 
      emg_49_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 9252 
      emg_49_emg_param_1_4 = emg_49_emg_param_1_4;
      #line 9253 
      emg_49_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 9253 
      emg_49_emg_param_3_5 = emg_49_emg_param_3_5;
      #line 9257 
      if (emg_49_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 9258 
        (*(emg_49_container->write))(emg_49_resource_0,emg_49_emg_param_1_4,emg_49_size_cnt,emg_49_emg_param_3_5);
      #line 9263 
      ldv_free((void *)emg_49_emg_param_1_4);
      #line 9264 
      ldv_free((void *)emg_49_emg_param_3_5);
      #line 9266 
      break;
      #line 9268 
      default: 
               #line 9268 
      ;
      #line 9268 
      __VERIFIER_assume(0);
    }
    #line 9271 
    if (emg_repeat_cnt_call_49 > 0) {
      #line 9272 
      emg_repeat_cnt_call_49 --;
      #line 9274 
      goto emg_call_49;
    }
    else 
         #line 9276 
         __VERIFIER_assume(0);
  }
  else {
    #line 9282 
    if (emg_49_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 9283 
      (*(emg_49_container->release))(emg_49_resource_1,emg_49_resource_0);
    #line 9287 
    if (emg_repeat_cnt_main_49_1 > 0) {
      #line 9288 
      emg_repeat_cnt_main_49_1 --;
      #line 9290 
      goto emg_main_49;
    }
    else 
         #line 9292 
         __VERIFIER_assume(0);
  }
  #line 9298 
  return (void *)0;
  #line 9301 
  emg_main_49: 
               #line 9301 
  ;
  #line 9302 
  if (ldv_undef_int() != 0) {
    #line 9304 
    emg_49_ret = simple_open(emg_49_resource_1,emg_49_resource_0);
    #line 9309 
    emg_49_ret = ldv_filter_err_code(emg_49_ret);
    #line 9312 
    if (ldv_undef_int() != 0) {
      #line 9314 
      __VERIFIER_assume(emg_49_ret == 0);
      #line 9318 
      goto emg_call_49;
    }
    else {
      #line 9323 
      __VERIFIER_assume(emg_49_ret != 0);
      #line 9326 
      if (emg_repeat_cnt_main_49_0 > 0) {
        #line 9327 
        emg_repeat_cnt_main_49_0 --;
        #line 9329 
        goto emg_main_49;
      }
      else 
           #line 9331 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 9338 
       ldv_free((void *)emg_49_resource_0);
  #line 9346 
  return (void *)0;
}

#line 9351  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_pwr_ap_sleep_counter_ops(void *arg0)
{
  #line 9354 
  struct file_operations *emg_50_container;
  #line 9355 
  long long emg_50_emg_param_1_0;
  #line 9356 
  char *emg_50_emg_param_1_2;
  #line 9357 
  char *emg_50_emg_param_1_4;
  #line 9358 
  int emg_50_emg_param_2_1;
  #line 9359 
  long long *emg_50_emg_param_3_3;
  #line 9360 
  long long *emg_50_emg_param_3_5;
  #line 9361 
  struct file *emg_50_resource_0;
  #line 9362 
  struct inode *emg_50_resource_1;
  #line 9363 
  int emg_50_ret;
  #line 9364 
  unsigned long emg_50_size_cnt;
  #line 9365 
  int emg_repeat_cnt_main_50_0 = 1;
  #line 9366 
  int emg_repeat_cnt_main_50_1 = 1;
  #line 9367 
  int emg_repeat_cnt_call_50 = 1;
  #line 9369 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 9373 
  emg_50_ret = ldv_undef_int();
  #line 9374 
  emg_50_container = emg_alias_pwr_ap_sleep_counter_ops;
  #line 9375 
  emg_50_ret = ldv_undef_int();
  #line 9377 
  __VERIFIER_assume(data->arg0 == emg_alias_pwr_ap_sleep_counter_ops);
  #line 9379 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 9380 
    emg_50_container = data->arg0;
    #line 9381 
    ldv_free((void *)data);
  }
  #line 9386 
  emg_50_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 9387 
  emg_50_size_cnt = (unsigned long)ldv_undef_int();
  #line 9391 
  goto emg_main_50;
  #line 9395 
  return (void *)0;
  #line 9398 
  emg_call_50: 
               #line 9398 
  ;
  #line 9399 
  if (ldv_undef_int() != 0) {
    #line 9400 
    switch (ldv_undef_int()) {
      #line 9401 
      case 0: 
              #line 9401 
      ;
      #line 9403 
      emg_50_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 9403 
      emg_50_emg_param_1_2 = emg_50_emg_param_1_2;
      #line 9404 
      emg_50_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 9404 
      emg_50_emg_param_3_3 = emg_50_emg_param_3_3;
      #line 9408 
      emg_wrapper_pwr_ap_sleep_counter_read(emg_50_resource_0,emg_50_emg_param_1_2,emg_50_size_cnt,emg_50_emg_param_3_3);
      #line 9412 
      ldv_free((void *)emg_50_emg_param_1_2);
      #line 9413 
      ldv_free((void *)emg_50_emg_param_3_3);
      #line 9415 
      break;
      #line 9417 
      case 1: 
              #line 9417 
      ;
      #line 9419 
      generic_file_llseek(emg_50_resource_0,emg_50_emg_param_1_0,emg_50_emg_param_2_1);
      #line 9421 
      break;
      #line 9423 
      case 2: 
              #line 9423 
      ;
      #line 9430 
      __VERIFIER_assume(emg_50_size_cnt <= 2147479552UL);
      #line 9431 
      emg_50_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 9431 
      emg_50_emg_param_1_4 = emg_50_emg_param_1_4;
      #line 9432 
      emg_50_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 9432 
      emg_50_emg_param_3_5 = emg_50_emg_param_3_5;
      #line 9436 
      if (emg_50_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 9437 
        (*(emg_50_container->write))(emg_50_resource_0,emg_50_emg_param_1_4,emg_50_size_cnt,emg_50_emg_param_3_5);
      #line 9442 
      ldv_free((void *)emg_50_emg_param_1_4);
      #line 9443 
      ldv_free((void *)emg_50_emg_param_3_5);
      #line 9445 
      break;
      #line 9447 
      default: 
               #line 9447 
      ;
      #line 9447 
      __VERIFIER_assume(0);
    }
    #line 9450 
    if (emg_repeat_cnt_call_50 > 0) {
      #line 9451 
      emg_repeat_cnt_call_50 --;
      #line 9453 
      goto emg_call_50;
    }
    else 
         #line 9455 
         __VERIFIER_assume(0);
  }
  else {
    #line 9461 
    if (emg_50_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 9462 
      (*(emg_50_container->release))(emg_50_resource_1,emg_50_resource_0);
    #line 9466 
    if (emg_repeat_cnt_main_50_0 > 0) {
      #line 9467 
      emg_repeat_cnt_main_50_0 --;
      #line 9469 
      goto emg_main_50;
    }
    else 
         #line 9471 
         __VERIFIER_assume(0);
  }
  #line 9477 
  return (void *)0;
  #line 9480 
  emg_main_50: 
               #line 9480 
  ;
  #line 9481 
  if (ldv_undef_int() != 0) {
    #line 9483 
    emg_50_ret = simple_open(emg_50_resource_1,emg_50_resource_0);
    #line 9488 
    emg_50_ret = ldv_filter_err_code(emg_50_ret);
    #line 9491 
    if (ldv_undef_int() != 0) {
      #line 9493 
      __VERIFIER_assume(emg_50_ret == 0);
      #line 9497 
      goto emg_call_50;
    }
    else {
      #line 9502 
      __VERIFIER_assume(emg_50_ret != 0);
      #line 9505 
      if (emg_repeat_cnt_main_50_1 > 0) {
        #line 9506 
        emg_repeat_cnt_main_50_1 --;
        #line 9508 
        goto emg_main_50;
      }
      else 
           #line 9510 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 9517 
       ldv_free((void *)emg_50_resource_0);
  #line 9525 
  return (void *)0;
}

#line 9530  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_pwr_ap_sleep_user_conf_ops(void *arg0)
{
  #line 9533 
  struct file_operations *emg_51_container;
  #line 9534 
  long long emg_51_emg_param_1_0;
  #line 9535 
  char *emg_51_emg_param_1_2;
  #line 9536 
  char *emg_51_emg_param_1_4;
  #line 9537 
  int emg_51_emg_param_2_1;
  #line 9538 
  long long *emg_51_emg_param_3_3;
  #line 9539 
  long long *emg_51_emg_param_3_5;
  #line 9540 
  struct file *emg_51_resource_0;
  #line 9541 
  struct inode *emg_51_resource_1;
  #line 9542 
  int emg_51_ret;
  #line 9543 
  unsigned long emg_51_size_cnt;
  #line 9544 
  int emg_repeat_cnt_main_51_1 = 1;
  #line 9545 
  int emg_repeat_cnt_call_51 = 1;
  #line 9546 
  int emg_repeat_cnt_main_51_0 = 1;
  #line 9548 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 9552 
  emg_51_ret = ldv_undef_int();
  #line 9553 
  emg_51_container = emg_alias_pwr_ap_sleep_user_conf_ops;
  #line 9554 
  emg_51_ret = ldv_undef_int();
  #line 9556 
  __VERIFIER_assume(data->arg0 == emg_alias_pwr_ap_sleep_user_conf_ops);
  #line 9558 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 9559 
    emg_51_container = data->arg0;
    #line 9560 
    ldv_free((void *)data);
  }
  #line 9565 
  emg_51_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 9566 
  emg_51_size_cnt = (unsigned long)ldv_undef_int();
  #line 9570 
  goto emg_main_51;
  #line 9574 
  return (void *)0;
  #line 9577 
  emg_call_51: 
               #line 9577 
  ;
  #line 9578 
  if (ldv_undef_int() != 0) {
    #line 9579 
    switch (ldv_undef_int()) {
      #line 9580 
      case 0: 
              #line 9580 
      ;
      #line 9582 
      emg_51_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 9582 
      emg_51_emg_param_1_2 = emg_51_emg_param_1_2;
      #line 9583 
      emg_51_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 9583 
      emg_51_emg_param_3_3 = emg_51_emg_param_3_3;
      #line 9587 
      emg_wrapper_pwr_ap_sleep_user_conf_read(emg_51_resource_0,emg_51_emg_param_1_2,emg_51_size_cnt,emg_51_emg_param_3_3);
      #line 9591 
      ldv_free((void *)emg_51_emg_param_1_2);
      #line 9592 
      ldv_free((void *)emg_51_emg_param_3_3);
      #line 9594 
      break;
      #line 9596 
      case 1: 
              #line 9596 
      ;
      #line 9598 
      generic_file_llseek(emg_51_resource_0,emg_51_emg_param_1_0,emg_51_emg_param_2_1);
      #line 9600 
      break;
      #line 9602 
      case 2: 
              #line 9602 
      ;
      #line 9609 
      __VERIFIER_assume(emg_51_size_cnt <= 2147479552UL);
      #line 9610 
      emg_51_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 9610 
      emg_51_emg_param_1_4 = emg_51_emg_param_1_4;
      #line 9611 
      emg_51_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 9611 
      emg_51_emg_param_3_5 = emg_51_emg_param_3_5;
      #line 9615 
      if (emg_51_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 9616 
        (*(emg_51_container->write))(emg_51_resource_0,emg_51_emg_param_1_4,emg_51_size_cnt,emg_51_emg_param_3_5);
      #line 9621 
      ldv_free((void *)emg_51_emg_param_1_4);
      #line 9622 
      ldv_free((void *)emg_51_emg_param_3_5);
      #line 9624 
      break;
      #line 9626 
      default: 
               #line 9626 
      ;
      #line 9626 
      __VERIFIER_assume(0);
    }
    #line 9629 
    if (emg_repeat_cnt_call_51 > 0) {
      #line 9630 
      emg_repeat_cnt_call_51 --;
      #line 9632 
      goto emg_call_51;
    }
    else 
         #line 9634 
         __VERIFIER_assume(0);
  }
  else {
    #line 9640 
    if (emg_51_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 9641 
      (*(emg_51_container->release))(emg_51_resource_1,emg_51_resource_0);
    #line 9645 
    if (emg_repeat_cnt_main_51_0 > 0) {
      #line 9646 
      emg_repeat_cnt_main_51_0 --;
      #line 9648 
      goto emg_main_51;
    }
    else 
         #line 9650 
         __VERIFIER_assume(0);
  }
  #line 9656 
  return (void *)0;
  #line 9659 
  emg_main_51: 
               #line 9659 
  ;
  #line 9660 
  if (ldv_undef_int() != 0) {
    #line 9662 
    emg_51_ret = simple_open(emg_51_resource_1,emg_51_resource_0);
    #line 9667 
    emg_51_ret = ldv_filter_err_code(emg_51_ret);
    #line 9670 
    if (ldv_undef_int() != 0) {
      #line 9672 
      __VERIFIER_assume(emg_51_ret == 0);
      #line 9676 
      goto emg_call_51;
    }
    else {
      #line 9681 
      __VERIFIER_assume(emg_51_ret != 0);
      #line 9684 
      if (emg_repeat_cnt_main_51_1 > 0) {
        #line 9685 
        emg_repeat_cnt_main_51_1 --;
        #line 9687 
        goto emg_main_51;
      }
      else 
           #line 9689 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 9696 
       ldv_free((void *)emg_51_resource_0);
  #line 9704 
  return (void *)0;
}

#line 9709  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_pwr_connection_out_of_sync_ops(void *arg0)
{
  #line 9712 
  struct file_operations *emg_52_container;
  #line 9713 
  long long emg_52_emg_param_1_0;
  #line 9714 
  char *emg_52_emg_param_1_2;
  #line 9715 
  char *emg_52_emg_param_1_4;
  #line 9716 
  int emg_52_emg_param_2_1;
  #line 9717 
  long long *emg_52_emg_param_3_3;
  #line 9718 
  long long *emg_52_emg_param_3_5;
  #line 9719 
  struct file *emg_52_resource_0;
  #line 9720 
  struct inode *emg_52_resource_1;
  #line 9721 
  int emg_52_ret;
  #line 9722 
  unsigned long emg_52_size_cnt;
  #line 9723 
  int emg_repeat_cnt_main_52_1 = 1;
  #line 9724 
  int emg_repeat_cnt_main_52_0 = 1;
  #line 9725 
  int emg_repeat_cnt_call_52 = 1;
  #line 9727 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 9731 
  emg_52_ret = ldv_undef_int();
  #line 9732 
  emg_52_container = emg_alias_pwr_connection_out_of_sync_ops;
  #line 9733 
  emg_52_ret = ldv_undef_int();
  #line 9735 
  __VERIFIER_assume(data->arg0 == emg_alias_pwr_connection_out_of_sync_ops);
  #line 9737 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 9738 
    emg_52_container = data->arg0;
    #line 9739 
    ldv_free((void *)data);
  }
  #line 9744 
  emg_52_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 9745 
  emg_52_size_cnt = (unsigned long)ldv_undef_int();
  #line 9749 
  goto emg_main_52;
  #line 9753 
  return (void *)0;
  #line 9756 
  emg_call_52: 
               #line 9756 
  ;
  #line 9757 
  if (ldv_undef_int() != 0) {
    #line 9758 
    switch (ldv_undef_int()) {
      #line 9759 
      case 0: 
              #line 9759 
      ;
      #line 9761 
      emg_52_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 9761 
      emg_52_emg_param_1_2 = emg_52_emg_param_1_2;
      #line 9762 
      emg_52_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 9762 
      emg_52_emg_param_3_3 = emg_52_emg_param_3_3;
      #line 9766 
      emg_wrapper_pwr_connection_out_of_sync_read(emg_52_resource_0,emg_52_emg_param_1_2,emg_52_size_cnt,emg_52_emg_param_3_3);
      #line 9770 
      ldv_free((void *)emg_52_emg_param_1_2);
      #line 9771 
      ldv_free((void *)emg_52_emg_param_3_3);
      #line 9773 
      break;
      #line 9775 
      case 1: 
              #line 9775 
      ;
      #line 9777 
      generic_file_llseek(emg_52_resource_0,emg_52_emg_param_1_0,emg_52_emg_param_2_1);
      #line 9779 
      break;
      #line 9781 
      case 2: 
              #line 9781 
      ;
      #line 9788 
      __VERIFIER_assume(emg_52_size_cnt <= 2147479552UL);
      #line 9789 
      emg_52_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 9789 
      emg_52_emg_param_1_4 = emg_52_emg_param_1_4;
      #line 9790 
      emg_52_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 9790 
      emg_52_emg_param_3_5 = emg_52_emg_param_3_5;
      #line 9794 
      if (emg_52_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 9795 
        (*(emg_52_container->write))(emg_52_resource_0,emg_52_emg_param_1_4,emg_52_size_cnt,emg_52_emg_param_3_5);
      #line 9800 
      ldv_free((void *)emg_52_emg_param_1_4);
      #line 9801 
      ldv_free((void *)emg_52_emg_param_3_5);
      #line 9803 
      break;
      #line 9805 
      default: 
               #line 9805 
      ;
      #line 9805 
      __VERIFIER_assume(0);
    }
    #line 9808 
    if (emg_repeat_cnt_call_52 > 0) {
      #line 9809 
      emg_repeat_cnt_call_52 --;
      #line 9811 
      goto emg_call_52;
    }
    else 
         #line 9813 
         __VERIFIER_assume(0);
  }
  else {
    #line 9819 
    if (emg_52_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 9820 
      (*(emg_52_container->release))(emg_52_resource_1,emg_52_resource_0);
    #line 9824 
    if (emg_repeat_cnt_main_52_1 > 0) {
      #line 9825 
      emg_repeat_cnt_main_52_1 --;
      #line 9827 
      goto emg_main_52;
    }
    else 
         #line 9829 
         __VERIFIER_assume(0);
  }
  #line 9835 
  return (void *)0;
  #line 9838 
  emg_main_52: 
               #line 9838 
  ;
  #line 9839 
  if (ldv_undef_int() != 0) {
    #line 9841 
    emg_52_ret = simple_open(emg_52_resource_1,emg_52_resource_0);
    #line 9846 
    emg_52_ret = ldv_filter_err_code(emg_52_ret);
    #line 9849 
    if (ldv_undef_int() != 0) {
      #line 9851 
      __VERIFIER_assume(emg_52_ret == 0);
      #line 9855 
      goto emg_call_52;
    }
    else {
      #line 9860 
      __VERIFIER_assume(emg_52_ret != 0);
      #line 9863 
      if (emg_repeat_cnt_main_52_0 > 0) {
        #line 9864 
        emg_repeat_cnt_main_52_0 --;
        #line 9866 
        goto emg_main_52;
      }
      else 
           #line 9868 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 9875 
       ldv_free((void *)emg_52_resource_0);
  #line 9883 
  return (void *)0;
}

#line 9888  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_pwr_cont_miss_bcns_spread_ops(void *arg0)
{
  #line 9891 
  struct file_operations *emg_53_container;
  #line 9892 
  long long emg_53_emg_param_1_0;
  #line 9893 
  char *emg_53_emg_param_1_2;
  #line 9894 
  char *emg_53_emg_param_1_4;
  #line 9895 
  int emg_53_emg_param_2_1;
  #line 9896 
  long long *emg_53_emg_param_3_3;
  #line 9897 
  long long *emg_53_emg_param_3_5;
  #line 9898 
  struct file *emg_53_resource_0;
  #line 9899 
  struct inode *emg_53_resource_1;
  #line 9900 
  int emg_53_ret;
  #line 9901 
  unsigned long emg_53_size_cnt;
  #line 9902 
  int emg_repeat_cnt_call_53 = 1;
  #line 9903 
  int emg_repeat_cnt_main_53_0 = 1;
  #line 9904 
  int emg_repeat_cnt_main_53_1 = 1;
  #line 9906 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 9910 
  emg_53_ret = ldv_undef_int();
  #line 9911 
  emg_53_container = emg_alias_pwr_cont_miss_bcns_spread_ops;
  #line 9912 
  emg_53_ret = ldv_undef_int();
  #line 9914 
  __VERIFIER_assume(data->arg0 == emg_alias_pwr_cont_miss_bcns_spread_ops);
  #line 9916 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 9917 
    emg_53_container = data->arg0;
    #line 9918 
    ldv_free((void *)data);
  }
  #line 9923 
  emg_53_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 9924 
  emg_53_size_cnt = (unsigned long)ldv_undef_int();
  #line 9928 
  goto emg_main_53;
  #line 9932 
  return (void *)0;
  #line 9935 
  emg_call_53: 
               #line 9935 
  ;
  #line 9936 
  if (ldv_undef_int() != 0) {
    #line 9937 
    switch (ldv_undef_int()) {
      #line 9938 
      case 0: 
              #line 9938 
      ;
      #line 9940 
      emg_53_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 9940 
      emg_53_emg_param_1_2 = emg_53_emg_param_1_2;
      #line 9941 
      emg_53_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 9941 
      emg_53_emg_param_3_3 = emg_53_emg_param_3_3;
      #line 9945 
      emg_wrapper_pwr_cont_miss_bcns_spread_read(emg_53_resource_0,emg_53_emg_param_1_2,emg_53_size_cnt,emg_53_emg_param_3_3);
      #line 9949 
      ldv_free((void *)emg_53_emg_param_1_2);
      #line 9950 
      ldv_free((void *)emg_53_emg_param_3_3);
      #line 9952 
      break;
      #line 9954 
      case 1: 
              #line 9954 
      ;
      #line 9956 
      generic_file_llseek(emg_53_resource_0,emg_53_emg_param_1_0,emg_53_emg_param_2_1);
      #line 9958 
      break;
      #line 9960 
      case 2: 
              #line 9960 
      ;
      #line 9967 
      __VERIFIER_assume(emg_53_size_cnt <= 2147479552UL);
      #line 9968 
      emg_53_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 9968 
      emg_53_emg_param_1_4 = emg_53_emg_param_1_4;
      #line 9969 
      emg_53_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 9969 
      emg_53_emg_param_3_5 = emg_53_emg_param_3_5;
      #line 9973 
      if (emg_53_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 9974 
        (*(emg_53_container->write))(emg_53_resource_0,emg_53_emg_param_1_4,emg_53_size_cnt,emg_53_emg_param_3_5);
      #line 9979 
      ldv_free((void *)emg_53_emg_param_1_4);
      #line 9980 
      ldv_free((void *)emg_53_emg_param_3_5);
      #line 9982 
      break;
      #line 9984 
      default: 
               #line 9984 
      ;
      #line 9984 
      __VERIFIER_assume(0);
    }
    #line 9987 
    if (emg_repeat_cnt_call_53 > 0) {
      #line 9988 
      emg_repeat_cnt_call_53 --;
      #line 9990 
      goto emg_call_53;
    }
    else 
         #line 9992 
         __VERIFIER_assume(0);
  }
  else {
    #line 9998 
    if (emg_53_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 9999 
      (*(emg_53_container->release))(emg_53_resource_1,emg_53_resource_0);
    #line 10003 
    if (emg_repeat_cnt_main_53_1 > 0) {
      #line 10004 
      emg_repeat_cnt_main_53_1 --;
      #line 10006 
      goto emg_main_53;
    }
    else 
         #line 10008 
         __VERIFIER_assume(0);
  }
  #line 10014 
  return (void *)0;
  #line 10017 
  emg_main_53: 
               #line 10017 
  ;
  #line 10018 
  if (ldv_undef_int() != 0) {
    #line 10020 
    emg_53_ret = simple_open(emg_53_resource_1,emg_53_resource_0);
    #line 10025 
    emg_53_ret = ldv_filter_err_code(emg_53_ret);
    #line 10028 
    if (ldv_undef_int() != 0) {
      #line 10030 
      __VERIFIER_assume(emg_53_ret == 0);
      #line 10034 
      goto emg_call_53;
    }
    else {
      #line 10039 
      __VERIFIER_assume(emg_53_ret != 0);
      #line 10042 
      if (emg_repeat_cnt_main_53_0 > 0) {
        #line 10043 
        emg_repeat_cnt_main_53_0 --;
        #line 10045 
        goto emg_main_53;
      }
      else 
           #line 10047 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 10054 
       ldv_free((void *)emg_53_resource_0);
  #line 10062 
  return (void *)0;
}

#line 10067  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_pwr_missing_bcns_cnt_ops(void *arg0)
{
  #line 10070 
  struct file_operations *emg_54_container;
  #line 10071 
  long long emg_54_emg_param_1_0;
  #line 10072 
  char *emg_54_emg_param_1_2;
  #line 10073 
  char *emg_54_emg_param_1_4;
  #line 10074 
  int emg_54_emg_param_2_1;
  #line 10075 
  long long *emg_54_emg_param_3_3;
  #line 10076 
  long long *emg_54_emg_param_3_5;
  #line 10077 
  struct file *emg_54_resource_0;
  #line 10078 
  struct inode *emg_54_resource_1;
  #line 10079 
  int emg_54_ret;
  #line 10080 
  unsigned long emg_54_size_cnt;
  #line 10081 
  int emg_repeat_cnt_call_54 = 1;
  #line 10082 
  int emg_repeat_cnt_main_54_0 = 1;
  #line 10083 
  int emg_repeat_cnt_main_54_1 = 1;
  #line 10085 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 10089 
  emg_54_ret = ldv_undef_int();
  #line 10090 
  emg_54_container = emg_alias_pwr_missing_bcns_cnt_ops;
  #line 10091 
  emg_54_ret = ldv_undef_int();
  #line 10093 
  __VERIFIER_assume(data->arg0 == emg_alias_pwr_missing_bcns_cnt_ops);
  #line 10095 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 10096 
    emg_54_container = data->arg0;
    #line 10097 
    ldv_free((void *)data);
  }
  #line 10102 
  emg_54_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 10103 
  emg_54_size_cnt = (unsigned long)ldv_undef_int();
  #line 10107 
  goto emg_main_54;
  #line 10111 
  return (void *)0;
  #line 10114 
  emg_call_54: 
               #line 10114 
  ;
  #line 10115 
  if (ldv_undef_int() != 0) {
    #line 10116 
    switch (ldv_undef_int()) {
      #line 10117 
      case 0: 
              #line 10117 
      ;
      #line 10119 
      emg_54_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 10119 
      emg_54_emg_param_1_2 = emg_54_emg_param_1_2;
      #line 10120 
      emg_54_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 10120 
      emg_54_emg_param_3_3 = emg_54_emg_param_3_3;
      #line 10124 
      emg_wrapper_pwr_missing_bcns_cnt_read(emg_54_resource_0,emg_54_emg_param_1_2,emg_54_size_cnt,emg_54_emg_param_3_3);
      #line 10128 
      ldv_free((void *)emg_54_emg_param_1_2);
      #line 10129 
      ldv_free((void *)emg_54_emg_param_3_3);
      #line 10131 
      break;
      #line 10133 
      case 1: 
              #line 10133 
      ;
      #line 10135 
      generic_file_llseek(emg_54_resource_0,emg_54_emg_param_1_0,emg_54_emg_param_2_1);
      #line 10137 
      break;
      #line 10139 
      case 2: 
              #line 10139 
      ;
      #line 10146 
      __VERIFIER_assume(emg_54_size_cnt <= 2147479552UL);
      #line 10147 
      emg_54_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 10147 
      emg_54_emg_param_1_4 = emg_54_emg_param_1_4;
      #line 10148 
      emg_54_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 10148 
      emg_54_emg_param_3_5 = emg_54_emg_param_3_5;
      #line 10152 
      if (emg_54_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 10153 
        (*(emg_54_container->write))(emg_54_resource_0,emg_54_emg_param_1_4,emg_54_size_cnt,emg_54_emg_param_3_5);
      #line 10158 
      ldv_free((void *)emg_54_emg_param_1_4);
      #line 10159 
      ldv_free((void *)emg_54_emg_param_3_5);
      #line 10161 
      break;
      #line 10163 
      default: 
               #line 10163 
      ;
      #line 10163 
      __VERIFIER_assume(0);
    }
    #line 10166 
    if (emg_repeat_cnt_call_54 > 0) {
      #line 10167 
      emg_repeat_cnt_call_54 --;
      #line 10169 
      goto emg_call_54;
    }
    else 
         #line 10171 
         __VERIFIER_assume(0);
  }
  else {
    #line 10177 
    if (emg_54_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 10178 
      (*(emg_54_container->release))(emg_54_resource_1,emg_54_resource_0);
    #line 10182 
    if (emg_repeat_cnt_main_54_0 > 0) {
      #line 10183 
      emg_repeat_cnt_main_54_0 --;
      #line 10185 
      goto emg_main_54;
    }
    else 
         #line 10187 
         __VERIFIER_assume(0);
  }
  #line 10193 
  return (void *)0;
  #line 10196 
  emg_main_54: 
               #line 10196 
  ;
  #line 10197 
  if (ldv_undef_int() != 0) {
    #line 10199 
    emg_54_ret = simple_open(emg_54_resource_1,emg_54_resource_0);
    #line 10204 
    emg_54_ret = ldv_filter_err_code(emg_54_ret);
    #line 10207 
    if (ldv_undef_int() != 0) {
      #line 10209 
      __VERIFIER_assume(emg_54_ret == 0);
      #line 10213 
      goto emg_call_54;
    }
    else {
      #line 10218 
      __VERIFIER_assume(emg_54_ret != 0);
      #line 10221 
      if (emg_repeat_cnt_main_54_1 > 0) {
        #line 10222 
        emg_repeat_cnt_main_54_1 --;
        #line 10224 
        goto emg_main_54;
      }
      else 
           #line 10226 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 10233 
       ldv_free((void *)emg_54_resource_0);
  #line 10241 
  return (void *)0;
}

#line 10246  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_pwr_rcvd_awake_bcns_cnt_ops(void *arg0)
{
  #line 10249 
  struct file_operations *emg_55_container;
  #line 10250 
  long long emg_55_emg_param_1_0;
  #line 10251 
  char *emg_55_emg_param_1_2;
  #line 10252 
  char *emg_55_emg_param_1_4;
  #line 10253 
  int emg_55_emg_param_2_1;
  #line 10254 
  long long *emg_55_emg_param_3_3;
  #line 10255 
  long long *emg_55_emg_param_3_5;
  #line 10256 
  struct file *emg_55_resource_0;
  #line 10257 
  struct inode *emg_55_resource_1;
  #line 10258 
  int emg_55_ret;
  #line 10259 
  unsigned long emg_55_size_cnt;
  #line 10260 
  int emg_repeat_cnt_call_55 = 1;
  #line 10261 
  int emg_repeat_cnt_main_55_1 = 1;
  #line 10262 
  int emg_repeat_cnt_main_55_0 = 1;
  #line 10264 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 10268 
  emg_55_ret = ldv_undef_int();
  #line 10269 
  emg_55_container = emg_alias_pwr_rcvd_awake_bcns_cnt_ops;
  #line 10270 
  emg_55_ret = ldv_undef_int();
  #line 10272 
  __VERIFIER_assume(data->arg0 == emg_alias_pwr_rcvd_awake_bcns_cnt_ops);
  #line 10274 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 10275 
    emg_55_container = data->arg0;
    #line 10276 
    ldv_free((void *)data);
  }
  #line 10281 
  emg_55_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 10282 
  emg_55_size_cnt = (unsigned long)ldv_undef_int();
  #line 10286 
  goto emg_main_55;
  #line 10290 
  return (void *)0;
  #line 10293 
  emg_call_55: 
               #line 10293 
  ;
  #line 10294 
  if (ldv_undef_int() != 0) {
    #line 10295 
    switch (ldv_undef_int()) {
      #line 10296 
      case 0: 
              #line 10296 
      ;
      #line 10298 
      emg_55_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 10298 
      emg_55_emg_param_1_2 = emg_55_emg_param_1_2;
      #line 10299 
      emg_55_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 10299 
      emg_55_emg_param_3_3 = emg_55_emg_param_3_3;
      #line 10303 
      emg_wrapper_pwr_rcvd_awake_bcns_cnt_read(emg_55_resource_0,emg_55_emg_param_1_2,emg_55_size_cnt,emg_55_emg_param_3_3);
      #line 10307 
      ldv_free((void *)emg_55_emg_param_1_2);
      #line 10308 
      ldv_free((void *)emg_55_emg_param_3_3);
      #line 10310 
      break;
      #line 10312 
      case 1: 
              #line 10312 
      ;
      #line 10314 
      generic_file_llseek(emg_55_resource_0,emg_55_emg_param_1_0,emg_55_emg_param_2_1);
      #line 10316 
      break;
      #line 10318 
      case 2: 
              #line 10318 
      ;
      #line 10325 
      __VERIFIER_assume(emg_55_size_cnt <= 2147479552UL);
      #line 10326 
      emg_55_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 10326 
      emg_55_emg_param_1_4 = emg_55_emg_param_1_4;
      #line 10327 
      emg_55_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 10327 
      emg_55_emg_param_3_5 = emg_55_emg_param_3_5;
      #line 10331 
      if (emg_55_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 10332 
        (*(emg_55_container->write))(emg_55_resource_0,emg_55_emg_param_1_4,emg_55_size_cnt,emg_55_emg_param_3_5);
      #line 10337 
      ldv_free((void *)emg_55_emg_param_1_4);
      #line 10338 
      ldv_free((void *)emg_55_emg_param_3_5);
      #line 10340 
      break;
      #line 10342 
      default: 
               #line 10342 
      ;
      #line 10342 
      __VERIFIER_assume(0);
    }
    #line 10345 
    if (emg_repeat_cnt_call_55 > 0) {
      #line 10346 
      emg_repeat_cnt_call_55 --;
      #line 10348 
      goto emg_call_55;
    }
    else 
         #line 10350 
         __VERIFIER_assume(0);
  }
  else {
    #line 10356 
    if (emg_55_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 10357 
      (*(emg_55_container->release))(emg_55_resource_1,emg_55_resource_0);
    #line 10361 
    if (emg_repeat_cnt_main_55_0 > 0) {
      #line 10362 
      emg_repeat_cnt_main_55_0 --;
      #line 10364 
      goto emg_main_55;
    }
    else 
         #line 10366 
         __VERIFIER_assume(0);
  }
  #line 10372 
  return (void *)0;
  #line 10375 
  emg_main_55: 
               #line 10375 
  ;
  #line 10376 
  if (ldv_undef_int() != 0) {
    #line 10378 
    emg_55_ret = simple_open(emg_55_resource_1,emg_55_resource_0);
    #line 10383 
    emg_55_ret = ldv_filter_err_code(emg_55_ret);
    #line 10386 
    if (ldv_undef_int() != 0) {
      #line 10388 
      __VERIFIER_assume(emg_55_ret == 0);
      #line 10392 
      goto emg_call_55;
    }
    else {
      #line 10397 
      __VERIFIER_assume(emg_55_ret != 0);
      #line 10400 
      if (emg_repeat_cnt_main_55_1 > 0) {
        #line 10401 
        emg_repeat_cnt_main_55_1 --;
        #line 10403 
        goto emg_main_55;
      }
      else 
           #line 10405 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 10412 
       ldv_free((void *)emg_55_resource_0);
  #line 10420 
  return (void *)0;
}

#line 10425  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_pwr_rcvd_bcns_cnt_ops(void *arg0)
{
  #line 10428 
  struct file_operations *emg_56_container;
  #line 10429 
  long long emg_56_emg_param_1_0;
  #line 10430 
  char *emg_56_emg_param_1_2;
  #line 10431 
  char *emg_56_emg_param_1_4;
  #line 10432 
  int emg_56_emg_param_2_1;
  #line 10433 
  long long *emg_56_emg_param_3_3;
  #line 10434 
  long long *emg_56_emg_param_3_5;
  #line 10435 
  struct file *emg_56_resource_0;
  #line 10436 
  struct inode *emg_56_resource_1;
  #line 10437 
  int emg_56_ret;
  #line 10438 
  unsigned long emg_56_size_cnt;
  #line 10439 
  int emg_repeat_cnt_main_56_1 = 1;
  #line 10440 
  int emg_repeat_cnt_call_56 = 1;
  #line 10441 
  int emg_repeat_cnt_main_56_0 = 1;
  #line 10443 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 10447 
  emg_56_ret = ldv_undef_int();
  #line 10448 
  emg_56_container = emg_alias_pwr_rcvd_bcns_cnt_ops;
  #line 10449 
  emg_56_ret = ldv_undef_int();
  #line 10451 
  __VERIFIER_assume(data->arg0 == emg_alias_pwr_rcvd_bcns_cnt_ops);
  #line 10453 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 10454 
    emg_56_container = data->arg0;
    #line 10455 
    ldv_free((void *)data);
  }
  #line 10460 
  emg_56_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 10461 
  emg_56_size_cnt = (unsigned long)ldv_undef_int();
  #line 10465 
  goto emg_main_56;
  #line 10469 
  return (void *)0;
  #line 10472 
  emg_call_56: 
               #line 10472 
  ;
  #line 10473 
  if (ldv_undef_int() != 0) {
    #line 10474 
    switch (ldv_undef_int()) {
      #line 10475 
      case 0: 
              #line 10475 
      ;
      #line 10477 
      emg_56_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 10477 
      emg_56_emg_param_1_2 = emg_56_emg_param_1_2;
      #line 10478 
      emg_56_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 10478 
      emg_56_emg_param_3_3 = emg_56_emg_param_3_3;
      #line 10482 
      emg_wrapper_pwr_rcvd_bcns_cnt_read(emg_56_resource_0,emg_56_emg_param_1_2,emg_56_size_cnt,emg_56_emg_param_3_3);
      #line 10486 
      ldv_free((void *)emg_56_emg_param_1_2);
      #line 10487 
      ldv_free((void *)emg_56_emg_param_3_3);
      #line 10489 
      break;
      #line 10491 
      case 1: 
              #line 10491 
      ;
      #line 10493 
      generic_file_llseek(emg_56_resource_0,emg_56_emg_param_1_0,emg_56_emg_param_2_1);
      #line 10495 
      break;
      #line 10497 
      case 2: 
              #line 10497 
      ;
      #line 10504 
      __VERIFIER_assume(emg_56_size_cnt <= 2147479552UL);
      #line 10505 
      emg_56_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 10505 
      emg_56_emg_param_1_4 = emg_56_emg_param_1_4;
      #line 10506 
      emg_56_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 10506 
      emg_56_emg_param_3_5 = emg_56_emg_param_3_5;
      #line 10510 
      if (emg_56_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 10511 
        (*(emg_56_container->write))(emg_56_resource_0,emg_56_emg_param_1_4,emg_56_size_cnt,emg_56_emg_param_3_5);
      #line 10516 
      ldv_free((void *)emg_56_emg_param_1_4);
      #line 10517 
      ldv_free((void *)emg_56_emg_param_3_5);
      #line 10519 
      break;
      #line 10521 
      default: 
               #line 10521 
      ;
      #line 10521 
      __VERIFIER_assume(0);
    }
    #line 10524 
    if (emg_repeat_cnt_call_56 > 0) {
      #line 10525 
      emg_repeat_cnt_call_56 --;
      #line 10527 
      goto emg_call_56;
    }
    else 
         #line 10529 
         __VERIFIER_assume(0);
  }
  else {
    #line 10535 
    if (emg_56_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 10536 
      (*(emg_56_container->release))(emg_56_resource_1,emg_56_resource_0);
    #line 10540 
    if (emg_repeat_cnt_main_56_1 > 0) {
      #line 10541 
      emg_repeat_cnt_main_56_1 --;
      #line 10543 
      goto emg_main_56;
    }
    else 
         #line 10545 
         __VERIFIER_assume(0);
  }
  #line 10551 
  return (void *)0;
  #line 10554 
  emg_main_56: 
               #line 10554 
  ;
  #line 10555 
  if (ldv_undef_int() != 0) {
    #line 10557 
    emg_56_ret = simple_open(emg_56_resource_1,emg_56_resource_0);
    #line 10562 
    emg_56_ret = ldv_filter_err_code(emg_56_ret);
    #line 10565 
    if (ldv_undef_int() != 0) {
      #line 10567 
      __VERIFIER_assume(emg_56_ret == 0);
      #line 10571 
      goto emg_call_56;
    }
    else {
      #line 10576 
      __VERIFIER_assume(emg_56_ret != 0);
      #line 10579 
      if (emg_repeat_cnt_main_56_0 > 0) {
        #line 10580 
        emg_repeat_cnt_main_56_0 --;
        #line 10582 
        goto emg_main_56;
      }
      else 
           #line 10584 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 10591 
       ldv_free((void *)emg_56_resource_0);
  #line 10599 
  return (void *)0;
}

#line 10604  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_pwr_sleep_cycle_avg_ops(void *arg0)
{
  #line 10607 
  struct file_operations *emg_57_container;
  #line 10608 
  long long emg_57_emg_param_1_0;
  #line 10609 
  char *emg_57_emg_param_1_2;
  #line 10610 
  char *emg_57_emg_param_1_4;
  #line 10611 
  int emg_57_emg_param_2_1;
  #line 10612 
  long long *emg_57_emg_param_3_3;
  #line 10613 
  long long *emg_57_emg_param_3_5;
  #line 10614 
  struct file *emg_57_resource_0;
  #line 10615 
  struct inode *emg_57_resource_1;
  #line 10616 
  int emg_57_ret;
  #line 10617 
  unsigned long emg_57_size_cnt;
  #line 10618 
  int emg_repeat_cnt_call_57 = 1;
  #line 10619 
  int emg_repeat_cnt_main_57_1 = 1;
  #line 10620 
  int emg_repeat_cnt_main_57_0 = 1;
  #line 10622 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 10626 
  emg_57_ret = ldv_undef_int();
  #line 10627 
  emg_57_container = emg_alias_pwr_sleep_cycle_avg_ops;
  #line 10628 
  emg_57_ret = ldv_undef_int();
  #line 10630 
  __VERIFIER_assume(data->arg0 == emg_alias_pwr_sleep_cycle_avg_ops);
  #line 10632 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 10633 
    emg_57_container = data->arg0;
    #line 10634 
    ldv_free((void *)data);
  }
  #line 10639 
  emg_57_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 10640 
  emg_57_size_cnt = (unsigned long)ldv_undef_int();
  #line 10644 
  goto emg_main_57;
  #line 10648 
  return (void *)0;
  #line 10651 
  emg_call_57: 
               #line 10651 
  ;
  #line 10652 
  if (ldv_undef_int() != 0) {
    #line 10653 
    switch (ldv_undef_int()) {
      #line 10654 
      case 0: 
              #line 10654 
      ;
      #line 10656 
      emg_57_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 10656 
      emg_57_emg_param_1_2 = emg_57_emg_param_1_2;
      #line 10657 
      emg_57_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 10657 
      emg_57_emg_param_3_3 = emg_57_emg_param_3_3;
      #line 10661 
      emg_wrapper_pwr_sleep_cycle_avg_read(emg_57_resource_0,emg_57_emg_param_1_2,emg_57_size_cnt,emg_57_emg_param_3_3);
      #line 10665 
      ldv_free((void *)emg_57_emg_param_1_2);
      #line 10666 
      ldv_free((void *)emg_57_emg_param_3_3);
      #line 10668 
      break;
      #line 10670 
      case 1: 
              #line 10670 
      ;
      #line 10672 
      generic_file_llseek(emg_57_resource_0,emg_57_emg_param_1_0,emg_57_emg_param_2_1);
      #line 10674 
      break;
      #line 10676 
      case 2: 
              #line 10676 
      ;
      #line 10683 
      __VERIFIER_assume(emg_57_size_cnt <= 2147479552UL);
      #line 10684 
      emg_57_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 10684 
      emg_57_emg_param_1_4 = emg_57_emg_param_1_4;
      #line 10685 
      emg_57_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 10685 
      emg_57_emg_param_3_5 = emg_57_emg_param_3_5;
      #line 10689 
      if (emg_57_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 10690 
        (*(emg_57_container->write))(emg_57_resource_0,emg_57_emg_param_1_4,emg_57_size_cnt,emg_57_emg_param_3_5);
      #line 10695 
      ldv_free((void *)emg_57_emg_param_1_4);
      #line 10696 
      ldv_free((void *)emg_57_emg_param_3_5);
      #line 10698 
      break;
      #line 10700 
      default: 
               #line 10700 
      ;
      #line 10700 
      __VERIFIER_assume(0);
    }
    #line 10703 
    if (emg_repeat_cnt_call_57 > 0) {
      #line 10704 
      emg_repeat_cnt_call_57 --;
      #line 10706 
      goto emg_call_57;
    }
    else 
         #line 10708 
         __VERIFIER_assume(0);
  }
  else {
    #line 10714 
    if (emg_57_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 10715 
      (*(emg_57_container->release))(emg_57_resource_1,emg_57_resource_0);
    #line 10719 
    if (emg_repeat_cnt_main_57_1 > 0) {
      #line 10720 
      emg_repeat_cnt_main_57_1 --;
      #line 10722 
      goto emg_main_57;
    }
    else 
         #line 10724 
         __VERIFIER_assume(0);
  }
  #line 10730 
  return (void *)0;
  #line 10733 
  emg_main_57: 
               #line 10733 
  ;
  #line 10734 
  if (ldv_undef_int() != 0) {
    #line 10736 
    emg_57_ret = simple_open(emg_57_resource_1,emg_57_resource_0);
    #line 10741 
    emg_57_ret = ldv_filter_err_code(emg_57_ret);
    #line 10744 
    if (ldv_undef_int() != 0) {
      #line 10746 
      __VERIFIER_assume(emg_57_ret == 0);
      #line 10750 
      goto emg_call_57;
    }
    else {
      #line 10755 
      __VERIFIER_assume(emg_57_ret != 0);
      #line 10758 
      if (emg_repeat_cnt_main_57_0 > 0) {
        #line 10759 
        emg_repeat_cnt_main_57_0 --;
        #line 10761 
        goto emg_main_57;
      }
      else 
           #line 10763 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 10770 
       ldv_free((void *)emg_57_resource_0);
  #line 10778 
  return (void *)0;
}

#line 10783  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_pwr_sleep_percent_ops(void *arg0)
{
  #line 10786 
  struct file_operations *emg_58_container;
  #line 10787 
  long long emg_58_emg_param_1_0;
  #line 10788 
  char *emg_58_emg_param_1_2;
  #line 10789 
  char *emg_58_emg_param_1_4;
  #line 10790 
  int emg_58_emg_param_2_1;
  #line 10791 
  long long *emg_58_emg_param_3_3;
  #line 10792 
  long long *emg_58_emg_param_3_5;
  #line 10793 
  struct file *emg_58_resource_0;
  #line 10794 
  struct inode *emg_58_resource_1;
  #line 10795 
  int emg_58_ret;
  #line 10796 
  unsigned long emg_58_size_cnt;
  #line 10797 
  int emg_repeat_cnt_main_58_1 = 1;
  #line 10798 
  int emg_repeat_cnt_call_58 = 1;
  #line 10799 
  int emg_repeat_cnt_main_58_0 = 1;
  #line 10801 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 10805 
  emg_58_ret = ldv_undef_int();
  #line 10806 
  emg_58_container = emg_alias_pwr_sleep_percent_ops;
  #line 10807 
  emg_58_ret = ldv_undef_int();
  #line 10809 
  __VERIFIER_assume(data->arg0 == emg_alias_pwr_sleep_percent_ops);
  #line 10811 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 10812 
    emg_58_container = data->arg0;
    #line 10813 
    ldv_free((void *)data);
  }
  #line 10818 
  emg_58_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 10819 
  emg_58_size_cnt = (unsigned long)ldv_undef_int();
  #line 10823 
  goto emg_main_58;
  #line 10827 
  return (void *)0;
  #line 10830 
  emg_call_58: 
               #line 10830 
  ;
  #line 10831 
  if (ldv_undef_int() != 0) {
    #line 10832 
    switch (ldv_undef_int()) {
      #line 10833 
      case 0: 
              #line 10833 
      ;
      #line 10835 
      emg_58_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 10835 
      emg_58_emg_param_1_2 = emg_58_emg_param_1_2;
      #line 10836 
      emg_58_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 10836 
      emg_58_emg_param_3_3 = emg_58_emg_param_3_3;
      #line 10840 
      emg_wrapper_pwr_sleep_percent_read(emg_58_resource_0,emg_58_emg_param_1_2,emg_58_size_cnt,emg_58_emg_param_3_3);
      #line 10844 
      ldv_free((void *)emg_58_emg_param_1_2);
      #line 10845 
      ldv_free((void *)emg_58_emg_param_3_3);
      #line 10847 
      break;
      #line 10849 
      case 1: 
              #line 10849 
      ;
      #line 10851 
      generic_file_llseek(emg_58_resource_0,emg_58_emg_param_1_0,emg_58_emg_param_2_1);
      #line 10853 
      break;
      #line 10855 
      case 2: 
              #line 10855 
      ;
      #line 10862 
      __VERIFIER_assume(emg_58_size_cnt <= 2147479552UL);
      #line 10863 
      emg_58_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 10863 
      emg_58_emg_param_1_4 = emg_58_emg_param_1_4;
      #line 10864 
      emg_58_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 10864 
      emg_58_emg_param_3_5 = emg_58_emg_param_3_5;
      #line 10868 
      if (emg_58_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 10869 
        (*(emg_58_container->write))(emg_58_resource_0,emg_58_emg_param_1_4,emg_58_size_cnt,emg_58_emg_param_3_5);
      #line 10874 
      ldv_free((void *)emg_58_emg_param_1_4);
      #line 10875 
      ldv_free((void *)emg_58_emg_param_3_5);
      #line 10877 
      break;
      #line 10879 
      default: 
               #line 10879 
      ;
      #line 10879 
      __VERIFIER_assume(0);
    }
    #line 10882 
    if (emg_repeat_cnt_call_58 > 0) {
      #line 10883 
      emg_repeat_cnt_call_58 --;
      #line 10885 
      goto emg_call_58;
    }
    else 
         #line 10887 
         __VERIFIER_assume(0);
  }
  else {
    #line 10893 
    if (emg_58_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 10894 
      (*(emg_58_container->release))(emg_58_resource_1,emg_58_resource_0);
    #line 10898 
    if (emg_repeat_cnt_main_58_1 > 0) {
      #line 10899 
      emg_repeat_cnt_main_58_1 --;
      #line 10901 
      goto emg_main_58;
    }
    else 
         #line 10903 
         __VERIFIER_assume(0);
  }
  #line 10909 
  return (void *)0;
  #line 10912 
  emg_main_58: 
               #line 10912 
  ;
  #line 10913 
  if (ldv_undef_int() != 0) {
    #line 10915 
    emg_58_ret = simple_open(emg_58_resource_1,emg_58_resource_0);
    #line 10920 
    emg_58_ret = ldv_filter_err_code(emg_58_ret);
    #line 10923 
    if (ldv_undef_int() != 0) {
      #line 10925 
      __VERIFIER_assume(emg_58_ret == 0);
      #line 10929 
      goto emg_call_58;
    }
    else {
      #line 10934 
      __VERIFIER_assume(emg_58_ret != 0);
      #line 10937 
      if (emg_repeat_cnt_main_58_0 > 0) {
        #line 10938 
        emg_repeat_cnt_main_58_0 --;
        #line 10940 
        goto emg_main_58;
      }
      else 
           #line 10942 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 10949 
       ldv_free((void *)emg_58_resource_0);
  #line 10957 
  return (void *)0;
}

#line 10962  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_pwr_sleep_time_avg_ops(void *arg0)
{
  #line 10965 
  struct file_operations *emg_59_container;
  #line 10966 
  long long emg_59_emg_param_1_0;
  #line 10967 
  char *emg_59_emg_param_1_2;
  #line 10968 
  char *emg_59_emg_param_1_4;
  #line 10969 
  int emg_59_emg_param_2_1;
  #line 10970 
  long long *emg_59_emg_param_3_3;
  #line 10971 
  long long *emg_59_emg_param_3_5;
  #line 10972 
  struct file *emg_59_resource_0;
  #line 10973 
  struct inode *emg_59_resource_1;
  #line 10974 
  int emg_59_ret;
  #line 10975 
  unsigned long emg_59_size_cnt;
  #line 10976 
  int emg_repeat_cnt_main_59_1 = 1;
  #line 10977 
  int emg_repeat_cnt_main_59_0 = 1;
  #line 10978 
  int emg_repeat_cnt_call_59 = 1;
  #line 10980 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 10984 
  emg_59_ret = ldv_undef_int();
  #line 10985 
  emg_59_container = emg_alias_pwr_sleep_time_avg_ops;
  #line 10986 
  emg_59_ret = ldv_undef_int();
  #line 10988 
  __VERIFIER_assume(data->arg0 == emg_alias_pwr_sleep_time_avg_ops);
  #line 10990 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 10991 
    emg_59_container = data->arg0;
    #line 10992 
    ldv_free((void *)data);
  }
  #line 10997 
  emg_59_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 10998 
  emg_59_size_cnt = (unsigned long)ldv_undef_int();
  #line 11002 
  goto emg_main_59;
  #line 11006 
  return (void *)0;
  #line 11009 
  emg_call_59: 
               #line 11009 
  ;
  #line 11010 
  if (ldv_undef_int() != 0) {
    #line 11011 
    switch (ldv_undef_int()) {
      #line 11012 
      case 0: 
              #line 11012 
      ;
      #line 11014 
      emg_59_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 11014 
      emg_59_emg_param_1_2 = emg_59_emg_param_1_2;
      #line 11015 
      emg_59_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 11015 
      emg_59_emg_param_3_3 = emg_59_emg_param_3_3;
      #line 11019 
      emg_wrapper_pwr_sleep_time_avg_read(emg_59_resource_0,emg_59_emg_param_1_2,emg_59_size_cnt,emg_59_emg_param_3_3);
      #line 11023 
      ldv_free((void *)emg_59_emg_param_1_2);
      #line 11024 
      ldv_free((void *)emg_59_emg_param_3_3);
      #line 11026 
      break;
      #line 11028 
      case 1: 
              #line 11028 
      ;
      #line 11030 
      generic_file_llseek(emg_59_resource_0,emg_59_emg_param_1_0,emg_59_emg_param_2_1);
      #line 11032 
      break;
      #line 11034 
      case 2: 
              #line 11034 
      ;
      #line 11041 
      __VERIFIER_assume(emg_59_size_cnt <= 2147479552UL);
      #line 11042 
      emg_59_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 11042 
      emg_59_emg_param_1_4 = emg_59_emg_param_1_4;
      #line 11043 
      emg_59_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 11043 
      emg_59_emg_param_3_5 = emg_59_emg_param_3_5;
      #line 11047 
      if (emg_59_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 11048 
        (*(emg_59_container->write))(emg_59_resource_0,emg_59_emg_param_1_4,emg_59_size_cnt,emg_59_emg_param_3_5);
      #line 11053 
      ldv_free((void *)emg_59_emg_param_1_4);
      #line 11054 
      ldv_free((void *)emg_59_emg_param_3_5);
      #line 11056 
      break;
      #line 11058 
      default: 
               #line 11058 
      ;
      #line 11058 
      __VERIFIER_assume(0);
    }
    #line 11061 
    if (emg_repeat_cnt_call_59 > 0) {
      #line 11062 
      emg_repeat_cnt_call_59 --;
      #line 11064 
      goto emg_call_59;
    }
    else 
         #line 11066 
         __VERIFIER_assume(0);
  }
  else {
    #line 11072 
    if (emg_59_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 11073 
      (*(emg_59_container->release))(emg_59_resource_1,emg_59_resource_0);
    #line 11077 
    if (emg_repeat_cnt_main_59_0 > 0) {
      #line 11078 
      emg_repeat_cnt_main_59_0 --;
      #line 11080 
      goto emg_main_59;
    }
    else 
         #line 11082 
         __VERIFIER_assume(0);
  }
  #line 11088 
  return (void *)0;
  #line 11091 
  emg_main_59: 
               #line 11091 
  ;
  #line 11092 
  if (ldv_undef_int() != 0) {
    #line 11094 
    emg_59_ret = simple_open(emg_59_resource_1,emg_59_resource_0);
    #line 11099 
    emg_59_ret = ldv_filter_err_code(emg_59_ret);
    #line 11102 
    if (ldv_undef_int() != 0) {
      #line 11104 
      __VERIFIER_assume(emg_59_ret == 0);
      #line 11108 
      goto emg_call_59;
    }
    else {
      #line 11113 
      __VERIFIER_assume(emg_59_ret != 0);
      #line 11116 
      if (emg_repeat_cnt_main_59_1 > 0) {
        #line 11117 
        emg_repeat_cnt_main_59_1 --;
        #line 11119 
        goto emg_main_59;
      }
      else 
           #line 11121 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 11128 
       ldv_free((void *)emg_59_resource_0);
  #line 11136 
  return (void *)0;
}

#line 11141  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_pwr_sleep_time_count_ops(void *arg0)
{
  #line 11144 
  struct file_operations *emg_60_container;
  #line 11145 
  long long emg_60_emg_param_1_0;
  #line 11146 
  char *emg_60_emg_param_1_2;
  #line 11147 
  char *emg_60_emg_param_1_4;
  #line 11148 
  int emg_60_emg_param_2_1;
  #line 11149 
  long long *emg_60_emg_param_3_3;
  #line 11150 
  long long *emg_60_emg_param_3_5;
  #line 11151 
  struct file *emg_60_resource_0;
  #line 11152 
  struct inode *emg_60_resource_1;
  #line 11153 
  int emg_60_ret;
  #line 11154 
  unsigned long emg_60_size_cnt;
  #line 11155 
  int emg_repeat_cnt_call_60 = 1;
  #line 11156 
  int emg_repeat_cnt_main_60_1 = 1;
  #line 11157 
  int emg_repeat_cnt_main_60_0 = 1;
  #line 11159 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 11163 
  emg_60_ret = ldv_undef_int();
  #line 11164 
  emg_60_container = emg_alias_pwr_sleep_time_count_ops;
  #line 11165 
  emg_60_ret = ldv_undef_int();
  #line 11167 
  __VERIFIER_assume(data->arg0 == emg_alias_pwr_sleep_time_count_ops);
  #line 11169 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 11170 
    emg_60_container = data->arg0;
    #line 11171 
    ldv_free((void *)data);
  }
  #line 11176 
  emg_60_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 11177 
  emg_60_size_cnt = (unsigned long)ldv_undef_int();
  #line 11181 
  goto emg_main_60;
  #line 11185 
  return (void *)0;
  #line 11188 
  emg_call_60: 
               #line 11188 
  ;
  #line 11189 
  if (ldv_undef_int() != 0) {
    #line 11190 
    switch (ldv_undef_int()) {
      #line 11191 
      case 0: 
              #line 11191 
      ;
      #line 11193 
      emg_60_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 11193 
      emg_60_emg_param_1_2 = emg_60_emg_param_1_2;
      #line 11194 
      emg_60_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 11194 
      emg_60_emg_param_3_3 = emg_60_emg_param_3_3;
      #line 11198 
      emg_wrapper_pwr_sleep_time_count_read(emg_60_resource_0,emg_60_emg_param_1_2,emg_60_size_cnt,emg_60_emg_param_3_3);
      #line 11202 
      ldv_free((void *)emg_60_emg_param_1_2);
      #line 11203 
      ldv_free((void *)emg_60_emg_param_3_3);
      #line 11205 
      break;
      #line 11207 
      case 1: 
              #line 11207 
      ;
      #line 11209 
      generic_file_llseek(emg_60_resource_0,emg_60_emg_param_1_0,emg_60_emg_param_2_1);
      #line 11211 
      break;
      #line 11213 
      case 2: 
              #line 11213 
      ;
      #line 11220 
      __VERIFIER_assume(emg_60_size_cnt <= 2147479552UL);
      #line 11221 
      emg_60_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 11221 
      emg_60_emg_param_1_4 = emg_60_emg_param_1_4;
      #line 11222 
      emg_60_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 11222 
      emg_60_emg_param_3_5 = emg_60_emg_param_3_5;
      #line 11226 
      if (emg_60_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 11227 
        (*(emg_60_container->write))(emg_60_resource_0,emg_60_emg_param_1_4,emg_60_size_cnt,emg_60_emg_param_3_5);
      #line 11232 
      ldv_free((void *)emg_60_emg_param_1_4);
      #line 11233 
      ldv_free((void *)emg_60_emg_param_3_5);
      #line 11235 
      break;
      #line 11237 
      default: 
               #line 11237 
      ;
      #line 11237 
      __VERIFIER_assume(0);
    }
    #line 11240 
    if (emg_repeat_cnt_call_60 > 0) {
      #line 11241 
      emg_repeat_cnt_call_60 --;
      #line 11243 
      goto emg_call_60;
    }
    else 
         #line 11245 
         __VERIFIER_assume(0);
  }
  else {
    #line 11251 
    if (emg_60_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 11252 
      (*(emg_60_container->release))(emg_60_resource_1,emg_60_resource_0);
    #line 11256 
    if (emg_repeat_cnt_main_60_1 > 0) {
      #line 11257 
      emg_repeat_cnt_main_60_1 --;
      #line 11259 
      goto emg_main_60;
    }
    else 
         #line 11261 
         __VERIFIER_assume(0);
  }
  #line 11267 
  return (void *)0;
  #line 11270 
  emg_main_60: 
               #line 11270 
  ;
  #line 11271 
  if (ldv_undef_int() != 0) {
    #line 11273 
    emg_60_ret = simple_open(emg_60_resource_1,emg_60_resource_0);
    #line 11278 
    emg_60_ret = ldv_filter_err_code(emg_60_ret);
    #line 11281 
    if (ldv_undef_int() != 0) {
      #line 11283 
      __VERIFIER_assume(emg_60_ret == 0);
      #line 11287 
      goto emg_call_60;
    }
    else {
      #line 11292 
      __VERIFIER_assume(emg_60_ret != 0);
      #line 11295 
      if (emg_repeat_cnt_main_60_0 > 0) {
        #line 11296 
        emg_repeat_cnt_main_60_0 --;
        #line 11298 
        goto emg_main_60;
      }
      else 
           #line 11300 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 11307 
       ldv_free((void *)emg_60_resource_0);
  #line 11315 
  return (void *)0;
}

#line 11320  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_radar_debug_mode_ops(void *arg0)
{
  #line 11323 
  struct file_operations *emg_61_container;
  #line 11324 
  long long emg_61_emg_param_1_0;
  #line 11325 
  char *emg_61_emg_param_1_2;
  #line 11326 
  char *emg_61_emg_param_1_4;
  #line 11327 
  int emg_61_emg_param_2_1;
  #line 11328 
  long long *emg_61_emg_param_3_3;
  #line 11329 
  long long *emg_61_emg_param_3_5;
  #line 11330 
  struct file *emg_61_resource_0;
  #line 11331 
  struct inode *emg_61_resource_1;
  #line 11332 
  int emg_61_ret;
  #line 11333 
  unsigned long emg_61_size_cnt;
  #line 11334 
  int emg_repeat_cnt_call_61 = 1;
  #line 11335 
  int emg_repeat_cnt_main_61_0 = 1;
  #line 11336 
  int emg_repeat_cnt_main_61_1 = 1;
  #line 11338 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 11342 
  emg_61_ret = ldv_undef_int();
  #line 11343 
  emg_61_container = emg_alias_radar_debug_mode_ops;
  #line 11344 
  emg_61_ret = ldv_undef_int();
  #line 11346 
  __VERIFIER_assume(data->arg0 == emg_alias_radar_debug_mode_ops);
  #line 11348 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 11349 
    emg_61_container = data->arg0;
    #line 11350 
    ldv_free((void *)data);
  }
  #line 11355 
  emg_61_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 11356 
  emg_61_size_cnt = (unsigned long)ldv_undef_int();
  #line 11360 
  goto emg_main_61;
  #line 11364 
  return (void *)0;
  #line 11367 
  emg_call_61: 
               #line 11367 
  ;
  #line 11368 
  if (ldv_undef_int() != 0) {
    #line 11369 
    switch (ldv_undef_int()) {
      #line 11370 
      case 0: 
              #line 11370 
      ;
      #line 11372 
      emg_61_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 11372 
      emg_61_emg_param_1_2 = emg_61_emg_param_1_2;
      #line 11373 
      emg_61_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 11373 
      emg_61_emg_param_3_3 = emg_61_emg_param_3_3;
      #line 11377 
      emg_wrapper_radar_debug_mode_read(emg_61_resource_0,emg_61_emg_param_1_2,emg_61_size_cnt,emg_61_emg_param_3_3);
      #line 11381 
      ldv_free((void *)emg_61_emg_param_1_2);
      #line 11382 
      ldv_free((void *)emg_61_emg_param_3_3);
      #line 11384 
      break;
      #line 11386 
      case 1: 
              #line 11386 
      ;
      #line 11388 
      default_llseek(emg_61_resource_0,emg_61_emg_param_1_0,emg_61_emg_param_2_1);
      #line 11390 
      break;
      #line 11392 
      case 2: 
              #line 11392 
      ;
      #line 11399 
      __VERIFIER_assume(emg_61_size_cnt <= 2147479552UL);
      #line 11400 
      emg_61_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 11400 
      emg_61_emg_param_1_4 = emg_61_emg_param_1_4;
      #line 11401 
      emg_61_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 11401 
      emg_61_emg_param_3_5 = emg_61_emg_param_3_5;
      #line 11405 
      emg_wrapper_radar_debug_mode_write(emg_61_resource_0,emg_61_emg_param_1_4,emg_61_size_cnt,emg_61_emg_param_3_5);
      #line 11409 
      ldv_free((void *)emg_61_emg_param_1_4);
      #line 11410 
      ldv_free((void *)emg_61_emg_param_3_5);
      #line 11412 
      break;
      #line 11414 
      default: 
               #line 11414 
      ;
      #line 11414 
      __VERIFIER_assume(0);
    }
    #line 11417 
    if (emg_repeat_cnt_call_61 > 0) {
      #line 11418 
      emg_repeat_cnt_call_61 --;
      #line 11420 
      goto emg_call_61;
    }
    else 
         #line 11422 
         __VERIFIER_assume(0);
  }
  else {
    #line 11428 
    if (emg_61_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 11429 
      (*(emg_61_container->release))(emg_61_resource_1,emg_61_resource_0);
    #line 11433 
    if (emg_repeat_cnt_main_61_1 > 0) {
      #line 11434 
      emg_repeat_cnt_main_61_1 --;
      #line 11436 
      goto emg_main_61;
    }
    else 
         #line 11438 
         __VERIFIER_assume(0);
  }
  #line 11444 
  return (void *)0;
  #line 11447 
  emg_main_61: 
               #line 11447 
  ;
  #line 11448 
  if (ldv_undef_int() != 0) {
    #line 11450 
    emg_61_ret = simple_open(emg_61_resource_1,emg_61_resource_0);
    #line 11455 
    emg_61_ret = ldv_filter_err_code(emg_61_ret);
    #line 11458 
    if (ldv_undef_int() != 0) {
      #line 11460 
      __VERIFIER_assume(emg_61_ret == 0);
      #line 11464 
      goto emg_call_61;
    }
    else {
      #line 11469 
      __VERIFIER_assume(emg_61_ret != 0);
      #line 11472 
      if (emg_repeat_cnt_main_61_0 > 0) {
        #line 11473 
        emg_repeat_cnt_main_61_0 --;
        #line 11475 
        goto emg_main_61;
      }
      else 
           #line 11477 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 11484 
       ldv_free((void *)emg_61_resource_0);
  #line 11492 
  return (void *)0;
}

#line 11497  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_radar_detection_ops(void *arg0)
{
  #line 11500 
  struct file_operations *emg_62_container;
  #line 11501 
  long long emg_62_emg_param_1_0;
  #line 11502 
  char *emg_62_emg_param_1_2;
  #line 11503 
  int emg_62_emg_param_2_1;
  #line 11504 
  long long *emg_62_emg_param_3_3;
  #line 11505 
  struct file *emg_62_resource_0;
  #line 11506 
  struct inode *emg_62_resource_1;
  #line 11507 
  int emg_62_ret;
  #line 11508 
  unsigned long emg_62_size_cnt;
  #line 11509 
  int emg_repeat_cnt_call_62 = 1;
  #line 11510 
  int emg_repeat_cnt_main_62_1 = 1;
  #line 11511 
  int emg_repeat_cnt_main_62_0 = 1;
  #line 11513 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 11517 
  emg_62_ret = ldv_undef_int();
  #line 11518 
  emg_62_container = emg_alias_radar_detection_ops;
  #line 11519 
  emg_62_ret = ldv_undef_int();
  #line 11521 
  __VERIFIER_assume(data->arg0 == emg_alias_radar_detection_ops);
  #line 11523 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 11524 
    emg_62_container = data->arg0;
    #line 11525 
    ldv_free((void *)data);
  }
  #line 11530 
  emg_62_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 11531 
  emg_62_size_cnt = (unsigned long)ldv_undef_int();
  #line 11535 
  goto emg_main_62;
  #line 11539 
  return (void *)0;
  #line 11542 
  emg_call_62: 
               #line 11542 
  ;
  #line 11543 
  if (ldv_undef_int() != 0) {
    #line 11544 
    if (ldv_undef_int() != 0) 
                              #line 11546 
                              default_llseek(emg_62_resource_0,emg_62_emg_param_1_0,emg_62_emg_param_2_1);
    else {
      #line 11555 
      __VERIFIER_assume(emg_62_size_cnt <= 2147479552UL);
      #line 11556 
      emg_62_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 11556 
      emg_62_emg_param_1_2 = emg_62_emg_param_1_2;
      #line 11557 
      emg_62_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 11557 
      emg_62_emg_param_3_3 = emg_62_emg_param_3_3;
      #line 11561 
      emg_wrapper_radar_detection_write(emg_62_resource_0,emg_62_emg_param_1_2,emg_62_size_cnt,emg_62_emg_param_3_3);
      #line 11565 
      ldv_free((void *)emg_62_emg_param_1_2);
      #line 11566 
      ldv_free((void *)emg_62_emg_param_3_3);
    }
    #line 11570 
    if (emg_repeat_cnt_call_62 > 0) {
      #line 11571 
      emg_repeat_cnt_call_62 --;
      #line 11573 
      goto emg_call_62;
    }
    else 
         #line 11575 
         __VERIFIER_assume(0);
  }
  else {
    #line 11581 
    if (emg_62_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 11582 
      (*(emg_62_container->release))(emg_62_resource_1,emg_62_resource_0);
    #line 11586 
    if (emg_repeat_cnt_main_62_0 > 0) {
      #line 11587 
      emg_repeat_cnt_main_62_0 --;
      #line 11589 
      goto emg_main_62;
    }
    else 
         #line 11591 
         __VERIFIER_assume(0);
  }
  #line 11597 
  return (void *)0;
  #line 11600 
  emg_main_62: 
               #line 11600 
  ;
  #line 11601 
  if (ldv_undef_int() != 0) {
    #line 11603 
    emg_62_ret = simple_open(emg_62_resource_1,emg_62_resource_0);
    #line 11608 
    emg_62_ret = ldv_filter_err_code(emg_62_ret);
    #line 11611 
    if (ldv_undef_int() != 0) {
      #line 11613 
      __VERIFIER_assume(emg_62_ret == 0);
      #line 11617 
      goto emg_call_62;
    }
    else {
      #line 11622 
      __VERIFIER_assume(emg_62_ret != 0);
      #line 11625 
      if (emg_repeat_cnt_main_62_1 > 0) {
        #line 11626 
        emg_repeat_cnt_main_62_1 --;
        #line 11628 
        goto emg_main_62;
      }
      else 
           #line 11630 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 11637 
       ldv_free((void *)emg_62_resource_0);
  #line 11645 
  return (void *)0;
}

#line 11650  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_roaming_rssi_level_ops(void *arg0)
{
  #line 11653 
  struct file_operations *emg_63_container;
  #line 11654 
  long long emg_63_emg_param_1_0;
  #line 11655 
  char *emg_63_emg_param_1_2;
  #line 11656 
  char *emg_63_emg_param_1_4;
  #line 11657 
  int emg_63_emg_param_2_1;
  #line 11658 
  long long *emg_63_emg_param_3_3;
  #line 11659 
  long long *emg_63_emg_param_3_5;
  #line 11660 
  struct file *emg_63_resource_0;
  #line 11661 
  struct inode *emg_63_resource_1;
  #line 11662 
  int emg_63_ret;
  #line 11663 
  unsigned long emg_63_size_cnt;
  #line 11664 
  int emg_repeat_cnt_call_63 = 1;
  #line 11665 
  int emg_repeat_cnt_main_63_0 = 1;
  #line 11666 
  int emg_repeat_cnt_main_63_1 = 1;
  #line 11668 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 11672 
  emg_63_ret = ldv_undef_int();
  #line 11673 
  emg_63_container = emg_alias_roaming_rssi_level_ops;
  #line 11674 
  emg_63_ret = ldv_undef_int();
  #line 11676 
  __VERIFIER_assume(data->arg0 == emg_alias_roaming_rssi_level_ops);
  #line 11678 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 11679 
    emg_63_container = data->arg0;
    #line 11680 
    ldv_free((void *)data);
  }
  #line 11685 
  emg_63_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 11686 
  emg_63_size_cnt = (unsigned long)ldv_undef_int();
  #line 11690 
  goto emg_main_63;
  #line 11694 
  return (void *)0;
  #line 11697 
  emg_call_63: 
               #line 11697 
  ;
  #line 11698 
  if (ldv_undef_int() != 0) {
    #line 11699 
    switch (ldv_undef_int()) {
      #line 11700 
      case 0: 
              #line 11700 
      ;
      #line 11702 
      emg_63_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 11702 
      emg_63_emg_param_1_2 = emg_63_emg_param_1_2;
      #line 11703 
      emg_63_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 11703 
      emg_63_emg_param_3_3 = emg_63_emg_param_3_3;
      #line 11707 
      emg_wrapper_roaming_rssi_level_read(emg_63_resource_0,emg_63_emg_param_1_2,emg_63_size_cnt,emg_63_emg_param_3_3);
      #line 11711 
      ldv_free((void *)emg_63_emg_param_1_2);
      #line 11712 
      ldv_free((void *)emg_63_emg_param_3_3);
      #line 11714 
      break;
      #line 11716 
      case 1: 
              #line 11716 
      ;
      #line 11718 
      generic_file_llseek(emg_63_resource_0,emg_63_emg_param_1_0,emg_63_emg_param_2_1);
      #line 11720 
      break;
      #line 11722 
      case 2: 
              #line 11722 
      ;
      #line 11729 
      __VERIFIER_assume(emg_63_size_cnt <= 2147479552UL);
      #line 11730 
      emg_63_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 11730 
      emg_63_emg_param_1_4 = emg_63_emg_param_1_4;
      #line 11731 
      emg_63_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 11731 
      emg_63_emg_param_3_5 = emg_63_emg_param_3_5;
      #line 11735 
      if (emg_63_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 11736 
        (*(emg_63_container->write))(emg_63_resource_0,emg_63_emg_param_1_4,emg_63_size_cnt,emg_63_emg_param_3_5);
      #line 11741 
      ldv_free((void *)emg_63_emg_param_1_4);
      #line 11742 
      ldv_free((void *)emg_63_emg_param_3_5);
      #line 11744 
      break;
      #line 11746 
      default: 
               #line 11746 
      ;
      #line 11746 
      __VERIFIER_assume(0);
    }
    #line 11749 
    if (emg_repeat_cnt_call_63 > 0) {
      #line 11750 
      emg_repeat_cnt_call_63 --;
      #line 11752 
      goto emg_call_63;
    }
    else 
         #line 11754 
         __VERIFIER_assume(0);
  }
  else {
    #line 11760 
    if (emg_63_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 11761 
      (*(emg_63_container->release))(emg_63_resource_1,emg_63_resource_0);
    #line 11765 
    if (emg_repeat_cnt_main_63_0 > 0) {
      #line 11766 
      emg_repeat_cnt_main_63_0 --;
      #line 11768 
      goto emg_main_63;
    }
    else 
         #line 11770 
         __VERIFIER_assume(0);
  }
  #line 11776 
  return (void *)0;
  #line 11779 
  emg_main_63: 
               #line 11779 
  ;
  #line 11780 
  if (ldv_undef_int() != 0) {
    #line 11782 
    emg_63_ret = simple_open(emg_63_resource_1,emg_63_resource_0);
    #line 11787 
    emg_63_ret = ldv_filter_err_code(emg_63_ret);
    #line 11790 
    if (ldv_undef_int() != 0) {
      #line 11792 
      __VERIFIER_assume(emg_63_ret == 0);
      #line 11796 
      goto emg_call_63;
    }
    else {
      #line 11801 
      __VERIFIER_assume(emg_63_ret != 0);
      #line 11804 
      if (emg_repeat_cnt_main_63_1 > 0) {
        #line 11805 
        emg_repeat_cnt_main_63_1 --;
        #line 11807 
        goto emg_main_63;
      }
      else 
           #line 11809 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 11816 
       ldv_free((void *)emg_63_resource_0);
  #line 11824 
  return (void *)0;
}

#line 11829  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_rx_decrypt_key_not_found_ops(void *arg0)
{
  #line 11832 
  struct file_operations *emg_64_container;
  #line 11833 
  long long emg_64_emg_param_1_0;
  #line 11834 
  char *emg_64_emg_param_1_2;
  #line 11835 
  char *emg_64_emg_param_1_4;
  #line 11836 
  int emg_64_emg_param_2_1;
  #line 11837 
  long long *emg_64_emg_param_3_3;
  #line 11838 
  long long *emg_64_emg_param_3_5;
  #line 11839 
  struct file *emg_64_resource_0;
  #line 11840 
  struct inode *emg_64_resource_1;
  #line 11841 
  int emg_64_ret;
  #line 11842 
  unsigned long emg_64_size_cnt;
  #line 11843 
  int emg_repeat_cnt_main_64_1 = 1;
  #line 11844 
  int emg_repeat_cnt_main_64_0 = 1;
  #line 11845 
  int emg_repeat_cnt_call_64 = 1;
  #line 11847 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 11851 
  emg_64_ret = ldv_undef_int();
  #line 11852 
  emg_64_container = emg_alias_rx_decrypt_key_not_found_ops;
  #line 11853 
  emg_64_ret = ldv_undef_int();
  #line 11855 
  __VERIFIER_assume(data->arg0 == emg_alias_rx_decrypt_key_not_found_ops);
  #line 11857 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 11858 
    emg_64_container = data->arg0;
    #line 11859 
    ldv_free((void *)data);
  }
  #line 11864 
  emg_64_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 11865 
  emg_64_size_cnt = (unsigned long)ldv_undef_int();
  #line 11869 
  goto emg_main_64;
  #line 11873 
  return (void *)0;
  #line 11876 
  emg_call_64: 
               #line 11876 
  ;
  #line 11877 
  if (ldv_undef_int() != 0) {
    #line 11878 
    switch (ldv_undef_int()) {
      #line 11879 
      case 0: 
              #line 11879 
      ;
      #line 11881 
      emg_64_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 11881 
      emg_64_emg_param_1_2 = emg_64_emg_param_1_2;
      #line 11882 
      emg_64_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 11882 
      emg_64_emg_param_3_3 = emg_64_emg_param_3_3;
      #line 11886 
      emg_wrapper_rx_decrypt_key_not_found_read(emg_64_resource_0,emg_64_emg_param_1_2,emg_64_size_cnt,emg_64_emg_param_3_3);
      #line 11890 
      ldv_free((void *)emg_64_emg_param_1_2);
      #line 11891 
      ldv_free((void *)emg_64_emg_param_3_3);
      #line 11893 
      break;
      #line 11895 
      case 1: 
              #line 11895 
      ;
      #line 11897 
      generic_file_llseek(emg_64_resource_0,emg_64_emg_param_1_0,emg_64_emg_param_2_1);
      #line 11899 
      break;
      #line 11901 
      case 2: 
              #line 11901 
      ;
      #line 11908 
      __VERIFIER_assume(emg_64_size_cnt <= 2147479552UL);
      #line 11909 
      emg_64_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 11909 
      emg_64_emg_param_1_4 = emg_64_emg_param_1_4;
      #line 11910 
      emg_64_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 11910 
      emg_64_emg_param_3_5 = emg_64_emg_param_3_5;
      #line 11914 
      if (emg_64_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 11915 
        (*(emg_64_container->write))(emg_64_resource_0,emg_64_emg_param_1_4,emg_64_size_cnt,emg_64_emg_param_3_5);
      #line 11920 
      ldv_free((void *)emg_64_emg_param_1_4);
      #line 11921 
      ldv_free((void *)emg_64_emg_param_3_5);
      #line 11923 
      break;
      #line 11925 
      default: 
               #line 11925 
      ;
      #line 11925 
      __VERIFIER_assume(0);
    }
    #line 11928 
    if (emg_repeat_cnt_call_64 > 0) {
      #line 11929 
      emg_repeat_cnt_call_64 --;
      #line 11931 
      goto emg_call_64;
    }
    else 
         #line 11933 
         __VERIFIER_assume(0);
  }
  else {
    #line 11939 
    if (emg_64_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 11940 
      (*(emg_64_container->release))(emg_64_resource_1,emg_64_resource_0);
    #line 11944 
    if (emg_repeat_cnt_main_64_0 > 0) {
      #line 11945 
      emg_repeat_cnt_main_64_0 --;
      #line 11947 
      goto emg_main_64;
    }
    else 
         #line 11949 
         __VERIFIER_assume(0);
  }
  #line 11955 
  return (void *)0;
  #line 11958 
  emg_main_64: 
               #line 11958 
  ;
  #line 11959 
  if (ldv_undef_int() != 0) {
    #line 11961 
    emg_64_ret = simple_open(emg_64_resource_1,emg_64_resource_0);
    #line 11966 
    emg_64_ret = ldv_filter_err_code(emg_64_ret);
    #line 11969 
    if (ldv_undef_int() != 0) {
      #line 11971 
      __VERIFIER_assume(emg_64_ret == 0);
      #line 11975 
      goto emg_call_64;
    }
    else {
      #line 11980 
      __VERIFIER_assume(emg_64_ret != 0);
      #line 11983 
      if (emg_repeat_cnt_main_64_1 > 0) {
        #line 11984 
        emg_repeat_cnt_main_64_1 --;
        #line 11986 
        goto emg_main_64;
      }
      else 
           #line 11988 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 11995 
       ldv_free((void *)emg_64_resource_0);
  #line 12003 
  return (void *)0;
}

#line 12008  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_rx_defrag_called_ops(void *arg0)
{
  #line 12011 
  struct file_operations *emg_65_container;
  #line 12012 
  long long emg_65_emg_param_1_0;
  #line 12013 
  char *emg_65_emg_param_1_2;
  #line 12014 
  char *emg_65_emg_param_1_4;
  #line 12015 
  int emg_65_emg_param_2_1;
  #line 12016 
  long long *emg_65_emg_param_3_3;
  #line 12017 
  long long *emg_65_emg_param_3_5;
  #line 12018 
  struct file *emg_65_resource_0;
  #line 12019 
  struct inode *emg_65_resource_1;
  #line 12020 
  int emg_65_ret;
  #line 12021 
  unsigned long emg_65_size_cnt;
  #line 12022 
  int emg_repeat_cnt_main_65_1 = 1;
  #line 12023 
  int emg_repeat_cnt_call_65 = 1;
  #line 12024 
  int emg_repeat_cnt_main_65_0 = 1;
  #line 12026 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 12030 
  emg_65_ret = ldv_undef_int();
  #line 12031 
  emg_65_container = emg_alias_rx_defrag_called_ops;
  #line 12032 
  emg_65_ret = ldv_undef_int();
  #line 12034 
  __VERIFIER_assume(data->arg0 == emg_alias_rx_defrag_called_ops);
  #line 12036 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 12037 
    emg_65_container = data->arg0;
    #line 12038 
    ldv_free((void *)data);
  }
  #line 12043 
  emg_65_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 12044 
  emg_65_size_cnt = (unsigned long)ldv_undef_int();
  #line 12048 
  goto emg_main_65;
  #line 12052 
  return (void *)0;
  #line 12055 
  emg_call_65: 
               #line 12055 
  ;
  #line 12056 
  if (ldv_undef_int() != 0) {
    #line 12057 
    switch (ldv_undef_int()) {
      #line 12058 
      case 0: 
              #line 12058 
      ;
      #line 12060 
      emg_65_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 12060 
      emg_65_emg_param_1_2 = emg_65_emg_param_1_2;
      #line 12061 
      emg_65_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 12061 
      emg_65_emg_param_3_3 = emg_65_emg_param_3_3;
      #line 12065 
      emg_wrapper_rx_defrag_called_read(emg_65_resource_0,emg_65_emg_param_1_2,emg_65_size_cnt,emg_65_emg_param_3_3);
      #line 12069 
      ldv_free((void *)emg_65_emg_param_1_2);
      #line 12070 
      ldv_free((void *)emg_65_emg_param_3_3);
      #line 12072 
      break;
      #line 12074 
      case 1: 
              #line 12074 
      ;
      #line 12076 
      generic_file_llseek(emg_65_resource_0,emg_65_emg_param_1_0,emg_65_emg_param_2_1);
      #line 12078 
      break;
      #line 12080 
      case 2: 
              #line 12080 
      ;
      #line 12087 
      __VERIFIER_assume(emg_65_size_cnt <= 2147479552UL);
      #line 12088 
      emg_65_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 12088 
      emg_65_emg_param_1_4 = emg_65_emg_param_1_4;
      #line 12089 
      emg_65_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 12089 
      emg_65_emg_param_3_5 = emg_65_emg_param_3_5;
      #line 12093 
      if (emg_65_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 12094 
        (*(emg_65_container->write))(emg_65_resource_0,emg_65_emg_param_1_4,emg_65_size_cnt,emg_65_emg_param_3_5);
      #line 12099 
      ldv_free((void *)emg_65_emg_param_1_4);
      #line 12100 
      ldv_free((void *)emg_65_emg_param_3_5);
      #line 12102 
      break;
      #line 12104 
      default: 
               #line 12104 
      ;
      #line 12104 
      __VERIFIER_assume(0);
    }
    #line 12107 
    if (emg_repeat_cnt_call_65 > 0) {
      #line 12108 
      emg_repeat_cnt_call_65 --;
      #line 12110 
      goto emg_call_65;
    }
    else 
         #line 12112 
         __VERIFIER_assume(0);
  }
  else {
    #line 12118 
    if (emg_65_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 12119 
      (*(emg_65_container->release))(emg_65_resource_1,emg_65_resource_0);
    #line 12123 
    if (emg_repeat_cnt_main_65_0 > 0) {
      #line 12124 
      emg_repeat_cnt_main_65_0 --;
      #line 12126 
      goto emg_main_65;
    }
    else 
         #line 12128 
         __VERIFIER_assume(0);
  }
  #line 12134 
  return (void *)0;
  #line 12137 
  emg_main_65: 
               #line 12137 
  ;
  #line 12138 
  if (ldv_undef_int() != 0) {
    #line 12140 
    emg_65_ret = simple_open(emg_65_resource_1,emg_65_resource_0);
    #line 12145 
    emg_65_ret = ldv_filter_err_code(emg_65_ret);
    #line 12148 
    if (ldv_undef_int() != 0) {
      #line 12150 
      __VERIFIER_assume(emg_65_ret == 0);
      #line 12154 
      goto emg_call_65;
    }
    else {
      #line 12159 
      __VERIFIER_assume(emg_65_ret != 0);
      #line 12162 
      if (emg_repeat_cnt_main_65_1 > 0) {
        #line 12163 
        emg_repeat_cnt_main_65_1 --;
        #line 12165 
        goto emg_main_65;
      }
      else 
           #line 12167 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 12174 
       ldv_free((void *)emg_65_resource_0);
  #line 12182 
  return (void *)0;
}

#line 12187  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_rx_defrag_decrypt_failed_ops(void *arg0)
{
  #line 12190 
  struct file_operations *emg_66_container;
  #line 12191 
  long long emg_66_emg_param_1_0;
  #line 12192 
  char *emg_66_emg_param_1_2;
  #line 12193 
  char *emg_66_emg_param_1_4;
  #line 12194 
  int emg_66_emg_param_2_1;
  #line 12195 
  long long *emg_66_emg_param_3_3;
  #line 12196 
  long long *emg_66_emg_param_3_5;
  #line 12197 
  struct file *emg_66_resource_0;
  #line 12198 
  struct inode *emg_66_resource_1;
  #line 12199 
  int emg_66_ret;
  #line 12200 
  unsigned long emg_66_size_cnt;
  #line 12201 
  int emg_repeat_cnt_main_66_0 = 1;
  #line 12202 
  int emg_repeat_cnt_call_66 = 1;
  #line 12203 
  int emg_repeat_cnt_main_66_1 = 1;
  #line 12205 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 12209 
  emg_66_ret = ldv_undef_int();
  #line 12210 
  emg_66_container = emg_alias_rx_defrag_decrypt_failed_ops;
  #line 12211 
  emg_66_ret = ldv_undef_int();
  #line 12213 
  __VERIFIER_assume(data->arg0 == emg_alias_rx_defrag_decrypt_failed_ops);
  #line 12215 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 12216 
    emg_66_container = data->arg0;
    #line 12217 
    ldv_free((void *)data);
  }
  #line 12222 
  emg_66_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 12223 
  emg_66_size_cnt = (unsigned long)ldv_undef_int();
  #line 12227 
  goto emg_main_66;
  #line 12231 
  return (void *)0;
  #line 12234 
  emg_call_66: 
               #line 12234 
  ;
  #line 12235 
  if (ldv_undef_int() != 0) {
    #line 12236 
    switch (ldv_undef_int()) {
      #line 12237 
      case 0: 
              #line 12237 
      ;
      #line 12239 
      emg_66_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 12239 
      emg_66_emg_param_1_2 = emg_66_emg_param_1_2;
      #line 12240 
      emg_66_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 12240 
      emg_66_emg_param_3_3 = emg_66_emg_param_3_3;
      #line 12244 
      emg_wrapper_rx_defrag_decrypt_failed_read(emg_66_resource_0,emg_66_emg_param_1_2,emg_66_size_cnt,emg_66_emg_param_3_3);
      #line 12248 
      ldv_free((void *)emg_66_emg_param_1_2);
      #line 12249 
      ldv_free((void *)emg_66_emg_param_3_3);
      #line 12251 
      break;
      #line 12253 
      case 1: 
              #line 12253 
      ;
      #line 12255 
      generic_file_llseek(emg_66_resource_0,emg_66_emg_param_1_0,emg_66_emg_param_2_1);
      #line 12257 
      break;
      #line 12259 
      case 2: 
              #line 12259 
      ;
      #line 12266 
      __VERIFIER_assume(emg_66_size_cnt <= 2147479552UL);
      #line 12267 
      emg_66_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 12267 
      emg_66_emg_param_1_4 = emg_66_emg_param_1_4;
      #line 12268 
      emg_66_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 12268 
      emg_66_emg_param_3_5 = emg_66_emg_param_3_5;
      #line 12272 
      if (emg_66_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 12273 
        (*(emg_66_container->write))(emg_66_resource_0,emg_66_emg_param_1_4,emg_66_size_cnt,emg_66_emg_param_3_5);
      #line 12278 
      ldv_free((void *)emg_66_emg_param_1_4);
      #line 12279 
      ldv_free((void *)emg_66_emg_param_3_5);
      #line 12281 
      break;
      #line 12283 
      default: 
               #line 12283 
      ;
      #line 12283 
      __VERIFIER_assume(0);
    }
    #line 12286 
    if (emg_repeat_cnt_call_66 > 0) {
      #line 12287 
      emg_repeat_cnt_call_66 --;
      #line 12289 
      goto emg_call_66;
    }
    else 
         #line 12291 
         __VERIFIER_assume(0);
  }
  else {
    #line 12297 
    if (emg_66_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 12298 
      (*(emg_66_container->release))(emg_66_resource_1,emg_66_resource_0);
    #line 12302 
    if (emg_repeat_cnt_main_66_1 > 0) {
      #line 12303 
      emg_repeat_cnt_main_66_1 --;
      #line 12305 
      goto emg_main_66;
    }
    else 
         #line 12307 
         __VERIFIER_assume(0);
  }
  #line 12313 
  return (void *)0;
  #line 12316 
  emg_main_66: 
               #line 12316 
  ;
  #line 12317 
  if (ldv_undef_int() != 0) {
    #line 12319 
    emg_66_ret = simple_open(emg_66_resource_1,emg_66_resource_0);
    #line 12324 
    emg_66_ret = ldv_filter_err_code(emg_66_ret);
    #line 12327 
    if (ldv_undef_int() != 0) {
      #line 12329 
      __VERIFIER_assume(emg_66_ret == 0);
      #line 12333 
      goto emg_call_66;
    }
    else {
      #line 12338 
      __VERIFIER_assume(emg_66_ret != 0);
      #line 12341 
      if (emg_repeat_cnt_main_66_0 > 0) {
        #line 12342 
        emg_repeat_cnt_main_66_0 --;
        #line 12344 
        goto emg_main_66;
      }
      else 
           #line 12346 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 12353 
       ldv_free((void *)emg_66_resource_0);
  #line 12361 
  return (void *)0;
}

#line 12366  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_rx_defrag_in_process_called_ops(void *arg0)
{
  #line 12369 
  struct file_operations *emg_67_container;
  #line 12370 
  long long emg_67_emg_param_1_0;
  #line 12371 
  char *emg_67_emg_param_1_2;
  #line 12372 
  char *emg_67_emg_param_1_4;
  #line 12373 
  int emg_67_emg_param_2_1;
  #line 12374 
  long long *emg_67_emg_param_3_3;
  #line 12375 
  long long *emg_67_emg_param_3_5;
  #line 12376 
  struct file *emg_67_resource_0;
  #line 12377 
  struct inode *emg_67_resource_1;
  #line 12378 
  int emg_67_ret;
  #line 12379 
  unsigned long emg_67_size_cnt;
  #line 12380 
  int emg_repeat_cnt_call_67 = 1;
  #line 12381 
  int emg_repeat_cnt_main_67_0 = 1;
  #line 12382 
  int emg_repeat_cnt_main_67_1 = 1;
  #line 12384 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 12388 
  emg_67_ret = ldv_undef_int();
  #line 12389 
  emg_67_container = emg_alias_rx_defrag_in_process_called_ops;
  #line 12390 
  emg_67_ret = ldv_undef_int();
  #line 12392 
  __VERIFIER_assume(data->arg0 == emg_alias_rx_defrag_in_process_called_ops);
  #line 12394 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 12395 
    emg_67_container = data->arg0;
    #line 12396 
    ldv_free((void *)data);
  }
  #line 12401 
  emg_67_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 12402 
  emg_67_size_cnt = (unsigned long)ldv_undef_int();
  #line 12406 
  goto emg_main_67;
  #line 12410 
  return (void *)0;
  #line 12413 
  emg_call_67: 
               #line 12413 
  ;
  #line 12414 
  if (ldv_undef_int() != 0) {
    #line 12415 
    switch (ldv_undef_int()) {
      #line 12416 
      case 0: 
              #line 12416 
      ;
      #line 12418 
      emg_67_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 12418 
      emg_67_emg_param_1_2 = emg_67_emg_param_1_2;
      #line 12419 
      emg_67_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 12419 
      emg_67_emg_param_3_3 = emg_67_emg_param_3_3;
      #line 12423 
      emg_wrapper_rx_defrag_in_process_called_read(emg_67_resource_0,emg_67_emg_param_1_2,emg_67_size_cnt,emg_67_emg_param_3_3);
      #line 12427 
      ldv_free((void *)emg_67_emg_param_1_2);
      #line 12428 
      ldv_free((void *)emg_67_emg_param_3_3);
      #line 12430 
      break;
      #line 12432 
      case 1: 
              #line 12432 
      ;
      #line 12434 
      generic_file_llseek(emg_67_resource_0,emg_67_emg_param_1_0,emg_67_emg_param_2_1);
      #line 12436 
      break;
      #line 12438 
      case 2: 
              #line 12438 
      ;
      #line 12445 
      __VERIFIER_assume(emg_67_size_cnt <= 2147479552UL);
      #line 12446 
      emg_67_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 12446 
      emg_67_emg_param_1_4 = emg_67_emg_param_1_4;
      #line 12447 
      emg_67_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 12447 
      emg_67_emg_param_3_5 = emg_67_emg_param_3_5;
      #line 12451 
      if (emg_67_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 12452 
        (*(emg_67_container->write))(emg_67_resource_0,emg_67_emg_param_1_4,emg_67_size_cnt,emg_67_emg_param_3_5);
      #line 12457 
      ldv_free((void *)emg_67_emg_param_1_4);
      #line 12458 
      ldv_free((void *)emg_67_emg_param_3_5);
      #line 12460 
      break;
      #line 12462 
      default: 
               #line 12462 
      ;
      #line 12462 
      __VERIFIER_assume(0);
    }
    #line 12465 
    if (emg_repeat_cnt_call_67 > 0) {
      #line 12466 
      emg_repeat_cnt_call_67 --;
      #line 12468 
      goto emg_call_67;
    }
    else 
         #line 12470 
         __VERIFIER_assume(0);
  }
  else {
    #line 12476 
    if (emg_67_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 12477 
      (*(emg_67_container->release))(emg_67_resource_1,emg_67_resource_0);
    #line 12481 
    if (emg_repeat_cnt_main_67_0 > 0) {
      #line 12482 
      emg_repeat_cnt_main_67_0 --;
      #line 12484 
      goto emg_main_67;
    }
    else 
         #line 12486 
         __VERIFIER_assume(0);
  }
  #line 12492 
  return (void *)0;
  #line 12495 
  emg_main_67: 
               #line 12495 
  ;
  #line 12496 
  if (ldv_undef_int() != 0) {
    #line 12498 
    emg_67_ret = simple_open(emg_67_resource_1,emg_67_resource_0);
    #line 12503 
    emg_67_ret = ldv_filter_err_code(emg_67_ret);
    #line 12506 
    if (ldv_undef_int() != 0) {
      #line 12508 
      __VERIFIER_assume(emg_67_ret == 0);
      #line 12512 
      goto emg_call_67;
    }
    else {
      #line 12517 
      __VERIFIER_assume(emg_67_ret != 0);
      #line 12520 
      if (emg_repeat_cnt_main_67_1 > 0) {
        #line 12521 
        emg_repeat_cnt_main_67_1 --;
        #line 12523 
        goto emg_main_67;
      }
      else 
           #line 12525 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 12532 
       ldv_free((void *)emg_67_resource_0);
  #line 12540 
  return (void *)0;
}

#line 12545  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_rx_defrag_init_called_ops(void *arg0)
{
  #line 12548 
  struct file_operations *emg_68_container;
  #line 12549 
  long long emg_68_emg_param_1_0;
  #line 12550 
  char *emg_68_emg_param_1_2;
  #line 12551 
  char *emg_68_emg_param_1_4;
  #line 12552 
  int emg_68_emg_param_2_1;
  #line 12553 
  long long *emg_68_emg_param_3_3;
  #line 12554 
  long long *emg_68_emg_param_3_5;
  #line 12555 
  struct file *emg_68_resource_0;
  #line 12556 
  struct inode *emg_68_resource_1;
  #line 12557 
  int emg_68_ret;
  #line 12558 
  unsigned long emg_68_size_cnt;
  #line 12559 
  int emg_repeat_cnt_main_68_1 = 1;
  #line 12560 
  int emg_repeat_cnt_call_68 = 1;
  #line 12561 
  int emg_repeat_cnt_main_68_0 = 1;
  #line 12563 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 12567 
  emg_68_ret = ldv_undef_int();
  #line 12568 
  emg_68_container = emg_alias_rx_defrag_init_called_ops;
  #line 12569 
  emg_68_ret = ldv_undef_int();
  #line 12571 
  __VERIFIER_assume(data->arg0 == emg_alias_rx_defrag_init_called_ops);
  #line 12573 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 12574 
    emg_68_container = data->arg0;
    #line 12575 
    ldv_free((void *)data);
  }
  #line 12580 
  emg_68_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 12581 
  emg_68_size_cnt = (unsigned long)ldv_undef_int();
  #line 12585 
  goto emg_main_68;
  #line 12589 
  return (void *)0;
  #line 12592 
  emg_call_68: 
               #line 12592 
  ;
  #line 12593 
  if (ldv_undef_int() != 0) {
    #line 12594 
    switch (ldv_undef_int()) {
      #line 12595 
      case 0: 
              #line 12595 
      ;
      #line 12597 
      emg_68_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 12597 
      emg_68_emg_param_1_2 = emg_68_emg_param_1_2;
      #line 12598 
      emg_68_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 12598 
      emg_68_emg_param_3_3 = emg_68_emg_param_3_3;
      #line 12602 
      emg_wrapper_rx_defrag_init_called_read(emg_68_resource_0,emg_68_emg_param_1_2,emg_68_size_cnt,emg_68_emg_param_3_3);
      #line 12606 
      ldv_free((void *)emg_68_emg_param_1_2);
      #line 12607 
      ldv_free((void *)emg_68_emg_param_3_3);
      #line 12609 
      break;
      #line 12611 
      case 1: 
              #line 12611 
      ;
      #line 12613 
      generic_file_llseek(emg_68_resource_0,emg_68_emg_param_1_0,emg_68_emg_param_2_1);
      #line 12615 
      break;
      #line 12617 
      case 2: 
              #line 12617 
      ;
      #line 12624 
      __VERIFIER_assume(emg_68_size_cnt <= 2147479552UL);
      #line 12625 
      emg_68_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 12625 
      emg_68_emg_param_1_4 = emg_68_emg_param_1_4;
      #line 12626 
      emg_68_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 12626 
      emg_68_emg_param_3_5 = emg_68_emg_param_3_5;
      #line 12630 
      if (emg_68_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 12631 
        (*(emg_68_container->write))(emg_68_resource_0,emg_68_emg_param_1_4,emg_68_size_cnt,emg_68_emg_param_3_5);
      #line 12636 
      ldv_free((void *)emg_68_emg_param_1_4);
      #line 12637 
      ldv_free((void *)emg_68_emg_param_3_5);
      #line 12639 
      break;
      #line 12641 
      default: 
               #line 12641 
      ;
      #line 12641 
      __VERIFIER_assume(0);
    }
    #line 12644 
    if (emg_repeat_cnt_call_68 > 0) {
      #line 12645 
      emg_repeat_cnt_call_68 --;
      #line 12647 
      goto emg_call_68;
    }
    else 
         #line 12649 
         __VERIFIER_assume(0);
  }
  else {
    #line 12655 
    if (emg_68_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 12656 
      (*(emg_68_container->release))(emg_68_resource_1,emg_68_resource_0);
    #line 12660 
    if (emg_repeat_cnt_main_68_0 > 0) {
      #line 12661 
      emg_repeat_cnt_main_68_0 --;
      #line 12663 
      goto emg_main_68;
    }
    else 
         #line 12665 
         __VERIFIER_assume(0);
  }
  #line 12671 
  return (void *)0;
  #line 12674 
  emg_main_68: 
               #line 12674 
  ;
  #line 12675 
  if (ldv_undef_int() != 0) {
    #line 12677 
    emg_68_ret = simple_open(emg_68_resource_1,emg_68_resource_0);
    #line 12682 
    emg_68_ret = ldv_filter_err_code(emg_68_ret);
    #line 12685 
    if (ldv_undef_int() != 0) {
      #line 12687 
      __VERIFIER_assume(emg_68_ret == 0);
      #line 12691 
      goto emg_call_68;
    }
    else {
      #line 12696 
      __VERIFIER_assume(emg_68_ret != 0);
      #line 12699 
      if (emg_repeat_cnt_main_68_1 > 0) {
        #line 12700 
        emg_repeat_cnt_main_68_1 --;
        #line 12702 
        goto emg_main_68;
      }
      else 
           #line 12704 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 12711 
       ldv_free((void *)emg_68_resource_0);
  #line 12719 
  return (void *)0;
}

#line 12724  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_rx_defrag_need_decrypt_ops(void *arg0)
{
  #line 12727 
  struct file_operations *emg_69_container;
  #line 12728 
  long long emg_69_emg_param_1_0;
  #line 12729 
  char *emg_69_emg_param_1_2;
  #line 12730 
  char *emg_69_emg_param_1_4;
  #line 12731 
  int emg_69_emg_param_2_1;
  #line 12732 
  long long *emg_69_emg_param_3_3;
  #line 12733 
  long long *emg_69_emg_param_3_5;
  #line 12734 
  struct file *emg_69_resource_0;
  #line 12735 
  struct inode *emg_69_resource_1;
  #line 12736 
  int emg_69_ret;
  #line 12737 
  unsigned long emg_69_size_cnt;
  #line 12738 
  int emg_repeat_cnt_main_69_1 = 1;
  #line 12739 
  int emg_repeat_cnt_call_69 = 1;
  #line 12740 
  int emg_repeat_cnt_main_69_0 = 1;
  #line 12742 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 12746 
  emg_69_ret = ldv_undef_int();
  #line 12747 
  emg_69_container = emg_alias_rx_defrag_need_decrypt_ops;
  #line 12748 
  emg_69_ret = ldv_undef_int();
  #line 12750 
  __VERIFIER_assume(data->arg0 == emg_alias_rx_defrag_need_decrypt_ops);
  #line 12752 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 12753 
    emg_69_container = data->arg0;
    #line 12754 
    ldv_free((void *)data);
  }
  #line 12759 
  emg_69_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 12760 
  emg_69_size_cnt = (unsigned long)ldv_undef_int();
  #line 12764 
  goto emg_main_69;
  #line 12768 
  return (void *)0;
  #line 12771 
  emg_call_69: 
               #line 12771 
  ;
  #line 12772 
  if (ldv_undef_int() != 0) {
    #line 12773 
    switch (ldv_undef_int()) {
      #line 12774 
      case 0: 
              #line 12774 
      ;
      #line 12776 
      emg_69_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 12776 
      emg_69_emg_param_1_2 = emg_69_emg_param_1_2;
      #line 12777 
      emg_69_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 12777 
      emg_69_emg_param_3_3 = emg_69_emg_param_3_3;
      #line 12781 
      emg_wrapper_rx_defrag_need_decrypt_read(emg_69_resource_0,emg_69_emg_param_1_2,emg_69_size_cnt,emg_69_emg_param_3_3);
      #line 12785 
      ldv_free((void *)emg_69_emg_param_1_2);
      #line 12786 
      ldv_free((void *)emg_69_emg_param_3_3);
      #line 12788 
      break;
      #line 12790 
      case 1: 
              #line 12790 
      ;
      #line 12792 
      generic_file_llseek(emg_69_resource_0,emg_69_emg_param_1_0,emg_69_emg_param_2_1);
      #line 12794 
      break;
      #line 12796 
      case 2: 
              #line 12796 
      ;
      #line 12803 
      __VERIFIER_assume(emg_69_size_cnt <= 2147479552UL);
      #line 12804 
      emg_69_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 12804 
      emg_69_emg_param_1_4 = emg_69_emg_param_1_4;
      #line 12805 
      emg_69_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 12805 
      emg_69_emg_param_3_5 = emg_69_emg_param_3_5;
      #line 12809 
      if (emg_69_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 12810 
        (*(emg_69_container->write))(emg_69_resource_0,emg_69_emg_param_1_4,emg_69_size_cnt,emg_69_emg_param_3_5);
      #line 12815 
      ldv_free((void *)emg_69_emg_param_1_4);
      #line 12816 
      ldv_free((void *)emg_69_emg_param_3_5);
      #line 12818 
      break;
      #line 12820 
      default: 
               #line 12820 
      ;
      #line 12820 
      __VERIFIER_assume(0);
    }
    #line 12823 
    if (emg_repeat_cnt_call_69 > 0) {
      #line 12824 
      emg_repeat_cnt_call_69 --;
      #line 12826 
      goto emg_call_69;
    }
    else 
         #line 12828 
         __VERIFIER_assume(0);
  }
  else {
    #line 12834 
    if (emg_69_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 12835 
      (*(emg_69_container->release))(emg_69_resource_1,emg_69_resource_0);
    #line 12839 
    if (emg_repeat_cnt_main_69_1 > 0) {
      #line 12840 
      emg_repeat_cnt_main_69_1 --;
      #line 12842 
      goto emg_main_69;
    }
    else 
         #line 12844 
         __VERIFIER_assume(0);
  }
  #line 12850 
  return (void *)0;
  #line 12853 
  emg_main_69: 
               #line 12853 
  ;
  #line 12854 
  if (ldv_undef_int() != 0) {
    #line 12856 
    emg_69_ret = simple_open(emg_69_resource_1,emg_69_resource_0);
    #line 12861 
    emg_69_ret = ldv_filter_err_code(emg_69_ret);
    #line 12864 
    if (ldv_undef_int() != 0) {
      #line 12866 
      __VERIFIER_assume(emg_69_ret == 0);
      #line 12870 
      goto emg_call_69;
    }
    else {
      #line 12875 
      __VERIFIER_assume(emg_69_ret != 0);
      #line 12878 
      if (emg_repeat_cnt_main_69_0 > 0) {
        #line 12879 
        emg_repeat_cnt_main_69_0 --;
        #line 12881 
        goto emg_main_69;
      }
      else 
           #line 12883 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 12890 
       ldv_free((void *)emg_69_resource_0);
  #line 12898 
  return (void *)0;
}

#line 12903  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_rx_defrag_need_defrag_ops(void *arg0)
{
  #line 12906 
  struct file_operations *emg_70_container;
  #line 12907 
  long long emg_70_emg_param_1_0;
  #line 12908 
  char *emg_70_emg_param_1_2;
  #line 12909 
  char *emg_70_emg_param_1_4;
  #line 12910 
  int emg_70_emg_param_2_1;
  #line 12911 
  long long *emg_70_emg_param_3_3;
  #line 12912 
  long long *emg_70_emg_param_3_5;
  #line 12913 
  struct file *emg_70_resource_0;
  #line 12914 
  struct inode *emg_70_resource_1;
  #line 12915 
  int emg_70_ret;
  #line 12916 
  unsigned long emg_70_size_cnt;
  #line 12917 
  int emg_repeat_cnt_main_70_1 = 1;
  #line 12918 
  int emg_repeat_cnt_call_70 = 1;
  #line 12919 
  int emg_repeat_cnt_main_70_0 = 1;
  #line 12921 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 12925 
  emg_70_ret = ldv_undef_int();
  #line 12926 
  emg_70_container = emg_alias_rx_defrag_need_defrag_ops;
  #line 12927 
  emg_70_ret = ldv_undef_int();
  #line 12929 
  __VERIFIER_assume(data->arg0 == emg_alias_rx_defrag_need_defrag_ops);
  #line 12931 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 12932 
    emg_70_container = data->arg0;
    #line 12933 
    ldv_free((void *)data);
  }
  #line 12938 
  emg_70_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 12939 
  emg_70_size_cnt = (unsigned long)ldv_undef_int();
  #line 12943 
  goto emg_main_70;
  #line 12947 
  return (void *)0;
  #line 12950 
  emg_call_70: 
               #line 12950 
  ;
  #line 12951 
  if (ldv_undef_int() != 0) {
    #line 12952 
    switch (ldv_undef_int()) {
      #line 12953 
      case 0: 
              #line 12953 
      ;
      #line 12955 
      emg_70_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 12955 
      emg_70_emg_param_1_2 = emg_70_emg_param_1_2;
      #line 12956 
      emg_70_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 12956 
      emg_70_emg_param_3_3 = emg_70_emg_param_3_3;
      #line 12960 
      emg_wrapper_rx_defrag_need_defrag_read(emg_70_resource_0,emg_70_emg_param_1_2,emg_70_size_cnt,emg_70_emg_param_3_3);
      #line 12964 
      ldv_free((void *)emg_70_emg_param_1_2);
      #line 12965 
      ldv_free((void *)emg_70_emg_param_3_3);
      #line 12967 
      break;
      #line 12969 
      case 1: 
              #line 12969 
      ;
      #line 12971 
      generic_file_llseek(emg_70_resource_0,emg_70_emg_param_1_0,emg_70_emg_param_2_1);
      #line 12973 
      break;
      #line 12975 
      case 2: 
              #line 12975 
      ;
      #line 12982 
      __VERIFIER_assume(emg_70_size_cnt <= 2147479552UL);
      #line 12983 
      emg_70_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 12983 
      emg_70_emg_param_1_4 = emg_70_emg_param_1_4;
      #line 12984 
      emg_70_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 12984 
      emg_70_emg_param_3_5 = emg_70_emg_param_3_5;
      #line 12988 
      if (emg_70_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 12989 
        (*(emg_70_container->write))(emg_70_resource_0,emg_70_emg_param_1_4,emg_70_size_cnt,emg_70_emg_param_3_5);
      #line 12994 
      ldv_free((void *)emg_70_emg_param_1_4);
      #line 12995 
      ldv_free((void *)emg_70_emg_param_3_5);
      #line 12997 
      break;
      #line 12999 
      default: 
               #line 12999 
      ;
      #line 12999 
      __VERIFIER_assume(0);
    }
    #line 13002 
    if (emg_repeat_cnt_call_70 > 0) {
      #line 13003 
      emg_repeat_cnt_call_70 --;
      #line 13005 
      goto emg_call_70;
    }
    else 
         #line 13007 
         __VERIFIER_assume(0);
  }
  else {
    #line 13013 
    if (emg_70_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 13014 
      (*(emg_70_container->release))(emg_70_resource_1,emg_70_resource_0);
    #line 13018 
    if (emg_repeat_cnt_main_70_0 > 0) {
      #line 13019 
      emg_repeat_cnt_main_70_0 --;
      #line 13021 
      goto emg_main_70;
    }
    else 
         #line 13023 
         __VERIFIER_assume(0);
  }
  #line 13029 
  return (void *)0;
  #line 13032 
  emg_main_70: 
               #line 13032 
  ;
  #line 13033 
  if (ldv_undef_int() != 0) {
    #line 13035 
    emg_70_ret = simple_open(emg_70_resource_1,emg_70_resource_0);
    #line 13040 
    emg_70_ret = ldv_filter_err_code(emg_70_ret);
    #line 13043 
    if (ldv_undef_int() != 0) {
      #line 13045 
      __VERIFIER_assume(emg_70_ret == 0);
      #line 13049 
      goto emg_call_70;
    }
    else {
      #line 13054 
      __VERIFIER_assume(emg_70_ret != 0);
      #line 13057 
      if (emg_repeat_cnt_main_70_1 > 0) {
        #line 13058 
        emg_repeat_cnt_main_70_1 --;
        #line 13060 
        goto emg_main_70;
      }
      else 
           #line 13062 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 13069 
       ldv_free((void *)emg_70_resource_0);
  #line 13077 
  return (void *)0;
}

#line 13082  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_rx_defrag_tkip_called_ops(void *arg0)
{
  #line 13085 
  struct file_operations *emg_71_container;
  #line 13086 
  long long emg_71_emg_param_1_0;
  #line 13087 
  char *emg_71_emg_param_1_2;
  #line 13088 
  char *emg_71_emg_param_1_4;
  #line 13089 
  int emg_71_emg_param_2_1;
  #line 13090 
  long long *emg_71_emg_param_3_3;
  #line 13091 
  long long *emg_71_emg_param_3_5;
  #line 13092 
  struct file *emg_71_resource_0;
  #line 13093 
  struct inode *emg_71_resource_1;
  #line 13094 
  int emg_71_ret;
  #line 13095 
  unsigned long emg_71_size_cnt;
  #line 13096 
  int emg_repeat_cnt_main_71_0 = 1;
  #line 13097 
  int emg_repeat_cnt_call_71 = 1;
  #line 13098 
  int emg_repeat_cnt_main_71_1 = 1;
  #line 13100 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 13104 
  emg_71_ret = ldv_undef_int();
  #line 13105 
  emg_71_container = emg_alias_rx_defrag_tkip_called_ops;
  #line 13106 
  emg_71_ret = ldv_undef_int();
  #line 13108 
  __VERIFIER_assume(data->arg0 == emg_alias_rx_defrag_tkip_called_ops);
  #line 13110 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 13111 
    emg_71_container = data->arg0;
    #line 13112 
    ldv_free((void *)data);
  }
  #line 13117 
  emg_71_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 13118 
  emg_71_size_cnt = (unsigned long)ldv_undef_int();
  #line 13122 
  goto emg_main_71;
  #line 13126 
  return (void *)0;
  #line 13129 
  emg_call_71: 
               #line 13129 
  ;
  #line 13130 
  if (ldv_undef_int() != 0) {
    #line 13131 
    switch (ldv_undef_int()) {
      #line 13132 
      case 0: 
              #line 13132 
      ;
      #line 13134 
      emg_71_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 13134 
      emg_71_emg_param_1_2 = emg_71_emg_param_1_2;
      #line 13135 
      emg_71_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 13135 
      emg_71_emg_param_3_3 = emg_71_emg_param_3_3;
      #line 13139 
      emg_wrapper_rx_defrag_tkip_called_read(emg_71_resource_0,emg_71_emg_param_1_2,emg_71_size_cnt,emg_71_emg_param_3_3);
      #line 13143 
      ldv_free((void *)emg_71_emg_param_1_2);
      #line 13144 
      ldv_free((void *)emg_71_emg_param_3_3);
      #line 13146 
      break;
      #line 13148 
      case 1: 
              #line 13148 
      ;
      #line 13150 
      generic_file_llseek(emg_71_resource_0,emg_71_emg_param_1_0,emg_71_emg_param_2_1);
      #line 13152 
      break;
      #line 13154 
      case 2: 
              #line 13154 
      ;
      #line 13161 
      __VERIFIER_assume(emg_71_size_cnt <= 2147479552UL);
      #line 13162 
      emg_71_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 13162 
      emg_71_emg_param_1_4 = emg_71_emg_param_1_4;
      #line 13163 
      emg_71_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 13163 
      emg_71_emg_param_3_5 = emg_71_emg_param_3_5;
      #line 13167 
      if (emg_71_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 13168 
        (*(emg_71_container->write))(emg_71_resource_0,emg_71_emg_param_1_4,emg_71_size_cnt,emg_71_emg_param_3_5);
      #line 13173 
      ldv_free((void *)emg_71_emg_param_1_4);
      #line 13174 
      ldv_free((void *)emg_71_emg_param_3_5);
      #line 13176 
      break;
      #line 13178 
      default: 
               #line 13178 
      ;
      #line 13178 
      __VERIFIER_assume(0);
    }
    #line 13181 
    if (emg_repeat_cnt_call_71 > 0) {
      #line 13182 
      emg_repeat_cnt_call_71 --;
      #line 13184 
      goto emg_call_71;
    }
    else 
         #line 13186 
         __VERIFIER_assume(0);
  }
  else {
    #line 13192 
    if (emg_71_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 13193 
      (*(emg_71_container->release))(emg_71_resource_1,emg_71_resource_0);
    #line 13197 
    if (emg_repeat_cnt_main_71_0 > 0) {
      #line 13198 
      emg_repeat_cnt_main_71_0 --;
      #line 13200 
      goto emg_main_71;
    }
    else 
         #line 13202 
         __VERIFIER_assume(0);
  }
  #line 13208 
  return (void *)0;
  #line 13211 
  emg_main_71: 
               #line 13211 
  ;
  #line 13212 
  if (ldv_undef_int() != 0) {
    #line 13214 
    emg_71_ret = simple_open(emg_71_resource_1,emg_71_resource_0);
    #line 13219 
    emg_71_ret = ldv_filter_err_code(emg_71_ret);
    #line 13222 
    if (ldv_undef_int() != 0) {
      #line 13224 
      __VERIFIER_assume(emg_71_ret == 0);
      #line 13228 
      goto emg_call_71;
    }
    else {
      #line 13233 
      __VERIFIER_assume(emg_71_ret != 0);
      #line 13236 
      if (emg_repeat_cnt_main_71_1 > 0) {
        #line 13237 
        emg_repeat_cnt_main_71_1 --;
        #line 13239 
        goto emg_main_71;
      }
      else 
           #line 13241 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 13248 
       ldv_free((void *)emg_71_resource_0);
  #line 13256 
  return (void *)0;
}

#line 13261  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_rx_filter_accum_arp_pend_requests_ops(void *arg0)
{
  #line 13264 
  struct file_operations *emg_72_container;
  #line 13265 
  long long emg_72_emg_param_1_0;
  #line 13266 
  char *emg_72_emg_param_1_2;
  #line 13267 
  char *emg_72_emg_param_1_4;
  #line 13268 
  int emg_72_emg_param_2_1;
  #line 13269 
  long long *emg_72_emg_param_3_3;
  #line 13270 
  long long *emg_72_emg_param_3_5;
  #line 13271 
  struct file *emg_72_resource_0;
  #line 13272 
  struct inode *emg_72_resource_1;
  #line 13273 
  int emg_72_ret;
  #line 13274 
  unsigned long emg_72_size_cnt;
  #line 13275 
  int emg_repeat_cnt_call_72 = 1;
  #line 13276 
  int emg_repeat_cnt_main_72_0 = 1;
  #line 13277 
  int emg_repeat_cnt_main_72_1 = 1;
  #line 13279 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 13283 
  emg_72_ret = ldv_undef_int();
  #line 13284 
  emg_72_container = emg_alias_rx_filter_accum_arp_pend_requests_ops;
  #line 13285 
  emg_72_ret = ldv_undef_int();
  #line 13287 
  __VERIFIER_assume(data->arg0 == emg_alias_rx_filter_accum_arp_pend_requests_ops);
  #line 13289 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 13290 
    emg_72_container = data->arg0;
    #line 13291 
    ldv_free((void *)data);
  }
  #line 13296 
  emg_72_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 13297 
  emg_72_size_cnt = (unsigned long)ldv_undef_int();
  #line 13301 
  goto emg_main_72;
  #line 13305 
  return (void *)0;
  #line 13308 
  emg_call_72: 
               #line 13308 
  ;
  #line 13309 
  if (ldv_undef_int() != 0) {
    #line 13310 
    switch (ldv_undef_int()) {
      #line 13311 
      case 0: 
              #line 13311 
      ;
      #line 13313 
      emg_72_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 13313 
      emg_72_emg_param_1_2 = emg_72_emg_param_1_2;
      #line 13314 
      emg_72_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 13314 
      emg_72_emg_param_3_3 = emg_72_emg_param_3_3;
      #line 13318 
      emg_wrapper_rx_filter_accum_arp_pend_requests_read(emg_72_resource_0,emg_72_emg_param_1_2,emg_72_size_cnt,emg_72_emg_param_3_3);
      #line 13322 
      ldv_free((void *)emg_72_emg_param_1_2);
      #line 13323 
      ldv_free((void *)emg_72_emg_param_3_3);
      #line 13325 
      break;
      #line 13327 
      case 1: 
              #line 13327 
      ;
      #line 13329 
      generic_file_llseek(emg_72_resource_0,emg_72_emg_param_1_0,emg_72_emg_param_2_1);
      #line 13331 
      break;
      #line 13333 
      case 2: 
              #line 13333 
      ;
      #line 13340 
      __VERIFIER_assume(emg_72_size_cnt <= 2147479552UL);
      #line 13341 
      emg_72_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 13341 
      emg_72_emg_param_1_4 = emg_72_emg_param_1_4;
      #line 13342 
      emg_72_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 13342 
      emg_72_emg_param_3_5 = emg_72_emg_param_3_5;
      #line 13346 
      if (emg_72_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 13347 
        (*(emg_72_container->write))(emg_72_resource_0,emg_72_emg_param_1_4,emg_72_size_cnt,emg_72_emg_param_3_5);
      #line 13352 
      ldv_free((void *)emg_72_emg_param_1_4);
      #line 13353 
      ldv_free((void *)emg_72_emg_param_3_5);
      #line 13355 
      break;
      #line 13357 
      default: 
               #line 13357 
      ;
      #line 13357 
      __VERIFIER_assume(0);
    }
    #line 13360 
    if (emg_repeat_cnt_call_72 > 0) {
      #line 13361 
      emg_repeat_cnt_call_72 --;
      #line 13363 
      goto emg_call_72;
    }
    else 
         #line 13365 
         __VERIFIER_assume(0);
  }
  else {
    #line 13371 
    if (emg_72_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 13372 
      (*(emg_72_container->release))(emg_72_resource_1,emg_72_resource_0);
    #line 13376 
    if (emg_repeat_cnt_main_72_0 > 0) {
      #line 13377 
      emg_repeat_cnt_main_72_0 --;
      #line 13379 
      goto emg_main_72;
    }
    else 
         #line 13381 
         __VERIFIER_assume(0);
  }
  #line 13387 
  return (void *)0;
  #line 13390 
  emg_main_72: 
               #line 13390 
  ;
  #line 13391 
  if (ldv_undef_int() != 0) {
    #line 13393 
    emg_72_ret = simple_open(emg_72_resource_1,emg_72_resource_0);
    #line 13398 
    emg_72_ret = ldv_filter_err_code(emg_72_ret);
    #line 13401 
    if (ldv_undef_int() != 0) {
      #line 13403 
      __VERIFIER_assume(emg_72_ret == 0);
      #line 13407 
      goto emg_call_72;
    }
    else {
      #line 13412 
      __VERIFIER_assume(emg_72_ret != 0);
      #line 13415 
      if (emg_repeat_cnt_main_72_1 > 0) {
        #line 13416 
        emg_repeat_cnt_main_72_1 --;
        #line 13418 
        goto emg_main_72;
      }
      else 
           #line 13420 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 13427 
       ldv_free((void *)emg_72_resource_0);
  #line 13435 
  return (void *)0;
}

#line 13440  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_rx_filter_arp_filter_ops(void *arg0)
{
  #line 13443 
  struct file_operations *emg_73_container;
  #line 13444 
  long long emg_73_emg_param_1_0;
  #line 13445 
  char *emg_73_emg_param_1_2;
  #line 13446 
  char *emg_73_emg_param_1_4;
  #line 13447 
  int emg_73_emg_param_2_1;
  #line 13448 
  long long *emg_73_emg_param_3_3;
  #line 13449 
  long long *emg_73_emg_param_3_5;
  #line 13450 
  struct file *emg_73_resource_0;
  #line 13451 
  struct inode *emg_73_resource_1;
  #line 13452 
  int emg_73_ret;
  #line 13453 
  unsigned long emg_73_size_cnt;
  #line 13454 
  int emg_repeat_cnt_main_73_0 = 1;
  #line 13455 
  int emg_repeat_cnt_main_73_1 = 1;
  #line 13456 
  int emg_repeat_cnt_call_73 = 1;
  #line 13458 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 13462 
  emg_73_ret = ldv_undef_int();
  #line 13463 
  emg_73_container = emg_alias_rx_filter_arp_filter_ops;
  #line 13464 
  emg_73_ret = ldv_undef_int();
  #line 13466 
  __VERIFIER_assume(data->arg0 == emg_alias_rx_filter_arp_filter_ops);
  #line 13468 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 13469 
    emg_73_container = data->arg0;
    #line 13470 
    ldv_free((void *)data);
  }
  #line 13475 
  emg_73_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 13476 
  emg_73_size_cnt = (unsigned long)ldv_undef_int();
  #line 13480 
  goto emg_main_73;
  #line 13484 
  return (void *)0;
  #line 13487 
  emg_call_73: 
               #line 13487 
  ;
  #line 13488 
  if (ldv_undef_int() != 0) {
    #line 13489 
    switch (ldv_undef_int()) {
      #line 13490 
      case 0: 
              #line 13490 
      ;
      #line 13492 
      emg_73_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 13492 
      emg_73_emg_param_1_2 = emg_73_emg_param_1_2;
      #line 13493 
      emg_73_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 13493 
      emg_73_emg_param_3_3 = emg_73_emg_param_3_3;
      #line 13497 
      emg_wrapper_rx_filter_arp_filter_read(emg_73_resource_0,emg_73_emg_param_1_2,emg_73_size_cnt,emg_73_emg_param_3_3);
      #line 13501 
      ldv_free((void *)emg_73_emg_param_1_2);
      #line 13502 
      ldv_free((void *)emg_73_emg_param_3_3);
      #line 13504 
      break;
      #line 13506 
      case 1: 
              #line 13506 
      ;
      #line 13508 
      generic_file_llseek(emg_73_resource_0,emg_73_emg_param_1_0,emg_73_emg_param_2_1);
      #line 13510 
      break;
      #line 13512 
      case 2: 
              #line 13512 
      ;
      #line 13519 
      __VERIFIER_assume(emg_73_size_cnt <= 2147479552UL);
      #line 13520 
      emg_73_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 13520 
      emg_73_emg_param_1_4 = emg_73_emg_param_1_4;
      #line 13521 
      emg_73_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 13521 
      emg_73_emg_param_3_5 = emg_73_emg_param_3_5;
      #line 13525 
      if (emg_73_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 13526 
        (*(emg_73_container->write))(emg_73_resource_0,emg_73_emg_param_1_4,emg_73_size_cnt,emg_73_emg_param_3_5);
      #line 13531 
      ldv_free((void *)emg_73_emg_param_1_4);
      #line 13532 
      ldv_free((void *)emg_73_emg_param_3_5);
      #line 13534 
      break;
      #line 13536 
      default: 
               #line 13536 
      ;
      #line 13536 
      __VERIFIER_assume(0);
    }
    #line 13539 
    if (emg_repeat_cnt_call_73 > 0) {
      #line 13540 
      emg_repeat_cnt_call_73 --;
      #line 13542 
      goto emg_call_73;
    }
    else 
         #line 13544 
         __VERIFIER_assume(0);
  }
  else {
    #line 13550 
    if (emg_73_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 13551 
      (*(emg_73_container->release))(emg_73_resource_1,emg_73_resource_0);
    #line 13555 
    if (emg_repeat_cnt_main_73_0 > 0) {
      #line 13556 
      emg_repeat_cnt_main_73_0 --;
      #line 13558 
      goto emg_main_73;
    }
    else 
         #line 13560 
         __VERIFIER_assume(0);
  }
  #line 13566 
  return (void *)0;
  #line 13569 
  emg_main_73: 
               #line 13569 
  ;
  #line 13570 
  if (ldv_undef_int() != 0) {
    #line 13572 
    emg_73_ret = simple_open(emg_73_resource_1,emg_73_resource_0);
    #line 13577 
    emg_73_ret = ldv_filter_err_code(emg_73_ret);
    #line 13580 
    if (ldv_undef_int() != 0) {
      #line 13582 
      __VERIFIER_assume(emg_73_ret == 0);
      #line 13586 
      goto emg_call_73;
    }
    else {
      #line 13591 
      __VERIFIER_assume(emg_73_ret != 0);
      #line 13594 
      if (emg_repeat_cnt_main_73_1 > 0) {
        #line 13595 
        emg_repeat_cnt_main_73_1 --;
        #line 13597 
        goto emg_main_73;
      }
      else 
           #line 13599 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 13606 
       ldv_free((void *)emg_73_resource_0);
  #line 13614 
  return (void *)0;
}

#line 13619  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_rx_filter_beacon_filter_ops(void *arg0)
{
  #line 13622 
  struct file_operations *emg_74_container;
  #line 13623 
  long long emg_74_emg_param_1_0;
  #line 13624 
  char *emg_74_emg_param_1_2;
  #line 13625 
  char *emg_74_emg_param_1_4;
  #line 13626 
  int emg_74_emg_param_2_1;
  #line 13627 
  long long *emg_74_emg_param_3_3;
  #line 13628 
  long long *emg_74_emg_param_3_5;
  #line 13629 
  struct file *emg_74_resource_0;
  #line 13630 
  struct inode *emg_74_resource_1;
  #line 13631 
  int emg_74_ret;
  #line 13632 
  unsigned long emg_74_size_cnt;
  #line 13633 
  int emg_repeat_cnt_main_74_0 = 1;
  #line 13634 
  int emg_repeat_cnt_call_74 = 1;
  #line 13635 
  int emg_repeat_cnt_main_74_1 = 1;
  #line 13637 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 13641 
  emg_74_ret = ldv_undef_int();
  #line 13642 
  emg_74_container = emg_alias_rx_filter_beacon_filter_ops;
  #line 13643 
  emg_74_ret = ldv_undef_int();
  #line 13645 
  __VERIFIER_assume(data->arg0 == emg_alias_rx_filter_beacon_filter_ops);
  #line 13647 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 13648 
    emg_74_container = data->arg0;
    #line 13649 
    ldv_free((void *)data);
  }
  #line 13654 
  emg_74_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 13655 
  emg_74_size_cnt = (unsigned long)ldv_undef_int();
  #line 13659 
  goto emg_main_74;
  #line 13663 
  return (void *)0;
  #line 13666 
  emg_call_74: 
               #line 13666 
  ;
  #line 13667 
  if (ldv_undef_int() != 0) {
    #line 13668 
    switch (ldv_undef_int()) {
      #line 13669 
      case 0: 
              #line 13669 
      ;
      #line 13671 
      emg_74_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 13671 
      emg_74_emg_param_1_2 = emg_74_emg_param_1_2;
      #line 13672 
      emg_74_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 13672 
      emg_74_emg_param_3_3 = emg_74_emg_param_3_3;
      #line 13676 
      emg_wrapper_rx_filter_beacon_filter_read(emg_74_resource_0,emg_74_emg_param_1_2,emg_74_size_cnt,emg_74_emg_param_3_3);
      #line 13680 
      ldv_free((void *)emg_74_emg_param_1_2);
      #line 13681 
      ldv_free((void *)emg_74_emg_param_3_3);
      #line 13683 
      break;
      #line 13685 
      case 1: 
              #line 13685 
      ;
      #line 13687 
      generic_file_llseek(emg_74_resource_0,emg_74_emg_param_1_0,emg_74_emg_param_2_1);
      #line 13689 
      break;
      #line 13691 
      case 2: 
              #line 13691 
      ;
      #line 13698 
      __VERIFIER_assume(emg_74_size_cnt <= 2147479552UL);
      #line 13699 
      emg_74_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 13699 
      emg_74_emg_param_1_4 = emg_74_emg_param_1_4;
      #line 13700 
      emg_74_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 13700 
      emg_74_emg_param_3_5 = emg_74_emg_param_3_5;
      #line 13704 
      if (emg_74_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 13705 
        (*(emg_74_container->write))(emg_74_resource_0,emg_74_emg_param_1_4,emg_74_size_cnt,emg_74_emg_param_3_5);
      #line 13710 
      ldv_free((void *)emg_74_emg_param_1_4);
      #line 13711 
      ldv_free((void *)emg_74_emg_param_3_5);
      #line 13713 
      break;
      #line 13715 
      default: 
               #line 13715 
      ;
      #line 13715 
      __VERIFIER_assume(0);
    }
    #line 13718 
    if (emg_repeat_cnt_call_74 > 0) {
      #line 13719 
      emg_repeat_cnt_call_74 --;
      #line 13721 
      goto emg_call_74;
    }
    else 
         #line 13723 
         __VERIFIER_assume(0);
  }
  else {
    #line 13729 
    if (emg_74_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 13730 
      (*(emg_74_container->release))(emg_74_resource_1,emg_74_resource_0);
    #line 13734 
    if (emg_repeat_cnt_main_74_1 > 0) {
      #line 13735 
      emg_repeat_cnt_main_74_1 --;
      #line 13737 
      goto emg_main_74;
    }
    else 
         #line 13739 
         __VERIFIER_assume(0);
  }
  #line 13745 
  return (void *)0;
  #line 13748 
  emg_main_74: 
               #line 13748 
  ;
  #line 13749 
  if (ldv_undef_int() != 0) {
    #line 13751 
    emg_74_ret = simple_open(emg_74_resource_1,emg_74_resource_0);
    #line 13756 
    emg_74_ret = ldv_filter_err_code(emg_74_ret);
    #line 13759 
    if (ldv_undef_int() != 0) {
      #line 13761 
      __VERIFIER_assume(emg_74_ret == 0);
      #line 13765 
      goto emg_call_74;
    }
    else {
      #line 13770 
      __VERIFIER_assume(emg_74_ret != 0);
      #line 13773 
      if (emg_repeat_cnt_main_74_0 > 0) {
        #line 13774 
        emg_repeat_cnt_main_74_0 --;
        #line 13776 
        goto emg_main_74;
      }
      else 
           #line 13778 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 13785 
       ldv_free((void *)emg_74_resource_0);
  #line 13793 
  return (void *)0;
}

#line 13798  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_rx_filter_data_filter_ops(void *arg0)
{
  #line 13801 
  struct file_operations *emg_75_container;
  #line 13802 
  long long emg_75_emg_param_1_0;
  #line 13803 
  char *emg_75_emg_param_1_2;
  #line 13804 
  char *emg_75_emg_param_1_4;
  #line 13805 
  int emg_75_emg_param_2_1;
  #line 13806 
  long long *emg_75_emg_param_3_3;
  #line 13807 
  long long *emg_75_emg_param_3_5;
  #line 13808 
  struct file *emg_75_resource_0;
  #line 13809 
  struct inode *emg_75_resource_1;
  #line 13810 
  int emg_75_ret;
  #line 13811 
  unsigned long emg_75_size_cnt;
  #line 13812 
  int emg_repeat_cnt_main_75_0 = 1;
  #line 13813 
  int emg_repeat_cnt_main_75_1 = 1;
  #line 13814 
  int emg_repeat_cnt_call_75 = 1;
  #line 13816 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 13820 
  emg_75_ret = ldv_undef_int();
  #line 13821 
  emg_75_container = emg_alias_rx_filter_data_filter_ops;
  #line 13822 
  emg_75_ret = ldv_undef_int();
  #line 13824 
  __VERIFIER_assume(data->arg0 == emg_alias_rx_filter_data_filter_ops);
  #line 13826 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 13827 
    emg_75_container = data->arg0;
    #line 13828 
    ldv_free((void *)data);
  }
  #line 13833 
  emg_75_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 13834 
  emg_75_size_cnt = (unsigned long)ldv_undef_int();
  #line 13838 
  goto emg_main_75;
  #line 13842 
  return (void *)0;
  #line 13845 
  emg_call_75: 
               #line 13845 
  ;
  #line 13846 
  if (ldv_undef_int() != 0) {
    #line 13847 
    switch (ldv_undef_int()) {
      #line 13848 
      case 0: 
              #line 13848 
      ;
      #line 13850 
      emg_75_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 13850 
      emg_75_emg_param_1_2 = emg_75_emg_param_1_2;
      #line 13851 
      emg_75_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 13851 
      emg_75_emg_param_3_3 = emg_75_emg_param_3_3;
      #line 13855 
      emg_wrapper_rx_filter_data_filter_read(emg_75_resource_0,emg_75_emg_param_1_2,emg_75_size_cnt,emg_75_emg_param_3_3);
      #line 13859 
      ldv_free((void *)emg_75_emg_param_1_2);
      #line 13860 
      ldv_free((void *)emg_75_emg_param_3_3);
      #line 13862 
      break;
      #line 13864 
      case 1: 
              #line 13864 
      ;
      #line 13866 
      generic_file_llseek(emg_75_resource_0,emg_75_emg_param_1_0,emg_75_emg_param_2_1);
      #line 13868 
      break;
      #line 13870 
      case 2: 
              #line 13870 
      ;
      #line 13877 
      __VERIFIER_assume(emg_75_size_cnt <= 2147479552UL);
      #line 13878 
      emg_75_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 13878 
      emg_75_emg_param_1_4 = emg_75_emg_param_1_4;
      #line 13879 
      emg_75_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 13879 
      emg_75_emg_param_3_5 = emg_75_emg_param_3_5;
      #line 13883 
      if (emg_75_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 13884 
        (*(emg_75_container->write))(emg_75_resource_0,emg_75_emg_param_1_4,emg_75_size_cnt,emg_75_emg_param_3_5);
      #line 13889 
      ldv_free((void *)emg_75_emg_param_1_4);
      #line 13890 
      ldv_free((void *)emg_75_emg_param_3_5);
      #line 13892 
      break;
      #line 13894 
      default: 
               #line 13894 
      ;
      #line 13894 
      __VERIFIER_assume(0);
    }
    #line 13897 
    if (emg_repeat_cnt_call_75 > 0) {
      #line 13898 
      emg_repeat_cnt_call_75 --;
      #line 13900 
      goto emg_call_75;
    }
    else 
         #line 13902 
         __VERIFIER_assume(0);
  }
  else {
    #line 13908 
    if (emg_75_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 13909 
      (*(emg_75_container->release))(emg_75_resource_1,emg_75_resource_0);
    #line 13913 
    if (emg_repeat_cnt_main_75_1 > 0) {
      #line 13914 
      emg_repeat_cnt_main_75_1 --;
      #line 13916 
      goto emg_main_75;
    }
    else 
         #line 13918 
         __VERIFIER_assume(0);
  }
  #line 13924 
  return (void *)0;
  #line 13927 
  emg_main_75: 
               #line 13927 
  ;
  #line 13928 
  if (ldv_undef_int() != 0) {
    #line 13930 
    emg_75_ret = simple_open(emg_75_resource_1,emg_75_resource_0);
    #line 13935 
    emg_75_ret = ldv_filter_err_code(emg_75_ret);
    #line 13938 
    if (ldv_undef_int() != 0) {
      #line 13940 
      __VERIFIER_assume(emg_75_ret == 0);
      #line 13944 
      goto emg_call_75;
    }
    else {
      #line 13949 
      __VERIFIER_assume(emg_75_ret != 0);
      #line 13952 
      if (emg_repeat_cnt_main_75_0 > 0) {
        #line 13953 
        emg_repeat_cnt_main_75_0 --;
        #line 13955 
        goto emg_main_75;
      }
      else 
           #line 13957 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 13964 
       ldv_free((void *)emg_75_resource_0);
  #line 13972 
  return (void *)0;
}

#line 13977  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_rx_filter_dup_filter_ops(void *arg0)
{
  #line 13980 
  struct file_operations *emg_76_container;
  #line 13981 
  long long emg_76_emg_param_1_0;
  #line 13982 
  char *emg_76_emg_param_1_2;
  #line 13983 
  char *emg_76_emg_param_1_4;
  #line 13984 
  int emg_76_emg_param_2_1;
  #line 13985 
  long long *emg_76_emg_param_3_3;
  #line 13986 
  long long *emg_76_emg_param_3_5;
  #line 13987 
  struct file *emg_76_resource_0;
  #line 13988 
  struct inode *emg_76_resource_1;
  #line 13989 
  int emg_76_ret;
  #line 13990 
  unsigned long emg_76_size_cnt;
  #line 13991 
  int emg_repeat_cnt_main_76_0 = 1;
  #line 13992 
  int emg_repeat_cnt_call_76 = 1;
  #line 13993 
  int emg_repeat_cnt_main_76_1 = 1;
  #line 13995 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 13999 
  emg_76_ret = ldv_undef_int();
  #line 14000 
  emg_76_container = emg_alias_rx_filter_dup_filter_ops;
  #line 14001 
  emg_76_ret = ldv_undef_int();
  #line 14003 
  __VERIFIER_assume(data->arg0 == emg_alias_rx_filter_dup_filter_ops);
  #line 14005 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 14006 
    emg_76_container = data->arg0;
    #line 14007 
    ldv_free((void *)data);
  }
  #line 14012 
  emg_76_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 14013 
  emg_76_size_cnt = (unsigned long)ldv_undef_int();
  #line 14017 
  goto emg_main_76;
  #line 14021 
  return (void *)0;
  #line 14024 
  emg_call_76: 
               #line 14024 
  ;
  #line 14025 
  if (ldv_undef_int() != 0) {
    #line 14026 
    switch (ldv_undef_int()) {
      #line 14027 
      case 0: 
              #line 14027 
      ;
      #line 14029 
      emg_76_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 14029 
      emg_76_emg_param_1_2 = emg_76_emg_param_1_2;
      #line 14030 
      emg_76_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 14030 
      emg_76_emg_param_3_3 = emg_76_emg_param_3_3;
      #line 14034 
      emg_wrapper_rx_filter_dup_filter_read(emg_76_resource_0,emg_76_emg_param_1_2,emg_76_size_cnt,emg_76_emg_param_3_3);
      #line 14038 
      ldv_free((void *)emg_76_emg_param_1_2);
      #line 14039 
      ldv_free((void *)emg_76_emg_param_3_3);
      #line 14041 
      break;
      #line 14043 
      case 1: 
              #line 14043 
      ;
      #line 14045 
      generic_file_llseek(emg_76_resource_0,emg_76_emg_param_1_0,emg_76_emg_param_2_1);
      #line 14047 
      break;
      #line 14049 
      case 2: 
              #line 14049 
      ;
      #line 14056 
      __VERIFIER_assume(emg_76_size_cnt <= 2147479552UL);
      #line 14057 
      emg_76_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 14057 
      emg_76_emg_param_1_4 = emg_76_emg_param_1_4;
      #line 14058 
      emg_76_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 14058 
      emg_76_emg_param_3_5 = emg_76_emg_param_3_5;
      #line 14062 
      if (emg_76_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 14063 
        (*(emg_76_container->write))(emg_76_resource_0,emg_76_emg_param_1_4,emg_76_size_cnt,emg_76_emg_param_3_5);
      #line 14068 
      ldv_free((void *)emg_76_emg_param_1_4);
      #line 14069 
      ldv_free((void *)emg_76_emg_param_3_5);
      #line 14071 
      break;
      #line 14073 
      default: 
               #line 14073 
      ;
      #line 14073 
      __VERIFIER_assume(0);
    }
    #line 14076 
    if (emg_repeat_cnt_call_76 > 0) {
      #line 14077 
      emg_repeat_cnt_call_76 --;
      #line 14079 
      goto emg_call_76;
    }
    else 
         #line 14081 
         __VERIFIER_assume(0);
  }
  else {
    #line 14087 
    if (emg_76_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 14088 
      (*(emg_76_container->release))(emg_76_resource_1,emg_76_resource_0);
    #line 14092 
    if (emg_repeat_cnt_main_76_1 > 0) {
      #line 14093 
      emg_repeat_cnt_main_76_1 --;
      #line 14095 
      goto emg_main_76;
    }
    else 
         #line 14097 
         __VERIFIER_assume(0);
  }
  #line 14103 
  return (void *)0;
  #line 14106 
  emg_main_76: 
               #line 14106 
  ;
  #line 14107 
  if (ldv_undef_int() != 0) {
    #line 14109 
    emg_76_ret = simple_open(emg_76_resource_1,emg_76_resource_0);
    #line 14114 
    emg_76_ret = ldv_filter_err_code(emg_76_ret);
    #line 14117 
    if (ldv_undef_int() != 0) {
      #line 14119 
      __VERIFIER_assume(emg_76_ret == 0);
      #line 14123 
      goto emg_call_76;
    }
    else {
      #line 14128 
      __VERIFIER_assume(emg_76_ret != 0);
      #line 14131 
      if (emg_repeat_cnt_main_76_0 > 0) {
        #line 14132 
        emg_repeat_cnt_main_76_0 --;
        #line 14134 
        goto emg_main_76;
      }
      else 
           #line 14136 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 14143 
       ldv_free((void *)emg_76_resource_0);
  #line 14151 
  return (void *)0;
}

#line 14156  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_rx_filter_ibss_filter_ops(void *arg0)
{
  #line 14159 
  struct file_operations *emg_77_container;
  #line 14160 
  long long emg_77_emg_param_1_0;
  #line 14161 
  char *emg_77_emg_param_1_2;
  #line 14162 
  char *emg_77_emg_param_1_4;
  #line 14163 
  int emg_77_emg_param_2_1;
  #line 14164 
  long long *emg_77_emg_param_3_3;
  #line 14165 
  long long *emg_77_emg_param_3_5;
  #line 14166 
  struct file *emg_77_resource_0;
  #line 14167 
  struct inode *emg_77_resource_1;
  #line 14168 
  int emg_77_ret;
  #line 14169 
  unsigned long emg_77_size_cnt;
  #line 14170 
  int emg_repeat_cnt_call_77 = 1;
  #line 14171 
  int emg_repeat_cnt_main_77_1 = 1;
  #line 14172 
  int emg_repeat_cnt_main_77_0 = 1;
  #line 14174 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 14178 
  emg_77_ret = ldv_undef_int();
  #line 14179 
  emg_77_container = emg_alias_rx_filter_ibss_filter_ops;
  #line 14180 
  emg_77_ret = ldv_undef_int();
  #line 14182 
  __VERIFIER_assume(data->arg0 == emg_alias_rx_filter_ibss_filter_ops);
  #line 14184 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 14185 
    emg_77_container = data->arg0;
    #line 14186 
    ldv_free((void *)data);
  }
  #line 14191 
  emg_77_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 14192 
  emg_77_size_cnt = (unsigned long)ldv_undef_int();
  #line 14196 
  goto emg_main_77;
  #line 14200 
  return (void *)0;
  #line 14203 
  emg_call_77: 
               #line 14203 
  ;
  #line 14204 
  if (ldv_undef_int() != 0) {
    #line 14205 
    switch (ldv_undef_int()) {
      #line 14206 
      case 0: 
              #line 14206 
      ;
      #line 14208 
      emg_77_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 14208 
      emg_77_emg_param_1_2 = emg_77_emg_param_1_2;
      #line 14209 
      emg_77_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 14209 
      emg_77_emg_param_3_3 = emg_77_emg_param_3_3;
      #line 14213 
      emg_wrapper_rx_filter_ibss_filter_read(emg_77_resource_0,emg_77_emg_param_1_2,emg_77_size_cnt,emg_77_emg_param_3_3);
      #line 14217 
      ldv_free((void *)emg_77_emg_param_1_2);
      #line 14218 
      ldv_free((void *)emg_77_emg_param_3_3);
      #line 14220 
      break;
      #line 14222 
      case 1: 
              #line 14222 
      ;
      #line 14224 
      generic_file_llseek(emg_77_resource_0,emg_77_emg_param_1_0,emg_77_emg_param_2_1);
      #line 14226 
      break;
      #line 14228 
      case 2: 
              #line 14228 
      ;
      #line 14235 
      __VERIFIER_assume(emg_77_size_cnt <= 2147479552UL);
      #line 14236 
      emg_77_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 14236 
      emg_77_emg_param_1_4 = emg_77_emg_param_1_4;
      #line 14237 
      emg_77_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 14237 
      emg_77_emg_param_3_5 = emg_77_emg_param_3_5;
      #line 14241 
      if (emg_77_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 14242 
        (*(emg_77_container->write))(emg_77_resource_0,emg_77_emg_param_1_4,emg_77_size_cnt,emg_77_emg_param_3_5);
      #line 14247 
      ldv_free((void *)emg_77_emg_param_1_4);
      #line 14248 
      ldv_free((void *)emg_77_emg_param_3_5);
      #line 14250 
      break;
      #line 14252 
      default: 
               #line 14252 
      ;
      #line 14252 
      __VERIFIER_assume(0);
    }
    #line 14255 
    if (emg_repeat_cnt_call_77 > 0) {
      #line 14256 
      emg_repeat_cnt_call_77 --;
      #line 14258 
      goto emg_call_77;
    }
    else 
         #line 14260 
         __VERIFIER_assume(0);
  }
  else {
    #line 14266 
    if (emg_77_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 14267 
      (*(emg_77_container->release))(emg_77_resource_1,emg_77_resource_0);
    #line 14271 
    if (emg_repeat_cnt_main_77_1 > 0) {
      #line 14272 
      emg_repeat_cnt_main_77_1 --;
      #line 14274 
      goto emg_main_77;
    }
    else 
         #line 14276 
         __VERIFIER_assume(0);
  }
  #line 14282 
  return (void *)0;
  #line 14285 
  emg_main_77: 
               #line 14285 
  ;
  #line 14286 
  if (ldv_undef_int() != 0) {
    #line 14288 
    emg_77_ret = simple_open(emg_77_resource_1,emg_77_resource_0);
    #line 14293 
    emg_77_ret = ldv_filter_err_code(emg_77_ret);
    #line 14296 
    if (ldv_undef_int() != 0) {
      #line 14298 
      __VERIFIER_assume(emg_77_ret == 0);
      #line 14302 
      goto emg_call_77;
    }
    else {
      #line 14307 
      __VERIFIER_assume(emg_77_ret != 0);
      #line 14310 
      if (emg_repeat_cnt_main_77_0 > 0) {
        #line 14311 
        emg_repeat_cnt_main_77_0 --;
        #line 14313 
        goto emg_main_77;
      }
      else 
           #line 14315 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 14322 
       ldv_free((void *)emg_77_resource_0);
  #line 14330 
  return (void *)0;
}

#line 14335  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_rx_filter_max_arp_queue_dep_ops(void *arg0)
{
  #line 14338 
  struct file_operations *emg_78_container;
  #line 14339 
  long long emg_78_emg_param_1_0;
  #line 14340 
  char *emg_78_emg_param_1_2;
  #line 14341 
  char *emg_78_emg_param_1_4;
  #line 14342 
  int emg_78_emg_param_2_1;
  #line 14343 
  long long *emg_78_emg_param_3_3;
  #line 14344 
  long long *emg_78_emg_param_3_5;
  #line 14345 
  struct file *emg_78_resource_0;
  #line 14346 
  struct inode *emg_78_resource_1;
  #line 14347 
  int emg_78_ret;
  #line 14348 
  unsigned long emg_78_size_cnt;
  #line 14349 
  int emg_repeat_cnt_call_78 = 1;
  #line 14350 
  int emg_repeat_cnt_main_78_0 = 1;
  #line 14351 
  int emg_repeat_cnt_main_78_1 = 1;
  #line 14353 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 14357 
  emg_78_ret = ldv_undef_int();
  #line 14358 
  emg_78_container = emg_alias_rx_filter_max_arp_queue_dep_ops;
  #line 14359 
  emg_78_ret = ldv_undef_int();
  #line 14361 
  __VERIFIER_assume(data->arg0 == emg_alias_rx_filter_max_arp_queue_dep_ops);
  #line 14363 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 14364 
    emg_78_container = data->arg0;
    #line 14365 
    ldv_free((void *)data);
  }
  #line 14370 
  emg_78_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 14371 
  emg_78_size_cnt = (unsigned long)ldv_undef_int();
  #line 14375 
  goto emg_main_78;
  #line 14379 
  return (void *)0;
  #line 14382 
  emg_call_78: 
               #line 14382 
  ;
  #line 14383 
  if (ldv_undef_int() != 0) {
    #line 14384 
    switch (ldv_undef_int()) {
      #line 14385 
      case 0: 
              #line 14385 
      ;
      #line 14387 
      emg_78_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 14387 
      emg_78_emg_param_1_2 = emg_78_emg_param_1_2;
      #line 14388 
      emg_78_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 14388 
      emg_78_emg_param_3_3 = emg_78_emg_param_3_3;
      #line 14392 
      emg_wrapper_rx_filter_max_arp_queue_dep_read(emg_78_resource_0,emg_78_emg_param_1_2,emg_78_size_cnt,emg_78_emg_param_3_3);
      #line 14396 
      ldv_free((void *)emg_78_emg_param_1_2);
      #line 14397 
      ldv_free((void *)emg_78_emg_param_3_3);
      #line 14399 
      break;
      #line 14401 
      case 1: 
              #line 14401 
      ;
      #line 14403 
      generic_file_llseek(emg_78_resource_0,emg_78_emg_param_1_0,emg_78_emg_param_2_1);
      #line 14405 
      break;
      #line 14407 
      case 2: 
              #line 14407 
      ;
      #line 14414 
      __VERIFIER_assume(emg_78_size_cnt <= 2147479552UL);
      #line 14415 
      emg_78_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 14415 
      emg_78_emg_param_1_4 = emg_78_emg_param_1_4;
      #line 14416 
      emg_78_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 14416 
      emg_78_emg_param_3_5 = emg_78_emg_param_3_5;
      #line 14420 
      if (emg_78_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 14421 
        (*(emg_78_container->write))(emg_78_resource_0,emg_78_emg_param_1_4,emg_78_size_cnt,emg_78_emg_param_3_5);
      #line 14426 
      ldv_free((void *)emg_78_emg_param_1_4);
      #line 14427 
      ldv_free((void *)emg_78_emg_param_3_5);
      #line 14429 
      break;
      #line 14431 
      default: 
               #line 14431 
      ;
      #line 14431 
      __VERIFIER_assume(0);
    }
    #line 14434 
    if (emg_repeat_cnt_call_78 > 0) {
      #line 14435 
      emg_repeat_cnt_call_78 --;
      #line 14437 
      goto emg_call_78;
    }
    else 
         #line 14439 
         __VERIFIER_assume(0);
  }
  else {
    #line 14445 
    if (emg_78_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 14446 
      (*(emg_78_container->release))(emg_78_resource_1,emg_78_resource_0);
    #line 14450 
    if (emg_repeat_cnt_main_78_1 > 0) {
      #line 14451 
      emg_repeat_cnt_main_78_1 --;
      #line 14453 
      goto emg_main_78;
    }
    else 
         #line 14455 
         __VERIFIER_assume(0);
  }
  #line 14461 
  return (void *)0;
  #line 14464 
  emg_main_78: 
               #line 14464 
  ;
  #line 14465 
  if (ldv_undef_int() != 0) {
    #line 14467 
    emg_78_ret = simple_open(emg_78_resource_1,emg_78_resource_0);
    #line 14472 
    emg_78_ret = ldv_filter_err_code(emg_78_ret);
    #line 14475 
    if (ldv_undef_int() != 0) {
      #line 14477 
      __VERIFIER_assume(emg_78_ret == 0);
      #line 14481 
      goto emg_call_78;
    }
    else {
      #line 14486 
      __VERIFIER_assume(emg_78_ret != 0);
      #line 14489 
      if (emg_repeat_cnt_main_78_0 > 0) {
        #line 14490 
        emg_repeat_cnt_main_78_0 --;
        #line 14492 
        goto emg_main_78;
      }
      else 
           #line 14494 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 14501 
       ldv_free((void *)emg_78_resource_0);
  #line 14509 
  return (void *)0;
}

#line 14514  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_rx_filter_mc_filter_ops(void *arg0)
{
  #line 14517 
  struct file_operations *emg_79_container;
  #line 14518 
  long long emg_79_emg_param_1_0;
  #line 14519 
  char *emg_79_emg_param_1_2;
  #line 14520 
  char *emg_79_emg_param_1_4;
  #line 14521 
  int emg_79_emg_param_2_1;
  #line 14522 
  long long *emg_79_emg_param_3_3;
  #line 14523 
  long long *emg_79_emg_param_3_5;
  #line 14524 
  struct file *emg_79_resource_0;
  #line 14525 
  struct inode *emg_79_resource_1;
  #line 14526 
  int emg_79_ret;
  #line 14527 
  unsigned long emg_79_size_cnt;
  #line 14528 
  int emg_repeat_cnt_call_79 = 1;
  #line 14529 
  int emg_repeat_cnt_main_79_1 = 1;
  #line 14530 
  int emg_repeat_cnt_main_79_0 = 1;
  #line 14532 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 14536 
  emg_79_ret = ldv_undef_int();
  #line 14537 
  emg_79_container = emg_alias_rx_filter_mc_filter_ops;
  #line 14538 
  emg_79_ret = ldv_undef_int();
  #line 14540 
  __VERIFIER_assume(data->arg0 == emg_alias_rx_filter_mc_filter_ops);
  #line 14542 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 14543 
    emg_79_container = data->arg0;
    #line 14544 
    ldv_free((void *)data);
  }
  #line 14549 
  emg_79_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 14550 
  emg_79_size_cnt = (unsigned long)ldv_undef_int();
  #line 14554 
  goto emg_main_79;
  #line 14558 
  return (void *)0;
  #line 14561 
  emg_call_79: 
               #line 14561 
  ;
  #line 14562 
  if (ldv_undef_int() != 0) {
    #line 14563 
    switch (ldv_undef_int()) {
      #line 14564 
      case 0: 
              #line 14564 
      ;
      #line 14566 
      emg_79_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 14566 
      emg_79_emg_param_1_2 = emg_79_emg_param_1_2;
      #line 14567 
      emg_79_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 14567 
      emg_79_emg_param_3_3 = emg_79_emg_param_3_3;
      #line 14571 
      emg_wrapper_rx_filter_mc_filter_read(emg_79_resource_0,emg_79_emg_param_1_2,emg_79_size_cnt,emg_79_emg_param_3_3);
      #line 14575 
      ldv_free((void *)emg_79_emg_param_1_2);
      #line 14576 
      ldv_free((void *)emg_79_emg_param_3_3);
      #line 14578 
      break;
      #line 14580 
      case 1: 
              #line 14580 
      ;
      #line 14582 
      generic_file_llseek(emg_79_resource_0,emg_79_emg_param_1_0,emg_79_emg_param_2_1);
      #line 14584 
      break;
      #line 14586 
      case 2: 
              #line 14586 
      ;
      #line 14593 
      __VERIFIER_assume(emg_79_size_cnt <= 2147479552UL);
      #line 14594 
      emg_79_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 14594 
      emg_79_emg_param_1_4 = emg_79_emg_param_1_4;
      #line 14595 
      emg_79_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 14595 
      emg_79_emg_param_3_5 = emg_79_emg_param_3_5;
      #line 14599 
      if (emg_79_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 14600 
        (*(emg_79_container->write))(emg_79_resource_0,emg_79_emg_param_1_4,emg_79_size_cnt,emg_79_emg_param_3_5);
      #line 14605 
      ldv_free((void *)emg_79_emg_param_1_4);
      #line 14606 
      ldv_free((void *)emg_79_emg_param_3_5);
      #line 14608 
      break;
      #line 14610 
      default: 
               #line 14610 
      ;
      #line 14610 
      __VERIFIER_assume(0);
    }
    #line 14613 
    if (emg_repeat_cnt_call_79 > 0) {
      #line 14614 
      emg_repeat_cnt_call_79 --;
      #line 14616 
      goto emg_call_79;
    }
    else 
         #line 14618 
         __VERIFIER_assume(0);
  }
  else {
    #line 14624 
    if (emg_79_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 14625 
      (*(emg_79_container->release))(emg_79_resource_1,emg_79_resource_0);
    #line 14629 
    if (emg_repeat_cnt_main_79_1 > 0) {
      #line 14630 
      emg_repeat_cnt_main_79_1 --;
      #line 14632 
      goto emg_main_79;
    }
    else 
         #line 14634 
         __VERIFIER_assume(0);
  }
  #line 14640 
  return (void *)0;
  #line 14643 
  emg_main_79: 
               #line 14643 
  ;
  #line 14644 
  if (ldv_undef_int() != 0) {
    #line 14646 
    emg_79_ret = simple_open(emg_79_resource_1,emg_79_resource_0);
    #line 14651 
    emg_79_ret = ldv_filter_err_code(emg_79_ret);
    #line 14654 
    if (ldv_undef_int() != 0) {
      #line 14656 
      __VERIFIER_assume(emg_79_ret == 0);
      #line 14660 
      goto emg_call_79;
    }
    else {
      #line 14665 
      __VERIFIER_assume(emg_79_ret != 0);
      #line 14668 
      if (emg_repeat_cnt_main_79_0 > 0) {
        #line 14669 
        emg_repeat_cnt_main_79_0 --;
        #line 14671 
        goto emg_main_79;
      }
      else 
           #line 14673 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 14680 
       ldv_free((void *)emg_79_resource_0);
  #line 14688 
  return (void *)0;
}

#line 14693  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_rx_filter_protection_filter_ops(void *arg0)
{
  #line 14696 
  struct file_operations *emg_80_container;
  #line 14697 
  long long emg_80_emg_param_1_0;
  #line 14698 
  char *emg_80_emg_param_1_2;
  #line 14699 
  char *emg_80_emg_param_1_4;
  #line 14700 
  int emg_80_emg_param_2_1;
  #line 14701 
  long long *emg_80_emg_param_3_3;
  #line 14702 
  long long *emg_80_emg_param_3_5;
  #line 14703 
  struct file *emg_80_resource_0;
  #line 14704 
  struct inode *emg_80_resource_1;
  #line 14705 
  int emg_80_ret;
  #line 14706 
  unsigned long emg_80_size_cnt;
  #line 14707 
  int emg_repeat_cnt_call_80 = 1;
  #line 14708 
  int emg_repeat_cnt_main_80_0 = 1;
  #line 14709 
  int emg_repeat_cnt_main_80_1 = 1;
  #line 14711 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 14715 
  emg_80_ret = ldv_undef_int();
  #line 14716 
  emg_80_container = emg_alias_rx_filter_protection_filter_ops;
  #line 14717 
  emg_80_ret = ldv_undef_int();
  #line 14719 
  __VERIFIER_assume(data->arg0 == emg_alias_rx_filter_protection_filter_ops);
  #line 14721 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 14722 
    emg_80_container = data->arg0;
    #line 14723 
    ldv_free((void *)data);
  }
  #line 14728 
  emg_80_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 14729 
  emg_80_size_cnt = (unsigned long)ldv_undef_int();
  #line 14733 
  goto emg_main_80;
  #line 14737 
  return (void *)0;
  #line 14740 
  emg_call_80: 
               #line 14740 
  ;
  #line 14741 
  if (ldv_undef_int() != 0) {
    #line 14742 
    switch (ldv_undef_int()) {
      #line 14743 
      case 0: 
              #line 14743 
      ;
      #line 14745 
      emg_80_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 14745 
      emg_80_emg_param_1_2 = emg_80_emg_param_1_2;
      #line 14746 
      emg_80_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 14746 
      emg_80_emg_param_3_3 = emg_80_emg_param_3_3;
      #line 14750 
      emg_wrapper_rx_filter_protection_filter_read(emg_80_resource_0,emg_80_emg_param_1_2,emg_80_size_cnt,emg_80_emg_param_3_3);
      #line 14754 
      ldv_free((void *)emg_80_emg_param_1_2);
      #line 14755 
      ldv_free((void *)emg_80_emg_param_3_3);
      #line 14757 
      break;
      #line 14759 
      case 1: 
              #line 14759 
      ;
      #line 14761 
      generic_file_llseek(emg_80_resource_0,emg_80_emg_param_1_0,emg_80_emg_param_2_1);
      #line 14763 
      break;
      #line 14765 
      case 2: 
              #line 14765 
      ;
      #line 14772 
      __VERIFIER_assume(emg_80_size_cnt <= 2147479552UL);
      #line 14773 
      emg_80_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 14773 
      emg_80_emg_param_1_4 = emg_80_emg_param_1_4;
      #line 14774 
      emg_80_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 14774 
      emg_80_emg_param_3_5 = emg_80_emg_param_3_5;
      #line 14778 
      if (emg_80_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 14779 
        (*(emg_80_container->write))(emg_80_resource_0,emg_80_emg_param_1_4,emg_80_size_cnt,emg_80_emg_param_3_5);
      #line 14784 
      ldv_free((void *)emg_80_emg_param_1_4);
      #line 14785 
      ldv_free((void *)emg_80_emg_param_3_5);
      #line 14787 
      break;
      #line 14789 
      default: 
               #line 14789 
      ;
      #line 14789 
      __VERIFIER_assume(0);
    }
    #line 14792 
    if (emg_repeat_cnt_call_80 > 0) {
      #line 14793 
      emg_repeat_cnt_call_80 --;
      #line 14795 
      goto emg_call_80;
    }
    else 
         #line 14797 
         __VERIFIER_assume(0);
  }
  else {
    #line 14803 
    if (emg_80_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 14804 
      (*(emg_80_container->release))(emg_80_resource_1,emg_80_resource_0);
    #line 14808 
    if (emg_repeat_cnt_main_80_0 > 0) {
      #line 14809 
      emg_repeat_cnt_main_80_0 --;
      #line 14811 
      goto emg_main_80;
    }
    else 
         #line 14813 
         __VERIFIER_assume(0);
  }
  #line 14819 
  return (void *)0;
  #line 14822 
  emg_main_80: 
               #line 14822 
  ;
  #line 14823 
  if (ldv_undef_int() != 0) {
    #line 14825 
    emg_80_ret = simple_open(emg_80_resource_1,emg_80_resource_0);
    #line 14830 
    emg_80_ret = ldv_filter_err_code(emg_80_ret);
    #line 14833 
    if (ldv_undef_int() != 0) {
      #line 14835 
      __VERIFIER_assume(emg_80_ret == 0);
      #line 14839 
      goto emg_call_80;
    }
    else {
      #line 14844 
      __VERIFIER_assume(emg_80_ret != 0);
      #line 14847 
      if (emg_repeat_cnt_main_80_1 > 0) {
        #line 14848 
        emg_repeat_cnt_main_80_1 --;
        #line 14850 
        goto emg_main_80;
      }
      else 
           #line 14852 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 14859 
       ldv_free((void *)emg_80_resource_0);
  #line 14867 
  return (void *)0;
}

#line 14872  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_rx_rate_rx_frames_per_rates_ops(void *arg0)
{
  #line 14875 
  struct file_operations *emg_81_container;
  #line 14876 
  long long emg_81_emg_param_1_0;
  #line 14877 
  char *emg_81_emg_param_1_2;
  #line 14878 
  char *emg_81_emg_param_1_4;
  #line 14879 
  int emg_81_emg_param_2_1;
  #line 14880 
  long long *emg_81_emg_param_3_3;
  #line 14881 
  long long *emg_81_emg_param_3_5;
  #line 14882 
  struct file *emg_81_resource_0;
  #line 14883 
  struct inode *emg_81_resource_1;
  #line 14884 
  int emg_81_ret;
  #line 14885 
  unsigned long emg_81_size_cnt;
  #line 14886 
  int emg_repeat_cnt_main_81_0 = 1;
  #line 14887 
  int emg_repeat_cnt_main_81_1 = 1;
  #line 14888 
  int emg_repeat_cnt_call_81 = 1;
  #line 14890 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 14894 
  emg_81_ret = ldv_undef_int();
  #line 14895 
  emg_81_container = emg_alias_rx_rate_rx_frames_per_rates_ops;
  #line 14896 
  emg_81_ret = ldv_undef_int();
  #line 14898 
  __VERIFIER_assume(data->arg0 == emg_alias_rx_rate_rx_frames_per_rates_ops);
  #line 14900 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 14901 
    emg_81_container = data->arg0;
    #line 14902 
    ldv_free((void *)data);
  }
  #line 14907 
  emg_81_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 14908 
  emg_81_size_cnt = (unsigned long)ldv_undef_int();
  #line 14912 
  goto emg_main_81;
  #line 14916 
  return (void *)0;
  #line 14919 
  emg_call_81: 
               #line 14919 
  ;
  #line 14920 
  if (ldv_undef_int() != 0) {
    #line 14921 
    switch (ldv_undef_int()) {
      #line 14922 
      case 0: 
              #line 14922 
      ;
      #line 14924 
      emg_81_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 14924 
      emg_81_emg_param_1_2 = emg_81_emg_param_1_2;
      #line 14925 
      emg_81_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 14925 
      emg_81_emg_param_3_3 = emg_81_emg_param_3_3;
      #line 14929 
      emg_wrapper_rx_rate_rx_frames_per_rates_read(emg_81_resource_0,emg_81_emg_param_1_2,emg_81_size_cnt,emg_81_emg_param_3_3);
      #line 14933 
      ldv_free((void *)emg_81_emg_param_1_2);
      #line 14934 
      ldv_free((void *)emg_81_emg_param_3_3);
      #line 14936 
      break;
      #line 14938 
      case 1: 
              #line 14938 
      ;
      #line 14940 
      generic_file_llseek(emg_81_resource_0,emg_81_emg_param_1_0,emg_81_emg_param_2_1);
      #line 14942 
      break;
      #line 14944 
      case 2: 
              #line 14944 
      ;
      #line 14951 
      __VERIFIER_assume(emg_81_size_cnt <= 2147479552UL);
      #line 14952 
      emg_81_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 14952 
      emg_81_emg_param_1_4 = emg_81_emg_param_1_4;
      #line 14953 
      emg_81_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 14953 
      emg_81_emg_param_3_5 = emg_81_emg_param_3_5;
      #line 14957 
      if (emg_81_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 14958 
        (*(emg_81_container->write))(emg_81_resource_0,emg_81_emg_param_1_4,emg_81_size_cnt,emg_81_emg_param_3_5);
      #line 14963 
      ldv_free((void *)emg_81_emg_param_1_4);
      #line 14964 
      ldv_free((void *)emg_81_emg_param_3_5);
      #line 14966 
      break;
      #line 14968 
      default: 
               #line 14968 
      ;
      #line 14968 
      __VERIFIER_assume(0);
    }
    #line 14971 
    if (emg_repeat_cnt_call_81 > 0) {
      #line 14972 
      emg_repeat_cnt_call_81 --;
      #line 14974 
      goto emg_call_81;
    }
    else 
         #line 14976 
         __VERIFIER_assume(0);
  }
  else {
    #line 14982 
    if (emg_81_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 14983 
      (*(emg_81_container->release))(emg_81_resource_1,emg_81_resource_0);
    #line 14987 
    if (emg_repeat_cnt_main_81_0 > 0) {
      #line 14988 
      emg_repeat_cnt_main_81_0 --;
      #line 14990 
      goto emg_main_81;
    }
    else 
         #line 14992 
         __VERIFIER_assume(0);
  }
  #line 14998 
  return (void *)0;
  #line 15001 
  emg_main_81: 
               #line 15001 
  ;
  #line 15002 
  if (ldv_undef_int() != 0) {
    #line 15004 
    emg_81_ret = simple_open(emg_81_resource_1,emg_81_resource_0);
    #line 15009 
    emg_81_ret = ldv_filter_err_code(emg_81_ret);
    #line 15012 
    if (ldv_undef_int() != 0) {
      #line 15014 
      __VERIFIER_assume(emg_81_ret == 0);
      #line 15018 
      goto emg_call_81;
    }
    else {
      #line 15023 
      __VERIFIER_assume(emg_81_ret != 0);
      #line 15026 
      if (emg_repeat_cnt_main_81_1 > 0) {
        #line 15027 
        emg_repeat_cnt_main_81_1 --;
        #line 15029 
        goto emg_main_81;
      }
      else 
           #line 15031 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 15038 
       ldv_free((void *)emg_81_resource_0);
  #line 15046 
  return (void *)0;
}

#line 15051  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_rx_rx_beacon_early_term_ops(void *arg0)
{
  #line 15054 
  struct file_operations *emg_82_container;
  #line 15055 
  long long emg_82_emg_param_1_0;
  #line 15056 
  char *emg_82_emg_param_1_2;
  #line 15057 
  char *emg_82_emg_param_1_4;
  #line 15058 
  int emg_82_emg_param_2_1;
  #line 15059 
  long long *emg_82_emg_param_3_3;
  #line 15060 
  long long *emg_82_emg_param_3_5;
  #line 15061 
  struct file *emg_82_resource_0;
  #line 15062 
  struct inode *emg_82_resource_1;
  #line 15063 
  int emg_82_ret;
  #line 15064 
  unsigned long emg_82_size_cnt;
  #line 15065 
  int emg_repeat_cnt_call_82 = 1;
  #line 15066 
  int emg_repeat_cnt_main_82_1 = 1;
  #line 15067 
  int emg_repeat_cnt_main_82_0 = 1;
  #line 15069 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 15073 
  emg_82_ret = ldv_undef_int();
  #line 15074 
  emg_82_container = emg_alias_rx_rx_beacon_early_term_ops;
  #line 15075 
  emg_82_ret = ldv_undef_int();
  #line 15077 
  __VERIFIER_assume(data->arg0 == emg_alias_rx_rx_beacon_early_term_ops);
  #line 15079 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 15080 
    emg_82_container = data->arg0;
    #line 15081 
    ldv_free((void *)data);
  }
  #line 15086 
  emg_82_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 15087 
  emg_82_size_cnt = (unsigned long)ldv_undef_int();
  #line 15091 
  goto emg_main_82;
  #line 15095 
  return (void *)0;
  #line 15098 
  emg_call_82: 
               #line 15098 
  ;
  #line 15099 
  if (ldv_undef_int() != 0) {
    #line 15100 
    switch (ldv_undef_int()) {
      #line 15101 
      case 0: 
              #line 15101 
      ;
      #line 15103 
      emg_82_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 15103 
      emg_82_emg_param_1_2 = emg_82_emg_param_1_2;
      #line 15104 
      emg_82_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 15104 
      emg_82_emg_param_3_3 = emg_82_emg_param_3_3;
      #line 15108 
      emg_wrapper_rx_rx_beacon_early_term_read(emg_82_resource_0,emg_82_emg_param_1_2,emg_82_size_cnt,emg_82_emg_param_3_3);
      #line 15112 
      ldv_free((void *)emg_82_emg_param_1_2);
      #line 15113 
      ldv_free((void *)emg_82_emg_param_3_3);
      #line 15115 
      break;
      #line 15117 
      case 1: 
              #line 15117 
      ;
      #line 15119 
      generic_file_llseek(emg_82_resource_0,emg_82_emg_param_1_0,emg_82_emg_param_2_1);
      #line 15121 
      break;
      #line 15123 
      case 2: 
              #line 15123 
      ;
      #line 15130 
      __VERIFIER_assume(emg_82_size_cnt <= 2147479552UL);
      #line 15131 
      emg_82_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 15131 
      emg_82_emg_param_1_4 = emg_82_emg_param_1_4;
      #line 15132 
      emg_82_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 15132 
      emg_82_emg_param_3_5 = emg_82_emg_param_3_5;
      #line 15136 
      if (emg_82_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 15137 
        (*(emg_82_container->write))(emg_82_resource_0,emg_82_emg_param_1_4,emg_82_size_cnt,emg_82_emg_param_3_5);
      #line 15142 
      ldv_free((void *)emg_82_emg_param_1_4);
      #line 15143 
      ldv_free((void *)emg_82_emg_param_3_5);
      #line 15145 
      break;
      #line 15147 
      default: 
               #line 15147 
      ;
      #line 15147 
      __VERIFIER_assume(0);
    }
    #line 15150 
    if (emg_repeat_cnt_call_82 > 0) {
      #line 15151 
      emg_repeat_cnt_call_82 --;
      #line 15153 
      goto emg_call_82;
    }
    else 
         #line 15155 
         __VERIFIER_assume(0);
  }
  else {
    #line 15161 
    if (emg_82_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 15162 
      (*(emg_82_container->release))(emg_82_resource_1,emg_82_resource_0);
    #line 15166 
    if (emg_repeat_cnt_main_82_0 > 0) {
      #line 15167 
      emg_repeat_cnt_main_82_0 --;
      #line 15169 
      goto emg_main_82;
    }
    else 
         #line 15171 
         __VERIFIER_assume(0);
  }
  #line 15177 
  return (void *)0;
  #line 15180 
  emg_main_82: 
               #line 15180 
  ;
  #line 15181 
  if (ldv_undef_int() != 0) {
    #line 15183 
    emg_82_ret = simple_open(emg_82_resource_1,emg_82_resource_0);
    #line 15188 
    emg_82_ret = ldv_filter_err_code(emg_82_ret);
    #line 15191 
    if (ldv_undef_int() != 0) {
      #line 15193 
      __VERIFIER_assume(emg_82_ret == 0);
      #line 15197 
      goto emg_call_82;
    }
    else {
      #line 15202 
      __VERIFIER_assume(emg_82_ret != 0);
      #line 15205 
      if (emg_repeat_cnt_main_82_1 > 0) {
        #line 15206 
        emg_repeat_cnt_main_82_1 --;
        #line 15208 
        goto emg_main_82;
      }
      else 
           #line 15210 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 15217 
       ldv_free((void *)emg_82_resource_0);
  #line 15225 
  return (void *)0;
}

#line 15230  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_rx_rx_cmplt_ops(void *arg0)
{
  #line 15233 
  struct file_operations *emg_83_container;
  #line 15234 
  long long emg_83_emg_param_1_0;
  #line 15235 
  char *emg_83_emg_param_1_2;
  #line 15236 
  char *emg_83_emg_param_1_4;
  #line 15237 
  int emg_83_emg_param_2_1;
  #line 15238 
  long long *emg_83_emg_param_3_3;
  #line 15239 
  long long *emg_83_emg_param_3_5;
  #line 15240 
  struct file *emg_83_resource_0;
  #line 15241 
  struct inode *emg_83_resource_1;
  #line 15242 
  int emg_83_ret;
  #line 15243 
  unsigned long emg_83_size_cnt;
  #line 15244 
  int emg_repeat_cnt_main_83_1 = 1;
  #line 15245 
  int emg_repeat_cnt_main_83_0 = 1;
  #line 15246 
  int emg_repeat_cnt_call_83 = 1;
  #line 15248 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 15252 
  emg_83_ret = ldv_undef_int();
  #line 15253 
  emg_83_container = emg_alias_rx_rx_cmplt_ops;
  #line 15254 
  emg_83_ret = ldv_undef_int();
  #line 15256 
  __VERIFIER_assume(data->arg0 == emg_alias_rx_rx_cmplt_ops);
  #line 15258 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 15259 
    emg_83_container = data->arg0;
    #line 15260 
    ldv_free((void *)data);
  }
  #line 15265 
  emg_83_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 15266 
  emg_83_size_cnt = (unsigned long)ldv_undef_int();
  #line 15270 
  goto emg_main_83;
  #line 15274 
  return (void *)0;
  #line 15277 
  emg_call_83: 
               #line 15277 
  ;
  #line 15278 
  if (ldv_undef_int() != 0) {
    #line 15279 
    switch (ldv_undef_int()) {
      #line 15280 
      case 0: 
              #line 15280 
      ;
      #line 15282 
      emg_83_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 15282 
      emg_83_emg_param_1_2 = emg_83_emg_param_1_2;
      #line 15283 
      emg_83_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 15283 
      emg_83_emg_param_3_3 = emg_83_emg_param_3_3;
      #line 15287 
      emg_wrapper_rx_rx_cmplt_read(emg_83_resource_0,emg_83_emg_param_1_2,emg_83_size_cnt,emg_83_emg_param_3_3);
      #line 15291 
      ldv_free((void *)emg_83_emg_param_1_2);
      #line 15292 
      ldv_free((void *)emg_83_emg_param_3_3);
      #line 15294 
      break;
      #line 15296 
      case 1: 
              #line 15296 
      ;
      #line 15298 
      generic_file_llseek(emg_83_resource_0,emg_83_emg_param_1_0,emg_83_emg_param_2_1);
      #line 15300 
      break;
      #line 15302 
      case 2: 
              #line 15302 
      ;
      #line 15309 
      __VERIFIER_assume(emg_83_size_cnt <= 2147479552UL);
      #line 15310 
      emg_83_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 15310 
      emg_83_emg_param_1_4 = emg_83_emg_param_1_4;
      #line 15311 
      emg_83_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 15311 
      emg_83_emg_param_3_5 = emg_83_emg_param_3_5;
      #line 15315 
      if (emg_83_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 15316 
        (*(emg_83_container->write))(emg_83_resource_0,emg_83_emg_param_1_4,emg_83_size_cnt,emg_83_emg_param_3_5);
      #line 15321 
      ldv_free((void *)emg_83_emg_param_1_4);
      #line 15322 
      ldv_free((void *)emg_83_emg_param_3_5);
      #line 15324 
      break;
      #line 15326 
      default: 
               #line 15326 
      ;
      #line 15326 
      __VERIFIER_assume(0);
    }
    #line 15329 
    if (emg_repeat_cnt_call_83 > 0) {
      #line 15330 
      emg_repeat_cnt_call_83 --;
      #line 15332 
      goto emg_call_83;
    }
    else 
         #line 15334 
         __VERIFIER_assume(0);
  }
  else {
    #line 15340 
    if (emg_83_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 15341 
      (*(emg_83_container->release))(emg_83_resource_1,emg_83_resource_0);
    #line 15345 
    if (emg_repeat_cnt_main_83_0 > 0) {
      #line 15346 
      emg_repeat_cnt_main_83_0 --;
      #line 15348 
      goto emg_main_83;
    }
    else 
         #line 15350 
         __VERIFIER_assume(0);
  }
  #line 15356 
  return (void *)0;
  #line 15359 
  emg_main_83: 
               #line 15359 
  ;
  #line 15360 
  if (ldv_undef_int() != 0) {
    #line 15362 
    emg_83_ret = simple_open(emg_83_resource_1,emg_83_resource_0);
    #line 15367 
    emg_83_ret = ldv_filter_err_code(emg_83_ret);
    #line 15370 
    if (ldv_undef_int() != 0) {
      #line 15372 
      __VERIFIER_assume(emg_83_ret == 0);
      #line 15376 
      goto emg_call_83;
    }
    else {
      #line 15381 
      __VERIFIER_assume(emg_83_ret != 0);
      #line 15384 
      if (emg_repeat_cnt_main_83_1 > 0) {
        #line 15385 
        emg_repeat_cnt_main_83_1 --;
        #line 15387 
        goto emg_main_83;
      }
      else 
           #line 15389 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 15396 
       ldv_free((void *)emg_83_resource_0);
  #line 15404 
  return (void *)0;
}

#line 15409  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_rx_rx_cmplt_task_ops(void *arg0)
{
  #line 15412 
  struct file_operations *emg_84_container;
  #line 15413 
  long long emg_84_emg_param_1_0;
  #line 15414 
  char *emg_84_emg_param_1_2;
  #line 15415 
  char *emg_84_emg_param_1_4;
  #line 15416 
  int emg_84_emg_param_2_1;
  #line 15417 
  long long *emg_84_emg_param_3_3;
  #line 15418 
  long long *emg_84_emg_param_3_5;
  #line 15419 
  struct file *emg_84_resource_0;
  #line 15420 
  struct inode *emg_84_resource_1;
  #line 15421 
  int emg_84_ret;
  #line 15422 
  unsigned long emg_84_size_cnt;
  #line 15423 
  int emg_repeat_cnt_call_84 = 1;
  #line 15424 
  int emg_repeat_cnt_main_84_0 = 1;
  #line 15425 
  int emg_repeat_cnt_main_84_1 = 1;
  #line 15427 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 15431 
  emg_84_ret = ldv_undef_int();
  #line 15432 
  emg_84_container = emg_alias_rx_rx_cmplt_task_ops;
  #line 15433 
  emg_84_ret = ldv_undef_int();
  #line 15435 
  __VERIFIER_assume(data->arg0 == emg_alias_rx_rx_cmplt_task_ops);
  #line 15437 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 15438 
    emg_84_container = data->arg0;
    #line 15439 
    ldv_free((void *)data);
  }
  #line 15444 
  emg_84_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 15445 
  emg_84_size_cnt = (unsigned long)ldv_undef_int();
  #line 15449 
  goto emg_main_84;
  #line 15453 
  return (void *)0;
  #line 15456 
  emg_call_84: 
               #line 15456 
  ;
  #line 15457 
  if (ldv_undef_int() != 0) {
    #line 15458 
    switch (ldv_undef_int()) {
      #line 15459 
      case 0: 
              #line 15459 
      ;
      #line 15461 
      emg_84_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 15461 
      emg_84_emg_param_1_2 = emg_84_emg_param_1_2;
      #line 15462 
      emg_84_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 15462 
      emg_84_emg_param_3_3 = emg_84_emg_param_3_3;
      #line 15466 
      emg_wrapper_rx_rx_cmplt_task_read(emg_84_resource_0,emg_84_emg_param_1_2,emg_84_size_cnt,emg_84_emg_param_3_3);
      #line 15470 
      ldv_free((void *)emg_84_emg_param_1_2);
      #line 15471 
      ldv_free((void *)emg_84_emg_param_3_3);
      #line 15473 
      break;
      #line 15475 
      case 1: 
              #line 15475 
      ;
      #line 15477 
      generic_file_llseek(emg_84_resource_0,emg_84_emg_param_1_0,emg_84_emg_param_2_1);
      #line 15479 
      break;
      #line 15481 
      case 2: 
              #line 15481 
      ;
      #line 15488 
      __VERIFIER_assume(emg_84_size_cnt <= 2147479552UL);
      #line 15489 
      emg_84_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 15489 
      emg_84_emg_param_1_4 = emg_84_emg_param_1_4;
      #line 15490 
      emg_84_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 15490 
      emg_84_emg_param_3_5 = emg_84_emg_param_3_5;
      #line 15494 
      if (emg_84_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 15495 
        (*(emg_84_container->write))(emg_84_resource_0,emg_84_emg_param_1_4,emg_84_size_cnt,emg_84_emg_param_3_5);
      #line 15500 
      ldv_free((void *)emg_84_emg_param_1_4);
      #line 15501 
      ldv_free((void *)emg_84_emg_param_3_5);
      #line 15503 
      break;
      #line 15505 
      default: 
               #line 15505 
      ;
      #line 15505 
      __VERIFIER_assume(0);
    }
    #line 15508 
    if (emg_repeat_cnt_call_84 > 0) {
      #line 15509 
      emg_repeat_cnt_call_84 --;
      #line 15511 
      goto emg_call_84;
    }
    else 
         #line 15513 
         __VERIFIER_assume(0);
  }
  else {
    #line 15519 
    if (emg_84_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 15520 
      (*(emg_84_container->release))(emg_84_resource_1,emg_84_resource_0);
    #line 15524 
    if (emg_repeat_cnt_main_84_0 > 0) {
      #line 15525 
      emg_repeat_cnt_main_84_0 --;
      #line 15527 
      goto emg_main_84;
    }
    else 
         #line 15529 
         __VERIFIER_assume(0);
  }
  #line 15535 
  return (void *)0;
  #line 15538 
  emg_main_84: 
               #line 15538 
  ;
  #line 15539 
  if (ldv_undef_int() != 0) {
    #line 15541 
    emg_84_ret = simple_open(emg_84_resource_1,emg_84_resource_0);
    #line 15546 
    emg_84_ret = ldv_filter_err_code(emg_84_ret);
    #line 15549 
    if (ldv_undef_int() != 0) {
      #line 15551 
      __VERIFIER_assume(emg_84_ret == 0);
      #line 15555 
      goto emg_call_84;
    }
    else {
      #line 15560 
      __VERIFIER_assume(emg_84_ret != 0);
      #line 15563 
      if (emg_repeat_cnt_main_84_1 > 0) {
        #line 15564 
        emg_repeat_cnt_main_84_1 --;
        #line 15566 
        goto emg_main_84;
      }
      else 
           #line 15568 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 15575 
       ldv_free((void *)emg_84_resource_0);
  #line 15583 
  return (void *)0;
}

#line 15588  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_rx_rx_defrag_end_ops(void *arg0)
{
  #line 15591 
  struct file_operations *emg_85_container;
  #line 15592 
  long long emg_85_emg_param_1_0;
  #line 15593 
  char *emg_85_emg_param_1_2;
  #line 15594 
  char *emg_85_emg_param_1_4;
  #line 15595 
  int emg_85_emg_param_2_1;
  #line 15596 
  long long *emg_85_emg_param_3_3;
  #line 15597 
  long long *emg_85_emg_param_3_5;
  #line 15598 
  struct file *emg_85_resource_0;
  #line 15599 
  struct inode *emg_85_resource_1;
  #line 15600 
  int emg_85_ret;
  #line 15601 
  unsigned long emg_85_size_cnt;
  #line 15602 
  int emg_repeat_cnt_main_85_0 = 1;
  #line 15603 
  int emg_repeat_cnt_call_85 = 1;
  #line 15604 
  int emg_repeat_cnt_main_85_1 = 1;
  #line 15606 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 15610 
  emg_85_ret = ldv_undef_int();
  #line 15611 
  emg_85_container = emg_alias_rx_rx_defrag_end_ops;
  #line 15612 
  emg_85_ret = ldv_undef_int();
  #line 15614 
  __VERIFIER_assume(data->arg0 == emg_alias_rx_rx_defrag_end_ops);
  #line 15616 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 15617 
    emg_85_container = data->arg0;
    #line 15618 
    ldv_free((void *)data);
  }
  #line 15623 
  emg_85_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 15624 
  emg_85_size_cnt = (unsigned long)ldv_undef_int();
  #line 15628 
  goto emg_main_85;
  #line 15632 
  return (void *)0;
  #line 15635 
  emg_call_85: 
               #line 15635 
  ;
  #line 15636 
  if (ldv_undef_int() != 0) {
    #line 15637 
    switch (ldv_undef_int()) {
      #line 15638 
      case 0: 
              #line 15638 
      ;
      #line 15640 
      emg_85_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 15640 
      emg_85_emg_param_1_2 = emg_85_emg_param_1_2;
      #line 15641 
      emg_85_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 15641 
      emg_85_emg_param_3_3 = emg_85_emg_param_3_3;
      #line 15645 
      emg_wrapper_rx_rx_defrag_end_read(emg_85_resource_0,emg_85_emg_param_1_2,emg_85_size_cnt,emg_85_emg_param_3_3);
      #line 15649 
      ldv_free((void *)emg_85_emg_param_1_2);
      #line 15650 
      ldv_free((void *)emg_85_emg_param_3_3);
      #line 15652 
      break;
      #line 15654 
      case 1: 
              #line 15654 
      ;
      #line 15656 
      generic_file_llseek(emg_85_resource_0,emg_85_emg_param_1_0,emg_85_emg_param_2_1);
      #line 15658 
      break;
      #line 15660 
      case 2: 
              #line 15660 
      ;
      #line 15667 
      __VERIFIER_assume(emg_85_size_cnt <= 2147479552UL);
      #line 15668 
      emg_85_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 15668 
      emg_85_emg_param_1_4 = emg_85_emg_param_1_4;
      #line 15669 
      emg_85_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 15669 
      emg_85_emg_param_3_5 = emg_85_emg_param_3_5;
      #line 15673 
      if (emg_85_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 15674 
        (*(emg_85_container->write))(emg_85_resource_0,emg_85_emg_param_1_4,emg_85_size_cnt,emg_85_emg_param_3_5);
      #line 15679 
      ldv_free((void *)emg_85_emg_param_1_4);
      #line 15680 
      ldv_free((void *)emg_85_emg_param_3_5);
      #line 15682 
      break;
      #line 15684 
      default: 
               #line 15684 
      ;
      #line 15684 
      __VERIFIER_assume(0);
    }
    #line 15687 
    if (emg_repeat_cnt_call_85 > 0) {
      #line 15688 
      emg_repeat_cnt_call_85 --;
      #line 15690 
      goto emg_call_85;
    }
    else 
         #line 15692 
         __VERIFIER_assume(0);
  }
  else {
    #line 15698 
    if (emg_85_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 15699 
      (*(emg_85_container->release))(emg_85_resource_1,emg_85_resource_0);
    #line 15703 
    if (emg_repeat_cnt_main_85_1 > 0) {
      #line 15704 
      emg_repeat_cnt_main_85_1 --;
      #line 15706 
      goto emg_main_85;
    }
    else 
         #line 15708 
         __VERIFIER_assume(0);
  }
  #line 15714 
  return (void *)0;
  #line 15717 
  emg_main_85: 
               #line 15717 
  ;
  #line 15718 
  if (ldv_undef_int() != 0) {
    #line 15720 
    emg_85_ret = simple_open(emg_85_resource_1,emg_85_resource_0);
    #line 15725 
    emg_85_ret = ldv_filter_err_code(emg_85_ret);
    #line 15728 
    if (ldv_undef_int() != 0) {
      #line 15730 
      __VERIFIER_assume(emg_85_ret == 0);
      #line 15734 
      goto emg_call_85;
    }
    else {
      #line 15739 
      __VERIFIER_assume(emg_85_ret != 0);
      #line 15742 
      if (emg_repeat_cnt_main_85_0 > 0) {
        #line 15743 
        emg_repeat_cnt_main_85_0 --;
        #line 15745 
        goto emg_main_85;
      }
      else 
           #line 15747 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 15754 
       ldv_free((void *)emg_85_resource_0);
  #line 15762 
  return (void *)0;
}

#line 15767  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_rx_rx_defrag_ops(void *arg0)
{
  #line 15770 
  struct file_operations *emg_86_container;
  #line 15771 
  long long emg_86_emg_param_1_0;
  #line 15772 
  char *emg_86_emg_param_1_2;
  #line 15773 
  char *emg_86_emg_param_1_4;
  #line 15774 
  int emg_86_emg_param_2_1;
  #line 15775 
  long long *emg_86_emg_param_3_3;
  #line 15776 
  long long *emg_86_emg_param_3_5;
  #line 15777 
  struct file *emg_86_resource_0;
  #line 15778 
  struct inode *emg_86_resource_1;
  #line 15779 
  int emg_86_ret;
  #line 15780 
  unsigned long emg_86_size_cnt;
  #line 15781 
  int emg_repeat_cnt_main_86_0 = 1;
  #line 15782 
  int emg_repeat_cnt_main_86_1 = 1;
  #line 15783 
  int emg_repeat_cnt_call_86 = 1;
  #line 15785 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 15789 
  emg_86_ret = ldv_undef_int();
  #line 15790 
  emg_86_container = emg_alias_rx_rx_defrag_ops;
  #line 15791 
  emg_86_ret = ldv_undef_int();
  #line 15793 
  __VERIFIER_assume(data->arg0 == emg_alias_rx_rx_defrag_ops);
  #line 15795 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 15796 
    emg_86_container = data->arg0;
    #line 15797 
    ldv_free((void *)data);
  }
  #line 15802 
  emg_86_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 15803 
  emg_86_size_cnt = (unsigned long)ldv_undef_int();
  #line 15807 
  goto emg_main_86;
  #line 15811 
  return (void *)0;
  #line 15814 
  emg_call_86: 
               #line 15814 
  ;
  #line 15815 
  if (ldv_undef_int() != 0) {
    #line 15816 
    switch (ldv_undef_int()) {
      #line 15817 
      case 0: 
              #line 15817 
      ;
      #line 15819 
      emg_86_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 15819 
      emg_86_emg_param_1_2 = emg_86_emg_param_1_2;
      #line 15820 
      emg_86_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 15820 
      emg_86_emg_param_3_3 = emg_86_emg_param_3_3;
      #line 15824 
      emg_wrapper_rx_rx_defrag_read(emg_86_resource_0,emg_86_emg_param_1_2,emg_86_size_cnt,emg_86_emg_param_3_3);
      #line 15828 
      ldv_free((void *)emg_86_emg_param_1_2);
      #line 15829 
      ldv_free((void *)emg_86_emg_param_3_3);
      #line 15831 
      break;
      #line 15833 
      case 1: 
              #line 15833 
      ;
      #line 15835 
      generic_file_llseek(emg_86_resource_0,emg_86_emg_param_1_0,emg_86_emg_param_2_1);
      #line 15837 
      break;
      #line 15839 
      case 2: 
              #line 15839 
      ;
      #line 15846 
      __VERIFIER_assume(emg_86_size_cnt <= 2147479552UL);
      #line 15847 
      emg_86_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 15847 
      emg_86_emg_param_1_4 = emg_86_emg_param_1_4;
      #line 15848 
      emg_86_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 15848 
      emg_86_emg_param_3_5 = emg_86_emg_param_3_5;
      #line 15852 
      if (emg_86_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 15853 
        (*(emg_86_container->write))(emg_86_resource_0,emg_86_emg_param_1_4,emg_86_size_cnt,emg_86_emg_param_3_5);
      #line 15858 
      ldv_free((void *)emg_86_emg_param_1_4);
      #line 15859 
      ldv_free((void *)emg_86_emg_param_3_5);
      #line 15861 
      break;
      #line 15863 
      default: 
               #line 15863 
      ;
      #line 15863 
      __VERIFIER_assume(0);
    }
    #line 15866 
    if (emg_repeat_cnt_call_86 > 0) {
      #line 15867 
      emg_repeat_cnt_call_86 --;
      #line 15869 
      goto emg_call_86;
    }
    else 
         #line 15871 
         __VERIFIER_assume(0);
  }
  else {
    #line 15877 
    if (emg_86_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 15878 
      (*(emg_86_container->release))(emg_86_resource_1,emg_86_resource_0);
    #line 15882 
    if (emg_repeat_cnt_main_86_0 > 0) {
      #line 15883 
      emg_repeat_cnt_main_86_0 --;
      #line 15885 
      goto emg_main_86;
    }
    else 
         #line 15887 
         __VERIFIER_assume(0);
  }
  #line 15893 
  return (void *)0;
  #line 15896 
  emg_main_86: 
               #line 15896 
  ;
  #line 15897 
  if (ldv_undef_int() != 0) {
    #line 15899 
    emg_86_ret = simple_open(emg_86_resource_1,emg_86_resource_0);
    #line 15904 
    emg_86_ret = ldv_filter_err_code(emg_86_ret);
    #line 15907 
    if (ldv_undef_int() != 0) {
      #line 15909 
      __VERIFIER_assume(emg_86_ret == 0);
      #line 15913 
      goto emg_call_86;
    }
    else {
      #line 15918 
      __VERIFIER_assume(emg_86_ret != 0);
      #line 15921 
      if (emg_repeat_cnt_main_86_1 > 0) {
        #line 15922 
        emg_repeat_cnt_main_86_1 --;
        #line 15924 
        goto emg_main_86;
      }
      else 
           #line 15926 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 15933 
       ldv_free((void *)emg_86_resource_0);
  #line 15941 
  return (void *)0;
}

#line 15946  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_rx_rx_done_ops(void *arg0)
{
  #line 15949 
  struct file_operations *emg_87_container;
  #line 15950 
  long long emg_87_emg_param_1_0;
  #line 15951 
  char *emg_87_emg_param_1_2;
  #line 15952 
  char *emg_87_emg_param_1_4;
  #line 15953 
  int emg_87_emg_param_2_1;
  #line 15954 
  long long *emg_87_emg_param_3_3;
  #line 15955 
  long long *emg_87_emg_param_3_5;
  #line 15956 
  struct file *emg_87_resource_0;
  #line 15957 
  struct inode *emg_87_resource_1;
  #line 15958 
  int emg_87_ret;
  #line 15959 
  unsigned long emg_87_size_cnt;
  #line 15960 
  int emg_repeat_cnt_main_87_1 = 1;
  #line 15961 
  int emg_repeat_cnt_main_87_0 = 1;
  #line 15962 
  int emg_repeat_cnt_call_87 = 1;
  #line 15964 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 15968 
  emg_87_ret = ldv_undef_int();
  #line 15969 
  emg_87_container = emg_alias_rx_rx_done_ops;
  #line 15970 
  emg_87_ret = ldv_undef_int();
  #line 15972 
  __VERIFIER_assume(data->arg0 == emg_alias_rx_rx_done_ops);
  #line 15974 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 15975 
    emg_87_container = data->arg0;
    #line 15976 
    ldv_free((void *)data);
  }
  #line 15981 
  emg_87_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 15982 
  emg_87_size_cnt = (unsigned long)ldv_undef_int();
  #line 15986 
  goto emg_main_87;
  #line 15990 
  return (void *)0;
  #line 15993 
  emg_call_87: 
               #line 15993 
  ;
  #line 15994 
  if (ldv_undef_int() != 0) {
    #line 15995 
    switch (ldv_undef_int()) {
      #line 15996 
      case 0: 
              #line 15996 
      ;
      #line 15998 
      emg_87_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 15998 
      emg_87_emg_param_1_2 = emg_87_emg_param_1_2;
      #line 15999 
      emg_87_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 15999 
      emg_87_emg_param_3_3 = emg_87_emg_param_3_3;
      #line 16003 
      emg_wrapper_rx_rx_done_read(emg_87_resource_0,emg_87_emg_param_1_2,emg_87_size_cnt,emg_87_emg_param_3_3);
      #line 16007 
      ldv_free((void *)emg_87_emg_param_1_2);
      #line 16008 
      ldv_free((void *)emg_87_emg_param_3_3);
      #line 16010 
      break;
      #line 16012 
      case 1: 
              #line 16012 
      ;
      #line 16014 
      generic_file_llseek(emg_87_resource_0,emg_87_emg_param_1_0,emg_87_emg_param_2_1);
      #line 16016 
      break;
      #line 16018 
      case 2: 
              #line 16018 
      ;
      #line 16025 
      __VERIFIER_assume(emg_87_size_cnt <= 2147479552UL);
      #line 16026 
      emg_87_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 16026 
      emg_87_emg_param_1_4 = emg_87_emg_param_1_4;
      #line 16027 
      emg_87_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 16027 
      emg_87_emg_param_3_5 = emg_87_emg_param_3_5;
      #line 16031 
      if (emg_87_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 16032 
        (*(emg_87_container->write))(emg_87_resource_0,emg_87_emg_param_1_4,emg_87_size_cnt,emg_87_emg_param_3_5);
      #line 16037 
      ldv_free((void *)emg_87_emg_param_1_4);
      #line 16038 
      ldv_free((void *)emg_87_emg_param_3_5);
      #line 16040 
      break;
      #line 16042 
      default: 
               #line 16042 
      ;
      #line 16042 
      __VERIFIER_assume(0);
    }
    #line 16045 
    if (emg_repeat_cnt_call_87 > 0) {
      #line 16046 
      emg_repeat_cnt_call_87 --;
      #line 16048 
      goto emg_call_87;
    }
    else 
         #line 16050 
         __VERIFIER_assume(0);
  }
  else {
    #line 16056 
    if (emg_87_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 16057 
      (*(emg_87_container->release))(emg_87_resource_1,emg_87_resource_0);
    #line 16061 
    if (emg_repeat_cnt_main_87_1 > 0) {
      #line 16062 
      emg_repeat_cnt_main_87_1 --;
      #line 16064 
      goto emg_main_87;
    }
    else 
         #line 16066 
         __VERIFIER_assume(0);
  }
  #line 16072 
  return (void *)0;
  #line 16075 
  emg_main_87: 
               #line 16075 
  ;
  #line 16076 
  if (ldv_undef_int() != 0) {
    #line 16078 
    emg_87_ret = simple_open(emg_87_resource_1,emg_87_resource_0);
    #line 16083 
    emg_87_ret = ldv_filter_err_code(emg_87_ret);
    #line 16086 
    if (ldv_undef_int() != 0) {
      #line 16088 
      __VERIFIER_assume(emg_87_ret == 0);
      #line 16092 
      goto emg_call_87;
    }
    else {
      #line 16097 
      __VERIFIER_assume(emg_87_ret != 0);
      #line 16100 
      if (emg_repeat_cnt_main_87_0 > 0) {
        #line 16101 
        emg_repeat_cnt_main_87_0 --;
        #line 16103 
        goto emg_main_87;
      }
      else 
           #line 16105 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 16112 
       ldv_free((void *)emg_87_resource_0);
  #line 16120 
  return (void *)0;
}

#line 16125  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_rx_rx_dropped_frame_ops(void *arg0)
{
  #line 16128 
  struct file_operations *emg_88_container;
  #line 16129 
  long long emg_88_emg_param_1_0;
  #line 16130 
  char *emg_88_emg_param_1_2;
  #line 16131 
  char *emg_88_emg_param_1_4;
  #line 16132 
  int emg_88_emg_param_2_1;
  #line 16133 
  long long *emg_88_emg_param_3_3;
  #line 16134 
  long long *emg_88_emg_param_3_5;
  #line 16135 
  struct file *emg_88_resource_0;
  #line 16136 
  struct inode *emg_88_resource_1;
  #line 16137 
  int emg_88_ret;
  #line 16138 
  unsigned long emg_88_size_cnt;
  #line 16139 
  int emg_repeat_cnt_call_88 = 1;
  #line 16140 
  int emg_repeat_cnt_main_88_1 = 1;
  #line 16141 
  int emg_repeat_cnt_main_88_0 = 1;
  #line 16143 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 16147 
  emg_88_ret = ldv_undef_int();
  #line 16148 
  emg_88_container = emg_alias_rx_rx_dropped_frame_ops;
  #line 16149 
  emg_88_ret = ldv_undef_int();
  #line 16151 
  __VERIFIER_assume(data->arg0 == emg_alias_rx_rx_dropped_frame_ops);
  #line 16153 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 16154 
    emg_88_container = data->arg0;
    #line 16155 
    ldv_free((void *)data);
  }
  #line 16160 
  emg_88_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 16161 
  emg_88_size_cnt = (unsigned long)ldv_undef_int();
  #line 16165 
  goto emg_main_88;
  #line 16169 
  return (void *)0;
  #line 16172 
  emg_call_88: 
               #line 16172 
  ;
  #line 16173 
  if (ldv_undef_int() != 0) {
    #line 16174 
    switch (ldv_undef_int()) {
      #line 16175 
      case 0: 
              #line 16175 
      ;
      #line 16177 
      emg_88_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 16177 
      emg_88_emg_param_1_2 = emg_88_emg_param_1_2;
      #line 16178 
      emg_88_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 16178 
      emg_88_emg_param_3_3 = emg_88_emg_param_3_3;
      #line 16182 
      emg_wrapper_rx_rx_dropped_frame_read(emg_88_resource_0,emg_88_emg_param_1_2,emg_88_size_cnt,emg_88_emg_param_3_3);
      #line 16186 
      ldv_free((void *)emg_88_emg_param_1_2);
      #line 16187 
      ldv_free((void *)emg_88_emg_param_3_3);
      #line 16189 
      break;
      #line 16191 
      case 1: 
              #line 16191 
      ;
      #line 16193 
      generic_file_llseek(emg_88_resource_0,emg_88_emg_param_1_0,emg_88_emg_param_2_1);
      #line 16195 
      break;
      #line 16197 
      case 2: 
              #line 16197 
      ;
      #line 16204 
      __VERIFIER_assume(emg_88_size_cnt <= 2147479552UL);
      #line 16205 
      emg_88_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 16205 
      emg_88_emg_param_1_4 = emg_88_emg_param_1_4;
      #line 16206 
      emg_88_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 16206 
      emg_88_emg_param_3_5 = emg_88_emg_param_3_5;
      #line 16210 
      if (emg_88_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 16211 
        (*(emg_88_container->write))(emg_88_resource_0,emg_88_emg_param_1_4,emg_88_size_cnt,emg_88_emg_param_3_5);
      #line 16216 
      ldv_free((void *)emg_88_emg_param_1_4);
      #line 16217 
      ldv_free((void *)emg_88_emg_param_3_5);
      #line 16219 
      break;
      #line 16221 
      default: 
               #line 16221 
      ;
      #line 16221 
      __VERIFIER_assume(0);
    }
    #line 16224 
    if (emg_repeat_cnt_call_88 > 0) {
      #line 16225 
      emg_repeat_cnt_call_88 --;
      #line 16227 
      goto emg_call_88;
    }
    else 
         #line 16229 
         __VERIFIER_assume(0);
  }
  else {
    #line 16235 
    if (emg_88_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 16236 
      (*(emg_88_container->release))(emg_88_resource_1,emg_88_resource_0);
    #line 16240 
    if (emg_repeat_cnt_main_88_1 > 0) {
      #line 16241 
      emg_repeat_cnt_main_88_1 --;
      #line 16243 
      goto emg_main_88;
    }
    else 
         #line 16245 
         __VERIFIER_assume(0);
  }
  #line 16251 
  return (void *)0;
  #line 16254 
  emg_main_88: 
               #line 16254 
  ;
  #line 16255 
  if (ldv_undef_int() != 0) {
    #line 16257 
    emg_88_ret = simple_open(emg_88_resource_1,emg_88_resource_0);
    #line 16262 
    emg_88_ret = ldv_filter_err_code(emg_88_ret);
    #line 16265 
    if (ldv_undef_int() != 0) {
      #line 16267 
      __VERIFIER_assume(emg_88_ret == 0);
      #line 16271 
      goto emg_call_88;
    }
    else {
      #line 16276 
      __VERIFIER_assume(emg_88_ret != 0);
      #line 16279 
      if (emg_repeat_cnt_main_88_0 > 0) {
        #line 16280 
        emg_repeat_cnt_main_88_0 --;
        #line 16282 
        goto emg_main_88;
      }
      else 
           #line 16284 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 16291 
       ldv_free((void *)emg_88_resource_0);
  #line 16299 
  return (void *)0;
}

#line 16304  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_rx_rx_hdr_overflow_ops(void *arg0)
{
  #line 16307 
  struct file_operations *emg_89_container;
  #line 16308 
  long long emg_89_emg_param_1_0;
  #line 16309 
  char *emg_89_emg_param_1_2;
  #line 16310 
  char *emg_89_emg_param_1_4;
  #line 16311 
  int emg_89_emg_param_2_1;
  #line 16312 
  long long *emg_89_emg_param_3_3;
  #line 16313 
  long long *emg_89_emg_param_3_5;
  #line 16314 
  struct file *emg_89_resource_0;
  #line 16315 
  struct inode *emg_89_resource_1;
  #line 16316 
  int emg_89_ret;
  #line 16317 
  unsigned long emg_89_size_cnt;
  #line 16318 
  int emg_repeat_cnt_main_89_1 = 1;
  #line 16319 
  int emg_repeat_cnt_call_89 = 1;
  #line 16320 
  int emg_repeat_cnt_main_89_0 = 1;
  #line 16322 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 16326 
  emg_89_ret = ldv_undef_int();
  #line 16327 
  emg_89_container = emg_alias_rx_rx_hdr_overflow_ops;
  #line 16328 
  emg_89_ret = ldv_undef_int();
  #line 16330 
  __VERIFIER_assume(data->arg0 == emg_alias_rx_rx_hdr_overflow_ops);
  #line 16332 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 16333 
    emg_89_container = data->arg0;
    #line 16334 
    ldv_free((void *)data);
  }
  #line 16339 
  emg_89_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 16340 
  emg_89_size_cnt = (unsigned long)ldv_undef_int();
  #line 16344 
  goto emg_main_89;
  #line 16348 
  return (void *)0;
  #line 16351 
  emg_call_89: 
               #line 16351 
  ;
  #line 16352 
  if (ldv_undef_int() != 0) {
    #line 16353 
    switch (ldv_undef_int()) {
      #line 16354 
      case 0: 
              #line 16354 
      ;
      #line 16356 
      emg_89_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 16356 
      emg_89_emg_param_1_2 = emg_89_emg_param_1_2;
      #line 16357 
      emg_89_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 16357 
      emg_89_emg_param_3_3 = emg_89_emg_param_3_3;
      #line 16361 
      emg_wrapper_rx_rx_hdr_overflow_read(emg_89_resource_0,emg_89_emg_param_1_2,emg_89_size_cnt,emg_89_emg_param_3_3);
      #line 16365 
      ldv_free((void *)emg_89_emg_param_1_2);
      #line 16366 
      ldv_free((void *)emg_89_emg_param_3_3);
      #line 16368 
      break;
      #line 16370 
      case 1: 
              #line 16370 
      ;
      #line 16372 
      generic_file_llseek(emg_89_resource_0,emg_89_emg_param_1_0,emg_89_emg_param_2_1);
      #line 16374 
      break;
      #line 16376 
      case 2: 
              #line 16376 
      ;
      #line 16383 
      __VERIFIER_assume(emg_89_size_cnt <= 2147479552UL);
      #line 16384 
      emg_89_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 16384 
      emg_89_emg_param_1_4 = emg_89_emg_param_1_4;
      #line 16385 
      emg_89_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 16385 
      emg_89_emg_param_3_5 = emg_89_emg_param_3_5;
      #line 16389 
      if (emg_89_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 16390 
        (*(emg_89_container->write))(emg_89_resource_0,emg_89_emg_param_1_4,emg_89_size_cnt,emg_89_emg_param_3_5);
      #line 16395 
      ldv_free((void *)emg_89_emg_param_1_4);
      #line 16396 
      ldv_free((void *)emg_89_emg_param_3_5);
      #line 16398 
      break;
      #line 16400 
      default: 
               #line 16400 
      ;
      #line 16400 
      __VERIFIER_assume(0);
    }
    #line 16403 
    if (emg_repeat_cnt_call_89 > 0) {
      #line 16404 
      emg_repeat_cnt_call_89 --;
      #line 16406 
      goto emg_call_89;
    }
    else 
         #line 16408 
         __VERIFIER_assume(0);
  }
  else {
    #line 16414 
    if (emg_89_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 16415 
      (*(emg_89_container->release))(emg_89_resource_1,emg_89_resource_0);
    #line 16419 
    if (emg_repeat_cnt_main_89_1 > 0) {
      #line 16420 
      emg_repeat_cnt_main_89_1 --;
      #line 16422 
      goto emg_main_89;
    }
    else 
         #line 16424 
         __VERIFIER_assume(0);
  }
  #line 16430 
  return (void *)0;
  #line 16433 
  emg_main_89: 
               #line 16433 
  ;
  #line 16434 
  if (ldv_undef_int() != 0) {
    #line 16436 
    emg_89_ret = simple_open(emg_89_resource_1,emg_89_resource_0);
    #line 16441 
    emg_89_ret = ldv_filter_err_code(emg_89_ret);
    #line 16444 
    if (ldv_undef_int() != 0) {
      #line 16446 
      __VERIFIER_assume(emg_89_ret == 0);
      #line 16450 
      goto emg_call_89;
    }
    else {
      #line 16455 
      __VERIFIER_assume(emg_89_ret != 0);
      #line 16458 
      if (emg_repeat_cnt_main_89_0 > 0) {
        #line 16459 
        emg_repeat_cnt_main_89_0 --;
        #line 16461 
        goto emg_main_89;
      }
      else 
           #line 16463 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 16470 
       ldv_free((void *)emg_89_resource_0);
  #line 16478 
  return (void *)0;
}

#line 16483  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_rx_rx_out_of_mpdu_nodes_ops(void *arg0)
{
  #line 16486 
  struct file_operations *emg_90_container;
  #line 16487 
  long long emg_90_emg_param_1_0;
  #line 16488 
  char *emg_90_emg_param_1_2;
  #line 16489 
  char *emg_90_emg_param_1_4;
  #line 16490 
  int emg_90_emg_param_2_1;
  #line 16491 
  long long *emg_90_emg_param_3_3;
  #line 16492 
  long long *emg_90_emg_param_3_5;
  #line 16493 
  struct file *emg_90_resource_0;
  #line 16494 
  struct inode *emg_90_resource_1;
  #line 16495 
  int emg_90_ret;
  #line 16496 
  unsigned long emg_90_size_cnt;
  #line 16497 
  int emg_repeat_cnt_main_90_0 = 1;
  #line 16498 
  int emg_repeat_cnt_call_90 = 1;
  #line 16499 
  int emg_repeat_cnt_main_90_1 = 1;
  #line 16501 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 16505 
  emg_90_ret = ldv_undef_int();
  #line 16506 
  emg_90_container = emg_alias_rx_rx_out_of_mpdu_nodes_ops;
  #line 16507 
  emg_90_ret = ldv_undef_int();
  #line 16509 
  __VERIFIER_assume(data->arg0 == emg_alias_rx_rx_out_of_mpdu_nodes_ops);
  #line 16511 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 16512 
    emg_90_container = data->arg0;
    #line 16513 
    ldv_free((void *)data);
  }
  #line 16518 
  emg_90_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 16519 
  emg_90_size_cnt = (unsigned long)ldv_undef_int();
  #line 16523 
  goto emg_main_90;
  #line 16527 
  return (void *)0;
  #line 16530 
  emg_call_90: 
               #line 16530 
  ;
  #line 16531 
  if (ldv_undef_int() != 0) {
    #line 16532 
    switch (ldv_undef_int()) {
      #line 16533 
      case 0: 
              #line 16533 
      ;
      #line 16535 
      emg_90_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 16535 
      emg_90_emg_param_1_2 = emg_90_emg_param_1_2;
      #line 16536 
      emg_90_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 16536 
      emg_90_emg_param_3_3 = emg_90_emg_param_3_3;
      #line 16540 
      emg_wrapper_rx_rx_out_of_mpdu_nodes_read(emg_90_resource_0,emg_90_emg_param_1_2,emg_90_size_cnt,emg_90_emg_param_3_3);
      #line 16544 
      ldv_free((void *)emg_90_emg_param_1_2);
      #line 16545 
      ldv_free((void *)emg_90_emg_param_3_3);
      #line 16547 
      break;
      #line 16549 
      case 1: 
              #line 16549 
      ;
      #line 16551 
      generic_file_llseek(emg_90_resource_0,emg_90_emg_param_1_0,emg_90_emg_param_2_1);
      #line 16553 
      break;
      #line 16555 
      case 2: 
              #line 16555 
      ;
      #line 16562 
      __VERIFIER_assume(emg_90_size_cnt <= 2147479552UL);
      #line 16563 
      emg_90_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 16563 
      emg_90_emg_param_1_4 = emg_90_emg_param_1_4;
      #line 16564 
      emg_90_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 16564 
      emg_90_emg_param_3_5 = emg_90_emg_param_3_5;
      #line 16568 
      if (emg_90_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 16569 
        (*(emg_90_container->write))(emg_90_resource_0,emg_90_emg_param_1_4,emg_90_size_cnt,emg_90_emg_param_3_5);
      #line 16574 
      ldv_free((void *)emg_90_emg_param_1_4);
      #line 16575 
      ldv_free((void *)emg_90_emg_param_3_5);
      #line 16577 
      break;
      #line 16579 
      default: 
               #line 16579 
      ;
      #line 16579 
      __VERIFIER_assume(0);
    }
    #line 16582 
    if (emg_repeat_cnt_call_90 > 0) {
      #line 16583 
      emg_repeat_cnt_call_90 --;
      #line 16585 
      goto emg_call_90;
    }
    else 
         #line 16587 
         __VERIFIER_assume(0);
  }
  else {
    #line 16593 
    if (emg_90_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 16594 
      (*(emg_90_container->release))(emg_90_resource_1,emg_90_resource_0);
    #line 16598 
    if (emg_repeat_cnt_main_90_0 > 0) {
      #line 16599 
      emg_repeat_cnt_main_90_0 --;
      #line 16601 
      goto emg_main_90;
    }
    else 
         #line 16603 
         __VERIFIER_assume(0);
  }
  #line 16609 
  return (void *)0;
  #line 16612 
  emg_main_90: 
               #line 16612 
  ;
  #line 16613 
  if (ldv_undef_int() != 0) {
    #line 16615 
    emg_90_ret = simple_open(emg_90_resource_1,emg_90_resource_0);
    #line 16620 
    emg_90_ret = ldv_filter_err_code(emg_90_ret);
    #line 16623 
    if (ldv_undef_int() != 0) {
      #line 16625 
      __VERIFIER_assume(emg_90_ret == 0);
      #line 16629 
      goto emg_call_90;
    }
    else {
      #line 16634 
      __VERIFIER_assume(emg_90_ret != 0);
      #line 16637 
      if (emg_repeat_cnt_main_90_1 > 0) {
        #line 16638 
        emg_repeat_cnt_main_90_1 --;
        #line 16640 
        goto emg_main_90;
      }
      else 
           #line 16642 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 16649 
       ldv_free((void *)emg_90_resource_0);
  #line 16657 
  return (void *)0;
}

#line 16662  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_rx_rx_phy_hdr_ops(void *arg0)
{
  #line 16665 
  struct file_operations *emg_91_container;
  #line 16666 
  long long emg_91_emg_param_1_0;
  #line 16667 
  char *emg_91_emg_param_1_2;
  #line 16668 
  char *emg_91_emg_param_1_4;
  #line 16669 
  int emg_91_emg_param_2_1;
  #line 16670 
  long long *emg_91_emg_param_3_3;
  #line 16671 
  long long *emg_91_emg_param_3_5;
  #line 16672 
  struct file *emg_91_resource_0;
  #line 16673 
  struct inode *emg_91_resource_1;
  #line 16674 
  int emg_91_ret;
  #line 16675 
  unsigned long emg_91_size_cnt;
  #line 16676 
  int emg_repeat_cnt_call_91 = 1;
  #line 16677 
  int emg_repeat_cnt_main_91_1 = 1;
  #line 16678 
  int emg_repeat_cnt_main_91_0 = 1;
  #line 16680 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 16684 
  emg_91_ret = ldv_undef_int();
  #line 16685 
  emg_91_container = emg_alias_rx_rx_phy_hdr_ops;
  #line 16686 
  emg_91_ret = ldv_undef_int();
  #line 16688 
  __VERIFIER_assume(data->arg0 == emg_alias_rx_rx_phy_hdr_ops);
  #line 16690 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 16691 
    emg_91_container = data->arg0;
    #line 16692 
    ldv_free((void *)data);
  }
  #line 16697 
  emg_91_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 16698 
  emg_91_size_cnt = (unsigned long)ldv_undef_int();
  #line 16702 
  goto emg_main_91;
  #line 16706 
  return (void *)0;
  #line 16709 
  emg_call_91: 
               #line 16709 
  ;
  #line 16710 
  if (ldv_undef_int() != 0) {
    #line 16711 
    switch (ldv_undef_int()) {
      #line 16712 
      case 0: 
              #line 16712 
      ;
      #line 16714 
      emg_91_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 16714 
      emg_91_emg_param_1_2 = emg_91_emg_param_1_2;
      #line 16715 
      emg_91_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 16715 
      emg_91_emg_param_3_3 = emg_91_emg_param_3_3;
      #line 16719 
      emg_wrapper_rx_rx_phy_hdr_read(emg_91_resource_0,emg_91_emg_param_1_2,emg_91_size_cnt,emg_91_emg_param_3_3);
      #line 16723 
      ldv_free((void *)emg_91_emg_param_1_2);
      #line 16724 
      ldv_free((void *)emg_91_emg_param_3_3);
      #line 16726 
      break;
      #line 16728 
      case 1: 
              #line 16728 
      ;
      #line 16730 
      generic_file_llseek(emg_91_resource_0,emg_91_emg_param_1_0,emg_91_emg_param_2_1);
      #line 16732 
      break;
      #line 16734 
      case 2: 
              #line 16734 
      ;
      #line 16741 
      __VERIFIER_assume(emg_91_size_cnt <= 2147479552UL);
      #line 16742 
      emg_91_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 16742 
      emg_91_emg_param_1_4 = emg_91_emg_param_1_4;
      #line 16743 
      emg_91_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 16743 
      emg_91_emg_param_3_5 = emg_91_emg_param_3_5;
      #line 16747 
      if (emg_91_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 16748 
        (*(emg_91_container->write))(emg_91_resource_0,emg_91_emg_param_1_4,emg_91_size_cnt,emg_91_emg_param_3_5);
      #line 16753 
      ldv_free((void *)emg_91_emg_param_1_4);
      #line 16754 
      ldv_free((void *)emg_91_emg_param_3_5);
      #line 16756 
      break;
      #line 16758 
      default: 
               #line 16758 
      ;
      #line 16758 
      __VERIFIER_assume(0);
    }
    #line 16761 
    if (emg_repeat_cnt_call_91 > 0) {
      #line 16762 
      emg_repeat_cnt_call_91 --;
      #line 16764 
      goto emg_call_91;
    }
    else 
         #line 16766 
         __VERIFIER_assume(0);
  }
  else {
    #line 16772 
    if (emg_91_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 16773 
      (*(emg_91_container->release))(emg_91_resource_1,emg_91_resource_0);
    #line 16777 
    if (emg_repeat_cnt_main_91_0 > 0) {
      #line 16778 
      emg_repeat_cnt_main_91_0 --;
      #line 16780 
      goto emg_main_91;
    }
    else 
         #line 16782 
         __VERIFIER_assume(0);
  }
  #line 16788 
  return (void *)0;
  #line 16791 
  emg_main_91: 
               #line 16791 
  ;
  #line 16792 
  if (ldv_undef_int() != 0) {
    #line 16794 
    emg_91_ret = simple_open(emg_91_resource_1,emg_91_resource_0);
    #line 16799 
    emg_91_ret = ldv_filter_err_code(emg_91_ret);
    #line 16802 
    if (ldv_undef_int() != 0) {
      #line 16804 
      __VERIFIER_assume(emg_91_ret == 0);
      #line 16808 
      goto emg_call_91;
    }
    else {
      #line 16813 
      __VERIFIER_assume(emg_91_ret != 0);
      #line 16816 
      if (emg_repeat_cnt_main_91_1 > 0) {
        #line 16817 
        emg_repeat_cnt_main_91_1 --;
        #line 16819 
        goto emg_main_91;
      }
      else 
           #line 16821 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 16828 
       ldv_free((void *)emg_91_resource_0);
  #line 16836 
  return (void *)0;
}

#line 16841  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_rx_rx_pre_complt_ops(void *arg0)
{
  #line 16844 
  struct file_operations *emg_92_container;
  #line 16845 
  long long emg_92_emg_param_1_0;
  #line 16846 
  char *emg_92_emg_param_1_2;
  #line 16847 
  char *emg_92_emg_param_1_4;
  #line 16848 
  int emg_92_emg_param_2_1;
  #line 16849 
  long long *emg_92_emg_param_3_3;
  #line 16850 
  long long *emg_92_emg_param_3_5;
  #line 16851 
  struct file *emg_92_resource_0;
  #line 16852 
  struct inode *emg_92_resource_1;
  #line 16853 
  int emg_92_ret;
  #line 16854 
  unsigned long emg_92_size_cnt;
  #line 16855 
  int emg_repeat_cnt_call_92 = 1;
  #line 16856 
  int emg_repeat_cnt_main_92_0 = 1;
  #line 16857 
  int emg_repeat_cnt_main_92_1 = 1;
  #line 16859 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 16863 
  emg_92_ret = ldv_undef_int();
  #line 16864 
  emg_92_container = emg_alias_rx_rx_pre_complt_ops;
  #line 16865 
  emg_92_ret = ldv_undef_int();
  #line 16867 
  __VERIFIER_assume(data->arg0 == emg_alias_rx_rx_pre_complt_ops);
  #line 16869 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 16870 
    emg_92_container = data->arg0;
    #line 16871 
    ldv_free((void *)data);
  }
  #line 16876 
  emg_92_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 16877 
  emg_92_size_cnt = (unsigned long)ldv_undef_int();
  #line 16881 
  goto emg_main_92;
  #line 16885 
  return (void *)0;
  #line 16888 
  emg_call_92: 
               #line 16888 
  ;
  #line 16889 
  if (ldv_undef_int() != 0) {
    #line 16890 
    switch (ldv_undef_int()) {
      #line 16891 
      case 0: 
              #line 16891 
      ;
      #line 16893 
      emg_92_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 16893 
      emg_92_emg_param_1_2 = emg_92_emg_param_1_2;
      #line 16894 
      emg_92_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 16894 
      emg_92_emg_param_3_3 = emg_92_emg_param_3_3;
      #line 16898 
      emg_wrapper_rx_rx_pre_complt_read(emg_92_resource_0,emg_92_emg_param_1_2,emg_92_size_cnt,emg_92_emg_param_3_3);
      #line 16902 
      ldv_free((void *)emg_92_emg_param_1_2);
      #line 16903 
      ldv_free((void *)emg_92_emg_param_3_3);
      #line 16905 
      break;
      #line 16907 
      case 1: 
              #line 16907 
      ;
      #line 16909 
      generic_file_llseek(emg_92_resource_0,emg_92_emg_param_1_0,emg_92_emg_param_2_1);
      #line 16911 
      break;
      #line 16913 
      case 2: 
              #line 16913 
      ;
      #line 16920 
      __VERIFIER_assume(emg_92_size_cnt <= 2147479552UL);
      #line 16921 
      emg_92_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 16921 
      emg_92_emg_param_1_4 = emg_92_emg_param_1_4;
      #line 16922 
      emg_92_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 16922 
      emg_92_emg_param_3_5 = emg_92_emg_param_3_5;
      #line 16926 
      if (emg_92_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 16927 
        (*(emg_92_container->write))(emg_92_resource_0,emg_92_emg_param_1_4,emg_92_size_cnt,emg_92_emg_param_3_5);
      #line 16932 
      ldv_free((void *)emg_92_emg_param_1_4);
      #line 16933 
      ldv_free((void *)emg_92_emg_param_3_5);
      #line 16935 
      break;
      #line 16937 
      default: 
               #line 16937 
      ;
      #line 16937 
      __VERIFIER_assume(0);
    }
    #line 16940 
    if (emg_repeat_cnt_call_92 > 0) {
      #line 16941 
      emg_repeat_cnt_call_92 --;
      #line 16943 
      goto emg_call_92;
    }
    else 
         #line 16945 
         __VERIFIER_assume(0);
  }
  else {
    #line 16951 
    if (emg_92_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 16952 
      (*(emg_92_container->release))(emg_92_resource_1,emg_92_resource_0);
    #line 16956 
    if (emg_repeat_cnt_main_92_0 > 0) {
      #line 16957 
      emg_repeat_cnt_main_92_0 --;
      #line 16959 
      goto emg_main_92;
    }
    else 
         #line 16961 
         __VERIFIER_assume(0);
  }
  #line 16967 
  return (void *)0;
  #line 16970 
  emg_main_92: 
               #line 16970 
  ;
  #line 16971 
  if (ldv_undef_int() != 0) {
    #line 16973 
    emg_92_ret = simple_open(emg_92_resource_1,emg_92_resource_0);
    #line 16978 
    emg_92_ret = ldv_filter_err_code(emg_92_ret);
    #line 16981 
    if (ldv_undef_int() != 0) {
      #line 16983 
      __VERIFIER_assume(emg_92_ret == 0);
      #line 16987 
      goto emg_call_92;
    }
    else {
      #line 16992 
      __VERIFIER_assume(emg_92_ret != 0);
      #line 16995 
      if (emg_repeat_cnt_main_92_1 > 0) {
        #line 16996 
        emg_repeat_cnt_main_92_1 --;
        #line 16998 
        goto emg_main_92;
      }
      else 
           #line 17000 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 17007 
       ldv_free((void *)emg_92_resource_0);
  #line 17015 
  return (void *)0;
}

#line 17020  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_rx_rx_rts_timeout_ops(void *arg0)
{
  #line 17023 
  struct file_operations *emg_93_container;
  #line 17024 
  long long emg_93_emg_param_1_0;
  #line 17025 
  char *emg_93_emg_param_1_2;
  #line 17026 
  char *emg_93_emg_param_1_4;
  #line 17027 
  int emg_93_emg_param_2_1;
  #line 17028 
  long long *emg_93_emg_param_3_3;
  #line 17029 
  long long *emg_93_emg_param_3_5;
  #line 17030 
  struct file *emg_93_resource_0;
  #line 17031 
  struct inode *emg_93_resource_1;
  #line 17032 
  int emg_93_ret;
  #line 17033 
  unsigned long emg_93_size_cnt;
  #line 17034 
  int emg_repeat_cnt_call_93 = 1;
  #line 17035 
  int emg_repeat_cnt_main_93_1 = 1;
  #line 17036 
  int emg_repeat_cnt_main_93_0 = 1;
  #line 17038 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 17042 
  emg_93_ret = ldv_undef_int();
  #line 17043 
  emg_93_container = emg_alias_rx_rx_rts_timeout_ops;
  #line 17044 
  emg_93_ret = ldv_undef_int();
  #line 17046 
  __VERIFIER_assume(data->arg0 == emg_alias_rx_rx_rts_timeout_ops);
  #line 17048 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 17049 
    emg_93_container = data->arg0;
    #line 17050 
    ldv_free((void *)data);
  }
  #line 17055 
  emg_93_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 17056 
  emg_93_size_cnt = (unsigned long)ldv_undef_int();
  #line 17060 
  goto emg_main_93;
  #line 17064 
  return (void *)0;
  #line 17067 
  emg_call_93: 
               #line 17067 
  ;
  #line 17068 
  if (ldv_undef_int() != 0) {
    #line 17069 
    switch (ldv_undef_int()) {
      #line 17070 
      case 0: 
              #line 17070 
      ;
      #line 17072 
      emg_93_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 17072 
      emg_93_emg_param_1_2 = emg_93_emg_param_1_2;
      #line 17073 
      emg_93_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 17073 
      emg_93_emg_param_3_3 = emg_93_emg_param_3_3;
      #line 17077 
      emg_wrapper_rx_rx_rts_timeout_read(emg_93_resource_0,emg_93_emg_param_1_2,emg_93_size_cnt,emg_93_emg_param_3_3);
      #line 17081 
      ldv_free((void *)emg_93_emg_param_1_2);
      #line 17082 
      ldv_free((void *)emg_93_emg_param_3_3);
      #line 17084 
      break;
      #line 17086 
      case 1: 
              #line 17086 
      ;
      #line 17088 
      generic_file_llseek(emg_93_resource_0,emg_93_emg_param_1_0,emg_93_emg_param_2_1);
      #line 17090 
      break;
      #line 17092 
      case 2: 
              #line 17092 
      ;
      #line 17099 
      __VERIFIER_assume(emg_93_size_cnt <= 2147479552UL);
      #line 17100 
      emg_93_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 17100 
      emg_93_emg_param_1_4 = emg_93_emg_param_1_4;
      #line 17101 
      emg_93_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 17101 
      emg_93_emg_param_3_5 = emg_93_emg_param_3_5;
      #line 17105 
      if (emg_93_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 17106 
        (*(emg_93_container->write))(emg_93_resource_0,emg_93_emg_param_1_4,emg_93_size_cnt,emg_93_emg_param_3_5);
      #line 17111 
      ldv_free((void *)emg_93_emg_param_1_4);
      #line 17112 
      ldv_free((void *)emg_93_emg_param_3_5);
      #line 17114 
      break;
      #line 17116 
      default: 
               #line 17116 
      ;
      #line 17116 
      __VERIFIER_assume(0);
    }
    #line 17119 
    if (emg_repeat_cnt_call_93 > 0) {
      #line 17120 
      emg_repeat_cnt_call_93 --;
      #line 17122 
      goto emg_call_93;
    }
    else 
         #line 17124 
         __VERIFIER_assume(0);
  }
  else {
    #line 17130 
    if (emg_93_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 17131 
      (*(emg_93_container->release))(emg_93_resource_1,emg_93_resource_0);
    #line 17135 
    if (emg_repeat_cnt_main_93_0 > 0) {
      #line 17136 
      emg_repeat_cnt_main_93_0 --;
      #line 17138 
      goto emg_main_93;
    }
    else 
         #line 17140 
         __VERIFIER_assume(0);
  }
  #line 17146 
  return (void *)0;
  #line 17149 
  emg_main_93: 
               #line 17149 
  ;
  #line 17150 
  if (ldv_undef_int() != 0) {
    #line 17152 
    emg_93_ret = simple_open(emg_93_resource_1,emg_93_resource_0);
    #line 17157 
    emg_93_ret = ldv_filter_err_code(emg_93_ret);
    #line 17160 
    if (ldv_undef_int() != 0) {
      #line 17162 
      __VERIFIER_assume(emg_93_ret == 0);
      #line 17166 
      goto emg_call_93;
    }
    else {
      #line 17171 
      __VERIFIER_assume(emg_93_ret != 0);
      #line 17174 
      if (emg_repeat_cnt_main_93_1 > 0) {
        #line 17175 
        emg_repeat_cnt_main_93_1 --;
        #line 17177 
        goto emg_main_93;
      }
      else 
           #line 17179 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 17186 
       ldv_free((void *)emg_93_resource_0);
  #line 17194 
  return (void *)0;
}

#line 17199  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_rx_rx_timeout_ops(void *arg0)
{
  #line 17202 
  struct file_operations *emg_94_container;
  #line 17203 
  long long emg_94_emg_param_1_0;
  #line 17204 
  char *emg_94_emg_param_1_2;
  #line 17205 
  char *emg_94_emg_param_1_4;
  #line 17206 
  int emg_94_emg_param_2_1;
  #line 17207 
  long long *emg_94_emg_param_3_3;
  #line 17208 
  long long *emg_94_emg_param_3_5;
  #line 17209 
  struct file *emg_94_resource_0;
  #line 17210 
  struct inode *emg_94_resource_1;
  #line 17211 
  int emg_94_ret;
  #line 17212 
  unsigned long emg_94_size_cnt;
  #line 17213 
  int emg_repeat_cnt_call_94 = 1;
  #line 17214 
  int emg_repeat_cnt_main_94_1 = 1;
  #line 17215 
  int emg_repeat_cnt_main_94_0 = 1;
  #line 17217 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 17221 
  emg_94_ret = ldv_undef_int();
  #line 17222 
  emg_94_container = emg_alias_rx_rx_timeout_ops;
  #line 17223 
  emg_94_ret = ldv_undef_int();
  #line 17225 
  __VERIFIER_assume(data->arg0 == emg_alias_rx_rx_timeout_ops);
  #line 17227 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 17228 
    emg_94_container = data->arg0;
    #line 17229 
    ldv_free((void *)data);
  }
  #line 17234 
  emg_94_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 17235 
  emg_94_size_cnt = (unsigned long)ldv_undef_int();
  #line 17239 
  goto emg_main_94;
  #line 17243 
  return (void *)0;
  #line 17246 
  emg_call_94: 
               #line 17246 
  ;
  #line 17247 
  if (ldv_undef_int() != 0) {
    #line 17248 
    switch (ldv_undef_int()) {
      #line 17249 
      case 0: 
              #line 17249 
      ;
      #line 17251 
      emg_94_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 17251 
      emg_94_emg_param_1_2 = emg_94_emg_param_1_2;
      #line 17252 
      emg_94_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 17252 
      emg_94_emg_param_3_3 = emg_94_emg_param_3_3;
      #line 17256 
      emg_wrapper_rx_rx_timeout_read(emg_94_resource_0,emg_94_emg_param_1_2,emg_94_size_cnt,emg_94_emg_param_3_3);
      #line 17260 
      ldv_free((void *)emg_94_emg_param_1_2);
      #line 17261 
      ldv_free((void *)emg_94_emg_param_3_3);
      #line 17263 
      break;
      #line 17265 
      case 1: 
              #line 17265 
      ;
      #line 17267 
      generic_file_llseek(emg_94_resource_0,emg_94_emg_param_1_0,emg_94_emg_param_2_1);
      #line 17269 
      break;
      #line 17271 
      case 2: 
              #line 17271 
      ;
      #line 17278 
      __VERIFIER_assume(emg_94_size_cnt <= 2147479552UL);
      #line 17279 
      emg_94_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 17279 
      emg_94_emg_param_1_4 = emg_94_emg_param_1_4;
      #line 17280 
      emg_94_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 17280 
      emg_94_emg_param_3_5 = emg_94_emg_param_3_5;
      #line 17284 
      if (emg_94_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 17285 
        (*(emg_94_container->write))(emg_94_resource_0,emg_94_emg_param_1_4,emg_94_size_cnt,emg_94_emg_param_3_5);
      #line 17290 
      ldv_free((void *)emg_94_emg_param_1_4);
      #line 17291 
      ldv_free((void *)emg_94_emg_param_3_5);
      #line 17293 
      break;
      #line 17295 
      default: 
               #line 17295 
      ;
      #line 17295 
      __VERIFIER_assume(0);
    }
    #line 17298 
    if (emg_repeat_cnt_call_94 > 0) {
      #line 17299 
      emg_repeat_cnt_call_94 --;
      #line 17301 
      goto emg_call_94;
    }
    else 
         #line 17303 
         __VERIFIER_assume(0);
  }
  else {
    #line 17309 
    if (emg_94_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 17310 
      (*(emg_94_container->release))(emg_94_resource_1,emg_94_resource_0);
    #line 17314 
    if (emg_repeat_cnt_main_94_0 > 0) {
      #line 17315 
      emg_repeat_cnt_main_94_0 --;
      #line 17317 
      goto emg_main_94;
    }
    else 
         #line 17319 
         __VERIFIER_assume(0);
  }
  #line 17325 
  return (void *)0;
  #line 17328 
  emg_main_94: 
               #line 17328 
  ;
  #line 17329 
  if (ldv_undef_int() != 0) {
    #line 17331 
    emg_94_ret = simple_open(emg_94_resource_1,emg_94_resource_0);
    #line 17336 
    emg_94_ret = ldv_filter_err_code(emg_94_ret);
    #line 17339 
    if (ldv_undef_int() != 0) {
      #line 17341 
      __VERIFIER_assume(emg_94_ret == 0);
      #line 17345 
      goto emg_call_94;
    }
    else {
      #line 17350 
      __VERIFIER_assume(emg_94_ret != 0);
      #line 17353 
      if (emg_repeat_cnt_main_94_1 > 0) {
        #line 17354 
        emg_repeat_cnt_main_94_1 --;
        #line 17356 
        goto emg_main_94;
      }
      else 
           #line 17358 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 17365 
       ldv_free((void *)emg_94_resource_0);
  #line 17373 
  return (void *)0;
}

#line 17378  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_rx_rx_timeout_wa_ops(void *arg0)
{
  #line 17381 
  struct file_operations *emg_95_container;
  #line 17382 
  long long emg_95_emg_param_1_0;
  #line 17383 
  char *emg_95_emg_param_1_2;
  #line 17384 
  char *emg_95_emg_param_1_4;
  #line 17385 
  int emg_95_emg_param_2_1;
  #line 17386 
  long long *emg_95_emg_param_3_3;
  #line 17387 
  long long *emg_95_emg_param_3_5;
  #line 17388 
  struct file *emg_95_resource_0;
  #line 17389 
  struct inode *emg_95_resource_1;
  #line 17390 
  int emg_95_ret;
  #line 17391 
  unsigned long emg_95_size_cnt;
  #line 17392 
  int emg_repeat_cnt_main_95_0 = 1;
  #line 17393 
  int emg_repeat_cnt_main_95_1 = 1;
  #line 17394 
  int emg_repeat_cnt_call_95 = 1;
  #line 17396 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 17400 
  emg_95_ret = ldv_undef_int();
  #line 17401 
  emg_95_container = emg_alias_rx_rx_timeout_wa_ops;
  #line 17402 
  emg_95_ret = ldv_undef_int();
  #line 17404 
  __VERIFIER_assume(data->arg0 == emg_alias_rx_rx_timeout_wa_ops);
  #line 17406 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 17407 
    emg_95_container = data->arg0;
    #line 17408 
    ldv_free((void *)data);
  }
  #line 17413 
  emg_95_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 17414 
  emg_95_size_cnt = (unsigned long)ldv_undef_int();
  #line 17418 
  goto emg_main_95;
  #line 17422 
  return (void *)0;
  #line 17425 
  emg_call_95: 
               #line 17425 
  ;
  #line 17426 
  if (ldv_undef_int() != 0) {
    #line 17427 
    switch (ldv_undef_int()) {
      #line 17428 
      case 0: 
              #line 17428 
      ;
      #line 17430 
      emg_95_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 17430 
      emg_95_emg_param_1_2 = emg_95_emg_param_1_2;
      #line 17431 
      emg_95_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 17431 
      emg_95_emg_param_3_3 = emg_95_emg_param_3_3;
      #line 17435 
      emg_wrapper_rx_rx_timeout_wa_read(emg_95_resource_0,emg_95_emg_param_1_2,emg_95_size_cnt,emg_95_emg_param_3_3);
      #line 17439 
      ldv_free((void *)emg_95_emg_param_1_2);
      #line 17440 
      ldv_free((void *)emg_95_emg_param_3_3);
      #line 17442 
      break;
      #line 17444 
      case 1: 
              #line 17444 
      ;
      #line 17446 
      generic_file_llseek(emg_95_resource_0,emg_95_emg_param_1_0,emg_95_emg_param_2_1);
      #line 17448 
      break;
      #line 17450 
      case 2: 
              #line 17450 
      ;
      #line 17457 
      __VERIFIER_assume(emg_95_size_cnt <= 2147479552UL);
      #line 17458 
      emg_95_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 17458 
      emg_95_emg_param_1_4 = emg_95_emg_param_1_4;
      #line 17459 
      emg_95_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 17459 
      emg_95_emg_param_3_5 = emg_95_emg_param_3_5;
      #line 17463 
      if (emg_95_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 17464 
        (*(emg_95_container->write))(emg_95_resource_0,emg_95_emg_param_1_4,emg_95_size_cnt,emg_95_emg_param_3_5);
      #line 17469 
      ldv_free((void *)emg_95_emg_param_1_4);
      #line 17470 
      ldv_free((void *)emg_95_emg_param_3_5);
      #line 17472 
      break;
      #line 17474 
      default: 
               #line 17474 
      ;
      #line 17474 
      __VERIFIER_assume(0);
    }
    #line 17477 
    if (emg_repeat_cnt_call_95 > 0) {
      #line 17478 
      emg_repeat_cnt_call_95 --;
      #line 17480 
      goto emg_call_95;
    }
    else 
         #line 17482 
         __VERIFIER_assume(0);
  }
  else {
    #line 17488 
    if (emg_95_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 17489 
      (*(emg_95_container->release))(emg_95_resource_1,emg_95_resource_0);
    #line 17493 
    if (emg_repeat_cnt_main_95_0 > 0) {
      #line 17494 
      emg_repeat_cnt_main_95_0 --;
      #line 17496 
      goto emg_main_95;
    }
    else 
         #line 17498 
         __VERIFIER_assume(0);
  }
  #line 17504 
  return (void *)0;
  #line 17507 
  emg_main_95: 
               #line 17507 
  ;
  #line 17508 
  if (ldv_undef_int() != 0) {
    #line 17510 
    emg_95_ret = simple_open(emg_95_resource_1,emg_95_resource_0);
    #line 17515 
    emg_95_ret = ldv_filter_err_code(emg_95_ret);
    #line 17518 
    if (ldv_undef_int() != 0) {
      #line 17520 
      __VERIFIER_assume(emg_95_ret == 0);
      #line 17524 
      goto emg_call_95;
    }
    else {
      #line 17529 
      __VERIFIER_assume(emg_95_ret != 0);
      #line 17532 
      if (emg_repeat_cnt_main_95_1 > 0) {
        #line 17533 
        emg_repeat_cnt_main_95_1 --;
        #line 17535 
        goto emg_main_95;
      }
      else 
           #line 17537 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 17544 
       ldv_free((void *)emg_95_resource_0);
  #line 17552 
  return (void *)0;
}

#line 17557  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_rx_rx_tkip_replays_ops(void *arg0)
{
  #line 17560 
  struct file_operations *emg_96_container;
  #line 17561 
  long long emg_96_emg_param_1_0;
  #line 17562 
  char *emg_96_emg_param_1_2;
  #line 17563 
  char *emg_96_emg_param_1_4;
  #line 17564 
  int emg_96_emg_param_2_1;
  #line 17565 
  long long *emg_96_emg_param_3_3;
  #line 17566 
  long long *emg_96_emg_param_3_5;
  #line 17567 
  struct file *emg_96_resource_0;
  #line 17568 
  struct inode *emg_96_resource_1;
  #line 17569 
  int emg_96_ret;
  #line 17570 
  unsigned long emg_96_size_cnt;
  #line 17571 
  int emg_repeat_cnt_main_96_1 = 1;
  #line 17572 
  int emg_repeat_cnt_main_96_0 = 1;
  #line 17573 
  int emg_repeat_cnt_call_96 = 1;
  #line 17575 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 17579 
  emg_96_ret = ldv_undef_int();
  #line 17580 
  emg_96_container = emg_alias_rx_rx_tkip_replays_ops;
  #line 17581 
  emg_96_ret = ldv_undef_int();
  #line 17583 
  __VERIFIER_assume(data->arg0 == emg_alias_rx_rx_tkip_replays_ops);
  #line 17585 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 17586 
    emg_96_container = data->arg0;
    #line 17587 
    ldv_free((void *)data);
  }
  #line 17592 
  emg_96_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 17593 
  emg_96_size_cnt = (unsigned long)ldv_undef_int();
  #line 17597 
  goto emg_main_96;
  #line 17601 
  return (void *)0;
  #line 17604 
  emg_call_96: 
               #line 17604 
  ;
  #line 17605 
  if (ldv_undef_int() != 0) {
    #line 17606 
    switch (ldv_undef_int()) {
      #line 17607 
      case 0: 
              #line 17607 
      ;
      #line 17609 
      emg_96_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 17609 
      emg_96_emg_param_1_2 = emg_96_emg_param_1_2;
      #line 17610 
      emg_96_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 17610 
      emg_96_emg_param_3_3 = emg_96_emg_param_3_3;
      #line 17614 
      emg_wrapper_rx_rx_tkip_replays_read(emg_96_resource_0,emg_96_emg_param_1_2,emg_96_size_cnt,emg_96_emg_param_3_3);
      #line 17618 
      ldv_free((void *)emg_96_emg_param_1_2);
      #line 17619 
      ldv_free((void *)emg_96_emg_param_3_3);
      #line 17621 
      break;
      #line 17623 
      case 1: 
              #line 17623 
      ;
      #line 17625 
      generic_file_llseek(emg_96_resource_0,emg_96_emg_param_1_0,emg_96_emg_param_2_1);
      #line 17627 
      break;
      #line 17629 
      case 2: 
              #line 17629 
      ;
      #line 17636 
      __VERIFIER_assume(emg_96_size_cnt <= 2147479552UL);
      #line 17637 
      emg_96_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 17637 
      emg_96_emg_param_1_4 = emg_96_emg_param_1_4;
      #line 17638 
      emg_96_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 17638 
      emg_96_emg_param_3_5 = emg_96_emg_param_3_5;
      #line 17642 
      if (emg_96_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 17643 
        (*(emg_96_container->write))(emg_96_resource_0,emg_96_emg_param_1_4,emg_96_size_cnt,emg_96_emg_param_3_5);
      #line 17648 
      ldv_free((void *)emg_96_emg_param_1_4);
      #line 17649 
      ldv_free((void *)emg_96_emg_param_3_5);
      #line 17651 
      break;
      #line 17653 
      default: 
               #line 17653 
      ;
      #line 17653 
      __VERIFIER_assume(0);
    }
    #line 17656 
    if (emg_repeat_cnt_call_96 > 0) {
      #line 17657 
      emg_repeat_cnt_call_96 --;
      #line 17659 
      goto emg_call_96;
    }
    else 
         #line 17661 
         __VERIFIER_assume(0);
  }
  else {
    #line 17667 
    if (emg_96_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 17668 
      (*(emg_96_container->release))(emg_96_resource_1,emg_96_resource_0);
    #line 17672 
    if (emg_repeat_cnt_main_96_1 > 0) {
      #line 17673 
      emg_repeat_cnt_main_96_1 --;
      #line 17675 
      goto emg_main_96;
    }
    else 
         #line 17677 
         __VERIFIER_assume(0);
  }
  #line 17683 
  return (void *)0;
  #line 17686 
  emg_main_96: 
               #line 17686 
  ;
  #line 17687 
  if (ldv_undef_int() != 0) {
    #line 17689 
    emg_96_ret = simple_open(emg_96_resource_1,emg_96_resource_0);
    #line 17694 
    emg_96_ret = ldv_filter_err_code(emg_96_ret);
    #line 17697 
    if (ldv_undef_int() != 0) {
      #line 17699 
      __VERIFIER_assume(emg_96_ret == 0);
      #line 17703 
      goto emg_call_96;
    }
    else {
      #line 17708 
      __VERIFIER_assume(emg_96_ret != 0);
      #line 17711 
      if (emg_repeat_cnt_main_96_0 > 0) {
        #line 17712 
        emg_repeat_cnt_main_96_0 --;
        #line 17714 
        goto emg_main_96;
      }
      else 
           #line 17716 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 17723 
       ldv_free((void *)emg_96_resource_0);
  #line 17731 
  return (void *)0;
}

#line 17736  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_rx_rx_xfr_ops(void *arg0)
{
  #line 17739 
  struct file_operations *emg_97_container;
  #line 17740 
  long long emg_97_emg_param_1_0;
  #line 17741 
  char *emg_97_emg_param_1_2;
  #line 17742 
  char *emg_97_emg_param_1_4;
  #line 17743 
  int emg_97_emg_param_2_1;
  #line 17744 
  long long *emg_97_emg_param_3_3;
  #line 17745 
  long long *emg_97_emg_param_3_5;
  #line 17746 
  struct file *emg_97_resource_0;
  #line 17747 
  struct inode *emg_97_resource_1;
  #line 17748 
  int emg_97_ret;
  #line 17749 
  unsigned long emg_97_size_cnt;
  #line 17750 
  int emg_repeat_cnt_call_97 = 1;
  #line 17751 
  int emg_repeat_cnt_main_97_0 = 1;
  #line 17752 
  int emg_repeat_cnt_main_97_1 = 1;
  #line 17754 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 17758 
  emg_97_ret = ldv_undef_int();
  #line 17759 
  emg_97_container = emg_alias_rx_rx_xfr_ops;
  #line 17760 
  emg_97_ret = ldv_undef_int();
  #line 17762 
  __VERIFIER_assume(data->arg0 == emg_alias_rx_rx_xfr_ops);
  #line 17764 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 17765 
    emg_97_container = data->arg0;
    #line 17766 
    ldv_free((void *)data);
  }
  #line 17771 
  emg_97_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 17772 
  emg_97_size_cnt = (unsigned long)ldv_undef_int();
  #line 17776 
  goto emg_main_97;
  #line 17780 
  return (void *)0;
  #line 17783 
  emg_call_97: 
               #line 17783 
  ;
  #line 17784 
  if (ldv_undef_int() != 0) {
    #line 17785 
    switch (ldv_undef_int()) {
      #line 17786 
      case 0: 
              #line 17786 
      ;
      #line 17788 
      emg_97_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 17788 
      emg_97_emg_param_1_2 = emg_97_emg_param_1_2;
      #line 17789 
      emg_97_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 17789 
      emg_97_emg_param_3_3 = emg_97_emg_param_3_3;
      #line 17793 
      emg_wrapper_rx_rx_xfr_read(emg_97_resource_0,emg_97_emg_param_1_2,emg_97_size_cnt,emg_97_emg_param_3_3);
      #line 17797 
      ldv_free((void *)emg_97_emg_param_1_2);
      #line 17798 
      ldv_free((void *)emg_97_emg_param_3_3);
      #line 17800 
      break;
      #line 17802 
      case 1: 
              #line 17802 
      ;
      #line 17804 
      generic_file_llseek(emg_97_resource_0,emg_97_emg_param_1_0,emg_97_emg_param_2_1);
      #line 17806 
      break;
      #line 17808 
      case 2: 
              #line 17808 
      ;
      #line 17815 
      __VERIFIER_assume(emg_97_size_cnt <= 2147479552UL);
      #line 17816 
      emg_97_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 17816 
      emg_97_emg_param_1_4 = emg_97_emg_param_1_4;
      #line 17817 
      emg_97_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 17817 
      emg_97_emg_param_3_5 = emg_97_emg_param_3_5;
      #line 17821 
      if (emg_97_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 17822 
        (*(emg_97_container->write))(emg_97_resource_0,emg_97_emg_param_1_4,emg_97_size_cnt,emg_97_emg_param_3_5);
      #line 17827 
      ldv_free((void *)emg_97_emg_param_1_4);
      #line 17828 
      ldv_free((void *)emg_97_emg_param_3_5);
      #line 17830 
      break;
      #line 17832 
      default: 
               #line 17832 
      ;
      #line 17832 
      __VERIFIER_assume(0);
    }
    #line 17835 
    if (emg_repeat_cnt_call_97 > 0) {
      #line 17836 
      emg_repeat_cnt_call_97 --;
      #line 17838 
      goto emg_call_97;
    }
    else 
         #line 17840 
         __VERIFIER_assume(0);
  }
  else {
    #line 17846 
    if (emg_97_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 17847 
      (*(emg_97_container->release))(emg_97_resource_1,emg_97_resource_0);
    #line 17851 
    if (emg_repeat_cnt_main_97_0 > 0) {
      #line 17852 
      emg_repeat_cnt_main_97_0 --;
      #line 17854 
      goto emg_main_97;
    }
    else 
         #line 17856 
         __VERIFIER_assume(0);
  }
  #line 17862 
  return (void *)0;
  #line 17865 
  emg_main_97: 
               #line 17865 
  ;
  #line 17866 
  if (ldv_undef_int() != 0) {
    #line 17868 
    emg_97_ret = simple_open(emg_97_resource_1,emg_97_resource_0);
    #line 17873 
    emg_97_ret = ldv_filter_err_code(emg_97_ret);
    #line 17876 
    if (ldv_undef_int() != 0) {
      #line 17878 
      __VERIFIER_assume(emg_97_ret == 0);
      #line 17882 
      goto emg_call_97;
    }
    else {
      #line 17887 
      __VERIFIER_assume(emg_97_ret != 0);
      #line 17890 
      if (emg_repeat_cnt_main_97_1 > 0) {
        #line 17891 
        emg_repeat_cnt_main_97_1 --;
        #line 17893 
        goto emg_main_97;
      }
      else 
           #line 17895 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 17902 
       ldv_free((void *)emg_97_resource_0);
  #line 17910 
  return (void *)0;
}

#line 17915  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_thermal_adc_source_unexpected_ops(void *arg0)
{
  #line 17918 
  struct file_operations *emg_98_container;
  #line 17919 
  long long emg_98_emg_param_1_0;
  #line 17920 
  char *emg_98_emg_param_1_2;
  #line 17921 
  char *emg_98_emg_param_1_4;
  #line 17922 
  int emg_98_emg_param_2_1;
  #line 17923 
  long long *emg_98_emg_param_3_3;
  #line 17924 
  long long *emg_98_emg_param_3_5;
  #line 17925 
  struct file *emg_98_resource_0;
  #line 17926 
  struct inode *emg_98_resource_1;
  #line 17927 
  int emg_98_ret;
  #line 17928 
  unsigned long emg_98_size_cnt;
  #line 17929 
  int emg_repeat_cnt_main_98_1 = 1;
  #line 17930 
  int emg_repeat_cnt_main_98_0 = 1;
  #line 17931 
  int emg_repeat_cnt_call_98 = 1;
  #line 17933 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 17937 
  emg_98_ret = ldv_undef_int();
  #line 17938 
  emg_98_container = emg_alias_thermal_adc_source_unexpected_ops;
  #line 17939 
  emg_98_ret = ldv_undef_int();
  #line 17941 
  __VERIFIER_assume(data->arg0 == emg_alias_thermal_adc_source_unexpected_ops);
  #line 17943 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 17944 
    emg_98_container = data->arg0;
    #line 17945 
    ldv_free((void *)data);
  }
  #line 17950 
  emg_98_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 17951 
  emg_98_size_cnt = (unsigned long)ldv_undef_int();
  #line 17955 
  goto emg_main_98;
  #line 17959 
  return (void *)0;
  #line 17962 
  emg_call_98: 
               #line 17962 
  ;
  #line 17963 
  if (ldv_undef_int() != 0) {
    #line 17964 
    switch (ldv_undef_int()) {
      #line 17965 
      case 0: 
              #line 17965 
      ;
      #line 17967 
      emg_98_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 17967 
      emg_98_emg_param_1_2 = emg_98_emg_param_1_2;
      #line 17968 
      emg_98_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 17968 
      emg_98_emg_param_3_3 = emg_98_emg_param_3_3;
      #line 17972 
      emg_wrapper_thermal_adc_source_unexpected_read(emg_98_resource_0,emg_98_emg_param_1_2,emg_98_size_cnt,emg_98_emg_param_3_3);
      #line 17976 
      ldv_free((void *)emg_98_emg_param_1_2);
      #line 17977 
      ldv_free((void *)emg_98_emg_param_3_3);
      #line 17979 
      break;
      #line 17981 
      case 1: 
              #line 17981 
      ;
      #line 17983 
      generic_file_llseek(emg_98_resource_0,emg_98_emg_param_1_0,emg_98_emg_param_2_1);
      #line 17985 
      break;
      #line 17987 
      case 2: 
              #line 17987 
      ;
      #line 17994 
      __VERIFIER_assume(emg_98_size_cnt <= 2147479552UL);
      #line 17995 
      emg_98_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 17995 
      emg_98_emg_param_1_4 = emg_98_emg_param_1_4;
      #line 17996 
      emg_98_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 17996 
      emg_98_emg_param_3_5 = emg_98_emg_param_3_5;
      #line 18000 
      if (emg_98_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 18001 
        (*(emg_98_container->write))(emg_98_resource_0,emg_98_emg_param_1_4,emg_98_size_cnt,emg_98_emg_param_3_5);
      #line 18006 
      ldv_free((void *)emg_98_emg_param_1_4);
      #line 18007 
      ldv_free((void *)emg_98_emg_param_3_5);
      #line 18009 
      break;
      #line 18011 
      default: 
               #line 18011 
      ;
      #line 18011 
      __VERIFIER_assume(0);
    }
    #line 18014 
    if (emg_repeat_cnt_call_98 > 0) {
      #line 18015 
      emg_repeat_cnt_call_98 --;
      #line 18017 
      goto emg_call_98;
    }
    else 
         #line 18019 
         __VERIFIER_assume(0);
  }
  else {
    #line 18025 
    if (emg_98_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 18026 
      (*(emg_98_container->release))(emg_98_resource_1,emg_98_resource_0);
    #line 18030 
    if (emg_repeat_cnt_main_98_1 > 0) {
      #line 18031 
      emg_repeat_cnt_main_98_1 --;
      #line 18033 
      goto emg_main_98;
    }
    else 
         #line 18035 
         __VERIFIER_assume(0);
  }
  #line 18041 
  return (void *)0;
  #line 18044 
  emg_main_98: 
               #line 18044 
  ;
  #line 18045 
  if (ldv_undef_int() != 0) {
    #line 18047 
    emg_98_ret = simple_open(emg_98_resource_1,emg_98_resource_0);
    #line 18052 
    emg_98_ret = ldv_filter_err_code(emg_98_ret);
    #line 18055 
    if (ldv_undef_int() != 0) {
      #line 18057 
      __VERIFIER_assume(emg_98_ret == 0);
      #line 18061 
      goto emg_call_98;
    }
    else {
      #line 18066 
      __VERIFIER_assume(emg_98_ret != 0);
      #line 18069 
      if (emg_repeat_cnt_main_98_0 > 0) {
        #line 18070 
        emg_repeat_cnt_main_98_0 --;
        #line 18072 
        goto emg_main_98;
      }
      else 
           #line 18074 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 18081 
       ldv_free((void *)emg_98_resource_0);
  #line 18089 
  return (void *)0;
}

#line 18094  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_thermal_false_irq_ops(void *arg0)
{
  #line 18097 
  struct file_operations *emg_99_container;
  #line 18098 
  long long emg_99_emg_param_1_0;
  #line 18099 
  char *emg_99_emg_param_1_2;
  #line 18100 
  char *emg_99_emg_param_1_4;
  #line 18101 
  int emg_99_emg_param_2_1;
  #line 18102 
  long long *emg_99_emg_param_3_3;
  #line 18103 
  long long *emg_99_emg_param_3_5;
  #line 18104 
  struct file *emg_99_resource_0;
  #line 18105 
  struct inode *emg_99_resource_1;
  #line 18106 
  int emg_99_ret;
  #line 18107 
  unsigned long emg_99_size_cnt;
  #line 18108 
  int emg_repeat_cnt_main_99_0 = 1;
  #line 18109 
  int emg_repeat_cnt_main_99_1 = 1;
  #line 18110 
  int emg_repeat_cnt_call_99 = 1;
  #line 18112 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 18116 
  emg_99_ret = ldv_undef_int();
  #line 18117 
  emg_99_container = emg_alias_thermal_false_irq_ops;
  #line 18118 
  emg_99_ret = ldv_undef_int();
  #line 18120 
  __VERIFIER_assume(data->arg0 == emg_alias_thermal_false_irq_ops);
  #line 18122 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 18123 
    emg_99_container = data->arg0;
    #line 18124 
    ldv_free((void *)data);
  }
  #line 18129 
  emg_99_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 18130 
  emg_99_size_cnt = (unsigned long)ldv_undef_int();
  #line 18134 
  goto emg_main_99;
  #line 18138 
  return (void *)0;
  #line 18141 
  emg_call_99: 
               #line 18141 
  ;
  #line 18142 
  if (ldv_undef_int() != 0) {
    #line 18143 
    switch (ldv_undef_int()) {
      #line 18144 
      case 0: 
              #line 18144 
      ;
      #line 18146 
      emg_99_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 18146 
      emg_99_emg_param_1_2 = emg_99_emg_param_1_2;
      #line 18147 
      emg_99_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 18147 
      emg_99_emg_param_3_3 = emg_99_emg_param_3_3;
      #line 18151 
      emg_wrapper_thermal_false_irq_read(emg_99_resource_0,emg_99_emg_param_1_2,emg_99_size_cnt,emg_99_emg_param_3_3);
      #line 18155 
      ldv_free((void *)emg_99_emg_param_1_2);
      #line 18156 
      ldv_free((void *)emg_99_emg_param_3_3);
      #line 18158 
      break;
      #line 18160 
      case 1: 
              #line 18160 
      ;
      #line 18162 
      generic_file_llseek(emg_99_resource_0,emg_99_emg_param_1_0,emg_99_emg_param_2_1);
      #line 18164 
      break;
      #line 18166 
      case 2: 
              #line 18166 
      ;
      #line 18173 
      __VERIFIER_assume(emg_99_size_cnt <= 2147479552UL);
      #line 18174 
      emg_99_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 18174 
      emg_99_emg_param_1_4 = emg_99_emg_param_1_4;
      #line 18175 
      emg_99_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 18175 
      emg_99_emg_param_3_5 = emg_99_emg_param_3_5;
      #line 18179 
      if (emg_99_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 18180 
        (*(emg_99_container->write))(emg_99_resource_0,emg_99_emg_param_1_4,emg_99_size_cnt,emg_99_emg_param_3_5);
      #line 18185 
      ldv_free((void *)emg_99_emg_param_1_4);
      #line 18186 
      ldv_free((void *)emg_99_emg_param_3_5);
      #line 18188 
      break;
      #line 18190 
      default: 
               #line 18190 
      ;
      #line 18190 
      __VERIFIER_assume(0);
    }
    #line 18193 
    if (emg_repeat_cnt_call_99 > 0) {
      #line 18194 
      emg_repeat_cnt_call_99 --;
      #line 18196 
      goto emg_call_99;
    }
    else 
         #line 18198 
         __VERIFIER_assume(0);
  }
  else {
    #line 18204 
    if (emg_99_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 18205 
      (*(emg_99_container->release))(emg_99_resource_1,emg_99_resource_0);
    #line 18209 
    if (emg_repeat_cnt_main_99_0 > 0) {
      #line 18210 
      emg_repeat_cnt_main_99_0 --;
      #line 18212 
      goto emg_main_99;
    }
    else 
         #line 18214 
         __VERIFIER_assume(0);
  }
  #line 18220 
  return (void *)0;
  #line 18223 
  emg_main_99: 
               #line 18223 
  ;
  #line 18224 
  if (ldv_undef_int() != 0) {
    #line 18226 
    emg_99_ret = simple_open(emg_99_resource_1,emg_99_resource_0);
    #line 18231 
    emg_99_ret = ldv_filter_err_code(emg_99_ret);
    #line 18234 
    if (ldv_undef_int() != 0) {
      #line 18236 
      __VERIFIER_assume(emg_99_ret == 0);
      #line 18240 
      goto emg_call_99;
    }
    else {
      #line 18245 
      __VERIFIER_assume(emg_99_ret != 0);
      #line 18248 
      if (emg_repeat_cnt_main_99_1 > 0) {
        #line 18249 
        emg_repeat_cnt_main_99_1 --;
        #line 18251 
        goto emg_main_99;
      }
      else 
           #line 18253 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 18260 
       ldv_free((void *)emg_99_resource_0);
  #line 18268 
  return (void *)0;
}

#line 18273  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_thermal_irq_thr_high_ops(void *arg0)
{
  #line 18276 
  struct file_operations *emg_100_container;
  #line 18277 
  long long emg_100_emg_param_1_0;
  #line 18278 
  char *emg_100_emg_param_1_2;
  #line 18279 
  char *emg_100_emg_param_1_4;
  #line 18280 
  int emg_100_emg_param_2_1;
  #line 18281 
  long long *emg_100_emg_param_3_3;
  #line 18282 
  long long *emg_100_emg_param_3_5;
  #line 18283 
  struct file *emg_100_resource_0;
  #line 18284 
  struct inode *emg_100_resource_1;
  #line 18285 
  int emg_100_ret;
  #line 18286 
  unsigned long emg_100_size_cnt;
  #line 18287 
  int emg_repeat_cnt_main_100_0 = 1;
  #line 18288 
  int emg_repeat_cnt_call_100 = 1;
  #line 18289 
  int emg_repeat_cnt_main_100_1 = 1;
  #line 18291 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 18295 
  emg_100_ret = ldv_undef_int();
  #line 18296 
  emg_100_container = emg_alias_thermal_irq_thr_high_ops;
  #line 18297 
  emg_100_ret = ldv_undef_int();
  #line 18299 
  __VERIFIER_assume(data->arg0 == emg_alias_thermal_irq_thr_high_ops);
  #line 18301 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 18302 
    emg_100_container = data->arg0;
    #line 18303 
    ldv_free((void *)data);
  }
  #line 18308 
  emg_100_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 18309 
  emg_100_size_cnt = (unsigned long)ldv_undef_int();
  #line 18313 
  goto emg_main_100;
  #line 18317 
  return (void *)0;
  #line 18320 
  emg_call_100: 
                #line 18320 
  ;
  #line 18321 
  if (ldv_undef_int() != 0) {
    #line 18322 
    switch (ldv_undef_int()) {
      #line 18323 
      case 0: 
              #line 18323 
      ;
      #line 18325 
      emg_100_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 18325 
      emg_100_emg_param_1_2 = emg_100_emg_param_1_2;
      #line 18326 
      emg_100_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 18326 
      emg_100_emg_param_3_3 = emg_100_emg_param_3_3;
      #line 18330 
      emg_wrapper_thermal_irq_thr_high_read(emg_100_resource_0,emg_100_emg_param_1_2,emg_100_size_cnt,emg_100_emg_param_3_3);
      #line 18334 
      ldv_free((void *)emg_100_emg_param_1_2);
      #line 18335 
      ldv_free((void *)emg_100_emg_param_3_3);
      #line 18337 
      break;
      #line 18339 
      case 1: 
              #line 18339 
      ;
      #line 18341 
      generic_file_llseek(emg_100_resource_0,emg_100_emg_param_1_0,emg_100_emg_param_2_1);
      #line 18343 
      break;
      #line 18345 
      case 2: 
              #line 18345 
      ;
      #line 18352 
      __VERIFIER_assume(emg_100_size_cnt <= 2147479552UL);
      #line 18353 
      emg_100_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 18353 
      emg_100_emg_param_1_4 = emg_100_emg_param_1_4;
      #line 18354 
      emg_100_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 18354 
      emg_100_emg_param_3_5 = emg_100_emg_param_3_5;
      #line 18358 
      if (emg_100_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 18359 
        (*(emg_100_container->write))(emg_100_resource_0,emg_100_emg_param_1_4,emg_100_size_cnt,emg_100_emg_param_3_5);
      #line 18364 
      ldv_free((void *)emg_100_emg_param_1_4);
      #line 18365 
      ldv_free((void *)emg_100_emg_param_3_5);
      #line 18367 
      break;
      #line 18369 
      default: 
               #line 18369 
      ;
      #line 18369 
      __VERIFIER_assume(0);
    }
    #line 18372 
    if (emg_repeat_cnt_call_100 > 0) {
      #line 18373 
      emg_repeat_cnt_call_100 --;
      #line 18375 
      goto emg_call_100;
    }
    else 
         #line 18377 
         __VERIFIER_assume(0);
  }
  else {
    #line 18383 
    if (emg_100_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 18384 
      (*(emg_100_container->release))(emg_100_resource_1,emg_100_resource_0);
    #line 18388 
    if (emg_repeat_cnt_main_100_0 > 0) {
      #line 18389 
      emg_repeat_cnt_main_100_0 --;
      #line 18391 
      goto emg_main_100;
    }
    else 
         #line 18393 
         __VERIFIER_assume(0);
  }
  #line 18399 
  return (void *)0;
  #line 18402 
  emg_main_100: 
                #line 18402 
  ;
  #line 18403 
  if (ldv_undef_int() != 0) {
    #line 18405 
    emg_100_ret = simple_open(emg_100_resource_1,emg_100_resource_0);
    #line 18410 
    emg_100_ret = ldv_filter_err_code(emg_100_ret);
    #line 18413 
    if (ldv_undef_int() != 0) {
      #line 18415 
      __VERIFIER_assume(emg_100_ret == 0);
      #line 18419 
      goto emg_call_100;
    }
    else {
      #line 18424 
      __VERIFIER_assume(emg_100_ret != 0);
      #line 18427 
      if (emg_repeat_cnt_main_100_1 > 0) {
        #line 18428 
        emg_repeat_cnt_main_100_1 --;
        #line 18430 
        goto emg_main_100;
      }
      else 
           #line 18432 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 18439 
       ldv_free((void *)emg_100_resource_0);
  #line 18447 
  return (void *)0;
}

#line 18452  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_thermal_irq_thr_low_ops(void *arg0)
{
  #line 18455 
  struct file_operations *emg_101_container;
  #line 18456 
  long long emg_101_emg_param_1_0;
  #line 18457 
  char *emg_101_emg_param_1_2;
  #line 18458 
  char *emg_101_emg_param_1_4;
  #line 18459 
  int emg_101_emg_param_2_1;
  #line 18460 
  long long *emg_101_emg_param_3_3;
  #line 18461 
  long long *emg_101_emg_param_3_5;
  #line 18462 
  struct file *emg_101_resource_0;
  #line 18463 
  struct inode *emg_101_resource_1;
  #line 18464 
  int emg_101_ret;
  #line 18465 
  unsigned long emg_101_size_cnt;
  #line 18466 
  int emg_repeat_cnt_call_101 = 1;
  #line 18467 
  int emg_repeat_cnt_main_101_0 = 1;
  #line 18468 
  int emg_repeat_cnt_main_101_1 = 1;
  #line 18470 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 18474 
  emg_101_ret = ldv_undef_int();
  #line 18475 
  emg_101_container = emg_alias_thermal_irq_thr_low_ops;
  #line 18476 
  emg_101_ret = ldv_undef_int();
  #line 18478 
  __VERIFIER_assume(data->arg0 == emg_alias_thermal_irq_thr_low_ops);
  #line 18480 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 18481 
    emg_101_container = data->arg0;
    #line 18482 
    ldv_free((void *)data);
  }
  #line 18487 
  emg_101_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 18488 
  emg_101_size_cnt = (unsigned long)ldv_undef_int();
  #line 18492 
  goto emg_main_101;
  #line 18496 
  return (void *)0;
  #line 18499 
  emg_call_101: 
                #line 18499 
  ;
  #line 18500 
  if (ldv_undef_int() != 0) {
    #line 18501 
    switch (ldv_undef_int()) {
      #line 18502 
      case 0: 
              #line 18502 
      ;
      #line 18504 
      emg_101_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 18504 
      emg_101_emg_param_1_2 = emg_101_emg_param_1_2;
      #line 18505 
      emg_101_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 18505 
      emg_101_emg_param_3_3 = emg_101_emg_param_3_3;
      #line 18509 
      emg_wrapper_thermal_irq_thr_low_read(emg_101_resource_0,emg_101_emg_param_1_2,emg_101_size_cnt,emg_101_emg_param_3_3);
      #line 18513 
      ldv_free((void *)emg_101_emg_param_1_2);
      #line 18514 
      ldv_free((void *)emg_101_emg_param_3_3);
      #line 18516 
      break;
      #line 18518 
      case 1: 
              #line 18518 
      ;
      #line 18520 
      generic_file_llseek(emg_101_resource_0,emg_101_emg_param_1_0,emg_101_emg_param_2_1);
      #line 18522 
      break;
      #line 18524 
      case 2: 
              #line 18524 
      ;
      #line 18531 
      __VERIFIER_assume(emg_101_size_cnt <= 2147479552UL);
      #line 18532 
      emg_101_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 18532 
      emg_101_emg_param_1_4 = emg_101_emg_param_1_4;
      #line 18533 
      emg_101_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 18533 
      emg_101_emg_param_3_5 = emg_101_emg_param_3_5;
      #line 18537 
      if (emg_101_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 18538 
        (*(emg_101_container->write))(emg_101_resource_0,emg_101_emg_param_1_4,emg_101_size_cnt,emg_101_emg_param_3_5);
      #line 18543 
      ldv_free((void *)emg_101_emg_param_1_4);
      #line 18544 
      ldv_free((void *)emg_101_emg_param_3_5);
      #line 18546 
      break;
      #line 18548 
      default: 
               #line 18548 
      ;
      #line 18548 
      __VERIFIER_assume(0);
    }
    #line 18551 
    if (emg_repeat_cnt_call_101 > 0) {
      #line 18552 
      emg_repeat_cnt_call_101 --;
      #line 18554 
      goto emg_call_101;
    }
    else 
         #line 18556 
         __VERIFIER_assume(0);
  }
  else {
    #line 18562 
    if (emg_101_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 18563 
      (*(emg_101_container->release))(emg_101_resource_1,emg_101_resource_0);
    #line 18567 
    if (emg_repeat_cnt_main_101_0 > 0) {
      #line 18568 
      emg_repeat_cnt_main_101_0 --;
      #line 18570 
      goto emg_main_101;
    }
    else 
         #line 18572 
         __VERIFIER_assume(0);
  }
  #line 18578 
  return (void *)0;
  #line 18581 
  emg_main_101: 
                #line 18581 
  ;
  #line 18582 
  if (ldv_undef_int() != 0) {
    #line 18584 
    emg_101_ret = simple_open(emg_101_resource_1,emg_101_resource_0);
    #line 18589 
    emg_101_ret = ldv_filter_err_code(emg_101_ret);
    #line 18592 
    if (ldv_undef_int() != 0) {
      #line 18594 
      __VERIFIER_assume(emg_101_ret == 0);
      #line 18598 
      goto emg_call_101;
    }
    else {
      #line 18603 
      __VERIFIER_assume(emg_101_ret != 0);
      #line 18606 
      if (emg_repeat_cnt_main_101_1 > 0) {
        #line 18607 
        emg_repeat_cnt_main_101_1 --;
        #line 18609 
        goto emg_main_101;
      }
      else 
           #line 18611 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 18618 
       ldv_free((void *)emg_101_resource_0);
  #line 18626 
  return (void *)0;
}

#line 18631  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_thermal_tx_resume_ops(void *arg0)
{
  #line 18634 
  struct file_operations *emg_102_container;
  #line 18635 
  long long emg_102_emg_param_1_0;
  #line 18636 
  char *emg_102_emg_param_1_2;
  #line 18637 
  char *emg_102_emg_param_1_4;
  #line 18638 
  int emg_102_emg_param_2_1;
  #line 18639 
  long long *emg_102_emg_param_3_3;
  #line 18640 
  long long *emg_102_emg_param_3_5;
  #line 18641 
  struct file *emg_102_resource_0;
  #line 18642 
  struct inode *emg_102_resource_1;
  #line 18643 
  int emg_102_ret;
  #line 18644 
  unsigned long emg_102_size_cnt;
  #line 18645 
  int emg_repeat_cnt_main_102_0 = 1;
  #line 18646 
  int emg_repeat_cnt_main_102_1 = 1;
  #line 18647 
  int emg_repeat_cnt_call_102 = 1;
  #line 18649 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 18653 
  emg_102_ret = ldv_undef_int();
  #line 18654 
  emg_102_container = emg_alias_thermal_tx_resume_ops;
  #line 18655 
  emg_102_ret = ldv_undef_int();
  #line 18657 
  __VERIFIER_assume(data->arg0 == emg_alias_thermal_tx_resume_ops);
  #line 18659 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 18660 
    emg_102_container = data->arg0;
    #line 18661 
    ldv_free((void *)data);
  }
  #line 18666 
  emg_102_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 18667 
  emg_102_size_cnt = (unsigned long)ldv_undef_int();
  #line 18671 
  goto emg_main_102;
  #line 18675 
  return (void *)0;
  #line 18678 
  emg_call_102: 
                #line 18678 
  ;
  #line 18679 
  if (ldv_undef_int() != 0) {
    #line 18680 
    switch (ldv_undef_int()) {
      #line 18681 
      case 0: 
              #line 18681 
      ;
      #line 18683 
      emg_102_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 18683 
      emg_102_emg_param_1_2 = emg_102_emg_param_1_2;
      #line 18684 
      emg_102_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 18684 
      emg_102_emg_param_3_3 = emg_102_emg_param_3_3;
      #line 18688 
      emg_wrapper_thermal_tx_resume_read(emg_102_resource_0,emg_102_emg_param_1_2,emg_102_size_cnt,emg_102_emg_param_3_3);
      #line 18692 
      ldv_free((void *)emg_102_emg_param_1_2);
      #line 18693 
      ldv_free((void *)emg_102_emg_param_3_3);
      #line 18695 
      break;
      #line 18697 
      case 1: 
              #line 18697 
      ;
      #line 18699 
      generic_file_llseek(emg_102_resource_0,emg_102_emg_param_1_0,emg_102_emg_param_2_1);
      #line 18701 
      break;
      #line 18703 
      case 2: 
              #line 18703 
      ;
      #line 18710 
      __VERIFIER_assume(emg_102_size_cnt <= 2147479552UL);
      #line 18711 
      emg_102_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 18711 
      emg_102_emg_param_1_4 = emg_102_emg_param_1_4;
      #line 18712 
      emg_102_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 18712 
      emg_102_emg_param_3_5 = emg_102_emg_param_3_5;
      #line 18716 
      if (emg_102_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 18717 
        (*(emg_102_container->write))(emg_102_resource_0,emg_102_emg_param_1_4,emg_102_size_cnt,emg_102_emg_param_3_5);
      #line 18722 
      ldv_free((void *)emg_102_emg_param_1_4);
      #line 18723 
      ldv_free((void *)emg_102_emg_param_3_5);
      #line 18725 
      break;
      #line 18727 
      default: 
               #line 18727 
      ;
      #line 18727 
      __VERIFIER_assume(0);
    }
    #line 18730 
    if (emg_repeat_cnt_call_102 > 0) {
      #line 18731 
      emg_repeat_cnt_call_102 --;
      #line 18733 
      goto emg_call_102;
    }
    else 
         #line 18735 
         __VERIFIER_assume(0);
  }
  else {
    #line 18741 
    if (emg_102_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 18742 
      (*(emg_102_container->release))(emg_102_resource_1,emg_102_resource_0);
    #line 18746 
    if (emg_repeat_cnt_main_102_1 > 0) {
      #line 18747 
      emg_repeat_cnt_main_102_1 --;
      #line 18749 
      goto emg_main_102;
    }
    else 
         #line 18751 
         __VERIFIER_assume(0);
  }
  #line 18757 
  return (void *)0;
  #line 18760 
  emg_main_102: 
                #line 18760 
  ;
  #line 18761 
  if (ldv_undef_int() != 0) {
    #line 18763 
    emg_102_ret = simple_open(emg_102_resource_1,emg_102_resource_0);
    #line 18768 
    emg_102_ret = ldv_filter_err_code(emg_102_ret);
    #line 18771 
    if (ldv_undef_int() != 0) {
      #line 18773 
      __VERIFIER_assume(emg_102_ret == 0);
      #line 18777 
      goto emg_call_102;
    }
    else {
      #line 18782 
      __VERIFIER_assume(emg_102_ret != 0);
      #line 18785 
      if (emg_repeat_cnt_main_102_0 > 0) {
        #line 18786 
        emg_repeat_cnt_main_102_0 --;
        #line 18788 
        goto emg_main_102;
      }
      else 
           #line 18790 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 18797 
       ldv_free((void *)emg_102_resource_0);
  #line 18805 
  return (void *)0;
}

#line 18810  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_thermal_tx_stop_ops(void *arg0)
{
  #line 18813 
  struct file_operations *emg_103_container;
  #line 18814 
  long long emg_103_emg_param_1_0;
  #line 18815 
  char *emg_103_emg_param_1_2;
  #line 18816 
  char *emg_103_emg_param_1_4;
  #line 18817 
  int emg_103_emg_param_2_1;
  #line 18818 
  long long *emg_103_emg_param_3_3;
  #line 18819 
  long long *emg_103_emg_param_3_5;
  #line 18820 
  struct file *emg_103_resource_0;
  #line 18821 
  struct inode *emg_103_resource_1;
  #line 18822 
  int emg_103_ret;
  #line 18823 
  unsigned long emg_103_size_cnt;
  #line 18824 
  int emg_repeat_cnt_call_103 = 1;
  #line 18825 
  int emg_repeat_cnt_main_103_1 = 1;
  #line 18826 
  int emg_repeat_cnt_main_103_0 = 1;
  #line 18828 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 18832 
  emg_103_ret = ldv_undef_int();
  #line 18833 
  emg_103_container = emg_alias_thermal_tx_stop_ops;
  #line 18834 
  emg_103_ret = ldv_undef_int();
  #line 18836 
  __VERIFIER_assume(data->arg0 == emg_alias_thermal_tx_stop_ops);
  #line 18838 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 18839 
    emg_103_container = data->arg0;
    #line 18840 
    ldv_free((void *)data);
  }
  #line 18845 
  emg_103_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 18846 
  emg_103_size_cnt = (unsigned long)ldv_undef_int();
  #line 18850 
  goto emg_main_103;
  #line 18854 
  return (void *)0;
  #line 18857 
  emg_call_103: 
                #line 18857 
  ;
  #line 18858 
  if (ldv_undef_int() != 0) {
    #line 18859 
    switch (ldv_undef_int()) {
      #line 18860 
      case 0: 
              #line 18860 
      ;
      #line 18862 
      emg_103_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 18862 
      emg_103_emg_param_1_2 = emg_103_emg_param_1_2;
      #line 18863 
      emg_103_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 18863 
      emg_103_emg_param_3_3 = emg_103_emg_param_3_3;
      #line 18867 
      emg_wrapper_thermal_tx_stop_read(emg_103_resource_0,emg_103_emg_param_1_2,emg_103_size_cnt,emg_103_emg_param_3_3);
      #line 18871 
      ldv_free((void *)emg_103_emg_param_1_2);
      #line 18872 
      ldv_free((void *)emg_103_emg_param_3_3);
      #line 18874 
      break;
      #line 18876 
      case 1: 
              #line 18876 
      ;
      #line 18878 
      generic_file_llseek(emg_103_resource_0,emg_103_emg_param_1_0,emg_103_emg_param_2_1);
      #line 18880 
      break;
      #line 18882 
      case 2: 
              #line 18882 
      ;
      #line 18889 
      __VERIFIER_assume(emg_103_size_cnt <= 2147479552UL);
      #line 18890 
      emg_103_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 18890 
      emg_103_emg_param_1_4 = emg_103_emg_param_1_4;
      #line 18891 
      emg_103_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 18891 
      emg_103_emg_param_3_5 = emg_103_emg_param_3_5;
      #line 18895 
      if (emg_103_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 18896 
        (*(emg_103_container->write))(emg_103_resource_0,emg_103_emg_param_1_4,emg_103_size_cnt,emg_103_emg_param_3_5);
      #line 18901 
      ldv_free((void *)emg_103_emg_param_1_4);
      #line 18902 
      ldv_free((void *)emg_103_emg_param_3_5);
      #line 18904 
      break;
      #line 18906 
      default: 
               #line 18906 
      ;
      #line 18906 
      __VERIFIER_assume(0);
    }
    #line 18909 
    if (emg_repeat_cnt_call_103 > 0) {
      #line 18910 
      emg_repeat_cnt_call_103 --;
      #line 18912 
      goto emg_call_103;
    }
    else 
         #line 18914 
         __VERIFIER_assume(0);
  }
  else {
    #line 18920 
    if (emg_103_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 18921 
      (*(emg_103_container->release))(emg_103_resource_1,emg_103_resource_0);
    #line 18925 
    if (emg_repeat_cnt_main_103_0 > 0) {
      #line 18926 
      emg_repeat_cnt_main_103_0 --;
      #line 18928 
      goto emg_main_103;
    }
    else 
         #line 18930 
         __VERIFIER_assume(0);
  }
  #line 18936 
  return (void *)0;
  #line 18939 
  emg_main_103: 
                #line 18939 
  ;
  #line 18940 
  if (ldv_undef_int() != 0) {
    #line 18942 
    emg_103_ret = simple_open(emg_103_resource_1,emg_103_resource_0);
    #line 18947 
    emg_103_ret = ldv_filter_err_code(emg_103_ret);
    #line 18950 
    if (ldv_undef_int() != 0) {
      #line 18952 
      __VERIFIER_assume(emg_103_ret == 0);
      #line 18956 
      goto emg_call_103;
    }
    else {
      #line 18961 
      __VERIFIER_assume(emg_103_ret != 0);
      #line 18964 
      if (emg_repeat_cnt_main_103_1 > 0) {
        #line 18965 
        emg_repeat_cnt_main_103_1 --;
        #line 18967 
        goto emg_main_103;
      }
      else 
           #line 18969 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 18976 
       ldv_free((void *)emg_103_resource_0);
  #line 18984 
  return (void *)0;
}

#line 18989  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_tx_frag_bad_mblk_num_ops(void *arg0)
{
  #line 18992 
  struct file_operations *emg_104_container;
  #line 18993 
  long long emg_104_emg_param_1_0;
  #line 18994 
  char *emg_104_emg_param_1_2;
  #line 18995 
  char *emg_104_emg_param_1_4;
  #line 18996 
  int emg_104_emg_param_2_1;
  #line 18997 
  long long *emg_104_emg_param_3_3;
  #line 18998 
  long long *emg_104_emg_param_3_5;
  #line 18999 
  struct file *emg_104_resource_0;
  #line 19000 
  struct inode *emg_104_resource_1;
  #line 19001 
  int emg_104_ret;
  #line 19002 
  unsigned long emg_104_size_cnt;
  #line 19003 
  int emg_repeat_cnt_main_104_0 = 1;
  #line 19004 
  int emg_repeat_cnt_main_104_1 = 1;
  #line 19005 
  int emg_repeat_cnt_call_104 = 1;
  #line 19007 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 19011 
  emg_104_ret = ldv_undef_int();
  #line 19012 
  emg_104_container = emg_alias_tx_frag_bad_mblk_num_ops;
  #line 19013 
  emg_104_ret = ldv_undef_int();
  #line 19015 
  __VERIFIER_assume(data->arg0 == emg_alias_tx_frag_bad_mblk_num_ops);
  #line 19017 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 19018 
    emg_104_container = data->arg0;
    #line 19019 
    ldv_free((void *)data);
  }
  #line 19024 
  emg_104_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 19025 
  emg_104_size_cnt = (unsigned long)ldv_undef_int();
  #line 19029 
  goto emg_main_104;
  #line 19033 
  return (void *)0;
  #line 19036 
  emg_call_104: 
                #line 19036 
  ;
  #line 19037 
  if (ldv_undef_int() != 0) {
    #line 19038 
    switch (ldv_undef_int()) {
      #line 19039 
      case 0: 
              #line 19039 
      ;
      #line 19041 
      emg_104_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 19041 
      emg_104_emg_param_1_2 = emg_104_emg_param_1_2;
      #line 19042 
      emg_104_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 19042 
      emg_104_emg_param_3_3 = emg_104_emg_param_3_3;
      #line 19046 
      emg_wrapper_tx_frag_bad_mblk_num_read(emg_104_resource_0,emg_104_emg_param_1_2,emg_104_size_cnt,emg_104_emg_param_3_3);
      #line 19050 
      ldv_free((void *)emg_104_emg_param_1_2);
      #line 19051 
      ldv_free((void *)emg_104_emg_param_3_3);
      #line 19053 
      break;
      #line 19055 
      case 1: 
              #line 19055 
      ;
      #line 19057 
      generic_file_llseek(emg_104_resource_0,emg_104_emg_param_1_0,emg_104_emg_param_2_1);
      #line 19059 
      break;
      #line 19061 
      case 2: 
              #line 19061 
      ;
      #line 19068 
      __VERIFIER_assume(emg_104_size_cnt <= 2147479552UL);
      #line 19069 
      emg_104_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 19069 
      emg_104_emg_param_1_4 = emg_104_emg_param_1_4;
      #line 19070 
      emg_104_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 19070 
      emg_104_emg_param_3_5 = emg_104_emg_param_3_5;
      #line 19074 
      if (emg_104_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 19075 
        (*(emg_104_container->write))(emg_104_resource_0,emg_104_emg_param_1_4,emg_104_size_cnt,emg_104_emg_param_3_5);
      #line 19080 
      ldv_free((void *)emg_104_emg_param_1_4);
      #line 19081 
      ldv_free((void *)emg_104_emg_param_3_5);
      #line 19083 
      break;
      #line 19085 
      default: 
               #line 19085 
      ;
      #line 19085 
      __VERIFIER_assume(0);
    }
    #line 19088 
    if (emg_repeat_cnt_call_104 > 0) {
      #line 19089 
      emg_repeat_cnt_call_104 --;
      #line 19091 
      goto emg_call_104;
    }
    else 
         #line 19093 
         __VERIFIER_assume(0);
  }
  else {
    #line 19099 
    if (emg_104_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 19100 
      (*(emg_104_container->release))(emg_104_resource_1,emg_104_resource_0);
    #line 19104 
    if (emg_repeat_cnt_main_104_0 > 0) {
      #line 19105 
      emg_repeat_cnt_main_104_0 --;
      #line 19107 
      goto emg_main_104;
    }
    else 
         #line 19109 
         __VERIFIER_assume(0);
  }
  #line 19115 
  return (void *)0;
  #line 19118 
  emg_main_104: 
                #line 19118 
  ;
  #line 19119 
  if (ldv_undef_int() != 0) {
    #line 19121 
    emg_104_ret = simple_open(emg_104_resource_1,emg_104_resource_0);
    #line 19126 
    emg_104_ret = ldv_filter_err_code(emg_104_ret);
    #line 19129 
    if (ldv_undef_int() != 0) {
      #line 19131 
      __VERIFIER_assume(emg_104_ret == 0);
      #line 19135 
      goto emg_call_104;
    }
    else {
      #line 19140 
      __VERIFIER_assume(emg_104_ret != 0);
      #line 19143 
      if (emg_repeat_cnt_main_104_1 > 0) {
        #line 19144 
        emg_repeat_cnt_main_104_1 --;
        #line 19146 
        goto emg_main_104;
      }
      else 
           #line 19148 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 19155 
       ldv_free((void *)emg_104_resource_0);
  #line 19163 
  return (void *)0;
}

#line 19168  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_tx_frag_cache_hit_ops(void *arg0)
{
  #line 19171 
  struct file_operations *emg_105_container;
  #line 19172 
  long long emg_105_emg_param_1_0;
  #line 19173 
  char *emg_105_emg_param_1_2;
  #line 19174 
  char *emg_105_emg_param_1_4;
  #line 19175 
  int emg_105_emg_param_2_1;
  #line 19176 
  long long *emg_105_emg_param_3_3;
  #line 19177 
  long long *emg_105_emg_param_3_5;
  #line 19178 
  struct file *emg_105_resource_0;
  #line 19179 
  struct inode *emg_105_resource_1;
  #line 19180 
  int emg_105_ret;
  #line 19181 
  unsigned long emg_105_size_cnt;
  #line 19182 
  int emg_repeat_cnt_main_105_1 = 1;
  #line 19183 
  int emg_repeat_cnt_call_105 = 1;
  #line 19184 
  int emg_repeat_cnt_main_105_0 = 1;
  #line 19186 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 19190 
  emg_105_ret = ldv_undef_int();
  #line 19191 
  emg_105_container = emg_alias_tx_frag_cache_hit_ops;
  #line 19192 
  emg_105_ret = ldv_undef_int();
  #line 19194 
  __VERIFIER_assume(data->arg0 == emg_alias_tx_frag_cache_hit_ops);
  #line 19196 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 19197 
    emg_105_container = data->arg0;
    #line 19198 
    ldv_free((void *)data);
  }
  #line 19203 
  emg_105_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 19204 
  emg_105_size_cnt = (unsigned long)ldv_undef_int();
  #line 19208 
  goto emg_main_105;
  #line 19212 
  return (void *)0;
  #line 19215 
  emg_call_105: 
                #line 19215 
  ;
  #line 19216 
  if (ldv_undef_int() != 0) {
    #line 19217 
    switch (ldv_undef_int()) {
      #line 19218 
      case 0: 
              #line 19218 
      ;
      #line 19220 
      emg_105_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 19220 
      emg_105_emg_param_1_2 = emg_105_emg_param_1_2;
      #line 19221 
      emg_105_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 19221 
      emg_105_emg_param_3_3 = emg_105_emg_param_3_3;
      #line 19225 
      emg_wrapper_tx_frag_cache_hit_read(emg_105_resource_0,emg_105_emg_param_1_2,emg_105_size_cnt,emg_105_emg_param_3_3);
      #line 19229 
      ldv_free((void *)emg_105_emg_param_1_2);
      #line 19230 
      ldv_free((void *)emg_105_emg_param_3_3);
      #line 19232 
      break;
      #line 19234 
      case 1: 
              #line 19234 
      ;
      #line 19236 
      generic_file_llseek(emg_105_resource_0,emg_105_emg_param_1_0,emg_105_emg_param_2_1);
      #line 19238 
      break;
      #line 19240 
      case 2: 
              #line 19240 
      ;
      #line 19247 
      __VERIFIER_assume(emg_105_size_cnt <= 2147479552UL);
      #line 19248 
      emg_105_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 19248 
      emg_105_emg_param_1_4 = emg_105_emg_param_1_4;
      #line 19249 
      emg_105_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 19249 
      emg_105_emg_param_3_5 = emg_105_emg_param_3_5;
      #line 19253 
      if (emg_105_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 19254 
        (*(emg_105_container->write))(emg_105_resource_0,emg_105_emg_param_1_4,emg_105_size_cnt,emg_105_emg_param_3_5);
      #line 19259 
      ldv_free((void *)emg_105_emg_param_1_4);
      #line 19260 
      ldv_free((void *)emg_105_emg_param_3_5);
      #line 19262 
      break;
      #line 19264 
      default: 
               #line 19264 
      ;
      #line 19264 
      __VERIFIER_assume(0);
    }
    #line 19267 
    if (emg_repeat_cnt_call_105 > 0) {
      #line 19268 
      emg_repeat_cnt_call_105 --;
      #line 19270 
      goto emg_call_105;
    }
    else 
         #line 19272 
         __VERIFIER_assume(0);
  }
  else {
    #line 19278 
    if (emg_105_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 19279 
      (*(emg_105_container->release))(emg_105_resource_1,emg_105_resource_0);
    #line 19283 
    if (emg_repeat_cnt_main_105_1 > 0) {
      #line 19284 
      emg_repeat_cnt_main_105_1 --;
      #line 19286 
      goto emg_main_105;
    }
    else 
         #line 19288 
         __VERIFIER_assume(0);
  }
  #line 19294 
  return (void *)0;
  #line 19297 
  emg_main_105: 
                #line 19297 
  ;
  #line 19298 
  if (ldv_undef_int() != 0) {
    #line 19300 
    emg_105_ret = simple_open(emg_105_resource_1,emg_105_resource_0);
    #line 19305 
    emg_105_ret = ldv_filter_err_code(emg_105_ret);
    #line 19308 
    if (ldv_undef_int() != 0) {
      #line 19310 
      __VERIFIER_assume(emg_105_ret == 0);
      #line 19314 
      goto emg_call_105;
    }
    else {
      #line 19319 
      __VERIFIER_assume(emg_105_ret != 0);
      #line 19322 
      if (emg_repeat_cnt_main_105_0 > 0) {
        #line 19323 
        emg_repeat_cnt_main_105_0 --;
        #line 19325 
        goto emg_main_105;
      }
      else 
           #line 19327 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 19334 
       ldv_free((void *)emg_105_resource_0);
  #line 19342 
  return (void *)0;
}

#line 19347  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_tx_frag_cache_miss_ops(void *arg0)
{
  #line 19350 
  struct file_operations *emg_106_container;
  #line 19351 
  long long emg_106_emg_param_1_0;
  #line 19352 
  char *emg_106_emg_param_1_2;
  #line 19353 
  char *emg_106_emg_param_1_4;
  #line 19354 
  int emg_106_emg_param_2_1;
  #line 19355 
  long long *emg_106_emg_param_3_3;
  #line 19356 
  long long *emg_106_emg_param_3_5;
  #line 19357 
  struct file *emg_106_resource_0;
  #line 19358 
  struct inode *emg_106_resource_1;
  #line 19359 
  int emg_106_ret;
  #line 19360 
  unsigned long emg_106_size_cnt;
  #line 19361 
  int emg_repeat_cnt_call_106 = 1;
  #line 19362 
  int emg_repeat_cnt_main_106_1 = 1;
  #line 19363 
  int emg_repeat_cnt_main_106_0 = 1;
  #line 19365 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 19369 
  emg_106_ret = ldv_undef_int();
  #line 19370 
  emg_106_container = emg_alias_tx_frag_cache_miss_ops;
  #line 19371 
  emg_106_ret = ldv_undef_int();
  #line 19373 
  __VERIFIER_assume(data->arg0 == emg_alias_tx_frag_cache_miss_ops);
  #line 19375 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 19376 
    emg_106_container = data->arg0;
    #line 19377 
    ldv_free((void *)data);
  }
  #line 19382 
  emg_106_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 19383 
  emg_106_size_cnt = (unsigned long)ldv_undef_int();
  #line 19387 
  goto emg_main_106;
  #line 19391 
  return (void *)0;
  #line 19394 
  emg_call_106: 
                #line 19394 
  ;
  #line 19395 
  if (ldv_undef_int() != 0) {
    #line 19396 
    switch (ldv_undef_int()) {
      #line 19397 
      case 0: 
              #line 19397 
      ;
      #line 19399 
      emg_106_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 19399 
      emg_106_emg_param_1_2 = emg_106_emg_param_1_2;
      #line 19400 
      emg_106_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 19400 
      emg_106_emg_param_3_3 = emg_106_emg_param_3_3;
      #line 19404 
      emg_wrapper_tx_frag_cache_miss_read(emg_106_resource_0,emg_106_emg_param_1_2,emg_106_size_cnt,emg_106_emg_param_3_3);
      #line 19408 
      ldv_free((void *)emg_106_emg_param_1_2);
      #line 19409 
      ldv_free((void *)emg_106_emg_param_3_3);
      #line 19411 
      break;
      #line 19413 
      case 1: 
              #line 19413 
      ;
      #line 19415 
      generic_file_llseek(emg_106_resource_0,emg_106_emg_param_1_0,emg_106_emg_param_2_1);
      #line 19417 
      break;
      #line 19419 
      case 2: 
              #line 19419 
      ;
      #line 19426 
      __VERIFIER_assume(emg_106_size_cnt <= 2147479552UL);
      #line 19427 
      emg_106_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 19427 
      emg_106_emg_param_1_4 = emg_106_emg_param_1_4;
      #line 19428 
      emg_106_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 19428 
      emg_106_emg_param_3_5 = emg_106_emg_param_3_5;
      #line 19432 
      if (emg_106_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 19433 
        (*(emg_106_container->write))(emg_106_resource_0,emg_106_emg_param_1_4,emg_106_size_cnt,emg_106_emg_param_3_5);
      #line 19438 
      ldv_free((void *)emg_106_emg_param_1_4);
      #line 19439 
      ldv_free((void *)emg_106_emg_param_3_5);
      #line 19441 
      break;
      #line 19443 
      default: 
               #line 19443 
      ;
      #line 19443 
      __VERIFIER_assume(0);
    }
    #line 19446 
    if (emg_repeat_cnt_call_106 > 0) {
      #line 19447 
      emg_repeat_cnt_call_106 --;
      #line 19449 
      goto emg_call_106;
    }
    else 
         #line 19451 
         __VERIFIER_assume(0);
  }
  else {
    #line 19457 
    if (emg_106_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 19458 
      (*(emg_106_container->release))(emg_106_resource_1,emg_106_resource_0);
    #line 19462 
    if (emg_repeat_cnt_main_106_1 > 0) {
      #line 19463 
      emg_repeat_cnt_main_106_1 --;
      #line 19465 
      goto emg_main_106;
    }
    else 
         #line 19467 
         __VERIFIER_assume(0);
  }
  #line 19473 
  return (void *)0;
  #line 19476 
  emg_main_106: 
                #line 19476 
  ;
  #line 19477 
  if (ldv_undef_int() != 0) {
    #line 19479 
    emg_106_ret = simple_open(emg_106_resource_1,emg_106_resource_0);
    #line 19484 
    emg_106_ret = ldv_filter_err_code(emg_106_ret);
    #line 19487 
    if (ldv_undef_int() != 0) {
      #line 19489 
      __VERIFIER_assume(emg_106_ret == 0);
      #line 19493 
      goto emg_call_106;
    }
    else {
      #line 19498 
      __VERIFIER_assume(emg_106_ret != 0);
      #line 19501 
      if (emg_repeat_cnt_main_106_0 > 0) {
        #line 19502 
        emg_repeat_cnt_main_106_0 --;
        #line 19504 
        goto emg_main_106;
      }
      else 
           #line 19506 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 19513 
       ldv_free((void *)emg_106_resource_0);
  #line 19521 
  return (void *)0;
}

#line 19526  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_tx_frag_called_ops(void *arg0)
{
  #line 19529 
  struct file_operations *emg_107_container;
  #line 19530 
  long long emg_107_emg_param_1_0;
  #line 19531 
  char *emg_107_emg_param_1_2;
  #line 19532 
  char *emg_107_emg_param_1_4;
  #line 19533 
  int emg_107_emg_param_2_1;
  #line 19534 
  long long *emg_107_emg_param_3_3;
  #line 19535 
  long long *emg_107_emg_param_3_5;
  #line 19536 
  struct file *emg_107_resource_0;
  #line 19537 
  struct inode *emg_107_resource_1;
  #line 19538 
  int emg_107_ret;
  #line 19539 
  unsigned long emg_107_size_cnt;
  #line 19540 
  int emg_repeat_cnt_main_107_0 = 1;
  #line 19541 
  int emg_repeat_cnt_call_107 = 1;
  #line 19542 
  int emg_repeat_cnt_main_107_1 = 1;
  #line 19544 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 19548 
  emg_107_ret = ldv_undef_int();
  #line 19549 
  emg_107_container = emg_alias_tx_frag_called_ops;
  #line 19550 
  emg_107_ret = ldv_undef_int();
  #line 19552 
  __VERIFIER_assume(data->arg0 == emg_alias_tx_frag_called_ops);
  #line 19554 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 19555 
    emg_107_container = data->arg0;
    #line 19556 
    ldv_free((void *)data);
  }
  #line 19561 
  emg_107_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 19562 
  emg_107_size_cnt = (unsigned long)ldv_undef_int();
  #line 19566 
  goto emg_main_107;
  #line 19570 
  return (void *)0;
  #line 19573 
  emg_call_107: 
                #line 19573 
  ;
  #line 19574 
  if (ldv_undef_int() != 0) {
    #line 19575 
    switch (ldv_undef_int()) {
      #line 19576 
      case 0: 
              #line 19576 
      ;
      #line 19578 
      emg_107_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 19578 
      emg_107_emg_param_1_2 = emg_107_emg_param_1_2;
      #line 19579 
      emg_107_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 19579 
      emg_107_emg_param_3_3 = emg_107_emg_param_3_3;
      #line 19583 
      emg_wrapper_tx_frag_called_read(emg_107_resource_0,emg_107_emg_param_1_2,emg_107_size_cnt,emg_107_emg_param_3_3);
      #line 19587 
      ldv_free((void *)emg_107_emg_param_1_2);
      #line 19588 
      ldv_free((void *)emg_107_emg_param_3_3);
      #line 19590 
      break;
      #line 19592 
      case 1: 
              #line 19592 
      ;
      #line 19594 
      generic_file_llseek(emg_107_resource_0,emg_107_emg_param_1_0,emg_107_emg_param_2_1);
      #line 19596 
      break;
      #line 19598 
      case 2: 
              #line 19598 
      ;
      #line 19605 
      __VERIFIER_assume(emg_107_size_cnt <= 2147479552UL);
      #line 19606 
      emg_107_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 19606 
      emg_107_emg_param_1_4 = emg_107_emg_param_1_4;
      #line 19607 
      emg_107_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 19607 
      emg_107_emg_param_3_5 = emg_107_emg_param_3_5;
      #line 19611 
      if (emg_107_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 19612 
        (*(emg_107_container->write))(emg_107_resource_0,emg_107_emg_param_1_4,emg_107_size_cnt,emg_107_emg_param_3_5);
      #line 19617 
      ldv_free((void *)emg_107_emg_param_1_4);
      #line 19618 
      ldv_free((void *)emg_107_emg_param_3_5);
      #line 19620 
      break;
      #line 19622 
      default: 
               #line 19622 
      ;
      #line 19622 
      __VERIFIER_assume(0);
    }
    #line 19625 
    if (emg_repeat_cnt_call_107 > 0) {
      #line 19626 
      emg_repeat_cnt_call_107 --;
      #line 19628 
      goto emg_call_107;
    }
    else 
         #line 19630 
         __VERIFIER_assume(0);
  }
  else {
    #line 19636 
    if (emg_107_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 19637 
      (*(emg_107_container->release))(emg_107_resource_1,emg_107_resource_0);
    #line 19641 
    if (emg_repeat_cnt_main_107_1 > 0) {
      #line 19642 
      emg_repeat_cnt_main_107_1 --;
      #line 19644 
      goto emg_main_107;
    }
    else 
         #line 19646 
         __VERIFIER_assume(0);
  }
  #line 19652 
  return (void *)0;
  #line 19655 
  emg_main_107: 
                #line 19655 
  ;
  #line 19656 
  if (ldv_undef_int() != 0) {
    #line 19658 
    emg_107_ret = simple_open(emg_107_resource_1,emg_107_resource_0);
    #line 19663 
    emg_107_ret = ldv_filter_err_code(emg_107_ret);
    #line 19666 
    if (ldv_undef_int() != 0) {
      #line 19668 
      __VERIFIER_assume(emg_107_ret == 0);
      #line 19672 
      goto emg_call_107;
    }
    else {
      #line 19677 
      __VERIFIER_assume(emg_107_ret != 0);
      #line 19680 
      if (emg_repeat_cnt_main_107_0 > 0) {
        #line 19681 
        emg_repeat_cnt_main_107_0 --;
        #line 19683 
        goto emg_main_107;
      }
      else 
           #line 19685 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 19692 
       ldv_free((void *)emg_107_resource_0);
  #line 19700 
  return (void *)0;
}

#line 19705  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_tx_frag_failed_ops(void *arg0)
{
  #line 19708 
  struct file_operations *emg_108_container;
  #line 19709 
  long long emg_108_emg_param_1_0;
  #line 19710 
  char *emg_108_emg_param_1_2;
  #line 19711 
  char *emg_108_emg_param_1_4;
  #line 19712 
  int emg_108_emg_param_2_1;
  #line 19713 
  long long *emg_108_emg_param_3_3;
  #line 19714 
  long long *emg_108_emg_param_3_5;
  #line 19715 
  struct file *emg_108_resource_0;
  #line 19716 
  struct inode *emg_108_resource_1;
  #line 19717 
  int emg_108_ret;
  #line 19718 
  unsigned long emg_108_size_cnt;
  #line 19719 
  int emg_repeat_cnt_main_108_1 = 1;
  #line 19720 
  int emg_repeat_cnt_call_108 = 1;
  #line 19721 
  int emg_repeat_cnt_main_108_0 = 1;
  #line 19723 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 19727 
  emg_108_ret = ldv_undef_int();
  #line 19728 
  emg_108_container = emg_alias_tx_frag_failed_ops;
  #line 19729 
  emg_108_ret = ldv_undef_int();
  #line 19731 
  __VERIFIER_assume(data->arg0 == emg_alias_tx_frag_failed_ops);
  #line 19733 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 19734 
    emg_108_container = data->arg0;
    #line 19735 
    ldv_free((void *)data);
  }
  #line 19740 
  emg_108_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 19741 
  emg_108_size_cnt = (unsigned long)ldv_undef_int();
  #line 19745 
  goto emg_main_108;
  #line 19749 
  return (void *)0;
  #line 19752 
  emg_call_108: 
                #line 19752 
  ;
  #line 19753 
  if (ldv_undef_int() != 0) {
    #line 19754 
    switch (ldv_undef_int()) {
      #line 19755 
      case 0: 
              #line 19755 
      ;
      #line 19757 
      emg_108_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 19757 
      emg_108_emg_param_1_2 = emg_108_emg_param_1_2;
      #line 19758 
      emg_108_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 19758 
      emg_108_emg_param_3_3 = emg_108_emg_param_3_3;
      #line 19762 
      emg_wrapper_tx_frag_failed_read(emg_108_resource_0,emg_108_emg_param_1_2,emg_108_size_cnt,emg_108_emg_param_3_3);
      #line 19766 
      ldv_free((void *)emg_108_emg_param_1_2);
      #line 19767 
      ldv_free((void *)emg_108_emg_param_3_3);
      #line 19769 
      break;
      #line 19771 
      case 1: 
              #line 19771 
      ;
      #line 19773 
      generic_file_llseek(emg_108_resource_0,emg_108_emg_param_1_0,emg_108_emg_param_2_1);
      #line 19775 
      break;
      #line 19777 
      case 2: 
              #line 19777 
      ;
      #line 19784 
      __VERIFIER_assume(emg_108_size_cnt <= 2147479552UL);
      #line 19785 
      emg_108_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 19785 
      emg_108_emg_param_1_4 = emg_108_emg_param_1_4;
      #line 19786 
      emg_108_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 19786 
      emg_108_emg_param_3_5 = emg_108_emg_param_3_5;
      #line 19790 
      if (emg_108_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 19791 
        (*(emg_108_container->write))(emg_108_resource_0,emg_108_emg_param_1_4,emg_108_size_cnt,emg_108_emg_param_3_5);
      #line 19796 
      ldv_free((void *)emg_108_emg_param_1_4);
      #line 19797 
      ldv_free((void *)emg_108_emg_param_3_5);
      #line 19799 
      break;
      #line 19801 
      default: 
               #line 19801 
      ;
      #line 19801 
      __VERIFIER_assume(0);
    }
    #line 19804 
    if (emg_repeat_cnt_call_108 > 0) {
      #line 19805 
      emg_repeat_cnt_call_108 --;
      #line 19807 
      goto emg_call_108;
    }
    else 
         #line 19809 
         __VERIFIER_assume(0);
  }
  else {
    #line 19815 
    if (emg_108_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 19816 
      (*(emg_108_container->release))(emg_108_resource_1,emg_108_resource_0);
    #line 19820 
    if (emg_repeat_cnt_main_108_0 > 0) {
      #line 19821 
      emg_repeat_cnt_main_108_0 --;
      #line 19823 
      goto emg_main_108;
    }
    else 
         #line 19825 
         __VERIFIER_assume(0);
  }
  #line 19831 
  return (void *)0;
  #line 19834 
  emg_main_108: 
                #line 19834 
  ;
  #line 19835 
  if (ldv_undef_int() != 0) {
    #line 19837 
    emg_108_ret = simple_open(emg_108_resource_1,emg_108_resource_0);
    #line 19842 
    emg_108_ret = ldv_filter_err_code(emg_108_ret);
    #line 19845 
    if (ldv_undef_int() != 0) {
      #line 19847 
      __VERIFIER_assume(emg_108_ret == 0);
      #line 19851 
      goto emg_call_108;
    }
    else {
      #line 19856 
      __VERIFIER_assume(emg_108_ret != 0);
      #line 19859 
      if (emg_repeat_cnt_main_108_1 > 0) {
        #line 19860 
        emg_repeat_cnt_main_108_1 --;
        #line 19862 
        goto emg_main_108;
      }
      else 
           #line 19864 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 19871 
       ldv_free((void *)emg_108_resource_0);
  #line 19879 
  return (void *)0;
}

#line 19884  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_tx_frag_in_process_called_ops(void *arg0)
{
  #line 19887 
  struct file_operations *emg_109_container;
  #line 19888 
  long long emg_109_emg_param_1_0;
  #line 19889 
  char *emg_109_emg_param_1_2;
  #line 19890 
  char *emg_109_emg_param_1_4;
  #line 19891 
  int emg_109_emg_param_2_1;
  #line 19892 
  long long *emg_109_emg_param_3_3;
  #line 19893 
  long long *emg_109_emg_param_3_5;
  #line 19894 
  struct file *emg_109_resource_0;
  #line 19895 
  struct inode *emg_109_resource_1;
  #line 19896 
  int emg_109_ret;
  #line 19897 
  unsigned long emg_109_size_cnt;
  #line 19898 
  int emg_repeat_cnt_call_109 = 1;
  #line 19899 
  int emg_repeat_cnt_main_109_0 = 1;
  #line 19900 
  int emg_repeat_cnt_main_109_1 = 1;
  #line 19902 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 19906 
  emg_109_ret = ldv_undef_int();
  #line 19907 
  emg_109_container = emg_alias_tx_frag_in_process_called_ops;
  #line 19908 
  emg_109_ret = ldv_undef_int();
  #line 19910 
  __VERIFIER_assume(data->arg0 == emg_alias_tx_frag_in_process_called_ops);
  #line 19912 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 19913 
    emg_109_container = data->arg0;
    #line 19914 
    ldv_free((void *)data);
  }
  #line 19919 
  emg_109_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 19920 
  emg_109_size_cnt = (unsigned long)ldv_undef_int();
  #line 19924 
  goto emg_main_109;
  #line 19928 
  return (void *)0;
  #line 19931 
  emg_call_109: 
                #line 19931 
  ;
  #line 19932 
  if (ldv_undef_int() != 0) {
    #line 19933 
    switch (ldv_undef_int()) {
      #line 19934 
      case 0: 
              #line 19934 
      ;
      #line 19936 
      emg_109_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 19936 
      emg_109_emg_param_1_2 = emg_109_emg_param_1_2;
      #line 19937 
      emg_109_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 19937 
      emg_109_emg_param_3_3 = emg_109_emg_param_3_3;
      #line 19941 
      emg_wrapper_tx_frag_in_process_called_read(emg_109_resource_0,emg_109_emg_param_1_2,emg_109_size_cnt,emg_109_emg_param_3_3);
      #line 19945 
      ldv_free((void *)emg_109_emg_param_1_2);
      #line 19946 
      ldv_free((void *)emg_109_emg_param_3_3);
      #line 19948 
      break;
      #line 19950 
      case 1: 
              #line 19950 
      ;
      #line 19952 
      generic_file_llseek(emg_109_resource_0,emg_109_emg_param_1_0,emg_109_emg_param_2_1);
      #line 19954 
      break;
      #line 19956 
      case 2: 
              #line 19956 
      ;
      #line 19963 
      __VERIFIER_assume(emg_109_size_cnt <= 2147479552UL);
      #line 19964 
      emg_109_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 19964 
      emg_109_emg_param_1_4 = emg_109_emg_param_1_4;
      #line 19965 
      emg_109_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 19965 
      emg_109_emg_param_3_5 = emg_109_emg_param_3_5;
      #line 19969 
      if (emg_109_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 19970 
        (*(emg_109_container->write))(emg_109_resource_0,emg_109_emg_param_1_4,emg_109_size_cnt,emg_109_emg_param_3_5);
      #line 19975 
      ldv_free((void *)emg_109_emg_param_1_4);
      #line 19976 
      ldv_free((void *)emg_109_emg_param_3_5);
      #line 19978 
      break;
      #line 19980 
      default: 
               #line 19980 
      ;
      #line 19980 
      __VERIFIER_assume(0);
    }
    #line 19983 
    if (emg_repeat_cnt_call_109 > 0) {
      #line 19984 
      emg_repeat_cnt_call_109 --;
      #line 19986 
      goto emg_call_109;
    }
    else 
         #line 19988 
         __VERIFIER_assume(0);
  }
  else {
    #line 19994 
    if (emg_109_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 19995 
      (*(emg_109_container->release))(emg_109_resource_1,emg_109_resource_0);
    #line 19999 
    if (emg_repeat_cnt_main_109_1 > 0) {
      #line 20000 
      emg_repeat_cnt_main_109_1 --;
      #line 20002 
      goto emg_main_109;
    }
    else 
         #line 20004 
         __VERIFIER_assume(0);
  }
  #line 20010 
  return (void *)0;
  #line 20013 
  emg_main_109: 
                #line 20013 
  ;
  #line 20014 
  if (ldv_undef_int() != 0) {
    #line 20016 
    emg_109_ret = simple_open(emg_109_resource_1,emg_109_resource_0);
    #line 20021 
    emg_109_ret = ldv_filter_err_code(emg_109_ret);
    #line 20024 
    if (ldv_undef_int() != 0) {
      #line 20026 
      __VERIFIER_assume(emg_109_ret == 0);
      #line 20030 
      goto emg_call_109;
    }
    else {
      #line 20035 
      __VERIFIER_assume(emg_109_ret != 0);
      #line 20038 
      if (emg_repeat_cnt_main_109_0 > 0) {
        #line 20039 
        emg_repeat_cnt_main_109_0 --;
        #line 20041 
        goto emg_main_109;
      }
      else 
           #line 20043 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 20050 
       ldv_free((void *)emg_109_resource_0);
  #line 20058 
  return (void *)0;
}

#line 20063  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_tx_frag_init_called_ops(void *arg0)
{
  #line 20066 
  struct file_operations *emg_110_container;
  #line 20067 
  long long emg_110_emg_param_1_0;
  #line 20068 
  char *emg_110_emg_param_1_2;
  #line 20069 
  char *emg_110_emg_param_1_4;
  #line 20070 
  int emg_110_emg_param_2_1;
  #line 20071 
  long long *emg_110_emg_param_3_3;
  #line 20072 
  long long *emg_110_emg_param_3_5;
  #line 20073 
  struct file *emg_110_resource_0;
  #line 20074 
  struct inode *emg_110_resource_1;
  #line 20075 
  int emg_110_ret;
  #line 20076 
  unsigned long emg_110_size_cnt;
  #line 20077 
  int emg_repeat_cnt_main_110_0 = 1;
  #line 20078 
  int emg_repeat_cnt_call_110 = 1;
  #line 20079 
  int emg_repeat_cnt_main_110_1 = 1;
  #line 20081 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 20085 
  emg_110_ret = ldv_undef_int();
  #line 20086 
  emg_110_container = emg_alias_tx_frag_init_called_ops;
  #line 20087 
  emg_110_ret = ldv_undef_int();
  #line 20089 
  __VERIFIER_assume(data->arg0 == emg_alias_tx_frag_init_called_ops);
  #line 20091 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 20092 
    emg_110_container = data->arg0;
    #line 20093 
    ldv_free((void *)data);
  }
  #line 20098 
  emg_110_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 20099 
  emg_110_size_cnt = (unsigned long)ldv_undef_int();
  #line 20103 
  goto emg_main_110;
  #line 20107 
  return (void *)0;
  #line 20110 
  emg_call_110: 
                #line 20110 
  ;
  #line 20111 
  if (ldv_undef_int() != 0) {
    #line 20112 
    switch (ldv_undef_int()) {
      #line 20113 
      case 0: 
              #line 20113 
      ;
      #line 20115 
      emg_110_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 20115 
      emg_110_emg_param_1_2 = emg_110_emg_param_1_2;
      #line 20116 
      emg_110_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 20116 
      emg_110_emg_param_3_3 = emg_110_emg_param_3_3;
      #line 20120 
      emg_wrapper_tx_frag_init_called_read(emg_110_resource_0,emg_110_emg_param_1_2,emg_110_size_cnt,emg_110_emg_param_3_3);
      #line 20124 
      ldv_free((void *)emg_110_emg_param_1_2);
      #line 20125 
      ldv_free((void *)emg_110_emg_param_3_3);
      #line 20127 
      break;
      #line 20129 
      case 1: 
              #line 20129 
      ;
      #line 20131 
      generic_file_llseek(emg_110_resource_0,emg_110_emg_param_1_0,emg_110_emg_param_2_1);
      #line 20133 
      break;
      #line 20135 
      case 2: 
              #line 20135 
      ;
      #line 20142 
      __VERIFIER_assume(emg_110_size_cnt <= 2147479552UL);
      #line 20143 
      emg_110_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 20143 
      emg_110_emg_param_1_4 = emg_110_emg_param_1_4;
      #line 20144 
      emg_110_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 20144 
      emg_110_emg_param_3_5 = emg_110_emg_param_3_5;
      #line 20148 
      if (emg_110_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 20149 
        (*(emg_110_container->write))(emg_110_resource_0,emg_110_emg_param_1_4,emg_110_size_cnt,emg_110_emg_param_3_5);
      #line 20154 
      ldv_free((void *)emg_110_emg_param_1_4);
      #line 20155 
      ldv_free((void *)emg_110_emg_param_3_5);
      #line 20157 
      break;
      #line 20159 
      default: 
               #line 20159 
      ;
      #line 20159 
      __VERIFIER_assume(0);
    }
    #line 20162 
    if (emg_repeat_cnt_call_110 > 0) {
      #line 20163 
      emg_repeat_cnt_call_110 --;
      #line 20165 
      goto emg_call_110;
    }
    else 
         #line 20167 
         __VERIFIER_assume(0);
  }
  else {
    #line 20173 
    if (emg_110_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 20174 
      (*(emg_110_container->release))(emg_110_resource_1,emg_110_resource_0);
    #line 20178 
    if (emg_repeat_cnt_main_110_1 > 0) {
      #line 20179 
      emg_repeat_cnt_main_110_1 --;
      #line 20181 
      goto emg_main_110;
    }
    else 
         #line 20183 
         __VERIFIER_assume(0);
  }
  #line 20189 
  return (void *)0;
  #line 20192 
  emg_main_110: 
                #line 20192 
  ;
  #line 20193 
  if (ldv_undef_int() != 0) {
    #line 20195 
    emg_110_ret = simple_open(emg_110_resource_1,emg_110_resource_0);
    #line 20200 
    emg_110_ret = ldv_filter_err_code(emg_110_ret);
    #line 20203 
    if (ldv_undef_int() != 0) {
      #line 20205 
      __VERIFIER_assume(emg_110_ret == 0);
      #line 20209 
      goto emg_call_110;
    }
    else {
      #line 20214 
      __VERIFIER_assume(emg_110_ret != 0);
      #line 20217 
      if (emg_repeat_cnt_main_110_0 > 0) {
        #line 20218 
        emg_repeat_cnt_main_110_0 --;
        #line 20220 
        goto emg_main_110;
      }
      else 
           #line 20222 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 20229 
       ldv_free((void *)emg_110_resource_0);
  #line 20237 
  return (void *)0;
}

#line 20242  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_tx_frag_key_not_found_ops(void *arg0)
{
  #line 20245 
  struct file_operations *emg_111_container;
  #line 20246 
  long long emg_111_emg_param_1_0;
  #line 20247 
  char *emg_111_emg_param_1_2;
  #line 20248 
  char *emg_111_emg_param_1_4;
  #line 20249 
  int emg_111_emg_param_2_1;
  #line 20250 
  long long *emg_111_emg_param_3_3;
  #line 20251 
  long long *emg_111_emg_param_3_5;
  #line 20252 
  struct file *emg_111_resource_0;
  #line 20253 
  struct inode *emg_111_resource_1;
  #line 20254 
  int emg_111_ret;
  #line 20255 
  unsigned long emg_111_size_cnt;
  #line 20256 
  int emg_repeat_cnt_call_111 = 1;
  #line 20257 
  int emg_repeat_cnt_main_111_1 = 1;
  #line 20258 
  int emg_repeat_cnt_main_111_0 = 1;
  #line 20260 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 20264 
  emg_111_ret = ldv_undef_int();
  #line 20265 
  emg_111_container = emg_alias_tx_frag_key_not_found_ops;
  #line 20266 
  emg_111_ret = ldv_undef_int();
  #line 20268 
  __VERIFIER_assume(data->arg0 == emg_alias_tx_frag_key_not_found_ops);
  #line 20270 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 20271 
    emg_111_container = data->arg0;
    #line 20272 
    ldv_free((void *)data);
  }
  #line 20277 
  emg_111_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 20278 
  emg_111_size_cnt = (unsigned long)ldv_undef_int();
  #line 20282 
  goto emg_main_111;
  #line 20286 
  return (void *)0;
  #line 20289 
  emg_call_111: 
                #line 20289 
  ;
  #line 20290 
  if (ldv_undef_int() != 0) {
    #line 20291 
    switch (ldv_undef_int()) {
      #line 20292 
      case 0: 
              #line 20292 
      ;
      #line 20294 
      emg_111_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 20294 
      emg_111_emg_param_1_2 = emg_111_emg_param_1_2;
      #line 20295 
      emg_111_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 20295 
      emg_111_emg_param_3_3 = emg_111_emg_param_3_3;
      #line 20299 
      emg_wrapper_tx_frag_key_not_found_read(emg_111_resource_0,emg_111_emg_param_1_2,emg_111_size_cnt,emg_111_emg_param_3_3);
      #line 20303 
      ldv_free((void *)emg_111_emg_param_1_2);
      #line 20304 
      ldv_free((void *)emg_111_emg_param_3_3);
      #line 20306 
      break;
      #line 20308 
      case 1: 
              #line 20308 
      ;
      #line 20310 
      generic_file_llseek(emg_111_resource_0,emg_111_emg_param_1_0,emg_111_emg_param_2_1);
      #line 20312 
      break;
      #line 20314 
      case 2: 
              #line 20314 
      ;
      #line 20321 
      __VERIFIER_assume(emg_111_size_cnt <= 2147479552UL);
      #line 20322 
      emg_111_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 20322 
      emg_111_emg_param_1_4 = emg_111_emg_param_1_4;
      #line 20323 
      emg_111_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 20323 
      emg_111_emg_param_3_5 = emg_111_emg_param_3_5;
      #line 20327 
      if (emg_111_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 20328 
        (*(emg_111_container->write))(emg_111_resource_0,emg_111_emg_param_1_4,emg_111_size_cnt,emg_111_emg_param_3_5);
      #line 20333 
      ldv_free((void *)emg_111_emg_param_1_4);
      #line 20334 
      ldv_free((void *)emg_111_emg_param_3_5);
      #line 20336 
      break;
      #line 20338 
      default: 
               #line 20338 
      ;
      #line 20338 
      __VERIFIER_assume(0);
    }
    #line 20341 
    if (emg_repeat_cnt_call_111 > 0) {
      #line 20342 
      emg_repeat_cnt_call_111 --;
      #line 20344 
      goto emg_call_111;
    }
    else 
         #line 20346 
         __VERIFIER_assume(0);
  }
  else {
    #line 20352 
    if (emg_111_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 20353 
      (*(emg_111_container->release))(emg_111_resource_1,emg_111_resource_0);
    #line 20357 
    if (emg_repeat_cnt_main_111_0 > 0) {
      #line 20358 
      emg_repeat_cnt_main_111_0 --;
      #line 20360 
      goto emg_main_111;
    }
    else 
         #line 20362 
         __VERIFIER_assume(0);
  }
  #line 20368 
  return (void *)0;
  #line 20371 
  emg_main_111: 
                #line 20371 
  ;
  #line 20372 
  if (ldv_undef_int() != 0) {
    #line 20374 
    emg_111_ret = simple_open(emg_111_resource_1,emg_111_resource_0);
    #line 20379 
    emg_111_ret = ldv_filter_err_code(emg_111_ret);
    #line 20382 
    if (ldv_undef_int() != 0) {
      #line 20384 
      __VERIFIER_assume(emg_111_ret == 0);
      #line 20388 
      goto emg_call_111;
    }
    else {
      #line 20393 
      __VERIFIER_assume(emg_111_ret != 0);
      #line 20396 
      if (emg_repeat_cnt_main_111_1 > 0) {
        #line 20397 
        emg_repeat_cnt_main_111_1 --;
        #line 20399 
        goto emg_main_111;
      }
      else 
           #line 20401 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 20408 
       ldv_free((void *)emg_111_resource_0);
  #line 20416 
  return (void *)0;
}

#line 20421  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_tx_frag_mpdu_alloc_failed_ops(void *arg0)
{
  #line 20424 
  struct file_operations *emg_112_container;
  #line 20425 
  long long emg_112_emg_param_1_0;
  #line 20426 
  char *emg_112_emg_param_1_2;
  #line 20427 
  char *emg_112_emg_param_1_4;
  #line 20428 
  int emg_112_emg_param_2_1;
  #line 20429 
  long long *emg_112_emg_param_3_3;
  #line 20430 
  long long *emg_112_emg_param_3_5;
  #line 20431 
  struct file *emg_112_resource_0;
  #line 20432 
  struct inode *emg_112_resource_1;
  #line 20433 
  int emg_112_ret;
  #line 20434 
  unsigned long emg_112_size_cnt;
  #line 20435 
  int emg_repeat_cnt_main_112_1 = 1;
  #line 20436 
  int emg_repeat_cnt_main_112_0 = 1;
  #line 20437 
  int emg_repeat_cnt_call_112 = 1;
  #line 20439 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 20443 
  emg_112_ret = ldv_undef_int();
  #line 20444 
  emg_112_container = emg_alias_tx_frag_mpdu_alloc_failed_ops;
  #line 20445 
  emg_112_ret = ldv_undef_int();
  #line 20447 
  __VERIFIER_assume(data->arg0 == emg_alias_tx_frag_mpdu_alloc_failed_ops);
  #line 20449 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 20450 
    emg_112_container = data->arg0;
    #line 20451 
    ldv_free((void *)data);
  }
  #line 20456 
  emg_112_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 20457 
  emg_112_size_cnt = (unsigned long)ldv_undef_int();
  #line 20461 
  goto emg_main_112;
  #line 20465 
  return (void *)0;
  #line 20468 
  emg_call_112: 
                #line 20468 
  ;
  #line 20469 
  if (ldv_undef_int() != 0) {
    #line 20470 
    switch (ldv_undef_int()) {
      #line 20471 
      case 0: 
              #line 20471 
      ;
      #line 20473 
      emg_112_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 20473 
      emg_112_emg_param_1_2 = emg_112_emg_param_1_2;
      #line 20474 
      emg_112_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 20474 
      emg_112_emg_param_3_3 = emg_112_emg_param_3_3;
      #line 20478 
      emg_wrapper_tx_frag_mpdu_alloc_failed_read(emg_112_resource_0,emg_112_emg_param_1_2,emg_112_size_cnt,emg_112_emg_param_3_3);
      #line 20482 
      ldv_free((void *)emg_112_emg_param_1_2);
      #line 20483 
      ldv_free((void *)emg_112_emg_param_3_3);
      #line 20485 
      break;
      #line 20487 
      case 1: 
              #line 20487 
      ;
      #line 20489 
      generic_file_llseek(emg_112_resource_0,emg_112_emg_param_1_0,emg_112_emg_param_2_1);
      #line 20491 
      break;
      #line 20493 
      case 2: 
              #line 20493 
      ;
      #line 20500 
      __VERIFIER_assume(emg_112_size_cnt <= 2147479552UL);
      #line 20501 
      emg_112_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 20501 
      emg_112_emg_param_1_4 = emg_112_emg_param_1_4;
      #line 20502 
      emg_112_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 20502 
      emg_112_emg_param_3_5 = emg_112_emg_param_3_5;
      #line 20506 
      if (emg_112_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 20507 
        (*(emg_112_container->write))(emg_112_resource_0,emg_112_emg_param_1_4,emg_112_size_cnt,emg_112_emg_param_3_5);
      #line 20512 
      ldv_free((void *)emg_112_emg_param_1_4);
      #line 20513 
      ldv_free((void *)emg_112_emg_param_3_5);
      #line 20515 
      break;
      #line 20517 
      default: 
               #line 20517 
      ;
      #line 20517 
      __VERIFIER_assume(0);
    }
    #line 20520 
    if (emg_repeat_cnt_call_112 > 0) {
      #line 20521 
      emg_repeat_cnt_call_112 --;
      #line 20523 
      goto emg_call_112;
    }
    else 
         #line 20525 
         __VERIFIER_assume(0);
  }
  else {
    #line 20531 
    if (emg_112_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 20532 
      (*(emg_112_container->release))(emg_112_resource_1,emg_112_resource_0);
    #line 20536 
    if (emg_repeat_cnt_main_112_1 > 0) {
      #line 20537 
      emg_repeat_cnt_main_112_1 --;
      #line 20539 
      goto emg_main_112;
    }
    else 
         #line 20541 
         __VERIFIER_assume(0);
  }
  #line 20547 
  return (void *)0;
  #line 20550 
  emg_main_112: 
                #line 20550 
  ;
  #line 20551 
  if (ldv_undef_int() != 0) {
    #line 20553 
    emg_112_ret = simple_open(emg_112_resource_1,emg_112_resource_0);
    #line 20558 
    emg_112_ret = ldv_filter_err_code(emg_112_ret);
    #line 20561 
    if (ldv_undef_int() != 0) {
      #line 20563 
      __VERIFIER_assume(emg_112_ret == 0);
      #line 20567 
      goto emg_call_112;
    }
    else {
      #line 20572 
      __VERIFIER_assume(emg_112_ret != 0);
      #line 20575 
      if (emg_repeat_cnt_main_112_0 > 0) {
        #line 20576 
        emg_repeat_cnt_main_112_0 --;
        #line 20578 
        goto emg_main_112;
      }
      else 
           #line 20580 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 20587 
       ldv_free((void *)emg_112_resource_0);
  #line 20595 
  return (void *)0;
}

#line 20600  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_tx_frag_need_fragmentation_ops(void *arg0)
{
  #line 20603 
  struct file_operations *emg_113_container;
  #line 20604 
  long long emg_113_emg_param_1_0;
  #line 20605 
  char *emg_113_emg_param_1_2;
  #line 20606 
  char *emg_113_emg_param_1_4;
  #line 20607 
  int emg_113_emg_param_2_1;
  #line 20608 
  long long *emg_113_emg_param_3_3;
  #line 20609 
  long long *emg_113_emg_param_3_5;
  #line 20610 
  struct file *emg_113_resource_0;
  #line 20611 
  struct inode *emg_113_resource_1;
  #line 20612 
  int emg_113_ret;
  #line 20613 
  unsigned long emg_113_size_cnt;
  #line 20614 
  int emg_repeat_cnt_call_113 = 1;
  #line 20615 
  int emg_repeat_cnt_main_113_0 = 1;
  #line 20616 
  int emg_repeat_cnt_main_113_1 = 1;
  #line 20618 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 20622 
  emg_113_ret = ldv_undef_int();
  #line 20623 
  emg_113_container = emg_alias_tx_frag_need_fragmentation_ops;
  #line 20624 
  emg_113_ret = ldv_undef_int();
  #line 20626 
  __VERIFIER_assume(data->arg0 == emg_alias_tx_frag_need_fragmentation_ops);
  #line 20628 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 20629 
    emg_113_container = data->arg0;
    #line 20630 
    ldv_free((void *)data);
  }
  #line 20635 
  emg_113_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 20636 
  emg_113_size_cnt = (unsigned long)ldv_undef_int();
  #line 20640 
  goto emg_main_113;
  #line 20644 
  return (void *)0;
  #line 20647 
  emg_call_113: 
                #line 20647 
  ;
  #line 20648 
  if (ldv_undef_int() != 0) {
    #line 20649 
    switch (ldv_undef_int()) {
      #line 20650 
      case 0: 
              #line 20650 
      ;
      #line 20652 
      emg_113_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 20652 
      emg_113_emg_param_1_2 = emg_113_emg_param_1_2;
      #line 20653 
      emg_113_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 20653 
      emg_113_emg_param_3_3 = emg_113_emg_param_3_3;
      #line 20657 
      emg_wrapper_tx_frag_need_fragmentation_read(emg_113_resource_0,emg_113_emg_param_1_2,emg_113_size_cnt,emg_113_emg_param_3_3);
      #line 20661 
      ldv_free((void *)emg_113_emg_param_1_2);
      #line 20662 
      ldv_free((void *)emg_113_emg_param_3_3);
      #line 20664 
      break;
      #line 20666 
      case 1: 
              #line 20666 
      ;
      #line 20668 
      generic_file_llseek(emg_113_resource_0,emg_113_emg_param_1_0,emg_113_emg_param_2_1);
      #line 20670 
      break;
      #line 20672 
      case 2: 
              #line 20672 
      ;
      #line 20679 
      __VERIFIER_assume(emg_113_size_cnt <= 2147479552UL);
      #line 20680 
      emg_113_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 20680 
      emg_113_emg_param_1_4 = emg_113_emg_param_1_4;
      #line 20681 
      emg_113_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 20681 
      emg_113_emg_param_3_5 = emg_113_emg_param_3_5;
      #line 20685 
      if (emg_113_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 20686 
        (*(emg_113_container->write))(emg_113_resource_0,emg_113_emg_param_1_4,emg_113_size_cnt,emg_113_emg_param_3_5);
      #line 20691 
      ldv_free((void *)emg_113_emg_param_1_4);
      #line 20692 
      ldv_free((void *)emg_113_emg_param_3_5);
      #line 20694 
      break;
      #line 20696 
      default: 
               #line 20696 
      ;
      #line 20696 
      __VERIFIER_assume(0);
    }
    #line 20699 
    if (emg_repeat_cnt_call_113 > 0) {
      #line 20700 
      emg_repeat_cnt_call_113 --;
      #line 20702 
      goto emg_call_113;
    }
    else 
         #line 20704 
         __VERIFIER_assume(0);
  }
  else {
    #line 20710 
    if (emg_113_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 20711 
      (*(emg_113_container->release))(emg_113_resource_1,emg_113_resource_0);
    #line 20715 
    if (emg_repeat_cnt_main_113_0 > 0) {
      #line 20716 
      emg_repeat_cnt_main_113_0 --;
      #line 20718 
      goto emg_main_113;
    }
    else 
         #line 20720 
         __VERIFIER_assume(0);
  }
  #line 20726 
  return (void *)0;
  #line 20729 
  emg_main_113: 
                #line 20729 
  ;
  #line 20730 
  if (ldv_undef_int() != 0) {
    #line 20732 
    emg_113_ret = simple_open(emg_113_resource_1,emg_113_resource_0);
    #line 20737 
    emg_113_ret = ldv_filter_err_code(emg_113_ret);
    #line 20740 
    if (ldv_undef_int() != 0) {
      #line 20742 
      __VERIFIER_assume(emg_113_ret == 0);
      #line 20746 
      goto emg_call_113;
    }
    else {
      #line 20751 
      __VERIFIER_assume(emg_113_ret != 0);
      #line 20754 
      if (emg_repeat_cnt_main_113_1 > 0) {
        #line 20755 
        emg_repeat_cnt_main_113_1 --;
        #line 20757 
        goto emg_main_113;
      }
      else 
           #line 20759 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 20766 
       ldv_free((void *)emg_113_resource_0);
  #line 20774 
  return (void *)0;
}

#line 20779  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_tx_frag_tkip_called_ops(void *arg0)
{
  #line 20782 
  struct file_operations *emg_114_container;
  #line 20783 
  long long emg_114_emg_param_1_0;
  #line 20784 
  char *emg_114_emg_param_1_2;
  #line 20785 
  char *emg_114_emg_param_1_4;
  #line 20786 
  int emg_114_emg_param_2_1;
  #line 20787 
  long long *emg_114_emg_param_3_3;
  #line 20788 
  long long *emg_114_emg_param_3_5;
  #line 20789 
  struct file *emg_114_resource_0;
  #line 20790 
  struct inode *emg_114_resource_1;
  #line 20791 
  int emg_114_ret;
  #line 20792 
  unsigned long emg_114_size_cnt;
  #line 20793 
  int emg_repeat_cnt_call_114 = 1;
  #line 20794 
  int emg_repeat_cnt_main_114_0 = 1;
  #line 20795 
  int emg_repeat_cnt_main_114_1 = 1;
  #line 20797 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 20801 
  emg_114_ret = ldv_undef_int();
  #line 20802 
  emg_114_container = emg_alias_tx_frag_tkip_called_ops;
  #line 20803 
  emg_114_ret = ldv_undef_int();
  #line 20805 
  __VERIFIER_assume(data->arg0 == emg_alias_tx_frag_tkip_called_ops);
  #line 20807 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 20808 
    emg_114_container = data->arg0;
    #line 20809 
    ldv_free((void *)data);
  }
  #line 20814 
  emg_114_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 20815 
  emg_114_size_cnt = (unsigned long)ldv_undef_int();
  #line 20819 
  goto emg_main_114;
  #line 20823 
  return (void *)0;
  #line 20826 
  emg_call_114: 
                #line 20826 
  ;
  #line 20827 
  if (ldv_undef_int() != 0) {
    #line 20828 
    switch (ldv_undef_int()) {
      #line 20829 
      case 0: 
              #line 20829 
      ;
      #line 20831 
      emg_114_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 20831 
      emg_114_emg_param_1_2 = emg_114_emg_param_1_2;
      #line 20832 
      emg_114_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 20832 
      emg_114_emg_param_3_3 = emg_114_emg_param_3_3;
      #line 20836 
      emg_wrapper_tx_frag_tkip_called_read(emg_114_resource_0,emg_114_emg_param_1_2,emg_114_size_cnt,emg_114_emg_param_3_3);
      #line 20840 
      ldv_free((void *)emg_114_emg_param_1_2);
      #line 20841 
      ldv_free((void *)emg_114_emg_param_3_3);
      #line 20843 
      break;
      #line 20845 
      case 1: 
              #line 20845 
      ;
      #line 20847 
      generic_file_llseek(emg_114_resource_0,emg_114_emg_param_1_0,emg_114_emg_param_2_1);
      #line 20849 
      break;
      #line 20851 
      case 2: 
              #line 20851 
      ;
      #line 20858 
      __VERIFIER_assume(emg_114_size_cnt <= 2147479552UL);
      #line 20859 
      emg_114_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 20859 
      emg_114_emg_param_1_4 = emg_114_emg_param_1_4;
      #line 20860 
      emg_114_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 20860 
      emg_114_emg_param_3_5 = emg_114_emg_param_3_5;
      #line 20864 
      if (emg_114_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 20865 
        (*(emg_114_container->write))(emg_114_resource_0,emg_114_emg_param_1_4,emg_114_size_cnt,emg_114_emg_param_3_5);
      #line 20870 
      ldv_free((void *)emg_114_emg_param_1_4);
      #line 20871 
      ldv_free((void *)emg_114_emg_param_3_5);
      #line 20873 
      break;
      #line 20875 
      default: 
               #line 20875 
      ;
      #line 20875 
      __VERIFIER_assume(0);
    }
    #line 20878 
    if (emg_repeat_cnt_call_114 > 0) {
      #line 20879 
      emg_repeat_cnt_call_114 --;
      #line 20881 
      goto emg_call_114;
    }
    else 
         #line 20883 
         __VERIFIER_assume(0);
  }
  else {
    #line 20889 
    if (emg_114_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 20890 
      (*(emg_114_container->release))(emg_114_resource_1,emg_114_resource_0);
    #line 20894 
    if (emg_repeat_cnt_main_114_1 > 0) {
      #line 20895 
      emg_repeat_cnt_main_114_1 --;
      #line 20897 
      goto emg_main_114;
    }
    else 
         #line 20899 
         __VERIFIER_assume(0);
  }
  #line 20905 
  return (void *)0;
  #line 20908 
  emg_main_114: 
                #line 20908 
  ;
  #line 20909 
  if (ldv_undef_int() != 0) {
    #line 20911 
    emg_114_ret = simple_open(emg_114_resource_1,emg_114_resource_0);
    #line 20916 
    emg_114_ret = ldv_filter_err_code(emg_114_ret);
    #line 20919 
    if (ldv_undef_int() != 0) {
      #line 20921 
      __VERIFIER_assume(emg_114_ret == 0);
      #line 20925 
      goto emg_call_114;
    }
    else {
      #line 20930 
      __VERIFIER_assume(emg_114_ret != 0);
      #line 20933 
      if (emg_repeat_cnt_main_114_0 > 0) {
        #line 20934 
        emg_repeat_cnt_main_114_0 --;
        #line 20936 
        goto emg_main_114;
      }
      else 
           #line 20938 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 20945 
       ldv_free((void *)emg_114_resource_0);
  #line 20953 
  return (void *)0;
}

#line 20958  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_tx_tx_burst_programmed_ops(void *arg0)
{
  #line 20961 
  struct file_operations *emg_115_container;
  #line 20962 
  long long emg_115_emg_param_1_0;
  #line 20963 
  char *emg_115_emg_param_1_2;
  #line 20964 
  char *emg_115_emg_param_1_4;
  #line 20965 
  int emg_115_emg_param_2_1;
  #line 20966 
  long long *emg_115_emg_param_3_3;
  #line 20967 
  long long *emg_115_emg_param_3_5;
  #line 20968 
  struct file *emg_115_resource_0;
  #line 20969 
  struct inode *emg_115_resource_1;
  #line 20970 
  int emg_115_ret;
  #line 20971 
  unsigned long emg_115_size_cnt;
  #line 20972 
  int emg_repeat_cnt_call_115 = 1;
  #line 20973 
  int emg_repeat_cnt_main_115_0 = 1;
  #line 20974 
  int emg_repeat_cnt_main_115_1 = 1;
  #line 20976 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 20980 
  emg_115_ret = ldv_undef_int();
  #line 20981 
  emg_115_container = emg_alias_tx_tx_burst_programmed_ops;
  #line 20982 
  emg_115_ret = ldv_undef_int();
  #line 20984 
  __VERIFIER_assume(data->arg0 == emg_alias_tx_tx_burst_programmed_ops);
  #line 20986 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 20987 
    emg_115_container = data->arg0;
    #line 20988 
    ldv_free((void *)data);
  }
  #line 20993 
  emg_115_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 20994 
  emg_115_size_cnt = (unsigned long)ldv_undef_int();
  #line 20998 
  goto emg_main_115;
  #line 21002 
  return (void *)0;
  #line 21005 
  emg_call_115: 
                #line 21005 
  ;
  #line 21006 
  if (ldv_undef_int() != 0) {
    #line 21007 
    switch (ldv_undef_int()) {
      #line 21008 
      case 0: 
              #line 21008 
      ;
      #line 21010 
      emg_115_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 21010 
      emg_115_emg_param_1_2 = emg_115_emg_param_1_2;
      #line 21011 
      emg_115_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 21011 
      emg_115_emg_param_3_3 = emg_115_emg_param_3_3;
      #line 21015 
      emg_wrapper_tx_tx_burst_programmed_read(emg_115_resource_0,emg_115_emg_param_1_2,emg_115_size_cnt,emg_115_emg_param_3_3);
      #line 21019 
      ldv_free((void *)emg_115_emg_param_1_2);
      #line 21020 
      ldv_free((void *)emg_115_emg_param_3_3);
      #line 21022 
      break;
      #line 21024 
      case 1: 
              #line 21024 
      ;
      #line 21026 
      generic_file_llseek(emg_115_resource_0,emg_115_emg_param_1_0,emg_115_emg_param_2_1);
      #line 21028 
      break;
      #line 21030 
      case 2: 
              #line 21030 
      ;
      #line 21037 
      __VERIFIER_assume(emg_115_size_cnt <= 2147479552UL);
      #line 21038 
      emg_115_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 21038 
      emg_115_emg_param_1_4 = emg_115_emg_param_1_4;
      #line 21039 
      emg_115_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 21039 
      emg_115_emg_param_3_5 = emg_115_emg_param_3_5;
      #line 21043 
      if (emg_115_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 21044 
        (*(emg_115_container->write))(emg_115_resource_0,emg_115_emg_param_1_4,emg_115_size_cnt,emg_115_emg_param_3_5);
      #line 21049 
      ldv_free((void *)emg_115_emg_param_1_4);
      #line 21050 
      ldv_free((void *)emg_115_emg_param_3_5);
      #line 21052 
      break;
      #line 21054 
      default: 
               #line 21054 
      ;
      #line 21054 
      __VERIFIER_assume(0);
    }
    #line 21057 
    if (emg_repeat_cnt_call_115 > 0) {
      #line 21058 
      emg_repeat_cnt_call_115 --;
      #line 21060 
      goto emg_call_115;
    }
    else 
         #line 21062 
         __VERIFIER_assume(0);
  }
  else {
    #line 21068 
    if (emg_115_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 21069 
      (*(emg_115_container->release))(emg_115_resource_1,emg_115_resource_0);
    #line 21073 
    if (emg_repeat_cnt_main_115_1 > 0) {
      #line 21074 
      emg_repeat_cnt_main_115_1 --;
      #line 21076 
      goto emg_main_115;
    }
    else 
         #line 21078 
         __VERIFIER_assume(0);
  }
  #line 21084 
  return (void *)0;
  #line 21087 
  emg_main_115: 
                #line 21087 
  ;
  #line 21088 
  if (ldv_undef_int() != 0) {
    #line 21090 
    emg_115_ret = simple_open(emg_115_resource_1,emg_115_resource_0);
    #line 21095 
    emg_115_ret = ldv_filter_err_code(emg_115_ret);
    #line 21098 
    if (ldv_undef_int() != 0) {
      #line 21100 
      __VERIFIER_assume(emg_115_ret == 0);
      #line 21104 
      goto emg_call_115;
    }
    else {
      #line 21109 
      __VERIFIER_assume(emg_115_ret != 0);
      #line 21112 
      if (emg_repeat_cnt_main_115_0 > 0) {
        #line 21113 
        emg_repeat_cnt_main_115_0 --;
        #line 21115 
        goto emg_main_115;
      }
      else 
           #line 21117 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 21124 
       ldv_free((void *)emg_115_resource_0);
  #line 21132 
  return (void *)0;
}

#line 21137  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_tx_tx_cfe1_ops(void *arg0)
{
  #line 21140 
  struct file_operations *emg_116_container;
  #line 21141 
  long long emg_116_emg_param_1_0;
  #line 21142 
  char *emg_116_emg_param_1_2;
  #line 21143 
  char *emg_116_emg_param_1_4;
  #line 21144 
  int emg_116_emg_param_2_1;
  #line 21145 
  long long *emg_116_emg_param_3_3;
  #line 21146 
  long long *emg_116_emg_param_3_5;
  #line 21147 
  struct file *emg_116_resource_0;
  #line 21148 
  struct inode *emg_116_resource_1;
  #line 21149 
  int emg_116_ret;
  #line 21150 
  unsigned long emg_116_size_cnt;
  #line 21151 
  int emg_repeat_cnt_main_116_0 = 1;
  #line 21152 
  int emg_repeat_cnt_call_116 = 1;
  #line 21153 
  int emg_repeat_cnt_main_116_1 = 1;
  #line 21155 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 21159 
  emg_116_ret = ldv_undef_int();
  #line 21160 
  emg_116_container = emg_alias_tx_tx_cfe1_ops;
  #line 21161 
  emg_116_ret = ldv_undef_int();
  #line 21163 
  __VERIFIER_assume(data->arg0 == emg_alias_tx_tx_cfe1_ops);
  #line 21165 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 21166 
    emg_116_container = data->arg0;
    #line 21167 
    ldv_free((void *)data);
  }
  #line 21172 
  emg_116_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 21173 
  emg_116_size_cnt = (unsigned long)ldv_undef_int();
  #line 21177 
  goto emg_main_116;
  #line 21181 
  return (void *)0;
  #line 21184 
  emg_call_116: 
                #line 21184 
  ;
  #line 21185 
  if (ldv_undef_int() != 0) {
    #line 21186 
    switch (ldv_undef_int()) {
      #line 21187 
      case 0: 
              #line 21187 
      ;
      #line 21189 
      emg_116_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 21189 
      emg_116_emg_param_1_2 = emg_116_emg_param_1_2;
      #line 21190 
      emg_116_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 21190 
      emg_116_emg_param_3_3 = emg_116_emg_param_3_3;
      #line 21194 
      emg_wrapper_tx_tx_cfe1_read(emg_116_resource_0,emg_116_emg_param_1_2,emg_116_size_cnt,emg_116_emg_param_3_3);
      #line 21198 
      ldv_free((void *)emg_116_emg_param_1_2);
      #line 21199 
      ldv_free((void *)emg_116_emg_param_3_3);
      #line 21201 
      break;
      #line 21203 
      case 1: 
              #line 21203 
      ;
      #line 21205 
      generic_file_llseek(emg_116_resource_0,emg_116_emg_param_1_0,emg_116_emg_param_2_1);
      #line 21207 
      break;
      #line 21209 
      case 2: 
              #line 21209 
      ;
      #line 21216 
      __VERIFIER_assume(emg_116_size_cnt <= 2147479552UL);
      #line 21217 
      emg_116_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 21217 
      emg_116_emg_param_1_4 = emg_116_emg_param_1_4;
      #line 21218 
      emg_116_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 21218 
      emg_116_emg_param_3_5 = emg_116_emg_param_3_5;
      #line 21222 
      if (emg_116_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 21223 
        (*(emg_116_container->write))(emg_116_resource_0,emg_116_emg_param_1_4,emg_116_size_cnt,emg_116_emg_param_3_5);
      #line 21228 
      ldv_free((void *)emg_116_emg_param_1_4);
      #line 21229 
      ldv_free((void *)emg_116_emg_param_3_5);
      #line 21231 
      break;
      #line 21233 
      default: 
               #line 21233 
      ;
      #line 21233 
      __VERIFIER_assume(0);
    }
    #line 21236 
    if (emg_repeat_cnt_call_116 > 0) {
      #line 21237 
      emg_repeat_cnt_call_116 --;
      #line 21239 
      goto emg_call_116;
    }
    else 
         #line 21241 
         __VERIFIER_assume(0);
  }
  else {
    #line 21247 
    if (emg_116_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 21248 
      (*(emg_116_container->release))(emg_116_resource_1,emg_116_resource_0);
    #line 21252 
    if (emg_repeat_cnt_main_116_0 > 0) {
      #line 21253 
      emg_repeat_cnt_main_116_0 --;
      #line 21255 
      goto emg_main_116;
    }
    else 
         #line 21257 
         __VERIFIER_assume(0);
  }
  #line 21263 
  return (void *)0;
  #line 21266 
  emg_main_116: 
                #line 21266 
  ;
  #line 21267 
  if (ldv_undef_int() != 0) {
    #line 21269 
    emg_116_ret = simple_open(emg_116_resource_1,emg_116_resource_0);
    #line 21274 
    emg_116_ret = ldv_filter_err_code(emg_116_ret);
    #line 21277 
    if (ldv_undef_int() != 0) {
      #line 21279 
      __VERIFIER_assume(emg_116_ret == 0);
      #line 21283 
      goto emg_call_116;
    }
    else {
      #line 21288 
      __VERIFIER_assume(emg_116_ret != 0);
      #line 21291 
      if (emg_repeat_cnt_main_116_1 > 0) {
        #line 21292 
        emg_repeat_cnt_main_116_1 --;
        #line 21294 
        goto emg_main_116;
      }
      else 
           #line 21296 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 21303 
       ldv_free((void *)emg_116_resource_0);
  #line 21311 
  return (void *)0;
}

#line 21316  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_tx_tx_cfe2_ops(void *arg0)
{
  #line 21319 
  struct file_operations *emg_117_container;
  #line 21320 
  long long emg_117_emg_param_1_0;
  #line 21321 
  char *emg_117_emg_param_1_2;
  #line 21322 
  char *emg_117_emg_param_1_4;
  #line 21323 
  int emg_117_emg_param_2_1;
  #line 21324 
  long long *emg_117_emg_param_3_3;
  #line 21325 
  long long *emg_117_emg_param_3_5;
  #line 21326 
  struct file *emg_117_resource_0;
  #line 21327 
  struct inode *emg_117_resource_1;
  #line 21328 
  int emg_117_ret;
  #line 21329 
  unsigned long emg_117_size_cnt;
  #line 21330 
  int emg_repeat_cnt_main_117_0 = 1;
  #line 21331 
  int emg_repeat_cnt_main_117_1 = 1;
  #line 21332 
  int emg_repeat_cnt_call_117 = 1;
  #line 21334 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 21338 
  emg_117_ret = ldv_undef_int();
  #line 21339 
  emg_117_container = emg_alias_tx_tx_cfe2_ops;
  #line 21340 
  emg_117_ret = ldv_undef_int();
  #line 21342 
  __VERIFIER_assume(data->arg0 == emg_alias_tx_tx_cfe2_ops);
  #line 21344 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 21345 
    emg_117_container = data->arg0;
    #line 21346 
    ldv_free((void *)data);
  }
  #line 21351 
  emg_117_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 21352 
  emg_117_size_cnt = (unsigned long)ldv_undef_int();
  #line 21356 
  goto emg_main_117;
  #line 21360 
  return (void *)0;
  #line 21363 
  emg_call_117: 
                #line 21363 
  ;
  #line 21364 
  if (ldv_undef_int() != 0) {
    #line 21365 
    switch (ldv_undef_int()) {
      #line 21366 
      case 0: 
              #line 21366 
      ;
      #line 21368 
      emg_117_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 21368 
      emg_117_emg_param_1_2 = emg_117_emg_param_1_2;
      #line 21369 
      emg_117_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 21369 
      emg_117_emg_param_3_3 = emg_117_emg_param_3_3;
      #line 21373 
      emg_wrapper_tx_tx_cfe2_read(emg_117_resource_0,emg_117_emg_param_1_2,emg_117_size_cnt,emg_117_emg_param_3_3);
      #line 21377 
      ldv_free((void *)emg_117_emg_param_1_2);
      #line 21378 
      ldv_free((void *)emg_117_emg_param_3_3);
      #line 21380 
      break;
      #line 21382 
      case 1: 
              #line 21382 
      ;
      #line 21384 
      generic_file_llseek(emg_117_resource_0,emg_117_emg_param_1_0,emg_117_emg_param_2_1);
      #line 21386 
      break;
      #line 21388 
      case 2: 
              #line 21388 
      ;
      #line 21395 
      __VERIFIER_assume(emg_117_size_cnt <= 2147479552UL);
      #line 21396 
      emg_117_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 21396 
      emg_117_emg_param_1_4 = emg_117_emg_param_1_4;
      #line 21397 
      emg_117_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 21397 
      emg_117_emg_param_3_5 = emg_117_emg_param_3_5;
      #line 21401 
      if (emg_117_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 21402 
        (*(emg_117_container->write))(emg_117_resource_0,emg_117_emg_param_1_4,emg_117_size_cnt,emg_117_emg_param_3_5);
      #line 21407 
      ldv_free((void *)emg_117_emg_param_1_4);
      #line 21408 
      ldv_free((void *)emg_117_emg_param_3_5);
      #line 21410 
      break;
      #line 21412 
      default: 
               #line 21412 
      ;
      #line 21412 
      __VERIFIER_assume(0);
    }
    #line 21415 
    if (emg_repeat_cnt_call_117 > 0) {
      #line 21416 
      emg_repeat_cnt_call_117 --;
      #line 21418 
      goto emg_call_117;
    }
    else 
         #line 21420 
         __VERIFIER_assume(0);
  }
  else {
    #line 21426 
    if (emg_117_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 21427 
      (*(emg_117_container->release))(emg_117_resource_1,emg_117_resource_0);
    #line 21431 
    if (emg_repeat_cnt_main_117_0 > 0) {
      #line 21432 
      emg_repeat_cnt_main_117_0 --;
      #line 21434 
      goto emg_main_117;
    }
    else 
         #line 21436 
         __VERIFIER_assume(0);
  }
  #line 21442 
  return (void *)0;
  #line 21445 
  emg_main_117: 
                #line 21445 
  ;
  #line 21446 
  if (ldv_undef_int() != 0) {
    #line 21448 
    emg_117_ret = simple_open(emg_117_resource_1,emg_117_resource_0);
    #line 21453 
    emg_117_ret = ldv_filter_err_code(emg_117_ret);
    #line 21456 
    if (ldv_undef_int() != 0) {
      #line 21458 
      __VERIFIER_assume(emg_117_ret == 0);
      #line 21462 
      goto emg_call_117;
    }
    else {
      #line 21467 
      __VERIFIER_assume(emg_117_ret != 0);
      #line 21470 
      if (emg_repeat_cnt_main_117_1 > 0) {
        #line 21471 
        emg_repeat_cnt_main_117_1 --;
        #line 21473 
        goto emg_main_117;
      }
      else 
           #line 21475 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 21482 
       ldv_free((void *)emg_117_resource_0);
  #line 21490 
  return (void *)0;
}

#line 21495  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_tx_tx_cmplt_ops(void *arg0)
{
  #line 21498 
  struct file_operations *emg_118_container;
  #line 21499 
  long long emg_118_emg_param_1_0;
  #line 21500 
  char *emg_118_emg_param_1_2;
  #line 21501 
  char *emg_118_emg_param_1_4;
  #line 21502 
  int emg_118_emg_param_2_1;
  #line 21503 
  long long *emg_118_emg_param_3_3;
  #line 21504 
  long long *emg_118_emg_param_3_5;
  #line 21505 
  struct file *emg_118_resource_0;
  #line 21506 
  struct inode *emg_118_resource_1;
  #line 21507 
  int emg_118_ret;
  #line 21508 
  unsigned long emg_118_size_cnt;
  #line 21509 
  int emg_repeat_cnt_main_118_1 = 1;
  #line 21510 
  int emg_repeat_cnt_main_118_0 = 1;
  #line 21511 
  int emg_repeat_cnt_call_118 = 1;
  #line 21513 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 21517 
  emg_118_ret = ldv_undef_int();
  #line 21518 
  emg_118_container = emg_alias_tx_tx_cmplt_ops;
  #line 21519 
  emg_118_ret = ldv_undef_int();
  #line 21521 
  __VERIFIER_assume(data->arg0 == emg_alias_tx_tx_cmplt_ops);
  #line 21523 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 21524 
    emg_118_container = data->arg0;
    #line 21525 
    ldv_free((void *)data);
  }
  #line 21530 
  emg_118_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 21531 
  emg_118_size_cnt = (unsigned long)ldv_undef_int();
  #line 21535 
  goto emg_main_118;
  #line 21539 
  return (void *)0;
  #line 21542 
  emg_call_118: 
                #line 21542 
  ;
  #line 21543 
  if (ldv_undef_int() != 0) {
    #line 21544 
    switch (ldv_undef_int()) {
      #line 21545 
      case 0: 
              #line 21545 
      ;
      #line 21547 
      emg_118_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 21547 
      emg_118_emg_param_1_2 = emg_118_emg_param_1_2;
      #line 21548 
      emg_118_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 21548 
      emg_118_emg_param_3_3 = emg_118_emg_param_3_3;
      #line 21552 
      emg_wrapper_tx_tx_cmplt_read(emg_118_resource_0,emg_118_emg_param_1_2,emg_118_size_cnt,emg_118_emg_param_3_3);
      #line 21556 
      ldv_free((void *)emg_118_emg_param_1_2);
      #line 21557 
      ldv_free((void *)emg_118_emg_param_3_3);
      #line 21559 
      break;
      #line 21561 
      case 1: 
              #line 21561 
      ;
      #line 21563 
      generic_file_llseek(emg_118_resource_0,emg_118_emg_param_1_0,emg_118_emg_param_2_1);
      #line 21565 
      break;
      #line 21567 
      case 2: 
              #line 21567 
      ;
      #line 21574 
      __VERIFIER_assume(emg_118_size_cnt <= 2147479552UL);
      #line 21575 
      emg_118_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 21575 
      emg_118_emg_param_1_4 = emg_118_emg_param_1_4;
      #line 21576 
      emg_118_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 21576 
      emg_118_emg_param_3_5 = emg_118_emg_param_3_5;
      #line 21580 
      if (emg_118_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 21581 
        (*(emg_118_container->write))(emg_118_resource_0,emg_118_emg_param_1_4,emg_118_size_cnt,emg_118_emg_param_3_5);
      #line 21586 
      ldv_free((void *)emg_118_emg_param_1_4);
      #line 21587 
      ldv_free((void *)emg_118_emg_param_3_5);
      #line 21589 
      break;
      #line 21591 
      default: 
               #line 21591 
      ;
      #line 21591 
      __VERIFIER_assume(0);
    }
    #line 21594 
    if (emg_repeat_cnt_call_118 > 0) {
      #line 21595 
      emg_repeat_cnt_call_118 --;
      #line 21597 
      goto emg_call_118;
    }
    else 
         #line 21599 
         __VERIFIER_assume(0);
  }
  else {
    #line 21605 
    if (emg_118_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 21606 
      (*(emg_118_container->release))(emg_118_resource_1,emg_118_resource_0);
    #line 21610 
    if (emg_repeat_cnt_main_118_0 > 0) {
      #line 21611 
      emg_repeat_cnt_main_118_0 --;
      #line 21613 
      goto emg_main_118;
    }
    else 
         #line 21615 
         __VERIFIER_assume(0);
  }
  #line 21621 
  return (void *)0;
  #line 21624 
  emg_main_118: 
                #line 21624 
  ;
  #line 21625 
  if (ldv_undef_int() != 0) {
    #line 21627 
    emg_118_ret = simple_open(emg_118_resource_1,emg_118_resource_0);
    #line 21632 
    emg_118_ret = ldv_filter_err_code(emg_118_ret);
    #line 21635 
    if (ldv_undef_int() != 0) {
      #line 21637 
      __VERIFIER_assume(emg_118_ret == 0);
      #line 21641 
      goto emg_call_118;
    }
    else {
      #line 21646 
      __VERIFIER_assume(emg_118_ret != 0);
      #line 21649 
      if (emg_repeat_cnt_main_118_1 > 0) {
        #line 21650 
        emg_repeat_cnt_main_118_1 --;
        #line 21652 
        goto emg_main_118;
      }
      else 
           #line 21654 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 21661 
       ldv_free((void *)emg_118_resource_0);
  #line 21669 
  return (void *)0;
}

#line 21674  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_tx_tx_data_prepared_ops(void *arg0)
{
  #line 21677 
  struct file_operations *emg_119_container;
  #line 21678 
  long long emg_119_emg_param_1_0;
  #line 21679 
  char *emg_119_emg_param_1_2;
  #line 21680 
  char *emg_119_emg_param_1_4;
  #line 21681 
  int emg_119_emg_param_2_1;
  #line 21682 
  long long *emg_119_emg_param_3_3;
  #line 21683 
  long long *emg_119_emg_param_3_5;
  #line 21684 
  struct file *emg_119_resource_0;
  #line 21685 
  struct inode *emg_119_resource_1;
  #line 21686 
  int emg_119_ret;
  #line 21687 
  unsigned long emg_119_size_cnt;
  #line 21688 
  int emg_repeat_cnt_main_119_0 = 1;
  #line 21689 
  int emg_repeat_cnt_main_119_1 = 1;
  #line 21690 
  int emg_repeat_cnt_call_119 = 1;
  #line 21692 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 21696 
  emg_119_ret = ldv_undef_int();
  #line 21697 
  emg_119_container = emg_alias_tx_tx_data_prepared_ops;
  #line 21698 
  emg_119_ret = ldv_undef_int();
  #line 21700 
  __VERIFIER_assume(data->arg0 == emg_alias_tx_tx_data_prepared_ops);
  #line 21702 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 21703 
    emg_119_container = data->arg0;
    #line 21704 
    ldv_free((void *)data);
  }
  #line 21709 
  emg_119_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 21710 
  emg_119_size_cnt = (unsigned long)ldv_undef_int();
  #line 21714 
  goto emg_main_119;
  #line 21718 
  return (void *)0;
  #line 21721 
  emg_call_119: 
                #line 21721 
  ;
  #line 21722 
  if (ldv_undef_int() != 0) {
    #line 21723 
    switch (ldv_undef_int()) {
      #line 21724 
      case 0: 
              #line 21724 
      ;
      #line 21726 
      emg_119_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 21726 
      emg_119_emg_param_1_2 = emg_119_emg_param_1_2;
      #line 21727 
      emg_119_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 21727 
      emg_119_emg_param_3_3 = emg_119_emg_param_3_3;
      #line 21731 
      emg_wrapper_tx_tx_data_prepared_read(emg_119_resource_0,emg_119_emg_param_1_2,emg_119_size_cnt,emg_119_emg_param_3_3);
      #line 21735 
      ldv_free((void *)emg_119_emg_param_1_2);
      #line 21736 
      ldv_free((void *)emg_119_emg_param_3_3);
      #line 21738 
      break;
      #line 21740 
      case 1: 
              #line 21740 
      ;
      #line 21742 
      generic_file_llseek(emg_119_resource_0,emg_119_emg_param_1_0,emg_119_emg_param_2_1);
      #line 21744 
      break;
      #line 21746 
      case 2: 
              #line 21746 
      ;
      #line 21753 
      __VERIFIER_assume(emg_119_size_cnt <= 2147479552UL);
      #line 21754 
      emg_119_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 21754 
      emg_119_emg_param_1_4 = emg_119_emg_param_1_4;
      #line 21755 
      emg_119_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 21755 
      emg_119_emg_param_3_5 = emg_119_emg_param_3_5;
      #line 21759 
      if (emg_119_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 21760 
        (*(emg_119_container->write))(emg_119_resource_0,emg_119_emg_param_1_4,emg_119_size_cnt,emg_119_emg_param_3_5);
      #line 21765 
      ldv_free((void *)emg_119_emg_param_1_4);
      #line 21766 
      ldv_free((void *)emg_119_emg_param_3_5);
      #line 21768 
      break;
      #line 21770 
      default: 
               #line 21770 
      ;
      #line 21770 
      __VERIFIER_assume(0);
    }
    #line 21773 
    if (emg_repeat_cnt_call_119 > 0) {
      #line 21774 
      emg_repeat_cnt_call_119 --;
      #line 21776 
      goto emg_call_119;
    }
    else 
         #line 21778 
         __VERIFIER_assume(0);
  }
  else {
    #line 21784 
    if (emg_119_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 21785 
      (*(emg_119_container->release))(emg_119_resource_1,emg_119_resource_0);
    #line 21789 
    if (emg_repeat_cnt_main_119_1 > 0) {
      #line 21790 
      emg_repeat_cnt_main_119_1 --;
      #line 21792 
      goto emg_main_119;
    }
    else 
         #line 21794 
         __VERIFIER_assume(0);
  }
  #line 21800 
  return (void *)0;
  #line 21803 
  emg_main_119: 
                #line 21803 
  ;
  #line 21804 
  if (ldv_undef_int() != 0) {
    #line 21806 
    emg_119_ret = simple_open(emg_119_resource_1,emg_119_resource_0);
    #line 21811 
    emg_119_ret = ldv_filter_err_code(emg_119_ret);
    #line 21814 
    if (ldv_undef_int() != 0) {
      #line 21816 
      __VERIFIER_assume(emg_119_ret == 0);
      #line 21820 
      goto emg_call_119;
    }
    else {
      #line 21825 
      __VERIFIER_assume(emg_119_ret != 0);
      #line 21828 
      if (emg_repeat_cnt_main_119_0 > 0) {
        #line 21829 
        emg_repeat_cnt_main_119_0 --;
        #line 21831 
        goto emg_main_119;
      }
      else 
           #line 21833 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 21840 
       ldv_free((void *)emg_119_resource_0);
  #line 21848 
  return (void *)0;
}

#line 21853  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_tx_tx_data_programmed_ops(void *arg0)
{
  #line 21856 
  struct file_operations *emg_120_container;
  #line 21857 
  long long emg_120_emg_param_1_0;
  #line 21858 
  char *emg_120_emg_param_1_2;
  #line 21859 
  char *emg_120_emg_param_1_4;
  #line 21860 
  int emg_120_emg_param_2_1;
  #line 21861 
  long long *emg_120_emg_param_3_3;
  #line 21862 
  long long *emg_120_emg_param_3_5;
  #line 21863 
  struct file *emg_120_resource_0;
  #line 21864 
  struct inode *emg_120_resource_1;
  #line 21865 
  int emg_120_ret;
  #line 21866 
  unsigned long emg_120_size_cnt;
  #line 21867 
  int emg_repeat_cnt_main_120_1 = 1;
  #line 21868 
  int emg_repeat_cnt_main_120_0 = 1;
  #line 21869 
  int emg_repeat_cnt_call_120 = 1;
  #line 21871 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 21875 
  emg_120_ret = ldv_undef_int();
  #line 21876 
  emg_120_container = emg_alias_tx_tx_data_programmed_ops;
  #line 21877 
  emg_120_ret = ldv_undef_int();
  #line 21879 
  __VERIFIER_assume(data->arg0 == emg_alias_tx_tx_data_programmed_ops);
  #line 21881 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 21882 
    emg_120_container = data->arg0;
    #line 21883 
    ldv_free((void *)data);
  }
  #line 21888 
  emg_120_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 21889 
  emg_120_size_cnt = (unsigned long)ldv_undef_int();
  #line 21893 
  goto emg_main_120;
  #line 21897 
  return (void *)0;
  #line 21900 
  emg_call_120: 
                #line 21900 
  ;
  #line 21901 
  if (ldv_undef_int() != 0) {
    #line 21902 
    switch (ldv_undef_int()) {
      #line 21903 
      case 0: 
              #line 21903 
      ;
      #line 21905 
      emg_120_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 21905 
      emg_120_emg_param_1_2 = emg_120_emg_param_1_2;
      #line 21906 
      emg_120_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 21906 
      emg_120_emg_param_3_3 = emg_120_emg_param_3_3;
      #line 21910 
      emg_wrapper_tx_tx_data_programmed_read(emg_120_resource_0,emg_120_emg_param_1_2,emg_120_size_cnt,emg_120_emg_param_3_3);
      #line 21914 
      ldv_free((void *)emg_120_emg_param_1_2);
      #line 21915 
      ldv_free((void *)emg_120_emg_param_3_3);
      #line 21917 
      break;
      #line 21919 
      case 1: 
              #line 21919 
      ;
      #line 21921 
      generic_file_llseek(emg_120_resource_0,emg_120_emg_param_1_0,emg_120_emg_param_2_1);
      #line 21923 
      break;
      #line 21925 
      case 2: 
              #line 21925 
      ;
      #line 21932 
      __VERIFIER_assume(emg_120_size_cnt <= 2147479552UL);
      #line 21933 
      emg_120_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 21933 
      emg_120_emg_param_1_4 = emg_120_emg_param_1_4;
      #line 21934 
      emg_120_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 21934 
      emg_120_emg_param_3_5 = emg_120_emg_param_3_5;
      #line 21938 
      if (emg_120_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 21939 
        (*(emg_120_container->write))(emg_120_resource_0,emg_120_emg_param_1_4,emg_120_size_cnt,emg_120_emg_param_3_5);
      #line 21944 
      ldv_free((void *)emg_120_emg_param_1_4);
      #line 21945 
      ldv_free((void *)emg_120_emg_param_3_5);
      #line 21947 
      break;
      #line 21949 
      default: 
               #line 21949 
      ;
      #line 21949 
      __VERIFIER_assume(0);
    }
    #line 21952 
    if (emg_repeat_cnt_call_120 > 0) {
      #line 21953 
      emg_repeat_cnt_call_120 --;
      #line 21955 
      goto emg_call_120;
    }
    else 
         #line 21957 
         __VERIFIER_assume(0);
  }
  else {
    #line 21963 
    if (emg_120_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 21964 
      (*(emg_120_container->release))(emg_120_resource_1,emg_120_resource_0);
    #line 21968 
    if (emg_repeat_cnt_main_120_0 > 0) {
      #line 21969 
      emg_repeat_cnt_main_120_0 --;
      #line 21971 
      goto emg_main_120;
    }
    else 
         #line 21973 
         __VERIFIER_assume(0);
  }
  #line 21979 
  return (void *)0;
  #line 21982 
  emg_main_120: 
                #line 21982 
  ;
  #line 21983 
  if (ldv_undef_int() != 0) {
    #line 21985 
    emg_120_ret = simple_open(emg_120_resource_1,emg_120_resource_0);
    #line 21990 
    emg_120_ret = ldv_filter_err_code(emg_120_ret);
    #line 21993 
    if (ldv_undef_int() != 0) {
      #line 21995 
      __VERIFIER_assume(emg_120_ret == 0);
      #line 21999 
      goto emg_call_120;
    }
    else {
      #line 22004 
      __VERIFIER_assume(emg_120_ret != 0);
      #line 22007 
      if (emg_repeat_cnt_main_120_1 > 0) {
        #line 22008 
        emg_repeat_cnt_main_120_1 --;
        #line 22010 
        goto emg_main_120;
      }
      else 
           #line 22012 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 22019 
       ldv_free((void *)emg_120_resource_0);
  #line 22027 
  return (void *)0;
}

#line 22032  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_tx_tx_done_data_ops(void *arg0)
{
  #line 22035 
  struct file_operations *emg_121_container;
  #line 22036 
  long long emg_121_emg_param_1_0;
  #line 22037 
  char *emg_121_emg_param_1_2;
  #line 22038 
  char *emg_121_emg_param_1_4;
  #line 22039 
  int emg_121_emg_param_2_1;
  #line 22040 
  long long *emg_121_emg_param_3_3;
  #line 22041 
  long long *emg_121_emg_param_3_5;
  #line 22042 
  struct file *emg_121_resource_0;
  #line 22043 
  struct inode *emg_121_resource_1;
  #line 22044 
  int emg_121_ret;
  #line 22045 
  unsigned long emg_121_size_cnt;
  #line 22046 
  int emg_repeat_cnt_call_121 = 1;
  #line 22047 
  int emg_repeat_cnt_main_121_1 = 1;
  #line 22048 
  int emg_repeat_cnt_main_121_0 = 1;
  #line 22050 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 22054 
  emg_121_ret = ldv_undef_int();
  #line 22055 
  emg_121_container = emg_alias_tx_tx_done_data_ops;
  #line 22056 
  emg_121_ret = ldv_undef_int();
  #line 22058 
  __VERIFIER_assume(data->arg0 == emg_alias_tx_tx_done_data_ops);
  #line 22060 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 22061 
    emg_121_container = data->arg0;
    #line 22062 
    ldv_free((void *)data);
  }
  #line 22067 
  emg_121_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 22068 
  emg_121_size_cnt = (unsigned long)ldv_undef_int();
  #line 22072 
  goto emg_main_121;
  #line 22076 
  return (void *)0;
  #line 22079 
  emg_call_121: 
                #line 22079 
  ;
  #line 22080 
  if (ldv_undef_int() != 0) {
    #line 22081 
    switch (ldv_undef_int()) {
      #line 22082 
      case 0: 
              #line 22082 
      ;
      #line 22084 
      emg_121_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 22084 
      emg_121_emg_param_1_2 = emg_121_emg_param_1_2;
      #line 22085 
      emg_121_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 22085 
      emg_121_emg_param_3_3 = emg_121_emg_param_3_3;
      #line 22089 
      emg_wrapper_tx_tx_done_data_read(emg_121_resource_0,emg_121_emg_param_1_2,emg_121_size_cnt,emg_121_emg_param_3_3);
      #line 22093 
      ldv_free((void *)emg_121_emg_param_1_2);
      #line 22094 
      ldv_free((void *)emg_121_emg_param_3_3);
      #line 22096 
      break;
      #line 22098 
      case 1: 
              #line 22098 
      ;
      #line 22100 
      generic_file_llseek(emg_121_resource_0,emg_121_emg_param_1_0,emg_121_emg_param_2_1);
      #line 22102 
      break;
      #line 22104 
      case 2: 
              #line 22104 
      ;
      #line 22111 
      __VERIFIER_assume(emg_121_size_cnt <= 2147479552UL);
      #line 22112 
      emg_121_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 22112 
      emg_121_emg_param_1_4 = emg_121_emg_param_1_4;
      #line 22113 
      emg_121_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 22113 
      emg_121_emg_param_3_5 = emg_121_emg_param_3_5;
      #line 22117 
      if (emg_121_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 22118 
        (*(emg_121_container->write))(emg_121_resource_0,emg_121_emg_param_1_4,emg_121_size_cnt,emg_121_emg_param_3_5);
      #line 22123 
      ldv_free((void *)emg_121_emg_param_1_4);
      #line 22124 
      ldv_free((void *)emg_121_emg_param_3_5);
      #line 22126 
      break;
      #line 22128 
      default: 
               #line 22128 
      ;
      #line 22128 
      __VERIFIER_assume(0);
    }
    #line 22131 
    if (emg_repeat_cnt_call_121 > 0) {
      #line 22132 
      emg_repeat_cnt_call_121 --;
      #line 22134 
      goto emg_call_121;
    }
    else 
         #line 22136 
         __VERIFIER_assume(0);
  }
  else {
    #line 22142 
    if (emg_121_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 22143 
      (*(emg_121_container->release))(emg_121_resource_1,emg_121_resource_0);
    #line 22147 
    if (emg_repeat_cnt_main_121_0 > 0) {
      #line 22148 
      emg_repeat_cnt_main_121_0 --;
      #line 22150 
      goto emg_main_121;
    }
    else 
         #line 22152 
         __VERIFIER_assume(0);
  }
  #line 22158 
  return (void *)0;
  #line 22161 
  emg_main_121: 
                #line 22161 
  ;
  #line 22162 
  if (ldv_undef_int() != 0) {
    #line 22164 
    emg_121_ret = simple_open(emg_121_resource_1,emg_121_resource_0);
    #line 22169 
    emg_121_ret = ldv_filter_err_code(emg_121_ret);
    #line 22172 
    if (ldv_undef_int() != 0) {
      #line 22174 
      __VERIFIER_assume(emg_121_ret == 0);
      #line 22178 
      goto emg_call_121;
    }
    else {
      #line 22183 
      __VERIFIER_assume(emg_121_ret != 0);
      #line 22186 
      if (emg_repeat_cnt_main_121_1 > 0) {
        #line 22187 
        emg_repeat_cnt_main_121_1 --;
        #line 22189 
        goto emg_main_121;
      }
      else 
           #line 22191 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 22198 
       ldv_free((void *)emg_121_resource_0);
  #line 22206 
  return (void *)0;
}

#line 22211  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_tx_tx_done_int_template_ops(void *arg0)
{
  #line 22214 
  struct file_operations *emg_122_container;
  #line 22215 
  long long emg_122_emg_param_1_0;
  #line 22216 
  char *emg_122_emg_param_1_2;
  #line 22217 
  char *emg_122_emg_param_1_4;
  #line 22218 
  int emg_122_emg_param_2_1;
  #line 22219 
  long long *emg_122_emg_param_3_3;
  #line 22220 
  long long *emg_122_emg_param_3_5;
  #line 22221 
  struct file *emg_122_resource_0;
  #line 22222 
  struct inode *emg_122_resource_1;
  #line 22223 
  int emg_122_ret;
  #line 22224 
  unsigned long emg_122_size_cnt;
  #line 22225 
  int emg_repeat_cnt_main_122_0 = 1;
  #line 22226 
  int emg_repeat_cnt_main_122_1 = 1;
  #line 22227 
  int emg_repeat_cnt_call_122 = 1;
  #line 22229 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 22233 
  emg_122_ret = ldv_undef_int();
  #line 22234 
  emg_122_container = emg_alias_tx_tx_done_int_template_ops;
  #line 22235 
  emg_122_ret = ldv_undef_int();
  #line 22237 
  __VERIFIER_assume(data->arg0 == emg_alias_tx_tx_done_int_template_ops);
  #line 22239 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 22240 
    emg_122_container = data->arg0;
    #line 22241 
    ldv_free((void *)data);
  }
  #line 22246 
  emg_122_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 22247 
  emg_122_size_cnt = (unsigned long)ldv_undef_int();
  #line 22251 
  goto emg_main_122;
  #line 22255 
  return (void *)0;
  #line 22258 
  emg_call_122: 
                #line 22258 
  ;
  #line 22259 
  if (ldv_undef_int() != 0) {
    #line 22260 
    switch (ldv_undef_int()) {
      #line 22261 
      case 0: 
              #line 22261 
      ;
      #line 22263 
      emg_122_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 22263 
      emg_122_emg_param_1_2 = emg_122_emg_param_1_2;
      #line 22264 
      emg_122_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 22264 
      emg_122_emg_param_3_3 = emg_122_emg_param_3_3;
      #line 22268 
      emg_wrapper_tx_tx_done_int_template_read(emg_122_resource_0,emg_122_emg_param_1_2,emg_122_size_cnt,emg_122_emg_param_3_3);
      #line 22272 
      ldv_free((void *)emg_122_emg_param_1_2);
      #line 22273 
      ldv_free((void *)emg_122_emg_param_3_3);
      #line 22275 
      break;
      #line 22277 
      case 1: 
              #line 22277 
      ;
      #line 22279 
      generic_file_llseek(emg_122_resource_0,emg_122_emg_param_1_0,emg_122_emg_param_2_1);
      #line 22281 
      break;
      #line 22283 
      case 2: 
              #line 22283 
      ;
      #line 22290 
      __VERIFIER_assume(emg_122_size_cnt <= 2147479552UL);
      #line 22291 
      emg_122_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 22291 
      emg_122_emg_param_1_4 = emg_122_emg_param_1_4;
      #line 22292 
      emg_122_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 22292 
      emg_122_emg_param_3_5 = emg_122_emg_param_3_5;
      #line 22296 
      if (emg_122_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 22297 
        (*(emg_122_container->write))(emg_122_resource_0,emg_122_emg_param_1_4,emg_122_size_cnt,emg_122_emg_param_3_5);
      #line 22302 
      ldv_free((void *)emg_122_emg_param_1_4);
      #line 22303 
      ldv_free((void *)emg_122_emg_param_3_5);
      #line 22305 
      break;
      #line 22307 
      default: 
               #line 22307 
      ;
      #line 22307 
      __VERIFIER_assume(0);
    }
    #line 22310 
    if (emg_repeat_cnt_call_122 > 0) {
      #line 22311 
      emg_repeat_cnt_call_122 --;
      #line 22313 
      goto emg_call_122;
    }
    else 
         #line 22315 
         __VERIFIER_assume(0);
  }
  else {
    #line 22321 
    if (emg_122_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 22322 
      (*(emg_122_container->release))(emg_122_resource_1,emg_122_resource_0);
    #line 22326 
    if (emg_repeat_cnt_main_122_0 > 0) {
      #line 22327 
      emg_repeat_cnt_main_122_0 --;
      #line 22329 
      goto emg_main_122;
    }
    else 
         #line 22331 
         __VERIFIER_assume(0);
  }
  #line 22337 
  return (void *)0;
  #line 22340 
  emg_main_122: 
                #line 22340 
  ;
  #line 22341 
  if (ldv_undef_int() != 0) {
    #line 22343 
    emg_122_ret = simple_open(emg_122_resource_1,emg_122_resource_0);
    #line 22348 
    emg_122_ret = ldv_filter_err_code(emg_122_ret);
    #line 22351 
    if (ldv_undef_int() != 0) {
      #line 22353 
      __VERIFIER_assume(emg_122_ret == 0);
      #line 22357 
      goto emg_call_122;
    }
    else {
      #line 22362 
      __VERIFIER_assume(emg_122_ret != 0);
      #line 22365 
      if (emg_repeat_cnt_main_122_1 > 0) {
        #line 22366 
        emg_repeat_cnt_main_122_1 --;
        #line 22368 
        goto emg_main_122;
      }
      else 
           #line 22370 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 22377 
       ldv_free((void *)emg_122_resource_0);
  #line 22385 
  return (void *)0;
}

#line 22390  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_tx_tx_done_template_ops(void *arg0)
{
  #line 22393 
  struct file_operations *emg_123_container;
  #line 22394 
  long long emg_123_emg_param_1_0;
  #line 22395 
  char *emg_123_emg_param_1_2;
  #line 22396 
  char *emg_123_emg_param_1_4;
  #line 22397 
  int emg_123_emg_param_2_1;
  #line 22398 
  long long *emg_123_emg_param_3_3;
  #line 22399 
  long long *emg_123_emg_param_3_5;
  #line 22400 
  struct file *emg_123_resource_0;
  #line 22401 
  struct inode *emg_123_resource_1;
  #line 22402 
  int emg_123_ret;
  #line 22403 
  unsigned long emg_123_size_cnt;
  #line 22404 
  int emg_repeat_cnt_main_123_0 = 1;
  #line 22405 
  int emg_repeat_cnt_main_123_1 = 1;
  #line 22406 
  int emg_repeat_cnt_call_123 = 1;
  #line 22408 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 22412 
  emg_123_ret = ldv_undef_int();
  #line 22413 
  emg_123_container = emg_alias_tx_tx_done_template_ops;
  #line 22414 
  emg_123_ret = ldv_undef_int();
  #line 22416 
  __VERIFIER_assume(data->arg0 == emg_alias_tx_tx_done_template_ops);
  #line 22418 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 22419 
    emg_123_container = data->arg0;
    #line 22420 
    ldv_free((void *)data);
  }
  #line 22425 
  emg_123_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 22426 
  emg_123_size_cnt = (unsigned long)ldv_undef_int();
  #line 22430 
  goto emg_main_123;
  #line 22434 
  return (void *)0;
  #line 22437 
  emg_call_123: 
                #line 22437 
  ;
  #line 22438 
  if (ldv_undef_int() != 0) {
    #line 22439 
    switch (ldv_undef_int()) {
      #line 22440 
      case 0: 
              #line 22440 
      ;
      #line 22442 
      emg_123_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 22442 
      emg_123_emg_param_1_2 = emg_123_emg_param_1_2;
      #line 22443 
      emg_123_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 22443 
      emg_123_emg_param_3_3 = emg_123_emg_param_3_3;
      #line 22447 
      emg_wrapper_tx_tx_done_template_read(emg_123_resource_0,emg_123_emg_param_1_2,emg_123_size_cnt,emg_123_emg_param_3_3);
      #line 22451 
      ldv_free((void *)emg_123_emg_param_1_2);
      #line 22452 
      ldv_free((void *)emg_123_emg_param_3_3);
      #line 22454 
      break;
      #line 22456 
      case 1: 
              #line 22456 
      ;
      #line 22458 
      generic_file_llseek(emg_123_resource_0,emg_123_emg_param_1_0,emg_123_emg_param_2_1);
      #line 22460 
      break;
      #line 22462 
      case 2: 
              #line 22462 
      ;
      #line 22469 
      __VERIFIER_assume(emg_123_size_cnt <= 2147479552UL);
      #line 22470 
      emg_123_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 22470 
      emg_123_emg_param_1_4 = emg_123_emg_param_1_4;
      #line 22471 
      emg_123_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 22471 
      emg_123_emg_param_3_5 = emg_123_emg_param_3_5;
      #line 22475 
      if (emg_123_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 22476 
        (*(emg_123_container->write))(emg_123_resource_0,emg_123_emg_param_1_4,emg_123_size_cnt,emg_123_emg_param_3_5);
      #line 22481 
      ldv_free((void *)emg_123_emg_param_1_4);
      #line 22482 
      ldv_free((void *)emg_123_emg_param_3_5);
      #line 22484 
      break;
      #line 22486 
      default: 
               #line 22486 
      ;
      #line 22486 
      __VERIFIER_assume(0);
    }
    #line 22489 
    if (emg_repeat_cnt_call_123 > 0) {
      #line 22490 
      emg_repeat_cnt_call_123 --;
      #line 22492 
      goto emg_call_123;
    }
    else 
         #line 22494 
         __VERIFIER_assume(0);
  }
  else {
    #line 22500 
    if (emg_123_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 22501 
      (*(emg_123_container->release))(emg_123_resource_1,emg_123_resource_0);
    #line 22505 
    if (emg_repeat_cnt_main_123_0 > 0) {
      #line 22506 
      emg_repeat_cnt_main_123_0 --;
      #line 22508 
      goto emg_main_123;
    }
    else 
         #line 22510 
         __VERIFIER_assume(0);
  }
  #line 22516 
  return (void *)0;
  #line 22519 
  emg_main_123: 
                #line 22519 
  ;
  #line 22520 
  if (ldv_undef_int() != 0) {
    #line 22522 
    emg_123_ret = simple_open(emg_123_resource_1,emg_123_resource_0);
    #line 22527 
    emg_123_ret = ldv_filter_err_code(emg_123_ret);
    #line 22530 
    if (ldv_undef_int() != 0) {
      #line 22532 
      __VERIFIER_assume(emg_123_ret == 0);
      #line 22536 
      goto emg_call_123;
    }
    else {
      #line 22541 
      __VERIFIER_assume(emg_123_ret != 0);
      #line 22544 
      if (emg_repeat_cnt_main_123_1 > 0) {
        #line 22545 
        emg_repeat_cnt_main_123_1 --;
        #line 22547 
        goto emg_main_123;
      }
      else 
           #line 22549 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 22556 
       ldv_free((void *)emg_123_resource_0);
  #line 22564 
  return (void *)0;
}

#line 22569  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_tx_tx_exch_expiry_ops(void *arg0)
{
  #line 22572 
  struct file_operations *emg_124_container;
  #line 22573 
  long long emg_124_emg_param_1_0;
  #line 22574 
  char *emg_124_emg_param_1_2;
  #line 22575 
  char *emg_124_emg_param_1_4;
  #line 22576 
  int emg_124_emg_param_2_1;
  #line 22577 
  long long *emg_124_emg_param_3_3;
  #line 22578 
  long long *emg_124_emg_param_3_5;
  #line 22579 
  struct file *emg_124_resource_0;
  #line 22580 
  struct inode *emg_124_resource_1;
  #line 22581 
  int emg_124_ret;
  #line 22582 
  unsigned long emg_124_size_cnt;
  #line 22583 
  int emg_repeat_cnt_call_124 = 1;
  #line 22584 
  int emg_repeat_cnt_main_124_1 = 1;
  #line 22585 
  int emg_repeat_cnt_main_124_0 = 1;
  #line 22587 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 22591 
  emg_124_ret = ldv_undef_int();
  #line 22592 
  emg_124_container = emg_alias_tx_tx_exch_expiry_ops;
  #line 22593 
  emg_124_ret = ldv_undef_int();
  #line 22595 
  __VERIFIER_assume(data->arg0 == emg_alias_tx_tx_exch_expiry_ops);
  #line 22597 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 22598 
    emg_124_container = data->arg0;
    #line 22599 
    ldv_free((void *)data);
  }
  #line 22604 
  emg_124_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 22605 
  emg_124_size_cnt = (unsigned long)ldv_undef_int();
  #line 22609 
  goto emg_main_124;
  #line 22613 
  return (void *)0;
  #line 22616 
  emg_call_124: 
                #line 22616 
  ;
  #line 22617 
  if (ldv_undef_int() != 0) {
    #line 22618 
    switch (ldv_undef_int()) {
      #line 22619 
      case 0: 
              #line 22619 
      ;
      #line 22621 
      emg_124_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 22621 
      emg_124_emg_param_1_2 = emg_124_emg_param_1_2;
      #line 22622 
      emg_124_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 22622 
      emg_124_emg_param_3_3 = emg_124_emg_param_3_3;
      #line 22626 
      emg_wrapper_tx_tx_exch_expiry_read(emg_124_resource_0,emg_124_emg_param_1_2,emg_124_size_cnt,emg_124_emg_param_3_3);
      #line 22630 
      ldv_free((void *)emg_124_emg_param_1_2);
      #line 22631 
      ldv_free((void *)emg_124_emg_param_3_3);
      #line 22633 
      break;
      #line 22635 
      case 1: 
              #line 22635 
      ;
      #line 22637 
      generic_file_llseek(emg_124_resource_0,emg_124_emg_param_1_0,emg_124_emg_param_2_1);
      #line 22639 
      break;
      #line 22641 
      case 2: 
              #line 22641 
      ;
      #line 22648 
      __VERIFIER_assume(emg_124_size_cnt <= 2147479552UL);
      #line 22649 
      emg_124_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 22649 
      emg_124_emg_param_1_4 = emg_124_emg_param_1_4;
      #line 22650 
      emg_124_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 22650 
      emg_124_emg_param_3_5 = emg_124_emg_param_3_5;
      #line 22654 
      if (emg_124_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 22655 
        (*(emg_124_container->write))(emg_124_resource_0,emg_124_emg_param_1_4,emg_124_size_cnt,emg_124_emg_param_3_5);
      #line 22660 
      ldv_free((void *)emg_124_emg_param_1_4);
      #line 22661 
      ldv_free((void *)emg_124_emg_param_3_5);
      #line 22663 
      break;
      #line 22665 
      default: 
               #line 22665 
      ;
      #line 22665 
      __VERIFIER_assume(0);
    }
    #line 22668 
    if (emg_repeat_cnt_call_124 > 0) {
      #line 22669 
      emg_repeat_cnt_call_124 --;
      #line 22671 
      goto emg_call_124;
    }
    else 
         #line 22673 
         __VERIFIER_assume(0);
  }
  else {
    #line 22679 
    if (emg_124_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 22680 
      (*(emg_124_container->release))(emg_124_resource_1,emg_124_resource_0);
    #line 22684 
    if (emg_repeat_cnt_main_124_1 > 0) {
      #line 22685 
      emg_repeat_cnt_main_124_1 --;
      #line 22687 
      goto emg_main_124;
    }
    else 
         #line 22689 
         __VERIFIER_assume(0);
  }
  #line 22695 
  return (void *)0;
  #line 22698 
  emg_main_124: 
                #line 22698 
  ;
  #line 22699 
  if (ldv_undef_int() != 0) {
    #line 22701 
    emg_124_ret = simple_open(emg_124_resource_1,emg_124_resource_0);
    #line 22706 
    emg_124_ret = ldv_filter_err_code(emg_124_ret);
    #line 22709 
    if (ldv_undef_int() != 0) {
      #line 22711 
      __VERIFIER_assume(emg_124_ret == 0);
      #line 22715 
      goto emg_call_124;
    }
    else {
      #line 22720 
      __VERIFIER_assume(emg_124_ret != 0);
      #line 22723 
      if (emg_repeat_cnt_main_124_0 > 0) {
        #line 22724 
        emg_repeat_cnt_main_124_0 --;
        #line 22726 
        goto emg_main_124;
      }
      else 
           #line 22728 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 22735 
       ldv_free((void *)emg_124_resource_0);
  #line 22743 
  return (void *)0;
}

#line 22748  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_tx_tx_exch_ops(void *arg0)
{
  #line 22751 
  struct file_operations *emg_125_container;
  #line 22752 
  long long emg_125_emg_param_1_0;
  #line 22753 
  char *emg_125_emg_param_1_2;
  #line 22754 
  char *emg_125_emg_param_1_4;
  #line 22755 
  int emg_125_emg_param_2_1;
  #line 22756 
  long long *emg_125_emg_param_3_3;
  #line 22757 
  long long *emg_125_emg_param_3_5;
  #line 22758 
  struct file *emg_125_resource_0;
  #line 22759 
  struct inode *emg_125_resource_1;
  #line 22760 
  int emg_125_ret;
  #line 22761 
  unsigned long emg_125_size_cnt;
  #line 22762 
  int emg_repeat_cnt_main_125_1 = 1;
  #line 22763 
  int emg_repeat_cnt_call_125 = 1;
  #line 22764 
  int emg_repeat_cnt_main_125_0 = 1;
  #line 22766 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 22770 
  emg_125_ret = ldv_undef_int();
  #line 22771 
  emg_125_container = emg_alias_tx_tx_exch_ops;
  #line 22772 
  emg_125_ret = ldv_undef_int();
  #line 22774 
  __VERIFIER_assume(data->arg0 == emg_alias_tx_tx_exch_ops);
  #line 22776 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 22777 
    emg_125_container = data->arg0;
    #line 22778 
    ldv_free((void *)data);
  }
  #line 22783 
  emg_125_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 22784 
  emg_125_size_cnt = (unsigned long)ldv_undef_int();
  #line 22788 
  goto emg_main_125;
  #line 22792 
  return (void *)0;
  #line 22795 
  emg_call_125: 
                #line 22795 
  ;
  #line 22796 
  if (ldv_undef_int() != 0) {
    #line 22797 
    switch (ldv_undef_int()) {
      #line 22798 
      case 0: 
              #line 22798 
      ;
      #line 22800 
      emg_125_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 22800 
      emg_125_emg_param_1_2 = emg_125_emg_param_1_2;
      #line 22801 
      emg_125_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 22801 
      emg_125_emg_param_3_3 = emg_125_emg_param_3_3;
      #line 22805 
      emg_wrapper_tx_tx_exch_read(emg_125_resource_0,emg_125_emg_param_1_2,emg_125_size_cnt,emg_125_emg_param_3_3);
      #line 22809 
      ldv_free((void *)emg_125_emg_param_1_2);
      #line 22810 
      ldv_free((void *)emg_125_emg_param_3_3);
      #line 22812 
      break;
      #line 22814 
      case 1: 
              #line 22814 
      ;
      #line 22816 
      generic_file_llseek(emg_125_resource_0,emg_125_emg_param_1_0,emg_125_emg_param_2_1);
      #line 22818 
      break;
      #line 22820 
      case 2: 
              #line 22820 
      ;
      #line 22827 
      __VERIFIER_assume(emg_125_size_cnt <= 2147479552UL);
      #line 22828 
      emg_125_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 22828 
      emg_125_emg_param_1_4 = emg_125_emg_param_1_4;
      #line 22829 
      emg_125_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 22829 
      emg_125_emg_param_3_5 = emg_125_emg_param_3_5;
      #line 22833 
      if (emg_125_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 22834 
        (*(emg_125_container->write))(emg_125_resource_0,emg_125_emg_param_1_4,emg_125_size_cnt,emg_125_emg_param_3_5);
      #line 22839 
      ldv_free((void *)emg_125_emg_param_1_4);
      #line 22840 
      ldv_free((void *)emg_125_emg_param_3_5);
      #line 22842 
      break;
      #line 22844 
      default: 
               #line 22844 
      ;
      #line 22844 
      __VERIFIER_assume(0);
    }
    #line 22847 
    if (emg_repeat_cnt_call_125 > 0) {
      #line 22848 
      emg_repeat_cnt_call_125 --;
      #line 22850 
      goto emg_call_125;
    }
    else 
         #line 22852 
         __VERIFIER_assume(0);
  }
  else {
    #line 22858 
    if (emg_125_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 22859 
      (*(emg_125_container->release))(emg_125_resource_1,emg_125_resource_0);
    #line 22863 
    if (emg_repeat_cnt_main_125_1 > 0) {
      #line 22864 
      emg_repeat_cnt_main_125_1 --;
      #line 22866 
      goto emg_main_125;
    }
    else 
         #line 22868 
         __VERIFIER_assume(0);
  }
  #line 22874 
  return (void *)0;
  #line 22877 
  emg_main_125: 
                #line 22877 
  ;
  #line 22878 
  if (ldv_undef_int() != 0) {
    #line 22880 
    emg_125_ret = simple_open(emg_125_resource_1,emg_125_resource_0);
    #line 22885 
    emg_125_ret = ldv_filter_err_code(emg_125_ret);
    #line 22888 
    if (ldv_undef_int() != 0) {
      #line 22890 
      __VERIFIER_assume(emg_125_ret == 0);
      #line 22894 
      goto emg_call_125;
    }
    else {
      #line 22899 
      __VERIFIER_assume(emg_125_ret != 0);
      #line 22902 
      if (emg_repeat_cnt_main_125_0 > 0) {
        #line 22903 
        emg_repeat_cnt_main_125_0 --;
        #line 22905 
        goto emg_main_125;
      }
      else 
           #line 22907 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 22914 
       ldv_free((void *)emg_125_resource_0);
  #line 22922 
  return (void *)0;
}

#line 22927  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_tx_tx_exch_pending_ops(void *arg0)
{
  #line 22930 
  struct file_operations *emg_126_container;
  #line 22931 
  long long emg_126_emg_param_1_0;
  #line 22932 
  char *emg_126_emg_param_1_2;
  #line 22933 
  char *emg_126_emg_param_1_4;
  #line 22934 
  int emg_126_emg_param_2_1;
  #line 22935 
  long long *emg_126_emg_param_3_3;
  #line 22936 
  long long *emg_126_emg_param_3_5;
  #line 22937 
  struct file *emg_126_resource_0;
  #line 22938 
  struct inode *emg_126_resource_1;
  #line 22939 
  int emg_126_ret;
  #line 22940 
  unsigned long emg_126_size_cnt;
  #line 22941 
  int emg_repeat_cnt_main_126_1 = 1;
  #line 22942 
  int emg_repeat_cnt_call_126 = 1;
  #line 22943 
  int emg_repeat_cnt_main_126_0 = 1;
  #line 22945 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 22949 
  emg_126_ret = ldv_undef_int();
  #line 22950 
  emg_126_container = emg_alias_tx_tx_exch_pending_ops;
  #line 22951 
  emg_126_ret = ldv_undef_int();
  #line 22953 
  __VERIFIER_assume(data->arg0 == emg_alias_tx_tx_exch_pending_ops);
  #line 22955 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 22956 
    emg_126_container = data->arg0;
    #line 22957 
    ldv_free((void *)data);
  }
  #line 22962 
  emg_126_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 22963 
  emg_126_size_cnt = (unsigned long)ldv_undef_int();
  #line 22967 
  goto emg_main_126;
  #line 22971 
  return (void *)0;
  #line 22974 
  emg_call_126: 
                #line 22974 
  ;
  #line 22975 
  if (ldv_undef_int() != 0) {
    #line 22976 
    switch (ldv_undef_int()) {
      #line 22977 
      case 0: 
              #line 22977 
      ;
      #line 22979 
      emg_126_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 22979 
      emg_126_emg_param_1_2 = emg_126_emg_param_1_2;
      #line 22980 
      emg_126_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 22980 
      emg_126_emg_param_3_3 = emg_126_emg_param_3_3;
      #line 22984 
      emg_wrapper_tx_tx_exch_pending_read(emg_126_resource_0,emg_126_emg_param_1_2,emg_126_size_cnt,emg_126_emg_param_3_3);
      #line 22988 
      ldv_free((void *)emg_126_emg_param_1_2);
      #line 22989 
      ldv_free((void *)emg_126_emg_param_3_3);
      #line 22991 
      break;
      #line 22993 
      case 1: 
              #line 22993 
      ;
      #line 22995 
      generic_file_llseek(emg_126_resource_0,emg_126_emg_param_1_0,emg_126_emg_param_2_1);
      #line 22997 
      break;
      #line 22999 
      case 2: 
              #line 22999 
      ;
      #line 23006 
      __VERIFIER_assume(emg_126_size_cnt <= 2147479552UL);
      #line 23007 
      emg_126_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 23007 
      emg_126_emg_param_1_4 = emg_126_emg_param_1_4;
      #line 23008 
      emg_126_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 23008 
      emg_126_emg_param_3_5 = emg_126_emg_param_3_5;
      #line 23012 
      if (emg_126_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 23013 
        (*(emg_126_container->write))(emg_126_resource_0,emg_126_emg_param_1_4,emg_126_size_cnt,emg_126_emg_param_3_5);
      #line 23018 
      ldv_free((void *)emg_126_emg_param_1_4);
      #line 23019 
      ldv_free((void *)emg_126_emg_param_3_5);
      #line 23021 
      break;
      #line 23023 
      default: 
               #line 23023 
      ;
      #line 23023 
      __VERIFIER_assume(0);
    }
    #line 23026 
    if (emg_repeat_cnt_call_126 > 0) {
      #line 23027 
      emg_repeat_cnt_call_126 --;
      #line 23029 
      goto emg_call_126;
    }
    else 
         #line 23031 
         __VERIFIER_assume(0);
  }
  else {
    #line 23037 
    if (emg_126_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 23038 
      (*(emg_126_container->release))(emg_126_resource_1,emg_126_resource_0);
    #line 23042 
    if (emg_repeat_cnt_main_126_0 > 0) {
      #line 23043 
      emg_repeat_cnt_main_126_0 --;
      #line 23045 
      goto emg_main_126;
    }
    else 
         #line 23047 
         __VERIFIER_assume(0);
  }
  #line 23053 
  return (void *)0;
  #line 23056 
  emg_main_126: 
                #line 23056 
  ;
  #line 23057 
  if (ldv_undef_int() != 0) {
    #line 23059 
    emg_126_ret = simple_open(emg_126_resource_1,emg_126_resource_0);
    #line 23064 
    emg_126_ret = ldv_filter_err_code(emg_126_ret);
    #line 23067 
    if (ldv_undef_int() != 0) {
      #line 23069 
      __VERIFIER_assume(emg_126_ret == 0);
      #line 23073 
      goto emg_call_126;
    }
    else {
      #line 23078 
      __VERIFIER_assume(emg_126_ret != 0);
      #line 23081 
      if (emg_repeat_cnt_main_126_1 > 0) {
        #line 23082 
        emg_repeat_cnt_main_126_1 --;
        #line 23084 
        goto emg_main_126;
      }
      else 
           #line 23086 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 23093 
       ldv_free((void *)emg_126_resource_0);
  #line 23101 
  return (void *)0;
}

#line 23106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_tx_tx_prepared_descs_ops(void *arg0)
{
  #line 23109 
  struct file_operations *emg_127_container;
  #line 23110 
  long long emg_127_emg_param_1_0;
  #line 23111 
  char *emg_127_emg_param_1_2;
  #line 23112 
  char *emg_127_emg_param_1_4;
  #line 23113 
  int emg_127_emg_param_2_1;
  #line 23114 
  long long *emg_127_emg_param_3_3;
  #line 23115 
  long long *emg_127_emg_param_3_5;
  #line 23116 
  struct file *emg_127_resource_0;
  #line 23117 
  struct inode *emg_127_resource_1;
  #line 23118 
  int emg_127_ret;
  #line 23119 
  unsigned long emg_127_size_cnt;
  #line 23120 
  int emg_repeat_cnt_main_127_1 = 1;
  #line 23121 
  int emg_repeat_cnt_call_127 = 1;
  #line 23122 
  int emg_repeat_cnt_main_127_0 = 1;
  #line 23124 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 23128 
  emg_127_ret = ldv_undef_int();
  #line 23129 
  emg_127_container = emg_alias_tx_tx_prepared_descs_ops;
  #line 23130 
  emg_127_ret = ldv_undef_int();
  #line 23132 
  __VERIFIER_assume(data->arg0 == emg_alias_tx_tx_prepared_descs_ops);
  #line 23134 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 23135 
    emg_127_container = data->arg0;
    #line 23136 
    ldv_free((void *)data);
  }
  #line 23141 
  emg_127_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 23142 
  emg_127_size_cnt = (unsigned long)ldv_undef_int();
  #line 23146 
  goto emg_main_127;
  #line 23150 
  return (void *)0;
  #line 23153 
  emg_call_127: 
                #line 23153 
  ;
  #line 23154 
  if (ldv_undef_int() != 0) {
    #line 23155 
    switch (ldv_undef_int()) {
      #line 23156 
      case 0: 
              #line 23156 
      ;
      #line 23158 
      emg_127_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 23158 
      emg_127_emg_param_1_2 = emg_127_emg_param_1_2;
      #line 23159 
      emg_127_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 23159 
      emg_127_emg_param_3_3 = emg_127_emg_param_3_3;
      #line 23163 
      emg_wrapper_tx_tx_prepared_descs_read(emg_127_resource_0,emg_127_emg_param_1_2,emg_127_size_cnt,emg_127_emg_param_3_3);
      #line 23167 
      ldv_free((void *)emg_127_emg_param_1_2);
      #line 23168 
      ldv_free((void *)emg_127_emg_param_3_3);
      #line 23170 
      break;
      #line 23172 
      case 1: 
              #line 23172 
      ;
      #line 23174 
      generic_file_llseek(emg_127_resource_0,emg_127_emg_param_1_0,emg_127_emg_param_2_1);
      #line 23176 
      break;
      #line 23178 
      case 2: 
              #line 23178 
      ;
      #line 23185 
      __VERIFIER_assume(emg_127_size_cnt <= 2147479552UL);
      #line 23186 
      emg_127_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 23186 
      emg_127_emg_param_1_4 = emg_127_emg_param_1_4;
      #line 23187 
      emg_127_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 23187 
      emg_127_emg_param_3_5 = emg_127_emg_param_3_5;
      #line 23191 
      if (emg_127_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 23192 
        (*(emg_127_container->write))(emg_127_resource_0,emg_127_emg_param_1_4,emg_127_size_cnt,emg_127_emg_param_3_5);
      #line 23197 
      ldv_free((void *)emg_127_emg_param_1_4);
      #line 23198 
      ldv_free((void *)emg_127_emg_param_3_5);
      #line 23200 
      break;
      #line 23202 
      default: 
               #line 23202 
      ;
      #line 23202 
      __VERIFIER_assume(0);
    }
    #line 23205 
    if (emg_repeat_cnt_call_127 > 0) {
      #line 23206 
      emg_repeat_cnt_call_127 --;
      #line 23208 
      goto emg_call_127;
    }
    else 
         #line 23210 
         __VERIFIER_assume(0);
  }
  else {
    #line 23216 
    if (emg_127_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 23217 
      (*(emg_127_container->release))(emg_127_resource_1,emg_127_resource_0);
    #line 23221 
    if (emg_repeat_cnt_main_127_1 > 0) {
      #line 23222 
      emg_repeat_cnt_main_127_1 --;
      #line 23224 
      goto emg_main_127;
    }
    else 
         #line 23226 
         __VERIFIER_assume(0);
  }
  #line 23232 
  return (void *)0;
  #line 23235 
  emg_main_127: 
                #line 23235 
  ;
  #line 23236 
  if (ldv_undef_int() != 0) {
    #line 23238 
    emg_127_ret = simple_open(emg_127_resource_1,emg_127_resource_0);
    #line 23243 
    emg_127_ret = ldv_filter_err_code(emg_127_ret);
    #line 23246 
    if (ldv_undef_int() != 0) {
      #line 23248 
      __VERIFIER_assume(emg_127_ret == 0);
      #line 23252 
      goto emg_call_127;
    }
    else {
      #line 23257 
      __VERIFIER_assume(emg_127_ret != 0);
      #line 23260 
      if (emg_repeat_cnt_main_127_0 > 0) {
        #line 23261 
        emg_repeat_cnt_main_127_0 --;
        #line 23263 
        goto emg_main_127;
      }
      else 
           #line 23265 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 23272 
       ldv_free((void *)emg_127_resource_0);
  #line 23280 
  return (void *)0;
}

#line 23285  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_tx_tx_retry_data_ops(void *arg0)
{
  #line 23288 
  struct file_operations *emg_128_container;
  #line 23289 
  long long emg_128_emg_param_1_0;
  #line 23290 
  char *emg_128_emg_param_1_2;
  #line 23291 
  char *emg_128_emg_param_1_4;
  #line 23292 
  int emg_128_emg_param_2_1;
  #line 23293 
  long long *emg_128_emg_param_3_3;
  #line 23294 
  long long *emg_128_emg_param_3_5;
  #line 23295 
  struct file *emg_128_resource_0;
  #line 23296 
  struct inode *emg_128_resource_1;
  #line 23297 
  int emg_128_ret;
  #line 23298 
  unsigned long emg_128_size_cnt;
  #line 23299 
  int emg_repeat_cnt_call_128 = 1;
  #line 23300 
  int emg_repeat_cnt_main_128_0 = 1;
  #line 23301 
  int emg_repeat_cnt_main_128_1 = 1;
  #line 23303 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 23307 
  emg_128_ret = ldv_undef_int();
  #line 23308 
  emg_128_container = emg_alias_tx_tx_retry_data_ops;
  #line 23309 
  emg_128_ret = ldv_undef_int();
  #line 23311 
  __VERIFIER_assume(data->arg0 == emg_alias_tx_tx_retry_data_ops);
  #line 23313 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 23314 
    emg_128_container = data->arg0;
    #line 23315 
    ldv_free((void *)data);
  }
  #line 23320 
  emg_128_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 23321 
  emg_128_size_cnt = (unsigned long)ldv_undef_int();
  #line 23325 
  goto emg_main_128;
  #line 23329 
  return (void *)0;
  #line 23332 
  emg_call_128: 
                #line 23332 
  ;
  #line 23333 
  if (ldv_undef_int() != 0) {
    #line 23334 
    switch (ldv_undef_int()) {
      #line 23335 
      case 0: 
              #line 23335 
      ;
      #line 23337 
      emg_128_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 23337 
      emg_128_emg_param_1_2 = emg_128_emg_param_1_2;
      #line 23338 
      emg_128_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 23338 
      emg_128_emg_param_3_3 = emg_128_emg_param_3_3;
      #line 23342 
      emg_wrapper_tx_tx_retry_data_read(emg_128_resource_0,emg_128_emg_param_1_2,emg_128_size_cnt,emg_128_emg_param_3_3);
      #line 23346 
      ldv_free((void *)emg_128_emg_param_1_2);
      #line 23347 
      ldv_free((void *)emg_128_emg_param_3_3);
      #line 23349 
      break;
      #line 23351 
      case 1: 
              #line 23351 
      ;
      #line 23353 
      generic_file_llseek(emg_128_resource_0,emg_128_emg_param_1_0,emg_128_emg_param_2_1);
      #line 23355 
      break;
      #line 23357 
      case 2: 
              #line 23357 
      ;
      #line 23364 
      __VERIFIER_assume(emg_128_size_cnt <= 2147479552UL);
      #line 23365 
      emg_128_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 23365 
      emg_128_emg_param_1_4 = emg_128_emg_param_1_4;
      #line 23366 
      emg_128_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 23366 
      emg_128_emg_param_3_5 = emg_128_emg_param_3_5;
      #line 23370 
      if (emg_128_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 23371 
        (*(emg_128_container->write))(emg_128_resource_0,emg_128_emg_param_1_4,emg_128_size_cnt,emg_128_emg_param_3_5);
      #line 23376 
      ldv_free((void *)emg_128_emg_param_1_4);
      #line 23377 
      ldv_free((void *)emg_128_emg_param_3_5);
      #line 23379 
      break;
      #line 23381 
      default: 
               #line 23381 
      ;
      #line 23381 
      __VERIFIER_assume(0);
    }
    #line 23384 
    if (emg_repeat_cnt_call_128 > 0) {
      #line 23385 
      emg_repeat_cnt_call_128 --;
      #line 23387 
      goto emg_call_128;
    }
    else 
         #line 23389 
         __VERIFIER_assume(0);
  }
  else {
    #line 23395 
    if (emg_128_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 23396 
      (*(emg_128_container->release))(emg_128_resource_1,emg_128_resource_0);
    #line 23400 
    if (emg_repeat_cnt_main_128_0 > 0) {
      #line 23401 
      emg_repeat_cnt_main_128_0 --;
      #line 23403 
      goto emg_main_128;
    }
    else 
         #line 23405 
         __VERIFIER_assume(0);
  }
  #line 23411 
  return (void *)0;
  #line 23414 
  emg_main_128: 
                #line 23414 
  ;
  #line 23415 
  if (ldv_undef_int() != 0) {
    #line 23417 
    emg_128_ret = simple_open(emg_128_resource_1,emg_128_resource_0);
    #line 23422 
    emg_128_ret = ldv_filter_err_code(emg_128_ret);
    #line 23425 
    if (ldv_undef_int() != 0) {
      #line 23427 
      __VERIFIER_assume(emg_128_ret == 0);
      #line 23431 
      goto emg_call_128;
    }
    else {
      #line 23436 
      __VERIFIER_assume(emg_128_ret != 0);
      #line 23439 
      if (emg_repeat_cnt_main_128_1 > 0) {
        #line 23440 
        emg_repeat_cnt_main_128_1 --;
        #line 23442 
        goto emg_main_128;
      }
      else 
           #line 23444 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 23451 
       ldv_free((void *)emg_128_resource_0);
  #line 23459 
  return (void *)0;
}

#line 23464  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_tx_tx_retry_per_rate_ops(void *arg0)
{
  #line 23467 
  struct file_operations *emg_129_container;
  #line 23468 
  long long emg_129_emg_param_1_0;
  #line 23469 
  char *emg_129_emg_param_1_2;
  #line 23470 
  char *emg_129_emg_param_1_4;
  #line 23471 
  int emg_129_emg_param_2_1;
  #line 23472 
  long long *emg_129_emg_param_3_3;
  #line 23473 
  long long *emg_129_emg_param_3_5;
  #line 23474 
  struct file *emg_129_resource_0;
  #line 23475 
  struct inode *emg_129_resource_1;
  #line 23476 
  int emg_129_ret;
  #line 23477 
  unsigned long emg_129_size_cnt;
  #line 23478 
  int emg_repeat_cnt_main_129_1 = 1;
  #line 23479 
  int emg_repeat_cnt_main_129_0 = 1;
  #line 23480 
  int emg_repeat_cnt_call_129 = 1;
  #line 23482 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 23486 
  emg_129_ret = ldv_undef_int();
  #line 23487 
  emg_129_container = emg_alias_tx_tx_retry_per_rate_ops;
  #line 23488 
  emg_129_ret = ldv_undef_int();
  #line 23490 
  __VERIFIER_assume(data->arg0 == emg_alias_tx_tx_retry_per_rate_ops);
  #line 23492 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 23493 
    emg_129_container = data->arg0;
    #line 23494 
    ldv_free((void *)data);
  }
  #line 23499 
  emg_129_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 23500 
  emg_129_size_cnt = (unsigned long)ldv_undef_int();
  #line 23504 
  goto emg_main_129;
  #line 23508 
  return (void *)0;
  #line 23511 
  emg_call_129: 
                #line 23511 
  ;
  #line 23512 
  if (ldv_undef_int() != 0) {
    #line 23513 
    switch (ldv_undef_int()) {
      #line 23514 
      case 0: 
              #line 23514 
      ;
      #line 23516 
      emg_129_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 23516 
      emg_129_emg_param_1_2 = emg_129_emg_param_1_2;
      #line 23517 
      emg_129_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 23517 
      emg_129_emg_param_3_3 = emg_129_emg_param_3_3;
      #line 23521 
      emg_wrapper_tx_tx_retry_per_rate_read(emg_129_resource_0,emg_129_emg_param_1_2,emg_129_size_cnt,emg_129_emg_param_3_3);
      #line 23525 
      ldv_free((void *)emg_129_emg_param_1_2);
      #line 23526 
      ldv_free((void *)emg_129_emg_param_3_3);
      #line 23528 
      break;
      #line 23530 
      case 1: 
              #line 23530 
      ;
      #line 23532 
      generic_file_llseek(emg_129_resource_0,emg_129_emg_param_1_0,emg_129_emg_param_2_1);
      #line 23534 
      break;
      #line 23536 
      case 2: 
              #line 23536 
      ;
      #line 23543 
      __VERIFIER_assume(emg_129_size_cnt <= 2147479552UL);
      #line 23544 
      emg_129_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 23544 
      emg_129_emg_param_1_4 = emg_129_emg_param_1_4;
      #line 23545 
      emg_129_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 23545 
      emg_129_emg_param_3_5 = emg_129_emg_param_3_5;
      #line 23549 
      if (emg_129_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 23550 
        (*(emg_129_container->write))(emg_129_resource_0,emg_129_emg_param_1_4,emg_129_size_cnt,emg_129_emg_param_3_5);
      #line 23555 
      ldv_free((void *)emg_129_emg_param_1_4);
      #line 23556 
      ldv_free((void *)emg_129_emg_param_3_5);
      #line 23558 
      break;
      #line 23560 
      default: 
               #line 23560 
      ;
      #line 23560 
      __VERIFIER_assume(0);
    }
    #line 23563 
    if (emg_repeat_cnt_call_129 > 0) {
      #line 23564 
      emg_repeat_cnt_call_129 --;
      #line 23566 
      goto emg_call_129;
    }
    else 
         #line 23568 
         __VERIFIER_assume(0);
  }
  else {
    #line 23574 
    if (emg_129_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 23575 
      (*(emg_129_container->release))(emg_129_resource_1,emg_129_resource_0);
    #line 23579 
    if (emg_repeat_cnt_main_129_1 > 0) {
      #line 23580 
      emg_repeat_cnt_main_129_1 --;
      #line 23582 
      goto emg_main_129;
    }
    else 
         #line 23584 
         __VERIFIER_assume(0);
  }
  #line 23590 
  return (void *)0;
  #line 23593 
  emg_main_129: 
                #line 23593 
  ;
  #line 23594 
  if (ldv_undef_int() != 0) {
    #line 23596 
    emg_129_ret = simple_open(emg_129_resource_1,emg_129_resource_0);
    #line 23601 
    emg_129_ret = ldv_filter_err_code(emg_129_ret);
    #line 23604 
    if (ldv_undef_int() != 0) {
      #line 23606 
      __VERIFIER_assume(emg_129_ret == 0);
      #line 23610 
      goto emg_call_129;
    }
    else {
      #line 23615 
      __VERIFIER_assume(emg_129_ret != 0);
      #line 23618 
      if (emg_repeat_cnt_main_129_0 > 0) {
        #line 23619 
        emg_repeat_cnt_main_129_0 --;
        #line 23621 
        goto emg_main_129;
      }
      else 
           #line 23623 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 23630 
       ldv_free((void *)emg_129_resource_0);
  #line 23638 
  return (void *)0;
}

#line 23643  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_tx_tx_retry_template_ops(void *arg0)
{
  #line 23646 
  struct file_operations *emg_130_container;
  #line 23647 
  long long emg_130_emg_param_1_0;
  #line 23648 
  char *emg_130_emg_param_1_2;
  #line 23649 
  char *emg_130_emg_param_1_4;
  #line 23650 
  int emg_130_emg_param_2_1;
  #line 23651 
  long long *emg_130_emg_param_3_3;
  #line 23652 
  long long *emg_130_emg_param_3_5;
  #line 23653 
  struct file *emg_130_resource_0;
  #line 23654 
  struct inode *emg_130_resource_1;
  #line 23655 
  int emg_130_ret;
  #line 23656 
  unsigned long emg_130_size_cnt;
  #line 23657 
  int emg_repeat_cnt_main_130_0 = 1;
  #line 23658 
  int emg_repeat_cnt_call_130 = 1;
  #line 23659 
  int emg_repeat_cnt_main_130_1 = 1;
  #line 23661 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 23665 
  emg_130_ret = ldv_undef_int();
  #line 23666 
  emg_130_container = emg_alias_tx_tx_retry_template_ops;
  #line 23667 
  emg_130_ret = ldv_undef_int();
  #line 23669 
  __VERIFIER_assume(data->arg0 == emg_alias_tx_tx_retry_template_ops);
  #line 23671 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 23672 
    emg_130_container = data->arg0;
    #line 23673 
    ldv_free((void *)data);
  }
  #line 23678 
  emg_130_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 23679 
  emg_130_size_cnt = (unsigned long)ldv_undef_int();
  #line 23683 
  goto emg_main_130;
  #line 23687 
  return (void *)0;
  #line 23690 
  emg_call_130: 
                #line 23690 
  ;
  #line 23691 
  if (ldv_undef_int() != 0) {
    #line 23692 
    switch (ldv_undef_int()) {
      #line 23693 
      case 0: 
              #line 23693 
      ;
      #line 23695 
      emg_130_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 23695 
      emg_130_emg_param_1_2 = emg_130_emg_param_1_2;
      #line 23696 
      emg_130_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 23696 
      emg_130_emg_param_3_3 = emg_130_emg_param_3_3;
      #line 23700 
      emg_wrapper_tx_tx_retry_template_read(emg_130_resource_0,emg_130_emg_param_1_2,emg_130_size_cnt,emg_130_emg_param_3_3);
      #line 23704 
      ldv_free((void *)emg_130_emg_param_1_2);
      #line 23705 
      ldv_free((void *)emg_130_emg_param_3_3);
      #line 23707 
      break;
      #line 23709 
      case 1: 
              #line 23709 
      ;
      #line 23711 
      generic_file_llseek(emg_130_resource_0,emg_130_emg_param_1_0,emg_130_emg_param_2_1);
      #line 23713 
      break;
      #line 23715 
      case 2: 
              #line 23715 
      ;
      #line 23722 
      __VERIFIER_assume(emg_130_size_cnt <= 2147479552UL);
      #line 23723 
      emg_130_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 23723 
      emg_130_emg_param_1_4 = emg_130_emg_param_1_4;
      #line 23724 
      emg_130_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 23724 
      emg_130_emg_param_3_5 = emg_130_emg_param_3_5;
      #line 23728 
      if (emg_130_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 23729 
        (*(emg_130_container->write))(emg_130_resource_0,emg_130_emg_param_1_4,emg_130_size_cnt,emg_130_emg_param_3_5);
      #line 23734 
      ldv_free((void *)emg_130_emg_param_1_4);
      #line 23735 
      ldv_free((void *)emg_130_emg_param_3_5);
      #line 23737 
      break;
      #line 23739 
      default: 
               #line 23739 
      ;
      #line 23739 
      __VERIFIER_assume(0);
    }
    #line 23742 
    if (emg_repeat_cnt_call_130 > 0) {
      #line 23743 
      emg_repeat_cnt_call_130 --;
      #line 23745 
      goto emg_call_130;
    }
    else 
         #line 23747 
         __VERIFIER_assume(0);
  }
  else {
    #line 23753 
    if (emg_130_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 23754 
      (*(emg_130_container->release))(emg_130_resource_1,emg_130_resource_0);
    #line 23758 
    if (emg_repeat_cnt_main_130_1 > 0) {
      #line 23759 
      emg_repeat_cnt_main_130_1 --;
      #line 23761 
      goto emg_main_130;
    }
    else 
         #line 23763 
         __VERIFIER_assume(0);
  }
  #line 23769 
  return (void *)0;
  #line 23772 
  emg_main_130: 
                #line 23772 
  ;
  #line 23773 
  if (ldv_undef_int() != 0) {
    #line 23775 
    emg_130_ret = simple_open(emg_130_resource_1,emg_130_resource_0);
    #line 23780 
    emg_130_ret = ldv_filter_err_code(emg_130_ret);
    #line 23783 
    if (ldv_undef_int() != 0) {
      #line 23785 
      __VERIFIER_assume(emg_130_ret == 0);
      #line 23789 
      goto emg_call_130;
    }
    else {
      #line 23794 
      __VERIFIER_assume(emg_130_ret != 0);
      #line 23797 
      if (emg_repeat_cnt_main_130_0 > 0) {
        #line 23798 
        emg_repeat_cnt_main_130_0 --;
        #line 23800 
        goto emg_main_130;
      }
      else 
           #line 23802 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 23809 
       ldv_free((void *)emg_130_resource_0);
  #line 23817 
  return (void *)0;
}

#line 23822  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_tx_tx_start_data_ops(void *arg0)
{
  #line 23825 
  struct file_operations *emg_131_container;
  #line 23826 
  long long emg_131_emg_param_1_0;
  #line 23827 
  char *emg_131_emg_param_1_2;
  #line 23828 
  char *emg_131_emg_param_1_4;
  #line 23829 
  int emg_131_emg_param_2_1;
  #line 23830 
  long long *emg_131_emg_param_3_3;
  #line 23831 
  long long *emg_131_emg_param_3_5;
  #line 23832 
  struct file *emg_131_resource_0;
  #line 23833 
  struct inode *emg_131_resource_1;
  #line 23834 
  int emg_131_ret;
  #line 23835 
  unsigned long emg_131_size_cnt;
  #line 23836 
  int emg_repeat_cnt_main_131_1 = 1;
  #line 23837 
  int emg_repeat_cnt_main_131_0 = 1;
  #line 23838 
  int emg_repeat_cnt_call_131 = 1;
  #line 23840 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 23844 
  emg_131_ret = ldv_undef_int();
  #line 23845 
  emg_131_container = emg_alias_tx_tx_start_data_ops;
  #line 23846 
  emg_131_ret = ldv_undef_int();
  #line 23848 
  __VERIFIER_assume(data->arg0 == emg_alias_tx_tx_start_data_ops);
  #line 23850 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 23851 
    emg_131_container = data->arg0;
    #line 23852 
    ldv_free((void *)data);
  }
  #line 23857 
  emg_131_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 23858 
  emg_131_size_cnt = (unsigned long)ldv_undef_int();
  #line 23862 
  goto emg_main_131;
  #line 23866 
  return (void *)0;
  #line 23869 
  emg_call_131: 
                #line 23869 
  ;
  #line 23870 
  if (ldv_undef_int() != 0) {
    #line 23871 
    switch (ldv_undef_int()) {
      #line 23872 
      case 0: 
              #line 23872 
      ;
      #line 23874 
      emg_131_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 23874 
      emg_131_emg_param_1_2 = emg_131_emg_param_1_2;
      #line 23875 
      emg_131_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 23875 
      emg_131_emg_param_3_3 = emg_131_emg_param_3_3;
      #line 23879 
      emg_wrapper_tx_tx_start_data_read(emg_131_resource_0,emg_131_emg_param_1_2,emg_131_size_cnt,emg_131_emg_param_3_3);
      #line 23883 
      ldv_free((void *)emg_131_emg_param_1_2);
      #line 23884 
      ldv_free((void *)emg_131_emg_param_3_3);
      #line 23886 
      break;
      #line 23888 
      case 1: 
              #line 23888 
      ;
      #line 23890 
      generic_file_llseek(emg_131_resource_0,emg_131_emg_param_1_0,emg_131_emg_param_2_1);
      #line 23892 
      break;
      #line 23894 
      case 2: 
              #line 23894 
      ;
      #line 23901 
      __VERIFIER_assume(emg_131_size_cnt <= 2147479552UL);
      #line 23902 
      emg_131_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 23902 
      emg_131_emg_param_1_4 = emg_131_emg_param_1_4;
      #line 23903 
      emg_131_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 23903 
      emg_131_emg_param_3_5 = emg_131_emg_param_3_5;
      #line 23907 
      if (emg_131_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 23908 
        (*(emg_131_container->write))(emg_131_resource_0,emg_131_emg_param_1_4,emg_131_size_cnt,emg_131_emg_param_3_5);
      #line 23913 
      ldv_free((void *)emg_131_emg_param_1_4);
      #line 23914 
      ldv_free((void *)emg_131_emg_param_3_5);
      #line 23916 
      break;
      #line 23918 
      default: 
               #line 23918 
      ;
      #line 23918 
      __VERIFIER_assume(0);
    }
    #line 23921 
    if (emg_repeat_cnt_call_131 > 0) {
      #line 23922 
      emg_repeat_cnt_call_131 --;
      #line 23924 
      goto emg_call_131;
    }
    else 
         #line 23926 
         __VERIFIER_assume(0);
  }
  else {
    #line 23932 
    if (emg_131_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 23933 
      (*(emg_131_container->release))(emg_131_resource_1,emg_131_resource_0);
    #line 23937 
    if (emg_repeat_cnt_main_131_1 > 0) {
      #line 23938 
      emg_repeat_cnt_main_131_1 --;
      #line 23940 
      goto emg_main_131;
    }
    else 
         #line 23942 
         __VERIFIER_assume(0);
  }
  #line 23948 
  return (void *)0;
  #line 23951 
  emg_main_131: 
                #line 23951 
  ;
  #line 23952 
  if (ldv_undef_int() != 0) {
    #line 23954 
    emg_131_ret = simple_open(emg_131_resource_1,emg_131_resource_0);
    #line 23959 
    emg_131_ret = ldv_filter_err_code(emg_131_ret);
    #line 23962 
    if (ldv_undef_int() != 0) {
      #line 23964 
      __VERIFIER_assume(emg_131_ret == 0);
      #line 23968 
      goto emg_call_131;
    }
    else {
      #line 23973 
      __VERIFIER_assume(emg_131_ret != 0);
      #line 23976 
      if (emg_repeat_cnt_main_131_0 > 0) {
        #line 23977 
        emg_repeat_cnt_main_131_0 --;
        #line 23979 
        goto emg_main_131;
      }
      else 
           #line 23981 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 23988 
       ldv_free((void *)emg_131_resource_0);
  #line 23996 
  return (void *)0;
}

#line 24001  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_tx_tx_start_fw_gen_ops(void *arg0)
{
  #line 24004 
  struct file_operations *emg_132_container;
  #line 24005 
  long long emg_132_emg_param_1_0;
  #line 24006 
  char *emg_132_emg_param_1_2;
  #line 24007 
  char *emg_132_emg_param_1_4;
  #line 24008 
  int emg_132_emg_param_2_1;
  #line 24009 
  long long *emg_132_emg_param_3_3;
  #line 24010 
  long long *emg_132_emg_param_3_5;
  #line 24011 
  struct file *emg_132_resource_0;
  #line 24012 
  struct inode *emg_132_resource_1;
  #line 24013 
  int emg_132_ret;
  #line 24014 
  unsigned long emg_132_size_cnt;
  #line 24015 
  int emg_repeat_cnt_main_132_1 = 1;
  #line 24016 
  int emg_repeat_cnt_main_132_0 = 1;
  #line 24017 
  int emg_repeat_cnt_call_132 = 1;
  #line 24019 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 24023 
  emg_132_ret = ldv_undef_int();
  #line 24024 
  emg_132_container = emg_alias_tx_tx_start_fw_gen_ops;
  #line 24025 
  emg_132_ret = ldv_undef_int();
  #line 24027 
  __VERIFIER_assume(data->arg0 == emg_alias_tx_tx_start_fw_gen_ops);
  #line 24029 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 24030 
    emg_132_container = data->arg0;
    #line 24031 
    ldv_free((void *)data);
  }
  #line 24036 
  emg_132_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 24037 
  emg_132_size_cnt = (unsigned long)ldv_undef_int();
  #line 24041 
  goto emg_main_132;
  #line 24045 
  return (void *)0;
  #line 24048 
  emg_call_132: 
                #line 24048 
  ;
  #line 24049 
  if (ldv_undef_int() != 0) {
    #line 24050 
    switch (ldv_undef_int()) {
      #line 24051 
      case 0: 
              #line 24051 
      ;
      #line 24053 
      emg_132_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 24053 
      emg_132_emg_param_1_2 = emg_132_emg_param_1_2;
      #line 24054 
      emg_132_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 24054 
      emg_132_emg_param_3_3 = emg_132_emg_param_3_3;
      #line 24058 
      emg_wrapper_tx_tx_start_fw_gen_read(emg_132_resource_0,emg_132_emg_param_1_2,emg_132_size_cnt,emg_132_emg_param_3_3);
      #line 24062 
      ldv_free((void *)emg_132_emg_param_1_2);
      #line 24063 
      ldv_free((void *)emg_132_emg_param_3_3);
      #line 24065 
      break;
      #line 24067 
      case 1: 
              #line 24067 
      ;
      #line 24069 
      generic_file_llseek(emg_132_resource_0,emg_132_emg_param_1_0,emg_132_emg_param_2_1);
      #line 24071 
      break;
      #line 24073 
      case 2: 
              #line 24073 
      ;
      #line 24080 
      __VERIFIER_assume(emg_132_size_cnt <= 2147479552UL);
      #line 24081 
      emg_132_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 24081 
      emg_132_emg_param_1_4 = emg_132_emg_param_1_4;
      #line 24082 
      emg_132_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 24082 
      emg_132_emg_param_3_5 = emg_132_emg_param_3_5;
      #line 24086 
      if (emg_132_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 24087 
        (*(emg_132_container->write))(emg_132_resource_0,emg_132_emg_param_1_4,emg_132_size_cnt,emg_132_emg_param_3_5);
      #line 24092 
      ldv_free((void *)emg_132_emg_param_1_4);
      #line 24093 
      ldv_free((void *)emg_132_emg_param_3_5);
      #line 24095 
      break;
      #line 24097 
      default: 
               #line 24097 
      ;
      #line 24097 
      __VERIFIER_assume(0);
    }
    #line 24100 
    if (emg_repeat_cnt_call_132 > 0) {
      #line 24101 
      emg_repeat_cnt_call_132 --;
      #line 24103 
      goto emg_call_132;
    }
    else 
         #line 24105 
         __VERIFIER_assume(0);
  }
  else {
    #line 24111 
    if (emg_132_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 24112 
      (*(emg_132_container->release))(emg_132_resource_1,emg_132_resource_0);
    #line 24116 
    if (emg_repeat_cnt_main_132_0 > 0) {
      #line 24117 
      emg_repeat_cnt_main_132_0 --;
      #line 24119 
      goto emg_main_132;
    }
    else 
         #line 24121 
         __VERIFIER_assume(0);
  }
  #line 24127 
  return (void *)0;
  #line 24130 
  emg_main_132: 
                #line 24130 
  ;
  #line 24131 
  if (ldv_undef_int() != 0) {
    #line 24133 
    emg_132_ret = simple_open(emg_132_resource_1,emg_132_resource_0);
    #line 24138 
    emg_132_ret = ldv_filter_err_code(emg_132_ret);
    #line 24141 
    if (ldv_undef_int() != 0) {
      #line 24143 
      __VERIFIER_assume(emg_132_ret == 0);
      #line 24147 
      goto emg_call_132;
    }
    else {
      #line 24152 
      __VERIFIER_assume(emg_132_ret != 0);
      #line 24155 
      if (emg_repeat_cnt_main_132_1 > 0) {
        #line 24156 
        emg_repeat_cnt_main_132_1 --;
        #line 24158 
        goto emg_main_132;
      }
      else 
           #line 24160 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 24167 
       ldv_free((void *)emg_132_resource_0);
  #line 24175 
  return (void *)0;
}

#line 24180  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_tx_tx_start_int_templates_ops(void *arg0)
{
  #line 24183 
  struct file_operations *emg_133_container;
  #line 24184 
  long long emg_133_emg_param_1_0;
  #line 24185 
  char *emg_133_emg_param_1_2;
  #line 24186 
  char *emg_133_emg_param_1_4;
  #line 24187 
  int emg_133_emg_param_2_1;
  #line 24188 
  long long *emg_133_emg_param_3_3;
  #line 24189 
  long long *emg_133_emg_param_3_5;
  #line 24190 
  struct file *emg_133_resource_0;
  #line 24191 
  struct inode *emg_133_resource_1;
  #line 24192 
  int emg_133_ret;
  #line 24193 
  unsigned long emg_133_size_cnt;
  #line 24194 
  int emg_repeat_cnt_main_133_0 = 1;
  #line 24195 
  int emg_repeat_cnt_main_133_1 = 1;
  #line 24196 
  int emg_repeat_cnt_call_133 = 1;
  #line 24198 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 24202 
  emg_133_ret = ldv_undef_int();
  #line 24203 
  emg_133_container = emg_alias_tx_tx_start_int_templates_ops;
  #line 24204 
  emg_133_ret = ldv_undef_int();
  #line 24206 
  __VERIFIER_assume(data->arg0 == emg_alias_tx_tx_start_int_templates_ops);
  #line 24208 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 24209 
    emg_133_container = data->arg0;
    #line 24210 
    ldv_free((void *)data);
  }
  #line 24215 
  emg_133_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 24216 
  emg_133_size_cnt = (unsigned long)ldv_undef_int();
  #line 24220 
  goto emg_main_133;
  #line 24224 
  return (void *)0;
  #line 24227 
  emg_call_133: 
                #line 24227 
  ;
  #line 24228 
  if (ldv_undef_int() != 0) {
    #line 24229 
    switch (ldv_undef_int()) {
      #line 24230 
      case 0: 
              #line 24230 
      ;
      #line 24232 
      emg_133_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 24232 
      emg_133_emg_param_1_2 = emg_133_emg_param_1_2;
      #line 24233 
      emg_133_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 24233 
      emg_133_emg_param_3_3 = emg_133_emg_param_3_3;
      #line 24237 
      emg_wrapper_tx_tx_start_int_templates_read(emg_133_resource_0,emg_133_emg_param_1_2,emg_133_size_cnt,emg_133_emg_param_3_3);
      #line 24241 
      ldv_free((void *)emg_133_emg_param_1_2);
      #line 24242 
      ldv_free((void *)emg_133_emg_param_3_3);
      #line 24244 
      break;
      #line 24246 
      case 1: 
              #line 24246 
      ;
      #line 24248 
      generic_file_llseek(emg_133_resource_0,emg_133_emg_param_1_0,emg_133_emg_param_2_1);
      #line 24250 
      break;
      #line 24252 
      case 2: 
              #line 24252 
      ;
      #line 24259 
      __VERIFIER_assume(emg_133_size_cnt <= 2147479552UL);
      #line 24260 
      emg_133_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 24260 
      emg_133_emg_param_1_4 = emg_133_emg_param_1_4;
      #line 24261 
      emg_133_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 24261 
      emg_133_emg_param_3_5 = emg_133_emg_param_3_5;
      #line 24265 
      if (emg_133_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 24266 
        (*(emg_133_container->write))(emg_133_resource_0,emg_133_emg_param_1_4,emg_133_size_cnt,emg_133_emg_param_3_5);
      #line 24271 
      ldv_free((void *)emg_133_emg_param_1_4);
      #line 24272 
      ldv_free((void *)emg_133_emg_param_3_5);
      #line 24274 
      break;
      #line 24276 
      default: 
               #line 24276 
      ;
      #line 24276 
      __VERIFIER_assume(0);
    }
    #line 24279 
    if (emg_repeat_cnt_call_133 > 0) {
      #line 24280 
      emg_repeat_cnt_call_133 --;
      #line 24282 
      goto emg_call_133;
    }
    else 
         #line 24284 
         __VERIFIER_assume(0);
  }
  else {
    #line 24290 
    if (emg_133_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 24291 
      (*(emg_133_container->release))(emg_133_resource_1,emg_133_resource_0);
    #line 24295 
    if (emg_repeat_cnt_main_133_0 > 0) {
      #line 24296 
      emg_repeat_cnt_main_133_0 --;
      #line 24298 
      goto emg_main_133;
    }
    else 
         #line 24300 
         __VERIFIER_assume(0);
  }
  #line 24306 
  return (void *)0;
  #line 24309 
  emg_main_133: 
                #line 24309 
  ;
  #line 24310 
  if (ldv_undef_int() != 0) {
    #line 24312 
    emg_133_ret = simple_open(emg_133_resource_1,emg_133_resource_0);
    #line 24317 
    emg_133_ret = ldv_filter_err_code(emg_133_ret);
    #line 24320 
    if (ldv_undef_int() != 0) {
      #line 24322 
      __VERIFIER_assume(emg_133_ret == 0);
      #line 24326 
      goto emg_call_133;
    }
    else {
      #line 24331 
      __VERIFIER_assume(emg_133_ret != 0);
      #line 24334 
      if (emg_repeat_cnt_main_133_1 > 0) {
        #line 24335 
        emg_repeat_cnt_main_133_1 --;
        #line 24337 
        goto emg_main_133;
      }
      else 
           #line 24339 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 24346 
       ldv_free((void *)emg_133_resource_0);
  #line 24354 
  return (void *)0;
}

#line 24359  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_tx_tx_start_null_frame_ops(void *arg0)
{
  #line 24362 
  struct file_operations *emg_134_container;
  #line 24363 
  long long emg_134_emg_param_1_0;
  #line 24364 
  char *emg_134_emg_param_1_2;
  #line 24365 
  char *emg_134_emg_param_1_4;
  #line 24366 
  int emg_134_emg_param_2_1;
  #line 24367 
  long long *emg_134_emg_param_3_3;
  #line 24368 
  long long *emg_134_emg_param_3_5;
  #line 24369 
  struct file *emg_134_resource_0;
  #line 24370 
  struct inode *emg_134_resource_1;
  #line 24371 
  int emg_134_ret;
  #line 24372 
  unsigned long emg_134_size_cnt;
  #line 24373 
  int emg_repeat_cnt_main_134_1 = 1;
  #line 24374 
  int emg_repeat_cnt_call_134 = 1;
  #line 24375 
  int emg_repeat_cnt_main_134_0 = 1;
  #line 24377 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 24381 
  emg_134_ret = ldv_undef_int();
  #line 24382 
  emg_134_container = emg_alias_tx_tx_start_null_frame_ops;
  #line 24383 
  emg_134_ret = ldv_undef_int();
  #line 24385 
  __VERIFIER_assume(data->arg0 == emg_alias_tx_tx_start_null_frame_ops);
  #line 24387 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 24388 
    emg_134_container = data->arg0;
    #line 24389 
    ldv_free((void *)data);
  }
  #line 24394 
  emg_134_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 24395 
  emg_134_size_cnt = (unsigned long)ldv_undef_int();
  #line 24399 
  goto emg_main_134;
  #line 24403 
  return (void *)0;
  #line 24406 
  emg_call_134: 
                #line 24406 
  ;
  #line 24407 
  if (ldv_undef_int() != 0) {
    #line 24408 
    switch (ldv_undef_int()) {
      #line 24409 
      case 0: 
              #line 24409 
      ;
      #line 24411 
      emg_134_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 24411 
      emg_134_emg_param_1_2 = emg_134_emg_param_1_2;
      #line 24412 
      emg_134_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 24412 
      emg_134_emg_param_3_3 = emg_134_emg_param_3_3;
      #line 24416 
      emg_wrapper_tx_tx_start_null_frame_read(emg_134_resource_0,emg_134_emg_param_1_2,emg_134_size_cnt,emg_134_emg_param_3_3);
      #line 24420 
      ldv_free((void *)emg_134_emg_param_1_2);
      #line 24421 
      ldv_free((void *)emg_134_emg_param_3_3);
      #line 24423 
      break;
      #line 24425 
      case 1: 
              #line 24425 
      ;
      #line 24427 
      generic_file_llseek(emg_134_resource_0,emg_134_emg_param_1_0,emg_134_emg_param_2_1);
      #line 24429 
      break;
      #line 24431 
      case 2: 
              #line 24431 
      ;
      #line 24438 
      __VERIFIER_assume(emg_134_size_cnt <= 2147479552UL);
      #line 24439 
      emg_134_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 24439 
      emg_134_emg_param_1_4 = emg_134_emg_param_1_4;
      #line 24440 
      emg_134_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 24440 
      emg_134_emg_param_3_5 = emg_134_emg_param_3_5;
      #line 24444 
      if (emg_134_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 24445 
        (*(emg_134_container->write))(emg_134_resource_0,emg_134_emg_param_1_4,emg_134_size_cnt,emg_134_emg_param_3_5);
      #line 24450 
      ldv_free((void *)emg_134_emg_param_1_4);
      #line 24451 
      ldv_free((void *)emg_134_emg_param_3_5);
      #line 24453 
      break;
      #line 24455 
      default: 
               #line 24455 
      ;
      #line 24455 
      __VERIFIER_assume(0);
    }
    #line 24458 
    if (emg_repeat_cnt_call_134 > 0) {
      #line 24459 
      emg_repeat_cnt_call_134 --;
      #line 24461 
      goto emg_call_134;
    }
    else 
         #line 24463 
         __VERIFIER_assume(0);
  }
  else {
    #line 24469 
    if (emg_134_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 24470 
      (*(emg_134_container->release))(emg_134_resource_1,emg_134_resource_0);
    #line 24474 
    if (emg_repeat_cnt_main_134_0 > 0) {
      #line 24475 
      emg_repeat_cnt_main_134_0 --;
      #line 24477 
      goto emg_main_134;
    }
    else 
         #line 24479 
         __VERIFIER_assume(0);
  }
  #line 24485 
  return (void *)0;
  #line 24488 
  emg_main_134: 
                #line 24488 
  ;
  #line 24489 
  if (ldv_undef_int() != 0) {
    #line 24491 
    emg_134_ret = simple_open(emg_134_resource_1,emg_134_resource_0);
    #line 24496 
    emg_134_ret = ldv_filter_err_code(emg_134_ret);
    #line 24499 
    if (ldv_undef_int() != 0) {
      #line 24501 
      __VERIFIER_assume(emg_134_ret == 0);
      #line 24505 
      goto emg_call_134;
    }
    else {
      #line 24510 
      __VERIFIER_assume(emg_134_ret != 0);
      #line 24513 
      if (emg_repeat_cnt_main_134_1 > 0) {
        #line 24514 
        emg_repeat_cnt_main_134_1 --;
        #line 24516 
        goto emg_main_134;
      }
      else 
           #line 24518 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 24525 
       ldv_free((void *)emg_134_resource_0);
  #line 24533 
  return (void *)0;
}

#line 24538  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_tx_tx_start_templates_ops(void *arg0)
{
  #line 24541 
  struct file_operations *emg_135_container;
  #line 24542 
  long long emg_135_emg_param_1_0;
  #line 24543 
  char *emg_135_emg_param_1_2;
  #line 24544 
  char *emg_135_emg_param_1_4;
  #line 24545 
  int emg_135_emg_param_2_1;
  #line 24546 
  long long *emg_135_emg_param_3_3;
  #line 24547 
  long long *emg_135_emg_param_3_5;
  #line 24548 
  struct file *emg_135_resource_0;
  #line 24549 
  struct inode *emg_135_resource_1;
  #line 24550 
  int emg_135_ret;
  #line 24551 
  unsigned long emg_135_size_cnt;
  #line 24552 
  int emg_repeat_cnt_main_135_1 = 1;
  #line 24553 
  int emg_repeat_cnt_main_135_0 = 1;
  #line 24554 
  int emg_repeat_cnt_call_135 = 1;
  #line 24556 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 24560 
  emg_135_ret = ldv_undef_int();
  #line 24561 
  emg_135_container = emg_alias_tx_tx_start_templates_ops;
  #line 24562 
  emg_135_ret = ldv_undef_int();
  #line 24564 
  __VERIFIER_assume(data->arg0 == emg_alias_tx_tx_start_templates_ops);
  #line 24566 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 24567 
    emg_135_container = data->arg0;
    #line 24568 
    ldv_free((void *)data);
  }
  #line 24573 
  emg_135_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 24574 
  emg_135_size_cnt = (unsigned long)ldv_undef_int();
  #line 24578 
  goto emg_main_135;
  #line 24582 
  return (void *)0;
  #line 24585 
  emg_call_135: 
                #line 24585 
  ;
  #line 24586 
  if (ldv_undef_int() != 0) {
    #line 24587 
    switch (ldv_undef_int()) {
      #line 24588 
      case 0: 
              #line 24588 
      ;
      #line 24590 
      emg_135_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 24590 
      emg_135_emg_param_1_2 = emg_135_emg_param_1_2;
      #line 24591 
      emg_135_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 24591 
      emg_135_emg_param_3_3 = emg_135_emg_param_3_3;
      #line 24595 
      emg_wrapper_tx_tx_start_templates_read(emg_135_resource_0,emg_135_emg_param_1_2,emg_135_size_cnt,emg_135_emg_param_3_3);
      #line 24599 
      ldv_free((void *)emg_135_emg_param_1_2);
      #line 24600 
      ldv_free((void *)emg_135_emg_param_3_3);
      #line 24602 
      break;
      #line 24604 
      case 1: 
              #line 24604 
      ;
      #line 24606 
      generic_file_llseek(emg_135_resource_0,emg_135_emg_param_1_0,emg_135_emg_param_2_1);
      #line 24608 
      break;
      #line 24610 
      case 2: 
              #line 24610 
      ;
      #line 24617 
      __VERIFIER_assume(emg_135_size_cnt <= 2147479552UL);
      #line 24618 
      emg_135_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 24618 
      emg_135_emg_param_1_4 = emg_135_emg_param_1_4;
      #line 24619 
      emg_135_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 24619 
      emg_135_emg_param_3_5 = emg_135_emg_param_3_5;
      #line 24623 
      if (emg_135_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 24624 
        (*(emg_135_container->write))(emg_135_resource_0,emg_135_emg_param_1_4,emg_135_size_cnt,emg_135_emg_param_3_5);
      #line 24629 
      ldv_free((void *)emg_135_emg_param_1_4);
      #line 24630 
      ldv_free((void *)emg_135_emg_param_3_5);
      #line 24632 
      break;
      #line 24634 
      default: 
               #line 24634 
      ;
      #line 24634 
      __VERIFIER_assume(0);
    }
    #line 24637 
    if (emg_repeat_cnt_call_135 > 0) {
      #line 24638 
      emg_repeat_cnt_call_135 --;
      #line 24640 
      goto emg_call_135;
    }
    else 
         #line 24642 
         __VERIFIER_assume(0);
  }
  else {
    #line 24648 
    if (emg_135_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 24649 
      (*(emg_135_container->release))(emg_135_resource_1,emg_135_resource_0);
    #line 24653 
    if (emg_repeat_cnt_main_135_1 > 0) {
      #line 24654 
      emg_repeat_cnt_main_135_1 --;
      #line 24656 
      goto emg_main_135;
    }
    else 
         #line 24658 
         __VERIFIER_assume(0);
  }
  #line 24664 
  return (void *)0;
  #line 24667 
  emg_main_135: 
                #line 24667 
  ;
  #line 24668 
  if (ldv_undef_int() != 0) {
    #line 24670 
    emg_135_ret = simple_open(emg_135_resource_1,emg_135_resource_0);
    #line 24675 
    emg_135_ret = ldv_filter_err_code(emg_135_ret);
    #line 24678 
    if (ldv_undef_int() != 0) {
      #line 24680 
      __VERIFIER_assume(emg_135_ret == 0);
      #line 24684 
      goto emg_call_135;
    }
    else {
      #line 24689 
      __VERIFIER_assume(emg_135_ret != 0);
      #line 24692 
      if (emg_repeat_cnt_main_135_0 > 0) {
        #line 24693 
        emg_repeat_cnt_main_135_0 --;
        #line 24695 
        goto emg_main_135;
      }
      else 
           #line 24697 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 24704 
       ldv_free((void *)emg_135_resource_0);
  #line 24712 
  return (void *)0;
}

#line 24717  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_tx_tx_starts_ops(void *arg0)
{
  #line 24720 
  struct file_operations *emg_136_container;
  #line 24721 
  long long emg_136_emg_param_1_0;
  #line 24722 
  char *emg_136_emg_param_1_2;
  #line 24723 
  char *emg_136_emg_param_1_4;
  #line 24724 
  int emg_136_emg_param_2_1;
  #line 24725 
  long long *emg_136_emg_param_3_3;
  #line 24726 
  long long *emg_136_emg_param_3_5;
  #line 24727 
  struct file *emg_136_resource_0;
  #line 24728 
  struct inode *emg_136_resource_1;
  #line 24729 
  int emg_136_ret;
  #line 24730 
  unsigned long emg_136_size_cnt;
  #line 24731 
  int emg_repeat_cnt_main_136_1 = 1;
  #line 24732 
  int emg_repeat_cnt_main_136_0 = 1;
  #line 24733 
  int emg_repeat_cnt_call_136 = 1;
  #line 24735 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 24739 
  emg_136_ret = ldv_undef_int();
  #line 24740 
  emg_136_container = emg_alias_tx_tx_starts_ops;
  #line 24741 
  emg_136_ret = ldv_undef_int();
  #line 24743 
  __VERIFIER_assume(data->arg0 == emg_alias_tx_tx_starts_ops);
  #line 24745 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 24746 
    emg_136_container = data->arg0;
    #line 24747 
    ldv_free((void *)data);
  }
  #line 24752 
  emg_136_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 24753 
  emg_136_size_cnt = (unsigned long)ldv_undef_int();
  #line 24757 
  goto emg_main_136;
  #line 24761 
  return (void *)0;
  #line 24764 
  emg_call_136: 
                #line 24764 
  ;
  #line 24765 
  if (ldv_undef_int() != 0) {
    #line 24766 
    switch (ldv_undef_int()) {
      #line 24767 
      case 0: 
              #line 24767 
      ;
      #line 24769 
      emg_136_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 24769 
      emg_136_emg_param_1_2 = emg_136_emg_param_1_2;
      #line 24770 
      emg_136_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 24770 
      emg_136_emg_param_3_3 = emg_136_emg_param_3_3;
      #line 24774 
      emg_wrapper_tx_tx_starts_read(emg_136_resource_0,emg_136_emg_param_1_2,emg_136_size_cnt,emg_136_emg_param_3_3);
      #line 24778 
      ldv_free((void *)emg_136_emg_param_1_2);
      #line 24779 
      ldv_free((void *)emg_136_emg_param_3_3);
      #line 24781 
      break;
      #line 24783 
      case 1: 
              #line 24783 
      ;
      #line 24785 
      generic_file_llseek(emg_136_resource_0,emg_136_emg_param_1_0,emg_136_emg_param_2_1);
      #line 24787 
      break;
      #line 24789 
      case 2: 
              #line 24789 
      ;
      #line 24796 
      __VERIFIER_assume(emg_136_size_cnt <= 2147479552UL);
      #line 24797 
      emg_136_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 24797 
      emg_136_emg_param_1_4 = emg_136_emg_param_1_4;
      #line 24798 
      emg_136_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 24798 
      emg_136_emg_param_3_5 = emg_136_emg_param_3_5;
      #line 24802 
      if (emg_136_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 24803 
        (*(emg_136_container->write))(emg_136_resource_0,emg_136_emg_param_1_4,emg_136_size_cnt,emg_136_emg_param_3_5);
      #line 24808 
      ldv_free((void *)emg_136_emg_param_1_4);
      #line 24809 
      ldv_free((void *)emg_136_emg_param_3_5);
      #line 24811 
      break;
      #line 24813 
      default: 
               #line 24813 
      ;
      #line 24813 
      __VERIFIER_assume(0);
    }
    #line 24816 
    if (emg_repeat_cnt_call_136 > 0) {
      #line 24817 
      emg_repeat_cnt_call_136 --;
      #line 24819 
      goto emg_call_136;
    }
    else 
         #line 24821 
         __VERIFIER_assume(0);
  }
  else {
    #line 24827 
    if (emg_136_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 24828 
      (*(emg_136_container->release))(emg_136_resource_1,emg_136_resource_0);
    #line 24832 
    if (emg_repeat_cnt_main_136_0 > 0) {
      #line 24833 
      emg_repeat_cnt_main_136_0 --;
      #line 24835 
      goto emg_main_136;
    }
    else 
         #line 24837 
         __VERIFIER_assume(0);
  }
  #line 24843 
  return (void *)0;
  #line 24846 
  emg_main_136: 
                #line 24846 
  ;
  #line 24847 
  if (ldv_undef_int() != 0) {
    #line 24849 
    emg_136_ret = simple_open(emg_136_resource_1,emg_136_resource_0);
    #line 24854 
    emg_136_ret = ldv_filter_err_code(emg_136_ret);
    #line 24857 
    if (ldv_undef_int() != 0) {
      #line 24859 
      __VERIFIER_assume(emg_136_ret == 0);
      #line 24863 
      goto emg_call_136;
    }
    else {
      #line 24868 
      __VERIFIER_assume(emg_136_ret != 0);
      #line 24871 
      if (emg_repeat_cnt_main_136_1 > 0) {
        #line 24872 
        emg_repeat_cnt_main_136_1 --;
        #line 24874 
        goto emg_main_136;
      }
      else 
           #line 24876 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 24883 
       ldv_free((void *)emg_136_resource_0);
  #line 24891 
  return (void *)0;
}

#line 24896  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_tx_tx_stop_ops(void *arg0)
{
  #line 24899 
  struct file_operations *emg_137_container;
  #line 24900 
  long long emg_137_emg_param_1_0;
  #line 24901 
  char *emg_137_emg_param_1_2;
  #line 24902 
  char *emg_137_emg_param_1_4;
  #line 24903 
  int emg_137_emg_param_2_1;
  #line 24904 
  long long *emg_137_emg_param_3_3;
  #line 24905 
  long long *emg_137_emg_param_3_5;
  #line 24906 
  struct file *emg_137_resource_0;
  #line 24907 
  struct inode *emg_137_resource_1;
  #line 24908 
  int emg_137_ret;
  #line 24909 
  unsigned long emg_137_size_cnt;
  #line 24910 
  int emg_repeat_cnt_main_137_1 = 1;
  #line 24911 
  int emg_repeat_cnt_main_137_0 = 1;
  #line 24912 
  int emg_repeat_cnt_call_137 = 1;
  #line 24914 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 24918 
  emg_137_ret = ldv_undef_int();
  #line 24919 
  emg_137_container = emg_alias_tx_tx_stop_ops;
  #line 24920 
  emg_137_ret = ldv_undef_int();
  #line 24922 
  __VERIFIER_assume(data->arg0 == emg_alias_tx_tx_stop_ops);
  #line 24924 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 24925 
    emg_137_container = data->arg0;
    #line 24926 
    ldv_free((void *)data);
  }
  #line 24931 
  emg_137_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 24932 
  emg_137_size_cnt = (unsigned long)ldv_undef_int();
  #line 24936 
  goto emg_main_137;
  #line 24940 
  return (void *)0;
  #line 24943 
  emg_call_137: 
                #line 24943 
  ;
  #line 24944 
  if (ldv_undef_int() != 0) {
    #line 24945 
    switch (ldv_undef_int()) {
      #line 24946 
      case 0: 
              #line 24946 
      ;
      #line 24948 
      emg_137_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 24948 
      emg_137_emg_param_1_2 = emg_137_emg_param_1_2;
      #line 24949 
      emg_137_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 24949 
      emg_137_emg_param_3_3 = emg_137_emg_param_3_3;
      #line 24953 
      emg_wrapper_tx_tx_stop_read(emg_137_resource_0,emg_137_emg_param_1_2,emg_137_size_cnt,emg_137_emg_param_3_3);
      #line 24957 
      ldv_free((void *)emg_137_emg_param_1_2);
      #line 24958 
      ldv_free((void *)emg_137_emg_param_3_3);
      #line 24960 
      break;
      #line 24962 
      case 1: 
              #line 24962 
      ;
      #line 24964 
      generic_file_llseek(emg_137_resource_0,emg_137_emg_param_1_0,emg_137_emg_param_2_1);
      #line 24966 
      break;
      #line 24968 
      case 2: 
              #line 24968 
      ;
      #line 24975 
      __VERIFIER_assume(emg_137_size_cnt <= 2147479552UL);
      #line 24976 
      emg_137_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 24976 
      emg_137_emg_param_1_4 = emg_137_emg_param_1_4;
      #line 24977 
      emg_137_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 24977 
      emg_137_emg_param_3_5 = emg_137_emg_param_3_5;
      #line 24981 
      if (emg_137_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 24982 
        (*(emg_137_container->write))(emg_137_resource_0,emg_137_emg_param_1_4,emg_137_size_cnt,emg_137_emg_param_3_5);
      #line 24987 
      ldv_free((void *)emg_137_emg_param_1_4);
      #line 24988 
      ldv_free((void *)emg_137_emg_param_3_5);
      #line 24990 
      break;
      #line 24992 
      default: 
               #line 24992 
      ;
      #line 24992 
      __VERIFIER_assume(0);
    }
    #line 24995 
    if (emg_repeat_cnt_call_137 > 0) {
      #line 24996 
      emg_repeat_cnt_call_137 --;
      #line 24998 
      goto emg_call_137;
    }
    else 
         #line 25000 
         __VERIFIER_assume(0);
  }
  else {
    #line 25006 
    if (emg_137_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 25007 
      (*(emg_137_container->release))(emg_137_resource_1,emg_137_resource_0);
    #line 25011 
    if (emg_repeat_cnt_main_137_1 > 0) {
      #line 25012 
      emg_repeat_cnt_main_137_1 --;
      #line 25014 
      goto emg_main_137;
    }
    else 
         #line 25016 
         __VERIFIER_assume(0);
  }
  #line 25022 
  return (void *)0;
  #line 25025 
  emg_main_137: 
                #line 25025 
  ;
  #line 25026 
  if (ldv_undef_int() != 0) {
    #line 25028 
    emg_137_ret = simple_open(emg_137_resource_1,emg_137_resource_0);
    #line 25033 
    emg_137_ret = ldv_filter_err_code(emg_137_ret);
    #line 25036 
    if (ldv_undef_int() != 0) {
      #line 25038 
      __VERIFIER_assume(emg_137_ret == 0);
      #line 25042 
      goto emg_call_137;
    }
    else {
      #line 25047 
      __VERIFIER_assume(emg_137_ret != 0);
      #line 25050 
      if (emg_repeat_cnt_main_137_0 > 0) {
        #line 25051 
        emg_repeat_cnt_main_137_0 --;
        #line 25053 
        goto emg_main_137;
      }
      else 
           #line 25055 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 25062 
       ldv_free((void *)emg_137_resource_0);
  #line 25070 
  return (void *)0;
}

#line 25075  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_tx_tx_template_prepared_ops(void *arg0)
{
  #line 25078 
  struct file_operations *emg_138_container;
  #line 25079 
  long long emg_138_emg_param_1_0;
  #line 25080 
  char *emg_138_emg_param_1_2;
  #line 25081 
  char *emg_138_emg_param_1_4;
  #line 25082 
  int emg_138_emg_param_2_1;
  #line 25083 
  long long *emg_138_emg_param_3_3;
  #line 25084 
  long long *emg_138_emg_param_3_5;
  #line 25085 
  struct file *emg_138_resource_0;
  #line 25086 
  struct inode *emg_138_resource_1;
  #line 25087 
  int emg_138_ret;
  #line 25088 
  unsigned long emg_138_size_cnt;
  #line 25089 
  int emg_repeat_cnt_main_138_0 = 1;
  #line 25090 
  int emg_repeat_cnt_main_138_1 = 1;
  #line 25091 
  int emg_repeat_cnt_call_138 = 1;
  #line 25093 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 25097 
  emg_138_ret = ldv_undef_int();
  #line 25098 
  emg_138_container = emg_alias_tx_tx_template_prepared_ops;
  #line 25099 
  emg_138_ret = ldv_undef_int();
  #line 25101 
  __VERIFIER_assume(data->arg0 == emg_alias_tx_tx_template_prepared_ops);
  #line 25103 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 25104 
    emg_138_container = data->arg0;
    #line 25105 
    ldv_free((void *)data);
  }
  #line 25110 
  emg_138_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 25111 
  emg_138_size_cnt = (unsigned long)ldv_undef_int();
  #line 25115 
  goto emg_main_138;
  #line 25119 
  return (void *)0;
  #line 25122 
  emg_call_138: 
                #line 25122 
  ;
  #line 25123 
  if (ldv_undef_int() != 0) {
    #line 25124 
    switch (ldv_undef_int()) {
      #line 25125 
      case 0: 
              #line 25125 
      ;
      #line 25127 
      emg_138_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 25127 
      emg_138_emg_param_1_2 = emg_138_emg_param_1_2;
      #line 25128 
      emg_138_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 25128 
      emg_138_emg_param_3_3 = emg_138_emg_param_3_3;
      #line 25132 
      emg_wrapper_tx_tx_template_prepared_read(emg_138_resource_0,emg_138_emg_param_1_2,emg_138_size_cnt,emg_138_emg_param_3_3);
      #line 25136 
      ldv_free((void *)emg_138_emg_param_1_2);
      #line 25137 
      ldv_free((void *)emg_138_emg_param_3_3);
      #line 25139 
      break;
      #line 25141 
      case 1: 
              #line 25141 
      ;
      #line 25143 
      generic_file_llseek(emg_138_resource_0,emg_138_emg_param_1_0,emg_138_emg_param_2_1);
      #line 25145 
      break;
      #line 25147 
      case 2: 
              #line 25147 
      ;
      #line 25154 
      __VERIFIER_assume(emg_138_size_cnt <= 2147479552UL);
      #line 25155 
      emg_138_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 25155 
      emg_138_emg_param_1_4 = emg_138_emg_param_1_4;
      #line 25156 
      emg_138_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 25156 
      emg_138_emg_param_3_5 = emg_138_emg_param_3_5;
      #line 25160 
      if (emg_138_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 25161 
        (*(emg_138_container->write))(emg_138_resource_0,emg_138_emg_param_1_4,emg_138_size_cnt,emg_138_emg_param_3_5);
      #line 25166 
      ldv_free((void *)emg_138_emg_param_1_4);
      #line 25167 
      ldv_free((void *)emg_138_emg_param_3_5);
      #line 25169 
      break;
      #line 25171 
      default: 
               #line 25171 
      ;
      #line 25171 
      __VERIFIER_assume(0);
    }
    #line 25174 
    if (emg_repeat_cnt_call_138 > 0) {
      #line 25175 
      emg_repeat_cnt_call_138 --;
      #line 25177 
      goto emg_call_138;
    }
    else 
         #line 25179 
         __VERIFIER_assume(0);
  }
  else {
    #line 25185 
    if (emg_138_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 25186 
      (*(emg_138_container->release))(emg_138_resource_1,emg_138_resource_0);
    #line 25190 
    if (emg_repeat_cnt_main_138_1 > 0) {
      #line 25191 
      emg_repeat_cnt_main_138_1 --;
      #line 25193 
      goto emg_main_138;
    }
    else 
         #line 25195 
         __VERIFIER_assume(0);
  }
  #line 25201 
  return (void *)0;
  #line 25204 
  emg_main_138: 
                #line 25204 
  ;
  #line 25205 
  if (ldv_undef_int() != 0) {
    #line 25207 
    emg_138_ret = simple_open(emg_138_resource_1,emg_138_resource_0);
    #line 25212 
    emg_138_ret = ldv_filter_err_code(emg_138_ret);
    #line 25215 
    if (ldv_undef_int() != 0) {
      #line 25217 
      __VERIFIER_assume(emg_138_ret == 0);
      #line 25221 
      goto emg_call_138;
    }
    else {
      #line 25226 
      __VERIFIER_assume(emg_138_ret != 0);
      #line 25229 
      if (emg_repeat_cnt_main_138_0 > 0) {
        #line 25230 
        emg_repeat_cnt_main_138_0 --;
        #line 25232 
        goto emg_main_138;
      }
      else 
           #line 25234 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 25241 
       ldv_free((void *)emg_138_resource_0);
  #line 25249 
  return (void *)0;
}

#line 25254  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_tx_tx_template_programmed_ops(void *arg0)
{
  #line 25257 
  struct file_operations *emg_139_container;
  #line 25258 
  long long emg_139_emg_param_1_0;
  #line 25259 
  char *emg_139_emg_param_1_2;
  #line 25260 
  char *emg_139_emg_param_1_4;
  #line 25261 
  int emg_139_emg_param_2_1;
  #line 25262 
  long long *emg_139_emg_param_3_3;
  #line 25263 
  long long *emg_139_emg_param_3_5;
  #line 25264 
  struct file *emg_139_resource_0;
  #line 25265 
  struct inode *emg_139_resource_1;
  #line 25266 
  int emg_139_ret;
  #line 25267 
  unsigned long emg_139_size_cnt;
  #line 25268 
  int emg_repeat_cnt_main_139_1 = 1;
  #line 25269 
  int emg_repeat_cnt_call_139 = 1;
  #line 25270 
  int emg_repeat_cnt_main_139_0 = 1;
  #line 25272 
  struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *data = (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)arg0;
  #line 25276 
  emg_139_ret = ldv_undef_int();
  #line 25277 
  emg_139_container = emg_alias_tx_tx_template_programmed_ops;
  #line 25278 
  emg_139_ret = ldv_undef_int();
  #line 25280 
  __VERIFIER_assume(data->arg0 == emg_alias_tx_tx_template_programmed_ops);
  #line 25282 
  if (data != (struct emg_struct_character_driver_scenario_aggr_size_rx_size_ops_7 *)0) {
    #line 25283 
    emg_139_container = data->arg0;
    #line 25284 
    ldv_free((void *)data);
  }
  #line 25289 
  emg_139_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 25290 
  emg_139_size_cnt = (unsigned long)ldv_undef_int();
  #line 25294 
  goto emg_main_139;
  #line 25298 
  return (void *)0;
  #line 25301 
  emg_call_139: 
                #line 25301 
  ;
  #line 25302 
  if (ldv_undef_int() != 0) {
    #line 25303 
    switch (ldv_undef_int()) {
      #line 25304 
      case 0: 
              #line 25304 
      ;
      #line 25306 
      emg_139_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 25306 
      emg_139_emg_param_1_2 = emg_139_emg_param_1_2;
      #line 25307 
      emg_139_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 25307 
      emg_139_emg_param_3_3 = emg_139_emg_param_3_3;
      #line 25311 
      emg_wrapper_tx_tx_template_programmed_read(emg_139_resource_0,emg_139_emg_param_1_2,emg_139_size_cnt,emg_139_emg_param_3_3);
      #line 25315 
      ldv_free((void *)emg_139_emg_param_1_2);
      #line 25316 
      ldv_free((void *)emg_139_emg_param_3_3);
      #line 25318 
      break;
      #line 25320 
      case 1: 
              #line 25320 
      ;
      #line 25322 
      generic_file_llseek(emg_139_resource_0,emg_139_emg_param_1_0,emg_139_emg_param_2_1);
      #line 25324 
      break;
      #line 25326 
      case 2: 
              #line 25326 
      ;
      #line 25333 
      __VERIFIER_assume(emg_139_size_cnt <= 2147479552UL);
      #line 25334 
      emg_139_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 25334 
      emg_139_emg_param_1_4 = emg_139_emg_param_1_4;
      #line 25335 
      emg_139_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 25335 
      emg_139_emg_param_3_5 = emg_139_emg_param_3_5;
      #line 25339 
      if (emg_139_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 25340 
        (*(emg_139_container->write))(emg_139_resource_0,emg_139_emg_param_1_4,emg_139_size_cnt,emg_139_emg_param_3_5);
      #line 25345 
      ldv_free((void *)emg_139_emg_param_1_4);
      #line 25346 
      ldv_free((void *)emg_139_emg_param_3_5);
      #line 25348 
      break;
      #line 25350 
      default: 
               #line 25350 
      ;
      #line 25350 
      __VERIFIER_assume(0);
    }
    #line 25353 
    if (emg_repeat_cnt_call_139 > 0) {
      #line 25354 
      emg_repeat_cnt_call_139 --;
      #line 25356 
      goto emg_call_139;
    }
    else 
         #line 25358 
         __VERIFIER_assume(0);
  }
  else {
    #line 25364 
    if (emg_139_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 25365 
      (*(emg_139_container->release))(emg_139_resource_1,emg_139_resource_0);
    #line 25369 
    if (emg_repeat_cnt_main_139_0 > 0) {
      #line 25370 
      emg_repeat_cnt_main_139_0 --;
      #line 25372 
      goto emg_main_139;
    }
    else 
         #line 25374 
         __VERIFIER_assume(0);
  }
  #line 25380 
  return (void *)0;
  #line 25383 
  emg_main_139: 
                #line 25383 
  ;
  #line 25384 
  if (ldv_undef_int() != 0) {
    #line 25386 
    emg_139_ret = simple_open(emg_139_resource_1,emg_139_resource_0);
    #line 25391 
    emg_139_ret = ldv_filter_err_code(emg_139_ret);
    #line 25394 
    if (ldv_undef_int() != 0) {
      #line 25396 
      __VERIFIER_assume(emg_139_ret == 0);
      #line 25400 
      goto emg_call_139;
    }
    else {
      #line 25405 
      __VERIFIER_assume(emg_139_ret != 0);
      #line 25408 
      if (emg_repeat_cnt_main_139_1 > 0) {
        #line 25409 
        emg_repeat_cnt_main_139_1 --;
        #line 25411 
        goto emg_main_139;
      }
      else 
           #line 25413 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 25420 
       ldv_free((void *)emg_139_resource_0);
  #line 25428 
  return (void *)0;
}

#line 25433  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_platform_platform_instance_wl18xx_driver(void *arg0)
{
  #line 25436 
  struct platform_driver *emg_140_container;
  #line 25437 
  struct pm_message *emg_140_emg_param_1_0;
  #line 25438 
  int emg_140_probed;
  #line 25439 
  struct platform_device *emg_140_resource;
  #line 25440 
  int emg_repeat_cnt_main_140_0 = 1;
  #line 25441 
  int emg_repeat_cnt_main_140_1 = 1;
  #line 25442 
  int emg_repeat_cnt_call_140 = 1;
  #line 25444 
  struct emg_struct_platform_instance_wl18xx_driver_140 *data = (struct emg_struct_platform_instance_wl18xx_driver_140 *)arg0;
  #line 25448 
  emg_140_probed = 1;
  #line 25449 
  emg_140_container = emg_alias_wl18xx_driver;
  #line 25450 
  emg_140_probed = 1;
  #line 25452 
  __VERIFIER_assume(data->arg0 == emg_alias_wl18xx_driver);
  #line 25454 
  if (data != (struct emg_struct_platform_instance_wl18xx_driver_140 *)0) {
    #line 25455 
    emg_140_container = data->arg0;
    #line 25456 
    ldv_free((void *)data);
  }
  #line 25461 
  emg_140_resource = (struct platform_device *)ldv_xmalloc(1632UL);
  #line 25462 
  emg_140_resource->id_entry = emg_140_container->id_table;
  #line 25463 
  emg_140_resource->dev.platform_data = ldv_xmalloc_unknown_size(0UL);
  #line 25467 
  goto emg_main_140;
  #line 25471 
  return (void *)0;
  #line 25474 
  emg_call_140: 
                #line 25474 
  ;
  #line 25475 
  if (ldv_undef_int() != 0) {
    #line 25476 
    switch (ldv_undef_int()) {
      #line 25477 
      case 0: 
              #line 25477 
      ;
      #line 25479 
      emg_140_emg_param_1_0 = (struct pm_message *)ldv_xmalloc_unknown_size(0UL);
      #line 25479 
      emg_140_emg_param_1_0 = emg_140_emg_param_1_0;
      #line 25483 
      if (emg_140_container->suspend != (int (*)(struct platform_device *, pm_message_t ))0) 
        #line 25484 
        (*(emg_140_container->suspend))(emg_140_resource,*emg_140_emg_param_1_0);
      #line 25489 
      ldv_free((void *)emg_140_emg_param_1_0);
      #line 25493 
      if (emg_140_container->resume != (int (*)(struct platform_device *))0) 
        #line 25494 
        (*(emg_140_container->resume))(emg_140_resource);
      #line 25497 
      break;
      #line 25499 
      case 1: 
              #line 25499 
      ;
      #line 25507 
      break;
      #line 25509 
      case 2: 
              #line 25509 
      ;
      #line 25512 
      break;
      #line 25514 
      default: 
               #line 25514 
      ;
      #line 25514 
      __VERIFIER_assume(0);
    }
    #line 25517 
    if (emg_repeat_cnt_call_140 > 0) {
      #line 25518 
      emg_repeat_cnt_call_140 --;
      #line 25520 
      goto emg_call_140;
    }
    else 
         #line 25522 
         __VERIFIER_assume(0);
  }
  else {
    #line 25528 
    if (emg_140_container->shutdown != (void (*)(struct platform_device *))0) 
      #line 25529 
      (*(emg_140_container->shutdown))(emg_140_resource);
    #line 25534 
    (*emg_alias_wlcore_remove)(emg_140_resource);
    #line 25538 
    emg_140_probed = 1;
    #line 25541 
    if (emg_repeat_cnt_main_140_1 > 0) {
      #line 25542 
      emg_repeat_cnt_main_140_1 --;
      #line 25544 
      goto emg_main_140;
    }
    else 
         #line 25546 
         __VERIFIER_assume(0);
  }
  #line 25552 
  return (void *)0;
  #line 25555 
  emg_main_140: 
                #line 25555 
  ;
  #line 25556 
  if (ldv_undef_int() != 0) {
    #line 25559 
    ldv_pre_probe();
    #line 25563 
    emg_140_probed = emg_wrapper_wl18xx_probe(emg_140_resource);
    #line 25568 
    emg_140_probed = ldv_post_probe(emg_140_probed);
    #line 25571 
    if (ldv_undef_int() != 0) {
      #line 25573 
      __VERIFIER_assume(emg_140_probed == 0);
      #line 25577 
      goto emg_call_140;
    }
    else {
      #line 25582 
      __VERIFIER_assume(emg_140_probed != 0);
      #line 25585 
      if (emg_repeat_cnt_main_140_0 > 0) {
        #line 25586 
        emg_repeat_cnt_main_140_0 --;
        #line 25588 
        goto emg_main_140;
      }
      else 
           #line 25590 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 25597 
       ldv_free((void *)emg_140_resource);
  #line 25605 
  return (void *)0;
}

#line 25610  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
int emg___platform_driver_register(struct platform_driver *arg0, struct module *arg1)
{
  #line 25613 
  struct platform_driver *emg_2_platform_driver;
  #line 25615 
  emg_2_platform_driver = emg_alias_wl18xx_driver;
  #line 25616 
  if (ldv_undef_int() != 0) {
    #line 25618 
    emg_2_platform_driver = arg0;
    #line 25622 
    emg_dispatch_register_2(emg_2_platform_driver);
    #line 25626 
    return 0;
  }
  else {
    #line 25630 
    return ldv_undef_int_negative();
  }
}

#line 25638  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
struct dentry *emg_debugfs_create_dir(char *arg0, struct dentry *arg1)
{
  #line 25641 
  struct dentry *emg_3_dentry;
  #line 25642 
  struct inode *emg_3_inode;
  #line 25644 
  if (ldv_undef_int() != 0) {
    #line 25646 
    emg_3_dentry = (struct dentry *)ldv_xmalloc(320UL);
    #line 25647 
    emg_3_inode = (struct inode *)ldv_xmalloc(1072UL);
    #line 25648 
    emg_3_inode->i_mode = (unsigned short)16877U;
    #line 25649 
    emg_3_dentry->d_parent = arg1;
    #line 25650 
    emg_3_dentry->d_inode = emg_3_inode;
    #line 25651 
    return emg_3_dentry;
  }
  else {
    #line 25655 
    return (struct dentry *)ERR_PTR(-19L);
  }
}

#line 25663  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
struct dentry *emg_debugfs_create_file(char *arg0, unsigned short arg1, struct dentry *arg2, void *arg3, struct file_operations *arg4)
{
  #line 25666 
  struct dentry *emg_4_dentry;
  #line 25667 
  struct file_operations *emg_4_file_operations;
  #line 25668 
  struct inode *emg_4_inode;
  #line 25670 
  if (ldv_undef_int() != 0) {
    #line 25672 
    emg_4_dentry = (struct dentry *)ldv_xmalloc(320UL);
    #line 25673 
    emg_4_inode = (struct inode *)ldv_xmalloc(1072UL);
    #line 25674 
    emg_4_inode->i_mode = arg1;
    #line 25675 
    emg_4_dentry->d_parent = arg2;
    #line 25676 
    emg_4_inode->i_private = arg3;
    #line 25677 
    emg_4_file_operations = arg4;
    #line 25678 
    emg_4_dentry->d_inode = emg_4_inode;
    #line 25679 
    ldv_save_allocated_memory_to_list((void *)emg_4_dentry);
    #line 25683 
    emg_dispatch_register_4(emg_4_file_operations);
    #line 25687 
    return emg_4_dentry;
  }
  else {
    #line 25691 
    return (struct dentry *)ERR_PTR(-19L);
  }
}

#line 25699  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void emg_platform_driver_unregister(struct platform_driver *arg0)
{
  #line 25702 
  struct platform_driver *emg_5_platform_driver;
  #line 25704 
  emg_5_platform_driver = emg_alias_wl18xx_driver;
  #line 25706 
  emg_5_platform_driver = arg0;
  #line 25710 
  emg_dispatch_deregister_5(emg_5_platform_driver);
  #line 25713 
  return;
}

#line 25718  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
_Bool emg_queue_work(struct workqueue_struct *arg0, struct work_struct *arg1)
{
  #line 25721 
  struct work_struct *emg_6_work_struct;
  #line 25723 
  if (ldv_undef_int() != 0) {
    #line 25725 
    emg_6_work_struct = arg1;
    #line 25729 
    if (emg_6_work_struct->func != (void (*)(struct work_struct *))0) 
      #line 25730 
      (*(emg_6_work_struct->func))(emg_6_work_struct);
    #line 25735 
    return (_Bool)1;
  }
  else 
       #line 25739 
       return (_Bool)0;
}

#line 25747  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
void *emg_entry_point_insmod(void *arg0)
{
  #line 25750 
  int emg_1_ret;
  #line 25753 
  emg_1_ret = emg_wl18xx_driver_init();
  #line 25754 
  emg_1_ret = ldv_post_init(emg_1_ret);
  #line 25757 
  if (ldv_undef_int() != 0) {
    #line 25759 
    __VERIFIER_assume(emg_1_ret == 0);
    #line 25763 
    emg_wl18xx_driver_exit();
  }
  else 
       #line 25767 
       __VERIFIER_assume(emg_1_ret != 0);
  #line 25771 
  return (void *)0;
}

#line 25776  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ti/wl18xx/wl18xx.ko/concurrency safety/emg/0/environment_model.c"
int main(void)
{
  #line 25778 
  ldv_initialize();
  #line 25780 
  emg_entry_point_insmod((void *)0);
  #line 25782 
  return 0;
}

