/* Generated by Frama-C */
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler_types.h"
typedef signed char __s8;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef short __s16;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef int __s32;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef long long __s64;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef __s8 s8;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u8 u8;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s16 s16;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u16 u16;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s32 s32;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u32 u32;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s64 s64;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u64 u64;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/uapi/asm/posix_types_64.h"
typedef long __kernel_long_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned long __kernel_ulong_t;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_pid_t;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_uid32_t;
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_gid32_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_ulong_t __kernel_size_t;
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_ssize_t;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_loff_t;
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_time64_t;
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_clock_t;
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_timer_t;
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_clockid_t;
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __u16 __le16;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u16 __be16;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __le32;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __be32;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u64 __be64;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __wsum;
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef unsigned int __poll_t;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef u32 __kernel_dev_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned short umode_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef _Bool bool;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_size_t size_t;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef s16 int16_t;
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef s32 int32_t;
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u32 uint32_t;
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 sector_t;
#line 131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 blkcnt_t;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 dma_addr_t;
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int gfp_t;
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int slab_flags_t;
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int fmode_t;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 phys_addr_t;
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef phys_addr_t resource_size_t;
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int counter ;
};
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   s64 counter ;
};
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 185 
struct hlist_node;
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct callback_head {
   struct callback_head *next ;
   void (*func)(struct callback_head *) ;
} __attribute__((__aligned__(8)));
#line 14  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/realtek/rtlwifi/btcoexist/btcoexist.ko/concurrency safety/0/concurrency safety/weaver/rtl_btc.i.aux"
struct task_struct;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
struct module;
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
struct kernel_symbol {
   int value_offset ;
   int name_offset ;
   int namespace_offset ;
};
#line 136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/init.h"
typedef void (*ctor_fn_t)(void);
#line 139 
struct file_system_type;
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct ctl_table;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry;
#line 87 
struct static_key_mod;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
union __anonunion_8 {
   unsigned long type ;
   struct jump_entry *entries ;
   struct static_key_mod *next ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key {
   atomic_t enabled ;
   union __anonunion_8 __anonCompField_static_key_4 ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry {
   s32 code ;
   s32 target ;
   long key ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
struct device;
#line 65 
struct net_device;
#line 476  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct file_operations;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/div64.h"
struct completion;
#line 88 
struct pt_regs;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bug.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/math64.h"
typedef __s64 time64_t;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/time_types.h"
struct __kernel_timespec {
   __kernel_time64_t tv_sec ;
   long long tv_nsec ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time64.h"
struct timespec64 {
   time64_t tv_sec ;
   long tv_nsec ;
};
#line 165 
struct old_timespec32;
#line 166 
struct pollfd;
#line 167 
enum timespec_type {
    TT_NONE = 0,
    TT_NATIVE = 1,
    TT_COMPAT = 2
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_futex_27 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_29 {
   struct __kernel_timespec *rmtp ;
   struct old_timespec32 *compat_rmtp ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_nanosleep_28 {
   clockid_t clockid ;
   enum timespec_type type ;
   union __anonunion_29 __anonCompField___anonstruct_nanosleep_28_5 ;
   u64 expires ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_poll_30 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_26 {
   struct __anonstruct_futex_27 futex ;
   struct __anonstruct_nanosleep_28 nanosleep ;
   struct __anonstruct_poll_30 poll ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct restart_block {
   long (*fn)(struct restart_block *) ;
   union __anonunion_26 __anonCompField_restart_block_6 ;
};
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
struct page;
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/getorder.h"
struct mm_struct;
#line 49 
struct io_bitmap;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/ptrace.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
struct desc_struct {
   u16 limit0 ;
   u16 base0 ;
   u16 base1 : 8 ;
   u16 type : 4 ;
   u16 s : 1 ;
   u16 dpl : 2 ;
   u16 p : 1 ;
   u16 limit1 : 4 ;
   u16 avl : 1 ;
   u16 l : 1 ;
   u16 d : 1 ;
   u16 g : 1 ;
   u16 base2 : 8 ;
} __attribute__((__packed__));
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
typedef unsigned long pteval_t;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pmdval_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pudval_t;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
struct __anonstruct_pte_t_53 {
   pteval_t pte ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef struct __anonstruct_pte_t_53 pte_t;
#line 265  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 267  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_54 {
   pgdval_t pgd ;
};
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_54 pgd_t;
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pud_t_56 {
   pudval_t pud ;
};
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pud_t_56 pud_t;
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pmd_t_57 {
   pmdval_t pmd ;
};
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pmd_t_57 pmd_t;
#line 505  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct page *pgtable_t;
#line 519 
struct file;
#line 530 
struct seq_file;
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/nospec-branch.h"
struct thread_struct;
#line 362 
struct cpumask;
#line 365 
struct vm_area_struct;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_59 {
   u8 locked ;
   u8 pending ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_60 {
   u16 locked_pending ;
   u16 tail ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
union __anonunion_58 {
   atomic_t val ;
   struct __anonstruct_59 __anonCompField___anonunion_58_7 ;
   struct __anonstruct_60 __anonCompField___anonunion_58_8 ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct qspinlock {
   union __anonunion_58 __anonCompField_qspinlock_9 ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
typedef struct qspinlock arch_spinlock_t;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct __anonstruct_62 {
   u8 wlocked ;
   u8 __lstate[3U] ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
union __anonunion_61 {
   atomic_t cnts ;
   struct __anonstruct_62 __anonCompField___anonunion_61_10 ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct qrwlock {
   union __anonunion_61 __anonCompField_qrwlock_11 ;
   arch_spinlock_t wait_lock ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
typedef struct qrwlock arch_rwlock_t;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/math_emu.h"
struct math_emu_info {
   long ___orig_eip ;
   struct pt_regs *regs ;
};
#line 2288  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/atomic-fallback.h"
typedef atomic64_t atomic_long_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
struct cpumask {
   unsigned long bits[128U] ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint_func {
   void *func ;
   void *data ;
   int prio ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint {
   char *name ;
   struct static_key key ;
   int (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   struct tracepoint_func *funcs ;
};
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
typedef int tracepoint_ptr_t;
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct bpf_raw_event_map {
   struct tracepoint *tp ;
   void *bpf_func ;
   u32 num_args ;
   u32 writable_size ;
} __attribute__((__aligned__(32)));
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_90 {
   u64 rip ;
   u64 rdp ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_91 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_89 {
   struct __anonstruct_90 __anonCompField___anonunion_89_17 ;
   struct __anonstruct_91 __anonCompField___anonunion_89_18 ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_92 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fxregs_state {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_89 __anonCompField_fxregs_state_19 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_92 __anonCompField_fxregs_state_20 ;
} __attribute__((__aligned__(16)));
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct swregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xstate_header {
   u64 xfeatures ;
   u64 xcomp_bv ;
   u64 reserved[6U] ;
} __attribute__((__packed__));
#line 253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xregs_state {
   struct fxregs_state i387 ;
   struct xstate_header header ;
   u8 extended_state_area[0U] ;
} __attribute__((__packed__, __aligned__(64)));
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union fpregs_state {
   struct fregs_state fsave ;
   struct fxregs_state fxsave ;
   struct swregs_state soft ;
   struct xregs_state xsave ;
   u8 __padding[4096U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fpu {
   unsigned int last_cpu ;
   unsigned long avx512_timestamp ;
   union fpregs_state state ;
};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/orc_types.h"
struct orc_entry {
   s16 sp_offset ;
   s16 bp_offset ;
   unsigned int sp_reg : 4 ;
   unsigned int bp_reg : 4 ;
   unsigned int type : 2 ;
   unsigned int end : 1 ;
} __attribute__((__packed__));
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct seq_operations;
#line 478 
struct perf_event;
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct __anonstruct_mm_segment_t_95 {
   unsigned long seg ;
};
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_95 mm_segment_t;
#line 485  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fsbase ;
   unsigned long gsbase ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_nr ;
   unsigned long error_code ;
   struct io_bitmap *io_bitmap ;
   unsigned long iopl_emul ;
   mm_segment_t addr_limit ;
   unsigned int sig_on_uaccess_err : 1 ;
   unsigned int uaccess_err : 1 ;
   struct fpu fpu ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/thread_info.h"
struct thread_info {
   unsigned long flags ;
   u32 status ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
struct lockdep_map;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_subclass_key {
   char __one_byte ;
} __attribute__((__packed__));
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
union __anonunion_96 {
   struct hlist_node hash_entry ;
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class_key {
   union __anonunion_96 __anonCompField_lock_class_key_23 ;
};
#line 68 
struct lock_trace;
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class {
   struct hlist_node hash_entry ;
   struct list_head lock_entry ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct lock_trace *usage_traces[9U] ;
   int name_version ;
   char *name ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char *name ;
   int cpu ;
   unsigned long ip ;
};
#line 226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned int class_idx : 13 ;
   unsigned int irq_context : 2 ;
   unsigned int trylock : 1 ;
   unsigned int read : 2 ;
   unsigned int check : 1 ;
   unsigned int hardirqs_off : 1 ;
   unsigned int references : 12 ;
   unsigned int pin_count ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_98 {
   u8 __padding[24U] ;
   struct lockdep_map dep_map ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
union __anonunion_97 {
   struct raw_spinlock rlock ;
   struct __anonstruct_98 __anonCompField___anonunion_97_24 ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_97 __anonCompField_spinlock_25 ;
};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_rwlock_t_99 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct __anonstruct_rwlock_t_99 rwlock_t;
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
struct mutex;
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
struct kmem_cache;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
struct wait_queue_head {
   spinlock_t lock ;
   struct list_head head ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
typedef struct wait_queue_head wait_queue_head_t;
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
struct refcount_struct {
   atomic_t refs ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
typedef struct refcount_struct refcount_t;
#line 305 
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_TGID = 1,
    PIDTYPE_PGID = 2,
    PIDTYPE_SID = 3,
    PIDTYPE_MAX = 4
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct pid_namespace;
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct pid {
   refcount_t count ;
   unsigned int level ;
   struct hlist_head tasks[4U] ;
   wait_queue_head_t wait_pidfd ;
   struct callback_head rcu ;
   struct upid numbers[1U] ;
};
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/highuid.h"
struct user_namespace;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kuid_t_142 {
   uid_t val ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kuid_t_142 kuid_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kgid_t_143 {
   gid_t val ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kgid_t_143 kgid_t;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/osq_lock.h"
struct optimistic_spin_queue {
   atomic_t tail ;
};
#line 40 
struct ww_acquire_ctx;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex {
   atomic_long_t owner ;
   spinlock_t wait_lock ;
   struct optimistic_spin_queue osq ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   struct ww_acquire_ctx *ww_ctx ;
   void *magic ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct seqcount {
   unsigned int sequence ;
   struct lockdep_map dep_map ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct seqcount seqcount_t;
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct __anonstruct_seqlock_t_152 {
   struct seqcount seqcount ;
   spinlock_t lock ;
};
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct __anonstruct_seqlock_t_152 seqlock_t;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timex.h"
typedef s32 old_time32_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time32.h"
struct old_timespec32 {
   old_time32_t tv_sec ;
   s32 tv_nsec ;
};
#line 461  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
typedef s64 ktime_t;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
struct timer_list {
   struct hlist_node entry ;
   unsigned long expires ;
   void (*function)(struct timer_list *) ;
   u32 flags ;
   struct lockdep_map lockdep_map ;
};
#line 196 
struct hrtimer;
#line 197 
enum hrtimer_restart;
#line 221 
struct workqueue_struct;
#line 222 
struct work_struct;
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct *) ;
   struct lockdep_map lockdep_map ;
};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
   struct workqueue_struct *wq ;
   int cpu ;
};
#line 124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct rcu_work {
   struct work_struct work ;
   struct callback_head rcu ;
   struct workqueue_struct *wq ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhash_head {
   struct rhash_head *next ;
};
#line 25 
struct bucket_table;
#line 33 
struct rhashtable;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_compare_arg {
   struct rhashtable *ht ;
   void *key ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_params {
   u16 nelem_hint ;
   u16 key_len ;
   u16 key_offset ;
   u16 head_offset ;
   unsigned int max_size ;
   u16 min_size ;
   bool automatic_shrinking ;
   u32 (*hashfn)(void *, u32 , u32 ) ;
   u32 (*obj_hashfn)(void *, u32 , u32 ) ;
   int (*obj_cmpfn)(struct rhashtable_compare_arg *, void *) ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable {
   struct bucket_table *tbl ;
   unsigned int key_len ;
   unsigned int max_elems ;
   struct rhashtable_params p ;
   bool rhlist ;
   struct work_struct run_work ;
   struct mutex mutex ;
   spinlock_t lock ;
   atomic_t nelems ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sem.h"
struct sem_undo_list;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shm.h"
struct sysv_shm {
   struct list_head shm_clist ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/plist.h"
struct plist_node {
   int prio ;
   struct list_head prio_list ;
   struct list_head node_list ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_node {
   unsigned long __rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
} __attribute__((__aligned__(8)));
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root_cached {
   struct rb_root rb_root ;
   struct rb_node *rb_leftmost ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node {
   struct llist_node *next ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/smp.h"
struct __call_single_data {
   struct llist_node llist ;
   void (*func)(void *) ;
   void *info ;
   unsigned int flags ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mpspec.h"
struct __anonstruct_nodemask_t_205 {
   unsigned long bits[16U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mpspec.h"
typedef struct __anonstruct_nodemask_t_205 nodemask_t;
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rwsem.h"
struct rw_semaphore {
   atomic_long_t count ;
   atomic_long_t owner ;
   struct optimistic_spin_queue osq ;
   raw_spinlock_t wait_lock ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 194 
struct ldt_struct;
#line 194 
struct vdso_image;
#line 194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rwsem.h"
struct __anonstruct_mm_context_t_206 {
   u64 ctx_id ;
   atomic64_t tlb_gen ;
   struct rw_semaphore ldt_usr_sem ;
   struct ldt_struct *ldt ;
   unsigned short ia32_compat ;
   struct mutex lock ;
   void *vdso ;
   struct vdso_image *vdso_image ;
   atomic_t perf_rdpmc_allowed ;
   u16 pkey_allocation_map ;
   s16 execute_only_pkey ;
   void *bd_addr ;
};
#line 194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rwsem.h"
typedef struct __anonstruct_mm_context_t_206 mm_context_t;
#line 440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/io.h"
struct fwnode_operations;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_handle {
   struct fwnode_handle *secondary ;
   struct fwnode_operations *ops ;
   struct device *dev ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_endpoint {
   unsigned int port ;
   unsigned int id ;
   struct fwnode_handle *local_fwnode ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_reference_args {
   struct fwnode_handle *fwnode ;
   unsigned int nargs ;
   u64 args[8U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_operations {
   struct fwnode_handle *(*get)(struct fwnode_handle *) ;
   void (*put)(struct fwnode_handle *) ;
   bool (*device_is_available)(struct fwnode_handle *) ;
   void *(*device_get_match_data)(struct fwnode_handle *, struct device *) ;
   bool (*property_present)(struct fwnode_handle *, char *) ;
   int (*property_read_int_array)(struct fwnode_handle *, char *, unsigned int , void *, size_t ) ;
   int (*property_read_string_array)(struct fwnode_handle *, char *, char **, size_t ) ;
   char *(*get_name)(struct fwnode_handle *) ;
   char *(*get_name_prefix)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_parent)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_next_child_node)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*get_named_child_node)(struct fwnode_handle *, char *) ;
   int (*get_reference_args)(struct fwnode_handle *, char *, char *, unsigned int , unsigned int , struct fwnode_reference_args *) ;
   struct fwnode_handle *(*graph_get_next_endpoint)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_remote_endpoint)(struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_port_parent)(struct fwnode_handle *) ;
   int (*graph_parse_endpoint)(struct fwnode_handle *, struct fwnode_endpoint *) ;
   int (*add_links)(struct fwnode_handle *, struct device *) ;
};
#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/overflow.h"
struct notifier_block;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
struct vm_struct {
   struct vm_struct *next ;
   void *addr ;
   unsigned long size ;
   unsigned long flags ;
   struct page **pages ;
   unsigned int nr_pages ;
   phys_addr_t phys_addr ;
   void *caller ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/tlbbatch.h"
struct arch_tlbflush_unmap_batch {
   struct cpumask cpumask ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct vmacache {
   u64 seqnum ;
   struct vm_area_struct *vmas[4U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct task_rss_stat {
   int events ;
   int count[4U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct mm_rss_stat {
   atomic_long_t count[4U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct page_frag {
   struct page *page ;
   __u32 offset ;
   __u32 size ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct tlbflush_unmap_batch {
   struct arch_tlbflush_unmap_batch arch ;
   bool flush_required ;
   bool writable ;
};
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/completion.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 120 
struct inode;
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_segcblist.h"
struct rcu_segcblist {
   struct callback_head *head ;
   struct callback_head **tails[4U] ;
   unsigned long gp_seq[4U] ;
   atomic_long_t len ;
   long len_lazy ;
   u8 enabled ;
   u8 offloaded ;
};
#line 80 
struct srcu_struct;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcu.h"
struct srcu_node;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_data {
   unsigned long srcu_lock_count[2U] ;
   unsigned long srcu_unlock_count[2U] ;
   spinlock_t lock ;
   struct rcu_segcblist srcu_cblist ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   bool srcu_cblist_invoking ;
   struct timer_list delay_work ;
   struct work_struct work ;
   struct callback_head srcu_barrier_head ;
   struct srcu_node *mynode ;
   unsigned long grpmask ;
   int cpu ;
   struct srcu_struct *ssp ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_node {
   spinlock_t lock ;
   unsigned long srcu_have_cbs[4U] ;
   unsigned long srcu_data_have_cbs[4U] ;
   unsigned long srcu_gp_seq_needed_exp ;
   struct srcu_node *srcu_parent ;
   int grplo ;
   int grphi ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_struct {
   struct srcu_node node[521U] ;
   struct srcu_node *level[4U] ;
   struct mutex srcu_cb_mutex ;
   spinlock_t lock ;
   struct mutex srcu_gp_mutex ;
   unsigned int srcu_idx ;
   unsigned long srcu_gp_seq ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   unsigned long srcu_last_gp_end ;
   struct srcu_data *sda ;
   unsigned long srcu_barrier_seq ;
   struct mutex srcu_barrier_mutex ;
   struct completion srcu_barrier_completion ;
   atomic_t srcu_barrier_cpu_cnt ;
   struct delayed_work work ;
   struct lockdep_map dep_map ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block *, unsigned long , void *) ;
   struct notifier_block *next ;
   int priority ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct raw_notifier_head {
   struct notifier_block *head ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/uprobes.h"
struct arch_uprobe_task {
   unsigned long saved_scratch_register ;
   unsigned int saved_trap_nr ;
   unsigned int saved_tf ;
};
#line 57 
enum uprobe_task_state {
    UTASK_RUNNING = 0,
    UTASK_SSTEP = 1,
    UTASK_SSTEP_ACK = 2,
    UTASK_SSTEP_TRAPPED = 3
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_222 {
   struct arch_uprobe_task autask ;
   unsigned long vaddr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_223 {
   struct callback_head dup_xol_work ;
   unsigned long dup_xol_addr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
union __anonunion_221 {
   struct __anonstruct_222 __anonCompField___anonunion_221_29 ;
   struct __anonstruct_223 __anonCompField___anonunion_221_30 ;
};
#line 61 
struct uprobe;
#line 61 
struct return_instance;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobe_task {
   enum uprobe_task_state state ;
   union __anonunion_221 __anonCompField_uprobe_task_31 ;
   struct uprobe *active_uprobe ;
   unsigned long xol_vaddr ;
   struct return_instance *return_instances ;
   unsigned int depth ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct return_instance {
   struct uprobe *uprobe ;
   unsigned long func ;
   unsigned long stack ;
   unsigned long orig_ret_vaddr ;
   bool chained ;
   struct return_instance *next ;
};
#line 98 
struct xol_area;
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobes_state {
   struct xol_area *xol_area ;
};
#line 140 
struct address_space;
#line 141 
struct mem_cgroup;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_225 {
   struct list_head lru ;
   struct address_space *mapping ;
   unsigned long index ;
   unsigned long private ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_226 {
   dma_addr_t dma_addr ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_229 {
   struct page *next ;
   int pages ;
   int pobjects ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
union __anonunion_228 {
   struct list_head slab_list ;
   struct __anonstruct_229 __anonCompField___anonunion_228_34 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_231 {
   unsigned int inuse : 16 ;
   unsigned int objects : 15 ;
   unsigned int frozen : 1 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
union __anonunion_230 {
   void *s_mem ;
   unsigned long counters ;
   struct __anonstruct_231 __anonCompField___anonunion_230_36 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_227 {
   union __anonunion_228 __anonCompField___anonstruct_227_35 ;
   struct kmem_cache *slab_cache ;
   void *freelist ;
   union __anonunion_230 __anonCompField___anonstruct_227_37 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_232 {
   unsigned long compound_head ;
   unsigned char compound_dtor ;
   unsigned char compound_order ;
   atomic_t compound_mapcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_233 {
   unsigned long _compound_pad_1 ;
   unsigned long _compound_pad_2 ;
   struct list_head deferred_list ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
union __anonunion_235 {
   struct mm_struct *pt_mm ;
   atomic_t pt_frag_refcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_234 {
   unsigned long _pt_pad_1 ;
   pgtable_t pmd_huge_pte ;
   unsigned long _pt_pad_2 ;
   union __anonunion_235 __anonCompField___anonstruct_234_41 ;
   spinlock_t *ptl ;
};
#line 68 
struct dev_pagemap;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_236 {
   struct dev_pagemap *pgmap ;
   void *zone_device_data ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
union __anonunion_224 {
   struct __anonstruct_225 __anonCompField___anonunion_224_32 ;
   struct __anonstruct_226 __anonCompField___anonunion_224_33 ;
   struct __anonstruct_227 __anonCompField___anonunion_224_38 ;
   struct __anonstruct_232 __anonCompField___anonunion_224_39 ;
   struct __anonstruct_233 __anonCompField___anonunion_224_40 ;
   struct __anonstruct_234 __anonCompField___anonunion_224_42 ;
   struct __anonstruct_236 __anonCompField___anonunion_224_43 ;
   struct callback_head callback_head ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
union __anonunion_237 {
   atomic_t _mapcount ;
   unsigned int page_type ;
   unsigned int active ;
   int units ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct page {
   unsigned long flags ;
   union __anonunion_224 __anonCompField_page_44 ;
   union __anonunion_237 __anonCompField_page_45 ;
   atomic_t _refcount ;
   struct mem_cgroup *mem_cgroup ;
} __attribute__((__aligned__(16)));
#line 278 
struct userfaultfd_ctx;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_userfaultfd_ctx {
   struct userfaultfd_ctx *ctx ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_shared_238 {
   struct rb_node rb ;
   unsigned long rb_subtree_last ;
};
#line 292 
struct anon_vma;
#line 292 
struct vm_operations_struct;
#line 292 
struct mempolicy;
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_area_struct {
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   struct rb_node vm_rb ;
   unsigned long rb_subtree_gap ;
   struct mm_struct *vm_mm ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct __anonstruct_shared_238 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   atomic_long_t swap_readahead_info ;
   struct mempolicy *vm_policy ;
   struct vm_userfaultfd_ctx vm_userfaultfd_ctx ;
} __attribute__((__designated_init__));
#line 358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 368 
struct kioctx_table;
#line 370 
struct linux_binfmt;
#line 370 
struct mmu_notifier_mm;
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_239 {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   u64 vmacache_seqnum ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   unsigned long mmap_base ;
   unsigned long mmap_legacy_base ;
   unsigned long mmap_compat_base ;
   unsigned long mmap_compat_legacy_base ;
   unsigned long task_size ;
   unsigned long highest_vm_end ;
   pgd_t *pgd ;
   atomic_t membarrier_state ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   atomic_long_t pgtables_bytes ;
   int map_count ;
   spinlock_t page_table_lock ;
   struct rw_semaphore mmap_sem ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   atomic64_t pinned_vm ;
   unsigned long data_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long def_flags ;
   spinlock_t arg_lock ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[46U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   mm_context_t context ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct kioctx_table *ioctx_table ;
   struct task_struct *owner ;
   struct user_namespace *user_ns ;
   struct file *exe_file ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
   unsigned long numa_next_scan ;
   unsigned long numa_scan_offset ;
   int numa_scan_seq ;
   atomic_t tlb_flush_pending ;
   bool tlb_flush_batched ;
   struct uprobes_state uprobes_state ;
   atomic_long_t hugetlb_usage ;
   struct work_struct async_put_work ;
} __attribute__((__designated_init__));
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct mm_struct {
   struct __anonstruct_239 __anonCompField_mm_struct_46 ;
   unsigned long cpu_bitmap[] ;
};
#line 642 
struct vm_fault;
#line 643  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
typedef unsigned int vm_fault_t;
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_node {
   struct rb_node node ;
   ktime_t expires ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_head {
   struct rb_root_cached rb_root ;
};
#line 60 
struct hrtimer_clock_base;
#line 61 
struct hrtimer_cpu_base;
#line 80 
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
};
#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer {
   struct timerqueue_node node ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer *) ;
   struct hrtimer_clock_base *base ;
   u8 state ;
   u8 is_rel ;
   u8 is_soft ;
   u8 is_hard ;
};
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   unsigned int index ;
   clockid_t clockid ;
   seqcount_t seq ;
   struct hrtimer *running ;
   struct timerqueue_head active ;
   ktime_t (*get_time)(void) ;
   ktime_t offset ;
} __attribute__((__aligned__(64)));
#line 213  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   unsigned int cpu ;
   unsigned int active_bases ;
   unsigned int clock_was_set_seq ;
   unsigned int hres_active : 1 ;
   unsigned int in_hrtirq : 1 ;
   unsigned int hang_detected : 1 ;
   unsigned int softirq_activated : 1 ;
   unsigned int nr_events ;
   unsigned short nr_retries ;
   unsigned short nr_hangs ;
   unsigned int max_hang_time ;
   ktime_t expires_next ;
   struct hrtimer *next_timer ;
   ktime_t softirq_expires_next ;
   struct hrtimer *softirq_next_timer ;
   struct hrtimer_clock_base clock_base[8U] ;
} __attribute__((__aligned__(64)));
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/seccomp.h"
struct seccomp_filter;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seccomp.h"
struct seccomp {
   int mode ;
   struct seccomp_filter *filter ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/resource.h"
struct rlimit {
   __kernel_ulong_t rlim_cur ;
   __kernel_ulong_t rlim_max ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/latencytop.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/types.h"
struct task_cputime {
   u64 stime ;
   u64 utime ;
   unsigned long long sum_exec_runtime ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_252 {
   unsigned long sig[1U] ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_252 sigset_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef void __signalfn_t(int );
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__kill_253 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__timer_254 {
   __kernel_timer_t _tid ;
   int _overrun ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__rt_255 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigchld_256 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_bnd_259 {
   char _dummy_bnd[8U] ;
   void *_lower ;
   void *_upper ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_pkey_260 {
   char _dummy_pkey[8U] ;
   __u32 _pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __anonunion_258 {
   short _addr_lsb ;
   struct __anonstruct__addr_bnd_259 _addr_bnd ;
   struct __anonstruct__addr_pkey_260 _addr_pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigfault_257 {
   void *_addr ;
   union __anonunion_258 __anonCompField___anonstruct__sigfault_257_47 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_261 {
   long _band ;
   int _fd ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigsys_262 {
   void *_call_addr ;
   int _syscall ;
   unsigned int _arch ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __sifields {
   struct __anonstruct__kill_253 _kill ;
   struct __anonstruct__timer_254 _timer ;
   struct __anonstruct__rt_255 _rt ;
   struct __anonstruct__sigchld_256 _sigchld ;
   struct __anonstruct__sigfault_257 _sigfault ;
   struct __anonstruct__sigpoll_261 _sigpoll ;
   struct __anonstruct__sigsys_262 _sigsys ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct __anonstruct_267 {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __sifields _sifields ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct kernel_siginfo {
   struct __anonstruct_267 __anonCompField_kernel_siginfo_50 ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
typedef struct kernel_siginfo kernel_siginfo_t;
#line 20 
struct user_struct;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/task_io_accounting.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimer_base {
   u64 nextevt ;
   struct timerqueue_head tqhead ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimers {
   struct posix_cputimer_base bases[3U] ;
   unsigned int timers_active ;
   unsigned int expiry_active ;
};
#line 193 
struct signal_struct;
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
union __anonunion_rseq_cs_272 {
   __u64 ptr64 ;
   __u64 ptr ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
struct rseq {
   __u32 cpu_id_start ;
   __u32 cpu_id ;
   union __anonunion_rseq_cs_272 rseq_cs ;
   __u32 flags ;
} __attribute__((__aligned__(32)));
#line 146 
struct audit_context;
#line 147 
struct backing_dev_info;
#line 148 
struct bio_list;
#line 149 
struct blk_plug;
#line 150 
struct capture_control;
#line 151 
struct cfs_rq;
#line 152 
struct fs_struct;
#line 153 
struct futex_pi_state;
#line 154 
struct io_context;
#line 155 
struct nameidata;
#line 156 
struct nsproxy;
#line 157 
struct perf_event_context;
#line 158 
struct pipe_inode_info;
#line 160 
struct reclaim_state;
#line 161 
struct robust_list_head;
#line 166 
struct sighand_struct;
#line 167 
struct task_delay_info;
#line 168 
struct task_group;
#line 242  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct prev_cputime {
   u64 utime ;
   u64 stime ;
   raw_spinlock_t lock ;
};
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   u32 inv_weight ;
};
#line 352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct util_est {
   unsigned int enqueued ;
   unsigned int ewma ;
} __attribute__((__aligned__(8)));
#line 401  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_avg {
   u64 last_update_time ;
   u64 load_sum ;
   u64 runnable_load_sum ;
   u32 util_sum ;
   u32 period_contrib ;
   unsigned long load_avg ;
   unsigned long runnable_load_avg ;
   unsigned long util_avg ;
   struct util_est util_est ;
} __attribute__((__aligned__(64)));
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};
#line 449  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   unsigned long runnable_weight ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   int depth ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
   struct sched_avg avg ;
};
#line 486 
struct rt_rq;
#line 486  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned long watchdog_stamp ;
   unsigned int time_slice ;
   unsigned short on_rq ;
   unsigned short on_list ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
} __attribute__((__designated_init__));
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_dl_entity {
   struct rb_node rb_node ;
   u64 dl_runtime ;
   u64 dl_deadline ;
   u64 dl_period ;
   u64 dl_bw ;
   u64 dl_density ;
   s64 runtime ;
   u64 deadline ;
   unsigned int flags ;
   unsigned int dl_throttled : 1 ;
   unsigned int dl_boosted : 1 ;
   unsigned int dl_yielded : 1 ;
   unsigned int dl_non_contending : 1 ;
   unsigned int dl_overrun : 1 ;
   struct hrtimer dl_timer ;
   struct hrtimer inactive_timer ;
};
#line 600  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct uclamp_se {
   unsigned int value : 11 ;
   unsigned int bucket_id : 3 ;
   unsigned int active : 1 ;
   unsigned int user_defined : 1 ;
};
#line 625  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct wake_q_node {
   struct wake_q_node *next ;
};
#line 629 
struct sched_class;
#line 629 
struct cred;
#line 629 
struct key;
#line 629 
struct files_struct;
#line 629 
struct rt_mutex_waiter;
#line 629 
struct css_set;
#line 629 
struct compat_robust_list_head;
#line 629 
struct numa_group;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
union __anonunion_274 {
   refcount_t rcu_users ;
   struct callback_head rcu ;
};
#line 629 
struct ftrace_ret_stack;
#line 629 
struct kcov;
#line 629 
struct request_queue;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct task_struct {
   struct thread_info thread_info ;
   long state ;
   void *stack ;
   refcount_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   struct llist_node wake_entry ;
   int on_cpu ;
   unsigned int cpu ;
   unsigned int wakee_flips ;
   unsigned long wakee_flip_decay_ts ;
   struct task_struct *last_wakee ;
   int recent_used_cpu ;
   int wake_cpu ;
   int on_rq ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct task_group *sched_task_group ;
   struct sched_dl_entity dl ;
   struct uclamp_se uclamp_req[2U] ;
   struct uclamp_se uclamp[2U] ;
   struct hlist_head preempt_notifiers ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   int nr_cpus_allowed ;
   cpumask_t *cpus_ptr ;
   cpumask_t cpus_mask ;
   unsigned long rcu_tasks_nvcsw ;
   u8 rcu_tasks_holdout ;
   u8 rcu_tasks_idx ;
   int rcu_tasks_idle_cpu ;
   struct list_head rcu_tasks_holdout_list ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct rb_node pushable_dl_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   struct vmacache vmacache ;
   struct task_rss_stat rss_stat ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned long jobctl ;
   unsigned int personality ;
   unsigned int sched_reset_on_fork : 1 ;
   unsigned int sched_contributes_to_load : 1 ;
   unsigned int sched_migrated : 1 ;
   unsigned int sched_remote_wakeup : 1 ;
   unsigned int sched_psi_wake_requeue : 1 ;
   unsigned int  ;
   unsigned int in_execve : 1 ;
   unsigned int in_iowait : 1 ;
   unsigned int restore_sigmask : 1 ;
   unsigned int in_user_fault : 1 ;
   unsigned int brk_randomized : 1 ;
   unsigned int no_cgroup_migration : 1 ;
   unsigned int frozen : 1 ;
   unsigned int use_memdelay : 1 ;
   unsigned long atomic_flags ;
   struct restart_block restart_block ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid *thread_pid ;
   struct hlist_node pid_links[4U] ;
   struct list_head thread_group ;
   struct list_head thread_node ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   u64 utime ;
   u64 stime ;
   u64 gtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   u64 start_time ;
   u64 start_boottime ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct posix_cputimers posix_cputimers ;
   struct cred *ptracer_cred ;
   struct cred *real_cred ;
   struct cred *cred ;
   struct key *cached_requested_key ;
   char comm[16U] ;
   struct nameidata *nameidata ;
   struct sysv_sem sysvsem ;
   struct sysv_shm sysvshm ;
   unsigned long last_switch_count ;
   unsigned long last_switch_time ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   unsigned int sas_ss_flags ;
   struct callback_head *task_works ;
   struct audit_context *audit_context ;
   kuid_t loginuid ;
   unsigned int sessionid ;
   struct seccomp seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   raw_spinlock_t pi_lock ;
   struct wake_q_node wake_q ;
   struct rb_root_cached pi_waiters ;
   struct task_struct *pi_top_task ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   int non_block_count ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   unsigned int in_ubsan ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct blk_plug *plug ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   struct capture_control *capture_control ;
   unsigned long ptrace_message ;
   kernel_siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   unsigned int psi_flags ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   u64 acct_timexpd ;
   nodemask_t mems_allowed ;
   seqcount_t mems_allowed_seq ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   u32 closid ;
   u32 rmid ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct mutex futex_exit_mutex ;
   unsigned int futex_state ;
   struct perf_event_context *perf_event_ctxp[2U] ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_prev ;
   short pref_node_fork ;
   int numa_scan_seq ;
   unsigned int numa_scan_period ;
   unsigned int numa_scan_period_max ;
   int numa_preferred_nid ;
   unsigned long numa_migrate_retry ;
   u64 node_stamp ;
   u64 last_task_numa_placement ;
   u64 last_sum_exec_runtime ;
   struct callback_head numa_work ;
   struct numa_group *numa_group ;
   unsigned long *numa_faults ;
   unsigned long total_numa_faults ;
   unsigned long numa_faults_locality[3U] ;
   unsigned long numa_pages_migrated ;
   struct rseq *rseq ;
   u32 rseq_sig ;
   unsigned long rseq_event_mask ;
   struct tlbflush_unmap_batch tlb_ubc ;
   union __anonunion_274 __anonCompField_task_struct_52 ;
   struct pipe_inode_info *splice_pipe ;
   struct page_frag task_frag ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   unsigned int fail_nth ;
   int nr_dirtied ;
   int nr_dirtied_pause ;
   unsigned long dirty_paused_when ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   u64 timer_slack_ns ;
   u64 default_timer_slack_ns ;
   unsigned int kasan_depth ;
   int curr_ret_stack ;
   int curr_ret_depth ;
   struct ftrace_ret_stack *ret_stack ;
   unsigned long long ftrace_timestamp ;
   atomic_t trace_overrun ;
   atomic_t tracing_graph_pause ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   unsigned int kcov_mode ;
   unsigned int kcov_size ;
   void *kcov_area ;
   struct kcov *kcov ;
   u64 kcov_handle ;
   int kcov_sequence ;
   struct mem_cgroup *memcg_in_oom ;
   gfp_t memcg_oom_gfp_mask ;
   int memcg_oom_order ;
   unsigned int memcg_nr_pages_over_high ;
   struct mem_cgroup *active_memcg ;
   struct request_queue *throttle_queue ;
   struct uprobe_task *utask ;
   unsigned int sequential_io ;
   unsigned int sequential_io_avg ;
   unsigned long task_state_change ;
   int pagefault_disabled ;
   struct task_struct *oom_reaper_list ;
   struct vm_struct *stack_vm_area ;
   refcount_t stack_refcount ;
   int patch_state ;
   void *security ;
   struct thread_struct thread ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct free_area {
   struct list_head free_list[6U] ;
   unsigned long nr_free ;
};
#line 158 
struct pglist_data;
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone_padding {
   char x[0U] ;
} __attribute__((__aligned__(4096)));
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone_reclaim_stat {
   unsigned long recent_rotated[2U] ;
   unsigned long recent_scanned[2U] ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct lruvec {
   struct list_head lists[5U] ;
   struct zone_reclaim_stat reclaim_stat ;
   atomic_long_t inactive_age ;
   unsigned long refaults ;
   unsigned long flags ;
   struct pglist_data *pgdat ;
};
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
typedef unsigned int isolate_mode_t;
#line 340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_pages {
   int count ;
   int high ;
   int batch ;
   struct list_head lists[3U] ;
};
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_pageset {
   struct per_cpu_pages pcp ;
   s8 expire ;
   u16 vm_numa_stat_diff[6U] ;
   s8 stat_threshold ;
   s8 vm_stat_diff[13U] ;
};
#line 361  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_nodestat {
   s8 stat_threshold ;
   s8 vm_node_stat_diff[32U] ;
};
#line 365 
enum zone_type {
    ZONE_DMA = 0,
    ZONE_DMA32 = 1,
    ZONE_NORMAL = 2,
    ZONE_MOVABLE = 3,
    ZONE_DEVICE = 4,
    __MAX_NR_ZONES = 5
};
#line 432  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone {
   unsigned long _watermark[3U] ;
   unsigned long watermark_boost ;
   unsigned long nr_reserved_highatomic ;
   long lowmem_reserve[5U] ;
   int node ;
   struct pglist_data *zone_pgdat ;
   struct per_cpu_pageset *pageset ;
   unsigned long zone_start_pfn ;
   atomic_long_t managed_pages ;
   unsigned long spanned_pages ;
   unsigned long present_pages ;
   char *name ;
   unsigned long nr_isolate_pageblock ;
   seqlock_t span_seqlock ;
   int initialized ;
   struct zone_padding _pad1_ ;
   struct free_area free_area[11U] ;
   unsigned long flags ;
   spinlock_t lock ;
   struct zone_padding _pad2_ ;
   unsigned long percpu_drift_mark ;
   unsigned long compact_cached_free_pfn ;
   unsigned long compact_cached_migrate_pfn[2U] ;
   unsigned long compact_init_migrate_pfn ;
   unsigned long compact_init_free_pfn ;
   unsigned int compact_considered ;
   unsigned int compact_defer_shift ;
   int compact_order_failed ;
   bool compact_blockskip_flush ;
   bool contiguous ;
   struct zone_padding _pad3_ ;
   atomic_long_t vm_stat[13U] ;
   atomic_long_t vm_numa_stat[6U] ;
} __attribute__((__aligned__(4096)));
#line 665  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zoneref {
   struct zone *zone ;
   int zone_idx ;
};
#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zonelist {
   struct zoneref _zonerefs[5121U] ;
};
#line 694  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct deferred_split {
   spinlock_t split_queue_lock ;
   struct list_head split_queue ;
   unsigned long split_queue_len ;
};
#line 710  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct pglist_data {
   struct zone node_zones[5U] ;
   struct zonelist node_zonelists[2U] ;
   int nr_zones ;
   spinlock_t node_size_lock ;
   unsigned long node_start_pfn ;
   unsigned long node_present_pages ;
   unsigned long node_spanned_pages ;
   int node_id ;
   wait_queue_head_t kswapd_wait ;
   wait_queue_head_t pfmemalloc_wait ;
   struct task_struct *kswapd ;
   int kswapd_order ;
   enum zone_type kswapd_classzone_idx ;
   int kswapd_failures ;
   int kcompactd_max_order ;
   enum zone_type kcompactd_classzone_idx ;
   wait_queue_head_t kcompactd_wait ;
   struct task_struct *kcompactd ;
   unsigned long totalreserve_pages ;
   unsigned long min_unmapped_pages ;
   unsigned long min_slab_pages ;
   struct zone_padding _pad1_ ;
   spinlock_t lru_lock ;
   unsigned long first_deferred_pfn ;
   struct deferred_split deferred_split_queue ;
   struct lruvec __lruvec ;
   unsigned long flags ;
   struct zone_padding _pad2_ ;
   struct per_cpu_nodestat *per_cpu_nodestats ;
   atomic_long_t vm_stat[32U] ;
};
#line 824 
struct resource;
#line 825 
struct vmem_altmap;
#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/firmware.h"
struct percpu_ref;
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/firmware.h"
typedef void percpu_ref_func_t(struct percpu_ref *);
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-refcount.h"
struct percpu_ref {
   atomic_long_t count ;
   unsigned long percpu_count_ptr ;
   percpu_ref_func_t *release ;
   percpu_ref_func_t *confirm_switch ;
   bool force_atomic : 1 ;
   bool allow_reinit : 1 ;
   struct callback_head rcu ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrink_control {
   gfp_t gfp_mask ;
   int nid ;
   unsigned long nr_to_scan ;
   unsigned long nr_scanned ;
   struct mem_cgroup *memcg ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrinker {
   unsigned long (*count_objects)(struct shrinker *, struct shrink_control *) ;
   unsigned long (*scan_objects)(struct shrinker *, struct shrink_control *) ;
   long batch ;
   int seeks ;
   unsigned int flags ;
   struct list_head list ;
   int id ;
   atomic_long_t *nr_deferred ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ioport.h"
struct resource {
   resource_size_t start ;
   resource_size_t end ;
   char *name ;
   unsigned long flags ;
   unsigned long desc ;
   struct resource *parent ;
   struct resource *sibling ;
   struct resource *child ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct vmem_altmap {
   unsigned long base_pfn ;
   unsigned long end_pfn ;
   unsigned long reserve ;
   unsigned long free ;
   unsigned long align ;
   unsigned long alloc ;
};
#line 26 
enum memory_type {
    MEMORY_DEVICE_PRIVATE = 1,
    MEMORY_DEVICE_FS_DAX = 2,
    MEMORY_DEVICE_DEVDAX = 3,
    MEMORY_DEVICE_PCI_P2PDMA = 4
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap_ops {
   void (*page_free)(struct page *) ;
   void (*kill)(struct dev_pagemap *) ;
   void (*cleanup)(struct dev_pagemap *) ;
   vm_fault_t (*migrate_to_ram)(struct vm_fault *) ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap {
   struct vmem_altmap altmap ;
   struct resource res ;
   struct percpu_ref *ref ;
   struct percpu_ref internal_ref ;
   struct completion done ;
   enum memory_type type ;
   unsigned int flags ;
   struct dev_pagemap_ops *ops ;
};
#line 176 
struct file_ra_state;
#line 177 
struct writeback_control;
#line 178 
struct bdi_writeback;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/extable.h"
struct exception_table_entry {
   int insn ;
   int fixup ;
   int handler ;
};
#line 417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_fault {
   struct vm_area_struct *vma ;
   unsigned int flags ;
   gfp_t gfp_mask ;
   unsigned long pgoff ;
   unsigned long address ;
   pmd_t *pmd ;
   pud_t *pud ;
   pte_t orig_pte ;
   struct page *cow_page ;
   struct mem_cgroup *memcg ;
   struct page *page ;
   pte_t *pte ;
   spinlock_t *ptl ;
   pgtable_t prealloc_pte ;
};
#line 448 
enum page_entry_size {
    PE_SIZE_PTE = 0,
    PE_SIZE_PMD = 1,
    PE_SIZE_PUD = 2
};
#line 467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct *) ;
   void (*close)(struct vm_area_struct *) ;
   int (*split)(struct vm_area_struct *, unsigned long ) ;
   int (*mremap)(struct vm_area_struct *) ;
   vm_fault_t (*fault)(struct vm_fault *) ;
   vm_fault_t (*huge_fault)(struct vm_fault *, enum page_entry_size ) ;
   void (*map_pages)(struct vm_fault *, unsigned long , unsigned long ) ;
   unsigned long (*pagesize)(struct vm_area_struct *) ;
   vm_fault_t (*page_mkwrite)(struct vm_fault *) ;
   vm_fault_t (*pfn_mkwrite)(struct vm_fault *) ;
   int (*access)(struct vm_area_struct *, unsigned long , void *, int , int ) ;
   char *(*name)(struct vm_area_struct *) ;
   int (*set_policy)(struct vm_area_struct *, struct mempolicy *) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct *, unsigned long ) ;
   struct page *(*find_special_page)(struct vm_area_struct *, unsigned long ) ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_head {
   struct hlist_bl_node *first ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node {
   struct hlist_bl_node *next ;
   struct hlist_bl_node **pprev ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct __anonstruct_387 {
   spinlock_t lock ;
   int count ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
union __anonunion_386 {
   struct __anonstruct_387 __anonCompField___anonunion_386_53 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct lockref {
   union __anonunion_386 __anonCompField_lockref_54 ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stringhash.h"
struct path;
#line 79 
struct vfsmount;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct __anonstruct_389 {
   u32 hash ;
   u32 len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_388 {
   struct __anonstruct_389 __anonCompField___anonunion_388_55 ;
   u64 hash_len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct qstr {
   union __anonunion_388 __anonCompField_qstr_56 ;
   unsigned char *name ;
};
#line 89 
struct dentry_operations;
#line 89 
struct super_block;
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_390 {
   struct list_head d_lru ;
   wait_queue_head_t *d_wait ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_d_u_391 {
   struct hlist_node d_alias ;
   struct hlist_bl_node d_in_lookup_hash ;
   struct callback_head d_rcu ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry {
   unsigned int d_flags ;
   seqcount_t d_seq ;
   struct hlist_bl_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct inode *d_inode ;
   unsigned char d_iname[32U] ;
   struct lockref d_lockref ;
   struct dentry_operations *d_op ;
   struct super_block *d_sb ;
   unsigned long d_time ;
   void *d_fsdata ;
   union __anonunion_390 __anonCompField_dentry_57 ;
   struct list_head d_child ;
   struct list_head d_subdirs ;
   union __anonunion_d_u_391 d_u ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_weak_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_hash)(struct dentry *, struct qstr *) ;
   int (*d_compare)(struct dentry *, unsigned int , char *, struct qstr *) ;
   int (*d_delete)(struct dentry *) ;
   int (*d_init)(struct dentry *) ;
   void (*d_release)(struct dentry *) ;
   void (*d_prune)(struct dentry *) ;
   void (*d_iput)(struct dentry *, struct inode *) ;
   char *(*d_dname)(struct dentry *, char *, int ) ;
   struct vfsmount *(*d_automount)(struct path *) ;
   int (*d_manage)(struct path *, bool ) ;
   struct dentry *(*d_real)(struct dentry *, struct inode *) ;
} __attribute__((__aligned__(64)));
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/path.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
} __attribute__((__designated_init__));
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stat.h"
struct kstat {
   u32 result_mask ;
   umode_t mode ;
   unsigned int nlink ;
   uint32_t blksize ;
   u64 attributes ;
   u64 attributes_mask ;
   u64 ino ;
   dev_t dev ;
   dev_t rdev ;
   kuid_t uid ;
   kgid_t gid ;
   loff_t size ;
   struct timespec64 atime ;
   struct timespec64 mtime ;
   struct timespec64 ctime ;
   struct timespec64 btime ;
   u64 blocks ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_one {
   struct list_head list ;
   long nr_items ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_memcg {
   struct callback_head rcu ;
   struct list_lru_one *lru[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_node {
   spinlock_t lock ;
   struct list_lru_one lru ;
   struct list_lru_memcg *memcg_lrus ;
   long nr_items ;
} __attribute__((__aligned__(64)));
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru {
   struct list_lru_node *node ;
   struct list_head list ;
   int shrinker_id ;
   bool memcg_aware ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/xarray.h"
struct xarray {
   spinlock_t xa_lock ;
   gfp_t xa_flags ;
   void *xa_head ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fiemap.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
#line 39 
enum migrate_mode {
    MIGRATE_ASYNC = 0,
    MIGRATE_SYNC_LIGHT = 1,
    MIGRATE_SYNC = 2,
    MIGRATE_SYNC_NO_COPY = 3
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcuwait.h"
struct rcuwait {
   struct task_struct *task ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_sync.h"
struct rcu_sync {
   int gp_state ;
   int gp_count ;
   wait_queue_head_t gp_wait ;
   struct callback_head cb_head ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-rwsem.h"
struct percpu_rw_semaphore {
   struct rcu_sync rss ;
   unsigned int *read_count ;
   struct rw_semaphore rw_sem ;
   struct rcuwait writer ;
   int readers_block ;
};
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delayed_call.h"
struct delayed_call {
   void (*fn)(void *) ;
   void *arg ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
struct __anonstruct_uuid_t_409 {
   __u8 b[16U] ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
typedef struct __anonstruct_uuid_t_409 uuid_t;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uuid.h"
typedef u32 errseq_t;
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_410 {
   struct list_head q_node ;
   struct kmem_cache *__rcu_icq_cache ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_411 {
   struct hlist_node ioc_node ;
   struct callback_head __rcu_head ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_cq {
   struct request_queue *q ;
   struct io_context *ioc ;
   union __anonunion_410 __anonCompField_io_cq_60 ;
   union __anonunion_411 __anonCompField_io_cq_61 ;
   unsigned int flags ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_context {
   atomic_long_t refcount ;
   atomic_t active_ref ;
   atomic_t nr_tasks ;
   spinlock_t lock ;
   unsigned short ioprio ;
   int nr_batch_requests ;
   unsigned long last_waited ;
   struct xarray icq_tree ;
   struct io_cq *icq_hint ;
   struct hlist_head icq_list ;
   struct work_struct release_work ;
};
#line 286  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fs.h"
struct bio;
#line 287 
struct export_operations;
#line 288 
struct hd_geometry;
#line 289 
struct iovec;
#line 290 
struct kiocb;
#line 291 
struct kobject;
#line 292 
struct poll_table_struct;
#line 293 
struct kstatfs;
#line 294 
struct swap_info_struct;
#line 295 
struct iov_iter;
#line 296 
struct fscrypt_info;
#line 297 
struct fscrypt_operations;
#line 298 
struct fsverity_info;
#line 299 
struct fsverity_operations;
#line 300 
struct fs_context;
#line 301 
struct fs_parameter_description;
#line 224  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   kuid_t ia_uid ;
   kgid_t ia_gid ;
   loff_t ia_size ;
   struct timespec64 ia_atime ;
   struct timespec64 ia_mtime ;
   struct timespec64 ia_ctime ;
   struct file *ia_file ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu_counter.h"
struct percpu_counter {
   raw_spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dqblk_xfs.h"
struct dquot;
#line 215 
struct kqid;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef __kernel_uid32_t projid_t;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
struct __anonstruct_kprojid_t_412 {
   projid_t val ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef struct __anonstruct_kprojid_t_412 kprojid_t;
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/quota.h"
enum quota_type {
    USRQUOTA = 0,
    GRPQUOTA = 1,
    PRJQUOTA = 2
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
typedef long long qsize_t;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
union __anonunion_413 {
   kuid_t uid ;
   kgid_t gid ;
   kprojid_t projid ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct kqid {
   union __anonunion_413 __anonCompField_kqid_62 ;
   enum quota_type type ;
};
#line 205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time64_t dqb_btime ;
   time64_t dqb_itime ;
};
#line 216 
struct quota_format_type;
#line 222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_max_spc_limit ;
   qsize_t dqi_max_ino_limit ;
   void *dqi_priv ;
};
#line 294  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   spinlock_t dq_dqb_lock ;
   atomic_t dq_count ;
   struct super_block *dq_sb ;
   struct kqid dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   struct mem_dqblk dq_dqb ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block *, int ) ;
   int (*read_file_info)(struct super_block *, int ) ;
   int (*write_file_info)(struct super_block *, int ) ;
   int (*free_file_info)(struct super_block *, int ) ;
   int (*read_dqblk)(struct dquot *) ;
   int (*commit_dqblk)(struct dquot *) ;
   int (*release_dqblk)(struct dquot *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 322  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot_operations {
   int (*write_dquot)(struct dquot *) ;
   struct dquot *(*alloc_dquot)(struct super_block *, int ) ;
   void (*destroy_dquot)(struct dquot *) ;
   int (*acquire_dquot)(struct dquot *) ;
   int (*release_dquot)(struct dquot *) ;
   int (*mark_dirty)(struct dquot *) ;
   int (*write_info)(struct super_block *, int ) ;
   qsize_t *(*get_reserved_space)(struct inode *) ;
   int (*get_projid)(struct inode *, kprojid_t *) ;
   int (*get_inode_usage)(struct inode *, qsize_t *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 343  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_dqblk {
   int d_fieldmask ;
   u64 d_spc_hardlimit ;
   u64 d_spc_softlimit ;
   u64 d_ino_hardlimit ;
   u64 d_ino_softlimit ;
   u64 d_space ;
   u64 d_ino_count ;
   s64 d_ino_timer ;
   s64 d_spc_timer ;
   int d_ino_warns ;
   int d_spc_warns ;
   u64 d_rt_spc_hardlimit ;
   u64 d_rt_spc_softlimit ;
   u64 d_rt_space ;
   s64 d_rt_spc_timer ;
   int d_rt_spc_warns ;
};
#line 395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_type_state {
   unsigned int flags ;
   unsigned int spc_timelimit ;
   unsigned int ino_timelimit ;
   unsigned int rt_spc_timelimit ;
   unsigned int spc_warnlimit ;
   unsigned int ino_warnlimit ;
   unsigned int rt_spc_warnlimit ;
   unsigned long long ino ;
   blkcnt_t blocks ;
   blkcnt_t nextents ;
};
#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_state {
   unsigned int s_incoredqs ;
   struct qc_type_state s_state[3U] ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_info {
   int i_fieldmask ;
   unsigned int i_flags ;
   unsigned int i_spc_timelimit ;
   unsigned int i_ino_timelimit ;
   unsigned int i_rt_spc_timelimit ;
   unsigned int i_spc_warnlimit ;
   unsigned int i_ino_warnlimit ;
   unsigned int i_rt_spc_warnlimit ;
};
#line 428  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block *, int , int , struct path *) ;
   int (*quota_off)(struct super_block *, int ) ;
   int (*quota_enable)(struct super_block *, unsigned int ) ;
   int (*quota_disable)(struct super_block *, unsigned int ) ;
   int (*quota_sync)(struct super_block *, int ) ;
   int (*set_info)(struct super_block *, int , struct qc_info *) ;
   int (*get_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_nextdqblk)(struct super_block *, struct kqid *, struct qc_dqblk *) ;
   int (*set_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_state)(struct super_block *, struct qc_state *) ;
   int (*rm_xquota)(struct super_block *, unsigned int ) ;
};
#line 443  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 518  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct rw_semaphore dqio_sem ;
   struct inode *files[3U] ;
   struct mem_dqinfo info[3U] ;
   struct quota_format_ops *ops[3U] ;
};
#line 538 
enum rw_hint {
    WRITE_LIFE_NOT_SET = 0,
    WRITE_LIFE_NONE = 1,
    WRITE_LIFE_SHORT = 2,
    WRITE_LIFE_MEDIUM = 3,
    WRITE_LIFE_LONG = 4,
    WRITE_LIFE_EXTREME = 5
};
#line 318  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct kiocb {
   struct file *ki_filp ;
   loff_t ki_pos ;
   void (*ki_complete)(struct kiocb *, long , long ) ;
   void *private ;
   int ki_flags ;
   u16 ki_hint ;
   u16 ki_ioprio ;
   unsigned int ki_cookie ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_arg_415 {
   char *buf ;
   void *data ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct __anonstruct_read_descriptor_t_414 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_415 arg ;
   int error ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
typedef struct __anonstruct_read_descriptor_t_414 read_descriptor_t;
#line 362  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page *, struct writeback_control *) ;
   int (*readpage)(struct file *, struct page *) ;
   int (*writepages)(struct address_space *, struct writeback_control *) ;
   int (*set_page_dirty)(struct page *) ;
   int (*readpages)(struct file *, struct address_space *, struct list_head *, unsigned int ) ;
   int (*write_begin)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page **, void **) ;
   int (*write_end)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page *, void *) ;
   sector_t (*bmap)(struct address_space *, sector_t ) ;
   void (*invalidatepage)(struct page *, unsigned int , unsigned int ) ;
   int (*releasepage)(struct page *, gfp_t ) ;
   void (*freepage)(struct page *) ;
   ssize_t (*direct_IO)(struct kiocb *, struct iov_iter *) ;
   int (*migratepage)(struct address_space *, struct page *, struct page *, enum migrate_mode ) ;
   bool (*isolate_page)(struct page *, isolate_mode_t ) ;
   void (*putback_page)(struct page *) ;
   int (*launder_page)(struct page *) ;
   int (*is_partially_uptodate)(struct page *, unsigned long , unsigned long ) ;
   void (*is_dirty_writeback)(struct page *, bool *, bool *) ;
   int (*error_remove_page)(struct address_space *, struct page *) ;
   int (*swap_activate)(struct swap_info_struct *, struct file *, sector_t *) ;
   void (*swap_deactivate)(struct file *) ;
};
#line 445  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct xarray i_pages ;
   gfp_t gfp_mask ;
   atomic_t i_mmap_writable ;
   atomic_t nr_thps ;
   struct rb_root_cached i_mmap ;
   struct rw_semaphore i_mmap_rwsem ;
   unsigned long nrpages ;
   unsigned long nrexceptional ;
   unsigned long writeback_index ;
   struct address_space_operations *a_ops ;
   unsigned long flags ;
   errseq_t wb_err ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   void *private_data ;
} __attribute__((__designated_init__, __aligned__(8)));
#line 473 
struct hd_struct;
#line 473 
struct gendisk;
#line 473  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   int bd_openers ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   struct mutex bd_mutex ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   bool bd_write_holder ;
   struct list_head bd_holder_disks ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   u8 bd_partno ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct request_queue *bd_queue ;
   struct backing_dev_info *bd_bdi ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
} __attribute__((__designated_init__));
#line 587 
struct posix_acl;
#line 614 
struct fsnotify_mark_connector;
#line 628 
struct inode_operations;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_418 {
   unsigned int i_nlink ;
   unsigned int __i_nlink ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_419 {
   struct hlist_head i_dentry ;
   struct callback_head i_rcu ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_420 {
   struct file_operations *i_fop ;
   void (*free_inode)(struct inode *) ;
};
#line 628 
struct file_lock_context;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_421 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
   char *i_link ;
   unsigned int i_dir_seq ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode {
   umode_t i_mode ;
   unsigned short i_opflags ;
   kuid_t i_uid ;
   kgid_t i_gid ;
   unsigned int i_flags ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   struct inode_operations *i_op ;
   struct super_block *i_sb ;
   struct address_space *i_mapping ;
   void *i_security ;
   unsigned long i_ino ;
   union __anonunion_418 __anonCompField_inode_63 ;
   dev_t i_rdev ;
   loff_t i_size ;
   struct timespec64 i_atime ;
   struct timespec64 i_mtime ;
   struct timespec64 i_ctime ;
   spinlock_t i_lock ;
   unsigned short i_bytes ;
   u8 i_blkbits ;
   u8 i_write_hint ;
   blkcnt_t i_blocks ;
   unsigned long i_state ;
   struct rw_semaphore i_rwsem ;
   unsigned long dirtied_when ;
   unsigned long dirtied_time_when ;
   struct hlist_node i_hash ;
   struct list_head i_io_list ;
   struct bdi_writeback *i_wb ;
   int i_wb_frn_winner ;
   u16 i_wb_frn_avg_time ;
   u16 i_wb_frn_history ;
   struct list_head i_lru ;
   struct list_head i_sb_list ;
   struct list_head i_wb_list ;
   union __anonunion_419 __anonCompField_inode_64 ;
   atomic64_t i_version ;
   atomic_t i_count ;
   atomic_t i_dio_count ;
   atomic_t i_writecount ;
   atomic_t i_readcount ;
   union __anonunion_420 __anonCompField_inode_65 ;
   struct file_lock_context *i_flctx ;
   struct address_space i_data ;
   struct list_head i_devices ;
   union __anonunion_421 __anonCompField_inode_66 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct fsnotify_mark_connector *i_fsnotify_marks ;
   struct fscrypt_info *i_crypt_info ;
   struct fsverity_info *i_verity_info ;
   void *i_private ;
} __attribute__((__designated_init__));
#line 904  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   kuid_t uid ;
   kuid_t euid ;
   int signum ;
};
#line 915  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_f_u_422 {
   struct llist_node fu_llist ;
   struct callback_head fu_rcuhead ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file {
   union __anonunion_f_u_422 f_u ;
   struct path f_path ;
   struct inode *f_inode ;
   struct file_operations *f_op ;
   spinlock_t f_lock ;
   enum rw_hint f_write_hint ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   struct mutex f_pos_lock ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct list_head f_tfile_llink ;
   struct address_space *f_mapping ;
   errseq_t f_wb_err ;
} __attribute__((__designated_init__, __aligned__(4)));
#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
typedef void *fl_owner_t;
#line 1026 
struct file_lock;
#line 1029  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock *, struct file_lock *) ;
   void (*fl_release_private)(struct file_lock *) ;
};
#line 1034  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct lock_manager_operations {
   fl_owner_t (*lm_get_owner)(fl_owner_t ) ;
   void (*lm_put_owner)(fl_owner_t ) ;
   void (*lm_notify)(struct file_lock *) ;
   int (*lm_grant)(struct file_lock *, int ) ;
   bool (*lm_break)(struct file_lock *) ;
   int (*lm_change)(struct file_lock *, int , struct list_head *) ;
   void (*lm_setup)(struct file_lock *, void **) ;
};
#line 1052 
struct net;
#line 1058 
struct nlm_lockowner;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 15 
struct nfs4_lock_state;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct;
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct __anonstruct_afs_424 {
   struct list_head link ;
   int state ;
   unsigned int debug_id ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_fl_u_423 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_424 afs ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock {
   struct file_lock *fl_blocker ;
   struct list_head fl_list ;
   struct hlist_node fl_link ;
   struct list_head fl_blocked_requests ;
   struct list_head fl_blocked_member ;
   fl_owner_t fl_owner ;
   unsigned int fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   int fl_link_cpu ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   unsigned long fl_downgrade_time ;
   struct file_lock_operations *fl_ops ;
   struct lock_manager_operations *fl_lmops ;
   union __anonunion_fl_u_423 fl_u ;
} __attribute__((__designated_init__));
#line 1117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_context {
   spinlock_t flc_lock ;
   struct list_head flc_flock ;
   struct list_head flc_posix ;
   struct list_head flc_lease ;
};
#line 1331  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct {
   rwlock_t fa_lock ;
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
   struct callback_head fa_rcu ;
};
#line 1418  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct sb_writers {
   int frozen ;
   wait_queue_head_t wait_unfrozen ;
   struct percpu_rw_semaphore rw_sem[3U] ;
};
#line 1424 
struct super_operations;
#line 1424 
struct xattr_handler;
#line 1424 
struct mtd_info;
#line 1424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations *s_op ;
   struct dquot_operations *dq_op ;
   struct quotactl_ops *s_qcop ;
   struct export_operations *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_iflags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   int s_count ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler **s_xattr ;
   struct fscrypt_operations *s_cop ;
   struct key *s_master_keys ;
   struct fsverity_operations *s_vop ;
   struct hlist_bl_head s_roots ;
   struct list_head s_mounts ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct hlist_node s_instances ;
   unsigned int s_quota_types ;
   struct quota_info s_dquot ;
   struct sb_writers s_writers ;
   void *s_fs_info ;
   u32 s_time_gran ;
   time64_t s_time_min ;
   time64_t s_time_max ;
   __u32 s_fsnotify_mask ;
   struct fsnotify_mark_connector *s_fsnotify_marks ;
   char s_id[32U] ;
   uuid_t s_uuid ;
   unsigned int s_max_links ;
   fmode_t s_mode ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   struct dentry_operations *s_d_op ;
   int cleancache_poolid ;
   struct shrinker s_shrink ;
   atomic_long_t s_remove_count ;
   atomic_long_t s_fsnotify_inode_refs ;
   int s_readonly_remount ;
   struct workqueue_struct *s_dio_done_wq ;
   struct hlist_head s_pins ;
   struct user_namespace *s_user_ns ;
   struct list_lru s_dentry_lru ;
   struct list_lru s_inode_lru ;
   struct callback_head rcu ;
   struct work_struct destroy_work ;
   struct mutex s_sync_lock ;
   int s_stack_depth ;
   spinlock_t s_inode_list_lock ;
   struct list_head s_inodes ;
   spinlock_t s_inode_wblist_lock ;
   struct list_head s_inodes_wb ;
} __attribute__((__designated_init__));
#line 1746  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1756 
struct dir_context;
#line 1767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct dir_context {
   int (*actor)(struct dir_context *, char *, int , loff_t , u64 , unsigned int ) ;
   loff_t pos ;
};
#line 1771 
struct block_device_operations;
#line 1821  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file *, loff_t , int ) ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*read_iter)(struct kiocb *, struct iov_iter *) ;
   ssize_t (*write_iter)(struct kiocb *, struct iov_iter *) ;
   int (*iopoll)(struct kiocb *, bool ) ;
   int (*iterate)(struct file *, struct dir_context *) ;
   int (*iterate_shared)(struct file *, struct dir_context *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   unsigned long mmap_supported_flags ;
   int (*open)(struct inode *, struct file *) ;
   int (*flush)(struct file *, fl_owner_t ) ;
   int (*release)(struct inode *, struct file *) ;
   int (*fsync)(struct file *, loff_t , loff_t , int ) ;
   int (*fasync)(int , struct file *, int ) ;
   int (*lock)(struct file *, int , struct file_lock *) ;
   ssize_t (*sendpage)(struct file *, struct page *, int , size_t , loff_t *, int ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*check_flags)(int ) ;
   int (*flock)(struct file *, int , struct file_lock *) ;
   ssize_t (*splice_write)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ) ;
   ssize_t (*splice_read)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*setlease)(struct file *, long , struct file_lock **, void **) ;
   long (*fallocate)(struct file *, int , loff_t , loff_t ) ;
   void (*show_fdinfo)(struct seq_file *, struct file *) ;
   ssize_t (*copy_file_range)(struct file *, loff_t , struct file *, loff_t , size_t , unsigned int ) ;
   loff_t (*remap_file_range)(struct file *, loff_t , struct file *, loff_t , loff_t , unsigned int ) ;
   int (*fadvise)(struct file *, loff_t , loff_t , int ) ;
} __attribute__((__designated_init__));
#line 1863  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode_operations {
   struct dentry *(*lookup)(struct inode *, struct dentry *, unsigned int ) ;
   char *(*get_link)(struct dentry *, struct inode *, struct delayed_call *) ;
   int (*permission)(struct inode *, int ) ;
   struct posix_acl *(*get_acl)(struct inode *, int ) ;
   int (*readlink)(struct dentry *, char *, int ) ;
   int (*create)(struct inode *, struct dentry *, umode_t , bool ) ;
   int (*link)(struct dentry *, struct inode *, struct dentry *) ;
   int (*unlink)(struct inode *, struct dentry *) ;
   int (*symlink)(struct inode *, struct dentry *, char *) ;
   int (*mkdir)(struct inode *, struct dentry *, umode_t ) ;
   int (*rmdir)(struct inode *, struct dentry *) ;
   int (*mknod)(struct inode *, struct dentry *, umode_t , dev_t ) ;
   int (*rename)(struct inode *, struct dentry *, struct inode *, struct dentry *, unsigned int ) ;
   int (*setattr)(struct dentry *, struct iattr *) ;
   int (*getattr)(struct path *, struct kstat *, u32 , unsigned int ) ;
   ssize_t (*listxattr)(struct dentry *, char *, size_t ) ;
   int (*fiemap)(struct inode *, struct fiemap_extent_info *, u64 , u64 ) ;
   int (*update_time)(struct inode *, struct timespec64 *, int ) ;
   int (*atomic_open)(struct inode *, struct dentry *, struct file *, unsigned int , umode_t ) ;
   int (*tmpfile)(struct inode *, struct dentry *, umode_t ) ;
   int (*set_acl)(struct inode *, struct posix_acl *, int ) ;
} __attribute__((__aligned__(64)));
#line 1942  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block *) ;
   void (*destroy_inode)(struct inode *) ;
   void (*free_inode)(struct inode *) ;
   void (*dirty_inode)(struct inode *, int ) ;
   int (*write_inode)(struct inode *, struct writeback_control *) ;
   int (*drop_inode)(struct inode *) ;
   void (*evict_inode)(struct inode *) ;
   void (*put_super)(struct super_block *) ;
   int (*sync_fs)(struct super_block *, int ) ;
   int (*freeze_super)(struct super_block *) ;
   int (*freeze_fs)(struct super_block *) ;
   int (*thaw_super)(struct super_block *) ;
   int (*unfreeze_fs)(struct super_block *) ;
   int (*statfs)(struct dentry *, struct kstatfs *) ;
   int (*remount_fs)(struct super_block *, int *, char *) ;
   void (*umount_begin)(struct super_block *) ;
   int (*show_options)(struct seq_file *, struct dentry *) ;
   int (*show_devname)(struct seq_file *, struct dentry *) ;
   int (*show_path)(struct seq_file *, struct dentry *) ;
   int (*show_stats)(struct seq_file *, struct dentry *) ;
   ssize_t (*quota_read)(struct super_block *, int , char *, size_t , loff_t ) ;
   ssize_t (*quota_write)(struct super_block *, int , char *, size_t , loff_t ) ;
   struct dquot **(*get_dquots)(struct inode *) ;
   int (*bdev_try_to_free_page)(struct super_block *, struct page *, gfp_t ) ;
   long (*nr_cached_objects)(struct super_block *, struct shrink_control *) ;
   long (*free_cached_objects)(struct super_block *, struct shrink_control *) ;
};
#line 2217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_system_type {
   char *name ;
   int fs_flags ;
   int (*init_fs_context)(struct fs_context *) ;
   struct fs_parameter_description *parameters ;
   struct dentry *(*mount)(struct file_system_type *, int , char *, void *) ;
   void (*kill_sb)(struct super_block *) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct hlist_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key s_vfs_rename_key ;
   struct lock_class_key s_writers_key[3U] ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
};
#line 3599 
struct sock;
#line 1565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct kvec;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bvec.h"
struct bio_vec {
   struct page *bv_page ;
   unsigned int bv_len ;
   unsigned int bv_offset ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bvec.h"
struct bvec_iter {
   sector_t bi_sector ;
   unsigned int bi_size ;
   unsigned int bi_idx ;
   unsigned int bi_bvec_done ;
};
#line 686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
struct scatterlist;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uio.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct kvec {
   void *iov_base ;
   size_t iov_len ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_438 {
   struct iovec *iov ;
   struct kvec *kvec ;
   struct bio_vec *bvec ;
   struct pipe_inode_info *pipe ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct __anonstruct_440 {
   unsigned int head ;
   unsigned int start_head ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_439 {
   unsigned long nr_segs ;
   struct __anonstruct_440 __anonCompField___anonunion_439_68 ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct iov_iter {
   unsigned int type ;
   size_t iov_offset ;
   size_t count ;
   union __anonunion_438 __anonCompField_iov_iter_67 ;
   union __anonunion_439 __anonCompField_iov_iter_69 ;
};
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
typedef unsigned short __kernel_sa_family_t;
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/socket.h"
struct socket;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
typedef __kernel_sa_family_t sa_family_t;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14U] ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct msghdr {
   void *msg_name ;
   int msg_namelen ;
   struct iov_iter msg_iter ;
   void *msg_control ;
   __kernel_size_t msg_controllen ;
   unsigned int msg_flags ;
   struct kiocb *msg_iocb ;
};
#line 422 
struct ns_common;
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
enum ldv_8880 {
    SS_FREE = 0,
    SS_UNCONNECTED = 1,
    SS_CONNECTING = 2,
    SS_CONNECTED = 3,
    SS_DISCONNECTING = 4
};
#line 209  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
typedef enum ldv_8880 socket_state;
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct socket_wq {
   wait_queue_head_t wait ;
   struct fasync_struct *fasync_list ;
   unsigned long flags ;
   struct callback_head rcu ;
} __attribute__((__aligned__(64)));
#line 112 
struct proto_ops;
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct socket {
   socket_state state ;
   short type ;
   unsigned long flags ;
   struct file *file ;
   struct sock *sk ;
   struct proto_ops *ops ;
   struct socket_wq wq ;
};
#line 125 
struct sk_buff;
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct proto_ops {
   int family ;
   struct module *owner ;
   int (*release)(struct socket *) ;
   int (*bind)(struct socket *, struct sockaddr *, int ) ;
   int (*connect)(struct socket *, struct sockaddr *, int , int ) ;
   int (*socketpair)(struct socket *, struct socket *) ;
   int (*accept)(struct socket *, struct socket *, int , bool ) ;
   int (*getname)(struct socket *, struct sockaddr *, int ) ;
   __poll_t (*poll)(struct file *, struct socket *, struct poll_table_struct *) ;
   int (*ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*compat_ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*gettstamp)(struct socket *, void *, bool , bool ) ;
   int (*listen)(struct socket *, int ) ;
   int (*shutdown)(struct socket *, int ) ;
   int (*setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*compat_setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*sendmsg)(struct socket *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct socket *, struct msghdr *, size_t , int ) ;
   int (*mmap)(struct file *, struct socket *, struct vm_area_struct *) ;
   ssize_t (*sendpage)(struct socket *, struct page *, int , size_t , int ) ;
   ssize_t (*splice_read)(struct socket *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*set_peek_off)(struct sock *, int ) ;
   int (*peek_len)(struct socket *) ;
   int (*read_sock)(struct sock *, read_descriptor_t *, int (*)(read_descriptor_t *, struct sk_buff *, unsigned int , size_t )) ;
   int (*sendpage_locked)(struct sock *, struct page *, int , size_t , int ) ;
   int (*sendmsg_locked)(struct sock *, struct msghdr *, size_t ) ;
   int (*set_rcvlowat)(struct sock *, int ) ;
};
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/checksum_64.h"
struct in6_addr;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct idr {
   struct xarray idr_rt ;
   unsigned int idr_base ;
   unsigned int idr_next ;
};
#line 323 
struct kernfs_open_node;
#line 324 
struct kernfs_iattrs;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_dir {
   unsigned long subdirs ;
   struct rb_root children ;
   struct kernfs_root *root ;
};
#line 96 
struct kernfs_node;
#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_symlink {
   struct kernfs_node *target_kn ;
};
#line 100 
struct kernfs_ops;
#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_attr {
   struct kernfs_ops *ops ;
   struct kernfs_open_node *open ;
   loff_t size ;
   struct kernfs_node *notify_next ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
union __anonunion_463 {
   struct kernfs_elem_dir dir ;
   struct kernfs_elem_symlink symlink ;
   struct kernfs_elem_attr attr ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_node {
   atomic_t count ;
   atomic_t active ;
   struct lockdep_map dep_map ;
   struct kernfs_node *parent ;
   char *name ;
   struct rb_node rb ;
   void *ns ;
   unsigned int hash ;
   union __anonunion_463 __anonCompField_kernfs_node_72 ;
   void *priv ;
   u64 id ;
   unsigned short flags ;
   umode_t mode ;
   struct kernfs_iattrs *iattr ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_syscall_ops {
   int (*show_options)(struct seq_file *, struct kernfs_root *) ;
   int (*mkdir)(struct kernfs_node *, char *, umode_t ) ;
   int (*rmdir)(struct kernfs_node *) ;
   int (*rename)(struct kernfs_node *, struct kernfs_node *, char *) ;
   int (*show_path)(struct seq_file *, struct kernfs_node *, struct kernfs_root *) ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root {
   struct kernfs_node *kn ;
   unsigned int flags ;
   struct idr ino_idr ;
   u32 last_id_lowbits ;
   u32 id_highbits ;
   struct kernfs_syscall_ops *syscall_ops ;
   struct list_head supers ;
   wait_queue_head_t deactivate_waitq ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_open_file {
   struct kernfs_node *kn ;
   struct file *file ;
   struct seq_file *seq_file ;
   void *priv ;
   struct mutex mutex ;
   struct mutex prealloc_mutex ;
   int event ;
   struct list_head list ;
   char *prealloc_buf ;
   size_t atomic_write_len ;
   bool mmapped : 1 ;
   bool released : 1 ;
   struct vm_operations_struct *vm_ops ;
};
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_ops {
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   ssize_t (*read)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   size_t atomic_write_len ;
   bool prealloc ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   int (*mmap)(struct kernfs_open_file *, struct vm_area_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 595 
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
};
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject_ns.h"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   bool (*current_may_mount)(void) ;
   void *(*grab_current_ns)(void) ;
   void *(*netlink_ns)(struct sock *) ;
   void *(*initial_ns)(void) ;
   void (*drop_ns)(void *) ;
};
#line 58 
struct bin_attribute;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute {
   char *name ;
   umode_t mode ;
   bool ignore_lockdep : 1 ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute_group {
   char *name ;
   umode_t (*is_visible)(struct kobject *, struct attribute *, int ) ;
   umode_t (*is_bin_visible)(struct kobject *, struct bin_attribute *, int ) ;
   struct attribute **attrs ;
   struct bin_attribute **bin_attrs ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   ssize_t (*write)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   int (*mmap)(struct file *, struct kobject *, struct bin_attribute *, struct vm_area_struct *) ;
};
#line 223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject *, struct attribute *, char *) ;
   ssize_t (*store)(struct kobject *, struct attribute *, char *, size_t ) ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kref.h"
struct kref {
   refcount_t refcount ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset;
#line 65 
struct kobj_type;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobject {
   char *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct kernfs_node *sd ;
   struct kref kref ;
   struct delayed_work release ;
   unsigned int state_initialized : 1 ;
   unsigned int state_in_sysfs : 1 ;
   unsigned int state_add_uevent_sent : 1 ;
   unsigned int state_remove_uevent_sent : 1 ;
   unsigned int uevent_suppress : 1 ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject *) ;
   struct sysfs_ops *sysfs_ops ;
   struct attribute **default_attrs ;
   struct attribute_group **default_groups ;
   struct kobj_ns_type_operations *(*child_ns_type)(struct kobject *) ;
   void *(*namespace)(struct kobject *) ;
   void (*get_ownership)(struct kobject *, kuid_t *, kgid_t *) ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_uevent_env {
   char *argv[3U] ;
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset_uevent_ops {
   int (*filter)(struct kset *, struct kobject *) ;
   char *(*name)(struct kset *, struct kobject *) ;
   int (*uevent)(struct kset *, struct kobject *, struct kobj_uevent_env *) ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops *uevent_ops ;
} __attribute__((__designated_init__));
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device *) ;
   void (*complete)(struct device *) ;
   int (*suspend)(struct device *) ;
   int (*resume)(struct device *) ;
   int (*freeze)(struct device *) ;
   int (*thaw)(struct device *) ;
   int (*poweroff)(struct device *) ;
   int (*restore)(struct device *) ;
   int (*suspend_late)(struct device *) ;
   int (*resume_early)(struct device *) ;
   int (*freeze_late)(struct device *) ;
   int (*thaw_early)(struct device *) ;
   int (*poweroff_late)(struct device *) ;
   int (*restore_early)(struct device *) ;
   int (*suspend_noirq)(struct device *) ;
   int (*resume_noirq)(struct device *) ;
   int (*freeze_noirq)(struct device *) ;
   int (*thaw_noirq)(struct device *) ;
   int (*poweroff_noirq)(struct device *) ;
   int (*restore_noirq)(struct device *) ;
   int (*runtime_suspend)(struct device *) ;
   int (*runtime_resume)(struct device *) ;
   int (*runtime_idle)(struct device *) ;
};
#line 303 
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
};
#line 310 
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
};
#line 318 
struct wakeup_source;
#line 319 
struct wake_irq;
#line 320 
struct pm_domain_data;
#line 530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_subsys_data {
   spinlock_t lock ;
   unsigned int refcount ;
   struct list_head clock_list ;
   struct pm_domain_data *domain_data ;
};
#line 573 
struct dev_pm_qos;
#line 573  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned int can_wakeup : 1 ;
   unsigned int async_suspend : 1 ;
   bool in_dpm_list : 1 ;
   bool is_prepared : 1 ;
   bool is_suspended : 1 ;
   bool is_noirq_suspended : 1 ;
   bool is_late_suspended : 1 ;
   bool no_pm : 1 ;
   bool early_init : 1 ;
   bool direct_complete : 1 ;
   u32 driver_flags ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   bool wakeup_path : 1 ;
   bool syscore : 1 ;
   bool no_pm_callbacks : 1 ;
   unsigned int must_resume : 1 ;
   unsigned int may_skip_resume : 1 ;
   struct hrtimer suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   struct wake_irq *wakeirq ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned int disable_depth : 3 ;
   unsigned int idle_notification : 1 ;
   unsigned int request_pending : 1 ;
   unsigned int deferred_resume : 1 ;
   unsigned int runtime_auto : 1 ;
   bool ignore_children : 1 ;
   unsigned int no_callbacks : 1 ;
   unsigned int irq_safe : 1 ;
   unsigned int use_autosuspend : 1 ;
   unsigned int timer_autosuspends : 1 ;
   unsigned int memalloc_noio : 1 ;
   unsigned int links_count ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   u64 last_busy ;
   u64 active_time ;
   u64 suspended_time ;
   u64 accounting_timestamp ;
   struct pm_subsys_data *subsys_data ;
   void (*set_latency_tolerance)(struct device *, s32 ) ;
   struct dev_pm_qos *qos ;
};
#line 650  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_domain {
   struct dev_pm_ops ops ;
   int (*start)(struct device *) ;
   void (*detach)(struct device *, bool ) ;
   int (*activate)(struct device *) ;
   void (*sync)(struct device *) ;
   void (*dismiss)(struct device *) ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ratelimit.h"
struct ratelimit_state {
   raw_spinlock_t lock ;
   int interval ;
   int burst ;
   int printed ;
   int missed ;
   unsigned long begin ;
   unsigned long flags ;
};
#line 5  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/device.h"
struct dev_archdata {
   void *iommu ;
};
#line 12 
struct dma_map_ops;
#line 23 
struct device_driver;
#line 24 
struct driver_private;
#line 25 
struct class;
#line 26 
struct subsys_private;
#line 27 
struct bus_type;
#line 28 
struct iommu_ops;
#line 29 
struct iommu_group;
#line 30 
struct iommu_fwspec;
#line 31 
struct dev_pin_info;
#line 32 
struct iommu_param;
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct bus_type {
   char *name ;
   char *dev_name ;
   struct device *dev_root ;
   struct attribute_group **bus_groups ;
   struct attribute_group **dev_groups ;
   struct attribute_group **drv_groups ;
   int (*match)(struct device *, struct device_driver *) ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*online)(struct device *) ;
   int (*offline)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   int (*num_vf)(struct device *) ;
   int (*dma_configure)(struct device *) ;
   struct dev_pm_ops *pm ;
   struct iommu_ops *iommu_ops ;
   struct subsys_private *p ;
   struct lock_class_key lock_key ;
   bool need_parent_lock ;
};
#line 164 
struct device_type;
#line 309 
enum probe_type {
    PROBE_DEFAULT_STRATEGY = 0,
    PROBE_PREFER_ASYNCHRONOUS = 1,
    PROBE_FORCE_SYNCHRONOUS = 2
};
#line 383 
struct of_device_id;
#line 383 
struct acpi_device_id;
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_driver {
   char *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char *mod_name ;
   bool suppress_bind_attrs ;
   enum probe_type probe_type ;
   struct of_device_id *of_match_table ;
   struct acpi_device_id *acpi_match_table ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   struct attribute_group **groups ;
   struct attribute_group **dev_groups ;
   struct dev_pm_ops *pm ;
   void (*coredump)(struct device *) ;
   struct driver_private *p ;
};
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct class {
   char *name ;
   struct module *owner ;
   struct attribute_group **class_groups ;
   struct attribute_group **dev_groups ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *) ;
   void (*class_release)(struct class *) ;
   void (*dev_release)(struct device *) ;
   int (*shutdown_pre)(struct device *) ;
   struct kobj_ns_type_operations *ns_type ;
   void *(*namespace)(struct device *) ;
   void (*get_ownership)(struct device *, kuid_t *, kgid_t *) ;
   struct dev_pm_ops *pm ;
   struct subsys_private *p ;
};
#line 809  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_type {
   char *name ;
   struct attribute_group **groups ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *, kuid_t *, kgid_t *) ;
   void (*release)(struct device *) ;
   struct dev_pm_ops *pm ;
};
#line 1008  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 1139 
enum dl_dev_state {
    DL_DEV_NO_DRIVER = 0,
    DL_DEV_PROBING = 1,
    DL_DEV_DRIVER_BOUND = 2,
    DL_DEV_UNBINDING = 3
};
#line 1164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct dev_links_info {
   struct list_head suppliers ;
   struct list_head consumers ;
   struct list_head needs_suppliers ;
   struct list_head defer_sync ;
   bool need_for_probe ;
   enum dl_dev_state status ;
};
#line 1259 
struct dma_coherent_mem;
#line 1259 
struct cma;
#line 1259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device {
   struct kobject kobj ;
   struct device *parent ;
   struct device_private *p ;
   char *init_name ;
   struct device_type *type ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   void *driver_data ;
   struct mutex lockdep_mutex ;
   struct mutex mutex ;
   struct dev_links_info links ;
   struct dev_pm_info power ;
   struct dev_pm_domain *pm_domain ;
   struct irq_domain *msi_domain ;
   struct dev_pin_info *pins ;
   struct list_head msi_list ;
   struct dma_map_ops *dma_ops ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   u64 bus_dma_limit ;
   unsigned long dma_pfn_offset ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct cma *cma_area ;
   struct dev_archdata archdata ;
   struct device_node *of_node ;
   struct fwnode_handle *fwnode ;
   int numa_node ;
   dev_t devt ;
   u32 id ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct class *class ;
   struct attribute_group **groups ;
   void (*release)(struct device *) ;
   struct iommu_group *iommu_group ;
   struct iommu_fwspec *iommu_fwspec ;
   struct iommu_param *iommu_param ;
   bool offline_disabled : 1 ;
   bool offline : 1 ;
   bool of_node_reused : 1 ;
   bool state_synced : 1 ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_wakeup.h"
struct wakeup_source {
   char *name ;
   int id ;
   struct list_head entry ;
   spinlock_t lock ;
   struct wake_irq *wakeirq ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   ktime_t start_prevent_time ;
   ktime_t prevent_sleep_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long expire_count ;
   unsigned long wakeup_count ;
   struct device *dev ;
   bool active : 1 ;
   bool autosleep_enabled : 1 ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct scatterlist {
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct sg_table {
   struct scatterlist *sgl ;
   unsigned int nents ;
   unsigned int orig_nents ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
struct dma_map_ops {
   void *(*alloc)(struct device *, size_t , dma_addr_t *, gfp_t , unsigned long ) ;
   void (*free)(struct device *, size_t , void *, dma_addr_t , unsigned long ) ;
   int (*mmap)(struct device *, struct vm_area_struct *, void *, dma_addr_t , size_t , unsigned long ) ;
   int (*get_sgtable)(struct device *, struct sg_table *, void *, dma_addr_t , size_t , unsigned long ) ;
   dma_addr_t (*map_page)(struct device *, struct page *, unsigned long , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_page)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   int (*map_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   void (*unmap_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   dma_addr_t (*map_resource)(struct device *, phys_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_resource)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*sync_single_for_cpu)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_single_for_device)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_sg_for_cpu)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*sync_sg_for_device)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*cache_sync)(struct device *, void *, size_t , enum dma_data_direction ) ;
   int (*dma_supported)(struct device *, u64 ) ;
   u64 (*get_required_mask)(struct device *) ;
   size_t (*max_mapping_size)(struct device *) ;
   unsigned long (*get_merge_boundary)(struct device *) ;
};
#line 803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
typedef u64 netdev_features_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
union __anonunion_in6_u_466 {
   __u8 u6_addr8[16U] ;
   __be16 u6_addr16[8U] ;
   __be32 u6_addr32[4U] ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
struct in6_addr {
   union __anonunion_in6_u_466 in6_u ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
struct __anonstruct_siphash_key_t_467 {
   u64 key[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
typedef struct __anonstruct_siphash_key_t_467 siphash_key_t;
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_ether.h"
struct ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_proto ;
} __attribute__((__packed__));
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buffer {
   struct page *page ;
   unsigned int offset ;
   unsigned int len ;
   struct pipe_buf_operations *ops ;
   unsigned int flags ;
   unsigned long private ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_inode_info {
   struct mutex mutex ;
   wait_queue_head_t wait ;
   unsigned int head ;
   unsigned int tail ;
   unsigned int max_usage ;
   unsigned int ring_size ;
   unsigned int readers ;
   unsigned int writers ;
   unsigned int files ;
   unsigned int r_counter ;
   unsigned int w_counter ;
   struct page *tmp_page ;
   struct fasync_struct *fasync_readers ;
   struct fasync_struct *fasync_writers ;
   struct pipe_buffer *bufs ;
   struct user_struct *user ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations {
   int (*confirm)(struct pipe_inode_info *, struct pipe_buffer *) ;
   void (*release)(struct pipe_inode_info *, struct pipe_buffer *) ;
   int (*steal)(struct pipe_inode_info *, struct pipe_buffer *) ;
   bool (*get)(struct pipe_inode_info *, struct pipe_buffer *) ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi_tunnel {
   __be64 tun_id ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi_common {
   int flowic_oif ;
   int flowic_iif ;
   __u32 flowic_mark ;
   __u8 flowic_tos ;
   __u8 flowic_scope ;
   __u8 flowic_proto ;
   __u8 flowic_flags ;
   __u32 flowic_secid ;
   kuid_t flowic_uid ;
   struct flowi_tunnel flowic_tun_key ;
   __u32 flowic_multipath_hash ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_ports_478 {
   __be16 dport ;
   __be16 sport ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_icmpt_479 {
   __u8 type ;
   __u8 code ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_dnports_480 {
   __le16 dport ;
   __le16 sport ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_mht_481 {
   __u8 type ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
union flowi_uli {
   struct __anonstruct_ports_478 ports ;
   struct __anonstruct_icmpt_479 icmpt ;
   struct __anonstruct_dnports_480 dnports ;
   __be32 spi ;
   __be32 gre_key ;
   struct __anonstruct_mht_481 mht ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi4 {
   struct flowi_common __fl_common ;
   __be32 saddr ;
   __be32 daddr ;
   union flowi_uli uli ;
} __attribute__((__aligned__(8)));
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi6 {
   struct flowi_common __fl_common ;
   struct in6_addr daddr ;
   struct in6_addr saddr ;
   __be32 flowlabel ;
   union flowi_uli uli ;
   __u32 mp_hash ;
} __attribute__((__aligned__(8)));
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowidn {
   struct flowi_common __fl_common ;
   __le16 daddr ;
   __le16 saddr ;
   union flowi_uli uli ;
} __attribute__((__aligned__(8)));
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
union __anonunion_u_482 {
   struct flowi_common __fl_common ;
   struct flowi4 ip4 ;
   struct flowi6 ip6 ;
   struct flowidn dn ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi {
   union __anonunion_u_482 u ;
} __attribute__((__aligned__(8)));
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netfilter/nf_conntrack_common.h"
struct ip_conntrack_stat {
   unsigned int found ;
   unsigned int invalid ;
   unsigned int ignore ;
   unsigned int insert ;
   unsigned int insert_failed ;
   unsigned int drop ;
   unsigned int early_drop ;
   unsigned int error ;
   unsigned int expect_new ;
   unsigned int expect_create ;
   unsigned int expect_delete ;
   unsigned int search_restart ;
};
#line 42 
struct bpf_prog;
#line 43 
union bpf_attr;
#line 44 
struct skb_ext;
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 562  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
typedef unsigned int sk_buff_data_t;
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_489 {
   struct net_device *dev ;
   unsigned long dev_scratch ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_488 {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   union __anonunion_489 __anonCompField___anonstruct_488_85 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_487 {
   struct __anonstruct_488 __anonCompField___anonunion_487_86 ;
   struct rb_node rbnode ;
   struct list_head list ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_490 {
   struct sock *sk ;
   int ip_defrag_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_491 {
   ktime_t tstamp ;
   u64 skb_mstamp_ns ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_493 {
   unsigned long _skb_refdst ;
   void (*destructor)(struct sk_buff *) ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_492 {
   struct __anonstruct_493 __anonCompField___anonunion_492_90 ;
   struct list_head tcp_tsorted_anchor ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_495 {
   __u16 csum_start ;
   __u16 csum_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_494 {
   __wsum csum ;
   struct __anonstruct_495 __anonCompField___anonunion_494_92 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_496 {
   unsigned int napi_id ;
   unsigned int sender_cpu ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_497 {
   __u32 mark ;
   __u32 reserved_tailroom ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_498 {
   __be16 inner_protocol ;
   __u8 inner_ipproto ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff {
   union __anonunion_487 __anonCompField_sk_buff_87 ;
   union __anonunion_490 __anonCompField_sk_buff_88 ;
   union __anonunion_491 __anonCompField_sk_buff_89 ;
   char cb[48U] ;
   union __anonunion_492 __anonCompField_sk_buff_91 ;
   unsigned long _nfct ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   __u16 queue_mapping ;
   __u8 __cloned_offset[0U] ;
   __u8 cloned : 1 ;
   __u8 nohdr : 1 ;
   __u8 fclone : 2 ;
   __u8 peeked : 1 ;
   __u8 head_frag : 1 ;
   __u8 pfmemalloc : 1 ;
   __u8 active_extensions ;
   __u32 headers_start[0U] ;
   __u8 __pkt_type_offset[0U] ;
   __u8 pkt_type : 3 ;
   __u8 ignore_df : 1 ;
   __u8 nf_trace : 1 ;
   __u8 ip_summed : 2 ;
   __u8 ooo_okay : 1 ;
   __u8 l4_hash : 1 ;
   __u8 sw_hash : 1 ;
   __u8 wifi_acked_valid : 1 ;
   __u8 wifi_acked : 1 ;
   __u8 no_fcs : 1 ;
   __u8 encapsulation : 1 ;
   __u8 encap_hdr_csum : 1 ;
   __u8 csum_valid : 1 ;
   __u8 __pkt_vlan_present_offset[0U] ;
   __u8 vlan_present : 1 ;
   __u8 csum_complete_sw : 1 ;
   __u8 csum_level : 2 ;
   __u8 csum_not_inet : 1 ;
   __u8 dst_pending_confirm : 1 ;
   __u8 ndisc_nodetype : 2 ;
   __u8 ipvs_property : 1 ;
   __u8 inner_protocol_type : 1 ;
   __u8 remcsum_offload : 1 ;
   __u8 offload_fwd_mark : 1 ;
   __u8 offload_l3_fwd_mark : 1 ;
   __u8 tc_skip_classify : 1 ;
   __u8 tc_at_ingress : 1 ;
   __u8 tc_redirected : 1 ;
   __u8 tc_from_ingress : 1 ;
   __u8 decrypted : 1 ;
   __u16 tc_index ;
   union __anonunion_494 __anonCompField_sk_buff_93 ;
   __u32 priority ;
   int skb_iif ;
   __u32 hash ;
   __be16 vlan_proto ;
   __u16 vlan_tci ;
   union __anonunion_496 __anonCompField_sk_buff_94 ;
   __u32 secmark ;
   union __anonunion_497 __anonCompField_sk_buff_95 ;
   union __anonunion_498 __anonCompField_sk_buff_96 ;
   __u16 inner_transport_header ;
   __u16 inner_network_header ;
   __u16 inner_mac_header ;
   __be16 protocol ;
   __u16 transport_header ;
   __u16 network_header ;
   __u16 mac_header ;
   __u32 headers_end[0U] ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   refcount_t users ;
   struct skb_ext *extensions ;
};
#line 920 
struct dst_entry;
#line 4108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_ext {
   refcount_t refcnt ;
   u8 offset[3U] ;
   u8 chunks ;
   char data[0U] ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
struct dql {
   unsigned int num_queued ;
   unsigned int adj_limit ;
   unsigned int last_obj_cnt ;
   unsigned int limit ;
   unsigned int num_completed ;
   unsigned int prev_ovlimit ;
   unsigned int prev_num_queued ;
   unsigned int prev_last_obj_cnt ;
   unsigned int lowest_slack ;
   unsigned long slack_start_time ;
   unsigned int max_limit ;
   unsigned int min_limit ;
   unsigned int slack_hold_time ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
struct __anonstruct_sync_serial_settings_528 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
typedef struct __anonstruct_sync_serial_settings_528 sync_serial_settings;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_te1_settings_529 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_te1_settings_529 te1_settings;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_raw_hdlc_proto_530 {
   unsigned short encoding ;
   unsigned short parity ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_raw_hdlc_proto_530 raw_hdlc_proto;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_531 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_531 fr_proto;
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_532 {
   unsigned int dlci ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_532 fr_proto_pvc;
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_info_533 {
   unsigned int dlci ;
   char master[16U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_info_533 fr_proto_pvc_info;
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_cisco_proto_534 {
   unsigned int interval ;
   unsigned int timeout ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_cisco_proto_534 cisco_proto;
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifs_ifsu_535 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_535 ifs_ifsu ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifrn_536 {
   char ifrn_name[16U] ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifru_537 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16U] ;
   char ifru_newname[16U] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifreq {
   union __anonunion_ifr_ifrn_536 ifr_ifrn ;
   union __anonunion_ifr_ifru_537 ifr_ifru ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef s32 compat_long_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef u32 compat_uptr_t;
#line 367  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list {
   compat_uptr_t next ;
};
#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list_head {
   struct compat_robust_list list ;
   compat_long_t futex_offset ;
   compat_uptr_t list_op_pending ;
};
#line 177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_drvinfo {
   __u32 cmd ;
   char driver[32U] ;
   char version[32U] ;
   char fw_version[32U] ;
   char bus_info[32U] ;
   char erom_version[32U] ;
   char reserved2[12U] ;
   __u32 n_priv_flags ;
   __u32 n_stats ;
   __u32 testinfo_len ;
   __u32 eedump_len ;
   __u32 regdump_len ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_wolinfo {
   __u32 cmd ;
   __u32 supported ;
   __u32 wolopts ;
   __u8 sopass[6U] ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tunable {
   __u32 cmd ;
   __u32 id ;
   __u32 type_id ;
   __u32 len ;
   void *data[0U] ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_regs {
   __u32 cmd ;
   __u32 version ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eeprom {
   __u32 cmd ;
   __u32 magic ;
   __u32 offset ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eee {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertised ;
   __u32 lp_advertised ;
   __u32 eee_active ;
   __u32 eee_enabled ;
   __u32 tx_lpi_enabled ;
   __u32 tx_lpi_timer ;
   __u32 reserved[2U] ;
};
#line 382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_modinfo {
   __u32 cmd ;
   __u32 type ;
   __u32 eeprom_len ;
   __u32 reserved[8U] ;
};
#line 462  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_coalesce {
   __u32 cmd ;
   __u32 rx_coalesce_usecs ;
   __u32 rx_max_coalesced_frames ;
   __u32 rx_coalesce_usecs_irq ;
   __u32 rx_max_coalesced_frames_irq ;
   __u32 tx_coalesce_usecs ;
   __u32 tx_max_coalesced_frames ;
   __u32 tx_coalesce_usecs_irq ;
   __u32 tx_max_coalesced_frames_irq ;
   __u32 stats_block_coalesce_usecs ;
   __u32 use_adaptive_rx_coalesce ;
   __u32 use_adaptive_tx_coalesce ;
   __u32 pkt_rate_low ;
   __u32 rx_coalesce_usecs_low ;
   __u32 rx_max_coalesced_frames_low ;
   __u32 tx_coalesce_usecs_low ;
   __u32 tx_max_coalesced_frames_low ;
   __u32 pkt_rate_high ;
   __u32 rx_coalesce_usecs_high ;
   __u32 rx_max_coalesced_frames_high ;
   __u32 tx_coalesce_usecs_high ;
   __u32 tx_max_coalesced_frames_high ;
   __u32 rate_sample_interval ;
};
#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ringparam {
   __u32 cmd ;
   __u32 rx_max_pending ;
   __u32 rx_mini_max_pending ;
   __u32 rx_jumbo_max_pending ;
   __u32 tx_max_pending ;
   __u32 rx_pending ;
   __u32 rx_mini_pending ;
   __u32 rx_jumbo_pending ;
   __u32 tx_pending ;
};
#line 541  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_channels {
   __u32 cmd ;
   __u32 max_rx ;
   __u32 max_tx ;
   __u32 max_other ;
   __u32 max_combined ;
   __u32 rx_count ;
   __u32 tx_count ;
   __u32 other_count ;
   __u32 combined_count ;
};
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_pauseparam {
   __u32 cmd ;
   __u32 autoneg ;
   __u32 rx_pause ;
   __u32 tx_pause ;
};
#line 683  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_test {
   __u32 cmd ;
   __u32 flags ;
   __u32 reserved ;
   __u32 len ;
   __u64 data[0U] ;
};
#line 702  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_stats {
   __u32 cmd ;
   __u32 n_stats ;
   __u64 data[0U] ;
};
#line 758  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tos ;
};
#line 775  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 spi ;
   __u8 tos ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 l4_4_bytes ;
   __u8 tos ;
   __u8 ip_ver ;
   __u8 proto ;
};
#line 812  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tclass ;
};
#line 829  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 spi ;
   __u8 tclass ;
};
#line 844  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 l4_4_bytes ;
   __u8 tclass ;
   __u8 l4_proto ;
};
#line 852  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union ethtool_flow_union {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   struct ethtool_tcpip6_spec tcp_ip6_spec ;
   struct ethtool_tcpip6_spec udp_ip6_spec ;
   struct ethtool_tcpip6_spec sctp_ip6_spec ;
   struct ethtool_ah_espip6_spec ah_ip6_spec ;
   struct ethtool_ah_espip6_spec esp_ip6_spec ;
   struct ethtool_usrip6_spec usr_ip6_spec ;
   struct ethhdr ether_spec ;
   __u8 hdata[52U] ;
};
#line 880  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flow_ext {
   __u8 padding[2U] ;
   unsigned char h_dest[6U] ;
   __be16 vlan_etype ;
   __be16 vlan_tci ;
   __be32 data[2U] ;
};
#line 905  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rx_flow_spec {
   __u32 flow_type ;
   union ethtool_flow_union h_u ;
   struct ethtool_flow_ext h_ext ;
   union ethtool_flow_union m_u ;
   struct ethtool_flow_ext m_ext ;
   __u64 ring_cookie ;
   __u32 location ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union __anonunion_556 {
   __u32 rule_cnt ;
   __u32 rss_context ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rxnfc {
   __u32 cmd ;
   __u32 flow_type ;
   __u64 data ;
   struct ethtool_rx_flow_spec fs ;
   union __anonunion_556 __anonCompField_ethtool_rxnfc_99 ;
   __u32 rule_locs[0U] ;
};
#line 1130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flash {
   __u32 cmd ;
   __u32 region ;
   char data[128U] ;
};
#line 1150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_dump {
   __u32 cmd ;
   __u32 version ;
   __u32 flag ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 1230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ts_info {
   __u32 cmd ;
   __u32 so_timestamping ;
   __s32 phc_index ;
   __u32 tx_types ;
   __u32 tx_reserved[3U] ;
   __u32 rx_filters ;
   __u32 rx_reserved[3U] ;
};
#line 1302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_fecparam {
   __u32 cmd ;
   __u32 active_fec ;
   __u32 fec ;
   __u32 reserved ;
};
#line 1876  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_link_settings {
   __u32 cmd ;
   __u32 speed ;
   __u8 duplex ;
   __u8 port ;
   __u8 phy_address ;
   __u8 autoneg ;
   __u8 mdio_support ;
   __u8 eth_tp_mdix ;
   __u8 eth_tp_mdix_ctrl ;
   __s8 link_mode_masks_nwords ;
   __u8 transceiver ;
   __u8 reserved1[3U] ;
   __u32 reserved[7U] ;
   __u32 link_mode_masks[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
enum ethtool_phys_id_state {
    ETHTOOL_ID_INACTIVE = 0,
    ETHTOOL_ID_ACTIVE = 1,
    ETHTOOL_ID_ON = 2,
    ETHTOOL_ID_OFF = 3
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct __anonstruct_link_modes_559 {
   unsigned long supported[2U] ;
   unsigned long advertising[2U] ;
   unsigned long lp_advertising[2U] ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_link_ksettings {
   struct ethtool_link_settings base ;
   struct __anonstruct_link_modes_559 link_modes ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_ops {
   void (*get_drvinfo)(struct net_device *, struct ethtool_drvinfo *) ;
   int (*get_regs_len)(struct net_device *) ;
   void (*get_regs)(struct net_device *, struct ethtool_regs *, void *) ;
   void (*get_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   int (*set_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   u32 (*get_msglevel)(struct net_device *) ;
   void (*set_msglevel)(struct net_device *, u32 ) ;
   int (*nway_reset)(struct net_device *) ;
   u32 (*get_link)(struct net_device *) ;
   int (*get_eeprom_len)(struct net_device *) ;
   int (*get_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*set_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   int (*set_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   void (*get_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   int (*set_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   void (*get_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   int (*set_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   void (*self_test)(struct net_device *, struct ethtool_test *, u64 *) ;
   void (*get_strings)(struct net_device *, u32 , u8 *) ;
   int (*set_phys_id)(struct net_device *, enum ethtool_phys_id_state ) ;
   void (*get_ethtool_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
   int (*begin)(struct net_device *) ;
   void (*complete)(struct net_device *) ;
   u32 (*get_priv_flags)(struct net_device *) ;
   int (*set_priv_flags)(struct net_device *, u32 ) ;
   int (*get_sset_count)(struct net_device *, int ) ;
   int (*get_rxnfc)(struct net_device *, struct ethtool_rxnfc *, u32 *) ;
   int (*set_rxnfc)(struct net_device *, struct ethtool_rxnfc *) ;
   int (*flash_device)(struct net_device *, struct ethtool_flash *) ;
   int (*reset)(struct net_device *, u32 *) ;
   u32 (*get_rxfh_key_size)(struct net_device *) ;
   u32 (*get_rxfh_indir_size)(struct net_device *) ;
   int (*get_rxfh)(struct net_device *, u32 *, u8 *, u8 *) ;
   int (*set_rxfh)(struct net_device *, u32 *, u8 *, u8 ) ;
   int (*get_rxfh_context)(struct net_device *, u32 *, u8 *, u8 *, u32 ) ;
   int (*set_rxfh_context)(struct net_device *, u32 *, u8 *, u8 , u32 *, bool ) ;
   void (*get_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*set_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*get_dump_flag)(struct net_device *, struct ethtool_dump *) ;
   int (*get_dump_data)(struct net_device *, struct ethtool_dump *, void *) ;
   int (*set_dump)(struct net_device *, struct ethtool_dump *) ;
   int (*get_ts_info)(struct net_device *, struct ethtool_ts_info *) ;
   int (*get_module_info)(struct net_device *, struct ethtool_modinfo *) ;
   int (*get_module_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*set_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*get_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*set_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*get_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*set_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*get_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*set_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*get_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   int (*set_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   void (*get_ethtool_phy_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
};
#line 822  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sysctl.h"
struct ctl_table_root;
#line 823 
struct ctl_table_header;
#line 824 
struct ctl_dir;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
typedef int proc_handler(struct ctl_table *, int , void *, size_t *, loff_t *);
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_poll {
   atomic_t event ;
   wait_queue_head_t wait ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table {
   char *procname ;
   void *data ;
   int maxlen ;
   umode_t mode ;
   struct ctl_table *child ;
   proc_handler *proc_handler ;
   struct ctl_table_poll *poll ;
   void *extra1 ;
   void *extra2 ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_node {
   struct rb_node node ;
   struct ctl_table_header *header ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct __anonstruct_561 {
   struct ctl_table *ctl_table ;
   int used ;
   int count ;
   int nreg ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
union __anonunion_560 {
   struct __anonstruct_561 __anonCompField___anonunion_560_100 ;
   struct callback_head rcu ;
};
#line 142 
struct ctl_table_set;
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_header {
   union __anonunion_560 __anonCompField_ctl_table_header_101 ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_dir *parent ;
   struct ctl_node *node ;
   struct hlist_head inodes ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_dir {
   struct ctl_table_header header ;
   struct rb_root root ;
};
#line 167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_set {
   int (*is_seen)(struct ctl_table_set *) ;
   struct ctl_dir dir ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_root {
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root *) ;
   void (*set_ownership)(struct ctl_table_header *, struct ctl_table *, kuid_t *, kgid_t *) ;
   int (*permissions)(struct ctl_table_header *, struct ctl_table *) ;
};
#line 242 
struct prot_inuse;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/core.h"
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   int *sock_inuse ;
   struct prot_inuse *prot_inuse ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct u64_stats_sync {
   };
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct __anonstruct_local_t_562 {
   atomic_long_t a ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
typedef struct __anonstruct_local_t_562 local_t;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
struct __anonstruct_local64_t_563 {
   local_t a ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
typedef struct __anonstruct_local64_t_563 local64_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
struct __anonstruct_u64_stats_t_564 {
   local64_t v ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
typedef struct __anonstruct_u64_stats_t_564 u64_stats_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct ipstats_mib {
   u64 mibs[37U] ;
   struct u64_stats_sync syncp ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmp_mib {
   unsigned long mibs[28U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpmsg_mib {
   atomic_long_t mibs[512U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6_mib {
   unsigned long mibs[6U] ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6msg_mib {
   atomic_long_t mibs[512U] ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct tcp_mib {
   unsigned long mibs[16U] ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct udp_mib {
   unsigned long mibs[9U] ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_mib {
   unsigned long mibs[120U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_xfrm_mib {
   unsigned long mibs[29U] ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_tls_mib {
   unsigned long mibs[11U] ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mib.h"
struct proc_dir_entry;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mib.h"
struct netns_mib {
   struct tcp_mib *tcp_statistics ;
   struct ipstats_mib *ip_statistics ;
   struct linux_mib *net_statistics ;
   struct udp_mib *udp_statistics ;
   struct udp_mib *udplite_statistics ;
   struct icmp_mib *icmp_statistics ;
   struct icmpmsg_mib *icmpmsg_statistics ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6 ;
   struct udp_mib *udplite_stats_in6 ;
   struct ipstats_mib *ipv6_statistics ;
   struct icmpv6_mib *icmpv6_statistics ;
   struct icmpv6msg_mib *icmpv6msg_statistics ;
   struct linux_xfrm_mib *xfrm_statistics ;
   struct linux_tls_mib *tls_statistics ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/unix.h"
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/packet.h"
struct netns_packet {
   struct mutex sklist_lock ;
   struct hlist_head sklist ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags;
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct fqdir {
   long high_thresh ;
   long low_thresh ;
   int timeout ;
   int max_dist ;
   struct inet_frags *f ;
   struct net *net ;
   bool dead ;
   struct rhashtable rhashtable ;
   atomic_long_t mem ;
   struct work_struct destroy_work ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v4_compare_key {
   __be32 saddr ;
   __be32 daddr ;
   u32 user ;
   u32 vif ;
   __be16 id ;
   u16 protocol ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v6_compare_key {
   struct in6_addr saddr ;
   struct in6_addr daddr ;
   u32 user ;
   __be32 id ;
   u32 iif ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
union __anonunion_key_565 {
   struct frag_v4_compare_key v4 ;
   struct frag_v6_compare_key v6 ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frag_queue {
   struct rhash_head node ;
   union __anonunion_key_565 key ;
   struct timer_list timer ;
   spinlock_t lock ;
   refcount_t refcnt ;
   struct rb_root rb_fragments ;
   struct sk_buff *fragments_tail ;
   struct sk_buff *last_run_head ;
   ktime_t stamp ;
   int len ;
   int meat ;
   __u8 flags ;
   u16 max_size ;
   struct fqdir *fqdir ;
   struct callback_head rcu ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags {
   unsigned int qsize ;
   void (*constructor)(struct inet_frag_queue *, void *) ;
   void (*destructor)(struct inet_frag_queue *) ;
   void (*frag_expire)(struct timer_list *) ;
   struct kmem_cache *frags_cachep ;
   char *frags_cache_name ;
   struct rhashtable_params rhash_params ;
   refcount_t refcnt ;
   struct completion completion ;
};
#line 177 
struct ipv4_devconf;
#line 178 
struct fib_rules_ops;
#line 179 
struct fib_table;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct local_ports {
   seqlock_t lock ;
   int range[2U] ;
   bool warned ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct ping_group_range {
   seqlock_t lock ;
   kgid_t range[2U] ;
};
#line 31 
struct inet_hashinfo;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct inet_timewait_death_row {
   atomic_t tw_count ;
   struct inet_hashinfo *hashinfo ;
   int sysctl_max_tw_buckets ;
};
#line 40 
struct tcp_fastopen_context;
#line 43 
struct ip_ra_chain;
#line 43 
struct inet_peer_base;
#line 43 
struct xt_table;
#line 43 
struct tcp_congestion_ops;
#line 43 
struct fib_notifier_ops;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *xfrm4_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct ip_ra_chain *ra_chain ;
   struct mutex ra_mutex ;
   struct fib_rules_ops *rules_ops ;
   bool fib_has_custom_rules ;
   unsigned int fib_rules_require_fldissect ;
   struct fib_table *fib_main ;
   struct fib_table *fib_default ;
   bool fib_has_custom_local_routes ;
   int fib_num_tclassid_users ;
   struct hlist_head *fib_table_hash ;
   bool fib_offload_disabled ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct inet_peer_base *peers ;
   struct sock **tcp_sk ;
   struct fqdir *fqdir ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   struct local_ports ip_local_ports ;
   int sysctl_tcp_ecn ;
   int sysctl_tcp_ecn_fallback ;
   int sysctl_ip_default_ttl ;
   int sysctl_ip_no_pmtu_disc ;
   int sysctl_ip_fwd_use_pmtu ;
   int sysctl_ip_fwd_update_priority ;
   int sysctl_ip_nonlocal_bind ;
   int sysctl_ip_dynaddr ;
   int sysctl_ip_early_demux ;
   int sysctl_raw_l3mdev_accept ;
   int sysctl_tcp_early_demux ;
   int sysctl_udp_early_demux ;
   int sysctl_fwmark_reflect ;
   int sysctl_tcp_fwmark_accept ;
   int sysctl_tcp_l3mdev_accept ;
   int sysctl_tcp_mtu_probing ;
   int sysctl_tcp_mtu_probe_floor ;
   int sysctl_tcp_base_mss ;
   int sysctl_tcp_min_snd_mss ;
   int sysctl_tcp_probe_threshold ;
   u32 sysctl_tcp_probe_interval ;
   int sysctl_tcp_keepalive_time ;
   int sysctl_tcp_keepalive_probes ;
   int sysctl_tcp_keepalive_intvl ;
   int sysctl_tcp_syn_retries ;
   int sysctl_tcp_synack_retries ;
   int sysctl_tcp_syncookies ;
   int sysctl_tcp_reordering ;
   int sysctl_tcp_retries1 ;
   int sysctl_tcp_retries2 ;
   int sysctl_tcp_orphan_retries ;
   int sysctl_tcp_fin_timeout ;
   unsigned int sysctl_tcp_notsent_lowat ;
   int sysctl_tcp_tw_reuse ;
   int sysctl_tcp_sack ;
   int sysctl_tcp_window_scaling ;
   int sysctl_tcp_timestamps ;
   int sysctl_tcp_early_retrans ;
   int sysctl_tcp_recovery ;
   int sysctl_tcp_thin_linear_timeouts ;
   int sysctl_tcp_slow_start_after_idle ;
   int sysctl_tcp_retrans_collapse ;
   int sysctl_tcp_stdurg ;
   int sysctl_tcp_rfc1337 ;
   int sysctl_tcp_abort_on_overflow ;
   int sysctl_tcp_fack ;
   int sysctl_tcp_max_reordering ;
   int sysctl_tcp_dsack ;
   int sysctl_tcp_app_win ;
   int sysctl_tcp_adv_win_scale ;
   int sysctl_tcp_frto ;
   int sysctl_tcp_nometrics_save ;
   int sysctl_tcp_moderate_rcvbuf ;
   int sysctl_tcp_tso_win_divisor ;
   int sysctl_tcp_workaround_signed_windows ;
   int sysctl_tcp_limit_output_bytes ;
   int sysctl_tcp_challenge_ack_limit ;
   int sysctl_tcp_min_tso_segs ;
   int sysctl_tcp_min_rtt_wlen ;
   int sysctl_tcp_autocorking ;
   int sysctl_tcp_invalid_ratelimit ;
   int sysctl_tcp_pacing_ss_ratio ;
   int sysctl_tcp_pacing_ca_ratio ;
   int sysctl_tcp_wmem[3U] ;
   int sysctl_tcp_rmem[3U] ;
   int sysctl_tcp_comp_sack_nr ;
   unsigned long sysctl_tcp_comp_sack_delay_ns ;
   struct inet_timewait_death_row tcp_death_row ;
   int sysctl_max_syn_backlog ;
   int sysctl_tcp_fastopen ;
   struct tcp_congestion_ops *tcp_congestion_control ;
   struct tcp_fastopen_context *tcp_fastopen_ctx ;
   spinlock_t tcp_fastopen_ctx_lock ;
   unsigned int sysctl_tcp_fastopen_blackhole_timeout ;
   atomic_t tfo_active_disable_times ;
   unsigned long tfo_active_disable_stamp ;
   int sysctl_udp_wmem_min ;
   int sysctl_udp_rmem_min ;
   int sysctl_udp_l3mdev_accept ;
   int sysctl_igmp_max_memberships ;
   int sysctl_igmp_max_msf ;
   int sysctl_igmp_llm_reports ;
   int sysctl_igmp_qrv ;
   struct ping_group_range ping_group_range ;
   atomic_t dev_addr_genid ;
   unsigned long *sysctl_local_reserved_ports ;
   int sysctl_ip_prot_sock ;
   struct list_head mr_tables ;
   struct fib_rules_ops *mr_rules_ops ;
   int sysctl_fib_multipath_use_neigh ;
   int sysctl_fib_multipath_hash_policy ;
   struct fib_notifier_ops *notifier_ops ;
   unsigned int fib_seq ;
   struct fib_notifier_ops *ipmr_notifier_ops ;
   unsigned int ipmr_seq ;
   atomic_t rt_genid ;
   siphash_key_t ip_id_key ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst_ops.h"
struct neighbour;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst_ops.h"
struct dst_ops {
   unsigned short family ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops *) ;
   struct dst_entry *(*check)(struct dst_entry *, __u32 ) ;
   unsigned int (*default_advmss)(struct dst_entry *) ;
   unsigned int (*mtu)(struct dst_entry *) ;
   u32 *(*cow_metrics)(struct dst_entry *, unsigned long ) ;
   void (*destroy)(struct dst_entry *) ;
   void (*ifdown)(struct dst_entry *, struct net_device *, int ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry *) ;
   void (*link_failure)(struct sk_buff *) ;
   void (*update_pmtu)(struct dst_entry *, struct sock *, struct sk_buff *, u32 , bool ) ;
   void (*redirect)(struct dst_entry *, struct sock *, struct sk_buff *) ;
   int (*local_out)(struct net *, struct sock *, struct sk_buff *) ;
   struct neighbour *(*neigh_lookup)(struct dst_entry *, struct sk_buff *, void *) ;
   void (*confirm_neigh)(struct dst_entry *, void *) ;
   struct kmem_cache *kmem_cachep ;
   struct percpu_counter pcpuc_entries ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_sysctl_ipv6 {
   struct ctl_table_header *hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *icmp_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *xfrm6_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int multipath_hash_policy ;
   int flowlabel_consistency ;
   int auto_flowlabels ;
   int icmpv6_time ;
   int icmpv6_echo_ignore_all ;
   int icmpv6_echo_ignore_multicast ;
   int icmpv6_echo_ignore_anycast ;
   unsigned long icmpv6_ratemask[4U] ;
   unsigned long *icmpv6_ratemask_ptr ;
   int anycast_src_echo_reply ;
   int ip_nonlocal_bind ;
   int fwmark_reflect ;
   int idgen_retries ;
   int idgen_delay ;
   int flowlabel_state_ranges ;
   int flowlabel_reflect ;
   int max_dst_opts_cnt ;
   int max_hbh_opts_cnt ;
   int max_dst_opts_len ;
   int max_hbh_opts_len ;
   int seg6_flowlabel ;
   bool skip_notify_on_dev_down ;
};
#line 56 
struct ipv6_devconf;
#line 56 
struct fib6_info;
#line 56 
struct rt6_info;
#line 56 
struct rt6_statistics;
#line 56 
struct fib6_table;
#line 56 
struct seg6_pernet_data;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct __anonstruct_ip6addrlbl_table_567 {
   struct hlist_head head ;
   spinlock_t lock ;
   u32 seq ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct inet_peer_base *peers ;
   struct fqdir *fqdir ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct xt_table *ip6table_nat ;
   struct fib6_info *fib6_null_entry ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct list_head fib6_walkers ;
   struct dst_ops ip6_dst_ops ;
   rwlock_t fib6_walker_lock ;
   spinlock_t fib6_gc_lock ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   unsigned int fib6_rules_require_fldissect ;
   bool fib6_has_custom_rules ;
   unsigned int fib6_routes_require_src ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct list_head mr6_tables ;
   struct fib_rules_ops *mr6_rules_ops ;
   atomic_t dev_addr_genid ;
   atomic_t fib6_sernum ;
   struct seg6_pernet_data *seg6_data ;
   struct fib_notifier_ops *notifier_ops ;
   struct fib_notifier_ops *ip6mr_notifier_ops ;
   unsigned int ipmr_seq ;
   struct __anonstruct_ip6addrlbl_table_567 ip6addrlbl_table ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_nf_frag {
   struct fqdir *fqdir ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nexthop.h"
struct netns_nexthop {
   struct rb_root rb_root ;
   struct hlist_head *devhash ;
   unsigned int seq ;
   u32 last_id_allocated ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_sysctl_lowpan {
   struct ctl_table_header *frags_hdr ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_ieee802154_lowpan {
   struct netns_sysctl_lowpan sysctl ;
   struct fqdir *fqdir ;
};
#line 21 
struct sctp_mib;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/sctp.h"
struct netns_sctp {
   struct sctp_mib *sctp_statistics ;
   struct proc_dir_entry *proc_net_sctp ;
   struct ctl_table_header *sysctl_header ;
   struct sock *ctl_sock ;
   struct list_head local_addr_list ;
   struct list_head addr_waitq ;
   struct timer_list addr_wq_timer ;
   struct list_head auto_asconf_splist ;
   spinlock_t addr_wq_lock ;
   spinlock_t local_addr_lock ;
   unsigned int rto_initial ;
   unsigned int rto_min ;
   unsigned int rto_max ;
   int rto_alpha ;
   int rto_beta ;
   int max_burst ;
   int cookie_preserve_enable ;
   char *sctp_hmac_alg ;
   unsigned int valid_cookie_life ;
   unsigned int sack_timeout ;
   unsigned int hb_interval ;
   int max_retrans_association ;
   int max_retrans_path ;
   int max_retrans_init ;
   int pf_retrans ;
   int ps_retrans ;
   int pf_enable ;
   int pf_expose ;
   int sndbuf_policy ;
   int rcvbuf_policy ;
   int default_auto_asconf ;
   int addip_enable ;
   int addip_noauth ;
   int prsctp_enable ;
   int reconf_enable ;
   int auth_enable ;
   int intl_enable ;
   int ecn_enable ;
   int scope_policy ;
   int rwnd_upd_shift ;
   unsigned long max_autoclose ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/dccp.h"
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netfilter.h"
struct nf_logger;
#line 76 
struct nf_queue_handler;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct nf_hook_entries;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct netns_nf {
   struct proc_dir_entry *proc_netfilter ;
   struct nf_queue_handler *queue_handler ;
   struct nf_logger *nf_loggers[13U] ;
   struct ctl_table_header *nf_log_dir_header ;
   struct nf_hook_entries *hooks_ipv4[5U] ;
   struct nf_hook_entries *hooks_ipv6[5U] ;
   struct nf_hook_entries *hooks_arp[3U] ;
   struct nf_hook_entries *hooks_bridge[5U] ;
   struct nf_hook_entries *hooks_decnet[7U] ;
   bool defrag_ipv4 ;
   bool defrag_ipv6 ;
};
#line 37 
struct ebt_table;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/x_tables.h"
struct netns_xt {
   struct list_head tables[13U] ;
   bool notrack_deprecated_warning ;
   bool clusterip_deprecated_warning ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_head {
   struct hlist_nulls_node *first ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_generic_net {
   unsigned int timeout ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_tcp_net {
   unsigned int timeouts[14U] ;
   int tcp_loose ;
   int tcp_be_liberal ;
   int tcp_max_retrans ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_udp_net {
   unsigned int timeouts[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_icmp_net {
   unsigned int timeout ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_dccp_net {
   int dccp_loose ;
   unsigned int dccp_timeout[10U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_sctp_net {
   unsigned int timeouts[10U] ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_gre_net {
   struct list_head keymap_list ;
   unsigned int timeouts[2U] ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_ip_net {
   struct nf_generic_net generic ;
   struct nf_tcp_net tcp ;
   struct nf_udp_net udp ;
   struct nf_icmp_net icmp ;
   struct nf_icmp_net icmpv6 ;
   struct nf_dccp_net dccp ;
   struct nf_sctp_net sctp ;
   struct nf_gre_net gre ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct ct_pcpu {
   spinlock_t lock ;
   struct hlist_nulls_head unconfirmed ;
   struct hlist_nulls_head dying ;
};
#line 95 
struct nf_ct_event_notifier;
#line 95 
struct nf_exp_event_notifier;
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   struct delayed_work ecache_dwork ;
   bool ecache_dwork_pending ;
   bool auto_assign_helper_warned ;
   struct ctl_table_header *sysctl_header ;
   unsigned int sysctl_log_invalid ;
   int sysctl_events ;
   int sysctl_acct ;
   int sysctl_auto_assign_helper ;
   int sysctl_tstamp ;
   int sysctl_checksum ;
   struct ct_pcpu *pcpu_lists ;
   struct ip_conntrack_stat *stat ;
   struct nf_ct_event_notifier *nf_conntrack_event_cb ;
   struct nf_exp_event_notifier *nf_expect_event_cb ;
   struct nf_ip_net nf_ct_proto ;
   unsigned int labels_used ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nftables.h"
struct netns_nftables {
   struct list_head tables ;
   struct list_head commit_list ;
   struct list_head module_list ;
   struct mutex commit_mutex ;
   unsigned int base_seq ;
   u8 gencursor ;
   u8 validate_state ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
   u8 dbits4 ;
   u8 sbits4 ;
   u8 dbits6 ;
   u8 sbits6 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hthresh {
   struct work_struct work ;
   seqlock_t lock ;
   u8 lbits4 ;
   u8 rbits4 ;
   u8 lbits6 ;
   u8 rbits6 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[3U] ;
   struct xfrm_policy_hash policy_bydst[3U] ;
   unsigned int policy_count[6U] ;
   struct work_struct policy_hash_work ;
   struct xfrm_policy_hthresh policy_hthresh ;
   struct list_head inexact_bins ;
   struct sock *nlsk ;
   struct sock *nlsk_stash ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
   struct dst_ops xfrm4_dst_ops ;
   struct dst_ops xfrm6_dst_ops ;
   spinlock_t xfrm_state_lock ;
   spinlock_t xfrm_policy_lock ;
   struct mutex xfrm_cfg_mutex ;
};
#line 79 
struct mpls_route;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mpls.h"
struct netns_mpls {
   int ip_ttl_propagate ;
   int default_ttl ;
   size_t platform_labels ;
   struct mpls_route **platform_label ;
   struct ctl_table_header *ctl ;
};
#line 20 
struct can_dev_rcv_lists;
#line 21 
struct can_pkg_stats;
#line 22 
struct can_rcv_lists_stats;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/can.h"
struct netns_can {
   struct proc_dir_entry *proc_dir ;
   struct proc_dir_entry *pde_version ;
   struct proc_dir_entry *pde_stats ;
   struct proc_dir_entry *pde_reset_stats ;
   struct proc_dir_entry *pde_rcvlist_all ;
   struct proc_dir_entry *pde_rcvlist_fil ;
   struct proc_dir_entry *pde_rcvlist_inv ;
   struct proc_dir_entry *pde_rcvlist_sff ;
   struct proc_dir_entry *pde_rcvlist_eff ;
   struct proc_dir_entry *pde_rcvlist_err ;
   struct proc_dir_entry *bcmproc_dir ;
   struct can_dev_rcv_lists *rx_alldev_list ;
   spinlock_t rcvlists_lock ;
   struct timer_list stattimer ;
   struct can_pkg_stats *pkg_stats ;
   struct can_rcv_lists_stats *rcv_lists_stats ;
   struct hlist_head cgw_list ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xdp.h"
struct netns_xdp {
   struct mutex lock ;
   struct hlist_head list ;
};
#line 12 
struct proc_ns_operations;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ns_common.h"
struct ns_common {
   atomic_long_t stashed ;
   struct proc_ns_operations *ops ;
   unsigned int inum ;
};
#line 12 
struct net_generic;
#line 13 
struct uevent_sock;
#line 14 
struct netns_ipvs;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct key_tag;
#line 55 
struct ucounts;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct net {
   refcount_t passive ;
   refcount_t count ;
   spinlock_t rules_mod_lock ;
   unsigned int dev_unreg_count ;
   unsigned int dev_base_seq ;
   int ifindex ;
   spinlock_t nsid_lock ;
   atomic_t fnhe_genid ;
   struct list_head list ;
   struct list_head exit_list ;
   struct llist_node cleanup_list ;
   struct key_tag *key_domain ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct idr netns_ids ;
   struct ns_common ns ;
   struct list_head dev_base_head ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct sock *rtnl ;
   struct sock *genl_sock ;
   struct uevent_sock *uevent_sock ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   struct raw_notifier_head netdev_chain ;
   u32 hash_mix ;
   struct net_device *loopback_dev ;
   struct list_head rules_ops ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_nexthop nexthop ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_ieee802154_lowpan ieee802154_lowpan ;
   struct netns_sctp sctp ;
   struct netns_dccp dccp ;
   struct netns_nf nf ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct netns_nftables nft ;
   struct netns_nf_frag nf_frag ;
   struct ctl_table_header *nf_frag_frags_hdr ;
   struct sock *nfnl ;
   struct sock *nfnl_stash ;
   struct list_head nfnl_acct_list ;
   struct list_head nfct_timeout_list ;
   struct sk_buff_head wext_nlevents ;
   struct net_generic *gen ;
   struct bpf_prog *flow_dissector_prog ;
   struct netns_xfrm xfrm ;
   struct netns_ipvs *ipvs ;
   struct netns_mpls mpls ;
   struct netns_can can ;
   struct netns_xdp xdp ;
   struct sock *crypto_nlsk ;
   struct sock *diag_nlsk ;
} __attribute__((__designated_init__));
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array_ptr;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array {
   struct assoc_array_ptr *root ;
   unsigned long nr_leaves_on_tree ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
typedef int32_t key_serial_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
typedef uint32_t key_perm_t;
#line 32 
struct key_type;
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_tag {
   struct callback_head rcu ;
   refcount_t usage ;
   bool removed ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_580 {
   u16 desc_len ;
   char desc[6U] ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_579 {
   struct __anonstruct_580 __anonCompField___anonunion_579_102 ;
   unsigned long x ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct keyring_index_key {
   unsigned long hash ;
   union __anonunion_579 __anonCompField_keyring_index_key_103 ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union key_payload {
   void *rcu_data0 ;
   void *data[4U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_restriction {
   int (*check)(struct key *, struct key_type *, union key_payload *, struct key *) ;
   struct key *key ;
   struct key_type *keytype ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_581 {
   struct list_head graveyard_link ;
   struct rb_node serial_node ;
};
#line 172 
struct key_user;
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_582 {
   time64_t expiry ;
   time64_t revoked_at ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_584 {
   unsigned long hash ;
   unsigned long len_desc ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_583 {
   struct keyring_index_key index_key ;
   struct __anonstruct_584 __anonCompField___anonunion_583_106 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_586 {
   struct list_head name_link ;
   struct assoc_array keys ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_585 {
   union key_payload payload ;
   struct __anonstruct_586 __anonCompField___anonunion_585_108 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key {
   refcount_t usage ;
   key_serial_t serial ;
   union __anonunion_581 __anonCompField_key_104 ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_582 __anonCompField_key_105 ;
   time64_t last_used_at ;
   kuid_t uid ;
   kgid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   short state ;
   unsigned long flags ;
   union __anonunion_583 __anonCompField_key_107 ;
   union __anonunion_585 __anonCompField_key_109 ;
   struct key_restriction *restrict_link ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/user.h"
struct user_struct {
   refcount_t __count ;
   atomic_t processes ;
   atomic_t sigpending ;
   atomic_t fanotify_listeners ;
   atomic_long_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   unsigned long unix_inflight ;
   atomic_long_t pipe_bufs ;
   struct hlist_node uidhash_node ;
   kuid_t uid ;
   atomic_long_t locked_vm ;
   struct ratelimit_state ratelimit ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   kgid_t gid[0U] ;
} __attribute__((__designated_init__));
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
union __anonunion_589 {
   int non_rcu ;
   struct callback_head rcu ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   kuid_t uid ;
   kgid_t gid ;
   kuid_t suid ;
   kgid_t sgid ;
   kuid_t euid ;
   kgid_t egid ;
   kuid_t fsuid ;
   kgid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   kernel_cap_t cap_ambient ;
   unsigned char jit_keyring ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   void *security ;
   struct user_struct *user ;
   struct user_namespace *user_ns ;
   struct group_info *group_info ;
   union __anonunion_589 __anonCompField_cred_110 ;
} __attribute__((__designated_init__));
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   size_t pad_until ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations *op ;
   int poll_event ;
   struct file *file ;
   void *private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_operations {
   void *(*start)(struct seq_file *, loff_t *) ;
   void (*stop)(struct seq_file *, void *) ;
   void *(*next)(struct seq_file *, void *, loff_t *) ;
   int (*show)(struct seq_file *, void *) ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct __anonstruct_possible_net_t_590 {
   struct net *net ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
typedef struct __anonstruct_possible_net_t_590 possible_net_t;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_ets {
   __u8 willing ;
   __u8 ets_cap ;
   __u8 cbs ;
   __u8 tc_tx_bw[8U] ;
   __u8 tc_rx_bw[8U] ;
   __u8 tc_tsa[8U] ;
   __u8 prio_tc[8U] ;
   __u8 tc_reco_bw[8U] ;
   __u8 tc_reco_tsa[8U] ;
   __u8 reco_prio_tc[8U] ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_maxrate {
   __u64 tc_maxrate[8U] ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn {
   __u8 rpg_enable[8U] ;
   __u32 rppp_max_rps[8U] ;
   __u32 rpg_time_reset[8U] ;
   __u32 rpg_byte_reset[8U] ;
   __u32 rpg_threshold[8U] ;
   __u32 rpg_max_rate[8U] ;
   __u32 rpg_ai_rate[8U] ;
   __u32 rpg_hai_rate[8U] ;
   __u32 rpg_gd[8U] ;
   __u32 rpg_min_dec_fac[8U] ;
   __u32 rpg_min_rate[8U] ;
   __u32 cndd_state_machine[8U] ;
};
#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn_stats {
   __u64 rppp_rp_centiseconds[8U] ;
   __u32 rppp_created_rps[8U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_pfc {
   __u8 pfc_cap ;
   __u8 pfc_en ;
   __u8 mbc ;
   __u16 delay ;
   __u64 requests[8U] ;
   __u64 indications[8U] ;
};
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcbnl_buffer {
   __u8 prio2buffer[8U] ;
   __u32 buffer_size[8U] ;
   __u32 total_size ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pg {
   __u8 willing ;
   __u8 error ;
   __u8 pg_en ;
   __u8 tcs_supported ;
   __u8 pg_bw[8U] ;
   __u8 prio_pg[8U] ;
};
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pfc {
   __u8 willing ;
   __u8 error ;
   __u8 pfc_en ;
   __u8 tcs_supported ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_app {
   __u8 selector ;
   __u8 priority ;
   __u16 protocol ;
};
#line 259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_peer_app_info {
   __u8 willing ;
   __u8 error ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dcbnl.h"
struct dcbnl_rtnl_ops {
   int (*ieee_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_setets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_getmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_setmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_getqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_setqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_getqcnstats)(struct net_device *, struct ieee_qcn_stats *) ;
   int (*ieee_getpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_setpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_getapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_setapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_delapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_peer_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_peer_getpfc)(struct net_device *, struct ieee_pfc *) ;
   u8 (*getstate)(struct net_device *) ;
   u8 (*setstate)(struct net_device *, u8 ) ;
   void (*getpermhwaddr)(struct net_device *, u8 *) ;
   void (*setpgtccfgtx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgtx)(struct net_device *, int , u8 ) ;
   void (*setpgtccfgrx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgrx)(struct net_device *, int , u8 ) ;
   void (*getpgtccfgtx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgtx)(struct net_device *, int , u8 *) ;
   void (*getpgtccfgrx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgrx)(struct net_device *, int , u8 *) ;
   void (*setpfccfg)(struct net_device *, int , u8 ) ;
   void (*getpfccfg)(struct net_device *, int , u8 *) ;
   u8 (*setall)(struct net_device *) ;
   u8 (*getcap)(struct net_device *, int , u8 *) ;
   int (*getnumtcs)(struct net_device *, int , u8 *) ;
   int (*setnumtcs)(struct net_device *, int , u8 ) ;
   u8 (*getpfcstate)(struct net_device *) ;
   void (*setpfcstate)(struct net_device *, u8 ) ;
   void (*getbcncfg)(struct net_device *, int , u32 *) ;
   void (*setbcncfg)(struct net_device *, int , u32 ) ;
   void (*getbcnrp)(struct net_device *, int , u8 *) ;
   void (*setbcnrp)(struct net_device *, int , u8 ) ;
   int (*setapp)(struct net_device *, u8 , u16 , u8 ) ;
   int (*getapp)(struct net_device *, u8 , u16 ) ;
   u8 (*getfeatcfg)(struct net_device *, int , u8 *) ;
   u8 (*setfeatcfg)(struct net_device *, int , u8 ) ;
   u8 (*getdcbx)(struct net_device *) ;
   u8 (*setdcbx)(struct net_device *, u8 ) ;
   int (*peer_getappinfo)(struct net_device *, struct dcb_peer_app_info *, u16 *) ;
   int (*peer_getapptable)(struct net_device *, struct dcb_app *) ;
   int (*cee_peer_getpg)(struct net_device *, struct cee_pg *) ;
   int (*cee_peer_getpfc)(struct net_device *, struct cee_pfc *) ;
   int (*dcbnl_getbuffer)(struct net_device *, struct dcbnl_buffer *) ;
   int (*dcbnl_setbuffer)(struct net_device *, struct dcbnl_buffer *) ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/taskstats.h"
struct taskstats {
   __u16 version ;
   __u32 ac_exitcode ;
   __u8 ac_flag ;
   __u8 ac_nice ;
   __u64 cpu_count ;
   __u64 cpu_delay_total ;
   __u64 blkio_count ;
   __u64 blkio_delay_total ;
   __u64 swapin_count ;
   __u64 swapin_delay_total ;
   __u64 cpu_run_real_total ;
   __u64 cpu_run_virtual_total ;
   char ac_comm[32U] ;
   __u8 ac_sched ;
   __u8 ac_pad[3U] ;
   __u32 ac_uid ;
   __u32 ac_gid ;
   __u32 ac_pid ;
   __u32 ac_ppid ;
   __u32 ac_btime ;
   __u64 ac_etime ;
   __u64 ac_utime ;
   __u64 ac_stime ;
   __u64 ac_minflt ;
   __u64 ac_majflt ;
   __u64 coremem ;
   __u64 virtmem ;
   __u64 hiwater_rss ;
   __u64 hiwater_vm ;
   __u64 read_char ;
   __u64 write_char ;
   __u64 read_syscalls ;
   __u64 write_syscalls ;
   __u64 read_bytes ;
   __u64 write_bytes ;
   __u64 cancelled_write_bytes ;
   __u64 nvcsw ;
   __u64 nivcsw ;
   __u64 ac_utimescaled ;
   __u64 ac_stimescaled ;
   __u64 cpu_scaled_run_real_total ;
   __u64 freepages_count ;
   __u64 freepages_delay_total ;
   __u64 thrashing_count ;
   __u64 thrashing_delay_total ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/cgroupstats.h"
struct mnt_namespace;
#line 60 
struct uts_namespace;
#line 61 
struct ipc_namespace;
#line 62 
struct cgroup_namespace;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nsproxy.h"
struct nsproxy {
   atomic_t count ;
   struct uts_namespace *uts_ns ;
   struct ipc_namespace *ipc_ns ;
   struct mnt_namespace *mnt_ns ;
   struct pid_namespace *pid_ns_for_children ;
   struct net *net_ns ;
   struct cgroup_namespace *cgroup_ns ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_extent {
   u32 first ;
   u32 lower_first ;
   u32 count ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct __anonstruct_592 {
   struct uid_gid_extent *forward ;
   struct uid_gid_extent *reverse ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
union __anonunion_591 {
   struct uid_gid_extent extent[5U] ;
   struct __anonstruct_592 __anonCompField___anonunion_591_111 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_map {
   u32 nr_extents ;
   union __anonunion_591 __anonCompField_uid_gid_map_112 ;
};
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct user_namespace {
   struct uid_gid_map uid_map ;
   struct uid_gid_map gid_map ;
   struct uid_gid_map projid_map ;
   atomic_t count ;
   struct user_namespace *parent ;
   int level ;
   kuid_t owner ;
   kgid_t group ;
   struct ns_common ns ;
   unsigned long flags ;
   struct list_head keyring_name_list ;
   struct key *user_keyring_register ;
   struct rw_semaphore keyring_sem ;
   struct key *persistent_keyring_register ;
   struct work_struct work ;
   struct ctl_table_set set ;
   struct ctl_table_header *sysctls ;
   struct ucounts *ucounts ;
   int ucount_max[9U] ;
} __attribute__((__designated_init__));
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct ucounts {
   struct hlist_node node ;
   struct user_namespace *ns ;
   kuid_t uid ;
   int count ;
   atomic_t ucount[9U] ;
};
#line 604  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
struct tasklet_struct {
   struct tasklet_struct *next ;
   unsigned long state ;
   atomic_t count ;
   void (*func)(unsigned long ) ;
   unsigned long data ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_insn {
   __u8 code ;
   __u8 dst_reg : 4 ;
   __u8 src_reg : 4 ;
   __s16 off ;
   __s32 imm ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_cgroup_storage_key {
   __u64 cgroup_inode_id ;
   __u32 attach_type ;
};
#line 110 
enum bpf_map_type {
    BPF_MAP_TYPE_UNSPEC = 0,
    BPF_MAP_TYPE_HASH = 1,
    BPF_MAP_TYPE_ARRAY = 2,
    BPF_MAP_TYPE_PROG_ARRAY = 3,
    BPF_MAP_TYPE_PERF_EVENT_ARRAY = 4,
    BPF_MAP_TYPE_PERCPU_HASH = 5,
    BPF_MAP_TYPE_PERCPU_ARRAY = 6,
    BPF_MAP_TYPE_STACK_TRACE = 7,
    BPF_MAP_TYPE_CGROUP_ARRAY = 8,
    BPF_MAP_TYPE_LRU_HASH = 9,
    BPF_MAP_TYPE_LRU_PERCPU_HASH = 10,
    BPF_MAP_TYPE_LPM_TRIE = 11,
    BPF_MAP_TYPE_ARRAY_OF_MAPS = 12,
    BPF_MAP_TYPE_HASH_OF_MAPS = 13,
    BPF_MAP_TYPE_DEVMAP = 14,
    BPF_MAP_TYPE_SOCKMAP = 15,
    BPF_MAP_TYPE_CPUMAP = 16,
    BPF_MAP_TYPE_XSKMAP = 17,
    BPF_MAP_TYPE_SOCKHASH = 18,
    BPF_MAP_TYPE_CGROUP_STORAGE = 19,
    BPF_MAP_TYPE_REUSEPORT_SOCKARRAY = 20,
    BPF_MAP_TYPE_PERCPU_CGROUP_STORAGE = 21,
    BPF_MAP_TYPE_QUEUE = 22,
    BPF_MAP_TYPE_STACK = 23,
    BPF_MAP_TYPE_SK_STORAGE = 24,
    BPF_MAP_TYPE_DEVMAP_HASH = 25
};
#line 139 
enum bpf_prog_type {
    BPF_PROG_TYPE_UNSPEC = 0,
    BPF_PROG_TYPE_SOCKET_FILTER = 1,
    BPF_PROG_TYPE_KPROBE = 2,
    BPF_PROG_TYPE_SCHED_CLS = 3,
    BPF_PROG_TYPE_SCHED_ACT = 4,
    BPF_PROG_TYPE_TRACEPOINT = 5,
    BPF_PROG_TYPE_XDP = 6,
    BPF_PROG_TYPE_PERF_EVENT = 7,
    BPF_PROG_TYPE_CGROUP_SKB = 8,
    BPF_PROG_TYPE_CGROUP_SOCK = 9,
    BPF_PROG_TYPE_LWT_IN = 10,
    BPF_PROG_TYPE_LWT_OUT = 11,
    BPF_PROG_TYPE_LWT_XMIT = 12,
    BPF_PROG_TYPE_SOCK_OPS = 13,
    BPF_PROG_TYPE_SK_SKB = 14,
    BPF_PROG_TYPE_CGROUP_DEVICE = 15,
    BPF_PROG_TYPE_SK_MSG = 16,
    BPF_PROG_TYPE_RAW_TRACEPOINT = 17,
    BPF_PROG_TYPE_CGROUP_SOCK_ADDR = 18,
    BPF_PROG_TYPE_LWT_SEG6LOCAL = 19,
    BPF_PROG_TYPE_LIRC_MODE2 = 20,
    BPF_PROG_TYPE_SK_REUSEPORT = 21,
    BPF_PROG_TYPE_FLOW_DISSECTOR = 22,
    BPF_PROG_TYPE_CGROUP_SYSCTL = 23,
    BPF_PROG_TYPE_RAW_TRACEPOINT_WRITABLE = 24,
    BPF_PROG_TYPE_CGROUP_SOCKOPT = 25,
    BPF_PROG_TYPE_TRACING = 26
};
#line 169 
enum bpf_attach_type {
    BPF_CGROUP_INET_INGRESS = 0,
    BPF_CGROUP_INET_EGRESS = 1,
    BPF_CGROUP_INET_SOCK_CREATE = 2,
    BPF_CGROUP_SOCK_OPS = 3,
    BPF_SK_SKB_STREAM_PARSER = 4,
    BPF_SK_SKB_STREAM_VERDICT = 5,
    BPF_CGROUP_DEVICE = 6,
    BPF_SK_MSG_VERDICT = 7,
    BPF_CGROUP_INET4_BIND = 8,
    BPF_CGROUP_INET6_BIND = 9,
    BPF_CGROUP_INET4_CONNECT = 10,
    BPF_CGROUP_INET6_CONNECT = 11,
    BPF_CGROUP_INET4_POST_BIND = 12,
    BPF_CGROUP_INET6_POST_BIND = 13,
    BPF_CGROUP_UDP4_SENDMSG = 14,
    BPF_CGROUP_UDP6_SENDMSG = 15,
    BPF_LIRC_MODE2 = 16,
    BPF_FLOW_DISSECTOR = 17,
    BPF_CGROUP_SYSCTL = 18,
    BPF_CGROUP_UDP4_RECVMSG = 19,
    BPF_CGROUP_UDP6_RECVMSG = 20,
    BPF_CGROUP_GETSOCKOPT = 21,
    BPF_CGROUP_SETSOCKOPT = 22,
    BPF_TRACE_RAW_TP = 23,
    BPF_TRACE_FENTRY = 24,
    BPF_TRACE_FEXIT = 25,
    __MAX_BPF_ATTACH_TYPE = 26
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_594 {
   __u32 map_type ;
   __u32 key_size ;
   __u32 value_size ;
   __u32 max_entries ;
   __u32 map_flags ;
   __u32 inner_map_fd ;
   __u32 numa_node ;
   char map_name[16U] ;
   __u32 map_ifindex ;
   __u32 btf_fd ;
   __u32 btf_key_type_id ;
   __u32 btf_value_type_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_596 {
   __u64 value ;
   __u64 next_key ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_595 {
   __u32 map_fd ;
   __u64 key ;
   union __anonunion_596 __anonCompField___anonstruct_595_115 ;
   __u64 flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_597 {
   __u32 prog_type ;
   __u32 insn_cnt ;
   __u64 insns ;
   __u64 license ;
   __u32 log_level ;
   __u32 log_size ;
   __u64 log_buf ;
   __u32 kern_version ;
   __u32 prog_flags ;
   char prog_name[16U] ;
   __u32 prog_ifindex ;
   __u32 expected_attach_type ;
   __u32 prog_btf_fd ;
   __u32 func_info_rec_size ;
   __u64 func_info ;
   __u32 func_info_cnt ;
   __u32 line_info_rec_size ;
   __u64 line_info ;
   __u32 line_info_cnt ;
   __u32 attach_btf_id ;
   __u32 attach_prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_598 {
   __u64 pathname ;
   __u32 bpf_fd ;
   __u32 file_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_599 {
   __u32 target_fd ;
   __u32 attach_bpf_fd ;
   __u32 attach_type ;
   __u32 attach_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_test_600 {
   __u32 prog_fd ;
   __u32 retval ;
   __u32 data_size_in ;
   __u32 data_size_out ;
   __u64 data_in ;
   __u64 data_out ;
   __u32 repeat ;
   __u32 duration ;
   __u32 ctx_size_in ;
   __u32 ctx_size_out ;
   __u64 ctx_in ;
   __u64 ctx_out ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_602 {
   __u32 start_id ;
   __u32 prog_id ;
   __u32 map_id ;
   __u32 btf_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_601 {
   union __anonunion_602 __anonCompField___anonstruct_601_120 ;
   __u32 next_id ;
   __u32 open_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_info_603 {
   __u32 bpf_fd ;
   __u32 info_len ;
   __u64 info ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_query_604 {
   __u32 target_fd ;
   __u32 attach_type ;
   __u32 query_flags ;
   __u32 attach_flags ;
   __u64 prog_ids ;
   __u32 prog_cnt ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_raw_tracepoint_605 {
   __u64 name ;
   __u32 prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_606 {
   __u64 btf ;
   __u64 btf_log_buf ;
   __u32 btf_size ;
   __u32 btf_log_size ;
   __u32 btf_log_level ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_task_fd_query_607 {
   __u32 pid ;
   __u32 fd ;
   __u32 flags ;
   __u32 buf_len ;
   __u64 buf ;
   __u32 prog_id ;
   __u32 fd_type ;
   __u64 probe_offset ;
   __u64 probe_addr ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union bpf_attr {
   struct __anonstruct_594 __anonCompField_bpf_attr_114 ;
   struct __anonstruct_595 __anonCompField_bpf_attr_116 ;
   struct __anonstruct_597 __anonCompField_bpf_attr_117 ;
   struct __anonstruct_598 __anonCompField_bpf_attr_118 ;
   struct __anonstruct_599 __anonCompField_bpf_attr_119 ;
   struct __anonstruct_test_600 test ;
   struct __anonstruct_601 __anonCompField_bpf_attr_121 ;
   struct __anonstruct_info_603 info ;
   struct __anonstruct_query_604 query ;
   struct __anonstruct_raw_tracepoint_605 raw_tracepoint ;
   struct __anonstruct_606 __anonCompField_bpf_attr_122 ;
   struct __anonstruct_task_fd_query_607 task_fd_query ;
} __attribute__((__aligned__(8)));
#line 3653  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_func_info {
   __u32 insn_off ;
   __u32 type_id ;
};
#line 3661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_line_info {
   __u32 insn_off ;
   __u32 file_name_off ;
   __u32 line_off ;
   __u32 line_col ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree_latch.h"
struct latch_tree_node {
   struct rb_node node[2U] ;
};
#line 215 
struct bpf_prog_aux;
#line 216 
struct bpf_map;
#line 217 
struct btf;
#line 218 
struct btf_type;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_ops {
   int (*map_alloc_check)(union bpf_attr *) ;
   struct bpf_map *(*map_alloc)(union bpf_attr *) ;
   void (*map_release)(struct bpf_map *, struct file *) ;
   void (*map_free)(struct bpf_map *) ;
   int (*map_get_next_key)(struct bpf_map *, void *, void *) ;
   void (*map_release_uref)(struct bpf_map *) ;
   void *(*map_lookup_elem_sys_only)(struct bpf_map *, void *) ;
   void *(*map_lookup_elem)(struct bpf_map *, void *) ;
   int (*map_update_elem)(struct bpf_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_map *, void *) ;
   int (*map_push_elem)(struct bpf_map *, void *, u64 ) ;
   int (*map_pop_elem)(struct bpf_map *, void *) ;
   int (*map_peek_elem)(struct bpf_map *, void *) ;
   void *(*map_fd_get_ptr)(struct bpf_map *, struct file *, int ) ;
   void (*map_fd_put_ptr)(void *) ;
   u32 (*map_gen_lookup)(struct bpf_map *, struct bpf_insn *) ;
   u32 (*map_fd_sys_lookup_elem)(void *) ;
   void (*map_seq_show_elem)(struct bpf_map *, void *, struct seq_file *) ;
   int (*map_check_btf)(struct bpf_map *, struct btf *, struct btf_type *, struct btf_type *) ;
   int (*map_poke_track)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_untrack)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_run)(struct bpf_map *, u32 , struct bpf_prog *, struct bpf_prog *) ;
   int (*map_direct_value_addr)(struct bpf_map *, u64 *, u32 ) ;
   int (*map_direct_value_meta)(struct bpf_map *, u64 , u32 *) ;
   int (*map_mmap)(struct bpf_map *, struct vm_area_struct *) ;
};
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_memory {
   u32 pages ;
   struct user_struct *user ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map {
   struct bpf_map_ops *ops ;
   struct bpf_map *inner_map_meta ;
   void *security ;
   enum bpf_map_type map_type ;
   u32 key_size ;
   u32 value_size ;
   u32 max_entries ;
   u32 map_flags ;
   int spin_lock_off ;
   u32 id ;
   int numa_node ;
   u32 btf_key_type_id ;
   u32 btf_value_type_id ;
   struct btf *btf ;
   struct bpf_map_memory memory ;
   char name[16U] ;
   bool unpriv_array ;
   bool frozen ;
   atomic64_t refcnt ;
   atomic64_t usercnt ;
   struct work_struct work ;
   struct mutex freeze_mutex ;
   u64 writecnt ;
};
#line 151 
struct bpf_offload_dev;
#line 152 
struct bpf_offloaded_map;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_dev_ops {
   int (*map_get_next_key)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_lookup_elem)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_update_elem)(struct bpf_offloaded_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_offloaded_map *, void *) ;
};
#line 166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_offloaded_map {
   struct bpf_map map ;
   struct net_device *netdev ;
   struct bpf_map_dev_ops *dev_ops ;
   void *dev_priv ;
   struct list_head offloads ;
};
#line 327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_ops {
   int (*test_run)(struct bpf_prog *, union bpf_attr *, union bpf_attr *) ;
};
#line 369  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_offload {
   struct bpf_prog *prog ;
   struct net_device *netdev ;
   struct bpf_offload_dev *offdev ;
   void *dev_priv ;
   struct list_head offloads ;
   bool dev_state ;
   bool opt_failed ;
   void *jited_image ;
   u32 jited_len ;
};
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_stats {
   u64 cnt ;
   u64 nsecs ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct btf_func_model {
   u8 ret_size ;
   u8 nr_args ;
   u8 arg_size[12U] ;
};
#line 447 
enum bpf_tramp_prog_type {
    BPF_TRAMP_FENTRY = 0,
    BPF_TRAMP_FEXIT = 1,
    BPF_TRAMP_MAX = 2
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_func_640 {
   struct btf_func_model model ;
   void *addr ;
   bool ftrace_managed ;
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_trampoline {
   struct hlist_node hlist ;
   struct mutex mutex ;
   refcount_t refcnt ;
   u64 key ;
   struct __anonstruct_func_640 func ;
   struct hlist_head progs_hlist[2U] ;
   int progs_cnt[2U] ;
   void *image ;
   u64 selector ;
};
#line 495  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_func_info_aux {
   bool unreliable ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_tail_call_642 {
   struct bpf_map *map ;
   u32 key ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_641 {
   struct __anonstruct_tail_call_642 tail_call ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_jit_poke_descriptor {
   void *ip ;
   union __anonunion_641 __anonCompField_bpf_jit_poke_descriptor_147 ;
   bool ip_stable ;
   u8 adj_off ;
   u16 reason ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_643 {
   struct work_struct work ;
   struct callback_head rcu ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_aux {
   atomic64_t refcnt ;
   u32 used_map_cnt ;
   u32 max_ctx_offset ;
   u32 max_pkt_offset ;
   u32 max_tp_access ;
   u32 stack_depth ;
   u32 id ;
   u32 func_cnt ;
   u32 func_idx ;
   u32 attach_btf_id ;
   struct bpf_prog *linked_prog ;
   bool verifier_zext ;
   bool offload_requested ;
   bool attach_btf_trace ;
   bool func_proto_unreliable ;
   enum bpf_tramp_prog_type trampoline_prog_type ;
   struct bpf_trampoline *trampoline ;
   struct hlist_node tramp_hlist ;
   struct btf_type *attach_func_proto ;
   char *attach_func_name ;
   struct bpf_prog **func ;
   void *jit_data ;
   struct bpf_jit_poke_descriptor *poke_tab ;
   u32 size_poke_tab ;
   struct latch_tree_node ksym_tnode ;
   struct list_head ksym_lnode ;
   struct bpf_prog_ops *ops ;
   struct bpf_map **used_maps ;
   struct bpf_prog *prog ;
   struct user_struct *user ;
   u64 load_time ;
   struct bpf_map *cgroup_storage[2U] ;
   char name[16U] ;
   void *security ;
   struct bpf_prog_offload *offload ;
   struct btf *btf ;
   struct bpf_func_info *func_info ;
   struct bpf_func_info_aux *func_info_aux ;
   struct bpf_line_info *linfo ;
   void **jited_linfo ;
   u32 func_info_cnt ;
   u32 nr_linfo ;
   u32 linfo_idx ;
   u32 num_exentries ;
   struct exception_table_entry *extable ;
   struct bpf_prog_stats *stats ;
   union __anonunion_643 __anonCompField_bpf_prog_aux_148 ;
};
#line 686 
struct bpf_cgroup_storage;
#line 686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array_item {
   struct bpf_prog *prog ;
   struct bpf_cgroup_storage *cgroup_storage[2U] ;
};
#line 691  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array {
   struct callback_head rcu ;
   struct bpf_prog_array_item items[0U] ;
};
#line 1335 
struct cgroup;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage_map;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_storage_buffer {
   struct callback_head rcu ;
   char data[0U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
union __anonunion_645 {
   struct bpf_storage_buffer *buf ;
   void *percpu_buf ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage {
   union __anonunion_645 __anonCompField_bpf_cgroup_storage_150 ;
   struct bpf_cgroup_storage_map *map ;
   struct bpf_cgroup_storage_key key ;
   struct list_head list ;
   struct rb_node node ;
   struct callback_head rcu ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct cgroup_bpf {
   struct bpf_prog_array *effective[26U] ;
   struct list_head progs[26U] ;
   u32 flags[26U] ;
   struct bpf_prog_array *inactive ;
   struct percpu_ref refcnt ;
   struct work_struct release_work ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work;
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_worker {
   unsigned int flags ;
   raw_spinlock_t lock ;
   struct list_head work_list ;
   struct list_head delayed_work_list ;
   struct task_struct *task ;
   struct kthread_work *current_work ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work {
   struct list_head node ;
   void (*func)(struct kthread_work *) ;
   struct kthread_worker *worker ;
   int canceling ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_delayed_work {
   struct kthread_work work ;
   struct timer_list timer ;
};
#line 199 
struct cgroup_subsys_state;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group_cpu {
   seqcount_t seq ;
   unsigned int tasks[3U] ;
   u32 state_mask ;
   u32 times[6U] ;
   u64 state_start ;
   u32 times_prev[2U][6U] ;
};
#line 96 
struct psi_group;
#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group {
   struct mutex avgs_lock ;
   struct psi_group_cpu *pcpu ;
   u64 avg_total[5U] ;
   u64 avg_last_update ;
   u64 avg_next_update ;
   struct delayed_work avgs_work ;
   u64 total[2U][5U] ;
   unsigned long avg[5U][3U] ;
   atomic_t poll_scheduled ;
   struct kthread_worker *poll_kworker ;
   struct kthread_delayed_work poll_work ;
   struct mutex trigger_lock ;
   struct list_head triggers ;
   u32 nr_triggers[5U] ;
   u32 poll_states ;
   u64 poll_min_period ;
   u64 polling_total[5U] ;
   u64 polling_next_update ;
   u64 polling_until ;
};
#line 166 
struct cgroup_root;
#line 167 
struct cgroup_subsys;
#line 168 
struct cgroup_taskset;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_file {
   struct kernfs_node *kn ;
   unsigned long notified_at ;
   struct timer_list notify_timer ;
};
#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys_state {
   struct cgroup *cgroup ;
   struct cgroup_subsys *ss ;
   struct percpu_ref refcnt ;
   struct list_head sibling ;
   struct list_head children ;
   struct list_head rstat_css_node ;
   int id ;
   unsigned int flags ;
   u64 serial_nr ;
   atomic_t online_cnt ;
   struct work_struct destroy_work ;
   struct rcu_work destroy_rwork ;
   struct cgroup_subsys_state *parent ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct css_set {
   struct cgroup_subsys_state *subsys[14U] ;
   refcount_t refcount ;
   struct css_set *dom_cset ;
   struct cgroup *dfl_cgrp ;
   int nr_tasks ;
   struct list_head tasks ;
   struct list_head mg_tasks ;
   struct list_head dying_tasks ;
   struct list_head task_iters ;
   struct list_head e_cset_node[14U] ;
   struct list_head threaded_csets ;
   struct list_head threaded_csets_node ;
   struct hlist_node hlist ;
   struct list_head cgrp_links ;
   struct list_head mg_preload_node ;
   struct list_head mg_node ;
   struct cgroup *mg_src_cgrp ;
   struct cgroup *mg_dst_cgrp ;
   struct css_set *mg_dst_cset ;
   bool dead ;
   struct callback_head callback_head ;
};
#line 279  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_base_stat {
   struct task_cputime cputime ;
};
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_rstat_cpu {
   struct u64_stats_sync bsync ;
   struct cgroup_base_stat bstat ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup *updated_children ;
   struct cgroup *updated_next ;
};
#line 332  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_freezer_state {
   bool freeze ;
   int e_freeze ;
   int nr_frozen_descendants ;
   int nr_frozen_tasks ;
};
#line 351  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup {
   struct cgroup_subsys_state self ;
   unsigned long flags ;
   int level ;
   int max_depth ;
   int nr_descendants ;
   int nr_dying_descendants ;
   int max_descendants ;
   int nr_populated_csets ;
   int nr_populated_domain_children ;
   int nr_populated_threaded_children ;
   int nr_threaded_children ;
   struct kernfs_node *kn ;
   struct cgroup_file procs_file ;
   struct cgroup_file events_file ;
   u16 subtree_control ;
   u16 subtree_ss_mask ;
   u16 old_subtree_control ;
   u16 old_subtree_ss_mask ;
   struct cgroup_subsys_state *subsys[14U] ;
   struct cgroup_root *root ;
   struct list_head cset_links ;
   struct list_head e_csets[14U] ;
   struct cgroup *dom_cgrp ;
   struct cgroup *old_dom_cgrp ;
   struct cgroup_rstat_cpu *rstat_cpu ;
   struct list_head rstat_css_list ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup_base_stat bstat ;
   struct prev_cputime prev_cputime ;
   struct list_head pidlists ;
   struct mutex pidlist_mutex ;
   wait_queue_head_t offline_waitq ;
   struct work_struct release_agent_work ;
   struct psi_group psi ;
   struct cgroup_bpf bpf ;
   atomic_t congestion_count ;
   struct cgroup_freezer_state freezer ;
   u64 ancestor_ids[] ;
};
#line 489  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_root {
   struct kernfs_root *kf_root ;
   unsigned int subsys_mask ;
   int hierarchy_id ;
   struct cgroup cgrp ;
   u64 cgrp_ancestor_id_storage ;
   atomic_t nr_cgrps ;
   struct list_head root_list ;
   unsigned int flags ;
   char release_agent_path[4096U] ;
   char name[64U] ;
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cftype {
   char name[64U] ;
   unsigned long private ;
   size_t max_write_len ;
   unsigned int flags ;
   unsigned int file_offset ;
   struct cgroup_subsys *ss ;
   struct list_head node ;
   struct kernfs_ops *kf_ops ;
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   u64 (*read_u64)(struct cgroup_subsys_state *, struct cftype *) ;
   s64 (*read_s64)(struct cgroup_subsys_state *, struct cftype *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   int (*write_u64)(struct cgroup_subsys_state *, struct cftype *, u64 ) ;
   int (*write_s64)(struct cgroup_subsys_state *, struct cftype *, s64 ) ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 616  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys {
   struct cgroup_subsys_state *(*css_alloc)(struct cgroup_subsys_state *) ;
   int (*css_online)(struct cgroup_subsys_state *) ;
   void (*css_offline)(struct cgroup_subsys_state *) ;
   void (*css_released)(struct cgroup_subsys_state *) ;
   void (*css_free)(struct cgroup_subsys_state *) ;
   void (*css_reset)(struct cgroup_subsys_state *) ;
   void (*css_rstat_flush)(struct cgroup_subsys_state *, int ) ;
   int (*css_extra_stat_show)(struct seq_file *, struct cgroup_subsys_state *) ;
   int (*can_attach)(struct cgroup_taskset *) ;
   void (*cancel_attach)(struct cgroup_taskset *) ;
   void (*attach)(struct cgroup_taskset *) ;
   void (*post_attach)(void) ;
   int (*can_fork)(struct task_struct *) ;
   void (*cancel_fork)(struct task_struct *) ;
   void (*fork)(struct task_struct *) ;
   void (*exit)(struct task_struct *) ;
   void (*release)(struct task_struct *) ;
   void (*bind)(struct cgroup_subsys_state *) ;
   bool early_init : 1 ;
   bool implicit_on_dfl : 1 ;
   bool threaded : 1 ;
   bool broken_hierarchy : 1 ;
   bool warned_broken_hierarchy : 1 ;
   int id ;
   char *name ;
   char *legacy_name ;
   struct cgroup_root *root ;
   struct idr css_idr ;
   struct list_head cfts ;
   struct cftype *dfl_cftypes ;
   struct cftype *legacy_cftypes ;
   unsigned int depends_on ;
};
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct __anonstruct_647 {
   u8 is_data ;
   u8 padding ;
   u16 prioidx ;
   u32 classid ;
} __attribute__((__packed__));
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
union __anonunion_646 {
   struct __anonstruct_647 __anonCompField___anonunion_646_151 ;
   u64 val ;
};
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct sock_cgroup_data {
   union __anonunion_646 __anonCompField_sock_cgroup_data_152 ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup.h"
struct cgroup_namespace {
   refcount_t count ;
   struct ns_common ns ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct css_set *root_cset ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netprio_cgroup.h"
struct netprio_map {
   struct callback_head rcu ;
   u32 priomap_len ;
   u32 priomap[] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_mem_info {
   u32 type ;
   u32 id ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_rxq_info {
   struct net_device *dev ;
   u32 queue_index ;
   u32 reg_state ;
   struct xdp_mem_info mem ;
} __attribute__((__aligned__(64)));
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_frame {
   void *data ;
   u16 len ;
   u16 headroom ;
   u16 metasize ;
   struct xdp_mem_info mem ;
   struct net_device *dev_rx ;
};
#line 175 
struct netdev_bpf;
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/security.h"
struct xfrm_policy;
#line 161 
struct xfrm_state;
#line 178 
struct request_sock;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct sighand_struct {
   spinlock_t siglock ;
   refcount_t count ;
   wait_queue_head_t signalfd_wqh ;
   struct k_sigaction action[64U] ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   u64 ac_utime ;
   u64 ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct cpu_itimer {
   u64 expires ;
   u64 incr ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct task_cputime_atomic {
   atomic64_t utime ;
   atomic64_t stime ;
   atomic64_t sum_exec_runtime ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct thread_group_cputimer {
   struct task_cputime_atomic cputime_atomic ;
};
#line 80 
struct tty_struct;
#line 80 
struct autogroup;
#line 80 
struct tty_audit_buf;
#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct signal_struct {
   refcount_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   struct list_head thread_head ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   struct hlist_head multiprocess ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   unsigned int is_child_subreaper : 1 ;
   unsigned int has_child_subreaper : 1 ;
   int posix_timer_id ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct posix_cputimers posix_cputimers ;
   struct pid *pids[4U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   struct autogroup *autogroup ;
   seqlock_t stats_lock ;
   u64 utime ;
   u64 stime ;
   u64 cutime ;
   u64 cstime ;
   u64 gtime ;
   u64 cgtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
   bool oom_flag_origin ;
   short oom_score_adj ;
   short oom_score_adj_min ;
   struct mm_struct *oom_mm ;
   struct mutex cred_guard_mutex ;
} __attribute__((__designated_init__));
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlmsghdr {
   __u32 nlmsg_len ;
   __u16 nlmsg_type ;
   __u16 nlmsg_flags ;
   __u32 nlmsg_seq ;
   __u32 nlmsg_pid ;
};
#line 211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_ext_ack {
   char *_msg ;
   struct nlattr *bad_attr ;
   u8 cookie[20U] ;
   u8 cookie_len ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
union __anonunion_670 {
   u8 ctx[48U] ;
   long args[6U] ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_callback {
   struct sk_buff *skb ;
   struct nlmsghdr *nlh ;
   int (*dump)(struct sk_buff *, struct netlink_callback *) ;
   int (*done)(struct netlink_callback *) ;
   void *data ;
   struct module *module ;
   struct netlink_ext_ack *extack ;
   u16 family ;
   u16 min_dump_alloc ;
   bool strict_check ;
   u16 answer_flags ;
   unsigned int prev_seq ;
   unsigned int seq ;
   union __anonunion_670 __anonCompField_netlink_callback_153 ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/neighbour.h"
struct ndmsg {
   __u8 ndm_family ;
   __u8 ndm_pad1 ;
   __u16 ndm_pad2 ;
   __s32 ndm_ifindex ;
   __u16 ndm_state ;
   __u8 ndm_flags ;
   __u8 ndm_type ;
};
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct rtnl_link_stats64 {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 rx_errors ;
   __u64 tx_errors ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
   __u64 multicast ;
   __u64 collisions ;
   __u64 rx_length_errors ;
   __u64 rx_over_errors ;
   __u64 rx_crc_errors ;
   __u64 rx_frame_errors ;
   __u64 rx_fifo_errors ;
   __u64 rx_missed_errors ;
   __u64 tx_aborted_errors ;
   __u64 tx_carrier_errors ;
   __u64 tx_fifo_errors ;
   __u64 tx_heartbeat_errors ;
   __u64 tx_window_errors ;
   __u64 rx_compressed ;
   __u64 tx_compressed ;
   __u64 rx_nohandler ;
};
#line 753  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct ifla_vf_guid {
   __u32 vf ;
   __u64 guid ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_stats {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 broadcast ;
   __u64 multicast ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_info {
   __u32 vf ;
   __u8 mac[32U] ;
   __u32 vlan ;
   __u32 qos ;
   __u32 spoofchk ;
   __u32 linkstate ;
   __u32 min_tx_rate ;
   __u32 max_tx_rate ;
   __u32 rss_query_en ;
   __u32 trusted ;
   __be16 vlan_proto ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/pkt_sched.h"
struct tc_stats {
   __u64 bytes ;
   __u32 packets ;
   __u32 drops ;
   __u32 overlimits ;
   __u32 bps ;
   __u32 pps ;
   __u32 qlen ;
   __u32 backlog ;
};
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/pkt_sched.h"
struct tc_sizespec {
   unsigned char cell_log ;
   unsigned char size_log ;
   short cell_align ;
   int overhead ;
   unsigned int linklayer ;
   unsigned int mpu ;
   unsigned int mtu ;
   unsigned int tsize ;
};
#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hashtable.h"
struct netpoll_info;
#line 119 
struct phy_device;
#line 120 
struct dsa_port;
#line 121 
struct sfp_bus;
#line 122 
struct wireless_dev;
#line 123 
struct wpan_dev;
#line 124 
struct mpls_dev;
#line 125 
struct udp_tunnel_info;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
enum netdev_tx {
    __NETDEV_TX_MIN = -2147483648,
    NETDEV_TX_OK = 0,
    NETDEV_TX_BUSY = 16
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum netdev_tx netdev_tx_t;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};
#line 195 
struct neigh_parms;
#line 217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_hw_addr_list {
   struct list_head list ;
   int count ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct hh_cache {
   unsigned int hh_len ;
   seqlock_t hh_lock ;
   unsigned long hh_data[16U] ;
};
#line 263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct header_ops {
   int (*create)(struct sk_buff *, struct net_device *, unsigned short , void *, void *, unsigned int ) ;
   int (*parse)(struct sk_buff *, unsigned char *) ;
   int (*cache)(struct neighbour *, struct hh_cache *, __be16 ) ;
   void (*cache_update)(struct hh_cache *, struct net_device *, unsigned char *) ;
   bool (*validate)(char *, unsigned int ) ;
   __be16 (*parse_protocol)(struct sk_buff *) ;
};
#line 372 
enum rx_handler_result {
    RX_HANDLER_CONSUMED = 0,
    RX_HANDLER_ANOTHER = 1,
    RX_HANDLER_EXACT = 2,
    RX_HANDLER_PASS = 3
};
#line 379  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum rx_handler_result rx_handler_result_t;
#line 421  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef rx_handler_result_t rx_handler_func_t(struct sk_buff **);
#line 589 
struct Qdisc;
#line 589 
struct xdp_umem;
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   struct Qdisc *qdisc_sleeping ;
   struct kobject kobj ;
   int numa_node ;
   unsigned long tx_maxrate ;
   unsigned long trans_timeout ;
   struct net_device *sb_dev ;
   struct xdp_umem *umem ;
   spinlock_t _xmit_lock ;
   int xmit_lock_owner ;
   unsigned long trans_start ;
   unsigned long state ;
   struct dql dql ;
} __attribute__((__aligned__(64)));
#line 662  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_map {
   unsigned int len ;
   struct callback_head rcu ;
   u16 cpus[0U] ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow {
   u16 cpu ;
   u16 filter ;
   unsigned int last_qtail ;
};
#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow_table {
   unsigned int mask ;
   struct callback_head rcu ;
   struct rps_dev_flow flows[0U] ;
};
#line 736  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_rx_queue {
   struct rps_map *rps_map ;
   struct rps_dev_flow_table *rps_flow_table ;
   struct kobject kobj ;
   struct net_device *dev ;
   struct xdp_rxq_info xdp_rxq ;
   struct xdp_umem *umem ;
} __attribute__((__aligned__(64)));
#line 764  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_map {
   unsigned int len ;
   unsigned int alloc_len ;
   struct callback_head rcu ;
   u16 queues[0U] ;
};
#line 777  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_dev_maps {
   struct callback_head rcu ;
   struct xps_map *attr_map[0U] ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_tc_txq {
   u16 count ;
   u16 offset ;
};
#line 803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_fcoe_hbainfo {
   char manufacturer[64U] ;
   char serial_number[64U] ;
   char hardware_version[64U] ;
   char driver_version[64U] ;
   char optionrom_version[64U] ;
   char firmware_version[64U] ;
   char model[256U] ;
   char model_description[256U] ;
};
#line 820  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_phys_item_id {
   unsigned char id[32U] ;
   unsigned char id_len ;
};
#line 833 
enum tc_setup_type {
    TC_SETUP_QDISC_MQPRIO = 0,
    TC_SETUP_CLSU32 = 1,
    TC_SETUP_CLSFLOWER = 2,
    TC_SETUP_CLSMATCHALL = 3,
    TC_SETUP_CLSBPF = 4,
    TC_SETUP_BLOCK = 5,
    TC_SETUP_QDISC_CBS = 6,
    TC_SETUP_QDISC_RED = 7,
    TC_SETUP_QDISC_PRIO = 8,
    TC_SETUP_QDISC_MQ = 9,
    TC_SETUP_QDISC_ETF = 10,
    TC_SETUP_ROOT_QDISC = 11,
    TC_SETUP_QDISC_GRED = 12,
    TC_SETUP_QDISC_TAPRIO = 13,
    TC_SETUP_FT = 14
};
#line 851 
enum bpf_netdev_command {
    XDP_SETUP_PROG = 0,
    XDP_SETUP_PROG_HW = 1,
    XDP_QUERY_PROG = 2,
    XDP_QUERY_PROG_HW = 3,
    BPF_OFFLOAD_MAP_ALLOC = 4,
    BPF_OFFLOAD_MAP_FREE = 5,
    XDP_SETUP_XSK_UMEM = 6
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_675 {
   u32 flags ;
   struct bpf_prog *prog ;
   struct netlink_ext_ack *extack ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_676 {
   u32 prog_id ;
   u32 prog_flags ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_677 {
   struct bpf_offloaded_map *offmap ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_xsk_678 {
   struct xdp_umem *umem ;
   u16 queue_id ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_674 {
   struct __anonstruct_675 __anonCompField___anonunion_674_155 ;
   struct __anonstruct_676 __anonCompField___anonunion_674_156 ;
   struct __anonstruct_677 __anonCompField___anonunion_674_157 ;
   struct __anonstruct_xsk_678 xsk ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_bpf {
   enum bpf_netdev_command command ;
   union __anonunion_674 __anonCompField_netdev_bpf_158 ;
};
#line 911  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xfrmdev_ops {
   int (*xdo_dev_state_add)(struct xfrm_state *) ;
   void (*xdo_dev_state_delete)(struct xfrm_state *) ;
   void (*xdo_dev_state_free)(struct xfrm_state *) ;
   bool (*xdo_dev_offload_ok)(struct sk_buff *, struct xfrm_state *) ;
   void (*xdo_dev_state_advance_esn)(struct xfrm_state *) ;
};
#line 921  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct dev_ifalias {
   struct callback_head rcuhead ;
   char ifalias[] ;
};
#line 926 
struct tlsdev_ops;
#line 929  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_name_node {
   struct hlist_node hlist ;
   struct list_head list ;
   struct net_device *dev ;
   char *name ;
};
#line 1257 
struct devlink_port;
#line 1257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_ops {
   int (*ndo_init)(struct net_device *) ;
   void (*ndo_uninit)(struct net_device *) ;
   int (*ndo_open)(struct net_device *) ;
   int (*ndo_stop)(struct net_device *) ;
   netdev_tx_t (*ndo_start_xmit)(struct sk_buff *, struct net_device *) ;
   netdev_features_t (*ndo_features_check)(struct sk_buff *, struct net_device *, netdev_features_t ) ;
   u16 (*ndo_select_queue)(struct net_device *, struct sk_buff *, struct net_device *) ;
   void (*ndo_change_rx_flags)(struct net_device *, int ) ;
   void (*ndo_set_rx_mode)(struct net_device *) ;
   int (*ndo_set_mac_address)(struct net_device *, void *) ;
   int (*ndo_validate_addr)(struct net_device *) ;
   int (*ndo_do_ioctl)(struct net_device *, struct ifreq *, int ) ;
   int (*ndo_set_config)(struct net_device *, struct ifmap *) ;
   int (*ndo_change_mtu)(struct net_device *, int ) ;
   int (*ndo_neigh_setup)(struct net_device *, struct neigh_parms *) ;
   void (*ndo_tx_timeout)(struct net_device *) ;
   void (*ndo_get_stats64)(struct net_device *, struct rtnl_link_stats64 *) ;
   bool (*ndo_has_offload_stats)(struct net_device *, int ) ;
   int (*ndo_get_offload_stats)(int , struct net_device *, void *) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device *) ;
   int (*ndo_vlan_rx_add_vid)(struct net_device *, __be16 , u16 ) ;
   int (*ndo_vlan_rx_kill_vid)(struct net_device *, __be16 , u16 ) ;
   void (*ndo_poll_controller)(struct net_device *) ;
   int (*ndo_netpoll_setup)(struct net_device *, struct netpoll_info *) ;
   void (*ndo_netpoll_cleanup)(struct net_device *) ;
   int (*ndo_set_vf_mac)(struct net_device *, int , u8 *) ;
   int (*ndo_set_vf_vlan)(struct net_device *, int , u16 , u8 , __be16 ) ;
   int (*ndo_set_vf_rate)(struct net_device *, int , int , int ) ;
   int (*ndo_set_vf_spoofchk)(struct net_device *, int , bool ) ;
   int (*ndo_set_vf_trust)(struct net_device *, int , bool ) ;
   int (*ndo_get_vf_config)(struct net_device *, int , struct ifla_vf_info *) ;
   int (*ndo_set_vf_link_state)(struct net_device *, int , int ) ;
   int (*ndo_get_vf_stats)(struct net_device *, int , struct ifla_vf_stats *) ;
   int (*ndo_set_vf_port)(struct net_device *, int , struct nlattr **) ;
   int (*ndo_get_vf_port)(struct net_device *, int , struct sk_buff *) ;
   int (*ndo_get_vf_guid)(struct net_device *, int , struct ifla_vf_guid *, struct ifla_vf_guid *) ;
   int (*ndo_set_vf_guid)(struct net_device *, int , u64 , int ) ;
   int (*ndo_set_vf_rss_query_en)(struct net_device *, int , bool ) ;
   int (*ndo_setup_tc)(struct net_device *, enum tc_setup_type , void *) ;
   int (*ndo_fcoe_enable)(struct net_device *) ;
   int (*ndo_fcoe_disable)(struct net_device *) ;
   int (*ndo_fcoe_ddp_setup)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_ddp_done)(struct net_device *, u16 ) ;
   int (*ndo_fcoe_ddp_target)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_get_hbainfo)(struct net_device *, struct netdev_fcoe_hbainfo *) ;
   int (*ndo_fcoe_get_wwn)(struct net_device *, u64 *, int ) ;
   int (*ndo_rx_flow_steer)(struct net_device *, struct sk_buff *, u16 , u32 ) ;
   int (*ndo_add_slave)(struct net_device *, struct net_device *, struct netlink_ext_ack *) ;
   int (*ndo_del_slave)(struct net_device *, struct net_device *) ;
   netdev_features_t (*ndo_fix_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_set_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_neigh_construct)(struct net_device *, struct neighbour *) ;
   void (*ndo_neigh_destroy)(struct net_device *, struct neighbour *) ;
   int (*ndo_fdb_add)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 , u16 , struct netlink_ext_ack *) ;
   int (*ndo_fdb_del)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 ) ;
   int (*ndo_fdb_dump)(struct sk_buff *, struct netlink_callback *, struct net_device *, struct net_device *, int *) ;
   int (*ndo_fdb_get)(struct sk_buff *, struct nlattr **, struct net_device *, unsigned char *, u16 , u32 , u32 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_setlink)(struct net_device *, struct nlmsghdr *, u16 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_getlink)(struct sk_buff *, u32 , u32 , struct net_device *, u32 , int ) ;
   int (*ndo_bridge_dellink)(struct net_device *, struct nlmsghdr *, u16 ) ;
   int (*ndo_change_carrier)(struct net_device *, bool ) ;
   int (*ndo_get_phys_port_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_port_parent_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_phys_port_name)(struct net_device *, char *, size_t ) ;
   void (*ndo_udp_tunnel_add)(struct net_device *, struct udp_tunnel_info *) ;
   void (*ndo_udp_tunnel_del)(struct net_device *, struct udp_tunnel_info *) ;
   void *(*ndo_dfwd_add_station)(struct net_device *, struct net_device *) ;
   void (*ndo_dfwd_del_station)(struct net_device *, void *) ;
   int (*ndo_set_tx_maxrate)(struct net_device *, int , u32 ) ;
   int (*ndo_get_iflink)(struct net_device *) ;
   int (*ndo_change_proto_down)(struct net_device *, bool ) ;
   int (*ndo_fill_metadata_dst)(struct net_device *, struct sk_buff *) ;
   void (*ndo_set_rx_headroom)(struct net_device *, int ) ;
   int (*ndo_bpf)(struct net_device *, struct netdev_bpf *) ;
   int (*ndo_xdp_xmit)(struct net_device *, int , struct xdp_frame **, u32 ) ;
   int (*ndo_xsk_wakeup)(struct net_device *, u32 , u32 ) ;
   struct devlink_port *(*ndo_get_devlink_port)(struct net_device *) ;
};
#line 1492 
enum ldv_14511 {
    NETREG_UNINITIALIZED = 0,
    NETREG_REGISTERED = 1,
    NETREG_UNREGISTERING = 2,
    NETREG_UNREGISTERED = 3,
    NETREG_RELEASED = 4,
    NETREG_DUMMY = 5
};
#line 1501 
enum ldv_14512 {
    RTNL_LINK_INITIALIZED = 0,
    RTNL_LINK_INITIALIZING = 1
};
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_adj_list_679 {
   struct list_head upper ;
   struct list_head lower ;
};
#line 1795 
struct iw_handler_def;
#line 1795 
struct iw_public_data;
#line 1795 
struct l3mdev_ops;
#line 1795 
struct ndisc_ops;
#line 1795 
struct vlan_info;
#line 1795 
struct tipc_bearer;
#line 1795 
struct in_device;
#line 1795 
struct dn_dev;
#line 1795 
struct inet6_dev;
#line 1795 
struct mini_Qdisc;
#line 1795 
struct cpu_rmap;
#line 1795 
struct pcpu_lstats;
#line 1795 
struct pcpu_sw_netstats;
#line 1795 
struct pcpu_dstats;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_680 {
   void *ml_priv ;
   struct pcpu_lstats *lstats ;
   struct pcpu_sw_netstats *tstats ;
   struct pcpu_dstats *dstats ;
};
#line 1795 
struct garp_port;
#line 1795 
struct mrp_port;
#line 1795 
struct rtnl_link_ops;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device {
   char name[16U] ;
   struct netdev_name_node *name_node ;
   struct dev_ifalias *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   int irq ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   struct list_head unreg_list ;
   struct list_head close_list ;
   struct list_head ptype_all ;
   struct list_head ptype_specific ;
   struct __anonstruct_adj_list_679 adj_list ;
   netdev_features_t features ;
   netdev_features_t hw_features ;
   netdev_features_t wanted_features ;
   netdev_features_t vlan_features ;
   netdev_features_t hw_enc_features ;
   netdev_features_t mpls_features ;
   netdev_features_t gso_partial_features ;
   int ifindex ;
   int group ;
   struct net_device_stats stats ;
   atomic_long_t rx_dropped ;
   atomic_long_t tx_dropped ;
   atomic_long_t rx_nohandler ;
   atomic_t carrier_up_count ;
   atomic_t carrier_down_count ;
   struct iw_handler_def *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops *netdev_ops ;
   struct ethtool_ops *ethtool_ops ;
   struct l3mdev_ops *l3mdev_ops ;
   struct ndisc_ops *ndisc_ops ;
   struct xfrmdev_ops *xfrmdev_ops ;
   struct tlsdev_ops *tlsdev_ops ;
   struct header_ops *header_ops ;
   unsigned int flags ;
   unsigned int priv_flags ;
   unsigned short gflags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned int mtu ;
   unsigned int min_mtu ;
   unsigned int max_mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned char min_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   unsigned char perm_addr[32U] ;
   unsigned char addr_assign_type ;
   unsigned char addr_len ;
   unsigned char upper_level ;
   unsigned char lower_level ;
   unsigned short neigh_priv_len ;
   unsigned short dev_id ;
   unsigned short dev_port ;
   spinlock_t addr_list_lock ;
   unsigned char name_assign_type ;
   bool uc_promisc ;
   struct netdev_hw_addr_list uc ;
   struct netdev_hw_addr_list mc ;
   struct netdev_hw_addr_list dev_addrs ;
   struct kset *queues_kset ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   struct vlan_info *vlan_info ;
   struct dsa_port *dsa_ptr ;
   struct tipc_bearer *tipc_ptr ;
   void *atalk_ptr ;
   struct in_device *ip_ptr ;
   struct dn_dev *dn_ptr ;
   struct inet6_dev *ip6_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   struct wpan_dev *ieee802154_ptr ;
   struct mpls_dev *mpls_ptr ;
   unsigned char *dev_addr ;
   struct netdev_rx_queue *_rx ;
   unsigned int num_rx_queues ;
   unsigned int real_num_rx_queues ;
   struct bpf_prog *xdp_prog ;
   unsigned long gro_flush_timeout ;
   rx_handler_func_t *rx_handler ;
   void *rx_handler_data ;
   struct mini_Qdisc *miniq_ingress ;
   struct netdev_queue *ingress_queue ;
   struct nf_hook_entries *nf_hooks_ingress ;
   unsigned char broadcast[32U] ;
   struct cpu_rmap *rx_cpu_rmap ;
   struct hlist_node index_hlist ;
   struct netdev_queue *_tx ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   struct Qdisc *qdisc ;
   struct hlist_head qdisc_hash[16U] ;
   unsigned int tx_queue_len ;
   spinlock_t tx_global_lock ;
   int watchdog_timeo ;
   struct xps_dev_maps *xps_cpus_map ;
   struct xps_dev_maps *xps_rxqs_map ;
   struct mini_Qdisc *miniq_egress ;
   struct timer_list watchdog_timer ;
   int *pcpu_refcnt ;
   struct list_head todo_list ;
   struct list_head link_watch_list ;
   enum ldv_14511 reg_state : 8 ;
   bool dismantle ;
   enum ldv_14512 rtnl_link_state : 16 ;
   bool needs_free_netdev ;
   void (*priv_destructor)(struct net_device *) ;
   struct netpoll_info *npinfo ;
   possible_net_t nd_net ;
   union __anonunion_680 __anonCompField_net_device_159 ;
   struct garp_port *garp_port ;
   struct mrp_port *mrp_port ;
   struct device dev ;
   struct attribute_group *sysfs_groups[4U] ;
   struct attribute_group *sysfs_rx_queue_group ;
   struct rtnl_link_ops *rtnl_link_ops ;
   unsigned int gso_max_size ;
   u16 gso_max_segs ;
   struct dcbnl_rtnl_ops *dcbnl_ops ;
   s16 num_tc ;
   struct netdev_tc_txq tc_to_txq[16U] ;
   u8 prio_tc_map[16U] ;
   unsigned int fcoe_ddp_xid ;
   struct netprio_map *priomap ;
   struct phy_device *phydev ;
   struct sfp_bus *sfp_bus ;
   struct lock_class_key qdisc_tx_busylock_key ;
   struct lock_class_key qdisc_running_key ;
   struct lock_class_key qdisc_xmit_lock_key ;
   struct lock_class_key addr_list_lock_key ;
   bool proto_down ;
   unsigned int wol_enabled : 1 ;
};
#line 2400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_sw_netstats {
   u64 rx_packets ;
   u64 rx_bytes ;
   u64 tx_packets ;
   u64 tx_bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(32)));
#line 2408  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_lstats {
   u64_stats_t packets ;
   u64_stats_t bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 534  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
typedef unsigned long kernel_ulong_t;
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct acpi_device_id {
   __u8 id[9U] ;
   kernel_ulong_t driver_data ;
   __u32 cls ;
   __u32 cls_msk ;
};
#line 260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct of_device_id {
   char name[32U] ;
   char type[32U] ;
   char compatible[128U] ;
   void *data ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/usb/ch9.h"
struct usb_device_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __le16 bcdUSB ;
   __u8 bDeviceClass ;
   __u8 bDeviceSubClass ;
   __u8 bDeviceProtocol ;
   __u8 bMaxPacketSize0 ;
   __le16 idVendor ;
   __le16 idProduct ;
   __le16 bcdDevice ;
   __u8 iManufacturer ;
   __u8 iProduct ;
   __u8 iSerialNumber ;
   __u8 bNumConfigurations ;
} __attribute__((__packed__));
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/usb/ch9.h"
struct usb_config_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __le16 wTotalLength ;
   __u8 bNumInterfaces ;
   __u8 bConfigurationValue ;
   __u8 iConfiguration ;
   __u8 bmAttributes ;
   __u8 bMaxPower ;
} __attribute__((__packed__));
#line 382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/usb/ch9.h"
struct usb_interface_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bInterfaceNumber ;
   __u8 bAlternateSetting ;
   __u8 bNumEndpoints ;
   __u8 bInterfaceClass ;
   __u8 bInterfaceSubClass ;
   __u8 bInterfaceProtocol ;
   __u8 iInterface ;
} __attribute__((__packed__));
#line 400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/usb/ch9.h"
struct usb_endpoint_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bEndpointAddress ;
   __u8 bmAttributes ;
   __le16 wMaxPacketSize ;
   __u8 bInterval ;
   __u8 bRefresh ;
   __u8 bSynchAddress ;
} __attribute__((__packed__));
#line 670  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/usb/ch9.h"
struct usb_ssp_isoc_ep_comp_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __le16 wReseved ;
   __le32 dwBytesPerInterval ;
} __attribute__((__packed__));
#line 682  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/usb/ch9.h"
struct usb_ss_ep_comp_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bMaxBurst ;
   __u8 bmAttributes ;
   __le16 wBytesPerInterval ;
} __attribute__((__packed__));
#line 776  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/usb/ch9.h"
struct usb_interface_assoc_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bFirstInterface ;
   __u8 bInterfaceCount ;
   __u8 bFunctionClass ;
   __u8 bFunctionSubClass ;
   __u8 bFunctionProtocol ;
   __u8 iFunction ;
} __attribute__((__packed__));
#line 837  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/usb/ch9.h"
struct usb_bos_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __le16 wTotalLength ;
   __u8 bNumDeviceCaps ;
} __attribute__((__packed__));
#line 888  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/usb/ch9.h"
struct usb_ext_cap_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bDevCapabilityType ;
   __le32 bmAttributes ;
} __attribute__((__packed__));
#line 910  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/usb/ch9.h"
struct usb_ss_cap_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bDevCapabilityType ;
   __u8 bmAttributes ;
   __le16 wSpeedSupported ;
   __u8 bFunctionalitySupport ;
   __u8 bU1devExitLat ;
   __le16 bU2DevExitLat ;
} __attribute__((__packed__));
#line 933  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/usb/ch9.h"
struct usb_ss_container_id_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bDevCapabilityType ;
   __u8 bReserved ;
   __u8 ContainerID[16U] ;
} __attribute__((__packed__));
#line 948  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/usb/ch9.h"
struct usb_ssp_cap_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bDevCapabilityType ;
   __u8 bReserved ;
   __le32 bmAttributes ;
   __le16 wFunctionalitySupport ;
   __le16 wReserved ;
   __le32 bmSublinkSpeedAttr[1U] ;
} __attribute__((__packed__));
#line 1073  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/usb/ch9.h"
struct usb_ptm_cap_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bDevCapabilityType ;
} __attribute__((__packed__));
#line 1134 
enum usb_device_speed {
    USB_SPEED_UNKNOWN = 0,
    USB_SPEED_LOW = 1,
    USB_SPEED_FULL = 2,
    USB_SPEED_HIGH = 3,
    USB_SPEED_WIRELESS = 4,
    USB_SPEED_SUPER = 5,
    USB_SPEED_SUPER_PLUS = 6
};
#line 1144 
enum usb_device_state {
    USB_STATE_NOTATTACHED = 0,
    USB_STATE_ATTACHED = 1,
    USB_STATE_POWERED = 2,
    USB_STATE_RECONNECTING = 3,
    USB_STATE_UNAUTHENTICATED = 4,
    USB_STATE_DEFAULT = 5,
    USB_STATE_ADDRESS = 6,
    USB_STATE_CONFIGURED = 7,
    USB_STATE_SUSPENDED = 8
};
#line 279  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_runtime.h"
struct usb_device;
#line 281 
struct wusb_dev;
#line 282 
struct ep_device;
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/usb.h"
struct usb_host_endpoint {
   struct usb_endpoint_descriptor desc ;
   struct usb_ss_ep_comp_descriptor ss_ep_comp ;
   struct usb_ssp_isoc_ep_comp_descriptor ssp_isoc_ep_comp ;
   struct list_head urb_list ;
   void *hcpriv ;
   struct ep_device *ep_dev ;
   unsigned char *extra ;
   int extralen ;
   int enabled ;
   int streams ;
};
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/usb.h"
struct usb_host_interface {
   struct usb_interface_descriptor desc ;
   int extralen ;
   unsigned char *extra ;
   struct usb_host_endpoint *endpoint ;
   char *string ;
};
#line 95 
enum usb_interface_condition {
    USB_INTERFACE_UNBOUND = 0,
    USB_INTERFACE_BINDING = 1,
    USB_INTERFACE_BOUND = 2,
    USB_INTERFACE_UNBINDING = 3
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/usb.h"
struct usb_interface {
   struct usb_host_interface *altsetting ;
   struct usb_host_interface *cur_altsetting ;
   unsigned int num_altsetting ;
   struct usb_interface_assoc_descriptor *intf_assoc ;
   int minor ;
   enum usb_interface_condition condition ;
   unsigned int sysfs_files_created : 1 ;
   unsigned int ep_devs_created : 1 ;
   unsigned int unregistering : 1 ;
   unsigned int needs_remote_wakeup : 1 ;
   unsigned int needs_altsetting0 : 1 ;
   unsigned int needs_binding : 1 ;
   unsigned int resetting_device : 1 ;
   unsigned int authorized : 1 ;
   struct device dev ;
   struct device *usb_dev ;
   struct work_struct reset_ws ;
};
#line 322  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/usb.h"
struct usb_interface_cache {
   unsigned int num_altsetting ;
   struct kref ref ;
   struct usb_host_interface altsetting[0U] ;
};
#line 374  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/usb.h"
struct usb_host_config {
   struct usb_config_descriptor desc ;
   char *string ;
   struct usb_interface_assoc_descriptor *intf_assoc[16U] ;
   struct usb_interface *interface[32U] ;
   struct usb_interface_cache *intf_cache[32U] ;
   unsigned char *extra ;
   int extralen ;
};
#line 396  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/usb.h"
struct usb_host_bos {
   struct usb_bos_descriptor *desc ;
   struct usb_ext_cap_descriptor *ext_cap ;
   struct usb_ss_cap_descriptor *ss_cap ;
   struct usb_ssp_cap_descriptor *ssp_cap ;
   struct usb_ss_container_id_descriptor *ss_id ;
   struct usb_ptm_cap_descriptor *ptm_cap ;
};
#line 417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/usb.h"
struct usb_devmap {
   unsigned long devicemap[2U] ;
};
#line 424 
struct mon_bus;
#line 424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/usb.h"
struct usb_bus {
   struct device *controller ;
   struct device *sysdev ;
   int busnum ;
   char *bus_name ;
   u8 uses_pio_for_control ;
   u8 otg_port ;
   unsigned int is_b_host : 1 ;
   unsigned int b_hnp_enable : 1 ;
   unsigned int no_stop_on_short : 1 ;
   unsigned int no_sg_constraint : 1 ;
   unsigned int sg_tablesize ;
   int devnum_next ;
   struct mutex devnum_next_mutex ;
   struct usb_devmap devmap ;
   struct usb_device *root_hub ;
   struct usb_bus *hs_companion ;
   int bandwidth_allocated ;
   int bandwidth_int_reqs ;
   int bandwidth_isoc_reqs ;
   unsigned int resuming_ports ;
   struct mon_bus *mon_bus ;
   int monitored ;
};
#line 469 
struct usb_tt;
#line 470 
enum usb_device_removable {
    USB_DEVICE_REMOVABLE_UNKNOWN = 0,
    USB_DEVICE_REMOVABLE = 1,
    USB_DEVICE_FIXED = 2
};
#line 502  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/usb.h"
struct usb2_lpm_parameters {
   unsigned int besl ;
   int timeout ;
};
#line 522  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/usb.h"
struct usb3_lpm_parameters {
   unsigned int mel ;
   unsigned int pel ;
   unsigned int sel ;
   int timeout ;
};
#line 631  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/usb.h"
struct usb_device {
   int devnum ;
   char devpath[16U] ;
   u32 route ;
   enum usb_device_state state ;
   enum usb_device_speed speed ;
   unsigned int rx_lanes ;
   unsigned int tx_lanes ;
   struct usb_tt *tt ;
   int ttport ;
   unsigned int toggle[2U] ;
   struct usb_device *parent ;
   struct usb_bus *bus ;
   struct usb_host_endpoint ep0 ;
   struct device dev ;
   struct usb_device_descriptor descriptor ;
   struct usb_host_bos *bos ;
   struct usb_host_config *config ;
   struct usb_host_config *actconfig ;
   struct usb_host_endpoint *ep_in[16U] ;
   struct usb_host_endpoint *ep_out[16U] ;
   char **rawdescriptors ;
   unsigned short bus_mA ;
   u8 portnum ;
   u8 level ;
   u8 devaddr ;
   unsigned int can_submit : 1 ;
   unsigned int persist_enabled : 1 ;
   unsigned int have_langid : 1 ;
   unsigned int authorized : 1 ;
   unsigned int authenticated : 1 ;
   unsigned int wusb : 1 ;
   unsigned int lpm_capable : 1 ;
   unsigned int usb2_hw_lpm_capable : 1 ;
   unsigned int usb2_hw_lpm_besl_capable : 1 ;
   unsigned int usb2_hw_lpm_enabled : 1 ;
   unsigned int usb2_hw_lpm_allowed : 1 ;
   unsigned int usb3_lpm_u1_enabled : 1 ;
   unsigned int usb3_lpm_u2_enabled : 1 ;
   int string_langid ;
   char *product ;
   char *manufacturer ;
   char *serial ;
   struct list_head filelist ;
   int maxchild ;
   u32 quirks ;
   atomic_t urbnum ;
   unsigned long active_duration ;
   unsigned long connect_time ;
   unsigned int do_remote_wakeup : 1 ;
   unsigned int reset_resume : 1 ;
   unsigned int port_is_suspended : 1 ;
   struct wusb_dev *wusb_dev ;
   int slot_id ;
   enum usb_device_removable removable ;
   struct usb2_lpm_parameters l1_params ;
   struct usb3_lpm_parameters u1_params ;
   struct usb3_lpm_parameters u2_params ;
   unsigned int lpm_disable_count ;
   u16 hub_delay ;
};
#line 1340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/usb.h"
struct usb_iso_packet_descriptor {
   unsigned int offset ;
   unsigned int length ;
   unsigned int actual_length ;
   int status ;
};
#line 1346 
struct urb;
#line 1349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/usb.h"
struct usb_anchor {
   struct list_head urb_list ;
   wait_queue_head_t wait ;
   spinlock_t lock ;
   atomic_t suspend_wakeups ;
   unsigned int poisoned : 1 ;
};
#line 1550  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/usb.h"
struct urb {
   struct kref kref ;
   int unlinked ;
   void *hcpriv ;
   atomic_t use_count ;
   atomic_t reject ;
   struct list_head urb_list ;
   struct list_head anchor_list ;
   struct usb_anchor *anchor ;
   struct usb_device *dev ;
   struct usb_host_endpoint *ep ;
   unsigned int pipe ;
   unsigned int stream_id ;
   int status ;
   unsigned int transfer_flags ;
   void *transfer_buffer ;
   dma_addr_t transfer_dma ;
   struct scatterlist *sg ;
   int num_mapped_sgs ;
   int num_sgs ;
   u32 transfer_buffer_length ;
   u32 actual_length ;
   unsigned char *setup_packet ;
   dma_addr_t setup_dma ;
   int start_frame ;
   int number_of_packets ;
   int interval ;
   int error_count ;
   void *context ;
   void (*complete)(struct urb *) ;
   struct usb_iso_packet_descriptor iso_frame_desc[0U] ;
};
#line 233  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_hdr {
   __le16 frame_control ;
   __le16 duration_id ;
   u8 addr1[6U] ;
   u8 addr2[6U] ;
   u8 addr3[6U] ;
   __le16 seq_ctrl ;
   u8 addr4[6U] ;
} __attribute__((__packed__, __aligned__(2)));
#line 1227  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_p2p_noa_desc {
   u8 count ;
   __le32 duration ;
   __le32 interval ;
   __le32 start_time ;
} __attribute__((__packed__));
#line 1234  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_p2p_noa_attr {
   u8 index ;
   u8 oppps_ctwindow ;
   struct ieee80211_p2p_noa_desc desc[4U] ;
} __attribute__((__packed__));
#line 1276  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_mcs_info {
   u8 rx_mask[10U] ;
   __le16 rx_highest ;
   u8 tx_params ;
   u8 reserved[3U] ;
} __attribute__((__packed__));
#line 1310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_ht_cap {
   __le16 cap_info ;
   u8 ampdu_params_info ;
   struct ieee80211_mcs_info mcs ;
   __le16 extended_ht_cap_info ;
   __le32 tx_BF_cap_info ;
   u8 antenna_selection_info ;
} __attribute__((__packed__));
#line 1483  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_vht_mcs_info {
   __le16 rx_mcs_map ;
   __le16 rx_highest ;
   __le16 tx_mcs_map ;
   __le16 tx_highest ;
} __attribute__((__packed__));
#line 1526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_vht_cap {
   __le32 vht_cap_info ;
   struct ieee80211_vht_mcs_info supp_mcs ;
} __attribute__((__packed__));
#line 1569  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_he_cap_elem {
   u8 mac_cap_info[6U] ;
   u8 phy_cap_info[11U] ;
} __attribute__((__packed__));
#line 1616  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_he_mcs_nss_supp {
   __le16 rx_mcs_80 ;
   __le16 tx_mcs_80 ;
   __le16 rx_mcs_160 ;
   __le16 tx_mcs_160 ;
   __le16 rx_mcs_80p80 ;
   __le16 tx_mcs_80p80 ;
} __attribute__((__packed__));
#line 1631  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_he_operation {
   __le32 he_oper_params ;
   __le16 he_mcs_nss_set ;
   u8 optional[0U] ;
} __attribute__((__packed__));
#line 1656  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_he_mu_edca_param_ac_rec {
   u8 aifsn ;
   u8 ecw_min_max ;
   u8 mu_edca_timer ;
} __attribute__((__packed__));
#line 811  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/debugfs.h"
enum nl80211_iftype {
    NL80211_IFTYPE_UNSPECIFIED = 0,
    NL80211_IFTYPE_ADHOC = 1,
    NL80211_IFTYPE_STATION = 2,
    NL80211_IFTYPE_AP = 3,
    NL80211_IFTYPE_AP_VLAN = 4,
    NL80211_IFTYPE_WDS = 5,
    NL80211_IFTYPE_MONITOR = 6,
    NL80211_IFTYPE_MESH_POINT = 7,
    NL80211_IFTYPE_P2P_CLIENT = 8,
    NL80211_IFTYPE_P2P_GO = 9,
    NL80211_IFTYPE_P2P_DEVICE = 10,
    NL80211_IFTYPE_OCB = 11,
    NL80211_IFTYPE_NAN = 12,
    NUM_NL80211_IFTYPES = 13,
    NL80211_IFTYPE_MAX = 12
};
#line 3263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/nl80211.h"
enum nl80211_reg_initiator {
    NL80211_REGDOM_SET_BY_CORE = 0,
    NL80211_REGDOM_SET_BY_USER = 1,
    NL80211_REGDOM_SET_BY_DRIVER = 2,
    NL80211_REGDOM_SET_BY_COUNTRY_IE = 3
};
#line 3320 
enum nl80211_dfs_regions {
    NL80211_DFS_UNSET = 0,
    NL80211_DFS_FCC = 1,
    NL80211_DFS_ETSI = 2,
    NL80211_DFS_JP = 3
};
#line 3327 
enum nl80211_user_reg_hint_type {
    NL80211_USER_REG_HINT_USER = 0,
    NL80211_USER_REG_HINT_CELL_BASE = 1,
    NL80211_USER_REG_HINT_INDOOR = 2
};
#line 3439 
enum nl80211_channel_type {
    NL80211_CHAN_NO_HT = 0,
    NL80211_CHAN_HT20 = 1,
    NL80211_CHAN_HT40MINUS = 2,
    NL80211_CHAN_HT40PLUS = 3
};
#line 3446 
enum nl80211_key_mode {
    NL80211_KEY_RX_TX = 0,
    NL80211_KEY_NO_TX = 1,
    NL80211_KEY_SET_TX = 2
};
#line 3452 
enum nl80211_chan_width {
    NL80211_CHAN_WIDTH_20_NOHT = 0,
    NL80211_CHAN_WIDTH_20 = 1,
    NL80211_CHAN_WIDTH_40 = 2,
    NL80211_CHAN_WIDTH_80 = 3,
    NL80211_CHAN_WIDTH_80P80 = 4,
    NL80211_CHAN_WIDTH_160 = 5,
    NL80211_CHAN_WIDTH_5 = 6,
    NL80211_CHAN_WIDTH_10 = 7
};
#line 3463 
enum nl80211_bss_scan_width {
    NL80211_BSS_CHAN_WIDTH_20 = 0,
    NL80211_BSS_CHAN_WIDTH_10 = 1,
    NL80211_BSS_CHAN_WIDTH_5 = 2
};
#line 3500 
enum nl80211_auth_type {
    NL80211_AUTHTYPE_OPEN_SYSTEM = 0,
    NL80211_AUTHTYPE_SHARED_KEY = 1,
    NL80211_AUTHTYPE_FT = 2,
    NL80211_AUTHTYPE_NETWORK_EAP = 3,
    NL80211_AUTHTYPE_SAE = 4,
    NL80211_AUTHTYPE_FILS_SK = 5,
    NL80211_AUTHTYPE_FILS_SK_PFS = 6,
    NL80211_AUTHTYPE_FILS_PK = 7,
    __NL80211_AUTHTYPE_NUM = 8,
    NL80211_AUTHTYPE_MAX = 7,
    NL80211_AUTHTYPE_AUTOMATIC = 8
};
#line 3521 
enum nl80211_mfp {
    NL80211_MFP_NO = 0,
    NL80211_MFP_REQUIRED = 1,
    NL80211_MFP_OPTIONAL = 2
};
#line 4599 
enum nl80211_band {
    NL80211_BAND_2GHZ = 0,
    NL80211_BAND_5GHZ = 1,
    NL80211_BAND_60GHZ = 2,
    NL80211_BAND_6GHZ = 3,
    NUM_NL80211_BANDS = 4
};
#line 4633 
enum nl80211_tx_power_setting {
    NL80211_TX_POWER_AUTOMATIC = 0,
    NL80211_TX_POWER_LIMITED = 1,
    NL80211_TX_POWER_FIXED = 2
};
#line 4914  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/nl80211.h"
struct nl80211_wowlan_tcp_data_seq {
   __u32 start ;
   __u32 offset ;
   __u32 len ;
};
#line 4925  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/nl80211.h"
struct nl80211_wowlan_tcp_data_token {
   __u32 offset ;
   __u32 len ;
   __u8 token_stream[] ;
};
#line 4936  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/nl80211.h"
struct nl80211_wowlan_tcp_data_token_feature {
   __u32 min_len ;
   __u32 max_len ;
   __u32 bufsize ;
};
#line 5237 
enum nl80211_dfs_state {
    NL80211_DFS_USABLE = 0,
    NL80211_DFS_UNAVAILABLE = 1,
    NL80211_DFS_AVAILABLE = 2
};
#line 5847  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/nl80211.h"
struct nl80211_vendor_cmd_info {
   __u32 vendor_id ;
   __u32 subcmd ;
};
#line 5903 
enum nl80211_bss_select_attr {
    __NL80211_BSS_SELECT_ATTR_INVALID = 0,
    NL80211_BSS_SELECT_ATTR_RSSI = 1,
    NL80211_BSS_SELECT_ATTR_BAND_PREF = 2,
    NL80211_BSS_SELECT_ATTR_RSSI_ADJUST = 3,
    __NL80211_BSS_SELECT_ATTR_AFTER_LAST = 4,
    NL80211_BSS_SELECT_ATTR_MAX = 3
};
#line 6138 
enum environment_cap {
    ENVIRON_ANY = 0,
    ENVIRON_INDOOR = 1,
    ENVIRON_OUTDOOR = 2
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/regulatory.h"
struct regulatory_request {
   struct callback_head callback_head ;
   int wiphy_idx ;
   enum nl80211_reg_initiator initiator ;
   enum nl80211_user_reg_hint_type user_reg_hint_type ;
   char alpha2[3U] ;
   enum nl80211_dfs_regions dfs_region ;
   bool intersect ;
   bool processed ;
   enum environment_cap country_ie_env ;
   struct list_head list ;
};
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/regulatory.h"
struct ieee80211_freq_range {
   u32 start_freq_khz ;
   u32 end_freq_khz ;
   u32 max_bandwidth_khz ;
};
#line 187  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/regulatory.h"
struct ieee80211_power_rule {
   u32 max_antenna_gain ;
   u32 max_eirp ;
};
#line 205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/regulatory.h"
struct ieee80211_wmm_ac {
   u16 cw_min ;
   u16 cw_max ;
   u16 cot ;
   u8 aifsn ;
};
#line 212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/regulatory.h"
struct ieee80211_wmm_rule {
   struct ieee80211_wmm_ac client[4U] ;
   struct ieee80211_wmm_ac ap[4U] ;
};
#line 217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/regulatory.h"
struct ieee80211_reg_rule {
   struct ieee80211_freq_range freq_range ;
   struct ieee80211_power_rule power_rule ;
   struct ieee80211_wmm_rule wmm_rule ;
   u32 flags ;
   u32 dfs_cac_ms ;
   bool has_wmm ;
};
#line 226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/regulatory.h"
struct ieee80211_regdomain {
   struct callback_head callback_head ;
   u32 n_reg_rules ;
   char alpha2[3U] ;
   enum nl80211_dfs_regions dfs_region ;
   struct ieee80211_reg_rule reg_rules[] ;
};
#line 233 
struct wiphy;
#line 147  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_channel {
   enum nl80211_band band ;
   u32 center_freq ;
   u16 hw_value ;
   u32 flags ;
   int max_antenna_gain ;
   int max_power ;
   int max_reg_power ;
   bool beacon_found ;
   u32 orig_flags ;
   int orig_mag ;
   int orig_mpwr ;
   enum nl80211_dfs_state dfs_state ;
   unsigned long dfs_state_entered ;
   unsigned int dfs_cac_ms ;
};
#line 172 
enum ieee80211_bss_type {
    IEEE80211_BSS_TYPE_ESS = 0,
    IEEE80211_BSS_TYPE_PBSS = 1,
    IEEE80211_BSS_TYPE_IBSS = 2,
    IEEE80211_BSS_TYPE_MBSS = 3,
    IEEE80211_BSS_TYPE_ANY = 4
};
#line 243  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_rate {
   u32 flags ;
   u16 bitrate ;
   u16 hw_value ;
   u16 hw_value_short ;
};
#line 256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_he_obss_pd {
   bool enable ;
   u8 min_offset ;
   u8 max_offset ;
};
#line 274  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_sta_ht_cap {
   u16 cap ;
   bool ht_supported ;
   u8 ampdu_factor ;
   u8 ampdu_density ;
   struct ieee80211_mcs_info mcs ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_sta_vht_cap {
   bool vht_supported ;
   u32 cap ;
   struct ieee80211_vht_mcs_info vht_mcs ;
};
#line 311  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_sta_he_cap {
   bool has_he ;
   struct ieee80211_he_cap_elem he_cap_elem ;
   struct ieee80211_he_mcs_nss_supp he_mcs_nss_supp ;
   u8 ppe_thres[25U] ;
};
#line 328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_sband_iftype_data {
   u16 types_mask ;
   struct ieee80211_sta_he_cap he_cap ;
};
#line 332 
enum ieee80211_edmg_bw_config {
    IEEE80211_EDMG_BW_CONFIG_4 = 4,
    IEEE80211_EDMG_BW_CONFIG_5 = 5,
    IEEE80211_EDMG_BW_CONFIG_6 = 6,
    IEEE80211_EDMG_BW_CONFIG_7 = 7,
    IEEE80211_EDMG_BW_CONFIG_8 = 8,
    IEEE80211_EDMG_BW_CONFIG_9 = 9,
    IEEE80211_EDMG_BW_CONFIG_10 = 10,
    IEEE80211_EDMG_BW_CONFIG_11 = 11,
    IEEE80211_EDMG_BW_CONFIG_12 = 12,
    IEEE80211_EDMG_BW_CONFIG_13 = 13,
    IEEE80211_EDMG_BW_CONFIG_14 = 14,
    IEEE80211_EDMG_BW_CONFIG_15 = 15
};
#line 382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_edmg {
   u8 channels ;
   enum ieee80211_edmg_bw_config bw_config ;
};
#line 410  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_supported_band {
   struct ieee80211_channel *channels ;
   struct ieee80211_rate *bitrates ;
   enum nl80211_band band ;
   int n_channels ;
   int n_bitrates ;
   struct ieee80211_sta_ht_cap ht_cap ;
   struct ieee80211_sta_vht_cap vht_cap ;
   struct ieee80211_edmg edmg_cap ;
   u16 n_iftype_data ;
   struct ieee80211_sband_iftype_data *iftype_data ;
};
#line 571  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct key_params {
   u8 *key ;
   u8 *seq ;
   int key_len ;
   int seq_len ;
   u16 vlan_id ;
   u32 cipher ;
   enum nl80211_key_mode mode ;
};
#line 593  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_chan_def {
   struct ieee80211_channel *chan ;
   enum nl80211_chan_width width ;
   u32 center_freq1 ;
   u32 center_freq2 ;
   struct ieee80211_edmg edmg ;
};
#line 853  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_crypto_settings {
   u32 wpa_versions ;
   u32 cipher_group ;
   int n_ciphers_pairwise ;
   u32 ciphers_pairwise[5U] ;
   int n_akm_suites ;
   u32 akm_suites[2U] ;
   bool control_port ;
   __be16 control_port_ethertype ;
   bool control_port_no_encrypt ;
   bool control_port_over_nl80211 ;
   struct key_params *wep_keys ;
   int wep_tx_key ;
   u8 *psk ;
   u8 *sae_pwd ;
   u8 sae_pwd_len ;
};
#line 917  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct mac_address {
   u8 addr[6U] ;
};
#line 1885  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_ssid {
   u8 ssid[32U] ;
   u8 ssid_len ;
};
#line 1991  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_match_set {
   struct cfg80211_ssid ssid ;
   u8 bssid[6U] ;
   s32 rssi_thold ;
   s32 per_band_rssi_thold[4U] ;
};
#line 2007  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_sched_scan_plan {
   u32 interval ;
   u32 iterations ;
};
#line 2018  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_bss_select_adjust {
   enum nl80211_band band ;
   s8 delta ;
};
#line 2073  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_sched_scan_request {
   u64 reqid ;
   struct cfg80211_ssid *ssids ;
   int n_ssids ;
   u32 n_channels ;
   enum nl80211_bss_scan_width scan_width ;
   u8 *ie ;
   size_t ie_len ;
   u32 flags ;
   struct cfg80211_match_set *match_sets ;
   int n_match_sets ;
   s32 min_rssi_thold ;
   u32 delay ;
   struct cfg80211_sched_scan_plan *scan_plans ;
   int n_scan_plans ;
   u8 mac_addr[6U] ;
   u8 mac_addr_mask[6U] ;
   bool relative_rssi_set ;
   s8 relative_rssi ;
   struct cfg80211_bss_select_adjust rssi_adjust ;
   struct wiphy *wiphy ;
   struct net_device *dev ;
   unsigned long scan_start ;
   bool report_results ;
   struct callback_head callback_head ;
   u32 owner_nlportid ;
   bool nl_owner_dead ;
   struct list_head list ;
   struct ieee80211_channel *channels[0U] ;
};
#line 2109 
enum cfg80211_signal_type {
    CFG80211_SIGNAL_TYPE_NONE = 0,
    CFG80211_SIGNAL_TYPE_MBM = 1,
    CFG80211_SIGNAL_TYPE_UNSPEC = 2
};
#line 2432  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_ibss_params {
   u8 *ssid ;
   u8 *bssid ;
   struct cfg80211_chan_def chandef ;
   u8 *ie ;
   u8 ssid_len ;
   u8 ie_len ;
   u16 beacon_interval ;
   u32 basic_rates ;
   bool channel_fixed ;
   bool privacy ;
   bool control_port ;
   bool control_port_over_nl80211 ;
   bool userspace_handles_dfs ;
   int mcast_rate[4U] ;
   struct ieee80211_ht_cap ht_capa ;
   struct ieee80211_ht_cap ht_capa_mask ;
   struct key_params *wep_keys ;
   int wep_tx_key ;
};
#line 2460  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
union __anonunion_param_736 {
   enum nl80211_band band_pref ;
   struct cfg80211_bss_select_adjust adjust ;
};
#line 2460  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_bss_selection {
   enum nl80211_bss_select_attr behaviour ;
   union __anonunion_param_736 param ;
};
#line 2531  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_connect_params {
   struct ieee80211_channel *channel ;
   struct ieee80211_channel *channel_hint ;
   u8 *bssid ;
   u8 *bssid_hint ;
   u8 *ssid ;
   size_t ssid_len ;
   enum nl80211_auth_type auth_type ;
   u8 *ie ;
   size_t ie_len ;
   bool privacy ;
   enum nl80211_mfp mfp ;
   struct cfg80211_crypto_settings crypto ;
   u8 *key ;
   u8 key_len ;
   u8 key_idx ;
   u32 flags ;
   int bg_scan_period ;
   struct ieee80211_ht_cap ht_capa ;
   struct ieee80211_ht_cap ht_capa_mask ;
   struct ieee80211_vht_cap vht_capa ;
   struct ieee80211_vht_cap vht_capa_mask ;
   bool pbss ;
   struct cfg80211_bss_selection bss_select ;
   u8 *prev_bssid ;
   u8 *fils_erp_username ;
   size_t fils_erp_username_len ;
   u8 *fils_erp_realm ;
   size_t fils_erp_realm_len ;
   u16 fils_erp_next_seq_num ;
   u8 *fils_erp_rrk ;
   size_t fils_erp_rrk_len ;
   bool want_1x ;
   struct ieee80211_edmg edmg ;
};
#line 2656  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_pkt_pattern {
   u8 *mask ;
   u8 *pattern ;
   int pattern_len ;
   int pkt_offset ;
};
#line 2681  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_wowlan_tcp {
   struct socket *sock ;
   __be32 src ;
   __be32 dst ;
   u16 src_port ;
   u16 dst_port ;
   u8 dst_mac[6U] ;
   int payload_len ;
   u8 *payload ;
   struct nl80211_wowlan_tcp_data_seq payload_seq ;
   u32 data_interval ;
   u32 wake_len ;
   u8 *wake_data ;
   u8 *wake_mask ;
   u32 tokens_size ;
   struct nl80211_wowlan_tcp_data_token payload_tok ;
};
#line 2715  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_wowlan {
   bool any ;
   bool disconnect ;
   bool magic_pkt ;
   bool gtk_rekey_failure ;
   bool eap_identity_req ;
   bool four_way_handshake ;
   bool rfkill_release ;
   struct cfg80211_pkt_pattern *patterns ;
   struct cfg80211_wowlan_tcp *tcp ;
   int n_patterns ;
   struct cfg80211_sched_scan_request *nd_config ;
};
#line 4043  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_iface_limit {
   u16 max ;
   u16 types ;
};
#line 4107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_iface_combination {
   struct ieee80211_iface_limit *limits ;
   u32 num_different_channels ;
   u16 max_interfaces ;
   u8 n_limits ;
   bool beacon_int_infra_match ;
   u8 radar_detect_widths ;
   u8 radar_detect_regions ;
   u32 beacon_int_min_gcd ;
};
#line 4165  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_txrx_stypes {
   u16 tx ;
   u16 rx ;
};
#line 4198  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct wiphy_wowlan_tcp_support {
   struct nl80211_wowlan_tcp_data_token_feature *tok ;
   u32 data_payload_max ;
   u32 data_interval_max ;
   u32 wake_payload_max ;
   bool seq ;
};
#line 4221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct wiphy_wowlan_support {
   u32 flags ;
   int n_patterns ;
   int pattern_max_len ;
   int pattern_min_len ;
   int max_pkt_offset ;
   int max_nd_match_sets ;
   struct wiphy_wowlan_tcp_support *tcp ;
};
#line 4241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct wiphy_coalesce_support {
   int n_rules ;
   int max_delay ;
   int n_patterns ;
   int pattern_max_len ;
   int pattern_min_len ;
   int max_pkt_offset ;
};
#line 4312 
struct nla_policy;
#line 4312  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct wiphy_vendor_command {
   struct nl80211_vendor_cmd_info info ;
   u32 flags ;
   int (*doit)(struct wiphy *, struct wireless_dev *, void *, int ) ;
   int (*dumpit)(struct wiphy *, struct wireless_dev *, struct sk_buff *, void *, int , unsigned long *) ;
   struct nla_policy *policy ;
   unsigned int maxattr ;
};
#line 4335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct wiphy_iftype_ext_capab {
   enum nl80211_iftype iftype ;
   u8 *extended_capabilities ;
   u8 *extended_capabilities_mask ;
   u8 extended_capabilities_len ;
};
#line 4360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct __anonstruct_ftm_738 {
   u32 preambles ;
   u32 bandwidths ;
   s8 max_bursts_exponent ;
   u8 max_ftms_per_burst ;
   u8 supported : 1 ;
   u8 asap : 1 ;
   u8 non_asap : 1 ;
   u8 request_lci : 1 ;
   u8 request_civicloc : 1 ;
};
#line 4360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_pmsr_capabilities {
   unsigned int max_peers ;
   u8 report_ap_tsf : 1 ;
   u8 randomize_mac_addr : 1 ;
   struct __anonstruct_ftm_738 ftm ;
};
#line 4552  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct wiphy {
   u8 perm_addr[6U] ;
   u8 addr_mask[6U] ;
   struct mac_address *addresses ;
   struct ieee80211_txrx_stypes *mgmt_stypes ;
   struct ieee80211_iface_combination *iface_combinations ;
   int n_iface_combinations ;
   u16 software_iftypes ;
   u16 n_addresses ;
   u16 interface_modes ;
   u16 max_acl_mac_addrs ;
   u32 flags ;
   u32 regulatory_flags ;
   u32 features ;
   u8 ext_features[6U] ;
   u32 ap_sme_capa ;
   enum cfg80211_signal_type signal_type ;
   int bss_priv_size ;
   u8 max_scan_ssids ;
   u8 max_sched_scan_reqs ;
   u8 max_sched_scan_ssids ;
   u8 max_match_sets ;
   u16 max_scan_ie_len ;
   u16 max_sched_scan_ie_len ;
   u32 max_sched_scan_plans ;
   u32 max_sched_scan_plan_interval ;
   u32 max_sched_scan_plan_iterations ;
   int n_cipher_suites ;
   u32 *cipher_suites ;
   int n_akm_suites ;
   u32 *akm_suites ;
   u8 retry_short ;
   u8 retry_long ;
   u32 frag_threshold ;
   u32 rts_threshold ;
   u8 coverage_class ;
   char fw_version[32U] ;
   u32 hw_version ;
   struct wiphy_wowlan_support *wowlan ;
   struct cfg80211_wowlan *wowlan_config ;
   u16 max_remain_on_channel_duration ;
   u8 max_num_pmkids ;
   u32 available_antennas_tx ;
   u32 available_antennas_rx ;
   u32 probe_resp_offload ;
   u8 *extended_capabilities ;
   u8 *extended_capabilities_mask ;
   u8 extended_capabilities_len ;
   struct wiphy_iftype_ext_capab *iftype_ext_capab ;
   unsigned int num_iftype_ext_capab ;
   void *privid ;
   struct ieee80211_supported_band *bands[4U] ;
   void (*reg_notifier)(struct wiphy *, struct regulatory_request *) ;
   struct ieee80211_regdomain *regd ;
   struct device dev ;
   bool registered ;
   struct dentry *debugfsdir ;
   struct ieee80211_ht_cap *ht_capa_mod_mask ;
   struct ieee80211_vht_cap *vht_capa_mod_mask ;
   struct list_head wdev_list ;
   possible_net_t _net ;
   struct iw_handler_def *wext ;
   struct wiphy_coalesce_support *coalesce ;
   struct wiphy_vendor_command *vendor_commands ;
   struct nl80211_vendor_cmd_info *vendor_events ;
   int n_vendor_commands ;
   int n_vendor_events ;
   u16 max_ap_assoc_sta ;
   u8 max_num_csa_counters ;
   u8 max_adj_channel_rssi_comp ;
   u32 bss_select_support ;
   u8 nan_supported_bands ;
   u32 txq_limit ;
   u32 txq_memory_limit ;
   u32 txq_quantum ;
   u8 support_mbssid : 1 ;
   u8 support_only_he_mbssid : 1 ;
   struct cfg80211_pmsr_capabilities *pmsr_capa ;
   char priv[0U] ;
};
#line 4826 
struct cfg80211_conn;
#line 4827 
struct cfg80211_internal_bss;
#line 4828 
struct cfg80211_cached_keys;
#line 4829 
struct cfg80211_cqm_config;
#line 4912  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct __anonstruct_wext_739 {
   struct cfg80211_ibss_params ibss ;
   struct cfg80211_connect_params connect ;
   struct cfg80211_cached_keys *keys ;
   u8 *ie ;
   size_t ie_len ;
   u8 bssid[6U] ;
   u8 prev_bssid[6U] ;
   u8 ssid[32U] ;
   s8 default_key ;
   s8 default_mgmt_key ;
   bool prev_bssid_valid ;
};
#line 4912  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct wireless_dev {
   struct wiphy *wiphy ;
   enum nl80211_iftype iftype ;
   struct list_head list ;
   struct net_device *netdev ;
   u32 identifier ;
   struct list_head mgmt_registrations ;
   spinlock_t mgmt_registrations_lock ;
   struct mutex mtx ;
   bool use_4addr ;
   bool is_running ;
   u8 address[6U] ;
   u8 ssid[32U] ;
   u8 ssid_len ;
   u8 mesh_id_len ;
   u8 mesh_id_up_len ;
   struct cfg80211_conn *conn ;
   struct cfg80211_cached_keys *connect_keys ;
   enum ieee80211_bss_type conn_bss_type ;
   u32 conn_owner_nlportid ;
   struct work_struct disconnect_wk ;
   u8 disconnect_bssid[6U] ;
   struct list_head event_list ;
   spinlock_t event_lock ;
   struct cfg80211_internal_bss *current_bss ;
   struct cfg80211_chan_def preset_chandef ;
   struct cfg80211_chan_def chandef ;
   bool ibss_fixed ;
   bool ibss_dfs_possible ;
   bool ps ;
   int ps_timeout ;
   int beacon_interval ;
   u32 ap_unexpected_nlportid ;
   u32 owner_nlportid ;
   bool nl_owner_dead ;
   bool cac_started ;
   unsigned long cac_start_time ;
   unsigned int cac_time_ms ;
   struct __anonstruct_wext_739 wext ;
   struct cfg80211_cqm_config *cqm_config ;
   struct list_head pmsr_list ;
   spinlock_t pmsr_lock ;
   struct work_struct pmsr_free_wk ;
};
#line 567  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rtnetlink.h"
struct tcmsg {
   unsigned char tcm_family ;
   unsigned char tcm__pad1 ;
   unsigned short tcm__pad2 ;
   int tcm_ifindex ;
   __u32 tcm_handle ;
   __u32 tcm_parent ;
   __u32 tcm_info ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/gen_stats.h"
struct gnet_stats_queue {
   __u32 qlen ;
   __u32 backlog ;
   __u32 drops ;
   __u32 requeues ;
   __u32 overlimits ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_stats_basic_packed {
   __u64 bytes ;
   __u64 packets ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_stats_basic_cpu {
   struct gnet_stats_basic_packed bstats ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 20 
struct net_rate_estimator;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_dump {
   spinlock_t *lock ;
   struct sk_buff *skb ;
   struct nlattr *tail ;
   int compat_tc_stats ;
   int compat_xstats ;
   int padattr ;
   void *xstats ;
   int xstats_len ;
   struct tc_stats tc_stats ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
struct __anonstruct_747 {
   s16 min ;
   s16 max ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
union __anonunion_746 {
   void *validation_data ;
   struct __anonstruct_747 __anonCompField___anonunion_746_162 ;
   int (*validate)(struct nlattr *, struct netlink_ext_ack *) ;
   u16 strict_start_type ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
struct nla_policy {
   u8 type ;
   u8 validation_type ;
   u16 len ;
   union __anonunion_746 __anonCompField_nla_policy_163 ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/rtnetlink.h"
struct rtnl_link_ops {
   struct list_head list ;
   char *kind ;
   size_t priv_size ;
   void (*setup)(struct net_device *) ;
   unsigned int maxtype ;
   struct nla_policy *policy ;
   int (*validate)(struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   int (*newlink)(struct net *, struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   int (*changelink)(struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   void (*dellink)(struct net_device *, struct list_head *) ;
   size_t (*get_size)(struct net_device *) ;
   int (*fill_info)(struct sk_buff *, struct net_device *) ;
   size_t (*get_xstats_size)(struct net_device *) ;
   int (*fill_xstats)(struct sk_buff *, struct net_device *) ;
   unsigned int (*get_num_tx_queues)(void) ;
   unsigned int (*get_num_rx_queues)(void) ;
   unsigned int slave_maxtype ;
   struct nla_policy *slave_policy ;
   int (*slave_changelink)(struct net_device *, struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   size_t (*get_slave_size)(struct net_device *, struct net_device *) ;
   int (*fill_slave_info)(struct sk_buff *, struct net_device *, struct net_device *) ;
   struct net *(*get_link_net)(struct net_device *) ;
   size_t (*get_linkxstats_size)(struct net_device *, int ) ;
   int (*fill_linkxstats)(struct sk_buff *, struct net_device *, int *, int ) ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jhash.h"
struct rhash_lock_head {
   };
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable.h"
struct bucket_table {
   unsigned int size ;
   unsigned int nest ;
   u32 hash_rnd ;
   struct list_head walkers ;
   struct callback_head rcu ;
   struct bucket_table *future_tbl ;
   struct lockdep_map dep_map ;
   struct rhash_lock_head *buckets[] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct flow_block {
   struct list_head cb_list ;
};
#line 298  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
typedef int flow_setup_cb_t(enum tc_setup_type , void *, void *);
#line 412 
struct Qdisc_ops;
#line 413 
struct qdisc_walker;
#line 414 
struct tcf_walker;
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct qdisc_size_table {
   struct callback_head rcu ;
   struct list_head list ;
   struct tc_sizespec szopts ;
   int refcnt ;
   u16 data[] ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct qdisc_skb_head {
   struct sk_buff *head ;
   struct sk_buff *tail ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc {
   int (*enqueue)(struct sk_buff *, struct Qdisc *, struct sk_buff **) ;
   struct sk_buff *(*dequeue)(struct Qdisc *) ;
   unsigned int flags ;
   u32 limit ;
   struct Qdisc_ops *ops ;
   struct qdisc_size_table *stab ;
   struct hlist_node hash ;
   u32 handle ;
   u32 parent ;
   struct netdev_queue *dev_queue ;
   struct net_rate_estimator *rate_est ;
   struct gnet_stats_basic_cpu *cpu_bstats ;
   struct gnet_stats_queue *cpu_qstats ;
   int padded ;
   refcount_t refcnt ;
   struct sk_buff_head gso_skb ;
   struct qdisc_skb_head q ;
   struct gnet_stats_basic_packed bstats ;
   seqcount_t running ;
   struct gnet_stats_queue qstats ;
   unsigned long state ;
   struct Qdisc *next_sched ;
   struct sk_buff_head skb_bad_txq ;
   spinlock_t busylock ;
   spinlock_t seqlock ;
   bool empty ;
   struct callback_head rcu ;
};
#line 195 
struct tcf_block;
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc_class_ops {
   unsigned int flags ;
   struct netdev_queue *(*select_queue)(struct Qdisc *, struct tcmsg *) ;
   int (*graft)(struct Qdisc *, unsigned long , struct Qdisc *, struct Qdisc **, struct netlink_ext_ack *) ;
   struct Qdisc *(*leaf)(struct Qdisc *, unsigned long ) ;
   void (*qlen_notify)(struct Qdisc *, unsigned long ) ;
   unsigned long (*find)(struct Qdisc *, u32 ) ;
   int (*change)(struct Qdisc *, u32 , u32 , struct nlattr **, unsigned long *, struct netlink_ext_ack *) ;
   int (*delete)(struct Qdisc *, unsigned long ) ;
   void (*walk)(struct Qdisc *, struct qdisc_walker *) ;
   struct tcf_block *(*tcf_block)(struct Qdisc *, unsigned long , struct netlink_ext_ack *) ;
   unsigned long (*bind_tcf)(struct Qdisc *, unsigned long , u32 ) ;
   void (*unbind_tcf)(struct Qdisc *, unsigned long ) ;
   int (*dump)(struct Qdisc *, unsigned long , struct sk_buff *, struct tcmsg *) ;
   int (*dump_stats)(struct Qdisc *, unsigned long , struct gnet_dump *) ;
};
#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc_ops {
   struct Qdisc_ops *next ;
   struct Qdisc_class_ops *cl_ops ;
   char id[16U] ;
   int priv_size ;
   unsigned int static_flags ;
   int (*enqueue)(struct sk_buff *, struct Qdisc *, struct sk_buff **) ;
   struct sk_buff *(*dequeue)(struct Qdisc *) ;
   struct sk_buff *(*peek)(struct Qdisc *) ;
   int (*init)(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *) ;
   void (*reset)(struct Qdisc *) ;
   void (*destroy)(struct Qdisc *) ;
   int (*change)(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *) ;
   void (*attach)(struct Qdisc *) ;
   int (*change_tx_queue_len)(struct Qdisc *, unsigned int ) ;
   int (*dump)(struct Qdisc *, struct sk_buff *) ;
   int (*dump_stats)(struct Qdisc *, struct gnet_dump *) ;
   void (*ingress_block_set)(struct Qdisc *, u32 ) ;
   void (*egress_block_set)(struct Qdisc *, u32 ) ;
   u32 (*ingress_block_get)(struct Qdisc *) ;
   u32 (*egress_block_get)(struct Qdisc *) ;
   struct module *owner ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_821 {
   unsigned long class ;
   u32 classid ;
};
#line 272 
struct tcf_proto;
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_822 {
   bool ingress ;
   struct gnet_stats_queue *qstats ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
union __anonunion_820 {
   struct __anonstruct_821 __anonCompField___anonunion_820_165 ;
   struct tcf_proto *goto_tp ;
   struct __anonstruct_822 __anonCompField___anonunion_820_166 ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_result {
   union __anonunion_820 __anonCompField_tcf_result_167 ;
};
#line 287 
struct tcf_chain;
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_proto_ops {
   struct list_head head ;
   char kind[16U] ;
   int (*classify)(struct sk_buff *, struct tcf_proto *, struct tcf_result *) ;
   int (*init)(struct tcf_proto *) ;
   void (*destroy)(struct tcf_proto *, bool , struct netlink_ext_ack *) ;
   void *(*get)(struct tcf_proto *, u32 ) ;
   void (*put)(struct tcf_proto *, void *) ;
   int (*change)(struct net *, struct sk_buff *, struct tcf_proto *, unsigned long , u32 , struct nlattr **, void **, bool , bool , struct netlink_ext_ack *) ;
   int (*delete)(struct tcf_proto *, void *, bool *, bool , struct netlink_ext_ack *) ;
   bool (*delete_empty)(struct tcf_proto *) ;
   void (*walk)(struct tcf_proto *, struct tcf_walker *, bool ) ;
   int (*reoffload)(struct tcf_proto *, bool , flow_setup_cb_t *, void *, struct netlink_ext_ack *) ;
   void (*hw_add)(struct tcf_proto *, void *) ;
   void (*hw_del)(struct tcf_proto *, void *) ;
   void (*bind_class)(void *, u32 , unsigned long ) ;
   void *(*tmplt_create)(struct net *, struct tcf_chain *, struct nlattr **, struct netlink_ext_ack *) ;
   void (*tmplt_destroy)(void *) ;
   int (*dump)(struct net *, struct tcf_proto *, void *, struct sk_buff *, struct tcmsg *, bool ) ;
   int (*tmplt_dump)(struct sk_buff *, struct net *, void *) ;
   struct module *owner ;
   int flags ;
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_proto {
   struct tcf_proto *next ;
   void *root ;
   int (*classify)(struct sk_buff *, struct tcf_proto *, struct tcf_result *) ;
   __be16 protocol ;
   u32 prio ;
   void *data ;
   struct tcf_proto_ops *ops ;
   struct tcf_chain *chain ;
   spinlock_t lock ;
   bool deleting ;
   refcount_t refcnt ;
   struct callback_head rcu ;
   struct hlist_node destroy_ht_node ;
};
#line 386  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_chain {
   struct mutex filter_chain_lock ;
   struct tcf_proto *filter_chain ;
   struct list_head list ;
   struct tcf_block *block ;
   u32 index ;
   unsigned int refcnt ;
   unsigned int action_refcnt ;
   bool explicitly_created ;
   bool flushing ;
   struct tcf_proto_ops *tmplt_ops ;
   void *tmplt_priv ;
   struct callback_head rcu ;
};
#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_chain0_824 {
   struct tcf_chain *chain ;
   struct list_head filter_chain_list ;
};
#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_block {
   struct mutex lock ;
   struct list_head chain_list ;
   u32 index ;
   refcount_t refcnt ;
   struct net *net ;
   struct Qdisc *q ;
   struct rw_semaphore cb_lock ;
   struct flow_block flow_block ;
   struct list_head owner_list ;
   bool keep_dst ;
   atomic_t offloadcnt ;
   unsigned int nooffloaddevcnt ;
   unsigned int lockeddevcnt ;
   struct __anonstruct_chain0_824 chain0 ;
   struct callback_head rcu ;
   struct hlist_head proto_destroy_ht[128U] ;
   struct mutex proto_destroy_lock ;
};
#line 1269  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct mini_Qdisc {
   struct tcf_proto *filter_list ;
   struct gnet_stats_basic_cpu *cpu_bstats ;
   struct gnet_stats_queue *cpu_qstats ;
   struct callback_head rcu ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/pkt_sched.h"
struct qdisc_walker {
   int stop ;
   int skip ;
   int count ;
   int (*fn)(struct Qdisc *, unsigned long , struct qdisc_walker *) ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_counter.h"
struct page_counter {
   atomic_long_t usage ;
   unsigned long min ;
   unsigned long low ;
   unsigned long max ;
   struct page_counter *parent ;
   unsigned long emin ;
   atomic_long_t min_usage ;
   atomic_long_t children_min_usage ;
   unsigned long elow ;
   atomic_long_t low_usage ;
   atomic_long_t children_low_usage ;
   unsigned long watermark ;
   unsigned long failcnt ;
};
#line 66 
struct eventfd_ctx;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmpressure.h"
struct vmpressure {
   unsigned long scanned ;
   unsigned long reclaimed ;
   unsigned long tree_scanned ;
   unsigned long tree_reclaimed ;
   spinlock_t sr_lock ;
   struct list_head events ;
   struct mutex events_lock ;
   struct work_struct work ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
struct fprop_global {
   struct percpu_counter events ;
   unsigned int period ;
   seqcount_t sequence ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
struct fprop_local_percpu {
   struct percpu_counter events ;
   unsigned int period ;
   raw_spinlock_t lock ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
typedef int congested_fn(void *, int );
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
enum wb_reason {
    WB_REASON_BACKGROUND = 0,
    WB_REASON_VMSCAN = 1,
    WB_REASON_SYNC = 2,
    WB_REASON_PERIODIC = 3,
    WB_REASON_LAPTOP_TIMER = 4,
    WB_REASON_FREE_MORE_MEM = 5,
    WB_REASON_FS_FREE_SPACE = 6,
    WB_REASON_FORKER_THREAD = 7,
    WB_REASON_FOREIGN_FLUSH = 8,
    WB_REASON_MAX = 9
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct wb_completion {
   atomic_t cnt ;
   wait_queue_head_t *waitq ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct bdi_writeback_congested {
   unsigned long state ;
   refcount_t refcnt ;
   struct backing_dev_info *__bdi ;
   int blkcg_id ;
   struct rb_node rb_node ;
};
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
union __anonunion_837 {
   struct work_struct release_work ;
   struct callback_head rcu ;
};
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct bdi_writeback {
   struct backing_dev_info *bdi ;
   unsigned long state ;
   unsigned long last_old_flush ;
   struct list_head b_dirty ;
   struct list_head b_io ;
   struct list_head b_more_io ;
   struct list_head b_dirty_time ;
   spinlock_t list_lock ;
   struct percpu_counter stat[4U] ;
   struct bdi_writeback_congested *congested ;
   unsigned long bw_time_stamp ;
   unsigned long dirtied_stamp ;
   unsigned long written_stamp ;
   unsigned long write_bandwidth ;
   unsigned long avg_write_bandwidth ;
   unsigned long dirty_ratelimit ;
   unsigned long balanced_dirty_ratelimit ;
   struct fprop_local_percpu completions ;
   int dirty_exceeded ;
   enum wb_reason start_all_reason ;
   spinlock_t work_lock ;
   struct list_head work_list ;
   struct delayed_work dwork ;
   unsigned long dirty_sleep ;
   struct list_head bdi_node ;
   struct percpu_ref refcnt ;
   struct fprop_local_percpu memcg_completions ;
   struct cgroup_subsys_state *memcg_css ;
   struct cgroup_subsys_state *blkcg_css ;
   struct list_head memcg_node ;
   struct list_head blkcg_node ;
   union __anonunion_837 __anonCompField_bdi_writeback_169 ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct backing_dev_info {
   u64 id ;
   struct rb_node rb_node ;
   struct list_head bdi_list ;
   unsigned long ra_pages ;
   unsigned long io_pages ;
   congested_fn *congested_fn ;
   void *congested_data ;
   char *name ;
   struct kref refcnt ;
   unsigned int capabilities ;
   unsigned int min_ratio ;
   unsigned int max_ratio ;
   unsigned int max_prop_frac ;
   atomic_long_t tot_write_bandwidth ;
   struct bdi_writeback wb ;
   struct list_head wb_list ;
   struct xarray cgwb_tree ;
   struct rb_root cgwb_congested_tree ;
   struct mutex cgwb_release_mutex ;
   struct rw_semaphore wb_switch_rwsem ;
   wait_queue_head_t wb_waitq ;
   struct device *dev ;
   struct device *owner ;
   struct timer_list laptop_mode_wb_timer ;
   struct dentry *debug_dir ;
};
#line 306 
struct bio_set;
#line 307 
struct bio_integrity_payload;
#line 308  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
typedef void bio_end_io_t(struct bio *);
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
typedef u8 blk_status_t;
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct bio_issue {
   u64 value ;
};
#line 144 
struct blkcg_gq;
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
union __anonunion_838 {
   struct bio_integrity_payload *bi_integrity ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct bio {
   struct bio *bi_next ;
   struct gendisk *bi_disk ;
   unsigned int bi_opf ;
   unsigned short bi_flags ;
   unsigned short bi_ioprio ;
   unsigned short bi_write_hint ;
   blk_status_t bi_status ;
   u8 bi_partno ;
   atomic_t __bi_remaining ;
   struct bvec_iter bi_iter ;
   bio_end_io_t *bi_end_io ;
   void *bi_private ;
   struct blkcg_gq *bi_blkg ;
   struct bio_issue bi_issue ;
   u64 bi_iocost_cost ;
   union __anonunion_838 __anonCompField_bio_170 ;
   unsigned short bi_vcnt ;
   unsigned short bi_max_vecs ;
   atomic_t __bi_cnt ;
   struct bio_vec *bi_io_vec ;
   struct bio_set *bi_pool ;
   struct bio_vec bi_inline_vecs[0U] ;
};
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
typedef unsigned int blk_qc_t;
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct blk_rq_stat {
   u64 mean ;
   u64 min ;
   u64 max ;
   u32 nr_samples ;
   u64 batch ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct disk_stats {
   u64 nsecs[4U] ;
   unsigned long sectors[4U] ;
   unsigned long ios[4U] ;
   unsigned long merges[4U] ;
   unsigned long io_ticks ;
   unsigned long time_in_queue ;
   local_t in_flight[2U] ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct partition_meta_info {
   char uuid[37U] ;
   u8 volname[64U] ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct hd_struct {
   sector_t start_sect ;
   sector_t nr_sects ;
   seqcount_t nr_sects_seq ;
   sector_t alignment_offset ;
   unsigned int discard_alignment ;
   struct device __dev ;
   struct kobject *holder_dir ;
   int policy ;
   int partno ;
   struct partition_meta_info *info ;
   int make_it_fail ;
   unsigned long stamp ;
   struct disk_stats *dkstats ;
   struct percpu_ref ref ;
   struct rcu_work rcu_work ;
};
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct disk_part_tbl {
   struct callback_head callback_head ;
   int len ;
   struct hd_struct *last_lookup ;
   struct hd_struct *part[] ;
};
#line 166 
struct disk_events;
#line 167 
struct badblocks;
#line 172 
struct blk_integrity_profile;
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct blk_integrity {
   struct blk_integrity_profile *profile ;
   unsigned char flags ;
   unsigned char tuple_size ;
   unsigned char interval_exp ;
   unsigned char tag_size ;
};
#line 182 
struct timer_rand_state;
#line 182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct gendisk {
   int major ;
   int first_minor ;
   int minors ;
   char disk_name[32U] ;
   char *(*devnode)(struct gendisk *, umode_t *) ;
   unsigned short events ;
   unsigned short event_flags ;
   struct disk_part_tbl *part_tbl ;
   struct hd_struct part0 ;
   struct block_device_operations *fops ;
   struct request_queue *queue ;
   void *private_data ;
   int flags ;
   struct rw_semaphore lookup_sem ;
   struct kobject *slave_dir ;
   struct timer_rand_state *random ;
   atomic_t sync_io ;
   struct disk_events *ev ;
   struct kobject integrity_kobj ;
   int node_id ;
   struct badblocks *bb ;
   struct lockdep_map lockdep_map ;
};
#line 637  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pagemap.h"
typedef void *mempool_alloc_t(gfp_t , void *);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
typedef void mempool_free_t(void *, void *);
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
struct mempool_s {
   spinlock_t lock ;
   int min_nr ;
   int curr_nr ;
   void **elements ;
   void *pool_data ;
   mempool_alloc_t *alloc ;
   mempool_free_t *free ;
   wait_queue_head_t wait ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
typedef struct mempool_s mempool_t;
#line 307  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_integrity_payload {
   struct bio *bip_bio ;
   struct bvec_iter bip_iter ;
   unsigned short bip_slab ;
   unsigned short bip_vcnt ;
   unsigned short bip_max_vcnt ;
   unsigned short bip_flags ;
   struct bvec_iter bio_iter ;
   struct work_struct bip_work ;
   struct bio_vec *bip_vec ;
   struct bio_vec bip_inline_vecs[0U] ;
};
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_list {
   struct bio *head ;
   struct bio *tail ;
};
#line 703  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_set {
   struct kmem_cache *bio_slab ;
   unsigned int front_pad ;
   mempool_t bio_pool ;
   mempool_t bvec_pool ;
   mempool_t bio_integrity_pool ;
   mempool_t bvec_integrity_pool ;
   spinlock_t rescue_lock ;
   struct bio_list rescue_list ;
   struct work_struct rescue_work ;
   struct workqueue_struct *rescue_workqueue ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bsg.h"
struct sg_io_v4 {
   __s32 guard ;
   __u32 protocol ;
   __u32 subprotocol ;
   __u32 request_len ;
   __u64 request ;
   __u64 request_tag ;
   __u32 request_attr ;
   __u32 request_priority ;
   __u32 request_extra ;
   __u32 max_response_len ;
   __u64 response ;
   __u32 dout_iovec_count ;
   __u32 dout_xfer_len ;
   __u32 din_iovec_count ;
   __u32 din_xfer_len ;
   __u64 dout_xferp ;
   __u64 din_xferp ;
   __u32 timeout ;
   __u32 flags ;
   __u64 usr_ptr ;
   __u32 spare_in ;
   __u32 driver_status ;
   __u32 transport_status ;
   __u32 device_status ;
   __u32 retry_delay ;
   __u32 info ;
   __u32 duration ;
   __u32 response_len ;
   __s32 din_resid ;
   __s32 dout_resid ;
   __u64 generated_tag ;
   __u32 spare_out ;
   __u32 padding ;
};
#line 65 
struct request;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bsg.h"
struct bsg_ops {
   int (*check_proto)(struct sg_io_v4 *) ;
   int (*fill_hdr)(struct request *, struct sg_io_v4 *, fmode_t ) ;
   int (*complete_rq)(struct request *, struct sg_io_v4 *) ;
   void (*free_rq)(struct request *) ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bsg.h"
struct bsg_class_device {
   struct device *class_dev ;
   int minor ;
   struct request_queue *queue ;
   struct bsg_ops *ops ;
};
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/blkzoned.h"
struct blk_zone {
   __u64 start ;
   __u64 len ;
   __u64 wp ;
   __u8 type ;
   __u8 cond ;
   __u8 non_seq ;
   __u8 reset ;
   __u8 reserved[36U] ;
};
#line 134 
struct elevator_queue;
#line 135 
struct blk_trace;
#line 138 
struct blk_flush_queue;
#line 139 
struct pr_ops;
#line 140 
struct rq_qos;
#line 141 
struct blk_queue_stats;
#line 142 
struct blk_stat_callback;
#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/blkzoned.h"
typedef void rq_end_io_fn(struct request *, blk_status_t );
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef __u32 req_flags_t;
#line 67 
enum mq_rq_state {
    MQ_RQ_IDLE = 0,
    MQ_RQ_IN_FLIGHT = 1,
    MQ_RQ_COMPLETE = 2
};
#line 132 
struct blk_mq_ctx;
#line 132 
struct blk_mq_hw_ctx;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_841 {
   struct hlist_node hash ;
   struct list_head ipi_list ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_842 {
   struct rb_node rb_node ;
   struct bio_vec special_vec ;
   void *completion_data ;
   int error_count ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct __anonstruct_elv_844 {
   struct io_cq *icq ;
   void *priv[2U] ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct __anonstruct_flush_845 {
   unsigned int seq ;
   struct list_head list ;
   rq_end_io_fn *saved_end_io ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_843 {
   struct __anonstruct_elv_844 elv ;
   struct __anonstruct_flush_845 flush ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_846 {
   struct __call_single_data csd ;
   u64 fifo_time ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct request {
   struct request_queue *q ;
   struct blk_mq_ctx *mq_ctx ;
   struct blk_mq_hw_ctx *mq_hctx ;
   unsigned int cmd_flags ;
   req_flags_t rq_flags ;
   int tag ;
   int internal_tag ;
   unsigned int __data_len ;
   sector_t __sector ;
   struct bio *bio ;
   struct bio *biotail ;
   struct list_head queuelist ;
   union __anonunion_841 __anonCompField_request_171 ;
   union __anonunion_842 __anonCompField_request_172 ;
   union __anonunion_843 __anonCompField_request_173 ;
   struct gendisk *rq_disk ;
   struct hd_struct *part ;
   u64 alloc_time_ns ;
   u64 start_time_ns ;
   u64 io_start_time_ns ;
   unsigned short wbt_flags ;
   unsigned short stats_sectors ;
   unsigned short nr_phys_segments ;
   unsigned short nr_integrity_segments ;
   unsigned short write_hint ;
   unsigned short ioprio ;
   unsigned int extra_len ;
   enum mq_rq_state state ;
   refcount_t ref ;
   unsigned int timeout ;
   unsigned long deadline ;
   union __anonunion_846 __anonCompField_request_174 ;
   rq_end_io_fn *end_io ;
   void *end_io_data ;
};
#line 285 
struct elevator_type;
#line 286 
struct blk_mq_debugfs_attr;
#line 287 
enum elv_merge {
    ELEVATOR_NO_MERGE = 0,
    ELEVATOR_FRONT_MERGE = 1,
    ELEVATOR_BACK_MERGE = 2,
    ELEVATOR_DISCARD_MERGE = 3
};
#line 294 
struct blk_mq_alloc_data;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_mq_ops {
   int (*init_sched)(struct request_queue *, struct elevator_type *) ;
   void (*exit_sched)(struct elevator_queue *) ;
   int (*init_hctx)(struct blk_mq_hw_ctx *, unsigned int ) ;
   void (*exit_hctx)(struct blk_mq_hw_ctx *, unsigned int ) ;
   void (*depth_updated)(struct blk_mq_hw_ctx *) ;
   bool (*allow_merge)(struct request_queue *, struct request *, struct bio *) ;
   bool (*bio_merge)(struct blk_mq_hw_ctx *, struct bio *, unsigned int ) ;
   int (*request_merge)(struct request_queue *, struct request **, struct bio *) ;
   void (*request_merged)(struct request_queue *, struct request *, enum elv_merge ) ;
   void (*requests_merged)(struct request_queue *, struct request *, struct request *) ;
   void (*limit_depth)(unsigned int , struct blk_mq_alloc_data *) ;
   void (*prepare_request)(struct request *, struct bio *) ;
   void (*finish_request)(struct request *) ;
   void (*insert_requests)(struct blk_mq_hw_ctx *, struct list_head *, bool ) ;
   struct request *(*dispatch_request)(struct blk_mq_hw_ctx *) ;
   bool (*has_work)(struct blk_mq_hw_ctx *) ;
   void (*completed_request)(struct request *, u64 ) ;
   void (*requeue_request)(struct request *) ;
   struct request *(*former_request)(struct request_queue *, struct request *) ;
   struct request *(*next_request)(struct request_queue *, struct request *) ;
   void (*init_icq)(struct io_cq *) ;
   void (*exit_icq)(struct io_cq *) ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elv_fs_entry {
   struct attribute attr ;
   ssize_t (*show)(struct elevator_queue *, char *) ;
   ssize_t (*store)(struct elevator_queue *, char *, size_t ) ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_type {
   struct kmem_cache *icq_cache ;
   struct elevator_mq_ops ops ;
   size_t icq_size ;
   size_t icq_align ;
   struct elv_fs_entry *elevator_attrs ;
   char *elevator_name ;
   char *elevator_alias ;
   unsigned int elevator_features ;
   struct module *elevator_owner ;
   struct blk_mq_debugfs_attr *queue_debugfs_attrs ;
   struct blk_mq_debugfs_attr *hctx_debugfs_attrs ;
   char icq_cache_name[22U] ;
   struct list_head list ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_queue {
   struct elevator_type *type ;
   void *elevator_data ;
   struct kobject kobj ;
   struct mutex sysfs_lock ;
   unsigned int registered : 1 ;
   struct hlist_head hash[64U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
typedef blk_qc_t make_request_fn(struct request_queue *, struct bio *);
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef int dma_drain_needed_fn(struct request *);
#line 304 
enum blk_zoned_model {
    BLK_ZONED_NONE = 0,
    BLK_ZONED_HA = 1,
    BLK_ZONED_HM = 2
};
#line 320  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct queue_limits {
   unsigned long bounce_pfn ;
   unsigned long seg_boundary_mask ;
   unsigned long virt_boundary_mask ;
   unsigned int max_hw_sectors ;
   unsigned int max_dev_sectors ;
   unsigned int chunk_sectors ;
   unsigned int max_sectors ;
   unsigned int max_segment_size ;
   unsigned int physical_block_size ;
   unsigned int logical_block_size ;
   unsigned int alignment_offset ;
   unsigned int io_min ;
   unsigned int io_opt ;
   unsigned int max_discard_sectors ;
   unsigned int max_hw_discard_sectors ;
   unsigned int max_write_same_sectors ;
   unsigned int max_write_zeroes_sectors ;
   unsigned int discard_granularity ;
   unsigned int discard_alignment ;
   unsigned short max_segments ;
   unsigned short max_integrity_segments ;
   unsigned short max_discard_segments ;
   unsigned char misaligned ;
   unsigned char discard_misaligned ;
   unsigned char raid_partial_stripes_expensive ;
   enum blk_zoned_model zoned ;
};
#line 394 
struct blk_mq_ops;
#line 394 
struct throtl_data;
#line 394 
struct blk_mq_tag_set;
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct request_queue {
   struct request *last_merge ;
   struct elevator_queue *elevator ;
   struct blk_queue_stats *stats ;
   struct rq_qos *rq_qos ;
   make_request_fn *make_request_fn ;
   dma_drain_needed_fn *dma_drain_needed ;
   struct blk_mq_ops *mq_ops ;
   struct blk_mq_ctx *queue_ctx ;
   unsigned int queue_depth ;
   struct blk_mq_hw_ctx **queue_hw_ctx ;
   unsigned int nr_hw_queues ;
   struct backing_dev_info *backing_dev_info ;
   void *queuedata ;
   unsigned long queue_flags ;
   atomic_t pm_only ;
   int id ;
   gfp_t bounce_gfp ;
   spinlock_t queue_lock ;
   struct kobject kobj ;
   struct kobject *mq_kobj ;
   struct blk_integrity integrity ;
   struct device *dev ;
   int rpm_status ;
   unsigned int nr_pending ;
   unsigned long nr_requests ;
   unsigned int dma_drain_size ;
   void *dma_drain_buffer ;
   unsigned int dma_pad_mask ;
   unsigned int dma_alignment ;
   unsigned int rq_timeout ;
   int poll_nsec ;
   struct blk_stat_callback *poll_cb ;
   struct blk_rq_stat poll_stat[16U] ;
   struct timer_list timeout ;
   struct work_struct timeout_work ;
   struct list_head icq_list ;
   unsigned long blkcg_pols[1U] ;
   struct blkcg_gq *root_blkg ;
   struct list_head blkg_list ;
   struct queue_limits limits ;
   unsigned int required_elevator_features ;
   unsigned int nr_zones ;
   unsigned long *conv_zones_bitmap ;
   unsigned long *seq_zones_wlock ;
   unsigned int sg_timeout ;
   unsigned int sg_reserved_size ;
   int node ;
   struct blk_trace *blk_trace ;
   struct mutex blk_trace_mutex ;
   struct blk_flush_queue *fq ;
   struct list_head requeue_list ;
   spinlock_t requeue_lock ;
   struct delayed_work requeue_work ;
   struct mutex sysfs_lock ;
   struct mutex sysfs_dir_lock ;
   struct list_head unused_hctx_list ;
   spinlock_t unused_hctx_lock ;
   int mq_freeze_depth ;
   struct bsg_class_device bsg_dev ;
   struct throtl_data *td ;
   struct callback_head callback_head ;
   wait_queue_head_t mq_freeze_wq ;
   struct mutex mq_freeze_lock ;
   struct percpu_ref q_usage_counter ;
   struct blk_mq_tag_set *tag_set ;
   struct list_head tag_set_list ;
   struct bio_set bio_split ;
   struct dentry *debugfs_dir ;
   struct dentry *sched_debugfs_dir ;
   struct dentry *rqos_debugfs_dir ;
   bool mq_sysfs_init_done ;
   size_t cmd_size ;
   struct work_struct release_work ;
   u64 write_hints[5U] ;
};
#line 1160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_plug {
   struct list_head mq_list ;
   struct list_head cb_list ;
   unsigned short rq_count ;
   bool multiple_queues ;
};
#line 1514  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_integrity_iter {
   void *prot_buf ;
   void *data_buf ;
   sector_t seed ;
   unsigned int data_size ;
   unsigned short interval ;
   char *disk_name ;
};
#line 1522  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef blk_status_t integrity_processing_fn(struct blk_integrity_iter *);
#line 1524  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef void integrity_prepare_fn(struct request *);
#line 1525  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef void integrity_complete_fn(struct request *, unsigned int );
#line 1527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_integrity_profile {
   integrity_processing_fn *generate_fn ;
   integrity_processing_fn *verify_fn ;
   integrity_prepare_fn *prepare_fn ;
   integrity_complete_fn *complete_fn ;
   char *name ;
};
#line 1693  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct block_device_operations {
   int (*open)(struct block_device *, fmode_t ) ;
   void (*release)(struct gendisk *, fmode_t ) ;
   int (*rw_page)(struct block_device *, sector_t , struct page *, unsigned int ) ;
   int (*ioctl)(struct block_device *, fmode_t , unsigned int , unsigned long ) ;
   int (*compat_ioctl)(struct block_device *, fmode_t , unsigned int , unsigned long ) ;
   unsigned int (*check_events)(struct gendisk *, unsigned int ) ;
   int (*media_changed)(struct gendisk *) ;
   void (*unlock_native_capacity)(struct gendisk *) ;
   int (*revalidate_disk)(struct gendisk *) ;
   int (*getgeo)(struct block_device *, struct hd_geometry *) ;
   void (*swap_slot_free_notify)(struct block_device *, unsigned long ) ;
   int (*report_zones)(struct gendisk *, sector_t , unsigned int , int (*)(struct blk_zone *, unsigned int , void *), void *) ;
   struct module *owner ;
   struct pr_ops *pr_ops ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_policy_data;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg {
   struct cgroup_subsys_state css ;
   spinlock_t lock ;
   struct xarray blkg_tree ;
   struct blkcg_gq *blkg_hint ;
   struct hlist_head blkg_list ;
   struct blkcg_policy_data *cpd[5U] ;
   struct list_head all_blkcgs_node ;
   struct list_head cgwb_list ;
   refcount_t cgwb_refcnt ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_iostat {
   u64 bytes[3U] ;
   u64 ios[3U] ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_iostat_set {
   struct u64_stats_sync sync ;
   struct blkg_iostat cur ;
   struct blkg_iostat last ;
};
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_policy_data {
   struct blkcg_gq *blkg ;
   int plid ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_policy_data {
   struct blkcg *blkcg ;
   int plid ;
};
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_gq {
   struct request_queue *q ;
   struct list_head q_node ;
   struct hlist_node blkcg_node ;
   struct blkcg *blkcg ;
   struct bdi_writeback_congested *wb_congested ;
   struct blkcg_gq *parent ;
   struct percpu_ref refcnt ;
   bool online ;
   struct blkg_iostat_set *iostat_cpu ;
   struct blkg_iostat_set iostat ;
   struct blkg_policy_data *pd[5U] ;
   spinlock_t async_bio_lock ;
   struct bio_list async_bios ;
   struct work_struct async_bio_work ;
   atomic_t use_delay ;
   atomic64_t delay_nsec ;
   atomic64_t delay_start ;
   u64 last_delay ;
   int last_use ;
   struct callback_head callback_head ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
enum writeback_sync_modes {
    WB_SYNC_NONE = 0,
    WB_SYNC_ALL = 1
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
struct writeback_control {
   long nr_to_write ;
   long pages_skipped ;
   loff_t range_start ;
   loff_t range_end ;
   enum writeback_sync_modes sync_mode ;
   unsigned int for_kupdate : 1 ;
   unsigned int for_background : 1 ;
   unsigned int tagged_writepages : 1 ;
   unsigned int for_reclaim : 1 ;
   unsigned int range_cyclic : 1 ;
   unsigned int for_sync : 1 ;
   unsigned int no_cgroup_owner : 1 ;
   unsigned int punt_to_cgroup : 1 ;
   struct bdi_writeback *wb ;
   struct inode *inode ;
   int wb_id ;
   int wb_lcand_id ;
   int wb_tcand_id ;
   size_t wb_bytes ;
   size_t wb_lcand_bytes ;
   size_t wb_tcand_bytes ;
};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
struct wb_domain {
   spinlock_t lock ;
   struct fprop_global completions ;
   struct timer_list period_timer ;
   unsigned long period_time ;
   unsigned long dirty_limit_tstamp ;
   unsigned long dirty_limit ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_id {
   int id ;
   refcount_t ref ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_vmstats_percpu {
   long stat[38U] ;
   unsigned long events[91U] ;
   unsigned long nr_page_events ;
   unsigned long targets[2U] ;
};
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_reclaim_iter {
   struct mem_cgroup *position ;
   unsigned int generation ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct lruvec_stat {
   long count[32U] ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_shrinker_map {
   struct callback_head rcu ;
   unsigned long map[0U] ;
};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_per_node {
   struct lruvec lruvec ;
   struct lruvec_stat *lruvec_stat_local ;
   struct lruvec_stat *lruvec_stat_cpu ;
   atomic_long_t lruvec_stat[32U] ;
   unsigned long lru_zone_size[5U][5U] ;
   struct mem_cgroup_reclaim_iter iter ;
   struct memcg_shrinker_map *shrinker_map ;
   struct rb_node tree_node ;
   unsigned long usage_in_excess ;
   bool on_tree ;
   struct mem_cgroup *memcg ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_threshold {
   struct eventfd_ctx *eventfd ;
   unsigned long threshold ;
};
#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_threshold_ary {
   int current_threshold ;
   unsigned int size ;
   struct mem_cgroup_threshold entries[0U] ;
};
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_thresholds {
   struct mem_cgroup_threshold_ary *primary ;
   struct mem_cgroup_threshold_ary *spare ;
};
#line 164 
enum memcg_kmem_state {
    KMEM_NONE = 0,
    KMEM_ALLOCATED = 1,
    KMEM_ONLINE = 2
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_padding {
   char x[0U] ;
} __attribute__((__aligned__(4096)));
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_cgwb_frn {
   u64 bdi_id ;
   int memcg_id ;
   u64 at ;
   struct wb_completion done ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup {
   struct cgroup_subsys_state css ;
   struct mem_cgroup_id id ;
   struct page_counter memory ;
   struct page_counter swap ;
   struct page_counter memsw ;
   struct page_counter kmem ;
   struct page_counter tcpmem ;
   unsigned long high ;
   struct work_struct high_work ;
   unsigned long soft_limit ;
   struct vmpressure vmpressure ;
   bool use_hierarchy ;
   bool oom_group ;
   bool oom_lock ;
   int under_oom ;
   int swappiness ;
   int oom_kill_disable ;
   struct cgroup_file events_file ;
   struct cgroup_file events_local_file ;
   struct cgroup_file swap_events_file ;
   struct mutex thresholds_lock ;
   struct mem_cgroup_thresholds thresholds ;
   struct mem_cgroup_thresholds memsw_thresholds ;
   struct list_head oom_notify ;
   unsigned long move_charge_at_immigrate ;
   spinlock_t move_lock ;
   unsigned long move_lock_flags ;
   struct memcg_padding _pad1_ ;
   atomic_t moving_account ;
   struct task_struct *move_lock_task ;
   struct memcg_vmstats_percpu *vmstats_local ;
   struct memcg_vmstats_percpu *vmstats_percpu ;
   struct memcg_padding _pad2_ ;
   atomic_long_t vmstats[38U] ;
   atomic_long_t vmevents[91U] ;
   atomic_long_t memory_events[7U] ;
   atomic_long_t memory_events_local[7U] ;
   unsigned long socket_pressure ;
   bool tcpmem_active ;
   int tcpmem_pressure ;
   int kmemcg_id ;
   enum memcg_kmem_state kmem_state ;
   struct list_head kmem_caches ;
   struct list_head cgwb_list ;
   struct wb_domain cgwb_domain ;
   struct memcg_cgwb_frn cgwb_frn[4U] ;
   struct list_head event_list ;
   spinlock_t event_list_lock ;
   struct deferred_split deferred_split_queue ;
   struct mem_cgroup_per_node *nodeinfo[0U] ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/vdso.h"
struct vdso_image {
   void *data ;
   unsigned long size ;
   unsigned long alt ;
   unsigned long alt_len ;
   long sym_vvar_start ;
   long sym_vvar_page ;
   long sym_pvclock_page ;
   long sym_hvclock_page ;
   long sym_VDSO32_NOTE_MASK ;
   long sym___kernel_sigreturn ;
   long sym___kernel_rt_sigreturn ;
   long sym___kernel_vsyscall ;
   long sym_int80_landing_pad ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u16 Elf64_Half;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Off;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u32 Elf64_Word;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_hdr {
   unsigned char e_ident[16U] ;
   Elf64_Half e_type ;
   Elf64_Half e_machine ;
   Elf64_Word e_version ;
   Elf64_Addr e_entry ;
   Elf64_Off e_phoff ;
   Elf64_Off e_shoff ;
   Elf64_Word e_flags ;
   Elf64_Half e_ehsize ;
   Elf64_Half e_phentsize ;
   Elf64_Half e_phnum ;
   Elf64_Half e_shentsize ;
   Elf64_Half e_shnum ;
   Elf64_Half e_shstrndx ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_hdr Elf64_Ehdr;
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_shdr {
   Elf64_Word sh_name ;
   Elf64_Word sh_type ;
   Elf64_Xword sh_flags ;
   Elf64_Addr sh_addr ;
   Elf64_Off sh_offset ;
   Elf64_Xword sh_size ;
   Elf64_Word sh_link ;
   Elf64_Word sh_info ;
   Elf64_Xword sh_addralign ;
   Elf64_Xword sh_entsize ;
};
#line 328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_shdr Elf64_Shdr;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elf.h"
struct kernel_param;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param_ops {
   unsigned int flags ;
   int (*set)(char *, struct kernel_param *) ;
   int (*get)(char *, struct kernel_param *) ;
   void (*free)(void *) ;
};
#line 69 
struct kparam_string;
#line 69 
struct kparam_array;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
union __anonunion_865 {
   void *arg ;
   struct kparam_string *str ;
   struct kparam_array *arr ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param {
   char *name ;
   struct module *mod ;
   struct kernel_param_ops *ops ;
   u16 perm ;
   s8 level ;
   u8 flags ;
   union __anonunion_865 __anonCompField_kernel_param_175 ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int elemsize ;
   unsigned int *num ;
   struct kernel_param_ops *ops ;
   void *elem ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/error-injection.h"
struct error_injection_entry {
   unsigned long addr ;
   int etype ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/module.h"
struct mod_arch_specific {
   unsigned int num_orcs ;
   int *orc_unwind_ip ;
   struct orc_entry *orc_unwind ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_param_attrs;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
   struct completion *kobj_completion ;
} __attribute__((__designated_init__));
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute *, struct module_kobject *, char *) ;
   ssize_t (*store)(struct module_attribute *, struct module_kobject *, char *, size_t ) ;
   void (*setup)(struct module *, char *) ;
   int (*test)(struct module *) ;
   void (*free)(struct module *) ;
};
#line 297 
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2,
    MODULE_STATE_UNFORMED = 3
};
#line 305  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_tree_node {
   struct module *mod ;
   struct latch_tree_node node ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_layout {
   void *base ;
   unsigned int size ;
   unsigned int text_size ;
   unsigned int ro_size ;
   unsigned int ro_after_init_size ;
   struct mod_tree_node mtn ;
};
#line 334  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_kallsyms {
   Elf64_Sym *symtab ;
   unsigned int num_symtab ;
   char *strtab ;
   char *typetab ;
};
#line 342  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct klp_modinfo {
   Elf64_Ehdr hdr ;
   Elf64_Shdr *sechdrs ;
   char *secstrings ;
   unsigned int symndx ;
};
#line 350 
struct module_sect_attrs;
#line 350 
struct module_notes_attrs;
#line 350 
struct trace_event_call;
#line 350 
struct trace_eval_map;
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char *version ;
   char *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol *syms ;
   s32 *crcs ;
   unsigned int num_syms ;
   struct mutex param_lock ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol *gpl_syms ;
   s32 *gpl_crcs ;
   struct kernel_symbol *unused_syms ;
   s32 *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol *unused_gpl_syms ;
   s32 *unused_gpl_crcs ;
   bool sig_ok ;
   bool async_probe_requested ;
   struct kernel_symbol *gpl_future_syms ;
   s32 *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   struct module_layout core_layout ;
   struct module_layout init_layout ;
   struct mod_arch_specific arch ;
   unsigned long taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   struct mod_kallsyms *kallsyms ;
   struct mod_kallsyms core_kallsyms ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   char *args ;
   void *percpu ;
   unsigned int percpu_size ;
   unsigned int num_tracepoints ;
   tracepoint_ptr_t *tracepoints_ptrs ;
   unsigned int num_srcu_structs ;
   struct srcu_struct **srcu_struct_ptrs ;
   unsigned int num_bpf_raw_events ;
   struct bpf_raw_event_map *bpf_raw_events ;
   struct jump_entry *jump_entries ;
   unsigned int num_jump_entries ;
   unsigned int num_trace_bprintk_fmt ;
   char **trace_bprintk_fmt_start ;
   struct trace_event_call **trace_events ;
   unsigned int num_trace_events ;
   struct trace_eval_map **trace_evals ;
   unsigned int num_trace_evals ;
   unsigned int num_ftrace_callsites ;
   unsigned long *ftrace_callsites ;
   bool klp ;
   bool klp_alive ;
   struct klp_modinfo *klp_info ;
   struct list_head source_list ;
   struct list_head target_list ;
   void (*exit)(void) ;
   atomic_t refcnt ;
   ctor_fn_t *ctors ;
   unsigned int num_ctors ;
   struct error_injection_entry *ei_funcs ;
   unsigned int num_ei_funcs ;
} __attribute__((__designated_init__, __aligned__(64)));
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/filter.h"
struct sock_filter {
   __u16 code ;
   __u8 jt ;
   __u8 jf ;
   __u32 k ;
};
#line 35 
struct sock_reuseport;
#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct sock_fprog_kern {
   u16 len ;
   struct sock_filter *filter ;
};
#line 526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
union __anonunion_866 {
   struct sock_filter insns[0U] ;
   struct bpf_insn insnsi[0U] ;
};
#line 526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct bpf_prog {
   u16 pages ;
   u16 jited : 1 ;
   u16 jit_requested : 1 ;
   u16 gpl_compatible : 1 ;
   u16 cb_access : 1 ;
   u16 dst_needed : 1 ;
   u16 blinded : 1 ;
   u16 is_func : 1 ;
   u16 kprobe_override : 1 ;
   u16 has_callchain_buf : 1 ;
   u16 enforce_expected_attach_type : 1 ;
   enum bpf_prog_type type ;
   enum bpf_attach_type expected_attach_type ;
   u32 len ;
   u32 jited_len ;
   u8 tag[8U] ;
   struct bpf_prog_aux *aux ;
   struct sock_fprog_kern *orig_prog ;
   unsigned int (*bpf_func)(void *, struct bpf_insn *) ;
   union __anonunion_866 __anonCompField_bpf_prog_176 ;
};
#line 554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct sk_filter {
   refcount_t refcnt ;
   struct callback_head rcu ;
   struct bpf_prog *prog ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/poll.h"
struct pollfd {
   int fd ;
   short events ;
   short revents ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/poll.h"
struct poll_table_struct {
   void (*_qproc)(struct file *, wait_queue_head_t *, struct poll_table_struct *) ;
   __poll_t _key ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_table;
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_parms {
   possible_net_t net ;
   struct net_device *dev ;
   struct list_head list ;
   int (*neigh_setup)(struct neighbour *) ;
   struct neigh_table *tbl ;
   void *sysctl_table ;
   int dead ;
   refcount_t refcnt ;
   struct callback_head callback_head ;
   int reachable_time ;
   int data[13U] ;
   unsigned long data_state[1U] ;
};
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_statistics {
   unsigned long allocs ;
   unsigned long destroys ;
   unsigned long hash_grows ;
   unsigned long res_failed ;
   unsigned long lookups ;
   unsigned long hits ;
   unsigned long rcv_probes_mcast ;
   unsigned long rcv_probes_ucast ;
   unsigned long periodic_gc_runs ;
   unsigned long forced_gc_runs ;
   unsigned long unres_discards ;
   unsigned long table_fulls ;
};
#line 134 
struct neigh_ops;
#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neighbour {
   struct neighbour *next ;
   struct neigh_table *tbl ;
   struct neigh_parms *parms ;
   unsigned long confirmed ;
   unsigned long updated ;
   rwlock_t lock ;
   refcount_t refcnt ;
   unsigned int arp_queue_len_bytes ;
   struct sk_buff_head arp_queue ;
   struct timer_list timer ;
   unsigned long used ;
   atomic_t probes ;
   __u8 flags ;
   __u8 nud_state ;
   __u8 type ;
   __u8 dead ;
   u8 protocol ;
   seqlock_t ha_lock ;
   unsigned char ha[32U] ;
   struct hh_cache hh ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   struct neigh_ops *ops ;
   struct list_head gc_list ;
   struct callback_head rcu ;
   struct net_device *dev ;
   u8 primary_key[0U] ;
} __attribute__((__designated_init__));
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_ops {
   int family ;
   void (*solicit)(struct neighbour *, struct sk_buff *) ;
   void (*error_report)(struct neighbour *, struct sk_buff *) ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   int (*connected_output)(struct neighbour *, struct sk_buff *) ;
};
#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct pneigh_entry {
   struct pneigh_entry *next ;
   possible_net_t net ;
   struct net_device *dev ;
   u8 flags ;
   u8 protocol ;
   u8 key[0U] ;
};
#line 186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_hash_table {
   struct neighbour **hash_buckets ;
   unsigned int hash_shift ;
   __u32 hash_rnd[4U] ;
   struct callback_head rcu ;
};
#line 194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_table {
   int family ;
   unsigned int entry_size ;
   unsigned int key_len ;
   __be16 protocol ;
   __u32 (*hash)(void *, struct net_device *, __u32 *) ;
   bool (*key_eq)(struct neighbour *, void *) ;
   int (*constructor)(struct neighbour *) ;
   int (*pconstructor)(struct pneigh_entry *) ;
   void (*pdestructor)(struct pneigh_entry *) ;
   void (*proxy_redo)(struct sk_buff *) ;
   bool (*allow_add)(struct net_device *, struct netlink_ext_ack *) ;
   char *id ;
   struct neigh_parms parms ;
   struct list_head parms_list ;
   int gc_interval ;
   int gc_thresh1 ;
   int gc_thresh2 ;
   int gc_thresh3 ;
   unsigned long last_flush ;
   struct delayed_work gc_work ;
   struct timer_list proxy_timer ;
   struct sk_buff_head proxy_queue ;
   atomic_t entries ;
   atomic_t gc_entries ;
   struct list_head gc_list ;
   rwlock_t lock ;
   unsigned long last_rand ;
   struct neigh_statistics *stats ;
   struct neigh_hash_table *nht ;
   struct pneigh_entry **phash_buckets ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst.h"
struct lwtunnel_state;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst.h"
struct dst_entry {
   struct net_device *dev ;
   struct dst_ops *ops ;
   unsigned long _metrics ;
   unsigned long expires ;
   struct xfrm_state *xfrm ;
   int (*input)(struct sk_buff *) ;
   int (*output)(struct net *, struct sock *, struct sk_buff *) ;
   unsigned short flags ;
   short obsolete ;
   unsigned short header_len ;
   unsigned short trailer_len ;
   atomic_t __refcnt ;
   int __use ;
   unsigned long lastuse ;
   struct lwtunnel_state *lwtstate ;
   struct callback_head callback_head ;
   short error ;
   short __pad ;
   __u32 tclassid ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fib_rules.h"
struct fib_rule_hdr {
   __u8 family ;
   __u8 dst_len ;
   __u8 src_len ;
   __u8 tos ;
   __u8 table ;
   __u8 res1 ;
   __u8 res2 ;
   __u8 action ;
   __u32 flags ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fib_rules.h"
struct fib_rule_port_range {
   __u16 start ;
   __u16 end ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_notifier.h"
struct fib_notifier_ops {
   int family ;
   struct list_head list ;
   unsigned int (*fib_seq_read)(struct net *) ;
   int (*fib_dump)(struct net *, struct notifier_block *, struct netlink_ext_ack *) ;
   struct module *owner ;
   struct callback_head rcu ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_kuid_range {
   kuid_t start ;
   kuid_t end ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_rule {
   struct list_head list ;
   int iifindex ;
   int oifindex ;
   u32 mark ;
   u32 mark_mask ;
   u32 flags ;
   u32 table ;
   u8 action ;
   u8 l3mdev ;
   u8 proto ;
   u8 ip_proto ;
   u32 target ;
   __be64 tun_id ;
   struct fib_rule *ctarget ;
   struct net *fr_net ;
   refcount_t refcnt ;
   u32 pref ;
   int suppress_ifgroup ;
   int suppress_prefixlen ;
   char iifname[16U] ;
   char oifname[16U] ;
   struct fib_kuid_range uid_range ;
   struct fib_rule_port_range sport_range ;
   struct fib_rule_port_range dport_range ;
   struct callback_head rcu ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_lookup_arg {
   void *lookup_ptr ;
   void *lookup_data ;
   void *result ;
   struct fib_rule *rule ;
   u32 table ;
   int flags ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_rules_ops {
   int family ;
   struct list_head list ;
   int rule_size ;
   int addr_size ;
   int unresolved_rules ;
   int nr_goto_rules ;
   unsigned int fib_rules_seq ;
   int (*action)(struct fib_rule *, struct flowi *, int , struct fib_lookup_arg *) ;
   bool (*suppress)(struct fib_rule *, struct fib_lookup_arg *) ;
   int (*match)(struct fib_rule *, struct flowi *, int ) ;
   int (*configure)(struct fib_rule *, struct sk_buff *, struct fib_rule_hdr *, struct nlattr **, struct netlink_ext_ack *) ;
   int (*delete)(struct fib_rule *) ;
   int (*compare)(struct fib_rule *, struct fib_rule_hdr *, struct nlattr **) ;
   int (*fill)(struct fib_rule *, struct sk_buff *, struct fib_rule_hdr *) ;
   size_t (*nlmsg_payload)(struct fib_rule *) ;
   void (*flush_cache)(struct fib_rules_ops *) ;
   int nlgroup ;
   struct nla_policy *policy ;
   struct list_head rules_list ;
   struct module *owner ;
   struct net *fro_net ;
   struct callback_head rcu ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
struct l3mdev_ops {
   u32 (*l3mdev_fib_table)(struct net_device *) ;
   struct sk_buff *(*l3mdev_l3_rcv)(struct net_device *, struct sk_buff *, u16 ) ;
   struct sk_buff *(*l3mdev_l3_out)(struct net_device *, struct sock *, struct sk_buff *, u16 ) ;
   struct dst_entry *(*l3mdev_link_scope_lookup)(struct net_device *, struct flowi6 *) ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
struct __anonstruct_socket_lock_t_888 {
   spinlock_t slock ;
   int owned ;
   wait_queue_head_t wq ;
   struct lockdep_map dep_map ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
typedef struct __anonstruct_socket_lock_t_888 socket_lock_t;
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct proto;
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
typedef __u32 __portpair;
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
typedef __u64 __addrpair;
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_890 {
   __be32 skc_daddr ;
   __be32 skc_rcv_saddr ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_889 {
   __addrpair skc_addrpair ;
   struct __anonstruct_890 __anonCompField___anonunion_889_178 ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_891 {
   unsigned int skc_hash ;
   __u16 skc_u16hashes[2U] ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_893 {
   __be16 skc_dport ;
   __u16 skc_num ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_892 {
   __portpair skc_portpair ;
   struct __anonstruct_893 __anonCompField___anonunion_892_181 ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_894 {
   struct hlist_node skc_bind_node ;
   struct hlist_node skc_portaddr_node ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_895 {
   unsigned long skc_flags ;
   struct sock *skc_listener ;
   struct inet_timewait_death_row *skc_tw_dr ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_896 {
   struct hlist_node skc_node ;
   struct hlist_nulls_node skc_nulls_node ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_897 {
   int skc_incoming_cpu ;
   u32 skc_rcv_wnd ;
   u32 skc_tw_rcv_nxt ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_898 {
   u32 skc_rxhash ;
   u32 skc_window_clamp ;
   u32 skc_tw_snd_nxt ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct sock_common {
   union __anonunion_889 __anonCompField_sock_common_179 ;
   union __anonunion_891 __anonCompField_sock_common_180 ;
   union __anonunion_892 __anonCompField_sock_common_182 ;
   unsigned short skc_family ;
   unsigned char skc_state ;
   unsigned char skc_reuse : 4 ;
   unsigned char skc_reuseport : 1 ;
   unsigned char skc_ipv6only : 1 ;
   unsigned char skc_net_refcnt : 1 ;
   int skc_bound_dev_if ;
   union __anonunion_894 __anonCompField_sock_common_183 ;
   struct proto *skc_prot ;
   possible_net_t skc_net ;
   struct in6_addr skc_v6_daddr ;
   struct in6_addr skc_v6_rcv_saddr ;
   atomic64_t skc_cookie ;
   union __anonunion_895 __anonCompField_sock_common_184 ;
   int skc_dontcopy_begin[0U] ;
   union __anonunion_896 __anonCompField_sock_common_185 ;
   unsigned short skc_tx_queue_mapping ;
   unsigned short skc_rx_queue_mapping ;
   union __anonunion_897 __anonCompField_sock_common_186 ;
   refcount_t skc_refcnt ;
   int skc_dontcopy_end[0U] ;
   union __anonunion_898 __anonCompField_sock_common_187 ;
};
#line 231 
struct bpf_sk_storage;
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_sk_backlog_899 {
   atomic_t rmem_alloc ;
   int len ;
   struct sk_buff *head ;
   struct sk_buff *tail ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_900 {
   struct socket_wq *sk_wq ;
   struct socket_wq *sk_wq_raw ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_901 {
   struct sk_buff *sk_send_head ;
   struct rb_root tcp_rtx_queue ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct sock {
   struct sock_common __sk_common ;
   socket_lock_t sk_lock ;
   atomic_t sk_drops ;
   int sk_rcvlowat ;
   struct sk_buff_head sk_error_queue ;
   struct sk_buff *sk_rx_skb_cache ;
   struct sk_buff_head sk_receive_queue ;
   struct __anonstruct_sk_backlog_899 sk_backlog ;
   int sk_forward_alloc ;
   unsigned int sk_ll_usec ;
   unsigned int sk_napi_id ;
   int sk_rcvbuf ;
   struct sk_filter *sk_filter ;
   union __anonunion_900 __anonCompField_sock_188 ;
   struct xfrm_policy *sk_policy[2U] ;
   struct dst_entry *sk_rx_dst ;
   struct dst_entry *sk_dst_cache ;
   atomic_t sk_omem_alloc ;
   int sk_sndbuf ;
   int sk_wmem_queued ;
   refcount_t sk_wmem_alloc ;
   unsigned long sk_tsq_flags ;
   union __anonunion_901 __anonCompField_sock_189 ;
   struct sk_buff *sk_tx_skb_cache ;
   struct sk_buff_head sk_write_queue ;
   __s32 sk_peek_off ;
   int sk_write_pending ;
   __u32 sk_dst_pending_confirm ;
   u32 sk_pacing_status ;
   long sk_sndtimeo ;
   struct timer_list sk_timer ;
   __u32 sk_priority ;
   __u32 sk_mark ;
   unsigned long sk_pacing_rate ;
   unsigned long sk_max_pacing_rate ;
   struct page_frag sk_frag ;
   netdev_features_t sk_route_caps ;
   netdev_features_t sk_route_nocaps ;
   netdev_features_t sk_route_forced_caps ;
   int sk_gso_type ;
   unsigned int sk_gso_max_size ;
   gfp_t sk_allocation ;
   __u32 sk_txhash ;
   unsigned int __sk_flags_offset[0U] ;
   unsigned int sk_padding : 1 ;
   unsigned int sk_kern_sock : 1 ;
   unsigned int sk_no_check_tx : 1 ;
   unsigned int sk_no_check_rx : 1 ;
   unsigned int sk_userlocks : 4 ;
   unsigned int sk_protocol : 8 ;
   unsigned int sk_type : 16 ;
   u16 sk_gso_max_segs ;
   u8 sk_pacing_shift ;
   unsigned long sk_lingertime ;
   struct proto *sk_prot_creator ;
   rwlock_t sk_callback_lock ;
   int sk_err ;
   int sk_err_soft ;
   u32 sk_ack_backlog ;
   u32 sk_max_ack_backlog ;
   kuid_t sk_uid ;
   struct pid *sk_peer_pid ;
   struct cred *sk_peer_cred ;
   long sk_rcvtimeo ;
   ktime_t sk_stamp ;
   u16 sk_tsflags ;
   u8 sk_shutdown ;
   u32 sk_tskey ;
   atomic_t sk_zckey ;
   u8 sk_clockid ;
   u8 sk_txtime_deadline_mode : 1 ;
   u8 sk_txtime_report_errors : 1 ;
   u8 sk_txtime_unused : 6 ;
   struct socket *sk_socket ;
   void *sk_user_data ;
   void *sk_security ;
   struct sock_cgroup_data sk_cgrp_data ;
   struct mem_cgroup *sk_memcg ;
   void (*sk_state_change)(struct sock *) ;
   void (*sk_data_ready)(struct sock *) ;
   void (*sk_write_space)(struct sock *) ;
   void (*sk_error_report)(struct sock *) ;
   int (*sk_backlog_rcv)(struct sock *, struct sk_buff *) ;
   struct sk_buff *(*sk_validate_xmit_skb)(struct sock *, struct net_device *, struct sk_buff *) ;
   void (*sk_destruct)(struct sock *) ;
   struct sock_reuseport *sk_reuseport_cb ;
   struct bpf_sk_storage *sk_bpf_storage ;
   struct callback_head sk_rcu ;
};
#line 1048 
struct request_sock_ops;
#line 1049 
struct timewait_sock_ops;
#line 1050 
struct raw_hashinfo;
#line 1051 
struct smc_hashinfo;
#line 1071 
struct udp_table;
#line 1071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_h_936 {
   struct inet_hashinfo *hashinfo ;
   struct udp_table *udp_table ;
   struct raw_hashinfo *raw_hash ;
   struct smc_hashinfo *smc_hash ;
};
#line 1071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct proto {
   void (*close)(struct sock *, long ) ;
   int (*pre_connect)(struct sock *, struct sockaddr *, int ) ;
   int (*connect)(struct sock *, struct sockaddr *, int ) ;
   int (*disconnect)(struct sock *, int ) ;
   struct sock *(*accept)(struct sock *, int , int *, bool ) ;
   int (*ioctl)(struct sock *, int , unsigned long ) ;
   int (*init)(struct sock *) ;
   void (*destroy)(struct sock *) ;
   void (*shutdown)(struct sock *, int ) ;
   int (*setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct sock *, int , int , char *, int *) ;
   void (*keepalive)(struct sock *, int ) ;
   int (*compat_setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct sock *, int , int , char *, int *) ;
   int (*compat_ioctl)(struct sock *, unsigned int , unsigned long ) ;
   int (*sendmsg)(struct sock *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct sock *, struct msghdr *, size_t , int , int , int *) ;
   int (*sendpage)(struct sock *, struct page *, int , size_t , int ) ;
   int (*bind)(struct sock *, struct sockaddr *, int ) ;
   int (*backlog_rcv)(struct sock *, struct sk_buff *) ;
   void (*release_cb)(struct sock *) ;
   int (*hash)(struct sock *) ;
   void (*unhash)(struct sock *) ;
   void (*rehash)(struct sock *) ;
   int (*get_port)(struct sock *, unsigned short ) ;
   unsigned int inuse_idx ;
   bool (*stream_memory_free)(struct sock *, int ) ;
   bool (*stream_memory_read)(struct sock *) ;
   void (*enter_memory_pressure)(struct sock *) ;
   void (*leave_memory_pressure)(struct sock *) ;
   atomic_long_t *memory_allocated ;
   struct percpu_counter *sockets_allocated ;
   unsigned long *memory_pressure ;
   long *sysctl_mem ;
   int *sysctl_wmem ;
   int *sysctl_rmem ;
   u32 sysctl_wmem_offset ;
   u32 sysctl_rmem_offset ;
   int max_header ;
   bool no_autobind ;
   struct kmem_cache *slab ;
   unsigned int obj_size ;
   slab_flags_t slab_flags ;
   unsigned int useroffset ;
   unsigned int usersize ;
   struct percpu_counter *orphan_count ;
   struct request_sock_ops *rsk_prot ;
   struct timewait_sock_ops *twsk_prot ;
   union __anonunion_h_936 h ;
   struct module *owner ;
   char name[32U] ;
   struct list_head node ;
   int (*diag_destroy)(struct sock *, int ) ;
} __attribute__((__designated_init__));
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/request_sock.h"
struct request_sock_ops {
   int family ;
   unsigned int obj_size ;
   struct kmem_cache *slab ;
   char *slab_name ;
   int (*rtx_syn_ack)(struct sock *, struct request_sock *) ;
   void (*send_ack)(struct sock *, struct sk_buff *, struct request_sock *) ;
   void (*send_reset)(struct sock *, struct sk_buff *) ;
   void (*destructor)(struct request_sock *) ;
   void (*syn_ack_timeout)(struct request_sock *) ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/request_sock.h"
struct request_sock {
   struct sock_common __req_common ;
   struct request_sock *dl_next ;
   u16 mss ;
   u8 num_retrans ;
   u8 cookie_ts : 1 ;
   u8 num_timeout : 7 ;
   u32 ts_recent ;
   struct timer_list rsk_timer ;
   struct request_sock_ops *rsk_ops ;
   struct sock *sk ;
   u32 *saved_syn ;
   u32 secid ;
   u32 peer_secid ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
struct ipv6_stable_secret {
   bool initialized ;
   struct in6_addr secret ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
struct ipv6_devconf {
   __s32 forwarding ;
   __s32 hop_limit ;
   __s32 mtu6 ;
   __s32 accept_ra ;
   __s32 accept_redirects ;
   __s32 autoconf ;
   __s32 dad_transmits ;
   __s32 rtr_solicits ;
   __s32 rtr_solicit_interval ;
   __s32 rtr_solicit_max_interval ;
   __s32 rtr_solicit_delay ;
   __s32 force_mld_version ;
   __s32 mldv1_unsolicited_report_interval ;
   __s32 mldv2_unsolicited_report_interval ;
   __s32 use_tempaddr ;
   __s32 temp_valid_lft ;
   __s32 temp_prefered_lft ;
   __s32 regen_max_retry ;
   __s32 max_desync_factor ;
   __s32 max_addresses ;
   __s32 accept_ra_defrtr ;
   __s32 accept_ra_min_hop_limit ;
   __s32 accept_ra_pinfo ;
   __s32 ignore_routes_with_linkdown ;
   __s32 accept_ra_rtr_pref ;
   __s32 rtr_probe_interval ;
   __s32 accept_ra_rt_info_min_plen ;
   __s32 accept_ra_rt_info_max_plen ;
   __s32 proxy_ndp ;
   __s32 accept_source_route ;
   __s32 accept_ra_from_local ;
   __s32 optimistic_dad ;
   __s32 use_optimistic ;
   __s32 mc_forwarding ;
   __s32 disable_ipv6 ;
   __s32 drop_unicast_in_l2_multicast ;
   __s32 accept_dad ;
   __s32 force_tllao ;
   __s32 ndisc_notify ;
   __s32 suppress_frag_ndisc ;
   __s32 accept_ra_mtu ;
   __s32 drop_unsolicited_na ;
   struct ipv6_stable_secret stable_secret ;
   __s32 use_oif_addrs_only ;
   __s32 keep_addr_on_down ;
   __s32 seg6_enabled ;
   __s32 seg6_require_hmac ;
   __u32 enhanced_dad ;
   __u32 addr_gen_mode ;
   __s32 disable_policy ;
   __s32 ndisc_tclass ;
   struct ctl_table_header *sysctl_header ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/timewait_sock.h"
struct timewait_sock_ops {
   struct kmem_cache *twsk_slab ;
   char *twsk_slab_name ;
   unsigned int twsk_obj_size ;
   int (*twsk_unique)(struct sock *, struct sock *, void *) ;
   void (*twsk_destructor)(struct sock *) ;
};
#line 246  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_ecn.h"
typedef u32 codel_time_t;
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_tx_queue_params {
   u16 txop ;
   u16 cw_min ;
   u16 cw_max ;
   u8 aifs ;
   bool acm ;
   bool uapsd ;
   bool mu_edca ;
   struct ieee80211_he_mu_edca_param_ac_rec mu_edca_param_rec ;
};
#line 225  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_chanctx_conf {
   struct cfg80211_chan_def def ;
   struct cfg80211_chan_def min_def ;
   u8 rx_chains_static ;
   u8 rx_chains_dynamic ;
   bool radar_enabled ;
   u8 drv_priv[0U] ;
};
#line 267 
struct ieee80211_vif;
#line 440 
struct ieee80211_sta;
#line 471  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_mu_group_data {
   u8 membership[8U] ;
   u8 position[16U] ;
};
#line 484  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_ftm_responder_params {
   u8 *lci ;
   u8 *civicloc ;
   size_t lci_len ;
   size_t civicloc_len ;
};
#line 608  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_bss_conf {
   u8 *bssid ;
   u8 bss_color ;
   u8 htc_trig_based_pkt_ext ;
   bool multi_sta_back_32bit ;
   bool uora_exists ;
   bool ack_enabled ;
   u8 uora_ocw_range ;
   u16 frame_time_rts_th ;
   bool he_support ;
   bool twt_requester ;
   bool twt_responder ;
   bool assoc ;
   bool ibss_joined ;
   bool ibss_creator ;
   u16 aid ;
   bool use_cts_prot ;
   bool use_short_preamble ;
   bool use_short_slot ;
   bool enable_beacon ;
   u8 dtim_period ;
   u16 beacon_int ;
   u16 assoc_capability ;
   u64 sync_tsf ;
   u32 sync_device_ts ;
   u8 sync_dtim_count ;
   u32 basic_rates ;
   struct ieee80211_rate *beacon_rate ;
   int mcast_rate[4U] ;
   u16 ht_operation_mode ;
   s32 cqm_rssi_thold ;
   u32 cqm_rssi_hyst ;
   s32 cqm_rssi_low ;
   s32 cqm_rssi_high ;
   struct cfg80211_chan_def chandef ;
   struct ieee80211_mu_group_data mu_group ;
   __be32 arp_addr_list[4U] ;
   int arp_addr_cnt ;
   bool qos ;
   bool idle ;
   bool ps ;
   u8 ssid[32U] ;
   size_t ssid_len ;
   bool hidden_ssid ;
   int txpower ;
   enum nl80211_tx_power_setting txpower_type ;
   struct ieee80211_p2p_noa_attr p2p_noa_attr ;
   bool allow_p2p_go_ps ;
   u16 max_idle_period ;
   bool protected_keep_alive ;
   bool ftm_responder ;
   struct ieee80211_ftm_responder_params *ftmr_params ;
   bool nontransmitted ;
   u8 transmitter_bssid[6U] ;
   u8 bssid_index ;
   u8 bssid_indicator ;
   bool ema_ap ;
   u8 profile_periodicity ;
   struct ieee80211_he_operation he_operation ;
   struct ieee80211_he_obss_pd he_obss_pd ;
};
#line 930  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_tx_rate {
   s8 idx ;
   u16 count : 5 ;
   u16 flags : 11 ;
} __attribute__((__packed__));
#line 1004  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct __anonstruct_1012 {
   struct ieee80211_tx_rate rates[4U] ;
   s8 rts_cts_rate_idx ;
   u8 use_rts : 1 ;
   u8 use_cts_prot : 1 ;
   u8 short_preamble : 1 ;
   u8 skip_table : 1 ;
};
#line 1004  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
union __anonunion_1011 {
   struct __anonstruct_1012 __anonCompField___anonunion_1011_192 ;
   unsigned long jiffies ;
};
#line 1004 
struct ieee80211_key_conf;
#line 1004  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct __anonstruct_control_1010 {
   union __anonunion_1011 __anonCompField___anonstruct_control_1010_193 ;
   struct ieee80211_vif *vif ;
   struct ieee80211_key_conf *hw_key ;
   u32 flags ;
   codel_time_t enqueue_time ;
};
#line 1004  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct __anonstruct_ack_1013 {
   u64 cookie ;
};
#line 1004  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct __anonstruct_status_1014 {
   struct ieee80211_tx_rate rates[4U] ;
   s32 ack_signal ;
   u8 ampdu_ack_len ;
   u8 ampdu_len ;
   u8 antenna ;
   u16 tx_time ;
   bool is_valid_ack_signal ;
   void *status_driver_data[2U] ;
};
#line 1004  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct __anonstruct_1015 {
   struct ieee80211_tx_rate driver_rates[4U] ;
   u8 pad[4U] ;
   void *rate_driver_data[3U] ;
};
#line 1004  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
union __anonunion_1009 {
   struct __anonstruct_control_1010 control ;
   struct __anonstruct_ack_1013 ack ;
   struct __anonstruct_status_1014 status ;
   struct __anonstruct_1015 __anonCompField___anonunion_1009_194 ;
   void *driver_data[5U] ;
};
#line 1004  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_tx_info {
   u32 flags ;
   u8 band ;
   u8 hw_queue ;
   u16 ack_frame_id : 6 ;
   u16 tx_time_est : 10 ;
   union __anonunion_1009 __anonCompField_ieee80211_tx_info_195 ;
};
#line 1119 
struct ieee80211_rx_status;
#line 1358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_rx_status {
   u64 mactime ;
   u64 boottime_ns ;
   u32 device_timestamp ;
   u32 ampdu_reference ;
   u32 flag ;
   u16 freq ;
   u8 enc_flags ;
   u8 encoding : 2 ;
   u8 bw : 3 ;
   u8 he_ru : 3 ;
   u8 he_gi : 2 ;
   u8 he_dcm : 1 ;
   u8 rate_idx ;
   u8 nss ;
   u8 rx_flags ;
   u8 band ;
   u8 antenna ;
   s8 signal ;
   u8 chains ;
   s8 chain_signal[4U] ;
   u8 ampdu_delimiter_crc ;
   u8 zero_length_psdu_type ;
};
#line 1430 
enum ieee80211_smps_mode {
    IEEE80211_SMPS_AUTOMATIC = 0,
    IEEE80211_SMPS_OFF = 1,
    IEEE80211_SMPS_STATIC = 2,
    IEEE80211_SMPS_DYNAMIC = 3,
    IEEE80211_SMPS_NUM_MODES = 4
};
#line 1522  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_conf {
   u32 flags ;
   int power_level ;
   int dynamic_ps_timeout ;
   u16 listen_interval ;
   u8 ps_dtim_period ;
   u8 long_frame_max_tx_count ;
   u8 short_frame_max_tx_count ;
   struct cfg80211_chan_def chandef ;
   bool radar_enabled ;
   enum ieee80211_smps_mode smps_mode ;
};
#line 1627 
struct ieee80211_txq;
#line 1627  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_vif {
   enum nl80211_iftype type ;
   struct ieee80211_bss_conf bss_conf ;
   u8 addr[6U] ;
   bool p2p ;
   bool csa_active ;
   bool mu_mimo_owner ;
   u8 cab_queue ;
   u8 hw_queue[4U] ;
   struct ieee80211_txq *txq ;
   struct ieee80211_chanctx_conf *chanctx_conf ;
   u32 driver_flags ;
   struct dentry *debugfs_dir ;
   unsigned int probe_req_reg ;
   bool txqs_stopped[4U] ;
   u8 drv_priv[0U] ;
};
#line 1772  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_key_conf {
   atomic64_t tx_pn ;
   u32 cipher ;
   u8 icv_len ;
   u8 iv_len ;
   u8 hw_key_idx ;
   s8 keyidx ;
   u16 flags ;
   u8 keylen ;
   u8 key[0U] ;
};
#line 1846  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_cipher_scheme {
   u32 cipher ;
   u16 iftype ;
   u8 hdr_len ;
   u8 pn_len ;
   u8 pn_off ;
   u8 key_idx_off ;
   u8 key_idx_mask ;
   u8 key_idx_shift ;
   u8 mic_len ;
};
#line 1870 
enum ieee80211_sta_rx_bandwidth {
    IEEE80211_STA_RX_BW_20 = 0,
    IEEE80211_STA_RX_BW_40 = 1,
    IEEE80211_STA_RX_BW_80 = 2,
    IEEE80211_STA_RX_BW_160 = 3
};
#line 1915  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct __anonstruct_rate_1023 {
   s8 idx ;
   u8 count ;
   u8 count_cts ;
   u8 count_rts ;
   u16 flags ;
};
#line 1915  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_sta_rates {
   struct callback_head callback_head ;
   struct __anonstruct_rate_1023 rate[4U] ;
};
#line 1939  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_sta_txpwr {
   s16 power ;
   enum nl80211_tx_power_setting type ;
};
#line 1991  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_sta {
   u32 supp_rates[4U] ;
   u8 addr[6U] ;
   u16 aid ;
   struct ieee80211_sta_ht_cap ht_cap ;
   struct ieee80211_sta_vht_cap vht_cap ;
   struct ieee80211_sta_he_cap he_cap ;
   u16 max_rx_aggregation_subframes ;
   bool wme ;
   u8 uapsd_queues ;
   u8 max_sp ;
   u8 rx_nss ;
   enum ieee80211_sta_rx_bandwidth bandwidth ;
   enum ieee80211_smps_mode smps_mode ;
   struct ieee80211_sta_rates *rates ;
   bool tdls ;
   bool tdls_initiator ;
   bool mfp ;
   u8 max_amsdu_subframes ;
   u16 max_amsdu_len ;
   bool support_p2p_ps ;
   u16 max_rc_amsdu_len ;
   u16 max_tid_amsdu_len[16U] ;
   struct ieee80211_sta_txpwr txpwr ;
   struct ieee80211_txq *txq[17U] ;
   u8 drv_priv[0U] ;
};
#line 2074  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_txq {
   struct ieee80211_vif *vif ;
   struct ieee80211_sta *sta ;
   u8 tid ;
   u8 ac ;
   u8 drv_priv[0U] ;
};
#line 2487  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct __anonstruct_radiotap_timestamp_1024 {
   int units_pos ;
   s16 accuracy ;
};
#line 2487  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_hw {
   struct ieee80211_conf conf ;
   struct wiphy *wiphy ;
   char *rate_control_algorithm ;
   void *priv ;
   unsigned long flags[1U] ;
   unsigned int extra_tx_headroom ;
   unsigned int extra_beacon_tailroom ;
   int vif_data_size ;
   int sta_data_size ;
   int chanctx_data_size ;
   int txq_data_size ;
   u16 queues ;
   u16 max_listen_interval ;
   s8 max_signal ;
   u8 max_rates ;
   u8 max_report_rates ;
   u8 max_rate_tries ;
   u16 max_rx_aggregation_subframes ;
   u16 max_tx_aggregation_subframes ;
   u8 max_tx_fragments ;
   u8 offchannel_tx_hw_queue ;
   u8 radiotap_mcs_details ;
   u16 radiotap_vht_details ;
   struct __anonstruct_radiotap_timestamp_1024 radiotap_timestamp ;
   netdev_features_t netdev_features ;
   u8 uapsd_queues ;
   u8 uapsd_max_sp_len ;
   u8 n_cipher_schemes ;
   struct ieee80211_cipher_scheme *cipher_schemes ;
   u8 max_nan_de_entries ;
   u8 tx_sk_pacing_shift ;
   u8 weight_multiplier ;
   u32 max_mtu ;
};
#line 166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitfield.h"
struct rtl_priv;
#line 234  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct rtlwifi_firmware_header {
   __le16 signature ;
   u8 category ;
   u8 function ;
   __le16 version ;
   u8 subversion ;
   u8 rsvd1 ;
   u8 month ;
   u8 date ;
   u8 hour ;
   u8 minute ;
   __le16 ramcodesize ;
   __le16 rsvd2 ;
   __le32 svnindex ;
   __le32 rsvd3 ;
   __le32 rsvd4 ;
   __le32 rsvd5 ;
};
#line 284 
enum intf_type {
    INTF_PCI = 0,
    INTF_USB = 1
};
#line 289 
enum radio_path {
    RF90_PATH_A = 0,
    RF90_PATH_B = 1,
    RF90_PATH_C = 2,
    RF90_PATH_D = 3
};
#line 349 
enum rf_pwrstate {
    ERFON = 0,
    ERFSLEEP = 1,
    ERFOFF = 2
};
#line 384  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct bb_reg_def {
   u32 rfintfs ;
   u32 rfintfi ;
   u32 rfintfo ;
   u32 rfintfe ;
   u32 rf3wire_offset ;
   u32 rflssi_select ;
   u32 rftxgain_stage ;
   u32 rfhssi_para1 ;
   u32 rfhssi_para2 ;
   u32 rfsw_ctrl ;
   u32 rfagc_control1 ;
   u32 rfagc_control2 ;
   u32 rfrxiq_imbal ;
   u32 rfrx_afe ;
   u32 rftxiq_imbal ;
   u32 rftx_afe ;
   u32 rf_rb ;
   u32 rf_rbpi ;
};
#line 404 
enum io_type {
    IO_CMD_PAUSE_DM_BY_SCAN = 0,
    IO_CMD_PAUSE_BAND0_DM_BY_SCAN = 0,
    IO_CMD_PAUSE_BAND1_DM_BY_SCAN = 1,
    IO_CMD_RESUME_DM_BY_SCAN = 2
};
#line 513 
enum rt_media_status {
    RT_MEDIA_DISCONNECT = 0,
    RT_MEDIA_CONNECT = 1
};
#line 595 
enum rt_enc_alg {
    NO_ENCRYPTION = 0,
    WEP40_ENCRYPTION = 1,
    TKIP_ENCRYPTION = 2,
    RSERVED_ENCRYPTION = 3,
    AESCCMP_ENCRYPTION = 4,
    WEP104_ENCRYPTION = 5,
    AESCMAC_ENCRYPTION = 6
};
#line 772 
enum rt_psmode {
    EACTIVE = 0,
    EMAXPS = 1,
    EFASTPS = 2,
    EAUTOPS = 3
};
#line 779 
enum led_ctl_mode {
    LED_CTL_POWER_ON = 1,
    LED_CTL_LINK = 2,
    LED_CTL_NO_LINK = 3,
    LED_CTL_TX = 4,
    LED_CTL_RX = 5,
    LED_CTL_SITE_SURVEY = 6,
    LED_CTL_POWER_OFF = 7,
    LED_CTL_START_TO_LINK = 8,
    LED_CTL_START_WPS = 9,
    LED_CTL_STOP_WPS = 10
};
#line 792 
enum rtl_led_pin {
    LED_PIN_GPIO0 = 0,
    LED_PIN_LED0 = 1,
    LED_PIN_LED1 = 2,
    LED_PIN_LED2 = 3
};
#line 805 
enum macphy_mode {
    SINGLEMAC_SINGLEPHY = 0,
    DUALMAC_DUALPHY = 1,
    DUALMAC_SINGLEPHY = 2
};
#line 811 
enum band_type {
    BAND_ON_2_4G = 0,
    BAND_ON_5G = 1,
    BAND_ON_BOTH = 2,
    BANDMAX = 3
};
#line 910 
enum rtl_link_state {
    MAC80211_NOLINK = 0,
    MAC80211_LINKING = 1,
    MAC80211_LINKED = 2,
    MAC80211_LINKED_SCANNING = 3
};
#line 931 
enum rt_polarity_ctl {
    RT_POLARITY_LOW_ACT = 0,
    RT_POLARITY_HIGH_ACT = 1
};
#line 967 
enum rtl_spec_ver {
    RTL_SPEC_NEW_RATEID = 1,
    RTL_SPEC_SUPPORT_VHT = 2,
    RTL_SPEC_EXT_C2H = 4
};
#line 973 
enum dm_info_query {
    DM_INFO_FA_OFDM = 0,
    DM_INFO_FA_CCK = 1,
    DM_INFO_FA_TOTAL = 2,
    DM_INFO_CCA_OFDM = 3,
    DM_INFO_CCA_CCK = 4,
    DM_INFO_CCA_ALL = 5,
    DM_INFO_CRC32_OK_VHT = 6,
    DM_INFO_CRC32_OK_HT = 7,
    DM_INFO_CRC32_OK_LEGACY = 8,
    DM_INFO_CRC32_OK_CCK = 9,
    DM_INFO_CRC32_ERROR_VHT = 10,
    DM_INFO_CRC32_ERROR_HT = 11,
    DM_INFO_CRC32_ERROR_LEGACY = 12,
    DM_INFO_CRC32_ERROR_CCK = 13,
    DM_INFO_EDCCA_FLAG = 14,
    DM_INFO_OFDM_ENABLE = 15,
    DM_INFO_CCK_ENABLE = 16,
    DM_INFO_CRC32_OK_HT_AGG = 17,
    DM_INFO_CRC32_ERROR_HT_AGG = 18,
    DM_INFO_DBG_PORT_0 = 19,
    DM_INFO_CURR_IGI = 20,
    DM_INFO_RSSI_MIN = 21,
    DM_INFO_RSSI_MAX = 22,
    DM_INFO_CLM_RATIO = 23,
    DM_INFO_NHM_RATIO = 24,
    DM_INFO_IQK_ALL = 25,
    DM_INFO_IQK_OK = 26,
    DM_INFO_IQK_NG = 27,
    DM_INFO_SIZE = 28
};
#line 1076  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct rtl_led {
   void *hw ;
   enum rtl_led_pin ledpin ;
   bool ledon ;
};
#line 1082  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct rtl_led_ctl {
   bool led_opendrain ;
   struct rtl_led sw_led0 ;
   struct rtl_led sw_led1 ;
};
#line 1088  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct rtl_qos_parameters {
   __le16 cw_min ;
   __le16 cw_max ;
   u8 aifs ;
   u8 flag ;
   __le16 tx_op ;
} __attribute__((__packed__));
#line 1096  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct rt_smooth_data {
   u32 elements[100U] ;
   u32 index ;
   u32 total_num ;
   u32 total_val ;
};
#line 1103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct false_alarm_statistics {
   u32 cnt_parity_fail ;
   u32 cnt_rate_illegal ;
   u32 cnt_crc8_fail ;
   u32 cnt_mcs_fail ;
   u32 cnt_fast_fsync_fail ;
   u32 cnt_sb_search_fail ;
   u32 cnt_ofdm_fail ;
   u32 cnt_cck_fail ;
   u32 cnt_all ;
   u32 cnt_ofdm_cca ;
   u32 cnt_cck_cca ;
   u32 cnt_cca_all ;
   u32 cnt_bw_usc ;
   u32 cnt_bw_lsc ;
};
#line 1120  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct init_gain {
   u8 xaagccore1 ;
   u8 xbagccore1 ;
   u8 xcagccore1 ;
   u8 xdagccore1 ;
   u8 cca ;
};
#line 1129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct wireless_stats {
   u64 txbytesunicast ;
   u64 txbytesmulticast ;
   u64 txbytesbroadcast ;
   u64 rxbytesunicast ;
   u64 txbytesunicast_inperiod ;
   u64 rxbytesunicast_inperiod ;
   u32 txbytesunicast_inperiod_tp ;
   u32 rxbytesunicast_inperiod_tp ;
   u64 txbytesunicast_last ;
   u64 rxbytesunicast_last ;
   long rx_snr_db[4U] ;
   long recv_signal_power ;
   long signal_quality ;
   long last_sigstrength_inpercent ;
   u32 rssi_calculate_cnt ;
   u32 pwdb_all_cnt ;
   long signal_strength ;
   u8 rx_rssi_percentage[4U] ;
   u8 rx_evm_dbm[4U] ;
   u8 rx_evm_percentage[2U] ;
   u16 rx_cfo_short[4U] ;
   u16 rx_cfo_tail[4U] ;
   struct rt_smooth_data ui_rssi ;
   struct rt_smooth_data ui_link_quality ;
};
#line 1169  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct rate_adaptive {
   u8 rate_adaptive_disabled ;
   u8 ratr_state ;
   u16 reserve ;
   u32 high_rssi_thresh_for_ra ;
   u32 high2low_rssi_thresh_for_ra ;
   u8 low2high_rssi_thresh_for_ra40m ;
   u32 low_rssi_thresh_for_ra40m ;
   u8 low2high_rssi_thresh_for_ra20m ;
   u32 low_rssi_thresh_for_ra20m ;
   u32 upper_rssi_threshold_ratr ;
   u32 middleupper_rssi_threshold_ratr ;
   u32 middle_rssi_threshold_ratr ;
   u32 middlelow_rssi_threshold_ratr ;
   u32 low_rssi_threshold_ratr ;
   u32 ultralow_rssi_threshold_ratr ;
   u32 low_rssi_threshold_ratr_40m ;
   u32 low_rssi_threshold_ratr_20m ;
   u8 ping_rssi_enable ;
   u32 ping_rssi_ratr ;
   u32 ping_rssi_thresh_for_ra ;
   u32 last_ratr ;
   u8 pre_ratr_state ;
   u8 ldpc_thres ;
   bool use_ldpc ;
   bool lower_rts_rate ;
   bool is_special_data ;
};
#line 1199  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct regd_pair_mapping {
   u16 reg_dmnenum ;
   u16 reg_5ghz_ctl ;
   u16 reg_2ghz_ctl ;
};
#line 1205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct dynamic_primary_cca {
   u8 pricca_flag ;
   u8 intf_flag ;
   u8 intf_type ;
   u8 dup_rts_flag ;
   u8 monitor_flag ;
   u8 ch_offset ;
   u8 mf_state ;
};
#line 1215  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct rtl_regulatory {
   s8 alpha2[2U] ;
   u16 country_code ;
   u16 max_power_level ;
   u32 tp_scale ;
   u16 current_rd ;
   u16 current_rd_ext ;
   int16_t power_limit ;
   struct regd_pair_mapping *regpair ;
};
#line 1226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct rtl_rfkill {
   bool rfkill_state ;
};
#line 1236 
enum p2p_ps_state {
    P2P_PS_DISABLE = 0,
    P2P_PS_ENABLE = 1,
    P2P_PS_SCAN = 2,
    P2P_PS_SCAN_DONE = 3,
    P2P_PS_ALLSTASLEEP = 4
};
#line 1244 
enum p2p_ps_mode {
    P2P_PS_NONE = 0,
    P2P_PS_CTWINDOW = 1,
    P2P_PS_NOA = 2,
    P2P_PS_MIX = 3
};
#line 1255  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct rtl_p2p_ps_info {
   enum p2p_ps_mode p2p_ps_mode ;
   enum p2p_ps_state p2p_ps_state ;
   u8 noa_index ;
   u8 ctwindow ;
   u8 opp_ps ;
   u8 noa_num ;
   u8 noa_count_type[2U] ;
   u32 noa_duration[2U] ;
   u32 noa_interval[2U] ;
   u32 noa_start_time[2U] ;
};
#line 1277  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct p2p_ps_offload_t {
   u8 offload_en : 1 ;
   u8 role : 1 ;
   u8 ctwindow_en : 1 ;
   u8 noa0_en : 1 ;
   u8 noa1_en : 1 ;
   u8 allstasleep : 1 ;
   u8 discovery : 1 ;
   u8 reserved : 1 ;
};
#line 1291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct iqk_matrix_regs {
   bool iqk_done ;
   long value[1U][8U] ;
};
#line 1296  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct phy_parameters {
   u16 length ;
   u32 *pdata ;
};
#line 1315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct rtl_phy {
   struct bb_reg_def phyreg_def[4U] ;
   struct init_gain initgain_backup ;
   enum io_type current_io_type ;
   u8 rf_mode ;
   u8 rf_type ;
   u8 current_chan_bw ;
   u8 set_bwmode_inprogress ;
   u8 sw_chnl_inprogress ;
   u8 sw_chnl_stage ;
   u8 sw_chnl_step ;
   u8 current_channel ;
   u8 h2c_box_num ;
   u8 set_io_inprogress ;
   u8 lck_inprogress ;
   s32 reg_e94 ;
   s32 reg_e9c ;
   s32 reg_ea4 ;
   s32 reg_eac ;
   s32 reg_eb4 ;
   s32 reg_ebc ;
   s32 reg_ec4 ;
   s32 reg_ecc ;
   u8 rfpienable ;
   u8 reserve_0 ;
   u16 reserve_1 ;
   u32 reg_c04 ;
   u32 reg_c08 ;
   u32 reg_874 ;
   u32 adda_backup[16U] ;
   u32 iqk_mac_backup[4U] ;
   u32 iqk_bb_backup[10U] ;
   bool iqk_initialized ;
   bool rfpath_rx_enable[4U] ;
   u8 reg_837 ;
   bool need_iqk ;
   struct iqk_matrix_regs iqk_matrix[46U] ;
   bool rfpi_enable ;
   bool iqk_in_progress ;
   u8 pwrgroup_cnt ;
   u8 cck_high_power ;
   u32 mcs_txpwrlevel_origoffset[13U][16U] ;
   u32 mcs_offset[13U][16U] ;
   u32 tx_power_by_rate_offset[2U][4U][4U][84U] ;
   u8 txpwr_by_rate_base_24g[4U][4U][6U] ;
   u8 txpwr_by_rate_base_5g[4U][4U][5U] ;
   u8 default_initialgain[4U] ;
   u8 cur_cck_txpwridx ;
   u8 cur_ofdm24g_txpwridx ;
   u8 cur_bw20_txpwridx ;
   u8 cur_bw40_txpwridx ;
   s8 txpwr_limit_2_4g[4U][4U][6U][14U][4U] ;
   s8 txpwr_limit_5g[4U][4U][6U][49U][4U] ;
   u32 rfreg_chnlval[2U] ;
   bool apk_done ;
   u32 reg_rf3c[2U] ;
   u32 backup_rf_0x1a ;
   u8 framesync ;
   u32 framesync_c34 ;
   u8 num_total_rfpath ;
   struct phy_parameters hwparam_tables[10U] ;
   u16 rf_pathmap ;
   u8 hw_rof_enable ;
   enum rt_polarity_ctl polarity_ctl ;
};
#line 1423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct rtl_ht_agg {
   u16 txq_id ;
   u16 wait_for_ba ;
   u16 start_idx ;
   u64 bitmap ;
   u32 rate_n_flags ;
   u8 agg_state ;
   u8 rx_agg_state ;
};
#line 1438  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct rtl_tid_data {
   struct rtl_ht_agg agg ;
};
#line 1455  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct rtl_io {
   struct device *dev ;
   struct mutex bb_mutex ;
   unsigned long pci_mem_end ;
   unsigned long pci_mem_start ;
   unsigned long pci_base_addr ;
   void (*write8_async)(struct rtl_priv *, u32 , u8 ) ;
   void (*write16_async)(struct rtl_priv *, u32 , u16 ) ;
   void (*write32_async)(struct rtl_priv *, u32 , u32 ) ;
   void (*writen_sync)(struct rtl_priv *, u32 , void *, u16 ) ;
   u8 (*read8_sync)(struct rtl_priv *, u32 ) ;
   u16 (*read16_sync)(struct rtl_priv *, u32 ) ;
   u32 (*read32_sync)(struct rtl_priv *, u32 ) ;
};
#line 1478  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct rtl_mac {
   u8 mac_addr[6U] ;
   u8 mac80211_registered ;
   u8 beacon_enabled ;
   u32 tx_ss_num ;
   u32 rx_ss_num ;
   struct ieee80211_supported_band bands[4U] ;
   struct ieee80211_hw *hw ;
   struct ieee80211_vif *vif ;
   enum nl80211_iftype opmode ;
   struct rtl_tid_data tids[9U] ;
   enum rtl_link_state link_state ;
   int n_channels ;
   int n_bitrates ;
   bool offchan_delay ;
   u8 p2p ;
   bool p2p_in_use ;
   u32 rx_conf ;
   u16 rx_mgt_filter ;
   u16 rx_ctrl_filter ;
   u16 rx_data_filter ;
   bool act_scanning ;
   u8 cnt_after_linked ;
   bool skip_scan ;
   struct sk_buff_head skb_waitq[9U] ;
   u8 ht_stbc_cap ;
   u8 ht_cur_stbc ;
   u8 vht_enable ;
   u8 bw_80 ;
   u8 vht_cur_ldpc ;
   u8 vht_cur_stbc ;
   u8 vht_stbc_cap ;
   u8 vht_ldpc_cap ;
   bool rdg_en ;
   u8 bssid[6U] ;
   u32 vendor ;
   u8 mcs[16U] ;
   u32 basic_rates ;
   u8 ht_enable ;
   u8 sgi_40 ;
   u8 sgi_20 ;
   u8 bw_40 ;
   u16 mode ;
   u8 slot_time ;
   u8 short_preamble ;
   u8 use_cts_protect ;
   u8 cur_40_prime_sc ;
   u8 cur_40_prime_sc_bk ;
   u8 cur_80_prime_sc ;
   u64 tsf ;
   u8 retry_short ;
   u8 retry_long ;
   u16 assoc_id ;
   bool hiddenssid ;
   int beacon_interval ;
   u8 min_space_cfg ;
   u8 max_mss_density ;
   u8 current_ampdu_factor ;
   u8 current_ampdu_density ;
   struct ieee80211_tx_queue_params edca_param[5U] ;
   struct rtl_qos_parameters ac[4U] ;
   u64 last_txok_cnt ;
   u64 last_rxok_cnt ;
   u32 last_bt_edca_ul ;
   u32 last_bt_edca_dl ;
};
#line 1572  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct btdm_8723 {
   bool all_off ;
   bool agc_table_en ;
   bool adc_back_off_on ;
   bool b2_ant_hid_en ;
   bool low_penalty_rate_adaptive ;
   bool rf_rx_lpf_shrink ;
   bool reject_aggre_pkt ;
   bool tra_tdma_on ;
   u8 tra_tdma_nav ;
   u8 tra_tdma_ant ;
   bool tdma_on ;
   u8 tdma_ant ;
   u8 tdma_nav ;
   u8 tdma_dac_swing ;
   u8 fw_dac_swing_lvl ;
   bool ps_tdma_on ;
   u8 ps_tdma_byte[5U] ;
   bool pta_on ;
   u32 val_0x6c0 ;
   u32 val_0x6c8 ;
   u32 val_0x6cc ;
   bool sw_dac_swing_on ;
   u32 sw_dac_swing_lvl ;
   u32 wlan_act_hi ;
   u32 wlan_act_lo ;
   u32 bt_retry_index ;
   bool dec_bt_pwr ;
   bool ignore_wlan_act ;
};
#line 1603  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct bt_coexist_8723 {
   u32 high_priority_tx ;
   u32 high_priority_rx ;
   u32 low_priority_tx ;
   u32 low_priority_rx ;
   u8 c2h_bt_info ;
   bool c2h_bt_info_req_sent ;
   bool c2h_bt_inquiry_page ;
   u32 bt_inq_page_start_time ;
   u8 bt_retry_cnt ;
   u8 c2h_bt_info_original ;
   u8 bt_inquiry_page_cnt ;
   struct btdm_8723 btdm ;
};
#line 1618  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct rtl_hal {
   struct ieee80211_hw *hw ;
   bool driver_is_goingto_unload ;
   bool up_first_time ;
   bool first_init ;
   bool being_init_adapter ;
   bool bbrf_ready ;
   bool mac_func_enable ;
   bool pre_edcca_enable ;
   struct bt_coexist_8723 hal_coex_8723 ;
   enum intf_type interface ;
   u16 hw_type ;
   u8 ic_class ;
   u8 oem_id ;
   u32 version ;
   u8 state ;
   u8 board_type ;
   u8 package_type ;
   u8 external_pa ;
   u8 pa_mode ;
   u8 pa_type_2g ;
   u8 pa_type_5g ;
   u8 lna_type_2g ;
   u8 lna_type_5g ;
   u8 external_pa_2g ;
   u8 external_lna_2g ;
   u8 external_pa_5g ;
   u8 external_lna_5g ;
   u8 type_glna ;
   u8 type_gpa ;
   u8 type_alna ;
   u8 type_apa ;
   u8 rfe_type ;
   u32 fwsize ;
   u8 *pfirmware ;
   u16 fw_version ;
   u16 fw_subversion ;
   bool h2c_setinprogress ;
   u8 last_hmeboxnum ;
   bool fw_ready ;
   u8 fw_rsvdpage_startoffset ;
   u8 h2c_txcmd_seq ;
   u8 current_ra_rate ;
   u16 fwcmd_iomap ;
   u32 fwcmd_ioparam ;
   bool set_fwcmd_inprogress ;
   u8 current_fwcmd_io ;
   struct p2p_ps_offload_t p2p_ps_offload ;
   bool fw_clk_change_in_progress ;
   bool allow_sw_to_change_hwclc ;
   u8 fw_ps_state ;
   bool driver_going2unload ;
   u8 minspace_cfg ;
   enum macphy_mode macphymode ;
   enum band_type current_bandtype ;
   enum band_type current_bandtypebackup ;
   enum band_type bandset ;
   u32 interfaceindex ;
   u8 macphyctl_reg ;
   bool earlymode_enable ;
   u8 max_earlymode_num ;
   bool during_mac0init_radiob ;
   bool during_mac1init_radioa ;
   bool reloadtxpowerindex ;
   bool load_imrandiqk_setting_for2g ;
   bool disable_amsdu_8k ;
   bool master_of_dmsp ;
   bool slave_of_dmsp ;
   u16 rx_tag ;
   u8 rts_en ;
   bool wow_enable ;
   bool enter_pnp_sleep ;
   bool wake_from_pnp_sleep ;
   bool wow_enabled ;
   time64_t last_suspend_sec ;
   u32 wowlan_fwsize ;
   u8 *wowlan_firmware ;
   u8 hw_rof_enable ;
   bool real_wow_v2_enable ;
   bool re_init_llt_table ;
};
#line 1725  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct rtl_security {
   bool use_sw_sec ;
   bool being_setkey ;
   bool use_defaultkey ;
   enum rt_enc_alg pairwise_enc_algorithm ;
   enum rt_enc_alg group_enc_algorithm ;
   u32 hwsec_cam_bitmap ;
   u8 hwsec_cam_sta_addr[32U][6U] ;
   u8 key_buf[5U][61U] ;
   u8 key_len[5U] ;
   u8 *pairwise_key ;
};
#line 1752  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct fast_ant_training {
   u8 bssid[6U] ;
   u8 antsel_rx_keep_0 ;
   u8 antsel_rx_keep_1 ;
   u8 antsel_rx_keep_2 ;
   u32 ant_sum[7U] ;
   u32 ant_cnt[7U] ;
   u32 ant_ave[7U] ;
   u8 fat_state ;
   u32 train_idx ;
   u8 antsel_a[33U] ;
   u8 antsel_b[33U] ;
   u8 antsel_c[33U] ;
   u32 main_ant_sum[33U] ;
   u32 aux_ant_sum[33U] ;
   u32 main_ant_cnt[33U] ;
   u32 aux_ant_cnt[33U] ;
   u8 rx_idle_ant ;
   bool becomelinked ;
};
#line 1773  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct dm_phy_dbg_info {
   s8 rx_snrdb[4U] ;
   u64 num_qry_phy_status ;
   u64 num_qry_phy_status_cck ;
   u64 num_qry_phy_status_ofdm ;
   u16 num_qry_beacon_pkt ;
   u16 num_non_be_pkt ;
   s32 rx_evm[4U] ;
};
#line 1783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct rtl_dm {
   long entry_min_undec_sm_pwdb ;
   long undec_sm_cck ;
   long undec_sm_pwdb ;
   long entry_max_undec_sm_pwdb ;
   s32 ofdm_pkt_cnt ;
   bool dm_initialgain_enable ;
   bool dynamic_txpower_enable ;
   bool current_turbo_edca ;
   bool is_any_nonbepkts ;
   bool is_cur_rdlstate ;
   bool txpower_trackinginit ;
   bool disable_framebursting ;
   bool cck_inch14 ;
   bool txpower_tracking ;
   bool useramask ;
   bool rfpath_rxenable[4U] ;
   bool inform_fw_driverctrldm ;
   bool current_mrc_switch ;
   u8 txpowercount ;
   u8 powerindex_backup[6U] ;
   u8 thermalvalue_rxgain ;
   u8 thermalvalue_iqk ;
   u8 thermalvalue_lck ;
   u8 thermalvalue ;
   u8 last_dtp_lvl ;
   u8 thermalvalue_avg[8U] ;
   u8 thermalvalue_avg_index ;
   u8 tm_trigger ;
   bool done_txpower ;
   u8 dynamic_txhighpower_lvl ;
   u8 dm_flag ;
   u8 dm_flag_tmp ;
   u8 dm_type ;
   u8 dm_rssi_sel ;
   u8 txpower_track_control ;
   bool interrupt_migration ;
   bool disable_tx_int ;
   s8 ofdm_index[4U] ;
   u8 default_ofdm_index ;
   u8 default_cck_index ;
   s8 cck_index ;
   s8 delta_power_index[4U] ;
   s8 delta_power_index_last[4U] ;
   s8 power_index_offset[4U] ;
   s8 absolute_ofdm_swing_idx[4U] ;
   s8 remnant_ofdm_swing_idx[4U] ;
   s8 remnant_cck_idx ;
   bool modify_txagc_flag_path_a ;
   bool modify_txagc_flag_path_b ;
   bool one_entry_only ;
   struct dm_phy_dbg_info dbginfo ;
   bool atc_status ;
   bool large_cfo_hit ;
   bool is_freeze ;
   int cfo_tail[2U] ;
   int cfo_ave_pre ;
   int crystal_cap ;
   u8 cfo_threshold ;
   u32 packet_count ;
   u32 packet_count_pre ;
   u8 tx_rate ;
   u8 swing_idx_ofdm[4U] ;
   u8 swing_idx_ofdm_cur ;
   u8 swing_idx_ofdm_base[4U] ;
   bool swing_flag_ofdm ;
   u8 swing_idx_cck ;
   u8 swing_idx_cck_cur ;
   u8 swing_idx_cck_base ;
   bool swing_flag_cck ;
   s8 swing_diff_2g ;
   s8 swing_diff_5g ;
   bool supp_phymode_switch ;
   struct fast_ant_training fat_table ;
   u8 resp_tx_path ;
   u8 path_sel ;
   u32 patha_sum ;
   u32 pathb_sum ;
   u32 patha_cnt ;
   u32 pathb_cnt ;
   u8 pre_channel ;
   u8 *p_channel ;
   u8 linked_interval ;
   u64 last_tx_ok_cnt ;
   u64 last_rx_ok_cnt ;
};
#line 1887 
struct rtl_efuse_ops;
#line 1887  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct rtl_efuse {
   struct rtl_efuse_ops *efuse_ops ;
   bool autoload_ok ;
   bool bootfromefuse ;
   u16 max_physical_size ;
   u8 efuse_map[2U][512U] ;
   u16 efuse_usedbytes ;
   u8 efuse_usedpercentage ;
   u8 autoload_failflag ;
   u8 autoload_status ;
   short epromtype ;
   u16 eeprom_vid ;
   u16 eeprom_did ;
   u16 eeprom_svid ;
   u16 eeprom_smid ;
   u8 eeprom_oemid ;
   u16 eeprom_channelplan ;
   u8 eeprom_version ;
   u8 board_type ;
   u8 external_pa ;
   u8 dev_addr[6U] ;
   u8 wowlan_enable ;
   u8 antenna_div_cfg ;
   u8 antenna_div_type ;
   bool txpwr_fromeprom ;
   u8 eeprom_crystalcap ;
   u8 eeprom_tssi[2U] ;
   u8 eeprom_tssi_5g[3U][2U] ;
   u8 eeprom_pwrlimit_ht20[12U] ;
   u8 eeprom_pwrlimit_ht40[12U] ;
   u8 eeprom_chnlarea_txpwr_cck[4U][3U] ;
   u8 eeprom_chnlarea_txpwr_ht40_1s[4U][12U] ;
   u8 eprom_chnl_txpwr_ht40_2sdf[4U][12U] ;
   u8 internal_pa_5g[2U] ;
   u8 eeprom_c9 ;
   u8 eeprom_cc ;
   u8 eeprom_pwrgroup[2U][3U] ;
   u8 pwrgroup_ht20[2U][59U] ;
   u8 pwrgroup_ht40[2U][59U] ;
   u8 txpwrlevel_cck[4U][14U] ;
   u8 txpwrlevel_ht40_1s[4U][59U] ;
   u8 txpwrlevel_ht40_2s[4U][59U] ;
   s8 txpwr_cckdiff[4U][59U] ;
   s8 txpwr_ht20diff[4U][59U] ;
   s8 txpwr_ht40diff[4U][59U] ;
   s8 txpwr_legacyhtdiff[4U][59U] ;
   u8 txpwr_5g_bw40base[4U][59U] ;
   u8 txpwr_5g_bw80base[4U][7U] ;
   s8 txpwr_5g_ofdmdiff[4U][4U] ;
   s8 txpwr_5g_bw20diff[4U][4U] ;
   s8 txpwr_5g_bw40diff[4U][4U] ;
   s8 txpwr_5g_bw80diff[4U][4U] ;
   u8 txpwr_safetyflag ;
   u16 eeprom_txpowerdiff ;
   u8 legacy_httxpowerdiff ;
   u8 antenna_txpwdiff[3U] ;
   u8 eeprom_regulatory ;
   u8 eeprom_thermalmeter ;
   u8 thermalmeter[2U] ;
   u16 tssi_13dbm ;
   u8 crystalcap ;
   u8 delta_iqk ;
   u8 delta_lck ;
   u8 legacy_ht_txpowerdiff ;
   bool apk_thermalmeterignore ;
   bool b1x1_recvcombine ;
   bool b1ss_support ;
   u8 channel_plan ;
};
#line 1990  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct rtl_efuse_ops {
   int (*efuse_onebyte_read)(struct ieee80211_hw *, u16 , u8 *) ;
   void (*efuse_logical_map_read)(struct ieee80211_hw *, u8 , u16 , u32 *) ;
};
#line 1996  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct rtl_tx_report {
   atomic_t sn ;
   u16 last_sent_sn ;
   unsigned long last_sent_time ;
   u16 last_recv_sn ;
   struct sk_buff_head queue ;
};
#line 2004  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct rtl_ps_ctl {
   bool pwrdomain_protect ;
   bool in_powersavemode ;
   bool rfchange_inprogress ;
   bool swrf_processing ;
   bool hwradiooff ;
   bool support_aspm ;
   bool support_backdoor ;
   enum rt_psmode dot11_psmode ;
   bool swctrl_lps ;
   bool leisure_ps ;
   bool fwctrl_lps ;
   u8 fwctrl_psmode ;
   u8 reg_fwctrl_lps ;
   bool fw_current_inpsmode ;
   u8 reg_max_lps_awakeintvl ;
   bool report_linked ;
   bool low_power_enable ;
   bool inactiveps ;
   u32 rfoff_reason ;
   u32 cur_ps_level ;
   u32 reg_rfps_level ;
   u8 const_amdpci_aspm ;
   bool pwrdown_mode ;
   enum rf_pwrstate inactive_pwrstate ;
   enum rf_pwrstate rfpwr_state ;
   bool sw_ps_enabled ;
   bool state ;
   bool state_inap ;
   bool multi_buffered ;
   u16 nullfunc_seq ;
   unsigned int dtim_counter ;
   unsigned int sleep_ms ;
   unsigned long last_sleep_jiffies ;
   unsigned long last_awake_jiffies ;
   unsigned long last_delaylps_stamp_jiffies ;
   unsigned long last_dtim ;
   unsigned long last_beacon ;
   unsigned long last_action ;
   unsigned long last_slept ;
   struct rtl_p2p_ps_info p2p_ps_info ;
   u8 pwr_mode ;
   u8 smart_ps ;
   u8 wo_wlan_mode ;
   u8 arp_offload_enable ;
   u8 gtk_offload_enable ;
   u32 wakeup_reason ;
};
#line 2076  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct rtl_stats {
   u8 psaddr[6U] ;
   u32 mac_time[2U] ;
   s8 rssi ;
   u8 signal ;
   u8 noise ;
   u8 rate ;
   u8 received_channel ;
   u8 control ;
   u8 mask ;
   u8 freq ;
   u16 len ;
   u64 tsf ;
   u32 beacon_time ;
   u8 nic_type ;
   u16 length ;
   u8 signalquality ;
   s32 recvsignalpower ;
   s8 rxpower ;
   u8 signalstrength ;
   u16 hwerror : 1 ;
   u16 crc : 1 ;
   u16 icv : 1 ;
   u16 shortpreamble : 1 ;
   u16 antenna : 1 ;
   u16 decrypted : 1 ;
   u16 wakeup : 1 ;
   u32 timestamp_low ;
   u32 timestamp_high ;
   bool shift ;
   u8 rx_drvinfo_size ;
   u8 rx_bufshift ;
   bool isampdu ;
   bool isfirst_ampdu ;
   bool rx_is40mhzpacket ;
   u8 rx_packet_bw ;
   u32 rx_pwdb_all ;
   u8 rx_mimo_signalstrength[4U] ;
   s8 rx_mimo_signalquality[4U] ;
   u8 rx_mimo_evm_dbm[4U] ;
   u16 cfo_short[4U] ;
   u16 cfo_tail[4U] ;
   s8 rx_mimo_sig_qual[4U] ;
   u8 rx_pwr[4U] ;
   u8 rx_snr[4U] ;
   u8 bandwidth ;
   u8 bt_coex_pwr_adjust ;
   bool packet_matchbssid ;
   bool is_cck ;
   bool is_ht ;
   bool packet_toself ;
   bool packet_beacon ;
   s8 cck_adc_pwdb[4U] ;
   bool is_vht ;
   bool is_short_gi ;
   u8 vht_nss ;
   u8 packet_report_type ;
   u32 macid ;
   u32 bt_rx_rssi_percentage ;
   u32 macid_valid_entry[2U] ;
};
#line 2146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct rt_link_detect {
   u32 bcn_rx_inperiod ;
   u32 roam_times ;
   u32 num_tx_in4period[4U] ;
   u32 num_rx_in4period[4U] ;
   u32 num_tx_inperiod ;
   u32 num_rx_inperiod ;
   bool busytraffic ;
   bool tx_busy_traffic ;
   bool rx_busy_traffic ;
   bool higher_busytraffic ;
   bool higher_busyrxtraffic ;
   u32 tidtx_in4period[9U][4U] ;
   u32 tidtx_inperiod[9U] ;
   bool higher_busytxtraffic[9U] ;
};
#line 2168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct rtl_tcb_desc {
   u8 packet_bw : 2 ;
   u8 multicast : 1 ;
   u8 broadcast : 1 ;
   u8 rts_stbc : 1 ;
   u8 rts_enable : 1 ;
   u8 cts_enable : 1 ;
   u8 rts_use_shortpreamble : 1 ;
   u8 rts_use_shortgi : 1 ;
   u8 rts_sc : 1 ;
   u8 rts_bw : 1 ;
   u8 rts_rate ;
   u8 use_shortgi : 1 ;
   u8 use_shortpreamble : 1 ;
   u8 use_driver_rate : 1 ;
   u8 disable_ratefallback : 1 ;
   u8 use_spe_rpt : 1 ;
   u8 ratr_index ;
   u8 mac_id ;
   u8 hw_rate ;
   u8 last_inipkt : 1 ;
   u8 cmd_or_init : 1 ;
   u8 queue_index ;
   u8 empkt_num ;
   u32 empkt_len[10U] ;
   bool tx_enable_sw_calc_duration ;
};
#line 2204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct rtl_wow_pattern {
   u8 type ;
   u16 crc ;
   u32 mask[4U] ;
};
#line 2211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct rtl_int {
   u32 inta ;
   u32 intb ;
   u32 intc ;
   u32 intd ;
};
#line 2218  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct rtl_hal_ops {
   int (*init_sw_vars)(struct ieee80211_hw *) ;
   void (*deinit_sw_vars)(struct ieee80211_hw *) ;
   void (*read_chip_version)(struct ieee80211_hw *) ;
   void (*read_eeprom_info)(struct ieee80211_hw *) ;
   void (*interrupt_recognized)(struct ieee80211_hw *, struct rtl_int *) ;
   int (*hw_init)(struct ieee80211_hw *) ;
   void (*hw_disable)(struct ieee80211_hw *) ;
   void (*hw_suspend)(struct ieee80211_hw *) ;
   void (*hw_resume)(struct ieee80211_hw *) ;
   void (*enable_interrupt)(struct ieee80211_hw *) ;
   void (*disable_interrupt)(struct ieee80211_hw *) ;
   int (*set_network_type)(struct ieee80211_hw *, enum nl80211_iftype ) ;
   void (*set_chk_bssid)(struct ieee80211_hw *, bool ) ;
   void (*set_bw_mode)(struct ieee80211_hw *, enum nl80211_channel_type ) ;
   u8 (*switch_channel)(struct ieee80211_hw *) ;
   void (*set_qos)(struct ieee80211_hw *, int ) ;
   void (*set_bcn_reg)(struct ieee80211_hw *) ;
   void (*set_bcn_intv)(struct ieee80211_hw *) ;
   void (*update_interrupt_mask)(struct ieee80211_hw *, u32 , u32 ) ;
   void (*get_hw_reg)(struct ieee80211_hw *, u8 , u8 *) ;
   void (*set_hw_reg)(struct ieee80211_hw *, u8 , u8 *) ;
   void (*update_rate_tbl)(struct ieee80211_hw *, struct ieee80211_sta *, u8 , bool ) ;
   void (*pre_fill_tx_bd_desc)(struct ieee80211_hw *, u8 *, u8 *, u8 , struct sk_buff *, dma_addr_t ) ;
   void (*update_rate_mask)(struct ieee80211_hw *, u8 ) ;
   u16 (*rx_desc_buff_remained_cnt)(struct ieee80211_hw *, u8 ) ;
   void (*rx_check_dma_ok)(struct ieee80211_hw *, u8 *, u8 ) ;
   void (*fill_tx_desc)(struct ieee80211_hw *, struct ieee80211_hdr *, u8 *, u8 *, struct ieee80211_tx_info *, struct ieee80211_sta *, struct sk_buff *, u8 , struct rtl_tcb_desc *) ;
   void (*fill_fake_txdesc)(struct ieee80211_hw *, u8 *, u32 , bool ) ;
   void (*fill_tx_cmddesc)(struct ieee80211_hw *, u8 *, bool , bool , struct sk_buff *) ;
   void (*fill_tx_special_desc)(struct ieee80211_hw *, u8 *, u8 *, struct sk_buff *, u8 ) ;
   bool (*query_rx_desc)(struct ieee80211_hw *, struct rtl_stats *, struct ieee80211_rx_status *, u8 *, struct sk_buff *) ;
   void (*set_channel_access)(struct ieee80211_hw *) ;
   bool (*radio_onoff_checking)(struct ieee80211_hw *, u8 *) ;
   void (*dm_watchdog)(struct ieee80211_hw *) ;
   void (*scan_operation_backup)(struct ieee80211_hw *, u8 ) ;
   bool (*set_rf_power_state)(struct ieee80211_hw *, enum rf_pwrstate ) ;
   void (*led_control)(struct ieee80211_hw *, enum led_ctl_mode ) ;
   void (*set_desc)(struct ieee80211_hw *, u8 *, bool , u8 , u8 *) ;
   u64 (*get_desc)(struct ieee80211_hw *, u8 *, bool , u8 ) ;
   bool (*is_tx_desc_closed)(struct ieee80211_hw *, u8 , u16 ) ;
   void (*tx_polling)(struct ieee80211_hw *, u8 ) ;
   void (*enable_hw_sec)(struct ieee80211_hw *) ;
   void (*set_key)(struct ieee80211_hw *, u32 , u8 *, bool , u8 , bool , bool ) ;
   void (*init_sw_leds)(struct ieee80211_hw *) ;
   void (*deinit_sw_leds)(struct ieee80211_hw *) ;
   u32 (*get_bbreg)(struct ieee80211_hw *, u32 , u32 ) ;
   void (*set_bbreg)(struct ieee80211_hw *, u32 , u32 , u32 ) ;
   u32 (*get_rfreg)(struct ieee80211_hw *, enum radio_path , u32 , u32 ) ;
   void (*set_rfreg)(struct ieee80211_hw *, enum radio_path , u32 , u32 , u32 ) ;
   void (*linked_set_reg)(struct ieee80211_hw *) ;
   void (*chk_switch_dmdp)(struct ieee80211_hw *) ;
   void (*dualmac_easy_concurrent)(struct ieee80211_hw *) ;
   void (*dualmac_switch_to_dmdp)(struct ieee80211_hw *) ;
   bool (*phy_rf6052_config)(struct ieee80211_hw *) ;
   void (*phy_rf6052_set_cck_txpower)(struct ieee80211_hw *, u8 *) ;
   void (*phy_rf6052_set_ofdm_txpower)(struct ieee80211_hw *, u8 *, u8 ) ;
   bool (*config_bb_with_headerfile)(struct ieee80211_hw *, u8 ) ;
   bool (*config_bb_with_pgheaderfile)(struct ieee80211_hw *, u8 ) ;
   void (*phy_lc_calibrate)(struct ieee80211_hw *, bool ) ;
   void (*phy_set_bw_mode_callback)(struct ieee80211_hw *) ;
   void (*dm_dynamic_txpower)(struct ieee80211_hw *) ;
   void (*c2h_command_handle)(struct ieee80211_hw *) ;
   void (*bt_wifi_media_status_notify)(struct ieee80211_hw *, bool ) ;
   void (*bt_coex_off_before_lps)(struct ieee80211_hw *) ;
   void (*fill_h2c_cmd)(struct ieee80211_hw *, u8 , u32 , u8 *) ;
   void (*set_default_port_id_cmd)(struct ieee80211_hw *) ;
   bool (*get_btc_status)(void) ;
   bool (*is_fw_header)(struct rtlwifi_firmware_header *) ;
   void (*add_wowlan_pattern)(struct ieee80211_hw *, struct rtl_wow_pattern *, u8 ) ;
   u16 (*get_available_desc)(struct ieee80211_hw *, u8 ) ;
   void (*c2h_ra_report_handler)(struct ieee80211_hw *, u8 *, u8 ) ;
};
#line 2336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct rtl_intf_ops {
   void (*read_efuse_byte)(struct ieee80211_hw *, u16 , u8 *) ;
   int (*adapter_start)(struct ieee80211_hw *) ;
   void (*adapter_stop)(struct ieee80211_hw *) ;
   bool (*check_buddy_priv)(struct ieee80211_hw *, struct rtl_priv **) ;
   int (*adapter_tx)(struct ieee80211_hw *, struct ieee80211_sta *, struct sk_buff *, struct rtl_tcb_desc *) ;
   void (*flush)(struct ieee80211_hw *, u32 , bool ) ;
   int (*reset_trx_ring)(struct ieee80211_hw *) ;
   bool (*waitq_insert)(struct ieee80211_hw *, struct ieee80211_sta *, struct sk_buff *) ;
   void (*disable_aspm)(struct ieee80211_hw *) ;
   void (*enable_aspm)(struct ieee80211_hw *) ;
};
#line 2361  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct rtl_mod_params {
   u64 debug_mask ;
   bool sw_crypto ;
   int debug_level ;
   bool inactiveps ;
   bool swctrl_lps ;
   bool fwctrl_lps ;
   bool msi_support ;
   bool dma64 ;
   int aspm_support ;
   bool disable_watchdog ;
   bool int_clear ;
   int ant_sel ;
};
#line 2400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct rtl_hal_usbint_cfg {
   u32 in_ep_num ;
   u32 rx_urb_num ;
   u32 rx_max_size ;
   void (*usb_rx_hdl)(struct ieee80211_hw *, struct sk_buff *) ;
   void (*usb_rx_segregate_hdl)(struct ieee80211_hw *, struct sk_buff *, struct sk_buff_head *) ;
   void (*usb_tx_cleanup)(struct ieee80211_hw *, struct sk_buff *) ;
   int (*usb_tx_post_hdl)(struct ieee80211_hw *, struct urb *, struct sk_buff *) ;
   struct sk_buff *(*usb_tx_aggregate_hdl)(struct ieee80211_hw *, struct sk_buff_head *) ;
   int (*usb_endpoint_mapping)(struct ieee80211_hw *) ;
   u16 (*usb_mq_to_hwq)(__le16 , u16 ) ;
};
#line 2423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct rtl_hal_cfg {
   u8 bar_id ;
   bool write_readback ;
   char *name ;
   char *alt_fw_name ;
   struct rtl_hal_ops *ops ;
   struct rtl_mod_params *mod_params ;
   struct rtl_hal_usbint_cfg *usb_interface_cfg ;
   enum rtl_spec_ver spec_ver ;
   u32 maps[91U] ;
};
#line 2440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct rtl_locks {
   struct mutex conf_mutex ;
   struct mutex ips_mutex ;
   struct mutex lps_mutex ;
   spinlock_t irq_th_lock ;
   spinlock_t h2c_lock ;
   spinlock_t rf_ps_lock ;
   spinlock_t rf_lock ;
   spinlock_t waitq_lock ;
   spinlock_t entry_list_lock ;
   spinlock_t usb_lock ;
   spinlock_t c2hcmd_lock ;
   spinlock_t scan_list_lock ;
   spinlock_t fw_ps_lock ;
   spinlock_t cck_and_rw_pagea_lock ;
   spinlock_t iqk_lock ;
};
#line 2466  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct rtl_works {
   struct ieee80211_hw *hw ;
   struct timer_list watchdog_timer ;
   struct timer_list dualmac_easyconcurrent_retrytimer ;
   struct timer_list fw_clockoff_timer ;
   struct timer_list fast_antenna_training_timer ;
   struct tasklet_struct irq_tasklet ;
   struct tasklet_struct irq_prepare_bcn_tasklet ;
   struct workqueue_struct *rtl_wq ;
   struct delayed_work watchdog_wq ;
   struct delayed_work ips_nic_off_wq ;
   struct delayed_work c2hcmd_wq ;
   struct delayed_work ps_work ;
   struct delayed_work ps_rfon_wq ;
   struct delayed_work fwevt_wq ;
   struct work_struct lps_change_work ;
   struct work_struct fill_h2c_cmd ;
};
#line 2493  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct rtl_debug {
   struct dentry *debugfs_dir ;
   char debugfs_name[20U] ;
};
#line 2503  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct rtl_dualmac_easy_concurrent_ctl {
   enum band_type currentbandtype_backfordmdp ;
   bool close_bbandrf_for_dmsp ;
   bool change_to_dmdp ;
   bool change_to_dmsp ;
   bool switch_in_process ;
};
#line 2511  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct rtl_dmsp_ctl {
   bool activescan_for_slaveofdmsp ;
   bool scan_for_anothermac_fordmsp ;
   bool scan_for_itself_fordmsp ;
   bool writedig_for_anothermacofdmsp ;
   u32 curdigvalue_for_anothermacofdmsp ;
   bool changecckpdstate_for_anothermacofdmsp ;
   u8 curcckpdstate_for_anothermacofdmsp ;
   bool changetxhighpowerlvl_for_anothermacofdmsp ;
   u8 curtxhighlvl_for_anothermacofdmsp ;
   long rssivalmin_for_anothermacofdmsp ;
};
#line 2524  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct ps_t {
   u8 pre_ccastate ;
   u8 cur_ccasate ;
   u8 pre_rfstate ;
   u8 cur_rfstate ;
   u8 initialize ;
   long rssi_val_min ;
};
#line 2533  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct dig_t {
   u32 rssi_lowthresh ;
   u32 rssi_highthresh ;
   u32 fa_lowthresh ;
   u32 fa_highthresh ;
   long last_min_undec_pwdb_for_dm ;
   long rssi_highpower_lowthresh ;
   long rssi_highpower_highthresh ;
   u32 recover_cnt ;
   u32 pre_igvalue ;
   u32 cur_igvalue ;
   long rssi_val ;
   u8 dig_enable_flag ;
   u8 dig_ext_port_stage ;
   u8 dig_algorithm ;
   u8 dig_twoport_algorithm ;
   u8 dig_dbgmode ;
   u8 dig_slgorithm_switch ;
   u8 cursta_cstate ;
   u8 presta_cstate ;
   u8 curmultista_cstate ;
   u8 stop_dig ;
   s8 back_val ;
   s8 back_range_max ;
   s8 back_range_min ;
   u8 rx_gain_max ;
   u8 rx_gain_min ;
   u8 min_undec_pwdb_for_dm ;
   u8 rssi_val_min ;
   u8 pre_cck_cca_thres ;
   u8 cur_cck_cca_thres ;
   u8 pre_cck_pd_state ;
   u8 cur_cck_pd_state ;
   u8 pre_cck_fa_state ;
   u8 cur_cck_fa_state ;
   u8 pre_ccastate ;
   u8 cur_ccasate ;
   u8 large_fa_hit ;
   u8 forbidden_igi ;
   u8 dig_state ;
   u8 dig_highpwrstate ;
   u8 cur_sta_cstate ;
   u8 pre_sta_cstate ;
   u8 cur_ap_cstate ;
   u8 pre_ap_cstate ;
   u8 cur_pd_thstate ;
   u8 pre_pd_thstate ;
   u8 cur_cs_ratiostate ;
   u8 pre_cs_ratiostate ;
   u8 backoff_enable_flag ;
   s8 backoffval_range_max ;
   s8 backoffval_range_min ;
   u8 dig_min_0 ;
   u8 dig_min_1 ;
   u8 bt30_cur_igi ;
   bool media_connect_0 ;
   bool media_connect_1 ;
   u32 antdiv_rssi_max ;
   u32 rssi_max ;
};
#line 2595  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct rtl_global_var {
   struct list_head glb_priv_list ;
   spinlock_t glb_list_lock ;
};
#line 2605  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct rtl_btc_info {
   u8 bt_type ;
   u8 btcoexist ;
   u8 ant_num ;
   u8 single_ant_path ;
   u8 ap_num ;
   bool in_4way ;
   unsigned long in_4way_ts ;
};
#line 2616 
struct rtl_btc_ops;
#line 2616  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct bt_coexist_info {
   struct rtl_btc_ops *btc_ops ;
   struct rtl_btc_info btc_info ;
   void *btc_context ;
   void *wifi_only_context ;
   u8 eeprom_bt_coexist ;
   u8 eeprom_bt_type ;
   u8 eeprom_bt_ant_num ;
   u8 eeprom_bt_ant_isol ;
   u8 eeprom_bt_radio_shared ;
   u8 bt_coexistence ;
   u8 bt_ant_num ;
   u8 bt_coexist_type ;
   u8 bt_state ;
   u8 bt_cur_state ;
   u8 bt_ant_isolation ;
   u8 bt_pape_ctrl ;
   u8 bt_service ;
   u8 bt_radio_shared_type ;
   u8 bt_rfreg_origin_1e ;
   u8 bt_rfreg_origin_1f ;
   u8 bt_rssi_state ;
   u32 ratio_tx ;
   u32 ratio_pri ;
   u32 bt_edca_ul ;
   u32 bt_edca_dl ;
   bool init_set ;
   bool bt_busy_traffic ;
   bool bt_traffic_mode_set ;
   bool bt_non_traffic_mode_set ;
   bool fw_coexist_all_off ;
   bool sw_coexist_all_off ;
   bool hw_coexist_all_off ;
   u32 cstate ;
   u32 previous_state ;
   u32 cstate_h ;
   u32 previous_state_h ;
   u8 bt_pre_rssi_state ;
   u8 bt_pre_rssi_state1 ;
   u8 reg_bt_iso ;
   u8 reg_bt_sco ;
   bool balance_on ;
   u8 bt_active_zero_cnt ;
   bool cur_bt_disabled ;
   bool pre_bt_disabled ;
   u8 bt_profile_case ;
   u8 bt_profile_action ;
   bool bt_busy ;
   bool hold_for_bt_operation ;
   u8 lps_counter ;
};
#line 2676  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct rtl_btc_ops {
   void (*btc_init_variables)(struct rtl_priv *) ;
   void (*btc_init_variables_wifi_only)(struct rtl_priv *) ;
   void (*btc_deinit_variables)(struct rtl_priv *) ;
   void (*btc_init_hal_vars)(struct rtl_priv *) ;
   void (*btc_power_on_setting)(struct rtl_priv *) ;
   void (*btc_init_hw_config)(struct rtl_priv *) ;
   void (*btc_init_hw_config_wifi_only)(struct rtl_priv *) ;
   void (*btc_ips_notify)(struct rtl_priv *, u8 ) ;
   void (*btc_lps_notify)(struct rtl_priv *, u8 ) ;
   void (*btc_scan_notify)(struct rtl_priv *, u8 ) ;
   void (*btc_scan_notify_wifi_only)(struct rtl_priv *, u8 ) ;
   void (*btc_connect_notify)(struct rtl_priv *, u8 ) ;
   void (*btc_mediastatus_notify)(struct rtl_priv *, enum rt_media_status ) ;
   void (*btc_periodical)(struct rtl_priv *) ;
   void (*btc_halt_notify)(struct rtl_priv *) ;
   void (*btc_btinfo_notify)(struct rtl_priv *, u8 *, u8 ) ;
   void (*btc_btmpinfo_notify)(struct rtl_priv *, u8 *, u8 ) ;
   bool (*btc_is_limited_dig)(struct rtl_priv *) ;
   bool (*btc_is_disable_edca_turbo)(struct rtl_priv *) ;
   bool (*btc_is_bt_disabled)(struct rtl_priv *) ;
   void (*btc_special_packet_notify)(struct rtl_priv *, u8 ) ;
   void (*btc_switch_band_notify)(struct rtl_priv *, u8 , bool ) ;
   void (*btc_switch_band_notify_wifi_only)(struct rtl_priv *, u8 , bool ) ;
   void (*btc_display_bt_coex_info)(struct rtl_priv *, struct seq_file *) ;
   void (*btc_record_pwr_mode)(struct rtl_priv *, u8 *, u8 ) ;
   u8 (*btc_get_lps_val)(struct rtl_priv *) ;
   u8 (*btc_get_rpwm_val)(struct rtl_priv *) ;
   bool (*btc_is_bt_ctrl_lps)(struct rtl_priv *) ;
   void (*btc_get_ampdu_cfg)(struct rtl_priv *, u8 *, u8 *, u8 *) ;
   bool (*btc_is_bt_lps_on)(struct rtl_priv *) ;
};
#line 2718  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct proxim {
   bool proxim_on ;
   void *proximity_priv ;
   int (*proxim_rx)(struct ieee80211_hw *, struct rtl_stats *, struct sk_buff *) ;
   u8 (*proxim_get_var)(struct ieee80211_hw *, u8 ) ;
};
#line 2740  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct rtl_scan_list {
   int num ;
   struct list_head list ;
};
#line 2745 
struct rtl_rate_priv;
#line 2745  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct rtl_priv {
   struct ieee80211_hw *hw ;
   struct completion firmware_loading_complete ;
   struct list_head list ;
   struct rtl_priv *buddy_priv ;
   struct rtl_global_var *glb_var ;
   struct rtl_dualmac_easy_concurrent_ctl easy_concurrent_ctl ;
   struct rtl_dmsp_ctl dmsp_ctl ;
   struct rtl_locks locks ;
   struct rtl_works works ;
   struct rtl_mac mac80211 ;
   struct rtl_hal rtlhal ;
   struct rtl_regulatory regd ;
   struct rtl_rfkill rfkill ;
   struct rtl_io io ;
   struct rtl_phy phy ;
   struct rtl_dm dm ;
   struct rtl_security sec ;
   struct rtl_efuse efuse ;
   struct rtl_led_ctl ledctl ;
   struct rtl_tx_report tx_report ;
   struct rtl_scan_list scan_list ;
   struct rtl_ps_ctl psc ;
   struct rate_adaptive ra ;
   struct dynamic_primary_cca primarycca ;
   struct wireless_stats stats ;
   struct rt_link_detect link_info ;
   struct false_alarm_statistics falsealm_cnt ;
   struct rtl_rate_priv *rate_priv ;
   struct list_head entry_list ;
   struct sk_buff_head c2hcmd_queue ;
   struct rtl_debug dbg ;
   int max_fw_size ;
   struct rtl_hal_cfg *cfg ;
   struct rtl_intf_ops *intf_ops ;
   unsigned long status ;
   struct dig_t dm_digtable ;
   struct ps_t dm_pstable ;
   u32 reg_874 ;
   u32 reg_c70 ;
   u32 reg_85c ;
   u32 reg_a74 ;
   bool reg_init ;
   bool bt_operation_on ;
   __le32 *usb_data ;
   int usb_data_index ;
   bool initialized ;
   bool enter_ps ;
   u8 rate_mask[5U] ;
   struct proxim proximity ;
   struct bt_coexist_info btcoexist ;
   bool use_new_trx_flow ;
   struct wiphy_wowlan_support wowlan ;
   u8 priv[0U] ;
};
#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/pci.h"
enum btc_chip_interface {
    BTC_INTF_UNKNOWN = 0,
    BTC_INTF_PCI = 1,
    BTC_INTF_USB = 2,
    BTC_INTF_SDIO = 3,
    BTC_INTF_GSPI = 4,
    BTC_INTF_MAX = 5
};
#line 127  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.h"
struct btc_board_info {
   u8 bt_chip_type ;
   u8 pg_ant_num ;
   u8 btdm_ant_num ;
   u8 btdm_ant_pos ;
   u8 single_ant_path ;
   bool tfbga_package ;
   u8 rfe_type ;
   u8 ant_div_cfg ;
   u8 customer_id ;
};
#line 530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.h"
struct btc_bt_info {
   bool bt_disabled ;
   u8 rssi_adjust_for_agc_table_on ;
   u8 rssi_adjust_for_1ant_coex_type ;
   bool pre_bt_ctrl_agg_buf_size ;
   bool bt_busy ;
   u8 pre_agg_buf_size ;
   u8 agg_buf_size ;
   bool limited_dig ;
   bool pre_reject_agg_pkt ;
   bool reject_agg_pkt ;
   bool bt_ctrl_buf_size ;
   bool increase_scan_dev_num ;
   bool miracast_plus_bt ;
   bool bt_ctrl_agg_buf_size ;
   bool bt_tx_rx_mask ;
   u16 bt_hci_ver ;
   u16 bt_real_fw_ver ;
   u8 bt_fw_ver ;
   u32 bt_get_fw_ver ;
   bool bt_disable_low_pwr ;
   bool bt_ctrl_lps ;
   bool bt_pwr_save_mode ;
   bool bt_lps_on ;
   bool force_to_roam ;
   u8 force_exec_pwr_cmd_cnt ;
   u8 lps_val ;
   u8 rpwm_val ;
   u32 ra_mask ;
   u32 afh_map_l ;
   u32 afh_map_m ;
   u16 afh_map_h ;
   u32 bt_supported_feature ;
   u32 bt_supported_version ;
   u32 bt_device_info ;
   u32 bt_forb_slot_val ;
   u8 bt_ant_det_val ;
   u8 bt_ble_scan_type ;
   u32 bt_ble_scan_para ;
};
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.h"
struct btc_stack_info {
   bool profile_notified ;
   u16 hci_version ;
   u8 num_of_link ;
   bool bt_link_exist ;
   bool sco_exist ;
   bool acl_exist ;
   bool a2dp_exist ;
   bool hid_exist ;
   u8 num_of_hid ;
   bool pan_exist ;
   bool unknown_acl_exist ;
   s8 min_bt_rssi ;
};
#line 590  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.h"
struct btc_statistics {
   u32 cnt_bind ;
   u32 cnt_init_hw_config ;
   u32 cnt_init_coex_dm ;
   u32 cnt_ips_notify ;
   u32 cnt_lps_notify ;
   u32 cnt_scan_notify ;
   u32 cnt_connect_notify ;
   u32 cnt_media_status_notify ;
   u32 cnt_special_packet_notify ;
   u32 cnt_bt_info_notify ;
   u32 cnt_periodical ;
   u32 cnt_coex_dm_switch ;
   u32 cnt_stack_operation_notify ;
   u32 cnt_dbg_ctrl ;
   u32 cnt_pre_load_firmware ;
   u32 cnt_power_on ;
};
#line 609  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.h"
struct btc_bt_link_info {
   bool bt_link_exist ;
   bool bt_hi_pri_link_exist ;
   bool sco_exist ;
   bool sco_only ;
   bool a2dp_exist ;
   bool a2dp_only ;
   bool hid_exist ;
   bool hid_only ;
   bool pan_exist ;
   bool pan_only ;
   bool slave_role ;
   bool acl_busy ;
};
#line 663  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.h"
struct btc_coexist {
   bool binded ;
   void *adapter ;
   struct btc_board_info board_info ;
   struct btc_bt_info bt_info ;
   struct btc_stack_info stack_info ;
   enum btc_chip_interface chip_interface ;
   struct btc_bt_link_info bt_link_info ;
   bool auto_report_1ant ;
   bool auto_report_2ant ;
   bool dbg_mode_1ant ;
   bool dbg_mode_2ant ;
   bool initilized ;
   bool stop_coex_dm ;
   bool manual_control ;
   struct btc_statistics statistics ;
   u8 pwr_mode_val[10U] ;
   struct completion bt_mp_comp ;
   u8 (*btc_read_1byte)(void *, u32 ) ;
   void (*btc_write_1byte)(void *, u32 , u32 ) ;
   void (*btc_write_1byte_bitmask)(void *, u32 , u32 , u8 ) ;
   u16 (*btc_read_2byte)(void *, u32 ) ;
   void (*btc_write_2byte)(void *, u32 , u16 ) ;
   u32 (*btc_read_4byte)(void *, u32 ) ;
   void (*btc_write_4byte)(void *, u32 , u32 ) ;
   void (*btc_write_local_reg_1byte)(void *, u32 , u8 ) ;
   void (*btc_set_bb_reg)(void *, u32 , u32 , u32 ) ;
   u32 (*btc_get_bb_reg)(void *, u32 , u32 ) ;
   void (*btc_set_rf_reg)(void *, u8 , u32 , u32 , u32 ) ;
   u32 (*btc_get_rf_reg)(void *, u8 , u32 , u32 ) ;
   void (*btc_fill_h2c)(void *, u8 , u32 , u8 *) ;
   void (*btc_disp_dbg_msg)(void *, u8 , struct seq_file *) ;
   bool (*btc_get)(void *, u8 , void *) ;
   bool (*btc_set)(void *, u8 , void *) ;
   void (*btc_set_bt_reg)(void *, u8 , u32 , u32 ) ;
   u32 (*btc_get_bt_reg)(void *, u8 , u32 ) ;
   u32 (*btc_get_bt_coex_supported_feature)(void *) ;
   u32 (*btc_get_bt_coex_supported_version)(void *) ;
   u32 (*btc_get_bt_phydm_version)(void *) ;
   void (*btc_phydm_modify_ra_pcr_threshold)(void *, u8 , u8 ) ;
   u32 (*btc_phydm_query_phy_counter)(void *, enum dm_info_query ) ;
   u8 (*btc_get_ant_det_val_from_bt)(void *) ;
   u8 (*btc_get_ble_scan_type_from_bt)(void *) ;
   u32 (*btc_get_ble_scan_para_from_bt)(void *, u8 ) ;
   bool (*btc_get_bt_afh_map_from_bt)(void *, u8 , u8 *) ;
};
#line 739 
struct wifi_only_cfg;
#line 796 
enum wifionly_chip_interface {
    WIFIONLY_INTF_UNKNOWN = 0,
    WIFIONLY_INTF_PCI = 1,
    WIFIONLY_INTF_USB = 2,
    WIFIONLY_INTF_SDIO = 3,
    WIFIONLY_INTF_MAX = 4
};
#line 811  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.h"
struct wifi_only_haldata {
   u16 customer_id ;
   u8 efuse_pg_antnum ;
   u8 efuse_pg_antpath ;
   u8 rfe_type ;
   u8 ant_div_cfg ;
};
#line 819  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.h"
struct wifi_only_cfg {
   void *adapter ;
   struct wifi_only_haldata haldata_info ;
   enum wifionly_chip_interface chip_interface ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.h"
struct coex_dm_8723b_1ant {
   u8 pre_ant_pos_type ;
   u8 cur_ant_pos_type ;
   bool cur_ignore_wlan_act ;
   bool pre_ignore_wlan_act ;
   u8 pre_ps_tdma ;
   u8 cur_ps_tdma ;
   u8 ps_tdma_para[5U] ;
   u8 ps_tdma_du_adj_type ;
   bool auto_tdma_adjust ;
   bool pre_ps_tdma_on ;
   bool cur_ps_tdma_on ;
   bool pre_bt_auto_report ;
   bool cur_bt_auto_report ;
   u8 pre_lps ;
   u8 cur_lps ;
   u8 pre_rpwm ;
   u8 cur_rpwm ;
   bool pre_low_penalty_ra ;
   bool cur_low_penalty_ra ;
   u32 pre_val0x6c0 ;
   u32 cur_val0x6c0 ;
   u32 pre_val0x6c4 ;
   u32 cur_val0x6c4 ;
   u32 pre_val0x6c8 ;
   u32 cur_val0x6c8 ;
   u8 pre_val0x6cc ;
   u8 cur_val0x6cc ;
   bool limited_dig ;
   u32 backup_arfr_cnt1 ;
   u32 backup_arfr_cnt2 ;
   u16 backup_retry_limit ;
   u8 backup_ampdu_max_time ;
   u8 pre_algorithm ;
   u8 cur_algorithm ;
   u8 bt_status ;
   u8 wifi_chnl_info[3U] ;
   u32 prera_mask ;
   u32 curra_mask ;
   u8 pre_arfr_type ;
   u8 cur_arfr_type ;
   u8 pre_retry_limit_type ;
   u8 cur_retry_limit_type ;
   u8 pre_ampdu_time_type ;
   u8 cur_ampdu_time_type ;
   u32 arp_cnt ;
   u8 error_condition ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.h"
struct coex_sta_8723b_1ant {
   bool bt_disabled ;
   bool bt_link_exist ;
   bool sco_exist ;
   bool a2dp_exist ;
   bool hid_exist ;
   bool pan_exist ;
   bool bt_hi_pri_link_exist ;
   u8 num_of_profile ;
   bool bt_abnormal_scan ;
   bool under_lps ;
   bool under_ips ;
   u32 special_pkt_period_cnt ;
   u32 high_priority_tx ;
   u32 high_priority_rx ;
   u32 low_priority_tx ;
   u32 low_priority_rx ;
   u8 bt_rssi ;
   u8 pre_bt_rssi_state ;
   u8 pre_wifi_rssi_state[4U] ;
   bool bt_tx_rx_mask ;
   bool c2h_bt_info_req_sent ;
   u8 bt_info_c2h[3U][10U] ;
   u32 bt_info_c2h_cnt[3U] ;
   bool bt_whck_test ;
   bool c2h_bt_inquiry_page ;
   bool c2h_bt_remote_name_req ;
   bool wifi_is_high_pri_task ;
   u8 bt_retry_cnt ;
   u8 bt_info_ext ;
   u8 scan_ap_num ;
   bool cck_ever_lock ;
   u8 coex_table_type ;
   bool force_lps_on ;
   u32 pop_event_cnt ;
   u32 crc_ok_cck ;
   u32 crc_ok_11g ;
   u32 crc_ok_11n ;
   u32 crc_ok_11n_agg ;
   u32 crc_err_cck ;
   u32 crc_err_11g ;
   u32 crc_err_11n ;
   u32 crc_err_11n_agg ;
   bool cck_lock ;
   bool pre_ccklock ;
   u32 wrong_profile_notification ;
   u8 a2dp_bit_pool ;
   u8 cut_version ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.h"
struct coex_dm_8192e_2ant {
   u8 pre_dec_bt_pwr ;
   u8 cur_dec_bt_pwr ;
   u8 pre_fw_dac_swing_lvl ;
   u8 cur_fw_dac_swing_lvl ;
   bool cur_ignore_wlan_act ;
   bool pre_ignore_wlan_act ;
   u8 pre_ps_tdma ;
   u8 cur_ps_tdma ;
   u8 ps_tdma_para[5U] ;
   u8 tdma_adj_type ;
   bool reset_tdma_adjust ;
   bool auto_tdma_adjust ;
   bool pre_ps_tdma_on ;
   bool cur_ps_tdma_on ;
   bool pre_bt_auto_report ;
   bool cur_bt_auto_report ;
   bool pre_rf_rx_lpf_shrink ;
   bool cur_rf_rx_lpf_shrink ;
   u32 bt_rf0x1e_backup ;
   bool pre_low_penalty_ra ;
   bool cur_low_penalty_ra ;
   bool pre_dac_swing_on ;
   u32 pre_dac_swing_lvl ;
   bool cur_dac_swing_on ;
   u32 cur_dac_swing_lvl ;
   bool pre_adc_back_off ;
   bool cur_adc_back_off ;
   bool pre_agc_table_en ;
   bool cur_agc_table_en ;
   u32 pre_val0x6c0 ;
   u32 cur_val0x6c0 ;
   u32 pre_val0x6c4 ;
   u32 cur_val0x6c4 ;
   u32 pre_val0x6c8 ;
   u32 cur_val0x6c8 ;
   u8 pre_val0x6cc ;
   u8 cur_val0x6cc ;
   bool limited_dig ;
   u32 backup_arfr_cnt1 ;
   u32 backup_arfr_cnt2 ;
   u16 backup_retry_limit ;
   u8 backup_ampdu_maxtime ;
   u8 pre_algorithm ;
   u8 cur_algorithm ;
   u8 bt_status ;
   u8 wifi_chnl_info[3U] ;
   u8 pre_ss_type ;
   u8 cur_ss_type ;
   u32 pre_ra_mask ;
   u32 cur_ra_mask ;
   u8 cur_ra_mask_type ;
   u8 pre_arfr_type ;
   u8 cur_arfr_type ;
   u8 pre_retry_limit_type ;
   u8 cur_retry_limit_type ;
   u8 pre_ampdu_time_type ;
   u8 cur_ampdu_time_type ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.h"
struct coex_sta_8192e_2ant {
   bool bt_link_exist ;
   bool sco_exist ;
   bool a2dp_exist ;
   bool hid_exist ;
   bool pan_exist ;
   bool under_lps ;
   bool under_ips ;
   u32 high_priority_tx ;
   u32 high_priority_rx ;
   u32 low_priority_tx ;
   u32 low_priority_rx ;
   u8 bt_rssi ;
   u8 pre_bt_rssi_state ;
   u8 pre_wifi_rssi_state[4U] ;
   bool c2h_bt_info_req_sent ;
   u8 bt_info_c2h[3U][10U] ;
   u32 bt_info_c2h_cnt[3U] ;
   bool c2h_bt_inquiry_page ;
   u8 bt_retry_cnt ;
   u8 bt_info_ext ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.h"
struct coex_dm_8821a_2ant {
   bool pre_dec_bt_pwr_lvl ;
   bool cur_dec_bt_pwr_lvl ;
   u8 pre_fw_dac_swing_lvl ;
   u8 cur_fw_dac_swing_lvl ;
   bool cur_ignore_wlan_act ;
   bool pre_ignore_wlan_act ;
   u8 pre_ps_tdma ;
   u8 cur_ps_tdma ;
   u8 ps_tdma_para[5U] ;
   u8 ps_tdma_du_adj_type ;
   bool reset_tdma_adjust ;
   bool auto_tdma_adjust ;
   bool pre_ps_tdma_on ;
   bool cur_ps_tdma_on ;
   bool pre_bt_auto_report ;
   bool cur_bt_auto_report ;
   bool pre_rf_rx_lpf_shrink ;
   bool cur_rf_rx_lpf_shrink ;
   u32 bt_rf0x1e_backup ;
   bool pre_low_penalty_ra ;
   bool cur_low_penalty_ra ;
   bool pre_dac_swing_on ;
   u32 pre_dac_swing_lvl ;
   bool cur_dac_swing_on ;
   u32 cur_dac_swing_lvl ;
   bool pre_adc_back_off ;
   bool cur_adc_back_off ;
   bool pre_agc_table_en ;
   bool cur_agc_table_en ;
   u32 pre_val0x6c0 ;
   u32 cur_val0x6c0 ;
   u32 pre_val0x6c4 ;
   u32 cur_val0x6c4 ;
   u32 pre_val0x6c8 ;
   u32 cur_val0x6c8 ;
   u8 pre_val0x6cc ;
   u8 cur_val0x6cc ;
   bool limited_dig ;
   u8 pre_algorithm ;
   u8 cur_algorithm ;
   u8 bt_status ;
   u8 wifi_chnl_info[3U] ;
   u8 pre_lps ;
   u8 cur_lps ;
   u8 pre_rpwm ;
   u8 cur_rpwm ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.h"
struct coex_sta_8821a_2ant {
   bool bt_link_exist ;
   bool sco_exist ;
   bool a2dp_exist ;
   bool hid_exist ;
   bool pan_exist ;
   bool under_lps ;
   bool under_ips ;
   u32 high_priority_tx ;
   u32 high_priority_rx ;
   u32 low_priority_tx ;
   u32 low_priority_rx ;
   u8 bt_rssi ;
   bool bt_tx_rx_mask ;
   u8 pre_bt_rssi_state ;
   u8 pre_wifi_rssi_state[4U] ;
   bool c2h_bt_info_req_sent ;
   u8 bt_info_c2h[3U][10U] ;
   u32 bt_info_c2h_cnt[3U] ;
   bool c2h_bt_inquiry_page ;
   u8 bt_retry_cnt ;
   u8 bt_info_ext ;
   u32 crc_ok_cck ;
   u32 crc_ok_11g ;
   u32 crc_ok_11n ;
   u32 crc_ok_11n_agg ;
   u32 crc_err_cck ;
   u32 crc_err_11g ;
   u32 crc_err_11n ;
   u32 crc_err_11n_agg ;
   u8 coex_table_type ;
   bool force_lps_on ;
   u8 dis_ver_info_cnt ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 1433  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct rssi_sta {
   long undec_sm_pwdb ;
   long undec_sm_cck ;
};
#line 1442  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct rtl_sta_info {
   struct list_head list ;
   struct rtl_tid_data tids[9U] ;
   struct rssi_sta rssi_stat ;
   u8 rssi_level ;
   u16 wireless_mode ;
   u8 ratr_index ;
   u8 mimo_ps ;
   u8 mac_addr[6U] ;
} __attribute__((__packed__));
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a1ant.h"
struct coex_dm_8821a_1ant {
   bool cur_ignore_wlan_act ;
   bool pre_ignore_wlan_act ;
   u8 pre_ps_tdma ;
   u8 cur_ps_tdma ;
   u8 ps_tdma_para[5U] ;
   u8 tdma_adj_type ;
   bool auto_tdma_adjust ;
   bool pre_ps_tdma_on ;
   bool cur_ps_tdma_on ;
   bool pre_bt_auto_report ;
   bool cur_bt_auto_report ;
   u8 pre_lps ;
   u8 cur_lps ;
   u8 pre_rpwm ;
   u8 cur_rpwm ;
   bool pre_low_penalty_ra ;
   bool cur_low_penalty_ra ;
   u32 pre_val_0x6c0 ;
   u32 cur_val_0x6c0 ;
   u32 pre_val_0x6c4 ;
   u32 cur_val_0x6c4 ;
   u32 pre_val_0x6c8 ;
   u32 cur_val_0x6c8 ;
   u8 pre_val_0x6cc ;
   u8 cur_val_0x6cc ;
   u32 backup_arfr_cnt1 ;
   u32 backup_arfr_cnt2 ;
   u16 backup_retry_limit ;
   u8 backup_ampdu_max_time ;
   u8 pre_algorithm ;
   u8 cur_algorithm ;
   u8 bt_status ;
   u8 wifi_chnl_info[3U] ;
   u32 pre_ra_mask ;
   u32 cur_ra_mask ;
   u8 pre_arfr_type ;
   u8 cur_arfr_type ;
   u8 pre_retry_limit_type ;
   u8 cur_retry_limit_type ;
   u8 pre_ampdu_time_type ;
   u8 cur_ampdu_time_type ;
   u32 arp_cnt ;
   u8 error_condition ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a1ant.h"
struct coex_sta_8821a_1ant {
   bool bt_disabled ;
   bool bt_link_exist ;
   bool sco_exist ;
   bool a2dp_exist ;
   bool hid_exist ;
   bool pan_exist ;
   bool under_lps ;
   bool under_ips ;
   u32 special_pkt_period_cnt ;
   u32 high_priority_tx ;
   u32 high_priority_rx ;
   u32 low_priority_tx ;
   u32 low_priority_rx ;
   u8 bt_rssi ;
   bool bt_tx_rx_mask ;
   u8 pre_bt_rssi_state ;
   u8 pre_wifi_rssi_state[4U] ;
   bool c2h_bt_info_req_sent ;
   u8 bt_info_c2h[3U][10U] ;
   u32 bt_info_c2h_cnt[3U] ;
   bool c2h_bt_inquiry_page ;
   bool wifi_is_high_pri_task ;
   u8 bt_retry_cnt ;
   u8 bt_info_ext ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b2ant.h"
struct coex_dm_8723b_2ant {
   bool pre_dec_bt_pwr_lvl ;
   bool cur_dec_bt_pwr_lvl ;
   u8 pre_fw_dac_swing_lvl ;
   u8 cur_fw_dac_swing_lvl ;
   bool cur_ignore_wlan_act ;
   bool pre_ignore_wlan_act ;
   u8 pre_ps_tdma ;
   u8 cur_ps_tdma ;
   u8 ps_tdma_para[5U] ;
   u8 ps_tdma_du_adj_type ;
   bool reset_tdma_adjust ;
   bool auto_tdma_adjust ;
   bool pre_ps_tdma_on ;
   bool cur_ps_tdma_on ;
   bool pre_bt_auto_report ;
   bool cur_bt_auto_report ;
   bool pre_rf_rx_lpf_shrink ;
   bool cur_rf_rx_lpf_shrink ;
   u32 bt_rf0x1e_backup ;
   bool pre_low_penalty_ra ;
   bool cur_low_penalty_ra ;
   bool pre_dac_swing_on ;
   u32 pre_dac_swing_lvl ;
   bool cur_dac_swing_on ;
   u32 cur_dac_swing_lvl ;
   bool pre_adc_back_off ;
   bool cur_adc_back_off ;
   bool pre_agc_table_en ;
   bool cur_agc_table_en ;
   u32 pre_val0x6c0 ;
   u32 cur_val0x6c0 ;
   u32 pre_val0x6c4 ;
   u32 cur_val0x6c4 ;
   u32 pre_val0x6c8 ;
   u32 cur_val0x6c8 ;
   u8 pre_val0x6cc ;
   u8 cur_val0x6cc ;
   bool limited_dig ;
   u8 pre_algorithm ;
   u8 cur_algorithm ;
   u8 bt_status ;
   u8 wifi_chnl_info[3U] ;
   u8 pre_lps ;
   u8 cur_lps ;
   u8 pre_rpwm ;
   u8 cur_rpwm ;
   bool is_switch_to_1dot5_ant ;
   u8 switch_thres_offset ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b2ant.h"
struct coex_sta_8723b_2ant {
   bool bt_link_exist ;
   bool sco_exist ;
   bool a2dp_exist ;
   bool hid_exist ;
   bool pan_exist ;
   bool bt_abnormal_scan ;
   bool under_lps ;
   bool under_ips ;
   u32 high_priority_tx ;
   u32 high_priority_rx ;
   u32 low_priority_tx ;
   u32 low_priority_rx ;
   u8 bt_rssi ;
   bool bt_tx_rx_mask ;
   u8 pre_bt_rssi_state ;
   u8 pre_wifi_rssi_state[4U] ;
   bool c2h_bt_info_req_sent ;
   u8 bt_info_c2h[3U][10U] ;
   u32 bt_info_c2h_cnt[3U] ;
   bool c2h_bt_inquiry_page ;
   bool c2h_bt_remote_name_req ;
   u8 bt_retry_cnt ;
   u8 bt_info_ext ;
   u32 pop_event_cnt ;
   u8 scan_ap_num ;
   u32 crc_ok_cck ;
   u32 crc_ok_11g ;
   u32 crc_ok_11n ;
   u32 crc_ok_11n_agg ;
   u32 crc_err_cck ;
   u32 crc_err_11g ;
   u32 crc_err_11n ;
   u32 crc_err_11n_agg ;
   bool force_lps_on ;
   u8 dis_ver_info_cnt ;
   u8 a2dp_bit_pool ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 197 
enum hrtimer_restart;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
struct device_private {
   void *driver_data ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/firmware.h"
struct firmware {
   size_t size ;
   u8 *data ;
   struct page **pages ;
   void *priv ;
};
#line 164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned long irq_hw_number_t;
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ioport.h"
struct irq_data;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct ida {
   struct xarray xa ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/property.h"
typedef u32 phandle;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct property {
   char *name ;
   int length ;
   void *value ;
   struct property *next ;
   unsigned long _flags ;
   struct bin_attribute attr ;
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct device_node {
   char *name ;
   phandle phandle ;
   char *full_name ;
   struct fwnode_handle fwnode ;
   struct property *properties ;
   struct property *deadprops ;
   struct device_node *parent ;
   struct device_node *child ;
   struct device_node *sibling ;
   struct kobject kobj ;
   unsigned long _flags ;
   void *data ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_fwspec {
   struct fwnode_handle *fwnode ;
   int param_count ;
   u32 param[16U] ;
};
#line 68 
enum irq_domain_bus_token {
    DOMAIN_BUS_ANY = 0,
    DOMAIN_BUS_WIRED = 1,
    DOMAIN_BUS_GENERIC_MSI = 2,
    DOMAIN_BUS_PCI_MSI = 3,
    DOMAIN_BUS_PLATFORM_MSI = 4,
    DOMAIN_BUS_NEXUS = 5,
    DOMAIN_BUS_IPI = 6,
    DOMAIN_BUS_FSL_MC_MSI = 7,
    DOMAIN_BUS_TI_SCI_INTA_MSI = 8,
    DOMAIN_BUS_WAKEUP = 9
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain_ops {
   int (*match)(struct irq_domain *, struct device_node *, enum irq_domain_bus_token ) ;
   int (*select)(struct irq_domain *, struct irq_fwspec *, enum irq_domain_bus_token ) ;
   int (*map)(struct irq_domain *, unsigned int , irq_hw_number_t ) ;
   void (*unmap)(struct irq_domain *, unsigned int ) ;
   int (*xlate)(struct irq_domain *, struct device_node *, u32 *, unsigned int , unsigned long *, unsigned int *) ;
   int (*alloc)(struct irq_domain *, unsigned int , unsigned int , void *) ;
   void (*free)(struct irq_domain *, unsigned int , unsigned int ) ;
   int (*activate)(struct irq_domain *, struct irq_data *, bool ) ;
   void (*deactivate)(struct irq_domain *, struct irq_data *) ;
   int (*translate)(struct irq_domain *, struct irq_fwspec *, unsigned long *, unsigned int *) ;
   void (*debug_show)(struct seq_file *, struct irq_domain *, struct irq_data *, int ) ;
};
#line 132 
struct irq_domain_chip_generic;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain {
   struct list_head link ;
   char *name ;
   struct irq_domain_ops *ops ;
   void *host_data ;
   unsigned int flags ;
   unsigned int mapcount ;
   struct fwnode_handle *fwnode ;
   enum irq_domain_bus_token bus_token ;
   struct irq_domain_chip_generic *gc ;
   struct irq_domain *parent ;
   struct dentry *debugfs_file ;
   irq_hw_number_t hwirq_max ;
   unsigned int revmap_direct_max_irq ;
   unsigned int revmap_size ;
   struct xarray revmap_tree ;
   struct mutex revmap_tree_mutex ;
   unsigned int linear_revmap[] ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rtmutex.h"
struct rt_mutex {
   raw_spinlock_t wait_lock ;
   struct rb_root_cached waiters ;
   struct task_struct *owner ;
   int save_state ;
   char *name ;
   char *file ;
   int line ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
struct i2c_msg {
   __u16 addr ;
   __u16 flags ;
   __u16 len ;
   __u8 *buf ;
};
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
union i2c_smbus_data {
   __u8 byte ;
   __u16 word ;
   __u8 block[34U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm;
#line 28 
struct i2c_adapter;
#line 29 
struct i2c_client;
#line 33 
enum i2c_slave_event;
#line 33 
enum i2c_slave_event;
#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_client {
   unsigned short flags ;
   unsigned short addr ;
   char name[20U] ;
   struct i2c_adapter *adapter ;
   struct device dev ;
   int init_irq ;
   int irq ;
   struct list_head detected ;
   int (*slave_cb)(struct i2c_client *, enum i2c_slave_event , u8 *) ;
};
#line 360 
enum i2c_slave_event {
    I2C_SLAVE_READ_REQUESTED = 0,
    I2C_SLAVE_WRITE_REQUESTED = 1,
    I2C_SLAVE_READ_PROCESSED = 2,
    I2C_SLAVE_WRITE_RECEIVED = 3,
    I2C_SLAVE_STOP = 4
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm {
   int (*master_xfer)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*master_xfer_atomic)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*smbus_xfer)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   int (*smbus_xfer_atomic)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   u32 (*functionality)(struct i2c_adapter *) ;
   int (*reg_slave)(struct i2c_client *) ;
   int (*unreg_slave)(struct i2c_client *) ;
};
#line 565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_lock_operations {
   void (*lock_bus)(struct i2c_adapter *, unsigned int ) ;
   int (*trylock_bus)(struct i2c_adapter *, unsigned int ) ;
   void (*unlock_bus)(struct i2c_adapter *, unsigned int ) ;
};
#line 618 
struct gpio_desc;
#line 618  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_bus_recovery_info {
   int (*recover_bus)(struct i2c_adapter *) ;
   int (*get_scl)(struct i2c_adapter *) ;
   void (*set_scl)(struct i2c_adapter *, int ) ;
   int (*get_sda)(struct i2c_adapter *) ;
   void (*set_sda)(struct i2c_adapter *, int ) ;
   int (*get_bus_free)(struct i2c_adapter *) ;
   void (*prepare_recovery)(struct i2c_adapter *) ;
   void (*unprepare_recovery)(struct i2c_adapter *) ;
   struct gpio_desc *scl_gpiod ;
   struct gpio_desc *sda_gpiod ;
};
#line 661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter_quirks {
   u64 flags ;
   int max_num_msgs ;
   u16 max_write_len ;
   u16 max_read_len ;
   u16 max_comb_1st_msg_len ;
   u16 max_comb_2nd_msg_len ;
};
#line 692  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter {
   struct module *owner ;
   unsigned int class ;
   struct i2c_algorithm *algo ;
   void *algo_data ;
   struct i2c_lock_operations *lock_ops ;
   struct rt_mutex bus_lock ;
   struct rt_mutex mux_lock ;
   int timeout ;
   int retries ;
   struct device dev ;
   unsigned long locked_flags ;
   int nr ;
   char name[48U] ;
   struct completion dev_released ;
   struct mutex userspace_clients_lock ;
   struct list_head userspace_clients ;
   struct i2c_bus_recovery_info *bus_recovery_info ;
   struct i2c_adapter_quirks *quirks ;
   struct irq_domain *host_notify_domain ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cdev.h"
struct cdev {
   struct kobject kobj ;
   struct module *owner ;
   struct file_operations *ops ;
   struct list_head list ;
   dev_t dev ;
   unsigned int count ;
} __attribute__((__designated_init__));
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-common.h"
struct v4l2_edid {
   __u32 pad ;
   __u32 start_block ;
   __u32 blocks ;
   __u32 reserved[5U] ;
   __u8 *edid ;
};
#line 754 
enum v4l2_priority {
    V4L2_PRIORITY_UNSET = 0,
    V4L2_PRIORITY_BACKGROUND = 1,
    V4L2_PRIORITY_INTERACTIVE = 2,
    V4L2_PRIORITY_RECORD = 3,
    V4L2_PRIORITY_DEFAULT = 2
};
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_rect {
   __s32 left ;
   __s32 top ;
   __u32 width ;
   __u32 height ;
};
#line 420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_fract {
   __u32 numerator ;
   __u32 denominator ;
};
#line 1212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
typedef __u64 v4l2_std_id;
#line 1394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings {
   __u32 width ;
   __u32 height ;
   __u32 interlaced ;
   __u32 polarities ;
   __u64 pixelclock ;
   __u32 hfrontporch ;
   __u32 hsync ;
   __u32 hbackporch ;
   __u32 vfrontporch ;
   __u32 vsync ;
   __u32 vbackporch ;
   __u32 il_vfrontporch ;
   __u32 il_vsync ;
   __u32 il_vbackporch ;
   __u32 standards ;
   __u32 flags ;
   struct v4l2_fract picture_aspect ;
   __u8 cea861_vic ;
   __u8 hdmi_vic ;
   __u8 reserved[46U] ;
} __attribute__((__packed__));
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_8968 {
   struct v4l2_bt_timings bt ;
   __u32 reserved[32U] ;
};
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings {
   __u32 type ;
   union __anonunion_8968 __anonCompField_v4l2_dv_timings_77 ;
} __attribute__((__packed__));
#line 1536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_enum_dv_timings {
   __u32 index ;
   __u32 pad ;
   __u32 reserved[2U] ;
   struct v4l2_dv_timings timings ;
};
#line 1554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings_cap {
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u64 min_pixelclock ;
   __u64 max_pixelclock ;
   __u32 standards ;
   __u32 capabilities ;
   __u32 reserved[16U] ;
} __attribute__((__packed__));
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_8969 {
   struct v4l2_bt_timings_cap bt ;
   __u32 raw_data[32U] ;
};
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings_cap {
   __u32 type ;
   __u32 pad ;
   __u32 reserved[2U] ;
   union __anonunion_8969 __anonCompField_v4l2_dv_timings_cap_78 ;
};
#line 1803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_tuner {
   __u32 index ;
   __u8 name[32U] ;
   __u32 type ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 rxsubchans ;
   __u32 audmode ;
   __s32 signal ;
   __s32 afc ;
   __u32 reserved[4U] ;
};
#line 1817  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_modulator {
   __u32 index ;
   __u8 name[32U] ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 txsubchans ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 1860  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency {
   __u32 tuner ;
   __u32 type ;
   __u32 frequency ;
   __u32 reserved[8U] ;
};
#line 1871  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency_band {
   __u32 tuner ;
   __u32 type ;
   __u32 index ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 modulation ;
   __u32 reserved[9U] ;
};
#line 2043  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_vbi_format {
   __u32 sampling_rate ;
   __u32 offset ;
   __u32 samples_per_line ;
   __u32 sample_format ;
   __s32 start[2U] ;
   __u32 count[2U] ;
   __u32 flags ;
   __u32 reserved[2U] ;
};
#line 2071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_format {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 io_size ;
   __u32 reserved[2U] ;
};
#line 2095  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_cap {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 2106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_data {
   __u32 id ;
   __u32 field ;
   __u32 line ;
   __u32 reserved ;
   __u8 data[48U] ;
};
#line 2350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_event_subscription {
   __u32 type ;
   __u32 id ;
   __u32 flags ;
   __u32 reserved[5U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_8985 {
   __u32 addr ;
   char name[32U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_match {
   __u32 type ;
   union __anonunion_8985 __anonCompField_v4l2_dbg_match_87 ;
} __attribute__((__packed__));
#line 2383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_register {
   struct v4l2_dbg_match match ;
   __u32 size ;
   __u64 reg ;
   __u64 val ;
} __attribute__((__packed__));
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_device;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_gobj {
   struct media_device *mdev ;
   u32 id ;
   struct list_head list ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_enum {
   unsigned long *bmap ;
   int idx_max ;
};
#line 88 
struct media_entity;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_stack_8989 {
   struct media_entity *entity ;
   struct list_head *link ;
};
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_graph {
   struct __anonstruct_stack_8989 stack[16U] ;
   struct media_entity_enum ent_enum ;
   int top ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pipeline {
   int streaming_count ;
   struct media_graph graph ;
};
#line 132 
struct media_pad;
#line 132 
struct media_interface;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_8990 {
   struct media_gobj *gobj0 ;
   struct media_pad *source ;
   struct media_interface *intf ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_8991 {
   struct media_gobj *gobj1 ;
   struct media_pad *sink ;
   struct media_entity *entity ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_link {
   struct media_gobj graph_obj ;
   struct list_head list ;
   union __anonunion_8990 __anonCompField_media_link_90 ;
   union __anonunion_8991 __anonCompField_media_link_91 ;
   struct media_link *reverse ;
   unsigned long flags ;
   bool is_backlink ;
};
#line 149 
enum media_pad_signal_type {
    PAD_SIGNAL_DEFAULT = 0,
    PAD_SIGNAL_ANALOG = 1,
    PAD_SIGNAL_DV = 2,
    PAD_SIGNAL_AUDIO = 3
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pad {
   struct media_gobj graph_obj ;
   struct media_entity *entity ;
   u16 index ;
   enum media_pad_signal_type sig_type ;
   unsigned long flags ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_operations {
   int (*get_fwnode_pad)(struct fwnode_endpoint *) ;
   int (*link_setup)(struct media_entity *, struct media_pad *, struct media_pad *, u32 ) ;
   int (*link_validate)(struct media_link *) ;
};
#line 221 
enum media_entity_type {
    MEDIA_ENTITY_TYPE_BASE = 0,
    MEDIA_ENTITY_TYPE_VIDEO_DEVICE = 1,
    MEDIA_ENTITY_TYPE_V4L2_SUBDEV = 2
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_dev_8993 {
   u32 major ;
   u32 minor ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_info_8992 {
   struct __anonstruct_dev_8993 dev ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity {
   struct media_gobj graph_obj ;
   char *name ;
   enum media_entity_type obj_type ;
   u32 function ;
   unsigned long flags ;
   u16 num_pads ;
   u16 num_links ;
   u16 num_backlinks ;
   int internal_idx ;
   struct media_pad *pads ;
   struct list_head links ;
   struct media_entity_operations *ops ;
   int stream_count ;
   int use_count ;
   struct media_pipeline *pipe ;
   union __anonunion_info_8992 info ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_interface {
   struct media_gobj graph_obj ;
   struct list_head links ;
   u32 type ;
   u32 flags ;
};
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_intf_devnode {
   struct media_interface intf ;
   u32 major ;
   u32 minor ;
};
#line 1087 
enum vfl_devnode_type {
    VFL_TYPE_GRABBER = 0,
    VFL_TYPE_VBI = 1,
    VFL_TYPE_RADIO = 2,
    VFL_TYPE_SUBDEV = 3,
    VFL_TYPE_SDR = 4,
    VFL_TYPE_TOUCH = 5,
    VFL_TYPE_MAX = 6
};
#line 1097 
enum vfl_devnode_direction {
    VFL_DIR_RX = 0,
    VFL_DIR_TX = 1,
    VFL_DIR_M2M = 2
};
#line 1104 
struct video_device;
#line 1105 
struct v4l2_device;
#line 1106 
struct v4l2_ctrl_handler;
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_prio_state {
   atomic_t prios[4U] ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl32)(struct file *, unsigned int , unsigned long ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 256 
struct vb2_queue;
#line 256 
struct v4l2_ioctl_ops;
#line 256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct video_device {
   struct media_entity entity ;
   struct media_intf_devnode *intf_devnode ;
   struct media_pipeline pipe ;
   struct v4l2_file_operations *fops ;
   u32 device_caps ;
   struct device dev ;
   struct cdev *cdev ;
   struct v4l2_device *v4l2_dev ;
   struct device *dev_parent ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct vb2_queue *queue ;
   struct v4l2_prio_state *prio ;
   char name[32U] ;
   enum vfl_devnode_type vfl_type ;
   enum vfl_devnode_direction vfl_dir ;
   int minor ;
   u16 num ;
   unsigned long flags ;
   int index ;
   spinlock_t fh_lock ;
   struct list_head fh_list ;
   int dev_debug ;
   v4l2_std_id tvnorms ;
   void (*release)(struct video_device *) ;
   struct v4l2_ioctl_ops *ioctl_ops ;
   unsigned long valid_ioctls[3U] ;
   struct mutex *lock ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_subdev;
#line 96 
struct v4l2_subdev_ops;
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_priv_tun_config {
   int tuner ;
   void *priv ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_devnode {
   struct media_device *media_dev ;
   struct media_file_operations *fops ;
   struct device dev ;
   struct cdev cdev ;
   struct device *parent ;
   int minor ;
   unsigned long flags ;
   void (*release)(struct media_devnode *) ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_request;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device_ops {
   int (*link_notify)(struct media_link *, u32 , unsigned int ) ;
   struct media_request *(*req_alloc)(struct media_device *) ;
   void (*req_free)(struct media_request *) ;
   int (*req_validate)(struct media_request *) ;
   void (*req_queue)(struct media_request *) ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device {
   struct device *dev ;
   struct media_devnode *devnode ;
   char model[32U] ;
   char driver_name[32U] ;
   char serial[40U] ;
   char bus_info[32U] ;
   u32 hw_revision ;
   u64 topology_version ;
   u32 id ;
   struct ida entity_internal_idx ;
   int entity_internal_idx_max ;
   struct list_head entities ;
   struct list_head interfaces ;
   struct list_head pads ;
   struct list_head links ;
   struct list_head entity_notify ;
   struct mutex graph_mutex ;
   struct media_graph pm_count_walk ;
   void *source_priv ;
   int (*enable_source)(struct media_entity *, struct media_pipeline *) ;
   void (*disable_source)(struct media_entity *) ;
   struct media_device_ops *ops ;
   struct mutex req_queue_mutex ;
   atomic_t request_id ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-mediabus.h"
struct v4l2_mbus_framefmt {
   __u32 width ;
   __u32 height ;
   __u32 code ;
   __u32 field ;
   __u32 colorspace ;
   __u16 ycbcr_enc ;
   __u16 quantization ;
   __u16 xfer_func ;
   __u16 reserved[11U] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_format {
   __u32 which ;
   __u32 pad ;
   struct v4l2_mbus_framefmt format ;
   __u32 reserved[8U] ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_mbus_code_enum {
   __u32 pad ;
   __u32 index ;
   __u32 code ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_size_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval {
   __u32 pad ;
   struct v4l2_fract interval ;
   __u32 reserved[9U] ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 width ;
   __u32 height ;
   struct v4l2_fract interval ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_selection {
   __u32 which ;
   __u32 pad ;
   __u32 target ;
   __u32 flags ;
   struct v4l2_rect r ;
   __u32 reserved[8U] ;
};
#line 157 
struct v4l2_async_notifier;
#line 158 
enum v4l2_async_match_type {
    V4L2_ASYNC_MATCH_CUSTOM = 0,
    V4L2_ASYNC_MATCH_DEVNAME = 1,
    V4L2_ASYNC_MATCH_I2C = 2,
    V4L2_ASYNC_MATCH_FWNODE = 3
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_i2c_9007 {
   int adapter_id ;
   unsigned short address ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_custom_9008 {
   bool (*match)(struct device *, struct v4l2_async_subdev *) ;
   void *priv ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
union __anonunion_match_9006 {
   struct fwnode_handle *fwnode ;
   char *device_name ;
   struct __anonstruct_i2c_9007 i2c ;
   struct __anonstruct_custom_9008 custom ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_subdev {
   enum v4l2_async_match_type match_type ;
   union __anonunion_match_9006 match ;
   struct list_head list ;
   struct list_head asd_list ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier_operations {
   int (*bound)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
   int (*complete)(struct v4l2_async_notifier *) ;
   void (*unbind)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier {
   struct v4l2_async_notifier_operations *ops ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev *sd ;
   struct v4l2_async_notifier *parent ;
   struct list_head asd_list ;
   struct list_head waiting ;
   struct list_head done ;
   struct list_head list ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_m2m_ctx;
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_fh {
   struct list_head list ;
   struct video_device *vdev ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   enum v4l2_priority prio ;
   wait_queue_head_t wait ;
   struct mutex subscribe_lock ;
   struct list_head subscribed ;
   struct list_head available ;
   unsigned int navailable ;
   u32 sequence ;
   struct v4l2_m2m_ctx *m2m_ctx ;
};
#line 162 
enum v4l2_mbus_type {
    V4L2_MBUS_UNKNOWN = 0,
    V4L2_MBUS_PARALLEL = 1,
    V4L2_MBUS_BT656 = 2,
    V4L2_MBUS_CSI1 = 3,
    V4L2_MBUS_CCP2 = 4,
    V4L2_MBUS_CSI2_DPHY = 5,
    V4L2_MBUS_CSI2_CPHY = 6
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-mediabus.h"
struct v4l2_mbus_config {
   enum v4l2_mbus_type type ;
   unsigned int flags ;
};
#line 184 
struct v4l2_subdev_fh;
#line 185 
struct tuner_setup;
#line 186 
struct v4l2_mbus_frame_desc;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_decode_vbi_line {
   u32 is_second_field ;
   u8 *p ;
   u32 line ;
   u32 type ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_io_pin_config {
   u32 flags ;
   u8 pin ;
   u8 function ;
   u8 value ;
   u8 strength ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_core_ops {
   int (*log_status)(struct v4l2_subdev *) ;
   int (*s_io_pin_config)(struct v4l2_subdev *, size_t , struct v4l2_subdev_io_pin_config *) ;
   int (*init)(struct v4l2_subdev *, u32 ) ;
   int (*load_fw)(struct v4l2_subdev *) ;
   int (*reset)(struct v4l2_subdev *, u32 ) ;
   int (*s_gpio)(struct v4l2_subdev *, u32 ) ;
   long (*ioctl)(struct v4l2_subdev *, unsigned int , void *) ;
   long (*compat_ioctl32)(struct v4l2_subdev *, unsigned int , unsigned long ) ;
   int (*g_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_power)(struct v4l2_subdev *, int ) ;
   int (*interrupt_service_routine)(struct v4l2_subdev *, u32 , bool *) ;
   int (*subscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
   int (*unsubscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
};
#line 264  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_tuner_ops {
   int (*standby)(struct v4l2_subdev *) ;
   int (*s_radio)(struct v4l2_subdev *) ;
   int (*s_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*g_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*enum_freq_bands)(struct v4l2_subdev *, struct v4l2_frequency_band *) ;
   int (*g_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*s_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*g_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_type_addr)(struct v4l2_subdev *, struct tuner_setup *) ;
   int (*s_config)(struct v4l2_subdev *, struct v4l2_priv_tun_config *) ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_audio_ops {
   int (*s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_i2s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
};
#line 310 
enum v4l2_mbus_frame_desc_flags {
    V4L2_MBUS_FRAME_DESC_FL_LEN_MAX = 1,
    V4L2_MBUS_FRAME_DESC_FL_BLOB = 2
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc_entry {
   enum v4l2_mbus_frame_desc_flags flags ;
   u32 pixelcode ;
   u32 length ;
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc {
   struct v4l2_mbus_frame_desc_entry entry[4U] ;
   unsigned short num_entries ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_video_ops {
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_crystal_freq)(struct v4l2_subdev *, u32 , u32 ) ;
   int (*g_std)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*s_std)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*s_std_output)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*g_std_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*querystd)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_input_status)(struct v4l2_subdev *, u32 *) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
   int (*g_pixelaspect)(struct v4l2_subdev *, struct v4l2_fract *) ;
   int (*g_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*query_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_rx_buffer)(struct v4l2_subdev *, void *, unsigned int *) ;
};
#line 481  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_vbi_ops {
   int (*decode_vbi_line)(struct v4l2_subdev *, struct v4l2_decode_vbi_line *) ;
   int (*s_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_sliced_vbi_cap)(struct v4l2_subdev *, struct v4l2_sliced_vbi_cap *) ;
   int (*s_raw_fmt)(struct v4l2_subdev *, struct v4l2_vbi_format *) ;
   int (*g_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
   int (*s_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
};
#line 501  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_sensor_ops {
   int (*g_skip_top_lines)(struct v4l2_subdev *, u32 *) ;
   int (*g_skip_frames)(struct v4l2_subdev *, u32 *) ;
};
#line 505 
enum v4l2_subdev_ir_mode {
    V4L2_SUBDEV_IR_MODE_PULSE_WIDTH = 0
};
#line 540  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_parameters {
   unsigned int bytes_per_data_element ;
   enum v4l2_subdev_ir_mode mode ;
   bool enable ;
   bool interrupt_enable ;
   bool shutdown ;
   bool modulation ;
   u32 max_pulse_width ;
   unsigned int carrier_freq ;
   unsigned int duty_cycle ;
   bool invert_level ;
   bool invert_carrier_sense ;
   u32 noise_filter_min_width ;
   unsigned int carrier_range_lower ;
   unsigned int carrier_range_upper ;
   u32 resolution ;
};
#line 599  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_ops {
   int (*rx_read)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*rx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*rx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_write)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*tx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
};
#line 630  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_config {
   struct v4l2_mbus_framefmt try_fmt ;
   struct v4l2_rect try_crop ;
   struct v4l2_rect try_compose ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_ops {
   int (*init_cfg)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *) ;
   int (*enum_mbus_code)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_mbus_code_enum *) ;
   int (*enum_frame_size)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_size_enum *) ;
   int (*enum_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_interval_enum *) ;
   int (*get_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*set_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*get_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*set_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*get_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*set_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*dv_timings_cap)(struct v4l2_subdev *, struct v4l2_dv_timings_cap *) ;
   int (*enum_dv_timings)(struct v4l2_subdev *, struct v4l2_enum_dv_timings *) ;
   int (*link_validate)(struct v4l2_subdev *, struct media_link *, struct v4l2_subdev_format *, struct v4l2_subdev_format *) ;
   int (*get_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
   int (*set_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
};
#line 727  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ops {
   struct v4l2_subdev_core_ops *core ;
   struct v4l2_subdev_tuner_ops *tuner ;
   struct v4l2_subdev_audio_ops *audio ;
   struct v4l2_subdev_video_ops *video ;
   struct v4l2_subdev_vbi_ops *vbi ;
   struct v4l2_subdev_ir_ops *ir ;
   struct v4l2_subdev_sensor_ops *sensor ;
   struct v4l2_subdev_pad_ops *pad ;
};
#line 765  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_internal_ops {
   int (*registered)(struct v4l2_subdev *) ;
   void (*unregistered)(struct v4l2_subdev *) ;
   int (*open)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   int (*close)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   void (*release)(struct v4l2_subdev *) ;
};
#line 772 
struct regulator_bulk_data;
#line 797  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_platform_data {
   struct regulator_bulk_data *regulators ;
   int num_regulators ;
   void *host_priv ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev {
   struct media_entity entity ;
   struct list_head list ;
   struct module *owner ;
   bool owner_v4l2_dev ;
   u32 flags ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev_ops *ops ;
   struct v4l2_subdev_internal_ops *internal_ops ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   char name[32U] ;
   u32 grp_id ;
   void *dev_priv ;
   void *host_priv ;
   struct video_device *devnode ;
   struct device *dev ;
   struct fwnode_handle *fwnode ;
   struct list_head async_list ;
   struct v4l2_async_subdev *asd ;
   struct v4l2_async_notifier *notifier ;
   struct v4l2_async_notifier *subdev_notifier ;
   struct v4l2_subdev_platform_data *pdata ;
};
#line 906  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_fh {
   struct v4l2_fh vfh ;
   struct module *owner ;
   struct v4l2_subdev_pad_config *pad ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-device.h"
struct v4l2_device {
   struct device *dev ;
   struct media_device *mdev ;
   struct list_head subdevs ;
   spinlock_t lock ;
   char name[36U] ;
   void (*notify)(struct v4l2_subdev *, unsigned int , void *) ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct v4l2_prio_state prio ;
   struct kref ref ;
   void (*release)(struct v4l2_device *) ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
struct ptp_system_timestamp {
   struct timespec64 pre_ts ;
   struct timespec64 post_ts ;
};
#line 277 
struct dma_chan;
#line 279 
struct spi_controller;
#line 280 
struct spi_transfer;
#line 281 
struct spi_controller_mem_ops;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_statistics {
   spinlock_t lock ;
   unsigned long messages ;
   unsigned long transfers ;
   unsigned long errors ;
   unsigned long timedout ;
   unsigned long spi_sync ;
   unsigned long spi_sync_immediate ;
   unsigned long spi_async ;
   unsigned long long bytes ;
   unsigned long long bytes_rx ;
   unsigned long long bytes_tx ;
   unsigned long transfer_bytes_histo[17U] ;
   unsigned long transfers_split_maxsize ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_delay {
   u16 value ;
   u8 unit ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_device {
   struct device dev ;
   struct spi_controller *controller ;
   struct spi_controller *master ;
   u32 max_speed_hz ;
   u8 chip_select ;
   u8 bits_per_word ;
   bool rt ;
   u32 mode ;
   int irq ;
   void *controller_state ;
   void *controller_data ;
   char modalias[32U] ;
   char *driver_override ;
   int cs_gpio ;
   struct gpio_desc *cs_gpiod ;
   struct spi_delay word_delay ;
   struct spi_statistics statistics ;
};
#line 247 
struct spi_message;
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_controller {
   struct device dev ;
   struct list_head list ;
   s16 bus_num ;
   u16 num_chipselect ;
   u16 dma_alignment ;
   u32 mode_bits ;
   u32 bits_per_word_mask ;
   u32 min_speed_hz ;
   u32 max_speed_hz ;
   u16 flags ;
   bool slave ;
   size_t (*max_transfer_size)(struct spi_device *) ;
   size_t (*max_message_size)(struct spi_device *) ;
   struct mutex io_mutex ;
   spinlock_t bus_lock_spinlock ;
   struct mutex bus_lock_mutex ;
   bool bus_lock_flag ;
   int (*setup)(struct spi_device *) ;
   int (*set_cs_timing)(struct spi_device *, struct spi_delay *, struct spi_delay *, struct spi_delay *) ;
   int (*transfer)(struct spi_device *, struct spi_message *) ;
   void (*cleanup)(struct spi_device *) ;
   bool (*can_dma)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   bool queued ;
   struct kthread_worker kworker ;
   struct task_struct *kworker_task ;
   struct kthread_work pump_messages ;
   spinlock_t queue_lock ;
   struct list_head queue ;
   struct spi_message *cur_msg ;
   bool idling ;
   bool busy ;
   bool running ;
   bool rt ;
   bool auto_runtime_pm ;
   bool cur_msg_prepared ;
   bool cur_msg_mapped ;
   struct completion xfer_completion ;
   size_t max_dma_len ;
   int (*prepare_transfer_hardware)(struct spi_controller *) ;
   int (*transfer_one_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_transfer_hardware)(struct spi_controller *) ;
   int (*prepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*slave_abort)(struct spi_controller *) ;
   void (*set_cs)(struct spi_device *, bool ) ;
   int (*transfer_one)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   void (*handle_err)(struct spi_controller *, struct spi_message *) ;
   struct spi_controller_mem_ops *mem_ops ;
   struct spi_delay cs_setup ;
   struct spi_delay cs_hold ;
   struct spi_delay cs_inactive ;
   int *cs_gpios ;
   struct gpio_desc **cs_gpiods ;
   bool use_gpio_descriptors ;
   struct spi_statistics statistics ;
   struct dma_chan *dma_tx ;
   struct dma_chan *dma_rx ;
   void *dummy_rx ;
   void *dummy_tx ;
   int (*fw_translate_cs)(struct spi_controller *, unsigned int ) ;
   bool ptp_sts_supported ;
   unsigned long irq_flags ;
};
#line 890  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_transfer {
   void *tx_buf ;
   void *rx_buf ;
   unsigned int len ;
   dma_addr_t tx_dma ;
   dma_addr_t rx_dma ;
   struct sg_table tx_sg ;
   struct sg_table rx_sg ;
   unsigned int cs_change : 1 ;
   unsigned int tx_nbits : 3 ;
   unsigned int rx_nbits : 3 ;
   u8 bits_per_word ;
   u16 delay_usecs ;
   struct spi_delay delay ;
   struct spi_delay cs_change_delay ;
   struct spi_delay word_delay ;
   u32 speed_hz ;
   u32 effective_speed_hz ;
   unsigned int ptp_sts_word_pre ;
   unsigned int ptp_sts_word_post ;
   struct ptp_system_timestamp *ptp_sts ;
   bool timestamped_pre ;
   bool timestamped_post ;
   struct list_head transfer_list ;
};
#line 961  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_message {
   struct list_head transfers ;
   struct spi_device *spi ;
   unsigned int is_dma_mapped : 1 ;
   void (*complete)(void *) ;
   void *context ;
   unsigned int frame_length ;
   unsigned int actual_length ;
   int status ;
   struct list_head queue ;
   void *state ;
   struct list_head resources ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fix_screeninfo {
   char id[16U] ;
   unsigned long smem_start ;
   __u32 smem_len ;
   __u32 type ;
   __u32 type_aux ;
   __u32 visual ;
   __u16 xpanstep ;
   __u16 ypanstep ;
   __u16 ywrapstep ;
   __u32 line_length ;
   unsigned long mmio_start ;
   __u32 mmio_len ;
   __u32 accel ;
   __u16 capabilities ;
   __u16 reserved[2U] ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_bitfield {
   __u32 offset ;
   __u32 length ;
   __u32 msb_right ;
};
#line 241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_var_screeninfo {
   __u32 xres ;
   __u32 yres ;
   __u32 xres_virtual ;
   __u32 yres_virtual ;
   __u32 xoffset ;
   __u32 yoffset ;
   __u32 bits_per_pixel ;
   __u32 grayscale ;
   struct fb_bitfield red ;
   struct fb_bitfield green ;
   struct fb_bitfield blue ;
   struct fb_bitfield transp ;
   __u32 nonstd ;
   __u32 activate ;
   __u32 height ;
   __u32 width ;
   __u32 accel_flags ;
   __u32 pixclock ;
   __u32 left_margin ;
   __u32 right_margin ;
   __u32 upper_margin ;
   __u32 lower_margin ;
   __u32 hsync_len ;
   __u32 vsync_len ;
   __u32 sync ;
   __u32 vmode ;
   __u32 rotate ;
   __u32 colorspace ;
   __u32 reserved[4U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cmap {
   __u32 start ;
   __u32 len ;
   __u16 *red ;
   __u16 *green ;
   __u16 *blue ;
   __u16 *transp ;
};
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_copyarea {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 sx ;
   __u32 sy ;
};
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fillrect {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 color ;
   __u32 rop ;
};
#line 359  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_image {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 fg_color ;
   __u32 bg_color ;
   __u8 depth ;
   char *data ;
   struct fb_cmap cmap ;
};
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fbcurpos {
   __u16 x ;
   __u16 y ;
};
#line 387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cursor {
   __u16 set ;
   __u16 enable ;
   __u16 rop ;
   char *mask ;
   struct fbcurpos hot ;
   struct fb_image image ;
};
#line 400 
enum backlight_type {
    BACKLIGHT_RAW = 1,
    BACKLIGHT_PLATFORM = 2,
    BACKLIGHT_FIRMWARE = 3,
    BACKLIGHT_TYPE_MAX = 4
};
#line 412 
enum backlight_scale {
    BACKLIGHT_SCALE_UNKNOWN = 0,
    BACKLIGHT_SCALE_LINEAR = 1,
    BACKLIGHT_SCALE_NON_LINEAR = 2
};
#line 418 
struct backlight_device;
#line 419 
struct fb_info;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_ops {
   unsigned int options ;
   int (*update_status)(struct backlight_device *) ;
   int (*get_brightness)(struct backlight_device *) ;
   int (*check_fb)(struct backlight_device *, struct fb_info *) ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_properties {
   int brightness ;
   int max_brightness ;
   int power ;
   int fb_blank ;
   enum backlight_type type ;
   unsigned int state ;
   enum backlight_scale scale ;
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_device {
   struct backlight_properties props ;
   struct mutex update_lock ;
   struct mutex ops_lock ;
   struct backlight_ops *ops ;
   struct notifier_block fb_notif ;
   struct list_head entry ;
   struct device dev ;
   bool fb_bl_on[32U] ;
   int use_count ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_chroma {
   __u32 redx ;
   __u32 greenx ;
   __u32 bluex ;
   __u32 whitex ;
   __u32 redy ;
   __u32 greeny ;
   __u32 bluey ;
   __u32 whitey ;
};
#line 63 
struct fb_videomode;
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_monspecs {
   struct fb_chroma chroma ;
   struct fb_videomode *modedb ;
   __u8 manufacturer[4U] ;
   __u8 monitor[14U] ;
   __u8 serial_no[14U] ;
   __u8 ascii[14U] ;
   __u32 modedb_len ;
   __u32 model ;
   __u32 serial ;
   __u32 year ;
   __u32 week ;
   __u32 hfmin ;
   __u32 hfmax ;
   __u32 dclkmin ;
   __u32 dclkmax ;
   __u16 input ;
   __u16 dpms ;
   __u16 signal ;
   __u16 vfmin ;
   __u16 vfmax ;
   __u16 gamma ;
   __u16 gtf : 1 ;
   __u16 misc ;
   __u8 version ;
   __u8 revision ;
   __u8 max_x ;
   __u8 max_y ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_blit_caps {
   u32 x ;
   u32 y ;
   u32 len ;
   u32 flags ;
};
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_pixmap {
   u8 *addr ;
   u32 size ;
   u32 offset ;
   u32 buf_align ;
   u32 scan_align ;
   u32 access_align ;
   u32 flags ;
   u32 blit_x ;
   u32 blit_y ;
   void (*writeio)(struct fb_info *, void *, void *, unsigned int ) ;
   void (*readio)(struct fb_info *, void *, void *, unsigned int ) ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_deferred_io {
   unsigned long delay ;
   struct mutex lock ;
   struct list_head pagelist ;
   void (*first_io)(struct fb_info *) ;
   void (*deferred_io)(struct fb_info *, struct list_head *) ;
};
#line 228  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_ops {
   struct module *owner ;
   int (*fb_open)(struct fb_info *, int ) ;
   int (*fb_release)(struct fb_info *, int ) ;
   ssize_t (*fb_read)(struct fb_info *, char *, size_t , loff_t *) ;
   ssize_t (*fb_write)(struct fb_info *, char *, size_t , loff_t *) ;
   int (*fb_check_var)(struct fb_var_screeninfo *, struct fb_info *) ;
   int (*fb_set_par)(struct fb_info *) ;
   int (*fb_setcolreg)(unsigned int , unsigned int , unsigned int , unsigned int , unsigned int , struct fb_info *) ;
   int (*fb_setcmap)(struct fb_cmap *, struct fb_info *) ;
   int (*fb_blank)(int , struct fb_info *) ;
   int (*fb_pan_display)(struct fb_var_screeninfo *, struct fb_info *) ;
   void (*fb_fillrect)(struct fb_info *, struct fb_fillrect *) ;
   void (*fb_copyarea)(struct fb_info *, struct fb_copyarea *) ;
   void (*fb_imageblit)(struct fb_info *, struct fb_image *) ;
   int (*fb_cursor)(struct fb_info *, struct fb_cursor *) ;
   int (*fb_sync)(struct fb_info *) ;
   int (*fb_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_compat_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_mmap)(struct fb_info *, struct vm_area_struct *) ;
   void (*fb_get_caps)(struct fb_info *, struct fb_blit_caps *, struct fb_var_screeninfo *) ;
   void (*fb_destroy)(struct fb_info *) ;
   int (*fb_debug_enter)(struct fb_info *) ;
   int (*fb_debug_leave)(struct fb_info *) ;
};
#line 306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilemap {
   __u32 width ;
   __u32 height ;
   __u32 depth ;
   __u32 length ;
   __u8 *data ;
};
#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilerect {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 index ;
   __u32 fg ;
   __u32 bg ;
   __u32 rop ;
};
#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilearea {
   __u32 sx ;
   __u32 sy ;
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tileblit {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 fg ;
   __u32 bg ;
   __u32 length ;
   __u32 *indices ;
};
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilecursor {
   __u32 sx ;
   __u32 sy ;
   __u32 mode ;
   __u32 shape ;
   __u32 fg ;
   __u32 bg ;
};
#line 355  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tile_ops {
   void (*fb_settile)(struct fb_info *, struct fb_tilemap *) ;
   void (*fb_tilecopy)(struct fb_info *, struct fb_tilearea *) ;
   void (*fb_tilefill)(struct fb_info *, struct fb_tilerect *) ;
   void (*fb_tileblit)(struct fb_info *, struct fb_tileblit *) ;
   void (*fb_tilecursor)(struct fb_info *, struct fb_tilecursor *) ;
   int (*fb_get_tilemax)(struct fb_info *) ;
};
#line 499  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct aperture {
   resource_size_t base ;
   resource_size_t size ;
};
#line 497  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct apertures_struct {
   unsigned int count ;
   struct aperture ranges[0U] ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
union __anonunion_9909 {
   char *screen_base ;
   char *screen_buffer ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_info {
   atomic_t count ;
   int node ;
   int flags ;
   int fbcon_rotate_hint ;
   struct mutex lock ;
   struct mutex mm_lock ;
   struct fb_var_screeninfo var ;
   struct fb_fix_screeninfo fix ;
   struct fb_monspecs monspecs ;
   struct work_struct queue ;
   struct fb_pixmap pixmap ;
   struct fb_pixmap sprite ;
   struct fb_cmap cmap ;
   struct list_head modelist ;
   struct fb_videomode *mode ;
   struct backlight_device *bl_dev ;
   struct mutex bl_curve_mutex ;
   u8 bl_curve[128U] ;
   struct delayed_work deferred_work ;
   struct fb_deferred_io *fbdefio ;
   struct fb_ops *fbops ;
   struct device *device ;
   struct device *dev ;
   int class_flag ;
   struct fb_tile_ops *tileops ;
   union __anonunion_9909 __anonCompField_fb_info_73 ;
   unsigned long screen_size ;
   void *pseudo_palette ;
   u32 state ;
   void *fbcon_par ;
   void *par ;
   struct apertures_struct *apertures ;
   bool skip_vt_switch ;
};
#line 767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_videomode {
   char *name ;
   u32 refresh ;
   u32 xres ;
   u32 yres ;
   u32 pixclock ;
   u32 left_margin ;
   u32 right_margin ;
   u32 upper_margin ;
   u32 lower_margin ;
   u32 hsync_len ;
   u32 vsync_len ;
   u32 sync ;
   u32 vmode ;
   u32 flag ;
};
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct ldv_kmem_cache {
   char *name ;
   unsigned int size ;
};
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/inline_asm.h"
#line 22 
void ldv_inline_asm(void);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 14 
void *memcpy(void *, void *, size_t);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
#line 20 
unsigned long native_save_fl(void);
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
unsigned long native_save_fl(void)
{
  #line 22 
  unsigned long flags;
  #line 23 
  ldv_inline_asm();
  #line 35 
  return flags;
}

#line 38 
#line 39 
void native_restore_fl(unsigned long flags);
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
void native_restore_fl(unsigned long flags)
{
  #line 41 
  ldv_inline_asm();
  #line 42 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 23 
void *ldv_kzalloc(size_t size, gfp_t flags);
#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/completion.h"
#line 118 
void complete(struct completion *);
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 189 
void kfree(void *);
#line 668 
#line 417  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/realtek/rtlwifi/btcoexist/btcoexist.ko/concurrency safety/0/concurrency safety/weaver/rtl_btc.i.aux"
static void *kzalloc(size_t size, gfp_t flags);
#line 120  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
#line 120 
void seq_puts(struct seq_file *, char *);
#line 152  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/debug.h"
#line 152 
void _rtl_dbg_trace(struct rtl_priv *, u64, int, char * , ...);
#line 3100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
__inline static u32 rtl_read_dword(struct rtl_priv *rtlpriv, u32 addr)
{
  #line 3102 
  return (*(rtlpriv->io.read32_sync))(rtlpriv,addr);
}

#line 3129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
__inline static void rtl_write_dword(struct rtl_priv *rtlpriv, u32 addr, u32 val32)
{
  #line 3132 
  (*(rtlpriv->io.write32_async))(rtlpriv,addr,val32);
  #line 3134 
  if ((int)(rtlpriv->cfg)->write_readback != 0) 
                                                #line 3135 
                                                (*(rtlpriv->io.read32_sync))(rtlpriv,addr);
  #line 3136 
  return;
}

#line 738  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.h"
#line 738 
bool halbtc_is_wifi_uplink(struct rtl_priv *adapter);
#line 747 
#line 747 
bool exhalbtc_initlize_variables(struct rtl_priv *rtlpriv);
#line 748 
#line 748 
bool exhalbtc_initlize_variables_wifi_only(struct rtl_priv *rtlpriv);
#line 749 
#line 749 
bool exhalbtc_bind_bt_coex_withadapter(void *adapter);
#line 750 
#line 750 
void exhalbtc_power_on_setting(struct btc_coexist *btcoexist);
#line 752 
#line 752 
void exhalbtc_init_hw_config(struct btc_coexist *btcoexist, bool wifi_only);
#line 753 
#line 753 
void exhalbtc_init_hw_config_wifi_only(struct wifi_only_cfg *wifionly_cfg);
#line 754 
#line 754 
void exhalbtc_init_coex_dm(struct btc_coexist *btcoexist);
#line 755 
#line 755 
void exhalbtc_ips_notify(struct btc_coexist *btcoexist, u8 type);
#line 756 
#line 756 
void exhalbtc_lps_notify(struct btc_coexist *btcoexist, u8 type);
#line 757 
#line 757 
void exhalbtc_scan_notify(struct btc_coexist *btcoexist, u8 type);
#line 758 
#line 758 
void exhalbtc_scan_notify_wifi_only(struct wifi_only_cfg *wifionly_cfg, u8 is_5g);
#line 760 
#line 760 
void exhalbtc_connect_notify(struct btc_coexist *btcoexist, u8 action);
#line 761 
#line 761 
void exhalbtc_mediastatus_notify(struct btc_coexist *btcoexist, enum rt_media_status media_status);
#line 763 
#line 763 
void exhalbtc_special_packet_notify(struct btc_coexist *btcoexist, u8 pkt_type);
#line 764 
#line 764 
void exhalbtc_bt_info_notify(struct btc_coexist *btcoexist, u8 *tmp_buf, u8 length);
#line 767 
#line 767 
void exhalbtc_halt_notify(struct btc_coexist *btcoexist);
#line 770 
#line 770 
void exhalbtc_periodical(struct btc_coexist *btcoexist);
#line 783 
#line 783 
void exhalbtc_display_bt_coex_info(struct btc_coexist *btcoexist, struct seq_file *m);
#line 785 
#line 785 
void exhalbtc_switch_band_notify(struct btc_coexist *btcoexist, u8 type);
#line 786 
#line 786 
void exhalbtc_switch_band_notify_wifi_only(struct wifi_only_cfg *wifionly_cfg, u8 is_5g);
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.h"
#line 150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.c"
void rtl_btc_init_variables(struct rtl_priv *rtlpriv);
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.h"
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.c"
void rtl_btc_init_variables_wifi_only(struct rtl_priv *rtlpriv);
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.h"
#line 165  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.c"
void rtl_btc_deinit_variables(struct rtl_priv *rtlpriv);
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.h"
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.c"
void rtl_btc_init_hal_vars(struct rtl_priv *rtlpriv);
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.h"
#line 177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.c"
void rtl_btc_power_on_setting(struct rtl_priv *rtlpriv);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.h"
#line 187  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.c"
void rtl_btc_init_hw_config(struct rtl_priv *rtlpriv);
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.h"
#line 204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.c"
void rtl_btc_init_hw_config_wifi_only(struct rtl_priv *rtlpriv);
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.h"
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.c"
void rtl_btc_ips_notify(struct rtl_priv *rtlpriv, u8 type);
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.h"
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.c"
void rtl_btc_lps_notify(struct rtl_priv *rtlpriv, u8 type);
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.h"
#line 242  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.c"
void rtl_btc_scan_notify(struct rtl_priv *rtlpriv, u8 scantype);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.h"
#line 252  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.c"
void rtl_btc_scan_notify_wifi_only(struct rtl_priv *rtlpriv, u8 scantype);
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.h"
#line 264  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.c"
void rtl_btc_connect_notify(struct rtl_priv *rtlpriv, u8 action);
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.h"
#line 274  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.c"
void rtl_btc_mediastatus_notify(struct rtl_priv *rtlpriv, enum rt_media_status mstatus);
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.h"
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.c"
void rtl_btc_periodical(struct rtl_priv *rtlpriv);
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.h"
#line 296  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.c"
void rtl_btc_halt_notify(struct rtl_priv *rtlpriv);
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.h"
#line 306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.c"
void rtl_btc_btinfo_notify(struct rtl_priv *rtlpriv, u8 *tmp_buf, u8 length);
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.h"
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.c"
void rtl_btc_btmpinfo_notify(struct rtl_priv *rtlpriv, u8 *tmp_buf, u8 length);
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.h"
#line 392  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.c"
bool rtl_btc_is_limited_dig(struct rtl_priv *rtlpriv);
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.h"
#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.c"
bool rtl_btc_is_disable_edca_turbo(struct rtl_priv *rtlpriv);
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.h"
#line 429  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.c"
bool rtl_btc_is_bt_disabled(struct rtl_priv *rtlpriv);
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.h"
#line 443  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.c"
void rtl_btc_special_packet_notify(struct rtl_priv *rtlpriv, u8 pkt_type);
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.h"
#line 453  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.c"
void rtl_btc_switch_band_notify(struct rtl_priv *rtlpriv, u8 band_type, bool scanning);
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.h"
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.c"
void rtl_btc_switch_band_notify_wifionly(struct rtl_priv *rtlpriv, u8 band_type, bool scanning);
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.h"
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.c"
void rtl_btc_display_bt_coex_info(struct rtl_priv *rtlpriv, struct seq_file *m);
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.h"
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.c"
void rtl_btc_record_pwr_mode(struct rtl_priv *rtlpriv, u8 *buf, u8 len);
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.h"
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.c"
u8 rtl_btc_get_lps_val(struct rtl_priv *rtlpriv);
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.h"
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.c"
u8 rtl_btc_get_rpwm_val(struct rtl_priv *rtlpriv);
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.h"
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.c"
bool rtl_btc_is_bt_ctrl_lps(struct rtl_priv *rtlpriv);
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.h"
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.c"
bool rtl_btc_is_bt_lps_on(struct rtl_priv *rtlpriv);
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.h"
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.c"
void rtl_btc_get_ampdu_cfg(struct rtl_priv *rtlpriv, u8 *reject_agg, u8 *ctrl_agg_size, u8 *agg_size);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.h"
#line 491  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.c"
struct rtl_btc_ops *rtl_btc_get_ops_pointer(void);
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.h"
#line 512  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.c"
u8 rtl_get_hwpg_bt_exist(struct rtl_priv *rtlpriv);
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.h"
#line 498  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.c"
enum rt_media_status mgnt_link_status_query(struct ieee80211_hw *hw);
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.c"
static struct rtl_btc_ops rtl_btc_operation = {.btc_init_variables = & rtl_btc_init_variables, .btc_init_variables_wifi_only = & rtl_btc_init_variables_wifi_only, .btc_deinit_variables = & rtl_btc_deinit_variables, .btc_init_hal_vars = & rtl_btc_init_hal_vars, .btc_power_on_setting = & rtl_btc_power_on_setting, .btc_init_hw_config = & rtl_btc_init_hw_config, .btc_init_hw_config_wifi_only = & rtl_btc_init_hw_config_wifi_only, .btc_ips_notify = & rtl_btc_ips_notify, .btc_lps_notify = & rtl_btc_lps_notify, .btc_scan_notify = & rtl_btc_scan_notify, .btc_scan_notify_wifi_only = & rtl_btc_scan_notify_wifi_only, .btc_connect_notify = & rtl_btc_connect_notify, .btc_mediastatus_notify = & rtl_btc_mediastatus_notify, .btc_periodical = & rtl_btc_periodical, .btc_halt_notify = & rtl_btc_halt_notify, .btc_btinfo_notify = & rtl_btc_btinfo_notify, .btc_btmpinfo_notify = & rtl_btc_btmpinfo_notify, .btc_is_limited_dig = & rtl_btc_is_limited_dig, .btc_is_disable_edca_turbo = & rtl_btc_is_disable_edca_turbo, .btc_is_bt_disabled = & rtl_btc_is_bt_disabled, .btc_special_packet_notify = & rtl_btc_special_packet_notify, .btc_switch_band_notify = & rtl_btc_switch_band_notify, .btc_switch_band_notify_wifi_only = & rtl_btc_switch_band_notify_wifionly, .btc_display_bt_coex_info = & rtl_btc_display_bt_coex_info, .btc_record_pwr_mode = & rtl_btc_record_pwr_mode, .btc_get_lps_val = & rtl_btc_get_lps_val, .btc_get_rpwm_val = & rtl_btc_get_rpwm_val, .btc_is_bt_ctrl_lps = & rtl_btc_is_bt_ctrl_lps, .btc_get_ampdu_cfg = & rtl_btc_get_ampdu_cfg, .btc_is_bt_lps_on = & rtl_btc_is_bt_lps_on};
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.c"
void rtl_btc_display_bt_coex_info(struct rtl_priv *rtlpriv, struct seq_file *m)
{
  #line 46 
  struct btc_coexist *btcoexist = (struct btc_coexist *)rtlpriv->btcoexist.btc_context;
  #line 48 
  if (btcoexist == (struct btc_coexist *)0) {
    #line 49 
    seq_puts(m,(char *)"btc_coexist context is NULL!\n");
    #line 50 
    return;
  }
  #line 53 
  exhalbtc_display_bt_coex_info(btcoexist,m);
  #line 54 
  return;
}

#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.c"
void rtl_btc_record_pwr_mode(struct rtl_priv *rtlpriv, u8 *buf, u8 len)
{
  #line 59 
  u8 safe_len;
  #line 58 
  struct btc_coexist *btcoexist = (struct btc_coexist *)rtlpriv->btcoexist.btc_context;
  #line 61 
  if (btcoexist == (struct btc_coexist *)0) 
                                            #line 62 
                                            return;
  #line 64 
  safe_len = (unsigned char)10U;
  #line 66 
  if ((int)safe_len > (int)len) 
                                #line 67 
                                safe_len = len;
  #line 69 
  memcpy((void *)(& btcoexist->pwr_mode_val),(void *)buf,(unsigned long)safe_len);
  #line 70 
  return;
}

#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.c"
u8 rtl_btc_get_lps_val(struct rtl_priv *rtlpriv)
{
  #line 74 
  struct btc_coexist *btcoexist = (struct btc_coexist *)rtlpriv->btcoexist.btc_context;
  #line 76 
  if (btcoexist == (struct btc_coexist *)0) 
                                            #line 77 
                                            return (unsigned char)0U;
  #line 79 
  return btcoexist->bt_info.lps_val;
}

#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.c"
u8 rtl_btc_get_rpwm_val(struct rtl_priv *rtlpriv)
{
  #line 84 
  struct btc_coexist *btcoexist = (struct btc_coexist *)rtlpriv->btcoexist.btc_context;
  #line 86 
  if (btcoexist == (struct btc_coexist *)0) 
                                            #line 87 
                                            return (unsigned char)0U;
  #line 89 
  return btcoexist->bt_info.rpwm_val;
}

#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.c"
bool rtl_btc_is_bt_ctrl_lps(struct rtl_priv *rtlpriv)
{
  #line 94 
  struct btc_coexist *btcoexist = (struct btc_coexist *)rtlpriv->btcoexist.btc_context;
  #line 96 
  if (btcoexist == (struct btc_coexist *)0) 
                                            #line 97 
                                            return (_Bool)0;
  #line 99 
  return btcoexist->bt_info.bt_ctrl_lps;
}

#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.c"
bool rtl_btc_is_bt_lps_on(struct rtl_priv *rtlpriv)
{
  #line 104 
  struct btc_coexist *btcoexist = (struct btc_coexist *)rtlpriv->btcoexist.btc_context;
  #line 106 
  if (btcoexist == (struct btc_coexist *)0) 
                                            #line 107 
                                            return (_Bool)0;
  #line 109 
  return btcoexist->bt_info.bt_lps_on;
}

#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.c"
void rtl_btc_get_ampdu_cfg(struct rtl_priv *rtlpriv, u8 *reject_agg, u8 *ctrl_agg_size, u8 *agg_size)
{
  #line 115 
  struct btc_coexist *btcoexist = (struct btc_coexist *)rtlpriv->btcoexist.btc_context;
  #line 117 
  if (btcoexist == (struct btc_coexist *)0) {
    #line 118 
    *reject_agg = (unsigned char)0U;
    #line 119 
    *ctrl_agg_size = (unsigned char)0U;
    #line 120 
    return;
  }
  #line 123 
  if (reject_agg != (u8 *)0U) 
                              #line 124 
                              *reject_agg = (unsigned char)btcoexist->bt_info.reject_agg_pkt;
  #line 125 
  if (ctrl_agg_size != (u8 *)0U) 
                                 #line 126 
                                 *ctrl_agg_size = (unsigned char)btcoexist->bt_info.bt_ctrl_agg_buf_size;
  #line 127 
  if (agg_size != (u8 *)0U) 
                            #line 128 
                            *agg_size = btcoexist->bt_info.agg_buf_size;
  #line 129 
  return;
}

#line 131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.c"
static void rtl_btc_alloc_variable(struct rtl_priv *rtlpriv, bool wifi_only)
{
  #line 133 
  if ((int)wifi_only != 0) 
                           #line 134 
                           rtlpriv->btcoexist.wifi_only_context = kzalloc(24UL,3264U); else 
                                                                    #line 137 
                                                                    rtlpriv->btcoexist.btc_context = kzalloc(536UL,3264U);
  #line 139 
  return;
}

#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.c"
static void rtl_btc_free_variable(struct rtl_priv *rtlpriv)
{
  #line 143 
  kfree(rtlpriv->btcoexist.btc_context);
  #line 144 
  rtlpriv->btcoexist.btc_context = (void *)0;
  #line 146 
  kfree(rtlpriv->btcoexist.wifi_only_context);
  #line 147 
  rtlpriv->btcoexist.wifi_only_context = (void *)0;
  #line 148 
  return;
}

#line 150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.c"
void rtl_btc_init_variables(struct rtl_priv *rtlpriv)
{
  #line 152 
  rtl_btc_alloc_variable(rtlpriv,(_Bool)0);
  #line 154 
  exhalbtc_initlize_variables(rtlpriv);
  #line 155 
  exhalbtc_bind_bt_coex_withadapter((void *)rtlpriv);
  #line 156 
  return;
}

#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.c"
void rtl_btc_init_variables_wifi_only(struct rtl_priv *rtlpriv)
{
  #line 160 
  rtl_btc_alloc_variable(rtlpriv,(_Bool)1);
  #line 162 
  exhalbtc_initlize_variables_wifi_only(rtlpriv);
  #line 163 
  return;
}

#line 165  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.c"
void rtl_btc_deinit_variables(struct rtl_priv *rtlpriv)
{
  #line 167 
  rtl_btc_free_variable(rtlpriv);
  #line 168 
  return;
}

#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.c"
void rtl_btc_init_hal_vars(struct rtl_priv *rtlpriv)
{
  #line 172 
  return;
}

#line 177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.c"
void rtl_btc_power_on_setting(struct rtl_priv *rtlpriv)
{
  #line 179 
  struct btc_coexist *btcoexist = (struct btc_coexist *)rtlpriv->btcoexist.btc_context;
  #line 181 
  if (btcoexist == (struct btc_coexist *)0) 
                                            #line 182 
                                            return;
  #line 184 
  exhalbtc_power_on_setting(btcoexist);
  #line 185 
  return;
}

#line 187  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.c"
void rtl_btc_init_hw_config(struct rtl_priv *rtlpriv)
{
  #line 191 
  u8 bt_exist;
  #line 189 
  struct btc_coexist *btcoexist = (struct btc_coexist *)rtlpriv->btcoexist.btc_context;
  #line 193 
  bt_exist = rtl_get_hwpg_bt_exist(rtlpriv);
  #line 194 
  _rtl_dbg_trace(rtlpriv,4ULL,3,(char *)"%s, bt_exist is %d\n",(char *)"rtl_btc_init_hw_config",(int)bt_exist);
  #line 197 
  if (btcoexist == (struct btc_coexist *)0) 
                                            #line 198 
                                            return;
  #line 200 
  exhalbtc_init_hw_config(btcoexist,(_Bool)((unsigned int)bt_exist == 0U));
  #line 201 
  exhalbtc_init_coex_dm(btcoexist);
  #line 202 
  return;
}

#line 204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.c"
void rtl_btc_init_hw_config_wifi_only(struct rtl_priv *rtlpriv)
{
  #line 206 
  struct wifi_only_cfg *wifionly_cfg = (struct wifi_only_cfg *)rtlpriv->btcoexist.wifi_only_context;
  #line 208 
  if (wifionly_cfg == (struct wifi_only_cfg *)0) 
                                                 #line 209 
                                                 return;
  #line 211 
  exhalbtc_init_hw_config_wifi_only(wifionly_cfg);
  #line 212 
  return;
}

#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.c"
void rtl_btc_ips_notify(struct rtl_priv *rtlpriv, u8 type)
{
  #line 216 
  struct btc_coexist *btcoexist = (struct btc_coexist *)rtlpriv->btcoexist.btc_context;
  #line 218 
  if (btcoexist == (struct btc_coexist *)0) 
                                            #line 219 
                                            return;
  #line 221 
  exhalbtc_ips_notify(btcoexist,(unsigned char)((int)type));
  #line 223 
  if ((unsigned int)type == 0U) {
    #line 227 
    exhalbtc_scan_notify(btcoexist,(unsigned char)1);
    #line 228 
    exhalbtc_scan_notify(btcoexist,(unsigned char)0);
  }
  #line 230 
  return;
}

#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.c"
void rtl_btc_lps_notify(struct rtl_priv *rtlpriv, u8 type)
{
  #line 234 
  struct btc_coexist *btcoexist = (struct btc_coexist *)rtlpriv->btcoexist.btc_context;
  #line 236 
  if (btcoexist == (struct btc_coexist *)0) 
                                            #line 237 
                                            return;
  #line 239 
  exhalbtc_lps_notify(btcoexist,(unsigned char)((int)type));
  #line 240 
  return;
}

#line 242  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.c"
void rtl_btc_scan_notify(struct rtl_priv *rtlpriv, u8 scantype)
{
  #line 244 
  struct btc_coexist *btcoexist = (struct btc_coexist *)rtlpriv->btcoexist.btc_context;
  #line 246 
  if (btcoexist == (struct btc_coexist *)0) 
                                            #line 247 
                                            return;
  #line 249 
  exhalbtc_scan_notify(btcoexist,(unsigned char)((int)scantype));
  #line 250 
  return;
}

#line 252  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.c"
void rtl_btc_scan_notify_wifi_only(struct rtl_priv *rtlpriv, u8 scantype)
{
  #line 254 
  struct rtl_hal *rtlhal = & rtlpriv->rtlhal;
  #line 255 
  struct wifi_only_cfg *wifionly_cfg = (struct wifi_only_cfg *)rtlpriv->btcoexist.wifi_only_context;
  #line 256 
  u8 is_5g = (unsigned char)(rtlhal->current_bandtype == (unsigned int)BAND_ON_5G);
  #line 258 
  if (wifionly_cfg == (struct wifi_only_cfg *)0) 
                                                 #line 259 
                                                 return;
  #line 261 
  exhalbtc_scan_notify_wifi_only(wifionly_cfg,(unsigned char)((int)is_5g));
  #line 262 
  return;
}

#line 264  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.c"
void rtl_btc_connect_notify(struct rtl_priv *rtlpriv, u8 action)
{
  #line 266 
  struct btc_coexist *btcoexist = (struct btc_coexist *)rtlpriv->btcoexist.btc_context;
  #line 268 
  if (btcoexist == (struct btc_coexist *)0) 
                                            #line 269 
                                            return;
  #line 271 
  exhalbtc_connect_notify(btcoexist,(unsigned char)((int)action));
  #line 272 
  return;
}

#line 274  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.c"
void rtl_btc_mediastatus_notify(struct rtl_priv *rtlpriv, enum rt_media_status mstatus)
{
  #line 277 
  struct btc_coexist *btcoexist = (struct btc_coexist *)rtlpriv->btcoexist.btc_context;
  #line 279 
  if (btcoexist == (struct btc_coexist *)0) 
                                            #line 280 
                                            return;
  #line 282 
  exhalbtc_mediastatus_notify(btcoexist,mstatus);
  #line 283 
  return;
}

#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.c"
void rtl_btc_periodical(struct rtl_priv *rtlpriv)
{
  #line 287 
  struct btc_coexist *btcoexist = (struct btc_coexist *)rtlpriv->btcoexist.btc_context;
  #line 289 
  if (btcoexist == (struct btc_coexist *)0) 
                                            #line 290 
                                            return;
  #line 293 
  exhalbtc_periodical(btcoexist);
  #line 294 
  return;
}

#line 296  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.c"
void rtl_btc_halt_notify(struct rtl_priv *rtlpriv)
{
  #line 298 
  struct btc_coexist *btcoexist = (struct btc_coexist *)rtlpriv->btcoexist.btc_context;
  #line 300 
  if (btcoexist == (struct btc_coexist *)0) 
                                            #line 301 
                                            return;
  #line 303 
  exhalbtc_halt_notify(btcoexist);
  #line 304 
  return;
}

#line 306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.c"
void rtl_btc_btinfo_notify(struct rtl_priv *rtlpriv, u8 *tmp_buf, u8 length)
{
  #line 308 
  struct btc_coexist *btcoexist = (struct btc_coexist *)rtlpriv->btcoexist.btc_context;
  #line 310 
  if (btcoexist == (struct btc_coexist *)0) 
                                            #line 311 
                                            return;
  #line 313 
  exhalbtc_bt_info_notify(btcoexist,tmp_buf,(unsigned char)((int)length));
  #line 314 
  return;
}

#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.c"
void rtl_btc_btmpinfo_notify(struct rtl_priv *rtlpriv, u8 *tmp_buf, u8 length)
{
  #line 319 
  u8 extid;
  #line 319 
  u8 seq;
  #line 320 
  u16 bt_real_fw_ver;
  #line 321 
  u8 bt_fw_ver;
  #line 322 
  u8 *data;
  #line 318 
  struct btc_coexist *btcoexist = (struct btc_coexist *)rtlpriv->btcoexist.btc_context;
  #line 324 
  if (btcoexist == (struct btc_coexist *)0) 
                                            #line 325 
                                            return;
  #line 327 
  if ((unsigned int)length <= 3U || tmp_buf == (u8 *)0U) 
                                                         #line 328 
                                                         return;
  #line 330 
  extid = *tmp_buf;
  #line 332 
  if ((unsigned int)extid != 1U) 
                                 #line 333 
                                 return;
  #line 335 
  seq = (unsigned char)((int)*(tmp_buf + 2U) >> 4);
  #line 336 
  data = tmp_buf + 3U;
  #line 339 
  switch ((int)seq) {
    #line 340 
    case 14: 
             #line 340 
    ;
    #line 341 
    bt_real_fw_ver = (unsigned short)((int)*(tmp_buf + 3U) | ((int)*(tmp_buf + 4U) << 8));
    #line 342 
    bt_fw_ver = *(tmp_buf + 5U);
    #line 344 
    btcoexist->bt_info.bt_real_fw_ver = bt_real_fw_ver;
    #line 345 
    btcoexist->bt_info.bt_fw_ver = bt_fw_ver;
    #line 346 
    break;
    #line 347 
    case 5: 
            #line 347 
    ;
    #line 348 
    btcoexist->bt_info.afh_map_l = *((__le32 *)data);
    #line 349 
    break;
    #line 350 
    case 6: 
            #line 350 
    ;
    #line 351 
    btcoexist->bt_info.afh_map_m = *((__le32 *)data);
    #line 352 
    break;
    #line 353 
    case 9: 
            #line 353 
    ;
    #line 354 
    btcoexist->bt_info.afh_map_h = *((__le16 *)data);
    #line 355 
    break;
    #line 356 
    case 7: 
            #line 356 
    ;
    #line 357 
    btcoexist->bt_info.bt_supported_feature = (unsigned int)((int)*(tmp_buf + 3U) | ((int)*(tmp_buf + 4U) << 8));
    #line 359 
    break;
    #line 360 
    case 8: 
            #line 360 
    ;
    #line 361 
    btcoexist->bt_info.bt_supported_version = (unsigned int)((int)*(tmp_buf + 3U) | ((int)*(tmp_buf + 4U) << 8));
    #line 363 
    break;
    #line 364 
    case 2: 
            #line 364 
    ;
    #line 365 
    btcoexist->bt_info.bt_ant_det_val = *(tmp_buf + 3U);
    #line 366 
    break;
    #line 367 
    case 3: 
            #line 367 
    ;
    #line 368 
    btcoexist->bt_info.bt_ble_scan_para = (unsigned int)((((int)*(tmp_buf + 3U) | ((int)*(tmp_buf + 4U) << 8)) | ((int)*(tmp_buf + 5U) << 16)) | ((int)*(tmp_buf + 6U) << 24));
    #line 372 
    break;
    #line 373 
    case 4: 
            #line 373 
    ;
    #line 374 
    btcoexist->bt_info.bt_ble_scan_type = *(tmp_buf + 3U);
    #line 375 
    break;
    #line 376 
    case 10: 
             #line 376 
    ;
    #line 377 
    btcoexist->bt_info.bt_device_info = *((__le32 *)data);
    #line 379 
    break;
    #line 380 
    case 49: 
             #line 380 
    ;
    #line 381 
    btcoexist->bt_info.bt_forb_slot_val = *((__le32 *)data);
    #line 383 
    break;
  }
  #line 386 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"btmpinfo complete req_num=%d\n",(int)seq);
  #line 389 
  complete(& btcoexist->bt_mp_comp);
  #line 390 
  return;
}

#line 392  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.c"
bool rtl_btc_is_limited_dig(struct rtl_priv *rtlpriv)
{
  #line 394 
  struct btc_coexist *btcoexist = (struct btc_coexist *)rtlpriv->btcoexist.btc_context;
  #line 396 
  if (btcoexist == (struct btc_coexist *)0) 
                                            #line 397 
                                            return (_Bool)0;
  #line 399 
  return btcoexist->bt_info.limited_dig;
}

#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.c"
bool rtl_btc_is_disable_edca_turbo(struct rtl_priv *rtlpriv)
{
  #line 405 
  u32 cur_edca_val;
  #line 407 
  u32 edca_hs;
  #line 404 
  bool bt_change_edca = (_Bool)0;
  #line 406 
  u32 edca_bt_hs_uplink = 6202411U;
  #line 406 
  u32 edca_bt_hs_downlink = 6202411U;
  #line 408 
  u32 edca_addr = 1284U;
  #line 410 
  cur_edca_val = rtl_read_dword(rtlpriv,edca_addr);
  #line 411 
  if ((int)halbtc_is_wifi_uplink(rtlpriv) != 0) {
    #line 412 
    if (cur_edca_val != edca_bt_hs_uplink) {
      #line 413 
      edca_hs = edca_bt_hs_uplink;
      #line 414 
      bt_change_edca = (_Bool)1;
    }
  }
  else 
    #line 417 
    if (cur_edca_val != edca_bt_hs_downlink) {
      #line 418 
      edca_hs = edca_bt_hs_downlink;
      #line 419 
      bt_change_edca = (_Bool)1;
    }
  #line 423 
  if ((int)bt_change_edca != 0) 
                                #line 424 
                                rtl_write_dword(rtlpriv,edca_addr,edca_hs);
  #line 426 
  return (_Bool)1;
}

#line 429  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.c"
bool rtl_btc_is_bt_disabled(struct rtl_priv *rtlpriv)
{
  #line 431 
  struct btc_coexist *btcoexist = (struct btc_coexist *)rtlpriv->btcoexist.btc_context;
  #line 433 
  if (btcoexist == (struct btc_coexist *)0) 
                                            #line 434 
                                            return (_Bool)1;
  #line 437 
  if ((int)btcoexist->bt_info.bt_disabled != 0) 
                                                #line 438 
                                                return (_Bool)1; else 
                                                                   #line 440 
                                                                   return (_Bool)0;
}

#line 443  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.c"
void rtl_btc_special_packet_notify(struct rtl_priv *rtlpriv, u8 pkt_type)
{
  #line 445 
  struct btc_coexist *btcoexist = (struct btc_coexist *)rtlpriv->btcoexist.btc_context;
  #line 447 
  if (btcoexist == (struct btc_coexist *)0) 
                                            #line 448 
                                            return;
  #line 450 
  exhalbtc_special_packet_notify(btcoexist,(unsigned char)((int)pkt_type));
  #line 451 
  return;
}

#line 453  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.c"
void rtl_btc_switch_band_notify(struct rtl_priv *rtlpriv, u8 band_type, bool scanning)
{
  #line 456 
  struct btc_coexist *btcoexist = (struct btc_coexist *)rtlpriv->btcoexist.btc_context;
  #line 457 
  u8 type = (unsigned char)0U;
  #line 459 
  if (btcoexist == (struct btc_coexist *)0) 
                                            #line 460 
                                            return;
  #line 462 
  switch ((int)band_type) {
    #line 463 
    case 0: 
            #line 463 
    ;
    #line 464 
    if ((int)scanning != 0) 
                            #line 465 
                            type = (unsigned char)1U; else 
                                                           #line 467 
                                                           type = (unsigned char)3U;
    #line 468 
    break;
    #line 470 
    case 1: 
            #line 470 
    ;
    #line 471 
    type = (unsigned char)2U;
    #line 472 
    break;
  }
  #line 475 
  if ((unsigned int)type != 0U) 
                                #line 476 
                                exhalbtc_switch_band_notify(btcoexist,(unsigned char)((int)type));
  #line 477 
  return;
}

#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.c"
void rtl_btc_switch_band_notify_wifionly(struct rtl_priv *rtlpriv, u8 band_type, bool scanning)
{
  #line 482 
  struct wifi_only_cfg *wifionly_cfg = (struct wifi_only_cfg *)rtlpriv->btcoexist.wifi_only_context;
  #line 483 
  u8 is_5g = (unsigned char)((unsigned int)band_type == 1U);
  #line 485 
  if (wifionly_cfg == (struct wifi_only_cfg *)0) 
                                                 #line 486 
                                                 return;
  #line 488 
  exhalbtc_switch_band_notify_wifi_only(wifionly_cfg,(unsigned char)((int)is_5g));
  #line 489 
  return;
}

#line 491  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.c"
struct rtl_btc_ops *rtl_btc_get_ops_pointer(void)
{
  #line 493 
  return & rtl_btc_operation;
}

#line 498  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.c"
enum rt_media_status mgnt_link_status_query(struct ieee80211_hw *hw)
{
  #line 500 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 501 
  struct rtl_mac *mac = & ((struct rtl_priv *)hw->priv)->mac80211;
  #line 502 
  enum rt_media_status m_status = RT_MEDIA_DISCONNECT;
  #line 504 
  u8 bibss = (unsigned char)(mac->opmode == (unsigned int)NL80211_IFTYPE_ADHOC);
  #line 506 
  if ((unsigned int)bibss != 0U || rtlpriv->mac80211.link_state > (unsigned int)MAC80211_LINKING) 
    #line 507 
    m_status = RT_MEDIA_CONNECT;
  #line 509 
  return m_status;
}

#line 512  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.c"
u8 rtl_get_hwpg_bt_exist(struct rtl_priv *rtlpriv)
{
  #line 514 
  return rtlpriv->btcoexist.btc_info.btcoexist;
}

#line 523  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.c"
static int rtl_btcoexist_module_init(void)
{
  #line 525 
  return 0;
}

#line 528  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.c"
static void rtl_btcoexist_module_exit(void)
{
  #line 530 
  return;
}

#line 94  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/realtek/rtlwifi/btcoexist/btcoexist.ko/concurrency safety/0/concurrency safety/weaver/rtl_btc.i.aux"
void emg_rtl_btcoexist_module_exit(void)
{
  #line 95 
  rtl_btcoexist_module_exit();
  #line 96 
  return;
}

#line 98  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/realtek/rtlwifi/btcoexist/btcoexist.ko/concurrency safety/0/concurrency safety/weaver/rtl_btc.i.aux"
int emg_rtl_btcoexist_module_init(void)
{
  #line 99 
  return rtl_btcoexist_module_init();
}

#line 417  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/realtek/rtlwifi/btcoexist/btcoexist.ko/concurrency safety/0/concurrency safety/weaver/rtl_btc.i.aux"
static void *kzalloc(size_t size, gfp_t flags)
{
  #line 420 
  return ldv_kzalloc(size,flags);
}

#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/delay.h"
#line 11 
void __const_udelay(unsigned long);
#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
#line 118 
void seq_printf(struct seq_file *, char * , ...);
#line 182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.h"
#line 2358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.c"
void ex_btc8723b1ant_power_on_setting(struct btc_coexist *btcoexist);
#line 183  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.h"
#line 2428  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.c"
void ex_btc8723b1ant_init_hwconfig(struct btc_coexist *btcoexist, bool wifi_only);
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.h"
#line 2435  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.c"
void ex_btc8723b1ant_init_coex_dm(struct btc_coexist *btcoexist);
#line 186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.h"
#line 2713  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.c"
void ex_btc8723b1ant_ips_notify(struct btc_coexist *btcoexist, u8 type);
#line 187  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.h"
#line 2742  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.c"
void ex_btc8723b1ant_lps_notify(struct btc_coexist *btcoexist, u8 type);
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.h"
#line 2760  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.c"
void ex_btc8723b1ant_scan_notify(struct btc_coexist *btcoexist, u8 type);
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.h"
#line 2846  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.c"
void ex_btc8723b1ant_connect_notify(struct btc_coexist *btcoexist, u8 type);
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.h"
#line 2916  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.c"
void ex_btc8723b1ant_media_status_notify(struct btc_coexist *btcoexist, u8 type);
#line 192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.h"
#line 2997  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.c"
void ex_btc8723b1ant_special_packet_notify(struct btc_coexist *btcoexist, u8 type);
#line 194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.h"
#line 3074  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.c"
void ex_btc8723b1ant_bt_info_notify(struct btc_coexist *btcoexist, u8 *tmp_buf, u8 length);
#line 196  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.h"
#line 3319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.c"
void ex_btc8723b1ant_rf_status_notify(struct btc_coexist *btcoexist, u8 type);
#line 198  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.h"
#line 3356  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.c"
void ex_btc8723b1ant_halt_notify(struct btc_coexist *btcoexist);
#line 199  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.h"
#line 3378  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.c"
void ex_btc8723b1ant_pnp_notify(struct btc_coexist *btcoexist, u8 pnp_state);
#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.h"
#line 3413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.c"
void ex_btc8723b1ant_coex_dm_reset(struct btc_coexist *btcoexist);
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.h"
#line 3424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.c"
void ex_btc8723b1ant_periodical(struct btc_coexist *btcoexist);
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.h"
#line 2449  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.c"
void ex_btc8723b1ant_display_coex_info(struct btc_coexist *btcoexist, struct seq_file *m);
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.c"
static struct coex_dm_8723b_1ant glcoex_dm_8723b_1ant;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.c"
static struct coex_dm_8723b_1ant *coex_dm = & glcoex_dm_8723b_1ant;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.c"
static struct coex_sta_8723b_1ant glcoex_sta_8723b_1ant;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.c"
static struct coex_sta_8723b_1ant *coex_sta = & glcoex_sta_8723b_1ant;
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.c"
static char *glbt_info_src_8723b_1ant[3U] = {(char *)"BT Info[wifi fw]", (char *)"BT Info[bt rsp]", (char *)"BT Info[bt auto report]"};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.c"
static u32 glcoex_ver_date_8723b_1ant = 20130918U;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.c"
static u32 glcoex_ver_8723b_1ant = 71U;
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.c"
static void halbtc8723b1ant_updatera_mask(struct btc_coexist *btcoexist, bool force_exec, u32 dis_rate_mask)
{
  #line 45 
  coex_dm->curra_mask = dis_rate_mask;
  #line 47 
  if ((int)force_exec != 0 || coex_dm->prera_mask != coex_dm->curra_mask) 
    #line 48 
    (*(btcoexist->btc_set))((void *)btcoexist,(unsigned char)30,(void *)(& coex_dm->curra_mask));
  #line 51 
  coex_dm->prera_mask = coex_dm->curra_mask;
  #line 52 
  return;
}

#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.c"
static void btc8723b1ant_auto_rate_fb_retry(struct btc_coexist *btcoexist, bool force_exec, u8 type)
{
  #line 57 
  bool wifi_under_bmode = (_Bool)0;
  #line 59 
  coex_dm->cur_arfr_type = type;
  #line 61 
  if ((int)force_exec != 0 || (int)coex_dm->pre_arfr_type != (int)coex_dm->cur_arfr_type) 
    #line 62 
    switch ((int)coex_dm->cur_arfr_type) {
      #line 63 
      case 0: 
              #line 63 
      ;
      #line 64 
      (*(btcoexist->btc_write_4byte))((void *)btcoexist,1072U,coex_dm->backup_arfr_cnt1);
      #line 66 
      (*(btcoexist->btc_write_4byte))((void *)btcoexist,1076U,coex_dm->backup_arfr_cnt2);
      #line 68 
      break;
      #line 69 
      case 1: 
              #line 69 
      ;
      #line 70 
      (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)16,(void *)(& wifi_under_bmode));
      #line 73 
      if ((int)wifi_under_bmode != 0) {
        #line 74 
        (*(btcoexist->btc_write_4byte))((void *)btcoexist,1072U,0U);
        #line 76 
        (*(btcoexist->btc_write_4byte))((void *)btcoexist,1076U,16843009U);
      }
      else {
        #line 79 
        (*(btcoexist->btc_write_4byte))((void *)btcoexist,1072U,0U);
        #line 81 
        (*(btcoexist->btc_write_4byte))((void *)btcoexist,1076U,67305985U);
      }
      #line 84 
      break;
      #line 85 
      default: 
               #line 85 
      ;
      #line 86 
      break;
    }
  #line 90 
  coex_dm->pre_arfr_type = coex_dm->cur_arfr_type;
  #line 91 
  return;
}

#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.c"
static void halbtc8723b1ant_retry_limit(struct btc_coexist *btcoexist, bool force_exec, u8 type)
{
  #line 96 
  coex_dm->cur_retry_limit_type = type;
  #line 98 
  if ((int)force_exec != 0 || (int)coex_dm->pre_retry_limit_type != (int)coex_dm->cur_retry_limit_type) 
    #line 100 
    switch ((int)coex_dm->cur_retry_limit_type) {
      #line 101 
      case 0: 
              #line 101 
      ;
      #line 102 
      (*(btcoexist->btc_write_2byte))((void *)btcoexist,1066U,(unsigned short)((int)coex_dm->backup_retry_limit));
      #line 104 
      break;
      #line 105 
      case 1: 
              #line 105 
      ;
      #line 106 
      (*(btcoexist->btc_write_2byte))((void *)btcoexist,1066U,(unsigned short)2056);
      #line 107 
      break;
      #line 108 
      default: 
               #line 108 
      ;
      #line 109 
      break;
    }
  #line 113 
  coex_dm->pre_retry_limit_type = coex_dm->cur_retry_limit_type;
  #line 114 
  return;
}

#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.c"
static void halbtc8723b1ant_ampdu_maxtime(struct btc_coexist *btcoexist, bool force_exec, u8 type)
{
  #line 119 
  coex_dm->cur_ampdu_time_type = type;
  #line 121 
  if ((int)force_exec != 0 || (int)coex_dm->pre_ampdu_time_type != (int)coex_dm->cur_ampdu_time_type) 
    #line 123 
    switch ((int)coex_dm->cur_ampdu_time_type) {
      #line 124 
      case 0: 
              #line 124 
      ;
      #line 125 
      (*(btcoexist->btc_write_1byte))((void *)btcoexist,1110U,(unsigned int)coex_dm->backup_ampdu_max_time);
      #line 127 
      break;
      #line 128 
      case 1: 
              #line 128 
      ;
      #line 129 
      (*(btcoexist->btc_write_1byte))((void *)btcoexist,1110U,56U);
      #line 130 
      break;
      #line 131 
      default: 
               #line 131 
      ;
      #line 132 
      break;
    }
  #line 136 
  coex_dm->pre_ampdu_time_type = coex_dm->cur_ampdu_time_type;
  #line 137 
  return;
}

#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.c"
static void halbtc8723b1ant_limited_tx(struct btc_coexist *btcoexist, bool force_exec, u8 ra_masktype, u8 arfr_type, u8 retry_limit_type, u8 ampdu_time_type)
{
  #line 144 
  switch ((int)ra_masktype) {
    #line 145 
    case 0: 
            #line 145 
    ;
    #line 146 
    halbtc8723b1ant_updatera_mask(btcoexist,(_Bool)((bool)((int)force_exec) != 0),0U);
    #line 147 
    break;
    #line 148 
    case 1: 
            #line 148 
    ;
    #line 149 
    halbtc8723b1ant_updatera_mask(btcoexist,(_Bool)((bool)((int)force_exec) != 0),3U);
    #line 151 
    break;
    #line 153 
    case 2: 
            #line 153 
    ;
    #line 154 
    halbtc8723b1ant_updatera_mask(btcoexist,(_Bool)((bool)((int)force_exec) != 0),127479U);
    #line 156 
    break;
    #line 157 
    default: 
             #line 157 
    ;
    #line 158 
    break;
  }
  #line 161 
  btc8723b1ant_auto_rate_fb_retry(btcoexist,(_Bool)((bool)((int)force_exec) != 0),(unsigned char)((int)arfr_type));
  #line 162 
  halbtc8723b1ant_retry_limit(btcoexist,(_Bool)((bool)((int)force_exec) != 0),(unsigned char)((int)retry_limit_type));
  #line 163 
  halbtc8723b1ant_ampdu_maxtime(btcoexist,(_Bool)((bool)((int)force_exec) != 0),(unsigned char)((int)ampdu_time_type));
  #line 164 
  return;
}

#line 166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.c"
static void halbtc8723b1ant_limited_rx(struct btc_coexist *btcoexist, bool force_exec, bool rej_ap_agg_pkt, bool bt_ctrl_agg_buf_size, u8 agg_buf_size)
{
  #line 171 
  bool reject_rx_agg = rej_ap_agg_pkt;
  #line 172 
  bool bt_ctrl_rx_agg_size = bt_ctrl_agg_buf_size;
  #line 173 
  u8 rxaggsize = agg_buf_size;
  #line 178 
  (*(btcoexist->btc_set))((void *)btcoexist,(unsigned char)4,(void *)(& reject_rx_agg));
  #line 181 
  (*(btcoexist->btc_set))((void *)btcoexist,(unsigned char)5,(void *)(& bt_ctrl_rx_agg_size));
  #line 186 
  (*(btcoexist->btc_set))((void *)btcoexist,(unsigned char)11,(void *)(& rxaggsize));
  #line 188 
  (*(btcoexist->btc_set))((void *)btcoexist,(unsigned char)13,(void *)0);
  #line 189 
  return;
}

#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.c"
static void halbtc8723b1ant_query_bt_info(struct btc_coexist *btcoexist)
{
  #line 193 
  u8 h2c_parameter[1U] = {(unsigned char)0U};
  #line 195 
  coex_sta->c2h_bt_info_req_sent = (_Bool)1;
  #line 198 
  h2c_parameter[0] = (unsigned char)((unsigned int)h2c_parameter[0] | 1U);
  #line 200 
  (*(btcoexist->btc_fill_h2c))((void *)btcoexist,(unsigned char)97,1U,(u8 *)(& h2c_parameter));
  #line 201 
  return;
}

#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.c"
static void halbtc8723b1ant_monitor_bt_ctr(struct btc_coexist *btcoexist)
{
  #line 205 
  u32 reg_hp_txrx;
  #line 205 
  u32 reg_lp_txrx;
  #line 205 
  u32 u32tmp;
  #line 208 
  u32 num_of_bt_counter_chk;
  #line 206 
  u32 reg_hp_tx = 0U;
  #line 206 
  u32 reg_hp_rx = 0U;
  #line 207 
  u32 reg_lp_tx = 0U;
  #line 207 
  u32 reg_lp_rx = 0U;
  #line 210 
  reg_hp_txrx = 1904U;
  #line 211 
  reg_lp_txrx = 1908U;
  #line 213 
  u32tmp = (*(btcoexist->btc_read_4byte))((void *)btcoexist,reg_hp_txrx);
  #line 214 
  reg_hp_tx = u32tmp & 65535U;
  #line 215 
  reg_hp_rx = u32tmp >> 16;
  #line 217 
  u32tmp = (*(btcoexist->btc_read_4byte))((void *)btcoexist,reg_lp_txrx);
  #line 218 
  reg_lp_tx = u32tmp & 65535U;
  #line 219 
  reg_lp_rx = u32tmp >> 16;
  #line 221 
  coex_sta->high_priority_tx = reg_hp_tx;
  #line 222 
  coex_sta->high_priority_rx = reg_hp_rx;
  #line 223 
  coex_sta->low_priority_tx = reg_lp_tx;
  #line 224 
  coex_sta->low_priority_rx = reg_lp_rx;
  #line 226 
  if (coex_sta->low_priority_tx > 1050U && ! coex_sta->c2h_bt_inquiry_page) 
    #line 228 
    (coex_sta->pop_event_cnt) ++;
  #line 231 
  (*(btcoexist->btc_write_1byte))((void *)btcoexist,1902U,12U);
  #line 244 
  if ((reg_hp_tx == 0U && reg_hp_rx == 0U) && (reg_lp_tx == 0U && reg_lp_rx == 0U)) {
    #line 246 
    num_of_bt_counter_chk ++;
    #line 247 
    if (num_of_bt_counter_chk == 3U) 
                                     #line 248 
                                     halbtc8723b1ant_query_bt_info(btcoexist);
  }
  else 
       #line 250 
       num_of_bt_counter_chk = 0U;
  #line 251 
  return;
}

#line 254  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.c"
static void halbtc8723b1ant_monitor_wifi_ctr(struct btc_coexist *btcoexist)
{
  #line 258 
  u8 cck_lock_counter;
  #line 259 
  u32 total_cnt;
  #line 256 
  s32 wifi_rssi = 0;
  #line 257 
  bool wifi_busy = (_Bool)0;
  #line 257 
  bool wifi_under_b_mode = (_Bool)0;
  #line 261 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)4,(void *)(& wifi_busy));
  #line 262 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)22,(void *)(& wifi_rssi));
  #line 263 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)16,(void *)(& wifi_under_b_mode));
  #line 266 
  if ((int)coex_sta->under_ips != 0) {
    #line 267 
    coex_sta->crc_ok_cck = 0U;
    #line 268 
    coex_sta->crc_ok_11g = 0U;
    #line 269 
    coex_sta->crc_ok_11n = 0U;
    #line 270 
    coex_sta->crc_ok_11n_agg = 0U;
    #line 272 
    coex_sta->crc_err_cck = 0U;
    #line 273 
    coex_sta->crc_err_11g = 0U;
    #line 274 
    coex_sta->crc_err_11n = 0U;
    #line 275 
    coex_sta->crc_err_11n_agg = 0U;
  }
  else {
    #line 277 
    coex_sta->crc_ok_cck = (*(btcoexist->btc_read_4byte))((void *)btcoexist,3976U);
    #line 279 
    coex_sta->crc_ok_11g = (unsigned int)(*(btcoexist->btc_read_2byte))((void *)btcoexist,3988U);
    #line 281 
    coex_sta->crc_ok_11n = (unsigned int)(*(btcoexist->btc_read_2byte))((void *)btcoexist,3984U);
    #line 283 
    coex_sta->crc_ok_11n_agg = (unsigned int)(*(btcoexist->btc_read_2byte))((void *)btcoexist,4024U);
    #line 286 
    coex_sta->crc_err_cck = (*(btcoexist->btc_read_4byte))((void *)btcoexist,3972U);
    #line 288 
    coex_sta->crc_err_11g = (unsigned int)(*(btcoexist->btc_read_2byte))((void *)btcoexist,3990U);
    #line 290 
    coex_sta->crc_err_11n = (unsigned int)(*(btcoexist->btc_read_2byte))((void *)btcoexist,3986U);
    #line 292 
    coex_sta->crc_err_11n_agg = (unsigned int)(*(btcoexist->btc_read_2byte))((void *)btcoexist,4026U);
  }
  #line 297 
  (*(btcoexist->btc_write_1byte_bitmask))((void *)btcoexist,3862U,1U,(unsigned char)1);
  #line 298 
  (*(btcoexist->btc_write_1byte_bitmask))((void *)btcoexist,3862U,1U,(unsigned char)0);
  #line 300 
  if (((int)wifi_busy != 0 && wifi_rssi > 29) && ! wifi_under_b_mode) {
    #line 301 
    total_cnt = ((coex_sta->crc_ok_cck + coex_sta->crc_ok_11g) + coex_sta->crc_ok_11n) + coex_sta->crc_ok_11n_agg;
    #line 304 
    if (((unsigned int)coex_dm->bt_status == 3U || (unsigned int)coex_dm->bt_status == 5U) || (unsigned int)coex_dm->bt_status == 4U) {
      #line 308 
      if (coex_sta->crc_ok_cck > total_cnt - coex_sta->crc_ok_cck) {
        #line 310 
        if ((unsigned int)cck_lock_counter <= 2U) 
                                                  #line 311 
                                                  cck_lock_counter = (u8)((int)cck_lock_counter + 1);
      }
      else 
        #line 313 
        if ((unsigned int)cck_lock_counter != 0U) 
                                                  #line 314 
                                                  cck_lock_counter = (u8)((int)cck_lock_counter - 1);
    }
    else 
      #line 318 
      if ((unsigned int)cck_lock_counter != 0U) 
                                                #line 319 
                                                cck_lock_counter = (u8)((int)cck_lock_counter - 1);
  }
  else 
    #line 322 
    if ((unsigned int)cck_lock_counter != 0U) 
                                              #line 323 
                                              cck_lock_counter = (u8)((int)cck_lock_counter - 1);
  #line 326 
  if (! coex_sta->pre_ccklock) 
    #line 327 
    if ((unsigned int)cck_lock_counter > 2U) 
                                             #line 328 
                                             coex_sta->cck_lock = (_Bool)1; else 
                                                                    #line 330 
                                                                    coex_sta->cck_lock = (_Bool)0;
  else 
    #line 332 
    if ((unsigned int)cck_lock_counter == 0U) 
                                              #line 333 
                                              coex_sta->cck_lock = (_Bool)0; else 
                                                                    #line 335 
                                                                    coex_sta->cck_lock = (_Bool)1;
  #line 338 
  if ((int)coex_sta->cck_lock != 0) 
                                    #line 339 
                                    coex_sta->cck_ever_lock = (_Bool)1;
  #line 341 
  coex_sta->pre_ccklock = coex_sta->cck_lock;
  #line 342 
  return;
}

#line 344  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.c"
static bool btc8723b1ant_is_wifi_status_changed(struct btc_coexist *btcoexist)
{
  #line 346 
  bool pre_wifi_busy;
  #line 347 
  bool pre_under_4way;
  #line 347 
  bool pre_bt_hs_on;
  #line 348 
  bool wifi_busy = (_Bool)0;
  #line 348 
  bool under_4way = (_Bool)0;
  #line 348 
  bool bt_hs_on = (_Bool)0;
  #line 349 
  bool wifi_connected = (_Bool)0;
  #line 351 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)2,(void *)(& wifi_connected));
  #line 353 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)4,(void *)(& wifi_busy));
  #line 354 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)0,(void *)(& bt_hs_on));
  #line 355 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)12,(void *)(& under_4way));
  #line 358 
  if ((int)wifi_connected != 0) {
    #line 359 
    if ((int)wifi_busy != (int)pre_wifi_busy) {
      #line 360 
      pre_wifi_busy = wifi_busy;
      #line 361 
      return (_Bool)1;
    }
    #line 363 
    if ((int)under_4way != (int)pre_under_4way) {
      #line 364 
      pre_under_4way = under_4way;
      #line 365 
      return (_Bool)1;
    }
    #line 367 
    if ((int)bt_hs_on != (int)pre_bt_hs_on) {
      #line 368 
      pre_bt_hs_on = bt_hs_on;
      #line 369 
      return (_Bool)1;
    }
  }
  #line 373 
  return (_Bool)0;
}

#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.c"
static void halbtc8723b1ant_update_bt_link_info(struct btc_coexist *btcoexist)
{
  #line 378 
  struct btc_bt_link_info *bt_link_info = & btcoexist->bt_link_info;
  #line 379 
  bool bt_hs_on = (_Bool)0;
  #line 381 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)0,(void *)(& bt_hs_on));
  #line 383 
  bt_link_info->bt_link_exist = coex_sta->bt_link_exist;
  #line 384 
  bt_link_info->sco_exist = coex_sta->sco_exist;
  #line 385 
  bt_link_info->a2dp_exist = coex_sta->a2dp_exist;
  #line 386 
  bt_link_info->pan_exist = coex_sta->pan_exist;
  #line 387 
  bt_link_info->hid_exist = coex_sta->hid_exist;
  #line 388 
  bt_link_info->bt_hi_pri_link_exist = coex_sta->bt_hi_pri_link_exist;
  #line 391 
  if ((int)bt_hs_on != 0) {
    #line 392 
    bt_link_info->pan_exist = (_Bool)1;
    #line 393 
    bt_link_info->bt_link_exist = (_Bool)1;
  }
  #line 397 
  if ((((int)bt_link_info->sco_exist != 0 && ! bt_link_info->a2dp_exist) && ! bt_link_info->pan_exist) && ! bt_link_info->hid_exist) 
    #line 399 
    bt_link_info->sco_only = (_Bool)1; else 
                                            #line 401 
                                            bt_link_info->sco_only = (_Bool)0;
  #line 404 
  if (((! bt_link_info->sco_exist && (int)bt_link_info->a2dp_exist != 0) && ! bt_link_info->pan_exist) && ! bt_link_info->hid_exist) 
    #line 406 
    bt_link_info->a2dp_only = (_Bool)1; else 
                                             #line 408 
                                             bt_link_info->a2dp_only = (_Bool)0;
  #line 411 
  if (((! bt_link_info->sco_exist && ! bt_link_info->a2dp_exist) && (int)bt_link_info->pan_exist != 0) && ! bt_link_info->hid_exist) 
    #line 413 
    bt_link_info->pan_only = (_Bool)1; else 
                                            #line 415 
                                            bt_link_info->pan_only = (_Bool)0;
  #line 418 
  if (((! bt_link_info->sco_exist && ! bt_link_info->a2dp_exist) && ! bt_link_info->pan_exist) && (int)bt_link_info->hid_exist != 0) 
    #line 420 
    bt_link_info->hid_only = (_Bool)1; else 
                                            #line 422 
                                            bt_link_info->hid_only = (_Bool)0;
  #line 423 
  return;
}

#line 425  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.c"
static void halbtc8723b1ant_set_bt_auto_report(struct btc_coexist *btcoexist, bool enable_auto_report)
{
  #line 428 
  u8 h2c_parameter[1U] = {(unsigned char)0U};
  #line 430 
  h2c_parameter[0] = (unsigned char)0U;
  #line 432 
  if ((int)enable_auto_report != 0) 
                                    #line 433 
                                    h2c_parameter[0] = (unsigned char)((unsigned int)h2c_parameter[0] | 1U);
  #line 435 
  (*(btcoexist->btc_fill_h2c))((void *)btcoexist,(unsigned char)104,1U,(u8 *)(& h2c_parameter));
  #line 436 
  return;
}

#line 438  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.c"
static void halbtc8723b1ant_bt_auto_report(struct btc_coexist *btcoexist, bool force_exec, bool enable_auto_report)
{
  #line 442 
  coex_dm->cur_bt_auto_report = enable_auto_report;
  #line 444 
  if (! force_exec) 
    #line 445 
    if ((int)coex_dm->pre_bt_auto_report == (int)coex_dm->cur_bt_auto_report) 
      #line 446 
      return;
  #line 448 
  halbtc8723b1ant_set_bt_auto_report(btcoexist,(_Bool)((bool)((int)coex_dm->cur_bt_auto_report) != 0));
  #line 451 
  coex_dm->pre_bt_auto_report = coex_dm->cur_bt_auto_report;
  #line 452 
  return;
}

#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.c"
static void btc8723b1ant_set_sw_pen_tx_rate_adapt(struct btc_coexist *btcoexist, bool low_penalty_ra)
{
  #line 471 
  char *tmp;
  #line 457 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 458 
  u8 h2c_parameter[6U] = {(unsigned char)0U};
  #line 460 
  h2c_parameter[0] = (unsigned char)6U;
  #line 462 
  if ((int)low_penalty_ra != 0) {
    #line 463 
    h2c_parameter[1] = (unsigned char)((unsigned int)h2c_parameter[1] | 1U);
    #line 465 
    h2c_parameter[2] = (unsigned char)0U;
    #line 466 
    h2c_parameter[3] = (unsigned char)247U;
    #line 467 
    h2c_parameter[4] = (unsigned char)248U;
    #line 468 
    h2c_parameter[5] = (unsigned char)249U;
  }
  #line 471 
  if ((int)low_penalty_ra != 0) 
                                #line 471 
                                tmp = (char *)"ON!!"; else 
                                                           #line 471 
                                                           tmp = (char *)"OFF!!";
  #line 471 
  ;
  #line 471 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], set WiFi Low-Penalty Retry: %s",tmp);
  #line 475 
  (*(btcoexist->btc_fill_h2c))((void *)btcoexist,(unsigned char)105,6U,(u8 *)(& h2c_parameter));
  #line 476 
  return;
}

#line 478  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.c"
static void halbtc8723b1ant_low_penalty_ra(struct btc_coexist *btcoexist, bool force_exec, bool low_penalty_ra)
{
  #line 481 
  coex_dm->cur_low_penalty_ra = low_penalty_ra;
  #line 483 
  if (! force_exec) 
    #line 484 
    if ((int)coex_dm->pre_low_penalty_ra == (int)coex_dm->cur_low_penalty_ra) 
      #line 485 
      return;
  #line 487 
  btc8723b1ant_set_sw_pen_tx_rate_adapt(btcoexist,(_Bool)((bool)((int)coex_dm->cur_low_penalty_ra) != 0));
  #line 490 
  coex_dm->pre_low_penalty_ra = coex_dm->cur_low_penalty_ra;
  #line 491 
  return;
}

#line 493  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.c"
static void halbtc8723b1ant_set_coex_table(struct btc_coexist *btcoexist, u32 val0x6c0, u32 val0x6c4, u32 val0x6c8, u8 val0x6cc)
{
  #line 497 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 499 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], set coex table, set 0x6c0 = 0x%x\n",val0x6c0);
  #line 501 
  (*(btcoexist->btc_write_4byte))((void *)btcoexist,1728U,val0x6c0);
  #line 503 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], set coex table, set 0x6c4 = 0x%x\n",val0x6c4);
  #line 505 
  (*(btcoexist->btc_write_4byte))((void *)btcoexist,1732U,val0x6c4);
  #line 507 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], set coex table, set 0x6c8 = 0x%x\n",val0x6c8);
  #line 509 
  (*(btcoexist->btc_write_4byte))((void *)btcoexist,1736U,val0x6c8);
  #line 511 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], set coex table, set 0x6cc = 0x%x\n",(int)val0x6cc);
  #line 513 
  (*(btcoexist->btc_write_1byte))((void *)btcoexist,1740U,(unsigned int)val0x6cc);
  #line 514 
  return;
}

#line 516  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.c"
static void halbtc8723b1ant_coex_table(struct btc_coexist *btcoexist, bool force_exec, u32 val0x6c0, u32 val0x6c4, u32 val0x6c8, u8 val0x6cc)
{
  #line 523 
  char *tmp;
  #line 521 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 523 
  ;
  #line 523 
  ;
  #line 523 
  ;
  #line 523 
  if ((int)force_exec != 0) 
                            #line 523 
                            tmp = (char *)"force to"; else 
                                                           #line 523 
                                                           tmp = (char *)"";
  #line 523 
  ;
  #line 523 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], %s write Coex Table 0x6c0 = 0x%x, 0x6c4 = 0x%x, 0x6cc = 0x%x\n",tmp,val0x6c0,val0x6c4,(int)val0x6cc);
  #line 527 
  coex_dm->cur_val0x6c0 = val0x6c0;
  #line 528 
  coex_dm->cur_val0x6c4 = val0x6c4;
  #line 529 
  coex_dm->cur_val0x6c8 = val0x6c8;
  #line 530 
  coex_dm->cur_val0x6cc = val0x6cc;
  #line 532 
  if (! force_exec) 
    #line 533 
    if (((coex_dm->pre_val0x6c0 == coex_dm->cur_val0x6c0 && coex_dm->pre_val0x6c4 == coex_dm->cur_val0x6c4) && coex_dm->pre_val0x6c8 == coex_dm->cur_val0x6c8) && (int)coex_dm->pre_val0x6cc == (int)coex_dm->cur_val0x6cc) 
      #line 537 
      return;
  #line 539 
  halbtc8723b1ant_set_coex_table(btcoexist,val0x6c0,val0x6c4,val0x6c8,(unsigned char)((int)val0x6cc));
  #line 542 
  coex_dm->pre_val0x6c0 = coex_dm->cur_val0x6c0;
  #line 543 
  coex_dm->pre_val0x6c4 = coex_dm->cur_val0x6c4;
  #line 544 
  coex_dm->pre_val0x6c8 = coex_dm->cur_val0x6c8;
  #line 545 
  coex_dm->pre_val0x6cc = coex_dm->cur_val0x6cc;
  #line 546 
  return;
}

#line 548  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.c"
static void halbtc8723b1ant_coex_table_with_type(struct btc_coexist *btcoexist, bool force_exec, u8 type)
{
  #line 551 
  coex_sta->coex_table_type = type;
  #line 553 
  switch ((int)type) {
    #line 554 
    case 0: 
            #line 554 
    ;
    #line 555 
    halbtc8723b1ant_coex_table(btcoexist,(_Bool)((bool)((int)force_exec) != 0),1431655765U,1431655765U,16777215U,(unsigned char)3);
    #line 557 
    break;
    #line 558 
    case 1: 
            #line 558 
    ;
    #line 559 
    halbtc8723b1ant_coex_table(btcoexist,(_Bool)((bool)((int)force_exec) != 0),1431655765U,1515870810U,16777215U,(unsigned char)3);
    #line 561 
    break;
    #line 562 
    case 2: 
            #line 562 
    ;
    #line 563 
    halbtc8723b1ant_coex_table(btcoexist,(_Bool)((bool)((int)force_exec) != 0),1515870810U,1515870810U,16777215U,(unsigned char)3);
    #line 565 
    break;
    #line 566 
    case 3: 
            #line 566 
    ;
    #line 567 
    halbtc8723b1ant_coex_table(btcoexist,(_Bool)((bool)((int)force_exec) != 0),1431655765U,1515870810U,16777215U,(unsigned char)3);
    #line 569 
    break;
    #line 570 
    case 4: 
            #line 570 
    ;
    #line 571 
    if ((int)coex_sta->cck_ever_lock != 0 && (unsigned int)coex_sta->scan_ap_num <= 5U) 
      #line 572 
      halbtc8723b1ant_coex_table(btcoexist,(_Bool)((bool)((int)force_exec) != 0),1431655765U,2863290970U,16777215U,(unsigned char)3); else 
                                                                    #line 576 
                                                                    halbtc8723b1ant_coex_table(btcoexist,(_Bool)((bool)((int)force_exec) != 0),1431655765U,1515870810U,16777215U,(unsigned char)3);
    #line 579 
    break;
    #line 580 
    case 5: 
            #line 580 
    ;
    #line 581 
    halbtc8723b1ant_coex_table(btcoexist,(_Bool)((bool)((int)force_exec) != 0),1515870810U,1521113690U,16777215U,(unsigned char)3);
    #line 583 
    break;
    #line 584 
    case 6: 
            #line 584 
    ;
    #line 585 
    halbtc8723b1ant_coex_table(btcoexist,(_Bool)((bool)((int)force_exec) != 0),1431655765U,2863311530U,16777215U,(unsigned char)3);
    #line 587 
    break;
    #line 588 
    case 7: 
            #line 588 
    ;
    #line 589 
    halbtc8723b1ant_coex_table(btcoexist,(_Bool)((bool)((int)force_exec) != 0),2863311530U,2863311530U,16777215U,(unsigned char)3);
    #line 591 
    break;
    #line 592 
    case 8: 
            #line 592 
    ;
    #line 593 
    halbtc8723b1ant_coex_table(btcoexist,(_Bool)((bool)((int)force_exec) != 0),1440568797U,1524259546U,16777215U,(unsigned char)3);
    #line 595 
    break;
    #line 596 
    case 9: 
            #line 596 
    ;
    #line 597 
    halbtc8723b1ant_coex_table(btcoexist,(_Bool)((bool)((int)force_exec) != 0),1440568797U,1524259546U,16777215U,(unsigned char)3);
    #line 599 
    break;
    #line 600 
    case 10: 
             #line 600 
    ;
    #line 601 
    halbtc8723b1ant_coex_table(btcoexist,(_Bool)((bool)((int)force_exec) != 0),1440568797U,1524259546U,16777215U,(unsigned char)3);
    #line 603 
    break;
    #line 604 
    case 11: 
             #line 604 
    ;
    #line 605 
    halbtc8723b1ant_coex_table(btcoexist,(_Bool)((bool)((int)force_exec) != 0),1440568797U,1524259546U,16777215U,(unsigned char)3);
    #line 607 
    break;
    #line 608 
    case 12: 
             #line 608 
    ;
    #line 609 
    halbtc8723b1ant_coex_table(btcoexist,(_Bool)((bool)((int)force_exec) != 0),1440568797U,1524259546U,16777215U,(unsigned char)3);
    #line 611 
    break;
    #line 612 
    case 13: 
             #line 612 
    ;
    #line 613 
    halbtc8723b1ant_coex_table(btcoexist,(_Bool)((bool)((int)force_exec) != 0),1610571775U,2863311530U,16777215U,(unsigned char)3);
    #line 615 
    break;
    #line 616 
    case 14: 
             #line 616 
    ;
    #line 617 
    halbtc8723b1ant_coex_table(btcoexist,(_Bool)((bool)((int)force_exec) != 0),1610571775U,1524259546U,16777215U,(unsigned char)3);
    #line 619 
    break;
    #line 620 
    case 15: 
             #line 620 
    ;
    #line 621 
    halbtc8723b1ant_coex_table(btcoexist,(_Bool)((bool)((int)force_exec) != 0),1440568797U,2863311530U,16777215U,(unsigned char)3);
    #line 623 
    break;
    #line 624 
    default: 
             #line 624 
    ;
    #line 625 
    break;
  }
  #line 627 
  return;
}

#line 630  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.c"
static void halbtc8723b1ant_set_fw_ignore_wlan_act(struct btc_coexist *btcoexist, bool enable)
{
  #line 633 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 634 
  u8 h2c_parameter[1U] = {(unsigned char)0U};
  #line 636 
  if ((int)enable != 0) 
                        #line 637 
                        h2c_parameter[0] = (unsigned char)((unsigned int)h2c_parameter[0] | 1U);
  #line 639 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], set FW for BT Ignore Wlan_Act, FW write 0x63 = 0x%x\n",(int)h2c_parameter[0]);
  #line 643 
  (*(btcoexist->btc_fill_h2c))((void *)btcoexist,(unsigned char)99,1U,(u8 *)(& h2c_parameter));
  #line 644 
  return;
}

#line 646  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.c"
static void halbtc8723b1ant_ignore_wlan_act(struct btc_coexist *btcoexist, bool force_exec, bool enable)
{
  #line 651 
  char *tmp;
  #line 651 
  char *tmp_0;
  #line 649 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 651 
  if ((int)enable != 0) 
                        #line 651 
                        tmp = (char *)"ON"; else 
                                                 #line 651 
                                                 tmp = (char *)"OFF";
  #line 651 
  if ((int)force_exec != 0) 
                            #line 651 
                            tmp_0 = (char *)"force to"; else 
                                                             #line 651 
                                                             tmp_0 = (char *)"";
  #line 651 
  ;
  #line 651 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], %s turn Ignore WlanAct %s\n",tmp_0,tmp);
  #line 654 
  coex_dm->cur_ignore_wlan_act = enable;
  #line 656 
  if (! force_exec) {
    #line 657 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], bPreIgnoreWlanAct = %d, bCurIgnoreWlanAct = %d!!\n",(int)coex_dm->pre_ignore_wlan_act,(int)coex_dm->cur_ignore_wlan_act);
    #line 662 
    if ((int)coex_dm->pre_ignore_wlan_act == (int)coex_dm->cur_ignore_wlan_act) 
      #line 664 
      return;
  }
  #line 666 
  halbtc8723b1ant_set_fw_ignore_wlan_act(btcoexist,(_Bool)((bool)((int)enable) != 0));
  #line 668 
  coex_dm->pre_ignore_wlan_act = coex_dm->cur_ignore_wlan_act;
  #line 669 
  return;
}

#line 671  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.c"
static void halbtc8723b1ant_set_fw_ps_tdma(struct btc_coexist *btcoexist, u8 byte1, u8 byte2, u8 byte3, u8 byte4, u8 byte5)
{
  #line 675 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 676 
  u8 h2c_parameter[5U] = {(unsigned char)0U};
  #line 677 
  u8 real_byte1 = byte1;
  #line 677 
  u8 real_byte5 = byte5;
  #line 678 
  bool ap_enable = (_Bool)0;
  #line 680 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)14,(void *)(& ap_enable));
  #line 683 
  if ((int)ap_enable != 0) 
    #line 684 
    if (((int)byte1 & 16) != 0 && ((int)byte1 & 32) == 0) {
      #line 685 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], FW for 1Ant AP mode\n");
      #line 687 
      real_byte1 = (unsigned char)((unsigned int)real_byte1 & 239U);
      #line 688 
      real_byte1 = (unsigned char)((unsigned int)real_byte1 | 32U);
      #line 690 
      real_byte5 = (unsigned char)((unsigned int)real_byte5 | 32U);
      #line 691 
      real_byte5 = (unsigned char)((unsigned int)real_byte5 & 191U);
    }
  #line 695 
  h2c_parameter[0] = real_byte1;
  #line 696 
  h2c_parameter[1] = byte2;
  #line 697 
  h2c_parameter[2] = byte3;
  #line 698 
  h2c_parameter[3] = byte4;
  #line 699 
  h2c_parameter[4] = real_byte5;
  #line 701 
  coex_dm->ps_tdma_para[0] = real_byte1;
  #line 702 
  coex_dm->ps_tdma_para[1] = byte2;
  #line 703 
  coex_dm->ps_tdma_para[2] = byte3;
  #line 704 
  coex_dm->ps_tdma_para[3] = byte4;
  #line 705 
  coex_dm->ps_tdma_para[4] = real_byte5;
  #line 707 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], PS-TDMA H2C cmd =0x%x%08x\n",(int)h2c_parameter[0],((((int)h2c_parameter[1] << 24) | ((int)h2c_parameter[2] << 16)) | ((int)h2c_parameter[3] << 8)) | (int)h2c_parameter[4]);
  #line 715 
  (*(btcoexist->btc_fill_h2c))((void *)btcoexist,(unsigned char)96,5U,(u8 *)(& h2c_parameter));
  #line 716 
  return;
}

#line 718  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.c"
static void halbtc8723b1ant_set_lps_rpwm(struct btc_coexist *btcoexist, u8 lps_val, u8 rpwm_val)
{
  #line 721 
  u8 lps = lps_val;
  #line 722 
  u8 rpwm = rpwm_val;
  #line 724 
  (*(btcoexist->btc_set))((void *)btcoexist,(unsigned char)18,(void *)(& lps));
  #line 725 
  (*(btcoexist->btc_set))((void *)btcoexist,(unsigned char)19,(void *)(& rpwm));
  #line 726 
  return;
}

#line 728  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.c"
static void halbtc8723b1ant_lps_rpwm(struct btc_coexist *btcoexist, bool force_exec, u8 lps_val, u8 rpwm_val)
{
  #line 734 
  char *tmp;
  #line 732 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 734 
  ;
  #line 734 
  ;
  #line 734 
  if ((int)force_exec != 0) 
                            #line 734 
                            tmp = (char *)"force to"; else 
                                                           #line 734 
                                                           tmp = (char *)"";
  #line 734 
  ;
  #line 734 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], %s set lps/rpwm = 0x%x/0x%x\n",tmp,(int)lps_val,(int)rpwm_val);
  #line 737 
  coex_dm->cur_lps = lps_val;
  #line 738 
  coex_dm->cur_rpwm = rpwm_val;
  #line 740 
  if (! force_exec) {
    #line 741 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], LPS-RxBeaconMode = 0x%x , LPS-RPWM = 0x%x!!\n",(int)coex_dm->cur_lps,(int)coex_dm->cur_rpwm);
    #line 745 
    if ((int)coex_dm->pre_lps == (int)coex_dm->cur_lps && (int)coex_dm->pre_rpwm == (int)coex_dm->cur_rpwm) {
      #line 747 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], LPS-RPWM_Last = 0x%x , LPS-RPWM_Now = 0x%x!!\n",(int)coex_dm->pre_rpwm,(int)coex_dm->cur_rpwm);
      #line 751 
      return;
    }
  }
  #line 754 
  halbtc8723b1ant_set_lps_rpwm(btcoexist,(unsigned char)((int)lps_val),(unsigned char)((int)rpwm_val));
  #line 756 
  coex_dm->pre_lps = coex_dm->cur_lps;
  #line 757 
  coex_dm->pre_rpwm = coex_dm->cur_rpwm;
  #line 758 
  return;
}

#line 760  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.c"
static void halbtc8723b1ant_sw_mechanism(struct btc_coexist *btcoexist, bool low_penalty_ra)
{
  #line 763 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 765 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], SM[LpRA] = %d\n",(int)low_penalty_ra);
  #line 768 
  halbtc8723b1ant_low_penalty_ra(btcoexist,(_Bool)0,(_Bool)((bool)((int)low_penalty_ra) != 0));
  #line 769 
  return;
}

#line 771  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.c"
static void halbtc8723b1ant_set_ant_path(struct btc_coexist *btcoexist, u8 ant_pos_type, bool force_exec, bool init_hw_cfg, bool wifi_off)
{
  #line 775 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 776 
  struct btc_board_info *board_info = & btcoexist->board_info;
  #line 777 
  u32 fw_ver = 0U;
  #line 777 
  u32 u32tmp = 0U;
  #line 777 
  u32 cnt_bt_cal_chk = 0U;
  #line 778 
  bool pg_ext_switch = (_Bool)0;
  #line 779 
  bool use_ext_switch = (_Bool)0;
  #line 780 
  bool is_in_mp_mode = (_Bool)0;
  #line 781 
  u8 h2c_parameter[2U] = {(unsigned char)0U};
  #line 781 
  u8 u8tmp = (unsigned char)0U;
  #line 783 
  coex_dm->cur_ant_pos_type = ant_pos_type;
  #line 785 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)17,(void *)(& pg_ext_switch));
  #line 787 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)26,(void *)(& fw_ver));
  #line 789 
  if (fw_ver <= 786431U || (int)pg_ext_switch != 0) 
                                                    #line 790 
                                                    use_ext_switch = (_Bool)1;
  #line 792 
  if ((int)init_hw_cfg != 0) {
    #line 794 
    (*(btcoexist->btc_set_rf_reg))((void *)btcoexist,(unsigned char)0,1U,1048575U,1920U);
    #line 800 
    if (fw_ver > 1572863U) {
      #line 802 
      h2c_parameter[0] = (unsigned char)1U;
      #line 803 
      (*(btcoexist->btc_fill_h2c))((void *)btcoexist,(unsigned char)110,1U,(u8 *)(& h2c_parameter));
    }
    else 
         #line 807 
         (*(btcoexist->btc_write_1byte))((void *)btcoexist,1893U,24U);
    #line 810 
    (*(btcoexist->btc_write_1byte))((void *)btcoexist,1902U,4U);
    #line 813 
    (*(btcoexist->btc_write_1byte_bitmask))((void *)btcoexist,103U,32U,(unsigned char)0);
    #line 814 
    (*(btcoexist->btc_write_1byte_bitmask))((void *)btcoexist,57U,8U,(unsigned char)1);
    #line 815 
    (*(btcoexist->btc_write_1byte))((void *)btcoexist,2420U,255U);
    #line 816 
    (*(btcoexist->btc_write_1byte_bitmask))((void *)btcoexist,2372U,3U,(unsigned char)3);
    #line 817 
    (*(btcoexist->btc_write_1byte))((void *)btcoexist,2352U,119U);
  }
  else 
    #line 818 
    if ((int)wifi_off != 0) {
      #line 819 
      if (fw_ver > 1572863U) {
        #line 821 
        h2c_parameter[0] = (unsigned char)1U;
        #line 822 
        (*(btcoexist->btc_fill_h2c))((void *)btcoexist,(unsigned char)110,1U,(u8 *)(& h2c_parameter));
      }
      else 
           #line 826 
           (*(btcoexist->btc_write_1byte))((void *)btcoexist,1893U,24U);
      #line 829 
      (*(btcoexist->btc_write_1byte))((void *)btcoexist,1902U,4U);
      #line 831 
      (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)18,(void *)(& is_in_mp_mode));
      #line 833 
      if (! is_in_mp_mode) 
                           #line 835 
                           (*(btcoexist->btc_write_1byte_bitmask))((void *)btcoexist,103U,32U,(unsigned char)0); else 
                                                                    #line 839 
                                                                    (*(btcoexist->btc_write_1byte_bitmask))((void *)btcoexist,103U,32U,(unsigned char)1);
      #line 845 
      u32tmp = (*(btcoexist->btc_read_4byte))((void *)btcoexist,76U);
      #line 846 
      u32tmp &= 4286578687U;
      #line 847 
      u32tmp &= 4278190079U;
      #line 848 
      (*(btcoexist->btc_write_4byte))((void *)btcoexist,76U,u32tmp);
    }
    else {
      #line 851 
      if (fw_ver > 1572863U) {
        #line 852 
        if ((unsigned int)(*(btcoexist->btc_read_1byte))((void *)btcoexist,1893U) != 0U) {
          #line 853 
          h2c_parameter[0] = (unsigned char)0U;
          #line 854 
          (*(btcoexist->btc_fill_h2c))((void *)btcoexist,(unsigned char)110,1U,(u8 *)(& h2c_parameter));
        }
      }
      else {
        #line 859 
        while (cnt_bt_cal_chk <= 20U) {
          #line 860 
          u8tmp = (*(btcoexist->btc_read_1byte))((void *)btcoexist,1181U);
          #line 862 
          cnt_bt_cal_chk ++;
          #line 863 
          if (((unsigned long)u8tmp & 1UL) != 0UL) {
            #line 864 
            _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], ########### BT is calibrating (wait cnt=%d) ###########\n",cnt_bt_cal_chk);
            {
              #line 868 
              unsigned long __ms = 50UL;
              #line 868 
              while (1) {
                #line 868 
                unsigned long tmp_0;
                #line 868 
                tmp_0 = __ms;
                #line 868 
                __ms --;
                #line 868 
                ;
                #line 868 
                if (! (tmp_0 != 0UL)) 
                                      #line 868 
                                      break;
                #line 868 
                __const_udelay(4295000UL);
              }
            }
          }
          else {
            #line 870 
            _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], ********** BT is NOT calibrating (wait cnt=%d)**********\n",cnt_bt_cal_chk);
            #line 874 
            break;
          }
        }
        #line 879 
        (*(btcoexist->btc_write_1byte))((void *)btcoexist,1893U,0U);
      }
      #line 882 
      if ((unsigned int)(*(btcoexist->btc_read_1byte))((void *)btcoexist,1902U) != 12U) 
        #line 884 
        (*(btcoexist->btc_write_1byte))((void *)btcoexist,1902U,12U);
      #line 887 
      (*(btcoexist->btc_write_1byte_bitmask))((void *)btcoexist,103U,32U,(unsigned char)1);
    }
  #line 892 
  if ((int)use_ext_switch != 0) {
    #line 893 
    if ((int)init_hw_cfg != 0) {
      #line 897 
      u32tmp = (*(btcoexist->btc_read_4byte))((void *)btcoexist,76U);
      #line 898 
      u32tmp &= 4286578687U;
      #line 899 
      u32tmp |= 16777216U;
      #line 900 
      (*(btcoexist->btc_write_4byte))((void *)btcoexist,76U,u32tmp);
      #line 903 
      (*(btcoexist->btc_write_4byte))((void *)btcoexist,2376U,0U);
      #line 905 
      if ((unsigned int)board_info->btdm_ant_pos == 1U) {
        #line 908 
        h2c_parameter[0] = (unsigned char)0U;
        #line 910 
        h2c_parameter[1] = (unsigned char)1U;
        #line 911 
        (*(btcoexist->btc_fill_h2c))((void *)btcoexist,(unsigned char)101,2U,(u8 *)(& h2c_parameter));
      }
      else {
        #line 915 
        h2c_parameter[0] = (unsigned char)1U;
        #line 917 
        h2c_parameter[1] = (unsigned char)1U;
        #line 918 
        (*(btcoexist->btc_fill_h2c))((void *)btcoexist,(unsigned char)101,2U,(u8 *)(& h2c_parameter));
      }
    }
    #line 923 
    if ((int)force_exec != 0 || (int)coex_dm->cur_ant_pos_type != (int)coex_dm->pre_ant_pos_type) 
      #line 926 
      switch ((int)ant_pos_type) {
        #line 927 
        case 0: 
                #line 927 
        ;
        #line 928 
        if ((unsigned int)board_info->btdm_ant_pos == 1U) 
                                                          #line 930 
                                                          (*(btcoexist->btc_write_1byte_bitmask))((void *)btcoexist,2348U,3U,(unsigned char)1); else 
                                                                    #line 933 
                                                                    (*(btcoexist->btc_write_1byte_bitmask))((void *)btcoexist,2348U,3U,(unsigned char)2);
        #line 935 
        break;
        #line 936 
        case 1: 
                #line 936 
        ;
        #line 937 
        if ((unsigned int)board_info->btdm_ant_pos == 1U) 
                                                          #line 939 
                                                          (*(btcoexist->btc_write_1byte_bitmask))((void *)btcoexist,2348U,3U,(unsigned char)2); else 
                                                                    #line 942 
                                                                    (*(btcoexist->btc_write_1byte_bitmask))((void *)btcoexist,2348U,3U,(unsigned char)1);
        #line 944 
        break;
        #line 945 
        default: 
                 #line 945 
        ;
        #line 946 
        case 2: 
                #line 946 
        ;
        #line 947 
        if ((unsigned int)board_info->btdm_ant_pos == 1U) 
                                                          #line 949 
                                                          (*(btcoexist->btc_write_1byte_bitmask))((void *)btcoexist,2348U,3U,(unsigned char)1); else 
                                                                    #line 952 
                                                                    (*(btcoexist->btc_write_1byte_bitmask))((void *)btcoexist,2348U,3U,(unsigned char)2);
        #line 954 
        break;
      }
  }
  else {
    #line 958 
    if ((int)init_hw_cfg != 0) {
      #line 962 
      u32tmp = (*(btcoexist->btc_read_4byte))((void *)btcoexist,76U);
      #line 963 
      u32tmp |= 8388608U;
      #line 964 
      u32tmp &= 4278190079U;
      #line 965 
      (*(btcoexist->btc_write_4byte))((void *)btcoexist,76U,u32tmp);
      #line 968 
      (*(btcoexist->btc_write_1byte_bitmask))((void *)btcoexist,100U,1U,(unsigned char)0);
      #line 971 
      if ((unsigned int)board_info->btdm_ant_pos == 1U) {
        #line 974 
        h2c_parameter[0] = (unsigned char)0U;
        #line 976 
        h2c_parameter[1] = (unsigned char)0U;
        #line 977 
        (*(btcoexist->btc_fill_h2c))((void *)btcoexist,(unsigned char)101,2U,(u8 *)(& h2c_parameter));
      }
      else {
        #line 981 
        h2c_parameter[0] = (unsigned char)1U;
        #line 983 
        h2c_parameter[1] = (unsigned char)0U;
        #line 984 
        (*(btcoexist->btc_fill_h2c))((void *)btcoexist,(unsigned char)101,2U,(u8 *)(& h2c_parameter));
      }
    }
    #line 989 
    if ((int)force_exec != 0 || (int)coex_dm->cur_ant_pos_type != (int)coex_dm->pre_ant_pos_type) 
      #line 992 
      switch ((int)ant_pos_type) {
        #line 993 
        case 0: 
                #line 993 
        ;
        #line 994 
        if ((unsigned int)board_info->btdm_ant_pos == 1U) 
                                                          #line 996 
                                                          (*(btcoexist->btc_write_4byte))((void *)btcoexist,2376U,0U); else 
                                                                    #line 999 
                                                                    (*(btcoexist->btc_write_4byte))((void *)btcoexist,2376U,640U);
        #line 1001 
        break;
        #line 1002 
        case 1: 
                #line 1002 
        ;
        #line 1003 
        if ((unsigned int)board_info->btdm_ant_pos == 1U) 
                                                          #line 1005 
                                                          (*(btcoexist->btc_write_4byte))((void *)btcoexist,2376U,640U); else 
                                                                    #line 1008 
                                                                    (*(btcoexist->btc_write_4byte))((void *)btcoexist,2376U,0U);
        #line 1010 
        break;
        #line 1011 
        default: 
                 #line 1011 
        ;
        #line 1012 
        case 2: 
                #line 1012 
        ;
        #line 1013 
        if ((unsigned int)board_info->btdm_ant_pos == 1U) 
                                                          #line 1015 
                                                          (*(btcoexist->btc_write_4byte))((void *)btcoexist,2376U,512U); else 
                                                                    #line 1018 
                                                                    (*(btcoexist->btc_write_4byte))((void *)btcoexist,2376U,128U);
        #line 1020 
        break;
      }
  }
  #line 1025 
  coex_dm->pre_ant_pos_type = coex_dm->cur_ant_pos_type;
  #line 1026 
  return;
}

#line 1028  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.c"
static void halbtc8723b1ant_ps_tdma(struct btc_coexist *btcoexist, bool force_exec, bool turn_on, u8 type)
{
  #line 1038 
  bool pre_wifi_busy;
  #line 1031 
  struct btc_bt_link_info *bt_link_info = & btcoexist->bt_link_info;
  #line 1032 
  bool wifi_busy = (_Bool)0;
  #line 1033 
  u8 rssi_adjust_val = (unsigned char)0U;
  #line 1034 
  u8 ps_tdma_byte0_val = (unsigned char)81U;
  #line 1035 
  u8 ps_tdma_byte3_val = (unsigned char)16U;
  #line 1036 
  u8 ps_tdma_byte4_val = (unsigned char)80U;
  #line 1037 
  s8 wifi_duration_adjust = (signed char)0;
  #line 1040 
  coex_dm->cur_ps_tdma_on = turn_on;
  #line 1041 
  coex_dm->cur_ps_tdma = type;
  #line 1043 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)4,(void *)(& wifi_busy));
  #line 1045 
  if ((int)wifi_busy != (int)pre_wifi_busy) {
    #line 1046 
    force_exec = (_Bool)1;
    #line 1047 
    pre_wifi_busy = wifi_busy;
  }
  #line 1050 
  if (! force_exec) 
    #line 1051 
    if ((int)coex_dm->pre_ps_tdma_on == (int)coex_dm->cur_ps_tdma_on && (int)coex_dm->pre_ps_tdma == (int)coex_dm->cur_ps_tdma) 
      #line 1053 
      return;
  #line 1056 
  if ((unsigned int)coex_sta->scan_ap_num <= 5U) {
    #line 1057 
    wifi_duration_adjust = (signed char)5;
    #line 1059 
    if ((unsigned int)coex_sta->a2dp_bit_pool > 34U) 
                                                     #line 1060 
                                                     wifi_duration_adjust = (signed char)(-10);
    else 
      #line 1061 
      if ((unsigned int)coex_sta->a2dp_bit_pool > 44U) 
                                                       #line 1062 
                                                       wifi_duration_adjust = (signed char)(-15);
  }
  else 
    #line 1063 
    if ((unsigned int)coex_sta->scan_ap_num > 39U) {
      #line 1064 
      wifi_duration_adjust = (signed char)(-15);
      #line 1066 
      if ((unsigned int)coex_sta->a2dp_bit_pool <= 34U) 
                                                        #line 1067 
                                                        wifi_duration_adjust = (signed char)(-5);
      else 
        #line 1068 
        if ((unsigned int)coex_sta->a2dp_bit_pool <= 44U) 
                                                          #line 1069 
                                                          wifi_duration_adjust = (signed char)(-10);
    }
    else 
      #line 1070 
      if ((unsigned int)coex_sta->scan_ap_num > 19U) {
        #line 1071 
        wifi_duration_adjust = (signed char)(-10);
        #line 1073 
        if ((unsigned int)coex_sta->a2dp_bit_pool > 44U) 
                                                         #line 1074 
                                                         wifi_duration_adjust = (signed char)(-15);
      }
      else {
        #line 1076 
        wifi_duration_adjust = (signed char)0;
        #line 1078 
        if ((unsigned int)coex_sta->a2dp_bit_pool > 34U) 
                                                         #line 1079 
                                                         wifi_duration_adjust = (signed char)(-10);
        else 
          #line 1080 
          if ((unsigned int)coex_sta->a2dp_bit_pool > 44U) 
                                                           #line 1081 
                                                           wifi_duration_adjust = (signed char)(-15);
      }
  #line 1084 
  if (((((unsigned int)type + 255U <= 1U || (unsigned int)type == 9U) || ((unsigned int)type == 11U || (unsigned int)type == 101U)) || ((unsigned int)type == 102U || (unsigned int)type == 109U)) || (unsigned int)type == 111U) 
    #line 1086 
    if (! coex_sta->force_lps_on) {
      #line 1092 
      ps_tdma_byte0_val = (unsigned char)97U;
      #line 1094 
      ps_tdma_byte3_val = (unsigned char)17U;
      #line 1096 
      ps_tdma_byte4_val = (unsigned char)16U;
    }
    else {
      #line 1099 
      ps_tdma_byte0_val = (unsigned char)81U;
      #line 1101 
      ps_tdma_byte3_val = (unsigned char)16U;
      #line 1103 
      ps_tdma_byte4_val = (unsigned char)80U;
    }
  else 
    #line 1105 
    if ((((unsigned int)type == 3U || (unsigned int)type == 13U) || ((unsigned int)type == 14U || (unsigned int)type == 103U)) || (unsigned int)type + 143U <= 1U) {
      #line 1108 
      ps_tdma_byte0_val = (unsigned char)81U;
      #line 1110 
      ps_tdma_byte3_val = (unsigned char)16U;
      #line 1112 
      ps_tdma_byte4_val = (unsigned char)16U;
    }
    else {
      #line 1115 
      ps_tdma_byte0_val = (unsigned char)97U;
      #line 1117 
      ps_tdma_byte3_val = (unsigned char)17U;
      #line 1119 
      ps_tdma_byte4_val = (unsigned char)17U;
    }
  #line 1124 
  if ((int)bt_link_info->slave_role != 0 && (int)bt_link_info->a2dp_exist != 0) 
    #line 1126 
    ps_tdma_byte4_val = (unsigned char)((unsigned int)ps_tdma_byte4_val | 1U);
  #line 1128 
  if ((unsigned int)type > 100U) {
    #line 1130 
    ps_tdma_byte0_val = (unsigned char)((unsigned int)ps_tdma_byte0_val | 130U);
    #line 1132 
    ps_tdma_byte3_val = (unsigned char)((unsigned int)ps_tdma_byte3_val | 96U);
  }
  #line 1135 
  if ((int)turn_on != 0) 
    #line 1136 
    switch ((int)type) {
      #line 1137 
      default: 
               #line 1137 
      ;
      #line 1138 
      halbtc8723b1ant_set_fw_ps_tdma(btcoexist,(unsigned char)81,(unsigned char)26,(unsigned char)26,(unsigned char)0,(unsigned char)((int)ps_tdma_byte4_val));
      #line 1141 
      break;
      #line 1142 
      case 1: 
              #line 1142 
      ;
      #line 1143 
      halbtc8723b1ant_set_fw_ps_tdma(btcoexist,(unsigned char)((int)ps_tdma_byte0_val),(unsigned char)((int)((unsigned int)((unsigned char)wifi_duration_adjust) + 58U)),(unsigned char)3,(unsigned char)((int)ps_tdma_byte3_val),(unsigned char)((int)ps_tdma_byte4_val));
      #line 1148 
      rssi_adjust_val = (unsigned char)11U;
      #line 1149 
      break;
      #line 1150 
      case 2: 
              #line 1150 
      ;
      #line 1151 
      halbtc8723b1ant_set_fw_ps_tdma(btcoexist,(unsigned char)((int)ps_tdma_byte0_val),(unsigned char)((int)((unsigned int)((unsigned char)wifi_duration_adjust) + 45U)),(unsigned char)3,(unsigned char)((int)ps_tdma_byte3_val),(unsigned char)((int)ps_tdma_byte4_val));
      #line 1155 
      break;
      #line 1156 
      case 3: 
              #line 1156 
      ;
      #line 1157 
      halbtc8723b1ant_set_fw_ps_tdma(btcoexist,(unsigned char)((int)ps_tdma_byte0_val),(unsigned char)48,(unsigned char)3,(unsigned char)((int)ps_tdma_byte3_val),(unsigned char)((int)ps_tdma_byte4_val));
      #line 1160 
      break;
      #line 1161 
      case 4: 
              #line 1161 
      ;
      #line 1162 
      halbtc8723b1ant_set_fw_ps_tdma(btcoexist,(unsigned char)147,(unsigned char)21,(unsigned char)3,(unsigned char)20,(unsigned char)0);
      #line 1164 
      break;
      #line 1165 
      case 5: 
              #line 1165 
      ;
      #line 1166 
      halbtc8723b1ant_set_fw_ps_tdma(btcoexist,(unsigned char)((int)ps_tdma_byte0_val),(unsigned char)31,(unsigned char)3,(unsigned char)((int)ps_tdma_byte3_val),(unsigned char)17);
      #line 1169 
      break;
      #line 1170 
      case 6: 
              #line 1170 
      ;
      #line 1171 
      halbtc8723b1ant_set_fw_ps_tdma(btcoexist,(unsigned char)((int)ps_tdma_byte0_val),(unsigned char)32,(unsigned char)3,(unsigned char)((int)ps_tdma_byte3_val),(unsigned char)17);
      #line 1174 
      break;
      #line 1175 
      case 7: 
              #line 1175 
      ;
      #line 1176 
      halbtc8723b1ant_set_fw_ps_tdma(btcoexist,(unsigned char)19,(unsigned char)12,(unsigned char)5,(unsigned char)0,(unsigned char)0);
      #line 1178 
      break;
      #line 1179 
      case 8: 
              #line 1179 
      ;
      #line 1180 
      halbtc8723b1ant_set_fw_ps_tdma(btcoexist,(unsigned char)147,(unsigned char)37,(unsigned char)3,(unsigned char)16,(unsigned char)0);
      #line 1182 
      break;
      #line 1183 
      case 9: 
              #line 1183 
      ;
      #line 1184 
      halbtc8723b1ant_set_fw_ps_tdma(btcoexist,(unsigned char)((int)ps_tdma_byte0_val),(unsigned char)33,(unsigned char)3,(unsigned char)((int)ps_tdma_byte3_val),(unsigned char)((int)ps_tdma_byte4_val));
      #line 1187 
      break;
      #line 1188 
      case 10: 
               #line 1188 
      ;
      #line 1189 
      halbtc8723b1ant_set_fw_ps_tdma(btcoexist,(unsigned char)19,(unsigned char)10,(unsigned char)10,(unsigned char)0,(unsigned char)64);
      #line 1191 
      break;
      #line 1192 
      case 11: 
               #line 1192 
      ;
      #line 1193 
      halbtc8723b1ant_set_fw_ps_tdma(btcoexist,(unsigned char)((int)ps_tdma_byte0_val),(unsigned char)33,(unsigned char)3,(unsigned char)((int)ps_tdma_byte3_val),(unsigned char)((int)ps_tdma_byte4_val));
      #line 1196 
      break;
      #line 1197 
      case 12: 
               #line 1197 
      ;
      #line 1198 
      halbtc8723b1ant_set_fw_ps_tdma(btcoexist,(unsigned char)81,(unsigned char)10,(unsigned char)10,(unsigned char)0,(unsigned char)80);
      #line 1200 
      break;
      #line 1201 
      case 13: 
               #line 1201 
      ;
      #line 1202 
      if ((unsigned int)coex_sta->scan_ap_num <= 3U) 
                                                     #line 1203 
                                                     halbtc8723b1ant_set_fw_ps_tdma(btcoexist,(unsigned char)((int)ps_tdma_byte0_val),(unsigned char)64,(unsigned char)3,(unsigned char)((int)ps_tdma_byte3_val),(unsigned char)((int)ps_tdma_byte4_val)); else 
                                                                    #line 1207 
                                                                    halbtc8723b1ant_set_fw_ps_tdma(btcoexist,(unsigned char)((int)ps_tdma_byte0_val),(unsigned char)33,(unsigned char)3,(unsigned char)((int)ps_tdma_byte3_val),(unsigned char)((int)ps_tdma_byte4_val));
      #line 1210 
      break;
      #line 1211 
      case 14: 
               #line 1211 
      ;
      #line 1212 
      if ((unsigned int)coex_sta->scan_ap_num <= 3U) 
                                                     #line 1213 
                                                     halbtc8723b1ant_set_fw_ps_tdma(btcoexist,(unsigned char)81,(unsigned char)48,(unsigned char)3,(unsigned char)16,(unsigned char)80); else 
                                                                    #line 1216 
                                                                    halbtc8723b1ant_set_fw_ps_tdma(btcoexist,(unsigned char)((int)ps_tdma_byte0_val),(unsigned char)33,(unsigned char)3,(unsigned char)((int)ps_tdma_byte3_val),(unsigned char)((int)ps_tdma_byte4_val));
      #line 1219 
      break;
      #line 1220 
      case 15: 
               #line 1220 
      ;
      #line 1221 
      halbtc8723b1ant_set_fw_ps_tdma(btcoexist,(unsigned char)19,(unsigned char)10,(unsigned char)3,(unsigned char)8,(unsigned char)0);
      #line 1223 
      break;
      #line 1224 
      case 16: 
               #line 1224 
      ;
      #line 1225 
      halbtc8723b1ant_set_fw_ps_tdma(btcoexist,(unsigned char)147,(unsigned char)21,(unsigned char)3,(unsigned char)16,(unsigned char)0);
      #line 1227 
      break;
      #line 1228 
      case 18: 
               #line 1228 
      ;
      #line 1229 
      halbtc8723b1ant_set_fw_ps_tdma(btcoexist,(unsigned char)147,(unsigned char)37,(unsigned char)3,(unsigned char)16,(unsigned char)0);
      #line 1231 
      break;
      #line 1232 
      case 20: 
               #line 1232 
      ;
      #line 1233 
      halbtc8723b1ant_set_fw_ps_tdma(btcoexist,(unsigned char)((int)ps_tdma_byte0_val),(unsigned char)63,(unsigned char)3,(unsigned char)((int)ps_tdma_byte3_val),(unsigned char)16);
      #line 1236 
      break;
      #line 1237 
      case 21: 
               #line 1237 
      ;
      #line 1238 
      halbtc8723b1ant_set_fw_ps_tdma(btcoexist,(unsigned char)97,(unsigned char)37,(unsigned char)3,(unsigned char)17,(unsigned char)17);
      #line 1240 
      break;
      #line 1241 
      case 22: 
               #line 1241 
      ;
      #line 1242 
      halbtc8723b1ant_set_fw_ps_tdma(btcoexist,(unsigned char)((int)ps_tdma_byte0_val),(unsigned char)37,(unsigned char)3,(unsigned char)((int)ps_tdma_byte3_val),(unsigned char)16);
      #line 1245 
      break;
      #line 1246 
      case 23: 
               #line 1246 
      ;
      #line 1247 
      halbtc8723b1ant_set_fw_ps_tdma(btcoexist,(unsigned char)227,(unsigned char)37,(unsigned char)3,(unsigned char)49,(unsigned char)24);
      #line 1249 
      break;
      #line 1250 
      case 24: 
               #line 1250 
      ;
      #line 1251 
      halbtc8723b1ant_set_fw_ps_tdma(btcoexist,(unsigned char)227,(unsigned char)21,(unsigned char)3,(unsigned char)49,(unsigned char)24);
      #line 1253 
      break;
      #line 1254 
      case 25: 
               #line 1254 
      ;
      #line 1255 
      halbtc8723b1ant_set_fw_ps_tdma(btcoexist,(unsigned char)227,(unsigned char)10,(unsigned char)3,(unsigned char)49,(unsigned char)24);
      #line 1257 
      break;
      #line 1258 
      case 26: 
               #line 1258 
      ;
      #line 1259 
      halbtc8723b1ant_set_fw_ps_tdma(btcoexist,(unsigned char)227,(unsigned char)10,(unsigned char)3,(unsigned char)49,(unsigned char)24);
      #line 1261 
      break;
      #line 1262 
      case 27: 
               #line 1262 
      ;
      #line 1263 
      halbtc8723b1ant_set_fw_ps_tdma(btcoexist,(unsigned char)227,(unsigned char)37,(unsigned char)3,(unsigned char)49,(unsigned char)152);
      #line 1265 
      break;
      #line 1266 
      case 28: 
               #line 1266 
      ;
      #line 1267 
      halbtc8723b1ant_set_fw_ps_tdma(btcoexist,(unsigned char)105,(unsigned char)37,(unsigned char)3,(unsigned char)49,(unsigned char)0);
      #line 1269 
      break;
      #line 1270 
      case 29: 
               #line 1270 
      ;
      #line 1271 
      halbtc8723b1ant_set_fw_ps_tdma(btcoexist,(unsigned char)171,(unsigned char)26,(unsigned char)26,(unsigned char)1,(unsigned char)16);
      #line 1273 
      break;
      #line 1274 
      case 30: 
               #line 1274 
      ;
      #line 1275 
      halbtc8723b1ant_set_fw_ps_tdma(btcoexist,(unsigned char)81,(unsigned char)48,(unsigned char)3,(unsigned char)16,(unsigned char)16);
      #line 1277 
      break;
      #line 1278 
      case 31: 
               #line 1278 
      ;
      #line 1279 
      halbtc8723b1ant_set_fw_ps_tdma(btcoexist,(unsigned char)211,(unsigned char)26,(unsigned char)26,(unsigned char)0,(unsigned char)88);
      #line 1281 
      break;
      #line 1282 
      case 32: 
               #line 1282 
      ;
      #line 1283 
      halbtc8723b1ant_set_fw_ps_tdma(btcoexist,(unsigned char)((int)ps_tdma_byte0_val),(unsigned char)53,(unsigned char)3,(unsigned char)((int)ps_tdma_byte3_val),(unsigned char)((int)ps_tdma_byte4_val));
      #line 1286 
      break;
      #line 1287 
      case 33: 
               #line 1287 
      ;
      #line 1288 
      halbtc8723b1ant_set_fw_ps_tdma(btcoexist,(unsigned char)((int)ps_tdma_byte0_val),(unsigned char)53,(unsigned char)3,(unsigned char)((int)ps_tdma_byte3_val),(unsigned char)16);
      #line 1291 
      break;
      #line 1292 
      case 34: 
               #line 1292 
      ;
      #line 1293 
      halbtc8723b1ant_set_fw_ps_tdma(btcoexist,(unsigned char)83,(unsigned char)26,(unsigned char)26,(unsigned char)0,(unsigned char)16);
      #line 1295 
      break;
      #line 1296 
      case 35: 
               #line 1296 
      ;
      #line 1297 
      halbtc8723b1ant_set_fw_ps_tdma(btcoexist,(unsigned char)99,(unsigned char)26,(unsigned char)26,(unsigned char)0,(unsigned char)16);
      #line 1299 
      break;
      #line 1300 
      case 36: 
               #line 1300 
      ;
      #line 1301 
      halbtc8723b1ant_set_fw_ps_tdma(btcoexist,(unsigned char)211,(unsigned char)18,(unsigned char)3,(unsigned char)20,(unsigned char)80);
      #line 1303 
      break;
      #line 1304 
      case 40: 
               #line 1304 
      ;
      #line 1311 
      halbtc8723b1ant_set_fw_ps_tdma(btcoexist,(unsigned char)35,(unsigned char)24,(unsigned char)0,(unsigned char)16,(unsigned char)36);
      #line 1313 
      break;
      #line 1315 
      case 101: 
                #line 1315 
      ;
      #line 1317 
      halbtc8723b1ant_set_fw_ps_tdma(btcoexist,(unsigned char)((int)ps_tdma_byte0_val),(unsigned char)((int)((unsigned int)((unsigned char)wifi_duration_adjust) + 58U)),(unsigned char)3,(unsigned char)((int)ps_tdma_byte3_val),(unsigned char)((int)ps_tdma_byte4_val));
      #line 1321 
      break;
      #line 1322 
      case 102: 
                #line 1322 
      ;
      #line 1323 
      halbtc8723b1ant_set_fw_ps_tdma(btcoexist,(unsigned char)((int)ps_tdma_byte0_val),(unsigned char)((int)((unsigned int)((unsigned char)wifi_duration_adjust) + 45U)),(unsigned char)3,(unsigned char)((int)ps_tdma_byte3_val),(unsigned char)((int)ps_tdma_byte4_val));
      #line 1327 
      break;
      #line 1328 
      case 103: 
                #line 1328 
      ;
      #line 1329 
      halbtc8723b1ant_set_fw_ps_tdma(btcoexist,(unsigned char)((int)ps_tdma_byte0_val),(unsigned char)58,(unsigned char)3,(unsigned char)((int)ps_tdma_byte3_val),(unsigned char)((int)ps_tdma_byte4_val));
      #line 1332 
      break;
      #line 1333 
      case 105: 
                #line 1333 
      ;
      #line 1334 
      halbtc8723b1ant_set_fw_ps_tdma(btcoexist,(unsigned char)((int)ps_tdma_byte0_val),(unsigned char)21,(unsigned char)3,(unsigned char)((int)ps_tdma_byte3_val),(unsigned char)17);
      #line 1337 
      break;
      #line 1338 
      case 106: 
                #line 1338 
      ;
      #line 1339 
      halbtc8723b1ant_set_fw_ps_tdma(btcoexist,(unsigned char)((int)ps_tdma_byte0_val),(unsigned char)32,(unsigned char)3,(unsigned char)((int)ps_tdma_byte3_val),(unsigned char)17);
      #line 1342 
      break;
      #line 1343 
      case 109: 
                #line 1343 
      ;
      #line 1344 
      halbtc8723b1ant_set_fw_ps_tdma(btcoexist,(unsigned char)((int)ps_tdma_byte0_val),(unsigned char)33,(unsigned char)3,(unsigned char)((int)ps_tdma_byte3_val),(unsigned char)((int)ps_tdma_byte4_val));
      #line 1347 
      break;
      #line 1348 
      case 111: 
                #line 1348 
      ;
      #line 1349 
      halbtc8723b1ant_set_fw_ps_tdma(btcoexist,(unsigned char)((int)ps_tdma_byte0_val),(unsigned char)33,(unsigned char)3,(unsigned char)((int)ps_tdma_byte3_val),(unsigned char)((int)ps_tdma_byte4_val));
      #line 1352 
      break;
      #line 1353 
      case 113: 
                #line 1353 
      ;
      #line 1354 
      halbtc8723b1ant_set_fw_ps_tdma(btcoexist,(unsigned char)((int)ps_tdma_byte0_val),(unsigned char)33,(unsigned char)3,(unsigned char)((int)ps_tdma_byte3_val),(unsigned char)((int)ps_tdma_byte4_val));
      #line 1357 
      break;
      #line 1358 
      case 114: 
                #line 1358 
      ;
      #line 1359 
      halbtc8723b1ant_set_fw_ps_tdma(btcoexist,(unsigned char)((int)ps_tdma_byte0_val),(unsigned char)33,(unsigned char)3,(unsigned char)((int)ps_tdma_byte3_val),(unsigned char)((int)ps_tdma_byte4_val));
      #line 1362 
      break;
      #line 1363 
      case 120: 
                #line 1363 
      ;
      #line 1364 
      halbtc8723b1ant_set_fw_ps_tdma(btcoexist,(unsigned char)((int)ps_tdma_byte0_val),(unsigned char)63,(unsigned char)3,(unsigned char)((int)ps_tdma_byte3_val),(unsigned char)16);
      #line 1367 
      break;
      #line 1368 
      case 122: 
                #line 1368 
      ;
      #line 1369 
      halbtc8723b1ant_set_fw_ps_tdma(btcoexist,(unsigned char)((int)ps_tdma_byte0_val),(unsigned char)37,(unsigned char)3,(unsigned char)((int)ps_tdma_byte3_val),(unsigned char)16);
      #line 1372 
      break;
      #line 1373 
      case 132: 
                #line 1373 
      ;
      #line 1374 
      halbtc8723b1ant_set_fw_ps_tdma(btcoexist,(unsigned char)((int)ps_tdma_byte0_val),(unsigned char)37,(unsigned char)3,(unsigned char)((int)ps_tdma_byte3_val),(unsigned char)((int)ps_tdma_byte4_val));
      #line 1377 
      break;
      #line 1378 
      case 133: 
                #line 1378 
      ;
      #line 1379 
      halbtc8723b1ant_set_fw_ps_tdma(btcoexist,(unsigned char)((int)ps_tdma_byte0_val),(unsigned char)37,(unsigned char)3,(unsigned char)((int)ps_tdma_byte3_val),(unsigned char)17);
      #line 1382 
      break;
    }
  else 
    #line 1386 
    switch ((int)type) {
      #line 1387 
      case 8: 
              #line 1387 
      ;
      #line 1388 
      halbtc8723b1ant_set_fw_ps_tdma(btcoexist,(unsigned char)8,(unsigned char)0,(unsigned char)0,(unsigned char)0,(unsigned char)0);
      #line 1390 
      halbtc8723b1ant_set_ant_path(btcoexist,(unsigned char)2,(_Bool)1,(_Bool)0,(_Bool)0);
      #line 1394 
      break;
      #line 1395 
      case 0: 
              #line 1395 
      ;
      #line 1396 
      default: 
               #line 1396 
      ;
      #line 1398 
      halbtc8723b1ant_set_fw_ps_tdma(btcoexist,(unsigned char)0,(unsigned char)0,(unsigned char)0,(unsigned char)0,(unsigned char)0);
      #line 1400 
      break;
      #line 1401 
      case 1: 
              #line 1401 
      ;
      #line 1402 
      halbtc8723b1ant_set_fw_ps_tdma(btcoexist,(unsigned char)0,(unsigned char)0,(unsigned char)0,(unsigned char)72,(unsigned char)0);
      #line 1404 
      break;
    }
  #line 1407 
  rssi_adjust_val = (unsigned char)0U;
  #line 1408 
  (*(btcoexist->btc_set))((void *)btcoexist,(unsigned char)17,(void *)(& rssi_adjust_val));
  #line 1413 
  coex_dm->pre_ps_tdma_on = coex_dm->cur_ps_tdma_on;
  #line 1414 
  coex_dm->pre_ps_tdma = coex_dm->cur_ps_tdma;
  #line 1415 
  return;
}

#line 1418  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.c"
static void btc8723b1ant_tdma_dur_adj_for_acl(struct btc_coexist *btcoexist, u8 wifi_status)
{
  #line 1422 
  s32 up;
  #line 1422 
  s32 dn;
  #line 1422 
  s32 m;
  #line 1422 
  s32 n;
  #line 1422 
  s32 wait_count;
  #line 1426 
  s32 result;
  #line 1421 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 1427 
  u8 retry_count = (unsigned char)0U;
  #line 1429 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], TdmaDurationAdjustForAcl()\n");
  #line 1432 
  if ((unsigned int)wifi_status + 255U <= 2U) {
    #line 1436 
    if ((unsigned int)coex_dm->cur_ps_tdma + 255U > 2U && (unsigned int)coex_dm->cur_ps_tdma != 9U) {
      #line 1438 
      halbtc8723b1ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)9);
      #line 1440 
      coex_dm->ps_tdma_du_adj_type = (unsigned char)9U;
      #line 1442 
      up = 0;
      #line 1443 
      dn = 0;
      #line 1444 
      m = 1;
      #line 1445 
      n = 3;
      #line 1446 
      result = 0;
      #line 1447 
      wait_count = 0;
    }
    #line 1449 
    return;
  }
  #line 1452 
  if (! coex_dm->auto_tdma_adjust) {
    #line 1453 
    coex_dm->auto_tdma_adjust = (_Bool)1;
    #line 1454 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], first run TdmaDurationAdjust()!!\n");
    #line 1457 
    halbtc8723b1ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)2);
    #line 1458 
    coex_dm->ps_tdma_du_adj_type = (unsigned char)2U;
    #line 1460 
    up = 0;
    #line 1461 
    dn = 0;
    #line 1462 
    m = 1;
    #line 1463 
    n = 3;
    #line 1464 
    result = 0;
    #line 1465 
    wait_count = 0;
  }
  else {
    #line 1468 
    retry_count = coex_sta->bt_retry_cnt;
    #line 1470 
    if (coex_sta->low_priority_tx > 1050U || coex_sta->low_priority_rx > 1250U) 
      #line 1472 
      retry_count = (u8)((int)retry_count + 1);
    #line 1474 
    result = 0;
    #line 1475 
    wait_count ++;
    #line 1477 
    if ((unsigned int)retry_count == 0U) {
      #line 1478 
      up ++;
      #line 1479 
      dn --;
      #line 1481 
      if (dn <= 0) 
                   #line 1482 
                   dn = 0;
      #line 1484 
      if (up >= n) {
        #line 1488 
        wait_count = 0;
        #line 1489 
        n = 3;
        #line 1490 
        up = 0;
        #line 1491 
        dn = 0;
        #line 1492 
        result = 1;
        #line 1493 
        _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Increase wifi duration!!\n");
      }
    }
    else 
      #line 1496 
      if ((unsigned int)retry_count <= 3U) {
        #line 1498 
        up --;
        #line 1499 
        dn ++;
        #line 1501 
        if (up <= 0) 
                     #line 1502 
                     up = 0;
        #line 1504 
        if (dn == 2) {
          #line 1508 
          if (wait_count <= 2) 
                               #line 1510 
                               m ++; else 
                                          #line 1512 
                                          m = 1;
          #line 1514 
          if (m > 19) 
                      #line 1519 
                      m = 20;
          #line 1521 
          n = m * 3;
          #line 1522 
          up = 0;
          #line 1523 
          dn = 0;
          #line 1524 
          wait_count = 0;
          #line 1525 
          result = -1;
          #line 1526 
          _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Decrease wifi duration for retryCounter<3!!\n");
        }
      }
      else {
        #line 1533 
        if (wait_count == 1) 
                             #line 1535 
                             m ++; else 
                                        #line 1537 
                                        m = 1;
        #line 1539 
        if (m > 19) 
                    #line 1544 
                    m = 20;
        #line 1546 
        n = m * 3;
        #line 1547 
        up = 0;
        #line 1548 
        dn = 0;
        #line 1549 
        wait_count = 0;
        #line 1550 
        result = -1;
        #line 1551 
        _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Decrease wifi duration for retryCounter>3!!\n");
      }
    #line 1555 
    if (result == -1) {
      #line 1556 
      if ((unsigned int)coex_dm->cur_ps_tdma == 1U) {
        #line 1557 
        halbtc8723b1ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)2);
        #line 1559 
        coex_dm->ps_tdma_du_adj_type = (unsigned char)2U;
      }
      else 
        #line 1560 
        if ((unsigned int)coex_dm->cur_ps_tdma == 2U) {
          #line 1561 
          halbtc8723b1ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)9);
          #line 1563 
          coex_dm->ps_tdma_du_adj_type = (unsigned char)9U;
        }
        else 
          #line 1564 
          if ((unsigned int)coex_dm->cur_ps_tdma == 9U) {
            #line 1565 
            halbtc8723b1ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)11);
            #line 1567 
            coex_dm->ps_tdma_du_adj_type = (unsigned char)11U;
          }
    }
    else 
      #line 1569 
      if (result == 1) 
        #line 1570 
        if ((unsigned int)coex_dm->cur_ps_tdma == 11U) {
          #line 1571 
          halbtc8723b1ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)9);
          #line 1573 
          coex_dm->ps_tdma_du_adj_type = (unsigned char)9U;
        }
        else 
          #line 1574 
          if ((unsigned int)coex_dm->cur_ps_tdma == 9U) {
            #line 1575 
            halbtc8723b1ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)2);
            #line 1577 
            coex_dm->ps_tdma_du_adj_type = (unsigned char)2U;
          }
          else 
            #line 1578 
            if ((unsigned int)coex_dm->cur_ps_tdma == 2U) {
              #line 1579 
              halbtc8723b1ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)1);
              #line 1581 
              coex_dm->ps_tdma_du_adj_type = (unsigned char)1U;
            }
    #line 1585 
    if (((unsigned int)coex_dm->cur_ps_tdma + 255U > 1U && (unsigned int)coex_dm->cur_ps_tdma != 9U) && (unsigned int)coex_dm->cur_ps_tdma != 11U) 
      #line 1588 
      halbtc8723b1ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)((int)coex_dm->ps_tdma_du_adj_type));
  }
  #line 1591 
  return;
}

#line 1594  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.c"
static void halbtc8723b1ant_ps_tdma_chk_pwr_save(struct btc_coexist *btcoexist, bool new_ps_state)
{
  #line 1597 
  u8 lps_mode = (unsigned char)0U;
  #line 1599 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)44,(void *)(& lps_mode));
  #line 1601 
  if ((unsigned int)lps_mode != 0U) {
    #line 1603 
    if (! ((int)new_ps_state != 0)) 
                                    #line 1607 
                                    halbtc8723b1ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)0,(unsigned char)0);
  }
  else 
    #line 1612 
    if ((int)new_ps_state != 0) 
                                #line 1614 
                                halbtc8723b1ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)0,(unsigned char)0);
  #line 1619 
  return;
}

#line 1622  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.c"
static void halbtc8723b1ant_power_save_state(struct btc_coexist *btcoexist, u8 ps_type, u8 lps_val, u8 rpwm_val)
{
  #line 1626 
  bool low_pwr_disable = (_Bool)0;
  #line 1628 
  switch ((int)ps_type) {
    #line 1629 
    case 0: 
            #line 1629 
    ;
    #line 1631 
    low_pwr_disable = (_Bool)0;
    #line 1632 
    (*(btcoexist->btc_set))((void *)btcoexist,(unsigned char)28,(void *)(& low_pwr_disable));
    #line 1634 
    (*(btcoexist->btc_set))((void *)btcoexist,(unsigned char)24,(void *)0);
    #line 1635 
    coex_sta->force_lps_on = (_Bool)0;
    #line 1636 
    break;
    #line 1637 
    case 1: 
            #line 1637 
    ;
    #line 1638 
    halbtc8723b1ant_ps_tdma_chk_pwr_save(btcoexist,(_Bool)1);
    #line 1639 
    halbtc8723b1ant_lps_rpwm(btcoexist,(_Bool)0,(unsigned char)((int)lps_val),(unsigned char)((int)rpwm_val));
    #line 1642 
    low_pwr_disable = (_Bool)1;
    #line 1643 
    (*(btcoexist->btc_set))((void *)btcoexist,(unsigned char)28,(void *)(& low_pwr_disable));
    #line 1646 
    (*(btcoexist->btc_set))((void *)btcoexist,(unsigned char)23,(void *)0);
    #line 1647 
    coex_sta->force_lps_on = (_Bool)1;
    #line 1648 
    break;
    #line 1649 
    case 2: 
            #line 1649 
    ;
    #line 1650 
    halbtc8723b1ant_ps_tdma_chk_pwr_save(btcoexist,(_Bool)0);
    #line 1651 
    (*(btcoexist->btc_set))((void *)btcoexist,(unsigned char)22,(void *)0);
    #line 1652 
    coex_sta->force_lps_on = (_Bool)0;
    #line 1653 
    break;
    #line 1654 
    default: 
             #line 1654 
    ;
    #line 1655 
    break;
  }
  #line 1657 
  return;
}

#line 1659  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.c"
static void halbtc8723b1ant_action_wifi_only(struct btc_coexist *btcoexist)
{
  #line 1661 
  halbtc8723b1ant_coex_table_with_type(btcoexist,(_Bool)1,(unsigned char)0);
  #line 1662 
  halbtc8723b1ant_ps_tdma(btcoexist,(_Bool)1,(_Bool)0,(unsigned char)8);
  #line 1663 
  halbtc8723b1ant_set_ant_path(btcoexist,(unsigned char)2,(_Bool)1,(_Bool)0,(_Bool)0);
  #line 1664 
  return;
}

#line 1668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.c"
static void halbtc8723b1ant_monitor_bt_enable_disable(struct btc_coexist *btcoexist)
{
  #line 1672 
  u32 bt_disable_cnt;
  #line 1671 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 1673 
  bool bt_active = (_Bool)1;
  #line 1673 
  bool bt_disabled = (_Bool)0;
  #line 1675 
  if (((coex_sta->high_priority_tx == 0U && coex_sta->high_priority_rx == 0U) && coex_sta->low_priority_tx == 0U) && coex_sta->low_priority_rx == 0U) 
    #line 1678 
    bt_active = (_Bool)0;
  #line 1679 
  if (((coex_sta->high_priority_tx == 65535U && coex_sta->high_priority_rx == 65535U) && coex_sta->low_priority_tx == 65535U) && coex_sta->low_priority_rx == 65535U) 
    #line 1683 
    bt_active = (_Bool)0;
  #line 1684 
  if ((int)bt_active != 0) {
    #line 1685 
    bt_disable_cnt = 0U;
    #line 1686 
    bt_disabled = (_Bool)0;
  }
  else {
    #line 1688 
    bt_disable_cnt ++;
    #line 1689 
    if (bt_disable_cnt > 1U) 
                             #line 1690 
                             bt_disabled = (_Bool)1;
  }
  #line 1692 
  if ((int)coex_sta->bt_disabled != (int)bt_disabled) {
    #line 1693 
    char *tmp;
    #line 1693 
    char *tmp_0;
    #line 1693 
    if ((int)bt_disabled != 0) 
                               #line 1693 
                               tmp = (char *)"disabled"; else 
                                                              #line 1693 
                                                              tmp = (char *)"enabled";
    #line 1693 
    if ((int)coex_sta->bt_disabled != 0) 
                                         #line 1693 
                                         tmp_0 = (char *)"disabled"; else 
                                                                    #line 1693 
                                                                    tmp_0 = (char *)"enabled";
    #line 1693 
    ;
    #line 1693 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BT is from %s to %s!!\n",tmp_0,tmp);
    #line 1698 
    coex_sta->bt_disabled = bt_disabled;
    #line 1699 
    (*(btcoexist->btc_set))((void *)btcoexist,(unsigned char)0,(void *)(& bt_disabled));
    #line 1701 
    if ((int)bt_disabled != 0) {
      #line 1702 
      halbtc8723b1ant_action_wifi_only(btcoexist);
      #line 1703 
      (*(btcoexist->btc_set))((void *)btcoexist,(unsigned char)22,(void *)0);
      #line 1705 
      (*(btcoexist->btc_set))((void *)btcoexist,(unsigned char)24,(void *)0);
    }
  }
  #line 1708 
  return;
}

#line 1717  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.c"
static void halbtc8723b1ant_action_bt_whck_test(struct btc_coexist *btcoexist)
{
  #line 1719 
  halbtc8723b1ant_power_save_state(btcoexist,(unsigned char)0,(unsigned char)0,(unsigned char)0);
  #line 1722 
  halbtc8723b1ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)0,(unsigned char)8);
  #line 1723 
  halbtc8723b1ant_set_ant_path(btcoexist,(unsigned char)2,(_Bool)0,(_Bool)0,(_Bool)0);
  #line 1725 
  halbtc8723b1ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)0);
  #line 1726 
  return;
}

#line 1728  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.c"
static void halbtc8723b1ant_action_wifi_multiport(struct btc_coexist *btcoexist)
{
  #line 1730 
  halbtc8723b1ant_power_save_state(btcoexist,(unsigned char)0,(unsigned char)0,(unsigned char)0);
  #line 1733 
  halbtc8723b1ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)0,(unsigned char)8);
  #line 1734 
  halbtc8723b1ant_set_ant_path(btcoexist,(unsigned char)2,(_Bool)0,(_Bool)0,(_Bool)0);
  #line 1736 
  halbtc8723b1ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)2);
  #line 1737 
  return;
}

#line 1739  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.c"
static void halbtc8723b1ant_action_hs(struct btc_coexist *btcoexist)
{
  #line 1741 
  halbtc8723b1ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)5);
  #line 1742 
  halbtc8723b1ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)2);
  #line 1743 
  return;
}

#line 1745  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.c"
static void halbtc8723b1ant_action_bt_inquiry(struct btc_coexist *btcoexist)
{
  #line 1747 
  struct btc_bt_link_info *bt_link_info = & btcoexist->bt_link_info;
  #line 1748 
  bool wifi_connected = (_Bool)0;
  #line 1748 
  bool ap_enable = (_Bool)0;
  #line 1749 
  bool wifi_busy = (_Bool)0;
  #line 1749 
  bool bt_busy = (_Bool)0;
  #line 1751 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)14,(void *)(& ap_enable));
  #line 1753 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)2,(void *)(& wifi_connected));
  #line 1755 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)4,(void *)(& wifi_busy));
  #line 1756 
  (*(btcoexist->btc_set))((void *)btcoexist,(unsigned char)1,(void *)(& bt_busy));
  #line 1758 
  if ((int)coex_sta->bt_abnormal_scan != 0) {
    #line 1759 
    halbtc8723b1ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)33);
    #line 1760 
    halbtc8723b1ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)7);
  }
  else 
    #line 1761 
    if (! wifi_connected && ! coex_sta->wifi_is_high_pri_task) {
      #line 1762 
      halbtc8723b1ant_power_save_state(btcoexist,(unsigned char)0,(unsigned char)0,(unsigned char)0);
      #line 1764 
      halbtc8723b1ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)0,(unsigned char)8);
      #line 1765 
      halbtc8723b1ant_set_ant_path(btcoexist,(unsigned char)2,(_Bool)0,(_Bool)0,(_Bool)0);
      #line 1767 
      halbtc8723b1ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)0);
    }
    else 
      #line 1768 
      if (((int)bt_link_info->sco_exist != 0 || (int)bt_link_info->hid_exist != 0) || (int)bt_link_info->a2dp_exist != 0) {
        #line 1771 
        halbtc8723b1ant_power_save_state(btcoexist,(unsigned char)0,(unsigned char)0,(unsigned char)0);
        #line 1773 
        if ((int)coex_sta->c2h_bt_remote_name_req != 0) 
                                                        #line 1774 
                                                        halbtc8723b1ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)33); else 
                                                                    #line 1777 
                                                                    halbtc8723b1ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)32);
        #line 1780 
        halbtc8723b1ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)4);
      }
      else 
        #line 1781 
        if ((int)bt_link_info->pan_exist != 0 || (int)wifi_busy != 0) {
          #line 1782 
          halbtc8723b1ant_power_save_state(btcoexist,(unsigned char)0,(unsigned char)0,(unsigned char)0);
          #line 1784 
          if ((int)coex_sta->c2h_bt_remote_name_req != 0) 
                                                          #line 1785 
                                                          halbtc8723b1ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)33); else 
                                                                    #line 1788 
                                                                    halbtc8723b1ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)32);
          #line 1791 
          halbtc8723b1ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)4);
        }
        else {
          #line 1793 
          halbtc8723b1ant_power_save_state(btcoexist,(unsigned char)0,(unsigned char)0,(unsigned char)0);
          #line 1795 
          halbtc8723b1ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)0,(unsigned char)8);
          #line 1796 
          halbtc8723b1ant_set_ant_path(btcoexist,(unsigned char)2,(_Bool)0,(_Bool)0,(_Bool)0);
          #line 1798 
          halbtc8723b1ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)7);
        }
  #line 1800 
  return;
}

#line 1802  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.c"
static void btc8723b1ant_act_bt_sco_hid_only_busy(struct btc_coexist *btcoexist, u8 wifi_status)
{
  #line 1805 
  struct btc_bt_link_info *bt_link_info = & btcoexist->bt_link_info;
  #line 1806 
  bool wifi_connected = (_Bool)0;
  #line 1808 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)2,(void *)(& wifi_connected));
  #line 1812 
  if ((int)bt_link_info->sco_exist != 0) {
    #line 1813 
    halbtc8723b1ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)5);
    #line 1814 
    halbtc8723b1ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)5);
  }
  else {
    #line 1817 
    halbtc8723b1ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)6);
    #line 1818 
    halbtc8723b1ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)5);
  }
  #line 1820 
  return;
}

#line 1822  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.c"
static void halbtc8723b1ant_action_wifi_connected_bt_acl_busy(struct btc_coexist *btcoexist, u8 wifi_status)
{
  #line 1826 
  struct btc_bt_link_info *bt_link_info = & btcoexist->bt_link_info;
  #line 1828 
  if (coex_sta->low_priority_rx > 949U && ! coex_sta->under_ips) 
                                                                 #line 1829 
                                                                 bt_link_info->slave_role = (_Bool)1; else 
                                                                    #line 1831 
                                                                    bt_link_info->slave_role = (_Bool)0;
  #line 1833 
  if ((int)bt_link_info->hid_only != 0) {
    #line 1834 
    btc8723b1ant_act_bt_sco_hid_only_busy(btcoexist,(unsigned char)((int)wifi_status));
    #line 1835 
    coex_dm->auto_tdma_adjust = (_Bool)0;
    #line 1836 
    return;
  }
  else 
    #line 1837 
    if ((int)bt_link_info->a2dp_only != 0) 
      #line 1838 
      if ((unsigned int)wifi_status == 4U) {
        #line 1839 
        halbtc8723b1ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)32);
        #line 1841 
        halbtc8723b1ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)4);
        #line 1843 
        coex_dm->auto_tdma_adjust = (_Bool)0;
      }
      else {
        #line 1845 
        btc8723b1ant_tdma_dur_adj_for_acl(btcoexist,(unsigned char)((int)wifi_status));
        #line 1847 
        halbtc8723b1ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)1);
        #line 1849 
        coex_dm->auto_tdma_adjust = (_Bool)1;
      }
    else 
      #line 1851 
      if (((int)bt_link_info->a2dp_exist != 0 || (int)bt_link_info->hid_exist != 0 && (int)bt_link_info->a2dp_exist != 0) && (int)bt_link_info->pan_exist != 0) {
        #line 1855 
        halbtc8723b1ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)13);
        #line 1856 
        halbtc8723b1ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)4);
        #line 1857 
        coex_dm->auto_tdma_adjust = (_Bool)0;
      }
      else 
        #line 1858 
        if ((int)bt_link_info->hid_exist != 0 && (int)bt_link_info->a2dp_exist != 0) {
          #line 1860 
          halbtc8723b1ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)14);
          #line 1861 
          coex_dm->auto_tdma_adjust = (_Bool)0;
          #line 1863 
          halbtc8723b1ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)4);
        }
        else 
          #line 1864 
          if ((int)bt_link_info->pan_only != 0 || (int)bt_link_info->hid_exist != 0 && (int)bt_link_info->pan_exist != 0) {
            #line 1867 
            halbtc8723b1ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)3);
            #line 1868 
            halbtc8723b1ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)4);
            #line 1869 
            coex_dm->auto_tdma_adjust = (_Bool)0;
          }
          else {
            #line 1872 
            halbtc8723b1ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)33);
            #line 1873 
            halbtc8723b1ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)4);
            #line 1874 
            coex_dm->auto_tdma_adjust = (_Bool)0;
          }
  #line 1876 
  return;
}

#line 1878  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.c"
static void btc8723b1ant_action_wifi_not_conn(struct btc_coexist *btcoexist)
{
  #line 1881 
  halbtc8723b1ant_power_save_state(btcoexist,(unsigned char)0,(unsigned char)0,(unsigned char)0);
  #line 1885 
  halbtc8723b1ant_ps_tdma(btcoexist,(_Bool)1,(_Bool)0,(unsigned char)8);
  #line 1886 
  halbtc8723b1ant_set_ant_path(btcoexist,(unsigned char)2,(_Bool)0,(_Bool)0,(_Bool)0);
  #line 1888 
  halbtc8723b1ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)0);
  #line 1889 
  return;
}

#line 1892  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.c"
static void btc8723b1ant_action_wifi_not_conn_scan(struct btc_coexist *btcoexist)
{
  #line 1894 
  struct btc_bt_link_info *bt_link_info = & btcoexist->bt_link_info;
  #line 1896 
  halbtc8723b1ant_power_save_state(btcoexist,(unsigned char)0,(unsigned char)0,(unsigned char)0);
  #line 1900 
  if ((unsigned int)coex_dm->bt_status == 3U) 
    #line 1901 
    if ((int)bt_link_info->a2dp_exist != 0) {
      #line 1902 
      halbtc8723b1ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)32);
      #line 1904 
      halbtc8723b1ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)4);
    }
    else 
      #line 1906 
      if ((int)bt_link_info->a2dp_exist != 0) {
        #line 1907 
        halbtc8723b1ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)22);
        #line 1909 
        halbtc8723b1ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)4);
      }
      else {
        #line 1912 
        halbtc8723b1ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)20);
        #line 1914 
        halbtc8723b1ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)1);
      }
  else 
    #line 1917 
    if ((unsigned int)coex_dm->bt_status + 252U <= 1U) 
                                                       #line 1919 
                                                       btc8723b1ant_act_bt_sco_hid_only_busy(btcoexist,(unsigned char)2);
    else {
      #line 1922 
      halbtc8723b1ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)0,(unsigned char)8);
      #line 1923 
      halbtc8723b1ant_set_ant_path(btcoexist,(unsigned char)2,(_Bool)0,(_Bool)0,(_Bool)0);
      #line 1925 
      halbtc8723b1ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)2);
    }
  #line 1927 
  return;
}

#line 1930  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.c"
static void btc8723b1ant_act_wifi_not_conn_asso_auth(struct btc_coexist *btcoexist)
{
  #line 1932 
  struct btc_bt_link_info *bt_link_info = & btcoexist->bt_link_info;
  #line 1934 
  halbtc8723b1ant_power_save_state(btcoexist,(unsigned char)0,(unsigned char)0,(unsigned char)0);
  #line 1938 
  if (((int)bt_link_info->sco_exist != 0 || (int)bt_link_info->hid_exist != 0) || (int)bt_link_info->a2dp_exist != 0) {
    #line 1940 
    halbtc8723b1ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)32);
    #line 1941 
    halbtc8723b1ant_coex_table_with_type(btcoexist,(_Bool)1,(unsigned char)4);
  }
  else 
    #line 1942 
    if ((int)bt_link_info->pan_exist != 0) {
      #line 1943 
      halbtc8723b1ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)20);
      #line 1944 
      halbtc8723b1ant_coex_table_with_type(btcoexist,(_Bool)1,(unsigned char)4);
    }
    else {
      #line 1946 
      halbtc8723b1ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)0,(unsigned char)8);
      #line 1947 
      halbtc8723b1ant_set_ant_path(btcoexist,(unsigned char)2,(_Bool)0,(_Bool)0,(_Bool)0);
      #line 1949 
      halbtc8723b1ant_coex_table_with_type(btcoexist,(_Bool)1,(unsigned char)2);
    }
  #line 1951 
  return;
}

#line 1953  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.c"
static void btc8723b1ant_action_wifi_conn_scan(struct btc_coexist *btcoexist)
{
  #line 1955 
  struct btc_bt_link_info *bt_link_info = & btcoexist->bt_link_info;
  #line 1957 
  halbtc8723b1ant_power_save_state(btcoexist,(unsigned char)0,(unsigned char)0,(unsigned char)0);
  #line 1961 
  if ((unsigned int)coex_dm->bt_status == 3U) 
    #line 1962 
    if ((int)bt_link_info->a2dp_exist != 0) {
      #line 1963 
      halbtc8723b1ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)32);
      #line 1965 
      halbtc8723b1ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)4);
    }
    else 
      #line 1967 
      if ((int)bt_link_info->a2dp_exist != 0 && (int)bt_link_info->pan_exist != 0) {
        #line 1969 
        halbtc8723b1ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)22);
        #line 1971 
        halbtc8723b1ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)4);
      }
      else {
        #line 1974 
        halbtc8723b1ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)20);
        #line 1976 
        halbtc8723b1ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)4);
      }
  else 
    #line 1979 
    if ((unsigned int)coex_dm->bt_status + 252U <= 1U) 
                                                       #line 1981 
                                                       btc8723b1ant_act_bt_sco_hid_only_busy(btcoexist,(unsigned char)2);
    else {
      #line 1984 
      halbtc8723b1ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)0,(unsigned char)8);
      #line 1985 
      halbtc8723b1ant_set_ant_path(btcoexist,(unsigned char)2,(_Bool)0,(_Bool)0,(_Bool)0);
      #line 1987 
      halbtc8723b1ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)2);
    }
  #line 1989 
  return;
}

#line 1991  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.c"
static void halbtc8723b1ant_action_wifi_connected_special_packet(struct btc_coexist *btcoexist)
{
  #line 1994 
  struct btc_bt_link_info *bt_link_info = & btcoexist->bt_link_info;
  #line 1995 
  bool wifi_busy = (_Bool)0;
  #line 1997 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)4,(void *)(& wifi_busy));
  #line 2000 
  if ((int)wifi_busy != 0 && ((int)bt_link_info->pan_exist != 0 || (unsigned int)coex_sta->num_of_profile > 1U)) 
    #line 2002 
    return;
  #line 2004 
  halbtc8723b1ant_power_save_state(btcoexist,(unsigned char)0,(unsigned char)0,(unsigned char)0);
  #line 2008 
  if ((int)bt_link_info->sco_exist != 0 || (int)bt_link_info->hid_exist != 0) {
    #line 2009 
    halbtc8723b1ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)32);
    #line 2010 
    halbtc8723b1ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)5);
  }
  else 
    #line 2011 
    if ((int)bt_link_info->a2dp_exist != 0) {
      #line 2012 
      halbtc8723b1ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)32);
      #line 2013 
      halbtc8723b1ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)4);
    }
    else 
      #line 2014 
      if ((int)bt_link_info->pan_exist != 0) {
        #line 2015 
        halbtc8723b1ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)20);
        #line 2016 
        halbtc8723b1ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)4);
      }
      else {
        #line 2018 
        halbtc8723b1ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)0,(unsigned char)8);
        #line 2019 
        halbtc8723b1ant_set_ant_path(btcoexist,(unsigned char)2,(_Bool)0,(_Bool)0,(_Bool)0);
        #line 2021 
        halbtc8723b1ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)2);
      }
  #line 2023 
  return;
}

#line 2025  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.c"
static void halbtc8723b1ant_action_wifi_connected(struct btc_coexist *btcoexist)
{
  #line 2027 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 2028 
  bool wifi_busy = (_Bool)0;
  #line 2029 
  bool scan = (_Bool)0;
  #line 2029 
  bool link = (_Bool)0;
  #line 2029 
  bool roam = (_Bool)0;
  #line 2030 
  bool under_4way = (_Bool)0;
  #line 2030 
  bool ap_enable = (_Bool)0;
  #line 2032 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], CoexForWifiConnect()===>\n");
  #line 2035 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)12,(void *)(& under_4way));
  #line 2037 
  if ((int)under_4way != 0) {
    #line 2038 
    halbtc8723b1ant_action_wifi_connected_special_packet(btcoexist);
    #line 2039 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], CoexForWifiConnect(), return for wifi is under 4way<===\n");
    #line 2041 
    return;
  }
  #line 2044 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)5,(void *)(& scan));
  #line 2045 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)6,(void *)(& link));
  #line 2046 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)11,(void *)(& roam));
  #line 2048 
  if (((int)scan != 0 || (int)link != 0) || (int)roam != 0) {
    #line 2049 
    if ((int)scan != 0) 
                        #line 2050 
                        btc8723b1ant_action_wifi_conn_scan(btcoexist); else 
                                                                    #line 2052 
                                                                    halbtc8723b1ant_action_wifi_connected_special_packet(btcoexist);
    #line 2054 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], CoexForWifiConnect(), return for wifi is under scan<===\n");
    #line 2056 
    return;
  }
  #line 2059 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)14,(void *)(& ap_enable));
  #line 2061 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)4,(void *)(& wifi_busy));
  #line 2063 
  if ((! ap_enable && (unsigned int)coex_dm->bt_status == 3U) && ! btcoexist->bt_link_info.hid_only) 
    #line 2066 
    if ((int)btcoexist->bt_link_info.a2dp_only != 0) 
      #line 2067 
      if (! wifi_busy) 
                       #line 2068 
                       halbtc8723b1ant_power_save_state(btcoexist,(unsigned char)0,(unsigned char)0,(unsigned char)0);
      else 
        #line 2072 
        if ((unsigned int)coex_sta->scan_ap_num > 49U) 
                                                       #line 2077 
                                                       halbtc8723b1ant_power_save_state(btcoexist,(unsigned char)0,(unsigned char)0,(unsigned char)0); else 
                                                                    #line 2081 
                                                                    halbtc8723b1ant_power_save_state(btcoexist,(unsigned char)1,(unsigned char)80,(unsigned char)4);
    else 
      #line 2085 
      if ((! coex_sta->pan_exist && ! coex_sta->a2dp_exist) && ! coex_sta->hid_exist) 
        #line 2087 
        halbtc8723b1ant_power_save_state(btcoexist,(unsigned char)0,(unsigned char)0,(unsigned char)0); else 
                                                                    #line 2090 
                                                                    halbtc8723b1ant_power_save_state(btcoexist,(unsigned char)1,(unsigned char)80,(unsigned char)4);
  else 
       #line 2094 
       halbtc8723b1ant_power_save_state(btcoexist,(unsigned char)0,(unsigned char)0,(unsigned char)0);
  #line 2098 
  if (! wifi_busy) 
    #line 2099 
    if ((unsigned int)coex_dm->bt_status == 3U) 
                                                #line 2100 
                                                halbtc8723b1ant_action_wifi_connected_bt_acl_busy(btcoexist,(unsigned char)4);
    else 
      #line 2103 
      if ((unsigned int)coex_dm->bt_status + 252U <= 1U) 
                                                         #line 2107 
                                                         btc8723b1ant_act_bt_sco_hid_only_busy(btcoexist,(unsigned char)4);
      else {
        #line 2110 
        halbtc8723b1ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)0,(unsigned char)8);
        #line 2112 
        halbtc8723b1ant_set_ant_path(btcoexist,(unsigned char)2,(_Bool)0,(_Bool)0,(_Bool)0);
        #line 2115 
        halbtc8723b1ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)2);
      }
  else 
    #line 2119 
    if ((unsigned int)coex_dm->bt_status == 3U) 
                                                #line 2120 
                                                halbtc8723b1ant_action_wifi_connected_bt_acl_busy(btcoexist,(unsigned char)5);
    else 
      #line 2123 
      if ((unsigned int)coex_dm->bt_status + 252U <= 1U) 
                                                         #line 2127 
                                                         btc8723b1ant_act_bt_sco_hid_only_busy(btcoexist,(unsigned char)5);
      else {
        #line 2130 
        halbtc8723b1ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)32);
        #line 2132 
        halbtc8723b1ant_set_ant_path(btcoexist,(unsigned char)2,(_Bool)0,(_Bool)0,(_Bool)0);
        #line 2135 
        halbtc8723b1ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)4);
      }
  #line 2137 
  return;
}

#line 2141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.c"
static void halbtc8723b1ant_run_coexist_mechanism(struct btc_coexist *btcoexist)
{
  #line 2153 
  u32 wifi_bw;
  #line 2143 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 2144 
  struct btc_bt_link_info *bt_link_info = & btcoexist->bt_link_info;
  #line 2145 
  bool wifi_connected = (_Bool)0;
  #line 2145 
  bool bt_hs_on = (_Bool)0;
  #line 2145 
  bool wifi_busy = (_Bool)0;
  #line 2146 
  bool increase_scan_dev_num = (_Bool)0;
  #line 2147 
  bool bt_ctrl_agg_buf_size = (_Bool)0;
  #line 2148 
  bool miracast_plus_bt = (_Bool)0;
  #line 2149 
  u8 agg_buf_size = (unsigned char)5U;
  #line 2150 
  u8 iot_peer = (unsigned char)0U;
  #line 2151 
  u32 wifi_link_status = 0U;
  #line 2152 
  u32 num_of_wifi_link = 0U;
  #line 2155 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], RunCoexistMechanism()===>\n");
  #line 2158 
  if ((int)btcoexist->manual_control != 0) {
    #line 2159 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], RunCoexistMechanism(), return for Manual CTRL <===\n");
    #line 2161 
    return;
  }
  #line 2164 
  if ((int)btcoexist->stop_coex_dm != 0) {
    #line 2165 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], RunCoexistMechanism(), return for Stop Coex DM <===\n");
    #line 2167 
    return;
  }
  #line 2170 
  if ((int)coex_sta->under_ips != 0) {
    #line 2171 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], wifi is under IPS !!!\n");
    #line 2173 
    return;
  }
  #line 2176 
  if ((int)coex_sta->bt_whck_test != 0) {
    #line 2177 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], wifi is under IPS !!!\n");
    #line 2179 
    halbtc8723b1ant_action_bt_whck_test(btcoexist);
    #line 2180 
    return;
  }
  #line 2183 
  if ((unsigned int)coex_dm->bt_status + 253U <= 2U) 
                                                     #line 2186 
                                                     increase_scan_dev_num = (_Bool)1;
  #line 2188 
  (*(btcoexist->btc_set))((void *)btcoexist,(unsigned char)6,(void *)(& increase_scan_dev_num));
  #line 2190 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)2,(void *)(& wifi_connected));
  #line 2192 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)4,(void *)(& wifi_busy));
  #line 2194 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)27,(void *)(& wifi_link_status));
  #line 2196 
  num_of_wifi_link = wifi_link_status >> 16;
  #line 2198 
  if (num_of_wifi_link > 1U || (wifi_link_status & 8U) != 0U) {
    #line 2200 
    if ((int)bt_link_info->bt_link_exist != 0) {
      #line 2201 
      halbtc8723b1ant_limited_tx(btcoexist,(_Bool)0,(unsigned char)1,(unsigned char)1,(unsigned char)0,(unsigned char)1);
      #line 2203 
      miracast_plus_bt = (_Bool)1;
    }
    else {
      #line 2205 
      halbtc8723b1ant_limited_tx(btcoexist,(_Bool)0,(unsigned char)0,(unsigned char)0,(unsigned char)0,(unsigned char)0);
      #line 2207 
      miracast_plus_bt = (_Bool)0;
    }
    #line 2209 
    (*(btcoexist->btc_set))((void *)btcoexist,(unsigned char)8,(void *)(& miracast_plus_bt));
    #line 2211 
    halbtc8723b1ant_limited_rx(btcoexist,(_Bool)0,(_Bool)0,(_Bool)((bool)((int)bt_ctrl_agg_buf_size) != 0),(unsigned char)((int)agg_buf_size));
    #line 2214 
    if (((int)bt_link_info->a2dp_exist != 0 || (int)wifi_busy != 0) && (int)coex_sta->c2h_bt_inquiry_page != 0) 
      #line 2216 
      halbtc8723b1ant_action_bt_inquiry(btcoexist); else 
                                                         #line 2218 
                                                         halbtc8723b1ant_action_wifi_multiport(btcoexist);
    #line 2220 
    return;
  }
  #line 2223 
  miracast_plus_bt = (_Bool)0;
  #line 2224 
  (*(btcoexist->btc_set))((void *)btcoexist,(unsigned char)8,(void *)(& miracast_plus_bt));
  #line 2226 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)24,(void *)(& wifi_bw));
  #line 2228 
  if ((int)bt_link_info->bt_link_exist != 0 && (int)wifi_connected != 0) {
    #line 2229 
    halbtc8723b1ant_limited_tx(btcoexist,(_Bool)0,(unsigned char)1,(unsigned char)1,(unsigned char)0,(unsigned char)1);
    #line 2231 
    (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)43,(void *)(& iot_peer));
    #line 2233 
    if ((unsigned int)iot_peer != 6U && (unsigned int)iot_peer != 3U) {
      #line 2235 
      bool sco_exist = bt_link_info->sco_exist;
      #line 2237 
      halbtc8723b1ant_limited_rx(btcoexist,(_Bool)0,(_Bool)((bool)((int)sco_exist) != 0),(_Bool)0,(unsigned char)5);
    }
    else 
      #line 2241 
      if ((int)bt_link_info->sco_exist != 0) 
                                             #line 2242 
                                             halbtc8723b1ant_limited_rx(btcoexist,(_Bool)0,(_Bool)1,(_Bool)0,(unsigned char)5);
      else 
        #line 2246 
        if (wifi_bw == 2U) 
                           #line 2247 
                           halbtc8723b1ant_limited_rx(btcoexist,(_Bool)0,(_Bool)0,(_Bool)1,(unsigned char)16); else 
                                                                    #line 2251 
                                                                    halbtc8723b1ant_limited_rx(btcoexist,(_Bool)0,(_Bool)0,(_Bool)1,(unsigned char)8);
    #line 2257 
    halbtc8723b1ant_sw_mechanism(btcoexist,(_Bool)1);
  }
  else {
    #line 2259 
    halbtc8723b1ant_limited_tx(btcoexist,(_Bool)0,(unsigned char)0,(unsigned char)0,(unsigned char)0,(unsigned char)0);
    #line 2261 
    halbtc8723b1ant_limited_rx(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,(unsigned char)5);
    #line 2264 
    halbtc8723b1ant_sw_mechanism(btcoexist,(_Bool)0);
  }
  #line 2266 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)0,(void *)(& bt_hs_on));
  #line 2268 
  if ((int)coex_sta->c2h_bt_inquiry_page != 0) {
    #line 2269 
    halbtc8723b1ant_action_bt_inquiry(btcoexist);
    #line 2270 
    return;
  }
  else 
    #line 2271 
    if ((int)bt_hs_on != 0) {
      #line 2272 
      halbtc8723b1ant_action_hs(btcoexist);
      #line 2273 
      return;
    }
  #line 2276 
  if (! wifi_connected) {
    #line 2277 
    bool scan = (_Bool)0;
    #line 2277 
    bool link = (_Bool)0;
    #line 2277 
    bool roam = (_Bool)0;
    #line 2279 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], wifi is non connected-idle !!!\n");
    #line 2282 
    (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)5,(void *)(& scan));
    #line 2283 
    (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)6,(void *)(& link));
    #line 2284 
    (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)11,(void *)(& roam));
    #line 2286 
    if (((int)scan != 0 || (int)link != 0) || (int)roam != 0) 
      #line 2287 
      if ((int)scan != 0) 
                          #line 2288 
                          btc8723b1ant_action_wifi_not_conn_scan(btcoexist); else 
                                                                    #line 2291 
                                                                    btc8723b1ant_act_wifi_not_conn_asso_auth(btcoexist);
    else 
         #line 2294 
         btc8723b1ant_action_wifi_not_conn(btcoexist);
  }
  else 
       #line 2297 
       halbtc8723b1ant_action_wifi_connected(btcoexist);
  #line 2298 
  return;
}

#line 2302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.c"
static void halbtc8723b1ant_init_coex_dm(struct btc_coexist *btcoexist)
{
  #line 2305 
  halbtc8723b1ant_sw_mechanism(btcoexist,(_Bool)0);
  #line 2307 
  coex_sta->pop_event_cnt = 0U;
  #line 2308 
  return;
}

#line 2310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.c"
static void halbtc8723b1ant_init_hw_config(struct btc_coexist *btcoexist, bool backup, bool wifi_only)
{
  #line 2313 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 2314 
  u32 u32tmp = 0U;
  #line 2315 
  u8 u8tmpa = (unsigned char)0U;
  #line 2315 
  u8 u8tmpb = (unsigned char)0U;
  #line 2317 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], 1Ant Init HW Config!!\n");
  #line 2321 
  coex_sta->cut_version = (unsigned char)((unsigned int)((unsigned char)((int)(*(btcoexist->btc_read_1byte))((void *)btcoexist,241U) >> 4)) & 15U);
  #line 2324 
  (*(btcoexist->btc_write_1byte_bitmask))((void *)btcoexist,1360U,8U,(unsigned char)1);
  #line 2327 
  (*(btcoexist->btc_write_1byte))((void *)btcoexist,1936U,5U);
  #line 2330 
  (*(btcoexist->btc_write_1byte))((void *)btcoexist,1912U,1U);
  #line 2331 
  (*(btcoexist->btc_write_1byte_bitmask))((void *)btcoexist,64U,32U,(unsigned char)1);
  #line 2333 
  halbtc8723b1ant_ps_tdma(btcoexist,(_Bool)1,(_Bool)0,(unsigned char)8);
  #line 2336 
  if ((int)wifi_only != 0) 
                           #line 2337 
                           halbtc8723b1ant_set_ant_path(btcoexist,(unsigned char)0,(_Bool)1,(_Bool)1,(_Bool)0); else 
                                                                    #line 2340 
                                                                    halbtc8723b1ant_set_ant_path(btcoexist,(unsigned char)1,(_Bool)1,(_Bool)1,(_Bool)0);
  #line 2344 
  halbtc8723b1ant_coex_table_with_type(btcoexist,(_Bool)1,(unsigned char)0);
  #line 2346 
  u32tmp = (*(btcoexist->btc_read_4byte))((void *)btcoexist,2376U);
  #line 2347 
  u8tmpa = (*(btcoexist->btc_read_1byte))((void *)btcoexist,1893U);
  #line 2348 
  u8tmpb = (*(btcoexist->btc_read_1byte))((void *)btcoexist,103U);
  #line 2350 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"############# [BTCoex], 0x948=0x%x, 0x765=0x%x, 0x67=0x%x\n",u32tmp,(int)u8tmpa,(int)u8tmpb);
  #line 2351 
  return;
}

#line 2358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.c"
void ex_btc8723b1ant_power_on_setting(struct btc_coexist *btcoexist)
{
  #line 2364 
  u32 value;
  #line 2360 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 2361 
  struct btc_board_info *board_info = & btcoexist->board_info;
  #line 2362 
  u8 u8tmp = (unsigned char)0U;
  #line 2363 
  u16 u16tmp = (unsigned short)0U;
  #line 2366 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"xxxxxxxxxxxxxxxx Execute 8723b 1-Ant PowerOn Setting xxxxxxxxxxxxxxxx!!\n");
  #line 2369 
  btcoexist->stop_coex_dm = (_Bool)1;
  #line 2371 
  (*(btcoexist->btc_write_1byte))((void *)btcoexist,103U,32U);
  #line 2374 
  u16tmp = (*(btcoexist->btc_read_2byte))((void *)btcoexist,2U);
  #line 2375 
  (*(btcoexist->btc_write_2byte))((void *)btcoexist,2U,(unsigned short)((int)((unsigned int)u16tmp | 3U)));
  #line 2378 
  (*(btcoexist->btc_write_1byte))((void *)btcoexist,1893U,24U);
  #line 2380 
  (*(btcoexist->btc_write_1byte))((void *)btcoexist,1902U,4U);
  #line 2392 
  if (btcoexist->chip_interface == (unsigned int)BTC_INTF_USB) {
    #line 2394 
    (*(btcoexist->btc_write_4byte))((void *)btcoexist,2376U,0U);
    #line 2396 
    u8tmp = (unsigned char)((unsigned int)u8tmp | 1U);
    #line 2397 
    (*(btcoexist->btc_write_local_reg_1byte))((void *)btcoexist,65032U,(unsigned char)((int)u8tmp));
    #line 2399 
    board_info->btdm_ant_pos = (unsigned char)2U;
  }
  else {
    #line 2402 
    if ((unsigned int)board_info->single_ant_path == 0U) {
      #line 2404 
      (*(btcoexist->btc_write_4byte))((void *)btcoexist,2376U,640U);
      #line 2405 
      board_info->btdm_ant_pos = (unsigned char)1U;
      #line 2406 
      value = 1U;
    }
    else 
      #line 2407 
      if ((unsigned int)board_info->single_ant_path == 1U) {
        #line 2409 
        (*(btcoexist->btc_write_4byte))((void *)btcoexist,2376U,0U);
        #line 2410 
        u8tmp = (unsigned char)((unsigned int)u8tmp | 1U);
        #line 2411 
        board_info->btdm_ant_pos = (unsigned char)2U;
        #line 2412 
        value = 0U;
      }
    #line 2415 
    (*(btcoexist->btc_set))((void *)btcoexist,(unsigned char)14,(void *)(& value));
    #line 2418 
    if (btcoexist->chip_interface == (unsigned int)BTC_INTF_PCI) 
                                                                 #line 2419 
                                                                 (*(btcoexist->btc_write_local_reg_1byte))((void *)btcoexist,900U,(unsigned char)((int)u8tmp));
    else 
      #line 2421 
      if (btcoexist->chip_interface == (unsigned int)BTC_INTF_SDIO) 
                                                                    #line 2422 
                                                                    (*(btcoexist->btc_write_local_reg_1byte))((void *)btcoexist,96U,(unsigned char)((int)u8tmp));
  }
  #line 2424 
  return;
}

#line 2428  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.c"
void ex_btc8723b1ant_init_hwconfig(struct btc_coexist *btcoexist, bool wifi_only)
{
  #line 2431 
  halbtc8723b1ant_init_hw_config(btcoexist,(_Bool)1,(_Bool)((bool)((int)wifi_only) != 0));
  #line 2432 
  btcoexist->stop_coex_dm = (_Bool)0;
  #line 2433 
  return;
}

#line 2435  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.c"
void ex_btc8723b1ant_init_coex_dm(struct btc_coexist *btcoexist)
{
  #line 2437 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 2439 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Coex Mechanism Init!!\n");
  #line 2442 
  btcoexist->stop_coex_dm = (_Bool)0;
  #line 2444 
  halbtc8723b1ant_init_coex_dm(btcoexist);
  #line 2446 
  halbtc8723b1ant_query_bt_info(btcoexist);
  #line 2447 
  return;
}

#line 2449  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.c"
void ex_btc8723b1ant_display_coex_info(struct btc_coexist *btcoexist, struct seq_file *m)
{
  #line 2526 
  char *tmp_2;
  #line 2455 
  u8 u8tmp[4U];
  #line 2455 
  u8 i;
  #line 2455 
  u8 bt_info_ext;
  #line 2456 
  u16 u16tmp[4U];
  #line 2457 
  u32 u32tmp[4U];
  #line 2462 
  u32 wifi_bw;
  #line 2462 
  u32 wifi_traffic_dir;
  #line 2462 
  u32 fa_ofdm;
  #line 2462 
  u32 fa_cck;
  #line 2462 
  u32 wifi_link_status;
  #line 2463 
  u8 wifi_dot11_chnl;
  #line 2463 
  u8 wifi_hs_chnl;
  #line 2483 
  char *tmp;
  #line 2528 
  char *tmp_1;
  #line 2525 
  char *tmp_3;
  #line 2525 
  char *tmp_4;
  #line 2543 
  char *tmp_8;
  #line 2562 
  char *tmp_9;
  #line 2575 
  char *tmp_10;
  #line 2574 
  char *tmp_11;
  #line 2452 
  struct btc_board_info *board_info = & btcoexist->board_info;
  #line 2453 
  struct btc_stack_info *stack_info = & btcoexist->stack_info;
  #line 2454 
  struct btc_bt_link_info *bt_link_info = & btcoexist->bt_link_info;
  #line 2455 
  u8 pstdmacase = (unsigned char)0U;
  #line 2458 
  bool roam = (_Bool)0;
  #line 2458 
  bool scan = (_Bool)0;
  #line 2459 
  bool link = (_Bool)0;
  #line 2459 
  bool wifi_under_5g = (_Bool)0;
  #line 2460 
  bool bt_hs_on = (_Bool)0;
  #line 2460 
  bool wifi_busy = (_Bool)0;
  #line 2461 
  s32 wifi_rssi = 0;
  #line 2461 
  s32 bt_hs_rssi = 0;
  #line 2464 
  u32 fw_ver = 0U;
  #line 2464 
  u32 bt_patch_ver = 0U;
  #line 2466 
  seq_puts(m,(char *)"\n ============[BT Coexist info]============");
  #line 2468 
  if ((int)btcoexist->manual_control != 0) {
    #line 2469 
    seq_puts(m,(char *)"\n ============[Under Manual Control]==========");
    #line 2470 
    seq_puts(m,(char *)"\n ==========================================");
  }
  #line 2472 
  if ((int)btcoexist->stop_coex_dm != 0) {
    #line 2473 
    seq_puts(m,(char *)"\n ============[Coex is STOPPED]============");
    #line 2474 
    seq_puts(m,(char *)"\n ==========================================");
  }
  #line 2477 
  seq_printf(m,(char *)"\n %-35s = %d/ %d/ %d",(char *)"Ant PG Num/ Ant Mech/ Ant Pos:",(int)board_info->pg_ant_num,(int)board_info->btdm_ant_num,(int)board_info->btdm_ant_pos);
  #line 2482 
  ;
  #line 2483 
  if ((int)stack_info->profile_notified != 0) 
                                              #line 2483 
                                              tmp = (char *)"Yes"; else 
                                                                    #line 2483 
                                                                    tmp = (char *)"No";
  #line 2482 
  ;
  #line 2482 
  seq_printf(m,(char *)"\n %-35s = %s / %d",(char *)"BT stack/ hci ext ver",tmp,(int)stack_info->hci_version);
  #line 2487 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)28,(void *)(& bt_patch_ver));
  #line 2488 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)26,(void *)(& fw_ver));
  #line 2489 
  seq_printf(m,(char *)"\n %-35s = %d_%x/ 0x%x/ 0x%x(%d)",(char *)"CoexVer/ FwVer/ PatchVer",glcoex_ver_date_8723b_1ant,glcoex_ver_8723b_1ant,fw_ver,bt_patch_ver,bt_patch_ver);
  #line 2494 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)0,(void *)(& bt_hs_on));
  #line 2495 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)37,(void *)(& wifi_dot11_chnl));
  #line 2497 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)39,(void *)(& wifi_hs_chnl));
  #line 2498 
  seq_printf(m,(char *)"\n %-35s = %d / %d(%d)",(char *)"Dot11 channel / HsChnl(HsMode)",(int)wifi_dot11_chnl,(int)wifi_hs_chnl,(int)bt_hs_on);
  #line 2502 
  seq_printf(m,(char *)"\n %-35s = %3ph ",(char *)"H2C Wifi inform bt chnl Info",(u8 *)(& coex_dm->wifi_chnl_info));
  #line 2506 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)22,(void *)(& wifi_rssi));
  #line 2507 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)23,(void *)(& bt_hs_rssi));
  #line 2508 
  seq_printf(m,(char *)"\n %-35s = %d/ %d",(char *)"Wifi rssi/ HS rssi",wifi_rssi,bt_hs_rssi);
  #line 2511 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)5,(void *)(& scan));
  #line 2512 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)6,(void *)(& link));
  #line 2513 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)11,(void *)(& roam));
  #line 2514 
  seq_printf(m,(char *)"\n %-35s = %d/ %d/ %d ",(char *)"Wifi link/ roam/ scan",(int)link,(int)roam,(int)scan);
  #line 2517 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)13,(void *)(& wifi_under_5g));
  #line 2519 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)24,(void *)(& wifi_bw));
  #line 2520 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)4,(void *)(& wifi_busy));
  #line 2521 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)25,(void *)(& wifi_traffic_dir));
  #line 2528 
  if (! wifi_busy) 
                   #line 2528 
                   tmp_1 = (char *)"idle";
  else {
    #line 2528 
    char *tmp_0;
    #line 2528 
    if (wifi_traffic_dir == 0U) 
                                #line 2528 
                                tmp_0 = (char *)"uplink"; else 
                                                               #line 2528 
                                                               tmp_0 = (char *)"downlink";
    #line 2528 
    tmp_1 = tmp_0;
  }
  #line 2525 
  if (wifi_bw != 0U) {
    #line 2526 
    if (wifi_bw == 2U) 
                       #line 2526 
                       tmp_2 = (char *)"HT40"; else 
                                                    #line 2526 
                                                    tmp_2 = (char *)"HT20";
    #line 2525 
    tmp_3 = tmp_2;
  }
  else 
       #line 2525 
       tmp_3 = (char *)"Legacy";
  #line 2525 
  if ((int)wifi_under_5g != 0) 
                               #line 2525 
                               tmp_4 = (char *)"5G"; else 
                                                          #line 2525 
                                                          tmp_4 = (char *)"2.4G";
  #line 2524 
  ;
  #line 2524 
  seq_printf(m,(char *)"\n %-35s = %s / %s/ %s ",(char *)"Wifi status",tmp_4,tmp_3,tmp_1);
  #line 2532 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)27,(void *)(& wifi_link_status));
  #line 2534 
  seq_printf(m,(char *)"\n %-35s = %d/ %d/ %d/ %d/ %d",(char *)"sta/vwifi/hs/p2pGo/p2pGc",(int)wifi_link_status & 1,(int)(wifi_link_status >> 1) & 1,(int)(wifi_link_status >> 2) & 1,(int)(wifi_link_status >> 3) & 1,(int)(wifi_link_status >> 4) & 1);
  #line 2542 
  ;
  #line 2542 
  ;
  #line 2543 
  if (coex_sta->bt_disabled) 
                             #line 2543 
                             tmp_8 = (char *)"disabled";
  else {
    #line 2544 
    char *tmp_7;
    #line 2544 
    if (coex_sta->c2h_bt_inquiry_page) 
                                       #line 2544 
                                       tmp_7 = (char *)"inquiry/page scan";
    else {
      #line 2546 
      char *tmp_5;
      #line 2545 
      char *tmp_6;
      #line 2545 
      if ((unsigned int)coex_dm->bt_status != 0U) {
        #line 2546 
        if ((unsigned int)coex_dm->bt_status == 1U) 
                                                    #line 2546 
                                                    tmp_5 = (char *)"connected-idle"; else 
                                                                    #line 2546 
                                                                    tmp_5 = (char *)"busy";
        #line 2545 
        tmp_6 = tmp_5;
      }
      else 
           #line 2545 
           tmp_6 = (char *)"non-connected idle";
      #line 2544 
      tmp_7 = tmp_6;
    }
    #line 2543 
    tmp_8 = tmp_7;
  }
  #line 2542 
  ;
  #line 2542 
  seq_printf(m,(char *)"\n %-35s = [%s/ %d/ %d] ",(char *)"BT [status/ rssi/ retryCnt]",tmp_8,(int)coex_sta->bt_rssi,(int)coex_sta->bt_retry_cnt);
  #line 2554 
  seq_printf(m,(char *)"\n %-35s = %d / %d / %d / %d",(char *)"SCO/HID/PAN/A2DP",(int)bt_link_info->sco_exist,(int)bt_link_info->hid_exist,(int)bt_link_info->pan_exist,(int)bt_link_info->a2dp_exist);
  #line 2558 
  (*(btcoexist->btc_disp_dbg_msg))((void *)btcoexist,(unsigned char)1,m);
  #line 2560 
  bt_info_ext = coex_sta->bt_info_ext;
  #line 2562 
  if (((int)bt_info_ext & 1) != 0) 
                                   #line 2562 
                                   tmp_9 = (char *)"Basic rate"; else 
                                                                   #line 2562 
                                                                   tmp_9 = (char *)"EDR rate";
  #line 2561 
  ;
  #line 2561 
  seq_printf(m,(char *)"\n %-35s = %s",(char *)"BT Info A2DP rate",tmp_9);
  #line 2565 
  i = (unsigned char)0U;
  #line 2565 
  while ((unsigned int)i <= 2U) {
    #line 2566 
    if (coex_sta->bt_info_c2h_cnt[(int)i] != 0U) 
                                                 #line 2567 
                                                 seq_printf(m,(char *)"\n %-35s = %7ph(%d)",glbt_info_src_8723b_1ant[(int)i],(u8 *)(& coex_sta->bt_info_c2h[(int)i]),coex_sta->bt_info_c2h_cnt[(int)i]);
    #line 2565 
    i = (u8)((int)i + 1);
  }
  #line 2573 
  ;
  #line 2573 
  ;
  #line 2575 
  if ((int)coex_sta->under_lps != 0) 
                                     #line 2575 
                                     tmp_10 = (char *)"LPS ON"; else 
                                                                  #line 2575 
                                                                  tmp_10 = (char *)"LPS OFF";
  #line 2574 
  if ((int)coex_sta->under_ips != 0) 
                                     #line 2574 
                                     tmp_11 = (char *)"IPS ON"; else 
                                                                  #line 2574 
                                                                  tmp_11 = (char *)"IPS OFF";
  #line 2573 
  ;
  #line 2573 
  seq_printf(m,(char *)"\n %-35s = %s/%s, (0x%x/0x%x)",(char *)"PS state, IPS/LPS, (lps/rpwm)",tmp_11,tmp_10,(int)btcoexist->bt_info.lps_val,(int)btcoexist->bt_info.rpwm_val);
  #line 2579 
  (*(btcoexist->btc_disp_dbg_msg))((void *)btcoexist,(unsigned char)3,m);
  #line 2581 
  if (! btcoexist->manual_control) {
    #line 2591 
    char *tmp_12;
    #line 2590 
    char *tmp_13;
    #line 2583 
    seq_printf(m,(char *)"\n %-35s",(char *)"============[Sw mechanism]============");
    #line 2586 
    seq_printf(m,(char *)"\n %-35s = %d/",(char *)"SM[LowPenaltyRA]",(int)coex_dm->cur_low_penalty_ra);
    #line 2589 
    ;
    #line 2591 
    if ((int)btcoexist->bt_info.bt_ctrl_buf_size != 0) 
                                                       #line 2591 
                                                       tmp_12 = (char *)"Yes"; else 
                                                                    #line 2591 
                                                                    tmp_12 = (char *)"No";
    #line 2590 
    if ((int)btcoexist->bt_info.reject_agg_pkt != 0) 
                                                     #line 2590 
                                                     tmp_13 = (char *)"Yes"; else 
                                                                    #line 2590 
                                                                    tmp_13 = (char *)"No";
    #line 2589 
    ;
    #line 2589 
    seq_printf(m,(char *)"\n %-35s = %s/ %s/ %d ",(char *)"DelBA/ BtCtrlAgg/ AggSize",tmp_13,tmp_12,(int)btcoexist->bt_info.agg_buf_size);
    #line 2595 
    seq_printf(m,(char *)"\n %-35s = 0x%x ",(char *)"Rate Mask",btcoexist->bt_info.ra_mask);
    #line 2599 
    seq_printf(m,(char *)"\n %-35s",(char *)"============[Fw mechanism]============");
    #line 2602 
    pstdmacase = coex_dm->cur_ps_tdma;
    #line 2603 
    seq_printf(m,(char *)"\n %-35s = %5ph case-%d (auto:%d)",(char *)"PS TDMA",(u8 *)(& coex_dm->ps_tdma_para),(int)pstdmacase,(int)coex_dm->auto_tdma_adjust);
    #line 2607 
    seq_printf(m,(char *)"\n %-35s = %d ",(char *)"IgnWlanAct",(int)coex_dm->cur_ignore_wlan_act);
    #line 2610 
    seq_printf(m,(char *)"\n %-35s = 0x%x ",(char *)"Latest error condition(should be 0)",(int)coex_dm->error_condition);
  }
  #line 2615 
  seq_printf(m,(char *)"\n %-35s = %d",(char *)"Coex Table Type",(int)coex_sta->coex_table_type);
  #line 2619 
  seq_printf(m,(char *)"\n %-35s",(char *)"============[Hw setting]============");
  #line 2622 
  seq_printf(m,(char *)"\n %-35s = 0x%x/0x%x/0x%x/0x%x",(char *)"backup ARFR1/ARFR2/RL/AMaxTime",coex_dm->backup_arfr_cnt1,coex_dm->backup_arfr_cnt2,(int)coex_dm->backup_retry_limit,(int)coex_dm->backup_ampdu_max_time);
  #line 2627 
  u32tmp[0] = (*(btcoexist->btc_read_4byte))((void *)btcoexist,1072U);
  #line 2628 
  u32tmp[1] = (*(btcoexist->btc_read_4byte))((void *)btcoexist,1076U);
  #line 2629 
  u16tmp[0] = (*(btcoexist->btc_read_2byte))((void *)btcoexist,1066U);
  #line 2630 
  u8tmp[0] = (*(btcoexist->btc_read_1byte))((void *)btcoexist,1110U);
  #line 2631 
  seq_printf(m,(char *)"\n %-35s = 0x%x/0x%x/0x%x/0x%x",(char *)"0x430/0x434/0x42a/0x456",u32tmp[0],u32tmp[1],(int)u16tmp[0],(int)u8tmp[0]);
  #line 2635 
  u8tmp[0] = (*(btcoexist->btc_read_1byte))((void *)btcoexist,1912U);
  #line 2636 
  u32tmp[0] = (*(btcoexist->btc_read_4byte))((void *)btcoexist,1740U);
  #line 2637 
  u32tmp[1] = (*(btcoexist->btc_read_4byte))((void *)btcoexist,2176U);
  #line 2638 
  seq_printf(m,(char *)"\n %-35s = 0x%x/ 0x%x/ 0x%x",(char *)"0x778/0x6cc/0x880[29:25]",(int)u8tmp[0],u32tmp[0],(u32tmp[1] >> 25) & 31U);
  #line 2642 
  u32tmp[0] = (*(btcoexist->btc_read_4byte))((void *)btcoexist,2376U);
  #line 2643 
  u8tmp[0] = (*(btcoexist->btc_read_1byte))((void *)btcoexist,103U);
  #line 2644 
  u8tmp[1] = (*(btcoexist->btc_read_1byte))((void *)btcoexist,1893U);
  #line 2645 
  seq_printf(m,(char *)"\n %-35s = 0x%x/ 0x%x/ 0x%x",(char *)"0x948/ 0x67[5] / 0x765",u32tmp[0],((int)u8tmp[0] >> 5) & 1,(int)u8tmp[1]);
  #line 2649 
  u32tmp[0] = (*(btcoexist->btc_read_4byte))((void *)btcoexist,2348U);
  #line 2650 
  u32tmp[1] = (*(btcoexist->btc_read_4byte))((void *)btcoexist,2352U);
  #line 2651 
  u32tmp[2] = (*(btcoexist->btc_read_4byte))((void *)btcoexist,2372U);
  #line 2652 
  seq_printf(m,(char *)"\n %-35s = 0x%x/ 0x%x/ 0x%x",(char *)"0x92c[1:0]/ 0x930[7:0]/0x944[1:0]",u32tmp[0] & 3U,u32tmp[1] & 255U,u32tmp[2] & 3U);
  #line 2656 
  u8tmp[0] = (*(btcoexist->btc_read_1byte))((void *)btcoexist,57U);
  #line 2657 
  u8tmp[1] = (*(btcoexist->btc_read_1byte))((void *)btcoexist,64U);
  #line 2658 
  u32tmp[0] = (*(btcoexist->btc_read_4byte))((void *)btcoexist,76U);
  #line 2659 
  u8tmp[2] = (*(btcoexist->btc_read_1byte))((void *)btcoexist,100U);
  #line 2660 
  seq_printf(m,(char *)"\n %-35s = 0x%x/ 0x%x/ 0x%x/ 0x%x",(char *)"0x38[11]/0x40/0x4c[24:23]/0x64[0]",((int)u8tmp[0] >> 3) & 1,(int)u8tmp[1],(u32tmp[0] >> 23) & 3U,(int)u8tmp[2] & 1);
  #line 2665 
  u32tmp[0] = (*(btcoexist->btc_read_4byte))((void *)btcoexist,1360U);
  #line 2666 
  u8tmp[0] = (*(btcoexist->btc_read_1byte))((void *)btcoexist,1314U);
  #line 2667 
  seq_printf(m,(char *)"\n %-35s = 0x%x/ 0x%x",(char *)"0x550(bcn ctrl)/0x522",u32tmp[0],(int)u8tmp[0]);
  #line 2670 
  u32tmp[0] = (*(btcoexist->btc_read_4byte))((void *)btcoexist,3152U);
  #line 2671 
  u8tmp[0] = (*(btcoexist->btc_read_1byte))((void *)btcoexist,1180U);
  #line 2672 
  seq_printf(m,(char *)"\n %-35s = 0x%x/ 0x%x",(char *)"0xc50(dig)/0x49c(null-drop)",u32tmp[0] & 255U,(int)u8tmp[0]);
  #line 2675 
  u32tmp[0] = (*(btcoexist->btc_read_4byte))((void *)btcoexist,3488U);
  #line 2676 
  u32tmp[1] = (*(btcoexist->btc_read_4byte))((void *)btcoexist,3492U);
  #line 2677 
  u32tmp[2] = (*(btcoexist->btc_read_4byte))((void *)btcoexist,3496U);
  #line 2678 
  u32tmp[3] = (*(btcoexist->btc_read_4byte))((void *)btcoexist,3312U);
  #line 2680 
  u8tmp[0] = (*(btcoexist->btc_read_1byte))((void *)btcoexist,2651U);
  #line 2681 
  u8tmp[1] = (*(btcoexist->btc_read_1byte))((void *)btcoexist,2652U);
  #line 2683 
  fa_ofdm = (((((u32tmp[0] >> 16) + (u32tmp[1] >> 16)) + (u32tmp[1] & 65535U)) + (u32tmp[2] & 65535U)) + (u32tmp[3] >> 16)) + (u32tmp[3] & 65535U);
  #line 2689 
  fa_cck = (unsigned int)(((int)u8tmp[0] << 8) + (int)u8tmp[1]);
  #line 2691 
  seq_printf(m,(char *)"\n %-35s = 0x%x/ 0x%x/ 0x%x",(char *)"OFDM-CCA/OFDM-FA/CCK-FA",u32tmp[0] & 65535U,fa_ofdm,fa_cck);
  #line 2695 
  u32tmp[0] = (*(btcoexist->btc_read_4byte))((void *)btcoexist,1728U);
  #line 2696 
  u32tmp[1] = (*(btcoexist->btc_read_4byte))((void *)btcoexist,1732U);
  #line 2697 
  u32tmp[2] = (*(btcoexist->btc_read_4byte))((void *)btcoexist,1736U);
  #line 2698 
  seq_printf(m,(char *)"\n %-35s = 0x%x/ 0x%x/ 0x%x",(char *)"0x6c0/0x6c4/0x6c8(coexTable)",u32tmp[0],u32tmp[1],u32tmp[2]);
  #line 2702 
  seq_printf(m,(char *)"\n %-35s = %d/ %d",(char *)"0x770(high-pri rx/tx)",coex_sta->high_priority_rx,coex_sta->high_priority_tx);
  #line 2705 
  seq_printf(m,(char *)"\n %-35s = %d/ %d",(char *)"0x774(low-pri rx/tx)",coex_sta->low_priority_rx,coex_sta->low_priority_tx);
  #line 2708 
  if ((int)btcoexist->auto_report_1ant != 0) 
                                             #line 2709 
                                             halbtc8723b1ant_monitor_bt_ctr(btcoexist);
  #line 2710 
  (*(btcoexist->btc_disp_dbg_msg))((void *)btcoexist,(unsigned char)0,m);
  #line 2711 
  return;
}

#line 2713  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.c"
void ex_btc8723b1ant_ips_notify(struct btc_coexist *btcoexist, u8 type)
{
  #line 2715 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 2717 
  if ((int)btcoexist->manual_control != 0 || (int)btcoexist->stop_coex_dm != 0) 
    #line 2718 
    return;
  #line 2720 
  if ((unsigned int)type == 1U) {
    #line 2721 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], IPS ENTER notify\n");
    #line 2723 
    coex_sta->under_ips = (_Bool)1;
    #line 2725 
    halbtc8723b1ant_set_ant_path(btcoexist,(unsigned char)1,(_Bool)1,(_Bool)0,(_Bool)1);
    #line 2728 
    halbtc8723b1ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)0,(unsigned char)0);
    #line 2729 
    halbtc8723b1ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)0);
  }
  else 
    #line 2731 
    if ((unsigned int)type == 0U) {
      #line 2732 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], IPS LEAVE notify\n");
      #line 2734 
      coex_sta->under_ips = (_Bool)0;
      #line 2736 
      halbtc8723b1ant_init_hw_config(btcoexist,(_Bool)0,(_Bool)0);
      #line 2737 
      halbtc8723b1ant_init_coex_dm(btcoexist);
      #line 2738 
      halbtc8723b1ant_query_bt_info(btcoexist);
    }
  #line 2740 
  return;
}

#line 2742  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.c"
void ex_btc8723b1ant_lps_notify(struct btc_coexist *btcoexist, u8 type)
{
  #line 2744 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 2746 
  if ((int)btcoexist->manual_control != 0 || (int)btcoexist->stop_coex_dm != 0) 
    #line 2747 
    return;
  #line 2749 
  if ((unsigned int)type == 1U) {
    #line 2750 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], LPS ENABLE notify\n");
    #line 2752 
    coex_sta->under_lps = (_Bool)1;
  }
  else 
    #line 2753 
    if ((unsigned int)type == 0U) {
      #line 2754 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], LPS DISABLE notify\n");
      #line 2756 
      coex_sta->under_lps = (_Bool)0;
    }
  #line 2758 
  return;
}

#line 2760  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.c"
void ex_btc8723b1ant_scan_notify(struct btc_coexist *btcoexist, u8 type)
{
  #line 2764 
  u8 u8tmpa;
  #line 2764 
  u8 u8tmpb;
  #line 2765 
  u32 u32tmp;
  #line 2762 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 2763 
  bool wifi_connected = (_Bool)0;
  #line 2763 
  bool bt_hs_on = (_Bool)0;
  #line 2766 
  u32 wifi_link_status = 0U;
  #line 2767 
  u32 num_of_wifi_link = 0U;
  #line 2768 
  bool bt_ctrl_agg_buf_size = (_Bool)0;
  #line 2769 
  u8 agg_buf_size = (unsigned char)5U;
  #line 2771 
  if ((int)btcoexist->manual_control != 0 || (int)btcoexist->stop_coex_dm != 0) 
    #line 2772 
    return;
  #line 2774 
  if ((unsigned int)type == 1U) {
    #line 2775 
    coex_sta->wifi_is_high_pri_task = (_Bool)1;
    #line 2776 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], SCAN START notify\n");
    #line 2779 
    halbtc8723b1ant_ps_tdma(btcoexist,(_Bool)1,(_Bool)0,(unsigned char)8);
    #line 2780 
    halbtc8723b1ant_set_ant_path(btcoexist,(unsigned char)2,(_Bool)1,(_Bool)0,(_Bool)0);
    #line 2782 
    u32tmp = (*(btcoexist->btc_read_4byte))((void *)btcoexist,2376U);
    #line 2783 
    u8tmpa = (*(btcoexist->btc_read_1byte))((void *)btcoexist,1893U);
    #line 2784 
    u8tmpb = (*(btcoexist->btc_read_1byte))((void *)btcoexist,103U);
    #line 2786 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], 0x948=0x%x, 0x765=0x%x, 0x67=0x%x\n",u32tmp,(int)u8tmpa,(int)u8tmpb);
  }
  else {
    #line 2790 
    coex_sta->wifi_is_high_pri_task = (_Bool)0;
    #line 2791 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], SCAN FINISH notify\n");
    #line 2794 
    (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)41,(void *)(& coex_sta->scan_ap_num));
  }
  #line 2798 
  if ((int)coex_sta->bt_disabled != 0) 
                                       #line 2799 
                                       return;
  #line 2801 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)0,(void *)(& bt_hs_on));
  #line 2802 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)2,(void *)(& wifi_connected));
  #line 2805 
  halbtc8723b1ant_query_bt_info(btcoexist);
  #line 2807 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)27,(void *)(& wifi_link_status));
  #line 2809 
  num_of_wifi_link = wifi_link_status >> 16;
  #line 2810 
  if (num_of_wifi_link > 1U) {
    #line 2811 
    halbtc8723b1ant_limited_tx(btcoexist,(_Bool)0,(unsigned char)0,(unsigned char)0,(unsigned char)0,(unsigned char)0);
    #line 2812 
    halbtc8723b1ant_limited_rx(btcoexist,(_Bool)0,(_Bool)0,(_Bool)((bool)((int)bt_ctrl_agg_buf_size) != 0),(unsigned char)((int)agg_buf_size));
    #line 2814 
    halbtc8723b1ant_action_wifi_multiport(btcoexist);
    #line 2815 
    return;
  }
  #line 2818 
  if ((int)coex_sta->c2h_bt_inquiry_page != 0) {
    #line 2819 
    halbtc8723b1ant_action_bt_inquiry(btcoexist);
    #line 2820 
    return;
  }
  else 
    #line 2821 
    if ((int)bt_hs_on != 0) {
      #line 2822 
      halbtc8723b1ant_action_hs(btcoexist);
      #line 2823 
      return;
    }
  #line 2826 
  if ((unsigned int)type == 1U) {
    #line 2827 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], SCAN START notify\n");
    #line 2829 
    if (! wifi_connected) 
                          #line 2831 
                          btc8723b1ant_action_wifi_not_conn_scan(btcoexist); else 
                                                                    #line 2834 
                                                                    btc8723b1ant_action_wifi_conn_scan(btcoexist);
  }
  else 
    #line 2835 
    if ((unsigned int)type == 0U) {
      #line 2836 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], SCAN FINISH notify\n");
      #line 2838 
      if (! wifi_connected) 
                            #line 2840 
                            btc8723b1ant_action_wifi_not_conn(btcoexist); else 
                                                                    #line 2842 
                                                                    halbtc8723b1ant_action_wifi_connected(btcoexist);
    }
  #line 2844 
  return;
}

#line 2846  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.c"
void ex_btc8723b1ant_connect_notify(struct btc_coexist *btcoexist, u8 type)
{
  #line 2848 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 2849 
  bool wifi_connected = (_Bool)0;
  #line 2849 
  bool bt_hs_on = (_Bool)0;
  #line 2850 
  u32 wifi_link_status = 0U;
  #line 2851 
  u32 num_of_wifi_link = 0U;
  #line 2852 
  bool bt_ctrl_agg_buf_size = (_Bool)0;
  #line 2852 
  bool under_4way = (_Bool)0;
  #line 2853 
  u8 agg_buf_size = (unsigned char)5U;
  #line 2855 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)12,(void *)(& under_4way));
  #line 2858 
  if (((int)btcoexist->manual_control != 0 || (int)btcoexist->stop_coex_dm != 0) || (int)coex_sta->bt_disabled != 0) 
    #line 2860 
    return;
  #line 2862 
  if ((unsigned int)type == 1U) {
    #line 2863 
    coex_sta->wifi_is_high_pri_task = (_Bool)1;
    #line 2866 
    halbtc8723b1ant_ps_tdma(btcoexist,(_Bool)1,(_Bool)0,(unsigned char)8);
    #line 2867 
    halbtc8723b1ant_set_ant_path(btcoexist,(unsigned char)2,(_Bool)1,(_Bool)0,(_Bool)0);
    #line 2869 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], CONNECT START notify\n");
    #line 2871 
    coex_dm->arp_cnt = 0U;
  }
  else {
    #line 2873 
    coex_sta->wifi_is_high_pri_task = (_Bool)0;
    #line 2874 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], CONNECT FINISH notify\n");
  }
  #line 2878 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)27,(void *)(& wifi_link_status));
  #line 2880 
  num_of_wifi_link = wifi_link_status >> 16;
  #line 2881 
  if (num_of_wifi_link > 1U) {
    #line 2882 
    halbtc8723b1ant_limited_tx(btcoexist,(_Bool)0,(unsigned char)0,(unsigned char)0,(unsigned char)0,(unsigned char)0);
    #line 2883 
    halbtc8723b1ant_limited_rx(btcoexist,(_Bool)0,(_Bool)0,(_Bool)((bool)((int)bt_ctrl_agg_buf_size) != 0),(unsigned char)((int)agg_buf_size));
    #line 2885 
    halbtc8723b1ant_action_wifi_multiport(btcoexist);
    #line 2886 
    return;
  }
  #line 2889 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)0,(void *)(& bt_hs_on));
  #line 2890 
  if ((int)coex_sta->c2h_bt_inquiry_page != 0) {
    #line 2891 
    halbtc8723b1ant_action_bt_inquiry(btcoexist);
    #line 2892 
    return;
  }
  else 
    #line 2893 
    if ((int)bt_hs_on != 0) {
      #line 2894 
      halbtc8723b1ant_action_hs(btcoexist);
      #line 2895 
      return;
    }
  #line 2898 
  if ((unsigned int)type == 1U) {
    #line 2899 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], CONNECT START notify\n");
    #line 2901 
    btc8723b1ant_act_wifi_not_conn_asso_auth(btcoexist);
  }
  else 
    #line 2902 
    if ((unsigned int)type == 0U) {
      #line 2903 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], CONNECT FINISH notify\n");
      #line 2906 
      (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)2,(void *)(& wifi_connected));
      #line 2908 
      if (! wifi_connected) 
                            #line 2910 
                            btc8723b1ant_action_wifi_not_conn(btcoexist); else 
                                                                    #line 2912 
                                                                    halbtc8723b1ant_action_wifi_connected(btcoexist);
    }
  #line 2914 
  return;
}

#line 2916  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.c"
void ex_btc8723b1ant_media_status_notify(struct btc_coexist *btcoexist, u8 type)
{
  #line 2921 
  u32 wifi_bw;
  #line 2922 
  u8 wifi_central_chnl;
  #line 2919 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 2920 
  u8 h2c_parameter[3U] = {(unsigned char)0U};
  #line 2923 
  bool wifi_under_b_mode = (_Bool)0;
  #line 2925 
  if (((int)btcoexist->manual_control != 0 || (int)btcoexist->stop_coex_dm != 0) || (int)coex_sta->bt_disabled != 0) 
    #line 2927 
    return;
  #line 2929 
  if ((unsigned int)type == 1U) {
    #line 2930 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], MEDIA connect notify\n");
    #line 2933 
    halbtc8723b1ant_ps_tdma(btcoexist,(_Bool)1,(_Bool)0,(unsigned char)8);
    #line 2934 
    halbtc8723b1ant_set_ant_path(btcoexist,(unsigned char)2,(_Bool)1,(_Bool)0,(_Bool)0);
    #line 2936 
    (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)16,(void *)(& wifi_under_b_mode));
    #line 2940 
    if ((int)wifi_under_b_mode != 0) {
      #line 2941 
      (*(btcoexist->btc_write_1byte))((void *)btcoexist,1741U,0U);
      #line 2943 
      (*(btcoexist->btc_write_1byte))((void *)btcoexist,1743U,0U);
    }
    else {
      #line 2946 
      (*(btcoexist->btc_write_1byte))((void *)btcoexist,1741U,0U);
      #line 2948 
      (*(btcoexist->btc_write_1byte))((void *)btcoexist,1743U,16U);
    }
    #line 2952 
    coex_dm->backup_arfr_cnt1 = (*(btcoexist->btc_read_4byte))((void *)btcoexist,1072U);
    #line 2954 
    coex_dm->backup_arfr_cnt2 = (*(btcoexist->btc_read_4byte))((void *)btcoexist,1076U);
    #line 2956 
    coex_dm->backup_retry_limit = (*(btcoexist->btc_read_2byte))((void *)btcoexist,1066U);
    #line 2958 
    coex_dm->backup_ampdu_max_time = (*(btcoexist->btc_read_1byte))((void *)btcoexist,1110U);
  }
  else {
    #line 2961 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], MEDIA disconnect notify\n");
    #line 2963 
    coex_dm->arp_cnt = 0U;
    #line 2965 
    (*(btcoexist->btc_write_1byte))((void *)btcoexist,1741U,0U);
    #line 2966 
    (*(btcoexist->btc_write_1byte))((void *)btcoexist,1743U,0U);
    #line 2968 
    coex_sta->cck_ever_lock = (_Bool)0;
  }
  #line 2972 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)38,(void *)(& wifi_central_chnl));
  #line 2975 
  if ((unsigned int)type == 1U && (unsigned int)wifi_central_chnl <= 14U) {
    #line 2976 
    h2c_parameter[0] = (unsigned char)0U;
    #line 2977 
    h2c_parameter[1] = wifi_central_chnl;
    #line 2978 
    (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)24,(void *)(& wifi_bw));
    #line 2979 
    if (wifi_bw == 2U) 
                       #line 2980 
                       h2c_parameter[2] = (unsigned char)48U; else 
                                                                   #line 2982 
                                                                   h2c_parameter[2] = (unsigned char)32U;
  }
  #line 2985 
  coex_dm->wifi_chnl_info[0] = h2c_parameter[0];
  #line 2986 
  coex_dm->wifi_chnl_info[1] = h2c_parameter[1];
  #line 2987 
  coex_dm->wifi_chnl_info[2] = h2c_parameter[2];
  #line 2989 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], FW write 0x66 = 0x%x\n",(((int)h2c_parameter[0] << 16) | ((int)h2c_parameter[1] << 8)) | (int)h2c_parameter[2]);
  #line 2994 
  (*(btcoexist->btc_fill_h2c))((void *)btcoexist,(unsigned char)102,3U,(u8 *)(& h2c_parameter));
  #line 2995 
  return;
}

#line 2997  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.c"
void ex_btc8723b1ant_special_packet_notify(struct btc_coexist *btcoexist, u8 type)
{
  #line 3000 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 3001 
  bool bt_hs_on = (_Bool)0;
  #line 3002 
  u32 wifi_link_status = 0U;
  #line 3003 
  u32 num_of_wifi_link = 0U;
  #line 3004 
  bool bt_ctrl_agg_buf_size = (_Bool)0;
  #line 3004 
  bool under_4way = (_Bool)0;
  #line 3005 
  u8 agg_buf_size = (unsigned char)5U;
  #line 3007 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)12,(void *)(& under_4way));
  #line 3010 
  if (((int)btcoexist->manual_control != 0 || (int)btcoexist->stop_coex_dm != 0) || (int)coex_sta->bt_disabled != 0) 
    #line 3012 
    return;
  #line 3014 
  if (((unsigned int)type == 1U || (unsigned int)type == 3U) || (unsigned int)type == 2U) 
    #line 3016 
    if ((unsigned int)type == 2U) {
      #line 3017 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], special Packet ARP notify\n");
      #line 3020 
      (coex_dm->arp_cnt) ++;
      #line 3021 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], ARP Packet Count = %d\n",coex_dm->arp_cnt);
      #line 3025 
      if (coex_dm->arp_cnt > 9U && ! under_4way) 
                                                 #line 3029 
                                                 coex_sta->wifi_is_high_pri_task = (_Bool)0; else 
                                                                    #line 3031 
                                                                    coex_sta->wifi_is_high_pri_task = (_Bool)1;
    }
    else {
      #line 3033 
      coex_sta->wifi_is_high_pri_task = (_Bool)1;
      #line 3034 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], special Packet DHCP or EAPOL notify\n");
    }
  else {
    #line 3038 
    coex_sta->wifi_is_high_pri_task = (_Bool)0;
    #line 3039 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], special Packet [Type = %d] notify\n",(int)type);
  }
  #line 3044 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)27,(void *)(& wifi_link_status));
  #line 3046 
  num_of_wifi_link = wifi_link_status >> 16;
  #line 3047 
  if (num_of_wifi_link > 1U) {
    #line 3048 
    halbtc8723b1ant_limited_tx(btcoexist,(_Bool)0,(unsigned char)0,(unsigned char)0,(unsigned char)0,(unsigned char)0);
    #line 3049 
    halbtc8723b1ant_limited_rx(btcoexist,(_Bool)0,(_Bool)0,(_Bool)((bool)((int)bt_ctrl_agg_buf_size) != 0),(unsigned char)((int)agg_buf_size));
    #line 3051 
    halbtc8723b1ant_action_wifi_multiport(btcoexist);
    #line 3052 
    return;
  }
  #line 3055 
  coex_sta->special_pkt_period_cnt = 0U;
  #line 3057 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)0,(void *)(& bt_hs_on));
  #line 3058 
  if ((int)coex_sta->c2h_bt_inquiry_page != 0) {
    #line 3059 
    halbtc8723b1ant_action_bt_inquiry(btcoexist);
    #line 3060 
    return;
  }
  else 
    #line 3061 
    if ((int)bt_hs_on != 0) {
      #line 3062 
      halbtc8723b1ant_action_hs(btcoexist);
      #line 3063 
      return;
    }
  #line 3066 
  if ((unsigned int)type == 1U || (unsigned int)type == 3U) {
    #line 3068 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], special Packet(%d) notify\n",(int)type);
    #line 3070 
    halbtc8723b1ant_action_wifi_connected_special_packet(btcoexist);
  }
  #line 3072 
  return;
}

#line 3074  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.c"
void ex_btc8723b1ant_bt_info_notify(struct btc_coexist *btcoexist, u8 *tmp_buf, u8 length)
{
  #line 3079 
  u8 i;
  #line 3077 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 3078 
  u8 bt_info = (unsigned char)0U;
  #line 3079 
  u8 rsp_source = (unsigned char)0U;
  #line 3080 
  bool wifi_connected = (_Bool)0;
  #line 3081 
  bool bt_busy = (_Bool)0;
  #line 3083 
  coex_sta->c2h_bt_info_req_sent = (_Bool)0;
  #line 3085 
  rsp_source = (unsigned char)((unsigned int)*tmp_buf & 15U);
  #line 3086 
  if ((unsigned int)rsp_source > 2U) 
                                     #line 3087 
                                     rsp_source = (unsigned char)0U;
  #line 3088 
  (coex_sta->bt_info_c2h_cnt[(int)rsp_source]) ++;
  #line 3090 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Bt info[%d], length=%d, hex data = [",(int)rsp_source,(int)length);
  #line 3093 
  i = (unsigned char)0U;
  #line 3093 
  while ((int)i < (int)length) {
    #line 3094 
    coex_sta->bt_info_c2h[(int)rsp_source][(int)i] = *(tmp_buf + (unsigned long)i);
    #line 3095 
    if ((unsigned int)i == 1U) 
                               #line 3096 
                               bt_info = *(tmp_buf + (unsigned long)i);
    #line 3097 
    if ((int)i == (int)length + -1) 
                                    #line 3098 
                                    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"0x%02x]\n",(int)*(tmp_buf + (unsigned long)i)); else 
                                                                    #line 3101 
                                                                    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"0x%02x, ",(int)*(tmp_buf + (unsigned long)i));
    #line 3093 
    i = (u8)((int)i + 1);
  }
  #line 3106 
  if ((unsigned int)bt_info == 255U) 
                                     #line 3107 
                                     coex_sta->bt_whck_test = (_Bool)1; else 
                                                                    #line 3109 
                                                                    coex_sta->bt_whck_test = (_Bool)0;
  #line 3111 
  if ((unsigned int)rsp_source != 0U) {
    #line 3112 
    coex_sta->bt_retry_cnt = (unsigned char)((unsigned int)coex_sta->bt_info_c2h[(int)rsp_source][2] & 15U);
    #line 3115 
    if ((unsigned int)coex_sta->bt_retry_cnt != 0U) 
                                                    #line 3116 
                                                    (coex_sta->pop_event_cnt) ++;
    #line 3118 
    if (((int)coex_sta->bt_info_c2h[(int)rsp_source][2] & 32) != 0) 
                                                                    #line 3119 
                                                                    coex_sta->c2h_bt_remote_name_req = (_Bool)1; else 
                                                                    #line 3121 
                                                                    coex_sta->c2h_bt_remote_name_req = (_Bool)0;
    #line 3123 
    coex_sta->bt_rssi = (unsigned char)(((unsigned int)coex_sta->bt_info_c2h[(int)rsp_source][3] + 211U) * 2U);
    #line 3126 
    coex_sta->bt_info_ext = coex_sta->bt_info_c2h[(int)rsp_source][4];
    #line 3129 
    if ((unsigned int)coex_sta->bt_info_c2h[(int)rsp_source][1] == 73U) 
      #line 3130 
      coex_sta->a2dp_bit_pool = coex_sta->bt_info_c2h[(int)rsp_source][6]; else 
                                                                    #line 3133 
                                                                    coex_sta->a2dp_bit_pool = (unsigned char)0U;
    #line 3136 
    coex_sta->bt_tx_rx_mask = (_Bool)(((int)coex_sta->bt_info_c2h[(int)rsp_source][2] & 64) != 0);
    #line 3138 
    (*(btcoexist->btc_set))((void *)btcoexist,(unsigned char)7,(void *)(& coex_sta->bt_tx_rx_mask));
    #line 3141 
    if (! coex_sta->bt_tx_rx_mask) {
      #line 3145 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Switch BT TRx Mask since BT RF REG 0x3C != 0x15\n");
      #line 3147 
      (*(btcoexist->btc_set_bt_reg))((void *)btcoexist,(unsigned char)0,60U,21U);
      #line 3151 
      (*(btcoexist->btc_set_bt_reg))((void *)btcoexist,(unsigned char)0,44U,31812U);
      #line 3153 
      (*(btcoexist->btc_set_bt_reg))((void *)btcoexist,(unsigned char)0,48U,31812U);
    }
    #line 3160 
    if (((int)coex_sta->bt_info_ext & 2) != 0) {
      #line 3161 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BT ext info bit1 check, send wifi BW&Chnl to BT!!\n");
      #line 3163 
      (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)2,(void *)(& wifi_connected));
      #line 3165 
      if ((int)wifi_connected != 0) 
                                    #line 3166 
                                    ex_btc8723b1ant_media_status_notify(btcoexist,(unsigned char)1); else 
                                                                    #line 3169 
                                                                    ex_btc8723b1ant_media_status_notify(btcoexist,(unsigned char)0);
    }
    #line 3173 
    if (((int)coex_sta->bt_info_ext & 8) != 0) 
      #line 3174 
      if (! btcoexist->manual_control && ! btcoexist->stop_coex_dm) {
        #line 3176 
        _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BT ext info bit3 check, set BT NOT ignore Wlan active!!\n");
        #line 3178 
        halbtc8723b1ant_ignore_wlan_act(btcoexist,(_Bool)1,(_Bool)0);
      }
    #line 3185 
    if (! btcoexist->auto_report_1ant) 
      #line 3186 
      if (! (((int)coex_sta->bt_info_ext & 16) != 0)) 
                                                      #line 3189 
                                                      halbtc8723b1ant_bt_auto_report(btcoexist,(_Bool)1,(_Bool)1);
  }
  #line 3197 
  if (((int)bt_info & 4) != 0) 
                               #line 3198 
                               coex_sta->c2h_bt_inquiry_page = (_Bool)1; else 
                                                                    #line 3200 
                                                                    coex_sta->c2h_bt_inquiry_page = (_Bool)0;
  #line 3202 
  coex_sta->num_of_profile = (unsigned char)0U;
  #line 3205 
  if (((int)bt_info & 1) == 0) {
    #line 3206 
    coex_sta->bt_link_exist = (_Bool)0;
    #line 3207 
    coex_sta->pan_exist = (_Bool)0;
    #line 3208 
    coex_sta->a2dp_exist = (_Bool)0;
    #line 3209 
    coex_sta->hid_exist = (_Bool)0;
    #line 3210 
    coex_sta->sco_exist = (_Bool)0;
    #line 3212 
    coex_sta->bt_hi_pri_link_exist = (_Bool)0;
  }
  else {
    #line 3215 
    coex_sta->bt_link_exist = (_Bool)1;
    #line 3216 
    if (((int)bt_info & 128) != 0) {
      #line 3217 
      coex_sta->pan_exist = (_Bool)1;
      #line 3218 
      coex_sta->num_of_profile = (u8)((int)coex_sta->num_of_profile + 1);
    }
    else 
         #line 3220 
         coex_sta->pan_exist = (_Bool)0;
    #line 3222 
    if (((int)bt_info & 64) != 0) {
      #line 3223 
      coex_sta->a2dp_exist = (_Bool)1;
      #line 3224 
      coex_sta->num_of_profile = (u8)((int)coex_sta->num_of_profile + 1);
    }
    else 
         #line 3226 
         coex_sta->a2dp_exist = (_Bool)0;
    #line 3228 
    if (((int)bt_info & 32) != 0) {
      #line 3229 
      coex_sta->hid_exist = (_Bool)1;
      #line 3230 
      coex_sta->num_of_profile = (u8)((int)coex_sta->num_of_profile + 1);
    }
    else 
         #line 3232 
         coex_sta->hid_exist = (_Bool)0;
    #line 3234 
    if (((int)bt_info & 2) != 0) {
      #line 3235 
      coex_sta->sco_exist = (_Bool)1;
      #line 3236 
      coex_sta->num_of_profile = (u8)((int)coex_sta->num_of_profile + 1);
    }
    else 
         #line 3238 
         coex_sta->sco_exist = (_Bool)0;
    #line 3241 
    if ((! coex_sta->hid_exist && ! coex_sta->c2h_bt_inquiry_page) && ! coex_sta->sco_exist) 
      #line 3244 
      if (coex_sta->high_priority_tx + coex_sta->high_priority_rx > 159U) {
        #line 3247 
        coex_sta->hid_exist = (_Bool)1;
        #line 3248 
        (coex_sta->wrong_profile_notification) ++;
        #line 3249 
        coex_sta->num_of_profile = (u8)((int)coex_sta->num_of_profile + 1);
        #line 3250 
        bt_info = (unsigned char)((unsigned int)bt_info | 40U);
      }
    #line 3255 
    if ((((int)coex_sta->hid_exist != 0 || (int)coex_sta->sco_exist != 0) && coex_sta->high_priority_tx + coex_sta->high_priority_rx > 159U) && ! coex_sta->c2h_bt_inquiry_page) 
      #line 3259 
      coex_sta->bt_hi_pri_link_exist = (_Bool)1;
    #line 3261 
    if (((int)bt_info & 8) != 0 && (unsigned int)coex_sta->num_of_profile == 0U) 
      #line 3263 
      if (coex_sta->low_priority_tx + coex_sta->low_priority_rx > 159U) {
        #line 3266 
        coex_sta->pan_exist = (_Bool)1;
        #line 3267 
        coex_sta->num_of_profile = (u8)((int)coex_sta->num_of_profile + 1);
        #line 3268 
        (coex_sta->wrong_profile_notification) ++;
        #line 3269 
        bt_info = (unsigned char)((unsigned int)bt_info | 136U);
      }
  }
  #line 3274 
  halbtc8723b1ant_update_bt_link_info(btcoexist);
  #line 3279 
  bt_info = (unsigned char)((unsigned int)bt_info & 31U);
  #line 3281 
  if (((int)bt_info & 1) == 0) {
    #line 3282 
    coex_dm->bt_status = (unsigned char)0U;
    #line 3283 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BtInfoNotify(), BT Non-Connected idle!\n");
  }
  else 
    #line 3286 
    if ((unsigned int)bt_info == 1U) {
      #line 3287 
      coex_dm->bt_status = (unsigned char)1U;
      #line 3288 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BtInfoNotify(), BT Connected-idle!!!\n");
    }
    else 
      #line 3290 
      if (((int)bt_info & 2) != 0 || ((int)bt_info & 16) != 0) {
        #line 3292 
        coex_dm->bt_status = (unsigned char)4U;
        #line 3293 
        _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BtInfoNotify(), BT SCO busy!!!\n");
      }
      else 
        #line 3295 
        if (((int)bt_info & 8) != 0) {
          #line 3296 
          if ((unsigned int)coex_dm->bt_status != 3U) 
                                                      #line 3297 
                                                      coex_dm->auto_tdma_adjust = (_Bool)0;
          #line 3299 
          coex_dm->bt_status = (unsigned char)3U;
          #line 3300 
          _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BtInfoNotify(), BT ACL busy!!!\n");
        }
        else {
          #line 3303 
          coex_dm->bt_status = (unsigned char)6U;
          #line 3304 
          _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BtInfoNotify(), BT Non-Defined state!!\n");
        }
  #line 3308 
  if ((unsigned int)coex_dm->bt_status + 253U <= 2U) 
                                                     #line 3311 
                                                     bt_busy = (_Bool)1; else 
                                                                    #line 3313 
                                                                    bt_busy = (_Bool)0;
  #line 3314 
  (*(btcoexist->btc_set))((void *)btcoexist,(unsigned char)1,(void *)(& bt_busy));
  #line 3316 
  halbtc8723b1ant_run_coexist_mechanism(btcoexist);
  #line 3317 
  return;
}

#line 3319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.c"
void ex_btc8723b1ant_rf_status_notify(struct btc_coexist *btcoexist, u8 type)
{
  #line 3322 
  u32 u32tmp;
  #line 3323 
  u8 u8tmpa;
  #line 3323 
  u8 u8tmpb;
  #line 3323 
  u8 u8tmpc;
  #line 3321 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 3325 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], RF Status notify\n");
  #line 3328 
  if ((unsigned int)type == 1U) {
    #line 3329 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], RF is turned ON!!\n");
    #line 3331 
    btcoexist->stop_coex_dm = (_Bool)0;
  }
  else 
    #line 3332 
    if ((unsigned int)type == 0U) {
      #line 3333 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], RF is turned OFF!!\n");
      #line 3336 
      halbtc8723b1ant_power_save_state(btcoexist,(unsigned char)0,(unsigned char)0,(unsigned char)0);
      #line 3338 
      halbtc8723b1ant_ps_tdma(btcoexist,(_Bool)1,(_Bool)0,(unsigned char)0);
      #line 3339 
      halbtc8723b1ant_set_ant_path(btcoexist,(unsigned char)1,(_Bool)1,(_Bool)0,(_Bool)1);
      #line 3342 
      halbtc8723b1ant_ignore_wlan_act(btcoexist,(_Bool)1,(_Bool)1);
      #line 3343 
      btcoexist->stop_coex_dm = (_Bool)1;
      #line 3345 
      u32tmp = (*(btcoexist->btc_read_4byte))((void *)btcoexist,2376U);
      #line 3346 
      u8tmpa = (*(btcoexist->btc_read_1byte))((void *)btcoexist,1893U);
      #line 3347 
      u8tmpb = (*(btcoexist->btc_read_1byte))((void *)btcoexist,103U);
      #line 3348 
      u8tmpc = (*(btcoexist->btc_read_1byte))((void *)btcoexist,1902U);
      #line 3350 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"############# [BTCoex], 0x948=0x%x, 0x765=0x%x, 0x67=0x%x, 0x76e=0x%x\n",u32tmp,(int)u8tmpa,(int)u8tmpb,(int)u8tmpc);
    }
  #line 3352 
  return;
}

#line 3356  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.c"
void ex_btc8723b1ant_halt_notify(struct btc_coexist *btcoexist)
{
  #line 3358 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 3360 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Halt notify\n");
  #line 3362 
  btcoexist->stop_coex_dm = (_Bool)1;
  #line 3364 
  halbtc8723b1ant_set_ant_path(btcoexist,(unsigned char)1,(_Bool)1,(_Bool)0,(_Bool)1);
  #line 3367 
  halbtc8723b1ant_ignore_wlan_act(btcoexist,(_Bool)1,(_Bool)1);
  #line 3369 
  halbtc8723b1ant_power_save_state(btcoexist,(unsigned char)0,(unsigned char)0,(unsigned char)0);
  #line 3371 
  halbtc8723b1ant_ps_tdma(btcoexist,(_Bool)1,(_Bool)0,(unsigned char)0);
  #line 3373 
  ex_btc8723b1ant_media_status_notify(btcoexist,(unsigned char)0);
  #line 3375 
  btcoexist->stop_coex_dm = (_Bool)1;
  #line 3376 
  return;
}

#line 3378  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.c"
void ex_btc8723b1ant_pnp_notify(struct btc_coexist *btcoexist, u8 pnp_state)
{
  #line 3380 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 3382 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Pnp notify\n");
  #line 3384 
  if ((unsigned int)pnp_state == 1U) {
    #line 3385 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Pnp notify to SLEEP\n");
    #line 3387 
    halbtc8723b1ant_set_ant_path(btcoexist,(unsigned char)1,(_Bool)1,(_Bool)0,(_Bool)1);
    #line 3389 
    halbtc8723b1ant_power_save_state(btcoexist,(unsigned char)0,(unsigned char)0,(unsigned char)0);
    #line 3391 
    halbtc8723b1ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)0,(unsigned char)0);
    #line 3392 
    halbtc8723b1ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)2);
    #line 3400 
    coex_sta->under_ips = (_Bool)0;
    #line 3401 
    coex_sta->under_lps = (_Bool)0;
    #line 3402 
    btcoexist->stop_coex_dm = (_Bool)1;
  }
  else 
    #line 3403 
    if ((unsigned int)pnp_state == 0U) {
      #line 3404 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Pnp notify to WAKE UP\n");
      #line 3406 
      btcoexist->stop_coex_dm = (_Bool)0;
      #line 3407 
      halbtc8723b1ant_init_hw_config(btcoexist,(_Bool)0,(_Bool)0);
      #line 3408 
      halbtc8723b1ant_init_coex_dm(btcoexist);
      #line 3409 
      halbtc8723b1ant_query_bt_info(btcoexist);
    }
  #line 3411 
  return;
}

#line 3413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.c"
void ex_btc8723b1ant_coex_dm_reset(struct btc_coexist *btcoexist)
{
  #line 3415 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 3417 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], *****************Coex DM Reset****************\n");
  #line 3420 
  halbtc8723b1ant_init_hw_config(btcoexist,(_Bool)0,(_Bool)0);
  #line 3421 
  halbtc8723b1ant_init_coex_dm(btcoexist);
  #line 3422 
  return;
}

#line 3424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.c"
void ex_btc8723b1ant_periodical(struct btc_coexist *btcoexist)
{
  #line 3426 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 3427 
  struct btc_bt_link_info *bt_link_info = & btcoexist->bt_link_info;
  #line 3429 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], ==========================Periodical===========================\n");
  #line 3432 
  if (! btcoexist->auto_report_1ant) {
    #line 3433 
    halbtc8723b1ant_query_bt_info(btcoexist);
    #line 3434 
    halbtc8723b1ant_monitor_bt_enable_disable(btcoexist);
  }
  else {
    #line 3436 
    halbtc8723b1ant_monitor_bt_ctr(btcoexist);
    #line 3437 
    halbtc8723b1ant_monitor_wifi_ctr(btcoexist);
    #line 3439 
    if (coex_sta->high_priority_tx + coex_sta->high_priority_rx <= 49U && (int)bt_link_info->hid_exist != 0) 
      #line 3441 
      bt_link_info->hid_exist = (_Bool)0;
    #line 3443 
    if ((int)btc8723b1ant_is_wifi_status_changed(btcoexist) != 0) 
                                                                  #line 3445 
                                                                  halbtc8723b1ant_run_coexist_mechanism(btcoexist);
    else 
      #line 3443 
      if ((int)coex_dm->auto_tdma_adjust != 0) 
                                               #line 3445 
                                               halbtc8723b1ant_run_coexist_mechanism(btcoexist);
    #line 3447 
    (coex_sta->special_pkt_period_cnt) ++;
  }
  #line 3449 
  return;
}

#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.h"
#line 2653  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.c"
void ex_btc8192e2ant_init_hwconfig(struct btc_coexist *btcoexist);
#line 147  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.h"
#line 2658  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.c"
void ex_btc8192e2ant_init_coex_dm(struct btc_coexist *btcoexist);
#line 148  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.h"
#line 2874  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.c"
void ex_btc8192e2ant_ips_notify(struct btc_coexist *btcoexist, u8 type);
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.h"
#line 2890  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.c"
void ex_btc8192e2ant_lps_notify(struct btc_coexist *btcoexist, u8 type);
#line 150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.h"
#line 2905  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.c"
void ex_btc8192e2ant_scan_notify(struct btc_coexist *btcoexist, u8 type);
#line 151  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.h"
#line 2917  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.c"
void ex_btc8192e2ant_connect_notify(struct btc_coexist *btcoexist, u8 type);
#line 152  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.h"
#line 2929  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.c"
void ex_btc8192e2ant_media_status_notify(struct btc_coexist *btcoexist, u8 type);
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.h"
#line 2975  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.c"
void ex_btc8192e2ant_special_packet_notify(struct btc_coexist *btcoexist, u8 type);
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.h"
#line 2985  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.c"
void ex_btc8192e2ant_bt_info_notify(struct btc_coexist *btcoexist, u8 *tmp_buf, u8 length);
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.h"
#line 3144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.c"
void ex_btc8192e2ant_halt_notify(struct btc_coexist *btcoexist);
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.h"
#line 3154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.c"
void ex_btc8192e2ant_periodical(struct btc_coexist *btcoexist);
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.h"
#line 2667  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.c"
void ex_btc8192e2ant_display_coex_info(struct btc_coexist *btcoexist, struct seq_file *m);
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.c"
static struct coex_dm_8192e_2ant glcoex_dm_8192e_2ant;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.c"
static struct coex_dm_8192e_2ant *coex_dm_0 = & glcoex_dm_8192e_2ant;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.c"
static struct coex_sta_8192e_2ant glcoex_sta_8192e_2ant;
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.c"
static struct coex_sta_8192e_2ant *coex_sta_0 = & glcoex_sta_8192e_2ant;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.c"
static char *glbt_info_src_8192e_2ant[3U] = {(char *)"BT Info[wifi fw]", (char *)"BT Info[bt rsp]", (char *)"BT Info[bt auto report]"};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.c"
static u32 glcoex_ver_date_8192e_2ant = 20130902U;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.c"
static u32 glcoex_ver_8192e_2ant = 52U;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.c"
static u8 btc8192e2ant_bt_rssi_state(struct btc_coexist *btcoexist, u8 level_num, u8 rssi_thresh, u8 rssi_thresh1)
{
  #line 35 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 36 
  int bt_rssi = 0;
  #line 37 
  u8 bt_rssi_state = coex_sta_0->pre_bt_rssi_state;
  #line 39 
  bt_rssi = (int)coex_sta_0->bt_rssi;
  #line 41 
  if ((unsigned int)level_num == 2U) 
    #line 42 
    if ((unsigned int)coex_sta_0->pre_bt_rssi_state == 2U || (unsigned int)coex_sta_0->pre_bt_rssi_state == 5U) 
      #line 44 
      if ((int)rssi_thresh + 1 < bt_rssi) 
                                          #line 46 
                                          bt_rssi_state = (unsigned char)0U; else 
                                                                    #line 48 
                                                                    bt_rssi_state = (unsigned char)5U;
    else 
      #line 50 
      if ((int)rssi_thresh > bt_rssi) 
                                      #line 51 
                                      bt_rssi_state = (unsigned char)2U; else 
                                                                    #line 53 
                                                                    bt_rssi_state = (unsigned char)3U;
  else 
    #line 55 
    if ((unsigned int)level_num == 3U) {
      #line 56 
      if ((int)rssi_thresh > (int)rssi_thresh1) {
        #line 57 
        _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BT Rssi thresh error!!\n");
        #line 59 
        return coex_sta_0->pre_bt_rssi_state;
      }
      #line 62 
      if ((unsigned int)coex_sta_0->pre_bt_rssi_state == 2U || (unsigned int)coex_sta_0->pre_bt_rssi_state == 5U) 
        #line 64 
        if ((int)rssi_thresh + 1 < bt_rssi) 
                                            #line 66 
                                            bt_rssi_state = (unsigned char)1U; else 
                                                                    #line 68 
                                                                    bt_rssi_state = (unsigned char)5U;
      else 
        #line 69 
        if ((unsigned int)coex_sta_0->pre_bt_rssi_state == 1U || (unsigned int)coex_sta_0->pre_bt_rssi_state == 4U) 
          #line 73 
          if ((int)rssi_thresh1 + 1 < bt_rssi) 
                                               #line 75 
                                               bt_rssi_state = (unsigned char)0U;
          else 
            #line 76 
            if ((int)rssi_thresh > bt_rssi) 
                                            #line 77 
                                            bt_rssi_state = (unsigned char)2U; else 
                                                                    #line 79 
                                                                    bt_rssi_state = (unsigned char)4U;
        else 
          #line 81 
          if ((int)rssi_thresh1 > bt_rssi) 
                                           #line 82 
                                           bt_rssi_state = (unsigned char)1U; else 
                                                                    #line 84 
                                                                    bt_rssi_state = (unsigned char)3U;
    }
  #line 88 
  coex_sta_0->pre_bt_rssi_state = bt_rssi_state;
  #line 90 
  return bt_rssi_state;
}

#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.c"
static u8 btc8192e2ant_wifi_rssi_state(struct btc_coexist *btcoexist, u8 index, u8 level_num, u8 rssi_thresh, u8 rssi_thresh1)
{
  #line 97 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 98 
  int wifi_rssi = 0;
  #line 99 
  u8 wifi_rssi_state = coex_sta_0->pre_wifi_rssi_state[(int)index];
  #line 101 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)22,(void *)(& wifi_rssi));
  #line 103 
  if ((unsigned int)level_num == 2U) 
    #line 104 
    if ((unsigned int)coex_sta_0->pre_wifi_rssi_state[(int)index] == 2U || (unsigned int)coex_sta_0->pre_wifi_rssi_state[(int)index] == 5U) 
      #line 108 
      if ((int)rssi_thresh + 1 < wifi_rssi) 
                                            #line 110 
                                            wifi_rssi_state = (unsigned char)0U; else 
                                                                    #line 112 
                                                                    wifi_rssi_state = (unsigned char)5U;
    else 
      #line 114 
      if ((int)rssi_thresh > wifi_rssi) 
                                        #line 115 
                                        wifi_rssi_state = (unsigned char)2U; else 
                                                                    #line 117 
                                                                    wifi_rssi_state = (unsigned char)3U;
  else 
    #line 119 
    if ((unsigned int)level_num == 3U) {
      #line 120 
      if ((int)rssi_thresh > (int)rssi_thresh1) {
        #line 121 
        _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], wifi RSSI thresh error!!\n");
        #line 123 
        return coex_sta_0->pre_wifi_rssi_state[(int)index];
      }
      #line 126 
      if ((unsigned int)coex_sta_0->pre_wifi_rssi_state[(int)index] == 2U || (unsigned int)coex_sta_0->pre_wifi_rssi_state[(int)index] == 5U) 
        #line 130 
        if ((int)rssi_thresh + 1 < wifi_rssi) 
                                              #line 132 
                                              wifi_rssi_state = (unsigned char)1U; else 
                                                                    #line 134 
                                                                    wifi_rssi_state = (unsigned char)5U;
      else 
        #line 135 
        if ((unsigned int)coex_sta_0->pre_wifi_rssi_state[(int)index] == 1U || (unsigned int)coex_sta_0->pre_wifi_rssi_state[(int)index] == 4U) 
          #line 139 
          if ((int)rssi_thresh1 + 1 < wifi_rssi) 
                                                 #line 141 
                                                 wifi_rssi_state = (unsigned char)0U;
          else 
            #line 142 
            if ((int)rssi_thresh > wifi_rssi) 
                                              #line 143 
                                              wifi_rssi_state = (unsigned char)2U; else 
                                                                    #line 145 
                                                                    wifi_rssi_state = (unsigned char)4U;
        else 
          #line 147 
          if ((int)rssi_thresh1 > wifi_rssi) 
                                             #line 148 
                                             wifi_rssi_state = (unsigned char)1U; else 
                                                                    #line 150 
                                                                    wifi_rssi_state = (unsigned char)3U;
    }
  #line 154 
  coex_sta_0->pre_wifi_rssi_state[(int)index] = wifi_rssi_state;
  #line 156 
  return wifi_rssi_state;
}

#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.c"
static void btc8192e2ant_monitor_bt_enable_disable(struct btc_coexist *btcoexist)
{
  #line 163 
  bool pre_bt_disabled;
  #line 164 
  u32 bt_disable_cnt;
  #line 162 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 165 
  bool bt_active = (_Bool)1;
  #line 165 
  bool bt_disabled = (_Bool)0;
  #line 169 
  if (((coex_sta_0->high_priority_tx == 0U && coex_sta_0->high_priority_rx == 0U) && coex_sta_0->low_priority_tx == 0U) && coex_sta_0->low_priority_rx == 0U) 
    #line 173 
    bt_active = (_Bool)0;
  #line 175 
  if (((coex_sta_0->high_priority_tx == 65535U && coex_sta_0->high_priority_rx == 65535U) && coex_sta_0->low_priority_tx == 65535U) && coex_sta_0->low_priority_rx == 65535U) 
    #line 179 
    bt_active = (_Bool)0;
  #line 181 
  if ((int)bt_active != 0) {
    #line 182 
    bt_disable_cnt = 0U;
    #line 183 
    bt_disabled = (_Bool)0;
    #line 184 
    (*(btcoexist->btc_set))((void *)btcoexist,(unsigned char)0,(void *)(& bt_disabled));
    #line 186 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BT is enabled !!\n");
  }
  else {
    #line 189 
    bt_disable_cnt ++;
    #line 190 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], bt all counters = 0, %d times!!\n",bt_disable_cnt);
    #line 193 
    if (bt_disable_cnt > 1U) {
      #line 194 
      bt_disabled = (_Bool)1;
      #line 195 
      (*(btcoexist->btc_set))((void *)btcoexist,(unsigned char)0,(void *)(& bt_disabled));
      #line 197 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BT is disabled !!\n");
    }
  }
  #line 201 
  if ((int)pre_bt_disabled != (int)bt_disabled) {
    #line 202 
    char *tmp;
    #line 202 
    char *tmp_0;
    #line 202 
    if ((int)bt_disabled != 0) 
                               #line 202 
                               tmp = (char *)"disabled"; else 
                                                              #line 202 
                                                              tmp = (char *)"enabled";
    #line 202 
    if ((int)pre_bt_disabled != 0) 
                                   #line 202 
                                   tmp_0 = (char *)"disabled"; else 
                                                                    #line 202 
                                                                    tmp_0 = (char *)"enabled";
    #line 202 
    ;
    #line 202 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BT is from %s to %s!!\n",tmp_0,tmp);
    #line 206 
    pre_bt_disabled = bt_disabled;
  }
  #line 208 
  return;
}

#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.c"
static u32 btc8192e2ant_decide_ra_mask(struct btc_coexist *btcoexist, u8 ss_type, u32 ra_mask_type)
{
  #line 213 
  u32 dis_ra_mask = 0U;
  #line 215 
  switch (ra_mask_type) {
    #line 216 
    case (u32)0: 
                 #line 216 
    ;
    #line 217 
    if ((unsigned int)ss_type == 2U) 
                                     #line 218 
                                     dis_ra_mask = 0U; else 
                                                            #line 220 
                                                            dis_ra_mask = 4293918720U;
    #line 221 
    break;
    #line 222 
    case (u32)1: 
                 #line 222 
    ;
    #line 223 
    if ((unsigned int)ss_type == 2U) 
                                     #line 224 
                                     dis_ra_mask = 3U; else 
                                                            #line 226 
                                                            dis_ra_mask = 4293918723U;
    #line 227 
    break;
    #line 228 
    case (u32)2: 
                 #line 228 
    ;
    #line 229 
    if ((unsigned int)ss_type == 2U) 
                                     #line 230 
                                     dis_ra_mask = 127479U; else 
                                                                 #line 232 
                                                                 dis_ra_mask = 4294046199U;
    #line 233 
    break;
    #line 234 
    default: 
             #line 234 
    ;
    #line 235 
    break;
  }
  #line 238 
  return dis_ra_mask;
}

#line 241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.c"
static void btc8192e2ant_update_ra_mask(struct btc_coexist *btcoexist, bool force_exec, u32 dis_rate_mask)
{
  #line 244 
  coex_dm_0->cur_ra_mask = dis_rate_mask;
  #line 246 
  if ((int)force_exec != 0 || coex_dm_0->pre_ra_mask != coex_dm_0->cur_ra_mask) 
    #line 247 
    (*(btcoexist->btc_set))((void *)btcoexist,(unsigned char)30,(void *)(& coex_dm_0->cur_ra_mask));
  #line 249 
  coex_dm_0->pre_ra_mask = coex_dm_0->cur_ra_mask;
  #line 250 
  return;
}

#line 252  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.c"
static void btc8192e2ant_auto_rate_fallback_retry(struct btc_coexist *btcoexist, bool force_exec, u8 type)
{
  #line 255 
  bool wifi_under_b_mode = (_Bool)0;
  #line 257 
  coex_dm_0->cur_arfr_type = type;
  #line 259 
  if ((int)force_exec != 0 || (int)coex_dm_0->pre_arfr_type != (int)coex_dm_0->cur_arfr_type) 
    #line 260 
    switch ((int)coex_dm_0->cur_arfr_type) {
      #line 261 
      case 0: 
              #line 261 
      ;
      #line 262 
      (*(btcoexist->btc_write_4byte))((void *)btcoexist,1072U,coex_dm_0->backup_arfr_cnt1);
      #line 264 
      (*(btcoexist->btc_write_4byte))((void *)btcoexist,1076U,coex_dm_0->backup_arfr_cnt2);
      #line 266 
      break;
      #line 267 
      case 1: 
              #line 267 
      ;
      #line 268 
      (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)16,(void *)(& wifi_under_b_mode));
      #line 271 
      if ((int)wifi_under_b_mode != 0) {
        #line 272 
        (*(btcoexist->btc_write_4byte))((void *)btcoexist,1072U,0U);
        #line 274 
        (*(btcoexist->btc_write_4byte))((void *)btcoexist,1076U,16843009U);
      }
      else {
        #line 277 
        (*(btcoexist->btc_write_4byte))((void *)btcoexist,1072U,0U);
        #line 279 
        (*(btcoexist->btc_write_4byte))((void *)btcoexist,1076U,67305985U);
      }
      #line 282 
      break;
      #line 283 
      default: 
               #line 283 
      ;
      #line 284 
      break;
    }
  #line 288 
  coex_dm_0->pre_arfr_type = coex_dm_0->cur_arfr_type;
  #line 289 
  return;
}

#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.c"
static void btc8192e2ant_retry_limit(struct btc_coexist *btcoexist, bool force_exec, u8 type)
{
  #line 294 
  coex_dm_0->cur_retry_limit_type = type;
  #line 296 
  if ((int)force_exec != 0 || (int)coex_dm_0->pre_retry_limit_type != (int)coex_dm_0->cur_retry_limit_type) 
    #line 298 
    switch ((int)coex_dm_0->cur_retry_limit_type) {
      #line 299 
      case 0: 
              #line 299 
      ;
      #line 300 
      (*(btcoexist->btc_write_2byte))((void *)btcoexist,1066U,(unsigned short)((int)coex_dm_0->backup_retry_limit));
      #line 302 
      break;
      #line 303 
      case 1: 
              #line 303 
      ;
      #line 304 
      (*(btcoexist->btc_write_2byte))((void *)btcoexist,1066U,(unsigned short)2056);
      #line 305 
      break;
      #line 306 
      default: 
               #line 306 
      ;
      #line 307 
      break;
    }
  #line 311 
  coex_dm_0->pre_retry_limit_type = coex_dm_0->cur_retry_limit_type;
  #line 312 
  return;
}

#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.c"
static void btc8192e2ant_ampdu_maxtime(struct btc_coexist *btcoexist, bool force_exec, u8 type)
{
  #line 317 
  coex_dm_0->cur_ampdu_time_type = type;
  #line 319 
  if ((int)force_exec != 0 || (int)coex_dm_0->pre_ampdu_time_type != (int)coex_dm_0->cur_ampdu_time_type) 
    #line 321 
    switch ((int)coex_dm_0->cur_ampdu_time_type) {
      #line 322 
      case 0: 
              #line 322 
      ;
      #line 323 
      (*(btcoexist->btc_write_1byte))((void *)btcoexist,1110U,(unsigned int)coex_dm_0->backup_ampdu_maxtime);
      #line 325 
      break;
      #line 326 
      case 1: 
              #line 326 
      ;
      #line 327 
      (*(btcoexist->btc_write_1byte))((void *)btcoexist,1110U,56U);
      #line 328 
      break;
      #line 329 
      default: 
               #line 329 
      ;
      #line 330 
      break;
    }
  #line 334 
  coex_dm_0->pre_ampdu_time_type = coex_dm_0->cur_ampdu_time_type;
  #line 335 
  return;
}

#line 337  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.c"
static void btc8192e2ant_limited_tx(struct btc_coexist *btcoexist, bool force_exec, u8 ra_mask_type, u8 arfr_type, u8 retry_limit_type, u8 ampdu_time_type)
{
  #line 342 
  u32 dis_ra_mask = 0U;
  #line 344 
  coex_dm_0->cur_ra_mask_type = ra_mask_type;
  #line 345 
  dis_ra_mask = btc8192e2ant_decide_ra_mask(btcoexist,(unsigned char)((int)coex_dm_0->cur_ss_type),(unsigned int)ra_mask_type);
  #line 348 
  btc8192e2ant_update_ra_mask(btcoexist,(_Bool)((bool)((int)force_exec) != 0),dis_ra_mask);
  #line 349 
  btc8192e2ant_auto_rate_fallback_retry(btcoexist,(_Bool)((bool)((int)force_exec) != 0),(unsigned char)((int)arfr_type));
  #line 350 
  btc8192e2ant_retry_limit(btcoexist,(_Bool)((bool)((int)force_exec) != 0),(unsigned char)((int)retry_limit_type));
  #line 351 
  btc8192e2ant_ampdu_maxtime(btcoexist,(_Bool)((bool)((int)force_exec) != 0),(unsigned char)((int)ampdu_time_type));
  #line 352 
  return;
}

#line 354  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.c"
static void btc8192e2ant_limited_rx(struct btc_coexist *btcoexist, bool force_exec, bool rej_ap_agg_pkt, bool bt_ctrl_agg_buf_size, u8 agg_buf_size)
{
  #line 359 
  bool reject_rx_agg = rej_ap_agg_pkt;
  #line 360 
  bool bt_ctrl_rx_agg_size = bt_ctrl_agg_buf_size;
  #line 361 
  u8 rx_agg_size = agg_buf_size;
  #line 366 
  (*(btcoexist->btc_set))((void *)btcoexist,(unsigned char)4,(void *)(& reject_rx_agg));
  #line 369 
  (*(btcoexist->btc_set))((void *)btcoexist,(unsigned char)5,(void *)(& bt_ctrl_rx_agg_size));
  #line 374 
  (*(btcoexist->btc_set))((void *)btcoexist,(unsigned char)11,(void *)(& rx_agg_size));
  #line 376 
  (*(btcoexist->btc_set))((void *)btcoexist,(unsigned char)13,(void *)0);
  #line 377 
  return;
}

#line 379  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.c"
static void btc8192e2ant_monitor_bt_ctr(struct btc_coexist *btcoexist)
{
  #line 382 
  u32 reg_hp_txrx;
  #line 382 
  u32 reg_lp_txrx;
  #line 382 
  u32 u32tmp;
  #line 381 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 383 
  u32 reg_hp_tx = 0U;
  #line 383 
  u32 reg_hp_rx = 0U;
  #line 383 
  u32 reg_lp_tx = 0U;
  #line 383 
  u32 reg_lp_rx = 0U;
  #line 385 
  reg_hp_txrx = 1904U;
  #line 386 
  reg_lp_txrx = 1908U;
  #line 388 
  u32tmp = (*(btcoexist->btc_read_4byte))((void *)btcoexist,reg_hp_txrx);
  #line 389 
  reg_hp_tx = u32tmp & 65535U;
  #line 390 
  reg_hp_rx = u32tmp >> 16;
  #line 392 
  u32tmp = (*(btcoexist->btc_read_4byte))((void *)btcoexist,reg_lp_txrx);
  #line 393 
  reg_lp_tx = u32tmp & 65535U;
  #line 394 
  reg_lp_rx = u32tmp >> 16;
  #line 396 
  coex_sta_0->high_priority_tx = reg_hp_tx;
  #line 397 
  coex_sta_0->high_priority_rx = reg_hp_rx;
  #line 398 
  coex_sta_0->low_priority_tx = reg_lp_tx;
  #line 399 
  coex_sta_0->low_priority_rx = reg_lp_rx;
  #line 401 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex] High Priority Tx/Rx (reg 0x%x) = 0x%x(%d)/0x%x(%d)\n",reg_hp_txrx,reg_hp_tx,reg_hp_tx,reg_hp_rx,reg_hp_rx);
  #line 404 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex] Low Priority Tx/Rx (reg 0x%x) = 0x%x(%d)/0x%x(%d)\n",reg_lp_txrx,reg_lp_tx,reg_lp_tx,reg_lp_rx,reg_lp_rx);
  #line 409 
  (*(btcoexist->btc_write_1byte))((void *)btcoexist,1902U,12U);
  #line 410 
  return;
}

#line 412  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.c"
static void btc8192e2ant_query_bt_info(struct btc_coexist *btcoexist)
{
  #line 414 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 415 
  u8 h2c_parameter[1U] = {(unsigned char)0U};
  #line 417 
  coex_sta_0->c2h_bt_info_req_sent = (_Bool)1;
  #line 419 
  h2c_parameter[0] = (unsigned char)((unsigned int)h2c_parameter[0] | 1U);
  #line 421 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Query Bt Info, FW write 0x61 = 0x%x\n",(int)h2c_parameter[0]);
  #line 425 
  (*(btcoexist->btc_fill_h2c))((void *)btcoexist,(unsigned char)97,1U,(u8 *)(& h2c_parameter));
  #line 426 
  return;
}

#line 429  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.c"
static bool btc8192e2ant_is_wifi_status_changed(struct btc_coexist *btcoexist)
{
  #line 431 
  bool pre_wifi_busy = (_Bool)0;
  #line 431 
  bool pre_under_4way = (_Bool)0;
  #line 432 
  bool pre_bt_hs_on = (_Bool)0;
  #line 433 
  bool wifi_busy = (_Bool)0;
  #line 433 
  bool under_4way = (_Bool)0;
  #line 433 
  bool bt_hs_on = (_Bool)0;
  #line 434 
  bool wifi_connected = (_Bool)0;
  #line 436 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)2,(void *)(& wifi_connected));
  #line 438 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)4,(void *)(& wifi_busy));
  #line 439 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)0,(void *)(& bt_hs_on));
  #line 440 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)12,(void *)(& under_4way));
  #line 443 
  if ((int)wifi_connected != 0) {
    #line 444 
    if ((int)wifi_busy != (int)pre_wifi_busy) {
      #line 445 
      pre_wifi_busy = wifi_busy;
      #line 446 
      return (_Bool)1;
    }
    #line 448 
    if ((int)under_4way != (int)pre_under_4way) {
      #line 449 
      pre_under_4way = under_4way;
      #line 450 
      return (_Bool)1;
    }
    #line 452 
    if ((int)bt_hs_on != (int)pre_bt_hs_on) {
      #line 453 
      pre_bt_hs_on = bt_hs_on;
      #line 454 
      return (_Bool)1;
    }
  }
  #line 458 
  return (_Bool)0;
}

#line 461  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.c"
static void btc8192e2ant_update_bt_link_info(struct btc_coexist *btcoexist)
{
  #line 463 
  struct btc_bt_link_info *bt_link_info = & btcoexist->bt_link_info;
  #line 464 
  bool bt_hs_on = (_Bool)0;
  #line 466 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)0,(void *)(& bt_hs_on));
  #line 468 
  bt_link_info->bt_link_exist = coex_sta_0->bt_link_exist;
  #line 469 
  bt_link_info->sco_exist = coex_sta_0->sco_exist;
  #line 470 
  bt_link_info->a2dp_exist = coex_sta_0->a2dp_exist;
  #line 471 
  bt_link_info->pan_exist = coex_sta_0->pan_exist;
  #line 472 
  bt_link_info->hid_exist = coex_sta_0->hid_exist;
  #line 475 
  if ((int)bt_hs_on != 0) {
    #line 476 
    bt_link_info->pan_exist = (_Bool)1;
    #line 477 
    bt_link_info->bt_link_exist = (_Bool)1;
  }
  #line 481 
  if ((((int)bt_link_info->sco_exist != 0 && ! bt_link_info->a2dp_exist) && ! bt_link_info->pan_exist) && ! bt_link_info->hid_exist) 
    #line 485 
    bt_link_info->sco_only = (_Bool)1; else 
                                            #line 487 
                                            bt_link_info->sco_only = (_Bool)0;
  #line 490 
  if (((! bt_link_info->sco_exist && (int)bt_link_info->a2dp_exist != 0) && ! bt_link_info->pan_exist) && ! bt_link_info->hid_exist) 
    #line 494 
    bt_link_info->a2dp_only = (_Bool)1; else 
                                             #line 496 
                                             bt_link_info->a2dp_only = (_Bool)0;
  #line 499 
  if (((! bt_link_info->sco_exist && ! bt_link_info->a2dp_exist) && (int)bt_link_info->pan_exist != 0) && ! bt_link_info->hid_exist) 
    #line 503 
    bt_link_info->pan_only = (_Bool)1; else 
                                            #line 505 
                                            bt_link_info->pan_only = (_Bool)0;
  #line 508 
  if (((! bt_link_info->sco_exist && ! bt_link_info->a2dp_exist) && ! bt_link_info->pan_exist) && (int)bt_link_info->hid_exist != 0) 
    #line 512 
    bt_link_info->hid_only = (_Bool)1; else 
                                            #line 514 
                                            bt_link_info->hid_only = (_Bool)0;
  #line 515 
  return;
}

#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.c"
static u8 btc8192e2ant_action_algorithm(struct btc_coexist *btcoexist)
{
  #line 519 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 520 
  struct btc_bt_link_info *bt_link_info = & btcoexist->bt_link_info;
  #line 521 
  struct btc_stack_info *stack_info = & btcoexist->stack_info;
  #line 522 
  bool bt_hs_on = (_Bool)0;
  #line 523 
  u8 algorithm = (unsigned char)0U;
  #line 524 
  u8 num_of_diff_profile = (unsigned char)0U;
  #line 526 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)0,(void *)(& bt_hs_on));
  #line 528 
  if (! bt_link_info->bt_link_exist) {
    #line 529 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"No BT link exists!!!\n");
    #line 531 
    return algorithm;
  }
  #line 534 
  if ((int)bt_link_info->sco_exist != 0) 
                                         #line 535 
                                         num_of_diff_profile = (u8)((int)num_of_diff_profile + 1);
  #line 536 
  if ((int)bt_link_info->hid_exist != 0) 
                                         #line 537 
                                         num_of_diff_profile = (u8)((int)num_of_diff_profile + 1);
  #line 538 
  if ((int)bt_link_info->pan_exist != 0) 
                                         #line 539 
                                         num_of_diff_profile = (u8)((int)num_of_diff_profile + 1);
  #line 540 
  if ((int)bt_link_info->a2dp_exist != 0) 
                                          #line 541 
                                          num_of_diff_profile = (u8)((int)num_of_diff_profile + 1);
  #line 543 
  if ((unsigned int)num_of_diff_profile == 1U) {
    #line 544 
    if ((int)bt_link_info->sco_exist != 0) {
      #line 545 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"SCO only\n");
      #line 547 
      algorithm = (unsigned char)1U;
    }
    else 
      #line 549 
      if ((int)bt_link_info->hid_exist != 0) {
        #line 550 
        _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"HID only\n");
        #line 552 
        algorithm = (unsigned char)3U;
      }
      else 
        #line 553 
        if ((int)bt_link_info->a2dp_exist != 0) {
          #line 554 
          _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"A2DP only\n");
          #line 556 
          algorithm = (unsigned char)4U;
        }
        else 
          #line 557 
          if ((int)bt_link_info->pan_exist != 0) 
            #line 558 
            if ((int)bt_hs_on != 0) {
              #line 559 
              _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"PAN(HS) only\n");
              #line 562 
              algorithm = (unsigned char)7U;
            }
            else {
              #line 565 
              _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"PAN(EDR) only\n");
              #line 568 
              algorithm = (unsigned char)6U;
            }
  }
  else 
    #line 573 
    if ((unsigned int)num_of_diff_profile == 2U) {
      #line 574 
      if ((int)bt_link_info->sco_exist != 0) {
        #line 575 
        if ((int)bt_link_info->hid_exist != 0) {
          #line 576 
          _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"SCO + HID\n");
          #line 578 
          algorithm = (unsigned char)1U;
        }
        else 
          #line 579 
          if ((int)bt_link_info->a2dp_exist != 0) {
            #line 580 
            _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"SCO + A2DP ==> SCO\n");
            #line 582 
            algorithm = (unsigned char)9U;
          }
          else 
            #line 583 
            if ((int)bt_link_info->pan_exist != 0) 
              #line 584 
              if ((int)bt_hs_on != 0) {
                #line 585 
                _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"SCO + PAN(HS)\n");
                #line 588 
                algorithm = (unsigned char)1U;
              }
              else {
                #line 590 
                _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"SCO + PAN(EDR)\n");
                #line 593 
                algorithm = (unsigned char)2U;
              }
      }
      else 
        #line 598 
        if ((int)bt_link_info->hid_exist != 0 && (int)bt_link_info->a2dp_exist != 0) 
          #line 600 
          if ((unsigned int)stack_info->num_of_hid > 1U) {
            #line 601 
            _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"HID*2 + A2DP\n");
            #line 604 
            algorithm = (unsigned char)10U;
          }
          else {
            #line 607 
            _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"HID + A2DP\n");
            #line 610 
            algorithm = (unsigned char)11U;
          }
        else 
          #line 613 
          if ((int)bt_link_info->hid_exist != 0 && (int)bt_link_info->pan_exist != 0) 
            #line 615 
            if ((int)bt_hs_on != 0) {
              #line 616 
              _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"HID + PAN(HS)\n");
              #line 619 
              algorithm = (unsigned char)3U;
            }
            else {
              #line 621 
              _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"HID + PAN(EDR)\n");
              #line 624 
              algorithm = (unsigned char)9U;
            }
          else 
            #line 627 
            if ((int)bt_link_info->pan_exist != 0 && (int)bt_link_info->a2dp_exist != 0) 
              #line 629 
              if ((int)bt_hs_on != 0) {
                #line 630 
                _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"A2DP + PAN(HS)\n");
                #line 633 
                algorithm = (unsigned char)5U;
              }
              else {
                #line 636 
                _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"A2DP + PAN(EDR)\n");
                #line 639 
                algorithm = (unsigned char)8U;
              }
    }
    else 
      #line 644 
      if ((unsigned int)num_of_diff_profile == 3U) {
        #line 645 
        if ((int)bt_link_info->sco_exist != 0) {
          #line 646 
          if ((int)bt_link_info->hid_exist != 0 && (int)bt_link_info->a2dp_exist != 0) {
            #line 648 
            _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"SCO + HID + A2DP ==> HID\n");
            #line 650 
            algorithm = (unsigned char)9U;
          }
          else 
            #line 651 
            if ((int)bt_link_info->hid_exist != 0 && (int)bt_link_info->pan_exist != 0) 
              #line 653 
              if ((int)bt_hs_on != 0) {
                #line 654 
                _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"SCO + HID + PAN(HS)\n");
                #line 657 
                algorithm = (unsigned char)1U;
              }
              else {
                #line 659 
                _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"SCO + HID + PAN(EDR)\n");
                #line 662 
                algorithm = (unsigned char)2U;
              }
            else 
              #line 665 
              if ((int)bt_link_info->pan_exist != 0 && (int)bt_link_info->a2dp_exist != 0) 
                #line 667 
                if ((int)bt_hs_on != 0) {
                  #line 668 
                  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"SCO + A2DP + PAN(HS)\n");
                  #line 671 
                  algorithm = (unsigned char)1U;
                }
                else {
                  #line 673 
                  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"SCO + A2DP + PAN(EDR)\n");
                  #line 676 
                  algorithm = (unsigned char)9U;
                }
        }
        else 
          #line 681 
          if (((int)bt_link_info->hid_exist != 0 && (int)bt_link_info->pan_exist != 0) && (int)bt_link_info->a2dp_exist != 0) 
            #line 684 
            if ((int)bt_hs_on != 0) {
              #line 685 
              _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"HID + A2DP + PAN(HS)\n");
              #line 688 
              algorithm = (unsigned char)11U;
            }
            else {
              #line 691 
              _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"HID + A2DP + PAN(EDR)\n");
              #line 694 
              algorithm = (unsigned char)10U;
            }
      }
      else 
        #line 699 
        if ((unsigned int)num_of_diff_profile > 2U) 
          #line 700 
          if ((int)bt_link_info->sco_exist != 0) 
            #line 701 
            if (((int)bt_link_info->hid_exist != 0 && (int)bt_link_info->pan_exist != 0) && (int)bt_link_info->a2dp_exist != 0) 
              #line 704 
              if ((int)bt_hs_on != 0) 
                                      #line 705 
                                      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"ErrorSCO+HID+A2DP+PAN(HS)\n");
              else {
                #line 710 
                _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"SCO+HID+A2DP+PAN(EDR)\n");
                #line 713 
                algorithm = (unsigned char)9U;
              }
  #line 720 
  return algorithm;
}

#line 723  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.c"
static void btc8192e2ant_set_fw_dac_swing_level(struct btc_coexist *btcoexist, u8 dac_swing_lvl)
{
  #line 726 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 727 
  u8 h2c_parameter[1U] = {(unsigned char)0U};
  #line 732 
  h2c_parameter[0] = dac_swing_lvl;
  #line 734 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Set Dac Swing Level = 0x%x\n",(int)dac_swing_lvl);
  #line 736 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], FW write 0x64 = 0x%x\n",(int)h2c_parameter[0]);
  #line 739 
  (*(btcoexist->btc_fill_h2c))((void *)btcoexist,(unsigned char)100,1U,(u8 *)(& h2c_parameter));
  #line 740 
  return;
}

#line 742  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.c"
static void btc8192e2ant_set_fw_dec_bt_pwr(struct btc_coexist *btcoexist, u8 dec_bt_pwr_lvl)
{
  #line 745 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 746 
  u8 h2c_parameter[1U] = {(unsigned char)0U};
  #line 748 
  h2c_parameter[0] = dec_bt_pwr_lvl;
  #line 750 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex] decrease Bt Power level = %d, FW write 0x62 = 0x%x\n",(int)dec_bt_pwr_lvl,(int)h2c_parameter[0]);
  #line 754 
  (*(btcoexist->btc_fill_h2c))((void *)btcoexist,(unsigned char)98,1U,(u8 *)(& h2c_parameter));
  #line 755 
  return;
}

#line 757  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.c"
static void btc8192e2ant_dec_bt_pwr(struct btc_coexist *btcoexist, bool force_exec, u8 dec_bt_pwr_lvl)
{
  #line 762 
  char *tmp;
  #line 760 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 762 
  ;
  #line 762 
  if ((int)force_exec != 0) 
                            #line 762 
                            tmp = (char *)"force to"; else 
                                                           #line 762 
                                                           tmp = (char *)"";
  #line 762 
  ;
  #line 762 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], %s Dec BT power level = %d\n",tmp,(int)dec_bt_pwr_lvl);
  #line 765 
  coex_dm_0->cur_dec_bt_pwr = dec_bt_pwr_lvl;
  #line 767 
  if (! force_exec) 
                    #line 768 
                    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], preBtDecPwrLvl=%d, curBtDecPwrLvl=%d\n",(int)coex_dm_0->pre_dec_bt_pwr,(int)coex_dm_0->cur_dec_bt_pwr);
  #line 772 
  btc8192e2ant_set_fw_dec_bt_pwr(btcoexist,(unsigned char)((int)coex_dm_0->cur_dec_bt_pwr));
  #line 774 
  coex_dm_0->pre_dec_bt_pwr = coex_dm_0->cur_dec_bt_pwr;
  #line 775 
  return;
}

#line 777  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.c"
static void btc8192e2ant_set_bt_auto_report(struct btc_coexist *btcoexist, bool enable_auto_report)
{
  #line 788 
  char *tmp;
  #line 780 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 781 
  u8 h2c_parameter[1U] = {(unsigned char)0U};
  #line 783 
  h2c_parameter[0] = (unsigned char)0U;
  #line 785 
  if ((int)enable_auto_report != 0) 
                                    #line 786 
                                    h2c_parameter[0] = (unsigned char)((unsigned int)h2c_parameter[0] | 1U);
  #line 788 
  ;
  #line 788 
  if ((int)enable_auto_report != 0) 
                                    #line 788 
                                    tmp = (char *)"Enabled!!"; else 
                                                                    #line 788 
                                                                    tmp = (char *)"Disabled!!";
  #line 788 
  ;
  #line 788 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BT FW auto report : %s, FW write 0x68 = 0x%x\n",tmp,(int)h2c_parameter[0]);
  #line 793 
  (*(btcoexist->btc_fill_h2c))((void *)btcoexist,(unsigned char)104,1U,(u8 *)(& h2c_parameter));
  #line 794 
  return;
}

#line 796  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.c"
static void btc8192e2ant_bt_auto_report(struct btc_coexist *btcoexist, bool force_exec, bool enable_auto_report)
{
  #line 802 
  char *tmp;
  #line 802 
  char *tmp_0;
  #line 800 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 802 
  if ((int)enable_auto_report != 0) 
                                    #line 802 
                                    tmp = (char *)"Enabled"; else 
                                                                  #line 802 
                                                                  tmp = (char *)"Disabled";
  #line 802 
  if ((int)force_exec != 0) 
                            #line 802 
                            tmp_0 = (char *)"force to"; else 
                                                             #line 802 
                                                             tmp_0 = (char *)"";
  #line 802 
  ;
  #line 802 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], %s BT Auto report = %s\n",tmp_0,tmp);
  #line 806 
  coex_dm_0->cur_bt_auto_report = enable_auto_report;
  #line 808 
  if (! force_exec) {
    #line 809 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex] bPreBtAutoReport=%d, bCurBtAutoReport=%d\n",(int)coex_dm_0->pre_bt_auto_report,(int)coex_dm_0->cur_bt_auto_report);
    #line 814 
    if ((int)coex_dm_0->pre_bt_auto_report == (int)coex_dm_0->cur_bt_auto_report) 
      #line 815 
      return;
  }
  #line 817 
  btc8192e2ant_set_bt_auto_report(btcoexist,(_Bool)((bool)((int)coex_dm_0->cur_bt_auto_report) != 0));
  #line 820 
  coex_dm_0->pre_bt_auto_report = coex_dm_0->cur_bt_auto_report;
  #line 821 
  return;
}

#line 823  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.c"
static void btc8192e2ant_fw_dac_swing_lvl(struct btc_coexist *btcoexist, bool force_exec, u8 fw_dac_swing_lvl)
{
  #line 828 
  char *tmp;
  #line 826 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 828 
  ;
  #line 828 
  if ((int)force_exec != 0) 
                            #line 828 
                            tmp = (char *)"force to"; else 
                                                           #line 828 
                                                           tmp = (char *)"";
  #line 828 
  ;
  #line 828 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], %s set FW Dac Swing level = %d\n",tmp,(int)fw_dac_swing_lvl);
  #line 831 
  coex_dm_0->cur_fw_dac_swing_lvl = fw_dac_swing_lvl;
  #line 833 
  if (! force_exec) {
    #line 834 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex] preFwDacSwingLvl=%d, curFwDacSwingLvl=%d\n",(int)coex_dm_0->pre_fw_dac_swing_lvl,(int)coex_dm_0->cur_fw_dac_swing_lvl);
    #line 839 
    if ((int)coex_dm_0->pre_fw_dac_swing_lvl == (int)coex_dm_0->cur_fw_dac_swing_lvl) 
      #line 841 
      return;
  }
  #line 844 
  btc8192e2ant_set_fw_dac_swing_level(btcoexist,(unsigned char)((int)coex_dm_0->cur_fw_dac_swing_lvl));
  #line 847 
  coex_dm_0->pre_fw_dac_swing_lvl = coex_dm_0->cur_fw_dac_swing_lvl;
  #line 848 
  return;
}

#line 850  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.c"
static void btc8192e2ant_set_sw_rf_rx_lpf_corner(struct btc_coexist *btcoexist, bool rx_rf_shrink_on)
{
  #line 853 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 855 
  if ((int)rx_rf_shrink_on != 0) {
    #line 857 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Shrink RF Rx LPF corner!!\n");
    #line 859 
    (*(btcoexist->btc_set_rf_reg))((void *)btcoexist,(unsigned char)0,30U,1048575U,1048572U);
  }
  else 
    #line 865 
    if ((int)btcoexist->initilized != 0) {
      #line 866 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Resume RF Rx LPF corner!!\n");
      #line 868 
      (*(btcoexist->btc_set_rf_reg))((void *)btcoexist,(unsigned char)0,30U,1048575U,coex_dm_0->bt_rf0x1e_backup);
    }
  #line 872 
  return;
}

#line 875  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.c"
static void btc8192e2ant_rf_shrink(struct btc_coexist *btcoexist, bool force_exec, bool rx_rf_shrink_on)
{
  #line 880 
  char *tmp;
  #line 880 
  char *tmp_0;
  #line 878 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 880 
  if ((int)rx_rf_shrink_on != 0) 
                                 #line 880 
                                 tmp = (char *)"ON"; else 
                                                          #line 880 
                                                          tmp = (char *)"OFF";
  #line 880 
  if ((int)force_exec != 0) 
                            #line 880 
                            tmp_0 = (char *)"force to"; else 
                                                             #line 880 
                                                             tmp_0 = (char *)"";
  #line 880 
  ;
  #line 880 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], %s turn Rx RF Shrink = %s\n",tmp_0,tmp);
  #line 884 
  coex_dm_0->cur_rf_rx_lpf_shrink = rx_rf_shrink_on;
  #line 886 
  if (! force_exec) {
    #line 887 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex]bPreRfRxLpfShrink=%d,bCurRfRxLpfShrink=%d\n",(int)coex_dm_0->pre_rf_rx_lpf_shrink,(int)coex_dm_0->cur_rf_rx_lpf_shrink);
    #line 892 
    if ((int)coex_dm_0->pre_rf_rx_lpf_shrink == (int)coex_dm_0->cur_rf_rx_lpf_shrink) 
      #line 894 
      return;
  }
  #line 896 
  btc8192e2ant_set_sw_rf_rx_lpf_corner(btcoexist,(_Bool)((bool)((int)coex_dm_0->cur_rf_rx_lpf_shrink) != 0));
  #line 899 
  coex_dm_0->pre_rf_rx_lpf_shrink = coex_dm_0->cur_rf_rx_lpf_shrink;
  #line 900 
  return;
}

#line 902  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.c"
static void btc8192e2ant_set_dac_swing_reg(struct btc_coexist *btcoexist, u32 level)
{
  #line 905 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 906 
  u8 val = (unsigned char)level;
  #line 908 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Write SwDacSwing = 0x%x\n",level);
  #line 910 
  (*(btcoexist->btc_write_1byte_bitmask))((void *)btcoexist,2179U,62U,(unsigned char)((int)val));
  #line 911 
  return;
}

#line 913  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.c"
static void btc8192e2ant_set_sw_full_swing(struct btc_coexist *btcoexist, bool sw_dac_swing_on, u32 sw_dac_swing_lvl)
{
  #line 917 
  if ((int)sw_dac_swing_on != 0) 
                                 #line 918 
                                 btc8192e2ant_set_dac_swing_reg(btcoexist,sw_dac_swing_lvl); else 
                                                                    #line 920 
                                                                    btc8192e2ant_set_dac_swing_reg(btcoexist,24U);
  #line 921 
  return;
}

#line 923  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.c"
static void btc8192e2ant_dac_swing(struct btc_coexist *btcoexist, bool force_exec, bool dac_swing_on, u32 dac_swing_lvl)
{
  #line 929 
  char *tmp;
  #line 929 
  char *tmp_0;
  #line 927 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 929 
  ;
  #line 929 
  if ((int)dac_swing_on != 0) 
                              #line 929 
                              tmp = (char *)"ON"; else 
                                                       #line 929 
                                                       tmp = (char *)"OFF";
  #line 929 
  if ((int)force_exec != 0) 
                            #line 929 
                            tmp_0 = (char *)"force to"; else 
                                                             #line 929 
                                                             tmp_0 = (char *)"";
  #line 929 
  ;
  #line 929 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], %s turn DacSwing=%s, dac_swing_lvl = 0x%x\n",tmp_0,tmp,dac_swing_lvl);
  #line 933 
  coex_dm_0->cur_dac_swing_on = dac_swing_on;
  #line 934 
  coex_dm_0->cur_dac_swing_lvl = dac_swing_lvl;
  #line 936 
  if (! force_exec) {
    #line 937 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], bPreDacSwingOn=%d, preDacSwingLvl = 0x%x, ",(int)coex_dm_0->pre_dac_swing_on,coex_dm_0->pre_dac_swing_lvl);
    #line 941 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"bCurDacSwingOn=%d, curDacSwingLvl = 0x%x\n",(int)coex_dm_0->cur_dac_swing_on,coex_dm_0->cur_dac_swing_lvl);
    #line 946 
    if ((int)coex_dm_0->pre_dac_swing_on == (int)coex_dm_0->cur_dac_swing_on && coex_dm_0->pre_dac_swing_lvl == coex_dm_0->cur_dac_swing_lvl) 
      #line 948 
      return;
  }
  {
    #line 950 
    unsigned long __ms = 30UL;
    #line 950 
    while (1) {
      #line 950 
      unsigned long tmp_1;
      #line 950 
      tmp_1 = __ms;
      #line 950 
      __ms --;
      #line 950 
      ;
      #line 950 
      if (! (tmp_1 != 0UL)) 
                            #line 950 
                            break;
      #line 950 
      __const_udelay(4295000UL);
    }
  }
  #line 951 
  btc8192e2ant_set_sw_full_swing(btcoexist,(_Bool)((bool)((int)dac_swing_on) != 0),dac_swing_lvl);
  #line 953 
  coex_dm_0->pre_dac_swing_on = coex_dm_0->cur_dac_swing_on;
  #line 954 
  coex_dm_0->pre_dac_swing_lvl = coex_dm_0->cur_dac_swing_lvl;
  #line 955 
  return;
}

#line 957  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.c"
static void btc8192e2ant_set_agc_table(struct btc_coexist *btcoexist, bool agc_table_en)
{
  #line 960 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 963 
  if ((int)agc_table_en != 0) {
    #line 964 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BB Agc Table On!\n");
    #line 966 
    (*(btcoexist->btc_write_4byte))((void *)btcoexist,3192U,169476097U);
    #line 967 
    (*(btcoexist->btc_write_4byte))((void *)btcoexist,3192U,152764417U);
    #line 968 
    (*(btcoexist->btc_write_4byte))((void *)btcoexist,3192U,136052737U);
    #line 969 
    (*(btcoexist->btc_write_4byte))((void *)btcoexist,3192U,119341057U);
    #line 970 
    (*(btcoexist->btc_write_4byte))((void *)btcoexist,3192U,102629377U);
    #line 971 
    (*(btcoexist->btc_write_4byte))((void *)btcoexist,3192U,85917697U);
  }
  else {
    #line 973 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BB Agc Table Off!\n");
    #line 975 
    (*(btcoexist->btc_write_4byte))((void *)btcoexist,3192U,2853830657U);
    #line 976 
    (*(btcoexist->btc_write_4byte))((void *)btcoexist,3192U,2837118977U);
    #line 977 
    (*(btcoexist->btc_write_4byte))((void *)btcoexist,3192U,2820407297U);
    #line 978 
    (*(btcoexist->btc_write_4byte))((void *)btcoexist,3192U,2803695617U);
    #line 979 
    (*(btcoexist->btc_write_4byte))((void *)btcoexist,3192U,2786983937U);
    #line 980 
    (*(btcoexist->btc_write_4byte))((void *)btcoexist,3192U,2770272257U);
  }
  #line 982 
  return;
}

#line 984  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.c"
static void btc8192e2ant_agc_table(struct btc_coexist *btcoexist, bool force_exec, bool agc_table_en)
{
  #line 989 
  char *tmp;
  #line 989 
  char *tmp_0;
  #line 987 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 989 
  if ((int)agc_table_en != 0) 
                              #line 989 
                              tmp = (char *)"Enable"; else 
                                                           #line 989 
                                                           tmp = (char *)"Disable";
  #line 989 
  if ((int)force_exec != 0) 
                            #line 989 
                            tmp_0 = (char *)"force to"; else 
                                                             #line 989 
                                                             tmp_0 = (char *)"";
  #line 989 
  ;
  #line 989 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], %s %s Agc Table\n",tmp_0,tmp);
  #line 993 
  coex_dm_0->cur_agc_table_en = agc_table_en;
  #line 995 
  if (! force_exec) {
    #line 996 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], bPreAgcTableEn=%d, bCurAgcTableEn=%d\n",(int)coex_dm_0->pre_agc_table_en,(int)coex_dm_0->cur_agc_table_en);
    #line 1001 
    if ((int)coex_dm_0->pre_agc_table_en == (int)coex_dm_0->cur_agc_table_en) 
      #line 1002 
      return;
  }
  #line 1004 
  btc8192e2ant_set_agc_table(btcoexist,(_Bool)((bool)((int)agc_table_en) != 0));
  #line 1006 
  coex_dm_0->pre_agc_table_en = coex_dm_0->cur_agc_table_en;
  #line 1007 
  return;
}

#line 1009  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.c"
static void btc8192e2ant_set_coex_table(struct btc_coexist *btcoexist, u32 val0x6c0, u32 val0x6c4, u32 val0x6c8, u8 val0x6cc)
{
  #line 1013 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 1015 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], set coex table, set 0x6c0 = 0x%x\n",val0x6c0);
  #line 1017 
  (*(btcoexist->btc_write_4byte))((void *)btcoexist,1728U,val0x6c0);
  #line 1019 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], set coex table, set 0x6c4 = 0x%x\n",val0x6c4);
  #line 1021 
  (*(btcoexist->btc_write_4byte))((void *)btcoexist,1732U,val0x6c4);
  #line 1023 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], set coex table, set 0x6c8 = 0x%x\n",val0x6c8);
  #line 1025 
  (*(btcoexist->btc_write_4byte))((void *)btcoexist,1736U,val0x6c8);
  #line 1027 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], set coex table, set 0x6cc = 0x%x\n",(int)val0x6cc);
  #line 1029 
  (*(btcoexist->btc_write_1byte))((void *)btcoexist,1740U,(unsigned int)val0x6cc);
  #line 1030 
  return;
}

#line 1032  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.c"
static void btc8192e2ant_coex_table(struct btc_coexist *btcoexist, bool force_exec, u32 val0x6c0, u32 val0x6c4, u32 val0x6c8, u8 val0x6cc)
{
  #line 1038 
  char *tmp;
  #line 1036 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 1038 
  ;
  #line 1038 
  if ((int)force_exec != 0) 
                            #line 1038 
                            tmp = (char *)"force to"; else 
                                                           #line 1038 
                                                           tmp = (char *)"";
  #line 1038 
  ;
  #line 1038 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], %s write Coex Table 0x6c0 = 0x%x, ",tmp,val0x6c0);
  #line 1041 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"0x6c4 = 0x%x, 0x6c8 = 0x%x, 0x6cc = 0x%x\n",val0x6c4,val0x6c8,(int)val0x6cc);
  #line 1044 
  coex_dm_0->cur_val0x6c0 = val0x6c0;
  #line 1045 
  coex_dm_0->cur_val0x6c4 = val0x6c4;
  #line 1046 
  coex_dm_0->cur_val0x6c8 = val0x6c8;
  #line 1047 
  coex_dm_0->cur_val0x6cc = val0x6cc;
  #line 1049 
  if (! force_exec) {
    #line 1050 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], preVal0x6c0 = 0x%x, preVal0x6c4 = 0x%x, ",coex_dm_0->pre_val0x6c0,coex_dm_0->pre_val0x6c4);
    #line 1053 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"preVal0x6c8 = 0x%x, preVal0x6cc = 0x%x !!\n",coex_dm_0->pre_val0x6c8,(int)coex_dm_0->pre_val0x6cc);
    #line 1056 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], curVal0x6c0 = 0x%x, curVal0x6c4 = 0x%x\n",coex_dm_0->cur_val0x6c0,coex_dm_0->cur_val0x6c4);
    #line 1059 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"curVal0x6c8 = 0x%x, curVal0x6cc = 0x%x !!\n",coex_dm_0->cur_val0x6c8,(int)coex_dm_0->cur_val0x6cc);
    #line 1063 
    if (((coex_dm_0->pre_val0x6c0 == coex_dm_0->cur_val0x6c0 && coex_dm_0->pre_val0x6c4 == coex_dm_0->cur_val0x6c4) && coex_dm_0->pre_val0x6c8 == coex_dm_0->cur_val0x6c8) && (int)coex_dm_0->pre_val0x6cc == (int)coex_dm_0->cur_val0x6cc) 
      #line 1067 
      return;
  }
  #line 1069 
  btc8192e2ant_set_coex_table(btcoexist,val0x6c0,val0x6c4,val0x6c8,(unsigned char)((int)val0x6cc));
  #line 1072 
  coex_dm_0->pre_val0x6c0 = coex_dm_0->cur_val0x6c0;
  #line 1073 
  coex_dm_0->pre_val0x6c4 = coex_dm_0->cur_val0x6c4;
  #line 1074 
  coex_dm_0->pre_val0x6c8 = coex_dm_0->cur_val0x6c8;
  #line 1075 
  coex_dm_0->pre_val0x6cc = coex_dm_0->cur_val0x6cc;
  #line 1076 
  return;
}

#line 1078  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.c"
static void btc8192e2ant_coex_table_with_type(struct btc_coexist *btcoexist, bool force_exec, u8 type)
{
  #line 1081 
  switch ((int)type) {
    #line 1082 
    case 0: 
            #line 1082 
    ;
    #line 1083 
    btc8192e2ant_coex_table(btcoexist,(_Bool)((bool)((int)force_exec) != 0),1431655765U,1515870810U,16777215U,(unsigned char)3);
    #line 1085 
    break;
    #line 1086 
    case 1: 
            #line 1086 
    ;
    #line 1087 
    btc8192e2ant_coex_table(btcoexist,(_Bool)((bool)((int)force_exec) != 0),1515870810U,1515870810U,16777215U,(unsigned char)3);
    #line 1089 
    break;
    #line 1090 
    case 2: 
            #line 1090 
    ;
    #line 1091 
    btc8192e2ant_coex_table(btcoexist,(_Bool)((bool)((int)force_exec) != 0),1431655765U,1610309627U,16777215U,(unsigned char)3);
    #line 1093 
    break;
    #line 1094 
    case 3: 
            #line 1094 
    ;
    #line 1095 
    btc8192e2ant_coex_table(btcoexist,(_Bool)((bool)((int)force_exec) != 0),3758088191U,1608212443U,16777215U,(unsigned char)3);
    #line 1097 
    break;
    #line 1098 
    case 4: 
            #line 1098 
    ;
    #line 1099 
    btc8192e2ant_coex_table(btcoexist,(_Bool)((bool)((int)force_exec) != 0),3758088191U,1610309627U,16777215U,(unsigned char)3);
    #line 1101 
    break;
    #line 1102 
    default: 
             #line 1102 
    ;
    #line 1103 
    break;
  }
  #line 1105 
  return;
}

#line 1107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.c"
static void btc8192e2ant_set_fw_ignore_wlan_act(struct btc_coexist *btcoexist, bool enable)
{
  #line 1110 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 1111 
  u8 h2c_parameter[1U] = {(unsigned char)0U};
  #line 1113 
  if ((int)enable != 0) 
                        #line 1114 
                        h2c_parameter[0] = (unsigned char)((unsigned int)h2c_parameter[0] | 1U);
  #line 1116 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex]set FW for BT Ignore Wlan_Act, FW write 0x63 = 0x%x\n",(int)h2c_parameter[0]);
  #line 1120 
  (*(btcoexist->btc_fill_h2c))((void *)btcoexist,(unsigned char)99,1U,(u8 *)(& h2c_parameter));
  #line 1121 
  return;
}

#line 1123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.c"
static void btc8192e2ant_ignore_wlan_act(struct btc_coexist *btcoexist, bool force_exec, bool enable)
{
  #line 1128 
  char *tmp;
  #line 1128 
  char *tmp_0;
  #line 1126 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 1128 
  if ((int)enable != 0) 
                        #line 1128 
                        tmp = (char *)"ON"; else 
                                                 #line 1128 
                                                 tmp = (char *)"OFF";
  #line 1128 
  if ((int)force_exec != 0) 
                            #line 1128 
                            tmp_0 = (char *)"force to"; else 
                                                             #line 1128 
                                                             tmp_0 = (char *)"";
  #line 1128 
  ;
  #line 1128 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], %s turn Ignore WlanAct %s\n",tmp_0,tmp);
  #line 1131 
  coex_dm_0->cur_ignore_wlan_act = enable;
  #line 1133 
  if (! force_exec) {
    #line 1134 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], bPreIgnoreWlanAct = %d ",(int)coex_dm_0->pre_ignore_wlan_act);
    #line 1137 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"bCurIgnoreWlanAct = %d!!\n",(int)coex_dm_0->cur_ignore_wlan_act);
    #line 1141 
    if ((int)coex_dm_0->pre_ignore_wlan_act == (int)coex_dm_0->cur_ignore_wlan_act) 
      #line 1143 
      return;
  }
  #line 1145 
  btc8192e2ant_set_fw_ignore_wlan_act(btcoexist,(_Bool)((bool)((int)enable) != 0));
  #line 1147 
  coex_dm_0->pre_ignore_wlan_act = coex_dm_0->cur_ignore_wlan_act;
  #line 1148 
  return;
}

#line 1150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.c"
static void btc8192e2ant_set_fw_ps_tdma(struct btc_coexist *btcoexist, u8 byte1, u8 byte2, u8 byte3, u8 byte4, u8 byte5)
{
  #line 1153 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 1155 
  u8 h2c_parameter[5U] = {(unsigned char)0U};
  #line 1157 
  h2c_parameter[0] = byte1;
  #line 1158 
  h2c_parameter[1] = byte2;
  #line 1159 
  h2c_parameter[2] = byte3;
  #line 1160 
  h2c_parameter[3] = byte4;
  #line 1161 
  h2c_parameter[4] = byte5;
  #line 1163 
  coex_dm_0->ps_tdma_para[0] = byte1;
  #line 1164 
  coex_dm_0->ps_tdma_para[1] = byte2;
  #line 1165 
  coex_dm_0->ps_tdma_para[2] = byte3;
  #line 1166 
  coex_dm_0->ps_tdma_para[3] = byte4;
  #line 1167 
  coex_dm_0->ps_tdma_para[4] = byte5;
  #line 1169 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], FW write 0x60(5bytes) = 0x%x%08x\n",(int)h2c_parameter[0],((((int)h2c_parameter[1] << 24) | ((int)h2c_parameter[2] << 16)) | ((int)h2c_parameter[3] << 8)) | (int)h2c_parameter[4]);
  #line 1175 
  (*(btcoexist->btc_fill_h2c))((void *)btcoexist,(unsigned char)96,5U,(u8 *)(& h2c_parameter));
  #line 1176 
  return;
}

#line 1178  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.c"
static void btc8192e2ant_sw_mechanism1(struct btc_coexist *btcoexist, bool shrink_rx_lpf, bool low_penalty_ra, bool limited_dig, bool btlan_constrain)
{
  #line 1182 
  btc8192e2ant_rf_shrink(btcoexist,(_Bool)0,(_Bool)((bool)((int)shrink_rx_lpf) != 0));
  #line 1183 
  return;
}

#line 1185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.c"
static void btc8192e2ant_sw_mechanism2(struct btc_coexist *btcoexist, bool agc_table_shift, bool adc_backoff, bool sw_dac_swing, u32 dac_swing_lvl)
{
  #line 1189 
  btc8192e2ant_agc_table(btcoexist,(_Bool)0,(_Bool)((bool)((int)agc_table_shift) != 0));
  #line 1190 
  btc8192e2ant_dac_swing(btcoexist,(_Bool)0,(_Bool)((bool)((int)sw_dac_swing) != 0),dac_swing_lvl);
  #line 1191 
  return;
}

#line 1194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.c"
static void btc8192e2ant_ps_tdma(struct btc_coexist *btcoexist, bool force_exec, bool turn_on, u8 type)
{
  #line 1199 
  char *tmp;
  #line 1199 
  char *tmp_0;
  #line 1197 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 1199 
  ;
  #line 1199 
  if ((int)turn_on != 0) 
                         #line 1199 
                         tmp = (char *)"ON"; else 
                                                  #line 1199 
                                                  tmp = (char *)"OFF";
  #line 1199 
  if ((int)force_exec != 0) 
                            #line 1199 
                            tmp_0 = (char *)"force to"; else 
                                                             #line 1199 
                                                             tmp_0 = (char *)"";
  #line 1199 
  ;
  #line 1199 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], %s turn %s PS TDMA, type=%d\n",tmp_0,tmp,(int)type);
  #line 1203 
  coex_dm_0->cur_ps_tdma_on = turn_on;
  #line 1204 
  coex_dm_0->cur_ps_tdma = type;
  #line 1206 
  if (! force_exec) {
    #line 1207 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], bPrePsTdmaOn = %d, bCurPsTdmaOn = %d!!\n",(int)coex_dm_0->pre_ps_tdma_on,(int)coex_dm_0->cur_ps_tdma_on);
    #line 1210 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], prePsTdma = %d, curPsTdma = %d!!\n",(int)coex_dm_0->pre_ps_tdma,(int)coex_dm_0->cur_ps_tdma);
    #line 1214 
    if ((int)coex_dm_0->pre_ps_tdma_on == (int)coex_dm_0->cur_ps_tdma_on && (int)coex_dm_0->pre_ps_tdma == (int)coex_dm_0->cur_ps_tdma) 
      #line 1216 
      return;
  }
  #line 1218 
  if ((int)turn_on != 0) 
    #line 1219 
    switch ((int)type) {
      #line 1220 
      case 1: 
              #line 1220 
      ;
      #line 1221 
      default: 
               #line 1221 
      ;
      #line 1222 
      btc8192e2ant_set_fw_ps_tdma(btcoexist,(unsigned char)227,(unsigned char)26,(unsigned char)26,(unsigned char)225,(unsigned char)144);
      #line 1224 
      break;
      #line 1225 
      case 2: 
              #line 1225 
      ;
      #line 1226 
      btc8192e2ant_set_fw_ps_tdma(btcoexist,(unsigned char)227,(unsigned char)18,(unsigned char)18,(unsigned char)225,(unsigned char)144);
      #line 1228 
      break;
      #line 1229 
      case 3: 
              #line 1229 
      ;
      #line 1230 
      btc8192e2ant_set_fw_ps_tdma(btcoexist,(unsigned char)227,(unsigned char)28,(unsigned char)3,(unsigned char)241,(unsigned char)144);
      #line 1232 
      break;
      #line 1233 
      case 4: 
              #line 1233 
      ;
      #line 1234 
      btc8192e2ant_set_fw_ps_tdma(btcoexist,(unsigned char)227,(unsigned char)16,(unsigned char)3,(unsigned char)241,(unsigned char)144);
      #line 1236 
      break;
      #line 1237 
      case 5: 
              #line 1237 
      ;
      #line 1238 
      btc8192e2ant_set_fw_ps_tdma(btcoexist,(unsigned char)227,(unsigned char)26,(unsigned char)26,(unsigned char)96,(unsigned char)144);
      #line 1240 
      break;
      #line 1241 
      case 6: 
              #line 1241 
      ;
      #line 1242 
      btc8192e2ant_set_fw_ps_tdma(btcoexist,(unsigned char)227,(unsigned char)18,(unsigned char)18,(unsigned char)96,(unsigned char)144);
      #line 1244 
      break;
      #line 1245 
      case 7: 
              #line 1245 
      ;
      #line 1246 
      btc8192e2ant_set_fw_ps_tdma(btcoexist,(unsigned char)227,(unsigned char)28,(unsigned char)3,(unsigned char)112,(unsigned char)144);
      #line 1248 
      break;
      #line 1249 
      case 8: 
              #line 1249 
      ;
      #line 1250 
      btc8192e2ant_set_fw_ps_tdma(btcoexist,(unsigned char)163,(unsigned char)16,(unsigned char)3,(unsigned char)112,(unsigned char)144);
      #line 1252 
      break;
      #line 1253 
      case 9: 
              #line 1253 
      ;
      #line 1254 
      btc8192e2ant_set_fw_ps_tdma(btcoexist,(unsigned char)227,(unsigned char)26,(unsigned char)26,(unsigned char)225,(unsigned char)16);
      #line 1256 
      break;
      #line 1257 
      case 10: 
               #line 1257 
      ;
      #line 1258 
      btc8192e2ant_set_fw_ps_tdma(btcoexist,(unsigned char)227,(unsigned char)18,(unsigned char)18,(unsigned char)225,(unsigned char)16);
      #line 1260 
      break;
      #line 1261 
      case 11: 
               #line 1261 
      ;
      #line 1262 
      btc8192e2ant_set_fw_ps_tdma(btcoexist,(unsigned char)227,(unsigned char)28,(unsigned char)3,(unsigned char)241,(unsigned char)16);
      #line 1264 
      break;
      #line 1265 
      case 12: 
               #line 1265 
      ;
      #line 1266 
      btc8192e2ant_set_fw_ps_tdma(btcoexist,(unsigned char)227,(unsigned char)16,(unsigned char)3,(unsigned char)241,(unsigned char)16);
      #line 1268 
      break;
      #line 1269 
      case 13: 
               #line 1269 
      ;
      #line 1270 
      btc8192e2ant_set_fw_ps_tdma(btcoexist,(unsigned char)227,(unsigned char)26,(unsigned char)26,(unsigned char)224,(unsigned char)16);
      #line 1272 
      break;
      #line 1273 
      case 14: 
               #line 1273 
      ;
      #line 1274 
      btc8192e2ant_set_fw_ps_tdma(btcoexist,(unsigned char)227,(unsigned char)18,(unsigned char)18,(unsigned char)224,(unsigned char)16);
      #line 1276 
      break;
      #line 1277 
      case 15: 
               #line 1277 
      ;
      #line 1278 
      btc8192e2ant_set_fw_ps_tdma(btcoexist,(unsigned char)227,(unsigned char)28,(unsigned char)3,(unsigned char)240,(unsigned char)16);
      #line 1280 
      break;
      #line 1281 
      case 16: 
               #line 1281 
      ;
      #line 1282 
      btc8192e2ant_set_fw_ps_tdma(btcoexist,(unsigned char)227,(unsigned char)18,(unsigned char)3,(unsigned char)240,(unsigned char)16);
      #line 1284 
      break;
      #line 1285 
      case 17: 
               #line 1285 
      ;
      #line 1286 
      btc8192e2ant_set_fw_ps_tdma(btcoexist,(unsigned char)97,(unsigned char)32,(unsigned char)3,(unsigned char)16,(unsigned char)16);
      #line 1288 
      break;
      #line 1289 
      case 18: 
               #line 1289 
      ;
      #line 1290 
      btc8192e2ant_set_fw_ps_tdma(btcoexist,(unsigned char)227,(unsigned char)5,(unsigned char)5,(unsigned char)225,(unsigned char)144);
      #line 1292 
      break;
      #line 1293 
      case 19: 
               #line 1293 
      ;
      #line 1294 
      btc8192e2ant_set_fw_ps_tdma(btcoexist,(unsigned char)227,(unsigned char)37,(unsigned char)37,(unsigned char)225,(unsigned char)144);
      #line 1296 
      break;
      #line 1297 
      case 20: 
               #line 1297 
      ;
      #line 1298 
      btc8192e2ant_set_fw_ps_tdma(btcoexist,(unsigned char)227,(unsigned char)37,(unsigned char)37,(unsigned char)96,(unsigned char)144);
      #line 1300 
      break;
      #line 1301 
      case 21: 
               #line 1301 
      ;
      #line 1302 
      btc8192e2ant_set_fw_ps_tdma(btcoexist,(unsigned char)227,(unsigned char)21,(unsigned char)3,(unsigned char)112,(unsigned char)144);
      #line 1304 
      break;
      #line 1305 
      case 71: 
               #line 1305 
      ;
      #line 1306 
      btc8192e2ant_set_fw_ps_tdma(btcoexist,(unsigned char)227,(unsigned char)26,(unsigned char)26,(unsigned char)225,(unsigned char)144);
      #line 1308 
      break;
    }
  else 
    #line 1312 
    switch ((int)type) {
      #line 1313 
      default: 
               #line 1313 
      ;
      #line 1314 
      case 0: 
              #line 1314 
      ;
      #line 1315 
      btc8192e2ant_set_fw_ps_tdma(btcoexist,(unsigned char)8,(unsigned char)0,(unsigned char)0,(unsigned char)0,(unsigned char)0);
      #line 1317 
      (*(btcoexist->btc_write_1byte))((void *)btcoexist,2348U,4U);
      #line 1318 
      break;
      #line 1319 
      case 1: 
              #line 1319 
      ;
      #line 1320 
      btc8192e2ant_set_fw_ps_tdma(btcoexist,(unsigned char)0,(unsigned char)0,(unsigned char)0,(unsigned char)8,(unsigned char)0);
      #line 1322 
      __const_udelay(21475000UL);
      #line 1323 
      (*(btcoexist->btc_write_1byte))((void *)btcoexist,2348U,32U);
      #line 1324 
      break;
    }
  #line 1329 
  coex_dm_0->pre_ps_tdma_on = coex_dm_0->cur_ps_tdma_on;
  #line 1330 
  coex_dm_0->pre_ps_tdma = coex_dm_0->cur_ps_tdma;
  #line 1331 
  return;
}

#line 1333  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.c"
static void btc8192e2ant_set_switch_ss_type(struct btc_coexist *btcoexist, u8 ss_type)
{
  #line 1336 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 1337 
  u8 mimops = (unsigned char)1U;
  #line 1338 
  u32 dis_ra_mask = 0U;
  #line 1340 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], REAL set SS Type = %d\n",(int)ss_type);
  #line 1343 
  dis_ra_mask = btc8192e2ant_decide_ra_mask(btcoexist,(unsigned char)((int)ss_type),(unsigned int)coex_dm_0->cur_ra_mask_type);
  #line 1345 
  btc8192e2ant_update_ra_mask(btcoexist,(_Bool)1,dis_ra_mask);
  #line 1347 
  if ((unsigned int)ss_type == 1U) {
    #line 1348 
    btc8192e2ant_ps_tdma(btcoexist,(_Bool)1,(_Bool)0,(unsigned char)1);
    #line 1350 
    (*(btcoexist->btc_write_1byte))((void *)btcoexist,3076U,17U);
    #line 1351 
    (*(btcoexist->btc_write_1byte))((void *)btcoexist,3332U,1U);
    #line 1352 
    (*(btcoexist->btc_write_4byte))((void *)btcoexist,2316U,2165379345U);
    #line 1354 
    (*(btcoexist->btc_write_1byte_bitmask))((void *)btcoexist,3703U,4U,(unsigned char)1);
    #line 1355 
    (*(btcoexist->btc_write_1byte))((void *)btcoexist,2567U,129U);
    #line 1356 
    mimops = (unsigned char)0U;
  }
  else 
    #line 1357 
    if ((unsigned int)ss_type == 2U) {
      #line 1358 
      btc8192e2ant_ps_tdma(btcoexist,(_Bool)1,(_Bool)0,(unsigned char)0);
      #line 1359 
      (*(btcoexist->btc_write_1byte))((void *)btcoexist,3076U,51U);
      #line 1360 
      (*(btcoexist->btc_write_1byte))((void *)btcoexist,3332U,3U);
      #line 1361 
      (*(btcoexist->btc_write_4byte))((void *)btcoexist,2316U,2165445395U);
      #line 1362 
      (*(btcoexist->btc_write_1byte_bitmask))((void *)btcoexist,3703U,4U,(unsigned char)0);
      #line 1363 
      (*(btcoexist->btc_write_1byte))((void *)btcoexist,2567U,65U);
      #line 1364 
      mimops = (unsigned char)1U;
    }
  #line 1367 
  (*(btcoexist->btc_set))((void *)btcoexist,(unsigned char)31,(void *)(& mimops));
  #line 1368 
  return;
}

#line 1370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.c"
static void btc8192e2ant_switch_ss_type(struct btc_coexist *btcoexist, bool force_exec, u8 new_ss_type)
{
  #line 1375 
  char *tmp;
  #line 1373 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 1375 
  ;
  #line 1375 
  if ((int)force_exec != 0) 
                            #line 1375 
                            tmp = (char *)"force to"; else 
                                                           #line 1375 
                                                           tmp = (char *)"";
  #line 1375 
  ;
  #line 1375 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], %s Switch SS Type = %d\n",tmp,(int)new_ss_type);
  #line 1378 
  coex_dm_0->cur_ss_type = new_ss_type;
  #line 1380 
  if (! force_exec) 
    #line 1381 
    if ((int)coex_dm_0->pre_ss_type == (int)coex_dm_0->cur_ss_type) 
                                                                    #line 1382 
                                                                    return;
  #line 1384 
  btc8192e2ant_set_switch_ss_type(btcoexist,(unsigned char)((int)coex_dm_0->cur_ss_type));
  #line 1386 
  coex_dm_0->pre_ss_type = coex_dm_0->cur_ss_type;
  #line 1387 
  return;
}

#line 1389  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.c"
static void btc8192e2ant_coex_all_off(struct btc_coexist *btcoexist)
{
  #line 1392 
  btc8192e2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)0,(unsigned char)1);
  #line 1393 
  btc8192e2ant_fw_dac_swing_lvl(btcoexist,(_Bool)0,(unsigned char)6);
  #line 1394 
  btc8192e2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)0);
  #line 1397 
  btc8192e2ant_sw_mechanism1(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,(_Bool)0);
  #line 1398 
  btc8192e2ant_sw_mechanism2(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,24U);
  #line 1401 
  btc8192e2ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)0);
  #line 1402 
  return;
}

#line 1404  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.c"
static void btc8192e2ant_init_coex_dm(struct btc_coexist *btcoexist)
{
  #line 1408 
  btc8192e2ant_ps_tdma(btcoexist,(_Bool)1,(_Bool)0,(unsigned char)1);
  #line 1409 
  btc8192e2ant_fw_dac_swing_lvl(btcoexist,(_Bool)1,(unsigned char)6);
  #line 1410 
  btc8192e2ant_dec_bt_pwr(btcoexist,(_Bool)1,(unsigned char)0);
  #line 1412 
  btc8192e2ant_coex_table_with_type(btcoexist,(_Bool)1,(unsigned char)0);
  #line 1413 
  btc8192e2ant_switch_ss_type(btcoexist,(_Bool)1,(unsigned char)2);
  #line 1415 
  btc8192e2ant_sw_mechanism1(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,(_Bool)0);
  #line 1416 
  btc8192e2ant_sw_mechanism2(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,24U);
  #line 1417 
  return;
}

#line 1419  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.c"
static void btc8192e2ant_action_bt_inquiry(struct btc_coexist *btcoexist)
{
  #line 1421 
  bool low_pwr_disable = (_Bool)1;
  #line 1423 
  (*(btcoexist->btc_set))((void *)btcoexist,(unsigned char)28,(void *)(& low_pwr_disable));
  #line 1426 
  btc8192e2ant_switch_ss_type(btcoexist,(_Bool)0,(unsigned char)1);
  #line 1428 
  btc8192e2ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)2);
  #line 1429 
  btc8192e2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)3);
  #line 1430 
  btc8192e2ant_fw_dac_swing_lvl(btcoexist,(_Bool)0,(unsigned char)6);
  #line 1431 
  btc8192e2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)0);
  #line 1433 
  btc8192e2ant_sw_mechanism1(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,(_Bool)0);
  #line 1434 
  btc8192e2ant_sw_mechanism2(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,24U);
  #line 1435 
  return;
}

#line 1437  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.c"
static bool btc8192e2ant_is_common_action(struct btc_coexist *btcoexist)
{
  #line 1439 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 1440 
  struct btc_bt_link_info *bt_link_info = & btcoexist->bt_link_info;
  #line 1441 
  bool common = (_Bool)0;
  #line 1441 
  bool wifi_connected = (_Bool)0;
  #line 1441 
  bool wifi_busy = (_Bool)0;
  #line 1442 
  bool bt_hs_on = (_Bool)0;
  #line 1442 
  bool low_pwr_disable = (_Bool)0;
  #line 1444 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)0,(void *)(& bt_hs_on));
  #line 1445 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)2,(void *)(& wifi_connected));
  #line 1447 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)4,(void *)(& wifi_busy));
  #line 1449 
  if ((int)bt_link_info->sco_exist != 0 || (int)bt_link_info->hid_exist != 0) 
    #line 1450 
    btc8192e2ant_limited_tx(btcoexist,(_Bool)0,(unsigned char)1,(unsigned char)0,(unsigned char)0,(unsigned char)0); else 
                                                                    #line 1452 
                                                                    btc8192e2ant_limited_tx(btcoexist,(_Bool)0,(unsigned char)0,(unsigned char)0,(unsigned char)0,(unsigned char)0);
  #line 1454 
  if (! wifi_connected) {
    #line 1455 
    low_pwr_disable = (_Bool)0;
    #line 1456 
    (*(btcoexist->btc_set))((void *)btcoexist,(unsigned char)28,(void *)(& low_pwr_disable));
    #line 1459 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Wifi non-connected idle!!\n");
    #line 1462 
    if ((unsigned int)coex_dm_0->bt_status <= 1U) {
      #line 1466 
      btc8192e2ant_switch_ss_type(btcoexist,(_Bool)0,(unsigned char)2);
      #line 1467 
      btc8192e2ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)1);
      #line 1469 
      btc8192e2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)0,(unsigned char)0);
    }
    else {
      #line 1471 
      btc8192e2ant_switch_ss_type(btcoexist,(_Bool)0,(unsigned char)1);
      #line 1472 
      btc8192e2ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)0);
      #line 1474 
      btc8192e2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)0,(unsigned char)1);
    }
    #line 1477 
    btc8192e2ant_fw_dac_swing_lvl(btcoexist,(_Bool)0,(unsigned char)6);
    #line 1478 
    btc8192e2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)0);
    #line 1480 
    btc8192e2ant_sw_mechanism1(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,(_Bool)0);
    #line 1482 
    btc8192e2ant_sw_mechanism2(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,24U);
    #line 1485 
    common = (_Bool)1;
  }
  else 
    #line 1487 
    if ((unsigned int)coex_dm_0->bt_status == 0U) {
      #line 1489 
      low_pwr_disable = (_Bool)0;
      #line 1490 
      (*(btcoexist->btc_set))((void *)btcoexist,(unsigned char)28,(void *)(& low_pwr_disable));
      #line 1494 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"Wifi connected + BT non connected-idle!!\n");
      #line 1497 
      btc8192e2ant_switch_ss_type(btcoexist,(_Bool)0,(unsigned char)2);
      #line 1498 
      btc8192e2ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)1);
      #line 1500 
      btc8192e2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)0,(unsigned char)0);
      #line 1501 
      btc8192e2ant_fw_dac_swing_lvl(btcoexist,(_Bool)0,(unsigned char)6);
      #line 1503 
      btc8192e2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)0);
      #line 1505 
      btc8192e2ant_sw_mechanism1(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,(_Bool)0);
      #line 1507 
      btc8192e2ant_sw_mechanism2(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,24U);
      #line 1510 
      common = (_Bool)1;
    }
    else 
      #line 1511 
      if ((unsigned int)coex_dm_0->bt_status == 1U) {
        #line 1513 
        low_pwr_disable = (_Bool)1;
        #line 1514 
        (*(btcoexist->btc_set))((void *)btcoexist,(unsigned char)28,(void *)(& low_pwr_disable));
        #line 1518 
        if ((int)bt_hs_on != 0) 
                                #line 1519 
                                return (_Bool)0;
        #line 1520 
        _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"Wifi connected + BT connected-idle!!\n");
        #line 1523 
        btc8192e2ant_switch_ss_type(btcoexist,(_Bool)0,(unsigned char)2);
        #line 1525 
        btc8192e2ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)1);
        #line 1527 
        btc8192e2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)0,(unsigned char)0);
        #line 1529 
        btc8192e2ant_fw_dac_swing_lvl(btcoexist,(_Bool)0,(unsigned char)6);
        #line 1531 
        btc8192e2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)0);
        #line 1533 
        btc8192e2ant_sw_mechanism1(btcoexist,(_Bool)1,(_Bool)0,(_Bool)0,(_Bool)0);
        #line 1535 
        btc8192e2ant_sw_mechanism2(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,24U);
        #line 1538 
        common = (_Bool)1;
      }
      else {
        #line 1540 
        low_pwr_disable = (_Bool)1;
        #line 1541 
        (*(btcoexist->btc_set))((void *)btcoexist,(unsigned char)28,(void *)(& low_pwr_disable));
        #line 1545 
        if ((int)wifi_busy != 0) {
          #line 1546 
          _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"Wifi Connected-Busy + BT Busy!!\n");
          #line 1548 
          common = (_Bool)0;
        }
        else {
          #line 1550 
          _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"Wifi Connected-Idle + BT Busy!!\n");
          #line 1553 
          btc8192e2ant_switch_ss_type(btcoexist,(_Bool)0,(unsigned char)1);
          #line 1555 
          btc8192e2ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)2);
          #line 1558 
          btc8192e2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)21);
          #line 1560 
          btc8192e2ant_fw_dac_swing_lvl(btcoexist,(_Bool)0,(unsigned char)6);
          #line 1562 
          btc8192e2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)0);
          #line 1564 
          btc8192e2ant_sw_mechanism1(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,(_Bool)0);
          #line 1566 
          btc8192e2ant_sw_mechanism2(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,24U);
          #line 1568 
          common = (_Bool)1;
        }
      }
  #line 1572 
  return common;
}

#line 1575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.c"
static void btc8192e2ant_tdma_duration_adjust(struct btc_coexist *btcoexist, bool sco_hid, bool tx_pause, u8 max_interval)
{
  #line 1580 
  int up;
  #line 1580 
  int dn;
  #line 1580 
  int m;
  #line 1580 
  int n;
  #line 1580 
  int wait_cnt;
  #line 1579 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 1581 
  u8 retry_cnt = (unsigned char)0U;
  #line 1583 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], TdmaDurationAdjust()\n");
  #line 1586 
  if (! coex_dm_0->auto_tdma_adjust) {
    #line 1587 
    coex_dm_0->auto_tdma_adjust = (_Bool)1;
    #line 1588 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], first run TdmaDurationAdjust()!!\n");
    #line 1590 
    if ((int)sco_hid != 0) 
      #line 1591 
      if ((int)tx_pause != 0) 
        #line 1592 
        if ((unsigned int)max_interval == 1U) {
          #line 1593 
          btc8192e2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)13);
          #line 1596 
          coex_dm_0->tdma_adj_type = (unsigned char)13U;
        }
        else 
          #line 1597 
          if ((unsigned int)max_interval == 2U) {
            #line 1598 
            btc8192e2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)14);
            #line 1601 
            coex_dm_0->tdma_adj_type = (unsigned char)14U;
          }
          else {
            #line 1603 
            btc8192e2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)15);
            #line 1606 
            coex_dm_0->tdma_adj_type = (unsigned char)15U;
          }
      else 
        #line 1609 
        if ((unsigned int)max_interval == 1U) {
          #line 1610 
          btc8192e2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)9);
          #line 1613 
          coex_dm_0->tdma_adj_type = (unsigned char)9U;
        }
        else 
          #line 1614 
          if ((unsigned int)max_interval == 2U) {
            #line 1615 
            btc8192e2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)10);
            #line 1618 
            coex_dm_0->tdma_adj_type = (unsigned char)10U;
          }
          else {
            #line 1620 
            btc8192e2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)11);
            #line 1623 
            coex_dm_0->tdma_adj_type = (unsigned char)11U;
          }
    else 
      #line 1627 
      if ((int)tx_pause != 0) 
        #line 1628 
        if ((unsigned int)max_interval == 1U) {
          #line 1629 
          btc8192e2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)5);
          #line 1632 
          coex_dm_0->tdma_adj_type = (unsigned char)5U;
        }
        else 
          #line 1633 
          if ((unsigned int)max_interval == 2U) {
            #line 1634 
            btc8192e2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)6);
            #line 1637 
            coex_dm_0->tdma_adj_type = (unsigned char)6U;
          }
          else {
            #line 1639 
            btc8192e2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)7);
            #line 1642 
            coex_dm_0->tdma_adj_type = (unsigned char)7U;
          }
      else 
        #line 1645 
        if ((unsigned int)max_interval == 1U) {
          #line 1646 
          btc8192e2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)1);
          #line 1649 
          coex_dm_0->tdma_adj_type = (unsigned char)1U;
        }
        else 
          #line 1650 
          if ((unsigned int)max_interval == 2U) {
            #line 1651 
            btc8192e2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)2);
            #line 1654 
            coex_dm_0->tdma_adj_type = (unsigned char)2U;
          }
          else {
            #line 1656 
            btc8192e2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)3);
            #line 1659 
            coex_dm_0->tdma_adj_type = (unsigned char)3U;
          }
    #line 1664 
    up = 0;
    #line 1665 
    dn = 0;
    #line 1666 
    m = 1;
    #line 1667 
    n = 3;
    #line 1668 
    wait_cnt = 0;
  }
  else {
    #line 1671 
    retry_cnt = coex_sta_0->bt_retry_cnt;
    #line 1672 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], retry_cnt = %d\n",(int)retry_cnt);
    #line 1674 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], up=%d, dn=%d, m=%d, n=%d, wait_cnt=%d\n",up,dn,m,n,wait_cnt);
    #line 1677 
    wait_cnt ++;
    #line 1679 
    if ((unsigned int)retry_cnt == 0U) {
      #line 1680 
      up ++;
      #line 1681 
      dn --;
      #line 1683 
      if (dn <= 0) 
                   #line 1684 
                   dn = 0;
      #line 1686 
      if (up >= n) {
        #line 1687 
        wait_cnt = 0;
        #line 1688 
        n = 3;
        #line 1689 
        up = 0;
        #line 1690 
        dn = 0;
        #line 1691 
        _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex]Increase wifi duration!!\n");
      }
    }
    else 
      #line 1694 
      if ((unsigned int)retry_cnt <= 3U) {
        #line 1695 
        up --;
        #line 1696 
        dn ++;
        #line 1698 
        if (up <= 0) 
                     #line 1699 
                     up = 0;
        #line 1701 
        if (dn == 2) {
          #line 1702 
          if (wait_cnt <= 2) 
                             #line 1703 
                             m ++; else 
                                        #line 1705 
                                        m = 1;
          #line 1707 
          if (m > 19) 
                      #line 1708 
                      m = 20;
          #line 1710 
          n = m * 3;
          #line 1711 
          up = 0;
          #line 1712 
          dn = 0;
          #line 1713 
          wait_cnt = 0;
          #line 1714 
          _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"Reduce wifi duration for retry<3\n");
        }
      }
      else {
        #line 1718 
        if (wait_cnt == 1) 
                           #line 1719 
                           m ++; else 
                                      #line 1721 
                                      m = 1;
        #line 1723 
        if (m > 19) 
                    #line 1724 
                    m = 20;
        #line 1726 
        n = m * 3;
        #line 1727 
        up = 0;
        #line 1728 
        dn = 0;
        #line 1729 
        wait_cnt = 0;
        #line 1730 
        _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"Decrease wifi duration for retryCounter>3!!\n");
      }
    #line 1734 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], max Interval = %d\n",(int)max_interval);
  }
  #line 1742 
  if ((int)coex_dm_0->cur_ps_tdma != (int)coex_dm_0->tdma_adj_type) {
    #line 1743 
    bool scan = (_Bool)0;
    #line 1743 
    bool link = (_Bool)0;
    #line 1743 
    bool roam = (_Bool)0;
    #line 1745 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], PsTdma type mismatch!!!, ");
    #line 1747 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"curPsTdma=%d, recordPsTdma=%d\n",(int)coex_dm_0->cur_ps_tdma,(int)coex_dm_0->tdma_adj_type);
    #line 1751 
    (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)5,(void *)(& scan));
    #line 1752 
    (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)6,(void *)(& link));
    #line 1753 
    (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)11,(void *)(& roam));
    #line 1755 
    if ((! scan && ! link) && ! roam) 
                                      #line 1756 
                                      btc8192e2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)((int)coex_dm_0->tdma_adj_type)); else 
                                                                    #line 1759 
                                                                    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], roaming/link/scan is under progress, will adjust next time!!!\n");
  }
  #line 1761 
  return;
}

#line 1765  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.c"
static void btc8192e2ant_action_sco(struct btc_coexist *btcoexist)
{
  #line 1767 
  u8 wifi_rssi_state;
  #line 1768 
  u32 wifi_bw;
  #line 1767 
  u8 bt_rssi_state = (unsigned char)5U;
  #line 1770 
  wifi_rssi_state = btc8192e2ant_wifi_rssi_state(btcoexist,(unsigned char)0,(unsigned char)2,(unsigned char)15,(unsigned char)0);
  #line 1772 
  btc8192e2ant_switch_ss_type(btcoexist,(_Bool)0,(unsigned char)1);
  #line 1773 
  btc8192e2ant_limited_rx(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,(unsigned char)8);
  #line 1775 
  btc8192e2ant_fw_dac_swing_lvl(btcoexist,(_Bool)0,(unsigned char)6);
  #line 1777 
  btc8192e2ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)4);
  #line 1779 
  bt_rssi_state = btc8192e2ant_bt_rssi_state(btcoexist,(unsigned char)3,(unsigned char)34,(unsigned char)42);
  #line 1781 
  if ((unsigned int)bt_rssi_state == 2U || (unsigned int)bt_rssi_state == 5U) {
    #line 1783 
    btc8192e2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)0);
    #line 1784 
    btc8192e2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)13);
  }
  else 
    #line 1785 
    if ((unsigned int)bt_rssi_state == 1U || (unsigned int)bt_rssi_state == 4U) {
      #line 1787 
      btc8192e2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)2);
      #line 1788 
      btc8192e2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)9);
    }
    else 
      #line 1789 
      if ((unsigned int)bt_rssi_state == 0U || (unsigned int)bt_rssi_state == 3U) {
        #line 1791 
        btc8192e2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)4);
        #line 1792 
        btc8192e2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)9);
      }
  #line 1795 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)24,(void *)(& wifi_bw));
  #line 1798 
  if (wifi_bw == 2U) 
    #line 1799 
    if ((unsigned int)wifi_rssi_state == 0U || (unsigned int)wifi_rssi_state == 3U) {
      #line 1801 
      btc8192e2ant_sw_mechanism1(btcoexist,(_Bool)1,(_Bool)1,(_Bool)0,(_Bool)0);
      #line 1803 
      btc8192e2ant_sw_mechanism2(btcoexist,(_Bool)1,(_Bool)0,(_Bool)0,6U);
    }
    else {
      #line 1806 
      btc8192e2ant_sw_mechanism1(btcoexist,(_Bool)1,(_Bool)1,(_Bool)0,(_Bool)0);
      #line 1808 
      btc8192e2ant_sw_mechanism2(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,6U);
    }
  else 
    #line 1812 
    if ((unsigned int)wifi_rssi_state == 0U || (unsigned int)wifi_rssi_state == 3U) {
      #line 1814 
      btc8192e2ant_sw_mechanism1(btcoexist,(_Bool)0,(_Bool)1,(_Bool)0,(_Bool)0);
      #line 1816 
      btc8192e2ant_sw_mechanism2(btcoexist,(_Bool)1,(_Bool)0,(_Bool)0,6U);
    }
    else {
      #line 1819 
      btc8192e2ant_sw_mechanism1(btcoexist,(_Bool)0,(_Bool)1,(_Bool)0,(_Bool)0);
      #line 1821 
      btc8192e2ant_sw_mechanism2(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,6U);
    }
  #line 1823 
  return;
}

#line 1827  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.c"
static void btc8192e2ant_action_sco_pan(struct btc_coexist *btcoexist)
{
  #line 1829 
  u8 wifi_rssi_state;
  #line 1830 
  u32 wifi_bw;
  #line 1829 
  u8 bt_rssi_state = (unsigned char)5U;
  #line 1832 
  wifi_rssi_state = btc8192e2ant_wifi_rssi_state(btcoexist,(unsigned char)0,(unsigned char)2,(unsigned char)15,(unsigned char)0);
  #line 1834 
  btc8192e2ant_switch_ss_type(btcoexist,(_Bool)0,(unsigned char)1);
  #line 1835 
  btc8192e2ant_limited_rx(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,(unsigned char)8);
  #line 1837 
  btc8192e2ant_fw_dac_swing_lvl(btcoexist,(_Bool)0,(unsigned char)6);
  #line 1839 
  btc8192e2ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)4);
  #line 1841 
  bt_rssi_state = btc8192e2ant_bt_rssi_state(btcoexist,(unsigned char)3,(unsigned char)34,(unsigned char)42);
  #line 1843 
  if ((unsigned int)bt_rssi_state == 2U || (unsigned int)bt_rssi_state == 5U) {
    #line 1845 
    btc8192e2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)0);
    #line 1846 
    btc8192e2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)14);
  }
  else 
    #line 1847 
    if ((unsigned int)bt_rssi_state == 1U || (unsigned int)bt_rssi_state == 4U) {
      #line 1849 
      btc8192e2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)2);
      #line 1850 
      btc8192e2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)10);
    }
    else 
      #line 1851 
      if ((unsigned int)bt_rssi_state == 0U || (unsigned int)bt_rssi_state == 3U) {
        #line 1853 
        btc8192e2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)4);
        #line 1854 
        btc8192e2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)10);
      }
  #line 1857 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)24,(void *)(& wifi_bw));
  #line 1860 
  if (wifi_bw == 2U) 
    #line 1861 
    if ((unsigned int)wifi_rssi_state == 0U || (unsigned int)wifi_rssi_state == 3U) {
      #line 1863 
      btc8192e2ant_sw_mechanism1(btcoexist,(_Bool)1,(_Bool)1,(_Bool)0,(_Bool)0);
      #line 1865 
      btc8192e2ant_sw_mechanism2(btcoexist,(_Bool)1,(_Bool)0,(_Bool)0,6U);
    }
    else {
      #line 1868 
      btc8192e2ant_sw_mechanism1(btcoexist,(_Bool)1,(_Bool)1,(_Bool)0,(_Bool)0);
      #line 1870 
      btc8192e2ant_sw_mechanism2(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,6U);
    }
  else 
    #line 1874 
    if ((unsigned int)wifi_rssi_state == 0U || (unsigned int)wifi_rssi_state == 3U) {
      #line 1876 
      btc8192e2ant_sw_mechanism1(btcoexist,(_Bool)0,(_Bool)1,(_Bool)0,(_Bool)0);
      #line 1878 
      btc8192e2ant_sw_mechanism2(btcoexist,(_Bool)1,(_Bool)0,(_Bool)0,6U);
    }
    else {
      #line 1881 
      btc8192e2ant_sw_mechanism1(btcoexist,(_Bool)0,(_Bool)1,(_Bool)0,(_Bool)0);
      #line 1883 
      btc8192e2ant_sw_mechanism2(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,6U);
    }
  #line 1885 
  return;
}

#line 1889  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.c"
static void btc8192e2ant_action_hid(struct btc_coexist *btcoexist)
{
  #line 1891 
  u8 wifi_rssi_state;
  #line 1892 
  u32 wifi_bw;
  #line 1891 
  u8 bt_rssi_state = (unsigned char)0U;
  #line 1894 
  wifi_rssi_state = btc8192e2ant_wifi_rssi_state(btcoexist,(unsigned char)0,(unsigned char)2,(unsigned char)15,(unsigned char)0);
  #line 1895 
  bt_rssi_state = btc8192e2ant_bt_rssi_state(btcoexist,(unsigned char)3,(unsigned char)34,(unsigned char)42);
  #line 1897 
  btc8192e2ant_switch_ss_type(btcoexist,(_Bool)0,(unsigned char)1);
  #line 1898 
  btc8192e2ant_limited_rx(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,(unsigned char)8);
  #line 1900 
  btc8192e2ant_fw_dac_swing_lvl(btcoexist,(_Bool)0,(unsigned char)6);
  #line 1902 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)24,(void *)(& wifi_bw));
  #line 1904 
  btc8192e2ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)3);
  #line 1906 
  if ((unsigned int)bt_rssi_state == 2U || (unsigned int)bt_rssi_state == 5U) {
    #line 1908 
    btc8192e2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)0);
    #line 1909 
    btc8192e2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)13);
  }
  else 
    #line 1910 
    if ((unsigned int)bt_rssi_state == 1U || (unsigned int)bt_rssi_state == 4U) {
      #line 1912 
      btc8192e2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)2);
      #line 1913 
      btc8192e2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)9);
    }
    else 
      #line 1914 
      if ((unsigned int)bt_rssi_state == 0U || (unsigned int)bt_rssi_state == 3U) {
        #line 1916 
        btc8192e2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)4);
        #line 1917 
        btc8192e2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)9);
      }
  #line 1921 
  if (wifi_bw == 2U) 
    #line 1922 
    if ((unsigned int)wifi_rssi_state == 0U || (unsigned int)wifi_rssi_state == 3U) {
      #line 1924 
      btc8192e2ant_sw_mechanism1(btcoexist,(_Bool)1,(_Bool)1,(_Bool)0,(_Bool)0);
      #line 1926 
      btc8192e2ant_sw_mechanism2(btcoexist,(_Bool)1,(_Bool)0,(_Bool)0,24U);
    }
    else {
      #line 1929 
      btc8192e2ant_sw_mechanism1(btcoexist,(_Bool)1,(_Bool)1,(_Bool)0,(_Bool)0);
      #line 1931 
      btc8192e2ant_sw_mechanism2(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,24U);
    }
  else 
    #line 1935 
    if ((unsigned int)wifi_rssi_state == 0U || (unsigned int)wifi_rssi_state == 3U) {
      #line 1937 
      btc8192e2ant_sw_mechanism1(btcoexist,(_Bool)0,(_Bool)1,(_Bool)0,(_Bool)0);
      #line 1939 
      btc8192e2ant_sw_mechanism2(btcoexist,(_Bool)1,(_Bool)0,(_Bool)0,24U);
    }
    else {
      #line 1942 
      btc8192e2ant_sw_mechanism1(btcoexist,(_Bool)0,(_Bool)1,(_Bool)0,(_Bool)0);
      #line 1944 
      btc8192e2ant_sw_mechanism2(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,24U);
    }
  #line 1946 
  return;
}

#line 1951  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.c"
static void btc8192e2ant_action_a2dp(struct btc_coexist *btcoexist)
{
  #line 1954 
  u8 wifi_rssi_state;
  #line 1955 
  u32 wifi_bw;
  #line 1953 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 1954 
  u8 bt_rssi_state = (unsigned char)0U;
  #line 1956 
  bool long_dist = (_Bool)0;
  #line 1958 
  wifi_rssi_state = btc8192e2ant_wifi_rssi_state(btcoexist,(unsigned char)0,(unsigned char)2,(unsigned char)15,(unsigned char)0);
  #line 1959 
  bt_rssi_state = btc8192e2ant_bt_rssi_state(btcoexist,(unsigned char)3,(unsigned char)34,(unsigned char)42);
  #line 1961 
  if (((unsigned int)bt_rssi_state == 2U || (unsigned int)bt_rssi_state == 5U) && ((unsigned int)wifi_rssi_state == 2U || (unsigned int)wifi_rssi_state == 5U)) {
    #line 1965 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], A2dp, wifi/bt rssi both LOW!!\n");
    #line 1967 
    long_dist = (_Bool)1;
  }
  #line 1969 
  if ((int)long_dist != 0) {
    #line 1970 
    btc8192e2ant_switch_ss_type(btcoexist,(_Bool)0,(unsigned char)2);
    #line 1971 
    btc8192e2ant_limited_rx(btcoexist,(_Bool)0,(_Bool)0,(_Bool)1,(unsigned char)4);
  }
  else {
    #line 1974 
    btc8192e2ant_switch_ss_type(btcoexist,(_Bool)0,(unsigned char)1);
    #line 1975 
    btc8192e2ant_limited_rx(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,(unsigned char)8);
  }
  #line 1979 
  btc8192e2ant_fw_dac_swing_lvl(btcoexist,(_Bool)0,(unsigned char)6);
  #line 1981 
  if ((int)long_dist != 0) 
                           #line 1982 
                           btc8192e2ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)0); else 
                                                                    #line 1984 
                                                                    btc8192e2ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)2);
  #line 1986 
  if ((int)long_dist != 0) {
    #line 1987 
    btc8192e2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)17);
    #line 1988 
    coex_dm_0->auto_tdma_adjust = (_Bool)0;
    #line 1989 
    btc8192e2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)0);
  }
  else 
    #line 1991 
    if ((unsigned int)bt_rssi_state == 2U || (unsigned int)bt_rssi_state == 5U) {
      #line 1993 
      btc8192e2ant_tdma_duration_adjust(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)1);
      #line 1995 
      btc8192e2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)0);
    }
    else 
      #line 1996 
      if ((unsigned int)bt_rssi_state == 1U || (unsigned int)bt_rssi_state == 4U) {
        #line 1998 
        btc8192e2ant_tdma_duration_adjust(btcoexist,(_Bool)0,(_Bool)0,(unsigned char)1);
        #line 2000 
        btc8192e2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)2);
      }
      else 
        #line 2001 
        if ((unsigned int)bt_rssi_state == 0U || (unsigned int)bt_rssi_state == 3U) {
          #line 2003 
          btc8192e2ant_tdma_duration_adjust(btcoexist,(_Bool)0,(_Bool)0,(unsigned char)1);
          #line 2005 
          btc8192e2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)4);
        }
  #line 2010 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)24,(void *)(& wifi_bw));
  #line 2011 
  if (wifi_bw == 2U) 
    #line 2012 
    if ((unsigned int)wifi_rssi_state == 0U || (unsigned int)wifi_rssi_state == 3U) {
      #line 2014 
      btc8192e2ant_sw_mechanism1(btcoexist,(_Bool)1,(_Bool)0,(_Bool)0,(_Bool)0);
      #line 2016 
      btc8192e2ant_sw_mechanism2(btcoexist,(_Bool)1,(_Bool)0,(_Bool)0,24U);
    }
    else {
      #line 2019 
      btc8192e2ant_sw_mechanism1(btcoexist,(_Bool)1,(_Bool)0,(_Bool)0,(_Bool)0);
      #line 2021 
      btc8192e2ant_sw_mechanism2(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,24U);
    }
  else 
    #line 2025 
    if ((unsigned int)wifi_rssi_state == 0U || (unsigned int)wifi_rssi_state == 3U) {
      #line 2027 
      btc8192e2ant_sw_mechanism1(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,(_Bool)0);
      #line 2029 
      btc8192e2ant_sw_mechanism2(btcoexist,(_Bool)1,(_Bool)0,(_Bool)0,24U);
    }
    else {
      #line 2032 
      btc8192e2ant_sw_mechanism1(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,(_Bool)0);
      #line 2034 
      btc8192e2ant_sw_mechanism2(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,24U);
    }
  #line 2036 
  return;
}

#line 2040  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.c"
static void btc8192e2ant_action_a2dp_pan_hs(struct btc_coexist *btcoexist)
{
  #line 2042 
  u8 wifi_rssi_state;
  #line 2043 
  u32 wifi_bw;
  #line 2042 
  u8 bt_rssi_state = (unsigned char)0U;
  #line 2045 
  wifi_rssi_state = btc8192e2ant_wifi_rssi_state(btcoexist,(unsigned char)0,(unsigned char)2,(unsigned char)15,(unsigned char)0);
  #line 2046 
  bt_rssi_state = btc8192e2ant_bt_rssi_state(btcoexist,(unsigned char)3,(unsigned char)34,(unsigned char)42);
  #line 2048 
  btc8192e2ant_switch_ss_type(btcoexist,(_Bool)0,(unsigned char)1);
  #line 2049 
  btc8192e2ant_limited_rx(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,(unsigned char)8);
  #line 2051 
  btc8192e2ant_fw_dac_swing_lvl(btcoexist,(_Bool)0,(unsigned char)6);
  #line 2052 
  btc8192e2ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)2);
  #line 2054 
  if ((unsigned int)bt_rssi_state == 2U || (unsigned int)bt_rssi_state == 5U) {
    #line 2056 
    btc8192e2ant_tdma_duration_adjust(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)2);
    #line 2057 
    btc8192e2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)0);
  }
  else 
    #line 2058 
    if ((unsigned int)bt_rssi_state == 1U || (unsigned int)bt_rssi_state == 4U) {
      #line 2060 
      btc8192e2ant_tdma_duration_adjust(btcoexist,(_Bool)0,(_Bool)0,(unsigned char)2);
      #line 2061 
      btc8192e2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)2);
    }
    else 
      #line 2062 
      if ((unsigned int)bt_rssi_state == 0U || (unsigned int)bt_rssi_state == 3U) {
        #line 2064 
        btc8192e2ant_tdma_duration_adjust(btcoexist,(_Bool)0,(_Bool)0,(unsigned char)2);
        #line 2065 
        btc8192e2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)4);
      }
  #line 2069 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)24,(void *)(& wifi_bw));
  #line 2070 
  if (wifi_bw == 2U) 
    #line 2071 
    if ((unsigned int)wifi_rssi_state == 0U || (unsigned int)wifi_rssi_state == 3U) {
      #line 2073 
      btc8192e2ant_sw_mechanism1(btcoexist,(_Bool)1,(_Bool)0,(_Bool)0,(_Bool)0);
      #line 2075 
      btc8192e2ant_sw_mechanism2(btcoexist,(_Bool)1,(_Bool)0,(_Bool)1,6U);
    }
    else {
      #line 2078 
      btc8192e2ant_sw_mechanism1(btcoexist,(_Bool)1,(_Bool)0,(_Bool)0,(_Bool)0);
      #line 2080 
      btc8192e2ant_sw_mechanism2(btcoexist,(_Bool)0,(_Bool)0,(_Bool)1,6U);
    }
  else 
    #line 2084 
    if ((unsigned int)wifi_rssi_state == 0U || (unsigned int)wifi_rssi_state == 3U) {
      #line 2086 
      btc8192e2ant_sw_mechanism1(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,(_Bool)0);
      #line 2088 
      btc8192e2ant_sw_mechanism2(btcoexist,(_Bool)1,(_Bool)0,(_Bool)1,6U);
    }
    else {
      #line 2091 
      btc8192e2ant_sw_mechanism1(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,(_Bool)0);
      #line 2093 
      btc8192e2ant_sw_mechanism2(btcoexist,(_Bool)0,(_Bool)0,(_Bool)1,6U);
    }
  #line 2095 
  return;
}

#line 2099  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.c"
static void btc8192e2ant_action_pan_edr(struct btc_coexist *btcoexist)
{
  #line 2101 
  u8 wifi_rssi_state;
  #line 2102 
  u32 wifi_bw;
  #line 2101 
  u8 bt_rssi_state = (unsigned char)0U;
  #line 2104 
  wifi_rssi_state = btc8192e2ant_wifi_rssi_state(btcoexist,(unsigned char)0,(unsigned char)2,(unsigned char)15,(unsigned char)0);
  #line 2105 
  bt_rssi_state = btc8192e2ant_bt_rssi_state(btcoexist,(unsigned char)3,(unsigned char)34,(unsigned char)42);
  #line 2107 
  btc8192e2ant_switch_ss_type(btcoexist,(_Bool)0,(unsigned char)1);
  #line 2108 
  btc8192e2ant_limited_rx(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,(unsigned char)8);
  #line 2110 
  btc8192e2ant_fw_dac_swing_lvl(btcoexist,(_Bool)0,(unsigned char)6);
  #line 2112 
  btc8192e2ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)2);
  #line 2114 
  if ((unsigned int)bt_rssi_state == 2U || (unsigned int)bt_rssi_state == 5U) {
    #line 2116 
    btc8192e2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)0);
    #line 2117 
    btc8192e2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)5);
  }
  else 
    #line 2118 
    if ((unsigned int)bt_rssi_state == 1U || (unsigned int)bt_rssi_state == 4U) {
      #line 2120 
      btc8192e2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)2);
      #line 2121 
      btc8192e2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)1);
    }
    else 
      #line 2122 
      if ((unsigned int)bt_rssi_state == 0U || (unsigned int)bt_rssi_state == 3U) {
        #line 2124 
        btc8192e2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)4);
        #line 2125 
        btc8192e2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)1);
      }
  #line 2129 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)24,(void *)(& wifi_bw));
  #line 2130 
  if (wifi_bw == 2U) 
    #line 2131 
    if ((unsigned int)wifi_rssi_state == 0U || (unsigned int)wifi_rssi_state == 3U) {
      #line 2133 
      btc8192e2ant_sw_mechanism1(btcoexist,(_Bool)1,(_Bool)0,(_Bool)0,(_Bool)0);
      #line 2135 
      btc8192e2ant_sw_mechanism2(btcoexist,(_Bool)1,(_Bool)0,(_Bool)0,24U);
    }
    else {
      #line 2138 
      btc8192e2ant_sw_mechanism1(btcoexist,(_Bool)1,(_Bool)0,(_Bool)0,(_Bool)0);
      #line 2140 
      btc8192e2ant_sw_mechanism2(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,24U);
    }
  else 
    #line 2144 
    if ((unsigned int)wifi_rssi_state == 0U || (unsigned int)wifi_rssi_state == 3U) {
      #line 2146 
      btc8192e2ant_sw_mechanism1(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,(_Bool)0);
      #line 2148 
      btc8192e2ant_sw_mechanism2(btcoexist,(_Bool)1,(_Bool)0,(_Bool)0,24U);
    }
    else {
      #line 2151 
      btc8192e2ant_sw_mechanism1(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,(_Bool)0);
      #line 2153 
      btc8192e2ant_sw_mechanism2(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,24U);
    }
  #line 2155 
  return;
}

#line 2160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.c"
static void btc8192e2ant_action_pan_hs(struct btc_coexist *btcoexist)
{
  #line 2162 
  u8 wifi_rssi_state;
  #line 2163 
  u32 wifi_bw;
  #line 2162 
  u8 bt_rssi_state = (unsigned char)0U;
  #line 2165 
  wifi_rssi_state = btc8192e2ant_wifi_rssi_state(btcoexist,(unsigned char)0,(unsigned char)2,(unsigned char)15,(unsigned char)0);
  #line 2166 
  bt_rssi_state = btc8192e2ant_bt_rssi_state(btcoexist,(unsigned char)3,(unsigned char)34,(unsigned char)42);
  #line 2168 
  btc8192e2ant_switch_ss_type(btcoexist,(_Bool)0,(unsigned char)1);
  #line 2169 
  btc8192e2ant_limited_rx(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,(unsigned char)8);
  #line 2171 
  btc8192e2ant_fw_dac_swing_lvl(btcoexist,(_Bool)0,(unsigned char)6);
  #line 2173 
  btc8192e2ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)2);
  #line 2175 
  if ((unsigned int)bt_rssi_state == 2U || (unsigned int)bt_rssi_state == 5U) 
    #line 2177 
    btc8192e2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)0);
  else 
    #line 2178 
    if ((unsigned int)bt_rssi_state == 1U || (unsigned int)bt_rssi_state == 4U) 
      #line 2180 
      btc8192e2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)2);
    else 
      #line 2181 
      if ((unsigned int)bt_rssi_state == 0U || (unsigned int)bt_rssi_state == 3U) 
        #line 2183 
        btc8192e2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)4);
  #line 2185 
  btc8192e2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)0,(unsigned char)1);
  #line 2187 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)24,(void *)(& wifi_bw));
  #line 2188 
  if (wifi_bw == 2U) 
    #line 2189 
    if ((unsigned int)wifi_rssi_state == 0U || (unsigned int)wifi_rssi_state == 3U) {
      #line 2191 
      btc8192e2ant_sw_mechanism1(btcoexist,(_Bool)1,(_Bool)0,(_Bool)0,(_Bool)0);
      #line 2193 
      btc8192e2ant_sw_mechanism2(btcoexist,(_Bool)1,(_Bool)0,(_Bool)0,24U);
    }
    else {
      #line 2196 
      btc8192e2ant_sw_mechanism1(btcoexist,(_Bool)1,(_Bool)0,(_Bool)0,(_Bool)0);
      #line 2198 
      btc8192e2ant_sw_mechanism2(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,24U);
    }
  else 
    #line 2202 
    if ((unsigned int)wifi_rssi_state == 0U || (unsigned int)wifi_rssi_state == 3U) {
      #line 2204 
      btc8192e2ant_sw_mechanism1(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,(_Bool)0);
      #line 2206 
      btc8192e2ant_sw_mechanism2(btcoexist,(_Bool)1,(_Bool)0,(_Bool)0,24U);
    }
    else {
      #line 2209 
      btc8192e2ant_sw_mechanism1(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,(_Bool)0);
      #line 2211 
      btc8192e2ant_sw_mechanism2(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,24U);
    }
  #line 2213 
  return;
}

#line 2218  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.c"
static void btc8192e2ant_action_pan_edr_a2dp(struct btc_coexist *btcoexist)
{
  #line 2220 
  u8 wifi_rssi_state;
  #line 2221 
  u32 wifi_bw;
  #line 2220 
  u8 bt_rssi_state = (unsigned char)0U;
  #line 2223 
  wifi_rssi_state = btc8192e2ant_wifi_rssi_state(btcoexist,(unsigned char)0,(unsigned char)2,(unsigned char)15,(unsigned char)0);
  #line 2224 
  bt_rssi_state = btc8192e2ant_bt_rssi_state(btcoexist,(unsigned char)3,(unsigned char)34,(unsigned char)42);
  #line 2226 
  btc8192e2ant_switch_ss_type(btcoexist,(_Bool)0,(unsigned char)1);
  #line 2227 
  btc8192e2ant_limited_rx(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,(unsigned char)8);
  #line 2229 
  btc8192e2ant_fw_dac_swing_lvl(btcoexist,(_Bool)0,(unsigned char)6);
  #line 2231 
  btc8192e2ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)2);
  #line 2233 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)24,(void *)(& wifi_bw));
  #line 2235 
  if ((unsigned int)bt_rssi_state == 2U || (unsigned int)bt_rssi_state == 5U) {
    #line 2237 
    btc8192e2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)0);
    #line 2238 
    btc8192e2ant_tdma_duration_adjust(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)3);
  }
  else 
    #line 2239 
    if ((unsigned int)bt_rssi_state == 1U || (unsigned int)bt_rssi_state == 4U) {
      #line 2241 
      btc8192e2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)2);
      #line 2242 
      btc8192e2ant_tdma_duration_adjust(btcoexist,(_Bool)0,(_Bool)0,(unsigned char)3);
    }
    else 
      #line 2243 
      if ((unsigned int)bt_rssi_state == 0U || (unsigned int)bt_rssi_state == 3U) {
        #line 2245 
        btc8192e2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)4);
        #line 2246 
        btc8192e2ant_tdma_duration_adjust(btcoexist,(_Bool)0,(_Bool)0,(unsigned char)3);
      }
  #line 2250 
  if (wifi_bw == 2U) 
    #line 2251 
    if ((unsigned int)wifi_rssi_state == 0U || (unsigned int)wifi_rssi_state == 3U) {
      #line 2253 
      btc8192e2ant_sw_mechanism1(btcoexist,(_Bool)1,(_Bool)0,(_Bool)0,(_Bool)0);
      #line 2255 
      btc8192e2ant_sw_mechanism2(btcoexist,(_Bool)1,(_Bool)0,(_Bool)0,24U);
    }
    else {
      #line 2258 
      btc8192e2ant_sw_mechanism1(btcoexist,(_Bool)1,(_Bool)0,(_Bool)0,(_Bool)0);
      #line 2260 
      btc8192e2ant_sw_mechanism2(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,24U);
    }
  else 
    #line 2264 
    if ((unsigned int)wifi_rssi_state == 0U || (unsigned int)wifi_rssi_state == 3U) {
      #line 2266 
      btc8192e2ant_sw_mechanism1(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,(_Bool)0);
      #line 2268 
      btc8192e2ant_sw_mechanism2(btcoexist,(_Bool)1,(_Bool)0,(_Bool)0,24U);
    }
    else {
      #line 2271 
      btc8192e2ant_sw_mechanism1(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,(_Bool)0);
      #line 2273 
      btc8192e2ant_sw_mechanism2(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,24U);
    }
  #line 2275 
  return;
}

#line 2279  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.c"
static void btc8192e2ant_action_pan_edr_hid(struct btc_coexist *btcoexist)
{
  #line 2281 
  u8 wifi_rssi_state;
  #line 2282 
  u32 wifi_bw;
  #line 2281 
  u8 bt_rssi_state = (unsigned char)0U;
  #line 2284 
  wifi_rssi_state = btc8192e2ant_wifi_rssi_state(btcoexist,(unsigned char)0,(unsigned char)2,(unsigned char)15,(unsigned char)0);
  #line 2285 
  bt_rssi_state = btc8192e2ant_bt_rssi_state(btcoexist,(unsigned char)3,(unsigned char)34,(unsigned char)42);
  #line 2287 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)24,(void *)(& wifi_bw));
  #line 2289 
  btc8192e2ant_switch_ss_type(btcoexist,(_Bool)0,(unsigned char)1);
  #line 2290 
  btc8192e2ant_limited_rx(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,(unsigned char)8);
  #line 2292 
  btc8192e2ant_fw_dac_swing_lvl(btcoexist,(_Bool)0,(unsigned char)6);
  #line 2294 
  btc8192e2ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)3);
  #line 2296 
  if ((unsigned int)bt_rssi_state == 2U || (unsigned int)bt_rssi_state == 5U) {
    #line 2298 
    btc8192e2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)0);
    #line 2299 
    btc8192e2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)14);
  }
  else 
    #line 2300 
    if ((unsigned int)bt_rssi_state == 1U || (unsigned int)bt_rssi_state == 4U) {
      #line 2302 
      btc8192e2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)2);
      #line 2303 
      btc8192e2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)10);
    }
    else 
      #line 2304 
      if ((unsigned int)bt_rssi_state == 0U || (unsigned int)bt_rssi_state == 3U) {
        #line 2306 
        btc8192e2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)4);
        #line 2307 
        btc8192e2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)10);
      }
  #line 2312 
  if (wifi_bw == 2U) 
    #line 2313 
    if ((unsigned int)wifi_rssi_state == 0U || (unsigned int)wifi_rssi_state == 3U) {
      #line 2315 
      btc8192e2ant_sw_mechanism1(btcoexist,(_Bool)1,(_Bool)1,(_Bool)0,(_Bool)0);
      #line 2317 
      btc8192e2ant_sw_mechanism2(btcoexist,(_Bool)1,(_Bool)0,(_Bool)0,24U);
    }
    else {
      #line 2320 
      btc8192e2ant_sw_mechanism1(btcoexist,(_Bool)1,(_Bool)1,(_Bool)0,(_Bool)0);
      #line 2322 
      btc8192e2ant_sw_mechanism2(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,24U);
    }
  else 
    #line 2326 
    if ((unsigned int)wifi_rssi_state == 0U || (unsigned int)wifi_rssi_state == 3U) {
      #line 2328 
      btc8192e2ant_sw_mechanism1(btcoexist,(_Bool)0,(_Bool)1,(_Bool)0,(_Bool)0);
      #line 2330 
      btc8192e2ant_sw_mechanism2(btcoexist,(_Bool)1,(_Bool)0,(_Bool)0,24U);
    }
    else {
      #line 2333 
      btc8192e2ant_sw_mechanism1(btcoexist,(_Bool)0,(_Bool)1,(_Bool)0,(_Bool)0);
      #line 2335 
      btc8192e2ant_sw_mechanism2(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,24U);
    }
  #line 2337 
  return;
}

#line 2342  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.c"
static void btc8192e2ant_action_hid_a2dp_pan_edr(struct btc_coexist *btcoexist)
{
  #line 2344 
  u8 wifi_rssi_state;
  #line 2345 
  u32 wifi_bw;
  #line 2344 
  u8 bt_rssi_state = (unsigned char)0U;
  #line 2347 
  wifi_rssi_state = btc8192e2ant_wifi_rssi_state(btcoexist,(unsigned char)0,(unsigned char)2,(unsigned char)15,(unsigned char)0);
  #line 2348 
  bt_rssi_state = btc8192e2ant_bt_rssi_state(btcoexist,(unsigned char)3,(unsigned char)34,(unsigned char)42);
  #line 2350 
  btc8192e2ant_switch_ss_type(btcoexist,(_Bool)0,(unsigned char)1);
  #line 2351 
  btc8192e2ant_limited_rx(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,(unsigned char)8);
  #line 2353 
  btc8192e2ant_fw_dac_swing_lvl(btcoexist,(_Bool)0,(unsigned char)6);
  #line 2355 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)24,(void *)(& wifi_bw));
  #line 2357 
  btc8192e2ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)3);
  #line 2359 
  if ((unsigned int)bt_rssi_state == 2U || (unsigned int)bt_rssi_state == 5U) {
    #line 2361 
    btc8192e2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)0);
    #line 2362 
    btc8192e2ant_tdma_duration_adjust(btcoexist,(_Bool)1,(_Bool)1,(unsigned char)3);
  }
  else 
    #line 2363 
    if ((unsigned int)bt_rssi_state == 1U || (unsigned int)bt_rssi_state == 4U) {
      #line 2365 
      btc8192e2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)2);
      #line 2366 
      btc8192e2ant_tdma_duration_adjust(btcoexist,(_Bool)1,(_Bool)0,(unsigned char)3);
    }
    else 
      #line 2367 
      if ((unsigned int)bt_rssi_state == 0U || (unsigned int)bt_rssi_state == 3U) {
        #line 2369 
        btc8192e2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)4);
        #line 2370 
        btc8192e2ant_tdma_duration_adjust(btcoexist,(_Bool)1,(_Bool)0,(unsigned char)3);
      }
  #line 2374 
  if (wifi_bw == 2U) 
    #line 2375 
    if ((unsigned int)wifi_rssi_state == 0U || (unsigned int)wifi_rssi_state == 3U) {
      #line 2377 
      btc8192e2ant_sw_mechanism1(btcoexist,(_Bool)1,(_Bool)1,(_Bool)0,(_Bool)0);
      #line 2379 
      btc8192e2ant_sw_mechanism2(btcoexist,(_Bool)1,(_Bool)0,(_Bool)0,24U);
    }
    else {
      #line 2382 
      btc8192e2ant_sw_mechanism1(btcoexist,(_Bool)1,(_Bool)1,(_Bool)0,(_Bool)0);
      #line 2384 
      btc8192e2ant_sw_mechanism2(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,24U);
    }
  else 
    #line 2388 
    if ((unsigned int)wifi_rssi_state == 0U || (unsigned int)wifi_rssi_state == 3U) {
      #line 2390 
      btc8192e2ant_sw_mechanism1(btcoexist,(_Bool)0,(_Bool)1,(_Bool)0,(_Bool)0);
      #line 2392 
      btc8192e2ant_sw_mechanism2(btcoexist,(_Bool)1,(_Bool)0,(_Bool)0,24U);
    }
    else {
      #line 2395 
      btc8192e2ant_sw_mechanism1(btcoexist,(_Bool)0,(_Bool)1,(_Bool)0,(_Bool)0);
      #line 2397 
      btc8192e2ant_sw_mechanism2(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,24U);
    }
  #line 2399 
  return;
}

#line 2403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.c"
static void btc8192e2ant_action_hid_a2dp(struct btc_coexist *btcoexist)
{
  #line 2405 
  u8 wifi_rssi_state;
  #line 2406 
  u32 wifi_bw;
  #line 2405 
  u8 bt_rssi_state = (unsigned char)0U;
  #line 2408 
  wifi_rssi_state = btc8192e2ant_wifi_rssi_state(btcoexist,(unsigned char)0,(unsigned char)2,(unsigned char)15,(unsigned char)0);
  #line 2409 
  bt_rssi_state = btc8192e2ant_bt_rssi_state(btcoexist,(unsigned char)3,(unsigned char)34,(unsigned char)42);
  #line 2411 
  btc8192e2ant_switch_ss_type(btcoexist,(_Bool)0,(unsigned char)1);
  #line 2412 
  btc8192e2ant_limited_rx(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,(unsigned char)8);
  #line 2414 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)24,(void *)(& wifi_bw));
  #line 2416 
  btc8192e2ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)3);
  #line 2418 
  if ((unsigned int)bt_rssi_state == 2U || (unsigned int)bt_rssi_state == 5U) {
    #line 2420 
    btc8192e2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)0);
    #line 2421 
    btc8192e2ant_tdma_duration_adjust(btcoexist,(_Bool)1,(_Bool)1,(unsigned char)2);
  }
  else 
    #line 2422 
    if ((unsigned int)bt_rssi_state == 1U || (unsigned int)bt_rssi_state == 4U) {
      #line 2424 
      btc8192e2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)2);
      #line 2425 
      btc8192e2ant_tdma_duration_adjust(btcoexist,(_Bool)1,(_Bool)0,(unsigned char)2);
    }
    else 
      #line 2426 
      if ((unsigned int)bt_rssi_state == 0U || (unsigned int)bt_rssi_state == 3U) {
        #line 2428 
        btc8192e2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)4);
        #line 2429 
        btc8192e2ant_tdma_duration_adjust(btcoexist,(_Bool)1,(_Bool)0,(unsigned char)2);
      }
  #line 2433 
  if (wifi_bw == 2U) 
    #line 2434 
    if ((unsigned int)wifi_rssi_state == 0U || (unsigned int)wifi_rssi_state == 3U) {
      #line 2436 
      btc8192e2ant_sw_mechanism1(btcoexist,(_Bool)1,(_Bool)1,(_Bool)0,(_Bool)0);
      #line 2438 
      btc8192e2ant_sw_mechanism2(btcoexist,(_Bool)1,(_Bool)0,(_Bool)0,24U);
    }
    else {
      #line 2441 
      btc8192e2ant_sw_mechanism1(btcoexist,(_Bool)1,(_Bool)1,(_Bool)0,(_Bool)0);
      #line 2443 
      btc8192e2ant_sw_mechanism2(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,24U);
    }
  else 
    #line 2447 
    if ((unsigned int)wifi_rssi_state == 0U || (unsigned int)wifi_rssi_state == 3U) {
      #line 2449 
      btc8192e2ant_sw_mechanism1(btcoexist,(_Bool)0,(_Bool)1,(_Bool)0,(_Bool)0);
      #line 2451 
      btc8192e2ant_sw_mechanism2(btcoexist,(_Bool)1,(_Bool)0,(_Bool)0,24U);
    }
    else {
      #line 2454 
      btc8192e2ant_sw_mechanism1(btcoexist,(_Bool)0,(_Bool)1,(_Bool)0,(_Bool)0);
      #line 2456 
      btc8192e2ant_sw_mechanism2(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,24U);
    }
  #line 2458 
  return;
}

#line 2462  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.c"
static void btc8192e2ant_run_coexist_mechanism(struct btc_coexist *btcoexist)
{
  #line 2464 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 2465 
  u8 algorithm = (unsigned char)0U;
  #line 2467 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], RunCoexistMechanism()===>\n");
  #line 2470 
  if ((int)btcoexist->manual_control != 0) {
    #line 2471 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], return for Manual CTRL <===\n");
    #line 2473 
    return;
  }
  #line 2476 
  if ((int)coex_sta_0->under_ips != 0) {
    #line 2477 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], wifi is under IPS !!!\n");
    #line 2479 
    return;
  }
  #line 2482 
  algorithm = btc8192e2ant_action_algorithm(btcoexist);
  #line 2483 
  if ((int)coex_sta_0->c2h_bt_inquiry_page != 0 && (unsigned int)algorithm != 7U) {
    #line 2485 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BT is under inquiry/page scan !!\n");
    #line 2487 
    btc8192e2ant_action_bt_inquiry(btcoexist);
    #line 2488 
    return;
  }
  #line 2491 
  coex_dm_0->cur_algorithm = algorithm;
  #line 2492 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Algorithm = %d\n",(int)coex_dm_0->cur_algorithm);
  #line 2495 
  if ((int)btc8192e2ant_is_common_action(btcoexist) != 0) {
    #line 2496 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Action 2-Ant common\n");
    #line 2498 
    coex_dm_0->auto_tdma_adjust = (_Bool)0;
  }
  else {
    #line 2500 
    if ((int)coex_dm_0->cur_algorithm != (int)coex_dm_0->pre_algorithm) {
      #line 2501 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex] preAlgorithm=%d, curAlgorithm=%d\n",(int)coex_dm_0->pre_algorithm,(int)coex_dm_0->cur_algorithm);
      #line 2505 
      coex_dm_0->auto_tdma_adjust = (_Bool)0;
    }
    #line 2507 
    switch ((int)coex_dm_0->cur_algorithm) {
      #line 2508 
      case 1: 
              #line 2508 
      ;
      #line 2509 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"Action 2-Ant, algorithm = SCO\n");
      #line 2511 
      btc8192e2ant_action_sco(btcoexist);
      #line 2512 
      break;
      #line 2513 
      case 2: 
              #line 2513 
      ;
      #line 2514 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"Action 2-Ant, algorithm = SCO+PAN(EDR)\n");
      #line 2516 
      btc8192e2ant_action_sco_pan(btcoexist);
      #line 2517 
      break;
      #line 2518 
      case 3: 
              #line 2518 
      ;
      #line 2519 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"Action 2-Ant, algorithm = HID\n");
      #line 2521 
      btc8192e2ant_action_hid(btcoexist);
      #line 2522 
      break;
      #line 2523 
      case 4: 
              #line 2523 
      ;
      #line 2524 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"Action 2-Ant, algorithm = A2DP\n");
      #line 2526 
      btc8192e2ant_action_a2dp(btcoexist);
      #line 2527 
      break;
      #line 2528 
      case 5: 
              #line 2528 
      ;
      #line 2529 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"Action 2-Ant, algorithm = A2DP+PAN(HS)\n");
      #line 2531 
      btc8192e2ant_action_a2dp_pan_hs(btcoexist);
      #line 2532 
      break;
      #line 2533 
      case 6: 
              #line 2533 
      ;
      #line 2534 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"Action 2-Ant, algorithm = PAN(EDR)\n");
      #line 2536 
      btc8192e2ant_action_pan_edr(btcoexist);
      #line 2537 
      break;
      #line 2538 
      case 7: 
              #line 2538 
      ;
      #line 2539 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"Action 2-Ant, algorithm = HS mode\n");
      #line 2541 
      btc8192e2ant_action_pan_hs(btcoexist);
      #line 2542 
      break;
      #line 2543 
      case 8: 
              #line 2543 
      ;
      #line 2544 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"Action 2-Ant, algorithm = PAN+A2DP\n");
      #line 2546 
      btc8192e2ant_action_pan_edr_a2dp(btcoexist);
      #line 2547 
      break;
      #line 2548 
      case 9: 
              #line 2548 
      ;
      #line 2549 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"Action 2-Ant, algorithm = PAN(EDR)+HID\n");
      #line 2551 
      btc8192e2ant_action_pan_edr_hid(btcoexist);
      #line 2552 
      break;
      #line 2553 
      case 10: 
               #line 2553 
      ;
      #line 2554 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"Action 2-Ant, algorithm = HID+A2DP+PAN\n");
      #line 2556 
      btc8192e2ant_action_hid_a2dp_pan_edr(btcoexist);
      #line 2557 
      break;
      #line 2558 
      case 11: 
               #line 2558 
      ;
      #line 2559 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"Action 2-Ant, algorithm = HID+A2DP\n");
      #line 2561 
      btc8192e2ant_action_hid_a2dp(btcoexist);
      #line 2562 
      break;
      #line 2563 
      default: 
               #line 2563 
      ;
      #line 2564 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"Action 2-Ant, algorithm = unknown!!\n");
      #line 2567 
      break;
    }
    #line 2569 
    coex_dm_0->pre_algorithm = coex_dm_0->cur_algorithm;
  }
  #line 2571 
  return;
}

#line 2573  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.c"
static void btc8192e2ant_init_hwconfig(struct btc_coexist *btcoexist, bool backup)
{
  #line 2576 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 2577 
  u16 u16tmp = (unsigned short)0U;
  #line 2578 
  u8 u8tmp = (unsigned char)0U;
  #line 2580 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], 2Ant Init HW Config!!\n");
  #line 2583 
  if ((int)backup != 0) {
    #line 2585 
    coex_dm_0->bt_rf0x1e_backup = (*(btcoexist->btc_get_rf_reg))((void *)btcoexist,(unsigned char)0,30U,1048575U);
    #line 2589 
    coex_dm_0->backup_arfr_cnt1 = (*(btcoexist->btc_read_4byte))((void *)btcoexist,1072U);
    #line 2591 
    coex_dm_0->backup_arfr_cnt2 = (*(btcoexist->btc_read_4byte))((void *)btcoexist,1076U);
    #line 2593 
    coex_dm_0->backup_retry_limit = (*(btcoexist->btc_read_2byte))((void *)btcoexist,1066U);
    #line 2596 
    coex_dm_0->backup_ampdu_maxtime = (*(btcoexist->btc_read_1byte))((void *)btcoexist,1110U);
  }
  #line 2602 
  (*(btcoexist->btc_write_1byte))((void *)btcoexist,79U,6U);
  #line 2603 
  (*(btcoexist->btc_write_1byte))((void *)btcoexist,2372U,36U);
  #line 2604 
  (*(btcoexist->btc_write_4byte))((void *)btcoexist,2352U,7341824U);
  #line 2605 
  (*(btcoexist->btc_write_1byte))((void *)btcoexist,2348U,32U);
  #line 2606 
  if (btcoexist->chip_interface == (unsigned int)BTC_INTF_USB) 
                                                               #line 2607 
                                                               (*(btcoexist->btc_write_4byte))((void *)btcoexist,100U,809697284U); else 
                                                                    #line 2609 
                                                                    (*(btcoexist->btc_write_4byte))((void *)btcoexist,100U,805502980U);
  #line 2611 
  btc8192e2ant_coex_table_with_type(btcoexist,(_Bool)1,(unsigned char)0);
  #line 2614 
  (*(btcoexist->btc_write_4byte))((void *)btcoexist,2136U,1431655765U);
  #line 2617 
  (*(btcoexist->btc_write_1byte))((void *)btcoexist,1912U,3U);
  #line 2619 
  u8tmp = (*(btcoexist->btc_read_1byte))((void *)btcoexist,1936U);
  #line 2620 
  u8tmp = (unsigned char)((unsigned int)u8tmp & 192U);
  #line 2621 
  u8tmp = (unsigned char)((unsigned int)u8tmp | 5U);
  #line 2622 
  (*(btcoexist->btc_write_1byte))((void *)btcoexist,1936U,(unsigned int)u8tmp);
  #line 2625 
  (*(btcoexist->btc_write_1byte))((void *)btcoexist,1902U,4U);
  #line 2628 
  (*(btcoexist->btc_write_1byte))((void *)btcoexist,64U,32U);
  #line 2630 
  u16tmp = (*(btcoexist->btc_read_2byte))((void *)btcoexist,64U);
  #line 2631 
  u16tmp = (unsigned short)((unsigned int)u16tmp | 512U);
  #line 2632 
  (*(btcoexist->btc_write_2byte))((void *)btcoexist,64U,(unsigned short)((int)u16tmp));
  #line 2635 
  u8tmp = (*(btcoexist->btc_read_1byte))((void *)btcoexist,257U);
  #line 2636 
  u8tmp = (unsigned char)((unsigned int)u8tmp | 16U);
  #line 2637 
  (*(btcoexist->btc_write_1byte))((void *)btcoexist,257U,(unsigned int)u8tmp);
  #line 2640 
  u8tmp = (*(btcoexist->btc_read_1byte))((void *)btcoexist,147U);
  #line 2641 
  u8tmp = (unsigned char)((unsigned int)u8tmp | 1U);
  #line 2642 
  (*(btcoexist->btc_write_1byte))((void *)btcoexist,147U,(unsigned int)u8tmp);
  #line 2644 
  u8tmp = (*(btcoexist->btc_read_1byte))((void *)btcoexist,7U);
  #line 2645 
  u8tmp = (unsigned char)((unsigned int)u8tmp | 1U);
  #line 2646 
  (*(btcoexist->btc_write_1byte))((void *)btcoexist,7U,(unsigned int)u8tmp);
  #line 2647 
  return;
}

#line 2653  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.c"
void ex_btc8192e2ant_init_hwconfig(struct btc_coexist *btcoexist)
{
  #line 2655 
  btc8192e2ant_init_hwconfig(btcoexist,(_Bool)1);
  #line 2656 
  return;
}

#line 2658  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.c"
void ex_btc8192e2ant_init_coex_dm(struct btc_coexist *btcoexist)
{
  #line 2660 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 2662 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Coex Mechanism Init!!\n");
  #line 2664 
  btc8192e2ant_init_coex_dm(btcoexist);
  #line 2665 
  return;
}

#line 2667  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.c"
void ex_btc8192e2ant_display_coex_info(struct btc_coexist *btcoexist, struct seq_file *m)
{
  #line 2732 
  char *tmp_2;
  #line 2672 
  u8 u8tmp[4U];
  #line 2672 
  u8 i;
  #line 2672 
  u8 bt_info_ext;
  #line 2673 
  u16 u16tmp[4U];
  #line 2674 
  u32 u32tmp[4U];
  #line 2678 
  u32 wifi_bw;
  #line 2678 
  u32 wifi_traffic_dir;
  #line 2679 
  u8 wifi_dot11_chnl;
  #line 2679 
  u8 wifi_hs_chnl;
  #line 2692 
  char *tmp;
  #line 2734 
  char *tmp_1;
  #line 2731 
  char *tmp_3;
  #line 2731 
  char *tmp_4;
  #line 2739 
  char *tmp_8;
  #line 2757 
  char *tmp_9;
  #line 2771 
  char *tmp_10;
  #line 2770 
  char *tmp_11;
  #line 2670 
  struct btc_board_info *board_info = & btcoexist->board_info;
  #line 2671 
  struct btc_stack_info *stack_info = & btcoexist->stack_info;
  #line 2672 
  u8 ps_tdma_case = (unsigned char)0U;
  #line 2675 
  bool roam = (_Bool)0;
  #line 2675 
  bool scan = (_Bool)0;
  #line 2675 
  bool link = (_Bool)0;
  #line 2675 
  bool wifi_under_5g = (_Bool)0;
  #line 2676 
  bool bt_hs_on = (_Bool)0;
  #line 2676 
  bool wifi_busy = (_Bool)0;
  #line 2677 
  int wifi_rssi = 0;
  #line 2677 
  int bt_hs_rssi = 0;
  #line 2680 
  u32 fw_ver = 0U;
  #line 2680 
  u32 bt_patch_ver = 0U;
  #line 2682 
  seq_puts(m,(char *)"\n ============[BT Coexist info]============");
  #line 2684 
  if ((int)btcoexist->manual_control != 0) {
    #line 2685 
    seq_puts(m,(char *)"\n ===========[Under Manual Control]===========");
    #line 2686 
    seq_puts(m,(char *)"\n ==========================================");
  }
  #line 2689 
  seq_printf(m,(char *)"\n %-35s = %d/ %d ",(char *)"Ant PG number/ Ant mechanism:",(int)board_info->pg_ant_num,(int)board_info->btdm_ant_num);
  #line 2692 
  ;
  #line 2692 
  if ((int)stack_info->profile_notified != 0) 
                                              #line 2692 
                                              tmp = (char *)"Yes"; else 
                                                                    #line 2692 
                                                                    tmp = (char *)"No";
  #line 2692 
  ;
  #line 2692 
  seq_printf(m,(char *)"\n %-35s = %s / %d",(char *)"BT stack/ hci ext ver",tmp,(int)stack_info->hci_version);
  #line 2696 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)28,(void *)(& bt_patch_ver));
  #line 2697 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)26,(void *)(& fw_ver));
  #line 2698 
  seq_printf(m,(char *)"\n %-35s = %d_%d/ 0x%x/ 0x%x(%d)",(char *)"CoexVer/ FwVer/ PatchVer",glcoex_ver_date_8192e_2ant,glcoex_ver_8192e_2ant,fw_ver,bt_patch_ver,bt_patch_ver);
  #line 2703 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)0,(void *)(& bt_hs_on));
  #line 2704 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)37,(void *)(& wifi_dot11_chnl));
  #line 2706 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)39,(void *)(& wifi_hs_chnl));
  #line 2707 
  seq_printf(m,(char *)"\n %-35s = %d / %d(%d)",(char *)"Dot11 channel / HsMode(HsChnl)",(int)wifi_dot11_chnl,(int)bt_hs_on,(int)wifi_hs_chnl);
  #line 2711 
  seq_printf(m,(char *)"\n %-35s = %3ph ",(char *)"H2C Wifi inform bt chnl Info",(u8 *)(& coex_dm_0->wifi_chnl_info));
  #line 2714 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)22,(void *)(& wifi_rssi));
  #line 2715 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)23,(void *)(& bt_hs_rssi));
  #line 2716 
  seq_printf(m,(char *)"\n %-35s = %d/ %d",(char *)"Wifi rssi/ HS rssi",wifi_rssi,bt_hs_rssi);
  #line 2719 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)5,(void *)(& scan));
  #line 2720 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)6,(void *)(& link));
  #line 2721 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)11,(void *)(& roam));
  #line 2722 
  seq_printf(m,(char *)"\n %-35s = %d/ %d/ %d ",(char *)"Wifi link/ roam/ scan",(int)link,(int)roam,(int)scan);
  #line 2725 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)13,(void *)(& wifi_under_5g));
  #line 2726 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)24,(void *)(& wifi_bw));
  #line 2727 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)4,(void *)(& wifi_busy));
  #line 2728 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)25,(void *)(& wifi_traffic_dir));
  #line 2734 
  if (! wifi_busy) 
                   #line 2734 
                   tmp_1 = (char *)"idle";
  else {
    #line 2734 
    char *tmp_0;
    #line 2734 
    if (wifi_traffic_dir == 0U) 
                                #line 2734 
                                tmp_0 = (char *)"uplink"; else 
                                                               #line 2734 
                                                               tmp_0 = (char *)"downlink";
    #line 2734 
    tmp_1 = tmp_0;
  }
  #line 2731 
  if (wifi_bw != 0U) {
    #line 2732 
    if (wifi_bw == 2U) 
                       #line 2732 
                       tmp_2 = (char *)"HT40"; else 
                                                    #line 2732 
                                                    tmp_2 = (char *)"HT20";
    #line 2731 
    tmp_3 = tmp_2;
  }
  else 
       #line 2731 
       tmp_3 = (char *)"Legacy";
  #line 2731 
  if ((int)wifi_under_5g != 0) 
                               #line 2731 
                               tmp_4 = (char *)"5G"; else 
                                                          #line 2731 
                                                          tmp_4 = (char *)"2.4G";
  #line 2730 
  ;
  #line 2730 
  seq_printf(m,(char *)"\n %-35s = %s / %s/ %s ",(char *)"Wifi status",tmp_4,tmp_3,tmp_1);
  #line 2738 
  ;
  #line 2738 
  ;
  #line 2739 
  if (btcoexist->bt_info.bt_disabled) 
                                      #line 2739 
                                      tmp_8 = (char *)"disabled";
  else {
    #line 2740 
    char *tmp_7;
    #line 2740 
    if (coex_sta_0->c2h_bt_inquiry_page) 
                                         #line 2740 
                                         tmp_7 = (char *)"inquiry/page scan";
    else {
      #line 2743 
      char *tmp_5;
      #line 2742 
      char *tmp_6;
      #line 2742 
      if ((unsigned int)coex_dm_0->bt_status != 0U) {
        #line 2743 
        if ((unsigned int)coex_dm_0->bt_status == 1U) 
                                                      #line 2743 
                                                      tmp_5 = (char *)"connected-idle"; else 
                                                                    #line 2743 
                                                                    tmp_5 = (char *)"busy";
        #line 2742 
        tmp_6 = tmp_5;
      }
      else 
           #line 2742 
           tmp_6 = (char *)"non-connected idle";
      #line 2740 
      tmp_7 = tmp_6;
    }
    #line 2739 
    tmp_8 = tmp_7;
  }
  #line 2738 
  ;
  #line 2738 
  seq_printf(m,(char *)"\n %-35s = [%s/ %d/ %d] ",(char *)"BT [status/ rssi/ retryCnt]",tmp_8,(int)coex_sta_0->bt_rssi,(int)coex_sta_0->bt_retry_cnt);
  #line 2749 
  seq_printf(m,(char *)"\n %-35s = %d / %d / %d / %d",(char *)"SCO/HID/PAN/A2DP",(int)stack_info->sco_exist,(int)stack_info->hid_exist,(int)stack_info->pan_exist,(int)stack_info->a2dp_exist);
  #line 2753 
  (*(btcoexist->btc_disp_dbg_msg))((void *)btcoexist,(unsigned char)1,m);
  #line 2755 
  bt_info_ext = coex_sta_0->bt_info_ext;
  #line 2757 
  if (((int)bt_info_ext & 1) != 0) 
                                   #line 2757 
                                   tmp_9 = (char *)"Basic rate"; else 
                                                                   #line 2757 
                                                                   tmp_9 = (char *)"EDR rate";
  #line 2756 
  ;
  #line 2756 
  seq_printf(m,(char *)"\n %-35s = %s",(char *)"BT Info A2DP rate",tmp_9);
  #line 2760 
  i = (unsigned char)0U;
  #line 2760 
  while ((unsigned int)i <= 2U) {
    #line 2761 
    if (coex_sta_0->bt_info_c2h_cnt[(int)i] != 0U) 
                                                   #line 2762 
                                                   seq_printf(m,(char *)"\n %-35s = %7ph(%d)",glbt_info_src_8192e_2ant[(int)i],(u8 *)(& coex_sta_0->bt_info_c2h[(int)i]),coex_sta_0->bt_info_c2h_cnt[(int)i]);
    #line 2760 
    i = (u8)((int)i + 1);
  }
  #line 2771 
  if ((int)coex_sta_0->under_lps != 0) 
                                       #line 2771 
                                       tmp_10 = (char *)"LPS ON"; else 
                                                                    #line 2771 
                                                                    tmp_10 = (char *)"LPS OFF";
  #line 2770 
  if ((int)coex_sta_0->under_ips != 0) 
                                       #line 2770 
                                       tmp_11 = (char *)"IPS ON"; else 
                                                                    #line 2770 
                                                                    tmp_11 = (char *)"IPS OFF";
  #line 2769 
  ;
  #line 2769 
  seq_printf(m,(char *)"\n %-35s = %s/%s",(char *)"PS state, IPS/LPS",tmp_11,tmp_10);
  #line 2773 
  (*(btcoexist->btc_disp_dbg_msg))((void *)btcoexist,(unsigned char)3,m);
  #line 2775 
  seq_printf(m,(char *)"\n %-35s = 0x%x ",(char *)"SS Type",(int)coex_dm_0->cur_ss_type);
  #line 2779 
  seq_printf(m,(char *)"\n %-35s",(char *)"============[Sw mechanism]============");
  #line 2781 
  seq_printf(m,(char *)"\n %-35s = %d/ %d/ %d ",(char *)"SM1[ShRf/ LpRA/ LimDig]",(int)coex_dm_0->cur_rf_rx_lpf_shrink,(int)coex_dm_0->cur_low_penalty_ra,(int)coex_dm_0->limited_dig);
  #line 2784 
  seq_printf(m,(char *)"\n %-35s = %d/ %d/ %d(0x%x) ",(char *)"SM2[AgcT/ AdcB/ SwDacSwing(lvl)]",(int)coex_dm_0->cur_agc_table_en,(int)coex_dm_0->cur_adc_back_off,(int)coex_dm_0->cur_dac_swing_on,coex_dm_0->cur_dac_swing_lvl);
  #line 2789 
  seq_printf(m,(char *)"\n %-35s = 0x%x ",(char *)"Rate Mask",btcoexist->bt_info.ra_mask);
  #line 2793 
  seq_printf(m,(char *)"\n %-35s",(char *)"============[Fw mechanism]============");
  #line 2796 
  ps_tdma_case = coex_dm_0->cur_ps_tdma;
  #line 2797 
  seq_printf(m,(char *)"\n %-35s = %5ph case-%d (auto:%d)",(char *)"PS TDMA",(u8 *)(& coex_dm_0->ps_tdma_para),(int)ps_tdma_case,(int)coex_dm_0->auto_tdma_adjust);
  #line 2802 
  seq_printf(m,(char *)"\n %-35s = %d/ %d ",(char *)"DecBtPwr/ IgnWlanAct",(int)coex_dm_0->cur_dec_bt_pwr,(int)coex_dm_0->cur_ignore_wlan_act);
  #line 2807 
  seq_printf(m,(char *)"\n %-35s",(char *)"============[Hw setting]============");
  #line 2810 
  seq_printf(m,(char *)"\n %-35s = 0x%x",(char *)"RF-A, 0x1e initVal",coex_dm_0->bt_rf0x1e_backup);
  #line 2813 
  seq_printf(m,(char *)"\n %-35s = 0x%x/0x%x/0x%x/0x%x",(char *)"backup ARFR1/ARFR2/RL/AMaxTime",coex_dm_0->backup_arfr_cnt1,coex_dm_0->backup_arfr_cnt2,(int)coex_dm_0->backup_retry_limit,(int)coex_dm_0->backup_ampdu_maxtime);
  #line 2818 
  u32tmp[0] = (*(btcoexist->btc_read_4byte))((void *)btcoexist,1072U);
  #line 2819 
  u32tmp[1] = (*(btcoexist->btc_read_4byte))((void *)btcoexist,1076U);
  #line 2820 
  u16tmp[0] = (*(btcoexist->btc_read_2byte))((void *)btcoexist,1066U);
  #line 2821 
  u8tmp[0] = (*(btcoexist->btc_read_1byte))((void *)btcoexist,1110U);
  #line 2822 
  seq_printf(m,(char *)"\n %-35s = 0x%x/0x%x/0x%x/0x%x",(char *)"0x430/0x434/0x42a/0x456",u32tmp[0],u32tmp[1],(int)u16tmp[0],(int)u8tmp[0]);
  #line 2826 
  u32tmp[0] = (*(btcoexist->btc_read_4byte))((void *)btcoexist,3076U);
  #line 2827 
  u32tmp[1] = (*(btcoexist->btc_read_4byte))((void *)btcoexist,3332U);
  #line 2828 
  u32tmp[2] = (*(btcoexist->btc_read_4byte))((void *)btcoexist,2316U);
  #line 2829 
  seq_printf(m,(char *)"\n %-35s = 0x%x/ 0x%x/ 0x%x",(char *)"0xc04/ 0xd04/ 0x90c",u32tmp[0],u32tmp[1],u32tmp[2]);
  #line 2832 
  u8tmp[0] = (*(btcoexist->btc_read_1byte))((void *)btcoexist,1912U);
  #line 2833 
  seq_printf(m,(char *)"\n %-35s = 0x%x",(char *)"0x778",(int)u8tmp[0]);
  #line 2835 
  u8tmp[0] = (*(btcoexist->btc_read_1byte))((void *)btcoexist,2348U);
  #line 2836 
  u32tmp[0] = (*(btcoexist->btc_read_4byte))((void *)btcoexist,2352U);
  #line 2837 
  seq_printf(m,(char *)"\n %-35s = 0x%x/ 0x%x",(char *)"0x92c/ 0x930",(int)u8tmp[0],u32tmp[0]);
  #line 2840 
  u8tmp[0] = (*(btcoexist->btc_read_1byte))((void *)btcoexist,64U);
  #line 2841 
  u8tmp[1] = (*(btcoexist->btc_read_1byte))((void *)btcoexist,79U);
  #line 2842 
  seq_printf(m,(char *)"\n %-35s = 0x%x/ 0x%x",(char *)"0x40/ 0x4f",(int)u8tmp[0],(int)u8tmp[1]);
  #line 2845 
  u32tmp[0] = (*(btcoexist->btc_read_4byte))((void *)btcoexist,1360U);
  #line 2846 
  u8tmp[0] = (*(btcoexist->btc_read_1byte))((void *)btcoexist,1314U);
  #line 2847 
  seq_printf(m,(char *)"\n %-35s = 0x%x/ 0x%x",(char *)"0x550(bcn ctrl)/0x522",u32tmp[0],(int)u8tmp[0]);
  #line 2850 
  u32tmp[0] = (*(btcoexist->btc_read_4byte))((void *)btcoexist,3152U);
  #line 2851 
  seq_printf(m,(char *)"\n %-35s = 0x%x",(char *)"0xc50(dig)",u32tmp[0]);
  #line 2854 
  u32tmp[0] = (*(btcoexist->btc_read_4byte))((void *)btcoexist,1728U);
  #line 2855 
  u32tmp[1] = (*(btcoexist->btc_read_4byte))((void *)btcoexist,1732U);
  #line 2856 
  u32tmp[2] = (*(btcoexist->btc_read_4byte))((void *)btcoexist,1736U);
  #line 2857 
  u8tmp[0] = (*(btcoexist->btc_read_1byte))((void *)btcoexist,1740U);
  #line 2858 
  seq_printf(m,(char *)"\n %-35s = 0x%x/ 0x%x/ 0x%x/ 0x%x",(char *)"0x6c0/0x6c4/0x6c8/0x6cc(coexTable)",u32tmp[0],u32tmp[1],u32tmp[2],(int)u8tmp[0]);
  #line 2863 
  seq_printf(m,(char *)"\n %-35s = %d/ %d",(char *)"0x770(hp rx[31:16]/tx[15:0])",coex_sta_0->high_priority_rx,coex_sta_0->high_priority_tx);
  #line 2866 
  seq_printf(m,(char *)"\n %-35s = %d/ %d",(char *)"0x774(lp rx[31:16]/tx[15:0])",coex_sta_0->low_priority_rx,coex_sta_0->low_priority_tx);
  #line 2869 
  if ((int)btcoexist->auto_report_2ant != 0) 
                                             #line 2870 
                                             btc8192e2ant_monitor_bt_ctr(btcoexist);
  #line 2871 
  (*(btcoexist->btc_disp_dbg_msg))((void *)btcoexist,(unsigned char)0,m);
  #line 2872 
  return;
}

#line 2874  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.c"
void ex_btc8192e2ant_ips_notify(struct btc_coexist *btcoexist, u8 type)
{
  #line 2876 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 2878 
  if ((unsigned int)type == 1U) {
    #line 2879 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], IPS ENTER notify\n");
    #line 2881 
    coex_sta_0->under_ips = (_Bool)1;
    #line 2882 
    btc8192e2ant_coex_all_off(btcoexist);
  }
  else 
    #line 2883 
    if ((unsigned int)type == 0U) {
      #line 2884 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], IPS LEAVE notify\n");
      #line 2886 
      coex_sta_0->under_ips = (_Bool)0;
    }
  #line 2888 
  return;
}

#line 2890  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.c"
void ex_btc8192e2ant_lps_notify(struct btc_coexist *btcoexist, u8 type)
{
  #line 2892 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 2894 
  if ((unsigned int)type == 1U) {
    #line 2895 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], LPS ENABLE notify\n");
    #line 2897 
    coex_sta_0->under_lps = (_Bool)1;
  }
  else 
    #line 2898 
    if ((unsigned int)type == 0U) {
      #line 2899 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], LPS DISABLE notify\n");
      #line 2901 
      coex_sta_0->under_lps = (_Bool)0;
    }
  #line 2903 
  return;
}

#line 2905  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.c"
void ex_btc8192e2ant_scan_notify(struct btc_coexist *btcoexist, u8 type)
{
  #line 2907 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 2909 
  if ((unsigned int)type == 1U) 
                                #line 2910 
                                _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], SCAN START notify\n");
  else 
    #line 2912 
    if ((unsigned int)type == 0U) 
                                  #line 2913 
                                  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], SCAN FINISH notify\n");
  #line 2914 
  return;
}

#line 2917  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.c"
void ex_btc8192e2ant_connect_notify(struct btc_coexist *btcoexist, u8 type)
{
  #line 2919 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 2921 
  if ((unsigned int)type == 1U) 
                                #line 2922 
                                _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], CONNECT START notify\n");
  else 
    #line 2924 
    if ((unsigned int)type == 0U) 
                                  #line 2925 
                                  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], CONNECT FINISH notify\n");
  #line 2926 
  return;
}

#line 2929  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.c"
void ex_btc8192e2ant_media_status_notify(struct btc_coexist *btcoexist, u8 type)
{
  #line 2934 
  u32 wifi_bw;
  #line 2935 
  u8 wifi_center_chnl;
  #line 2932 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 2933 
  u8 h2c_parameter[3U] = {(unsigned char)0U};
  #line 2937 
  if (((int)btcoexist->manual_control != 0 || (int)btcoexist->stop_coex_dm != 0) || (int)btcoexist->bt_info.bt_disabled != 0) 
    #line 2940 
    return;
  #line 2942 
  if ((unsigned int)type == 1U) 
                                #line 2943 
                                _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], MEDIA connect notify\n"); else 
                                                                    #line 2946 
                                                                    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], MEDIA disconnect notify\n");
  #line 2950 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)38,(void *)(& wifi_center_chnl));
  #line 2952 
  if ((unsigned int)type == 1U && (unsigned int)wifi_center_chnl <= 14U) {
    #line 2954 
    h2c_parameter[0] = (unsigned char)1U;
    #line 2955 
    h2c_parameter[1] = wifi_center_chnl;
    #line 2956 
    (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)24,(void *)(& wifi_bw));
    #line 2957 
    if (wifi_bw == 2U) 
                       #line 2958 
                       h2c_parameter[2] = (unsigned char)48U; else 
                                                                   #line 2960 
                                                                   h2c_parameter[2] = (unsigned char)32U;
  }
  #line 2963 
  coex_dm_0->wifi_chnl_info[0] = h2c_parameter[0];
  #line 2964 
  coex_dm_0->wifi_chnl_info[1] = h2c_parameter[1];
  #line 2965 
  coex_dm_0->wifi_chnl_info[2] = h2c_parameter[2];
  #line 2967 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], FW write 0x66 = 0x%x\n",(((int)h2c_parameter[0] << 16) | ((int)h2c_parameter[1] << 8)) | (int)h2c_parameter[2]);
  #line 2972 
  (*(btcoexist->btc_fill_h2c))((void *)btcoexist,(unsigned char)102,3U,(u8 *)(& h2c_parameter));
  #line 2973 
  return;
}

#line 2975  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.c"
void ex_btc8192e2ant_special_packet_notify(struct btc_coexist *btcoexist, u8 type)
{
  #line 2978 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 2980 
  if ((unsigned int)type == 1U) 
                                #line 2981 
                                _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], DHCP Packet notify\n");
  #line 2982 
  return;
}

#line 2985  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.c"
void ex_btc8192e2ant_bt_info_notify(struct btc_coexist *btcoexist, u8 *tmp_buf, u8 length)
{
  #line 2990 
  u8 i;
  #line 2988 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 2989 
  u8 bt_info = (unsigned char)0U;
  #line 2990 
  u8 rsp_source = (unsigned char)0U;
  #line 2991 
  bool bt_busy = (_Bool)0;
  #line 2991 
  bool limited_dig = (_Bool)0;
  #line 2992 
  bool wifi_connected = (_Bool)0;
  #line 2994 
  coex_sta_0->c2h_bt_info_req_sent = (_Bool)0;
  #line 2996 
  rsp_source = (unsigned char)((unsigned int)*tmp_buf & 15U);
  #line 2997 
  if ((unsigned int)rsp_source > 2U) 
                                     #line 2998 
                                     rsp_source = (unsigned char)0U;
  #line 2999 
  (coex_sta_0->bt_info_c2h_cnt[(int)rsp_source]) ++;
  #line 3001 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Bt info[%d], length=%d, hex data = [",(int)rsp_source,(int)length);
  #line 3004 
  i = (unsigned char)0U;
  #line 3004 
  while ((int)i < (int)length) {
    #line 3005 
    coex_sta_0->bt_info_c2h[(int)rsp_source][(int)i] = *(tmp_buf + (unsigned long)i);
    #line 3006 
    if ((unsigned int)i == 1U) 
                               #line 3007 
                               bt_info = *(tmp_buf + (unsigned long)i);
    #line 3008 
    if ((int)i == (int)length + -1) 
                                    #line 3009 
                                    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"0x%02x]\n",(int)*(tmp_buf + (unsigned long)i)); else 
                                                                    #line 3012 
                                                                    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"0x%02x, ",(int)*(tmp_buf + (unsigned long)i));
    #line 3004 
    i = (u8)((int)i + 1);
  }
  #line 3016 
  if ((unsigned int)rsp_source != 0U) {
    #line 3018 
    coex_sta_0->bt_retry_cnt = (unsigned char)((unsigned int)coex_sta_0->bt_info_c2h[(int)rsp_source][2] & 15U);
    #line 3021 
    coex_sta_0->bt_rssi = (unsigned char)(((unsigned int)coex_sta_0->bt_info_c2h[(int)rsp_source][3] + 5U) * 2U);
    #line 3024 
    coex_sta_0->bt_info_ext = coex_sta_0->bt_info_c2h[(int)rsp_source][4];
    #line 3030 
    if (((int)coex_sta_0->bt_info_ext & 2) != 0) {
      #line 3031 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"bit1, send wifi BW&Chnl to BT!!\n");
      #line 3033 
      (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)2,(void *)(& wifi_connected));
      #line 3035 
      if ((int)wifi_connected != 0) 
                                    #line 3036 
                                    ex_btc8192e2ant_media_status_notify(btcoexist,(unsigned char)1); else 
                                                                    #line 3040 
                                                                    ex_btc8192e2ant_media_status_notify(btcoexist,(unsigned char)0);
    }
    #line 3045 
    if (((int)coex_sta_0->bt_info_ext & 8) != 0) 
      #line 3046 
      if (! btcoexist->manual_control && ! btcoexist->stop_coex_dm) {
        #line 3048 
        _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"bit3, BT NOT ignore Wlan active!\n");
        #line 3050 
        btc8192e2ant_ignore_wlan_act(btcoexist,(_Bool)1,(_Bool)0);
      }
    #line 3060 
    if (! btcoexist->auto_report_2ant) 
      #line 3061 
      if (((int)coex_sta_0->bt_info_ext & 16) == 0) 
                                                    #line 3062 
                                                    btc8192e2ant_bt_auto_report(btcoexist,(_Bool)1,(_Bool)1);
  }
  #line 3069 
  if (((int)bt_info & 4) != 0) 
                               #line 3070 
                               coex_sta_0->c2h_bt_inquiry_page = (_Bool)1; else 
                                                                    #line 3072 
                                                                    coex_sta_0->c2h_bt_inquiry_page = (_Bool)0;
  #line 3075 
  if (((int)bt_info & 1) == 0) {
    #line 3076 
    coex_sta_0->bt_link_exist = (_Bool)0;
    #line 3077 
    coex_sta_0->pan_exist = (_Bool)0;
    #line 3078 
    coex_sta_0->a2dp_exist = (_Bool)0;
    #line 3079 
    coex_sta_0->hid_exist = (_Bool)0;
    #line 3080 
    coex_sta_0->sco_exist = (_Bool)0;
  }
  else {
    #line 3082 
    coex_sta_0->bt_link_exist = (_Bool)1;
    #line 3083 
    if (((int)bt_info & 128) != 0) 
                                   #line 3084 
                                   coex_sta_0->pan_exist = (_Bool)1; else 
                                                                    #line 3086 
                                                                    coex_sta_0->pan_exist = (_Bool)0;
    #line 3087 
    if (((int)bt_info & 64) != 0) 
                                  #line 3088 
                                  coex_sta_0->a2dp_exist = (_Bool)1; else 
                                                                    #line 3090 
                                                                    coex_sta_0->a2dp_exist = (_Bool)0;
    #line 3091 
    if (((int)bt_info & 32) != 0) 
                                  #line 3092 
                                  coex_sta_0->hid_exist = (_Bool)1; else 
                                                                    #line 3094 
                                                                    coex_sta_0->hid_exist = (_Bool)0;
    #line 3095 
    if (((int)bt_info & 2) != 0) 
                                 #line 3096 
                                 coex_sta_0->sco_exist = (_Bool)1; else 
                                                                    #line 3098 
                                                                    coex_sta_0->sco_exist = (_Bool)0;
  }
  #line 3101 
  btc8192e2ant_update_bt_link_info(btcoexist);
  #line 3103 
  if (((int)bt_info & 1) == 0) {
    #line 3104 
    coex_dm_0->bt_status = (unsigned char)0U;
    #line 3105 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BT Non-Connected idle!!!\n");
  }
  else 
    #line 3107 
    if ((unsigned int)bt_info == 1U) {
      #line 3108 
      coex_dm_0->bt_status = (unsigned char)1U;
      #line 3109 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], bt_infoNotify(), BT Connected-idle!!!\n");
    }
    else 
      #line 3111 
      if (((int)bt_info & 2) != 0 || ((int)bt_info & 16) != 0) {
        #line 3113 
        coex_dm_0->bt_status = (unsigned char)4U;
        #line 3114 
        _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], bt_infoNotify(), BT SCO busy!!!\n");
      }
      else 
        #line 3116 
        if (((int)bt_info & 8) != 0) {
          #line 3117 
          coex_dm_0->bt_status = (unsigned char)3U;
          #line 3118 
          _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], bt_infoNotify(), BT ACL busy!!!\n");
        }
        else {
          #line 3121 
          coex_dm_0->bt_status = (unsigned char)6U;
          #line 3122 
          _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex]bt_infoNotify(), BT Non-Defined state!!!\n");
        }
  #line 3126 
  if ((unsigned int)coex_dm_0->bt_status + 253U <= 2U) {
    #line 3129 
    bt_busy = (_Bool)1;
    #line 3130 
    limited_dig = (_Bool)1;
  }
  else {
    #line 3132 
    bt_busy = (_Bool)0;
    #line 3133 
    limited_dig = (_Bool)0;
  }
  #line 3136 
  (*(btcoexist->btc_set))((void *)btcoexist,(unsigned char)1,(void *)(& bt_busy));
  #line 3138 
  coex_dm_0->limited_dig = limited_dig;
  #line 3139 
  (*(btcoexist->btc_set))((void *)btcoexist,(unsigned char)2,(void *)(& limited_dig));
  #line 3141 
  btc8192e2ant_run_coexist_mechanism(btcoexist);
  #line 3142 
  return;
}

#line 3144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.c"
void ex_btc8192e2ant_halt_notify(struct btc_coexist *btcoexist)
{
  #line 3146 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 3148 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Halt notify\n");
  #line 3150 
  btc8192e2ant_ignore_wlan_act(btcoexist,(_Bool)1,(_Bool)1);
  #line 3151 
  ex_btc8192e2ant_media_status_notify(btcoexist,(unsigned char)0);
  #line 3152 
  return;
}

#line 3154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.c"
void ex_btc8192e2ant_periodical(struct btc_coexist *btcoexist)
{
  #line 3157 
  u8 dis_ver_info_cnt;
  #line 3156 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 3158 
  u32 fw_ver = 0U;
  #line 3158 
  u32 bt_patch_ver = 0U;
  #line 3159 
  struct btc_board_info *board_info = & btcoexist->board_info;
  #line 3160 
  struct btc_stack_info *stack_info = & btcoexist->stack_info;
  #line 3162 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"=======================Periodical=======================\n");
  #line 3164 
  if ((unsigned int)dis_ver_info_cnt <= 5U) {
    #line 3172 
    char *tmp;
    #line 3165 
    dis_ver_info_cnt = (unsigned char)((unsigned int)dis_ver_info_cnt + 1U);
    #line 3166 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"************************************************\n");
    #line 3168 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"Ant PG Num/ Ant Mech/ Ant Pos = %d/ %d/ %d\n",(int)board_info->pg_ant_num,(int)board_info->btdm_ant_num,(int)board_info->btdm_ant_pos);
    #line 3172 
    ;
    #line 3172 
    if ((int)stack_info->profile_notified != 0) 
                                                #line 3172 
                                                tmp = (char *)"Yes"; else 
                                                                    #line 3172 
                                                                    tmp = (char *)"No";
    #line 3172 
    ;
    #line 3172 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"BT stack/ hci ext ver = %s / %d\n",tmp,(int)stack_info->hci_version);
    #line 3176 
    (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)28,(void *)(& bt_patch_ver));
    #line 3178 
    (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)26,(void *)(& fw_ver));
    #line 3179 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"CoexVer/ FwVer/ PatchVer = %d_%x/ 0x%x/ 0x%x(%d)\n",glcoex_ver_date_8192e_2ant,glcoex_ver_8192e_2ant,fw_ver,bt_patch_ver,bt_patch_ver);
    #line 3183 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"************************************************\n");
  }
  #line 3187 
  if (! btcoexist->auto_report_2ant) {
    #line 3188 
    btc8192e2ant_query_bt_info(btcoexist);
    #line 3189 
    btc8192e2ant_monitor_bt_ctr(btcoexist);
    #line 3190 
    btc8192e2ant_monitor_bt_enable_disable(btcoexist);
  }
  else {
    #line 3192 
    if ((int)btc8192e2ant_is_wifi_status_changed(btcoexist) != 0) 
                                                                  #line 3194 
                                                                  btc8192e2ant_run_coexist_mechanism(btcoexist);
    else 
      #line 3192 
      if ((int)coex_dm_0->auto_tdma_adjust != 0) 
                                                 #line 3194 
                                                 btc8192e2ant_run_coexist_mechanism(btcoexist);
  }
  #line 3195 
  return;
}

#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.h"
#line 3559  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.c"
void ex_btc8821a2ant_init_hwconfig(struct btc_coexist *btcoexist);
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.h"
#line 3628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.c"
void ex_btc8821a2ant_init_coex_dm(struct btc_coexist *btcoexist);
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.h"
#line 3838  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.c"
void ex_btc8821a2ant_ips_notify(struct btc_coexist *btcoexist, u8 type);
#line 167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.h"
#line 3859  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.c"
void ex_btc8821a2ant_lps_notify(struct btc_coexist *btcoexist, u8 type);
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.h"
#line 3874  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.c"
void ex_btc8821a2ant_scan_notify(struct btc_coexist *btcoexist, u8 type);
#line 177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.h"
#line 3887  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.c"
void ex_btc8821a2ant_connect_notify(struct btc_coexist *btcoexist, u8 type);
#line 182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.h"
#line 3900  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.c"
void ex_btc8821a2ant_media_status_notify(struct btc_coexist *btcoexist, u8 type);
#line 187  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.h"
#line 3949  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.c"
void ex_btc8821a2ant_special_packet_notify(struct btc_coexist *btcoexist, u8 type);
#line 192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.h"
#line 3960  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.c"
void ex_btc8821a2ant_bt_info_notify(struct btc_coexist *btcoexist, u8 *tmp_buf, u8 length);
#line 198  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.h"
#line 4160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.c"
void ex_btc8821a2ant_halt_notify(struct btc_coexist *btcoexist);
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.h"
#line 4190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.c"
void ex_btc8821a2ant_periodical(struct btc_coexist *btcoexist);
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.h"
#line 3638  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.c"
void ex_btc8821a2ant_display_coex_info(struct btc_coexist *btcoexist, struct seq_file *m);
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.h"
#line 4172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.c"
void ex_btc8821a2ant_pnp_notify(struct btc_coexist *btcoexist, u8 pnp_state);
#line 211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.h"
#line 3591  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.c"
void ex_btc8821a2ant_pre_load_firmware(struct btc_coexist *btcoexist);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.c"
static struct coex_dm_8821a_2ant glcoex_dm_8821a_2ant;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.c"
static struct coex_dm_8821a_2ant *coex_dm_1 = & glcoex_dm_8821a_2ant;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.c"
static struct coex_sta_8821a_2ant glcoex_sta_8821a_2ant;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.c"
static struct coex_sta_8821a_2ant *coex_sta_1 = & glcoex_sta_8821a_2ant;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.c"
static char *glbt_info_src_8821a_2ant[3U] = {(char *)"BT Info[wifi fw]", (char *)"BT Info[bt rsp]", (char *)"BT Info[bt auto report]"};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.c"
static u32 glcoex_ver_date_8821a_2ant = 20130618U;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.c"
static u32 glcoex_ver_8821a_2ant = 20560U;
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.c"
static u8 btc8821a2ant_bt_rssi_state(struct btc_coexist *btcoexist, u8 level_num, u8 rssi_thresh, u8 rssi_thresh1)
{
  #line 45 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 46 
  long bt_rssi = 0L;
  #line 47 
  u8 bt_rssi_state = coex_sta_1->pre_bt_rssi_state;
  #line 49 
  bt_rssi = (long)coex_sta_1->bt_rssi;
  #line 51 
  if ((unsigned int)level_num == 2U) 
    #line 52 
    if ((unsigned int)coex_sta_1->pre_bt_rssi_state == 2U || (unsigned int)coex_sta_1->pre_bt_rssi_state == 5U) 
      #line 55 
      if ((long)((int)rssi_thresh + 2) <= bt_rssi) {
        #line 56 
        bt_rssi_state = (unsigned char)0U;
        #line 57 
        _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BT Rssi state switch to High\n");
      }
      else {
        #line 60 
        bt_rssi_state = (unsigned char)5U;
        #line 61 
        _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BT Rssi state stay at Low\n");
      }
    else 
      #line 65 
      if ((long)rssi_thresh > bt_rssi) {
        #line 66 
        bt_rssi_state = (unsigned char)2U;
        #line 67 
        _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BT Rssi state switch to Low\n");
      }
      else {
        #line 70 
        bt_rssi_state = (unsigned char)3U;
        #line 71 
        _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BT Rssi state stay at High\n");
      }
  else 
    #line 75 
    if ((unsigned int)level_num == 3U) {
      #line 76 
      if ((int)rssi_thresh > (int)rssi_thresh1) {
        #line 77 
        _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BT Rssi thresh error!!\n");
        #line 79 
        return coex_sta_1->pre_bt_rssi_state;
      }
      #line 82 
      if ((unsigned int)coex_sta_1->pre_bt_rssi_state == 2U || (unsigned int)coex_sta_1->pre_bt_rssi_state == 5U) 
        #line 85 
        if ((long)((int)rssi_thresh + 2) <= bt_rssi) {
          #line 87 
          bt_rssi_state = (unsigned char)1U;
          #line 88 
          _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BT Rssi state switch to Medium\n");
        }
        else {
          #line 91 
          bt_rssi_state = (unsigned char)5U;
          #line 92 
          _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BT Rssi state stay at Low\n");
        }
      else 
        #line 95 
        if ((unsigned int)coex_sta_1->pre_bt_rssi_state == 1U || (unsigned int)coex_sta_1->pre_bt_rssi_state == 4U) 
          #line 100 
          if ((long)((int)rssi_thresh1 + 2) <= bt_rssi) {
            #line 102 
            bt_rssi_state = (unsigned char)0U;
            #line 103 
            _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BT Rssi state switch to High\n");
          }
          else 
            #line 105 
            if ((long)rssi_thresh > bt_rssi) {
              #line 106 
              bt_rssi_state = (unsigned char)2U;
              #line 107 
              _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BT Rssi state switch to Low\n");
            }
            else {
              #line 110 
              bt_rssi_state = (unsigned char)4U;
              #line 111 
              _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BT Rssi state stay at Medium\n");
            }
        else 
          #line 115 
          if ((long)rssi_thresh1 > bt_rssi) {
            #line 116 
            bt_rssi_state = (unsigned char)1U;
            #line 117 
            _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BT Rssi state switch to Medium\n");
          }
          else {
            #line 120 
            bt_rssi_state = (unsigned char)3U;
            #line 121 
            _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BT Rssi state stay at High\n");
          }
    }
  #line 127 
  coex_sta_1->pre_bt_rssi_state = bt_rssi_state;
  #line 129 
  return bt_rssi_state;
}

#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.c"
static u8 btc8821a2ant_wifi_rssi_state(struct btc_coexist *btcoexist, u8 index, u8 level_num, u8 rssi_thresh, u8 rssi_thresh1)
{
  #line 136 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 137 
  long wifi_rssi = 0L;
  #line 138 
  u8 wifi_rssi_state = coex_sta_1->pre_wifi_rssi_state[(int)index];
  #line 140 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)22,(void *)(& wifi_rssi));
  #line 142 
  if ((unsigned int)level_num == 2U) 
    #line 143 
    if ((unsigned int)coex_sta_1->pre_wifi_rssi_state[(int)index] == 2U || (unsigned int)coex_sta_1->pre_wifi_rssi_state[(int)index] == 5U) 
      #line 148 
      if ((long)((int)rssi_thresh + 2) <= wifi_rssi) {
        #line 149 
        wifi_rssi_state = (unsigned char)0U;
        #line 150 
        _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], wifi RSSI state switch to High\n");
      }
      else {
        #line 153 
        wifi_rssi_state = (unsigned char)5U;
        #line 154 
        _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], wifi RSSI state stay at Low\n");
      }
    else 
      #line 158 
      if ((long)rssi_thresh > wifi_rssi) {
        #line 159 
        wifi_rssi_state = (unsigned char)2U;
        #line 160 
        _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], wifi RSSI state switch to Low\n");
      }
      else {
        #line 163 
        wifi_rssi_state = (unsigned char)3U;
        #line 164 
        _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], wifi RSSI state stay at High\n");
      }
  else 
    #line 168 
    if ((unsigned int)level_num == 3U) {
      #line 169 
      if ((int)rssi_thresh > (int)rssi_thresh1) {
        #line 170 
        _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], wifi RSSI thresh error!!\n");
        #line 172 
        return coex_sta_1->pre_wifi_rssi_state[(int)index];
      }
      #line 175 
      if ((unsigned int)coex_sta_1->pre_wifi_rssi_state[(int)index] == 2U || (unsigned int)coex_sta_1->pre_wifi_rssi_state[(int)index] == 5U) 
        #line 180 
        if ((long)((int)rssi_thresh + 2) <= wifi_rssi) {
          #line 182 
          wifi_rssi_state = (unsigned char)1U;
          #line 183 
          _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], wifi RSSI state switch to Medium\n");
        }
        else {
          #line 186 
          wifi_rssi_state = (unsigned char)5U;
          #line 187 
          _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], wifi RSSI state stay at Low\n");
        }
      else 
        #line 190 
        if ((unsigned int)coex_sta_1->pre_wifi_rssi_state[(int)index] == 1U || (unsigned int)coex_sta_1->pre_wifi_rssi_state[(int)index] == 4U) 
          #line 194 
          if ((long)((int)rssi_thresh1 + 2) <= wifi_rssi) {
            #line 196 
            wifi_rssi_state = (unsigned char)0U;
            #line 197 
            _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], wifi RSSI state switch to High\n");
          }
          else 
            #line 199 
            if ((long)rssi_thresh > wifi_rssi) {
              #line 200 
              wifi_rssi_state = (unsigned char)2U;
              #line 201 
              _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], wifi RSSI state switch to Low\n");
            }
            else {
              #line 204 
              wifi_rssi_state = (unsigned char)4U;
              #line 205 
              _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], wifi RSSI state stay at Medium\n");
            }
        else 
          #line 209 
          if ((long)rssi_thresh1 > wifi_rssi) {
            #line 210 
            wifi_rssi_state = (unsigned char)1U;
            #line 211 
            _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], wifi RSSI state switch to Medium\n");
          }
          else {
            #line 214 
            wifi_rssi_state = (unsigned char)3U;
            #line 215 
            _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], wifi RSSI state stay at High\n");
          }
    }
  #line 220 
  coex_sta_1->pre_wifi_rssi_state[(int)index] = wifi_rssi_state;
  #line 222 
  return wifi_rssi_state;
}

#line 226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.c"
static void btc8821a2ant_limited_rx(struct btc_coexist *btcoexist, bool force_exec, bool rej_ap_agg_pkt, bool bt_ctrl_agg_buf_size, u8 agg_buf_size)
{
  #line 230 
  bool reject_rx_agg = rej_ap_agg_pkt;
  #line 231 
  bool bt_ctrl_rx_agg_size = bt_ctrl_agg_buf_size;
  #line 232 
  u8 rx_agg_size = agg_buf_size;
  #line 235 
  (*(btcoexist->btc_set))((void *)btcoexist,(unsigned char)4,(void *)(& reject_rx_agg));
  #line 238 
  (*(btcoexist->btc_set))((void *)btcoexist,(unsigned char)5,(void *)(& bt_ctrl_rx_agg_size));
  #line 241 
  (*(btcoexist->btc_set))((void *)btcoexist,(unsigned char)11,(void *)(& rx_agg_size));
  #line 243 
  (*(btcoexist->btc_set))((void *)btcoexist,(unsigned char)13,(void *)0);
  #line 244 
  return;
}

#line 246  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.c"
static void btc8821a2ant_monitor_bt_ctr(struct btc_coexist *btcoexist)
{
  #line 250 
  u32 reg_hp_txrx;
  #line 250 
  u32 reg_lp_txrx;
  #line 250 
  u32 u4tmp;
  #line 248 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 249 
  struct btc_bt_link_info *bt_link_info = & btcoexist->bt_link_info;
  #line 251 
  u32 reg_hp_tx = 0U;
  #line 251 
  u32 reg_hp_rx = 0U;
  #line 251 
  u32 reg_lp_tx = 0U;
  #line 251 
  u32 reg_lp_rx = 0U;
  #line 253 
  reg_hp_txrx = 1904U;
  #line 254 
  reg_lp_txrx = 1908U;
  #line 256 
  u4tmp = (*(btcoexist->btc_read_4byte))((void *)btcoexist,reg_hp_txrx);
  #line 257 
  reg_hp_tx = u4tmp & 65535U;
  #line 258 
  reg_hp_rx = u4tmp >> 16;
  #line 260 
  u4tmp = (*(btcoexist->btc_read_4byte))((void *)btcoexist,reg_lp_txrx);
  #line 261 
  reg_lp_tx = u4tmp & 65535U;
  #line 262 
  reg_lp_rx = u4tmp >> 16;
  #line 264 
  coex_sta_1->high_priority_tx = reg_hp_tx;
  #line 265 
  coex_sta_1->high_priority_rx = reg_hp_rx;
  #line 266 
  coex_sta_1->low_priority_tx = reg_lp_tx;
  #line 267 
  coex_sta_1->low_priority_rx = reg_lp_rx;
  #line 269 
  if ((coex_sta_1->low_priority_rx > 949U && coex_sta_1->low_priority_rx >= coex_sta_1->low_priority_tx) && ! coex_sta_1->under_ips) 
    #line 272 
    bt_link_info->slave_role = (_Bool)1; else 
                                              #line 274 
                                              bt_link_info->slave_role = (_Bool)0;
  #line 276 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], High Priority Tx/Rx (reg 0x%x) = 0x%x(%d)/0x%x(%d)\n",reg_hp_txrx,reg_hp_tx,reg_hp_tx,reg_hp_rx,reg_hp_rx);
  #line 279 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Low Priority Tx/Rx (reg 0x%x) = 0x%x(%d)/0x%x(%d)\n",reg_lp_txrx,reg_lp_tx,reg_lp_tx,reg_lp_rx,reg_lp_rx);
  #line 284 
  (*(btcoexist->btc_write_1byte))((void *)btcoexist,1902U,12U);
  #line 285 
  return;
}

#line 287  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.c"
static void btc8821a2ant_monitor_wifi_ctr(struct btc_coexist *btcoexist)
{
  #line 289 
  if ((int)coex_sta_1->under_ips != 0) {
    #line 290 
    coex_sta_1->crc_ok_cck = 0U;
    #line 291 
    coex_sta_1->crc_ok_11g = 0U;
    #line 292 
    coex_sta_1->crc_ok_11n = 0U;
    #line 293 
    coex_sta_1->crc_ok_11n_agg = 0U;
    #line 295 
    coex_sta_1->crc_err_cck = 0U;
    #line 296 
    coex_sta_1->crc_err_11g = 0U;
    #line 297 
    coex_sta_1->crc_err_11n = 0U;
    #line 298 
    coex_sta_1->crc_err_11n_agg = 0U;
  }
  else {
    #line 300 
    coex_sta_1->crc_ok_cck = (*(btcoexist->btc_read_4byte))((void *)btcoexist,3976U);
    #line 302 
    coex_sta_1->crc_ok_11g = (unsigned int)(*(btcoexist->btc_read_2byte))((void *)btcoexist,3988U);
    #line 304 
    coex_sta_1->crc_ok_11n = (unsigned int)(*(btcoexist->btc_read_2byte))((void *)btcoexist,3984U);
    #line 306 
    coex_sta_1->crc_ok_11n_agg = (unsigned int)(*(btcoexist->btc_read_2byte))((void *)btcoexist,4024U);
    #line 309 
    coex_sta_1->crc_err_cck = (*(btcoexist->btc_read_4byte))((void *)btcoexist,3972U);
    #line 311 
    coex_sta_1->crc_err_11g = (unsigned int)(*(btcoexist->btc_read_2byte))((void *)btcoexist,3990U);
    #line 313 
    coex_sta_1->crc_err_11n = (unsigned int)(*(btcoexist->btc_read_2byte))((void *)btcoexist,3986U);
    #line 315 
    coex_sta_1->crc_err_11n_agg = (unsigned int)(*(btcoexist->btc_read_2byte))((void *)btcoexist,4026U);
  }
  #line 320 
  (*(btcoexist->btc_write_1byte_bitmask))((void *)btcoexist,3862U,1U,(unsigned char)1);
  #line 321 
  (*(btcoexist->btc_write_1byte_bitmask))((void *)btcoexist,3862U,1U,(unsigned char)0);
  #line 322 
  return;
}

#line 324  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.c"
static void btc8821a2ant_query_bt_info(struct btc_coexist *btcoexist)
{
  #line 326 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 327 
  u8 h2c_parameter[1U] = {(unsigned char)0U};
  #line 329 
  coex_sta_1->c2h_bt_info_req_sent = (_Bool)1;
  #line 331 
  h2c_parameter[0] = (unsigned char)((unsigned int)h2c_parameter[0] | 1U);
  #line 333 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Query Bt Info, FW write 0x61 = 0x%x\n",(int)h2c_parameter[0]);
  #line 337 
  (*(btcoexist->btc_fill_h2c))((void *)btcoexist,(unsigned char)97,1U,(u8 *)(& h2c_parameter));
  #line 338 
  return;
}

#line 340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.c"
static bool btc8821a2ant_is_wifi_status_changed(struct btc_coexist *btcoexist)
{
  #line 342 
  bool pre_wifi_busy = (_Bool)1;
  #line 343 
  bool pre_under_4way = (_Bool)1;
  #line 344 
  bool pre_bt_hs_on = (_Bool)1;
  #line 345 
  bool wifi_busy = (_Bool)0;
  #line 345 
  bool under_4way = (_Bool)0;
  #line 345 
  bool bt_hs_on = (_Bool)0;
  #line 346 
  bool wifi_connected = (_Bool)0;
  #line 347 
  u8 wifi_rssi_state = (unsigned char)0U;
  #line 349 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)2,(void *)(& wifi_connected));
  #line 351 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)4,(void *)(& wifi_busy));
  #line 352 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)0,(void *)(& bt_hs_on));
  #line 353 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)12,(void *)(& under_4way));
  #line 356 
  if ((int)wifi_connected != 0) {
    #line 357 
    if ((int)wifi_busy != (int)pre_wifi_busy) {
      #line 358 
      pre_wifi_busy = wifi_busy;
      #line 359 
      return (_Bool)1;
    }
    #line 361 
    if ((int)under_4way != (int)pre_under_4way) {
      #line 362 
      pre_under_4way = under_4way;
      #line 363 
      return (_Bool)1;
    }
    #line 365 
    if ((int)bt_hs_on != (int)pre_bt_hs_on) {
      #line 366 
      pre_bt_hs_on = bt_hs_on;
      #line 367 
      return (_Bool)1;
    }
    #line 370 
    wifi_rssi_state = btc8821a2ant_wifi_rssi_state(btcoexist,(unsigned char)3,(unsigned char)2,(unsigned char)42,(unsigned char)0);
    #line 373 
    if ((unsigned int)wifi_rssi_state == 0U || (unsigned int)wifi_rssi_state == 2U) 
      #line 375 
      return (_Bool)1;
  }
  #line 378 
  return (_Bool)0;
}

#line 381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.c"
static void btc8821a2ant_update_bt_link_info(struct btc_coexist *btcoexist)
{
  #line 383 
  struct btc_bt_link_info *bt_link_info = & btcoexist->bt_link_info;
  #line 384 
  bool bt_hs_on = (_Bool)0;
  #line 386 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)0,(void *)(& bt_hs_on));
  #line 388 
  bt_link_info->bt_link_exist = coex_sta_1->bt_link_exist;
  #line 389 
  bt_link_info->sco_exist = coex_sta_1->sco_exist;
  #line 390 
  bt_link_info->a2dp_exist = coex_sta_1->a2dp_exist;
  #line 391 
  bt_link_info->pan_exist = coex_sta_1->pan_exist;
  #line 392 
  bt_link_info->hid_exist = coex_sta_1->hid_exist;
  #line 395 
  if ((int)bt_hs_on != 0) {
    #line 396 
    bt_link_info->pan_exist = (_Bool)1;
    #line 397 
    bt_link_info->bt_link_exist = (_Bool)1;
  }
  #line 401 
  if ((((int)bt_link_info->sco_exist != 0 && ! bt_link_info->a2dp_exist) && ! bt_link_info->pan_exist) && ! bt_link_info->hid_exist) 
    #line 403 
    bt_link_info->sco_only = (_Bool)1; else 
                                            #line 405 
                                            bt_link_info->sco_only = (_Bool)0;
  #line 408 
  if (((! bt_link_info->sco_exist && (int)bt_link_info->a2dp_exist != 0) && ! bt_link_info->pan_exist) && ! bt_link_info->hid_exist) 
    #line 410 
    bt_link_info->a2dp_only = (_Bool)1; else 
                                             #line 412 
                                             bt_link_info->a2dp_only = (_Bool)0;
  #line 415 
  if (((! bt_link_info->sco_exist && ! bt_link_info->a2dp_exist) && (int)bt_link_info->pan_exist != 0) && ! bt_link_info->hid_exist) 
    #line 417 
    bt_link_info->pan_only = (_Bool)1; else 
                                            #line 419 
                                            bt_link_info->pan_only = (_Bool)0;
  #line 422 
  if (((! bt_link_info->sco_exist && ! bt_link_info->a2dp_exist) && ! bt_link_info->pan_exist) && (int)bt_link_info->hid_exist != 0) 
    #line 424 
    bt_link_info->hid_only = (_Bool)1; else 
                                            #line 426 
                                            bt_link_info->hid_only = (_Bool)0;
  #line 427 
  return;
}

#line 429  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.c"
static u8 btc8821a2ant_action_algorithm(struct btc_coexist *btcoexist)
{
  #line 431 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 432 
  struct btc_bt_link_info *bt_link_info = & btcoexist->bt_link_info;
  #line 433 
  bool bt_hs_on = (_Bool)0;
  #line 434 
  u8 algorithm = (unsigned char)0U;
  #line 435 
  u8 num_of_diff_profile = (unsigned char)0U;
  #line 437 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)0,(void *)(& bt_hs_on));
  #line 439 
  if (! bt_link_info->bt_link_exist) {
    #line 440 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], No BT link exists!!!\n");
    #line 442 
    return algorithm;
  }
  #line 445 
  if ((int)bt_link_info->sco_exist != 0) 
                                         #line 446 
                                         num_of_diff_profile = (u8)((int)num_of_diff_profile + 1);
  #line 447 
  if ((int)bt_link_info->hid_exist != 0) 
                                         #line 448 
                                         num_of_diff_profile = (u8)((int)num_of_diff_profile + 1);
  #line 449 
  if ((int)bt_link_info->pan_exist != 0) 
                                         #line 450 
                                         num_of_diff_profile = (u8)((int)num_of_diff_profile + 1);
  #line 451 
  if ((int)bt_link_info->a2dp_exist != 0) 
                                          #line 452 
                                          num_of_diff_profile = (u8)((int)num_of_diff_profile + 1);
  #line 454 
  if ((unsigned int)num_of_diff_profile == 1U) {
    #line 455 
    if ((int)bt_link_info->sco_exist != 0) {
      #line 456 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], SCO only\n");
      #line 458 
      algorithm = (unsigned char)1U;
    }
    else 
      #line 460 
      if ((int)bt_link_info->hid_exist != 0) {
        #line 461 
        _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], HID only\n");
        #line 463 
        algorithm = (unsigned char)2U;
      }
      else 
        #line 464 
        if ((int)bt_link_info->a2dp_exist != 0) {
          #line 465 
          _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], A2DP only\n");
          #line 467 
          algorithm = (unsigned char)3U;
        }
        else 
          #line 468 
          if ((int)bt_link_info->pan_exist != 0) 
            #line 469 
            if ((int)bt_hs_on != 0) {
              #line 470 
              _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], PAN(HS) only\n");
              #line 473 
              algorithm = (unsigned char)6U;
            }
            else {
              #line 475 
              _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], PAN(EDR) only\n");
              #line 478 
              algorithm = (unsigned char)5U;
            }
  }
  else 
    #line 482 
    if ((unsigned int)num_of_diff_profile == 2U) {
      #line 483 
      if ((int)bt_link_info->sco_exist != 0) {
        #line 484 
        if ((int)bt_link_info->hid_exist != 0) {
          #line 485 
          _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], SCO + HID\n");
          #line 487 
          algorithm = (unsigned char)1U;
        }
        else 
          #line 488 
          if ((int)bt_link_info->a2dp_exist != 0) {
            #line 489 
            _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], SCO + A2DP ==> SCO\n");
            #line 491 
            algorithm = (unsigned char)1U;
          }
          else 
            #line 492 
            if ((int)bt_link_info->pan_exist != 0) 
              #line 493 
              if ((int)bt_hs_on != 0) {
                #line 494 
                _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], SCO + PAN(HS)\n");
                #line 497 
                algorithm = (unsigned char)1U;
              }
              else {
                #line 499 
                _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], SCO + PAN(EDR)\n");
                #line 502 
                algorithm = (unsigned char)1U;
              }
      }
      else 
        #line 506 
        if ((int)bt_link_info->hid_exist != 0 && (int)bt_link_info->a2dp_exist != 0) {
          #line 508 
          _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], HID + A2DP\n");
          #line 510 
          algorithm = (unsigned char)10U;
        }
        else 
          #line 511 
          if ((int)bt_link_info->hid_exist != 0 && (int)bt_link_info->pan_exist != 0) 
            #line 513 
            if ((int)bt_hs_on != 0) {
              #line 514 
              _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], HID + PAN(HS)\n");
              #line 517 
              algorithm = (unsigned char)2U;
            }
            else {
              #line 519 
              _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], HID + PAN(EDR)\n");
              #line 522 
              algorithm = (unsigned char)8U;
            }
          else 
            #line 525 
            if ((int)bt_link_info->pan_exist != 0 && (int)bt_link_info->a2dp_exist != 0) 
              #line 527 
              if ((int)bt_hs_on != 0) {
                #line 528 
                _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], A2DP + PAN(HS)\n");
                #line 531 
                algorithm = (unsigned char)4U;
              }
              else {
                #line 534 
                _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], A2DP + PAN(EDR)\n");
                #line 537 
                algorithm = (unsigned char)7U;
              }
    }
    else 
      #line 542 
      if ((unsigned int)num_of_diff_profile == 3U) {
        #line 543 
        if ((int)bt_link_info->sco_exist != 0) {
          #line 544 
          if ((int)bt_link_info->hid_exist != 0 && (int)bt_link_info->a2dp_exist != 0) {
            #line 546 
            _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], SCO + HID + A2DP ==> HID\n");
            #line 548 
            algorithm = (unsigned char)1U;
          }
          else 
            #line 549 
            if ((int)bt_link_info->hid_exist != 0 && (int)bt_link_info->pan_exist != 0) 
              #line 551 
              if ((int)bt_hs_on != 0) {
                #line 552 
                _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], SCO + HID + PAN(HS)\n");
                #line 555 
                algorithm = (unsigned char)1U;
              }
              else {
                #line 557 
                _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], SCO + HID + PAN(EDR)\n");
                #line 560 
                algorithm = (unsigned char)1U;
              }
            else 
              #line 562 
              if ((int)bt_link_info->pan_exist != 0 && (int)bt_link_info->a2dp_exist != 0) 
                #line 564 
                if ((int)bt_hs_on != 0) {
                  #line 565 
                  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], SCO + A2DP + PAN(HS)\n");
                  #line 568 
                  algorithm = (unsigned char)1U;
                }
                else {
                  #line 570 
                  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], SCO + A2DP + PAN(EDR) ==> HID\n");
                  #line 573 
                  algorithm = (unsigned char)1U;
                }
        }
        else 
          #line 577 
          if (((int)bt_link_info->hid_exist != 0 && (int)bt_link_info->pan_exist != 0) && (int)bt_link_info->a2dp_exist != 0) 
            #line 580 
            if ((int)bt_hs_on != 0) {
              #line 581 
              _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], HID + A2DP + PAN(HS)\n");
              #line 584 
              algorithm = (unsigned char)10U;
            }
            else {
              #line 587 
              _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], HID + A2DP + PAN(EDR)\n");
              #line 590 
              algorithm = (unsigned char)9U;
            }
      }
      else 
        #line 595 
        if ((unsigned int)num_of_diff_profile > 2U) 
          #line 596 
          if ((int)bt_link_info->sco_exist != 0) 
            #line 597 
            if (((int)bt_link_info->hid_exist != 0 && (int)bt_link_info->pan_exist != 0) && (int)bt_link_info->a2dp_exist != 0) 
              #line 600 
              if ((int)bt_hs_on != 0) 
                                      #line 601 
                                      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Error!!! SCO + HID + A2DP + PAN(HS)\n");
              else {
                #line 606 
                _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], SCO + HID + A2DP + PAN(EDR)==>PAN(EDR)+HID\n");
                #line 609 
                algorithm = (unsigned char)1U;
              }
  #line 614 
  return algorithm;
}

#line 617  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.c"
static void btc8821a2ant_set_fw_dac_swing_lvl(struct btc_coexist *btcoexist, u8 dac_swing_lvl)
{
  #line 620 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 621 
  u8 h2c_parameter[1U] = {(unsigned char)0U};
  #line 626 
  h2c_parameter[0] = dac_swing_lvl;
  #line 628 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Set Dac Swing Level = 0x%x\n",(int)dac_swing_lvl);
  #line 630 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], FW write 0x64 = 0x%x\n",(int)h2c_parameter[0]);
  #line 633 
  (*(btcoexist->btc_fill_h2c))((void *)btcoexist,(unsigned char)100,1U,(u8 *)(& h2c_parameter));
  #line 634 
  return;
}

#line 636  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.c"
static void btc8821a2ant_set_fw_dec_bt_pwr(struct btc_coexist *btcoexist, u8 dec_bt_pwr_lvl)
{
  #line 639 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 640 
  u8 h2c_parameter[1U] = {(unsigned char)0U};
  #line 642 
  h2c_parameter[0] = dec_bt_pwr_lvl;
  #line 644 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], decrease Bt Power Level : %u, FW write 0x62 = 0x%x\n",(int)dec_bt_pwr_lvl,(int)h2c_parameter[0]);
  #line 648 
  (*(btcoexist->btc_fill_h2c))((void *)btcoexist,(unsigned char)98,1U,(u8 *)(& h2c_parameter));
  #line 649 
  return;
}

#line 651  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.c"
static void btc8821a2ant_dec_bt_pwr(struct btc_coexist *btcoexist, bool force_exec, u8 dec_bt_pwr_lvl)
{
  #line 656 
  char *tmp;
  #line 654 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 656 
  ;
  #line 656 
  if ((int)force_exec != 0) 
                            #line 656 
                            tmp = (char *)"force to"; else 
                                                           #line 656 
                                                           tmp = (char *)"";
  #line 656 
  ;
  #line 656 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], %s Dec BT power level = %u\n",tmp,(int)dec_bt_pwr_lvl);
  #line 659 
  coex_dm_1->cur_dec_bt_pwr_lvl = (_Bool)((unsigned int)dec_bt_pwr_lvl != 0U);
  #line 661 
  if (! force_exec) {
    #line 662 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], pre_dec_bt_pwr_lvl = %d, cur_dec_bt_pwr_lvl = %d\n",(int)coex_dm_1->pre_dec_bt_pwr_lvl,(int)coex_dm_1->cur_dec_bt_pwr_lvl);
    #line 667 
    if ((int)coex_dm_1->pre_dec_bt_pwr_lvl == (int)coex_dm_1->cur_dec_bt_pwr_lvl) 
      #line 668 
      return;
  }
  #line 670 
  btc8821a2ant_set_fw_dec_bt_pwr(btcoexist,(unsigned char)((int)coex_dm_1->cur_dec_bt_pwr_lvl));
  #line 672 
  coex_dm_1->pre_dec_bt_pwr_lvl = coex_dm_1->cur_dec_bt_pwr_lvl;
  #line 673 
  return;
}

#line 675  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.c"
static void btc8821a2ant_fw_dac_swing_lvl(struct btc_coexist *btcoexist, bool force_exec, u8 fw_dac_swing_lvl)
{
  #line 680 
  char *tmp;
  #line 678 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 680 
  ;
  #line 680 
  if ((int)force_exec != 0) 
                            #line 680 
                            tmp = (char *)"force to"; else 
                                                           #line 680 
                                                           tmp = (char *)"";
  #line 680 
  ;
  #line 680 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], %s set FW Dac Swing level = %d\n",tmp,(int)fw_dac_swing_lvl);
  #line 683 
  coex_dm_1->cur_fw_dac_swing_lvl = fw_dac_swing_lvl;
  #line 685 
  if (! force_exec) {
    #line 686 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], pre_fw_dac_swing_lvl = %d, cur_fw_dac_swing_lvl = %d\n",(int)coex_dm_1->pre_fw_dac_swing_lvl,(int)coex_dm_1->cur_fw_dac_swing_lvl);
    #line 691 
    if ((int)coex_dm_1->pre_fw_dac_swing_lvl == (int)coex_dm_1->cur_fw_dac_swing_lvl) 
      #line 693 
      return;
  }
  #line 696 
  btc8821a2ant_set_fw_dac_swing_lvl(btcoexist,(unsigned char)((int)coex_dm_1->cur_fw_dac_swing_lvl));
  #line 699 
  coex_dm_1->pre_fw_dac_swing_lvl = coex_dm_1->cur_fw_dac_swing_lvl;
  #line 700 
  return;
}

#line 702  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.c"
static void btc8821a2ant_set_sw_penalty_tx_rate_adaptive(struct btc_coexist *btcoexist, bool low_penalty_ra)
{
  #line 722 
  char *tmp;
  #line 705 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 706 
  u8 h2c_parameter[6U] = {(unsigned char)0U};
  #line 708 
  h2c_parameter[0] = (unsigned char)6U;
  #line 710 
  if ((int)low_penalty_ra != 0) {
    #line 711 
    h2c_parameter[1] = (unsigned char)((unsigned int)h2c_parameter[1] | 1U);
    #line 713 
    h2c_parameter[2] = (unsigned char)0U;
    #line 715 
    h2c_parameter[3] = (unsigned char)245U;
    #line 717 
    h2c_parameter[4] = (unsigned char)160U;
    #line 719 
    h2c_parameter[5] = (unsigned char)160U;
  }
  #line 722 
  if ((int)low_penalty_ra != 0) 
                                #line 722 
                                tmp = (char *)"ON!!"; else 
                                                           #line 722 
                                                           tmp = (char *)"OFF!!";
  #line 722 
  ;
  #line 722 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], set WiFi Low-Penalty Retry: %s",tmp);
  #line 726 
  (*(btcoexist->btc_fill_h2c))((void *)btcoexist,(unsigned char)105,6U,(u8 *)(& h2c_parameter));
  #line 727 
  return;
}

#line 729  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.c"
static void btc8821a2ant_low_penalty_ra(struct btc_coexist *btcoexist, bool force_exec, bool low_penalty_ra)
{
  #line 734 
  char *tmp;
  #line 734 
  char *tmp_0;
  #line 732 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 734 
  if ((int)low_penalty_ra != 0) 
                                #line 734 
                                tmp = (char *)"ON"; else 
                                                         #line 734 
                                                         tmp = (char *)"OFF";
  #line 734 
  if ((int)force_exec != 0) 
                            #line 734 
                            tmp_0 = (char *)"force to"; else 
                                                             #line 734 
                                                             tmp_0 = (char *)"";
  #line 734 
  ;
  #line 734 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], %s turn LowPenaltyRA = %s\n",tmp_0,tmp);
  #line 738 
  coex_dm_1->cur_low_penalty_ra = low_penalty_ra;
  #line 740 
  if (! force_exec) {
    #line 741 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], pre_low_penalty_ra = %d, cur_low_penalty_ra = %d\n",(int)coex_dm_1->pre_low_penalty_ra,(int)coex_dm_1->cur_low_penalty_ra);
    #line 746 
    if ((int)coex_dm_1->pre_low_penalty_ra == (int)coex_dm_1->cur_low_penalty_ra) 
      #line 747 
      return;
  }
  #line 749 
  btc8821a2ant_set_sw_penalty_tx_rate_adaptive(btcoexist,(_Bool)((bool)((int)coex_dm_1->cur_low_penalty_ra) != 0));
  #line 752 
  coex_dm_1->pre_low_penalty_ra = coex_dm_1->cur_low_penalty_ra;
  #line 753 
  return;
}

#line 755  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.c"
static void btc8821a2ant_set_dac_swing_reg(struct btc_coexist *btcoexist, u32 level)
{
  #line 758 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 759 
  u8 val = (unsigned char)level;
  #line 761 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Write SwDacSwing = 0x%x\n",level);
  #line 763 
  (*(btcoexist->btc_write_1byte_bitmask))((void *)btcoexist,3163U,62U,(unsigned char)((int)val));
  #line 764 
  return;
}

#line 766  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.c"
static void btc8821a2ant_set_sw_full_dac_swing(struct btc_coexist *btcoexist, bool sw_dac_swing_on, u32 sw_dac_swing_lvl)
{
  #line 770 
  if ((int)sw_dac_swing_on != 0) 
                                 #line 771 
                                 btc8821a2ant_set_dac_swing_reg(btcoexist,sw_dac_swing_lvl); else 
                                                                    #line 773 
                                                                    btc8821a2ant_set_dac_swing_reg(btcoexist,24U);
  #line 774 
  return;
}

#line 776  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.c"
static void btc8821a2ant_dac_swing(struct btc_coexist *btcoexist, bool force_exec, bool dac_swing_on, u32 dac_swing_lvl)
{
  #line 782 
  char *tmp;
  #line 782 
  char *tmp_0;
  #line 780 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 782 
  ;
  #line 782 
  if ((int)dac_swing_on != 0) 
                              #line 782 
                              tmp = (char *)"ON"; else 
                                                       #line 782 
                                                       tmp = (char *)"OFF";
  #line 782 
  if ((int)force_exec != 0) 
                            #line 782 
                            tmp_0 = (char *)"force to"; else 
                                                             #line 782 
                                                             tmp_0 = (char *)"";
  #line 782 
  ;
  #line 782 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], %s turn DacSwing = %s, dac_swing_lvl = 0x%x\n",tmp_0,tmp,dac_swing_lvl);
  #line 787 
  coex_dm_1->cur_dac_swing_on = dac_swing_on;
  #line 788 
  coex_dm_1->cur_dac_swing_lvl = dac_swing_lvl;
  #line 790 
  if (! force_exec) {
    #line 791 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], pre_dac_swing_on = %d, pre_dac_swing_lvl = 0x%x, cur_dac_swing_on = %d, cur_dac_swing_lvl = 0x%x\n",(int)coex_dm_1->pre_dac_swing_on,coex_dm_1->pre_dac_swing_lvl,(int)coex_dm_1->cur_dac_swing_on,coex_dm_1->cur_dac_swing_lvl);
    #line 798 
    if ((int)coex_dm_1->pre_dac_swing_on == (int)coex_dm_1->cur_dac_swing_on && coex_dm_1->pre_dac_swing_lvl == coex_dm_1->cur_dac_swing_lvl) 
      #line 801 
      return;
  }
  {
    #line 803 
    unsigned long __ms = 30UL;
    #line 803 
    while (1) {
      #line 803 
      unsigned long tmp_1;
      #line 803 
      tmp_1 = __ms;
      #line 803 
      __ms --;
      #line 803 
      ;
      #line 803 
      if (! (tmp_1 != 0UL)) 
                            #line 803 
                            break;
      #line 803 
      __const_udelay(4295000UL);
    }
  }
  #line 804 
  btc8821a2ant_set_sw_full_dac_swing(btcoexist,(_Bool)((bool)((int)dac_swing_on) != 0),dac_swing_lvl);
  #line 807 
  coex_dm_1->pre_dac_swing_on = coex_dm_1->cur_dac_swing_on;
  #line 808 
  coex_dm_1->pre_dac_swing_lvl = coex_dm_1->cur_dac_swing_lvl;
  #line 809 
  return;
}

#line 811  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.c"
static void btc8821a2ant_set_coex_table(struct btc_coexist *btcoexist, u32 val0x6c0, u32 val0x6c4, u32 val0x6c8, u8 val0x6cc)
{
  #line 815 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 817 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], set coex table, set 0x6c0 = 0x%x\n",val0x6c0);
  #line 819 
  (*(btcoexist->btc_write_4byte))((void *)btcoexist,1728U,val0x6c0);
  #line 821 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], set coex table, set 0x6c4 = 0x%x\n",val0x6c4);
  #line 823 
  (*(btcoexist->btc_write_4byte))((void *)btcoexist,1732U,val0x6c4);
  #line 825 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], set coex table, set 0x6c8 = 0x%x\n",val0x6c8);
  #line 827 
  (*(btcoexist->btc_write_4byte))((void *)btcoexist,1736U,val0x6c8);
  #line 829 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], set coex table, set 0x6cc = 0x%x\n",(int)val0x6cc);
  #line 831 
  (*(btcoexist->btc_write_1byte))((void *)btcoexist,1740U,(unsigned int)val0x6cc);
  #line 832 
  return;
}

#line 834  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.c"
static void btc8821a2ant_coex_table(struct btc_coexist *btcoexist, bool force_exec, u32 val0x6c0, u32 val0x6c4, u32 val0x6c8, u8 val0x6cc)
{
  #line 840 
  char *tmp;
  #line 838 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 840 
  ;
  #line 840 
  ;
  #line 840 
  ;
  #line 840 
  ;
  #line 840 
  if ((int)force_exec != 0) 
                            #line 840 
                            tmp = (char *)"force to"; else 
                                                           #line 840 
                                                           tmp = (char *)"";
  #line 840 
  ;
  #line 840 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], %s write Coex Table 0x6c0 = 0x%x, 0x6c4 = 0x%x, 0x6c8 = 0x%x, 0x6cc = 0x%x\n",tmp,val0x6c0,val0x6c4,val0x6c8,(int)val0x6cc);
  #line 844 
  coex_dm_1->cur_val0x6c0 = val0x6c0;
  #line 845 
  coex_dm_1->cur_val0x6c4 = val0x6c4;
  #line 846 
  coex_dm_1->cur_val0x6c8 = val0x6c8;
  #line 847 
  coex_dm_1->cur_val0x6cc = val0x6cc;
  #line 849 
  if (! force_exec) {
    #line 850 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], pre_val0x6c0 = 0x%x, pre_val0x6c4 = 0x%x, pre_val0x6c8 = 0x%x, pre_val0x6cc = 0x%x !!\n",coex_dm_1->pre_val0x6c0,coex_dm_1->pre_val0x6c4,coex_dm_1->pre_val0x6c8,(int)coex_dm_1->pre_val0x6cc);
    #line 856 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], cur_val0x6c0 = 0x%x, cur_val0x6c4 = 0x%x, cur_val0x6c8 = 0x%x, cur_val0x6cc = 0x%x !!\n",coex_dm_1->cur_val0x6c0,coex_dm_1->cur_val0x6c4,coex_dm_1->cur_val0x6c8,(int)coex_dm_1->cur_val0x6cc);
    #line 863 
    if (((coex_dm_1->pre_val0x6c0 == coex_dm_1->cur_val0x6c0 && coex_dm_1->pre_val0x6c4 == coex_dm_1->cur_val0x6c4) && coex_dm_1->pre_val0x6c8 == coex_dm_1->cur_val0x6c8) && (int)coex_dm_1->pre_val0x6cc == (int)coex_dm_1->cur_val0x6cc) 
      #line 867 
      return;
  }
  #line 869 
  btc8821a2ant_set_coex_table(btcoexist,val0x6c0,val0x6c4,val0x6c8,(unsigned char)((int)val0x6cc));
  #line 872 
  coex_dm_1->pre_val0x6c0 = coex_dm_1->cur_val0x6c0;
  #line 873 
  coex_dm_1->pre_val0x6c4 = coex_dm_1->cur_val0x6c4;
  #line 874 
  coex_dm_1->pre_val0x6c8 = coex_dm_1->cur_val0x6c8;
  #line 875 
  coex_dm_1->pre_val0x6cc = coex_dm_1->cur_val0x6cc;
  #line 876 
  return;
}

#line 878  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.c"
static void btc8821a2ant_coex_table_with_type(struct btc_coexist *btcoexist, bool force_exec, u8 type)
{
  #line 881 
  coex_sta_1->coex_table_type = type;
  #line 883 
  switch ((int)type) {
    #line 884 
    case 0: 
            #line 884 
    ;
    #line 885 
    btc8821a2ant_coex_table(btcoexist,(_Bool)((bool)((int)force_exec) != 0),1431655765U,1431655765U,16777215U,(unsigned char)3);
    #line 887 
    break;
    #line 888 
    case 1: 
            #line 888 
    ;
    #line 889 
    btc8821a2ant_coex_table(btcoexist,(_Bool)((bool)((int)force_exec) != 0),1431655765U,1526356730U,16777215U,(unsigned char)3);
    #line 891 
    break;
    #line 892 
    case 2: 
            #line 892 
    ;
    #line 893 
    btc8821a2ant_coex_table(btcoexist,(_Bool)((bool)((int)force_exec) != 0),1524259546U,1524259546U,16777215U,(unsigned char)3);
    #line 895 
    break;
    #line 896 
    case 3: 
            #line 896 
    ;
    #line 897 
    btc8821a2ant_coex_table(btcoexist,(_Bool)((bool)((int)force_exec) != 0),2863311530U,2863311530U,16777215U,(unsigned char)3);
    #line 899 
    break;
    #line 900 
    case 4: 
            #line 900 
    ;
    #line 901 
    btc8821a2ant_coex_table(btcoexist,(_Bool)((bool)((int)force_exec) != 0),4294967295U,4294967295U,16777215U,(unsigned char)3);
    #line 903 
    break;
    #line 904 
    case 5: 
            #line 904 
    ;
    #line 905 
    btc8821a2ant_coex_table(btcoexist,(_Bool)((bool)((int)force_exec) != 0),1610571775U,1610571775U,16777215U,(unsigned char)3);
    #line 907 
    break;
    #line 908 
    case 6: 
            #line 908 
    ;
    #line 909 
    btc8821a2ant_coex_table(btcoexist,(_Bool)((bool)((int)force_exec) != 0),1442797055U,1515870810U,16777215U,(unsigned char)3);
    #line 911 
    break;
    #line 912 
    case 7: 
            #line 912 
    ;
    #line 913 
    btc8821a2ant_coex_table(btcoexist,(_Bool)((bool)((int)force_exec) != 0),1440568797U,1524259546U,16777215U,(unsigned char)3);
    #line 915 
    break;
    #line 916 
    case 8: 
            #line 916 
    ;
    #line 917 
    btc8821a2ant_coex_table(btcoexist,(_Bool)((bool)((int)force_exec) != 0),1440568797U,1524259546U,16777215U,(unsigned char)3);
    #line 919 
    break;
    #line 920 
    case 9: 
            #line 920 
    ;
    #line 921 
    btc8821a2ant_coex_table(btcoexist,(_Bool)((bool)((int)force_exec) != 0),1440568797U,1524259546U,16777215U,(unsigned char)3);
    #line 923 
    break;
    #line 924 
    case 10: 
             #line 924 
    ;
    #line 925 
    btc8821a2ant_coex_table(btcoexist,(_Bool)((bool)((int)force_exec) != 0),1440568797U,1524259546U,16777215U,(unsigned char)3);
    #line 927 
    break;
    #line 928 
    case 11: 
             #line 928 
    ;
    #line 929 
    btc8821a2ant_coex_table(btcoexist,(_Bool)((bool)((int)force_exec) != 0),1440568797U,1524259546U,16777215U,(unsigned char)3);
    #line 931 
    break;
    #line 932 
    case 12: 
             #line 932 
    ;
    #line 933 
    btc8821a2ant_coex_table(btcoexist,(_Bool)((bool)((int)force_exec) != 0),1440568797U,1524259546U,16777215U,(unsigned char)3);
    #line 935 
    break;
    #line 936 
    case 13: 
             #line 936 
    ;
    #line 937 
    btc8821a2ant_coex_table(btcoexist,(_Bool)((bool)((int)force_exec) != 0),1610571775U,2863311530U,16777215U,(unsigned char)3);
    #line 939 
    break;
    #line 940 
    case 14: 
             #line 940 
    ;
    #line 941 
    btc8821a2ant_coex_table(btcoexist,(_Bool)((bool)((int)force_exec) != 0),1610571775U,1524259546U,16777215U,(unsigned char)3);
    #line 943 
    break;
    #line 944 
    case 15: 
             #line 944 
    ;
    #line 945 
    btc8821a2ant_coex_table(btcoexist,(_Bool)((bool)((int)force_exec) != 0),1440568797U,2863311530U,16777215U,(unsigned char)3);
    #line 947 
    break;
    #line 948 
    case 16: 
             #line 948 
    ;
    #line 949 
    btc8821a2ant_coex_table(btcoexist,(_Bool)((bool)((int)force_exec) != 0),1608474591U,1608212443U,16777215U,(unsigned char)3);
    #line 951 
    break;
    #line 952 
    case 17: 
             #line 952 
    ;
    #line 953 
    btc8821a2ant_coex_table(btcoexist,(_Bool)((bool)((int)force_exec) != 0),4210752250U,4210752250U,16777215U,(unsigned char)3);
    #line 955 
    break;
    #line 956 
    default: 
             #line 956 
    ;
    #line 957 
    break;
  }
  #line 959 
  return;
}

#line 961  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.c"
static void btc8821a2ant_set_fw_ignore_wlan_act(struct btc_coexist *btcoex, bool enable)
{
  #line 964 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoex->adapter;
  #line 965 
  u8 h2c_parameter[1U] = {(unsigned char)0U};
  #line 967 
  if ((int)enable != 0) 
                        #line 968 
                        h2c_parameter[0] = (unsigned char)((unsigned int)h2c_parameter[0] | 1U);
  #line 970 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], set FW for BT Ignore Wlan_Act, FW write 0x63 = 0x%x\n",(int)h2c_parameter[0]);
  #line 974 
  (*(btcoex->btc_fill_h2c))((void *)btcoex,(unsigned char)99,1U,(u8 *)(& h2c_parameter));
  #line 975 
  return;
}

#line 977  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.c"
static void btc8821a2ant_set_lps_rpwm(struct btc_coexist *btcoexist, u8 lps_val, u8 rpwm_val)
{
  #line 980 
  u8 lps = lps_val;
  #line 981 
  u8 rpwm = rpwm_val;
  #line 983 
  (*(btcoexist->btc_set))((void *)btcoexist,(unsigned char)18,(void *)(& lps));
  #line 984 
  (*(btcoexist->btc_set))((void *)btcoexist,(unsigned char)19,(void *)(& rpwm));
  #line 985 
  return;
}

#line 987  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.c"
static void btc8821a2ant_lps_rpwm(struct btc_coexist *btcoexist, bool force_exec, u8 lps_val, u8 rpwm_val)
{
  #line 990 
  coex_dm_1->cur_lps = lps_val;
  #line 991 
  coex_dm_1->cur_rpwm = rpwm_val;
  #line 993 
  if (! force_exec) 
    #line 994 
    if ((int)coex_dm_1->pre_lps == (int)coex_dm_1->cur_lps && (int)coex_dm_1->pre_rpwm == (int)coex_dm_1->cur_rpwm) 
      #line 996 
      return;
  #line 998 
  btc8821a2ant_set_lps_rpwm(btcoexist,(unsigned char)((int)lps_val),(unsigned char)((int)rpwm_val));
  #line 1000 
  coex_dm_1->pre_lps = coex_dm_1->cur_lps;
  #line 1001 
  coex_dm_1->pre_rpwm = coex_dm_1->cur_rpwm;
  #line 1002 
  return;
}

#line 1004  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.c"
static void btc8821a2ant_ignore_wlan_act(struct btc_coexist *btcoexist, bool force_exec, bool enable)
{
  #line 1009 
  char *tmp;
  #line 1009 
  char *tmp_0;
  #line 1007 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 1009 
  if ((int)enable != 0) 
                        #line 1009 
                        tmp = (char *)"ON"; else 
                                                 #line 1009 
                                                 tmp = (char *)"OFF";
  #line 1009 
  if ((int)force_exec != 0) 
                            #line 1009 
                            tmp_0 = (char *)"force to"; else 
                                                             #line 1009 
                                                             tmp_0 = (char *)"";
  #line 1009 
  ;
  #line 1009 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], %s turn Ignore WlanAct %s\n",tmp_0,tmp);
  #line 1012 
  coex_dm_1->cur_ignore_wlan_act = enable;
  #line 1014 
  if (! force_exec) {
    #line 1015 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], pre_ignore_wlan_act = %d, cur_ignore_wlan_act = %d!!\n",(int)coex_dm_1->pre_ignore_wlan_act,(int)coex_dm_1->cur_ignore_wlan_act);
    #line 1020 
    if ((int)coex_dm_1->pre_ignore_wlan_act == (int)coex_dm_1->cur_ignore_wlan_act) 
      #line 1022 
      return;
  }
  #line 1024 
  btc8821a2ant_set_fw_ignore_wlan_act(btcoexist,(_Bool)((bool)((int)enable) != 0));
  #line 1026 
  coex_dm_1->pre_ignore_wlan_act = coex_dm_1->cur_ignore_wlan_act;
  #line 1027 
  return;
}

#line 1029  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.c"
static void btc8821a2ant_set_fw_ps_tdma(struct btc_coexist *btcoexist, u8 byte1, u8 byte2, u8 byte3, u8 byte4, u8 byte5)
{
  #line 1034 
  u8 h2c_parameter[5U];
  #line 1033 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 1036 
  h2c_parameter[0] = byte1;
  #line 1037 
  h2c_parameter[1] = byte2;
  #line 1038 
  h2c_parameter[2] = byte3;
  #line 1039 
  h2c_parameter[3] = byte4;
  #line 1040 
  h2c_parameter[4] = byte5;
  #line 1042 
  coex_dm_1->ps_tdma_para[0] = byte1;
  #line 1043 
  coex_dm_1->ps_tdma_para[1] = byte2;
  #line 1044 
  coex_dm_1->ps_tdma_para[2] = byte3;
  #line 1045 
  coex_dm_1->ps_tdma_para[3] = byte4;
  #line 1046 
  coex_dm_1->ps_tdma_para[4] = byte5;
  #line 1048 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], FW write 0x60(5bytes) = 0x%x%08x\n",(int)h2c_parameter[0],((((int)h2c_parameter[1] << 24) | ((int)h2c_parameter[2] << 16)) | ((int)h2c_parameter[3] << 8)) | (int)h2c_parameter[4]);
  #line 1056 
  (*(btcoexist->btc_fill_h2c))((void *)btcoexist,(unsigned char)96,5U,(u8 *)(& h2c_parameter));
  #line 1057 
  return;
}

#line 1059  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.c"
static void btc8821a2ant_sw_mechanism1(struct btc_coexist *btcoexist, bool shrink_rx_lpf, bool low_penalty_ra, bool limited_dig, bool bt_lna_constrain)
{
  #line 1063 
  btc8821a2ant_low_penalty_ra(btcoexist,(_Bool)0,(_Bool)((bool)((int)low_penalty_ra) != 0));
  #line 1064 
  return;
}

#line 1066  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.c"
static void btc8821a2ant_sw_mechanism2(struct btc_coexist *btcoexist, bool agc_table_shift, bool adc_back_off, bool sw_dac_swing, u32 dac_swing_lvl)
{
  #line 1070 
  btc8821a2ant_dac_swing(btcoexist,(_Bool)0,(_Bool)((bool)((int)sw_dac_swing) != 0),dac_swing_lvl);
  #line 1071 
  return;
}

#line 1074  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.c"
static void btc8821a2ant_set_ant_path(struct btc_coexist *btcoexist, u8 ant_pos_type, bool init_hw_cfg, bool wifi_off)
{
  #line 1078 
  struct btc_board_info *board_info = & btcoexist->board_info;
  #line 1079 
  u32 u4tmp = 0U;
  #line 1080 
  u8 h2c_parameter[2U] = {(unsigned char)0U};
  #line 1082 
  if ((int)init_hw_cfg != 0) {
    #line 1084 
    u4tmp = (*(btcoexist->btc_read_4byte))((void *)btcoexist,76U);
    #line 1085 
    u4tmp &= 4286578687U;
    #line 1086 
    u4tmp |= 16777216U;
    #line 1087 
    (*(btcoexist->btc_write_4byte))((void *)btcoexist,76U,u4tmp);
    #line 1089 
    (*(btcoexist->btc_write_4byte))((void *)btcoexist,2420U,1023U);
    #line 1091 
    if ((unsigned int)board_info->btdm_ant_pos == 1U) {
      #line 1095 
      h2c_parameter[0] = (unsigned char)1U;
      #line 1096 
      h2c_parameter[1] = (unsigned char)1U;
      #line 1097 
      (*(btcoexist->btc_fill_h2c))((void *)btcoexist,(unsigned char)101,2U,(u8 *)(& h2c_parameter));
    }
    else {
      #line 1103 
      h2c_parameter[0] = (unsigned char)0U;
      #line 1104 
      h2c_parameter[1] = (unsigned char)1U;
      #line 1105 
      (*(btcoexist->btc_fill_h2c))((void *)btcoexist,(unsigned char)101,2U,(u8 *)(& h2c_parameter));
    }
  }
  #line 1111 
  switch ((int)ant_pos_type) {
    #line 1112 
    case 0: 
            #line 1112 
    ;
    #line 1113 
    (*(btcoexist->btc_write_1byte_bitmask))((void *)btcoexist,3255U,48U,(unsigned char)1);
    #line 1114 
    break;
    #line 1115 
    case 1: 
            #line 1115 
    ;
    #line 1116 
    (*(btcoexist->btc_write_1byte_bitmask))((void *)btcoexist,3255U,48U,(unsigned char)2);
    #line 1117 
    break;
  }
  #line 1119 
  return;
}

#line 1121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.c"
static void btc8821a2ant_ps_tdma(struct btc_coexist *btcoexist, bool force_exec, bool turn_on, u8 type)
{
  #line 1126 
  u8 wifi_rssi_state;
  #line 1126 
  u8 bt_rssi_state;
  #line 1140 
  char *tmp;
  #line 1140 
  char *tmp_0;
  #line 1124 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 1128 
  wifi_rssi_state = btc8821a2ant_wifi_rssi_state(btcoexist,(unsigned char)1,(unsigned char)2,(unsigned char)42,(unsigned char)0);
  #line 1130 
  bt_rssi_state = btc8821a2ant_bt_rssi_state(btcoexist,(unsigned char)2,(unsigned char)46,(unsigned char)0);
  #line 1133 
  if (((unsigned int)wifi_rssi_state != 0U && (unsigned int)wifi_rssi_state != 3U || (unsigned int)bt_rssi_state != 0U && (unsigned int)bt_rssi_state != 3U) && (int)turn_on != 0) 
    #line 1137 
    type = (unsigned char)((unsigned int)type + 100U);
  #line 1140 
  ;
  #line 1140 
  if ((int)turn_on != 0) 
                         #line 1140 
                         tmp = (char *)"ON"; else 
                                                  #line 1140 
                                                  tmp = (char *)"OFF";
  #line 1140 
  if ((int)force_exec != 0) 
                            #line 1140 
                            tmp_0 = (char *)"force to"; else 
                                                             #line 1140 
                                                             tmp_0 = (char *)"";
  #line 1140 
  ;
  #line 1140 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], %s turn %s PS TDMA, type = %d\n",tmp_0,tmp,(int)type);
  #line 1144 
  coex_dm_1->cur_ps_tdma_on = turn_on;
  #line 1145 
  coex_dm_1->cur_ps_tdma = type;
  #line 1147 
  if (! force_exec) {
    #line 1148 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], pre_ps_tdma_on = %d, cur_ps_tdma_on = %d!!\n",(int)coex_dm_1->pre_ps_tdma_on,(int)coex_dm_1->cur_ps_tdma_on);
    #line 1151 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], pre_ps_tdma = %d, cur_ps_tdma = %d!!\n",(int)coex_dm_1->pre_ps_tdma,(int)coex_dm_1->cur_ps_tdma);
    #line 1155 
    if ((int)coex_dm_1->pre_ps_tdma_on == (int)coex_dm_1->cur_ps_tdma_on && (int)coex_dm_1->pre_ps_tdma == (int)coex_dm_1->cur_ps_tdma) 
      #line 1157 
      return;
  }
  #line 1159 
  if ((int)turn_on != 0) 
    #line 1160 
    switch ((int)type) {
      #line 1161 
      case 1: 
              #line 1161 
      ;
      #line 1162 
      default: 
               #line 1162 
      ;
      #line 1163 
      btc8821a2ant_set_fw_ps_tdma(btcoexist,(unsigned char)227,(unsigned char)60,(unsigned char)3,(unsigned char)241,(unsigned char)144);
      #line 1165 
      break;
      #line 1166 
      case 2: 
              #line 1166 
      ;
      #line 1167 
      btc8821a2ant_set_fw_ps_tdma(btcoexist,(unsigned char)227,(unsigned char)45,(unsigned char)3,(unsigned char)241,(unsigned char)144);
      #line 1169 
      break;
      #line 1170 
      case 3: 
              #line 1170 
      ;
      #line 1171 
      btc8821a2ant_set_fw_ps_tdma(btcoexist,(unsigned char)227,(unsigned char)28,(unsigned char)3,(unsigned char)241,(unsigned char)144);
      #line 1173 
      break;
      #line 1174 
      case 4: 
              #line 1174 
      ;
      #line 1175 
      btc8821a2ant_set_fw_ps_tdma(btcoexist,(unsigned char)227,(unsigned char)16,(unsigned char)3,(unsigned char)241,(unsigned char)144);
      #line 1177 
      break;
      #line 1178 
      case 5: 
              #line 1178 
      ;
      #line 1179 
      btc8821a2ant_set_fw_ps_tdma(btcoexist,(unsigned char)227,(unsigned char)60,(unsigned char)3,(unsigned char)112,(unsigned char)144);
      #line 1181 
      break;
      #line 1182 
      case 6: 
              #line 1182 
      ;
      #line 1183 
      btc8821a2ant_set_fw_ps_tdma(btcoexist,(unsigned char)227,(unsigned char)45,(unsigned char)3,(unsigned char)112,(unsigned char)144);
      #line 1185 
      break;
      #line 1186 
      case 7: 
              #line 1186 
      ;
      #line 1187 
      btc8821a2ant_set_fw_ps_tdma(btcoexist,(unsigned char)227,(unsigned char)28,(unsigned char)3,(unsigned char)112,(unsigned char)144);
      #line 1189 
      break;
      #line 1190 
      case 8: 
              #line 1190 
      ;
      #line 1191 
      btc8821a2ant_set_fw_ps_tdma(btcoexist,(unsigned char)163,(unsigned char)16,(unsigned char)3,(unsigned char)112,(unsigned char)144);
      #line 1193 
      break;
      #line 1194 
      case 9: 
              #line 1194 
      ;
      #line 1195 
      btc8821a2ant_set_fw_ps_tdma(btcoexist,(unsigned char)227,(unsigned char)60,(unsigned char)3,(unsigned char)241,(unsigned char)144);
      #line 1197 
      break;
      #line 1198 
      case 10: 
               #line 1198 
      ;
      #line 1199 
      btc8821a2ant_set_fw_ps_tdma(btcoexist,(unsigned char)227,(unsigned char)45,(unsigned char)3,(unsigned char)241,(unsigned char)144);
      #line 1201 
      break;
      #line 1202 
      case 11: 
               #line 1202 
      ;
      #line 1203 
      btc8821a2ant_set_fw_ps_tdma(btcoexist,(unsigned char)227,(unsigned char)28,(unsigned char)3,(unsigned char)241,(unsigned char)144);
      #line 1205 
      break;
      #line 1206 
      case 12: 
               #line 1206 
      ;
      #line 1207 
      btc8821a2ant_set_fw_ps_tdma(btcoexist,(unsigned char)227,(unsigned char)16,(unsigned char)3,(unsigned char)241,(unsigned char)144);
      #line 1209 
      break;
      #line 1210 
      case 13: 
               #line 1210 
      ;
      #line 1211 
      btc8821a2ant_set_fw_ps_tdma(btcoexist,(unsigned char)227,(unsigned char)60,(unsigned char)3,(unsigned char)112,(unsigned char)144);
      #line 1213 
      break;
      #line 1214 
      case 14: 
               #line 1214 
      ;
      #line 1215 
      btc8821a2ant_set_fw_ps_tdma(btcoexist,(unsigned char)227,(unsigned char)45,(unsigned char)3,(unsigned char)112,(unsigned char)144);
      #line 1217 
      break;
      #line 1218 
      case 15: 
               #line 1218 
      ;
      #line 1219 
      btc8821a2ant_set_fw_ps_tdma(btcoexist,(unsigned char)227,(unsigned char)28,(unsigned char)3,(unsigned char)112,(unsigned char)144);
      #line 1221 
      break;
      #line 1222 
      case 16: 
               #line 1222 
      ;
      #line 1223 
      btc8821a2ant_set_fw_ps_tdma(btcoexist,(unsigned char)227,(unsigned char)16,(unsigned char)3,(unsigned char)112,(unsigned char)144);
      #line 1225 
      break;
      #line 1226 
      case 17: 
               #line 1226 
      ;
      #line 1227 
      btc8821a2ant_set_fw_ps_tdma(btcoexist,(unsigned char)163,(unsigned char)47,(unsigned char)47,(unsigned char)96,(unsigned char)144);
      #line 1229 
      break;
      #line 1230 
      case 18: 
               #line 1230 
      ;
      #line 1231 
      btc8821a2ant_set_fw_ps_tdma(btcoexist,(unsigned char)227,(unsigned char)5,(unsigned char)5,(unsigned char)225,(unsigned char)144);
      #line 1233 
      break;
      #line 1234 
      case 19: 
               #line 1234 
      ;
      #line 1235 
      btc8821a2ant_set_fw_ps_tdma(btcoexist,(unsigned char)227,(unsigned char)37,(unsigned char)37,(unsigned char)225,(unsigned char)144);
      #line 1237 
      break;
      #line 1238 
      case 20: 
               #line 1238 
      ;
      #line 1239 
      btc8821a2ant_set_fw_ps_tdma(btcoexist,(unsigned char)227,(unsigned char)37,(unsigned char)37,(unsigned char)96,(unsigned char)144);
      #line 1241 
      break;
      #line 1242 
      case 21: 
               #line 1242 
      ;
      #line 1243 
      btc8821a2ant_set_fw_ps_tdma(btcoexist,(unsigned char)227,(unsigned char)21,(unsigned char)3,(unsigned char)112,(unsigned char)144);
      #line 1245 
      break;
      #line 1246 
      case 23: 
               #line 1246 
      ;
      #line 1247 
      btc8821a2ant_set_fw_ps_tdma(btcoexist,(unsigned char)227,(unsigned char)30,(unsigned char)3,(unsigned char)240,(unsigned char)20);
      #line 1249 
      break;
      #line 1250 
      case 24: 
               #line 1250 
      ;
      #line 1251 
      case 124: 
                #line 1251 
      ;
      #line 1252 
      btc8821a2ant_set_fw_ps_tdma(btcoexist,(unsigned char)211,(unsigned char)60,(unsigned char)3,(unsigned char)112,(unsigned char)80);
      #line 1254 
      break;
      #line 1255 
      case 25: 
               #line 1255 
      ;
      #line 1256 
      btc8821a2ant_set_fw_ps_tdma(btcoexist,(unsigned char)227,(unsigned char)20,(unsigned char)3,(unsigned char)241,(unsigned char)144);
      #line 1258 
      break;
      #line 1259 
      case 26: 
               #line 1259 
      ;
      #line 1260 
      btc8821a2ant_set_fw_ps_tdma(btcoexist,(unsigned char)227,(unsigned char)48,(unsigned char)3,(unsigned char)241,(unsigned char)144);
      #line 1262 
      break;
      #line 1263 
      case 71: 
               #line 1263 
      ;
      #line 1264 
      btc8821a2ant_set_fw_ps_tdma(btcoexist,(unsigned char)227,(unsigned char)60,(unsigned char)3,(unsigned char)241,(unsigned char)144);
      #line 1266 
      break;
      #line 1267 
      case 101: 
                #line 1267 
      ;
      #line 1268 
      case 105: 
                #line 1268 
      ;
      #line 1269 
      case 171: 
                #line 1269 
      ;
      #line 1270 
      btc8821a2ant_set_fw_ps_tdma(btcoexist,(unsigned char)211,(unsigned char)58,(unsigned char)3,(unsigned char)112,(unsigned char)80);
      #line 1272 
      break;
      #line 1273 
      case 102: 
                #line 1273 
      ;
      #line 1274 
      case 106: 
                #line 1274 
      ;
      #line 1275 
      case 110: 
                #line 1275 
      ;
      #line 1276 
      case 114: 
                #line 1276 
      ;
      #line 1277 
      btc8821a2ant_set_fw_ps_tdma(btcoexist,(unsigned char)211,(unsigned char)45,(unsigned char)3,(unsigned char)112,(unsigned char)80);
      #line 1279 
      break;
      #line 1280 
      case 103: 
                #line 1280 
      ;
      #line 1281 
      case 107: 
                #line 1281 
      ;
      #line 1282 
      case 111: 
                #line 1282 
      ;
      #line 1283 
      case 115: 
                #line 1283 
      ;
      #line 1284 
      btc8821a2ant_set_fw_ps_tdma(btcoexist,(unsigned char)211,(unsigned char)28,(unsigned char)3,(unsigned char)112,(unsigned char)80);
      #line 1286 
      break;
      #line 1287 
      case 104: 
                #line 1287 
      ;
      #line 1288 
      case 108: 
                #line 1288 
      ;
      #line 1289 
      case 112: 
                #line 1289 
      ;
      #line 1290 
      case 116: 
                #line 1290 
      ;
      #line 1291 
      btc8821a2ant_set_fw_ps_tdma(btcoexist,(unsigned char)211,(unsigned char)16,(unsigned char)3,(unsigned char)112,(unsigned char)80);
      #line 1293 
      break;
      #line 1294 
      case 109: 
                #line 1294 
      ;
      #line 1295 
      btc8821a2ant_set_fw_ps_tdma(btcoexist,(unsigned char)227,(unsigned char)60,(unsigned char)3,(unsigned char)241,(unsigned char)144);
      #line 1297 
      break;
      #line 1298 
      case 113: 
                #line 1298 
      ;
      #line 1299 
      btc8821a2ant_set_fw_ps_tdma(btcoexist,(unsigned char)227,(unsigned char)60,(unsigned char)3,(unsigned char)112,(unsigned char)144);
      #line 1301 
      break;
      #line 1302 
      case 121: 
                #line 1302 
      ;
      #line 1303 
      btc8821a2ant_set_fw_ps_tdma(btcoexist,(unsigned char)227,(unsigned char)21,(unsigned char)3,(unsigned char)112,(unsigned char)144);
      #line 1305 
      break;
      #line 1306 
      case 22: 
               #line 1306 
      ;
      #line 1307 
      case 122: 
                #line 1307 
      ;
      #line 1308 
      btc8821a2ant_set_fw_ps_tdma(btcoexist,(unsigned char)227,(unsigned char)53,(unsigned char)3,(unsigned char)113,(unsigned char)17);
      #line 1310 
      break;
      #line 1311 
      case 123: 
                #line 1311 
      ;
      #line 1312 
      btc8821a2ant_set_fw_ps_tdma(btcoexist,(unsigned char)211,(unsigned char)28,(unsigned char)3,(unsigned char)112,(unsigned char)84);
      #line 1314 
      break;
      #line 1315 
      case 125: 
                #line 1315 
      ;
      #line 1316 
      btc8821a2ant_set_fw_ps_tdma(btcoexist,(unsigned char)211,(unsigned char)20,(unsigned char)3,(unsigned char)112,(unsigned char)80);
      #line 1318 
      break;
      #line 1319 
      case 126: 
                #line 1319 
      ;
      #line 1320 
      btc8821a2ant_set_fw_ps_tdma(btcoexist,(unsigned char)211,(unsigned char)48,(unsigned char)3,(unsigned char)112,(unsigned char)80);
      #line 1322 
      break;
    }
  else 
    #line 1326 
    switch ((int)type) {
      #line 1327 
      case 0: 
              #line 1327 
      ;
      #line 1328 
      btc8821a2ant_set_fw_ps_tdma(btcoexist,(unsigned char)0,(unsigned char)0,(unsigned char)0,(unsigned char)64,(unsigned char)0);
      #line 1330 
      break;
      #line 1331 
      case 1: 
              #line 1331 
      ;
      #line 1332 
      btc8821a2ant_set_fw_ps_tdma(btcoexist,(unsigned char)0,(unsigned char)0,(unsigned char)0,(unsigned char)72,(unsigned char)0);
      #line 1334 
      break;
      #line 1335 
      default: 
               #line 1335 
      ;
      #line 1336 
      btc8821a2ant_set_fw_ps_tdma(btcoexist,(unsigned char)0,(unsigned char)0,(unsigned char)0,(unsigned char)64,(unsigned char)0);
      #line 1338 
      break;
    }
  #line 1343 
  coex_dm_1->pre_ps_tdma_on = coex_dm_1->cur_ps_tdma_on;
  #line 1344 
  coex_dm_1->pre_ps_tdma = coex_dm_1->cur_ps_tdma;
  #line 1345 
  return;
}

#line 1348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.c"
static void btc8821a2ant_ps_tdma_check_for_power_save_state(struct btc_coexist *btcoexist, bool new_ps_state)
{
  #line 1351 
  u8 lps_mode = (unsigned char)0U;
  #line 1353 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)44,(void *)(& lps_mode));
  #line 1355 
  if ((unsigned int)lps_mode != 0U) {
    #line 1357 
    if (! ((int)new_ps_state != 0)) 
                                    #line 1361 
                                    btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)0,(unsigned char)1);
  }
  else 
    #line 1365 
    if ((int)new_ps_state != 0) 
                                #line 1367 
                                btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)0,(unsigned char)1);
  #line 1372 
  return;
}

#line 1374  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.c"
static void btc8821a2ant_power_save_state(struct btc_coexist *btcoexist, u8 ps_type, u8 lps_val, u8 rpwm_val)
{
  #line 1377 
  bool low_pwr_disable = (_Bool)0;
  #line 1379 
  switch ((int)ps_type) {
    #line 1380 
    case 0: 
            #line 1380 
    ;
    #line 1382 
    low_pwr_disable = (_Bool)0;
    #line 1383 
    (*(btcoexist->btc_set))((void *)btcoexist,(unsigned char)28,(void *)(& low_pwr_disable));
    #line 1385 
    (*(btcoexist->btc_set))((void *)btcoexist,(unsigned char)24,(void *)0);
    #line 1386 
    coex_sta_1->force_lps_on = (_Bool)0;
    #line 1387 
    break;
    #line 1388 
    case 1: 
            #line 1388 
    ;
    #line 1389 
    btc8821a2ant_ps_tdma_check_for_power_save_state(btcoexist,(_Bool)1);
    #line 1391 
    btc8821a2ant_lps_rpwm(btcoexist,(_Bool)0,(unsigned char)((int)lps_val),(unsigned char)((int)rpwm_val));
    #line 1394 
    low_pwr_disable = (_Bool)1;
    #line 1395 
    (*(btcoexist->btc_set))((void *)btcoexist,(unsigned char)28,(void *)(& low_pwr_disable));
    #line 1398 
    (*(btcoexist->btc_set))((void *)btcoexist,(unsigned char)23,(void *)0);
    #line 1399 
    coex_sta_1->force_lps_on = (_Bool)1;
    #line 1400 
    break;
    #line 1401 
    case 2: 
            #line 1401 
    ;
    #line 1402 
    btc8821a2ant_ps_tdma_check_for_power_save_state(btcoexist,(_Bool)0);
    #line 1404 
    (*(btcoexist->btc_set))((void *)btcoexist,(unsigned char)22,(void *)0);
    #line 1405 
    coex_sta_1->force_lps_on = (_Bool)0;
    #line 1406 
    break;
    #line 1407 
    default: 
             #line 1407 
    ;
    #line 1408 
    break;
  }
  #line 1410 
  return;
}

#line 1412  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.c"
static void btc8821a2ant_coex_all_off(struct btc_coexist *btcoexist)
{
  #line 1415 
  btc8821a2ant_power_save_state(btcoexist,(unsigned char)0,(unsigned char)0,(unsigned char)0);
  #line 1416 
  btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)0,(unsigned char)1);
  #line 1417 
  btc8821a2ant_fw_dac_swing_lvl(btcoexist,(_Bool)0,(unsigned char)6);
  #line 1418 
  btc8821a2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)0);
  #line 1421 
  btc8821a2ant_sw_mechanism1(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,(_Bool)0);
  #line 1422 
  btc8821a2ant_sw_mechanism2(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,24U);
  #line 1425 
  btc8821a2ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)0);
  #line 1426 
  return;
}

#line 1428  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.c"
static void btc8821a2ant_coex_under_5g(struct btc_coexist *btcoexist)
{
  #line 1430 
  btc8821a2ant_coex_all_off(btcoexist);
  #line 1431 
  btc8821a2ant_ignore_wlan_act(btcoexist,(_Bool)0,(_Bool)1);
  #line 1432 
  return;
}

#line 1434  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.c"
static void btc8821a2ant_init_coex_dm(struct btc_coexist *btcoexist)
{
  #line 1437 
  btc8821a2ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)0);
  #line 1439 
  btc8821a2ant_power_save_state(btcoexist,(unsigned char)0,(unsigned char)0,(unsigned char)0);
  #line 1440 
  btc8821a2ant_ps_tdma(btcoexist,(_Bool)1,(_Bool)0,(unsigned char)1);
  #line 1441 
  btc8821a2ant_fw_dac_swing_lvl(btcoexist,(_Bool)1,(unsigned char)6);
  #line 1442 
  btc8821a2ant_dec_bt_pwr(btcoexist,(_Bool)1,(unsigned char)0);
  #line 1444 
  btc8821a2ant_sw_mechanism1(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,(_Bool)0);
  #line 1445 
  btc8821a2ant_sw_mechanism2(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,24U);
  #line 1446 
  return;
}

#line 1448  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.c"
static void btc8821a2ant_action_bt_inquiry(struct btc_coexist *btcoexist)
{
  #line 1451 
  u8 wifi_rssi_state;
  #line 1451 
  u8 wifi_rssi_state1;
  #line 1451 
  u8 bt_rssi_state;
  #line 1450 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 1452 
  bool wifi_connected = (_Bool)0;
  #line 1453 
  bool low_pwr_disable = (_Bool)1;
  #line 1454 
  bool scan = (_Bool)0;
  #line 1454 
  bool link = (_Bool)0;
  #line 1454 
  bool roam = (_Bool)0;
  #line 1456 
  wifi_rssi_state = btc8821a2ant_wifi_rssi_state(btcoexist,(unsigned char)0,(unsigned char)2,(unsigned char)15,(unsigned char)0);
  #line 1458 
  wifi_rssi_state1 = btc8821a2ant_wifi_rssi_state(btcoexist,(unsigned char)1,(unsigned char)2,(unsigned char)42,(unsigned char)0);
  #line 1460 
  bt_rssi_state = btc8821a2ant_bt_rssi_state(btcoexist,(unsigned char)2,(unsigned char)46,(unsigned char)0);
  #line 1463 
  (*(btcoexist->btc_set))((void *)btcoexist,(unsigned char)28,(void *)(& low_pwr_disable));
  #line 1465 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)2,(void *)(& wifi_connected));
  #line 1468 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)5,(void *)(& scan));
  #line 1469 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)6,(void *)(& link));
  #line 1470 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)11,(void *)(& roam));
  #line 1472 
  btc8821a2ant_power_save_state(btcoexist,(unsigned char)0,(unsigned char)0,(unsigned char)0);
  #line 1474 
  if (((int)scan != 0 || (int)link != 0) || (int)roam != 0) {
    #line 1475 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Wifi link process + BT Inq/Page!!\n");
    #line 1477 
    btc8821a2ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)15);
    #line 1478 
    btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)22);
  }
  else 
    #line 1479 
    if ((int)wifi_connected != 0) {
      #line 1480 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Wifi connected + BT Inq/Page!!\n");
      #line 1482 
      btc8821a2ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)15);
      #line 1483 
      btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)22);
    }
    else {
      #line 1485 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Wifi no-link + BT Inq/Page!!\n");
      #line 1487 
      btc8821a2ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)0);
      #line 1488 
      btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)0,(unsigned char)1);
    }
  #line 1491 
  btc8821a2ant_fw_dac_swing_lvl(btcoexist,(_Bool)1,(unsigned char)6);
  #line 1492 
  btc8821a2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)0);
  #line 1494 
  btc8821a2ant_sw_mechanism1(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,(_Bool)0);
  #line 1495 
  btc8821a2ant_sw_mechanism2(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,24U);
  #line 1496 
  return;
}

#line 1498  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.c"
static void btc8821a2ant_action_wifi_link_process(struct btc_coexist *btcoexist)
{
  #line 1501 
  u8 u8tmpa;
  #line 1501 
  u8 u8tmpb;
  #line 1500 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 1503 
  btc8821a2ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)15);
  #line 1504 
  btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)22);
  #line 1506 
  btc8821a2ant_sw_mechanism1(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,(_Bool)0);
  #line 1507 
  btc8821a2ant_sw_mechanism2(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,24U);
  #line 1509 
  u8tmpa = (*(btcoexist->btc_read_1byte))((void *)btcoexist,1893U);
  #line 1510 
  u8tmpb = (*(btcoexist->btc_read_1byte))((void *)btcoexist,1902U);
  #line 1512 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], 0x765=0x%x, 0x76e=0x%x\n",(int)u8tmpa,(int)u8tmpb);
  #line 1513 
  return;
}

#line 1516  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.c"
static bool btc8821a2ant_action_wifi_idle_process(struct btc_coexist *btcoexist)
{
  #line 1519 
  u8 wifi_rssi_state;
  #line 1519 
  u8 wifi_rssi_state1;
  #line 1519 
  u8 bt_rssi_state;
  #line 1518 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 1520 
  u8 ap_num = (unsigned char)0U;
  #line 1522 
  wifi_rssi_state = btc8821a2ant_wifi_rssi_state(btcoexist,(unsigned char)0,(unsigned char)2,(unsigned char)15,(unsigned char)0);
  #line 1524 
  wifi_rssi_state1 = btc8821a2ant_wifi_rssi_state(btcoexist,(unsigned char)1,(unsigned char)2,(unsigned char)22,(unsigned char)0);
  #line 1526 
  bt_rssi_state = btc8821a2ant_bt_rssi_state(btcoexist,(unsigned char)2,(unsigned char)46,(unsigned char)0);
  #line 1529 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)41,(void *)(& ap_num));
  #line 1532 
  if ((((unsigned int)wifi_rssi_state1 == 0U || (unsigned int)wifi_rssi_state1 == 3U) && (int)coex_sta_1->hid_exist != 0) && (int)coex_sta_1->a2dp_exist != 0) {
    #line 1534 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Wifi  idle process for BT HID+A2DP exist!!\n");
    #line 1537 
    btc8821a2ant_dac_swing(btcoexist,(_Bool)0,(_Bool)1,6U);
    #line 1538 
    btc8821a2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)0);
    #line 1541 
    btc8821a2ant_sw_mechanism1(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,(_Bool)0);
    #line 1543 
    btc8821a2ant_sw_mechanism2(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,24U);
    #line 1546 
    btc8821a2ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)0);
    #line 1547 
    btc8821a2ant_power_save_state(btcoexist,(unsigned char)0,(unsigned char)0,(unsigned char)0);
    #line 1549 
    btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)0,(unsigned char)1);
    #line 1551 
    return (_Bool)1;
  }
  else 
    #line 1552 
    if ((int)coex_sta_1->pan_exist != 0) {
      #line 1553 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Wifi  idle process for BT PAN exist!!\n");
      #line 1556 
      btc8821a2ant_dac_swing(btcoexist,(_Bool)0,(_Bool)1,6U);
      #line 1557 
      btc8821a2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)0);
      #line 1560 
      btc8821a2ant_sw_mechanism1(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,(_Bool)0);
      #line 1562 
      btc8821a2ant_sw_mechanism2(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,24U);
      #line 1565 
      btc8821a2ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)0);
      #line 1566 
      btc8821a2ant_power_save_state(btcoexist,(unsigned char)0,(unsigned char)0,(unsigned char)0);
      #line 1568 
      btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)0,(unsigned char)1);
      #line 1570 
      return (_Bool)1;
    }
  #line 1572 
  btc8821a2ant_dac_swing(btcoexist,(_Bool)0,(_Bool)1,24U);
  #line 1573 
  return (_Bool)0;
}

#line 1576  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.c"
static bool btc8821a2ant_is_common_action(struct btc_coexist *btcoexist)
{
  #line 1578 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 1579 
  bool common = (_Bool)0;
  #line 1579 
  bool wifi_connected = (_Bool)0;
  #line 1579 
  bool wifi_busy = (_Bool)0;
  #line 1580 
  bool low_pwr_disable = (_Bool)0;
  #line 1581 
  bool bt_hs_on = (_Bool)0;
  #line 1583 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)0,(void *)(& bt_hs_on));
  #line 1584 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)2,(void *)(& wifi_connected));
  #line 1586 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)4,(void *)(& wifi_busy));
  #line 1588 
  if (! wifi_connected) {
    #line 1589 
    low_pwr_disable = (_Bool)0;
    #line 1590 
    (*(btcoexist->btc_set))((void *)btcoexist,(unsigned char)28,(void *)(& low_pwr_disable));
    #line 1592 
    btc8821a2ant_limited_rx(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,(unsigned char)8);
    #line 1595 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Wifi non-connected idle!!\n");
    #line 1598 
    (*(btcoexist->btc_set_rf_reg))((void *)btcoexist,(unsigned char)0,1U,1048575U,0U);
    #line 1600 
    btc8821a2ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)0);
    #line 1601 
    btc8821a2ant_power_save_state(btcoexist,(unsigned char)0,(unsigned char)0,(unsigned char)0);
    #line 1603 
    btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)0,(unsigned char)1);
    #line 1604 
    btc8821a2ant_fw_dac_swing_lvl(btcoexist,(_Bool)0,(unsigned char)6);
    #line 1605 
    btc8821a2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)0);
    #line 1607 
    btc8821a2ant_sw_mechanism1(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,(_Bool)0);
    #line 1609 
    btc8821a2ant_sw_mechanism2(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,24U);
    #line 1612 
    common = (_Bool)1;
  }
  else 
    #line 1614 
    if ((unsigned int)coex_dm_1->bt_status == 0U) {
      #line 1616 
      low_pwr_disable = (_Bool)0;
      #line 1617 
      (*(btcoexist->btc_set))((void *)btcoexist,(unsigned char)28,(void *)(& low_pwr_disable));
      #line 1620 
      btc8821a2ant_limited_rx(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,(unsigned char)8);
      #line 1623 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Wifi connected + BT non connected-idle!!\n");
      #line 1626 
      (*(btcoexist->btc_set_rf_reg))((void *)btcoexist,(unsigned char)0,1U,1048575U,0U);
      #line 1628 
      btc8821a2ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)0);
      #line 1631 
      btc8821a2ant_power_save_state(btcoexist,(unsigned char)0,(unsigned char)0,(unsigned char)0);
      #line 1633 
      btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)0,(unsigned char)1);
      #line 1634 
      btc8821a2ant_fw_dac_swing_lvl(btcoexist,(_Bool)0,(unsigned char)11);
      #line 1636 
      btc8821a2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)0);
      #line 1638 
      btc8821a2ant_sw_mechanism1(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,(_Bool)0);
      #line 1640 
      btc8821a2ant_sw_mechanism2(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,24U);
      #line 1643 
      common = (_Bool)1;
    }
    else 
      #line 1644 
      if ((unsigned int)coex_dm_1->bt_status == 1U) {
        #line 1646 
        low_pwr_disable = (_Bool)1;
        #line 1647 
        (*(btcoexist->btc_set))((void *)btcoexist,(unsigned char)28,(void *)(& low_pwr_disable));
        #line 1651 
        if ((int)bt_hs_on != 0) 
                                #line 1652 
                                return (_Bool)0;
        #line 1653 
        _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Wifi connected + BT connected-idle!!\n");
        #line 1655 
        btc8821a2ant_limited_rx(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,(unsigned char)8);
        #line 1658 
        (*(btcoexist->btc_set_rf_reg))((void *)btcoexist,(unsigned char)0,1U,1048575U,0U);
        #line 1660 
        btc8821a2ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)0);
        #line 1663 
        btc8821a2ant_power_save_state(btcoexist,(unsigned char)0,(unsigned char)0,(unsigned char)0);
        #line 1665 
        btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)0,(unsigned char)1);
        #line 1666 
        btc8821a2ant_fw_dac_swing_lvl(btcoexist,(_Bool)0,(unsigned char)11);
        #line 1668 
        btc8821a2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)0);
        #line 1670 
        btc8821a2ant_sw_mechanism1(btcoexist,(_Bool)1,(_Bool)0,(_Bool)0,(_Bool)0);
        #line 1672 
        btc8821a2ant_sw_mechanism2(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,24U);
        #line 1674 
        common = (_Bool)1;
      }
      else {
        #line 1676 
        low_pwr_disable = (_Bool)1;
        #line 1677 
        (*(btcoexist->btc_set))((void *)btcoexist,(unsigned char)28,(void *)(& low_pwr_disable));
        #line 1681 
        if ((int)wifi_busy != 0) {
          #line 1682 
          _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Wifi Connected-Busy + BT Busy!!\n");
          #line 1684 
          common = (_Bool)0;
        }
        else {
          #line 1686 
          _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Wifi Connected-Idle + BT Busy!!\n");
          #line 1688 
          common = btc8821a2ant_action_wifi_idle_process(btcoexist);
        }
      }
  #line 1694 
  return common;
}

#line 1697  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.c"
static void btc8821a2ant_tdma_duration_adjust(struct btc_coexist *btcoexist, bool sco_hid, bool tx_pause, u8 max_interval)
{
  #line 1702 
  long up;
  #line 1702 
  long dn;
  #line 1702 
  long m;
  #line 1702 
  long n;
  #line 1702 
  long wait_count;
  #line 1707 
  int result;
  #line 1701 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 1708 
  u8 retry_count = (unsigned char)0U;
  #line 1710 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], TdmaDurationAdjust()\n");
  #line 1713 
  if ((int)coex_dm_1->auto_tdma_adjust != 0) {
    #line 1714 
    coex_dm_1->auto_tdma_adjust = (_Bool)0;
    #line 1715 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], first run TdmaDurationAdjust()!!\n");
    #line 1717 
    if ((int)sco_hid != 0) 
      #line 1718 
      if ((int)tx_pause != 0) 
        #line 1719 
        if ((unsigned int)max_interval == 1U) {
          #line 1720 
          btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)13);
          #line 1722 
          coex_dm_1->ps_tdma_du_adj_type = (unsigned char)13U;
        }
        else 
          #line 1723 
          if ((unsigned int)max_interval == 2U) {
            #line 1724 
            btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)14);
            #line 1726 
            coex_dm_1->ps_tdma_du_adj_type = (unsigned char)14U;
          }
          else 
            #line 1727 
            if ((unsigned int)max_interval == 3U) {
              #line 1728 
              btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)15);
              #line 1730 
              coex_dm_1->ps_tdma_du_adj_type = (unsigned char)15U;
            }
            else {
              #line 1732 
              btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)15);
              #line 1734 
              coex_dm_1->ps_tdma_du_adj_type = (unsigned char)15U;
            }
      else 
        #line 1737 
        if ((unsigned int)max_interval == 1U) {
          #line 1738 
          btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)9);
          #line 1740 
          coex_dm_1->ps_tdma_du_adj_type = (unsigned char)9U;
        }
        else 
          #line 1741 
          if ((unsigned int)max_interval == 2U) {
            #line 1742 
            btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)10);
            #line 1744 
            coex_dm_1->ps_tdma_du_adj_type = (unsigned char)10U;
          }
          else 
            #line 1745 
            if ((unsigned int)max_interval == 3U) {
              #line 1746 
              btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)11);
              #line 1748 
              coex_dm_1->ps_tdma_du_adj_type = (unsigned char)11U;
            }
            else {
              #line 1750 
              btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)11);
              #line 1752 
              coex_dm_1->ps_tdma_du_adj_type = (unsigned char)11U;
            }
    else 
      #line 1756 
      if ((int)tx_pause != 0) 
        #line 1757 
        if ((unsigned int)max_interval == 1U) {
          #line 1758 
          btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)5);
          #line 1760 
          coex_dm_1->ps_tdma_du_adj_type = (unsigned char)5U;
        }
        else 
          #line 1761 
          if ((unsigned int)max_interval == 2U) {
            #line 1762 
            btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)6);
            #line 1764 
            coex_dm_1->ps_tdma_du_adj_type = (unsigned char)6U;
          }
          else 
            #line 1765 
            if ((unsigned int)max_interval == 3U) {
              #line 1766 
              btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)7);
              #line 1768 
              coex_dm_1->ps_tdma_du_adj_type = (unsigned char)7U;
            }
            else {
              #line 1770 
              btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)7);
              #line 1772 
              coex_dm_1->ps_tdma_du_adj_type = (unsigned char)7U;
            }
      else 
        #line 1775 
        if ((unsigned int)max_interval == 1U) {
          #line 1776 
          btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)1);
          #line 1778 
          coex_dm_1->ps_tdma_du_adj_type = (unsigned char)1U;
        }
        else 
          #line 1779 
          if ((unsigned int)max_interval == 2U) {
            #line 1780 
            btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)2);
            #line 1782 
            coex_dm_1->ps_tdma_du_adj_type = (unsigned char)2U;
          }
          else 
            #line 1783 
            if ((unsigned int)max_interval == 3U) {
              #line 1784 
              btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)3);
              #line 1786 
              coex_dm_1->ps_tdma_du_adj_type = (unsigned char)3U;
            }
            else {
              #line 1788 
              btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)3);
              #line 1790 
              coex_dm_1->ps_tdma_du_adj_type = (unsigned char)3U;
            }
    #line 1795 
    up = 0L;
    #line 1796 
    dn = 0L;
    #line 1797 
    m = 1L;
    #line 1798 
    n = 3L;
    #line 1799 
    result = 0;
    #line 1800 
    wait_count = 0L;
  }
  else {
    #line 1803 
    retry_count = coex_sta_1->bt_retry_cnt;
    #line 1804 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], retry_count = %d\n",(int)retry_count);
    #line 1806 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], up = %d, dn = %d, m = %d, n = %d, wait_count = %d\n",(int)up,(int)dn,(int)m,(int)n,(int)wait_count);
    #line 1809 
    result = 0;
    #line 1810 
    wait_count ++;
    #line 1812 
    if ((unsigned int)retry_count == 0U) {
      #line 1814 
      up ++;
      #line 1815 
      dn --;
      #line 1817 
      if (dn <= 0L) 
                    #line 1818 
                    dn = 0L;
      #line 1820 
      if (up >= n) {
        #line 1824 
        wait_count = 0L;
        #line 1825 
        n = 3L;
        #line 1826 
        up = 0L;
        #line 1827 
        dn = 0L;
        #line 1828 
        result = 1;
        #line 1829 
        _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Increase wifi duration!!\n");
      }
    }
    else 
      #line 1832 
      if ((unsigned int)retry_count <= 3U) {
        #line 1834 
        up --;
        #line 1835 
        dn ++;
        #line 1837 
        if (up <= 0L) 
                      #line 1838 
                      up = 0L;
        #line 1840 
        if (dn == 2L) {
          #line 1844 
          if (wait_count <= 2L) 
                                #line 1845 
                                m ++; else 
                                           #line 1847 
                                           m = 1L;
          #line 1851 
          if (m > 19L) 
                       #line 1852 
                       m = 20L;
          #line 1854 
          n = m * 3L;
          #line 1855 
          up = 0L;
          #line 1856 
          dn = 0L;
          #line 1857 
          wait_count = 0L;
          #line 1858 
          result = -1;
          #line 1859 
          _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Decrease wifi duration for retryCounter<3!!\n");
        }
      }
      else {
        #line 1866 
        if (wait_count == 1L) 
                              #line 1867 
                              m ++; else 
                                         #line 1869 
                                         m = 1L;
        #line 1873 
        if (m > 19L) 
                     #line 1874 
                     m = 20L;
        #line 1876 
        n = m * 3L;
        #line 1877 
        up = 0L;
        #line 1878 
        dn = 0L;
        #line 1879 
        wait_count = 0L;
        #line 1880 
        result = -1;
        #line 1881 
        _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Decrease wifi duration for retryCounter>3!!\n");
      }
    #line 1885 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], max Interval = %d\n",(int)max_interval);
    #line 1888 
    if ((unsigned int)max_interval == 1U) 
      #line 1889 
      if ((int)tx_pause != 0) {
        #line 1890 
        if ((unsigned int)coex_dm_1->cur_ps_tdma == 71U) {
          #line 1891 
          btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)5);
          #line 1893 
          coex_dm_1->ps_tdma_du_adj_type = (unsigned char)5U;
        }
        else 
          #line 1894 
          if ((unsigned int)coex_dm_1->cur_ps_tdma == 1U) {
            #line 1895 
            btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)5);
            #line 1897 
            coex_dm_1->ps_tdma_du_adj_type = (unsigned char)5U;
          }
          else 
            #line 1898 
            if ((unsigned int)coex_dm_1->cur_ps_tdma == 2U) {
              #line 1899 
              btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)6);
              #line 1901 
              coex_dm_1->ps_tdma_du_adj_type = (unsigned char)6U;
            }
            else 
              #line 1902 
              if ((unsigned int)coex_dm_1->cur_ps_tdma == 3U) {
                #line 1903 
                btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)7);
                #line 1905 
                coex_dm_1->ps_tdma_du_adj_type = (unsigned char)7U;
              }
              else 
                #line 1906 
                if ((unsigned int)coex_dm_1->cur_ps_tdma == 4U) {
                  #line 1907 
                  btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)8);
                  #line 1909 
                  coex_dm_1->ps_tdma_du_adj_type = (unsigned char)8U;
                }
        #line 1911 
        if ((unsigned int)coex_dm_1->cur_ps_tdma == 9U) {
          #line 1912 
          btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)13);
          #line 1914 
          coex_dm_1->ps_tdma_du_adj_type = (unsigned char)13U;
        }
        else 
          #line 1915 
          if ((unsigned int)coex_dm_1->cur_ps_tdma == 10U) {
            #line 1916 
            btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)14);
            #line 1918 
            coex_dm_1->ps_tdma_du_adj_type = (unsigned char)14U;
          }
          else 
            #line 1919 
            if ((unsigned int)coex_dm_1->cur_ps_tdma == 11U) {
              #line 1920 
              btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)15);
              #line 1922 
              coex_dm_1->ps_tdma_du_adj_type = (unsigned char)15U;
            }
            else 
              #line 1923 
              if ((unsigned int)coex_dm_1->cur_ps_tdma == 12U) {
                #line 1924 
                btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)16);
                #line 1926 
                coex_dm_1->ps_tdma_du_adj_type = (unsigned char)16U;
              }
        #line 1929 
        if (result == -1) {
          #line 1930 
          if ((unsigned int)coex_dm_1->cur_ps_tdma == 5U) {
            #line 1931 
            btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)6);
            #line 1934 
            coex_dm_1->ps_tdma_du_adj_type = (unsigned char)6U;
          }
          else 
            #line 1936 
            if ((unsigned int)coex_dm_1->cur_ps_tdma == 6U) {
              #line 1937 
              btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)7);
              #line 1940 
              coex_dm_1->ps_tdma_du_adj_type = (unsigned char)7U;
            }
            else 
              #line 1942 
              if ((unsigned int)coex_dm_1->cur_ps_tdma == 7U) {
                #line 1943 
                btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)8);
                #line 1946 
                coex_dm_1->ps_tdma_du_adj_type = (unsigned char)8U;
              }
              else 
                #line 1948 
                if ((unsigned int)coex_dm_1->cur_ps_tdma == 13U) {
                  #line 1949 
                  btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)14);
                  #line 1952 
                  coex_dm_1->ps_tdma_du_adj_type = (unsigned char)14U;
                }
                else 
                  #line 1954 
                  if ((unsigned int)coex_dm_1->cur_ps_tdma == 14U) {
                    #line 1955 
                    btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)15);
                    #line 1958 
                    coex_dm_1->ps_tdma_du_adj_type = (unsigned char)15U;
                  }
                  else 
                    #line 1960 
                    if ((unsigned int)coex_dm_1->cur_ps_tdma == 15U) {
                      #line 1961 
                      btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)16);
                      #line 1964 
                      coex_dm_1->ps_tdma_du_adj_type = (unsigned char)16U;
                    }
        }
        else 
          #line 1967 
          if (result == 1) 
            #line 1968 
            if ((unsigned int)coex_dm_1->cur_ps_tdma == 8U) {
              #line 1969 
              btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)7);
              #line 1972 
              coex_dm_1->ps_tdma_du_adj_type = (unsigned char)7U;
            }
            else 
              #line 1974 
              if ((unsigned int)coex_dm_1->cur_ps_tdma == 7U) {
                #line 1975 
                btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)6);
                #line 1978 
                coex_dm_1->ps_tdma_du_adj_type = (unsigned char)6U;
              }
              else 
                #line 1980 
                if ((unsigned int)coex_dm_1->cur_ps_tdma == 6U) {
                  #line 1981 
                  btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)5);
                  #line 1984 
                  coex_dm_1->ps_tdma_du_adj_type = (unsigned char)5U;
                }
                else 
                  #line 1986 
                  if ((unsigned int)coex_dm_1->cur_ps_tdma == 16U) {
                    #line 1987 
                    btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)15);
                    #line 1990 
                    coex_dm_1->ps_tdma_du_adj_type = (unsigned char)15U;
                  }
                  else 
                    #line 1992 
                    if ((unsigned int)coex_dm_1->cur_ps_tdma == 15U) {
                      #line 1993 
                      btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)14);
                      #line 1996 
                      coex_dm_1->ps_tdma_du_adj_type = (unsigned char)14U;
                    }
                    else 
                      #line 1998 
                      if ((unsigned int)coex_dm_1->cur_ps_tdma == 14U) {
                        #line 1999 
                        btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)13);
                        #line 2002 
                        coex_dm_1->ps_tdma_du_adj_type = (unsigned char)13U;
                      }
      }
      else {
        #line 2007 
        if ((unsigned int)coex_dm_1->cur_ps_tdma == 5U) {
          #line 2008 
          btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)71);
          #line 2010 
          coex_dm_1->ps_tdma_du_adj_type = (unsigned char)71U;
        }
        else 
          #line 2011 
          if ((unsigned int)coex_dm_1->cur_ps_tdma == 6U) {
            #line 2012 
            btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)2);
            #line 2014 
            coex_dm_1->ps_tdma_du_adj_type = (unsigned char)2U;
          }
          else 
            #line 2015 
            if ((unsigned int)coex_dm_1->cur_ps_tdma == 7U) {
              #line 2016 
              btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)3);
              #line 2018 
              coex_dm_1->ps_tdma_du_adj_type = (unsigned char)3U;
            }
            else 
              #line 2019 
              if ((unsigned int)coex_dm_1->cur_ps_tdma == 8U) {
                #line 2020 
                btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)4);
                #line 2022 
                coex_dm_1->ps_tdma_du_adj_type = (unsigned char)4U;
              }
        #line 2024 
        if ((unsigned int)coex_dm_1->cur_ps_tdma == 13U) {
          #line 2025 
          btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)9);
          #line 2027 
          coex_dm_1->ps_tdma_du_adj_type = (unsigned char)9U;
        }
        else 
          #line 2028 
          if ((unsigned int)coex_dm_1->cur_ps_tdma == 14U) {
            #line 2029 
            btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)10);
            #line 2031 
            coex_dm_1->ps_tdma_du_adj_type = (unsigned char)10U;
          }
          else 
            #line 2032 
            if ((unsigned int)coex_dm_1->cur_ps_tdma == 15U) {
              #line 2033 
              btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)11);
              #line 2035 
              coex_dm_1->ps_tdma_du_adj_type = (unsigned char)11U;
            }
            else 
              #line 2036 
              if ((unsigned int)coex_dm_1->cur_ps_tdma == 16U) {
                #line 2037 
                btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)12);
                #line 2039 
                coex_dm_1->ps_tdma_du_adj_type = (unsigned char)12U;
              }
        #line 2042 
        if (result == -1) {
          #line 2043 
          if ((unsigned int)coex_dm_1->cur_ps_tdma == 71U) {
            #line 2044 
            btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)1);
            #line 2047 
            coex_dm_1->ps_tdma_du_adj_type = (unsigned char)1U;
          }
          else 
            #line 2049 
            if ((unsigned int)coex_dm_1->cur_ps_tdma == 1U) {
              #line 2050 
              btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)2);
              #line 2053 
              coex_dm_1->ps_tdma_du_adj_type = (unsigned char)2U;
            }
            else 
              #line 2055 
              if ((unsigned int)coex_dm_1->cur_ps_tdma == 2U) {
                #line 2056 
                btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)3);
                #line 2059 
                coex_dm_1->ps_tdma_du_adj_type = (unsigned char)3U;
              }
              else 
                #line 2061 
                if ((unsigned int)coex_dm_1->cur_ps_tdma == 3U) {
                  #line 2062 
                  btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)4);
                  #line 2065 
                  coex_dm_1->ps_tdma_du_adj_type = (unsigned char)4U;
                }
                else 
                  #line 2067 
                  if ((unsigned int)coex_dm_1->cur_ps_tdma == 9U) {
                    #line 2068 
                    btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)10);
                    #line 2071 
                    coex_dm_1->ps_tdma_du_adj_type = (unsigned char)10U;
                  }
                  else 
                    #line 2073 
                    if ((unsigned int)coex_dm_1->cur_ps_tdma == 10U) {
                      #line 2074 
                      btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)11);
                      #line 2077 
                      coex_dm_1->ps_tdma_du_adj_type = (unsigned char)11U;
                    }
                    else 
                      #line 2079 
                      if ((unsigned int)coex_dm_1->cur_ps_tdma == 11U) {
                        #line 2080 
                        btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)12);
                        #line 2083 
                        coex_dm_1->ps_tdma_du_adj_type = (unsigned char)12U;
                      }
        }
        else 
          #line 2086 
          if (result == 1) 
            #line 2087 
            if ((unsigned int)coex_dm_1->cur_ps_tdma == 4U) {
              #line 2088 
              btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)3);
              #line 2091 
              coex_dm_1->ps_tdma_du_adj_type = (unsigned char)3U;
            }
            else 
              #line 2093 
              if ((unsigned int)coex_dm_1->cur_ps_tdma == 3U) {
                #line 2094 
                btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)2);
                #line 2097 
                coex_dm_1->ps_tdma_du_adj_type = (unsigned char)2U;
              }
              else 
                #line 2099 
                if ((unsigned int)coex_dm_1->cur_ps_tdma == 2U) {
                  #line 2100 
                  btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)1);
                  #line 2103 
                  coex_dm_1->ps_tdma_du_adj_type = (unsigned char)1U;
                }
                else 
                  #line 2105 
                  if ((unsigned int)coex_dm_1->cur_ps_tdma == 1U) {
                    #line 2106 
                    btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)71);
                    #line 2109 
                    coex_dm_1->ps_tdma_du_adj_type = (unsigned char)71U;
                  }
                  else 
                    #line 2111 
                    if ((unsigned int)coex_dm_1->cur_ps_tdma == 12U) {
                      #line 2112 
                      btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)11);
                      #line 2115 
                      coex_dm_1->ps_tdma_du_adj_type = (unsigned char)11U;
                    }
                    else 
                      #line 2117 
                      if ((unsigned int)coex_dm_1->cur_ps_tdma == 11U) {
                        #line 2118 
                        btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)10);
                        #line 2121 
                        coex_dm_1->ps_tdma_du_adj_type = (unsigned char)10U;
                      }
                      else 
                        #line 2123 
                        if ((unsigned int)coex_dm_1->cur_ps_tdma == 10U) {
                          #line 2124 
                          btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)9);
                          #line 2127 
                          coex_dm_1->ps_tdma_du_adj_type = (unsigned char)9U;
                        }
      }
    else 
      #line 2132 
      if ((unsigned int)max_interval == 2U) 
        #line 2133 
        if ((int)tx_pause != 0) {
          #line 2134 
          if ((unsigned int)coex_dm_1->cur_ps_tdma == 1U) {
            #line 2135 
            btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)6);
            #line 2137 
            coex_dm_1->ps_tdma_du_adj_type = (unsigned char)6U;
          }
          else 
            #line 2138 
            if ((unsigned int)coex_dm_1->cur_ps_tdma == 2U) {
              #line 2139 
              btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)6);
              #line 2141 
              coex_dm_1->ps_tdma_du_adj_type = (unsigned char)6U;
            }
            else 
              #line 2142 
              if ((unsigned int)coex_dm_1->cur_ps_tdma == 3U) {
                #line 2143 
                btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)7);
                #line 2145 
                coex_dm_1->ps_tdma_du_adj_type = (unsigned char)7U;
              }
              else 
                #line 2146 
                if ((unsigned int)coex_dm_1->cur_ps_tdma == 4U) {
                  #line 2147 
                  btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)8);
                  #line 2149 
                  coex_dm_1->ps_tdma_du_adj_type = (unsigned char)8U;
                }
          #line 2151 
          if ((unsigned int)coex_dm_1->cur_ps_tdma == 9U) {
            #line 2152 
            btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)14);
            #line 2154 
            coex_dm_1->ps_tdma_du_adj_type = (unsigned char)14U;
          }
          else 
            #line 2155 
            if ((unsigned int)coex_dm_1->cur_ps_tdma == 10U) {
              #line 2156 
              btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)14);
              #line 2158 
              coex_dm_1->ps_tdma_du_adj_type = (unsigned char)14U;
            }
            else 
              #line 2159 
              if ((unsigned int)coex_dm_1->cur_ps_tdma == 11U) {
                #line 2160 
                btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)15);
                #line 2162 
                coex_dm_1->ps_tdma_du_adj_type = (unsigned char)15U;
              }
              else 
                #line 2163 
                if ((unsigned int)coex_dm_1->cur_ps_tdma == 12U) {
                  #line 2164 
                  btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)16);
                  #line 2166 
                  coex_dm_1->ps_tdma_du_adj_type = (unsigned char)16U;
                }
          #line 2168 
          if (result == -1) {
            #line 2169 
            if ((unsigned int)coex_dm_1->cur_ps_tdma == 5U) {
              #line 2170 
              btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)6);
              #line 2173 
              coex_dm_1->ps_tdma_du_adj_type = (unsigned char)6U;
            }
            else 
              #line 2175 
              if ((unsigned int)coex_dm_1->cur_ps_tdma == 6U) {
                #line 2176 
                btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)7);
                #line 2179 
                coex_dm_1->ps_tdma_du_adj_type = (unsigned char)7U;
              }
              else 
                #line 2181 
                if ((unsigned int)coex_dm_1->cur_ps_tdma == 7U) {
                  #line 2182 
                  btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)8);
                  #line 2185 
                  coex_dm_1->ps_tdma_du_adj_type = (unsigned char)8U;
                }
                else 
                  #line 2187 
                  if ((unsigned int)coex_dm_1->cur_ps_tdma == 13U) {
                    #line 2188 
                    btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)14);
                    #line 2191 
                    coex_dm_1->ps_tdma_du_adj_type = (unsigned char)14U;
                  }
                  else 
                    #line 2193 
                    if ((unsigned int)coex_dm_1->cur_ps_tdma == 14U) {
                      #line 2194 
                      btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)15);
                      #line 2197 
                      coex_dm_1->ps_tdma_du_adj_type = (unsigned char)15U;
                    }
                    else 
                      #line 2199 
                      if ((unsigned int)coex_dm_1->cur_ps_tdma == 15U) {
                        #line 2200 
                        btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)16);
                        #line 2203 
                        coex_dm_1->ps_tdma_du_adj_type = (unsigned char)16U;
                      }
          }
          else 
            #line 2206 
            if (result == 1) 
              #line 2207 
              if ((unsigned int)coex_dm_1->cur_ps_tdma == 8U) {
                #line 2208 
                btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)7);
                #line 2211 
                coex_dm_1->ps_tdma_du_adj_type = (unsigned char)7U;
              }
              else 
                #line 2213 
                if ((unsigned int)coex_dm_1->cur_ps_tdma == 7U) {
                  #line 2214 
                  btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)6);
                  #line 2217 
                  coex_dm_1->ps_tdma_du_adj_type = (unsigned char)6U;
                }
                else 
                  #line 2219 
                  if ((unsigned int)coex_dm_1->cur_ps_tdma == 6U) {
                    #line 2220 
                    btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)6);
                    #line 2223 
                    coex_dm_1->ps_tdma_du_adj_type = (unsigned char)6U;
                  }
                  else 
                    #line 2225 
                    if ((unsigned int)coex_dm_1->cur_ps_tdma == 16U) {
                      #line 2226 
                      btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)15);
                      #line 2229 
                      coex_dm_1->ps_tdma_du_adj_type = (unsigned char)15U;
                    }
                    else 
                      #line 2231 
                      if ((unsigned int)coex_dm_1->cur_ps_tdma == 15U) {
                        #line 2232 
                        btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)14);
                        #line 2235 
                        coex_dm_1->ps_tdma_du_adj_type = (unsigned char)14U;
                      }
                      else 
                        #line 2237 
                        if ((unsigned int)coex_dm_1->cur_ps_tdma == 14U) {
                          #line 2238 
                          btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)14);
                          #line 2241 
                          coex_dm_1->ps_tdma_du_adj_type = (unsigned char)14U;
                        }
        }
        else {
          #line 2246 
          if ((unsigned int)coex_dm_1->cur_ps_tdma == 5U) {
            #line 2247 
            btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)2);
            #line 2249 
            coex_dm_1->ps_tdma_du_adj_type = (unsigned char)2U;
          }
          else 
            #line 2250 
            if ((unsigned int)coex_dm_1->cur_ps_tdma == 6U) {
              #line 2251 
              btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)2);
              #line 2253 
              coex_dm_1->ps_tdma_du_adj_type = (unsigned char)2U;
            }
            else 
              #line 2254 
              if ((unsigned int)coex_dm_1->cur_ps_tdma == 7U) {
                #line 2255 
                btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)3);
                #line 2257 
                coex_dm_1->ps_tdma_du_adj_type = (unsigned char)3U;
              }
              else 
                #line 2258 
                if ((unsigned int)coex_dm_1->cur_ps_tdma == 8U) {
                  #line 2259 
                  btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)4);
                  #line 2261 
                  coex_dm_1->ps_tdma_du_adj_type = (unsigned char)4U;
                }
          #line 2263 
          if ((unsigned int)coex_dm_1->cur_ps_tdma == 13U) {
            #line 2264 
            btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)10);
            #line 2266 
            coex_dm_1->ps_tdma_du_adj_type = (unsigned char)10U;
          }
          else 
            #line 2267 
            if ((unsigned int)coex_dm_1->cur_ps_tdma == 14U) {
              #line 2268 
              btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)10);
              #line 2270 
              coex_dm_1->ps_tdma_du_adj_type = (unsigned char)10U;
            }
            else 
              #line 2271 
              if ((unsigned int)coex_dm_1->cur_ps_tdma == 15U) {
                #line 2272 
                btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)11);
                #line 2274 
                coex_dm_1->ps_tdma_du_adj_type = (unsigned char)11U;
              }
              else 
                #line 2275 
                if ((unsigned int)coex_dm_1->cur_ps_tdma == 16U) {
                  #line 2276 
                  btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)12);
                  #line 2278 
                  coex_dm_1->ps_tdma_du_adj_type = (unsigned char)12U;
                }
          #line 2280 
          if (result == -1) {
            #line 2281 
            if ((unsigned int)coex_dm_1->cur_ps_tdma == 1U) {
              #line 2282 
              btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)2);
              #line 2285 
              coex_dm_1->ps_tdma_du_adj_type = (unsigned char)2U;
            }
            else 
              #line 2287 
              if ((unsigned int)coex_dm_1->cur_ps_tdma == 2U) {
                #line 2288 
                btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)3);
                #line 2291 
                coex_dm_1->ps_tdma_du_adj_type = (unsigned char)3U;
              }
              else 
                #line 2293 
                if ((unsigned int)coex_dm_1->cur_ps_tdma == 3U) {
                  #line 2294 
                  btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)4);
                  #line 2297 
                  coex_dm_1->ps_tdma_du_adj_type = (unsigned char)4U;
                }
                else 
                  #line 2299 
                  if ((unsigned int)coex_dm_1->cur_ps_tdma == 9U) {
                    #line 2300 
                    btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)10);
                    #line 2303 
                    coex_dm_1->ps_tdma_du_adj_type = (unsigned char)10U;
                  }
                  else 
                    #line 2305 
                    if ((unsigned int)coex_dm_1->cur_ps_tdma == 10U) {
                      #line 2306 
                      btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)11);
                      #line 2309 
                      coex_dm_1->ps_tdma_du_adj_type = (unsigned char)11U;
                    }
                    else 
                      #line 2311 
                      if ((unsigned int)coex_dm_1->cur_ps_tdma == 11U) {
                        #line 2312 
                        btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)12);
                        #line 2315 
                        coex_dm_1->ps_tdma_du_adj_type = (unsigned char)12U;
                      }
          }
          else 
            #line 2318 
            if (result == 1) 
              #line 2319 
              if ((unsigned int)coex_dm_1->cur_ps_tdma == 4U) {
                #line 2320 
                btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)3);
                #line 2323 
                coex_dm_1->ps_tdma_du_adj_type = (unsigned char)3U;
              }
              else 
                #line 2325 
                if ((unsigned int)coex_dm_1->cur_ps_tdma == 3U) {
                  #line 2326 
                  btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)2);
                  #line 2329 
                  coex_dm_1->ps_tdma_du_adj_type = (unsigned char)2U;
                }
                else 
                  #line 2331 
                  if ((unsigned int)coex_dm_1->cur_ps_tdma == 2U) {
                    #line 2332 
                    btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)2);
                    #line 2335 
                    coex_dm_1->ps_tdma_du_adj_type = (unsigned char)2U;
                  }
                  else 
                    #line 2337 
                    if ((unsigned int)coex_dm_1->cur_ps_tdma == 12U) {
                      #line 2338 
                      btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)11);
                      #line 2341 
                      coex_dm_1->ps_tdma_du_adj_type = (unsigned char)11U;
                    }
                    else 
                      #line 2343 
                      if ((unsigned int)coex_dm_1->cur_ps_tdma == 11U) {
                        #line 2344 
                        btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)10);
                        #line 2347 
                        coex_dm_1->ps_tdma_du_adj_type = (unsigned char)10U;
                      }
                      else 
                        #line 2349 
                        if ((unsigned int)coex_dm_1->cur_ps_tdma == 10U) {
                          #line 2350 
                          btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)10);
                          #line 2353 
                          coex_dm_1->ps_tdma_du_adj_type = (unsigned char)10U;
                        }
        }
      else 
        #line 2358 
        if ((unsigned int)max_interval == 3U) 
          #line 2359 
          if ((int)tx_pause != 0) {
            #line 2360 
            if ((unsigned int)coex_dm_1->cur_ps_tdma == 1U) {
              #line 2361 
              btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)7);
              #line 2363 
              coex_dm_1->ps_tdma_du_adj_type = (unsigned char)7U;
            }
            else 
              #line 2364 
              if ((unsigned int)coex_dm_1->cur_ps_tdma == 2U) {
                #line 2365 
                btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)7);
                #line 2367 
                coex_dm_1->ps_tdma_du_adj_type = (unsigned char)7U;
              }
              else 
                #line 2368 
                if ((unsigned int)coex_dm_1->cur_ps_tdma == 3U) {
                  #line 2369 
                  btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)7);
                  #line 2371 
                  coex_dm_1->ps_tdma_du_adj_type = (unsigned char)7U;
                }
                else 
                  #line 2372 
                  if ((unsigned int)coex_dm_1->cur_ps_tdma == 4U) {
                    #line 2373 
                    btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)8);
                    #line 2375 
                    coex_dm_1->ps_tdma_du_adj_type = (unsigned char)8U;
                  }
            #line 2377 
            if ((unsigned int)coex_dm_1->cur_ps_tdma == 9U) {
              #line 2378 
              btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)15);
              #line 2380 
              coex_dm_1->ps_tdma_du_adj_type = (unsigned char)15U;
            }
            else 
              #line 2381 
              if ((unsigned int)coex_dm_1->cur_ps_tdma == 10U) {
                #line 2382 
                btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)15);
                #line 2384 
                coex_dm_1->ps_tdma_du_adj_type = (unsigned char)15U;
              }
              else 
                #line 2385 
                if ((unsigned int)coex_dm_1->cur_ps_tdma == 11U) {
                  #line 2386 
                  btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)15);
                  #line 2388 
                  coex_dm_1->ps_tdma_du_adj_type = (unsigned char)15U;
                }
                else 
                  #line 2389 
                  if ((unsigned int)coex_dm_1->cur_ps_tdma == 12U) {
                    #line 2390 
                    btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)16);
                    #line 2392 
                    coex_dm_1->ps_tdma_du_adj_type = (unsigned char)16U;
                  }
            #line 2394 
            if (result == -1) {
              #line 2395 
              if ((unsigned int)coex_dm_1->cur_ps_tdma == 5U) {
                #line 2396 
                btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)7);
                #line 2399 
                coex_dm_1->ps_tdma_du_adj_type = (unsigned char)7U;
              }
              else 
                #line 2401 
                if ((unsigned int)coex_dm_1->cur_ps_tdma == 6U) {
                  #line 2402 
                  btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)7);
                  #line 2405 
                  coex_dm_1->ps_tdma_du_adj_type = (unsigned char)7U;
                }
                else 
                  #line 2407 
                  if ((unsigned int)coex_dm_1->cur_ps_tdma == 7U) {
                    #line 2408 
                    btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)8);
                    #line 2411 
                    coex_dm_1->ps_tdma_du_adj_type = (unsigned char)8U;
                  }
                  else 
                    #line 2413 
                    if ((unsigned int)coex_dm_1->cur_ps_tdma == 13U) {
                      #line 2414 
                      btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)15);
                      #line 2417 
                      coex_dm_1->ps_tdma_du_adj_type = (unsigned char)15U;
                    }
                    else 
                      #line 2419 
                      if ((unsigned int)coex_dm_1->cur_ps_tdma == 14U) {
                        #line 2420 
                        btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)15);
                        #line 2423 
                        coex_dm_1->ps_tdma_du_adj_type = (unsigned char)15U;
                      }
                      else 
                        #line 2425 
                        if ((unsigned int)coex_dm_1->cur_ps_tdma == 15U) {
                          #line 2426 
                          btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)16);
                          #line 2429 
                          coex_dm_1->ps_tdma_du_adj_type = (unsigned char)16U;
                        }
            }
            else 
              #line 2432 
              if (result == 1) 
                #line 2433 
                if ((unsigned int)coex_dm_1->cur_ps_tdma == 8U) {
                  #line 2434 
                  btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)7);
                  #line 2437 
                  coex_dm_1->ps_tdma_du_adj_type = (unsigned char)7U;
                }
                else 
                  #line 2439 
                  if ((unsigned int)coex_dm_1->cur_ps_tdma == 7U) {
                    #line 2440 
                    btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)7);
                    #line 2443 
                    coex_dm_1->ps_tdma_du_adj_type = (unsigned char)7U;
                  }
                  else 
                    #line 2445 
                    if ((unsigned int)coex_dm_1->cur_ps_tdma == 6U) {
                      #line 2446 
                      btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)7);
                      #line 2449 
                      coex_dm_1->ps_tdma_du_adj_type = (unsigned char)7U;
                    }
                    else 
                      #line 2451 
                      if ((unsigned int)coex_dm_1->cur_ps_tdma == 16U) {
                        #line 2452 
                        btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)15);
                        #line 2455 
                        coex_dm_1->ps_tdma_du_adj_type = (unsigned char)15U;
                      }
                      else 
                        #line 2457 
                        if ((unsigned int)coex_dm_1->cur_ps_tdma == 15U) {
                          #line 2458 
                          btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)15);
                          #line 2461 
                          coex_dm_1->ps_tdma_du_adj_type = (unsigned char)15U;
                        }
                        else 
                          #line 2463 
                          if ((unsigned int)coex_dm_1->cur_ps_tdma == 14U) {
                            #line 2464 
                            btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)15);
                            #line 2467 
                            coex_dm_1->ps_tdma_du_adj_type = (unsigned char)15U;
                          }
          }
          else {
            #line 2472 
            if ((unsigned int)coex_dm_1->cur_ps_tdma == 5U) {
              #line 2473 
              btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)3);
              #line 2475 
              coex_dm_1->ps_tdma_du_adj_type = (unsigned char)3U;
            }
            else 
              #line 2476 
              if ((unsigned int)coex_dm_1->cur_ps_tdma == 6U) {
                #line 2477 
                btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)3);
                #line 2479 
                coex_dm_1->ps_tdma_du_adj_type = (unsigned char)3U;
              }
              else 
                #line 2480 
                if ((unsigned int)coex_dm_1->cur_ps_tdma == 7U) {
                  #line 2481 
                  btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)3);
                  #line 2483 
                  coex_dm_1->ps_tdma_du_adj_type = (unsigned char)3U;
                }
                else 
                  #line 2484 
                  if ((unsigned int)coex_dm_1->cur_ps_tdma == 8U) {
                    #line 2485 
                    btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)4);
                    #line 2487 
                    coex_dm_1->ps_tdma_du_adj_type = (unsigned char)4U;
                  }
            #line 2489 
            if ((unsigned int)coex_dm_1->cur_ps_tdma == 13U) {
              #line 2490 
              btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)11);
              #line 2492 
              coex_dm_1->ps_tdma_du_adj_type = (unsigned char)11U;
            }
            else 
              #line 2493 
              if ((unsigned int)coex_dm_1->cur_ps_tdma == 14U) {
                #line 2494 
                btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)11);
                #line 2496 
                coex_dm_1->ps_tdma_du_adj_type = (unsigned char)11U;
              }
              else 
                #line 2497 
                if ((unsigned int)coex_dm_1->cur_ps_tdma == 15U) {
                  #line 2498 
                  btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)11);
                  #line 2500 
                  coex_dm_1->ps_tdma_du_adj_type = (unsigned char)11U;
                }
                else 
                  #line 2501 
                  if ((unsigned int)coex_dm_1->cur_ps_tdma == 16U) {
                    #line 2502 
                    btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)12);
                    #line 2504 
                    coex_dm_1->ps_tdma_du_adj_type = (unsigned char)12U;
                  }
            #line 2506 
            if (result == -1) {
              #line 2507 
              if ((unsigned int)coex_dm_1->cur_ps_tdma == 1U) {
                #line 2508 
                btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)3);
                #line 2511 
                coex_dm_1->ps_tdma_du_adj_type = (unsigned char)3U;
              }
              else 
                #line 2513 
                if ((unsigned int)coex_dm_1->cur_ps_tdma == 2U) {
                  #line 2514 
                  btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)3);
                  #line 2517 
                  coex_dm_1->ps_tdma_du_adj_type = (unsigned char)3U;
                }
                else 
                  #line 2519 
                  if ((unsigned int)coex_dm_1->cur_ps_tdma == 3U) {
                    #line 2520 
                    btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)4);
                    #line 2523 
                    coex_dm_1->ps_tdma_du_adj_type = (unsigned char)4U;
                  }
                  else 
                    #line 2525 
                    if ((unsigned int)coex_dm_1->cur_ps_tdma == 9U) {
                      #line 2526 
                      btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)11);
                      #line 2529 
                      coex_dm_1->ps_tdma_du_adj_type = (unsigned char)11U;
                    }
                    else 
                      #line 2531 
                      if ((unsigned int)coex_dm_1->cur_ps_tdma == 10U) {
                        #line 2532 
                        btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)11);
                        #line 2535 
                        coex_dm_1->ps_tdma_du_adj_type = (unsigned char)11U;
                      }
                      else 
                        #line 2537 
                        if ((unsigned int)coex_dm_1->cur_ps_tdma == 11U) {
                          #line 2538 
                          btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)12);
                          #line 2541 
                          coex_dm_1->ps_tdma_du_adj_type = (unsigned char)12U;
                        }
            }
            else 
              #line 2544 
              if (result == 1) 
                #line 2545 
                if ((unsigned int)coex_dm_1->cur_ps_tdma == 4U) {
                  #line 2546 
                  btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)3);
                  #line 2549 
                  coex_dm_1->ps_tdma_du_adj_type = (unsigned char)3U;
                }
                else 
                  #line 2551 
                  if ((unsigned int)coex_dm_1->cur_ps_tdma == 3U) {
                    #line 2552 
                    btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)3);
                    #line 2555 
                    coex_dm_1->ps_tdma_du_adj_type = (unsigned char)3U;
                  }
                  else 
                    #line 2557 
                    if ((unsigned int)coex_dm_1->cur_ps_tdma == 2U) {
                      #line 2558 
                      btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)3);
                      #line 2561 
                      coex_dm_1->ps_tdma_du_adj_type = (unsigned char)3U;
                    }
                    else 
                      #line 2563 
                      if ((unsigned int)coex_dm_1->cur_ps_tdma == 12U) {
                        #line 2564 
                        btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)11);
                        #line 2567 
                        coex_dm_1->ps_tdma_du_adj_type = (unsigned char)11U;
                      }
                      else 
                        #line 2569 
                        if ((unsigned int)coex_dm_1->cur_ps_tdma == 11U) {
                          #line 2570 
                          btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)11);
                          #line 2573 
                          coex_dm_1->ps_tdma_du_adj_type = (unsigned char)11U;
                        }
                        else 
                          #line 2575 
                          if ((unsigned int)coex_dm_1->cur_ps_tdma == 10U) {
                            #line 2576 
                            btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)11);
                            #line 2579 
                            coex_dm_1->ps_tdma_du_adj_type = (unsigned char)11U;
                          }
          }
  }
  #line 2591 
  if ((int)coex_dm_1->cur_ps_tdma != (int)coex_dm_1->ps_tdma_du_adj_type) {
    #line 2592 
    bool scan = (_Bool)0;
    #line 2592 
    bool link = (_Bool)0;
    #line 2592 
    bool roam = (_Bool)0;
    #line 2594 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], PsTdma type mismatch!!!, cur_ps_tdma = %d, recordPsTdma = %d\n",(int)coex_dm_1->cur_ps_tdma,(int)coex_dm_1->ps_tdma_du_adj_type);
    #line 2598 
    (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)5,(void *)(& scan));
    #line 2599 
    (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)6,(void *)(& link));
    #line 2600 
    (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)11,(void *)(& roam));
    #line 2602 
    if ((! scan && ! link) && ! roam) 
                                      #line 2603 
                                      btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)((int)coex_dm_1->ps_tdma_du_adj_type)); else 
                                                                    #line 2606 
                                                                    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], roaming/link/scan is under progress, will adjust next time!!!\n");
  }
  #line 2608 
  return;
}

#line 2613  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.c"
static void btc8821a2ant_action_sco(struct btc_coexist *btcoexist)
{
  #line 2616 
  u8 wifi_rssi_state;
  #line 2616 
  u8 bt_rssi_state;
  #line 2617 
  u32 wifi_bw;
  #line 2615 
  struct btc_bt_link_info *bt_link_info = & btcoexist->bt_link_info;
  #line 2619 
  wifi_rssi_state = btc8821a2ant_wifi_rssi_state(btcoexist,(unsigned char)0,(unsigned char)2,(unsigned char)15,(unsigned char)0);
  #line 2620 
  bt_rssi_state = btc8821a2ant_bt_rssi_state(btcoexist,(unsigned char)2,(unsigned char)35,(unsigned char)0);
  #line 2622 
  (*(btcoexist->btc_set_rf_reg))((void *)btcoexist,(unsigned char)0,1U,1048575U,0U);
  #line 2624 
  btc8821a2ant_limited_rx(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,(unsigned char)8);
  #line 2625 
  btc8821a2ant_fw_dac_swing_lvl(btcoexist,(_Bool)0,(unsigned char)4);
  #line 2627 
  if ((unsigned int)bt_rssi_state == 0U || (unsigned int)bt_rssi_state == 3U) 
    #line 2628 
    btc8821a2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)1); else 
                                                                    #line 2630 
                                                                    btc8821a2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)0);
  #line 2632 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)24,(void *)(& wifi_bw));
  #line 2634 
  if (wifi_bw == 0U) 
                     #line 2636 
                     btc8821a2ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)2);
  else 
    #line 2639 
    if (wifi_bw == 2U) 
                       #line 2640 
                       btc8821a2ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)8);
    else 
      #line 2643 
      if ((int)bt_link_info->sco_only != 0) 
                                            #line 2644 
                                            btc8821a2ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)17); else 
                                                                    #line 2647 
                                                                    btc8821a2ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)12);
  #line 2652 
  btc8821a2ant_power_save_state(btcoexist,(unsigned char)0,(unsigned char)0,(unsigned char)0);
  #line 2654 
  btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)0,(unsigned char)0);
  #line 2657 
  if (wifi_bw == 2U) 
    #line 2658 
    if ((unsigned int)wifi_rssi_state == 0U || (unsigned int)wifi_rssi_state == 3U) {
      #line 2660 
      btc8821a2ant_sw_mechanism1(btcoexist,(_Bool)1,(_Bool)1,(_Bool)0,(_Bool)0);
      #line 2662 
      btc8821a2ant_sw_mechanism2(btcoexist,(_Bool)1,(_Bool)0,(_Bool)1,24U);
    }
    else {
      #line 2665 
      btc8821a2ant_sw_mechanism1(btcoexist,(_Bool)1,(_Bool)1,(_Bool)0,(_Bool)0);
      #line 2667 
      btc8821a2ant_sw_mechanism2(btcoexist,(_Bool)0,(_Bool)0,(_Bool)1,24U);
    }
  else 
    #line 2671 
    if ((unsigned int)wifi_rssi_state == 0U || (unsigned int)wifi_rssi_state == 3U) {
      #line 2673 
      btc8821a2ant_sw_mechanism1(btcoexist,(_Bool)0,(_Bool)1,(_Bool)0,(_Bool)0);
      #line 2675 
      btc8821a2ant_sw_mechanism2(btcoexist,(_Bool)1,(_Bool)0,(_Bool)1,24U);
    }
    else {
      #line 2678 
      btc8821a2ant_sw_mechanism1(btcoexist,(_Bool)0,(_Bool)1,(_Bool)0,(_Bool)0);
      #line 2680 
      btc8821a2ant_sw_mechanism2(btcoexist,(_Bool)0,(_Bool)0,(_Bool)1,24U);
    }
  #line 2682 
  return;
}

#line 2686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.c"
static void btc8821a2ant_action_hid(struct btc_coexist *btcoexist)
{
  #line 2688 
  u8 wifi_rssi_state;
  #line 2688 
  u8 bt_rssi_state;
  #line 2689 
  u32 wifi_bw;
  #line 2691 
  wifi_rssi_state = btc8821a2ant_wifi_rssi_state(btcoexist,(unsigned char)0,(unsigned char)2,(unsigned char)15,(unsigned char)0);
  #line 2692 
  bt_rssi_state = btc8821a2ant_bt_rssi_state(btcoexist,(unsigned char)2,(unsigned char)46,(unsigned char)0);
  #line 2695 
  (*(btcoexist->btc_set_rf_reg))((void *)btcoexist,(unsigned char)0,1U,1048575U,0U);
  #line 2697 
  btc8821a2ant_limited_rx(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,(unsigned char)8);
  #line 2698 
  btc8821a2ant_fw_dac_swing_lvl(btcoexist,(_Bool)0,(unsigned char)6);
  #line 2700 
  if ((unsigned int)bt_rssi_state == 0U || (unsigned int)bt_rssi_state == 3U) 
    #line 2701 
    btc8821a2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)1); else 
                                                                    #line 2703 
                                                                    btc8821a2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)0);
  #line 2705 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)24,(void *)(& wifi_bw));
  #line 2707 
  if (wifi_bw == 0U) 
                     #line 2709 
                     btc8821a2ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)7); else 
                                                                    #line 2712 
                                                                    btc8821a2ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)2);
  #line 2715 
  btc8821a2ant_power_save_state(btcoexist,(unsigned char)0,(unsigned char)0,(unsigned char)0);
  #line 2716 
  btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)24);
  #line 2718 
  if (wifi_bw == 2U) 
    #line 2720 
    if ((unsigned int)wifi_rssi_state == 0U || (unsigned int)wifi_rssi_state == 3U) {
      #line 2722 
      btc8821a2ant_sw_mechanism1(btcoexist,(_Bool)1,(_Bool)1,(_Bool)0,(_Bool)0);
      #line 2724 
      btc8821a2ant_sw_mechanism2(btcoexist,(_Bool)1,(_Bool)0,(_Bool)0,24U);
    }
    else {
      #line 2727 
      btc8821a2ant_sw_mechanism1(btcoexist,(_Bool)1,(_Bool)1,(_Bool)0,(_Bool)0);
      #line 2729 
      btc8821a2ant_sw_mechanism2(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,24U);
    }
  else 
    #line 2734 
    if ((unsigned int)wifi_rssi_state == 0U || (unsigned int)wifi_rssi_state == 3U) {
      #line 2736 
      btc8821a2ant_sw_mechanism1(btcoexist,(_Bool)0,(_Bool)1,(_Bool)0,(_Bool)0);
      #line 2738 
      btc8821a2ant_sw_mechanism2(btcoexist,(_Bool)1,(_Bool)0,(_Bool)0,24U);
    }
    else {
      #line 2741 
      btc8821a2ant_sw_mechanism1(btcoexist,(_Bool)0,(_Bool)1,(_Bool)0,(_Bool)0);
      #line 2743 
      btc8821a2ant_sw_mechanism2(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,24U);
    }
  #line 2745 
  return;
}

#line 2750  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.c"
static void btc8821a2ant_action_a2dp(struct btc_coexist *btcoexist)
{
  #line 2752 
  u8 wifi_rssi_state;
  #line 2752 
  u8 wifi_rssi_state1;
  #line 2752 
  u8 bt_rssi_state;
  #line 2754 
  u32 wifi_bw;
  #line 2753 
  u8 ap_num = (unsigned char)0U;
  #line 2756 
  wifi_rssi_state = btc8821a2ant_wifi_rssi_state(btcoexist,(unsigned char)0,(unsigned char)2,(unsigned char)15,(unsigned char)0);
  #line 2757 
  wifi_rssi_state1 = btc8821a2ant_wifi_rssi_state(btcoexist,(unsigned char)1,(unsigned char)2,(unsigned char)42,(unsigned char)0);
  #line 2759 
  bt_rssi_state = btc8821a2ant_bt_rssi_state(btcoexist,(unsigned char)2,(unsigned char)46,(unsigned char)0);
  #line 2762 
  if (((unsigned int)ap_num > 9U && ((unsigned int)wifi_rssi_state1 == 0U || (unsigned int)wifi_rssi_state1 == 3U)) && ((unsigned int)bt_rssi_state == 0U || (unsigned int)bt_rssi_state == 3U)) {
    #line 2764 
    btc8821a2ant_power_save_state(btcoexist,(unsigned char)0,(unsigned char)0,(unsigned char)0);
    #line 2767 
    (*(btcoexist->btc_set_rf_reg))((void *)btcoexist,(unsigned char)0,1U,1048575U,0U);
    #line 2769 
    btc8821a2ant_limited_rx(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,(unsigned char)8);
    #line 2771 
    btc8821a2ant_fw_dac_swing_lvl(btcoexist,(_Bool)0,(unsigned char)6);
    #line 2772 
    btc8821a2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)2);
    #line 2774 
    btc8821a2ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)0);
    #line 2776 
    btc8821a2ant_power_save_state(btcoexist,(unsigned char)0,(unsigned char)0,(unsigned char)0);
    #line 2778 
    btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)23);
    #line 2781 
    (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)24,(void *)(& wifi_bw));
    #line 2782 
    if (wifi_bw == 2U) {
      #line 2783 
      btc8821a2ant_sw_mechanism1(btcoexist,(_Bool)1,(_Bool)0,(_Bool)0,(_Bool)0);
      #line 2785 
      btc8821a2ant_sw_mechanism2(btcoexist,(_Bool)1,(_Bool)0,(_Bool)1,6U);
    }
    else {
      #line 2788 
      btc8821a2ant_sw_mechanism1(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,(_Bool)0);
      #line 2790 
      btc8821a2ant_sw_mechanism2(btcoexist,(_Bool)1,(_Bool)0,(_Bool)1,6U);
    }
    #line 2793 
    return;
  }
  #line 2796 
  (*(btcoexist->btc_set_rf_reg))((void *)btcoexist,(unsigned char)0,1U,1048575U,0U);
  #line 2797 
  btc8821a2ant_limited_rx(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,(unsigned char)8);
  #line 2799 
  btc8821a2ant_fw_dac_swing_lvl(btcoexist,(_Bool)0,(unsigned char)6);
  #line 2801 
  if ((unsigned int)bt_rssi_state == 0U || (unsigned int)bt_rssi_state == 3U) 
    #line 2802 
    btc8821a2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)2); else 
                                                                    #line 2804 
                                                                    btc8821a2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)0);
  #line 2806 
  if (((unsigned int)wifi_rssi_state1 == 0U || (unsigned int)wifi_rssi_state1 == 3U) && ((unsigned int)bt_rssi_state == 0U || (unsigned int)bt_rssi_state == 3U)) {
    #line 2807 
    btc8821a2ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)7);
    #line 2808 
    btc8821a2ant_power_save_state(btcoexist,(unsigned char)0,(unsigned char)0,(unsigned char)0);
  }
  else {
    #line 2811 
    btc8821a2ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)13);
    #line 2812 
    btc8821a2ant_power_save_state(btcoexist,(unsigned char)1,(unsigned char)80,(unsigned char)4);
  }
  #line 2816 
  if ((unsigned int)bt_rssi_state == 0U || (unsigned int)bt_rssi_state == 3U) 
    #line 2818 
    btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)23); else 
                                                                    #line 2820 
                                                                    btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)23);
  #line 2824 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)24,(void *)(& wifi_bw));
  #line 2825 
  if (wifi_bw == 2U) 
    #line 2826 
    if ((unsigned int)wifi_rssi_state == 0U || (unsigned int)wifi_rssi_state == 3U) {
      #line 2828 
      btc8821a2ant_sw_mechanism1(btcoexist,(_Bool)1,(_Bool)0,(_Bool)0,(_Bool)0);
      #line 2830 
      btc8821a2ant_sw_mechanism2(btcoexist,(_Bool)1,(_Bool)0,(_Bool)0,24U);
    }
    else {
      #line 2833 
      btc8821a2ant_sw_mechanism1(btcoexist,(_Bool)1,(_Bool)0,(_Bool)0,(_Bool)0);
      #line 2835 
      btc8821a2ant_sw_mechanism2(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,24U);
    }
  else 
    #line 2839 
    if ((unsigned int)wifi_rssi_state == 0U || (unsigned int)wifi_rssi_state == 3U) {
      #line 2841 
      btc8821a2ant_sw_mechanism1(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,(_Bool)0);
      #line 2843 
      btc8821a2ant_sw_mechanism2(btcoexist,(_Bool)1,(_Bool)0,(_Bool)0,24U);
    }
    else {
      #line 2846 
      btc8821a2ant_sw_mechanism1(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,(_Bool)0);
      #line 2848 
      btc8821a2ant_sw_mechanism2(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,24U);
    }
  #line 2850 
  return;
}

#line 2854  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.c"
static void btc8821a2ant_action_a2dp_pan_hs(struct btc_coexist *btcoexist)
{
  #line 2856 
  u8 wifi_rssi_state;
  #line 2856 
  u8 wifi_rssi_state1;
  #line 2856 
  u8 bt_rssi_state;
  #line 2857 
  u32 wifi_bw;
  #line 2859 
  wifi_rssi_state = btc8821a2ant_wifi_rssi_state(btcoexist,(unsigned char)0,(unsigned char)2,(unsigned char)15,(unsigned char)0);
  #line 2860 
  wifi_rssi_state1 = btc8821a2ant_wifi_rssi_state(btcoexist,(unsigned char)1,(unsigned char)2,(unsigned char)42,(unsigned char)0);
  #line 2862 
  bt_rssi_state = btc8821a2ant_bt_rssi_state(btcoexist,(unsigned char)2,(unsigned char)46,(unsigned char)0);
  #line 2865 
  (*(btcoexist->btc_set_rf_reg))((void *)btcoexist,(unsigned char)0,1U,1048575U,0U);
  #line 2867 
  btc8821a2ant_limited_rx(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,(unsigned char)8);
  #line 2868 
  btc8821a2ant_fw_dac_swing_lvl(btcoexist,(_Bool)0,(unsigned char)6);
  #line 2870 
  if ((unsigned int)bt_rssi_state == 0U || (unsigned int)bt_rssi_state == 3U) 
    #line 2871 
    btc8821a2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)2); else 
                                                                    #line 2873 
                                                                    btc8821a2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)0);
  #line 2875 
  if (((unsigned int)wifi_rssi_state1 == 0U || (unsigned int)wifi_rssi_state1 == 3U) && ((unsigned int)bt_rssi_state == 0U || (unsigned int)bt_rssi_state == 3U)) {
    #line 2876 
    btc8821a2ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)7);
    #line 2877 
    btc8821a2ant_power_save_state(btcoexist,(unsigned char)0,(unsigned char)0,(unsigned char)0);
  }
  else {
    #line 2880 
    btc8821a2ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)13);
    #line 2881 
    btc8821a2ant_power_save_state(btcoexist,(unsigned char)1,(unsigned char)80,(unsigned char)4);
  }
  #line 2885 
  btc8821a2ant_tdma_duration_adjust(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)2);
  #line 2888 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)24,(void *)(& wifi_bw));
  #line 2889 
  if (wifi_bw == 2U) 
    #line 2890 
    if ((unsigned int)wifi_rssi_state == 0U || (unsigned int)wifi_rssi_state == 3U) {
      #line 2892 
      btc8821a2ant_sw_mechanism1(btcoexist,(_Bool)1,(_Bool)0,(_Bool)0,(_Bool)0);
      #line 2894 
      btc8821a2ant_sw_mechanism2(btcoexist,(_Bool)1,(_Bool)0,(_Bool)0,24U);
    }
    else {
      #line 2897 
      btc8821a2ant_sw_mechanism1(btcoexist,(_Bool)1,(_Bool)0,(_Bool)0,(_Bool)0);
      #line 2899 
      btc8821a2ant_sw_mechanism2(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,24U);
    }
  else 
    #line 2903 
    if ((unsigned int)wifi_rssi_state == 0U || (unsigned int)wifi_rssi_state == 3U) {
      #line 2905 
      btc8821a2ant_sw_mechanism1(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,(_Bool)0);
      #line 2907 
      btc8821a2ant_sw_mechanism2(btcoexist,(_Bool)1,(_Bool)0,(_Bool)0,24U);
    }
    else {
      #line 2910 
      btc8821a2ant_sw_mechanism1(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,(_Bool)0);
      #line 2912 
      btc8821a2ant_sw_mechanism2(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,24U);
    }
  #line 2914 
  return;
}

#line 2918  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.c"
static void btc8821a2ant_action_pan_edr(struct btc_coexist *btcoexist)
{
  #line 2920 
  u8 wifi_rssi_state;
  #line 2920 
  u8 wifi_rssi_state1;
  #line 2920 
  u8 bt_rssi_state;
  #line 2921 
  u32 wifi_bw;
  #line 2923 
  wifi_rssi_state = btc8821a2ant_wifi_rssi_state(btcoexist,(unsigned char)0,(unsigned char)2,(unsigned char)15,(unsigned char)0);
  #line 2924 
  wifi_rssi_state1 = btc8821a2ant_wifi_rssi_state(btcoexist,(unsigned char)1,(unsigned char)2,(unsigned char)42,(unsigned char)0);
  #line 2926 
  bt_rssi_state = btc8821a2ant_bt_rssi_state(btcoexist,(unsigned char)2,(unsigned char)46,(unsigned char)0);
  #line 2929 
  (*(btcoexist->btc_set_rf_reg))((void *)btcoexist,(unsigned char)0,1U,1048575U,0U);
  #line 2931 
  btc8821a2ant_limited_rx(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,(unsigned char)8);
  #line 2933 
  btc8821a2ant_fw_dac_swing_lvl(btcoexist,(_Bool)0,(unsigned char)6);
  #line 2935 
  if ((unsigned int)bt_rssi_state == 0U || (unsigned int)bt_rssi_state == 3U) 
    #line 2936 
    btc8821a2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)1); else 
                                                                    #line 2938 
                                                                    btc8821a2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)0);
  #line 2940 
  if (((unsigned int)wifi_rssi_state1 == 0U || (unsigned int)wifi_rssi_state1 == 3U) && ((unsigned int)bt_rssi_state == 0U || (unsigned int)bt_rssi_state == 3U)) {
    #line 2941 
    btc8821a2ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)10);
    #line 2942 
    btc8821a2ant_power_save_state(btcoexist,(unsigned char)0,(unsigned char)0,(unsigned char)0);
  }
  else {
    #line 2945 
    btc8821a2ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)13);
    #line 2946 
    btc8821a2ant_power_save_state(btcoexist,(unsigned char)1,(unsigned char)80,(unsigned char)4);
  }
  #line 2950 
  if ((unsigned int)bt_rssi_state == 0U || (unsigned int)bt_rssi_state == 3U) 
    #line 2952 
    btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)26); else 
                                                                    #line 2954 
                                                                    btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)26);
  #line 2957 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)24,(void *)(& wifi_bw));
  #line 2958 
  if (wifi_bw == 2U) 
    #line 2959 
    if ((unsigned int)wifi_rssi_state == 0U || (unsigned int)wifi_rssi_state == 3U) {
      #line 2961 
      btc8821a2ant_sw_mechanism1(btcoexist,(_Bool)1,(_Bool)0,(_Bool)0,(_Bool)0);
      #line 2963 
      btc8821a2ant_sw_mechanism2(btcoexist,(_Bool)1,(_Bool)0,(_Bool)0,24U);
    }
    else {
      #line 2966 
      btc8821a2ant_sw_mechanism1(btcoexist,(_Bool)1,(_Bool)0,(_Bool)0,(_Bool)0);
      #line 2968 
      btc8821a2ant_sw_mechanism2(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,24U);
    }
  else 
    #line 2972 
    if ((unsigned int)wifi_rssi_state == 0U || (unsigned int)wifi_rssi_state == 3U) {
      #line 2974 
      btc8821a2ant_sw_mechanism1(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,(_Bool)0);
      #line 2976 
      btc8821a2ant_sw_mechanism2(btcoexist,(_Bool)1,(_Bool)0,(_Bool)0,24U);
    }
    else {
      #line 2979 
      btc8821a2ant_sw_mechanism1(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,(_Bool)0);
      #line 2981 
      btc8821a2ant_sw_mechanism2(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,24U);
    }
  #line 2983 
  return;
}

#line 2988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.c"
static void btc8821a2ant_action_pan_hs(struct btc_coexist *btcoexist)
{
  #line 2990 
  u8 wifi_rssi_state;
  #line 2990 
  u8 wifi_rssi_state1;
  #line 2990 
  u8 bt_rssi_state;
  #line 2991 
  u32 wifi_bw;
  #line 2993 
  wifi_rssi_state = btc8821a2ant_wifi_rssi_state(btcoexist,(unsigned char)0,(unsigned char)2,(unsigned char)15,(unsigned char)0);
  #line 2994 
  wifi_rssi_state1 = btc8821a2ant_wifi_rssi_state(btcoexist,(unsigned char)1,(unsigned char)2,(unsigned char)42,(unsigned char)0);
  #line 2996 
  bt_rssi_state = btc8821a2ant_bt_rssi_state(btcoexist,(unsigned char)2,(unsigned char)46,(unsigned char)0);
  #line 2999 
  (*(btcoexist->btc_set_rf_reg))((void *)btcoexist,(unsigned char)0,1U,1048575U,0U);
  #line 3001 
  btc8821a2ant_limited_rx(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,(unsigned char)8);
  #line 3002 
  btc8821a2ant_fw_dac_swing_lvl(btcoexist,(_Bool)0,(unsigned char)6);
  #line 3004 
  if ((unsigned int)bt_rssi_state == 0U || (unsigned int)bt_rssi_state == 3U) 
    #line 3005 
    btc8821a2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)2); else 
                                                                    #line 3007 
                                                                    btc8821a2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)0);
  #line 3009 
  btc8821a2ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)7);
  #line 3010 
  btc8821a2ant_power_save_state(btcoexist,(unsigned char)0,(unsigned char)0,(unsigned char)0);
  #line 3011 
  btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)0,(unsigned char)1);
  #line 3013 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)24,(void *)(& wifi_bw));
  #line 3014 
  if (wifi_bw == 2U) 
    #line 3015 
    if ((unsigned int)wifi_rssi_state == 0U || (unsigned int)wifi_rssi_state == 3U) {
      #line 3017 
      btc8821a2ant_sw_mechanism1(btcoexist,(_Bool)1,(_Bool)0,(_Bool)0,(_Bool)0);
      #line 3019 
      btc8821a2ant_sw_mechanism2(btcoexist,(_Bool)1,(_Bool)0,(_Bool)0,24U);
    }
    else {
      #line 3022 
      btc8821a2ant_sw_mechanism1(btcoexist,(_Bool)1,(_Bool)0,(_Bool)0,(_Bool)0);
      #line 3024 
      btc8821a2ant_sw_mechanism2(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,24U);
    }
  else 
    #line 3028 
    if ((unsigned int)wifi_rssi_state == 0U || (unsigned int)wifi_rssi_state == 3U) {
      #line 3030 
      btc8821a2ant_sw_mechanism1(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,(_Bool)0);
      #line 3032 
      btc8821a2ant_sw_mechanism2(btcoexist,(_Bool)1,(_Bool)0,(_Bool)0,24U);
    }
    else {
      #line 3035 
      btc8821a2ant_sw_mechanism1(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,(_Bool)0);
      #line 3037 
      btc8821a2ant_sw_mechanism2(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,24U);
    }
  #line 3039 
  return;
}

#line 3044  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.c"
static void btc8821a2ant_action_pan_edr_a2dp(struct btc_coexist *btcoexist)
{
  #line 3046 
  u8 wifi_rssi_state;
  #line 3046 
  u8 wifi_rssi_state1;
  #line 3046 
  u8 bt_rssi_state;
  #line 3047 
  u32 wifi_bw;
  #line 3049 
  wifi_rssi_state = btc8821a2ant_wifi_rssi_state(btcoexist,(unsigned char)0,(unsigned char)2,(unsigned char)15,(unsigned char)0);
  #line 3050 
  wifi_rssi_state1 = btc8821a2ant_wifi_rssi_state(btcoexist,(unsigned char)1,(unsigned char)2,(unsigned char)42,(unsigned char)0);
  #line 3052 
  bt_rssi_state = btc8821a2ant_bt_rssi_state(btcoexist,(unsigned char)2,(unsigned char)46,(unsigned char)0);
  #line 3055 
  (*(btcoexist->btc_set_rf_reg))((void *)btcoexist,(unsigned char)0,1U,1048575U,0U);
  #line 3057 
  btc8821a2ant_limited_rx(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,(unsigned char)8);
  #line 3059 
  btc8821a2ant_fw_dac_swing_lvl(btcoexist,(_Bool)0,(unsigned char)6);
  #line 3061 
  if ((unsigned int)bt_rssi_state == 0U || (unsigned int)bt_rssi_state == 3U) 
    #line 3062 
    btc8821a2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)2); else 
                                                                    #line 3064 
                                                                    btc8821a2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)0);
  #line 3066 
  if (((unsigned int)wifi_rssi_state1 == 0U || (unsigned int)wifi_rssi_state1 == 3U) && ((unsigned int)bt_rssi_state == 0U || (unsigned int)bt_rssi_state == 3U)) 
    #line 3067 
    btc8821a2ant_power_save_state(btcoexist,(unsigned char)0,(unsigned char)0,(unsigned char)0); else 
                                                                    #line 3070 
                                                                    btc8821a2ant_power_save_state(btcoexist,(unsigned char)1,(unsigned char)80,(unsigned char)4);
  #line 3073 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)24,(void *)(& wifi_bw));
  #line 3075 
  if ((unsigned int)bt_rssi_state == 0U || (unsigned int)bt_rssi_state == 3U) {
    #line 3077 
    btc8821a2ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)12);
    #line 3079 
    if (wifi_bw == 2U) 
                       #line 3080 
                       btc8821a2ant_tdma_duration_adjust(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)3); else 
                                                                    #line 3083 
                                                                    btc8821a2ant_tdma_duration_adjust(btcoexist,(_Bool)0,(_Bool)0,(unsigned char)3);
  }
  else {
    #line 3086 
    btc8821a2ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)13);
    #line 3087 
    btc8821a2ant_tdma_duration_adjust(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)3);
  }
  #line 3091 
  if (wifi_bw == 2U) 
    #line 3092 
    if ((unsigned int)wifi_rssi_state == 0U || (unsigned int)wifi_rssi_state == 3U) {
      #line 3094 
      btc8821a2ant_sw_mechanism1(btcoexist,(_Bool)1,(_Bool)0,(_Bool)0,(_Bool)0);
      #line 3096 
      btc8821a2ant_sw_mechanism2(btcoexist,(_Bool)1,(_Bool)0,(_Bool)0,24U);
    }
    else {
      #line 3099 
      btc8821a2ant_sw_mechanism1(btcoexist,(_Bool)1,(_Bool)0,(_Bool)0,(_Bool)0);
      #line 3101 
      btc8821a2ant_sw_mechanism2(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,24U);
    }
  else 
    #line 3105 
    if ((unsigned int)wifi_rssi_state == 0U || (unsigned int)wifi_rssi_state == 3U) {
      #line 3107 
      btc8821a2ant_sw_mechanism1(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,(_Bool)0);
      #line 3109 
      btc8821a2ant_sw_mechanism2(btcoexist,(_Bool)1,(_Bool)0,(_Bool)0,24U);
    }
    else {
      #line 3112 
      btc8821a2ant_sw_mechanism1(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,(_Bool)0);
      #line 3114 
      btc8821a2ant_sw_mechanism2(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,24U);
    }
  #line 3116 
  return;
}

#line 3120  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.c"
static void btc8821a2ant_action_pan_edr_hid(struct btc_coexist *btcoexist)
{
  #line 3122 
  u8 wifi_rssi_state;
  #line 3122 
  u8 bt_rssi_state;
  #line 3123 
  u32 wifi_bw;
  #line 3125 
  wifi_rssi_state = btc8821a2ant_wifi_rssi_state(btcoexist,(unsigned char)0,(unsigned char)2,(unsigned char)15,(unsigned char)0);
  #line 3126 
  bt_rssi_state = btc8821a2ant_bt_rssi_state(btcoexist,(unsigned char)2,(unsigned char)46,(unsigned char)0);
  #line 3129 
  btc8821a2ant_fw_dac_swing_lvl(btcoexist,(_Bool)0,(unsigned char)6);
  #line 3131 
  if ((unsigned int)bt_rssi_state == 0U || (unsigned int)bt_rssi_state == 3U) 
    #line 3132 
    btc8821a2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)1); else 
                                                                    #line 3134 
                                                                    btc8821a2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)0);
  #line 3136 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)24,(void *)(& wifi_bw));
  #line 3138 
  if (wifi_bw == 0U) 
                     #line 3140 
                     btc8821a2ant_coex_table(btcoexist,(_Bool)0,1442797055U,1516198495U,65535U,(unsigned char)3); else 
                                                                    #line 3144 
                                                                    btc8821a2ant_coex_table(btcoexist,(_Bool)0,1442797055U,1516198495U,65535U,(unsigned char)3);
  #line 3148 
  if (wifi_bw == 2U) {
    #line 3149 
    btc8821a2ant_fw_dac_swing_lvl(btcoexist,(_Bool)0,(unsigned char)3);
    #line 3151 
    if ((unsigned int)bt_rssi_state == 0U || (unsigned int)bt_rssi_state == 3U) 
      #line 3153 
      btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)10); else 
                                                                    #line 3156 
                                                                    btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)14);
    #line 3160 
    if ((unsigned int)wifi_rssi_state == 0U || (unsigned int)wifi_rssi_state == 3U) {
      #line 3162 
      btc8821a2ant_sw_mechanism1(btcoexist,(_Bool)1,(_Bool)1,(_Bool)0,(_Bool)0);
      #line 3164 
      btc8821a2ant_sw_mechanism2(btcoexist,(_Bool)1,(_Bool)0,(_Bool)0,24U);
    }
    else {
      #line 3167 
      btc8821a2ant_sw_mechanism1(btcoexist,(_Bool)1,(_Bool)1,(_Bool)0,(_Bool)0);
      #line 3169 
      btc8821a2ant_sw_mechanism2(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,24U);
    }
  }
  else {
    #line 3173 
    btc8821a2ant_fw_dac_swing_lvl(btcoexist,(_Bool)0,(unsigned char)6);
    #line 3175 
    if ((unsigned int)bt_rssi_state == 0U || (unsigned int)bt_rssi_state == 3U) 
      #line 3177 
      btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)10); else 
                                                                    #line 3179 
                                                                    btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)14);
    #line 3183 
    if ((unsigned int)wifi_rssi_state == 0U || (unsigned int)wifi_rssi_state == 3U) {
      #line 3185 
      btc8821a2ant_sw_mechanism1(btcoexist,(_Bool)0,(_Bool)1,(_Bool)0,(_Bool)0);
      #line 3187 
      btc8821a2ant_sw_mechanism2(btcoexist,(_Bool)1,(_Bool)0,(_Bool)0,24U);
    }
    else {
      #line 3190 
      btc8821a2ant_sw_mechanism1(btcoexist,(_Bool)0,(_Bool)1,(_Bool)0,(_Bool)0);
      #line 3192 
      btc8821a2ant_sw_mechanism2(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,24U);
    }
  }
  #line 3195 
  return;
}

#line 3199  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.c"
static void btc8821a2ant_act_hid_a2dp_pan_edr(struct btc_coexist *btcoexist)
{
  #line 3201 
  u8 wifi_rssi_state;
  #line 3201 
  u8 wifi_rssi_state1;
  #line 3201 
  u8 bt_rssi_state;
  #line 3202 
  u32 wifi_bw;
  #line 3204 
  wifi_rssi_state = btc8821a2ant_wifi_rssi_state(btcoexist,(unsigned char)0,(unsigned char)2,(unsigned char)15,(unsigned char)0);
  #line 3205 
  wifi_rssi_state1 = btc8821a2ant_wifi_rssi_state(btcoexist,(unsigned char)1,(unsigned char)2,(unsigned char)42,(unsigned char)0);
  #line 3207 
  bt_rssi_state = btc8821a2ant_bt_rssi_state(btcoexist,(unsigned char)2,(unsigned char)46,(unsigned char)0);
  #line 3210 
  (*(btcoexist->btc_set_rf_reg))((void *)btcoexist,(unsigned char)0,1U,1048575U,0U);
  #line 3212 
  btc8821a2ant_limited_rx(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,(unsigned char)8);
  #line 3213 
  btc8821a2ant_fw_dac_swing_lvl(btcoexist,(_Bool)0,(unsigned char)6);
  #line 3215 
  if ((unsigned int)bt_rssi_state == 0U || (unsigned int)bt_rssi_state == 3U) 
    #line 3216 
    btc8821a2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)2); else 
                                                                    #line 3218 
                                                                    btc8821a2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)0);
  #line 3220 
  if (((unsigned int)wifi_rssi_state1 == 0U || (unsigned int)wifi_rssi_state1 == 3U) && ((unsigned int)bt_rssi_state == 0U || (unsigned int)bt_rssi_state == 3U)) {
    #line 3221 
    btc8821a2ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)7);
    #line 3222 
    btc8821a2ant_power_save_state(btcoexist,(unsigned char)0,(unsigned char)0,(unsigned char)0);
  }
  else {
    #line 3225 
    btc8821a2ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)14);
    #line 3226 
    btc8821a2ant_power_save_state(btcoexist,(unsigned char)1,(unsigned char)80,(unsigned char)4);
  }
  #line 3230 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)24,(void *)(& wifi_bw));
  #line 3232 
  if ((unsigned int)bt_rssi_state == 0U || (unsigned int)bt_rssi_state == 3U) 
    #line 3234 
    if (wifi_bw == 2U) 
                       #line 3235 
                       btc8821a2ant_tdma_duration_adjust(btcoexist,(_Bool)1,(_Bool)1,(unsigned char)3); else 
                                                                    #line 3238 
                                                                    btc8821a2ant_tdma_duration_adjust(btcoexist,(_Bool)1,(_Bool)0,(unsigned char)3);
  else 
       #line 3241 
       btc8821a2ant_tdma_duration_adjust(btcoexist,(_Bool)1,(_Bool)1,(unsigned char)3);
  #line 3245 
  if (wifi_bw == 2U) 
    #line 3246 
    if ((unsigned int)wifi_rssi_state == 0U || (unsigned int)wifi_rssi_state == 3U) {
      #line 3248 
      btc8821a2ant_sw_mechanism1(btcoexist,(_Bool)1,(_Bool)1,(_Bool)0,(_Bool)0);
      #line 3250 
      btc8821a2ant_sw_mechanism2(btcoexist,(_Bool)1,(_Bool)0,(_Bool)0,24U);
    }
    else {
      #line 3253 
      btc8821a2ant_sw_mechanism1(btcoexist,(_Bool)1,(_Bool)1,(_Bool)0,(_Bool)0);
      #line 3255 
      btc8821a2ant_sw_mechanism2(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,24U);
    }
  else 
    #line 3259 
    if ((unsigned int)wifi_rssi_state == 0U || (unsigned int)wifi_rssi_state == 3U) {
      #line 3261 
      btc8821a2ant_sw_mechanism1(btcoexist,(_Bool)0,(_Bool)1,(_Bool)0,(_Bool)0);
      #line 3263 
      btc8821a2ant_sw_mechanism2(btcoexist,(_Bool)1,(_Bool)0,(_Bool)0,24U);
    }
    else {
      #line 3266 
      btc8821a2ant_sw_mechanism1(btcoexist,(_Bool)0,(_Bool)1,(_Bool)0,(_Bool)0);
      #line 3268 
      btc8821a2ant_sw_mechanism2(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,24U);
    }
  #line 3270 
  return;
}

#line 3274  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.c"
static void btc8821a2ant_action_hid_a2dp(struct btc_coexist *btcoexist)
{
  #line 3276 
  u32 wifi_bw;
  #line 3277 
  u8 wifi_rssi_state;
  #line 3277 
  u8 wifi_rssi_state1;
  #line 3277 
  u8 bt_rssi_state;
  #line 3278 
  u8 ap_num = (unsigned char)0U;
  #line 3280 
  wifi_rssi_state = btc8821a2ant_wifi_rssi_state(btcoexist,(unsigned char)0,(unsigned char)2,(unsigned char)15,(unsigned char)0);
  #line 3281 
  wifi_rssi_state1 = btc8821a2ant_wifi_rssi_state(btcoexist,(unsigned char)1,(unsigned char)2,(unsigned char)42,(unsigned char)0);
  #line 3283 
  bt_rssi_state = btc8821a2ant_bt_rssi_state(btcoexist,(unsigned char)3,(unsigned char)46,(unsigned char)37);
  #line 3286 
  (*(btcoexist->btc_set_rf_reg))((void *)btcoexist,(unsigned char)0,1U,1048575U,0U);
  #line 3288 
  btc8821a2ant_limited_rx(btcoexist,(_Bool)0,(_Bool)0,(_Bool)1,(unsigned char)5);
  #line 3289 
  btc8821a2ant_fw_dac_swing_lvl(btcoexist,(_Bool)0,(unsigned char)6);
  #line 3291 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)24,(void *)(& wifi_bw));
  #line 3292 
  if (wifi_bw == 0U) 
    #line 3293 
    if ((unsigned int)bt_rssi_state == 0U || (unsigned int)bt_rssi_state == 3U) 
      #line 3294 
      btc8821a2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)2);
    else 
      #line 3295 
      if ((unsigned int)bt_rssi_state == 1U || (unsigned int)bt_rssi_state == 4U) 
        #line 3296 
        btc8821a2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)2); else 
                                                                    #line 3298 
                                                                    btc8821a2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)0);
  else 
    #line 3301 
    if ((unsigned int)bt_rssi_state == 0U || (unsigned int)bt_rssi_state == 3U) {
      #line 3302 
      (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)41,(void *)(& ap_num));
      #line 3304 
      if ((unsigned int)ap_num <= 9U) 
                                      #line 3305 
                                      btc8821a2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)4); else 
                                                                    #line 3308 
                                                                    btc8821a2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)2);
    }
    else 
      #line 3310 
      if ((unsigned int)bt_rssi_state == 1U || (unsigned int)bt_rssi_state == 4U) 
        #line 3311 
        btc8821a2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)2); else 
                                                                    #line 3313 
                                                                    btc8821a2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)0);
  #line 3317 
  if (wifi_bw == 0U) {
    #line 3318 
    btc8821a2ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)7);
    #line 3319 
    btc8821a2ant_power_save_state(btcoexist,(unsigned char)0,(unsigned char)0,(unsigned char)0);
  }
  else {
    #line 3322 
    btc8821a2ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)14);
    #line 3323 
    btc8821a2ant_power_save_state(btcoexist,(unsigned char)1,(unsigned char)80,(unsigned char)4);
  }
  #line 3327 
  if ((unsigned int)bt_rssi_state == 0U || (unsigned int)bt_rssi_state == 3U) 
    #line 3329 
    btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)23); else 
                                                                    #line 3331 
                                                                    btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)23);
  #line 3335 
  if (wifi_bw == 2U) 
    #line 3336 
    if ((unsigned int)wifi_rssi_state == 0U || (unsigned int)wifi_rssi_state == 3U) {
      #line 3338 
      btc8821a2ant_sw_mechanism1(btcoexist,(_Bool)1,(_Bool)1,(_Bool)0,(_Bool)0);
      #line 3340 
      btc8821a2ant_sw_mechanism2(btcoexist,(_Bool)1,(_Bool)0,(_Bool)0,24U);
    }
    else {
      #line 3343 
      btc8821a2ant_sw_mechanism1(btcoexist,(_Bool)1,(_Bool)1,(_Bool)0,(_Bool)0);
      #line 3345 
      btc8821a2ant_sw_mechanism2(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,24U);
    }
  else 
    #line 3349 
    if ((unsigned int)wifi_rssi_state == 0U || (unsigned int)wifi_rssi_state == 3U) {
      #line 3351 
      btc8821a2ant_sw_mechanism1(btcoexist,(_Bool)0,(_Bool)1,(_Bool)0,(_Bool)0);
      #line 3353 
      btc8821a2ant_sw_mechanism2(btcoexist,(_Bool)1,(_Bool)0,(_Bool)0,24U);
    }
    else {
      #line 3356 
      btc8821a2ant_sw_mechanism1(btcoexist,(_Bool)0,(_Bool)1,(_Bool)0,(_Bool)0);
      #line 3358 
      btc8821a2ant_sw_mechanism2(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,24U);
    }
  #line 3360 
  return;
}

#line 3364  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.c"
static void btc8821a2ant_action_wifi_multi_port(struct btc_coexist *btcoexist)
{
  #line 3366 
  btc8821a2ant_fw_dac_swing_lvl(btcoexist,(_Bool)0,(unsigned char)6);
  #line 3367 
  btc8821a2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)0);
  #line 3370 
  btc8821a2ant_sw_mechanism1(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,(_Bool)0);
  #line 3371 
  btc8821a2ant_sw_mechanism2(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,24U);
  #line 3374 
  btc8821a2ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)0);
  #line 3376 
  btc8821a2ant_power_save_state(btcoexist,(unsigned char)0,(unsigned char)0,(unsigned char)0);
  #line 3377 
  btc8821a2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)0,(unsigned char)1);
  #line 3378 
  return;
}

#line 3380  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.c"
static void btc8821a2ant_run_coexist_mechanism(struct btc_coexist *btcoexist)
{
  #line 3382 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 3383 
  struct btc_bt_link_info *bt_link_info = & btcoexist->bt_link_info;
  #line 3384 
  bool wifi_under_5g = (_Bool)0;
  #line 3385 
  u8 algorithm = (unsigned char)0U;
  #line 3386 
  u32 num_of_wifi_link = 0U;
  #line 3387 
  u32 wifi_link_status = 0U;
  #line 3388 
  bool miracast_plus_bt = (_Bool)0;
  #line 3389 
  bool scan = (_Bool)0;
  #line 3389 
  bool link = (_Bool)0;
  #line 3389 
  bool roam = (_Bool)0;
  #line 3391 
  if ((int)btcoexist->manual_control != 0) {
    #line 3392 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Manual control!!!\n");
    #line 3394 
    return;
  }
  #line 3397 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)13,(void *)(& wifi_under_5g));
  #line 3399 
  if ((int)wifi_under_5g != 0) {
    #line 3400 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], RunCoexistMechanism(), run 5G coex setting!!<===\n");
    #line 3402 
    btc8821a2ant_coex_under_5g(btcoexist);
    #line 3403 
    return;
  }
  #line 3406 
  if ((int)coex_sta_1->under_ips != 0) {
    #line 3407 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], wifi is under IPS !!!\n");
    #line 3409 
    return;
  }
  #line 3412 
  algorithm = btc8821a2ant_action_algorithm(btcoexist);
  #line 3413 
  if ((int)coex_sta_1->c2h_bt_inquiry_page != 0 && (unsigned int)algorithm != 6U) {
    #line 3415 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BT is under inquiry/page scan !!\n");
    #line 3417 
    btc8821a2ant_action_bt_inquiry(btcoexist);
    #line 3418 
    return;
  }
  #line 3421 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)5,(void *)(& scan));
  #line 3422 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)6,(void *)(& link));
  #line 3423 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)11,(void *)(& roam));
  #line 3425 
  if (((int)scan != 0 || (int)link != 0) || (int)roam != 0) {
    #line 3426 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], WiFi is under Link Process !!\n");
    #line 3428 
    btc8821a2ant_action_wifi_link_process(btcoexist);
    #line 3429 
    return;
  }
  #line 3433 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)27,(void *)(& wifi_link_status));
  #line 3435 
  num_of_wifi_link = wifi_link_status >> 16;
  #line 3437 
  if (num_of_wifi_link > 1U || (wifi_link_status & 8U) != 0U) {
    #line 3439 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"############# [BTCoex],  Multi-Port num_of_wifi_link = %d, wifi_link_status = 0x%x\n",num_of_wifi_link,wifi_link_status);
    #line 3443 
    if ((int)bt_link_info->bt_link_exist != 0) 
                                               #line 3444 
                                               miracast_plus_bt = (_Bool)1; else 
                                                                    #line 3446 
                                                                    miracast_plus_bt = (_Bool)0;
    #line 3448 
    (*(btcoexist->btc_set))((void *)btcoexist,(unsigned char)8,(void *)(& miracast_plus_bt));
    #line 3450 
    btc8821a2ant_action_wifi_multi_port(btcoexist);
    #line 3452 
    return;
  }
  #line 3455 
  miracast_plus_bt = (_Bool)0;
  #line 3456 
  (*(btcoexist->btc_set))((void *)btcoexist,(unsigned char)8,(void *)(& miracast_plus_bt));
  #line 3459 
  coex_dm_1->cur_algorithm = algorithm;
  #line 3460 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Algorithm = %d\n",(int)coex_dm_1->cur_algorithm);
  #line 3463 
  if ((int)btc8821a2ant_is_common_action(btcoexist) != 0) {
    #line 3464 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Action 2-Ant common\n");
    #line 3466 
    coex_dm_1->auto_tdma_adjust = (_Bool)1;
  }
  else {
    #line 3468 
    if ((int)coex_dm_1->cur_algorithm != (int)coex_dm_1->pre_algorithm) {
      #line 3469 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], pre_algorithm = %d, cur_algorithm = %d\n",(int)coex_dm_1->pre_algorithm,(int)coex_dm_1->cur_algorithm);
      #line 3473 
      coex_dm_1->auto_tdma_adjust = (_Bool)0;
    }
    #line 3475 
    switch ((int)coex_dm_1->cur_algorithm) {
      #line 3476 
      case 1: 
              #line 3476 
      ;
      #line 3477 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Action 2-Ant, algorithm = SCO\n");
      #line 3479 
      btc8821a2ant_action_sco(btcoexist);
      #line 3480 
      break;
      #line 3481 
      case 2: 
              #line 3481 
      ;
      #line 3482 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Action 2-Ant, algorithm = HID\n");
      #line 3484 
      btc8821a2ant_action_hid(btcoexist);
      #line 3485 
      break;
      #line 3486 
      case 3: 
              #line 3486 
      ;
      #line 3487 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Action 2-Ant, algorithm = A2DP\n");
      #line 3489 
      btc8821a2ant_action_a2dp(btcoexist);
      #line 3490 
      break;
      #line 3491 
      case 4: 
              #line 3491 
      ;
      #line 3492 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Action 2-Ant, algorithm = A2DP+PAN(HS)\n");
      #line 3494 
      btc8821a2ant_action_a2dp_pan_hs(btcoexist);
      #line 3495 
      break;
      #line 3496 
      case 5: 
              #line 3496 
      ;
      #line 3497 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Action 2-Ant, algorithm = PAN(EDR)\n");
      #line 3499 
      btc8821a2ant_action_pan_edr(btcoexist);
      #line 3500 
      break;
      #line 3501 
      case 6: 
              #line 3501 
      ;
      #line 3502 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Action 2-Ant, algorithm = HS mode\n");
      #line 3504 
      btc8821a2ant_action_pan_hs(btcoexist);
      #line 3505 
      break;
      #line 3506 
      case 7: 
              #line 3506 
      ;
      #line 3507 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Action 2-Ant, algorithm = PAN+A2DP\n");
      #line 3509 
      btc8821a2ant_action_pan_edr_a2dp(btcoexist);
      #line 3510 
      break;
      #line 3511 
      case 8: 
              #line 3511 
      ;
      #line 3512 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Action 2-Ant, algorithm = PAN(EDR)+HID\n");
      #line 3514 
      btc8821a2ant_action_pan_edr_hid(btcoexist);
      #line 3515 
      break;
      #line 3516 
      case 9: 
              #line 3516 
      ;
      #line 3517 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Action 2-Ant, algorithm = HID+A2DP+PAN\n");
      #line 3519 
      btc8821a2ant_act_hid_a2dp_pan_edr(btcoexist);
      #line 3520 
      break;
      #line 3521 
      case 10: 
               #line 3521 
      ;
      #line 3522 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Action 2-Ant, algorithm = HID+A2DP\n");
      #line 3524 
      btc8821a2ant_action_hid_a2dp(btcoexist);
      #line 3525 
      break;
      #line 3526 
      default: 
               #line 3526 
      ;
      #line 3527 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Action 2-Ant, algorithm = coexist All Off!!\n");
      #line 3529 
      btc8821a2ant_coex_all_off(btcoexist);
      #line 3530 
      break;
    }
    #line 3532 
    coex_dm_1->pre_algorithm = coex_dm_1->cur_algorithm;
  }
  #line 3534 
  return;
}

#line 3536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.c"
static void btc8821a2ant_wifi_off_hw_cfg(struct btc_coexist *btcoexist)
{
  #line 3538 
  u8 h2c_parameter[2U] = {(unsigned char)0U};
  #line 3539 
  u32 fw_ver = 0U;
  #line 3542 
  (*(btcoexist->btc_write_1byte))((void *)btcoexist,1902U,4U);
  #line 3545 
  (*(btcoexist->btc_set_rf_reg))((void *)btcoexist,(unsigned char)0,1U,1048575U,1920U);
  #line 3546 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)26,(void *)(& fw_ver));
  #line 3547 
  if (fw_ver > 1572863U) {
    #line 3549 
    h2c_parameter[0] = (unsigned char)1U;
    #line 3550 
    (*(btcoexist->btc_fill_h2c))((void *)btcoexist,(unsigned char)110,1U,(u8 *)(& h2c_parameter));
  }
  else 
       #line 3552 
       (*(btcoexist->btc_write_1byte))((void *)btcoexist,1893U,24U);
  #line 3553 
  return;
}

#line 3559  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.c"
void ex_btc8821a2ant_init_hwconfig(struct btc_coexist *btcoexist)
{
  #line 3561 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 3562 
  u8 u1tmp = (unsigned char)0U;
  #line 3564 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], 2Ant Init HW Config!!\n");
  #line 3568 
  coex_dm_1->bt_rf0x1e_backup = (*(btcoexist->btc_get_rf_reg))((void *)btcoexist,(unsigned char)0,30U,1048575U);
  #line 3572 
  u1tmp = (*(btcoexist->btc_read_1byte))((void *)btcoexist,1936U);
  #line 3573 
  u1tmp = (unsigned char)((unsigned int)u1tmp & 192U);
  #line 3574 
  u1tmp = (unsigned char)((unsigned int)u1tmp | 5U);
  #line 3575 
  (*(btcoexist->btc_write_1byte))((void *)btcoexist,1936U,(unsigned int)u1tmp);
  #line 3578 
  btc8821a2ant_set_ant_path(btcoexist,(unsigned char)0,(_Bool)1,(_Bool)0);
  #line 3579 
  coex_sta_1->dis_ver_info_cnt = (unsigned char)0U;
  #line 3582 
  btc8821a2ant_coex_table_with_type(btcoexist,(_Bool)1,(unsigned char)0);
  #line 3586 
  (*(btcoexist->btc_write_1byte))((void *)btcoexist,1902U,4U);
  #line 3587 
  (*(btcoexist->btc_write_1byte))((void *)btcoexist,1912U,3U);
  #line 3588 
  (*(btcoexist->btc_write_1byte_bitmask))((void *)btcoexist,64U,32U,(unsigned char)1);
  #line 3589 
  return;
}

#line 3591  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.c"
void ex_btc8821a2ant_pre_load_firmware(struct btc_coexist *btcoexist)
{
  #line 3593 
  struct btc_board_info *board_info = & btcoexist->board_info;
  #line 3594 
  u8 u8tmp = (unsigned char)4U;
  #line 3607 
  if (btcoexist->chip_interface == (unsigned int)BTC_INTF_USB) {
    #line 3609 
    u8tmp = (unsigned char)((unsigned int)u8tmp | 1U);
    #line 3610 
    (*(btcoexist->btc_write_local_reg_1byte))((void *)btcoexist,65032U,(unsigned char)((int)u8tmp));
  }
  else {
    #line 3613 
    if (! ((unsigned int)board_info->single_ant_path == 0U)) 
      #line 3614 
      if ((unsigned int)board_info->single_ant_path == 1U) 
                                                           #line 3616 
                                                           u8tmp = (unsigned char)((unsigned int)u8tmp | 1U);
    #line 3619 
    if (btcoexist->chip_interface == (unsigned int)BTC_INTF_PCI) 
                                                                 #line 3620 
                                                                 (*(btcoexist->btc_write_local_reg_1byte))((void *)btcoexist,900U,(unsigned char)((int)u8tmp));
    else 
      #line 3622 
      if (btcoexist->chip_interface == (unsigned int)BTC_INTF_SDIO) 
                                                                    #line 3623 
                                                                    (*(btcoexist->btc_write_local_reg_1byte))((void *)btcoexist,96U,(unsigned char)((int)u8tmp));
  }
  #line 3625 
  return;
}

#line 3628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.c"
void ex_btc8821a2ant_init_coex_dm(struct btc_coexist *btcoexist)
{
  #line 3630 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 3632 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Coex Mechanism Init!!\n");
  #line 3635 
  btc8821a2ant_init_coex_dm(btcoexist);
  #line 3636 
  return;
}

#line 3638  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.c"
void ex_btc8821a2ant_display_coex_info(struct btc_coexist *btcoexist, struct seq_file *m)
{
  #line 3707 
  char *tmp_2;
  #line 3643 
  u8 u1tmp[4U];
  #line 3643 
  u8 i;
  #line 3643 
  u8 bt_info_ext;
  #line 3644 
  u32 u4tmp[4U];
  #line 3648 
  u32 wifi_bw;
  #line 3648 
  u32 wifi_traffic_dir;
  #line 3649 
  u8 wifi_dot_11_chnl;
  #line 3649 
  u8 wifi_hs_chnl;
  #line 3661 
  char *tmp;
  #line 3709 
  char *tmp_1;
  #line 3706 
  char *tmp_3;
  #line 3705 
  char *tmp_4;
  #line 3725 
  char *tmp_5;
  #line 3739 
  char *tmp_6;
  #line 3738 
  char *tmp_7;
  #line 3641 
  struct btc_board_info *board_info = & btcoexist->board_info;
  #line 3642 
  struct btc_stack_info *stack_info = & btcoexist->stack_info;
  #line 3643 
  u8 ps_tdma_case = (unsigned char)0U;
  #line 3645 
  bool roam = (_Bool)0;
  #line 3645 
  bool scan = (_Bool)0;
  #line 3645 
  bool link = (_Bool)0;
  #line 3645 
  bool wifi_under_5g = (_Bool)0;
  #line 3646 
  bool bt_hs_on = (_Bool)0;
  #line 3646 
  bool wifi_busy = (_Bool)0;
  #line 3647 
  long wifi_rssi = 0L;
  #line 3647 
  long bt_hs_rssi = 0L;
  #line 3650 
  u32 fw_ver = 0U;
  #line 3650 
  u32 bt_patch_ver = 0U;
  #line 3652 
  seq_puts(m,(char *)"\n ============[BT Coexist info]============");
  #line 3654 
  seq_printf(m,(char *)"\n %-35s = %d/ %d ",(char *)"Ant PG number/ Ant mechanism:",(int)board_info->pg_ant_num,(int)board_info->btdm_ant_num);
  #line 3657 
  if ((int)btcoexist->manual_control != 0) 
                                           #line 3658 
                                           seq_printf(m,(char *)"\n %-35s",(char *)"[Action Manual control]!!");
  #line 3661 
  ;
  #line 3661 
  if ((int)stack_info->profile_notified != 0) 
                                              #line 3661 
                                              tmp = (char *)"Yes"; else 
                                                                    #line 3661 
                                                                    tmp = (char *)"No";
  #line 3661 
  ;
  #line 3661 
  seq_printf(m,(char *)"\n %-35s = %s / %d",(char *)"BT stack/ hci ext ver",tmp,(int)stack_info->hci_version);
  #line 3665 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)28,(void *)(& bt_patch_ver));
  #line 3666 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)26,(void *)(& fw_ver));
  #line 3667 
  seq_printf(m,(char *)"\n %-35s = %d_%d/ 0x%x/ 0x%x(%d)",(char *)"CoexVer/ FwVer/ PatchVer",glcoex_ver_date_8821a_2ant,glcoex_ver_8821a_2ant,fw_ver,bt_patch_ver,bt_patch_ver);
  #line 3672 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)0,(void *)(& bt_hs_on));
  #line 3674 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)37,(void *)(& wifi_dot_11_chnl));
  #line 3676 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)39,(void *)(& wifi_hs_chnl));
  #line 3678 
  seq_printf(m,(char *)"\n %-35s = %d / %d(%d)",(char *)"Dot11 channel / HsMode(HsChnl)",(int)wifi_dot_11_chnl,(int)bt_hs_on,(int)wifi_hs_chnl);
  #line 3682 
  seq_printf(m,(char *)"\n %-35s = %3ph ",(char *)"H2C Wifi inform bt chnl Info",(u8 *)(& coex_dm_1->wifi_chnl_info));
  #line 3686 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)22,(void *)(& wifi_rssi));
  #line 3687 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)23,(void *)(& bt_hs_rssi));
  #line 3688 
  seq_printf(m,(char *)"\n %-35s = %ld/ %ld",(char *)"Wifi rssi/ HS rssi",wifi_rssi,bt_hs_rssi);
  #line 3691 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)5,(void *)(& scan));
  #line 3692 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)6,(void *)(& link));
  #line 3693 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)11,(void *)(& roam));
  #line 3694 
  seq_printf(m,(char *)"\n %-35s = %d/ %d/ %d ",(char *)"Wifi link/ roam/ scan",(int)link,(int)roam,(int)scan);
  #line 3697 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)13,(void *)(& wifi_under_5g));
  #line 3699 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)24,(void *)(& wifi_bw));
  #line 3701 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)4,(void *)(& wifi_busy));
  #line 3703 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)25,(void *)(& wifi_traffic_dir));
  #line 3709 
  if (! wifi_busy) 
                   #line 3709 
                   tmp_1 = (char *)"idle";
  else {
    #line 3709 
    char *tmp_0;
    #line 3709 
    if (wifi_traffic_dir == 0U) 
                                #line 3709 
                                tmp_0 = (char *)"uplink"; else 
                                                               #line 3709 
                                                               tmp_0 = (char *)"downlink";
    #line 3709 
    tmp_1 = tmp_0;
  }
  #line 3706 
  if (wifi_bw != 0U) {
    #line 3707 
    if (wifi_bw == 2U) 
                       #line 3707 
                       tmp_2 = (char *)"HT40"; else 
                                                    #line 3707 
                                                    tmp_2 = (char *)"HT20";
    #line 3706 
    tmp_3 = tmp_2;
  }
  else 
       #line 3706 
       tmp_3 = (char *)"Legacy";
  #line 3705 
  if ((int)wifi_under_5g != 0) 
                               #line 3705 
                               tmp_4 = (char *)"5G"; else 
                                                          #line 3705 
                                                          tmp_4 = (char *)"2.4G";
  #line 3705 
  ;
  #line 3705 
  seq_printf(m,(char *)"\n %-35s = %s / %s/ %s ",(char *)"Wifi status",tmp_4,tmp_3,tmp_1);
  #line 3713 
  if ((int)stack_info->profile_notified != 0) {
    #line 3714 
    seq_printf(m,(char *)"\n %-35s = %d / %d / %d / %d",(char *)"SCO/HID/PAN/A2DP",(int)stack_info->sco_exist,(int)stack_info->hid_exist,(int)stack_info->pan_exist,(int)stack_info->a2dp_exist);
    #line 3719 
    (*(btcoexist->btc_disp_dbg_msg))((void *)btcoexist,(unsigned char)1,m);
  }
  #line 3724 
  bt_info_ext = coex_sta_1->bt_info_ext;
  #line 3725 
  if (((int)bt_info_ext & 1) != 0) 
                                   #line 3725 
                                   tmp_5 = (char *)"Basic rate"; else 
                                                                   #line 3725 
                                                                   tmp_5 = (char *)"EDR rate";
  #line 3725 
  ;
  #line 3725 
  seq_printf(m,(char *)"\n %-35s = %s",(char *)"BT Info A2DP rate",tmp_5);
  #line 3728 
  i = (unsigned char)0U;
  #line 3728 
  while ((unsigned int)i <= 2U) {
    #line 3729 
    if (coex_sta_1->bt_info_c2h_cnt[(int)i] != 0U) 
                                                   #line 3730 
                                                   seq_printf(m,(char *)"\n %-35s = %7ph(%d)",glbt_info_src_8821a_2ant[(int)i],(u8 *)(& coex_sta_1->bt_info_c2h[(int)i]),coex_sta_1->bt_info_c2h_cnt[(int)i]);
    #line 3728 
    i = (u8)((int)i + 1);
  }
  #line 3739 
  if ((int)coex_sta_1->under_lps != 0) 
                                       #line 3739 
                                       tmp_6 = (char *)"LPS ON"; else 
                                                                   #line 3739 
                                                                   tmp_6 = (char *)"LPS OFF";
  #line 3738 
  if ((int)coex_sta_1->under_ips != 0) 
                                       #line 3738 
                                       tmp_7 = (char *)"IPS ON"; else 
                                                                   #line 3738 
                                                                   tmp_7 = (char *)"IPS OFF";
  #line 3737 
  ;
  #line 3737 
  seq_printf(m,(char *)"\n %-35s = %s/%s",(char *)"PS state, IPS/LPS",tmp_7,tmp_6);
  #line 3741 
  (*(btcoexist->btc_disp_dbg_msg))((void *)btcoexist,(unsigned char)3,m);
  #line 3744 
  seq_printf(m,(char *)"\n %-35s",(char *)"============[Sw mechanism]============");
  #line 3746 
  seq_printf(m,(char *)"\n %-35s = %d/ %d/ %d(0x%x) ",(char *)"SM2[AgcT/ AdcB/ SwDacSwing(lvl)]",(int)coex_dm_1->cur_agc_table_en,(int)coex_dm_1->cur_adc_back_off,(int)coex_dm_1->cur_dac_swing_on,coex_dm_1->cur_dac_swing_lvl);
  #line 3752 
  seq_printf(m,(char *)"\n %-35s",(char *)"============[Fw mechanism]============");
  #line 3755 
  if (! btcoexist->manual_control) {
    #line 3756 
    ps_tdma_case = coex_dm_1->cur_ps_tdma;
    #line 3757 
    seq_printf(m,(char *)"\n %-35s = %5ph case-%d",(char *)"PS TDMA",(u8 *)(& coex_dm_1->ps_tdma_para),(int)ps_tdma_case);
    #line 3761 
    seq_printf(m,(char *)"\n %-35s = %d/ %d ",(char *)"DecBtPwr/ IgnWlanAct",(int)coex_dm_1->cur_dec_bt_pwr_lvl,(int)coex_dm_1->cur_ignore_wlan_act);
  }
  #line 3767 
  seq_printf(m,(char *)"\n %-35s",(char *)"============[Hw setting]============");
  #line 3769 
  seq_printf(m,(char *)"\n %-35s = 0x%x",(char *)"RF-A, 0x1e initVal",coex_dm_1->bt_rf0x1e_backup);
  #line 3772 
  u1tmp[0] = (*(btcoexist->btc_read_1byte))((void *)btcoexist,1912U);
  #line 3773 
  u1tmp[1] = (*(btcoexist->btc_read_1byte))((void *)btcoexist,1740U);
  #line 3774 
  seq_printf(m,(char *)"\n %-35s = 0x%x/ 0x%x ",(char *)"0x778 (W_Act)/ 0x6cc (CoTab Sel)",(int)u1tmp[0],(int)u1tmp[1]);
  #line 3778 
  u1tmp[0] = (*(btcoexist->btc_read_1byte))((void *)btcoexist,2267U);
  #line 3779 
  u1tmp[1] = (*(btcoexist->btc_read_1byte))((void *)btcoexist,3163U);
  #line 3780 
  seq_printf(m,(char *)"\n %-35s = 0x%x/ 0x%x",(char *)"0x8db(ADC)/0xc5b[29:25](DAC)",((int)u1tmp[0] >> 5) & 3,((int)u1tmp[1] >> 1) & 31);
  #line 3784 
  u4tmp[0] = (*(btcoexist->btc_read_4byte))((void *)btcoexist,3252U);
  #line 3785 
  seq_printf(m,(char *)"\n %-35s = 0x%x/ 0x%x",(char *)"0xcb4[7:0](ctrl)/ 0xcb4[29:28](val)",u4tmp[0] & 255U,(u4tmp[0] >> 28) & 3U);
  #line 3789 
  u1tmp[0] = (*(btcoexist->btc_read_1byte))((void *)btcoexist,64U);
  #line 3790 
  u4tmp[0] = (*(btcoexist->btc_read_4byte))((void *)btcoexist,76U);
  #line 3791 
  u4tmp[1] = (*(btcoexist->btc_read_4byte))((void *)btcoexist,2420U);
  #line 3792 
  seq_printf(m,(char *)"\n %-35s = 0x%x/ 0x%x/ 0x%x",(char *)"0x40/ 0x4c[24:23]/ 0x974",(int)u1tmp[0],(u4tmp[0] >> 23) & 3U,u4tmp[1]);
  #line 3796 
  u4tmp[0] = (*(btcoexist->btc_read_4byte))((void *)btcoexist,1360U);
  #line 3797 
  u1tmp[0] = (*(btcoexist->btc_read_1byte))((void *)btcoexist,1314U);
  #line 3798 
  seq_printf(m,(char *)"\n %-35s = 0x%x/ 0x%x",(char *)"0x550(bcn ctrl)/0x522",u4tmp[0],(int)u1tmp[0]);
  #line 3802 
  u4tmp[0] = (*(btcoexist->btc_read_4byte))((void *)btcoexist,3152U);
  #line 3803 
  u1tmp[0] = (*(btcoexist->btc_read_1byte))((void *)btcoexist,2570U);
  #line 3804 
  seq_printf(m,(char *)"\n %-35s = 0x%x/ 0x%x",(char *)"0xc50(DIG)/0xa0a(CCK-TH)",u4tmp[0],(int)u1tmp[0]);
  #line 3808 
  u4tmp[0] = (*(btcoexist->btc_read_4byte))((void *)btcoexist,3912U);
  #line 3809 
  u1tmp[0] = (*(btcoexist->btc_read_1byte))((void *)btcoexist,2651U);
  #line 3810 
  u1tmp[1] = (*(btcoexist->btc_read_1byte))((void *)btcoexist,2652U);
  #line 3811 
  seq_printf(m,(char *)"\n %-35s = 0x%x/ 0x%x",(char *)"OFDM-FA/ CCK-FA",u4tmp[0],((int)u1tmp[0] << 8) + (int)u1tmp[1]);
  #line 3815 
  u4tmp[0] = (*(btcoexist->btc_read_4byte))((void *)btcoexist,1728U);
  #line 3816 
  u4tmp[1] = (*(btcoexist->btc_read_4byte))((void *)btcoexist,1732U);
  #line 3817 
  u4tmp[2] = (*(btcoexist->btc_read_4byte))((void *)btcoexist,1736U);
  #line 3818 
  seq_printf(m,(char *)"\n %-35s = 0x%x/ 0x%x/ 0x%x",(char *)"0x6c0/0x6c4/0x6c8",u4tmp[0],u4tmp[1],u4tmp[2]);
  #line 3822 
  seq_printf(m,(char *)"\n %-35s = %d/ %d",(char *)"0x770 (hi-pri Rx/Tx)",coex_sta_1->high_priority_rx,coex_sta_1->high_priority_tx);
  #line 3825 
  seq_printf(m,(char *)"\n %-35s = %d/ %d",(char *)"0x774(low-pri Rx/Tx)",coex_sta_1->low_priority_rx,coex_sta_1->low_priority_tx);
  #line 3830 
  u1tmp[0] = (*(btcoexist->btc_read_1byte))((void *)btcoexist,1051U);
  #line 3831 
  seq_printf(m,(char *)"\n %-35s = 0x%x",(char *)"0x41b (mgntQ hang chk == 0xf)",(int)u1tmp[0]);
  #line 3835 
  (*(btcoexist->btc_disp_dbg_msg))((void *)btcoexist,(unsigned char)0,m);
  #line 3836 
  return;
}

#line 3838  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.c"
void ex_btc8821a2ant_ips_notify(struct btc_coexist *btcoexist, u8 type)
{
  #line 3840 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 3842 
  if ((unsigned int)type == 1U) {
    #line 3843 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], IPS ENTER notify\n");
    #line 3845 
    coex_sta_1->under_ips = (_Bool)1;
    #line 3846 
    btc8821a2ant_wifi_off_hw_cfg(btcoexist);
    #line 3847 
    btc8821a2ant_ignore_wlan_act(btcoexist,(_Bool)1,(_Bool)1);
    #line 3848 
    btc8821a2ant_coex_all_off(btcoexist);
  }
  else 
    #line 3849 
    if ((unsigned int)type == 0U) {
      #line 3850 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], IPS LEAVE notify\n");
      #line 3852 
      coex_sta_1->under_ips = (_Bool)0;
      #line 3853 
      ex_btc8821a2ant_init_hwconfig(btcoexist);
      #line 3854 
      btc8821a2ant_init_coex_dm(btcoexist);
      #line 3855 
      btc8821a2ant_query_bt_info(btcoexist);
    }
  #line 3857 
  return;
}

#line 3859  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.c"
void ex_btc8821a2ant_lps_notify(struct btc_coexist *btcoexist, u8 type)
{
  #line 3861 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 3863 
  if ((unsigned int)type == 1U) {
    #line 3864 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], LPS ENABLE notify\n");
    #line 3866 
    coex_sta_1->under_lps = (_Bool)1;
  }
  else 
    #line 3867 
    if ((unsigned int)type == 0U) {
      #line 3868 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], LPS DISABLE notify\n");
      #line 3870 
      coex_sta_1->under_lps = (_Bool)0;
    }
  #line 3872 
  return;
}

#line 3874  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.c"
void ex_btc8821a2ant_scan_notify(struct btc_coexist *btcoexist, u8 type)
{
  #line 3876 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 3878 
  if ((unsigned int)type == 1U) 
                                #line 3879 
                                _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], SCAN START notify\n");
  else 
    #line 3881 
    if ((unsigned int)type == 0U) 
                                  #line 3882 
                                  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], SCAN FINISH notify\n");
  #line 3883 
  return;
}

#line 3887  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.c"
void ex_btc8821a2ant_connect_notify(struct btc_coexist *btcoexist, u8 type)
{
  #line 3889 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 3891 
  if ((unsigned int)type == 1U) 
                                #line 3892 
                                _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], CONNECT START notify\n");
  else 
    #line 3894 
    if ((unsigned int)type == 0U) 
                                  #line 3895 
                                  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], CONNECT FINISH notify\n");
  #line 3896 
  return;
}

#line 3900  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.c"
void ex_btc8821a2ant_media_status_notify(struct btc_coexist *btcoexist, u8 type)
{
  #line 3905 
  u32 wifi_bw;
  #line 3906 
  u8 wifi_central_chnl;
  #line 3903 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 3904 
  u8 h2c_parameter[3U] = {(unsigned char)0U};
  #line 3907 
  u8 ap_num = (unsigned char)0U;
  #line 3909 
  if ((unsigned int)type == 1U) 
                                #line 3910 
                                _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], MEDIA connect notify\n"); else 
                                                                    #line 3913 
                                                                    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], MEDIA disconnect notify\n");
  #line 3918 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)38,(void *)(& wifi_central_chnl));
  #line 3920 
  if ((unsigned int)type == 1U && (unsigned int)wifi_central_chnl <= 14U) {
    #line 3922 
    h2c_parameter[0] = (unsigned char)1U;
    #line 3923 
    h2c_parameter[1] = wifi_central_chnl;
    #line 3924 
    (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)24,(void *)(& wifi_bw));
    #line 3925 
    if (wifi_bw == 2U) 
                       #line 3926 
                       h2c_parameter[2] = (unsigned char)48U;
    else {
      #line 3928 
      h2c_parameter[2] = (unsigned char)32U;
      #line 3929 
      if ((unsigned int)ap_num <= 9U) 
                                      #line 3930 
                                      h2c_parameter[2] = (unsigned char)48U; else 
                                                                    #line 3932 
                                                                    h2c_parameter[2] = (unsigned char)32U;
    }
  }
  #line 3936 
  coex_dm_1->wifi_chnl_info[0] = h2c_parameter[0];
  #line 3937 
  coex_dm_1->wifi_chnl_info[1] = h2c_parameter[1];
  #line 3938 
  coex_dm_1->wifi_chnl_info[2] = h2c_parameter[2];
  #line 3940 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], FW write 0x66 = 0x%x\n",(((int)h2c_parameter[0] << 16) | ((int)h2c_parameter[1] << 8)) | (int)h2c_parameter[2]);
  #line 3946 
  (*(btcoexist->btc_fill_h2c))((void *)btcoexist,(unsigned char)102,3U,(u8 *)(& h2c_parameter));
  #line 3947 
  return;
}

#line 3949  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.c"
void ex_btc8821a2ant_special_packet_notify(struct btc_coexist *btcoexist, u8 type)
{
  #line 3952 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 3954 
  if ((unsigned int)type == 1U) 
                                #line 3955 
                                _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], DHCP Packet notify\n");
  #line 3956 
  return;
}

#line 3960  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.c"
void ex_btc8821a2ant_bt_info_notify(struct btc_coexist *btcoexist, u8 *tmp_buf, u8 length)
{
  #line 3965 
  u8 i;
  #line 3963 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 3964 
  u8 bt_info = (unsigned char)0U;
  #line 3965 
  u8 rsp_source = (unsigned char)0U;
  #line 3966 
  bool bt_busy = (_Bool)0;
  #line 3966 
  bool limited_dig = (_Bool)0;
  #line 3967 
  bool wifi_connected = (_Bool)0;
  #line 3967 
  bool wifi_under_5g = (_Bool)0;
  #line 3969 
  coex_sta_1->c2h_bt_info_req_sent = (_Bool)0;
  #line 3970 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)13,(void *)(& wifi_under_5g));
  #line 3971 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)2,(void *)(& wifi_connected));
  #line 3974 
  rsp_source = (unsigned char)((unsigned int)*tmp_buf & 15U);
  #line 3975 
  if ((unsigned int)rsp_source > 2U) 
                                     #line 3976 
                                     rsp_source = (unsigned char)0U;
  #line 3977 
  (coex_sta_1->bt_info_c2h_cnt[(int)rsp_source]) ++;
  #line 3979 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Bt info[%d], length = %d, hex data = [",(int)rsp_source,(int)length);
  #line 3982 
  i = (unsigned char)0U;
  #line 3982 
  while ((int)i < (int)length) {
    #line 3983 
    coex_sta_1->bt_info_c2h[(int)rsp_source][(int)i] = *(tmp_buf + (unsigned long)i);
    #line 3984 
    if ((unsigned int)i == 1U) 
                               #line 3985 
                               bt_info = *(tmp_buf + (unsigned long)i);
    #line 3986 
    if ((int)i == (int)length + -1) 
                                    #line 3987 
                                    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"0x%02x]\n",(int)*(tmp_buf + (unsigned long)i)); else 
                                                                    #line 3990 
                                                                    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"0x%02x, ",(int)*(tmp_buf + (unsigned long)i));
    #line 3982 
    i = (u8)((int)i + 1);
  }
  #line 3995 
  if ((int)btcoexist->manual_control != 0) {
    #line 3996 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BtInfoNotify(), return for Manual CTRL<===\n");
    #line 3998 
    return;
  }
  #line 4001 
  if ((unsigned int)rsp_source != 0U) {
    #line 4003 
    coex_sta_1->bt_retry_cnt = (unsigned char)((unsigned int)coex_sta_1->bt_info_c2h[(int)rsp_source][2] & 15U);
    #line 4006 
    coex_sta_1->bt_rssi = (unsigned char)(((unsigned int)coex_sta_1->bt_info_c2h[(int)rsp_source][3] + 5U) * 2U);
    #line 4009 
    coex_sta_1->bt_info_ext = coex_sta_1->bt_info_c2h[(int)rsp_source][4];
    #line 4011 
    coex_sta_1->bt_tx_rx_mask = (_Bool)(((int)coex_sta_1->bt_info_c2h[(int)rsp_source][2] & 64) != 0);
    #line 4013 
    (*(btcoexist->btc_set))((void *)btcoexist,(unsigned char)7,(void *)(& coex_sta_1->bt_tx_rx_mask));
    #line 4015 
    if ((int)coex_sta_1->bt_tx_rx_mask != 0) {
      #line 4019 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Switch BT TRx Mask since BT RF REG 0x3C != 0x01\n");
      #line 4021 
      (*(btcoexist->btc_set_bt_reg))((void *)btcoexist,(unsigned char)0,60U,1U);
    }
    #line 4028 
    if (((int)coex_sta_1->bt_info_ext & 2) != 0) {
      #line 4029 
      (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)2,(void *)(& wifi_connected));
      #line 4031 
      if ((int)wifi_connected != 0) 
                                    #line 4032 
                                    ex_btc8821a2ant_media_status_notify(btcoexist,(unsigned char)1); else 
                                                                    #line 4035 
                                                                    ex_btc8821a2ant_media_status_notify(btcoexist,(unsigned char)0);
    }
    #line 4041 
    if (! btcoexist->manual_control && ! wifi_under_5g) {
      #line 4042 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BT ext info = 0x%x!!\n",(int)coex_sta_1->bt_info_ext);
      #line 4045 
      if (((unsigned long)coex_sta_1->bt_info_ext & 8UL) != 0UL) {
        #line 4046 
        _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BT ext info bit3=1, wifi_connected=%d\n",(int)wifi_connected);
        #line 4049 
        if ((int)wifi_connected != 0) {
          #line 4050 
          _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BT ext info bit3 check, set BT NOT to ignore Wlan active!!\n");
          #line 4053 
          btc8821a2ant_ignore_wlan_act(btcoexist,(_Bool)1,(_Bool)0);
        }
      }
      else {
        #line 4058 
        _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BT ext info bit3=0, wifi_connected=%d\n",(int)wifi_connected);
        #line 4064 
        if (! wifi_connected) {
          #line 4065 
          _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BT ext info bit3 check, set BT to ignore Wlan active!!\n");
          #line 4068 
          btc8821a2ant_ignore_wlan_act(btcoexist,(_Bool)1,(_Bool)1);
        }
      }
    }
  }
  #line 4076 
  if (((int)bt_info & 4) != 0) 
                               #line 4077 
                               coex_sta_1->c2h_bt_inquiry_page = (_Bool)1; else 
                                                                    #line 4079 
                                                                    coex_sta_1->c2h_bt_inquiry_page = (_Bool)0;
  #line 4082 
  if (((int)bt_info & 1) == 0) {
    #line 4083 
    coex_sta_1->bt_link_exist = (_Bool)0;
    #line 4084 
    coex_sta_1->pan_exist = (_Bool)0;
    #line 4085 
    coex_sta_1->a2dp_exist = (_Bool)0;
    #line 4086 
    coex_sta_1->hid_exist = (_Bool)0;
    #line 4087 
    coex_sta_1->sco_exist = (_Bool)0;
  }
  else {
    #line 4089 
    coex_sta_1->bt_link_exist = (_Bool)1;
    #line 4090 
    if (((int)bt_info & 128) != 0) 
                                   #line 4091 
                                   coex_sta_1->pan_exist = (_Bool)1; else 
                                                                    #line 4093 
                                                                    coex_sta_1->pan_exist = (_Bool)0;
    #line 4094 
    if (((int)bt_info & 64) != 0) 
                                  #line 4095 
                                  coex_sta_1->a2dp_exist = (_Bool)1; else 
                                                                    #line 4097 
                                                                    coex_sta_1->a2dp_exist = (_Bool)0;
    #line 4098 
    if (((int)bt_info & 32) != 0) 
                                  #line 4099 
                                  coex_sta_1->hid_exist = (_Bool)1; else 
                                                                    #line 4101 
                                                                    coex_sta_1->hid_exist = (_Bool)0;
    #line 4102 
    if (((int)bt_info & 2) != 0) 
                                 #line 4103 
                                 coex_sta_1->sco_exist = (_Bool)1; else 
                                                                    #line 4105 
                                                                    coex_sta_1->sco_exist = (_Bool)0;
    #line 4107 
    if ((! coex_sta_1->hid_exist && ! coex_sta_1->c2h_bt_inquiry_page) && ! coex_sta_1->sco_exist) 
      #line 4110 
      if (coex_sta_1->high_priority_tx + coex_sta_1->high_priority_rx > 159U) 
        #line 4112 
        coex_sta_1->hid_exist = (_Bool)1;
  }
  #line 4116 
  btc8821a2ant_update_bt_link_info(btcoexist);
  #line 4118 
  if (((int)bt_info & 1) == 0) {
    #line 4119 
    coex_dm_1->bt_status = (unsigned char)0U;
    #line 4120 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BtInfoNotify(), BT Non-Connected idle!!!\n");
  }
  else 
    #line 4122 
    if ((unsigned int)bt_info == 1U) {
      #line 4124 
      coex_dm_1->bt_status = (unsigned char)1U;
      #line 4125 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BtInfoNotify(), BT Connected-idle!!!\n");
    }
    else 
      #line 4127 
      if (((int)bt_info & 2) != 0 || ((int)bt_info & 16) != 0) {
        #line 4129 
        coex_dm_1->bt_status = (unsigned char)4U;
        #line 4130 
        _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BtInfoNotify(), BT SCO busy!!!\n");
      }
      else 
        #line 4132 
        if (((int)bt_info & 8) != 0) {
          #line 4133 
          coex_dm_1->bt_status = (unsigned char)3U;
          #line 4134 
          _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BtInfoNotify(), BT ACL busy!!!\n");
        }
        else {
          #line 4137 
          coex_dm_1->bt_status = (unsigned char)6U;
          #line 4138 
          _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BtInfoNotify(), BT Non-Defined state!!!\n");
        }
  #line 4142 
  if ((unsigned int)coex_dm_1->bt_status + 253U <= 2U) {
    #line 4145 
    bt_busy = (_Bool)1;
    #line 4146 
    limited_dig = (_Bool)1;
  }
  else {
    #line 4148 
    bt_busy = (_Bool)0;
    #line 4149 
    limited_dig = (_Bool)0;
  }
  #line 4152 
  (*(btcoexist->btc_set))((void *)btcoexist,(unsigned char)1,(void *)(& bt_busy));
  #line 4154 
  coex_dm_1->limited_dig = limited_dig;
  #line 4155 
  (*(btcoexist->btc_set))((void *)btcoexist,(unsigned char)2,(void *)(& limited_dig));
  #line 4157 
  btc8821a2ant_run_coexist_mechanism(btcoexist);
  #line 4158 
  return;
}

#line 4160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.c"
void ex_btc8821a2ant_halt_notify(struct btc_coexist *btcoexist)
{
  #line 4162 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 4164 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Halt notify\n");
  #line 4167 
  btc8821a2ant_wifi_off_hw_cfg(btcoexist);
  #line 4168 
  btc8821a2ant_ignore_wlan_act(btcoexist,(_Bool)1,(_Bool)1);
  #line 4169 
  ex_btc8821a2ant_media_status_notify(btcoexist,(unsigned char)0);
  #line 4170 
  return;
}

#line 4172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.c"
void ex_btc8821a2ant_pnp_notify(struct btc_coexist *btcoexist, u8 pnp_state)
{
  #line 4174 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 4176 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Pnp notify\n");
  #line 4178 
  if ((unsigned int)pnp_state == 1U) 
                                     #line 4179 
                                     _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Pnp notify to SLEEP\n");
  else 
    #line 4181 
    if ((unsigned int)pnp_state == 0U) {
      #line 4182 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Pnp notify to WAKE UP\n");
      #line 4184 
      ex_btc8821a2ant_init_hwconfig(btcoexist);
      #line 4185 
      btc8821a2ant_init_coex_dm(btcoexist);
      #line 4186 
      btc8821a2ant_query_bt_info(btcoexist);
    }
  #line 4188 
  return;
}

#line 4190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.c"
void ex_btc8821a2ant_periodical(struct btc_coexist *btcoexist)
{
  #line 4192 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 4194 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], ==========================Periodical===========================\n");
  #line 4197 
  if ((unsigned int)coex_sta_1->dis_ver_info_cnt <= 5U) {
    #line 4198 
    coex_sta_1->dis_ver_info_cnt = (unsigned char)((unsigned int)coex_sta_1->dis_ver_info_cnt + 1U);
    #line 4199 
    if ((unsigned int)coex_sta_1->dis_ver_info_cnt == 3U) {
      #line 4203 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Set GNT_BT control by PTA\n");
      #line 4205 
      btc8821a2ant_set_ant_path(btcoexist,(unsigned char)0,(_Bool)0,(_Bool)0);
    }
  }
  #line 4210 
  if ((int)btcoexist->auto_report_2ant != 0) 
                                             #line 4211 
                                             btc8821a2ant_query_bt_info(btcoexist);
  else {
    #line 4213 
    btc8821a2ant_monitor_bt_ctr(btcoexist);
    #line 4214 
    btc8821a2ant_monitor_wifi_ctr(btcoexist);
    #line 4216 
    if ((int)btc8821a2ant_is_wifi_status_changed(btcoexist) != 0) 
                                                                  #line 4218 
                                                                  btc8821a2ant_run_coexist_mechanism(btcoexist);
    else 
      #line 4216 
      if ((int)coex_dm_1->auto_tdma_adjust != 0) 
                                                 #line 4218 
                                                 btc8821a2ant_run_coexist_mechanism(btcoexist);
  }
  #line 4220 
  return;
}

#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/percpu.h"
#line 88 
void __bad_percpu_size(void);
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/preempt.h"
__inline static int preempt_count(void)
{
  #line 26 
  int pfo_ret__;
  #line 26 
  switch (4UL) {
    #line 26 
    case (unsigned long)1: 
                           #line 26 
    ;
    #line 27 
    ldv_inline_asm();
    #line 26 
    break;
    #line 26 
    case (unsigned long)2: 
                           #line 26 
    ;
    #line 27 
    ldv_inline_asm();
    #line 26 
    break;
    #line 26 
    case (unsigned long)4: 
                           #line 26 
    ;
    #line 27 
    ldv_inline_asm();
    #line 26 
    break;
    #line 26 
    case (unsigned long)8: 
                           #line 26 
    ;
    #line 27 
    ldv_inline_asm();
    #line 26 
    break;
    #line 26 
    default: 
             #line 26 
    ;
    #line 26 
    __bad_percpu_size();
  }
  #line 26 
  return pfo_ret__ & 2147483647;
}

#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_api_smp.h"
#line 28 
void _raw_spin_lock_bh(raw_spinlock_t *);
#line 40 
#line 40 
void _raw_spin_unlock_bh(raw_spinlock_t *);
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_bh(spinlock_t *lock)
{
  #line 343 
  _raw_spin_lock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 344 
  return;
}

#line 345 
#line 778  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/realtek/rtlwifi/btcoexist/btcoexist.ko/concurrency safety/0/concurrency safety/weaver/halbtcoutsrc.i.aux"
static void cif_spin_lock_bh_entry_list_lock_of_rtl_locks(spinlock_t *lock);
#line 381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_bh(spinlock_t *lock)
{
  #line 383 
  _raw_spin_unlock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 384 
  return;
}

#line 385 
#line 787  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/realtek/rtlwifi/btcoexist/btcoexist.ko/concurrency safety/0/concurrency safety/weaver/halbtcoutsrc.i.aux"
static void cif_spin_unlock_bh_entry_list_lock_of_rtl_locks(spinlock_t *lock);
#line 40 
#line 40 
void ldv_spin_model_lock(char *);
#line 41 
#line 41 
void ldv_spin_model_unlock(char *);
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
#line 61 
void __init_waitqueue_head(struct wait_queue_head *, char *, struct lock_class_key *);
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
#line 81 
extern unsigned long jiffies;
#line 291 
#line 291 
unsigned int jiffies_to_msecs(unsigned long);
#line 302 
#line 302 
unsigned long __msecs_to_jiffies(unsigned int);
#line 309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
__inline static unsigned long _msecs_to_jiffies(unsigned int m)
{
  #line 311 
  return (unsigned long)(((long)m + 3L) / 4L);
}

#line 364  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
__inline static unsigned long msecs_to_jiffies(unsigned int m)
{
  #line 366 
  if (0 != 0) {
    #line 367 
    if ((int)m < 0) 
                    #line 368 
                    return 4611686018427387902UL;
    #line 369 
    return _msecs_to_jiffies(m);
  }
  else {
    #line 371 
    return __msecs_to_jiffies(m);
  }
}

#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/completion.h"
__inline static void __init_completion(struct completion *x)
{
  #line 87 
  x->done = 0U;
  {
    #line 88 
    struct lock_class_key __key;
    #line 88 
    __init_waitqueue_head(& x->wait,(char *)"&x->wait",& __key);
  }
  #line 90 
  return;
}

#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/completion.h"
__inline static void reinit_completion(struct completion *x)
{
  #line 100 
  x->done = 0U;
  #line 101 
  return;
}

#line 107 
#line 107 
unsigned long wait_for_completion_timeout(struct completion *, unsigned long);
#line 3090  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
__inline static u8 rtl_read_byte(struct rtl_priv *rtlpriv, u32 addr)
{
  #line 3092 
  return (*(rtlpriv->io.read8_sync))(rtlpriv,addr);
}

#line 3095  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
__inline static u16 rtl_read_word(struct rtl_priv *rtlpriv, u32 addr)
{
  #line 3097 
  return (*(rtlpriv->io.read16_sync))(rtlpriv,addr);
}

#line 3105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
__inline static void rtl_write_byte(struct rtl_priv *rtlpriv, u32 addr, u8 val8)
{
  #line 3107 
  (*(rtlpriv->io.write8_async))(rtlpriv,addr,(unsigned char)((int)val8));
  #line 3109 
  if ((int)(rtlpriv->cfg)->write_readback != 0) 
                                                #line 3110 
                                                (*(rtlpriv->io.read8_sync))(rtlpriv,addr);
  #line 3111 
  return;
}

#line 3121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
__inline static void rtl_write_word(struct rtl_priv *rtlpriv, u32 addr, u16 val16)
{
  #line 3123 
  (*(rtlpriv->io.write16_async))(rtlpriv,addr,(unsigned short)((int)val16));
  #line 3125 
  if ((int)(rtlpriv->cfg)->write_readback != 0) 
                                                #line 3126 
                                                (*(rtlpriv->io.read16_sync))(rtlpriv,addr);
  #line 3127 
  return;
}

#line 3138  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
__inline static u32 rtl_get_bbreg(struct ieee80211_hw *hw, u32 regaddr, u32 bitmask)
{
  #line 3141 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 3143 
  return (*(((rtlpriv->cfg)->ops)->get_bbreg))(hw,regaddr,bitmask);
}

#line 3146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
__inline static void rtl_set_bbreg(struct ieee80211_hw *hw, u32 regaddr, u32 bitmask, u32 data)
{
  #line 3149 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 3151 
  (*(((rtlpriv->cfg)->ops)->set_bbreg))(hw,regaddr,bitmask,data);
  #line 3152 
  return;
}

#line 3160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
__inline static u32 rtl_get_rfreg(struct ieee80211_hw *hw, enum radio_path rfpath, u32 regaddr, u32 bitmask)
{
  #line 3164 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 3166 
  return (*(((rtlpriv->cfg)->ops)->get_rfreg))(hw,rfpath,regaddr,bitmask);
}

#line 3169  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
__inline static void rtl_set_rfreg(struct ieee80211_hw *hw, enum radio_path rfpath, u32 regaddr, u32 bitmask, u32 data)
{
  #line 3173 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 3175 
  (*(((rtlpriv->cfg)->ops)->set_rfreg))(hw,rfpath,regaddr,bitmask,data);
  #line 3176 
  return;
}

#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/base.h"
#line 110 
void rtl_rx_ampdu_apply(struct rtl_priv *);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/ps.h"
#line 14 
void rtl_lps_enter(struct ieee80211_hw *);
#line 15 
#line 15 
void rtl_lps_leave(struct ieee80211_hw *);
#line 751  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.h"
#line 1400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
void exhalbtc_pre_load_firmware(struct btc_coexist *btcoexist);
#line 766  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.h"
#line 1725  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
void exhalbtc_rf_status_notify(struct btc_coexist *btcoexist, u8 type);
#line 768  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.h"
#line 1761  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
void exhalbtc_pnp_notify(struct btc_coexist *btcoexist, u8 pnp_state);
#line 769  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.h"
#line 1785  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
void exhalbtc_coex_dm_switch(struct btc_coexist *btcoexist);
#line 771  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.h"
#line 1837  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
void exhalbtc_dbg_control(struct btc_coexist *btcoexist, u8 code, u8 len, u8 *data);
#line 773  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.h"
#line 1849  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
void exhalbtc_antenna_detection(struct btc_coexist *btcoexist, u32 cent_freq, u32 offset, u32 span, u32 seconds);
#line 775  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.h"
#line 1856  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
void exhalbtc_stack_update_profile_info(void);
#line 776  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.h"
#line 1868  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
void exhalbtc_set_hci_version(struct btc_coexist *btcoexist, u16 hci_version);
#line 777  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.h"
#line 1876  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
void exhalbtc_set_bt_patch_version(struct btc_coexist *btcoexist, u16 bt_hci_version, u16 bt_patch_version);
#line 779  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.h"
#line 1860  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
void exhalbtc_update_min_bt_rssi(struct btc_coexist *btcoexist, s8 bt_rssi);
#line 781  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.h"
#line 1886  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
void exhalbtc_set_chip_type(struct btc_coexist *btcoexist, u8 chip_type);
#line 782  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.h"
#line 1914  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
void exhalbtc_set_ant_num(struct rtl_priv *rtlpriv, u8 type, u8 ant_num);
#line 792  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.h"
#line 1938  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
void exhalbtc_set_single_ant_path(struct btc_coexist *btcoexist, u8 single_ant_path);
#line 794  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.h"
#line 1038  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
void halbtc_send_wifi_port_id_cmd(void *bt_context);
#line 795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.h"
#line 1048  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
void halbtc_set_default_port_id_cmd(void *bt_context);
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b2ant.h"
#line 163 
void ex_btc8723b2ant_init_hwconfig(struct btc_coexist *btcoexist);
#line 164 
#line 164 
void ex_btc8723b2ant_init_coex_dm(struct btc_coexist *btcoexist);
#line 165 
#line 165 
void ex_btc8723b2ant_ips_notify(struct btc_coexist *btcoexist, u8 type);
#line 166 
#line 166 
void ex_btc8723b2ant_lps_notify(struct btc_coexist *btcoexist, u8 type);
#line 167 
#line 167 
void ex_btc8723b2ant_scan_notify(struct btc_coexist *btcoexist, u8 type);
#line 168 
#line 168 
void ex_btc8723b2ant_connect_notify(struct btc_coexist *btcoexist, u8 type);
#line 169 
#line 169 
void ex_btc8723b2ant_media_status_notify(struct btc_coexist *btcoexist, u8 type);
#line 171 
#line 171 
void ex_btc8723b2ant_special_packet_notify(struct btc_coexist *btcoexist, u8 type);
#line 173 
#line 173 
void ex_btc8723b2ant_bt_info_notify(struct btc_coexist *btcoexist, u8 *tmpbuf, u8 length);
#line 175 
#line 175 
void ex_btc8723b2ant_halt_notify(struct btc_coexist *btcoexist);
#line 176 
#line 176 
void ex_btc8723b2ant_periodical(struct btc_coexist *btcoexist);
#line 177 
#line 177 
void ex_btc8723b2ant_display_coex_info(struct btc_coexist *btcoexist, struct seq_file *m);
#line 179 
#line 179 
void ex_btc8723b2ant_pnp_notify(struct btc_coexist *btcoexist, u8 pnp_state);
#line 180 
#line 180 
void ex_btc8723b2ant_pre_load_firmware(struct btc_coexist *btcoexist);
#line 181 
#line 181 
void ex_btc8723b2ant_power_on_setting(struct btc_coexist *btcoexist);
#line 151  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a1ant.h"
#line 151 
void ex_btc8821a1ant_init_hwconfig(struct btc_coexist *btcoexist, bool wifionly);
#line 153 
#line 153 
void ex_btc8821a1ant_init_coex_dm(struct btc_coexist *btcoexist);
#line 154 
#line 154 
void ex_btc8821a1ant_ips_notify(struct btc_coexist *btcoexist, u8 type);
#line 155 
#line 155 
void ex_btc8821a1ant_lps_notify(struct btc_coexist *btcoexist, u8 type);
#line 156 
#line 156 
void ex_btc8821a1ant_scan_notify(struct btc_coexist *btcoexist, u8 type);
#line 157 
#line 157 
void ex_btc8821a1ant_connect_notify(struct btc_coexist *btcoexist, u8 type);
#line 158 
#line 158 
void ex_btc8821a1ant_media_status_notify(struct btc_coexist *btcoexist, u8 type);
#line 160 
#line 160 
void ex_btc8821a1ant_special_packet_notify(struct btc_coexist *btcoexist, u8 type);
#line 162 
#line 162 
void ex_btc8821a1ant_bt_info_notify(struct btc_coexist *btcoexist, u8 *tmp_buf, u8 length);
#line 164 
#line 164 
void ex_btc8821a1ant_halt_notify(struct btc_coexist *btcoexist);
#line 165 
#line 165 
void ex_btc8821a1ant_pnp_notify(struct btc_coexist *btcoexist, u8 pnp_state);
#line 166 
#line 166 
void ex_btc8821a1ant_periodical(struct btc_coexist *btcoexist);
#line 167 
#line 167 
void ex_btc8821a1ant_display_coex_info(struct btc_coexist *btcoexist, struct seq_file *m);
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
static char *gl_btc_wifi_bw_string[5U] = {(char *)"11bg", (char *)"HT20", (char *)"HT40", (char *)"HT80", (char *)"HT160"};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
static char *gl_btc_wifi_freq_string[2U] = {(char *)"2.4G", (char *)"5G"};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
static bool halbtc_is_bt_coexist_available(struct btc_coexist *btcoexist)
{
  #line 25 
  if (! btcoexist->binded || btcoexist->adapter == (void *)0) 
                                                              #line 26 
                                                              return (_Bool)0;
  #line 28 
  return (_Bool)1;
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
static bool halbtc_is_wifi_busy(struct rtl_priv *rtlpriv)
{
  #line 33 
  if ((int)rtlpriv->link_info.busytraffic != 0) 
                                                #line 34 
                                                return (_Bool)1; else 
                                                                   #line 36 
                                                                   return (_Bool)0;
}

#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
static void halbtc_dbg_init(void)
{
  #line 41 
  return;
}

#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
static bool is_any_client_connect_to_ap(struct btc_coexist *btcoexist)
{
  #line 50 
  struct rtl_sta_info *drv_priv;
  #line 48 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 49 
  struct rtl_mac *mac = & rtlpriv->mac80211;
  #line 51 
  u8 cnt = (unsigned char)0U;
  #line 53 
  if ((mac->opmode == (unsigned int)NL80211_IFTYPE_ADHOC || mac->opmode == (unsigned int)NL80211_IFTYPE_MESH_POINT) || mac->opmode == (unsigned int)NL80211_IFTYPE_AP) {
    #line 56 
    if (((unsigned long)preempt_count() & 2096896UL) != 0UL) {
      #line 57 
      void *__mptr;
      #line 57 
      __mptr = (void *)rtlpriv->entry_list.next;
      #line 57 
      drv_priv = ((struct rtl_sta_info *)__mptr);
      #line 57 
      while (& drv_priv->list != & rtlpriv->entry_list) {
        #line 57 
        void *__mptr_0;
        #line 59 
        cnt = (u8)((int)cnt + 1);
        #line 57 
        __mptr_0 = (void *)drv_priv->list.next;
        #line 57 
        drv_priv = ((struct rtl_sta_info *)__mptr_0);
      }
    }
    else {
      #line 63 
      void *__mptr_1;
      #line 62 
      cif_spin_lock_bh_entry_list_lock_of_rtl_locks(& rtlpriv->locks.entry_list_lock);
      #line 63 
      __mptr_1 = (void *)rtlpriv->entry_list.next;
      #line 63 
      drv_priv = ((struct rtl_sta_info *)__mptr_1);
      #line 63 
      while (& drv_priv->list != & rtlpriv->entry_list) {
        #line 63 
        void *__mptr_2;
        #line 65 
        cnt = (u8)((int)cnt + 1);
        #line 63 
        __mptr_2 = (void *)drv_priv->list.next;
        #line 63 
        drv_priv = ((struct rtl_sta_info *)__mptr_2);
      }
      #line 67 
      cif_spin_unlock_bh_entry_list_lock_of_rtl_locks(& rtlpriv->locks.entry_list_lock);
    }
  }
  #line 70 
  if ((unsigned int)cnt != 0U) 
                               #line 71 
                               return (_Bool)1; else 
                                                     #line 73 
                                                     return (_Bool)0;
}

#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
static bool halbtc_legacy(struct rtl_priv *adapter)
{
  #line 78 
  struct rtl_priv *rtlpriv = adapter;
  #line 79 
  struct rtl_mac *mac = & rtlpriv->mac80211;
  #line 81 
  bool is_legacy = (_Bool)0;
  #line 83 
  if ((unsigned int)mac->mode == 2U || (unsigned int)mac->mode == 4U) 
    #line 84 
    is_legacy = (_Bool)1;
  #line 86 
  return is_legacy;
}

#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
bool halbtc_is_wifi_uplink(struct rtl_priv *adapter)
{
  #line 91 
  struct rtl_priv *rtlpriv = adapter;
  #line 93 
  if ((int)rtlpriv->link_info.tx_busy_traffic != 0) 
                                                    #line 94 
                                                    return (_Bool)1; else 
                                                                    #line 96 
                                                                    return (_Bool)0;
}

#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
static u32 halbtc_get_wifi_bw(struct btc_coexist *btcoexist)
{
  #line 101 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 102 
  struct rtl_phy *rtlphy = & rtlpriv->phy;
  #line 103 
  u32 wifi_bw = 1U;
  #line 105 
  if ((int)halbtc_legacy(rtlpriv) != 0) 
                                        #line 106 
                                        wifi_bw = 0U;
  else 
    #line 108 
    switch ((int)rtlphy->current_chan_bw) {
      #line 109 
      case 0: 
              #line 109 
      ;
      #line 110 
      wifi_bw = 1U;
      #line 111 
      break;
      #line 112 
      case 1: 
              #line 112 
      ;
      #line 113 
      wifi_bw = 2U;
      #line 114 
      break;
      #line 115 
      case 2: 
              #line 115 
      ;
      #line 116 
      wifi_bw = 3U;
      #line 117 
      break;
    }
  #line 121 
  return wifi_bw;
}

#line 124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
static u8 halbtc_get_wifi_central_chnl(struct btc_coexist *btcoexist)
{
  #line 126 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 127 
  struct rtl_phy *rtlphy = & rtlpriv->phy;
  #line 128 
  u8 chnl = (unsigned char)1U;
  #line 130 
  if ((unsigned int)rtlphy->current_channel != 0U) 
                                                   #line 131 
                                                   chnl = rtlphy->current_channel;
  #line 132 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"static halbtc_get_wifi_central_chnl:%d\n",(int)chnl);
  #line 134 
  return chnl;
}

#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
static u8 rtl_get_hwpg_single_ant_path(struct rtl_priv *rtlpriv)
{
  #line 139 
  return rtlpriv->btcoexist.btc_info.single_ant_path;
}

#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
static u8 rtl_get_hwpg_bt_type(struct rtl_priv *rtlpriv)
{
  #line 144 
  return rtlpriv->btcoexist.btc_info.bt_type;
}

#line 147  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
static u8 rtl_get_hwpg_ant_num(struct rtl_priv *rtlpriv)
{
  #line 149 
  u8 num;
  #line 151 
  if ((unsigned int)rtlpriv->btcoexist.btc_info.ant_num == 0U) 
                                                               #line 152 
                                                               num = (unsigned char)2U; else 
                                                                    #line 154 
                                                                    num = (unsigned char)1U;
  #line 156 
  return num;
}

#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
static u8 rtl_get_hwpg_package_type(struct rtl_priv *rtlpriv)
{
  #line 161 
  struct rtl_hal *rtlhal = & rtlpriv->rtlhal;
  #line 163 
  return rtlhal->package_type;
}

#line 167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
static u8 rtl_get_hwpg_rfe_type(struct rtl_priv *rtlpriv)
{
  #line 169 
  struct rtl_hal *rtlhal = & rtlpriv->rtlhal;
  #line 171 
  return rtlhal->rfe_type;
}

#line 175  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
static bool halbtc_is_hw_mailbox_exist(struct btc_coexist *btcoexist)
{
  #line 177 
  if ((unsigned int)((struct rtl_priv *)btcoexist->adapter)->rtlhal.hw_type == 14U) 
    #line 178 
    return (_Bool)0; else 
                          #line 180 
                          return (_Bool)1;
}

#line 184  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
static bool halbtc_send_bt_mp_operation(struct btc_coexist *btcoexist, u8 op_code, u8 *cmd, u32 len, unsigned long wait_ms)
{
  #line 187 
  struct rtl_priv *rtlpriv;
  #line 189 
  u8 req_num;
  #line 188 
  u8 oper_ver = (unsigned char)0U;
  #line 191 
  if (! halbtc_is_hw_mailbox_exist(btcoexist)) 
                                               #line 192 
                                               return (_Bool)0;
  #line 194 
  if (wait_ms != 0UL) 
                      #line 195 
                      reinit_completion(& btcoexist->bt_mp_comp);
  #line 197 
  rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 202 
  switch ((int)op_code) {
    #line 203 
    case 0: 
            #line 203 
    ;
    #line 204 
    req_num = (unsigned char)14U;
    #line 205 
    break;
    #line 206 
    case 30: 
             #line 206 
    ;
    #line 207 
    req_num = (unsigned char)5U;
    #line 208 
    break;
    #line 209 
    case 31: 
             #line 209 
    ;
    #line 210 
    req_num = (unsigned char)6U;
    #line 211 
    break;
    #line 212 
    case 32: 
             #line 212 
    ;
    #line 213 
    req_num = (unsigned char)9U;
    #line 214 
    break;
    #line 215 
    case 42: 
             #line 215 
    ;
    #line 216 
    req_num = (unsigned char)7U;
    #line 217 
    break;
    #line 218 
    case 43: 
             #line 218 
    ;
    #line 219 
    req_num = (unsigned char)8U;
    #line 220 
    break;
    #line 221 
    case 44: 
             #line 221 
    ;
    #line 222 
    req_num = (unsigned char)2U;
    #line 223 
    break;
    #line 224 
    case 45: 
             #line 224 
    ;
    #line 225 
    req_num = (unsigned char)3U;
    #line 226 
    break;
    #line 227 
    case 46: 
             #line 227 
    ;
    #line 228 
    req_num = (unsigned char)4U;
    #line 229 
    break;
    #line 230 
    case 48: 
             #line 230 
    ;
    #line 231 
    req_num = (unsigned char)10U;
    #line 232 
    break;
    #line 233 
    case 49: 
             #line 233 
    ;
    #line 234 
    req_num = (unsigned char)11U;
    #line 235 
    break;
    #line 236 
    case 12: 
             #line 236 
    ;
    #line 237 
    case 13: 
             #line 237 
    ;
    #line 238 
    case 17: 
             #line 238 
    ;
    #line 239 
    default: 
             #line 239 
    ;
    #line 240 
    req_num = (unsigned char)0U;
    #line 241 
    break;
  }
  #line 244 
  *cmd = *cmd;
  #line 245 
  *cmd = (unsigned char)((int)*cmd | ((int)req_num << 4));
  #line 246 
  *(cmd + 1U) = op_code;
  #line 247 
  (*(((rtlpriv->cfg)->ops)->fill_h2c_cmd))(rtlpriv->mac80211.hw,(unsigned char)103,len,cmd);
  #line 250 
  if (wait_ms == 0UL) 
                      #line 251 
                      return (_Bool)1;
  #line 253 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"btmpinfo wait req_num=%d wait=%ld\n",(int)req_num,wait_ms);
  #line 256 
  if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                           #line 257 
                                                           return (_Bool)0;
  #line 259 
  ;
  #line 259 
  if (wait_for_completion_timeout(& btcoexist->bt_mp_comp,
                                    msecs_to_jiffies((unsigned int)wait_ms)) == 0UL) {
    #line 261 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,3,(char *)"btmpinfo wait (req_num=%d) timeout\n",(int)req_num);
    #line 264 
    return (_Bool)0;
  }
  #line 267 
  return (_Bool)1;
}

#line 270  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
static void halbtc_leave_lps(struct btc_coexist *btcoexist)
{
  #line 272 
  struct rtl_priv *rtlpriv;
  #line 273 
  bool ap_enable = (_Bool)0;
  #line 275 
  rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 277 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)14,(void *)(& ap_enable));
  #line 280 
  if ((int)ap_enable != 0) {
    #line 281 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,3,(char *)"%s()<--dont leave lps under AP mode\n",(char *)"halbtc_leave_lps");
    #line 283 
    return;
  }
  #line 286 
  btcoexist->bt_info.bt_ctrl_lps = (_Bool)1;
  #line 287 
  btcoexist->bt_info.bt_lps_on = (_Bool)0;
  #line 288 
  rtl_lps_leave(rtlpriv->mac80211.hw);
  #line 289 
  return;
}

#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
static void halbtc_enter_lps(struct btc_coexist *btcoexist)
{
  #line 293 
  struct rtl_priv *rtlpriv;
  #line 294 
  bool ap_enable = (_Bool)0;
  #line 296 
  rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 298 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)14,(void *)(& ap_enable));
  #line 301 
  if ((int)ap_enable != 0) {
    #line 302 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,3,(char *)"%s()<--dont enter lps under AP mode\n",(char *)"halbtc_enter_lps");
    #line 304 
    return;
  }
  #line 307 
  btcoexist->bt_info.bt_ctrl_lps = (_Bool)1;
  #line 308 
  btcoexist->bt_info.bt_lps_on = (_Bool)1;
  #line 309 
  rtl_lps_enter(rtlpriv->mac80211.hw);
  #line 310 
  return;
}

#line 312  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
static void halbtc_normal_lps(struct btc_coexist *btcoexist)
{
  #line 314 
  struct rtl_priv *rtlpriv;
  #line 316 
  rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 318 
  if ((int)btcoexist->bt_info.bt_ctrl_lps != 0) {
    #line 319 
    btcoexist->bt_info.bt_lps_on = (_Bool)0;
    #line 320 
    rtl_lps_leave(rtlpriv->mac80211.hw);
    #line 321 
    btcoexist->bt_info.bt_ctrl_lps = (_Bool)0;
  }
  #line 323 
  return;
}

#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
static void halbtc_pre_normal_lps(struct btc_coexist *btcoexist)
{
  #line 327 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 329 
  if ((int)btcoexist->bt_info.bt_ctrl_lps != 0) {
    #line 330 
    btcoexist->bt_info.bt_lps_on = (_Bool)0;
    #line 331 
    rtl_lps_leave(rtlpriv->mac80211.hw);
  }
  #line 333 
  return;
}

#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
static void halbtc_post_normal_lps(struct btc_coexist *btcoexist)
{
  #line 337 
  if ((int)btcoexist->bt_info.bt_ctrl_lps != 0) 
                                                #line 338 
                                                btcoexist->bt_info.bt_ctrl_lps = (_Bool)0;
  #line 339 
  return;
}

#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
static void halbtc_leave_low_power(struct btc_coexist *btcoexist)
{
  #line 343 
  return;
}

#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
static void halbtc_normal_low_power(struct btc_coexist *btcoexist)
{
  #line 347 
  return;
}

#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
static void halbtc_disable_low_power(struct btc_coexist *btcoexist, bool low_pwr_disable)
{
  #line 353 
  btcoexist->bt_info.bt_disable_low_pwr = low_pwr_disable;
  #line 354 
  return;
}

#line 356  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
static void halbtc_aggregation_check(struct btc_coexist *btcoexist)
{
  #line 359 
  unsigned long pre_time;
  #line 358 
  bool need_to_act = (_Bool)0;
  #line 360 
  unsigned long cur_time = 0UL;
  #line 361 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 368 
  cur_time = jiffies;
  #line 369 
  if (jiffies_to_msecs(cur_time - pre_time) <= 8000U) 
                                                      #line 371 
                                                      return;
  #line 373 
  pre_time = cur_time;
  #line 375 
  if ((int)btcoexist->bt_info.reject_agg_pkt != 0) {
    #line 376 
    need_to_act = (_Bool)1;
    #line 377 
    btcoexist->bt_info.pre_reject_agg_pkt = btcoexist->bt_info.reject_agg_pkt;
  }
  else {
    #line 380 
    if ((int)btcoexist->bt_info.pre_reject_agg_pkt != 0) {
      #line 381 
      need_to_act = (_Bool)1;
      #line 382 
      btcoexist->bt_info.pre_reject_agg_pkt = btcoexist->bt_info.reject_agg_pkt;
    }
    #line 386 
    if ((int)btcoexist->bt_info.pre_bt_ctrl_agg_buf_size != (int)btcoexist->bt_info.bt_ctrl_agg_buf_size) {
      #line 388 
      need_to_act = (_Bool)1;
      #line 389 
      btcoexist->bt_info.pre_bt_ctrl_agg_buf_size = btcoexist->bt_info.bt_ctrl_agg_buf_size;
    }
    #line 393 
    if ((int)btcoexist->bt_info.bt_ctrl_agg_buf_size != 0) {
      #line 394 
      if ((int)btcoexist->bt_info.pre_agg_buf_size != (int)btcoexist->bt_info.agg_buf_size) 
        #line 396 
        need_to_act = (_Bool)1;
      #line 398 
      btcoexist->bt_info.pre_agg_buf_size = btcoexist->bt_info.agg_buf_size;
    }
    #line 402 
    if ((int)need_to_act != 0) 
                               #line 403 
                               rtl_rx_ampdu_apply(rtlpriv);
  }
  #line 405 
  return;
}

#line 407  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
static u32 halbtc_get_bt_patch_version(struct btc_coexist *btcoexist)
{
  #line 409 
  u8 cmd_buffer[4U] = {(unsigned char)0U};
  #line 411 
  if ((unsigned int)btcoexist->bt_info.bt_real_fw_ver != 0U) 
                                                             #line 412 
                                                             goto label_done;
  #line 415 
  halbtc_send_bt_mp_operation(btcoexist,(unsigned char)0,(u8 *)(& cmd_buffer),4U,200UL);
  #line 418 
  label_done: 
              #line 418 
  ;
  #line 419 
  return (unsigned int)btcoexist->bt_info.bt_real_fw_ver;
}

#line 422  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
static u32 halbtc_get_bt_coex_supported_feature(void *btc_context)
{
  #line 424 
  struct btc_coexist *btcoexist = (struct btc_coexist *)btc_context;
  #line 425 
  u8 cmd_buffer[4U] = {(unsigned char)0U};
  #line 427 
  if (btcoexist->bt_info.bt_supported_feature != 0U) 
                                                     #line 428 
                                                     goto label_done;
  #line 431 
  halbtc_send_bt_mp_operation(btcoexist,(unsigned char)42,(u8 *)(& cmd_buffer),4U,200UL);
  #line 435 
  label_done: 
              #line 435 
  ;
  #line 436 
  return btcoexist->bt_info.bt_supported_feature;
}

#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
static u32 halbtc_get_bt_coex_supported_version(void *btc_context)
{
  #line 441 
  struct btc_coexist *btcoexist = (struct btc_coexist *)btc_context;
  #line 442 
  u8 cmd_buffer[4U] = {(unsigned char)0U};
  #line 444 
  if (btcoexist->bt_info.bt_supported_version != 0U) 
                                                     #line 445 
                                                     goto label_done;
  #line 448 
  halbtc_send_bt_mp_operation(btcoexist,(unsigned char)43,(u8 *)(& cmd_buffer),4U,200UL);
  #line 452 
  label_done: 
              #line 452 
  ;
  #line 453 
  return btcoexist->bt_info.bt_supported_version;
}

#line 456  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
static u32 halbtc_get_bt_device_info(void *btc_context)
{
  #line 458 
  struct btc_coexist *btcoexist = (struct btc_coexist *)btc_context;
  #line 459 
  u8 cmd_buffer[4U] = {(unsigned char)0U};
  #line 462 
  halbtc_send_bt_mp_operation(btcoexist,(unsigned char)48,(u8 *)(& cmd_buffer),4U,200UL);
  #line 466 
  return btcoexist->bt_info.bt_device_info;
}

#line 469  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
static u32 halbtc_get_bt_forbidden_slot_val(void *btc_context)
{
  #line 471 
  struct btc_coexist *btcoexist = (struct btc_coexist *)btc_context;
  #line 472 
  u8 cmd_buffer[4U] = {(unsigned char)0U};
  #line 475 
  halbtc_send_bt_mp_operation(btcoexist,(unsigned char)49,(u8 *)(& cmd_buffer),4U,200UL);
  #line 479 
  return btcoexist->bt_info.bt_forb_slot_val;
}

#line 482  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
static u32 halbtc_get_wifi_link_status(struct btc_coexist *btcoexist)
{
  #line 488 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 489 
  struct rtl_mac *mac = & rtlpriv->mac80211;
  #line 490 
  u32 ret_val = 0U;
  #line 491 
  u32 port_connected_status = 0U;
  #line 491 
  u32 num_of_connected_port = 0U;
  #line 493 
  if (mac->opmode == (unsigned int)NL80211_IFTYPE_STATION && mac->link_state > (unsigned int)MAC80211_LINKING) {
    #line 495 
    port_connected_status |= 1U;
    #line 496 
    num_of_connected_port ++;
  }
  #line 499 
  if ((int)is_any_client_connect_to_ap(btcoexist) != 0) {
    #line 500 
    port_connected_status |= 2U;
    #line 501 
    num_of_connected_port ++;
  }
  #line 505 
  ret_val = (num_of_connected_port << 16) | port_connected_status;
  #line 507 
  return ret_val;
}

#line 510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
static s32 halbtc_get_wifi_rssi(struct rtl_priv *rtlpriv)
{
  #line 512 
  return (int)rtlpriv->dm.undec_sm_pwdb;
}

#line 515  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
static bool halbtc_get(void *void_btcoexist, u8 get_type, void *out_buf)
{
  #line 517 
  struct btc_coexist *btcoexist = (struct btc_coexist *)void_btcoexist;
  #line 518 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 519 
  struct rtl_phy *rtlphy = & rtlpriv->phy;
  #line 520 
  struct rtl_mac *mac = & rtlpriv->mac80211;
  #line 521 
  struct rtl_hal *rtlhal = & rtlpriv->rtlhal;
  #line 522 
  bool *bool_tmp = (bool *)out_buf;
  #line 523 
  int *s32_tmp = (int *)out_buf;
  #line 524 
  u32 *u32_tmp = (u32 *)out_buf;
  #line 525 
  u8 *u8_tmp = (u8 *)out_buf;
  #line 526 
  bool tmp = (_Bool)0;
  #line 527 
  bool ret = (_Bool)1;
  #line 529 
  if (! halbtc_is_bt_coexist_available(btcoexist)) 
                                                   #line 530 
                                                   return (_Bool)0;
  #line 532 
  switch ((int)get_type) {
    #line 533 
    case 0: 
            #line 533 
    ;
    #line 534 
    *bool_tmp = (_Bool)0;
    #line 535 
    ret = (_Bool)0;
    #line 536 
    break;
    #line 537 
    case 1: 
            #line 537 
    ;
    #line 538 
    *bool_tmp = (_Bool)0;
    #line 539 
    ret = (_Bool)0;
    #line 540 
    break;
    #line 541 
    case 2: 
            #line 541 
    ;
    #line 542 
    if (rtlpriv->mac80211.opmode == (unsigned int)NL80211_IFTYPE_STATION && rtlpriv->mac80211.link_state > (unsigned int)MAC80211_LINKING) 
      #line 544 
      tmp = (_Bool)1;
    #line 545 
    if ((int)is_any_client_connect_to_ap(btcoexist) != 0) 
                                                          #line 546 
                                                          tmp = (_Bool)1;
    #line 547 
    *bool_tmp = tmp;
    #line 548 
    break;
    #line 549 
    case 3: 
            #line 549 
    ;
    #line 550 
    *u8_tmp = (unsigned char)0U;
    #line 551 
    break;
    #line 552 
    case 4: 
            #line 552 
    ;
    #line 553 
    if ((int)halbtc_is_wifi_busy(rtlpriv) != 0) 
                                                #line 554 
                                                *bool_tmp = (_Bool)1; else 
                                                                    #line 556 
                                                                    *bool_tmp = (_Bool)0;
    #line 557 
    break;
    #line 558 
    case 5: 
            #line 558 
    ;
    #line 559 
    if ((int)mac->act_scanning != 0) 
                                     #line 560 
                                     *bool_tmp = (_Bool)1; else 
                                                                #line 562 
                                                                *bool_tmp = (_Bool)0;
    #line 563 
    break;
    #line 564 
    case 6: 
            #line 564 
    ;
    #line 565 
    if (mac->link_state == (unsigned int)MAC80211_LINKING) 
                                                           #line 566 
                                                           *bool_tmp = (_Bool)1; else 
                                                                    #line 568 
                                                                    *bool_tmp = (_Bool)0;
    #line 569 
    break;
    #line 570 
    case 11: 
             #line 570 
    ;
    #line 571 
    if (mac->link_state == (unsigned int)MAC80211_LINKING) 
                                                           #line 572 
                                                           *bool_tmp = (_Bool)1; else 
                                                                    #line 574 
                                                                    *bool_tmp = (_Bool)0;
    #line 575 
    break;
    #line 576 
    case 12: 
             #line 576 
    ;
    #line 577 
    *bool_tmp = rtlpriv->btcoexist.btc_info.in_4way;
    #line 578 
    break;
    #line 579 
    case 13: 
             #line 579 
    ;
    #line 580 
    if (rtlhal->current_bandtype == (unsigned int)BAND_ON_5G) 
                                                              #line 581 
                                                              *bool_tmp = (_Bool)1; else 
                                                                    #line 583 
                                                                    *bool_tmp = (_Bool)0;
    #line 584 
    break;
    #line 585 
    case 14: 
             #line 585 
    ;
    #line 586 
    if (mac->opmode == (unsigned int)NL80211_IFTYPE_AP) 
                                                        #line 587 
                                                        *bool_tmp = (_Bool)1; else 
                                                                    #line 589 
                                                                    *bool_tmp = (_Bool)0;
    #line 590 
    break;
    #line 591 
    case 15: 
             #line 591 
    ;
    #line 592 
    if (rtlpriv->sec.pairwise_enc_algorithm == (unsigned int)NO_ENCRYPTION) 
      #line 593 
      *bool_tmp = (_Bool)0; else 
                                 #line 595 
                                 *bool_tmp = (_Bool)1;
    #line 596 
    break;
    #line 597 
    case 16: 
             #line 597 
    ;
    #line 598 
    if ((unsigned int)rtlpriv->mac80211.mode == 2U) 
                                                    #line 599 
                                                    *bool_tmp = (_Bool)1; else 
                                                                    #line 601 
                                                                    *bool_tmp = (_Bool)0;
    #line 602 
    break;
    #line 603 
    case 17: 
             #line 603 
    ;
    #line 604 
    *bool_tmp = (_Bool)0;
    #line 605 
    break;
    #line 606 
    case 18: 
             #line 606 
    ;
    #line 607 
    *bool_tmp = (_Bool)0;
    #line 608 
    break;
    #line 609 
    case 19: 
             #line 609 
    ;
    #line 610 
    *bool_tmp = (_Bool)0;
    #line 611 
    break;
    #line 612 
    case 21: 
             #line 612 
    ;
    #line 613 
    *bool_tmp = (_Bool)0;
    #line 614 
    break;
    #line 615 
    case 22: 
             #line 615 
    ;
    #line 616 
    *s32_tmp = halbtc_get_wifi_rssi(rtlpriv);
    #line 617 
    break;
    #line 618 
    case 23: 
             #line 618 
    ;
    #line 619 
    *s32_tmp = 0;
    #line 620 
    ret = (_Bool)0;
    #line 621 
    break;
    #line 622 
    case 24: 
             #line 622 
    ;
    #line 623 
    *u32_tmp = halbtc_get_wifi_bw(btcoexist);
    #line 624 
    break;
    #line 625 
    case 25: 
             #line 625 
    ;
    #line 626 
    if ((int)halbtc_is_wifi_uplink(rtlpriv) != 0) 
                                                  #line 627 
                                                  *u32_tmp = 0U; else 
                                                                   #line 629 
                                                                   *u32_tmp = 1U;
    #line 630 
    break;
    #line 631 
    case 26: 
             #line 631 
    ;
    #line 632 
    *u32_tmp = (unsigned int)(((int)rtlhal->fw_version << 16) | (int)rtlhal->fw_subversion);
    #line 633 
    break;
    #line 634 
    case 27: 
             #line 634 
    ;
    #line 635 
    *u32_tmp = halbtc_get_wifi_link_status(btcoexist);
    #line 636 
    break;
    #line 637 
    case 28: 
             #line 637 
    ;
    #line 638 
    *u32_tmp = halbtc_get_bt_patch_version(btcoexist);
    #line 639 
    break;
    #line 640 
    case 29: 
             #line 640 
    ;
    #line 641 
    *u32_tmp = 2U;
    #line 642 
    break;
    #line 643 
    case 30: 
             #line 643 
    ;
    #line 644 
    *u32_tmp = halbtc_get_bt_coex_supported_version((void *)btcoexist);
    #line 645 
    break;
    #line 646 
    case 31: 
             #line 646 
    ;
    #line 647 
    *u32_tmp = halbtc_get_bt_coex_supported_feature((void *)btcoexist);
    #line 648 
    break;
    #line 649 
    case 32: 
             #line 649 
    ;
    #line 650 
    *u32_tmp = halbtc_get_bt_device_info((void *)btcoexist);
    #line 651 
    break;
    #line 652 
    case 33: 
             #line 652 
    ;
    #line 653 
    *u32_tmp = halbtc_get_bt_forbidden_slot_val((void *)btcoexist);
    #line 654 
    break;
    #line 655 
    case 34: 
             #line 655 
    ;
    #line 656 
    *u32_tmp = (*(btcoexist->btc_phydm_query_phy_counter))((void *)btcoexist,(enum dm_info_query)DM_INFO_IQK_ALL);
    #line 659 
    break;
    #line 660 
    case 35: 
             #line 660 
    ;
    #line 661 
    *u32_tmp = (*(btcoexist->btc_phydm_query_phy_counter))((void *)btcoexist,(enum dm_info_query)DM_INFO_IQK_OK);
    #line 664 
    break;
    #line 665 
    case 36: 
             #line 665 
    ;
    #line 666 
    *u32_tmp = (*(btcoexist->btc_phydm_query_phy_counter))((void *)btcoexist,(enum dm_info_query)DM_INFO_IQK_NG);
    #line 669 
    break;
    #line 670 
    case 37: 
             #line 670 
    ;
    #line 671 
    *u8_tmp = rtlphy->current_channel;
    #line 672 
    break;
    #line 673 
    case 38: 
             #line 673 
    ;
    #line 674 
    *u8_tmp = halbtc_get_wifi_central_chnl(btcoexist);
    #line 675 
    break;
    #line 676 
    case 39: 
             #line 676 
    ;
    #line 677 
    *u8_tmp = (unsigned char)0U;
    #line 678 
    ret = (_Bool)0;
    #line 679 
    break;
    #line 680 
    case 41: 
             #line 680 
    ;
    #line 681 
    *u8_tmp = rtlpriv->btcoexist.btc_info.ap_num;
    #line 682 
    break;
    #line 683 
    case 42: 
             #line 683 
    ;
    #line 684 
    *u8_tmp = (unsigned char)0U;
    #line 685 
    break;
    #line 686 
    case 43: 
             #line 686 
    ;
    #line 687 
    *u8_tmp = (unsigned char)0U;
    #line 688 
    break;
    #line 691 
    case 44: 
             #line 691 
    ;
    #line 692 
    *u8_tmp = btcoexist->pwr_mode_val[0];
    #line 693 
    break;
    #line 695 
    default: 
             #line 695 
    ;
    #line 696 
    ret = (_Bool)0;
    #line 697 
    break;
  }
  #line 700 
  return ret;
}

#line 703  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
static bool halbtc_set(void *void_btcoexist, u8 set_type, void *in_buf)
{
  #line 705 
  struct btc_coexist *btcoexist = (struct btc_coexist *)void_btcoexist;
  #line 706 
  bool *bool_tmp = (bool *)in_buf;
  #line 707 
  u8 *u8_tmp = (u8 *)in_buf;
  #line 708 
  u32 *u32_tmp = (u32 *)in_buf;
  #line 709 
  bool ret = (_Bool)1;
  #line 711 
  if (! halbtc_is_bt_coexist_available(btcoexist)) 
                                                   #line 712 
                                                   return (_Bool)0;
  #line 714 
  switch ((int)set_type) {
    #line 716 
    case 0: 
            #line 716 
    ;
    #line 717 
    btcoexist->bt_info.bt_disabled = *bool_tmp;
    #line 718 
    break;
    #line 719 
    case 1: 
            #line 719 
    ;
    #line 720 
    btcoexist->bt_info.bt_busy = *bool_tmp;
    #line 721 
    break;
    #line 722 
    case 2: 
            #line 722 
    ;
    #line 723 
    btcoexist->bt_info.limited_dig = *bool_tmp;
    #line 724 
    break;
    #line 725 
    case 3: 
            #line 725 
    ;
    #line 726 
    btcoexist->bt_info.force_to_roam = *bool_tmp;
    #line 727 
    break;
    #line 728 
    case 4: 
            #line 728 
    ;
    #line 729 
    btcoexist->bt_info.reject_agg_pkt = *bool_tmp;
    #line 730 
    break;
    #line 731 
    case 5: 
            #line 731 
    ;
    #line 732 
    btcoexist->bt_info.bt_ctrl_agg_buf_size = *bool_tmp;
    #line 733 
    break;
    #line 734 
    case 6: 
            #line 734 
    ;
    #line 735 
    btcoexist->bt_info.increase_scan_dev_num = *bool_tmp;
    #line 736 
    break;
    #line 737 
    case 7: 
            #line 737 
    ;
    #line 738 
    btcoexist->bt_info.bt_tx_rx_mask = *bool_tmp;
    #line 739 
    break;
    #line 740 
    case 8: 
            #line 740 
    ;
    #line 741 
    btcoexist->bt_info.miracast_plus_bt = *bool_tmp;
    #line 742 
    break;
    #line 744 
    case 9: 
            #line 744 
    ;
    #line 745 
    btcoexist->bt_info.rssi_adjust_for_agc_table_on = *u8_tmp;
    #line 746 
    break;
    #line 747 
    case 11: 
             #line 747 
    ;
    #line 748 
    btcoexist->bt_info.agg_buf_size = *u8_tmp;
    #line 749 
    break;
    #line 752 
    case 12: 
             #line 752 
    ;
    #line 753 
    ret = (_Bool)0;
    #line 754 
    break;
    #line 755 
    case 13: 
             #line 755 
    ;
    #line 756 
    halbtc_aggregation_check(btcoexist);
    #line 757 
    break;
    #line 760 
    case 17: 
             #line 760 
    ;
    #line 761 
    btcoexist->bt_info.rssi_adjust_for_1ant_coex_type = *u8_tmp;
    #line 762 
    break;
    #line 763 
    case 10: 
             #line 763 
    ;
    #line 764 
    break;
    #line 765 
    case 18: 
             #line 765 
    ;
    #line 766 
    btcoexist->bt_info.lps_val = *u8_tmp;
    #line 767 
    break;
    #line 768 
    case 19: 
             #line 768 
    ;
    #line 769 
    btcoexist->bt_info.rpwm_val = *u8_tmp;
    #line 770 
    break;
    #line 772 
    case 22: 
             #line 772 
    ;
    #line 773 
    halbtc_leave_lps(btcoexist);
    #line 774 
    break;
    #line 775 
    case 23: 
             #line 775 
    ;
    #line 776 
    halbtc_enter_lps(btcoexist);
    #line 777 
    break;
    #line 778 
    case 24: 
             #line 778 
    ;
    #line 779 
    halbtc_normal_lps(btcoexist);
    #line 780 
    break;
    #line 781 
    case 25: 
             #line 781 
    ;
    #line 782 
    halbtc_pre_normal_lps(btcoexist);
    #line 783 
    break;
    #line 784 
    case 26: 
             #line 784 
    ;
    #line 785 
    halbtc_post_normal_lps(btcoexist);
    #line 786 
    break;
    #line 787 
    case 28: 
             #line 787 
    ;
    #line 788 
    halbtc_disable_low_power(btcoexist,(_Bool)((bool)((int)*bool_tmp) != 0));
    #line 789 
    break;
    #line 790 
    case 30: 
             #line 790 
    ;
    #line 791 
    btcoexist->bt_info.ra_mask = *u32_tmp;
    #line 792 
    break;
    #line 793 
    case 31: 
             #line 793 
    ;
    #line 794 
    break;
    #line 795 
    case 32: 
             #line 795 
    ;
    #line 796 
    break;
    #line 797 
    case 33: 
             #line 797 
    ;
    #line 798 
    break;
    #line 799 
    case 34: 
             #line 799 
    ;
    #line 800 
    break;
    #line 801 
    default: 
             #line 801 
    ;
    #line 802 
    break;
  }
  #line 805 
  return ret;
}

#line 808  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
static void halbtc_display_coex_statistics(struct btc_coexist *btcoexist, struct seq_file *m)
{
  #line 810 
  return;
}

#line 813  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
static void halbtc_display_bt_link_info(struct btc_coexist *btcoexist, struct seq_file *m)
{
  #line 815 
  return;
}

#line 818  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
static void halbtc_display_wifi_status(struct btc_coexist *btcoexist, struct seq_file *m)
{
  #line 879 
  char *tmp_0;
  #line 876 
  char *tmp_1;
  #line 893 
  char *tmp_2;
  #line 892 
  char *tmp_3;
  #line 891 
  char *tmp_4;
  #line 890 
  char *tmp_5;
  #line 821 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 822 
  s32 wifi_rssi = 0;
  #line 822 
  s32 bt_hs_rssi = 0;
  #line 823 
  bool scan = (_Bool)0;
  #line 823 
  bool link = (_Bool)0;
  #line 823 
  bool roam = (_Bool)0;
  #line 823 
  bool wifi_busy = (_Bool)0;
  #line 824 
  bool wifi_under_b_mode = (_Bool)0;
  #line 825 
  bool wifi_under_5g = (_Bool)0;
  #line 826 
  u32 wifi_bw = 1U;
  #line 827 
  u32 wifi_traffic_dir = 0U;
  #line 828 
  u32 wifi_freq = 0U;
  #line 829 
  u32 wifi_link_status = 0U;
  #line 830 
  bool bt_hs_on = (_Bool)0;
  #line 830 
  bool under_ips = (_Bool)0;
  #line 830 
  bool under_lps = (_Bool)0;
  #line 831 
  bool low_power = (_Bool)0;
  #line 831 
  bool dc_mode = (_Bool)0;
  #line 832 
  u8 wifi_chnl = (unsigned char)0U;
  #line 832 
  u8 wifi_hs_chnl = (unsigned char)0U;
  #line 833 
  u8 ap_num = (unsigned char)0U;
  #line 835 
  wifi_link_status = halbtc_get_wifi_link_status(btcoexist);
  #line 836 
  seq_printf(m,(char *)"\n %-35s = %d/ %d/ %d/ %d/ %d",(char *)"STA/vWifi/HS/p2pGo/p2pGc",(int)wifi_link_status & 1,(int)(wifi_link_status >> 1) & 1,(int)(wifi_link_status >> 2) & 1,(int)(wifi_link_status >> 3) & 1,(int)(wifi_link_status >> 4) & 1);
  #line 844 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)0,(void *)(& bt_hs_on));
  #line 845 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)37,(void *)(& wifi_chnl));
  #line 846 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)39,(void *)(& wifi_hs_chnl));
  #line 847 
  seq_printf(m,(char *)"\n %-35s = %d / %d(%d)",(char *)"Dot11 channel / HsChnl(High Speed)",(int)wifi_chnl,(int)wifi_hs_chnl,(int)bt_hs_on);
  #line 851 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)22,(void *)(& wifi_rssi));
  #line 852 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)23,(void *)(& bt_hs_rssi));
  #line 853 
  seq_printf(m,(char *)"\n %-35s = %d/ %d",(char *)"Wifi rssi/ HS rssi",wifi_rssi + -100,bt_hs_rssi + -100);
  #line 857 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)5,(void *)(& scan));
  #line 858 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)6,(void *)(& link));
  #line 859 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)11,(void *)(& roam));
  #line 860 
  seq_printf(m,(char *)"\n %-35s = %d/ %d/ %d ",(char *)"Wifi link/ roam/ scan",(int)link,(int)roam,(int)scan);
  #line 864 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)13,(void *)(& wifi_under_5g));
  #line 865 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)24,(void *)(& wifi_bw));
  #line 866 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)4,(void *)(& wifi_busy));
  #line 867 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)25,(void *)(& wifi_traffic_dir));
  #line 869 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)41,(void *)(& ap_num));
  #line 870 
  wifi_freq = (unsigned int)((int)wifi_under_5g != 0);
  #line 871 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)16,(void *)(& wifi_under_b_mode));
  #line 874 
  ;
  #line 879 
  if (! wifi_busy) 
                   #line 879 
                   tmp_0 = (char *)"idle";
  else {
    #line 879 
    char *tmp;
    #line 879 
    if (wifi_traffic_dir == 0U) 
                                #line 879 
                                tmp = (char *)"uplink"; else 
                                                             #line 879 
                                                             tmp = (char *)"downlink";
    #line 879 
    tmp_0 = tmp;
  }
  #line 876 
  if (wifi_under_b_mode) 
                         #line 876 
                         tmp_1 = (char *)"11b"; else 
                                                     #line 876 
                                                     tmp_1 = gl_btc_wifi_bw_string[wifi_bw];
  #line 874 
  ;
  #line 874 
  ;
  #line 874 
  seq_printf(m,(char *)"\n %-35s = %s / %s/ %s/ AP=%d ",(char *)"Wifi freq/ bw/ traffic",gl_btc_wifi_freq_string[wifi_freq],tmp_1,tmp_0,(int)ap_num);
  #line 885 
  dc_mode = (_Bool)1;
  #line 886 
  under_ips = (_Bool)(rtlpriv->psc.inactive_pwrstate == (unsigned int)ERFOFF);
  #line 887 
  under_lps = (_Bool)(rtlpriv->psc.dot11_psmode != (unsigned int)EACTIVE);
  #line 888 
  low_power = (_Bool)0;
  #line 893 
  if ((int)low_power != 0) 
                           #line 893 
                           tmp_2 = (char *)", 32k"; else 
                                                         #line 893 
                                                         tmp_2 = (char *)"";
  #line 892 
  if ((int)under_lps != 0) 
                           #line 892 
                           tmp_3 = (char *)", LPS ON"; else 
                                                            #line 892 
                                                            tmp_3 = (char *)"";
  #line 891 
  if ((int)under_ips != 0) 
                           #line 891 
                           tmp_4 = (char *)", IPS ON"; else 
                                                            #line 891 
                                                            tmp_4 = (char *)"";
  #line 890 
  if ((int)dc_mode != 0) 
                         #line 890 
                         tmp_5 = (char *)"DC mode"; else 
                                                         #line 890 
                                                         tmp_5 = (char *)"AC mode";
  #line 889 
  ;
  #line 889 
  seq_printf(m,(char *)"\n %-35s = %s%s%s%s",(char *)"Power Status",tmp_5,tmp_4,tmp_3,tmp_2);
  #line 896 
  seq_printf(m,(char *)"\n %-35s = %02x %02x %02x %02x %02x %02x (0x%x/0x%x)",(char *)"Power mode cmd(lps/rpwm)",(int)btcoexist->pwr_mode_val[0],(int)btcoexist->pwr_mode_val[1],(int)btcoexist->pwr_mode_val[2],(int)btcoexist->pwr_mode_val[3],(int)btcoexist->pwr_mode_val[4],(int)btcoexist->pwr_mode_val[5],(int)btcoexist->bt_info.lps_val,(int)btcoexist->bt_info.rpwm_val);
  #line 904 
  return;
}

#line 909  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
static u8 halbtc_read_1byte(void *bt_context, u32 reg_addr)
{
  #line 911 
  struct btc_coexist *btcoexist = (struct btc_coexist *)bt_context;
  #line 912 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 914 
  return rtl_read_byte(rtlpriv,reg_addr);
}

#line 917  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
static u16 halbtc_read_2byte(void *bt_context, u32 reg_addr)
{
  #line 919 
  struct btc_coexist *btcoexist = (struct btc_coexist *)bt_context;
  #line 920 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 922 
  return rtl_read_word(rtlpriv,reg_addr);
}

#line 925  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
static u32 halbtc_read_4byte(void *bt_context, u32 reg_addr)
{
  #line 927 
  struct btc_coexist *btcoexist = (struct btc_coexist *)bt_context;
  #line 928 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 930 
  return rtl_read_dword(rtlpriv,reg_addr);
}

#line 933  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
static void halbtc_write_1byte(void *bt_context, u32 reg_addr, u32 data)
{
  #line 935 
  struct btc_coexist *btcoexist = (struct btc_coexist *)bt_context;
  #line 936 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 938 
  rtl_write_byte(rtlpriv,reg_addr,(unsigned char)((int)((unsigned char)data)));
  #line 939 
  return;
}

#line 941  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
static void halbtc_bitmask_write_1byte(void *bt_context, u32 reg_addr, u32 bit_mask, u8 data)
{
  #line 946 
  u8 original_value;
  #line 947 
  u8 i;
  #line 944 
  struct btc_coexist *btcoexist = (struct btc_coexist *)bt_context;
  #line 945 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 946 
  u8 bit_shift = (unsigned char)0U;
  #line 949 
  if (bit_mask != 4294967295U) {
    #line 950 
    original_value = rtl_read_byte(rtlpriv,reg_addr);
    #line 951 
    i = (unsigned char)0U;
    #line 951 
    while ((unsigned int)i <= 7U) {
      #line 952 
      if (((bit_mask >> (int)i) & 1U) != 0U) 
                                             #line 953 
                                             break;
      #line 951 
      i = (u8)((int)i + 1);
    }
    #line 955 
    bit_shift = i;
    #line 956 
    data = (unsigned char)((~ ((int)((unsigned char)bit_mask)) & (int)original_value) | ((int)((unsigned char)((int)data << (int)bit_shift)) & (int)((unsigned char)bit_mask)));
  }
  #line 959 
  rtl_write_byte(rtlpriv,reg_addr,(unsigned char)((int)data));
  #line 960 
  return;
}

#line 962  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
static void halbtc_write_2byte(void *bt_context, u32 reg_addr, u16 data)
{
  #line 964 
  struct btc_coexist *btcoexist = (struct btc_coexist *)bt_context;
  #line 965 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 967 
  rtl_write_word(rtlpriv,reg_addr,(unsigned short)((int)data));
  #line 968 
  return;
}

#line 970  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
static void halbtc_write_4byte(void *bt_context, u32 reg_addr, u32 data)
{
  #line 972 
  struct btc_coexist *btcoexist = (struct btc_coexist *)bt_context;
  #line 974 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 976 
  rtl_write_dword(rtlpriv,reg_addr,data);
  #line 977 
  return;
}

#line 979  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
static void halbtc_write_local_reg_1byte(void *btc_context, u32 reg_addr, u8 data)
{
  #line 982 
  struct btc_coexist *btcoexist = (struct btc_coexist *)btc_context;
  #line 983 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 985 
  if (! (btcoexist->chip_interface == (unsigned int)BTC_INTF_SDIO)) 
    #line 987 
    if (btcoexist->chip_interface == (unsigned int)BTC_INTF_PCI) 
                                                                 #line 988 
                                                                 rtl_write_byte(rtlpriv,reg_addr,(unsigned char)((int)data));
    else 
      #line 989 
      if (btcoexist->chip_interface == (unsigned int)BTC_INTF_USB) 
                                                                   #line 990 
                                                                   rtl_write_byte(rtlpriv,reg_addr,(unsigned char)((int)data));
  #line 991 
  return;
}

#line 993  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
static void halbtc_set_bbreg(void *bt_context, u32 reg_addr, u32 bit_mask, u32 data)
{
  #line 996 
  struct btc_coexist *btcoexist = (struct btc_coexist *)bt_context;
  #line 997 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 999 
  rtl_set_bbreg(rtlpriv->mac80211.hw,reg_addr,bit_mask,data);
  #line 1000 
  return;
}

#line 1002  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
static u32 halbtc_get_bbreg(void *bt_context, u32 reg_addr, u32 bit_mask)
{
  #line 1004 
  struct btc_coexist *btcoexist = (struct btc_coexist *)bt_context;
  #line 1005 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 1007 
  return rtl_get_bbreg(rtlpriv->mac80211.hw,reg_addr,bit_mask);
}

#line 1010  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
static void halbtc_set_rfreg(void *bt_context, u8 rf_path, u32 reg_addr, u32 bit_mask, u32 data)
{
  #line 1013 
  struct btc_coexist *btcoexist = (struct btc_coexist *)bt_context;
  #line 1014 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 1016 
  rtl_set_rfreg(rtlpriv->mac80211.hw,(enum radio_path)rf_path,reg_addr,bit_mask,data);
  #line 1017 
  return;
}

#line 1019  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
static u32 halbtc_get_rfreg(void *bt_context, u8 rf_path, u32 reg_addr, u32 bit_mask)
{
  #line 1022 
  struct btc_coexist *btcoexist = (struct btc_coexist *)bt_context;
  #line 1023 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 1025 
  return rtl_get_rfreg(rtlpriv->mac80211.hw,(enum radio_path)rf_path,reg_addr,
                    bit_mask);
}

#line 1028  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
static void halbtc_fill_h2c_cmd(void *bt_context, u8 element_id, u32 cmd_len, u8 *cmd_buf)
{
  #line 1031 
  struct btc_coexist *btcoexist = (struct btc_coexist *)bt_context;
  #line 1032 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 1034 
  (*(((rtlpriv->cfg)->ops)->fill_h2c_cmd))(rtlpriv->mac80211.hw,(unsigned char)((int)element_id),cmd_len,cmd_buf);
  #line 1035 
  return;
}

#line 1038  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
void halbtc_send_wifi_port_id_cmd(void *bt_context)
{
  #line 1040 
  struct btc_coexist *btcoexist = (struct btc_coexist *)bt_context;
  #line 1041 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 1042 
  u8 cmd_buf[1U] = {(unsigned char)0U};
  #line 1044 
  (*(((rtlpriv->cfg)->ops)->fill_h2c_cmd))(rtlpriv->mac80211.hw,(unsigned char)113,1U,(u8 *)(& cmd_buf));
  #line 1046 
  return;
}

#line 1048  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
void halbtc_set_default_port_id_cmd(void *bt_context)
{
  #line 1050 
  struct btc_coexist *btcoexist = (struct btc_coexist *)bt_context;
  #line 1051 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 1052 
  struct ieee80211_hw *hw = rtlpriv->mac80211.hw;
  #line 1054 
  if (((rtlpriv->cfg)->ops)->set_default_port_id_cmd == (void (*)(struct ieee80211_hw *))0) 
    #line 1055 
    return;
  #line 1057 
  (*(((rtlpriv->cfg)->ops)->set_default_port_id_cmd))(hw);
  #line 1058 
  return;
}

#line 1061  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
static void halbtc_set_bt_reg(void *btc_context, u8 reg_type, u32 offset, u32 set_val)
{
  #line 1063 
  struct btc_coexist *btcoexist = (struct btc_coexist *)btc_context;
  #line 1064 
  u8 cmd_buffer1[4U] = {(unsigned char)0U};
  #line 1065 
  u8 cmd_buffer2[4U] = {(unsigned char)0U};
  #line 1068 
  *((__le16 *)(& cmd_buffer1[2])) = (unsigned short)set_val;
  #line 1069 
  if (! halbtc_send_bt_mp_operation(btcoexist,(unsigned char)13,
                                  (u8 *)(& cmd_buffer1),4U,200UL)) 
    #line 1071 
    return;
  #line 1074 
  cmd_buffer2[2] = reg_type;
  #line 1075 
  cmd_buffer2[3] = (unsigned char)offset;
  #line 1076 
  halbtc_send_bt_mp_operation(btcoexist,(unsigned char)12,(u8 *)(& cmd_buffer2),4U,200UL);
  #line 1078 
  return;
}

#line 1080  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
static void halbtc_display_dbg_msg(void *bt_context, u8 disp_type, struct seq_file *m)
{
  #line 1083 
  struct btc_coexist *btcoexist = (struct btc_coexist *)bt_context;
  #line 1085 
  switch ((int)disp_type) {
    #line 1086 
    case 0: 
            #line 1086 
    ;
    #line 1087 
    halbtc_display_coex_statistics(btcoexist,m);
    #line 1088 
    break;
    #line 1089 
    case 1: 
            #line 1089 
    ;
    #line 1090 
    halbtc_display_bt_link_info(btcoexist,m);
    #line 1091 
    break;
    #line 1092 
    case 4: 
            #line 1092 
    ;
    #line 1093 
    halbtc_display_wifi_status(btcoexist,m);
    #line 1094 
    break;
    #line 1095 
    default: 
             #line 1095 
    ;
    #line 1096 
    break;
  }
  #line 1098 
  return;
}

#line 1100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
static u32 halbtc_get_bt_reg(void *btc_context, u8 reg_type, u32 offset)
{
  #line 1102 
  return 0U;
}

#line 1105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
static bool halbtc_under_ips(struct btc_coexist *btcoexist)
{
  #line 1109 
  enum rf_pwrstate rtstate;
  #line 1107 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 1108 
  struct rtl_ps_ctl *ppsc = & rtlpriv->psc;
  #line 1111 
  if ((int)ppsc->inactiveps != 0) {
    #line 1112 
    rtstate = ppsc->rfpwr_state;
    #line 1114 
    if (rtstate != (unsigned int)ERFON && ppsc->rfoff_reason == 268435456U) 
      #line 1116 
      return (_Bool)1;
  }
  #line 1120 
  return (_Bool)0;
}

#line 1124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
static u32 halbtc_get_phydm_version(void *btc_context)
{
  #line 1126 
  return 0U;
}

#line 1130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
static void halbtc_phydm_modify_ra_pcr_threshold(void *btc_context, u8 ra_offset_direction, u8 ra_threshold_offset)
{
  #line 1132 
  return;
}

#line 1137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
static u32 halbtc_phydm_query_phy_counter(void *btc_context, enum dm_info_query dm_id)
{
  #line 1139 
  return 0U;
}

#line 1142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
static u8 halbtc_get_ant_det_val_from_bt(void *btc_context)
{
  #line 1144 
  struct btc_coexist *btcoexist = (struct btc_coexist *)btc_context;
  #line 1145 
  u8 cmd_buffer[4U] = {(unsigned char)0U};
  #line 1148 
  halbtc_send_bt_mp_operation(btcoexist,(unsigned char)44,(u8 *)(& cmd_buffer),4U,200UL);
  #line 1153 
  return btcoexist->bt_info.bt_ant_det_val;
}

#line 1156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
static u8 halbtc_get_ble_scan_type_from_bt(void *btc_context)
{
  #line 1158 
  struct btc_coexist *btcoexist = (struct btc_coexist *)btc_context;
  #line 1159 
  u8 cmd_buffer[4U] = {(unsigned char)0U};
  #line 1162 
  halbtc_send_bt_mp_operation(btcoexist,(unsigned char)46,(u8 *)(& cmd_buffer),4U,200UL);
  #line 1167 
  return btcoexist->bt_info.bt_ble_scan_type;
}

#line 1170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
static u32 halbtc_get_ble_scan_para_from_bt(void *btc_context, u8 scan_type)
{
  #line 1172 
  struct btc_coexist *btcoexist = (struct btc_coexist *)btc_context;
  #line 1173 
  u8 cmd_buffer[4U] = {(unsigned char)0U};
  #line 1176 
  halbtc_send_bt_mp_operation(btcoexist,(unsigned char)45,(u8 *)(& cmd_buffer),4U,200UL);
  #line 1181 
  return btcoexist->bt_info.bt_ble_scan_para;
}

#line 1184  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
static bool halbtc_get_bt_afh_map_from_bt(void *btc_context, u8 map_type, u8 *afh_map)
{
  #line 1189 
  bool ret;
  #line 1187 
  struct btc_coexist *btcoexist = (struct btc_coexist *)btc_context;
  #line 1188 
  u8 cmd_buffer[2U] = {(unsigned char)0U};
  #line 1190 
  u32 *afh_map_l = (u32 *)afh_map;
  #line 1191 
  u32 *afh_map_m = (u32 *)(afh_map + 4U);
  #line 1192 
  u16 *afh_map_h = (u16 *)(afh_map + 8U);
  #line 1195 
  ret = halbtc_send_bt_mp_operation(btcoexist,(unsigned char)30,(u8 *)(& cmd_buffer),2U,200UL);
  #line 1197 
  if (! ret) 
             #line 1198 
             goto exit;
  #line 1200 
  *afh_map_l = btcoexist->bt_info.afh_map_l;
  #line 1203 
  ret = halbtc_send_bt_mp_operation(btcoexist,(unsigned char)31,(u8 *)(& cmd_buffer),2U,200UL);
  #line 1205 
  if (! ret) 
             #line 1206 
             goto exit;
  #line 1208 
  *afh_map_m = btcoexist->bt_info.afh_map_m;
  #line 1211 
  ret = halbtc_send_bt_mp_operation(btcoexist,(unsigned char)32,(u8 *)(& cmd_buffer),2U,200UL);
  #line 1213 
  if (! ret) 
             #line 1214 
             goto exit;
  #line 1216 
  *afh_map_h = btcoexist->bt_info.afh_map_h;
  #line 1218 
  exit: 
        #line 1218 
  ;
  #line 1219 
  return ret;
}

#line 1225  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
bool exhalbtc_initlize_variables(struct rtl_priv *rtlpriv)
{
  #line 1227 
  struct btc_coexist *btcoexist = (struct btc_coexist *)rtlpriv->btcoexist.btc_context;
  #line 1229 
  if (btcoexist == (struct btc_coexist *)0) 
                                            #line 1230 
                                            return (_Bool)0;
  #line 1232 
  halbtc_dbg_init();
  #line 1234 
  btcoexist->btc_read_1byte = & halbtc_read_1byte;
  #line 1235 
  btcoexist->btc_write_1byte = & halbtc_write_1byte;
  #line 1236 
  btcoexist->btc_write_1byte_bitmask = & halbtc_bitmask_write_1byte;
  #line 1237 
  btcoexist->btc_read_2byte = & halbtc_read_2byte;
  #line 1238 
  btcoexist->btc_write_2byte = & halbtc_write_2byte;
  #line 1239 
  btcoexist->btc_read_4byte = & halbtc_read_4byte;
  #line 1240 
  btcoexist->btc_write_4byte = & halbtc_write_4byte;
  #line 1241 
  btcoexist->btc_write_local_reg_1byte = & halbtc_write_local_reg_1byte;
  #line 1243 
  btcoexist->btc_set_bb_reg = & halbtc_set_bbreg;
  #line 1244 
  btcoexist->btc_get_bb_reg = & halbtc_get_bbreg;
  #line 1246 
  btcoexist->btc_set_rf_reg = & halbtc_set_rfreg;
  #line 1247 
  btcoexist->btc_get_rf_reg = & halbtc_get_rfreg;
  #line 1249 
  btcoexist->btc_fill_h2c = & halbtc_fill_h2c_cmd;
  #line 1250 
  btcoexist->btc_disp_dbg_msg = & halbtc_display_dbg_msg;
  #line 1252 
  btcoexist->btc_get = & halbtc_get;
  #line 1253 
  btcoexist->btc_set = & halbtc_set;
  #line 1254 
  btcoexist->btc_set_bt_reg = & halbtc_set_bt_reg;
  #line 1255 
  btcoexist->btc_get_bt_reg = & halbtc_get_bt_reg;
  #line 1257 
  btcoexist->bt_info.bt_ctrl_buf_size = (_Bool)0;
  #line 1258 
  btcoexist->bt_info.agg_buf_size = (unsigned char)5U;
  #line 1260 
  btcoexist->bt_info.increase_scan_dev_num = (_Bool)0;
  #line 1262 
  btcoexist->btc_get_bt_coex_supported_feature = & halbtc_get_bt_coex_supported_feature;
  #line 1264 
  btcoexist->btc_get_bt_coex_supported_version = & halbtc_get_bt_coex_supported_version;
  #line 1266 
  btcoexist->btc_get_bt_phydm_version = & halbtc_get_phydm_version;
  #line 1267 
  btcoexist->btc_phydm_modify_ra_pcr_threshold = & halbtc_phydm_modify_ra_pcr_threshold;
  #line 1269 
  btcoexist->btc_phydm_query_phy_counter = & halbtc_phydm_query_phy_counter;
  #line 1270 
  btcoexist->btc_get_ant_det_val_from_bt = & halbtc_get_ant_det_val_from_bt;
  #line 1271 
  btcoexist->btc_get_ble_scan_type_from_bt = & halbtc_get_ble_scan_type_from_bt;
  #line 1273 
  btcoexist->btc_get_ble_scan_para_from_bt = & halbtc_get_ble_scan_para_from_bt;
  #line 1275 
  btcoexist->btc_get_bt_afh_map_from_bt = & halbtc_get_bt_afh_map_from_bt;
  #line 1278 
  __init_completion(& btcoexist->bt_mp_comp);
  #line 1280 
  return (_Bool)1;
}

#line 1283  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
bool exhalbtc_initlize_variables_wifi_only(struct rtl_priv *rtlpriv)
{
  #line 1286 
  struct wifi_only_haldata *wifionly_haldata;
  #line 1285 
  struct wifi_only_cfg *wifionly_cfg = (struct wifi_only_cfg *)rtlpriv->btcoexist.wifi_only_context;
  #line 1288 
  if (wifionly_cfg == (struct wifi_only_cfg *)0) 
                                                 #line 1289 
                                                 return (_Bool)0;
  #line 1291 
  wifionly_cfg->adapter = (void *)rtlpriv;
  #line 1293 
  switch ((unsigned int)rtlpriv->rtlhal.interface) {
    #line 1294 
    case (unsigned int)0: 
                          #line 1294 
    ;
    #line 1295 
    wifionly_cfg->chip_interface = WIFIONLY_INTF_PCI;
    #line 1296 
    break;
    #line 1297 
    case (unsigned int)1: 
                          #line 1297 
    ;
    #line 1298 
    wifionly_cfg->chip_interface = WIFIONLY_INTF_USB;
    #line 1299 
    break;
    #line 1300 
    default: 
             #line 1300 
    ;
    #line 1301 
    wifionly_cfg->chip_interface = WIFIONLY_INTF_UNKNOWN;
    #line 1302 
    break;
  }
  #line 1305 
  wifionly_haldata = & wifionly_cfg->haldata_info;
  #line 1307 
  wifionly_haldata->customer_id = (unsigned short)0U;
  #line 1308 
  wifionly_haldata->efuse_pg_antnum = rtl_get_hwpg_ant_num(rtlpriv);
  #line 1309 
  wifionly_haldata->efuse_pg_antpath = rtl_get_hwpg_single_ant_path(rtlpriv);
  #line 1311 
  wifionly_haldata->rfe_type = rtl_get_hwpg_rfe_type(rtlpriv);
  #line 1312 
  wifionly_haldata->ant_div_cfg = (unsigned char)0U;
  #line 1314 
  return (_Bool)1;
}

#line 1317  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
bool exhalbtc_bind_bt_coex_withadapter(void *adapter)
{
  #line 1321 
  u8 chip_type;
  #line 1319 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)adapter;
  #line 1320 
  struct btc_coexist *btcoexist = (struct btc_coexist *)rtlpriv->btcoexist.btc_context;
  #line 1321 
  u8 ant_num = (unsigned char)2U;
  #line 1321 
  u8 single_ant_path = (unsigned char)0U;
  #line 1323 
  if (btcoexist == (struct btc_coexist *)0) 
                                            #line 1324 
                                            return (_Bool)0;
  #line 1326 
  if ((int)btcoexist->binded != 0) 
                                   #line 1327 
                                   return (_Bool)0;
  #line 1329 
  switch ((unsigned int)rtlpriv->rtlhal.interface) {
    #line 1330 
    case (unsigned int)0: 
                          #line 1330 
    ;
    #line 1331 
    btcoexist->chip_interface = BTC_INTF_PCI;
    #line 1332 
    break;
    #line 1333 
    case (unsigned int)1: 
                          #line 1333 
    ;
    #line 1334 
    btcoexist->chip_interface = BTC_INTF_USB;
    #line 1335 
    break;
    #line 1336 
    default: 
             #line 1336 
    ;
    #line 1337 
    btcoexist->chip_interface = BTC_INTF_UNKNOWN;
    #line 1338 
    break;
  }
  #line 1341 
  btcoexist->binded = (_Bool)1;
  #line 1342 
  (btcoexist->statistics.cnt_bind) ++;
  #line 1344 
  btcoexist->adapter = adapter;
  #line 1346 
  btcoexist->stack_info.profile_notified = (_Bool)0;
  #line 1348 
  btcoexist->bt_info.bt_ctrl_agg_buf_size = (_Bool)0;
  #line 1349 
  btcoexist->bt_info.agg_buf_size = (unsigned char)5U;
  #line 1351 
  btcoexist->bt_info.increase_scan_dev_num = (_Bool)0;
  #line 1352 
  btcoexist->bt_info.miracast_plus_bt = (_Bool)0;
  #line 1354 
  chip_type = rtl_get_hwpg_bt_type(rtlpriv);
  #line 1355 
  exhalbtc_set_chip_type(btcoexist,(unsigned char)((int)chip_type));
  #line 1356 
  ant_num = rtl_get_hwpg_ant_num(rtlpriv);
  #line 1357 
  exhalbtc_set_ant_num(rtlpriv,(unsigned char)0,(unsigned char)((int)ant_num));
  #line 1360 
  btcoexist->board_info.btdm_ant_pos = (unsigned char)1U;
  #line 1362 
  single_ant_path = rtl_get_hwpg_single_ant_path(rtlpriv);
  #line 1363 
  exhalbtc_set_single_ant_path(btcoexist,(unsigned char)((int)single_ant_path));
  #line 1365 
  if ((unsigned int)rtl_get_hwpg_package_type(rtlpriv) == 0U) 
                                                              #line 1366 
                                                              btcoexist->board_info.tfbga_package = (_Bool)0;
  else {
    #line 1367 
    if ((unsigned int)rtl_get_hwpg_package_type(rtlpriv) == 1U) 
                                                                #line 1368 
                                                                btcoexist->board_info.tfbga_package = (_Bool)0; else 
                                                                    #line 1370 
                                                                    btcoexist->board_info.tfbga_package = (_Bool)1;
  }
  #line 1372 
  if ((int)btcoexist->board_info.tfbga_package != 0) 
                                                     #line 1373 
                                                     _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Package Type = TFBGA\n"); else 
                                                                    #line 1376 
                                                                    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Package Type = Non-TFBGA\n");
  #line 1379 
  btcoexist->board_info.rfe_type = rtl_get_hwpg_rfe_type(rtlpriv);
  #line 1380 
  btcoexist->board_info.ant_div_cfg = (unsigned char)0U;
  #line 1382 
  return (_Bool)1;
}

#line 1385  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
void exhalbtc_power_on_setting(struct btc_coexist *btcoexist)
{
  #line 1387 
  if (! halbtc_is_bt_coexist_available(btcoexist)) 
                                                   #line 1388 
                                                   return;
  #line 1390 
  (btcoexist->statistics.cnt_power_on) ++;
  #line 1392 
  if ((unsigned int)((struct rtl_priv *)btcoexist->adapter)->rtlhal.hw_type == 11U) 
    #line 1393 
    if ((unsigned int)btcoexist->board_info.btdm_ant_num == 2U) 
                                                                #line 1394 
                                                                ex_btc8723b2ant_power_on_setting(btcoexist);
    else 
      #line 1395 
      if ((unsigned int)btcoexist->board_info.btdm_ant_num == 1U) 
                                                                  #line 1396 
                                                                  ex_btc8723b1ant_power_on_setting(btcoexist);
  #line 1397 
  return;
}

#line 1400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
void exhalbtc_pre_load_firmware(struct btc_coexist *btcoexist)
{
  #line 1402 
  if (! halbtc_is_bt_coexist_available(btcoexist)) 
                                                   #line 1403 
                                                   return;
  #line 1405 
  (btcoexist->statistics.cnt_pre_load_firmware) ++;
  #line 1407 
  if ((unsigned int)((struct rtl_priv *)btcoexist->adapter)->rtlhal.hw_type == 11U) 
    #line 1408 
    if ((unsigned int)btcoexist->board_info.btdm_ant_num == 2U) 
                                                                #line 1409 
                                                                ex_btc8723b2ant_pre_load_firmware(btcoexist);
  #line 1410 
  return;
}

#line 1413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
void exhalbtc_init_hw_config(struct btc_coexist *btcoexist, bool wifi_only)
{
  #line 1415 
  if (! halbtc_is_bt_coexist_available(btcoexist)) 
                                                   #line 1416 
                                                   return;
  #line 1418 
  (btcoexist->statistics.cnt_init_hw_config) ++;
  #line 1420 
  if ((unsigned int)((struct rtl_priv *)btcoexist->adapter)->rtlhal.hw_type == 13U) {
    #line 1421 
    if ((unsigned int)btcoexist->board_info.btdm_ant_num == 2U) 
                                                                #line 1422 
                                                                ex_btc8821a2ant_init_hwconfig(btcoexist);
    else 
      #line 1423 
      if ((unsigned int)btcoexist->board_info.btdm_ant_num == 1U) 
                                                                  #line 1424 
                                                                  ex_btc8821a1ant_init_hwconfig(btcoexist,(_Bool)((bool)((int)wifi_only) != 0));
  }
  else 
    #line 1425 
    if ((unsigned int)((struct rtl_priv *)btcoexist->adapter)->rtlhal.hw_type == 11U) {
      #line 1426 
      if ((unsigned int)btcoexist->board_info.btdm_ant_num == 2U) 
                                                                  #line 1427 
                                                                  ex_btc8723b2ant_init_hwconfig(btcoexist);
      else 
        #line 1428 
        if ((unsigned int)btcoexist->board_info.btdm_ant_num == 1U) 
                                                                    #line 1429 
                                                                    ex_btc8723b1ant_init_hwconfig(btcoexist,(_Bool)((bool)((int)wifi_only) != 0));
    }
    else 
      #line 1430 
      if (! ((unsigned int)((struct rtl_priv *)btcoexist->adapter)->rtlhal.hw_type == 8U)) 
        #line 1432 
        if ((unsigned int)((struct rtl_priv *)btcoexist->adapter)->rtlhal.hw_type == 12U) 
          #line 1433 
          if ((unsigned int)btcoexist->board_info.btdm_ant_num == 2U) 
            #line 1434 
            ex_btc8192e2ant_init_hwconfig(btcoexist);
  #line 1435 
  return;
}

#line 1438  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
void exhalbtc_init_hw_config_wifi_only(struct wifi_only_cfg *wifionly_cfg)
{
  #line 1440 
  return;
}

#line 1442  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
void exhalbtc_init_coex_dm(struct btc_coexist *btcoexist)
{
  #line 1444 
  if (! halbtc_is_bt_coexist_available(btcoexist)) 
                                                   #line 1445 
                                                   return;
  #line 1447 
  (btcoexist->statistics.cnt_init_coex_dm) ++;
  #line 1449 
  if ((unsigned int)((struct rtl_priv *)btcoexist->adapter)->rtlhal.hw_type == 13U) {
    #line 1450 
    if ((unsigned int)btcoexist->board_info.btdm_ant_num == 2U) 
                                                                #line 1451 
                                                                ex_btc8821a2ant_init_coex_dm(btcoexist);
    else 
      #line 1452 
      if ((unsigned int)btcoexist->board_info.btdm_ant_num == 1U) 
                                                                  #line 1453 
                                                                  ex_btc8821a1ant_init_coex_dm(btcoexist);
  }
  else 
    #line 1454 
    if ((unsigned int)((struct rtl_priv *)btcoexist->adapter)->rtlhal.hw_type == 11U) {
      #line 1455 
      if ((unsigned int)btcoexist->board_info.btdm_ant_num == 2U) 
                                                                  #line 1456 
                                                                  ex_btc8723b2ant_init_coex_dm(btcoexist);
      else 
        #line 1457 
        if ((unsigned int)btcoexist->board_info.btdm_ant_num == 1U) 
                                                                    #line 1458 
                                                                    ex_btc8723b1ant_init_coex_dm(btcoexist);
    }
    else 
      #line 1459 
      if ((unsigned int)((struct rtl_priv *)btcoexist->adapter)->rtlhal.hw_type == 12U) 
        #line 1460 
        if ((unsigned int)btcoexist->board_info.btdm_ant_num == 2U) 
                                                                    #line 1461 
                                                                    ex_btc8192e2ant_init_coex_dm(btcoexist);
  #line 1464 
  btcoexist->initilized = (_Bool)1;
  #line 1465 
  return;
}

#line 1467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
void exhalbtc_ips_notify(struct btc_coexist *btcoexist, u8 type)
{
  #line 1469 
  u8 ips_type;
  #line 1471 
  if (! halbtc_is_bt_coexist_available(btcoexist)) 
                                                   #line 1472 
                                                   return;
  #line 1473 
  (btcoexist->statistics.cnt_ips_notify) ++;
  #line 1474 
  if ((int)btcoexist->manual_control != 0) 
                                           #line 1475 
                                           return;
  #line 1477 
  if ((unsigned int)type == 2U) 
                                #line 1478 
                                ips_type = (unsigned char)1U; else 
                                                                   #line 1480 
                                                                   ips_type = (unsigned char)0U;
  #line 1482 
  halbtc_leave_low_power(btcoexist);
  #line 1484 
  if ((unsigned int)((struct rtl_priv *)btcoexist->adapter)->rtlhal.hw_type == 13U) {
    #line 1485 
    if ((unsigned int)btcoexist->board_info.btdm_ant_num == 2U) 
                                                                #line 1486 
                                                                ex_btc8821a2ant_ips_notify(btcoexist,(unsigned char)((int)ips_type));
    else 
      #line 1487 
      if ((unsigned int)btcoexist->board_info.btdm_ant_num == 1U) 
                                                                  #line 1488 
                                                                  ex_btc8821a1ant_ips_notify(btcoexist,(unsigned char)((int)ips_type));
  }
  else 
    #line 1489 
    if ((unsigned int)((struct rtl_priv *)btcoexist->adapter)->rtlhal.hw_type == 11U) {
      #line 1490 
      if ((unsigned int)btcoexist->board_info.btdm_ant_num == 2U) 
                                                                  #line 1491 
                                                                  ex_btc8723b2ant_ips_notify(btcoexist,(unsigned char)((int)ips_type));
      else 
        #line 1492 
        if ((unsigned int)btcoexist->board_info.btdm_ant_num == 1U) 
                                                                    #line 1493 
                                                                    ex_btc8723b1ant_ips_notify(btcoexist,(unsigned char)((int)ips_type));
    }
    else 
      #line 1494 
      if ((unsigned int)((struct rtl_priv *)btcoexist->adapter)->rtlhal.hw_type == 12U) 
        #line 1495 
        if ((unsigned int)btcoexist->board_info.btdm_ant_num == 2U) 
                                                                    #line 1496 
                                                                    ex_btc8192e2ant_ips_notify(btcoexist,(unsigned char)((int)ips_type));
  #line 1499 
  halbtc_normal_low_power(btcoexist);
  #line 1500 
  return;
}

#line 1502  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
void exhalbtc_lps_notify(struct btc_coexist *btcoexist, u8 type)
{
  #line 1504 
  u8 lps_type;
  #line 1506 
  if (! halbtc_is_bt_coexist_available(btcoexist)) 
                                                   #line 1507 
                                                   return;
  #line 1508 
  (btcoexist->statistics.cnt_lps_notify) ++;
  #line 1509 
  if ((int)btcoexist->manual_control != 0) 
                                           #line 1510 
                                           return;
  #line 1512 
  if ((unsigned int)type == 0U) 
                                #line 1513 
                                lps_type = (unsigned char)0U; else 
                                                                   #line 1515 
                                                                   lps_type = (unsigned char)1U;
  #line 1517 
  if ((unsigned int)((struct rtl_priv *)btcoexist->adapter)->rtlhal.hw_type == 13U) {
    #line 1518 
    if ((unsigned int)btcoexist->board_info.btdm_ant_num == 2U) 
                                                                #line 1519 
                                                                ex_btc8821a2ant_lps_notify(btcoexist,(unsigned char)((int)lps_type));
    else 
      #line 1520 
      if ((unsigned int)btcoexist->board_info.btdm_ant_num == 1U) 
                                                                  #line 1521 
                                                                  ex_btc8821a1ant_lps_notify(btcoexist,(unsigned char)((int)lps_type));
  }
  else 
    #line 1522 
    if ((unsigned int)((struct rtl_priv *)btcoexist->adapter)->rtlhal.hw_type == 11U) {
      #line 1523 
      if ((unsigned int)btcoexist->board_info.btdm_ant_num == 2U) 
                                                                  #line 1524 
                                                                  ex_btc8723b2ant_lps_notify(btcoexist,(unsigned char)((int)lps_type));
      else 
        #line 1525 
        if ((unsigned int)btcoexist->board_info.btdm_ant_num == 1U) 
                                                                    #line 1526 
                                                                    ex_btc8723b1ant_lps_notify(btcoexist,(unsigned char)((int)lps_type));
    }
    else 
      #line 1527 
      if ((unsigned int)((struct rtl_priv *)btcoexist->adapter)->rtlhal.hw_type == 12U) 
        #line 1528 
        if ((unsigned int)btcoexist->board_info.btdm_ant_num == 2U) 
                                                                    #line 1529 
                                                                    ex_btc8192e2ant_lps_notify(btcoexist,(unsigned char)((int)lps_type));
  #line 1530 
  return;
}

#line 1533  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
void exhalbtc_scan_notify(struct btc_coexist *btcoexist, u8 type)
{
  #line 1535 
  u8 scan_type;
  #line 1537 
  if (! halbtc_is_bt_coexist_available(btcoexist)) 
                                                   #line 1538 
                                                   return;
  #line 1539 
  (btcoexist->statistics.cnt_scan_notify) ++;
  #line 1540 
  if ((int)btcoexist->manual_control != 0) 
                                           #line 1541 
                                           return;
  #line 1543 
  if ((unsigned int)type != 0U) 
                                #line 1544 
                                scan_type = (unsigned char)1U; else 
                                                                    #line 1546 
                                                                    scan_type = (unsigned char)0U;
  #line 1548 
  halbtc_leave_low_power(btcoexist);
  #line 1550 
  if ((unsigned int)((struct rtl_priv *)btcoexist->adapter)->rtlhal.hw_type == 13U) {
    #line 1551 
    if ((unsigned int)btcoexist->board_info.btdm_ant_num == 2U) 
                                                                #line 1552 
                                                                ex_btc8821a2ant_scan_notify(btcoexist,(unsigned char)((int)scan_type));
    else 
      #line 1553 
      if ((unsigned int)btcoexist->board_info.btdm_ant_num == 1U) 
                                                                  #line 1554 
                                                                  ex_btc8821a1ant_scan_notify(btcoexist,(unsigned char)((int)scan_type));
  }
  else 
    #line 1555 
    if ((unsigned int)((struct rtl_priv *)btcoexist->adapter)->rtlhal.hw_type == 11U) {
      #line 1556 
      if ((unsigned int)btcoexist->board_info.btdm_ant_num == 2U) 
                                                                  #line 1557 
                                                                  ex_btc8723b2ant_scan_notify(btcoexist,(unsigned char)((int)scan_type));
      else 
        #line 1558 
        if ((unsigned int)btcoexist->board_info.btdm_ant_num == 1U) 
                                                                    #line 1559 
                                                                    ex_btc8723b1ant_scan_notify(btcoexist,(unsigned char)((int)scan_type));
    }
    else 
      #line 1560 
      if ((unsigned int)((struct rtl_priv *)btcoexist->adapter)->rtlhal.hw_type == 12U) 
        #line 1561 
        if ((unsigned int)btcoexist->board_info.btdm_ant_num == 2U) 
                                                                    #line 1562 
                                                                    ex_btc8192e2ant_scan_notify(btcoexist,(unsigned char)((int)scan_type));
  #line 1565 
  halbtc_normal_low_power(btcoexist);
  #line 1566 
  return;
}

#line 1568  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
void exhalbtc_scan_notify_wifi_only(struct wifi_only_cfg *wifionly_cfg, u8 is_5g)
{
  #line 1570 
  return;
}

#line 1573  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
void exhalbtc_connect_notify(struct btc_coexist *btcoexist, u8 action)
{
  #line 1575 
  u8 asso_type;
  #line 1576 
  bool wifi_under_5g;
  #line 1578 
  if (! halbtc_is_bt_coexist_available(btcoexist)) 
                                                   #line 1579 
                                                   return;
  #line 1580 
  (btcoexist->statistics.cnt_connect_notify) ++;
  #line 1581 
  if ((int)btcoexist->manual_control != 0) 
                                           #line 1582 
                                           return;
  #line 1584 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)13,(void *)(& wifi_under_5g));
  #line 1586 
  if ((unsigned int)action != 0U) 
                                  #line 1587 
                                  asso_type = (unsigned char)1U; else 
                                                                   #line 1589 
                                                                   asso_type = (unsigned char)0U;
  #line 1591 
  halbtc_leave_low_power(btcoexist);
  #line 1593 
  if ((unsigned int)((struct rtl_priv *)btcoexist->adapter)->rtlhal.hw_type == 13U) {
    #line 1594 
    if ((unsigned int)btcoexist->board_info.btdm_ant_num == 2U) 
                                                                #line 1595 
                                                                ex_btc8821a2ant_connect_notify(btcoexist,(unsigned char)((int)asso_type));
    else 
      #line 1596 
      if ((unsigned int)btcoexist->board_info.btdm_ant_num == 1U) 
                                                                  #line 1597 
                                                                  ex_btc8821a1ant_connect_notify(btcoexist,(unsigned char)((int)asso_type));
  }
  else 
    #line 1598 
    if ((unsigned int)((struct rtl_priv *)btcoexist->adapter)->rtlhal.hw_type == 11U) {
      #line 1599 
      if ((unsigned int)btcoexist->board_info.btdm_ant_num == 2U) 
                                                                  #line 1600 
                                                                  ex_btc8723b2ant_connect_notify(btcoexist,(unsigned char)((int)asso_type));
      else 
        #line 1601 
        if ((unsigned int)btcoexist->board_info.btdm_ant_num == 1U) 
                                                                    #line 1602 
                                                                    ex_btc8723b1ant_connect_notify(btcoexist,(unsigned char)((int)asso_type));
    }
    else 
      #line 1603 
      if ((unsigned int)((struct rtl_priv *)btcoexist->adapter)->rtlhal.hw_type == 12U) 
        #line 1604 
        if ((unsigned int)btcoexist->board_info.btdm_ant_num == 2U) 
                                                                    #line 1605 
                                                                    ex_btc8192e2ant_connect_notify(btcoexist,(unsigned char)((int)asso_type));
  #line 1608 
  halbtc_normal_low_power(btcoexist);
  #line 1609 
  return;
}

#line 1611  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
void exhalbtc_mediastatus_notify(struct btc_coexist *btcoexist, enum rt_media_status media_status)
{
  #line 1614 
  u8 status;
  #line 1616 
  if (! halbtc_is_bt_coexist_available(btcoexist)) 
                                                   #line 1617 
                                                   return;
  #line 1618 
  (btcoexist->statistics.cnt_media_status_notify) ++;
  #line 1619 
  if ((int)btcoexist->manual_control != 0) 
                                           #line 1620 
                                           return;
  #line 1622 
  if (media_status == (unsigned int)RT_MEDIA_CONNECT) 
                                                      #line 1623 
                                                      status = (unsigned char)1U; else 
                                                                    #line 1625 
                                                                    status = (unsigned char)0U;
  #line 1627 
  halbtc_leave_low_power(btcoexist);
  #line 1629 
  if ((unsigned int)((struct rtl_priv *)btcoexist->adapter)->rtlhal.hw_type == 13U) {
    #line 1630 
    if ((unsigned int)btcoexist->board_info.btdm_ant_num == 2U) 
                                                                #line 1631 
                                                                ex_btc8821a2ant_media_status_notify(btcoexist,(unsigned char)((int)status));
    else 
      #line 1632 
      if ((unsigned int)btcoexist->board_info.btdm_ant_num == 1U) 
                                                                  #line 1633 
                                                                  ex_btc8821a1ant_media_status_notify(btcoexist,(unsigned char)((int)status));
  }
  else 
    #line 1634 
    if ((unsigned int)((struct rtl_priv *)btcoexist->adapter)->rtlhal.hw_type == 11U) {
      #line 1635 
      if ((unsigned int)btcoexist->board_info.btdm_ant_num == 2U) 
                                                                  #line 1636 
                                                                  ex_btc8723b2ant_media_status_notify(btcoexist,(unsigned char)((int)status));
      else 
        #line 1637 
        if ((unsigned int)btcoexist->board_info.btdm_ant_num == 1U) 
                                                                    #line 1638 
                                                                    ex_btc8723b1ant_media_status_notify(btcoexist,(unsigned char)((int)status));
    }
    else 
      #line 1639 
      if ((unsigned int)((struct rtl_priv *)btcoexist->adapter)->rtlhal.hw_type == 12U) 
        #line 1640 
        if ((unsigned int)btcoexist->board_info.btdm_ant_num == 2U) 
                                                                    #line 1641 
                                                                    ex_btc8192e2ant_media_status_notify(btcoexist,(unsigned char)((int)status));
  #line 1644 
  halbtc_normal_low_power(btcoexist);
  #line 1645 
  return;
}

#line 1647  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
void exhalbtc_special_packet_notify(struct btc_coexist *btcoexist, u8 pkt_type)
{
  #line 1649 
  u8 packet_type;
  #line 1651 
  if (! halbtc_is_bt_coexist_available(btcoexist)) 
                                                   #line 1652 
                                                   return;
  #line 1653 
  (btcoexist->statistics.cnt_special_packet_notify) ++;
  #line 1654 
  if ((int)btcoexist->manual_control != 0) 
                                           #line 1655 
                                           return;
  #line 1657 
  if ((unsigned int)pkt_type == 1U) 
                                    #line 1658 
                                    packet_type = (unsigned char)1U;
  else 
    #line 1659 
    if ((unsigned int)pkt_type == 3U) 
                                      #line 1660 
                                      packet_type = (unsigned char)3U;
    else 
      #line 1661 
      if ((unsigned int)pkt_type == 2U) 
                                        #line 1662 
                                        packet_type = (unsigned char)2U;
      else {
        #line 1664 
        packet_type = (unsigned char)0U;
        #line 1665 
        return;
      }
  #line 1668 
  halbtc_leave_low_power(btcoexist);
  #line 1670 
  if ((unsigned int)((struct rtl_priv *)btcoexist->adapter)->rtlhal.hw_type == 13U) {
    #line 1671 
    if ((unsigned int)btcoexist->board_info.btdm_ant_num == 2U) 
                                                                #line 1672 
                                                                ex_btc8821a2ant_special_packet_notify(btcoexist,(unsigned char)((int)packet_type));
    else 
      #line 1674 
      if ((unsigned int)btcoexist->board_info.btdm_ant_num == 1U) 
                                                                  #line 1675 
                                                                  ex_btc8821a1ant_special_packet_notify(btcoexist,(unsigned char)((int)packet_type));
  }
  else 
    #line 1677 
    if ((unsigned int)((struct rtl_priv *)btcoexist->adapter)->rtlhal.hw_type == 11U) {
      #line 1678 
      if ((unsigned int)btcoexist->board_info.btdm_ant_num == 2U) 
                                                                  #line 1679 
                                                                  ex_btc8723b2ant_special_packet_notify(btcoexist,(unsigned char)((int)packet_type));
      else 
        #line 1681 
        if ((unsigned int)btcoexist->board_info.btdm_ant_num == 1U) 
                                                                    #line 1682 
                                                                    ex_btc8723b1ant_special_packet_notify(btcoexist,(unsigned char)((int)packet_type));
    }
    else 
      #line 1684 
      if ((unsigned int)((struct rtl_priv *)btcoexist->adapter)->rtlhal.hw_type == 12U) 
        #line 1685 
        if ((unsigned int)btcoexist->board_info.btdm_ant_num == 2U) 
                                                                    #line 1686 
                                                                    ex_btc8192e2ant_special_packet_notify(btcoexist,(unsigned char)((int)packet_type));
  #line 1690 
  halbtc_normal_low_power(btcoexist);
  #line 1691 
  return;
}

#line 1693  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
void exhalbtc_bt_info_notify(struct btc_coexist *btcoexist, u8 *tmp_buf, u8 length)
{
  #line 1696 
  if (! halbtc_is_bt_coexist_available(btcoexist)) 
                                                   #line 1697 
                                                   return;
  #line 1698 
  (btcoexist->statistics.cnt_bt_info_notify) ++;
  #line 1700 
  halbtc_leave_low_power(btcoexist);
  #line 1702 
  if ((unsigned int)((struct rtl_priv *)btcoexist->adapter)->rtlhal.hw_type == 13U) {
    #line 1703 
    if ((unsigned int)btcoexist->board_info.btdm_ant_num == 2U) 
                                                                #line 1704 
                                                                ex_btc8821a2ant_bt_info_notify(btcoexist,tmp_buf,(unsigned char)((int)length));
    else 
      #line 1706 
      if ((unsigned int)btcoexist->board_info.btdm_ant_num == 1U) 
                                                                  #line 1707 
                                                                  ex_btc8821a1ant_bt_info_notify(btcoexist,tmp_buf,(unsigned char)((int)length));
  }
  else 
    #line 1709 
    if ((unsigned int)((struct rtl_priv *)btcoexist->adapter)->rtlhal.hw_type == 11U) {
      #line 1710 
      if ((unsigned int)btcoexist->board_info.btdm_ant_num == 2U) 
                                                                  #line 1711 
                                                                  ex_btc8723b2ant_bt_info_notify(btcoexist,tmp_buf,(unsigned char)((int)length));
      else 
        #line 1713 
        if ((unsigned int)btcoexist->board_info.btdm_ant_num == 1U) 
                                                                    #line 1714 
                                                                    ex_btc8723b1ant_bt_info_notify(btcoexist,tmp_buf,(unsigned char)((int)length));
    }
    else 
      #line 1716 
      if ((unsigned int)((struct rtl_priv *)btcoexist->adapter)->rtlhal.hw_type == 12U) 
        #line 1717 
        if ((unsigned int)btcoexist->board_info.btdm_ant_num == 2U) 
                                                                    #line 1718 
                                                                    ex_btc8192e2ant_bt_info_notify(btcoexist,tmp_buf,(unsigned char)((int)length));
  #line 1722 
  halbtc_normal_low_power(btcoexist);
  #line 1723 
  return;
}

#line 1725  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
void exhalbtc_rf_status_notify(struct btc_coexist *btcoexist, u8 type)
{
  #line 1727 
  if (! halbtc_is_bt_coexist_available(btcoexist)) 
                                                   #line 1728 
                                                   return;
  #line 1730 
  if (! ((unsigned int)((struct rtl_priv *)btcoexist->adapter)->rtlhal.hw_type == 13U)) 
    #line 1731 
    if ((unsigned int)((struct rtl_priv *)btcoexist->adapter)->rtlhal.hw_type == 11U) {
      #line 1732 
      if ((unsigned int)btcoexist->board_info.btdm_ant_num == 1U) 
                                                                  #line 1733 
                                                                  ex_btc8723b1ant_rf_status_notify(btcoexist,(unsigned char)((int)type));
    }
    else 
      #line 1734 
      if ((unsigned int)((struct rtl_priv *)btcoexist->adapter)->rtlhal.hw_type == 12U) ;
  #line 1737 
  return;
}

#line 1738  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
void exhalbtc_halt_notify(struct btc_coexist *btcoexist)
{
  #line 1740 
  if (! halbtc_is_bt_coexist_available(btcoexist)) 
                                                   #line 1741 
                                                   return;
  #line 1743 
  if ((unsigned int)((struct rtl_priv *)btcoexist->adapter)->rtlhal.hw_type == 13U) {
    #line 1744 
    if ((unsigned int)btcoexist->board_info.btdm_ant_num == 2U) 
                                                                #line 1745 
                                                                ex_btc8821a2ant_halt_notify(btcoexist);
    else 
      #line 1746 
      if ((unsigned int)btcoexist->board_info.btdm_ant_num == 1U) 
                                                                  #line 1747 
                                                                  ex_btc8821a1ant_halt_notify(btcoexist);
  }
  else 
    #line 1748 
    if ((unsigned int)((struct rtl_priv *)btcoexist->adapter)->rtlhal.hw_type == 11U) {
      #line 1749 
      if ((unsigned int)btcoexist->board_info.btdm_ant_num == 2U) 
                                                                  #line 1750 
                                                                  ex_btc8723b2ant_halt_notify(btcoexist);
      else 
        #line 1751 
        if ((unsigned int)btcoexist->board_info.btdm_ant_num == 1U) 
                                                                    #line 1752 
                                                                    ex_btc8723b1ant_halt_notify(btcoexist);
    }
    else 
      #line 1753 
      if ((unsigned int)((struct rtl_priv *)btcoexist->adapter)->rtlhal.hw_type == 12U) 
        #line 1754 
        if ((unsigned int)btcoexist->board_info.btdm_ant_num == 2U) 
                                                                    #line 1755 
                                                                    ex_btc8192e2ant_halt_notify(btcoexist);
  #line 1758 
  btcoexist->binded = (_Bool)0;
  #line 1759 
  return;
}

#line 1761  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
void exhalbtc_pnp_notify(struct btc_coexist *btcoexist, u8 pnp_state)
{
  #line 1763 
  if (! halbtc_is_bt_coexist_available(btcoexist)) 
                                                   #line 1764 
                                                   return;
  #line 1771 
  if ((unsigned int)((struct rtl_priv *)btcoexist->adapter)->rtlhal.hw_type == 11U) {
    #line 1772 
    if ((unsigned int)btcoexist->board_info.btdm_ant_num == 1U) 
                                                                #line 1773 
                                                                ex_btc8723b1ant_pnp_notify(btcoexist,(unsigned char)((int)pnp_state));
    else 
      #line 1774 
      if ((unsigned int)btcoexist->board_info.btdm_ant_num == 2U) 
                                                                  #line 1775 
                                                                  ex_btc8723b2ant_pnp_notify(btcoexist,(unsigned char)((int)pnp_state));
  }
  else 
    #line 1776 
    if ((unsigned int)((struct rtl_priv *)btcoexist->adapter)->rtlhal.hw_type == 13U) {
      #line 1777 
      if ((unsigned int)btcoexist->board_info.btdm_ant_num == 1U) 
                                                                  #line 1778 
                                                                  ex_btc8821a1ant_pnp_notify(btcoexist,(unsigned char)((int)pnp_state));
      else 
        #line 1779 
        if ((unsigned int)btcoexist->board_info.btdm_ant_num == 2U) 
                                                                    #line 1780 
                                                                    ex_btc8821a2ant_pnp_notify(btcoexist,(unsigned char)((int)pnp_state));
    }
    else 
      #line 1781 
      if ((unsigned int)((struct rtl_priv *)btcoexist->adapter)->rtlhal.hw_type == 12U) ;
  #line 1784 
  return;
}

#line 1785  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
void exhalbtc_coex_dm_switch(struct btc_coexist *btcoexist)
{
  #line 1787 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 1789 
  if (! halbtc_is_bt_coexist_available(btcoexist)) 
                                                   #line 1790 
                                                   return;
  #line 1791 
  (btcoexist->statistics.cnt_coex_dm_switch) ++;
  #line 1793 
  halbtc_leave_low_power(btcoexist);
  #line 1795 
  if ((unsigned int)((struct rtl_priv *)btcoexist->adapter)->rtlhal.hw_type == 11U) 
    #line 1796 
    if ((unsigned int)btcoexist->board_info.btdm_ant_num == 1U) {
      #line 1797 
      btcoexist->stop_coex_dm = (_Bool)1;
      #line 1798 
      ex_btc8723b1ant_coex_dm_reset(btcoexist);
      #line 1799 
      exhalbtc_set_ant_num(rtlpriv,(unsigned char)2,(unsigned char)2);
      #line 1801 
      ex_btc8723b2ant_init_hwconfig(btcoexist);
      #line 1802 
      ex_btc8723b2ant_init_coex_dm(btcoexist);
      #line 1803 
      btcoexist->stop_coex_dm = (_Bool)0;
    }
  #line 1807 
  halbtc_normal_low_power(btcoexist);
  #line 1808 
  return;
}

#line 1810  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
void exhalbtc_periodical(struct btc_coexist *btcoexist)
{
  #line 1812 
  if (! halbtc_is_bt_coexist_available(btcoexist)) 
                                                   #line 1813 
                                                   return;
  #line 1814 
  (btcoexist->statistics.cnt_periodical) ++;
  #line 1816 
  halbtc_leave_low_power(btcoexist);
  #line 1818 
  if ((unsigned int)((struct rtl_priv *)btcoexist->adapter)->rtlhal.hw_type == 13U) {
    #line 1819 
    if ((unsigned int)btcoexist->board_info.btdm_ant_num == 2U) 
                                                                #line 1820 
                                                                ex_btc8821a2ant_periodical(btcoexist);
    else 
      #line 1821 
      if ((unsigned int)btcoexist->board_info.btdm_ant_num == 1U) {
        #line 1822 
        if (! halbtc_under_ips(btcoexist)) 
                                           #line 1823 
                                           ex_btc8821a1ant_periodical(btcoexist);
      }
  }
  else 
    #line 1824 
    if ((unsigned int)((struct rtl_priv *)btcoexist->adapter)->rtlhal.hw_type == 11U) {
      #line 1825 
      if ((unsigned int)btcoexist->board_info.btdm_ant_num == 2U) 
                                                                  #line 1826 
                                                                  ex_btc8723b2ant_periodical(btcoexist);
      else 
        #line 1827 
        if ((unsigned int)btcoexist->board_info.btdm_ant_num == 1U) 
                                                                    #line 1828 
                                                                    ex_btc8723b1ant_periodical(btcoexist);
    }
    else 
      #line 1829 
      if ((unsigned int)((struct rtl_priv *)btcoexist->adapter)->rtlhal.hw_type == 12U) 
        #line 1830 
        if ((unsigned int)btcoexist->board_info.btdm_ant_num == 2U) 
                                                                    #line 1831 
                                                                    ex_btc8192e2ant_periodical(btcoexist);
  #line 1834 
  halbtc_normal_low_power(btcoexist);
  #line 1835 
  return;
}

#line 1837  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
void exhalbtc_dbg_control(struct btc_coexist *btcoexist, u8 code, u8 len, u8 *data)
{
  #line 1840 
  if (! halbtc_is_bt_coexist_available(btcoexist)) 
                                                   #line 1841 
                                                   return;
  #line 1842 
  (btcoexist->statistics.cnt_dbg_ctrl) ++;
  #line 1844 
  halbtc_leave_low_power(btcoexist);
  #line 1846 
  halbtc_normal_low_power(btcoexist);
  #line 1847 
  return;
}

#line 1849  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
void exhalbtc_antenna_detection(struct btc_coexist *btcoexist, u32 cent_freq, u32 offset, u32 span, u32 seconds)
{
  #line 1852 
  if (! halbtc_is_bt_coexist_available(btcoexist)) 
                                                   #line 1853 
                                                   return;
  #line 1854 
  return;
}

#line 1856  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
void exhalbtc_stack_update_profile_info(void)
{
  #line 1858 
  return;
}

#line 1860  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
void exhalbtc_update_min_bt_rssi(struct btc_coexist *btcoexist, s8 bt_rssi)
{
  #line 1862 
  if (! halbtc_is_bt_coexist_available(btcoexist)) 
                                                   #line 1863 
                                                   return;
  #line 1865 
  btcoexist->stack_info.min_bt_rssi = bt_rssi;
  #line 1866 
  return;
}

#line 1868  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
void exhalbtc_set_hci_version(struct btc_coexist *btcoexist, u16 hci_version)
{
  #line 1870 
  if (! halbtc_is_bt_coexist_available(btcoexist)) 
                                                   #line 1871 
                                                   return;
  #line 1873 
  btcoexist->stack_info.hci_version = hci_version;
  #line 1874 
  return;
}

#line 1876  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
void exhalbtc_set_bt_patch_version(struct btc_coexist *btcoexist, u16 bt_hci_version, u16 bt_patch_version)
{
  #line 1879 
  if (! halbtc_is_bt_coexist_available(btcoexist)) 
                                                   #line 1880 
                                                   return;
  #line 1882 
  btcoexist->bt_info.bt_real_fw_ver = bt_patch_version;
  #line 1883 
  btcoexist->bt_info.bt_hci_ver = bt_hci_version;
  #line 1884 
  return;
}

#line 1886  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
void exhalbtc_set_chip_type(struct btc_coexist *btcoexist, u8 chip_type)
{
  #line 1888 
  switch ((int)chip_type) {
    #line 1889 
    default: 
             #line 1889 
    ;
    #line 1890 
    case 0: 
            #line 1890 
    ;
    #line 1891 
    case 1: 
            #line 1891 
    ;
    #line 1892 
    case 2: 
            #line 1892 
    ;
    #line 1893 
    case 5: 
            #line 1893 
    ;
    #line 1894 
    btcoexist->board_info.bt_chip_type = (unsigned char)0U;
    #line 1895 
    break;
    #line 1896 
    case 3: 
            #line 1896 
    ;
    #line 1897 
    btcoexist->board_info.bt_chip_type = (unsigned char)1U;
    #line 1898 
    break;
    #line 1899 
    case 4: 
            #line 1899 
    ;
    #line 1900 
    btcoexist->board_info.bt_chip_type = (unsigned char)2U;
    #line 1901 
    break;
    #line 1902 
    case 6: 
            #line 1902 
    ;
    #line 1903 
    btcoexist->board_info.bt_chip_type = (unsigned char)3U;
    #line 1904 
    break;
    #line 1905 
    case 7: 
            #line 1905 
    ;
    #line 1906 
    btcoexist->board_info.bt_chip_type = (unsigned char)4U;
    #line 1907 
    break;
    #line 1908 
    case 8: 
            #line 1908 
    ;
    #line 1909 
    btcoexist->board_info.bt_chip_type = (unsigned char)5U;
    #line 1910 
    break;
  }
  #line 1912 
  return;
}

#line 1914  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
void exhalbtc_set_ant_num(struct rtl_priv *rtlpriv, u8 type, u8 ant_num)
{
  #line 1916 
  struct btc_coexist *btcoexist = (struct btc_coexist *)rtlpriv->btcoexist.btc_context;
  #line 1918 
  if (btcoexist == (struct btc_coexist *)0) 
                                            #line 1919 
                                            return;
  #line 1921 
  if ((unsigned int)type == 0U) {
    #line 1922 
    btcoexist->board_info.pg_ant_num = ant_num;
    #line 1923 
    btcoexist->board_info.btdm_ant_num = ant_num;
  }
  else 
    #line 1924 
    if ((unsigned int)type == 1U) 
                                  #line 1925 
                                  btcoexist->board_info.btdm_ant_num = ant_num;
    else 
      #line 1926 
      if ((unsigned int)type == 2U) {
        #line 1927 
        btcoexist->board_info.btdm_ant_num = ant_num;
        #line 1928 
        if (((rtlpriv->cfg)->mod_params)->ant_sel == 1) 
                                                        #line 1929 
                                                        btcoexist->board_info.btdm_ant_pos = (unsigned char)2U; else 
                                                                    #line 1932 
                                                                    btcoexist->board_info.btdm_ant_pos = (unsigned char)1U;
      }
  #line 1934 
  return;
}

#line 1938  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
void exhalbtc_set_single_ant_path(struct btc_coexist *btcoexist, u8 single_ant_path)
{
  #line 1941 
  btcoexist->board_info.single_ant_path = single_ant_path;
  #line 1942 
  return;
}

#line 1944  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
void exhalbtc_display_bt_coex_info(struct btc_coexist *btcoexist, struct seq_file *m)
{
  #line 1947 
  if (! halbtc_is_bt_coexist_available(btcoexist)) 
                                                   #line 1948 
                                                   return;
  #line 1950 
  halbtc_leave_low_power(btcoexist);
  #line 1952 
  if ((unsigned int)((struct rtl_priv *)btcoexist->adapter)->rtlhal.hw_type == 13U) {
    #line 1953 
    if ((unsigned int)btcoexist->board_info.btdm_ant_num == 2U) 
                                                                #line 1954 
                                                                ex_btc8821a2ant_display_coex_info(btcoexist,m);
    else 
      #line 1955 
      if ((unsigned int)btcoexist->board_info.btdm_ant_num == 1U) 
                                                                  #line 1956 
                                                                  ex_btc8821a1ant_display_coex_info(btcoexist,m);
  }
  else 
    #line 1957 
    if ((unsigned int)((struct rtl_priv *)btcoexist->adapter)->rtlhal.hw_type == 11U) {
      #line 1958 
      if ((unsigned int)btcoexist->board_info.btdm_ant_num == 2U) 
                                                                  #line 1959 
                                                                  ex_btc8723b2ant_display_coex_info(btcoexist,m);
      else 
        #line 1960 
        if ((unsigned int)btcoexist->board_info.btdm_ant_num == 1U) 
                                                                    #line 1961 
                                                                    ex_btc8723b1ant_display_coex_info(btcoexist,m);
    }
    else 
      #line 1962 
      if ((unsigned int)((struct rtl_priv *)btcoexist->adapter)->rtlhal.hw_type == 12U) 
        #line 1963 
        if ((unsigned int)btcoexist->board_info.btdm_ant_num == 2U) 
                                                                    #line 1964 
                                                                    ex_btc8192e2ant_display_coex_info(btcoexist,m);
  #line 1967 
  halbtc_normal_low_power(btcoexist);
  #line 1968 
  return;
}

#line 1970  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
void exhalbtc_switch_band_notify(struct btc_coexist *btcoexist, u8 type)
{
  #line 1972 
  if (! halbtc_is_bt_coexist_available(btcoexist)) 
                                                   #line 1973 
                                                   return;
  #line 1975 
  if ((int)btcoexist->manual_control != 0) 
                                           #line 1976 
                                           return;
  #line 1978 
  halbtc_leave_low_power(btcoexist);
  #line 1980 
  halbtc_normal_low_power(btcoexist);
  #line 1981 
  return;
}

#line 1983  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.c"
void exhalbtc_switch_band_notify_wifi_only(struct wifi_only_cfg *wifionly_cfg, u8 is_5g)
{
  #line 1985 
  return;
}

#line 778  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/realtek/rtlwifi/btcoexist/btcoexist.ko/concurrency safety/0/concurrency safety/weaver/halbtcoutsrc.i.aux"
static void cif_spin_lock_bh_entry_list_lock_of_rtl_locks(spinlock_t *lock)
{
  #line 781 
  ldv_spin_model_lock((char *)"entry_list_lock_of_rtl_locks");
  #line 783 
  spin_lock_bh(lock);
  #line 784 
  return;
}

#line 787  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/realtek/rtlwifi/btcoexist/btcoexist.ko/concurrency safety/0/concurrency safety/weaver/halbtcoutsrc.i.aux"
static void cif_spin_unlock_bh_entry_list_lock_of_rtl_locks(spinlock_t *lock)
{
  #line 790 
  ldv_spin_model_unlock((char *)"entry_list_lock_of_rtl_locks");
  #line 792 
  spin_unlock_bh(lock);
  #line 793 
  return;
}

#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a1ant.c"
static struct coex_dm_8821a_1ant glcoex_dm_8821a_1ant;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a1ant.c"
static struct coex_dm_8821a_1ant *coex_dm_2 = & glcoex_dm_8821a_1ant;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a1ant.c"
static struct coex_sta_8821a_1ant glcoex_sta_8821a_1ant;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a1ant.c"
static struct coex_sta_8821a_1ant *coex_sta_2 = & glcoex_sta_8821a_1ant;
#line 25 
#line 1559 
static void btc8821a1ant_act_bt_sco_hid_only_busy(struct btc_coexist *btcoexist, u8 wifi_status);
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a1ant.c"
static char *glbt_info_src_8821a_1ant[3U] = {(char *)"BT Info[wifi fw]", (char *)"BT Info[bt rsp]", (char *)"BT Info[bt auto report]"};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a1ant.c"
static u32 glcoex_ver_date_8821a_1ant = 20130816U;
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a1ant.c"
static u32 glcoex_ver_8821a_1ant = 65U;
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a1ant.c"
static u8 btc8821a1ant_bt_rssi_state(struct btc_coexist *btcoexist, u8 level_num, u8 rssi_thresh, u8 rssi_thresh1)
{
  #line 46 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 47 
  long bt_rssi = 0L;
  #line 48 
  u8 bt_rssi_state = coex_sta_2->pre_bt_rssi_state;
  #line 50 
  bt_rssi = (long)coex_sta_2->bt_rssi;
  #line 52 
  if ((unsigned int)level_num == 2U) 
    #line 53 
    if ((unsigned int)coex_sta_2->pre_bt_rssi_state == 2U || (unsigned int)coex_sta_2->pre_bt_rssi_state == 5U) 
      #line 55 
      if ((long)((int)rssi_thresh + 2) <= bt_rssi) {
        #line 57 
        bt_rssi_state = (unsigned char)0U;
        #line 58 
        _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BT Rssi state switch to High\n");
      }
      else {
        #line 61 
        bt_rssi_state = (unsigned char)5U;
        #line 62 
        _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BT Rssi state stay at Low\n");
      }
    else 
      #line 66 
      if ((long)rssi_thresh > bt_rssi) {
        #line 67 
        bt_rssi_state = (unsigned char)2U;
        #line 68 
        _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BT Rssi state switch to Low\n");
      }
      else {
        #line 71 
        bt_rssi_state = (unsigned char)3U;
        #line 72 
        _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BT Rssi state stay at High\n");
      }
  else 
    #line 76 
    if ((unsigned int)level_num == 3U) {
      #line 77 
      if ((int)rssi_thresh > (int)rssi_thresh1) {
        #line 78 
        _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BT Rssi thresh error!!\n");
        #line 80 
        return coex_sta_2->pre_bt_rssi_state;
      }
      #line 83 
      if ((unsigned int)coex_sta_2->pre_bt_rssi_state == 2U || (unsigned int)coex_sta_2->pre_bt_rssi_state == 5U) 
        #line 85 
        if ((long)((int)rssi_thresh + 2) <= bt_rssi) {
          #line 87 
          bt_rssi_state = (unsigned char)1U;
          #line 88 
          _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BT Rssi state switch to Medium\n");
        }
        else {
          #line 91 
          bt_rssi_state = (unsigned char)5U;
          #line 92 
          _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BT Rssi state stay at Low\n");
        }
      else 
        #line 95 
        if ((unsigned int)coex_sta_2->pre_bt_rssi_state == 1U || (unsigned int)coex_sta_2->pre_bt_rssi_state == 4U) 
          #line 99 
          if ((long)((int)rssi_thresh1 + 2) <= bt_rssi) {
            #line 101 
            bt_rssi_state = (unsigned char)0U;
            #line 102 
            _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BT Rssi state switch to High\n");
          }
          else 
            #line 104 
            if ((long)rssi_thresh > bt_rssi) {
              #line 105 
              bt_rssi_state = (unsigned char)2U;
              #line 106 
              _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BT Rssi state switch to Low\n");
            }
            else {
              #line 109 
              bt_rssi_state = (unsigned char)4U;
              #line 110 
              _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BT Rssi state stay at Medium\n");
            }
        else 
          #line 114 
          if ((long)rssi_thresh1 > bt_rssi) {
            #line 115 
            bt_rssi_state = (unsigned char)1U;
            #line 116 
            _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BT Rssi state switch to Medium\n");
          }
          else {
            #line 119 
            bt_rssi_state = (unsigned char)3U;
            #line 120 
            _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BT Rssi state stay at High\n");
          }
    }
  #line 125 
  coex_sta_2->pre_bt_rssi_state = bt_rssi_state;
  #line 127 
  return bt_rssi_state;
}

#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a1ant.c"
static u8 btc8821a1ant_wifi_rssi_state(struct btc_coexist *btcoexist, u8 index, u8 level_num, u8 rssi_thresh, u8 rssi_thresh1)
{
  #line 134 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 135 
  long wifi_rssi = 0L;
  #line 136 
  u8 wifi_rssi_state = coex_sta_2->pre_wifi_rssi_state[(int)index];
  #line 138 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)22,(void *)(& wifi_rssi));
  #line 140 
  if ((unsigned int)level_num == 2U) 
    #line 141 
    if ((unsigned int)coex_sta_2->pre_wifi_rssi_state[(int)index] == 2U || (unsigned int)coex_sta_2->pre_wifi_rssi_state[(int)index] == 5U) 
      #line 145 
      if ((long)((int)rssi_thresh + 2) <= wifi_rssi) {
        #line 147 
        wifi_rssi_state = (unsigned char)0U;
        #line 148 
        _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], wifi RSSI state switch to High\n");
      }
      else {
        #line 151 
        wifi_rssi_state = (unsigned char)5U;
        #line 152 
        _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], wifi RSSI state stay at Low\n");
      }
    else 
      #line 156 
      if ((long)rssi_thresh > wifi_rssi) {
        #line 157 
        wifi_rssi_state = (unsigned char)2U;
        #line 158 
        _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], wifi RSSI state switch to Low\n");
      }
      else {
        #line 161 
        wifi_rssi_state = (unsigned char)3U;
        #line 162 
        _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], wifi RSSI state stay at High\n");
      }
  else 
    #line 166 
    if ((unsigned int)level_num == 3U) {
      #line 167 
      if ((int)rssi_thresh > (int)rssi_thresh1) {
        #line 168 
        _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], wifi RSSI thresh error!!\n");
        #line 170 
        return coex_sta_2->pre_wifi_rssi_state[(int)index];
      }
      #line 173 
      if ((unsigned int)coex_sta_2->pre_wifi_rssi_state[(int)index] == 2U || (unsigned int)coex_sta_2->pre_wifi_rssi_state[(int)index] == 5U) 
        #line 177 
        if ((long)((int)rssi_thresh + 2) <= wifi_rssi) {
          #line 179 
          wifi_rssi_state = (unsigned char)1U;
          #line 180 
          _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], wifi RSSI state switch to Medium\n");
        }
        else {
          #line 183 
          wifi_rssi_state = (unsigned char)5U;
          #line 184 
          _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], wifi RSSI state stay at Low\n");
        }
      else 
        #line 187 
        if ((unsigned int)coex_sta_2->pre_wifi_rssi_state[(int)index] == 1U || (unsigned int)coex_sta_2->pre_wifi_rssi_state[(int)index] == 4U) 
          #line 191 
          if ((long)((int)rssi_thresh1 + 2) <= wifi_rssi) {
            #line 193 
            wifi_rssi_state = (unsigned char)0U;
            #line 194 
            _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], wifi RSSI state switch to High\n");
          }
          else 
            #line 196 
            if ((long)rssi_thresh > wifi_rssi) {
              #line 197 
              wifi_rssi_state = (unsigned char)2U;
              #line 198 
              _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], wifi RSSI state switch to Low\n");
            }
            else {
              #line 201 
              wifi_rssi_state = (unsigned char)4U;
              #line 202 
              _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], wifi RSSI state stay at Medium\n");
            }
        else 
          #line 206 
          if ((long)rssi_thresh1 > wifi_rssi) {
            #line 207 
            wifi_rssi_state = (unsigned char)1U;
            #line 208 
            _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], wifi RSSI state switch to Medium\n");
          }
          else {
            #line 211 
            wifi_rssi_state = (unsigned char)3U;
            #line 212 
            _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], wifi RSSI state stay at High\n");
          }
    }
  #line 217 
  coex_sta_2->pre_wifi_rssi_state[(int)index] = wifi_rssi_state;
  #line 219 
  return wifi_rssi_state;
}

#line 222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a1ant.c"
static void btc8821a1ant_update_ra_mask(struct btc_coexist *btcoexist, bool force_exec, u32 dis_rate_mask)
{
  #line 225 
  coex_dm_2->cur_ra_mask = dis_rate_mask;
  #line 227 
  if ((int)force_exec != 0 || coex_dm_2->pre_ra_mask != coex_dm_2->cur_ra_mask) 
    #line 229 
    (*(btcoexist->btc_set))((void *)btcoexist,(unsigned char)30,(void *)(& coex_dm_2->cur_ra_mask));
  #line 232 
  coex_dm_2->pre_ra_mask = coex_dm_2->cur_ra_mask;
  #line 233 
  return;
}

#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a1ant.c"
static void btc8821a1ant_auto_rate_fb_retry(struct btc_coexist *btcoexist, bool force_exec, u8 type)
{
  #line 238 
  bool wifi_under_b_mode = (_Bool)0;
  #line 240 
  coex_dm_2->cur_arfr_type = type;
  #line 242 
  if ((int)force_exec != 0 || (int)coex_dm_2->pre_arfr_type != (int)coex_dm_2->cur_arfr_type) 
    #line 244 
    switch ((int)coex_dm_2->cur_arfr_type) {
      #line 245 
      case 0: 
              #line 245 
      ;
      #line 246 
      (*(btcoexist->btc_write_4byte))((void *)btcoexist,1072U,coex_dm_2->backup_arfr_cnt1);
      #line 248 
      (*(btcoexist->btc_write_4byte))((void *)btcoexist,1076U,coex_dm_2->backup_arfr_cnt2);
      #line 250 
      break;
      #line 251 
      case 1: 
              #line 251 
      ;
      #line 252 
      (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)16,(void *)(& wifi_under_b_mode));
      #line 255 
      if ((int)wifi_under_b_mode != 0) {
        #line 256 
        (*(btcoexist->btc_write_4byte))((void *)btcoexist,1072U,0U);
        #line 258 
        (*(btcoexist->btc_write_4byte))((void *)btcoexist,1076U,16843009U);
      }
      else {
        #line 261 
        (*(btcoexist->btc_write_4byte))((void *)btcoexist,1072U,0U);
        #line 263 
        (*(btcoexist->btc_write_4byte))((void *)btcoexist,1076U,67305985U);
      }
      #line 266 
      break;
      #line 267 
      default: 
               #line 267 
      ;
      #line 268 
      break;
    }
  #line 272 
  coex_dm_2->pre_arfr_type = coex_dm_2->cur_arfr_type;
  #line 273 
  return;
}

#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a1ant.c"
static void btc8821a1ant_retry_limit(struct btc_coexist *btcoexist, bool force_exec, u8 type)
{
  #line 278 
  coex_dm_2->cur_retry_limit_type = type;
  #line 280 
  if ((int)force_exec != 0 || (int)coex_dm_2->pre_retry_limit_type != (int)coex_dm_2->cur_retry_limit_type) 
    #line 282 
    switch ((int)coex_dm_2->cur_retry_limit_type) {
      #line 283 
      case 0: 
              #line 283 
      ;
      #line 284 
      (*(btcoexist->btc_write_2byte))((void *)btcoexist,1066U,(unsigned short)((int)coex_dm_2->backup_retry_limit));
      #line 286 
      break;
      #line 287 
      case 1: 
              #line 287 
      ;
      #line 288 
      (*(btcoexist->btc_write_2byte))((void *)btcoexist,1066U,(unsigned short)2056);
      #line 289 
      break;
      #line 290 
      default: 
               #line 290 
      ;
      #line 291 
      break;
    }
  #line 294 
  coex_dm_2->pre_retry_limit_type = coex_dm_2->cur_retry_limit_type;
  #line 295 
  return;
}

#line 297  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a1ant.c"
static void btc8821a1ant_ampdu_max_time(struct btc_coexist *btcoexist, bool force_exec, u8 type)
{
  #line 300 
  coex_dm_2->cur_ampdu_time_type = type;
  #line 302 
  if ((int)force_exec != 0 || (int)coex_dm_2->pre_ampdu_time_type != (int)coex_dm_2->cur_ampdu_time_type) 
    #line 304 
    switch ((int)coex_dm_2->cur_ampdu_time_type) {
      #line 305 
      case 0: 
              #line 305 
      ;
      #line 306 
      (*(btcoexist->btc_write_1byte))((void *)btcoexist,1110U,(unsigned int)coex_dm_2->backup_ampdu_max_time);
      #line 308 
      break;
      #line 309 
      case 1: 
              #line 309 
      ;
      #line 310 
      (*(btcoexist->btc_write_1byte))((void *)btcoexist,1110U,56U);
      #line 311 
      break;
      #line 312 
      default: 
               #line 312 
      ;
      #line 313 
      break;
    }
  #line 317 
  coex_dm_2->pre_ampdu_time_type = coex_dm_2->cur_ampdu_time_type;
  #line 318 
  return;
}

#line 320  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a1ant.c"
static void btc8821a1ant_limited_tx(struct btc_coexist *btcoexist, bool force_exec, u8 ra_mask_type, u8 arfr_type, u8 retry_limit_type, u8 ampdu_time_type)
{
  #line 325 
  switch ((int)ra_mask_type) {
    #line 326 
    case 0: 
            #line 326 
    ;
    #line 327 
    btc8821a1ant_update_ra_mask(btcoexist,(_Bool)((bool)((int)force_exec) != 0),0U);
    #line 328 
    break;
    #line 329 
    case 1: 
            #line 329 
    ;
    #line 330 
    btc8821a1ant_update_ra_mask(btcoexist,(_Bool)((bool)((int)force_exec) != 0),3U);
    #line 332 
    break;
    #line 333 
    case 2: 
            #line 333 
    ;
    #line 334 
    btc8821a1ant_update_ra_mask(btcoexist,(_Bool)((bool)((int)force_exec) != 0),127479U);
    #line 336 
    break;
    #line 337 
    default: 
             #line 337 
    ;
    #line 338 
    break;
  }
  #line 341 
  btc8821a1ant_auto_rate_fb_retry(btcoexist,(_Bool)((bool)((int)force_exec) != 0),(unsigned char)((int)arfr_type));
  #line 342 
  btc8821a1ant_retry_limit(btcoexist,(_Bool)((bool)((int)force_exec) != 0),(unsigned char)((int)retry_limit_type));
  #line 343 
  btc8821a1ant_ampdu_max_time(btcoexist,(_Bool)((bool)((int)force_exec) != 0),(unsigned char)((int)ampdu_time_type));
  #line 344 
  return;
}

#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a1ant.c"
static void btc8821a1ant_limited_rx(struct btc_coexist *btcoexist, bool force_exec, bool rej_ap_agg_pkt, bool bt_ctrl_agg_buf_size, u8 agg_buf_size)
{
  #line 350 
  bool reject_rx_agg = rej_ap_agg_pkt;
  #line 351 
  bool bt_ctrl_rx_agg_size = bt_ctrl_agg_buf_size;
  #line 352 
  u8 rx_agg_size = agg_buf_size;
  #line 355 
  (*(btcoexist->btc_set))((void *)btcoexist,(unsigned char)4,(void *)(& reject_rx_agg));
  #line 358 
  (*(btcoexist->btc_set))((void *)btcoexist,(unsigned char)5,(void *)(& bt_ctrl_rx_agg_size));
  #line 361 
  (*(btcoexist->btc_set))((void *)btcoexist,(unsigned char)11,(void *)(& rx_agg_size));
  #line 363 
  (*(btcoexist->btc_set))((void *)btcoexist,(unsigned char)13,(void *)0);
  #line 364 
  return;
}

#line 366  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a1ant.c"
static void btc8821a1ant_monitor_bt_ctr(struct btc_coexist *btcoexist)
{
  #line 368 
  u32 reg_hp_tx_rx;
  #line 368 
  u32 reg_lp_tx_rx;
  #line 368 
  u32 u4_tmp;
  #line 369 
  u32 reg_hp_tx = 0U;
  #line 369 
  u32 reg_hp_rx = 0U;
  #line 369 
  u32 reg_lp_tx = 0U;
  #line 369 
  u32 reg_lp_rx = 0U;
  #line 371 
  reg_hp_tx_rx = 1904U;
  #line 372 
  reg_lp_tx_rx = 1908U;
  #line 374 
  u4_tmp = (*(btcoexist->btc_read_4byte))((void *)btcoexist,reg_hp_tx_rx);
  #line 375 
  reg_hp_tx = u4_tmp & 65535U;
  #line 376 
  reg_hp_rx = u4_tmp >> 16;
  #line 378 
  u4_tmp = (*(btcoexist->btc_read_4byte))((void *)btcoexist,reg_lp_tx_rx);
  #line 379 
  reg_lp_tx = u4_tmp & 65535U;
  #line 380 
  reg_lp_rx = u4_tmp >> 16;
  #line 382 
  coex_sta_2->high_priority_tx = reg_hp_tx;
  #line 383 
  coex_sta_2->high_priority_rx = reg_hp_rx;
  #line 384 
  coex_sta_2->low_priority_tx = reg_lp_tx;
  #line 385 
  coex_sta_2->low_priority_rx = reg_lp_rx;
  #line 388 
  (*(btcoexist->btc_write_1byte))((void *)btcoexist,1902U,12U);
  #line 389 
  return;
}

#line 391  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a1ant.c"
static void btc8821a1ant_query_bt_info(struct btc_coexist *btcoexist)
{
  #line 393 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 394 
  u8 h2c_parameter[1U] = {(unsigned char)0U};
  #line 396 
  coex_sta_2->c2h_bt_info_req_sent = (_Bool)1;
  #line 398 
  h2c_parameter[0] = (unsigned char)((unsigned int)h2c_parameter[0] | 1U);
  #line 400 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Query Bt Info, FW write 0x61 = 0x%x\n",(int)h2c_parameter[0]);
  #line 404 
  (*(btcoexist->btc_fill_h2c))((void *)btcoexist,(unsigned char)97,1U,(u8 *)(& h2c_parameter));
  #line 405 
  return;
}

#line 407  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a1ant.c"
static void btc8821a1ant_update_bt_link_info(struct btc_coexist *btcoexist)
{
  #line 409 
  struct btc_bt_link_info *bt_link_info = & btcoexist->bt_link_info;
  #line 410 
  bool bt_hs_on = (_Bool)0;
  #line 412 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)0,(void *)(& bt_hs_on));
  #line 414 
  bt_link_info->bt_link_exist = coex_sta_2->bt_link_exist;
  #line 415 
  bt_link_info->sco_exist = coex_sta_2->sco_exist;
  #line 416 
  bt_link_info->a2dp_exist = coex_sta_2->a2dp_exist;
  #line 417 
  bt_link_info->pan_exist = coex_sta_2->pan_exist;
  #line 418 
  bt_link_info->hid_exist = coex_sta_2->hid_exist;
  #line 421 
  if ((int)bt_hs_on != 0) {
    #line 422 
    bt_link_info->pan_exist = (_Bool)1;
    #line 423 
    bt_link_info->bt_link_exist = (_Bool)1;
  }
  #line 427 
  if ((((int)bt_link_info->sco_exist != 0 && ! bt_link_info->a2dp_exist) && ! bt_link_info->pan_exist) && ! bt_link_info->hid_exist) 
    #line 431 
    bt_link_info->sco_only = (_Bool)1; else 
                                            #line 433 
                                            bt_link_info->sco_only = (_Bool)0;
  #line 436 
  if (((! bt_link_info->sco_exist && (int)bt_link_info->a2dp_exist != 0) && ! bt_link_info->pan_exist) && ! bt_link_info->hid_exist) 
    #line 440 
    bt_link_info->a2dp_only = (_Bool)1; else 
                                             #line 442 
                                             bt_link_info->a2dp_only = (_Bool)0;
  #line 445 
  if (((! bt_link_info->sco_exist && ! bt_link_info->a2dp_exist) && (int)bt_link_info->pan_exist != 0) && ! bt_link_info->hid_exist) 
    #line 449 
    bt_link_info->pan_only = (_Bool)1; else 
                                            #line 451 
                                            bt_link_info->pan_only = (_Bool)0;
  #line 454 
  if (((! bt_link_info->sco_exist && ! bt_link_info->a2dp_exist) && ! bt_link_info->pan_exist) && (int)bt_link_info->hid_exist != 0) 
    #line 458 
    bt_link_info->hid_only = (_Bool)1; else 
                                            #line 460 
                                            bt_link_info->hid_only = (_Bool)0;
  #line 461 
  return;
}

#line 463  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a1ant.c"
static u8 btc8821a1ant_action_algorithm(struct btc_coexist *btcoexist)
{
  #line 465 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 466 
  struct btc_bt_link_info *bt_link_info = & btcoexist->bt_link_info;
  #line 467 
  bool bt_hs_on = (_Bool)0;
  #line 468 
  u8 algorithm = (unsigned char)0U;
  #line 469 
  u8 num_of_diff_profile = (unsigned char)0U;
  #line 471 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)0,(void *)(& bt_hs_on));
  #line 473 
  if (! bt_link_info->bt_link_exist) {
    #line 474 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], No BT link exists!!!\n");
    #line 476 
    return algorithm;
  }
  #line 479 
  if ((int)bt_link_info->sco_exist != 0) 
                                         #line 480 
                                         num_of_diff_profile = (u8)((int)num_of_diff_profile + 1);
  #line 481 
  if ((int)bt_link_info->hid_exist != 0) 
                                         #line 482 
                                         num_of_diff_profile = (u8)((int)num_of_diff_profile + 1);
  #line 483 
  if ((int)bt_link_info->pan_exist != 0) 
                                         #line 484 
                                         num_of_diff_profile = (u8)((int)num_of_diff_profile + 1);
  #line 485 
  if ((int)bt_link_info->a2dp_exist != 0) 
                                          #line 486 
                                          num_of_diff_profile = (u8)((int)num_of_diff_profile + 1);
  #line 488 
  if ((unsigned int)num_of_diff_profile == 1U) {
    #line 489 
    if ((int)bt_link_info->sco_exist != 0) {
      #line 490 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BT Profile = SCO only\n");
      #line 492 
      algorithm = (unsigned char)1U;
    }
    else 
      #line 494 
      if ((int)bt_link_info->hid_exist != 0) {
        #line 495 
        _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BT Profile = HID only\n");
        #line 497 
        algorithm = (unsigned char)2U;
      }
      else 
        #line 498 
        if ((int)bt_link_info->a2dp_exist != 0) {
          #line 499 
          _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BT Profile = A2DP only\n");
          #line 501 
          algorithm = (unsigned char)3U;
        }
        else 
          #line 502 
          if ((int)bt_link_info->pan_exist != 0) 
            #line 503 
            if ((int)bt_hs_on != 0) {
              #line 504 
              _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BT Profile = PAN(HS) only\n");
              #line 507 
              algorithm = (unsigned char)6U;
            }
            else {
              #line 509 
              _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BT Profile = PAN(EDR) only\n");
              #line 512 
              algorithm = (unsigned char)5U;
            }
  }
  else 
    #line 516 
    if ((unsigned int)num_of_diff_profile == 2U) {
      #line 517 
      if ((int)bt_link_info->sco_exist != 0) {
        #line 518 
        if ((int)bt_link_info->hid_exist != 0) {
          #line 519 
          _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BT Profile = SCO + HID\n");
          #line 521 
          algorithm = (unsigned char)2U;
        }
        else 
          #line 522 
          if ((int)bt_link_info->a2dp_exist != 0) {
            #line 523 
            _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BT Profile = SCO + A2DP ==> SCO\n");
            #line 525 
            algorithm = (unsigned char)1U;
          }
          else 
            #line 526 
            if ((int)bt_link_info->pan_exist != 0) 
              #line 527 
              if ((int)bt_hs_on != 0) {
                #line 528 
                _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BT Profile = SCO + PAN(HS)\n");
                #line 531 
                algorithm = (unsigned char)1U;
              }
              else {
                #line 533 
                _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BT Profile = SCO + PAN(EDR)\n");
                #line 536 
                algorithm = (unsigned char)8U;
              }
      }
      else 
        #line 540 
        if ((int)bt_link_info->hid_exist != 0 && (int)bt_link_info->a2dp_exist != 0) {
          #line 542 
          _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BT Profile = HID + A2DP\n");
          #line 544 
          algorithm = (unsigned char)10U;
        }
        else 
          #line 545 
          if ((int)bt_link_info->hid_exist != 0 && (int)bt_link_info->pan_exist != 0) 
            #line 547 
            if ((int)bt_hs_on != 0) {
              #line 548 
              _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BT Profile = HID + PAN(HS)\n");
              #line 551 
              algorithm = (unsigned char)10U;
            }
            else {
              #line 553 
              _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BT Profile = HID + PAN(EDR)\n");
              #line 556 
              algorithm = (unsigned char)8U;
            }
          else 
            #line 558 
            if ((int)bt_link_info->pan_exist != 0 && (int)bt_link_info->a2dp_exist != 0) 
              #line 560 
              if ((int)bt_hs_on != 0) {
                #line 561 
                _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BT Profile = A2DP + PAN(HS)\n");
                #line 564 
                algorithm = (unsigned char)4U;
              }
              else {
                #line 566 
                _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BT Profile = A2DP + PAN(EDR)\n");
                #line 569 
                algorithm = (unsigned char)7U;
              }
    }
    else 
      #line 573 
      if ((unsigned int)num_of_diff_profile == 3U) {
        #line 574 
        if ((int)bt_link_info->sco_exist != 0) {
          #line 575 
          if ((int)bt_link_info->hid_exist != 0 && (int)bt_link_info->a2dp_exist != 0) {
            #line 577 
            _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BT Profile = SCO + HID + A2DP ==> HID\n");
            #line 579 
            algorithm = (unsigned char)2U;
          }
          else 
            #line 580 
            if ((int)bt_link_info->hid_exist != 0 && (int)bt_link_info->pan_exist != 0) 
              #line 582 
              if ((int)bt_hs_on != 0) {
                #line 583 
                _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BT Profile = SCO + HID + PAN(HS)\n");
                #line 586 
                algorithm = (unsigned char)10U;
              }
              else {
                #line 588 
                _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BT Profile = SCO + HID + PAN(EDR)\n");
                #line 591 
                algorithm = (unsigned char)8U;
              }
            else 
              #line 593 
              if ((int)bt_link_info->pan_exist != 0 && (int)bt_link_info->a2dp_exist != 0) 
                #line 595 
                if ((int)bt_hs_on != 0) {
                  #line 596 
                  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BT Profile = SCO + A2DP + PAN(HS)\n");
                  #line 599 
                  algorithm = (unsigned char)1U;
                }
                else {
                  #line 601 
                  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BT Profile = SCO + A2DP + PAN(EDR) ==> HID\n");
                  #line 604 
                  algorithm = (unsigned char)8U;
                }
        }
        else 
          #line 608 
          if (((int)bt_link_info->hid_exist != 0 && (int)bt_link_info->pan_exist != 0) && (int)bt_link_info->a2dp_exist != 0) 
            #line 611 
            if ((int)bt_hs_on != 0) {
              #line 612 
              _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BT Profile = HID + A2DP + PAN(HS)\n");
              #line 615 
              algorithm = (unsigned char)10U;
            }
            else {
              #line 617 
              _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BT Profile = HID + A2DP + PAN(EDR)\n");
              #line 620 
              algorithm = (unsigned char)9U;
            }
      }
      else 
        #line 624 
        if ((unsigned int)num_of_diff_profile > 2U) 
          #line 625 
          if ((int)bt_link_info->sco_exist != 0) 
            #line 626 
            if (((int)bt_link_info->hid_exist != 0 && (int)bt_link_info->pan_exist != 0) && (int)bt_link_info->a2dp_exist != 0) 
              #line 629 
              if ((int)bt_hs_on != 0) 
                                      #line 630 
                                      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Error!!! BT Profile = SCO + HID + A2DP + PAN(HS)\n");
              else {
                #line 635 
                _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BT Profile = SCO + HID + A2DP + PAN(EDR)==>PAN(EDR)+HID\n");
                #line 638 
                algorithm = (unsigned char)8U;
              }
  #line 643 
  return algorithm;
}

#line 646  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a1ant.c"
static void btc8821a1ant_set_sw_penalty_tx_rate(struct btc_coexist *btcoexist, bool low_penalty_ra)
{
  #line 663 
  char *tmp;
  #line 649 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 650 
  u8 h2c_parameter[6U] = {(unsigned char)0U};
  #line 652 
  h2c_parameter[0] = (unsigned char)6U;
  #line 654 
  if ((int)low_penalty_ra != 0) {
    #line 655 
    h2c_parameter[1] = (unsigned char)((unsigned int)h2c_parameter[1] | 1U);
    #line 657 
    h2c_parameter[2] = (unsigned char)0U;
    #line 658 
    h2c_parameter[3] = (unsigned char)247U;
    #line 659 
    h2c_parameter[4] = (unsigned char)248U;
    #line 660 
    h2c_parameter[5] = (unsigned char)249U;
  }
  #line 663 
  if ((int)low_penalty_ra != 0) 
                                #line 663 
                                tmp = (char *)"ON!!"; else 
                                                           #line 663 
                                                           tmp = (char *)"OFF!!";
  #line 663 
  ;
  #line 663 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], set WiFi Low-Penalty Retry: %s",tmp);
  #line 667 
  (*(btcoexist->btc_fill_h2c))((void *)btcoexist,(unsigned char)105,6U,(u8 *)(& h2c_parameter));
  #line 668 
  return;
}

#line 670  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a1ant.c"
static void btc8821a1ant_low_penalty_ra(struct btc_coexist *btcoexist, bool force_exec, bool low_penalty_ra)
{
  #line 673 
  coex_dm_2->cur_low_penalty_ra = low_penalty_ra;
  #line 675 
  if (! force_exec) 
    #line 676 
    if ((int)coex_dm_2->pre_low_penalty_ra == (int)coex_dm_2->cur_low_penalty_ra) 
      #line 677 
      return;
  #line 679 
  btc8821a1ant_set_sw_penalty_tx_rate(btcoexist,(_Bool)((bool)((int)coex_dm_2->cur_low_penalty_ra) != 0));
  #line 682 
  coex_dm_2->pre_low_penalty_ra = coex_dm_2->cur_low_penalty_ra;
  #line 683 
  return;
}

#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a1ant.c"
static void btc8821a1ant_set_coex_table(struct btc_coexist *btcoexist, u32 val0x6c0, u32 val0x6c4, u32 val0x6c8, u8 val0x6cc)
{
  #line 689 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 691 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], set coex table, set 0x6c0 = 0x%x\n",val0x6c0);
  #line 693 
  (*(btcoexist->btc_write_4byte))((void *)btcoexist,1728U,val0x6c0);
  #line 695 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], set coex table, set 0x6c4 = 0x%x\n",val0x6c4);
  #line 697 
  (*(btcoexist->btc_write_4byte))((void *)btcoexist,1732U,val0x6c4);
  #line 699 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], set coex table, set 0x6c8 = 0x%x\n",val0x6c8);
  #line 701 
  (*(btcoexist->btc_write_4byte))((void *)btcoexist,1736U,val0x6c8);
  #line 703 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], set coex table, set 0x6cc = 0x%x\n",(int)val0x6cc);
  #line 705 
  (*(btcoexist->btc_write_1byte))((void *)btcoexist,1740U,(unsigned int)val0x6cc);
  #line 706 
  return;
}

#line 708  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a1ant.c"
static void btc8821a1ant_coex_table(struct btc_coexist *btcoexist, bool force_exec, u32 val0x6c0, u32 val0x6c4, u32 val0x6c8, u8 val0x6cc)
{
  #line 714 
  char *tmp;
  #line 712 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 714 
  ;
  #line 714 
  ;
  #line 714 
  ;
  #line 714 
  ;
  #line 714 
  if ((int)force_exec != 0) 
                            #line 714 
                            tmp = (char *)"force to"; else 
                                                           #line 714 
                                                           tmp = (char *)"";
  #line 714 
  ;
  #line 714 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], %s write Coex Table 0x6c0 = 0x%x, 0x6c4 = 0x%x, 0x6c8 = 0x%x, 0x6cc = 0x%x\n",tmp,val0x6c0,val0x6c4,val0x6c8,(int)val0x6cc);
  #line 718 
  coex_dm_2->cur_val_0x6c0 = val0x6c0;
  #line 719 
  coex_dm_2->cur_val_0x6c4 = val0x6c4;
  #line 720 
  coex_dm_2->cur_val_0x6c8 = val0x6c8;
  #line 721 
  coex_dm_2->cur_val_0x6cc = val0x6cc;
  #line 723 
  if (! force_exec) 
    #line 724 
    if (((coex_dm_2->pre_val_0x6c0 == coex_dm_2->cur_val_0x6c0 && coex_dm_2->pre_val_0x6c4 == coex_dm_2->cur_val_0x6c4) && coex_dm_2->pre_val_0x6c8 == coex_dm_2->cur_val_0x6c8) && (int)coex_dm_2->pre_val_0x6cc == (int)coex_dm_2->cur_val_0x6cc) 
      #line 728 
      return;
  #line 730 
  btc8821a1ant_set_coex_table(btcoexist,val0x6c0,val0x6c4,val0x6c8,(unsigned char)((int)val0x6cc));
  #line 733 
  coex_dm_2->pre_val_0x6c0 = coex_dm_2->cur_val_0x6c0;
  #line 734 
  coex_dm_2->pre_val_0x6c4 = coex_dm_2->cur_val_0x6c4;
  #line 735 
  coex_dm_2->pre_val_0x6c8 = coex_dm_2->cur_val_0x6c8;
  #line 736 
  coex_dm_2->pre_val_0x6cc = coex_dm_2->cur_val_0x6cc;
  #line 737 
  return;
}

#line 739  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a1ant.c"
static void btc8821a1ant_coex_table_with_type(struct btc_coexist *btcoexist, bool force_exec, u8 type)
{
  #line 742 
  switch ((int)type) {
    #line 743 
    case 0: 
            #line 743 
    ;
    #line 744 
    btc8821a1ant_coex_table(btcoexist,(_Bool)((bool)((int)force_exec) != 0),1431655765U,1431655765U,16777215U,(unsigned char)3);
    #line 746 
    break;
    #line 747 
    case 1: 
            #line 747 
    ;
    #line 748 
    btc8821a1ant_coex_table(btcoexist,(_Bool)((bool)((int)force_exec) != 0),1431655765U,1515870810U,16777215U,(unsigned char)3);
    #line 750 
    break;
    #line 751 
    case 2: 
            #line 751 
    ;
    #line 752 
    btc8821a1ant_coex_table(btcoexist,(_Bool)((bool)((int)force_exec) != 0),1515870810U,1515870810U,16777215U,(unsigned char)3);
    #line 754 
    break;
    #line 755 
    case 3: 
            #line 755 
    ;
    #line 756 
    btc8821a1ant_coex_table(btcoexist,(_Bool)((bool)((int)force_exec) != 0),1515870810U,2863311530U,16777215U,(unsigned char)3);
    #line 758 
    break;
    #line 759 
    case 4: 
            #line 759 
    ;
    #line 760 
    btc8821a1ant_coex_table(btcoexist,(_Bool)((bool)((int)force_exec) != 0),1431655765U,1515870810U,16777215U,(unsigned char)3);
    #line 762 
    break;
    #line 763 
    case 5: 
            #line 763 
    ;
    #line 764 
    btc8821a1ant_coex_table(btcoexist,(_Bool)((bool)((int)force_exec) != 0),1515870810U,2863290970U,16777215U,(unsigned char)3);
    #line 766 
    break;
    #line 767 
    case 6: 
            #line 767 
    ;
    #line 768 
    btc8821a1ant_coex_table(btcoexist,(_Bool)((bool)((int)force_exec) != 0),1431655765U,2863290970U,16777215U,(unsigned char)3);
    #line 770 
    break;
    #line 771 
    case 7: 
            #line 771 
    ;
    #line 772 
    btc8821a1ant_coex_table(btcoexist,(_Bool)((bool)((int)force_exec) != 0),2863311530U,2863311530U,16777215U,(unsigned char)3);
    #line 774 
    break;
    #line 775 
    default: 
             #line 775 
    ;
    #line 776 
    break;
  }
  #line 778 
  return;
}

#line 780  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a1ant.c"
static void btc8821a1ant_set_fw_ignore_wlan_act(struct btc_coexist *btcoexist, bool enable)
{
  #line 783 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 784 
  u8 h2c_parameter[1U] = {(unsigned char)0U};
  #line 786 
  if ((int)enable != 0) 
                        #line 787 
                        h2c_parameter[0] = (unsigned char)((unsigned int)h2c_parameter[0] | 1U);
  #line 789 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], set FW for BT Ignore Wlan_Act, FW write 0x63 = 0x%x\n",(int)h2c_parameter[0]);
  #line 793 
  (*(btcoexist->btc_fill_h2c))((void *)btcoexist,(unsigned char)99,1U,(u8 *)(& h2c_parameter));
  #line 794 
  return;
}

#line 796  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a1ant.c"
static void btc8821a1ant_ignore_wlan_act(struct btc_coexist *btcoexist, bool force_exec, bool enable)
{
  #line 801 
  char *tmp;
  #line 801 
  char *tmp_0;
  #line 799 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 801 
  if ((int)enable != 0) 
                        #line 801 
                        tmp = (char *)"ON"; else 
                                                 #line 801 
                                                 tmp = (char *)"OFF";
  #line 801 
  if ((int)force_exec != 0) 
                            #line 801 
                            tmp_0 = (char *)"force to"; else 
                                                             #line 801 
                                                             tmp_0 = (char *)"";
  #line 801 
  ;
  #line 801 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], %s turn Ignore WlanAct %s\n",tmp_0,tmp);
  #line 804 
  coex_dm_2->cur_ignore_wlan_act = enable;
  #line 806 
  if (! force_exec) {
    #line 807 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], pre_ignore_wlan_act = %d, cur_ignore_wlan_act = %d!!\n",(int)coex_dm_2->pre_ignore_wlan_act,(int)coex_dm_2->cur_ignore_wlan_act);
    #line 812 
    if ((int)coex_dm_2->pre_ignore_wlan_act == (int)coex_dm_2->cur_ignore_wlan_act) 
      #line 814 
      return;
  }
  #line 816 
  btc8821a1ant_set_fw_ignore_wlan_act(btcoexist,(_Bool)((bool)((int)enable) != 0));
  #line 818 
  coex_dm_2->pre_ignore_wlan_act = coex_dm_2->cur_ignore_wlan_act;
  #line 819 
  return;
}

#line 821  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a1ant.c"
static void btc8821a1ant_set_fw_ps_tdma(struct btc_coexist *btcoexist, u8 byte1, u8 byte2, u8 byte3, u8 byte4, u8 byte5)
{
  #line 824 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 825 
  u8 h2c_parameter[5U] = {(unsigned char)0U};
  #line 826 
  u8 real_byte1 = byte1;
  #line 826 
  u8 real_byte5 = byte5;
  #line 827 
  bool ap_enable = (_Bool)0;
  #line 829 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)14,(void *)(& ap_enable));
  #line 832 
  if ((int)ap_enable != 0) 
    #line 833 
    if (((int)byte1 & 16) != 0 && ((int)byte1 & 32) == 0) {
      #line 834 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], FW for 1Ant AP mode\n");
      #line 836 
      real_byte1 = (unsigned char)((unsigned int)real_byte1 & 239U);
      #line 837 
      real_byte1 = (unsigned char)((unsigned int)real_byte1 | 32U);
      #line 839 
      real_byte5 = (unsigned char)((unsigned int)real_byte5 | 32U);
      #line 840 
      real_byte5 = (unsigned char)((unsigned int)real_byte5 & 191U);
    }
  #line 844 
  h2c_parameter[0] = real_byte1;
  #line 845 
  h2c_parameter[1] = byte2;
  #line 846 
  h2c_parameter[2] = byte3;
  #line 847 
  h2c_parameter[3] = byte4;
  #line 848 
  h2c_parameter[4] = real_byte5;
  #line 850 
  coex_dm_2->ps_tdma_para[0] = real_byte1;
  #line 851 
  coex_dm_2->ps_tdma_para[1] = byte2;
  #line 852 
  coex_dm_2->ps_tdma_para[2] = byte3;
  #line 853 
  coex_dm_2->ps_tdma_para[3] = byte4;
  #line 854 
  coex_dm_2->ps_tdma_para[4] = real_byte5;
  #line 856 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], PS-TDMA H2C cmd =0x%x%08x\n",(int)h2c_parameter[0],((((int)h2c_parameter[1] << 24) | ((int)h2c_parameter[2] << 16)) | ((int)h2c_parameter[3] << 8)) | (int)h2c_parameter[4]);
  #line 863 
  (*(btcoexist->btc_fill_h2c))((void *)btcoexist,(unsigned char)96,5U,(u8 *)(& h2c_parameter));
  #line 864 
  return;
}

#line 866  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a1ant.c"
static void btc8821a1ant_set_lps_rpwm(struct btc_coexist *btcoexist, u8 lps_val, u8 rpwm_val)
{
  #line 869 
  u8 lps = lps_val;
  #line 870 
  u8 rpwm = rpwm_val;
  #line 872 
  (*(btcoexist->btc_set))((void *)btcoexist,(unsigned char)18,(void *)(& lps));
  #line 873 
  (*(btcoexist->btc_set))((void *)btcoexist,(unsigned char)19,(void *)(& rpwm));
  #line 874 
  return;
}

#line 876  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a1ant.c"
static void btc8821a1ant_lps_rpwm(struct btc_coexist *btcoexist, bool force_exec, u8 lps_val, u8 rpwm_val)
{
  #line 881 
  char *tmp;
  #line 879 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 881 
  ;
  #line 881 
  ;
  #line 881 
  if ((int)force_exec != 0) 
                            #line 881 
                            tmp = (char *)"force to"; else 
                                                           #line 881 
                                                           tmp = (char *)"";
  #line 881 
  ;
  #line 881 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], %s set lps/rpwm = 0x%x/0x%x\n",tmp,(int)lps_val,(int)rpwm_val);
  #line 884 
  coex_dm_2->cur_lps = lps_val;
  #line 885 
  coex_dm_2->cur_rpwm = rpwm_val;
  #line 887 
  if (! force_exec) {
    #line 888 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], LPS-RxBeaconMode = 0x%x, LPS-RPWM = 0x%x!!\n",(int)coex_dm_2->cur_lps,(int)coex_dm_2->cur_rpwm);
    #line 892 
    if ((int)coex_dm_2->pre_lps == (int)coex_dm_2->cur_lps && (int)coex_dm_2->pre_rpwm == (int)coex_dm_2->cur_rpwm) {
      #line 894 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], LPS-RPWM_Last = 0x%x, LPS-RPWM_Now = 0x%x!!\n",(int)coex_dm_2->pre_rpwm,(int)coex_dm_2->cur_rpwm);
      #line 898 
      return;
    }
  }
  #line 901 
  btc8821a1ant_set_lps_rpwm(btcoexist,(unsigned char)((int)lps_val),(unsigned char)((int)rpwm_val));
  #line 903 
  coex_dm_2->pre_lps = coex_dm_2->cur_lps;
  #line 904 
  coex_dm_2->pre_rpwm = coex_dm_2->cur_rpwm;
  #line 905 
  return;
}

#line 907  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a1ant.c"
static void btc8821a1ant_sw_mechanism(struct btc_coexist *btcoexist, bool low_penalty_ra)
{
  #line 910 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 912 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], SM[LpRA] = %d\n",(int)low_penalty_ra);
  #line 915 
  btc8821a1ant_low_penalty_ra(btcoexist,(_Bool)0,(_Bool)((bool)((int)low_penalty_ra) != 0));
  #line 916 
  return;
}

#line 918  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a1ant.c"
static void btc8821a1ant_set_ant_path(struct btc_coexist *btcoexist, u8 ant_pos_type, bool init_hw_cfg, bool wifi_off)
{
  #line 922 
  struct btc_board_info *board_info = & btcoexist->board_info;
  #line 923 
  u32 u4_tmp = 0U;
  #line 924 
  u8 h2c_parameter[2U] = {(unsigned char)0U};
  #line 926 
  if ((int)init_hw_cfg != 0) {
    #line 928 
    u4_tmp = (*(btcoexist->btc_read_4byte))((void *)btcoexist,76U);
    #line 929 
    u4_tmp &= 4286578687U;
    #line 930 
    u4_tmp |= 16777216U;
    #line 931 
    (*(btcoexist->btc_write_4byte))((void *)btcoexist,76U,u4_tmp);
    #line 933 
    (*(btcoexist->btc_write_1byte_bitmask))((void *)btcoexist,2421U,3U,(unsigned char)3);
    #line 934 
    (*(btcoexist->btc_write_1byte))((void *)btcoexist,3252U,119U);
    #line 936 
    if ((unsigned int)board_info->btdm_ant_pos == 1U) {
      #line 940 
      h2c_parameter[0] = (unsigned char)1U;
      #line 941 
      h2c_parameter[1] = (unsigned char)1U;
      #line 942 
      (*(btcoexist->btc_fill_h2c))((void *)btcoexist,(unsigned char)101,2U,(u8 *)(& h2c_parameter));
    }
    else {
      #line 948 
      h2c_parameter[0] = (unsigned char)0U;
      #line 949 
      h2c_parameter[1] = (unsigned char)1U;
      #line 950 
      (*(btcoexist->btc_fill_h2c))((void *)btcoexist,(unsigned char)101,2U,(u8 *)(& h2c_parameter));
    }
  }
  else 
    #line 953 
    if ((int)wifi_off != 0) {
      #line 957 
      u4_tmp = (*(btcoexist->btc_read_4byte))((void *)btcoexist,76U);
      #line 958 
      u4_tmp &= 4286578687U;
      #line 959 
      u4_tmp &= 4278190079U;
      #line 960 
      (*(btcoexist->btc_write_4byte))((void *)btcoexist,76U,u4_tmp);
      #line 963 
      (*(btcoexist->btc_write_1byte_bitmask))((void *)btcoexist,1893U,24U,(unsigned char)3);
    }
    else 
         #line 966 
         (*(btcoexist->btc_write_1byte_bitmask))((void *)btcoexist,1893U,24U,(unsigned char)0);
  #line 970 
  switch ((int)ant_pos_type) {
    #line 971 
    case 0: 
            #line 971 
    ;
    #line 972 
    (*(btcoexist->btc_write_1byte))((void *)btcoexist,3252U,119U);
    #line 973 
    if ((unsigned int)board_info->btdm_ant_pos == 1U) 
                                                      #line 974 
                                                      (*(btcoexist->btc_write_1byte_bitmask))((void *)btcoexist,3255U,48U,(unsigned char)1); else 
                                                                    #line 977 
                                                                    (*(btcoexist->btc_write_1byte_bitmask))((void *)btcoexist,3255U,48U,(unsigned char)2);
    #line 979 
    break;
    #line 980 
    case 1: 
            #line 980 
    ;
    #line 981 
    (*(btcoexist->btc_write_1byte))((void *)btcoexist,3252U,119U);
    #line 982 
    if ((unsigned int)board_info->btdm_ant_pos == 1U) 
                                                      #line 983 
                                                      (*(btcoexist->btc_write_1byte_bitmask))((void *)btcoexist,3255U,48U,(unsigned char)2); else 
                                                                    #line 986 
                                                                    (*(btcoexist->btc_write_1byte_bitmask))((void *)btcoexist,3255U,48U,(unsigned char)1);
    #line 988 
    break;
    #line 989 
    default: 
             #line 989 
    ;
    #line 990 
    case 2: 
            #line 990 
    ;
    #line 991 
    (*(btcoexist->btc_write_1byte))((void *)btcoexist,3252U,102U);
    #line 992 
    if ((unsigned int)board_info->btdm_ant_pos == 1U) 
                                                      #line 993 
                                                      (*(btcoexist->btc_write_1byte_bitmask))((void *)btcoexist,3255U,48U,(unsigned char)1); else 
                                                                    #line 996 
                                                                    (*(btcoexist->btc_write_1byte_bitmask))((void *)btcoexist,3255U,48U,(unsigned char)2);
    #line 998 
    break;
  }
  #line 1000 
  return;
}

#line 1002  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a1ant.c"
static void btc8821a1ant_ps_tdma(struct btc_coexist *btcoexist, bool force_exec, bool turn_on, u8 type)
{
  #line 1005 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 1006 
  u8 rssi_adjust_val = (unsigned char)0U;
  #line 1008 
  coex_dm_2->cur_ps_tdma_on = turn_on;
  #line 1009 
  coex_dm_2->cur_ps_tdma = type;
  #line 1011 
  if (! force_exec) {
    #line 1012 
    if ((int)coex_dm_2->cur_ps_tdma_on != 0) 
                                             #line 1013 
                                             _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], ********** TDMA(on, %d) **********\n",(int)coex_dm_2->cur_ps_tdma); else 
                                                                    #line 1017 
                                                                    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], ********** TDMA(off, %d) **********\n",(int)coex_dm_2->cur_ps_tdma);
    #line 1021 
    if ((int)coex_dm_2->pre_ps_tdma_on == (int)coex_dm_2->cur_ps_tdma_on && (int)coex_dm_2->pre_ps_tdma == (int)coex_dm_2->cur_ps_tdma) 
      #line 1023 
      return;
  }
  #line 1025 
  if ((int)turn_on != 0) 
    #line 1026 
    switch ((int)type) {
      #line 1027 
      default: 
               #line 1027 
      ;
      #line 1028 
      btc8821a1ant_set_fw_ps_tdma(btcoexist,(unsigned char)81,(unsigned char)26,(unsigned char)26,(unsigned char)0,(unsigned char)80);
      #line 1030 
      break;
      #line 1031 
      case 1: 
              #line 1031 
      ;
      #line 1032 
      btc8821a1ant_set_fw_ps_tdma(btcoexist,(unsigned char)81,(unsigned char)58,(unsigned char)3,(unsigned char)16,(unsigned char)80);
      #line 1034 
      rssi_adjust_val = (unsigned char)11U;
      #line 1035 
      break;
      #line 1036 
      case 2: 
              #line 1036 
      ;
      #line 1037 
      btc8821a1ant_set_fw_ps_tdma(btcoexist,(unsigned char)81,(unsigned char)43,(unsigned char)3,(unsigned char)16,(unsigned char)80);
      #line 1039 
      rssi_adjust_val = (unsigned char)14U;
      #line 1040 
      break;
      #line 1041 
      case 3: 
              #line 1041 
      ;
      #line 1042 
      btc8821a1ant_set_fw_ps_tdma(btcoexist,(unsigned char)81,(unsigned char)29,(unsigned char)29,(unsigned char)0,(unsigned char)16);
      #line 1044 
      break;
      #line 1045 
      case 4: 
              #line 1045 
      ;
      #line 1046 
      btc8821a1ant_set_fw_ps_tdma(btcoexist,(unsigned char)147,(unsigned char)21,(unsigned char)3,(unsigned char)20,(unsigned char)0);
      #line 1048 
      rssi_adjust_val = (unsigned char)17U;
      #line 1049 
      break;
      #line 1050 
      case 5: 
              #line 1050 
      ;
      #line 1051 
      btc8821a1ant_set_fw_ps_tdma(btcoexist,(unsigned char)97,(unsigned char)21,(unsigned char)3,(unsigned char)17,(unsigned char)16);
      #line 1053 
      break;
      #line 1054 
      case 6: 
              #line 1054 
      ;
      #line 1055 
      btc8821a1ant_set_fw_ps_tdma(btcoexist,(unsigned char)97,(unsigned char)32,(unsigned char)3,(unsigned char)17,(unsigned char)19);
      #line 1057 
      break;
      #line 1058 
      case 7: 
              #line 1058 
      ;
      #line 1059 
      btc8821a1ant_set_fw_ps_tdma(btcoexist,(unsigned char)19,(unsigned char)12,(unsigned char)5,(unsigned char)0,(unsigned char)0);
      #line 1061 
      break;
      #line 1062 
      case 8: 
              #line 1062 
      ;
      #line 1063 
      btc8821a1ant_set_fw_ps_tdma(btcoexist,(unsigned char)147,(unsigned char)37,(unsigned char)3,(unsigned char)16,(unsigned char)0);
      #line 1065 
      break;
      #line 1066 
      case 9: 
              #line 1066 
      ;
      #line 1067 
      btc8821a1ant_set_fw_ps_tdma(btcoexist,(unsigned char)81,(unsigned char)33,(unsigned char)3,(unsigned char)16,(unsigned char)80);
      #line 1069 
      rssi_adjust_val = (unsigned char)18U;
      #line 1070 
      break;
      #line 1071 
      case 10: 
               #line 1071 
      ;
      #line 1072 
      btc8821a1ant_set_fw_ps_tdma(btcoexist,(unsigned char)19,(unsigned char)10,(unsigned char)10,(unsigned char)0,(unsigned char)64);
      #line 1074 
      break;
      #line 1075 
      case 11: 
               #line 1075 
      ;
      #line 1076 
      btc8821a1ant_set_fw_ps_tdma(btcoexist,(unsigned char)81,(unsigned char)21,(unsigned char)3,(unsigned char)16,(unsigned char)80);
      #line 1078 
      rssi_adjust_val = (unsigned char)20U;
      #line 1079 
      break;
      #line 1080 
      case 12: 
               #line 1080 
      ;
      #line 1081 
      btc8821a1ant_set_fw_ps_tdma(btcoexist,(unsigned char)81,(unsigned char)10,(unsigned char)10,(unsigned char)0,(unsigned char)80);
      #line 1083 
      break;
      #line 1084 
      case 13: 
               #line 1084 
      ;
      #line 1085 
      btc8821a1ant_set_fw_ps_tdma(btcoexist,(unsigned char)81,(unsigned char)18,(unsigned char)18,(unsigned char)0,(unsigned char)80);
      #line 1087 
      break;
      #line 1088 
      case 14: 
               #line 1088 
      ;
      #line 1089 
      btc8821a1ant_set_fw_ps_tdma(btcoexist,(unsigned char)81,(unsigned char)30,(unsigned char)3,(unsigned char)16,(unsigned char)20);
      #line 1091 
      break;
      #line 1092 
      case 15: 
               #line 1092 
      ;
      #line 1093 
      btc8821a1ant_set_fw_ps_tdma(btcoexist,(unsigned char)19,(unsigned char)10,(unsigned char)3,(unsigned char)8,(unsigned char)0);
      #line 1095 
      break;
      #line 1096 
      case 16: 
               #line 1096 
      ;
      #line 1097 
      btc8821a1ant_set_fw_ps_tdma(btcoexist,(unsigned char)147,(unsigned char)21,(unsigned char)3,(unsigned char)16,(unsigned char)0);
      #line 1099 
      rssi_adjust_val = (unsigned char)18U;
      #line 1100 
      break;
      #line 1101 
      case 18: 
               #line 1101 
      ;
      #line 1102 
      btc8821a1ant_set_fw_ps_tdma(btcoexist,(unsigned char)147,(unsigned char)37,(unsigned char)3,(unsigned char)16,(unsigned char)0);
      #line 1104 
      rssi_adjust_val = (unsigned char)14U;
      #line 1105 
      break;
      #line 1106 
      case 20: 
               #line 1106 
      ;
      #line 1107 
      btc8821a1ant_set_fw_ps_tdma(btcoexist,(unsigned char)97,(unsigned char)53,(unsigned char)3,(unsigned char)17,(unsigned char)16);
      #line 1109 
      break;
      #line 1110 
      case 21: 
               #line 1110 
      ;
      #line 1111 
      btc8821a1ant_set_fw_ps_tdma(btcoexist,(unsigned char)97,(unsigned char)37,(unsigned char)3,(unsigned char)17,(unsigned char)17);
      #line 1113 
      break;
      #line 1114 
      case 22: 
               #line 1114 
      ;
      #line 1115 
      btc8821a1ant_set_fw_ps_tdma(btcoexist,(unsigned char)97,(unsigned char)37,(unsigned char)3,(unsigned char)17,(unsigned char)16);
      #line 1117 
      break;
      #line 1118 
      case 23: 
               #line 1118 
      ;
      #line 1119 
      btc8821a1ant_set_fw_ps_tdma(btcoexist,(unsigned char)227,(unsigned char)37,(unsigned char)3,(unsigned char)49,(unsigned char)24);
      #line 1121 
      rssi_adjust_val = (unsigned char)22U;
      #line 1122 
      break;
      #line 1123 
      case 24: 
               #line 1123 
      ;
      #line 1124 
      btc8821a1ant_set_fw_ps_tdma(btcoexist,(unsigned char)227,(unsigned char)21,(unsigned char)3,(unsigned char)49,(unsigned char)24);
      #line 1126 
      rssi_adjust_val = (unsigned char)22U;
      #line 1127 
      break;
      #line 1128 
      case 25: 
               #line 1128 
      ;
      #line 1129 
      btc8821a1ant_set_fw_ps_tdma(btcoexist,(unsigned char)227,(unsigned char)10,(unsigned char)3,(unsigned char)49,(unsigned char)24);
      #line 1131 
      rssi_adjust_val = (unsigned char)22U;
      #line 1132 
      break;
      #line 1133 
      case 26: 
               #line 1133 
      ;
      #line 1134 
      btc8821a1ant_set_fw_ps_tdma(btcoexist,(unsigned char)227,(unsigned char)10,(unsigned char)3,(unsigned char)49,(unsigned char)24);
      #line 1136 
      rssi_adjust_val = (unsigned char)22U;
      #line 1137 
      break;
      #line 1138 
      case 27: 
               #line 1138 
      ;
      #line 1139 
      btc8821a1ant_set_fw_ps_tdma(btcoexist,(unsigned char)227,(unsigned char)37,(unsigned char)3,(unsigned char)49,(unsigned char)152);
      #line 1141 
      rssi_adjust_val = (unsigned char)22U;
      #line 1142 
      break;
      #line 1143 
      case 28: 
               #line 1143 
      ;
      #line 1144 
      btc8821a1ant_set_fw_ps_tdma(btcoexist,(unsigned char)105,(unsigned char)37,(unsigned char)3,(unsigned char)49,(unsigned char)0);
      #line 1146 
      break;
      #line 1147 
      case 29: 
               #line 1147 
      ;
      #line 1148 
      btc8821a1ant_set_fw_ps_tdma(btcoexist,(unsigned char)171,(unsigned char)26,(unsigned char)26,(unsigned char)1,(unsigned char)16);
      #line 1150 
      break;
      #line 1151 
      case 30: 
               #line 1151 
      ;
      #line 1152 
      btc8821a1ant_set_fw_ps_tdma(btcoexist,(unsigned char)81,(unsigned char)48,(unsigned char)3,(unsigned char)16,(unsigned char)16);
      #line 1154 
      break;
      #line 1155 
      case 31: 
               #line 1155 
      ;
      #line 1156 
      btc8821a1ant_set_fw_ps_tdma(btcoexist,(unsigned char)211,(unsigned char)26,(unsigned char)26,(unsigned char)0,(unsigned char)88);
      #line 1158 
      break;
      #line 1159 
      case 32: 
               #line 1159 
      ;
      #line 1160 
      btc8821a1ant_set_fw_ps_tdma(btcoexist,(unsigned char)97,(unsigned char)53,(unsigned char)3,(unsigned char)17,(unsigned char)17);
      #line 1162 
      break;
      #line 1163 
      case 33: 
               #line 1163 
      ;
      #line 1164 
      btc8821a1ant_set_fw_ps_tdma(btcoexist,(unsigned char)163,(unsigned char)37,(unsigned char)3,(unsigned char)48,(unsigned char)144);
      #line 1166 
      break;
      #line 1167 
      case 34: 
               #line 1167 
      ;
      #line 1168 
      btc8821a1ant_set_fw_ps_tdma(btcoexist,(unsigned char)83,(unsigned char)26,(unsigned char)26,(unsigned char)0,(unsigned char)16);
      #line 1170 
      break;
      #line 1171 
      case 35: 
               #line 1171 
      ;
      #line 1172 
      btc8821a1ant_set_fw_ps_tdma(btcoexist,(unsigned char)99,(unsigned char)26,(unsigned char)26,(unsigned char)0,(unsigned char)16);
      #line 1174 
      break;
      #line 1175 
      case 36: 
               #line 1175 
      ;
      #line 1176 
      btc8821a1ant_set_fw_ps_tdma(btcoexist,(unsigned char)211,(unsigned char)18,(unsigned char)3,(unsigned char)20,(unsigned char)80);
      #line 1178 
      break;
      #line 1179 
      case 40: 
               #line 1179 
      ;
      #line 1186 
      btc8821a1ant_set_fw_ps_tdma(btcoexist,(unsigned char)35,(unsigned char)24,(unsigned char)0,(unsigned char)16,(unsigned char)36);
      #line 1188 
      break;
      #line 1189 
      case 41: 
               #line 1189 
      ;
      #line 1190 
      btc8821a1ant_set_fw_ps_tdma(btcoexist,(unsigned char)81,(unsigned char)21,(unsigned char)3,(unsigned char)17,(unsigned char)17);
      #line 1192 
      break;
      #line 1193 
      case 42: 
               #line 1193 
      ;
      #line 1194 
      btc8821a1ant_set_fw_ps_tdma(btcoexist,(unsigned char)81,(unsigned char)32,(unsigned char)3,(unsigned char)17,(unsigned char)17);
      #line 1196 
      break;
      #line 1197 
      case 43: 
               #line 1197 
      ;
      #line 1198 
      btc8821a1ant_set_fw_ps_tdma(btcoexist,(unsigned char)81,(unsigned char)48,(unsigned char)3,(unsigned char)16,(unsigned char)17);
      #line 1200 
      break;
    }
  else 
    #line 1204 
    switch ((int)type) {
      #line 1205 
      case 8: 
              #line 1205 
      ;
      #line 1207 
      btc8821a1ant_set_fw_ps_tdma(btcoexist,(unsigned char)8,(unsigned char)0,(unsigned char)0,(unsigned char)0,(unsigned char)0);
      #line 1209 
      btc8821a1ant_set_ant_path(btcoexist,(unsigned char)2,(_Bool)0,(_Bool)0);
      #line 1211 
      break;
      #line 1212 
      case 0: 
              #line 1212 
      ;
      #line 1213 
      default: 
               #line 1213 
      ;
      #line 1215 
      btc8821a1ant_set_fw_ps_tdma(btcoexist,(unsigned char)0,(unsigned char)0,(unsigned char)0,(unsigned char)0,(unsigned char)0);
      #line 1217 
      btc8821a1ant_set_ant_path(btcoexist,(unsigned char)1,(_Bool)0,(_Bool)0);
      #line 1219 
      break;
      #line 1220 
      case 9: 
              #line 1220 
      ;
      #line 1222 
      btc8821a1ant_set_fw_ps_tdma(btcoexist,(unsigned char)0,(unsigned char)0,(unsigned char)0,(unsigned char)0,(unsigned char)0);
      #line 1224 
      btc8821a1ant_set_ant_path(btcoexist,(unsigned char)0,(_Bool)0,(_Bool)0);
      #line 1226 
      break;
      #line 1227 
      case 10: 
               #line 1227 
      ;
      #line 1229 
      btc8821a1ant_set_fw_ps_tdma(btcoexist,(unsigned char)0,(unsigned char)0,(unsigned char)0,(unsigned char)8,(unsigned char)0);
      #line 1231 
      btc8821a1ant_set_ant_path(btcoexist,(unsigned char)1,(_Bool)0,(_Bool)0);
      #line 1233 
      break;
    }
  #line 1236 
  rssi_adjust_val = (unsigned char)0U;
  #line 1237 
  (*(btcoexist->btc_set))((void *)btcoexist,(unsigned char)17,(void *)(& rssi_adjust_val));
  #line 1241 
  coex_dm_2->pre_ps_tdma_on = coex_dm_2->cur_ps_tdma_on;
  #line 1242 
  coex_dm_2->pre_ps_tdma = coex_dm_2->cur_ps_tdma;
  #line 1243 
  return;
}

#line 1245  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a1ant.c"
static bool btc8821a1ant_is_common_action(struct btc_coexist *btcoexist)
{
  #line 1247 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 1248 
  bool common = (_Bool)0;
  #line 1248 
  bool wifi_connected = (_Bool)0;
  #line 1248 
  bool wifi_busy = (_Bool)0;
  #line 1250 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)2,(void *)(& wifi_connected));
  #line 1252 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)4,(void *)(& wifi_busy));
  #line 1254 
  if (! wifi_connected && (unsigned int)coex_dm_2->bt_status == 0U) {
    #line 1257 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Wifi non connected-idle + BT non connected-idle!!\n");
    #line 1259 
    btc8821a1ant_sw_mechanism(btcoexist,(_Bool)0);
    #line 1261 
    common = (_Bool)1;
  }
  else 
    #line 1262 
    if ((int)wifi_connected != 0 && (unsigned int)coex_dm_2->bt_status == 0U) {
      #line 1265 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Wifi connected + BT non connected-idle!!\n");
      #line 1267 
      btc8821a1ant_sw_mechanism(btcoexist,(_Bool)0);
      #line 1269 
      common = (_Bool)1;
    }
    else 
      #line 1270 
      if (! wifi_connected && (unsigned int)coex_dm_2->bt_status == 1U) {
        #line 1273 
        _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Wifi non connected-idle + BT connected-idle!!\n");
        #line 1275 
        btc8821a1ant_sw_mechanism(btcoexist,(_Bool)0);
        #line 1277 
        common = (_Bool)1;
      }
      else 
        #line 1278 
        if ((int)wifi_connected != 0 && (unsigned int)coex_dm_2->bt_status == 1U) {
          #line 1281 
          _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Wifi connected + BT connected-idle!!\n");
          #line 1283 
          btc8821a1ant_sw_mechanism(btcoexist,(_Bool)0);
          #line 1285 
          common = (_Bool)1;
        }
        else 
          #line 1286 
          if (! wifi_connected && (unsigned int)coex_dm_2->bt_status != 1U) {
            #line 1289 
            _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Wifi non connected-idle + BT Busy!!\n");
            #line 1291 
            btc8821a1ant_sw_mechanism(btcoexist,(_Bool)0);
            #line 1293 
            common = (_Bool)1;
          }
          else {
            #line 1295 
            if ((int)wifi_busy != 0) 
                                     #line 1296 
                                     _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Wifi Connected-Busy + BT Busy!!\n"); else 
                                                                    #line 1299 
                                                                    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Wifi Connected-Idle + BT Busy!!\n");
            #line 1303 
            common = (_Bool)0;
          }
  #line 1306 
  return common;
}

#line 1309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a1ant.c"
static void btc8821a1ant_ps_tdma_check_for_pwr_save(struct btc_coexist *btcoex, bool new_ps_state)
{
  #line 1312 
  u8 lps_mode = (unsigned char)0U;
  #line 1314 
  (*(btcoex->btc_get))((void *)btcoex,(unsigned char)44,(void *)(& lps_mode));
  #line 1316 
  if ((unsigned int)lps_mode != 0U) {
    #line 1318 
    if (! ((int)new_ps_state != 0)) 
                                    #line 1322 
                                    btc8821a1ant_ps_tdma(btcoex,(_Bool)0,(_Bool)0,(unsigned char)0);
  }
  else 
    #line 1326 
    if ((int)new_ps_state != 0) 
                                #line 1328 
                                btc8821a1ant_ps_tdma(btcoex,(_Bool)0,(_Bool)0,(unsigned char)0);
  #line 1333 
  return;
}

#line 1335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a1ant.c"
static void btc8821a1ant_power_save_state(struct btc_coexist *btcoexist, u8 ps_type, u8 lps_val, u8 rpwm_val)
{
  #line 1338 
  bool low_pwr_disable = (_Bool)0;
  #line 1340 
  switch ((int)ps_type) {
    #line 1341 
    case 0: 
            #line 1341 
    ;
    #line 1343 
    low_pwr_disable = (_Bool)0;
    #line 1344 
    (*(btcoexist->btc_set))((void *)btcoexist,(unsigned char)28,(void *)(& low_pwr_disable));
    #line 1346 
    (*(btcoexist->btc_set))((void *)btcoexist,(unsigned char)24,(void *)0);
    #line 1347 
    break;
    #line 1348 
    case 1: 
            #line 1348 
    ;
    #line 1349 
    btc8821a1ant_ps_tdma_check_for_pwr_save(btcoexist,(_Bool)1);
    #line 1351 
    btc8821a1ant_lps_rpwm(btcoexist,(_Bool)0,(unsigned char)((int)lps_val),(unsigned char)((int)rpwm_val));
    #line 1354 
    low_pwr_disable = (_Bool)1;
    #line 1355 
    (*(btcoexist->btc_set))((void *)btcoexist,(unsigned char)28,(void *)(& low_pwr_disable));
    #line 1358 
    (*(btcoexist->btc_set))((void *)btcoexist,(unsigned char)23,(void *)0);
    #line 1359 
    break;
    #line 1360 
    case 2: 
            #line 1360 
    ;
    #line 1361 
    btc8821a1ant_ps_tdma_check_for_pwr_save(btcoexist,(_Bool)0);
    #line 1362 
    (*(btcoexist->btc_set))((void *)btcoexist,(unsigned char)22,(void *)0);
    #line 1363 
    break;
    #line 1364 
    default: 
             #line 1364 
    ;
    #line 1365 
    break;
  }
  #line 1367 
  return;
}

#line 1369  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a1ant.c"
static void btc8821a1ant_coex_under_5g(struct btc_coexist *btcoexist)
{
  #line 1371 
  btc8821a1ant_power_save_state(btcoexist,(unsigned char)0,(unsigned char)0,(unsigned char)0);
  #line 1373 
  btc8821a1ant_ignore_wlan_act(btcoexist,(_Bool)0,(_Bool)1);
  #line 1375 
  btc8821a1ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)0,(unsigned char)10);
  #line 1377 
  btc8821a1ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)0);
  #line 1379 
  btc8821a1ant_limited_tx(btcoexist,(_Bool)0,(unsigned char)0,(unsigned char)0,(unsigned char)0,(unsigned char)0);
  #line 1381 
  btc8821a1ant_limited_rx(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,(unsigned char)5);
  #line 1382 
  return;
}

#line 1391  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a1ant.c"
static void btc8821a1ant_action_sco(struct btc_coexist *btcoexist)
{
  #line 1393 
  btc8821a1ant_sw_mechanism(btcoexist,(_Bool)1);
  #line 1394 
  return;
}

#line 1396  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a1ant.c"
static void btc8821a1ant_action_hid(struct btc_coexist *btcoexist)
{
  #line 1398 
  btc8821a1ant_sw_mechanism(btcoexist,(_Bool)1);
  #line 1399 
  return;
}

#line 1402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a1ant.c"
static void btc8821a1ant_action_a2dp(struct btc_coexist *btcoexist)
{
  #line 1404 
  btc8821a1ant_sw_mechanism(btcoexist,(_Bool)0);
  #line 1405 
  return;
}

#line 1407  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a1ant.c"
static void btc8821a1ant_action_a2dp_pan_hs(struct btc_coexist *btcoexist)
{
  #line 1409 
  btc8821a1ant_sw_mechanism(btcoexist,(_Bool)0);
  #line 1410 
  return;
}

#line 1412  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a1ant.c"
static void btc8821a1ant_action_pan_edr(struct btc_coexist *btcoexist)
{
  #line 1414 
  btc8821a1ant_sw_mechanism(btcoexist,(_Bool)0);
  #line 1415 
  return;
}

#line 1418  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a1ant.c"
static void btc8821a1ant_action_pan_hs(struct btc_coexist *btcoexist)
{
  #line 1420 
  btc8821a1ant_sw_mechanism(btcoexist,(_Bool)0);
  #line 1421 
  return;
}

#line 1424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a1ant.c"
static void btc8821a1ant_action_pan_edr_a2dp(struct btc_coexist *btcoexist)
{
  #line 1426 
  btc8821a1ant_sw_mechanism(btcoexist,(_Bool)0);
  #line 1427 
  return;
}

#line 1429  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a1ant.c"
static void btc8821a1ant_action_pan_edr_hid(struct btc_coexist *btcoexist)
{
  #line 1431 
  btc8821a1ant_sw_mechanism(btcoexist,(_Bool)1);
  #line 1432 
  return;
}

#line 1435  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a1ant.c"
static void btc8821a1ant_action_hid_a2dp_pan_edr(struct btc_coexist *btcoexist)
{
  #line 1437 
  btc8821a1ant_sw_mechanism(btcoexist,(_Bool)1);
  #line 1438 
  return;
}

#line 1440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a1ant.c"
static void btc8821a1ant_action_hid_a2dp(struct btc_coexist *btcoexist)
{
  #line 1442 
  btc8821a1ant_sw_mechanism(btcoexist,(_Bool)1);
  #line 1443 
  return;
}

#line 1451  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a1ant.c"
static void btc8821a1ant_action_wifi_multi_port(struct btc_coexist *btcoexist)
{
  #line 1453 
  struct btc_bt_link_info *bt_link_info = & btcoexist->bt_link_info;
  #line 1455 
  btc8821a1ant_power_save_state(btcoexist,(unsigned char)0,(unsigned char)0,(unsigned char)0);
  #line 1457 
  if ((unsigned int)coex_dm_2->bt_status == 3U) 
    #line 1458 
    if ((int)bt_link_info->a2dp_exist != 0) {
      #line 1459 
      btc8821a1ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)14);
      #line 1460 
      btc8821a1ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)1);
    }
    else 
      #line 1462 
      if ((int)bt_link_info->a2dp_exist != 0 && (int)bt_link_info->pan_exist != 0) {
        #line 1464 
        btc8821a1ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)0,(unsigned char)8);
        #line 1465 
        btc8821a1ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)4);
      }
      else {
        #line 1468 
        btc8821a1ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)20);
        #line 1469 
        btc8821a1ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)4);
      }
  else 
    #line 1472 
    if ((unsigned int)coex_dm_2->bt_status + 252U <= 1U) 
                                                         #line 1475 
                                                         btc8821a1ant_act_bt_sco_hid_only_busy(btcoexist,(unsigned char)2);
    else {
      #line 1478 
      btc8821a1ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)0,(unsigned char)8);
      #line 1479 
      btc8821a1ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)2);
    }
  #line 1481 
  return;
}

#line 1484  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a1ant.c"
static void btc8821a1ant_action_wifi_not_connected_asso_auth(struct btc_coexist *btcoexist)
{
  #line 1487 
  struct btc_bt_link_info *bt_link_info = & btcoexist->bt_link_info;
  #line 1489 
  btc8821a1ant_power_save_state(btcoexist,(unsigned char)0,(unsigned char)0,(unsigned char)0);
  #line 1493 
  if ((int)bt_link_info->sco_exist != 0 || (int)bt_link_info->hid_exist != 0) {
    #line 1494 
    btc8821a1ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)14);
    #line 1495 
    btc8821a1ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)1);
  }
  else 
    #line 1496 
    if ((int)bt_link_info->a2dp_exist != 0 || (int)bt_link_info->pan_exist != 0) {
      #line 1497 
      btc8821a1ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)20);
      #line 1498 
      btc8821a1ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)4);
    }
    else {
      #line 1500 
      btc8821a1ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)0,(unsigned char)8);
      #line 1501 
      btc8821a1ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)2);
    }
  #line 1503 
  return;
}

#line 1506  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a1ant.c"
static void btc8821a1ant_action_hs(struct btc_coexist *btcoexist)
{
  #line 1508 
  btc8821a1ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)5);
  #line 1509 
  btc8821a1ant_coex_table_with_type(btcoexist,(_Bool)1,(unsigned char)2);
  #line 1510 
  return;
}

#line 1512  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a1ant.c"
static void btc8821a1ant_action_bt_inquiry(struct btc_coexist *btcoexist)
{
  #line 1514 
  struct btc_bt_link_info *bt_link_info = & btcoexist->bt_link_info;
  #line 1515 
  bool wifi_connected = (_Bool)0;
  #line 1516 
  bool ap_enable = (_Bool)0;
  #line 1517 
  bool wifi_busy = (_Bool)0;
  #line 1517 
  bool bt_busy = (_Bool)0;
  #line 1519 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)2,(void *)(& wifi_connected));
  #line 1521 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)14,(void *)(& ap_enable));
  #line 1523 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)4,(void *)(& wifi_busy));
  #line 1524 
  (*(btcoexist->btc_set))((void *)btcoexist,(unsigned char)1,(void *)(& bt_busy));
  #line 1526 
  if (! wifi_connected && ! coex_sta_2->wifi_is_high_pri_task) {
    #line 1527 
    btc8821a1ant_power_save_state(btcoexist,(unsigned char)0,(unsigned char)0,(unsigned char)0);
    #line 1529 
    btc8821a1ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)0,(unsigned char)8);
    #line 1530 
    btc8821a1ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)0);
  }
  else 
    #line 1531 
    if (((int)bt_link_info->sco_exist != 0 || (int)bt_link_info->a2dp_exist != 0) || (int)bt_link_info->hid_only != 0) {
      #line 1534 
      btc8821a1ant_power_save_state(btcoexist,(unsigned char)0,(unsigned char)0,(unsigned char)0);
      #line 1536 
      btc8821a1ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)32);
      #line 1537 
      btc8821a1ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)4);
    }
    else 
      #line 1538 
      if ((int)bt_link_info->a2dp_exist != 0 && (int)bt_link_info->hid_exist != 0) {
        #line 1540 
        btc8821a1ant_power_save_state(btcoexist,(unsigned char)0,(unsigned char)0,(unsigned char)0);
        #line 1542 
        btc8821a1ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)14);
        #line 1544 
        btc8821a1ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)1);
      }
      else 
        #line 1545 
        if ((int)bt_link_info->pan_exist != 0 || (int)wifi_busy != 0) {
          #line 1546 
          btc8821a1ant_power_save_state(btcoexist,(unsigned char)0,(unsigned char)0,(unsigned char)0);
          #line 1548 
          btc8821a1ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)20);
          #line 1550 
          btc8821a1ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)4);
        }
        else {
          #line 1552 
          btc8821a1ant_power_save_state(btcoexist,(unsigned char)0,(unsigned char)0,(unsigned char)0);
          #line 1554 
          btc8821a1ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)0,(unsigned char)8);
          #line 1555 
          btc8821a1ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)7);
        }
  #line 1557 
  return;
}

#line 1559  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a1ant.c"
static void btc8821a1ant_act_bt_sco_hid_only_busy(struct btc_coexist *btcoexist, u8 wifi_status)
{
  #line 1563 
  btc8821a1ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)5);
  #line 1565 
  btc8821a1ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)1);
  #line 1566 
  return;
}

#line 1568  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a1ant.c"
static void btc8821a1ant_act_wifi_con_bt_acl_busy(struct btc_coexist *btcoexist, u8 wifi_status)
{
  #line 1571 
  u8 bt_rssi_state;
  #line 1573 
  struct btc_bt_link_info *bt_link_info = & btcoexist->bt_link_info;
  #line 1575 
  bt_rssi_state = btc8821a1ant_bt_rssi_state(btcoexist,(unsigned char)2,(unsigned char)28,(unsigned char)0);
  #line 1577 
  if ((int)bt_link_info->hid_only != 0) {
    #line 1579 
    btc8821a1ant_act_bt_sco_hid_only_busy(btcoexist,(unsigned char)((int)wifi_status));
    #line 1581 
    coex_dm_2->auto_tdma_adjust = (_Bool)0;
    #line 1582 
    return;
  }
  else 
    #line 1583 
    if ((int)bt_link_info->a2dp_only != 0) 
      #line 1585 
      if ((unsigned int)wifi_status == 4U) {
        #line 1586 
        btc8821a1ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)32);
        #line 1587 
        btc8821a1ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)1);
        #line 1589 
        coex_dm_2->auto_tdma_adjust = (_Bool)0;
      }
      else 
        #line 1590 
        if ((unsigned int)bt_rssi_state == 3U) {
          #line 1592 
          btc8821a1ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)14);
          #line 1593 
          btc8821a1ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)1);
        }
        else {
          #line 1597 
          btc8821a1ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)14);
          #line 1598 
          btc8821a1ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)1);
          #line 1600 
          coex_dm_2->auto_tdma_adjust = (_Bool)0;
        }
    else 
      #line 1602 
      if ((int)bt_link_info->hid_exist != 0 && (int)bt_link_info->a2dp_exist != 0) {
        #line 1604 
        if ((unsigned int)bt_rssi_state == 0U || (unsigned int)bt_rssi_state == 3U) {
          #line 1606 
          btc8821a1ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)14);
          #line 1608 
          coex_dm_2->auto_tdma_adjust = (_Bool)0;
        }
        else {
          #line 1611 
          btc8821a1ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)14);
          #line 1613 
          coex_dm_2->auto_tdma_adjust = (_Bool)0;
        }
        #line 1616 
        btc8821a1ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)1);
      }
      else 
        #line 1617 
        if ((int)bt_link_info->pan_only != 0 || (int)bt_link_info->hid_exist != 0 && (int)bt_link_info->pan_exist != 0) {
          #line 1620 
          btc8821a1ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)3);
          #line 1621 
          btc8821a1ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)6);
          #line 1622 
          coex_dm_2->auto_tdma_adjust = (_Bool)0;
        }
        else 
          #line 1623 
          if (((int)bt_link_info->a2dp_exist != 0 || (int)bt_link_info->hid_exist != 0 && (int)bt_link_info->a2dp_exist != 0) && (int)bt_link_info->pan_exist != 0) {
            #line 1627 
            btc8821a1ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)43);
            #line 1628 
            btc8821a1ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)1);
            #line 1629 
            coex_dm_2->auto_tdma_adjust = (_Bool)0;
          }
          else {
            #line 1631 
            btc8821a1ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)11);
            #line 1632 
            btc8821a1ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)1);
            #line 1633 
            coex_dm_2->auto_tdma_adjust = (_Bool)0;
          }
  #line 1635 
  return;
}

#line 1638  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a1ant.c"
static void btc8821a1ant_action_wifi_not_connected(struct btc_coexist *btcoexist)
{
  #line 1641 
  btc8821a1ant_power_save_state(btcoexist,(unsigned char)0,(unsigned char)0,(unsigned char)0);
  #line 1644 
  btc8821a1ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)0,(unsigned char)8);
  #line 1645 
  btc8821a1ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)0);
  #line 1646 
  return;
}

#line 1648  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a1ant.c"
static void btc8821a1ant_act_wifi_not_conn_scan(struct btc_coexist *btcoexist)
{
  #line 1650 
  struct btc_bt_link_info *bt_link_info = & btcoexist->bt_link_info;
  #line 1652 
  btc8821a1ant_power_save_state(btcoexist,(unsigned char)0,(unsigned char)0,(unsigned char)0);
  #line 1655 
  if ((unsigned int)coex_dm_2->bt_status == 3U) 
    #line 1656 
    if ((int)bt_link_info->a2dp_exist != 0) {
      #line 1657 
      btc8821a1ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)14);
      #line 1658 
      btc8821a1ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)1);
    }
    else 
      #line 1660 
      if ((int)bt_link_info->a2dp_exist != 0 && (int)bt_link_info->pan_exist != 0) {
        #line 1662 
        btc8821a1ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)22);
        #line 1663 
        btc8821a1ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)4);
      }
      else {
        #line 1666 
        btc8821a1ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)20);
        #line 1667 
        btc8821a1ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)4);
      }
  else 
    #line 1670 
    if ((unsigned int)coex_dm_2->bt_status + 252U <= 1U) 
                                                         #line 1673 
                                                         btc8821a1ant_act_bt_sco_hid_only_busy(btcoexist,(unsigned char)2);
    else {
      #line 1676 
      btc8821a1ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)0,(unsigned char)8);
      #line 1677 
      btc8821a1ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)2);
    }
  #line 1679 
  return;
}

#line 1682  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a1ant.c"
static void btc8821a1ant_action_wifi_connected_scan(struct btc_coexist *btcoexist)
{
  #line 1684 
  struct btc_bt_link_info *bt_link_info = & btcoexist->bt_link_info;
  #line 1687 
  btc8821a1ant_power_save_state(btcoexist,(unsigned char)0,(unsigned char)0,(unsigned char)0);
  #line 1691 
  if ((unsigned int)coex_dm_2->bt_status == 3U) 
    #line 1692 
    if ((int)bt_link_info->a2dp_exist != 0) {
      #line 1693 
      btc8821a1ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)14);
      #line 1694 
      btc8821a1ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)1);
    }
    else {
      #line 1697 
      btc8821a1ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)20);
      #line 1698 
      btc8821a1ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)4);
    }
  else 
    #line 1701 
    if ((unsigned int)coex_dm_2->bt_status + 252U <= 1U) 
                                                         #line 1704 
                                                         btc8821a1ant_act_bt_sco_hid_only_busy(btcoexist,(unsigned char)2);
    else {
      #line 1707 
      btc8821a1ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)0,(unsigned char)8);
      #line 1708 
      btc8821a1ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)2);
    }
  #line 1710 
  return;
}

#line 1712  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a1ant.c"
static void btc8821a1ant_act_wifi_conn_sp_pkt(struct btc_coexist *btcoexist)
{
  #line 1714 
  struct btc_bt_link_info *bt_link_info = & btcoexist->bt_link_info;
  #line 1716 
  btc8821a1ant_power_save_state(btcoexist,(unsigned char)0,(unsigned char)0,(unsigned char)0);
  #line 1720 
  if (((int)bt_link_info->sco_exist != 0 || (int)bt_link_info->hid_exist != 0) || (int)bt_link_info->a2dp_exist != 0) {
    #line 1722 
    btc8821a1ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)32);
    #line 1723 
    btc8821a1ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)4);
  }
  #line 1726 
  if ((int)bt_link_info->hid_exist != 0 && (int)bt_link_info->a2dp_exist != 0) {
    #line 1727 
    btc8821a1ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)14);
    #line 1728 
    btc8821a1ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)1);
  }
  else 
    #line 1729 
    if ((int)bt_link_info->pan_exist != 0) {
      #line 1730 
      btc8821a1ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)20);
      #line 1731 
      btc8821a1ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)4);
    }
    else {
      #line 1733 
      btc8821a1ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)0,(unsigned char)8);
      #line 1734 
      btc8821a1ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)2);
    }
  #line 1736 
  return;
}

#line 1738  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a1ant.c"
static void btc8821a1ant_action_wifi_connected(struct btc_coexist *btcoexist)
{
  #line 1740 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 1741 
  bool wifi_busy = (_Bool)0;
  #line 1742 
  bool scan = (_Bool)0;
  #line 1742 
  bool link = (_Bool)0;
  #line 1742 
  bool roam = (_Bool)0;
  #line 1743 
  bool under_4way = (_Bool)0;
  #line 1744 
  bool ap_enable = (_Bool)0;
  #line 1746 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], CoexForWifiConnect()===>\n");
  #line 1749 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)12,(void *)(& under_4way));
  #line 1751 
  if ((int)under_4way != 0) {
    #line 1752 
    btc8821a1ant_act_wifi_conn_sp_pkt(btcoexist);
    #line 1753 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], CoexForWifiConnect(), return for wifi is under 4way<===\n");
    #line 1755 
    return;
  }
  #line 1758 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)5,(void *)(& scan));
  #line 1759 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)6,(void *)(& link));
  #line 1760 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)11,(void *)(& roam));
  #line 1761 
  if (((int)scan != 0 || (int)link != 0) || (int)roam != 0) {
    #line 1762 
    if ((int)scan != 0) 
                        #line 1763 
                        btc8821a1ant_action_wifi_connected_scan(btcoexist); else 
                                                                    #line 1765 
                                                                    btc8821a1ant_act_wifi_conn_sp_pkt(btcoexist);
    #line 1767 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], CoexForWifiConnect(), return for wifi is under scan<===\n");
    #line 1769 
    return;
  }
  #line 1773 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)14,(void *)(& ap_enable));
  #line 1775 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)4,(void *)(& wifi_busy));
  #line 1776 
  if (((unsigned int)coex_dm_2->bt_status == 3U && ! ap_enable) && ! btcoexist->bt_link_info.hid_only) 
    #line 1779 
    if (! wifi_busy && (int)btcoexist->bt_link_info.a2dp_only != 0) 
                                                                    #line 1781 
                                                                    btc8821a1ant_power_save_state(btcoexist,(unsigned char)0,(unsigned char)0,(unsigned char)0); else 
                                                                    #line 1784 
                                                                    btc8821a1ant_power_save_state(btcoexist,(unsigned char)1,(unsigned char)80,(unsigned char)4);
  else 
       #line 1787 
       btc8821a1ant_power_save_state(btcoexist,(unsigned char)0,(unsigned char)0,(unsigned char)0);
  #line 1793 
  if (! wifi_busy) 
    #line 1794 
    if ((unsigned int)coex_dm_2->bt_status == 3U) 
                                                  #line 1795 
                                                  btc8821a1ant_act_wifi_con_bt_acl_busy(btcoexist,(unsigned char)4);
    else 
      #line 1797 
      if ((unsigned int)coex_dm_2->bt_status + 252U <= 1U) 
                                                           #line 1801 
                                                           btc8821a1ant_act_bt_sco_hid_only_busy(btcoexist,(unsigned char)4);
      else {
        #line 1804 
        btc8821a1ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)0,(unsigned char)8);
        #line 1805 
        btc8821a1ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)2);
      }
  else 
    #line 1809 
    if ((unsigned int)coex_dm_2->bt_status == 3U) 
                                                  #line 1810 
                                                  btc8821a1ant_act_wifi_con_bt_acl_busy(btcoexist,(unsigned char)5);
    else 
      #line 1812 
      if ((unsigned int)coex_dm_2->bt_status + 252U <= 1U) 
                                                           #line 1816 
                                                           btc8821a1ant_act_bt_sco_hid_only_busy(btcoexist,(unsigned char)5);
      else {
        #line 1819 
        btc8821a1ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)0,(unsigned char)8);
        #line 1820 
        btc8821a1ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)2);
      }
  #line 1822 
  return;
}

#line 1826  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a1ant.c"
static void btc8821a1ant_run_sw_coex_mech(struct btc_coexist *btcoexist)
{
  #line 1828 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 1829 
  u8 algorithm = (unsigned char)0U;
  #line 1831 
  algorithm = btc8821a1ant_action_algorithm(btcoexist);
  #line 1832 
  coex_dm_2->cur_algorithm = algorithm;
  #line 1834 
  if (! btc8821a1ant_is_common_action(btcoexist)) {
    #line 1835 
    switch ((int)coex_dm_2->cur_algorithm) {
      #line 1836 
      case 1: 
              #line 1836 
      ;
      #line 1837 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Action algorithm = SCO\n");
      #line 1839 
      btc8821a1ant_action_sco(btcoexist);
      #line 1840 
      break;
      #line 1841 
      case 2: 
              #line 1841 
      ;
      #line 1842 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Action algorithm = HID\n");
      #line 1844 
      btc8821a1ant_action_hid(btcoexist);
      #line 1845 
      break;
      #line 1846 
      case 3: 
              #line 1846 
      ;
      #line 1847 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Action algorithm = A2DP\n");
      #line 1849 
      btc8821a1ant_action_a2dp(btcoexist);
      #line 1850 
      break;
      #line 1851 
      case 4: 
              #line 1851 
      ;
      #line 1852 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Action algorithm = A2DP+PAN(HS)\n");
      #line 1854 
      btc8821a1ant_action_a2dp_pan_hs(btcoexist);
      #line 1855 
      break;
      #line 1856 
      case 5: 
              #line 1856 
      ;
      #line 1857 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Action algorithm = PAN(EDR)\n");
      #line 1859 
      btc8821a1ant_action_pan_edr(btcoexist);
      #line 1860 
      break;
      #line 1861 
      case 6: 
              #line 1861 
      ;
      #line 1862 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Action algorithm = HS mode\n");
      #line 1864 
      btc8821a1ant_action_pan_hs(btcoexist);
      #line 1865 
      break;
      #line 1866 
      case 7: 
              #line 1866 
      ;
      #line 1867 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Action algorithm = PAN+A2DP\n");
      #line 1869 
      btc8821a1ant_action_pan_edr_a2dp(btcoexist);
      #line 1870 
      break;
      #line 1871 
      case 8: 
              #line 1871 
      ;
      #line 1872 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Action algorithm = PAN(EDR)+HID\n");
      #line 1874 
      btc8821a1ant_action_pan_edr_hid(btcoexist);
      #line 1875 
      break;
      #line 1876 
      case 9: 
              #line 1876 
      ;
      #line 1877 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Action algorithm = HID+A2DP+PAN\n");
      #line 1879 
      btc8821a1ant_action_hid_a2dp_pan_edr(btcoexist);
      #line 1880 
      break;
      #line 1881 
      case 10: 
               #line 1881 
      ;
      #line 1882 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Action algorithm = HID+A2DP\n");
      #line 1884 
      btc8821a1ant_action_hid_a2dp(btcoexist);
      #line 1885 
      break;
      #line 1886 
      default: 
               #line 1886 
      ;
      #line 1887 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Action algorithm = coexist All Off!!\n");
      #line 1890 
      break;
    }
    #line 1892 
    coex_dm_2->pre_algorithm = coex_dm_2->cur_algorithm;
  }
  #line 1894 
  return;
}

#line 1896  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a1ant.c"
static void btc8821a1ant_run_coexist_mechanism(struct btc_coexist *btcoexist)
{
  #line 1898 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 1899 
  struct btc_bt_link_info *bt_link_info = & btcoexist->bt_link_info;
  #line 1900 
  bool wifi_connected = (_Bool)0;
  #line 1900 
  bool bt_hs_on = (_Bool)0;
  #line 1901 
  bool increase_scan_dev_num = (_Bool)0;
  #line 1902 
  bool bt_ctrl_agg_buf_size = (_Bool)0;
  #line 1903 
  u8 agg_buf_size = (unsigned char)5U;
  #line 1904 
  u8 wifi_rssi_state = (unsigned char)0U;
  #line 1905 
  u32 wifi_link_status = 0U;
  #line 1906 
  u32 num_of_wifi_link = 0U;
  #line 1907 
  bool wifi_under_5g = (_Bool)0;
  #line 1909 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], RunCoexistMechanism()===>\n");
  #line 1912 
  if ((int)btcoexist->manual_control != 0) {
    #line 1913 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], RunCoexistMechanism(), return for Manual CTRL <===\n");
    #line 1915 
    return;
  }
  #line 1918 
  if ((int)btcoexist->stop_coex_dm != 0) {
    #line 1919 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], RunCoexistMechanism(), return for Stop Coex DM <===\n");
    #line 1921 
    return;
  }
  #line 1924 
  if ((int)coex_sta_2->under_ips != 0) {
    #line 1925 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], wifi is under IPS !!!\n");
    #line 1927 
    return;
  }
  #line 1930 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)13,(void *)(& wifi_under_5g));
  #line 1931 
  if ((int)wifi_under_5g != 0) {
    #line 1932 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], RunCoexistMechanism(), return for 5G <===\n");
    #line 1934 
    btc8821a1ant_coex_under_5g(btcoexist);
    #line 1935 
    return;
  }
  #line 1938 
  if ((unsigned int)coex_dm_2->bt_status + 253U <= 2U) 
                                                       #line 1941 
                                                       increase_scan_dev_num = (_Bool)1;
  #line 1943 
  (*(btcoexist->btc_set))((void *)btcoexist,(unsigned char)6,(void *)(& increase_scan_dev_num));
  #line 1946 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)2,(void *)(& wifi_connected));
  #line 1949 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)27,(void *)(& wifi_link_status));
  #line 1951 
  num_of_wifi_link = wifi_link_status >> 16;
  #line 1952 
  if (num_of_wifi_link > 1U || (wifi_link_status & 8U) != 0U) {
    #line 1954 
    btc8821a1ant_limited_tx(btcoexist,(_Bool)0,(unsigned char)0,(unsigned char)0,(unsigned char)0,(unsigned char)0);
    #line 1955 
    btc8821a1ant_limited_rx(btcoexist,(_Bool)0,(_Bool)0,(_Bool)((bool)((int)bt_ctrl_agg_buf_size) != 0),(unsigned char)((int)agg_buf_size));
    #line 1957 
    btc8821a1ant_action_wifi_multi_port(btcoexist);
    #line 1958 
    return;
  }
  #line 1961 
  if (! bt_link_info->sco_exist && ! bt_link_info->hid_exist) 
                                                              #line 1962 
                                                              btc8821a1ant_limited_tx(btcoexist,(_Bool)0,(unsigned char)0,(unsigned char)0,(unsigned char)0,(unsigned char)0);
  else 
    #line 1964 
    if ((int)wifi_connected != 0) {
      #line 1965 
      wifi_rssi_state = btc8821a1ant_wifi_rssi_state(btcoexist,(unsigned char)1,(unsigned char)2,(unsigned char)30,(unsigned char)0);
      #line 1968 
      btc8821a1ant_limited_tx(btcoexist,(_Bool)0,(unsigned char)1,(unsigned char)1,(unsigned char)0,(unsigned char)1);
    }
    else 
         #line 1972 
         btc8821a1ant_limited_tx(btcoexist,(_Bool)0,(unsigned char)0,(unsigned char)0,(unsigned char)0,(unsigned char)0);
  #line 1977 
  if ((int)bt_link_info->sco_exist != 0) {
    #line 1978 
    bt_ctrl_agg_buf_size = (_Bool)1;
    #line 1979 
    agg_buf_size = (unsigned char)3U;
  }
  else 
    #line 1980 
    if ((int)bt_link_info->hid_exist != 0) {
      #line 1981 
      bt_ctrl_agg_buf_size = (_Bool)1;
      #line 1982 
      agg_buf_size = (unsigned char)5U;
    }
    else 
      #line 1983 
      if ((int)bt_link_info->a2dp_exist != 0 || (int)bt_link_info->pan_exist != 0) {
        #line 1984 
        bt_ctrl_agg_buf_size = (_Bool)1;
        #line 1985 
        agg_buf_size = (unsigned char)8U;
      }
  #line 1987 
  btc8821a1ant_limited_rx(btcoexist,(_Bool)0,(_Bool)0,(_Bool)((bool)((int)bt_ctrl_agg_buf_size) != 0),(unsigned char)((int)agg_buf_size));
  #line 1990 
  btc8821a1ant_run_sw_coex_mech(btcoexist);
  #line 1992 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)0,(void *)(& bt_hs_on));
  #line 1993 
  if ((int)coex_sta_2->c2h_bt_inquiry_page != 0) {
    #line 1994 
    btc8821a1ant_action_bt_inquiry(btcoexist);
    #line 1995 
    return;
  }
  else 
    #line 1996 
    if ((int)bt_hs_on != 0) {
      #line 1997 
      btc8821a1ant_action_hs(btcoexist);
      #line 1998 
      return;
    }
  #line 2001 
  if (! wifi_connected) {
    #line 2002 
    bool scan = (_Bool)0;
    #line 2002 
    bool link = (_Bool)0;
    #line 2002 
    bool roam = (_Bool)0;
    #line 2004 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], wifi is non connected-idle !!!\n");
    #line 2007 
    (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)5,(void *)(& scan));
    #line 2008 
    (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)6,(void *)(& link));
    #line 2009 
    (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)11,(void *)(& roam));
    #line 2011 
    if (((int)scan != 0 || (int)link != 0) || (int)roam != 0) 
      #line 2012 
      if ((int)scan != 0) 
                          #line 2013 
                          btc8821a1ant_act_wifi_not_conn_scan(btcoexist); else 
                                                                    #line 2015 
                                                                    btc8821a1ant_action_wifi_not_connected_asso_auth(btcoexist);
    else 
         #line 2018 
         btc8821a1ant_action_wifi_not_connected(btcoexist);
  }
  else 
       #line 2022 
       btc8821a1ant_action_wifi_connected(btcoexist);
  #line 2023 
  return;
}

#line 2026  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a1ant.c"
static void btc8821a1ant_init_coex_dm(struct btc_coexist *btcoexist)
{
  #line 2031 
  btc8821a1ant_sw_mechanism(btcoexist,(_Bool)0);
  #line 2033 
  btc8821a1ant_coex_table_with_type(btcoexist,(_Bool)1,(unsigned char)0);
  #line 2034 
  return;
}

#line 2036  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a1ant.c"
static void btc8821a1ant_init_hw_config(struct btc_coexist *btcoexist, bool back_up, bool wifi_only)
{
  #line 2039 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 2040 
  u8 u1_tmp = (unsigned char)0U;
  #line 2041 
  bool wifi_under_5g = (_Bool)0;
  #line 2043 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], 1Ant Init HW Config!!\n");
  #line 2046 
  if ((int)wifi_only != 0) 
                           #line 2047 
                           return;
  #line 2049 
  if ((int)back_up != 0) {
    #line 2050 
    coex_dm_2->backup_arfr_cnt1 = (*(btcoexist->btc_read_4byte))((void *)btcoexist,1072U);
    #line 2052 
    coex_dm_2->backup_arfr_cnt2 = (*(btcoexist->btc_read_4byte))((void *)btcoexist,1076U);
    #line 2054 
    coex_dm_2->backup_retry_limit = (*(btcoexist->btc_read_2byte))((void *)btcoexist,1066U);
    #line 2056 
    coex_dm_2->backup_ampdu_max_time = (*(btcoexist->btc_read_1byte))((void *)btcoexist,1110U);
  }
  #line 2061 
  u1_tmp = (*(btcoexist->btc_read_1byte))((void *)btcoexist,1936U);
  #line 2062 
  u1_tmp = (unsigned char)((unsigned int)u1_tmp & 192U);
  #line 2063 
  u1_tmp = (unsigned char)((unsigned int)u1_tmp | 5U);
  #line 2064 
  (*(btcoexist->btc_write_1byte))((void *)btcoexist,1936U,(unsigned int)u1_tmp);
  #line 2066 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)13,(void *)(& wifi_under_5g));
  #line 2069 
  if ((int)wifi_under_5g != 0) 
                               #line 2070 
                               btc8821a1ant_set_ant_path(btcoexist,(unsigned char)1,(_Bool)1,(_Bool)0); else 
                                                                    #line 2073 
                                                                    btc8821a1ant_set_ant_path(btcoexist,(unsigned char)2,(_Bool)1,(_Bool)0);
  #line 2076 
  btc8821a1ant_coex_table_with_type(btcoexist,(_Bool)1,(unsigned char)0);
  #line 2081 
  (*(btcoexist->btc_write_1byte))((void *)btcoexist,1902U,12U);
  #line 2082 
  (*(btcoexist->btc_write_1byte))((void *)btcoexist,1912U,3U);
  #line 2083 
  (*(btcoexist->btc_write_1byte_bitmask))((void *)btcoexist,64U,32U,(unsigned char)1);
  #line 2084 
  return;
}

#line 2089  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a1ant.c"
void ex_btc8821a1ant_init_hwconfig(struct btc_coexist *btcoexist, bool wifionly)
{
  #line 2091 
  btc8821a1ant_init_hw_config(btcoexist,(_Bool)1,(_Bool)((bool)((int)wifionly) != 0));
  #line 2092 
  btcoexist->auto_report_1ant = (_Bool)1;
  #line 2093 
  return;
}

#line 2095  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a1ant.c"
void ex_btc8821a1ant_init_coex_dm(struct btc_coexist *btcoexist)
{
  #line 2097 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 2099 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Coex Mechanism Init!!\n");
  #line 2102 
  btcoexist->stop_coex_dm = (_Bool)0;
  #line 2104 
  btc8821a1ant_init_coex_dm(btcoexist);
  #line 2106 
  btc8821a1ant_query_bt_info(btcoexist);
  #line 2107 
  return;
}

#line 2109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a1ant.c"
void ex_btc8821a1ant_display_coex_info(struct btc_coexist *btcoexist, struct seq_file *m)
{
  #line 2191 
  char *tmp_2;
  #line 2115 
  u8 u1_tmp[4U];
  #line 2115 
  u8 i;
  #line 2115 
  u8 bt_info_ext;
  #line 2116 
  u16 u2_tmp[4U];
  #line 2117 
  u32 u4_tmp[4U];
  #line 2121 
  u32 wifi_bw;
  #line 2121 
  u32 wifi_traffic_dir;
  #line 2122 
  u8 wifi_dot11_chnl;
  #line 2122 
  u8 wifi_hs_chnl;
  #line 2142 
  char *tmp;
  #line 2193 
  char *tmp_1;
  #line 2190 
  char *tmp_3;
  #line 2189 
  char *tmp_4;
  #line 2197 
  char *tmp_8;
  #line 2217 
  char *tmp_9;
  #line 2231 
  char *tmp_10;
  #line 2230 
  char *tmp_11;
  #line 2112 
  struct btc_board_info *board_info = & btcoexist->board_info;
  #line 2113 
  struct btc_stack_info *stack_info = & btcoexist->stack_info;
  #line 2114 
  struct btc_bt_link_info *bt_link_info = & btcoexist->bt_link_info;
  #line 2115 
  u8 ps_tdma_case = (unsigned char)0U;
  #line 2118 
  bool roam = (_Bool)0;
  #line 2118 
  bool scan = (_Bool)0;
  #line 2118 
  bool link = (_Bool)0;
  #line 2118 
  bool wifi_under_5g = (_Bool)0;
  #line 2119 
  bool bt_hs_on = (_Bool)0;
  #line 2119 
  bool wifi_busy = (_Bool)0;
  #line 2120 
  long wifi_rssi = 0L;
  #line 2120 
  long bt_hs_rssi = 0L;
  #line 2123 
  u32 fw_ver = 0U;
  #line 2123 
  u32 bt_patch_ver = 0U;
  #line 2125 
  seq_puts(m,(char *)"\n ============[BT Coexist info]============");
  #line 2127 
  if ((int)btcoexist->manual_control != 0) {
    #line 2128 
    seq_puts(m,(char *)"\n ============[Under Manual Control]============");
    #line 2129 
    seq_puts(m,(char *)"\n ==========================================");
  }
  #line 2131 
  if ((int)btcoexist->stop_coex_dm != 0) {
    #line 2132 
    seq_puts(m,(char *)"\n ============[Coex is STOPPED]============");
    #line 2133 
    seq_puts(m,(char *)"\n ==========================================");
  }
  #line 2136 
  seq_printf(m,(char *)"\n %-35s = %d/ %d/ %d",(char *)"Ant PG Num/ Ant Mech/ Ant Pos:",(int)board_info->pg_ant_num,(int)board_info->btdm_ant_num,(int)board_info->btdm_ant_pos);
  #line 2142 
  ;
  #line 2142 
  if ((int)stack_info->profile_notified != 0) 
                                              #line 2142 
                                              tmp = (char *)"Yes"; else 
                                                                    #line 2142 
                                                                    tmp = (char *)"No";
  #line 2142 
  ;
  #line 2142 
  seq_printf(m,(char *)"\n %-35s = %s / %d",(char *)"BT stack/ hci ext ver",tmp,(int)stack_info->hci_version);
  #line 2146 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)28,(void *)(& bt_patch_ver));
  #line 2148 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)26,(void *)(& fw_ver));
  #line 2149 
  seq_printf(m,(char *)"\n %-35s = %d_%x/ 0x%x/ 0x%x(%d)",(char *)"CoexVer/ FwVer/ PatchVer",glcoex_ver_date_8821a_1ant,glcoex_ver_8821a_1ant,fw_ver,bt_patch_ver,bt_patch_ver);
  #line 2156 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)0,(void *)(& bt_hs_on));
  #line 2158 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)37,(void *)(& wifi_dot11_chnl));
  #line 2160 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)39,(void *)(& wifi_hs_chnl));
  #line 2162 
  seq_printf(m,(char *)"\n %-35s = %d / %d(%d)",(char *)"Dot11 channel / HsChnl(HsMode)",(int)wifi_dot11_chnl,(int)wifi_hs_chnl,(int)bt_hs_on);
  #line 2166 
  seq_printf(m,(char *)"\n %-35s = %3ph ",(char *)"H2C Wifi inform bt chnl Info",(u8 *)(& coex_dm_2->wifi_chnl_info));
  #line 2170 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)22,(void *)(& wifi_rssi));
  #line 2171 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)23,(void *)(& bt_hs_rssi));
  #line 2172 
  seq_printf(m,(char *)"\n %-35s = %d/ %d",(char *)"Wifi rssi/ HS rssi",(int)wifi_rssi,(int)bt_hs_rssi);
  #line 2175 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)5,(void *)(& scan));
  #line 2176 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)6,(void *)(& link));
  #line 2177 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)11,(void *)(& roam));
  #line 2178 
  seq_printf(m,(char *)"\n %-35s = %d/ %d/ %d ",(char *)"Wifi link/ roam/ scan",(int)link,(int)roam,(int)scan);
  #line 2181 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)13,(void *)(& wifi_under_5g));
  #line 2183 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)24,(void *)(& wifi_bw));
  #line 2185 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)4,(void *)(& wifi_busy));
  #line 2187 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)25,(void *)(& wifi_traffic_dir));
  #line 2193 
  if (! wifi_busy) 
                   #line 2193 
                   tmp_1 = (char *)"idle";
  else {
    #line 2193 
    char *tmp_0;
    #line 2193 
    if (wifi_traffic_dir == 0U) 
                                #line 2193 
                                tmp_0 = (char *)"uplink"; else 
                                                               #line 2193 
                                                               tmp_0 = (char *)"downlink";
    #line 2193 
    tmp_1 = tmp_0;
  }
  #line 2190 
  if (wifi_bw != 0U) {
    #line 2191 
    if (wifi_bw == 2U) 
                       #line 2191 
                       tmp_2 = (char *)"HT40"; else 
                                                    #line 2191 
                                                    tmp_2 = (char *)"HT20";
    #line 2190 
    tmp_3 = tmp_2;
  }
  else 
       #line 2190 
       tmp_3 = (char *)"Legacy";
  #line 2189 
  if ((int)wifi_under_5g != 0) 
                               #line 2189 
                               tmp_4 = (char *)"5G"; else 
                                                          #line 2189 
                                                          tmp_4 = (char *)"2.4G";
  #line 2189 
  ;
  #line 2189 
  seq_printf(m,(char *)"\n %-35s = %s / %s/ %s ",(char *)"Wifi status",tmp_4,tmp_3,tmp_1);
  #line 2196 
  ;
  #line 2196 
  ;
  #line 2197 
  if (coex_sta_2->bt_disabled) 
                               #line 2197 
                               tmp_8 = (char *)"disabled";
  else {
    #line 2198 
    char *tmp_7;
    #line 2198 
    if (coex_sta_2->c2h_bt_inquiry_page) 
                                         #line 2198 
                                         tmp_7 = (char *)"inquiry/page scan";
    else {
      #line 2200 
      char *tmp_5;
      #line 2199 
      char *tmp_6;
      #line 2199 
      if ((unsigned int)coex_dm_2->bt_status != 0U) {
        #line 2200 
        if ((unsigned int)coex_dm_2->bt_status == 1U) 
                                                      #line 2200 
                                                      tmp_5 = (char *)"connected-idle"; else 
                                                                    #line 2200 
                                                                    tmp_5 = (char *)"busy";
        #line 2199 
        tmp_6 = tmp_5;
      }
      else 
           #line 2199 
           tmp_6 = (char *)"non-connected idle";
      #line 2198 
      tmp_7 = tmp_6;
    }
    #line 2197 
    tmp_8 = tmp_7;
  }
  #line 2196 
  ;
  #line 2196 
  seq_printf(m,(char *)"\n %-35s = [%s/ %d/ %d] ",(char *)"BT [status/ rssi/ retryCnt]",tmp_8,(int)coex_sta_2->bt_rssi,(int)coex_sta_2->bt_retry_cnt);
  #line 2208 
  seq_printf(m,(char *)"\n %-35s = %d / %d / %d / %d",(char *)"SCO/HID/PAN/A2DP",(int)bt_link_info->sco_exist,(int)bt_link_info->hid_exist,(int)bt_link_info->pan_exist,(int)bt_link_info->a2dp_exist);
  #line 2213 
  (*(btcoexist->btc_disp_dbg_msg))((void *)btcoexist,(unsigned char)1,m);
  #line 2215 
  bt_info_ext = coex_sta_2->bt_info_ext;
  #line 2217 
  if (((int)bt_info_ext & 1) != 0) 
                                   #line 2217 
                                   tmp_9 = (char *)"Basic rate"; else 
                                                                   #line 2217 
                                                                   tmp_9 = (char *)"EDR rate";
  #line 2216 
  ;
  #line 2216 
  seq_printf(m,(char *)"\n %-35s = %s",(char *)"BT Info A2DP rate",tmp_9);
  #line 2221 
  i = (unsigned char)0U;
  #line 2221 
  while ((unsigned int)i <= 2U) {
    #line 2222 
    if (coex_sta_2->bt_info_c2h_cnt[(int)i] != 0U) 
                                                   #line 2223 
                                                   seq_printf(m,(char *)"\n %-35s = %7ph(%d)",glbt_info_src_8821a_1ant[(int)i],(u8 *)(& coex_sta_2->bt_info_c2h[(int)i]),coex_sta_2->bt_info_c2h_cnt[(int)i]);
    #line 2221 
    i = (u8)((int)i + 1);
  }
  #line 2229 
  ;
  #line 2229 
  ;
  #line 2231 
  if ((int)coex_sta_2->under_lps != 0) 
                                       #line 2231 
                                       tmp_10 = (char *)"LPS ON"; else 
                                                                    #line 2231 
                                                                    tmp_10 = (char *)"LPS OFF";
  #line 2230 
  if ((int)coex_sta_2->under_ips != 0) 
                                       #line 2230 
                                       tmp_11 = (char *)"IPS ON"; else 
                                                                    #line 2230 
                                                                    tmp_11 = (char *)"IPS OFF";
  #line 2229 
  ;
  #line 2229 
  seq_printf(m,(char *)"\n %-35s = %s/%s, (0x%x/0x%x)",(char *)"PS state, IPS/LPS, (lps/rpwm)",tmp_11,tmp_10,(int)btcoexist->bt_info.lps_val,(int)btcoexist->bt_info.rpwm_val);
  #line 2235 
  (*(btcoexist->btc_disp_dbg_msg))((void *)btcoexist,(unsigned char)3,m);
  #line 2237 
  if (! btcoexist->manual_control) {
    #line 2247 
    char *tmp_12;
    #line 2246 
    char *tmp_13;
    #line 2239 
    seq_printf(m,(char *)"\n %-35s",(char *)"============[Sw mechanism]============");
    #line 2242 
    seq_printf(m,(char *)"\n %-35s = %d",(char *)"SM[LowPenaltyRA]",(int)coex_dm_2->cur_low_penalty_ra);
    #line 2245 
    ;
    #line 2247 
    if ((int)btcoexist->bt_info.bt_ctrl_buf_size != 0) 
                                                       #line 2247 
                                                       tmp_12 = (char *)"Yes"; else 
                                                                    #line 2247 
                                                                    tmp_12 = (char *)"No";
    #line 2246 
    if ((int)btcoexist->bt_info.reject_agg_pkt != 0) 
                                                     #line 2246 
                                                     tmp_13 = (char *)"Yes"; else 
                                                                    #line 2246 
                                                                    tmp_13 = (char *)"No";
    #line 2245 
    ;
    #line 2245 
    seq_printf(m,(char *)"\n %-35s = %s/ %s/ %d ",(char *)"DelBA/ BtCtrlAgg/ AggSize",tmp_13,tmp_12,(int)btcoexist->bt_info.agg_buf_size);
    #line 2250 
    seq_printf(m,(char *)"\n %-35s = 0x%x ",(char *)"Rate Mask",btcoexist->bt_info.ra_mask);
    #line 2254 
    seq_printf(m,(char *)"\n %-35s",(char *)"============[Fw mechanism]============");
    #line 2257 
    ps_tdma_case = coex_dm_2->cur_ps_tdma;
    #line 2258 
    seq_printf(m,(char *)"\n %-35s = %5ph case-%d (auto:%d)",(char *)"PS TDMA",(u8 *)(& coex_dm_2->ps_tdma_para),(int)ps_tdma_case,(int)coex_dm_2->auto_tdma_adjust);
    #line 2264 
    seq_printf(m,(char *)"\n %-35s = 0x%x ",(char *)"Latest error condition(should be 0)",(int)coex_dm_2->error_condition);
    #line 2268 
    seq_printf(m,(char *)"\n %-35s = %d ",(char *)"IgnWlanAct",(int)coex_dm_2->cur_ignore_wlan_act);
  }
  #line 2273 
  seq_printf(m,(char *)"\n %-35s",(char *)"============[Hw setting]============");
  #line 2275 
  seq_printf(m,(char *)"\n %-35s = 0x%x/0x%x/0x%x/0x%x",(char *)"backup ARFR1/ARFR2/RL/AMaxTime",coex_dm_2->backup_arfr_cnt1,coex_dm_2->backup_arfr_cnt2,(int)coex_dm_2->backup_retry_limit,(int)coex_dm_2->backup_ampdu_max_time);
  #line 2282 
  u4_tmp[0] = (*(btcoexist->btc_read_4byte))((void *)btcoexist,1072U);
  #line 2283 
  u4_tmp[1] = (*(btcoexist->btc_read_4byte))((void *)btcoexist,1076U);
  #line 2284 
  u2_tmp[0] = (*(btcoexist->btc_read_2byte))((void *)btcoexist,1066U);
  #line 2285 
  u1_tmp[0] = (*(btcoexist->btc_read_1byte))((void *)btcoexist,1110U);
  #line 2286 
  seq_printf(m,(char *)"\n %-35s = 0x%x/0x%x/0x%x/0x%x",(char *)"0x430/0x434/0x42a/0x456",u4_tmp[0],u4_tmp[1],(int)u2_tmp[0],(int)u1_tmp[0]);
  #line 2290 
  u1_tmp[0] = (*(btcoexist->btc_read_1byte))((void *)btcoexist,1912U);
  #line 2291 
  u4_tmp[0] = (*(btcoexist->btc_read_4byte))((void *)btcoexist,3160U);
  #line 2292 
  seq_printf(m,(char *)"\n %-35s = 0x%x/ 0x%x",(char *)"0x778/ 0xc58[29:25]",(int)u1_tmp[0],(u4_tmp[0] >> 25) & 31U);
  #line 2295 
  u1_tmp[0] = (*(btcoexist->btc_read_1byte))((void *)btcoexist,2267U);
  #line 2296 
  seq_printf(m,(char *)"\n %-35s = 0x%x",(char *)"0x8db[6:5]",((int)u1_tmp[0] >> 5) & 3);
  #line 2299 
  u1_tmp[0] = (*(btcoexist->btc_read_1byte))((void *)btcoexist,2421U);
  #line 2300 
  u4_tmp[0] = (*(btcoexist->btc_read_4byte))((void *)btcoexist,3252U);
  #line 2301 
  seq_printf(m,(char *)"\n %-35s = 0x%x/ 0x%x/ 0x%x",(char *)"0xcb4[29:28]/0xcb4[7:0]/0x974[9:8]",(u4_tmp[0] >> 28) & 3U,u4_tmp[0] & 255U,(int)u1_tmp[0] & 3);
  #line 2307 
  u1_tmp[0] = (*(btcoexist->btc_read_1byte))((void *)btcoexist,64U);
  #line 2308 
  u4_tmp[0] = (*(btcoexist->btc_read_4byte))((void *)btcoexist,76U);
  #line 2309 
  u1_tmp[1] = (*(btcoexist->btc_read_1byte))((void *)btcoexist,100U);
  #line 2310 
  seq_printf(m,(char *)"\n %-35s = 0x%x/ 0x%x/ 0x%x",(char *)"0x40/0x4c[24:23]/0x64[0]",(int)u1_tmp[0],(u4_tmp[0] >> 23) & 3U,(int)u1_tmp[1] & 1);
  #line 2315 
  u4_tmp[0] = (*(btcoexist->btc_read_4byte))((void *)btcoexist,1360U);
  #line 2316 
  u1_tmp[0] = (*(btcoexist->btc_read_1byte))((void *)btcoexist,1314U);
  #line 2317 
  seq_printf(m,(char *)"\n %-35s = 0x%x/ 0x%x",(char *)"0x550(bcn ctrl)/0x522",u4_tmp[0],(int)u1_tmp[0]);
  #line 2320 
  u4_tmp[0] = (*(btcoexist->btc_read_4byte))((void *)btcoexist,3152U);
  #line 2321 
  seq_printf(m,(char *)"\n %-35s = 0x%x",(char *)"0xc50(dig)",u4_tmp[0] & 255U);
  #line 2324 
  u4_tmp[0] = (*(btcoexist->btc_read_4byte))((void *)btcoexist,3912U);
  #line 2325 
  u1_tmp[0] = (*(btcoexist->btc_read_1byte))((void *)btcoexist,2653U);
  #line 2326 
  u1_tmp[1] = (*(btcoexist->btc_read_1byte))((void *)btcoexist,2652U);
  #line 2327 
  seq_printf(m,(char *)"\n %-35s = 0x%x/ 0x%x",(char *)"OFDM-FA/ CCK-FA",u4_tmp[0],((int)u1_tmp[0] << 8) + (int)u1_tmp[1]);
  #line 2330 
  u4_tmp[0] = (*(btcoexist->btc_read_4byte))((void *)btcoexist,1728U);
  #line 2331 
  u4_tmp[1] = (*(btcoexist->btc_read_4byte))((void *)btcoexist,1732U);
  #line 2332 
  u4_tmp[2] = (*(btcoexist->btc_read_4byte))((void *)btcoexist,1736U);
  #line 2333 
  u1_tmp[0] = (*(btcoexist->btc_read_1byte))((void *)btcoexist,1740U);
  #line 2334 
  seq_printf(m,(char *)"\n %-35s = 0x%x/ 0x%x/ 0x%x/ 0x%x",(char *)"0x6c0/0x6c4/0x6c8/0x6cc(coexTable)",u4_tmp[0],u4_tmp[1],u4_tmp[2],(int)u1_tmp[0]);
  #line 2338 
  seq_printf(m,(char *)"\n %-35s = %d/ %d",(char *)"0x770(high-pri rx/tx)",coex_sta_2->high_priority_rx,coex_sta_2->high_priority_tx);
  #line 2340 
  seq_printf(m,(char *)"\n %-35s = %d/ %d",(char *)"0x774(low-pri rx/tx)",coex_sta_2->low_priority_rx,coex_sta_2->low_priority_tx);
  #line 2342 
  if ((int)btcoexist->auto_report_1ant != 0) 
                                             #line 2343 
                                             btc8821a1ant_monitor_bt_ctr(btcoexist);
  #line 2344 
  (*(btcoexist->btc_disp_dbg_msg))((void *)btcoexist,(unsigned char)0,m);
  #line 2345 
  return;
}

#line 2347  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a1ant.c"
void ex_btc8821a1ant_ips_notify(struct btc_coexist *btcoexist, u8 type)
{
  #line 2349 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 2350 
  bool wifi_under_5g = (_Bool)0;
  #line 2352 
  if ((int)btcoexist->manual_control != 0 || (int)btcoexist->stop_coex_dm != 0) 
    #line 2353 
    return;
  #line 2354 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)13,(void *)(& wifi_under_5g));
  #line 2355 
  if ((int)wifi_under_5g != 0) {
    #line 2356 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], RunCoexistMechanism(), return for 5G <===\n");
    #line 2358 
    btc8821a1ant_coex_under_5g(btcoexist);
    #line 2359 
    return;
  }
  #line 2362 
  if ((unsigned int)type == 1U) {
    #line 2363 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], IPS ENTER notify\n");
    #line 2365 
    coex_sta_2->under_ips = (_Bool)1;
    #line 2366 
    btc8821a1ant_set_ant_path(btcoexist,(unsigned char)1,(_Bool)0,(_Bool)1);
    #line 2369 
    btc8821a1ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)0,(unsigned char)0);
    #line 2370 
    btc8821a1ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)0);
  }
  else 
    #line 2372 
    if ((unsigned int)type == 0U) {
      #line 2373 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], IPS LEAVE notify\n");
      #line 2375 
      coex_sta_2->under_ips = (_Bool)0;
      #line 2377 
      btc8821a1ant_init_hw_config(btcoexist,(_Bool)0,(_Bool)0);
      #line 2378 
      btc8821a1ant_init_coex_dm(btcoexist);
      #line 2379 
      btc8821a1ant_query_bt_info(btcoexist);
    }
  #line 2381 
  return;
}

#line 2383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a1ant.c"
void ex_btc8821a1ant_lps_notify(struct btc_coexist *btcoexist, u8 type)
{
  #line 2385 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 2387 
  if ((int)btcoexist->manual_control != 0 || (int)btcoexist->stop_coex_dm != 0) 
    #line 2388 
    return;
  #line 2390 
  if ((unsigned int)type == 1U) {
    #line 2391 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], LPS ENABLE notify\n");
    #line 2393 
    coex_sta_2->under_lps = (_Bool)1;
  }
  else 
    #line 2394 
    if ((unsigned int)type == 0U) {
      #line 2395 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], LPS DISABLE notify\n");
      #line 2397 
      coex_sta_2->under_lps = (_Bool)0;
    }
  #line 2399 
  return;
}

#line 2401  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a1ant.c"
void ex_btc8821a1ant_scan_notify(struct btc_coexist *btcoexist, u8 type)
{
  #line 2403 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 2404 
  bool wifi_connected = (_Bool)0;
  #line 2404 
  bool bt_hs_on = (_Bool)0;
  #line 2405 
  bool bt_ctrl_agg_buf_size = (_Bool)0;
  #line 2406 
  bool wifi_under_5g = (_Bool)0;
  #line 2407 
  u32 wifi_link_status = 0U;
  #line 2408 
  u32 num_of_wifi_link = 0U;
  #line 2409 
  u8 agg_buf_size = (unsigned char)5U;
  #line 2411 
  if ((int)btcoexist->manual_control != 0 || (int)btcoexist->stop_coex_dm != 0) 
    #line 2412 
    return;
  #line 2413 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)13,(void *)(& wifi_under_5g));
  #line 2414 
  if ((int)wifi_under_5g != 0) {
    #line 2415 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], RunCoexistMechanism(), return for 5G <===\n");
    #line 2417 
    btc8821a1ant_coex_under_5g(btcoexist);
    #line 2418 
    return;
  }
  #line 2421 
  if ((unsigned int)type == 1U) {
    #line 2422 
    coex_sta_2->wifi_is_high_pri_task = (_Bool)1;
    #line 2423 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], SCAN START notify\n");
    #line 2427 
    btc8821a1ant_ps_tdma(btcoexist,(_Bool)1,(_Bool)0,(unsigned char)8);
  }
  else {
    #line 2429 
    coex_sta_2->wifi_is_high_pri_task = (_Bool)0;
    #line 2430 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], SCAN FINISH notify\n");
  }
  #line 2434 
  if ((int)coex_sta_2->bt_disabled != 0) 
                                         #line 2435 
                                         return;
  #line 2437 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)0,(void *)(& bt_hs_on));
  #line 2439 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)2,(void *)(& wifi_connected));
  #line 2442 
  btc8821a1ant_query_bt_info(btcoexist);
  #line 2444 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)27,(void *)(& wifi_link_status));
  #line 2446 
  num_of_wifi_link = wifi_link_status >> 16;
  #line 2447 
  if (num_of_wifi_link > 1U) {
    #line 2448 
    btc8821a1ant_limited_tx(btcoexist,(_Bool)0,(unsigned char)0,(unsigned char)0,(unsigned char)0,(unsigned char)0);
    #line 2449 
    btc8821a1ant_limited_rx(btcoexist,(_Bool)0,(_Bool)0,(_Bool)((bool)((int)bt_ctrl_agg_buf_size) != 0),(unsigned char)((int)agg_buf_size));
    #line 2451 
    btc8821a1ant_action_wifi_multi_port(btcoexist);
    #line 2452 
    return;
  }
  #line 2455 
  if ((int)coex_sta_2->c2h_bt_inquiry_page != 0) {
    #line 2456 
    btc8821a1ant_action_bt_inquiry(btcoexist);
    #line 2457 
    return;
  }
  else 
    #line 2458 
    if ((int)bt_hs_on != 0) {
      #line 2459 
      btc8821a1ant_action_hs(btcoexist);
      #line 2460 
      return;
    }
  #line 2463 
  if ((unsigned int)type == 1U) {
    #line 2464 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], SCAN START notify\n");
    #line 2466 
    if (! wifi_connected) 
                          #line 2468 
                          btc8821a1ant_act_wifi_not_conn_scan(btcoexist); else 
                                                                    #line 2471 
                                                                    btc8821a1ant_action_wifi_connected_scan(btcoexist);
  }
  else 
    #line 2473 
    if ((unsigned int)type == 0U) {
      #line 2474 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], SCAN FINISH notify\n");
      #line 2476 
      if (! wifi_connected) 
                            #line 2478 
                            btc8821a1ant_action_wifi_not_connected(btcoexist); else 
                                                                    #line 2480 
                                                                    btc8821a1ant_action_wifi_connected(btcoexist);
    }
  #line 2482 
  return;
}

#line 2485  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a1ant.c"
void ex_btc8821a1ant_connect_notify(struct btc_coexist *btcoexist, u8 type)
{
  #line 2487 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 2488 
  bool wifi_connected = (_Bool)0;
  #line 2488 
  bool bt_hs_on = (_Bool)0;
  #line 2489 
  u32 wifi_link_status = 0U;
  #line 2490 
  u32 num_of_wifi_link = 0U;
  #line 2491 
  bool bt_ctrl_agg_buf_size = (_Bool)0;
  #line 2492 
  bool wifi_under_5g = (_Bool)0;
  #line 2493 
  u8 agg_buf_size = (unsigned char)5U;
  #line 2495 
  if (((int)btcoexist->manual_control != 0 || (int)btcoexist->stop_coex_dm != 0) || (int)coex_sta_2->bt_disabled != 0) 
    #line 2497 
    return;
  #line 2498 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)13,(void *)(& wifi_under_5g));
  #line 2499 
  if ((int)wifi_under_5g != 0) {
    #line 2500 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], RunCoexistMechanism(), return for 5G <===\n");
    #line 2502 
    btc8821a1ant_coex_under_5g(btcoexist);
    #line 2503 
    return;
  }
  #line 2506 
  if ((unsigned int)type == 1U) {
    #line 2507 
    coex_sta_2->wifi_is_high_pri_task = (_Bool)1;
    #line 2508 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], CONNECT START notify\n");
    #line 2510 
    coex_dm_2->arp_cnt = 0U;
  }
  else {
    #line 2512 
    coex_sta_2->wifi_is_high_pri_task = (_Bool)0;
    #line 2513 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], CONNECT FINISH notify\n");
    #line 2515 
    coex_dm_2->arp_cnt = 0U;
  }
  #line 2518 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)27,(void *)(& wifi_link_status));
  #line 2520 
  num_of_wifi_link = wifi_link_status >> 16;
  #line 2521 
  if (num_of_wifi_link > 1U) {
    #line 2522 
    btc8821a1ant_limited_tx(btcoexist,(_Bool)0,(unsigned char)0,(unsigned char)0,(unsigned char)0,(unsigned char)0);
    #line 2523 
    btc8821a1ant_limited_rx(btcoexist,(_Bool)0,(_Bool)0,(_Bool)((bool)((int)bt_ctrl_agg_buf_size) != 0),(unsigned char)((int)agg_buf_size));
    #line 2525 
    btc8821a1ant_action_wifi_multi_port(btcoexist);
    #line 2526 
    return;
  }
  #line 2529 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)0,(void *)(& bt_hs_on));
  #line 2530 
  if ((int)coex_sta_2->c2h_bt_inquiry_page != 0) {
    #line 2531 
    btc8821a1ant_action_bt_inquiry(btcoexist);
    #line 2532 
    return;
  }
  else 
    #line 2533 
    if ((int)bt_hs_on != 0) {
      #line 2534 
      btc8821a1ant_action_hs(btcoexist);
      #line 2535 
      return;
    }
  #line 2538 
  if ((unsigned int)type == 1U) {
    #line 2539 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], CONNECT START notify\n");
    #line 2541 
    btc8821a1ant_act_wifi_not_conn_scan(btcoexist);
  }
  else 
    #line 2542 
    if ((unsigned int)type == 0U) {
      #line 2543 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], CONNECT FINISH notify\n");
      #line 2546 
      (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)2,(void *)(& wifi_connected));
      #line 2548 
      if (! wifi_connected) 
                            #line 2550 
                            btc8821a1ant_action_wifi_not_connected(btcoexist); else 
                                                                    #line 2552 
                                                                    btc8821a1ant_action_wifi_connected(btcoexist);
    }
  #line 2554 
  return;
}

#line 2557  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a1ant.c"
void ex_btc8821a1ant_media_status_notify(struct btc_coexist *btcoexist, u8 type)
{
  #line 2562 
  u32 wifi_bw;
  #line 2563 
  u8 wifi_central_chnl;
  #line 2560 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 2561 
  u8 h2c_parameter[3U] = {(unsigned char)0U};
  #line 2564 
  bool wifi_under_5g = (_Bool)0;
  #line 2566 
  if (((int)btcoexist->manual_control != 0 || (int)btcoexist->stop_coex_dm != 0) || (int)coex_sta_2->bt_disabled != 0) 
    #line 2568 
    return;
  #line 2569 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)13,(void *)(& wifi_under_5g));
  #line 2570 
  if ((int)wifi_under_5g != 0) {
    #line 2571 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], RunCoexistMechanism(), return for 5G <===\n");
    #line 2573 
    btc8821a1ant_coex_under_5g(btcoexist);
    #line 2574 
    return;
  }
  #line 2577 
  if ((unsigned int)type == 1U) 
                                #line 2578 
                                _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], MEDIA connect notify\n");
  else {
    #line 2581 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], MEDIA disconnect notify\n");
    #line 2583 
    coex_dm_2->arp_cnt = 0U;
  }
  #line 2587 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)38,(void *)(& wifi_central_chnl));
  #line 2590 
  if ((unsigned int)type == 1U && (unsigned int)wifi_central_chnl <= 14U) {
    #line 2592 
    h2c_parameter[0] = (unsigned char)0U;
    #line 2593 
    h2c_parameter[1] = wifi_central_chnl;
    #line 2594 
    (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)24,(void *)(& wifi_bw));
    #line 2595 
    if (wifi_bw == 2U) 
                       #line 2596 
                       h2c_parameter[2] = (unsigned char)48U; else 
                                                                   #line 2598 
                                                                   h2c_parameter[2] = (unsigned char)32U;
  }
  #line 2601 
  coex_dm_2->wifi_chnl_info[0] = h2c_parameter[0];
  #line 2602 
  coex_dm_2->wifi_chnl_info[1] = h2c_parameter[1];
  #line 2603 
  coex_dm_2->wifi_chnl_info[2] = h2c_parameter[2];
  #line 2605 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], FW write 0x66 = 0x%x\n",(((int)h2c_parameter[0] << 16) | ((int)h2c_parameter[1] << 8)) | (int)h2c_parameter[2]);
  #line 2611 
  (*(btcoexist->btc_fill_h2c))((void *)btcoexist,(unsigned char)102,3U,(u8 *)(& h2c_parameter));
  #line 2612 
  return;
}

#line 2614  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a1ant.c"
void ex_btc8821a1ant_special_packet_notify(struct btc_coexist *btcoexist, u8 type)
{
  #line 2617 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 2618 
  bool bt_hs_on = (_Bool)0;
  #line 2619 
  bool bt_ctrl_agg_buf_size = (_Bool)0;
  #line 2620 
  bool wifi_under_5g = (_Bool)0;
  #line 2621 
  u32 wifi_link_status = 0U;
  #line 2622 
  u32 num_of_wifi_link = 0U;
  #line 2623 
  u8 agg_buf_size = (unsigned char)5U;
  #line 2625 
  if (((int)btcoexist->manual_control != 0 || (int)btcoexist->stop_coex_dm != 0) || (int)coex_sta_2->bt_disabled != 0) 
    #line 2627 
    return;
  #line 2629 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)13,(void *)(& wifi_under_5g));
  #line 2630 
  if ((int)wifi_under_5g != 0) {
    #line 2631 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], RunCoexistMechanism(), return for 5G <===\n");
    #line 2633 
    btc8821a1ant_coex_under_5g(btcoexist);
    #line 2634 
    return;
  }
  #line 2637 
  if (((unsigned int)type == 1U || (unsigned int)type == 3U) || (unsigned int)type == 2U) {
    #line 2639 
    coex_sta_2->wifi_is_high_pri_task = (_Bool)1;
    #line 2641 
    if ((unsigned int)type == 2U) 
                                  #line 2642 
                                  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], specific Packet ARP notify\n"); else 
                                                                    #line 2645 
                                                                    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], specific Packet DHCP or EAPOL notify\n");
  }
  else {
    #line 2649 
    coex_sta_2->wifi_is_high_pri_task = (_Bool)0;
    #line 2650 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], specific Packet [Type = %d] notify\n",(int)type);
  }
  #line 2655 
  coex_sta_2->special_pkt_period_cnt = 0U;
  #line 2657 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)27,(void *)(& wifi_link_status));
  #line 2659 
  num_of_wifi_link = wifi_link_status >> 16;
  #line 2660 
  if (num_of_wifi_link > 1U) {
    #line 2661 
    btc8821a1ant_limited_tx(btcoexist,(_Bool)0,(unsigned char)0,(unsigned char)0,(unsigned char)0,(unsigned char)0);
    #line 2662 
    btc8821a1ant_limited_rx(btcoexist,(_Bool)0,(_Bool)0,(_Bool)((bool)((int)bt_ctrl_agg_buf_size) != 0),(unsigned char)((int)agg_buf_size));
    #line 2664 
    btc8821a1ant_action_wifi_multi_port(btcoexist);
    #line 2665 
    return;
  }
  #line 2668 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)0,(void *)(& bt_hs_on));
  #line 2669 
  if ((int)coex_sta_2->c2h_bt_inquiry_page != 0) {
    #line 2670 
    btc8821a1ant_action_bt_inquiry(btcoexist);
    #line 2671 
    return;
  }
  else 
    #line 2672 
    if ((int)bt_hs_on != 0) {
      #line 2673 
      btc8821a1ant_action_hs(btcoexist);
      #line 2674 
      return;
    }
  #line 2677 
  if (((unsigned int)type == 1U || (unsigned int)type == 3U) || (unsigned int)type == 2U) {
    #line 2679 
    if ((unsigned int)type == 2U) {
      #line 2680 
      (coex_dm_2->arp_cnt) ++;
      #line 2681 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], ARP Packet Count = %d\n",coex_dm_2->arp_cnt);
      #line 2684 
      if (coex_dm_2->arp_cnt > 9U) 
                                   #line 2688 
                                   return;
    }
    #line 2691 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], special Packet(%d) notify\n",(int)type);
    #line 2693 
    btc8821a1ant_act_wifi_conn_sp_pkt(btcoexist);
  }
  #line 2695 
  return;
}

#line 2697  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a1ant.c"
void ex_btc8821a1ant_bt_info_notify(struct btc_coexist *btcoexist, u8 *tmp_buf, u8 length)
{
  #line 2701 
  u8 i;
  #line 2700 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 2702 
  u8 bt_info = (unsigned char)0U;
  #line 2703 
  u8 rsp_source = (unsigned char)0U;
  #line 2704 
  bool wifi_connected = (_Bool)0;
  #line 2705 
  bool bt_busy = (_Bool)0;
  #line 2706 
  bool wifi_under_5g = (_Bool)0;
  #line 2708 
  coex_sta_2->c2h_bt_info_req_sent = (_Bool)0;
  #line 2710 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)13,(void *)(& wifi_under_5g));
  #line 2713 
  rsp_source = (unsigned char)((unsigned int)*tmp_buf & 15U);
  #line 2714 
  if ((unsigned int)rsp_source > 2U) 
                                     #line 2715 
                                     rsp_source = (unsigned char)0U;
  #line 2716 
  (coex_sta_2->bt_info_c2h_cnt[(int)rsp_source]) ++;
  #line 2718 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Bt info[%d], length = %d, hex data = [",(int)rsp_source,(int)length);
  #line 2721 
  i = (unsigned char)0U;
  #line 2721 
  while ((int)i < (int)length) {
    #line 2722 
    coex_sta_2->bt_info_c2h[(int)rsp_source][(int)i] = *(tmp_buf + (unsigned long)i);
    #line 2723 
    if ((unsigned int)i == 1U) 
                               #line 2724 
                               bt_info = *(tmp_buf + (unsigned long)i);
    #line 2725 
    if ((int)i == (int)length + -1) 
                                    #line 2726 
                                    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"0x%02x]\n",(int)*(tmp_buf + (unsigned long)i)); else 
                                                                    #line 2729 
                                                                    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"0x%02x, ",(int)*(tmp_buf + (unsigned long)i));
    #line 2721 
    i = (u8)((int)i + 1);
  }
  #line 2734 
  if ((unsigned int)rsp_source != 0U) {
    #line 2736 
    coex_sta_2->bt_retry_cnt = (unsigned char)((unsigned int)coex_sta_2->bt_info_c2h[(int)rsp_source][2] & 15U);
    #line 2739 
    coex_sta_2->bt_rssi = (unsigned char)(((unsigned int)coex_sta_2->bt_info_c2h[(int)rsp_source][3] + 5U) * 2U);
    #line 2742 
    coex_sta_2->bt_info_ext = coex_sta_2->bt_info_c2h[(int)rsp_source][4];
    #line 2744 
    coex_sta_2->bt_tx_rx_mask = (_Bool)(((int)coex_sta_2->bt_info_c2h[(int)rsp_source][2] & 64) != 0);
    #line 2746 
    (*(btcoexist->btc_set))((void *)btcoexist,(unsigned char)7,(void *)(& coex_sta_2->bt_tx_rx_mask));
    #line 2748 
    if (! coex_sta_2->bt_tx_rx_mask) {
      #line 2752 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Switch BT TRx Mask since BT RF REG 0x3C != 0x15\n");
      #line 2754 
      (*(btcoexist->btc_set_bt_reg))((void *)btcoexist,(unsigned char)0,60U,21U);
    }
    #line 2761 
    if (((int)coex_sta_2->bt_info_ext & 2) != 0) {
      #line 2762 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BT ext info bit1 check, send wifi BW&Chnl to BT!!\n");
      #line 2764 
      (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)2,(void *)(& wifi_connected));
      #line 2766 
      if ((int)wifi_connected != 0) 
                                    #line 2767 
                                    ex_btc8821a1ant_media_status_notify(btcoexist,(unsigned char)1); else 
                                                                    #line 2770 
                                                                    ex_btc8821a1ant_media_status_notify(btcoexist,(unsigned char)0);
    }
    #line 2775 
    if (((int)coex_sta_2->bt_info_ext & 8) != 0 && ! wifi_under_5g) 
      #line 2776 
      if (! btcoexist->manual_control && ! btcoexist->stop_coex_dm) {
        #line 2778 
        _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BT ext info bit3 check, set BT NOT to ignore Wlan active!!\n");
        #line 2780 
        btc8821a1ant_ignore_wlan_act(btcoexist,(_Bool)1,(_Bool)0);
      }
  }
  #line 2788 
  if (((int)bt_info & 4) != 0) 
                               #line 2789 
                               coex_sta_2->c2h_bt_inquiry_page = (_Bool)1; else 
                                                                    #line 2791 
                                                                    coex_sta_2->c2h_bt_inquiry_page = (_Bool)0;
  #line 2794 
  if (((int)bt_info & 1) == 0) {
    #line 2795 
    coex_sta_2->bt_link_exist = (_Bool)0;
    #line 2796 
    coex_sta_2->pan_exist = (_Bool)0;
    #line 2797 
    coex_sta_2->a2dp_exist = (_Bool)0;
    #line 2798 
    coex_sta_2->hid_exist = (_Bool)0;
    #line 2799 
    coex_sta_2->sco_exist = (_Bool)0;
  }
  else {
    #line 2802 
    coex_sta_2->bt_link_exist = (_Bool)1;
    #line 2803 
    if (((int)bt_info & 128) != 0) 
                                   #line 2804 
                                   coex_sta_2->pan_exist = (_Bool)1; else 
                                                                    #line 2806 
                                                                    coex_sta_2->pan_exist = (_Bool)0;
    #line 2807 
    if (((int)bt_info & 64) != 0) 
                                  #line 2808 
                                  coex_sta_2->a2dp_exist = (_Bool)1; else 
                                                                    #line 2810 
                                                                    coex_sta_2->a2dp_exist = (_Bool)0;
    #line 2811 
    if (((int)bt_info & 32) != 0) 
                                  #line 2812 
                                  coex_sta_2->hid_exist = (_Bool)1; else 
                                                                    #line 2814 
                                                                    coex_sta_2->hid_exist = (_Bool)0;
    #line 2815 
    if (((int)bt_info & 2) != 0) 
                                 #line 2816 
                                 coex_sta_2->sco_exist = (_Bool)1; else 
                                                                    #line 2818 
                                                                    coex_sta_2->sco_exist = (_Bool)0;
  }
  #line 2821 
  btc8821a1ant_update_bt_link_info(btcoexist);
  #line 2826 
  bt_info = (unsigned char)((unsigned int)bt_info & 31U);
  #line 2828 
  if (((int)bt_info & 1) == 0) {
    #line 2829 
    coex_dm_2->bt_status = (unsigned char)0U;
    #line 2830 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BtInfoNotify(), BT Non-Connected idle!!!\n");
  }
  else 
    #line 2832 
    if ((unsigned int)bt_info == 1U) {
      #line 2834 
      coex_dm_2->bt_status = (unsigned char)1U;
      #line 2835 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BtInfoNotify(), BT Connected-idle!!!\n");
    }
    else 
      #line 2837 
      if (((int)bt_info & 2) != 0 || ((int)bt_info & 16) != 0) {
        #line 2839 
        coex_dm_2->bt_status = (unsigned char)4U;
        #line 2840 
        _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BtInfoNotify(), BT SCO busy!!!\n");
      }
      else 
        #line 2842 
        if (((int)bt_info & 8) != 0) {
          #line 2843 
          if ((unsigned int)coex_dm_2->bt_status != 3U) 
                                                        #line 2844 
                                                        coex_dm_2->auto_tdma_adjust = (_Bool)0;
          #line 2845 
          coex_dm_2->bt_status = (unsigned char)3U;
          #line 2846 
          _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BtInfoNotify(), BT ACL busy!!!\n");
        }
        else {
          #line 2849 
          coex_dm_2->bt_status = (unsigned char)6U;
          #line 2850 
          _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BtInfoNotify(), BT Non-Defined state!!!\n");
        }
  #line 2854 
  if ((unsigned int)coex_dm_2->bt_status + 253U <= 2U) 
                                                       #line 2857 
                                                       bt_busy = (_Bool)1; else 
                                                                    #line 2859 
                                                                    bt_busy = (_Bool)0;
  #line 2860 
  (*(btcoexist->btc_set))((void *)btcoexist,(unsigned char)1,(void *)(& bt_busy));
  #line 2863 
  btc8821a1ant_run_coexist_mechanism(btcoexist);
  #line 2864 
  return;
}

#line 2866  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a1ant.c"
void ex_btc8821a1ant_halt_notify(struct btc_coexist *btcoexist)
{
  #line 2868 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 2869 
  bool wifi_under_5g = (_Bool)0;
  #line 2871 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Halt notify\n");
  #line 2873 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)13,(void *)(& wifi_under_5g));
  #line 2874 
  if ((int)wifi_under_5g != 0) {
    #line 2875 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], RunCoexistMechanism(), return for 5G <===\n");
    #line 2877 
    btc8821a1ant_coex_under_5g(btcoexist);
    #line 2878 
    return;
  }
  #line 2882 
  btcoexist->stop_coex_dm = (_Bool)1;
  #line 2884 
  btc8821a1ant_set_ant_path(btcoexist,(unsigned char)1,(_Bool)0,(_Bool)1);
  #line 2885 
  btc8821a1ant_ignore_wlan_act(btcoexist,(_Bool)1,(_Bool)1);
  #line 2887 
  btc8821a1ant_power_save_state(btcoexist,(unsigned char)0,(unsigned char)0,(unsigned char)0);
  #line 2888 
  btc8821a1ant_ps_tdma(btcoexist,(_Bool)1,(_Bool)0,(unsigned char)0);
  #line 2890 
  ex_btc8821a1ant_media_status_notify(btcoexist,(unsigned char)0);
  #line 2891 
  return;
}

#line 2893  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a1ant.c"
void ex_btc8821a1ant_pnp_notify(struct btc_coexist *btcoexist, u8 pnp_state)
{
  #line 2895 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 2896 
  bool wifi_under_5g = (_Bool)0;
  #line 2898 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)13,(void *)(& wifi_under_5g));
  #line 2899 
  if ((int)wifi_under_5g != 0) {
    #line 2900 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], RunCoexistMechanism(), return for 5G <===\n");
    #line 2902 
    btc8821a1ant_coex_under_5g(btcoexist);
    #line 2903 
    return;
  }
  #line 2906 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Pnp notify\n");
  #line 2909 
  if ((unsigned int)pnp_state == 1U) {
    #line 2910 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Pnp notify to SLEEP\n");
    #line 2915 
    coex_sta_2->under_ips = (_Bool)0;
    #line 2916 
    coex_sta_2->under_lps = (_Bool)0;
    #line 2917 
    btcoexist->stop_coex_dm = (_Bool)1;
    #line 2918 
    btc8821a1ant_power_save_state(btcoexist,(unsigned char)0,(unsigned char)0,(unsigned char)0);
    #line 2920 
    btc8821a1ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)0,(unsigned char)0);
    #line 2921 
    btc8821a1ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)2);
    #line 2922 
    btc8821a1ant_set_ant_path(btcoexist,(unsigned char)1,(_Bool)0,(_Bool)1);
  }
  else 
    #line 2924 
    if ((unsigned int)pnp_state == 0U) {
      #line 2925 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Pnp notify to WAKE UP\n");
      #line 2927 
      btcoexist->stop_coex_dm = (_Bool)0;
      #line 2928 
      btc8821a1ant_init_hw_config(btcoexist,(_Bool)0,(_Bool)0);
      #line 2929 
      btc8821a1ant_init_coex_dm(btcoexist);
      #line 2930 
      btc8821a1ant_query_bt_info(btcoexist);
    }
  #line 2932 
  return;
}

#line 2934  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a1ant.c"
void ex_btc8821a1ant_periodical(struct btc_coexist *btcoexist)
{
  #line 2937 
  u8 dis_ver_info_cnt;
  #line 2936 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 2938 
  u32 fw_ver = 0U;
  #line 2938 
  u32 bt_patch_ver = 0U;
  #line 2939 
  struct btc_board_info *board_info = & btcoexist->board_info;
  #line 2940 
  struct btc_stack_info *stack_info = & btcoexist->stack_info;
  #line 2942 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], ==========================Periodical===========================\n");
  #line 2945 
  if ((unsigned int)dis_ver_info_cnt <= 5U) {
    #line 2954 
    char *tmp;
    #line 2946 
    dis_ver_info_cnt = (unsigned char)((unsigned int)dis_ver_info_cnt + 1U);
    #line 2947 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], ****************************************************************\n");
    #line 2949 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Ant PG Num/ Ant Mech/ Ant Pos = %d/ %d/ %d\n",(int)board_info->pg_ant_num,(int)board_info->btdm_ant_num,(int)board_info->btdm_ant_pos);
    #line 2954 
    ;
    #line 2954 
    if ((int)stack_info->profile_notified != 0) 
                                                #line 2954 
                                                tmp = (char *)"Yes"; else 
                                                                    #line 2954 
                                                                    tmp = (char *)"No";
    #line 2954 
    ;
    #line 2954 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BT stack/ hci ext ver = %s / %d\n",tmp,(int)stack_info->hci_version);
    #line 2958 
    (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)28,(void *)(& bt_patch_ver));
    #line 2960 
    (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)26,(void *)(& fw_ver));
    #line 2961 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], CoexVer/ FwVer/ PatchVer = %d_%x/ 0x%x/ 0x%x(%d)\n",glcoex_ver_date_8821a_1ant,glcoex_ver_8821a_1ant,fw_ver,bt_patch_ver,bt_patch_ver);
    #line 2967 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], ****************************************************************\n");
  }
  #line 2971 
  if (! btcoexist->auto_report_1ant) {
    #line 2972 
    btc8821a1ant_query_bt_info(btcoexist);
    #line 2973 
    btc8821a1ant_monitor_bt_ctr(btcoexist);
  }
  else 
       #line 2975 
       (coex_sta_2->special_pkt_period_cnt) ++;
  #line 2976 
  return;
}

#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b2ant.c"
static struct coex_dm_8723b_2ant glcoex_dm_8723b_2ant;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b2ant.c"
static struct coex_dm_8723b_2ant *coex_dm_3 = & glcoex_dm_8723b_2ant;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b2ant.c"
static struct coex_sta_8723b_2ant glcoex_sta_8723b_2ant;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b2ant.c"
static struct coex_sta_8723b_2ant *coex_sta_3 = & glcoex_sta_8723b_2ant;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b2ant.c"
static char *glbt_info_src_8723b_2ant[3U] = {(char *)"BT Info[wifi fw]", (char *)"BT Info[bt rsp]", (char *)"BT Info[bt auto report]"};
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b2ant.c"
static u32 glcoex_ver_date_8723b_2ant = 20131113U;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b2ant.c"
static u32 glcoex_ver_8723b_2ant = 63U;
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b2ant.c"
static u8 btc8723b2ant_bt_rssi_state(struct btc_coexist *btcoexist, u8 level_num, u8 rssi_thresh, u8 rssi_thresh1)
{
  #line 44 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 45 
  s32 bt_rssi = 0;
  #line 46 
  u8 bt_rssi_state = coex_sta_3->pre_bt_rssi_state;
  #line 48 
  bt_rssi = (int)coex_sta_3->bt_rssi;
  #line 50 
  if ((unsigned int)level_num == 2U) 
    #line 51 
    if ((unsigned int)coex_sta_3->pre_bt_rssi_state == 2U || (unsigned int)coex_sta_3->pre_bt_rssi_state == 5U) 
      #line 53 
      if ((int)rssi_thresh + 1 < bt_rssi) {
        #line 55 
        bt_rssi_state = (unsigned char)0U;
        #line 56 
        _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BT Rssi state switch to High\n");
      }
      else {
        #line 59 
        bt_rssi_state = (unsigned char)5U;
        #line 60 
        _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BT Rssi state stay at Low\n");
      }
    else 
      #line 64 
      if ((int)rssi_thresh > bt_rssi) {
        #line 65 
        bt_rssi_state = (unsigned char)2U;
        #line 66 
        _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BT Rssi state switch to Low\n");
      }
      else {
        #line 69 
        bt_rssi_state = (unsigned char)3U;
        #line 70 
        _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BT Rssi state stay at High\n");
      }
  else 
    #line 74 
    if ((unsigned int)level_num == 3U) {
      #line 75 
      if ((int)rssi_thresh > (int)rssi_thresh1) {
        #line 76 
        _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BT Rssi thresh error!!\n");
        #line 78 
        return coex_sta_3->pre_bt_rssi_state;
      }
      #line 81 
      if ((unsigned int)coex_sta_3->pre_bt_rssi_state == 2U || (unsigned int)coex_sta_3->pre_bt_rssi_state == 5U) 
        #line 83 
        if ((int)rssi_thresh + 1 < bt_rssi) {
          #line 85 
          bt_rssi_state = (unsigned char)1U;
          #line 86 
          _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BT Rssi state switch to Medium\n");
        }
        else {
          #line 89 
          bt_rssi_state = (unsigned char)5U;
          #line 90 
          _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BT Rssi state stay at Low\n");
        }
      else 
        #line 93 
        if ((unsigned int)coex_sta_3->pre_bt_rssi_state == 1U || (unsigned int)coex_sta_3->pre_bt_rssi_state == 4U) 
          #line 97 
          if ((int)rssi_thresh1 + 1 < bt_rssi) {
            #line 99 
            bt_rssi_state = (unsigned char)0U;
            #line 100 
            _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BT Rssi state switch to High\n");
          }
          else 
            #line 102 
            if ((int)rssi_thresh > bt_rssi) {
              #line 103 
              bt_rssi_state = (unsigned char)2U;
              #line 104 
              _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BT Rssi state switch to Low\n");
            }
            else {
              #line 107 
              bt_rssi_state = (unsigned char)4U;
              #line 108 
              _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BT Rssi state stay at Medium\n");
            }
        else 
          #line 112 
          if ((int)rssi_thresh1 > bt_rssi) {
            #line 113 
            bt_rssi_state = (unsigned char)1U;
            #line 114 
            _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BT Rssi state switch to Medium\n");
          }
          else {
            #line 117 
            bt_rssi_state = (unsigned char)3U;
            #line 118 
            _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BT Rssi state stay at High\n");
          }
    }
  #line 124 
  coex_sta_3->pre_bt_rssi_state = bt_rssi_state;
  #line 126 
  return bt_rssi_state;
}

#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b2ant.c"
static u8 btc8723b2ant_wifi_rssi_state(struct btc_coexist *btcoexist, u8 index, u8 level_num, u8 rssi_thresh, u8 rssi_thresh1)
{
  #line 133 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 134 
  s32 wifi_rssi = 0;
  #line 135 
  u8 wifi_rssi_state = coex_sta_3->pre_wifi_rssi_state[(int)index];
  #line 137 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)22,(void *)(& wifi_rssi));
  #line 139 
  if ((unsigned int)level_num == 2U) 
    #line 140 
    if ((unsigned int)coex_sta_3->pre_wifi_rssi_state[(int)index] == 2U || (unsigned int)coex_sta_3->pre_wifi_rssi_state[(int)index] == 5U) 
      #line 144 
      if ((int)rssi_thresh + 1 < wifi_rssi) {
        #line 146 
        wifi_rssi_state = (unsigned char)0U;
        #line 147 
        _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], wifi RSSI state switch to High\n");
      }
      else {
        #line 150 
        wifi_rssi_state = (unsigned char)5U;
        #line 151 
        _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], wifi RSSI state stay at Low\n");
      }
    else 
      #line 155 
      if ((int)rssi_thresh > wifi_rssi) {
        #line 156 
        wifi_rssi_state = (unsigned char)2U;
        #line 157 
        _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], wifi RSSI state switch to Low\n");
      }
      else {
        #line 160 
        wifi_rssi_state = (unsigned char)3U;
        #line 161 
        _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], wifi RSSI state stay at High\n");
      }
  else 
    #line 165 
    if ((unsigned int)level_num == 3U) {
      #line 166 
      if ((int)rssi_thresh > (int)rssi_thresh1) {
        #line 167 
        _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], wifi RSSI thresh error!!\n");
        #line 169 
        return coex_sta_3->pre_wifi_rssi_state[(int)index];
      }
      #line 172 
      if ((unsigned int)coex_sta_3->pre_wifi_rssi_state[(int)index] == 2U || (unsigned int)coex_sta_3->pre_wifi_rssi_state[(int)index] == 5U) 
        #line 176 
        if ((int)rssi_thresh + 1 < wifi_rssi) {
          #line 178 
          wifi_rssi_state = (unsigned char)1U;
          #line 179 
          _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], wifi RSSI state switch to Medium\n");
        }
        else {
          #line 182 
          wifi_rssi_state = (unsigned char)5U;
          #line 183 
          _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], wifi RSSI state stay at Low\n");
        }
      else 
        #line 186 
        if ((unsigned int)coex_sta_3->pre_wifi_rssi_state[(int)index] == 1U || (unsigned int)coex_sta_3->pre_wifi_rssi_state[(int)index] == 4U) 
          #line 190 
          if ((int)rssi_thresh1 + 1 < wifi_rssi) {
            #line 192 
            wifi_rssi_state = (unsigned char)0U;
            #line 193 
            _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], wifi RSSI state switch to High\n");
          }
          else 
            #line 195 
            if ((int)rssi_thresh > wifi_rssi) {
              #line 196 
              wifi_rssi_state = (unsigned char)2U;
              #line 197 
              _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], wifi RSSI state switch to Low\n");
            }
            else {
              #line 200 
              wifi_rssi_state = (unsigned char)4U;
              #line 201 
              _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], wifi RSSI state stay at Medium\n");
            }
        else 
          #line 205 
          if ((int)rssi_thresh1 > wifi_rssi) {
            #line 206 
            wifi_rssi_state = (unsigned char)1U;
            #line 207 
            _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], wifi RSSI state switch to Medium\n");
          }
          else {
            #line 210 
            wifi_rssi_state = (unsigned char)3U;
            #line 211 
            _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], wifi RSSI state stay at High\n");
          }
    }
  #line 217 
  coex_sta_3->pre_wifi_rssi_state[(int)index] = wifi_rssi_state;
  #line 219 
  return wifi_rssi_state;
}

#line 223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b2ant.c"
static void btc8723b2ant_limited_rx(struct btc_coexist *btcoexist, bool force_exec, bool rej_ap_agg_pkt, bool bt_ctrl_agg_buf_size, u8 agg_buf_size)
{
  #line 227 
  bool reject_rx_agg = rej_ap_agg_pkt;
  #line 228 
  bool bt_ctrl_rx_agg_size = bt_ctrl_agg_buf_size;
  #line 229 
  u8 rx_agg_size = agg_buf_size;
  #line 234 
  (*(btcoexist->btc_set))((void *)btcoexist,(unsigned char)4,(void *)(& reject_rx_agg));
  #line 237 
  (*(btcoexist->btc_set))((void *)btcoexist,(unsigned char)5,(void *)(& bt_ctrl_rx_agg_size));
  #line 240 
  (*(btcoexist->btc_set))((void *)btcoexist,(unsigned char)11,(void *)(& rx_agg_size));
  #line 242 
  (*(btcoexist->btc_set))((void *)btcoexist,(unsigned char)13,(void *)0);
  #line 243 
  return;
}

#line 245  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b2ant.c"
static void btc8723b2ant_monitor_bt_ctr(struct btc_coexist *btcoexist)
{
  #line 249 
  u32 reg_hp_txrx;
  #line 249 
  u32 reg_lp_txrx;
  #line 249 
  u32 u32tmp;
  #line 247 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 248 
  struct btc_bt_link_info *bt_link_info = & btcoexist->bt_link_info;
  #line 250 
  u32 reg_hp_tx = 0U;
  #line 250 
  u32 reg_hp_rx = 0U;
  #line 251 
  u32 reg_lp_tx = 0U;
  #line 251 
  u32 reg_lp_rx = 0U;
  #line 253 
  reg_hp_txrx = 1904U;
  #line 254 
  reg_lp_txrx = 1908U;
  #line 256 
  u32tmp = (*(btcoexist->btc_read_4byte))((void *)btcoexist,reg_hp_txrx);
  #line 257 
  reg_hp_tx = u32tmp & 65535U;
  #line 258 
  reg_hp_rx = u32tmp >> 16;
  #line 260 
  u32tmp = (*(btcoexist->btc_read_4byte))((void *)btcoexist,reg_lp_txrx);
  #line 261 
  reg_lp_tx = u32tmp & 65535U;
  #line 262 
  reg_lp_rx = u32tmp >> 16;
  #line 264 
  coex_sta_3->high_priority_tx = reg_hp_tx;
  #line 265 
  coex_sta_3->high_priority_rx = reg_hp_rx;
  #line 266 
  coex_sta_3->low_priority_tx = reg_lp_tx;
  #line 267 
  coex_sta_3->low_priority_rx = reg_lp_rx;
  #line 269 
  if (coex_sta_3->low_priority_tx > 1050U && ! coex_sta_3->c2h_bt_inquiry_page) 
    #line 271 
    (coex_sta_3->pop_event_cnt) ++;
  #line 273 
  if ((coex_sta_3->low_priority_rx > 949U && coex_sta_3->low_priority_rx >= coex_sta_3->low_priority_tx) && ! coex_sta_3->under_ips) 
    #line 276 
    bt_link_info->slave_role = (_Bool)1; else 
                                              #line 278 
                                              bt_link_info->slave_role = (_Bool)0;
  #line 280 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], High Priority Tx/Rx(reg 0x%x)=0x%x(%d)/0x%x(%d)\n",reg_hp_txrx,reg_hp_tx,reg_hp_tx,reg_hp_rx,reg_hp_rx);
  #line 283 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Low Priority Tx/Rx(reg 0x%x)=0x%x(%d)/0x%x(%d)\n",reg_lp_txrx,reg_lp_tx,reg_lp_tx,reg_lp_rx,reg_lp_rx);
  #line 288 
  (*(btcoexist->btc_write_1byte))((void *)btcoexist,1902U,12U);
  #line 289 
  return;
}

#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b2ant.c"
static void btc8723b2ant_monitor_wifi_ctr(struct btc_coexist *btcoexist)
{
  #line 293 
  if ((int)coex_sta_3->under_ips != 0) {
    #line 294 
    coex_sta_3->crc_ok_cck = 0U;
    #line 295 
    coex_sta_3->crc_ok_11g = 0U;
    #line 296 
    coex_sta_3->crc_ok_11n = 0U;
    #line 297 
    coex_sta_3->crc_ok_11n_agg = 0U;
    #line 299 
    coex_sta_3->crc_err_cck = 0U;
    #line 300 
    coex_sta_3->crc_err_11g = 0U;
    #line 301 
    coex_sta_3->crc_err_11n = 0U;
    #line 302 
    coex_sta_3->crc_err_11n_agg = 0U;
  }
  else {
    #line 304 
    coex_sta_3->crc_ok_cck = (*(btcoexist->btc_read_4byte))((void *)btcoexist,3976U);
    #line 306 
    coex_sta_3->crc_ok_11g = (unsigned int)(*(btcoexist->btc_read_2byte))((void *)btcoexist,3988U);
    #line 308 
    coex_sta_3->crc_ok_11n = (unsigned int)(*(btcoexist->btc_read_2byte))((void *)btcoexist,3984U);
    #line 310 
    coex_sta_3->crc_ok_11n_agg = (unsigned int)(*(btcoexist->btc_read_2byte))((void *)btcoexist,4024U);
    #line 313 
    coex_sta_3->crc_err_cck = (*(btcoexist->btc_read_4byte))((void *)btcoexist,3972U);
    #line 315 
    coex_sta_3->crc_err_11g = (unsigned int)(*(btcoexist->btc_read_2byte))((void *)btcoexist,3990U);
    #line 317 
    coex_sta_3->crc_err_11n = (unsigned int)(*(btcoexist->btc_read_2byte))((void *)btcoexist,3986U);
    #line 319 
    coex_sta_3->crc_err_11n_agg = (unsigned int)(*(btcoexist->btc_read_2byte))((void *)btcoexist,4026U);
  }
  #line 324 
  (*(btcoexist->btc_write_1byte_bitmask))((void *)btcoexist,3862U,1U,(unsigned char)1);
  #line 325 
  (*(btcoexist->btc_write_1byte_bitmask))((void *)btcoexist,3862U,1U,(unsigned char)0);
  #line 326 
  return;
}

#line 328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b2ant.c"
static void btc8723b2ant_query_bt_info(struct btc_coexist *btcoexist)
{
  #line 330 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 331 
  u8 h2c_parameter[1U] = {(unsigned char)0U};
  #line 333 
  coex_sta_3->c2h_bt_info_req_sent = (_Bool)1;
  #line 335 
  h2c_parameter[0] = (unsigned char)((unsigned int)h2c_parameter[0] | 1U);
  #line 337 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Query Bt Info, FW write 0x61 = 0x%x\n",(int)h2c_parameter[0]);
  #line 341 
  (*(btcoexist->btc_fill_h2c))((void *)btcoexist,(unsigned char)97,1U,(u8 *)(& h2c_parameter));
  #line 342 
  return;
}

#line 344  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b2ant.c"
static bool btc8723b2ant_is_wifi_status_changed(struct btc_coexist *btcoexist)
{
  #line 346 
  bool pre_wifi_busy;
  #line 347 
  bool pre_under_4way;
  #line 348 
  bool pre_bt_hs_on;
  #line 352 
  u8 tmp;
  #line 349 
  bool wifi_busy = (_Bool)0;
  #line 349 
  bool under_4way = (_Bool)0;
  #line 349 
  bool bt_hs_on = (_Bool)0;
  #line 350 
  bool wifi_connected = (_Bool)0;
  #line 351 
  u8 wifi_rssi_state = (unsigned char)0U;
  #line 354 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)2,(void *)(& wifi_connected));
  #line 356 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)4,(void *)(& wifi_busy));
  #line 357 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)0,(void *)(& bt_hs_on));
  #line 358 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)12,(void *)(& under_4way));
  #line 361 
  if ((int)wifi_connected != 0) {
    #line 362 
    if ((int)wifi_busy != (int)pre_wifi_busy) {
      #line 363 
      pre_wifi_busy = wifi_busy;
      #line 364 
      return (_Bool)1;
    }
    #line 367 
    if ((int)under_4way != (int)pre_under_4way) {
      #line 368 
      pre_under_4way = under_4way;
      #line 369 
      return (_Bool)1;
    }
    #line 372 
    if ((int)bt_hs_on != (int)pre_bt_hs_on) {
      #line 373 
      pre_bt_hs_on = bt_hs_on;
      #line 374 
      return (_Bool)1;
    }
    #line 377 
    tmp = (unsigned char)(42U - (unsigned int)coex_dm_3->switch_thres_offset);
    #line 379 
    wifi_rssi_state = btc8723b2ant_wifi_rssi_state(btcoexist,(unsigned char)0,(unsigned char)2,(unsigned char)((int)tmp),(unsigned char)0);
    #line 382 
    if ((unsigned int)wifi_rssi_state == 0U || (unsigned int)wifi_rssi_state == 2U) 
      #line 384 
      return (_Bool)1;
  }
  #line 387 
  return (_Bool)0;
}

#line 390  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b2ant.c"
static void btc8723b2ant_update_bt_link_info(struct btc_coexist *btcoexist)
{
  #line 392 
  struct btc_bt_link_info *bt_link_info = & btcoexist->bt_link_info;
  #line 393 
  bool bt_hs_on = (_Bool)0;
  #line 395 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)0,(void *)(& bt_hs_on));
  #line 397 
  bt_link_info->bt_link_exist = coex_sta_3->bt_link_exist;
  #line 398 
  bt_link_info->sco_exist = coex_sta_3->sco_exist;
  #line 399 
  bt_link_info->a2dp_exist = coex_sta_3->a2dp_exist;
  #line 400 
  bt_link_info->pan_exist = coex_sta_3->pan_exist;
  #line 401 
  bt_link_info->hid_exist = coex_sta_3->hid_exist;
  #line 404 
  if ((int)bt_hs_on != 0) {
    #line 405 
    bt_link_info->pan_exist = (_Bool)1;
    #line 406 
    bt_link_info->bt_link_exist = (_Bool)1;
  }
  #line 410 
  if ((((int)bt_link_info->sco_exist != 0 && ! bt_link_info->a2dp_exist) && ! bt_link_info->pan_exist) && ! bt_link_info->hid_exist) 
    #line 412 
    bt_link_info->sco_only = (_Bool)1; else 
                                            #line 414 
                                            bt_link_info->sco_only = (_Bool)0;
  #line 417 
  if (((! bt_link_info->sco_exist && (int)bt_link_info->a2dp_exist != 0) && ! bt_link_info->pan_exist) && ! bt_link_info->hid_exist) 
    #line 419 
    bt_link_info->a2dp_only = (_Bool)1; else 
                                             #line 421 
                                             bt_link_info->a2dp_only = (_Bool)0;
  #line 424 
  if (((! bt_link_info->sco_exist && ! bt_link_info->a2dp_exist) && (int)bt_link_info->pan_exist != 0) && ! bt_link_info->hid_exist) 
    #line 426 
    bt_link_info->pan_only = (_Bool)1; else 
                                            #line 428 
                                            bt_link_info->pan_only = (_Bool)0;
  #line 431 
  if (((! bt_link_info->sco_exist && ! bt_link_info->a2dp_exist) && ! bt_link_info->pan_exist) && (int)bt_link_info->hid_exist != 0) 
    #line 433 
    bt_link_info->hid_only = (_Bool)1; else 
                                            #line 435 
                                            bt_link_info->hid_only = (_Bool)0;
  #line 436 
  return;
}

#line 438  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b2ant.c"
static u8 btc8723b2ant_action_algorithm(struct btc_coexist *btcoexist)
{
  #line 440 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 441 
  struct btc_bt_link_info *bt_link_info = & btcoexist->bt_link_info;
  #line 442 
  bool bt_hs_on = (_Bool)0;
  #line 443 
  u8 algorithm = (unsigned char)0U;
  #line 444 
  u8 num_of_diff_profile = (unsigned char)0U;
  #line 446 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)0,(void *)(& bt_hs_on));
  #line 448 
  if (! bt_link_info->bt_link_exist) {
    #line 449 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], No BT link exists!!!\n");
    #line 451 
    return algorithm;
  }
  #line 454 
  if ((int)bt_link_info->sco_exist != 0) 
                                         #line 455 
                                         num_of_diff_profile = (u8)((int)num_of_diff_profile + 1);
  #line 456 
  if ((int)bt_link_info->hid_exist != 0) 
                                         #line 457 
                                         num_of_diff_profile = (u8)((int)num_of_diff_profile + 1);
  #line 458 
  if ((int)bt_link_info->pan_exist != 0) 
                                         #line 459 
                                         num_of_diff_profile = (u8)((int)num_of_diff_profile + 1);
  #line 460 
  if ((int)bt_link_info->a2dp_exist != 0) 
                                          #line 461 
                                          num_of_diff_profile = (u8)((int)num_of_diff_profile + 1);
  #line 463 
  if ((unsigned int)num_of_diff_profile == 1U) {
    #line 464 
    if ((int)bt_link_info->sco_exist != 0) {
      #line 465 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], SCO only\n");
      #line 467 
      algorithm = (unsigned char)1U;
    }
    else 
      #line 469 
      if ((int)bt_link_info->hid_exist != 0) {
        #line 470 
        _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], HID only\n");
        #line 472 
        algorithm = (unsigned char)2U;
      }
      else 
        #line 473 
        if ((int)bt_link_info->a2dp_exist != 0) {
          #line 474 
          _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], A2DP only\n");
          #line 476 
          algorithm = (unsigned char)3U;
        }
        else 
          #line 477 
          if ((int)bt_link_info->pan_exist != 0) 
            #line 478 
            if ((int)bt_hs_on != 0) {
              #line 479 
              _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], PAN(HS) only\n");
              #line 482 
              algorithm = (unsigned char)6U;
            }
            else {
              #line 485 
              _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], PAN(EDR) only\n");
              #line 488 
              algorithm = (unsigned char)5U;
            }
  }
  else 
    #line 493 
    if ((unsigned int)num_of_diff_profile == 2U) {
      #line 494 
      if ((int)bt_link_info->sco_exist != 0) {
        #line 495 
        if ((int)bt_link_info->hid_exist != 0) {
          #line 496 
          _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], SCO + HID\n");
          #line 498 
          algorithm = (unsigned char)8U;
        }
        else 
          #line 499 
          if ((int)bt_link_info->a2dp_exist != 0) {
            #line 500 
            _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], SCO + A2DP ==> SCO\n");
            #line 502 
            algorithm = (unsigned char)8U;
          }
          else 
            #line 503 
            if ((int)bt_link_info->pan_exist != 0) 
              #line 504 
              if ((int)bt_hs_on != 0) {
                #line 505 
                _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], SCO + PAN(HS)\n");
                #line 508 
                algorithm = (unsigned char)1U;
              }
              else {
                #line 510 
                _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], SCO + PAN(EDR)\n");
                #line 513 
                algorithm = (unsigned char)8U;
              }
      }
      else 
        #line 518 
        if ((int)bt_link_info->hid_exist != 0 && (int)bt_link_info->a2dp_exist != 0) {
          #line 520 
          _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], HID + A2DP\n");
          #line 522 
          algorithm = (unsigned char)10U;
        }
        else 
          #line 523 
          if ((int)bt_link_info->hid_exist != 0 && (int)bt_link_info->pan_exist != 0) 
            #line 525 
            if ((int)bt_hs_on != 0) {
              #line 526 
              _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], HID + PAN(HS)\n");
              #line 529 
              algorithm = (unsigned char)2U;
            }
            else {
              #line 531 
              _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], HID + PAN(EDR)\n");
              #line 534 
              algorithm = (unsigned char)8U;
            }
          else 
            #line 537 
            if ((int)bt_link_info->pan_exist != 0 && (int)bt_link_info->a2dp_exist != 0) 
              #line 539 
              if ((int)bt_hs_on != 0) {
                #line 540 
                _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], A2DP + PAN(HS)\n");
                #line 543 
                algorithm = (unsigned char)4U;
              }
              else {
                #line 546 
                _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex],A2DP + PAN(EDR)\n");
                #line 549 
                algorithm = (unsigned char)7U;
              }
    }
    else 
      #line 554 
      if ((unsigned int)num_of_diff_profile == 3U) {
        #line 555 
        if ((int)bt_link_info->sco_exist != 0) {
          #line 556 
          if ((int)bt_link_info->hid_exist != 0 && (int)bt_link_info->a2dp_exist != 0) {
            #line 558 
            _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], SCO + HID + A2DP ==> HID\n");
            #line 560 
            algorithm = (unsigned char)8U;
          }
          else 
            #line 561 
            if ((int)bt_link_info->hid_exist != 0 && (int)bt_link_info->pan_exist != 0) 
              #line 563 
              if ((int)bt_hs_on != 0) {
                #line 564 
                _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], SCO + HID + PAN(HS)\n");
                #line 567 
                algorithm = (unsigned char)8U;
              }
              else {
                #line 570 
                _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], SCO + HID + PAN(EDR)\n");
                #line 573 
                algorithm = (unsigned char)8U;
              }
            else 
              #line 576 
              if ((int)bt_link_info->pan_exist != 0 && (int)bt_link_info->a2dp_exist != 0) 
                #line 578 
                if ((int)bt_hs_on != 0) {
                  #line 579 
                  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], SCO + A2DP + PAN(HS)\n");
                  #line 582 
                  algorithm = (unsigned char)8U;
                }
                else {
                  #line 585 
                  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], SCO + A2DP + PAN(EDR) ==> HID\n");
                  #line 588 
                  algorithm = (unsigned char)8U;
                }
        }
        else 
          #line 593 
          if (((int)bt_link_info->hid_exist != 0 && (int)bt_link_info->pan_exist != 0) && (int)bt_link_info->a2dp_exist != 0) 
            #line 596 
            if ((int)bt_hs_on != 0) {
              #line 597 
              _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], HID + A2DP + PAN(HS)\n");
              #line 600 
              algorithm = (unsigned char)10U;
            }
            else {
              #line 603 
              _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], HID + A2DP + PAN(EDR)\n");
              #line 606 
              algorithm = (unsigned char)9U;
            }
      }
      else 
        #line 611 
        if ((unsigned int)num_of_diff_profile > 2U) 
          #line 612 
          if ((int)bt_link_info->sco_exist != 0) 
            #line 613 
            if (((int)bt_link_info->hid_exist != 0 && (int)bt_link_info->pan_exist != 0) && (int)bt_link_info->a2dp_exist != 0) 
              #line 616 
              if ((int)bt_hs_on != 0) 
                                      #line 617 
                                      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Error!!! SCO + HID + A2DP + PAN(HS)\n");
              else {
                #line 621 
                _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], SCO + HID + A2DP + PAN(EDR)==>PAN(EDR)+HID\n");
                #line 624 
                algorithm = (unsigned char)8U;
              }
  #line 630 
  return algorithm;
}

#line 633  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b2ant.c"
static void btc8723b2ant_set_fw_dac_swing_level(struct btc_coexist *btcoexist, u8 dac_swing_lvl)
{
  #line 636 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 637 
  u8 h2c_parameter[1U] = {(unsigned char)0U};
  #line 642 
  h2c_parameter[0] = dac_swing_lvl;
  #line 644 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Set Dac Swing Level=0x%x\n",(int)dac_swing_lvl);
  #line 646 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], FW write 0x64=0x%x\n",(int)h2c_parameter[0]);
  #line 649 
  (*(btcoexist->btc_fill_h2c))((void *)btcoexist,(unsigned char)100,1U,(u8 *)(& h2c_parameter));
  #line 650 
  return;
}

#line 652  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b2ant.c"
static void btc8723b2ant_set_fw_dec_bt_pwr(struct btc_coexist *btcoexist, u8 dec_bt_pwr_lvl)
{
  #line 655 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 656 
  u8 h2c_parameter[1U] = {(unsigned char)0U};
  #line 658 
  h2c_parameter[0] = dec_bt_pwr_lvl;
  #line 660 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], decrease Bt Power Level : %u\n",(int)dec_bt_pwr_lvl);
  #line 663 
  (*(btcoexist->btc_fill_h2c))((void *)btcoexist,(unsigned char)98,1U,(u8 *)(& h2c_parameter));
  #line 664 
  return;
}

#line 666  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b2ant.c"
static void btc8723b2ant_dec_bt_pwr(struct btc_coexist *btcoexist, bool force_exec, u8 dec_bt_pwr_lvl)
{
  #line 669 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 671 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Dec BT power level = %u\n",(int)dec_bt_pwr_lvl);
  #line 673 
  coex_dm_3->cur_dec_bt_pwr_lvl = (_Bool)((unsigned int)dec_bt_pwr_lvl != 0U);
  #line 675 
  if (! force_exec) {
    #line 676 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], PreDecBtPwrLvl=%d, CurDecBtPwrLvl=%d\n",(int)coex_dm_3->pre_dec_bt_pwr_lvl,(int)coex_dm_3->cur_dec_bt_pwr_lvl);
    #line 681 
    if ((int)coex_dm_3->pre_dec_bt_pwr_lvl == (int)coex_dm_3->cur_dec_bt_pwr_lvl) 
      #line 682 
      return;
  }
  #line 684 
  btc8723b2ant_set_fw_dec_bt_pwr(btcoexist,(unsigned char)((int)coex_dm_3->cur_dec_bt_pwr_lvl));
  #line 686 
  coex_dm_3->pre_dec_bt_pwr_lvl = coex_dm_3->cur_dec_bt_pwr_lvl;
  #line 687 
  return;
}

#line 690  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b2ant.c"
static void halbtc8723b2ant_set_bt_auto_report(struct btc_coexist *btcoexist, bool enable_auto_report)
{
  #line 693 
  u8 h2c_parameter[1U] = {(unsigned char)0U};
  #line 695 
  h2c_parameter[0] = (unsigned char)0U;
  #line 697 
  if ((int)enable_auto_report != 0) 
                                    #line 698 
                                    h2c_parameter[0] = (unsigned char)((unsigned int)h2c_parameter[0] | 1U);
  #line 700 
  (*(btcoexist->btc_fill_h2c))((void *)btcoexist,(unsigned char)104,1U,(u8 *)(& h2c_parameter));
  #line 701 
  return;
}

#line 704  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b2ant.c"
static void btc8723b2ant_bt_auto_report(struct btc_coexist *btcoexist, bool force_exec, bool enable_auto_report)
{
  #line 707 
  coex_dm_3->cur_bt_auto_report = enable_auto_report;
  #line 709 
  if (! force_exec) 
    #line 710 
    if ((int)coex_dm_3->pre_bt_auto_report == (int)coex_dm_3->cur_bt_auto_report) 
      #line 711 
      return;
  #line 713 
  halbtc8723b2ant_set_bt_auto_report(btcoexist,(_Bool)((bool)((int)coex_dm_3->cur_bt_auto_report) != 0));
  #line 716 
  coex_dm_3->pre_bt_auto_report = coex_dm_3->cur_bt_auto_report;
  #line 717 
  return;
}

#line 719  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b2ant.c"
static void btc8723b2ant_fw_dac_swing_lvl(struct btc_coexist *btcoexist, bool force_exec, u8 fw_dac_swing_lvl)
{
  #line 724 
  char *tmp;
  #line 722 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 724 
  ;
  #line 724 
  if ((int)force_exec != 0) 
                            #line 724 
                            tmp = (char *)"force to"; else 
                                                           #line 724 
                                                           tmp = (char *)"";
  #line 724 
  ;
  #line 724 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], %s set FW Dac Swing level = %d\n",tmp,(int)fw_dac_swing_lvl);
  #line 727 
  coex_dm_3->cur_fw_dac_swing_lvl = fw_dac_swing_lvl;
  #line 729 
  if (! force_exec) {
    #line 730 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], preFwDacSwingLvl=%d, curFwDacSwingLvl=%d\n",(int)coex_dm_3->pre_fw_dac_swing_lvl,(int)coex_dm_3->cur_fw_dac_swing_lvl);
    #line 735 
    if ((int)coex_dm_3->pre_fw_dac_swing_lvl == (int)coex_dm_3->cur_fw_dac_swing_lvl) 
      #line 737 
      return;
  }
  #line 740 
  btc8723b2ant_set_fw_dac_swing_level(btcoexist,(unsigned char)((int)coex_dm_3->cur_fw_dac_swing_lvl));
  #line 742 
  coex_dm_3->pre_fw_dac_swing_lvl = coex_dm_3->cur_fw_dac_swing_lvl;
  #line 743 
  return;
}

#line 745  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b2ant.c"
static void btc8723b_set_penalty_txrate(struct btc_coexist *btcoexist, bool low_penalty_ra)
{
  #line 762 
  char *tmp;
  #line 748 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 749 
  u8 h2c_parameter[6U] = {(unsigned char)0U};
  #line 751 
  h2c_parameter[0] = (unsigned char)6U;
  #line 753 
  if ((int)low_penalty_ra != 0) {
    #line 754 
    h2c_parameter[1] = (unsigned char)((unsigned int)h2c_parameter[1] | 1U);
    #line 756 
    h2c_parameter[2] = (unsigned char)0U;
    #line 757 
    h2c_parameter[3] = (unsigned char)244U;
    #line 758 
    h2c_parameter[4] = (unsigned char)245U;
    #line 759 
    h2c_parameter[5] = (unsigned char)246U;
  }
  #line 762 
  if ((int)low_penalty_ra != 0) 
                                #line 762 
                                tmp = (char *)"ON!!"; else 
                                                           #line 762 
                                                           tmp = (char *)"OFF!!";
  #line 762 
  ;
  #line 762 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], set WiFi Low-Penalty Retry: %s",tmp);
  #line 766 
  (*(btcoexist->btc_fill_h2c))((void *)btcoexist,(unsigned char)105,6U,(u8 *)(& h2c_parameter));
  #line 767 
  return;
}

#line 769  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b2ant.c"
static void btc8723b2ant_low_penalty_ra(struct btc_coexist *btcoexist, bool force_exec, bool low_penalty_ra)
{
  #line 774 
  char *tmp;
  #line 774 
  char *tmp_0;
  #line 772 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 774 
  if ((int)low_penalty_ra != 0) 
                                #line 774 
                                tmp = (char *)"ON"; else 
                                                         #line 774 
                                                         tmp = (char *)"OFF";
  #line 774 
  if ((int)force_exec != 0) 
                            #line 774 
                            tmp_0 = (char *)"force to"; else 
                                                             #line 774 
                                                             tmp_0 = (char *)"";
  #line 774 
  ;
  #line 774 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], %s turn LowPenaltyRA = %s\n",tmp_0,tmp);
  #line 778 
  coex_dm_3->cur_low_penalty_ra = low_penalty_ra;
  #line 780 
  if (! force_exec) {
    #line 781 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], bPreLowPenaltyRa=%d, bCurLowPenaltyRa=%d\n",(int)coex_dm_3->pre_low_penalty_ra,(int)coex_dm_3->cur_low_penalty_ra);
    #line 786 
    if ((int)coex_dm_3->pre_low_penalty_ra == (int)coex_dm_3->cur_low_penalty_ra) 
      #line 787 
      return;
  }
  #line 789 
  btc8723b_set_penalty_txrate(btcoexist,(_Bool)((bool)((int)coex_dm_3->cur_low_penalty_ra) != 0));
  #line 791 
  coex_dm_3->pre_low_penalty_ra = coex_dm_3->cur_low_penalty_ra;
  #line 792 
  return;
}

#line 794  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b2ant.c"
static void btc8723b2ant_set_dac_swing_reg(struct btc_coexist *btcoexist, u32 level)
{
  #line 797 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 798 
  u8 val = (unsigned char)level;
  #line 800 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Write SwDacSwing = 0x%x\n",level);
  #line 802 
  (*(btcoexist->btc_write_1byte_bitmask))((void *)btcoexist,2179U,62U,(unsigned char)((int)val));
  #line 803 
  return;
}

#line 805  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b2ant.c"
static void btc8723b2ant_set_sw_fulltime_dac_swing(struct btc_coexist *btcoex, bool sw_dac_swing_on, u32 sw_dac_swing_lvl)
{
  #line 809 
  if ((int)sw_dac_swing_on != 0) 
                                 #line 810 
                                 btc8723b2ant_set_dac_swing_reg(btcoex,sw_dac_swing_lvl); else 
                                                                    #line 812 
                                                                    btc8723b2ant_set_dac_swing_reg(btcoex,24U);
  #line 813 
  return;
}

#line 815  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b2ant.c"
static void btc8723b2ant_dac_swing(struct btc_coexist *btcoexist, bool force_exec, bool dac_swing_on, u32 dac_swing_lvl)
{
  #line 821 
  char *tmp;
  #line 821 
  char *tmp_0;
  #line 819 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 821 
  ;
  #line 821 
  if ((int)dac_swing_on != 0) 
                              #line 821 
                              tmp = (char *)"ON"; else 
                                                       #line 821 
                                                       tmp = (char *)"OFF";
  #line 821 
  if ((int)force_exec != 0) 
                            #line 821 
                            tmp_0 = (char *)"force to"; else 
                                                             #line 821 
                                                             tmp_0 = (char *)"";
  #line 821 
  ;
  #line 821 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], %s turn DacSwing=%s, dac_swing_lvl=0x%x\n",tmp_0,tmp,dac_swing_lvl);
  #line 825 
  coex_dm_3->cur_dac_swing_on = dac_swing_on;
  #line 826 
  coex_dm_3->cur_dac_swing_lvl = dac_swing_lvl;
  #line 828 
  if (! force_exec) {
    #line 829 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], bPreDacSwingOn=%d, preDacSwingLvl=0x%x, bCurDacSwingOn=%d, curDacSwingLvl=0x%x\n",(int)coex_dm_3->pre_dac_swing_on,coex_dm_3->pre_dac_swing_lvl,(int)coex_dm_3->cur_dac_swing_on,coex_dm_3->cur_dac_swing_lvl);
    #line 836 
    if ((int)coex_dm_3->pre_dac_swing_on == (int)coex_dm_3->cur_dac_swing_on && coex_dm_3->pre_dac_swing_lvl == coex_dm_3->cur_dac_swing_lvl) 
      #line 838 
      return;
  }
  {
    #line 840 
    unsigned long __ms = 30UL;
    #line 840 
    while (1) {
      #line 840 
      unsigned long tmp_1;
      #line 840 
      tmp_1 = __ms;
      #line 840 
      __ms --;
      #line 840 
      ;
      #line 840 
      if (! (tmp_1 != 0UL)) 
                            #line 840 
                            break;
      #line 840 
      __const_udelay(4295000UL);
    }
  }
  #line 841 
  btc8723b2ant_set_sw_fulltime_dac_swing(btcoexist,(_Bool)((bool)((int)dac_swing_on) != 0),dac_swing_lvl);
  #line 844 
  coex_dm_3->pre_dac_swing_on = coex_dm_3->cur_dac_swing_on;
  #line 845 
  coex_dm_3->pre_dac_swing_lvl = coex_dm_3->cur_dac_swing_lvl;
  #line 846 
  return;
}

#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b2ant.c"
static void btc8723b2ant_set_coex_table(struct btc_coexist *btcoexist, u32 val0x6c0, u32 val0x6c4, u32 val0x6c8, u8 val0x6cc)
{
  #line 852 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 854 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], set coex table, set 0x6c0=0x%x\n",val0x6c0);
  #line 856 
  (*(btcoexist->btc_write_4byte))((void *)btcoexist,1728U,val0x6c0);
  #line 858 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], set coex table, set 0x6c4=0x%x\n",val0x6c4);
  #line 860 
  (*(btcoexist->btc_write_4byte))((void *)btcoexist,1732U,val0x6c4);
  #line 862 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], set coex table, set 0x6c8=0x%x\n",val0x6c8);
  #line 864 
  (*(btcoexist->btc_write_4byte))((void *)btcoexist,1736U,val0x6c8);
  #line 866 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], set coex table, set 0x6cc=0x%x\n",(int)val0x6cc);
  #line 868 
  (*(btcoexist->btc_write_1byte))((void *)btcoexist,1740U,(unsigned int)val0x6cc);
  #line 869 
  return;
}

#line 871  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b2ant.c"
static void btc8723b2ant_coex_table(struct btc_coexist *btcoexist, bool force_exec, u32 val0x6c0, u32 val0x6c4, u32 val0x6c8, u8 val0x6cc)
{
  #line 878 
  char *tmp;
  #line 876 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 878 
  ;
  #line 878 
  ;
  #line 878 
  ;
  #line 878 
  ;
  #line 878 
  if ((int)force_exec != 0) 
                            #line 878 
                            tmp = (char *)"force to"; else 
                                                           #line 878 
                                                           tmp = (char *)"";
  #line 878 
  ;
  #line 878 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], %s write Coex Table 0x6c0=0x%x, 0x6c4=0x%x, 0x6c8=0x%x, 0x6cc=0x%x\n",tmp,val0x6c0,val0x6c4,val0x6c8,(int)val0x6cc);
  #line 882 
  coex_dm_3->cur_val0x6c0 = val0x6c0;
  #line 883 
  coex_dm_3->cur_val0x6c4 = val0x6c4;
  #line 884 
  coex_dm_3->cur_val0x6c8 = val0x6c8;
  #line 885 
  coex_dm_3->cur_val0x6cc = val0x6cc;
  #line 887 
  if (! force_exec) {
    #line 888 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], preVal0x6c0=0x%x, preVal0x6c4=0x%x, preVal0x6c8=0x%x, preVal0x6cc=0x%x !!\n",coex_dm_3->pre_val0x6c0,coex_dm_3->pre_val0x6c4,coex_dm_3->pre_val0x6c8,(int)coex_dm_3->pre_val0x6cc);
    #line 892 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], curVal0x6c0=0x%x, curVal0x6c4=0x%x, curVal0x6c8=0x%x, curVal0x6cc=0x%x !!\n",coex_dm_3->cur_val0x6c0,coex_dm_3->cur_val0x6c4,coex_dm_3->cur_val0x6c8,(int)coex_dm_3->cur_val0x6cc);
    #line 897 
    if (((coex_dm_3->pre_val0x6c0 == coex_dm_3->cur_val0x6c0 && coex_dm_3->pre_val0x6c4 == coex_dm_3->cur_val0x6c4) && coex_dm_3->pre_val0x6c8 == coex_dm_3->cur_val0x6c8) && (int)coex_dm_3->pre_val0x6cc == (int)coex_dm_3->cur_val0x6cc) 
      #line 901 
      return;
  }
  #line 903 
  btc8723b2ant_set_coex_table(btcoexist,val0x6c0,val0x6c4,val0x6c8,(unsigned char)((int)val0x6cc));
  #line 906 
  coex_dm_3->pre_val0x6c0 = coex_dm_3->cur_val0x6c0;
  #line 907 
  coex_dm_3->pre_val0x6c4 = coex_dm_3->cur_val0x6c4;
  #line 908 
  coex_dm_3->pre_val0x6c8 = coex_dm_3->cur_val0x6c8;
  #line 909 
  coex_dm_3->pre_val0x6cc = coex_dm_3->cur_val0x6cc;
  #line 910 
  return;
}

#line 912  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b2ant.c"
static void btc8723b2ant_coex_table_with_type(struct btc_coexist *btcoexist, bool force_exec, u8 type)
{
  #line 915 
  switch ((int)type) {
    #line 916 
    case 0: 
            #line 916 
    ;
    #line 917 
    btc8723b2ant_coex_table(btcoexist,(_Bool)((bool)((int)force_exec) != 0),1431655765U,1431655765U,16777215U,(unsigned char)3);
    #line 919 
    break;
    #line 920 
    case 1: 
            #line 920 
    ;
    #line 921 
    btc8723b2ant_coex_table(btcoexist,(_Bool)((bool)((int)force_exec) != 0),1431655765U,1526356730U,16777215U,(unsigned char)3);
    #line 923 
    break;
    #line 924 
    case 2: 
            #line 924 
    ;
    #line 925 
    btc8723b2ant_coex_table(btcoexist,(_Bool)((bool)((int)force_exec) != 0),1524259546U,1524259546U,16777215U,(unsigned char)3);
    #line 927 
    break;
    #line 928 
    case 3: 
            #line 928 
    ;
    #line 929 
    btc8723b2ant_coex_table(btcoexist,(_Bool)((bool)((int)force_exec) != 0),2863311530U,2863311530U,16777215U,(unsigned char)3);
    #line 931 
    break;
    #line 932 
    case 4: 
            #line 932 
    ;
    #line 933 
    btc8723b2ant_coex_table(btcoexist,(_Bool)((bool)((int)force_exec) != 0),4294967295U,4294967295U,16777215U,(unsigned char)3);
    #line 935 
    break;
    #line 936 
    case 5: 
            #line 936 
    ;
    #line 937 
    btc8723b2ant_coex_table(btcoexist,(_Bool)((bool)((int)force_exec) != 0),1610571775U,1610571775U,16777215U,(unsigned char)3);
    #line 939 
    break;
    #line 940 
    case 6: 
            #line 940 
    ;
    #line 941 
    btc8723b2ant_coex_table(btcoexist,(_Bool)((bool)((int)force_exec) != 0),1442797055U,1515870810U,16777215U,(unsigned char)3);
    #line 943 
    break;
    #line 944 
    case 7: 
            #line 944 
    ;
    #line 945 
    btc8723b2ant_coex_table(btcoexist,(_Bool)((bool)((int)force_exec) != 0),1440568797U,1524259546U,16777215U,(unsigned char)3);
    #line 947 
    break;
    #line 948 
    case 8: 
            #line 948 
    ;
    #line 949 
    btc8723b2ant_coex_table(btcoexist,(_Bool)((bool)((int)force_exec) != 0),1440568797U,1524259546U,16777215U,(unsigned char)3);
    #line 951 
    break;
    #line 952 
    case 9: 
            #line 952 
    ;
    #line 953 
    btc8723b2ant_coex_table(btcoexist,(_Bool)((bool)((int)force_exec) != 0),1440568797U,1524259546U,16777215U,(unsigned char)3);
    #line 955 
    break;
    #line 956 
    case 10: 
             #line 956 
    ;
    #line 957 
    btc8723b2ant_coex_table(btcoexist,(_Bool)((bool)((int)force_exec) != 0),1440568797U,1524259546U,16777215U,(unsigned char)3);
    #line 959 
    break;
    #line 960 
    case 11: 
             #line 960 
    ;
    #line 961 
    btc8723b2ant_coex_table(btcoexist,(_Bool)((bool)((int)force_exec) != 0),1440568797U,1524259546U,16777215U,(unsigned char)3);
    #line 963 
    break;
    #line 964 
    case 12: 
             #line 964 
    ;
    #line 965 
    btc8723b2ant_coex_table(btcoexist,(_Bool)((bool)((int)force_exec) != 0),1440568797U,1524259546U,16777215U,(unsigned char)3);
    #line 967 
    break;
    #line 968 
    case 13: 
             #line 968 
    ;
    #line 969 
    btc8723b2ant_coex_table(btcoexist,(_Bool)((bool)((int)force_exec) != 0),1610571775U,2863311530U,16777215U,(unsigned char)3);
    #line 971 
    break;
    #line 972 
    case 14: 
             #line 972 
    ;
    #line 973 
    btc8723b2ant_coex_table(btcoexist,(_Bool)((bool)((int)force_exec) != 0),1610571775U,1524259546U,16777215U,(unsigned char)3);
    #line 975 
    break;
    #line 976 
    case 15: 
             #line 976 
    ;
    #line 977 
    btc8723b2ant_coex_table(btcoexist,(_Bool)((bool)((int)force_exec) != 0),1440568797U,2863311530U,16777215U,(unsigned char)3);
    #line 979 
    break;
    #line 980 
    default: 
             #line 980 
    ;
    #line 981 
    break;
  }
  #line 983 
  return;
}

#line 985  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b2ant.c"
static void btc8723b2ant_set_fw_ignore_wlan_act(struct btc_coexist *btcoexist, bool enable)
{
  #line 988 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 989 
  u8 h2c_parameter[1U] = {(unsigned char)0U};
  #line 991 
  if ((int)enable != 0) 
                        #line 992 
                        h2c_parameter[0] = (unsigned char)((unsigned int)h2c_parameter[0] | 1U);
  #line 994 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], set FW for BT Ignore Wlan_Act, FW write 0x63=0x%x\n",(int)h2c_parameter[0]);
  #line 998 
  (*(btcoexist->btc_fill_h2c))((void *)btcoexist,(unsigned char)99,1U,(u8 *)(& h2c_parameter));
  #line 999 
  return;
}

#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b2ant.c"
static void btc8723b2ant_set_lps_rpwm(struct btc_coexist *btcoexist, u8 lps_val, u8 rpwm_val)
{
  #line 1004 
  u8 lps = lps_val;
  #line 1005 
  u8 rpwm = rpwm_val;
  #line 1007 
  (*(btcoexist->btc_set))((void *)btcoexist,(unsigned char)18,(void *)(& lps));
  #line 1008 
  (*(btcoexist->btc_set))((void *)btcoexist,(unsigned char)19,(void *)(& rpwm));
  #line 1009 
  return;
}

#line 1011  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b2ant.c"
static void btc8723b2ant_lps_rpwm(struct btc_coexist *btcoexist, bool force_exec, u8 lps_val, u8 rpwm_val)
{
  #line 1014 
  coex_dm_3->cur_lps = lps_val;
  #line 1015 
  coex_dm_3->cur_rpwm = rpwm_val;
  #line 1017 
  if (! force_exec) 
    #line 1018 
    if ((int)coex_dm_3->pre_lps == (int)coex_dm_3->cur_lps && (int)coex_dm_3->pre_rpwm == (int)coex_dm_3->cur_rpwm) 
      #line 1020 
      return;
  #line 1022 
  btc8723b2ant_set_lps_rpwm(btcoexist,(unsigned char)((int)lps_val),(unsigned char)((int)rpwm_val));
  #line 1024 
  coex_dm_3->pre_lps = coex_dm_3->cur_lps;
  #line 1025 
  coex_dm_3->pre_rpwm = coex_dm_3->cur_rpwm;
  #line 1026 
  return;
}

#line 1028  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b2ant.c"
static void btc8723b2ant_ignore_wlan_act(struct btc_coexist *btcoexist, bool force_exec, bool enable)
{
  #line 1033 
  char *tmp;
  #line 1033 
  char *tmp_0;
  #line 1031 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 1033 
  if ((int)enable != 0) 
                        #line 1033 
                        tmp = (char *)"ON"; else 
                                                 #line 1033 
                                                 tmp = (char *)"OFF";
  #line 1033 
  if ((int)force_exec != 0) 
                            #line 1033 
                            tmp_0 = (char *)"force to"; else 
                                                             #line 1033 
                                                             tmp_0 = (char *)"";
  #line 1033 
  ;
  #line 1033 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], %s turn Ignore WlanAct %s\n",tmp_0,tmp);
  #line 1036 
  coex_dm_3->cur_ignore_wlan_act = enable;
  #line 1038 
  if (! force_exec) {
    #line 1039 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], bPreIgnoreWlanAct = %d, bCurIgnoreWlanAct = %d!!\n",(int)coex_dm_3->pre_ignore_wlan_act,(int)coex_dm_3->cur_ignore_wlan_act);
    #line 1044 
    if ((int)coex_dm_3->pre_ignore_wlan_act == (int)coex_dm_3->cur_ignore_wlan_act) 
      #line 1046 
      return;
  }
  #line 1048 
  btc8723b2ant_set_fw_ignore_wlan_act(btcoexist,(_Bool)((bool)((int)enable) != 0));
  #line 1050 
  coex_dm_3->pre_ignore_wlan_act = coex_dm_3->cur_ignore_wlan_act;
  #line 1051 
  return;
}

#line 1053  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b2ant.c"
static void btc8723b2ant_set_fw_ps_tdma(struct btc_coexist *btcoexist, u8 byte1, u8 byte2, u8 byte3, u8 byte4, u8 byte5)
{
  #line 1057 
  u8 h2c_parameter[5U];
  #line 1056 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 1058 
  if ((int)coex_sta_3->a2dp_exist != 0 && (int)coex_sta_3->hid_exist != 0) 
    #line 1059 
    byte5 = (unsigned char)((unsigned int)byte5 | 1U);
  #line 1061 
  h2c_parameter[0] = byte1;
  #line 1062 
  h2c_parameter[1] = byte2;
  #line 1063 
  h2c_parameter[2] = byte3;
  #line 1064 
  h2c_parameter[3] = byte4;
  #line 1065 
  h2c_parameter[4] = byte5;
  #line 1067 
  coex_dm_3->ps_tdma_para[0] = byte1;
  #line 1068 
  coex_dm_3->ps_tdma_para[1] = byte2;
  #line 1069 
  coex_dm_3->ps_tdma_para[2] = byte3;
  #line 1070 
  coex_dm_3->ps_tdma_para[3] = byte4;
  #line 1071 
  coex_dm_3->ps_tdma_para[4] = byte5;
  #line 1073 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], FW write 0x60(5bytes)=0x%x%08x\n",(int)h2c_parameter[0],((((int)h2c_parameter[1] << 24) | ((int)h2c_parameter[2] << 16)) | ((int)h2c_parameter[3] << 8)) | (int)h2c_parameter[4]);
  #line 1079 
  (*(btcoexist->btc_fill_h2c))((void *)btcoexist,(unsigned char)96,5U,(u8 *)(& h2c_parameter));
  #line 1080 
  return;
}

#line 1082  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b2ant.c"
static void btc8723b2ant_sw_mechanism(struct btc_coexist *btcoexist, bool shrink_rx_lpf, bool low_penalty_ra, bool limited_dig, bool bt_lna_constrain)
{
  #line 1086 
  btc8723b2ant_low_penalty_ra(btcoexist,(_Bool)0,(_Bool)((bool)((int)low_penalty_ra) != 0));
  #line 1087 
  return;
}

#line 1089  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b2ant.c"
static void btc8723b2ant_set_ant_path(struct btc_coexist *btcoexist, u8 antpos_type, bool init_hwcfg, bool wifi_off)
{
  #line 1093 
  struct btc_board_info *board_info = & btcoexist->board_info;
  #line 1094 
  u32 fw_ver = 0U;
  #line 1094 
  u32 u32tmp = 0U;
  #line 1095 
  bool pg_ext_switch = (_Bool)0;
  #line 1096 
  bool use_ext_switch = (_Bool)0;
  #line 1097 
  u8 h2c_parameter[2U] = {(unsigned char)0U};
  #line 1099 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)17,(void *)(& pg_ext_switch));
  #line 1100 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)26,(void *)(& fw_ver));
  #line 1102 
  if (fw_ver <= 786431U || (int)pg_ext_switch != 0) 
                                                    #line 1103 
                                                    use_ext_switch = (_Bool)1;
  #line 1105 
  if ((int)init_hwcfg != 0) {
    #line 1106 
    (*(btcoexist->btc_write_1byte_bitmask))((void *)btcoexist,57U,8U,(unsigned char)1);
    #line 1107 
    (*(btcoexist->btc_write_1byte))((void *)btcoexist,2420U,255U);
    #line 1108 
    (*(btcoexist->btc_write_1byte_bitmask))((void *)btcoexist,2372U,3U,(unsigned char)3);
    #line 1109 
    (*(btcoexist->btc_write_1byte))((void *)btcoexist,2352U,119U);
    #line 1110 
    (*(btcoexist->btc_write_1byte_bitmask))((void *)btcoexist,103U,32U,(unsigned char)1);
    #line 1112 
    if (fw_ver > 1572863U) {
      #line 1114 
      h2c_parameter[0] = (unsigned char)1U;
      #line 1115 
      (*(btcoexist->btc_fill_h2c))((void *)btcoexist,(unsigned char)110,1U,(u8 *)(& h2c_parameter));
    }
    else 
         #line 1118 
         (*(btcoexist->btc_write_1byte))((void *)btcoexist,1893U,24U);
    #line 1121 
    (*(btcoexist->btc_write_4byte))((void *)btcoexist,2376U,0U);
    #line 1124 
    (*(btcoexist->btc_set_rf_reg))((void *)btcoexist,(unsigned char)0,1U,1048575U,0U);
    #line 1127 
    if ((unsigned int)board_info->btdm_ant_pos == 1U) 
                                                      #line 1129 
                                                      h2c_parameter[0] = (unsigned char)0U; else 
                                                                    #line 1132 
                                                                    h2c_parameter[0] = (unsigned char)1U;
    #line 1135 
    if ((int)use_ext_switch != 0) 
                                  #line 1137 
                                  h2c_parameter[1] = (unsigned char)1U; else 
                                                                    #line 1140 
                                                                    h2c_parameter[1] = (unsigned char)0U;
    #line 1142 
    (*(btcoexist->btc_fill_h2c))((void *)btcoexist,(unsigned char)101,2U,(u8 *)(& h2c_parameter));
  }
  else 
    #line 1144 
    if (fw_ver > 1572863U) {
      #line 1146 
      h2c_parameter[0] = (unsigned char)0U;
      #line 1147 
      (*(btcoexist->btc_fill_h2c))((void *)btcoexist,(unsigned char)110,1U,(u8 *)(& h2c_parameter));
    }
    else 
         #line 1150 
         (*(btcoexist->btc_write_1byte))((void *)btcoexist,1893U,0U);
  #line 1155 
  if ((int)use_ext_switch != 0) {
    #line 1156 
    if ((int)init_hwcfg != 0) {
      #line 1158 
      u32tmp = (*(btcoexist->btc_read_4byte))((void *)btcoexist,76U);
      #line 1159 
      u32tmp &= 4286578687U;
      #line 1160 
      u32tmp |= 16777216U;
      #line 1161 
      (*(btcoexist->btc_write_4byte))((void *)btcoexist,76U,u32tmp);
    }
    #line 1165 
    if ((unsigned int)board_info->btdm_ant_pos == 1U) 
                                                      #line 1166 
                                                      (*(btcoexist->btc_write_2byte))((void *)btcoexist,2376U,(unsigned short)0); else 
                                                                    #line 1168 
                                                                    (*(btcoexist->btc_write_2byte))((void *)btcoexist,2376U,(unsigned short)640);
    #line 1170 
    switch ((int)antpos_type) {
      #line 1171 
      case 0: 
              #line 1171 
      ;
      #line 1173 
      (*(btcoexist->btc_write_1byte_bitmask))((void *)btcoexist,2348U,3U,(unsigned char)1);
      #line 1175 
      break;
      #line 1176 
      case 1: 
              #line 1176 
      ;
      #line 1178 
      (*(btcoexist->btc_write_1byte_bitmask))((void *)btcoexist,2348U,3U,(unsigned char)2);
      #line 1180 
      break;
    }
  }
  else {
    #line 1184 
    if ((int)init_hwcfg != 0) {
      #line 1186 
      u32tmp = (*(btcoexist->btc_read_4byte))((void *)btcoexist,76U);
      #line 1187 
      u32tmp |= 8388608U;
      #line 1188 
      u32tmp &= 4278190079U;
      #line 1189 
      (*(btcoexist->btc_write_4byte))((void *)btcoexist,76U,u32tmp);
    }
    #line 1193 
    (*(btcoexist->btc_write_1byte_bitmask))((void *)btcoexist,100U,1U,(unsigned char)0);
    #line 1194 
    switch ((int)antpos_type) {
      #line 1195 
      case 0: 
              #line 1195 
      ;
      #line 1197 
      (*(btcoexist->btc_write_2byte))((void *)btcoexist,2376U,(unsigned short)0);
      #line 1198 
      break;
      #line 1199 
      case 1: 
              #line 1199 
      ;
      #line 1201 
      (*(btcoexist->btc_write_2byte))((void *)btcoexist,2376U,(unsigned short)640);
      #line 1202 
      break;
    }
  }
  #line 1205 
  return;
}

#line 1207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b2ant.c"
static void btc8723b2ant_ps_tdma(struct btc_coexist *btcoexist, bool force_exec, bool turn_on, u8 type)
{
  #line 1212 
  u8 wifi_rssi_state;
  #line 1212 
  u8 bt_rssi_state;
  #line 1223 
  char *tmp_0;
  #line 1223 
  char *tmp_1;
  #line 1210 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 1211 
  struct btc_bt_link_info *bt_link_info = & btcoexist->bt_link_info;
  #line 1213 
  s8 wifi_duration_adjust = (signed char)0;
  #line 1214 
  u8 tdma_byte4_modify = (unsigned char)0U;
  #line 1215 
  u8 tmp = (unsigned char)(42U - (unsigned int)coex_dm_3->switch_thres_offset);
  #line 1218 
  wifi_rssi_state = btc8723b2ant_wifi_rssi_state(btcoexist,(unsigned char)0,(unsigned char)2,(unsigned char)((int)tmp),(unsigned char)0);
  #line 1219 
  tmp = (unsigned char)(46U - (unsigned int)coex_dm_3->switch_thres_offset);
  #line 1221 
  bt_rssi_state = btc8723b2ant_bt_rssi_state(btcoexist,(unsigned char)2,(unsigned char)((int)tmp),(unsigned char)0);
  #line 1223 
  ;
  #line 1223 
  if ((int)turn_on != 0) 
                         #line 1223 
                         tmp_0 = (char *)"ON"; else 
                                                    #line 1223 
                                                    tmp_0 = (char *)"OFF";
  #line 1223 
  if ((int)force_exec != 0) 
                            #line 1223 
                            tmp_1 = (char *)"force to"; else 
                                                             #line 1223 
                                                             tmp_1 = (char *)"";
  #line 1223 
  ;
  #line 1223 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], %s turn %s PS TDMA, type=%d\n",tmp_1,tmp_0,(int)type);
  #line 1227 
  coex_dm_3->cur_ps_tdma_on = turn_on;
  #line 1228 
  coex_dm_3->cur_ps_tdma = type;
  #line 1230 
  if (((unsigned int)wifi_rssi_state != 0U && (unsigned int)wifi_rssi_state != 3U || (unsigned int)bt_rssi_state != 0U && (unsigned int)bt_rssi_state != 3U) && (int)turn_on != 0) {
    #line 1233 
    type = (unsigned char)((unsigned int)type + 100U);
    #line 1234 
    coex_dm_3->is_switch_to_1dot5_ant = (_Bool)1;
  }
  else 
       #line 1236 
       coex_dm_3->is_switch_to_1dot5_ant = (_Bool)0;
  #line 1239 
  if (! force_exec) {
    #line 1240 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], bPrePsTdmaOn = %d, bCurPsTdmaOn = %d!!\n",(int)coex_dm_3->pre_ps_tdma_on,(int)coex_dm_3->cur_ps_tdma_on);
    #line 1243 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], prePsTdma = %d, curPsTdma = %d!!\n",(int)coex_dm_3->pre_ps_tdma,(int)coex_dm_3->cur_ps_tdma);
    #line 1247 
    if ((int)coex_dm_3->pre_ps_tdma_on == (int)coex_dm_3->cur_ps_tdma_on && (int)coex_dm_3->pre_ps_tdma == (int)coex_dm_3->cur_ps_tdma) 
      #line 1249 
      return;
  }
  #line 1252 
  if ((unsigned int)coex_sta_3->scan_ap_num <= 5U) 
    #line 1253 
    if ((unsigned int)coex_sta_3->a2dp_bit_pool > 44U) 
                                                       #line 1254 
                                                       wifi_duration_adjust = (signed char)(-15);
    else 
      #line 1255 
      if ((unsigned int)coex_sta_3->a2dp_bit_pool > 34U) 
                                                         #line 1256 
                                                         wifi_duration_adjust = (signed char)(-10); else 
                                                                    #line 1258 
                                                                    wifi_duration_adjust = (signed char)5;
  else 
    #line 1259 
    if ((unsigned int)coex_sta_3->scan_ap_num <= 20U) 
      #line 1260 
      if ((unsigned int)coex_sta_3->a2dp_bit_pool > 44U) 
                                                         #line 1261 
                                                         wifi_duration_adjust = (signed char)(-15);
      else 
        #line 1262 
        if ((unsigned int)coex_sta_3->a2dp_bit_pool > 34U) 
                                                           #line 1263 
                                                           wifi_duration_adjust = (signed char)(-10); else 
                                                                    #line 1265 
                                                                    wifi_duration_adjust = (signed char)0;
    else 
      #line 1266 
      if ((unsigned int)coex_sta_3->scan_ap_num <= 40U) 
        #line 1267 
        if ((unsigned int)coex_sta_3->a2dp_bit_pool > 44U) 
                                                           #line 1268 
                                                           wifi_duration_adjust = (signed char)(-15);
        else 
          #line 1269 
          if ((unsigned int)coex_sta_3->a2dp_bit_pool > 34U) 
                                                             #line 1270 
                                                             wifi_duration_adjust = (signed char)(-10); else 
                                                                    #line 1272 
                                                                    wifi_duration_adjust = (signed char)(-5);
      else 
        #line 1274 
        if ((unsigned int)coex_sta_3->a2dp_bit_pool > 44U) 
                                                           #line 1275 
                                                           wifi_duration_adjust = (signed char)(-15);
        else 
          #line 1276 
          if ((unsigned int)coex_sta_3->a2dp_bit_pool > 34U) 
                                                             #line 1277 
                                                             wifi_duration_adjust = (signed char)(-10); else 
                                                                    #line 1279 
                                                                    wifi_duration_adjust = (signed char)(-10);
  #line 1282 
  if ((int)bt_link_info->slave_role != 0 && (int)bt_link_info->a2dp_exist != 0) 
    #line 1284 
    tdma_byte4_modify = (unsigned char)1U;
  #line 1286 
  if ((int)turn_on != 0) 
    #line 1287 
    switch ((int)type) {
      #line 1288 
      case 1: 
              #line 1288 
      ;
      #line 1289 
      default: 
               #line 1289 
      ;
      #line 1290 
      btc8723b2ant_set_fw_ps_tdma(btcoexist,(unsigned char)227,(unsigned char)60,(unsigned char)3,(unsigned char)241,(unsigned char)((int)((unsigned int)tdma_byte4_modify | 144U)));
      #line 1293 
      break;
      #line 1294 
      case 2: 
              #line 1294 
      ;
      #line 1295 
      btc8723b2ant_set_fw_ps_tdma(btcoexist,(unsigned char)227,(unsigned char)45,(unsigned char)3,(unsigned char)241,(unsigned char)((int)((unsigned int)tdma_byte4_modify | 144U)));
      #line 1298 
      break;
      #line 1299 
      case 3: 
              #line 1299 
      ;
      #line 1300 
      btc8723b2ant_set_fw_ps_tdma(btcoexist,(unsigned char)227,(unsigned char)28,(unsigned char)3,(unsigned char)241,(unsigned char)((int)((unsigned int)tdma_byte4_modify | 144U)));
      #line 1303 
      break;
      #line 1304 
      case 4: 
              #line 1304 
      ;
      #line 1305 
      btc8723b2ant_set_fw_ps_tdma(btcoexist,(unsigned char)227,(unsigned char)16,(unsigned char)3,(unsigned char)241,(unsigned char)((int)((unsigned int)tdma_byte4_modify | 144U)));
      #line 1308 
      break;
      #line 1309 
      case 5: 
              #line 1309 
      ;
      #line 1310 
      btc8723b2ant_set_fw_ps_tdma(btcoexist,(unsigned char)227,(unsigned char)60,(unsigned char)3,(unsigned char)112,(unsigned char)((int)((unsigned int)tdma_byte4_modify | 144U)));
      #line 1313 
      break;
      #line 1314 
      case 6: 
              #line 1314 
      ;
      #line 1315 
      btc8723b2ant_set_fw_ps_tdma(btcoexist,(unsigned char)227,(unsigned char)45,(unsigned char)3,(unsigned char)112,(unsigned char)((int)((unsigned int)tdma_byte4_modify | 144U)));
      #line 1318 
      break;
      #line 1319 
      case 7: 
              #line 1319 
      ;
      #line 1320 
      btc8723b2ant_set_fw_ps_tdma(btcoexist,(unsigned char)227,(unsigned char)28,(unsigned char)3,(unsigned char)112,(unsigned char)((int)((unsigned int)tdma_byte4_modify | 144U)));
      #line 1323 
      break;
      #line 1324 
      case 8: 
              #line 1324 
      ;
      #line 1325 
      btc8723b2ant_set_fw_ps_tdma(btcoexist,(unsigned char)163,(unsigned char)16,(unsigned char)3,(unsigned char)112,(unsigned char)((int)((unsigned int)tdma_byte4_modify | 144U)));
      #line 1328 
      break;
      #line 1329 
      case 9: 
              #line 1329 
      ;
      #line 1330 
      btc8723b2ant_set_fw_ps_tdma(btcoexist,(unsigned char)227,(unsigned char)((int)((unsigned int)((unsigned char)wifi_duration_adjust) + 60U)),(unsigned char)3,(unsigned char)241,(unsigned char)((int)((unsigned int)tdma_byte4_modify | 144U)));
      #line 1333 
      break;
      #line 1334 
      case 10: 
               #line 1334 
      ;
      #line 1335 
      btc8723b2ant_set_fw_ps_tdma(btcoexist,(unsigned char)227,(unsigned char)45,(unsigned char)3,(unsigned char)241,(unsigned char)((int)((unsigned int)tdma_byte4_modify | 144U)));
      #line 1338 
      break;
      #line 1339 
      case 11: 
               #line 1339 
      ;
      #line 1340 
      btc8723b2ant_set_fw_ps_tdma(btcoexist,(unsigned char)227,(unsigned char)28,(unsigned char)3,(unsigned char)241,(unsigned char)((int)((unsigned int)tdma_byte4_modify | 144U)));
      #line 1343 
      break;
      #line 1344 
      case 12: 
               #line 1344 
      ;
      #line 1345 
      btc8723b2ant_set_fw_ps_tdma(btcoexist,(unsigned char)227,(unsigned char)16,(unsigned char)3,(unsigned char)241,(unsigned char)((int)((unsigned int)tdma_byte4_modify | 144U)));
      #line 1348 
      break;
      #line 1349 
      case 13: 
               #line 1349 
      ;
      #line 1350 
      btc8723b2ant_set_fw_ps_tdma(btcoexist,(unsigned char)227,(unsigned char)60,(unsigned char)3,(unsigned char)112,(unsigned char)((int)((unsigned int)tdma_byte4_modify | 144U)));
      #line 1353 
      break;
      #line 1354 
      case 14: 
               #line 1354 
      ;
      #line 1355 
      btc8723b2ant_set_fw_ps_tdma(btcoexist,(unsigned char)227,(unsigned char)45,(unsigned char)3,(unsigned char)112,(unsigned char)((int)((unsigned int)tdma_byte4_modify | 144U)));
      #line 1358 
      break;
      #line 1359 
      case 15: 
               #line 1359 
      ;
      #line 1360 
      btc8723b2ant_set_fw_ps_tdma(btcoexist,(unsigned char)227,(unsigned char)28,(unsigned char)3,(unsigned char)112,(unsigned char)((int)((unsigned int)tdma_byte4_modify | 144U)));
      #line 1363 
      break;
      #line 1364 
      case 16: 
               #line 1364 
      ;
      #line 1365 
      btc8723b2ant_set_fw_ps_tdma(btcoexist,(unsigned char)227,(unsigned char)16,(unsigned char)3,(unsigned char)112,(unsigned char)((int)((unsigned int)tdma_byte4_modify | 144U)));
      #line 1368 
      break;
      #line 1369 
      case 17: 
               #line 1369 
      ;
      #line 1370 
      btc8723b2ant_set_fw_ps_tdma(btcoexist,(unsigned char)163,(unsigned char)47,(unsigned char)47,(unsigned char)96,(unsigned char)144);
      #line 1372 
      break;
      #line 1373 
      case 18: 
               #line 1373 
      ;
      #line 1374 
      btc8723b2ant_set_fw_ps_tdma(btcoexist,(unsigned char)227,(unsigned char)5,(unsigned char)5,(unsigned char)225,(unsigned char)144);
      #line 1376 
      break;
      #line 1377 
      case 19: 
               #line 1377 
      ;
      #line 1378 
      btc8723b2ant_set_fw_ps_tdma(btcoexist,(unsigned char)227,(unsigned char)37,(unsigned char)37,(unsigned char)225,(unsigned char)144);
      #line 1380 
      break;
      #line 1381 
      case 20: 
               #line 1381 
      ;
      #line 1382 
      btc8723b2ant_set_fw_ps_tdma(btcoexist,(unsigned char)227,(unsigned char)37,(unsigned char)37,(unsigned char)96,(unsigned char)144);
      #line 1384 
      break;
      #line 1385 
      case 21: 
               #line 1385 
      ;
      #line 1386 
      btc8723b2ant_set_fw_ps_tdma(btcoexist,(unsigned char)227,(unsigned char)21,(unsigned char)3,(unsigned char)112,(unsigned char)144);
      #line 1388 
      break;
      #line 1390 
      case 23: 
               #line 1390 
      ;
      #line 1391 
      case 123: 
                #line 1391 
      ;
      #line 1392 
      btc8723b2ant_set_fw_ps_tdma(btcoexist,(unsigned char)227,(unsigned char)53,(unsigned char)3,(unsigned char)113,(unsigned char)16);
      #line 1394 
      break;
      #line 1395 
      case 71: 
               #line 1395 
      ;
      #line 1396 
      btc8723b2ant_set_fw_ps_tdma(btcoexist,(unsigned char)227,(unsigned char)((int)((unsigned int)((unsigned char)wifi_duration_adjust) + 60U)),(unsigned char)3,(unsigned char)241,(unsigned char)144);
      #line 1399 
      break;
      #line 1400 
      case 101: 
                #line 1400 
      ;
      #line 1401 
      case 105: 
                #line 1401 
      ;
      #line 1402 
      case 113: 
                #line 1402 
      ;
      #line 1403 
      case 171: 
                #line 1403 
      ;
      #line 1404 
      btc8723b2ant_set_fw_ps_tdma(btcoexist,(unsigned char)211,(unsigned char)((int)((unsigned int)((unsigned char)wifi_duration_adjust) + 58U)),(unsigned char)3,(unsigned char)112,(unsigned char)((int)((unsigned int)tdma_byte4_modify | 80U)));
      #line 1407 
      break;
      #line 1408 
      case 102: 
                #line 1408 
      ;
      #line 1409 
      case 106: 
                #line 1409 
      ;
      #line 1410 
      case 110: 
                #line 1410 
      ;
      #line 1411 
      case 114: 
                #line 1411 
      ;
      #line 1412 
      btc8723b2ant_set_fw_ps_tdma(btcoexist,(unsigned char)211,(unsigned char)((int)((unsigned int)((unsigned char)wifi_duration_adjust) + 45U)),(unsigned char)3,(unsigned char)112,(unsigned char)((int)((unsigned int)tdma_byte4_modify | 80U)));
      #line 1415 
      break;
      #line 1416 
      case 103: 
                #line 1416 
      ;
      #line 1417 
      case 107: 
                #line 1417 
      ;
      #line 1418 
      case 111: 
                #line 1418 
      ;
      #line 1419 
      case 115: 
                #line 1419 
      ;
      #line 1420 
      btc8723b2ant_set_fw_ps_tdma(btcoexist,(unsigned char)211,(unsigned char)28,(unsigned char)3,(unsigned char)112,(unsigned char)((int)((unsigned int)tdma_byte4_modify | 80U)));
      #line 1423 
      break;
      #line 1424 
      case 104: 
                #line 1424 
      ;
      #line 1425 
      case 108: 
                #line 1425 
      ;
      #line 1426 
      case 112: 
                #line 1426 
      ;
      #line 1427 
      case 116: 
                #line 1427 
      ;
      #line 1428 
      btc8723b2ant_set_fw_ps_tdma(btcoexist,(unsigned char)211,(unsigned char)16,(unsigned char)3,(unsigned char)112,(unsigned char)((int)((unsigned int)tdma_byte4_modify | 80U)));
      #line 1431 
      break;
      #line 1432 
      case 109: 
                #line 1432 
      ;
      #line 1433 
      btc8723b2ant_set_fw_ps_tdma(btcoexist,(unsigned char)227,(unsigned char)60,(unsigned char)3,(unsigned char)241,(unsigned char)((int)((unsigned int)tdma_byte4_modify | 144U)));
      #line 1436 
      break;
      #line 1437 
      case 121: 
                #line 1437 
      ;
      #line 1438 
      btc8723b2ant_set_fw_ps_tdma(btcoexist,(unsigned char)227,(unsigned char)21,(unsigned char)3,(unsigned char)112,(unsigned char)((int)((unsigned int)tdma_byte4_modify | 144U)));
      #line 1441 
      break;
      #line 1442 
      case 22: 
               #line 1442 
      ;
      #line 1443 
      case 122: 
                #line 1443 
      ;
      #line 1444 
      btc8723b2ant_set_fw_ps_tdma(btcoexist,(unsigned char)227,(unsigned char)53,(unsigned char)3,(unsigned char)113,(unsigned char)17);
      #line 1446 
      break;
    }
  else 
    #line 1450 
    switch ((int)type) {
      #line 1451 
      case 0: 
              #line 1451 
      ;
      #line 1452 
      btc8723b2ant_set_fw_ps_tdma(btcoexist,(unsigned char)0,(unsigned char)0,(unsigned char)0,(unsigned char)64,(unsigned char)0);
      #line 1454 
      break;
      #line 1455 
      case 1: 
              #line 1455 
      ;
      #line 1456 
      btc8723b2ant_set_fw_ps_tdma(btcoexist,(unsigned char)0,(unsigned char)0,(unsigned char)0,(unsigned char)72,(unsigned char)0);
      #line 1458 
      break;
      #line 1459 
      default: 
               #line 1459 
      ;
      #line 1460 
      btc8723b2ant_set_fw_ps_tdma(btcoexist,(unsigned char)0,(unsigned char)0,(unsigned char)0,(unsigned char)64,(unsigned char)0);
      #line 1462 
      break;
    }
  #line 1467 
  coex_dm_3->pre_ps_tdma_on = coex_dm_3->cur_ps_tdma_on;
  #line 1468 
  coex_dm_3->pre_ps_tdma = coex_dm_3->cur_ps_tdma;
  #line 1469 
  return;
}

#line 1471  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b2ant.c"
static void btc8723b2ant_ps_tdma_check_for_power_save_state(struct btc_coexist *btcoexist, bool new_ps_state)
{
  #line 1474 
  u8 lps_mode = (unsigned char)0U;
  #line 1476 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)44,(void *)(& lps_mode));
  #line 1478 
  if ((unsigned int)lps_mode != 0U) {
    #line 1480 
    if (! ((int)new_ps_state != 0)) 
                                    #line 1484 
                                    btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)0,(unsigned char)1);
  }
  else 
    #line 1488 
    if ((int)new_ps_state != 0) 
                                #line 1490 
                                btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)0,(unsigned char)1);
  #line 1495 
  return;
}

#line 1497  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b2ant.c"
static void btc8723b2ant_power_save_state(struct btc_coexist *btcoexist, u8 ps_type, u8 lps_val, u8 rpwm_val)
{
  #line 1500 
  bool low_pwr_disable = (_Bool)0;
  #line 1502 
  switch ((int)ps_type) {
    #line 1503 
    case 0: 
            #line 1503 
    ;
    #line 1505 
    low_pwr_disable = (_Bool)0;
    #line 1506 
    (*(btcoexist->btc_set))((void *)btcoexist,(unsigned char)28,(void *)(& low_pwr_disable));
    #line 1508 
    (*(btcoexist->btc_set))((void *)btcoexist,(unsigned char)24,(void *)0);
    #line 1509 
    coex_sta_3->force_lps_on = (_Bool)0;
    #line 1510 
    break;
    #line 1511 
    case 1: 
            #line 1511 
    ;
    #line 1512 
    btc8723b2ant_ps_tdma_check_for_power_save_state(btcoexist,(_Bool)1);
    #line 1514 
    btc8723b2ant_lps_rpwm(btcoexist,(_Bool)0,(unsigned char)((int)lps_val),(unsigned char)((int)rpwm_val));
    #line 1517 
    low_pwr_disable = (_Bool)1;
    #line 1518 
    (*(btcoexist->btc_set))((void *)btcoexist,(unsigned char)28,(void *)(& low_pwr_disable));
    #line 1521 
    (*(btcoexist->btc_set))((void *)btcoexist,(unsigned char)23,(void *)0);
    #line 1522 
    coex_sta_3->force_lps_on = (_Bool)1;
    #line 1523 
    break;
    #line 1524 
    case 2: 
            #line 1524 
    ;
    #line 1525 
    btc8723b2ant_ps_tdma_check_for_power_save_state(btcoexist,(_Bool)0);
    #line 1527 
    (*(btcoexist->btc_set))((void *)btcoexist,(unsigned char)22,(void *)0);
    #line 1528 
    coex_sta_3->force_lps_on = (_Bool)0;
    #line 1529 
    break;
    #line 1530 
    default: 
             #line 1530 
    ;
    #line 1531 
    break;
  }
  #line 1533 
  return;
}

#line 1535  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b2ant.c"
static void btc8723b2ant_coex_alloff(struct btc_coexist *btcoexist)
{
  #line 1538 
  btc8723b2ant_power_save_state(btcoexist,(unsigned char)0,(unsigned char)0,(unsigned char)0);
  #line 1539 
  btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)0,(unsigned char)1);
  #line 1540 
  btc8723b2ant_fw_dac_swing_lvl(btcoexist,(_Bool)0,(unsigned char)6);
  #line 1541 
  btc8723b2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)0);
  #line 1544 
  btc8723b2ant_sw_mechanism(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,(_Bool)0);
  #line 1547 
  (*(btcoexist->btc_set_rf_reg))((void *)btcoexist,(unsigned char)0,1U,1048575U,0U);
  #line 1548 
  btc8723b2ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)0);
  #line 1549 
  return;
}

#line 1551  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b2ant.c"
static void btc8723b2ant_init_coex_dm(struct btc_coexist *btcoexist)
{
  #line 1554 
  btc8723b2ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)0);
  #line 1555 
  btc8723b2ant_power_save_state(btcoexist,(unsigned char)0,(unsigned char)0,(unsigned char)0);
  #line 1557 
  btc8723b2ant_ps_tdma(btcoexist,(_Bool)1,(_Bool)0,(unsigned char)1);
  #line 1558 
  btc8723b2ant_fw_dac_swing_lvl(btcoexist,(_Bool)1,(unsigned char)6);
  #line 1559 
  btc8723b2ant_dec_bt_pwr(btcoexist,(_Bool)1,(unsigned char)0);
  #line 1561 
  btc8723b2ant_sw_mechanism(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,(_Bool)0);
  #line 1563 
  coex_sta_3->pop_event_cnt = 0U;
  #line 1564 
  return;
}

#line 1566  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b2ant.c"
static void btc8723b2ant_action_bt_inquiry(struct btc_coexist *btcoexist)
{
  #line 1568 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 1569 
  bool wifi_connected = (_Bool)0;
  #line 1570 
  bool low_pwr_disable = (_Bool)1;
  #line 1571 
  bool scan = (_Bool)0;
  #line 1571 
  bool link = (_Bool)0;
  #line 1571 
  bool roam = (_Bool)0;
  #line 1573 
  (*(btcoexist->btc_set))((void *)btcoexist,(unsigned char)28,(void *)(& low_pwr_disable));
  #line 1575 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)2,(void *)(& wifi_connected));
  #line 1578 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)5,(void *)(& scan));
  #line 1579 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)6,(void *)(& link));
  #line 1580 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)11,(void *)(& roam));
  #line 1582 
  btc8723b2ant_power_save_state(btcoexist,(unsigned char)0,(unsigned char)0,(unsigned char)0);
  #line 1584 
  if ((int)coex_sta_3->bt_abnormal_scan != 0) {
    #line 1585 
    btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)23);
    #line 1586 
    btc8723b2ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)3);
  }
  else 
    #line 1587 
    if (((int)scan != 0 || (int)link != 0) || (int)roam != 0) {
      #line 1588 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Wifi link process + BT Inq/Page!!\n");
      #line 1590 
      btc8723b2ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)15);
      #line 1591 
      btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)22);
    }
    else 
      #line 1592 
      if ((int)wifi_connected != 0) {
        #line 1593 
        _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Wifi connected + BT Inq/Page!!\n");
        #line 1595 
        btc8723b2ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)15);
        #line 1596 
        btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)22);
      }
      else {
        #line 1598 
        btc8723b2ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)0);
        #line 1599 
        btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)0,(unsigned char)1);
      }
  #line 1601 
  btc8723b2ant_fw_dac_swing_lvl(btcoexist,(_Bool)1,(unsigned char)6);
  #line 1602 
  btc8723b2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)0);
  #line 1604 
  btc8723b2ant_sw_mechanism(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,(_Bool)0);
  #line 1605 
  return;
}

#line 1607  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b2ant.c"
static void btc8723b2ant_action_wifi_link_process(struct btc_coexist *btcoexist)
{
  #line 1611 
  u32 u32tmp;
  #line 1612 
  u8 u8tmpa;
  #line 1612 
  u8 u8tmpb;
  #line 1610 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 1614 
  btc8723b2ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)15);
  #line 1615 
  btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)22);
  #line 1617 
  btc8723b2ant_sw_mechanism(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,(_Bool)0);
  #line 1619 
  u32tmp = (*(btcoexist->btc_read_4byte))((void *)btcoexist,2376U);
  #line 1620 
  u8tmpa = (*(btcoexist->btc_read_1byte))((void *)btcoexist,1893U);
  #line 1621 
  u8tmpb = (*(btcoexist->btc_read_1byte))((void *)btcoexist,1902U);
  #line 1623 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], 0x948 = 0x%x, 0x765 = 0x%x, 0x76e = 0x%x\n",u32tmp,(int)u8tmpa,(int)u8tmpb);
  #line 1624 
  return;
}

#line 1628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b2ant.c"
static bool btc8723b2ant_action_wifi_idle_process(struct btc_coexist *btcoexist)
{
  #line 1631 
  u8 wifi_rssi_state;
  #line 1631 
  u8 wifi_rssi_state1;
  #line 1631 
  u8 bt_rssi_state;
  #line 1630 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 1632 
  u8 ap_num = (unsigned char)0U;
  #line 1633 
  u8 tmp = (unsigned char)((21U - (unsigned int)coex_dm_3->switch_thres_offset) * 2U);
  #line 1636 
  wifi_rssi_state = btc8723b2ant_wifi_rssi_state(btcoexist,(unsigned char)0,(unsigned char)2,(unsigned char)15,(unsigned char)0);
  #line 1637 
  wifi_rssi_state1 = btc8723b2ant_wifi_rssi_state(btcoexist,(unsigned char)1,(unsigned char)2,(unsigned char)((int)tmp),(unsigned char)0);
  #line 1639 
  tmp = (unsigned char)((23U - (unsigned int)coex_dm_3->switch_thres_offset) * 2U);
  #line 1641 
  bt_rssi_state = btc8723b2ant_bt_rssi_state(btcoexist,(unsigned char)2,(unsigned char)((int)tmp),(unsigned char)0);
  #line 1643 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)41,(void *)(& ap_num));
  #line 1646 
  if ((((unsigned int)wifi_rssi_state1 == 0U || (unsigned int)wifi_rssi_state1 == 3U) && (int)coex_sta_3->hid_exist != 0) && (int)coex_sta_3->a2dp_exist != 0) {
    #line 1648 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Wifi  idle process for BT HID+A2DP exist!!\n");
    #line 1651 
    btc8723b2ant_dac_swing(btcoexist,(_Bool)0,(_Bool)1,6U);
    #line 1652 
    btc8723b2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)0);
    #line 1655 
    btc8723b2ant_sw_mechanism(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,(_Bool)0);
    #line 1657 
    btc8723b2ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)0);
    #line 1658 
    btc8723b2ant_power_save_state(btcoexist,(unsigned char)0,(unsigned char)0,(unsigned char)0);
    #line 1660 
    btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)0,(unsigned char)1);
    #line 1662 
    return (_Bool)1;
  }
  #line 1665 
  btc8723b2ant_dac_swing(btcoexist,(_Bool)0,(_Bool)1,24U);
  #line 1666 
  return (_Bool)0;
}

#line 1669  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b2ant.c"
static bool btc8723b2ant_is_common_action(struct btc_coexist *btcoexist)
{
  #line 1671 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 1672 
  bool common = (_Bool)0;
  #line 1672 
  bool wifi_connected = (_Bool)0;
  #line 1673 
  bool wifi_busy = (_Bool)0;
  #line 1674 
  bool bt_hs_on = (_Bool)0;
  #line 1674 
  bool low_pwr_disable = (_Bool)0;
  #line 1676 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)0,(void *)(& bt_hs_on));
  #line 1677 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)2,(void *)(& wifi_connected));
  #line 1679 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)4,(void *)(& wifi_busy));
  #line 1681 
  if (! wifi_connected) {
    #line 1682 
    low_pwr_disable = (_Bool)0;
    #line 1683 
    (*(btcoexist->btc_set))((void *)btcoexist,(unsigned char)28,(void *)(& low_pwr_disable));
    #line 1685 
    btc8723b2ant_limited_rx(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,(unsigned char)8);
    #line 1688 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Wifi non-connected idle!!\n");
    #line 1691 
    (*(btcoexist->btc_set_rf_reg))((void *)btcoexist,(unsigned char)0,1U,1048575U,0U);
    #line 1693 
    btc8723b2ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)0);
    #line 1694 
    btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)0,(unsigned char)1);
    #line 1695 
    btc8723b2ant_fw_dac_swing_lvl(btcoexist,(_Bool)0,(unsigned char)6);
    #line 1696 
    btc8723b2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)0);
    #line 1698 
    btc8723b2ant_sw_mechanism(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,(_Bool)0);
    #line 1701 
    common = (_Bool)1;
  }
  else 
    #line 1703 
    if ((unsigned int)coex_dm_3->bt_status == 0U) {
      #line 1705 
      low_pwr_disable = (_Bool)0;
      #line 1706 
      (*(btcoexist->btc_set))((void *)btcoexist,(unsigned char)28,(void *)(& low_pwr_disable));
      #line 1709 
      btc8723b2ant_limited_rx(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,(unsigned char)8);
      #line 1712 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Wifi connected + BT non connected-idle!!\n");
      #line 1715 
      (*(btcoexist->btc_set_rf_reg))((void *)btcoexist,(unsigned char)0,1U,1048575U,0U);
      #line 1717 
      btc8723b2ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)0);
      #line 1719 
      btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)0,(unsigned char)1);
      #line 1720 
      btc8723b2ant_fw_dac_swing_lvl(btcoexist,(_Bool)0,(unsigned char)11);
      #line 1722 
      btc8723b2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)0);
      #line 1724 
      btc8723b2ant_sw_mechanism(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,(_Bool)0);
      #line 1727 
      common = (_Bool)1;
    }
    else 
      #line 1728 
      if ((unsigned int)coex_dm_3->bt_status == 1U) {
        #line 1730 
        low_pwr_disable = (_Bool)1;
        #line 1731 
        (*(btcoexist->btc_set))((void *)btcoexist,(unsigned char)28,(void *)(& low_pwr_disable));
        #line 1735 
        if ((int)bt_hs_on != 0) 
                                #line 1736 
                                return (_Bool)0;
        #line 1737 
        _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Wifi connected + BT connected-idle!!\n");
        #line 1739 
        btc8723b2ant_limited_rx(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,(unsigned char)8);
        #line 1742 
        (*(btcoexist->btc_set_rf_reg))((void *)btcoexist,(unsigned char)0,1U,1048575U,0U);
        #line 1744 
        btc8723b2ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)0);
        #line 1746 
        btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)0,(unsigned char)1);
        #line 1747 
        btc8723b2ant_fw_dac_swing_lvl(btcoexist,(_Bool)0,(unsigned char)11);
        #line 1749 
        btc8723b2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)0);
        #line 1751 
        btc8723b2ant_sw_mechanism(btcoexist,(_Bool)1,(_Bool)0,(_Bool)0,(_Bool)0);
        #line 1754 
        common = (_Bool)1;
      }
      else {
        #line 1756 
        low_pwr_disable = (_Bool)1;
        #line 1757 
        (*(btcoexist->btc_set))((void *)btcoexist,(unsigned char)28,(void *)(& low_pwr_disable));
        #line 1761 
        if ((int)wifi_busy != 0) {
          #line 1762 
          _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Wifi Connected-Busy + BT Busy!!\n");
          #line 1764 
          common = (_Bool)0;
        }
        else {
          #line 1766 
          _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Wifi Connected-Idle + BT Busy!!\n");
          #line 1769 
          common = btc8723b2ant_action_wifi_idle_process(btcoexist);
        }
      }
  #line 1776 
  return common;
}

#line 1779  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b2ant.c"
static void btc8723b2ant_tdma_duration_adjust(struct btc_coexist *btcoexist, bool sco_hid, bool tx_pause, u8 max_interval)
{
  #line 1784 
  s32 up;
  #line 1784 
  s32 dn;
  #line 1784 
  s32 m;
  #line 1784 
  s32 n;
  #line 1784 
  s32 wait_count;
  #line 1786 
  s32 result;
  #line 1783 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 1787 
  u8 retry_count = (unsigned char)0U;
  #line 1789 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], TdmaDurationAdjust()\n");
  #line 1792 
  if (! coex_dm_3->auto_tdma_adjust) {
    #line 1793 
    coex_dm_3->auto_tdma_adjust = (_Bool)1;
    #line 1794 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], first run TdmaDurationAdjust()!!\n");
    #line 1796 
    if ((int)sco_hid != 0) 
      #line 1797 
      if ((int)tx_pause != 0) 
        #line 1798 
        if ((unsigned int)max_interval == 1U) {
          #line 1799 
          btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)13);
          #line 1802 
          coex_dm_3->ps_tdma_du_adj_type = (unsigned char)13U;
        }
        else 
          #line 1803 
          if ((unsigned int)max_interval == 2U) {
            #line 1804 
            btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)14);
            #line 1807 
            coex_dm_3->ps_tdma_du_adj_type = (unsigned char)14U;
          }
          else 
            #line 1808 
            if ((unsigned int)max_interval == 3U) {
              #line 1809 
              btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)15);
              #line 1812 
              coex_dm_3->ps_tdma_du_adj_type = (unsigned char)15U;
            }
            else {
              #line 1814 
              btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)15);
              #line 1817 
              coex_dm_3->ps_tdma_du_adj_type = (unsigned char)15U;
            }
      else 
        #line 1820 
        if ((unsigned int)max_interval == 1U) {
          #line 1821 
          btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)9);
          #line 1824 
          coex_dm_3->ps_tdma_du_adj_type = (unsigned char)9U;
        }
        else 
          #line 1825 
          if ((unsigned int)max_interval == 2U) {
            #line 1826 
            btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)10);
            #line 1829 
            coex_dm_3->ps_tdma_du_adj_type = (unsigned char)10U;
          }
          else 
            #line 1830 
            if ((unsigned int)max_interval == 3U) {
              #line 1831 
              btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)11);
              #line 1834 
              coex_dm_3->ps_tdma_du_adj_type = (unsigned char)11U;
            }
            else {
              #line 1836 
              btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)11);
              #line 1839 
              coex_dm_3->ps_tdma_du_adj_type = (unsigned char)11U;
            }
    else 
      #line 1843 
      if ((int)tx_pause != 0) 
        #line 1844 
        if ((unsigned int)max_interval == 1U) {
          #line 1845 
          btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)5);
          #line 1848 
          coex_dm_3->ps_tdma_du_adj_type = (unsigned char)5U;
        }
        else 
          #line 1849 
          if ((unsigned int)max_interval == 2U) {
            #line 1850 
            btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)6);
            #line 1853 
            coex_dm_3->ps_tdma_du_adj_type = (unsigned char)6U;
          }
          else 
            #line 1854 
            if ((unsigned int)max_interval == 3U) {
              #line 1855 
              btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)7);
              #line 1858 
              coex_dm_3->ps_tdma_du_adj_type = (unsigned char)7U;
            }
            else {
              #line 1860 
              btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)7);
              #line 1863 
              coex_dm_3->ps_tdma_du_adj_type = (unsigned char)7U;
            }
      else 
        #line 1866 
        if ((unsigned int)max_interval == 1U) {
          #line 1867 
          btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)1);
          #line 1870 
          coex_dm_3->ps_tdma_du_adj_type = (unsigned char)1U;
        }
        else 
          #line 1871 
          if ((unsigned int)max_interval == 2U) {
            #line 1872 
            btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)2);
            #line 1875 
            coex_dm_3->ps_tdma_du_adj_type = (unsigned char)2U;
          }
          else 
            #line 1876 
            if ((unsigned int)max_interval == 3U) {
              #line 1877 
              btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)3);
              #line 1880 
              coex_dm_3->ps_tdma_du_adj_type = (unsigned char)3U;
            }
            else {
              #line 1882 
              btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)3);
              #line 1885 
              coex_dm_3->ps_tdma_du_adj_type = (unsigned char)3U;
            }
    #line 1890 
    up = 0;
    #line 1891 
    dn = 0;
    #line 1892 
    m = 1;
    #line 1893 
    n = 3;
    #line 1894 
    result = 0;
    #line 1895 
    wait_count = 0;
  }
  else {
    #line 1898 
    retry_count = coex_sta_3->bt_retry_cnt;
    #line 1900 
    if (coex_sta_3->low_priority_tx > 1050U || coex_sta_3->low_priority_rx > 1250U) 
      #line 1902 
      retry_count = (u8)((int)retry_count + 1);
    #line 1904 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], retry_count = %d\n",(int)retry_count);
    #line 1906 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], up=%d, dn=%d, m=%d, n=%d, wait_count=%d\n",up,dn,m,n,wait_count);
    #line 1909 
    result = 0;
    #line 1910 
    wait_count ++;
    #line 1912 
    if ((unsigned int)retry_count == 0U) {
      #line 1913 
      up ++;
      #line 1914 
      dn --;
      #line 1916 
      if (dn <= 0) 
                   #line 1917 
                   dn = 0;
      #line 1919 
      if (up >= n) {
        #line 1923 
        wait_count = 0;
        #line 1924 
        n = 3;
        #line 1925 
        up = 0;
        #line 1926 
        dn = 0;
        #line 1927 
        result = 1;
        #line 1928 
        _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Increase wifi duration!!\n");
      }
    }
    else 
      #line 1931 
      if ((unsigned int)retry_count <= 3U) {
        #line 1932 
        up --;
        #line 1933 
        dn ++;
        #line 1935 
        if (up <= 0) 
                     #line 1936 
                     up = 0;
        #line 1938 
        if (dn == 2) {
          #line 1942 
          if (wait_count <= 2) 
                               #line 1944 
                               m ++; else 
                                          #line 1946 
                                          m = 1;
          #line 1948 
          if (m > 19) 
                      #line 1953 
                      m = 20;
          #line 1955 
          n = m * 3;
          #line 1956 
          up = 0;
          #line 1957 
          dn = 0;
          #line 1958 
          wait_count = 0;
          #line 1959 
          result = -1;
          #line 1960 
          _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Decrease wifi duration for retry_counter<3!!\n");
        }
      }
      else {
        #line 1967 
        if (wait_count == 1) 
                             #line 1969 
                             m ++; else 
                                        #line 1971 
                                        m = 1;
        #line 1973 
        if (m > 19) 
                    #line 1978 
                    m = 20;
        #line 1980 
        n = m * 3;
        #line 1981 
        up = 0;
        #line 1982 
        dn = 0;
        #line 1983 
        wait_count = 0;
        #line 1984 
        result = -1;
        #line 1985 
        _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Decrease wifi duration for retry_counter>3!!\n");
      }
    #line 1989 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], max Interval = %d\n",(int)max_interval);
    #line 1991 
    if ((unsigned int)max_interval == 1U) 
      #line 1992 
      if ((int)tx_pause != 0) {
        #line 1993 
        if ((unsigned int)coex_dm_3->cur_ps_tdma == 71U) {
          #line 1994 
          btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)5);
          #line 1997 
          coex_dm_3->ps_tdma_du_adj_type = (unsigned char)5U;
        }
        else 
          #line 1998 
          if ((unsigned int)coex_dm_3->cur_ps_tdma == 1U) {
            #line 1999 
            btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)5);
            #line 2002 
            coex_dm_3->ps_tdma_du_adj_type = (unsigned char)5U;
          }
          else 
            #line 2003 
            if ((unsigned int)coex_dm_3->cur_ps_tdma == 2U) {
              #line 2004 
              btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)6);
              #line 2007 
              coex_dm_3->ps_tdma_du_adj_type = (unsigned char)6U;
            }
            else 
              #line 2008 
              if ((unsigned int)coex_dm_3->cur_ps_tdma == 3U) {
                #line 2009 
                btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)7);
                #line 2012 
                coex_dm_3->ps_tdma_du_adj_type = (unsigned char)7U;
              }
              else 
                #line 2013 
                if ((unsigned int)coex_dm_3->cur_ps_tdma == 4U) {
                  #line 2014 
                  btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)8);
                  #line 2017 
                  coex_dm_3->ps_tdma_du_adj_type = (unsigned char)8U;
                }
        #line 2019 
        if ((unsigned int)coex_dm_3->cur_ps_tdma == 9U) {
          #line 2020 
          btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)13);
          #line 2023 
          coex_dm_3->ps_tdma_du_adj_type = (unsigned char)13U;
        }
        else 
          #line 2024 
          if ((unsigned int)coex_dm_3->cur_ps_tdma == 10U) {
            #line 2025 
            btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)14);
            #line 2028 
            coex_dm_3->ps_tdma_du_adj_type = (unsigned char)14U;
          }
          else 
            #line 2029 
            if ((unsigned int)coex_dm_3->cur_ps_tdma == 11U) {
              #line 2030 
              btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)15);
              #line 2033 
              coex_dm_3->ps_tdma_du_adj_type = (unsigned char)15U;
            }
            else 
              #line 2034 
              if ((unsigned int)coex_dm_3->cur_ps_tdma == 12U) {
                #line 2035 
                btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)16);
                #line 2038 
                coex_dm_3->ps_tdma_du_adj_type = (unsigned char)16U;
              }
        #line 2041 
        if (result == -1) {
          #line 2042 
          if ((unsigned int)coex_dm_3->cur_ps_tdma == 5U) {
            #line 2043 
            btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)6);
            #line 2046 
            coex_dm_3->ps_tdma_du_adj_type = (unsigned char)6U;
          }
          else 
            #line 2048 
            if ((unsigned int)coex_dm_3->cur_ps_tdma == 6U) {
              #line 2049 
              btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)7);
              #line 2052 
              coex_dm_3->ps_tdma_du_adj_type = (unsigned char)7U;
            }
            else 
              #line 2054 
              if ((unsigned int)coex_dm_3->cur_ps_tdma == 7U) {
                #line 2055 
                btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)8);
                #line 2058 
                coex_dm_3->ps_tdma_du_adj_type = (unsigned char)8U;
              }
              else 
                #line 2060 
                if ((unsigned int)coex_dm_3->cur_ps_tdma == 13U) {
                  #line 2061 
                  btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)14);
                  #line 2064 
                  coex_dm_3->ps_tdma_du_adj_type = (unsigned char)14U;
                }
                else 
                  #line 2066 
                  if ((unsigned int)coex_dm_3->cur_ps_tdma == 14U) {
                    #line 2067 
                    btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)15);
                    #line 2070 
                    coex_dm_3->ps_tdma_du_adj_type = (unsigned char)15U;
                  }
                  else 
                    #line 2072 
                    if ((unsigned int)coex_dm_3->cur_ps_tdma == 15U) {
                      #line 2073 
                      btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)16);
                      #line 2076 
                      coex_dm_3->ps_tdma_du_adj_type = (unsigned char)16U;
                    }
        }
        else 
          #line 2079 
          if (result == 1) 
            #line 2080 
            if ((unsigned int)coex_dm_3->cur_ps_tdma == 8U) {
              #line 2081 
              btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)7);
              #line 2084 
              coex_dm_3->ps_tdma_du_adj_type = (unsigned char)7U;
            }
            else 
              #line 2086 
              if ((unsigned int)coex_dm_3->cur_ps_tdma == 7U) {
                #line 2087 
                btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)6);
                #line 2090 
                coex_dm_3->ps_tdma_du_adj_type = (unsigned char)6U;
              }
              else 
                #line 2092 
                if ((unsigned int)coex_dm_3->cur_ps_tdma == 6U) {
                  #line 2093 
                  btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)5);
                  #line 2096 
                  coex_dm_3->ps_tdma_du_adj_type = (unsigned char)5U;
                }
                else 
                  #line 2098 
                  if ((unsigned int)coex_dm_3->cur_ps_tdma == 16U) {
                    #line 2099 
                    btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)15);
                    #line 2102 
                    coex_dm_3->ps_tdma_du_adj_type = (unsigned char)15U;
                  }
                  else 
                    #line 2104 
                    if ((unsigned int)coex_dm_3->cur_ps_tdma == 15U) {
                      #line 2105 
                      btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)14);
                      #line 2108 
                      coex_dm_3->ps_tdma_du_adj_type = (unsigned char)14U;
                    }
                    else 
                      #line 2110 
                      if ((unsigned int)coex_dm_3->cur_ps_tdma == 14U) {
                        #line 2111 
                        btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)13);
                        #line 2114 
                        coex_dm_3->ps_tdma_du_adj_type = (unsigned char)13U;
                      }
      }
      else {
        #line 2119 
        if ((unsigned int)coex_dm_3->cur_ps_tdma == 5U) {
          #line 2120 
          btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)71);
          #line 2123 
          coex_dm_3->ps_tdma_du_adj_type = (unsigned char)71U;
        }
        else 
          #line 2124 
          if ((unsigned int)coex_dm_3->cur_ps_tdma == 6U) {
            #line 2125 
            btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)2);
            #line 2128 
            coex_dm_3->ps_tdma_du_adj_type = (unsigned char)2U;
          }
          else 
            #line 2129 
            if ((unsigned int)coex_dm_3->cur_ps_tdma == 7U) {
              #line 2130 
              btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)3);
              #line 2133 
              coex_dm_3->ps_tdma_du_adj_type = (unsigned char)3U;
            }
            else 
              #line 2134 
              if ((unsigned int)coex_dm_3->cur_ps_tdma == 8U) {
                #line 2135 
                btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)4);
                #line 2138 
                coex_dm_3->ps_tdma_du_adj_type = (unsigned char)4U;
              }
        #line 2140 
        if ((unsigned int)coex_dm_3->cur_ps_tdma == 13U) {
          #line 2141 
          btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)9);
          #line 2144 
          coex_dm_3->ps_tdma_du_adj_type = (unsigned char)9U;
        }
        else 
          #line 2145 
          if ((unsigned int)coex_dm_3->cur_ps_tdma == 14U) {
            #line 2146 
            btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)10);
            #line 2149 
            coex_dm_3->ps_tdma_du_adj_type = (unsigned char)10U;
          }
          else 
            #line 2150 
            if ((unsigned int)coex_dm_3->cur_ps_tdma == 15U) {
              #line 2151 
              btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)11);
              #line 2154 
              coex_dm_3->ps_tdma_du_adj_type = (unsigned char)11U;
            }
            else 
              #line 2155 
              if ((unsigned int)coex_dm_3->cur_ps_tdma == 16U) {
                #line 2156 
                btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)12);
                #line 2159 
                coex_dm_3->ps_tdma_du_adj_type = (unsigned char)12U;
              }
        #line 2162 
        if (result == -1) {
          #line 2163 
          if ((unsigned int)coex_dm_3->cur_ps_tdma == 71U) {
            #line 2164 
            btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)1);
            #line 2167 
            coex_dm_3->ps_tdma_du_adj_type = (unsigned char)1U;
          }
          else 
            #line 2169 
            if ((unsigned int)coex_dm_3->cur_ps_tdma == 1U) {
              #line 2170 
              btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)2);
              #line 2173 
              coex_dm_3->ps_tdma_du_adj_type = (unsigned char)2U;
            }
            else 
              #line 2175 
              if ((unsigned int)coex_dm_3->cur_ps_tdma == 2U) {
                #line 2176 
                btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)3);
                #line 2179 
                coex_dm_3->ps_tdma_du_adj_type = (unsigned char)3U;
              }
              else 
                #line 2181 
                if ((unsigned int)coex_dm_3->cur_ps_tdma == 3U) {
                  #line 2182 
                  btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)4);
                  #line 2185 
                  coex_dm_3->ps_tdma_du_adj_type = (unsigned char)4U;
                }
                else 
                  #line 2187 
                  if ((unsigned int)coex_dm_3->cur_ps_tdma == 9U) {
                    #line 2188 
                    btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)10);
                    #line 2191 
                    coex_dm_3->ps_tdma_du_adj_type = (unsigned char)10U;
                  }
                  else 
                    #line 2193 
                    if ((unsigned int)coex_dm_3->cur_ps_tdma == 10U) {
                      #line 2194 
                      btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)11);
                      #line 2197 
                      coex_dm_3->ps_tdma_du_adj_type = (unsigned char)11U;
                    }
                    else 
                      #line 2199 
                      if ((unsigned int)coex_dm_3->cur_ps_tdma == 11U) {
                        #line 2200 
                        btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)12);
                        #line 2203 
                        coex_dm_3->ps_tdma_du_adj_type = (unsigned char)12U;
                      }
        }
        else 
          #line 2206 
          if (result == 1) 
            #line 2207 
            if ((unsigned int)coex_dm_3->cur_ps_tdma == 4U) {
              #line 2208 
              btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)3);
              #line 2211 
              coex_dm_3->ps_tdma_du_adj_type = (unsigned char)3U;
            }
            else 
              #line 2213 
              if ((unsigned int)coex_dm_3->cur_ps_tdma == 3U) {
                #line 2214 
                btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)2);
                #line 2217 
                coex_dm_3->ps_tdma_du_adj_type = (unsigned char)2U;
              }
              else 
                #line 2219 
                if ((unsigned int)coex_dm_3->cur_ps_tdma == 2U) {
                  #line 2220 
                  btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)1);
                  #line 2223 
                  coex_dm_3->ps_tdma_du_adj_type = (unsigned char)1U;
                }
                else 
                  #line 2225 
                  if ((unsigned int)coex_dm_3->cur_ps_tdma == 1U) {
                    #line 2226 
                    btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)71);
                    #line 2229 
                    coex_dm_3->ps_tdma_du_adj_type = (unsigned char)71U;
                  }
                  else 
                    #line 2231 
                    if ((unsigned int)coex_dm_3->cur_ps_tdma == 12U) {
                      #line 2232 
                      btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)11);
                      #line 2235 
                      coex_dm_3->ps_tdma_du_adj_type = (unsigned char)11U;
                    }
                    else 
                      #line 2237 
                      if ((unsigned int)coex_dm_3->cur_ps_tdma == 11U) {
                        #line 2238 
                        btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)10);
                        #line 2241 
                        coex_dm_3->ps_tdma_du_adj_type = (unsigned char)10U;
                      }
                      else 
                        #line 2243 
                        if ((unsigned int)coex_dm_3->cur_ps_tdma == 10U) {
                          #line 2244 
                          btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)9);
                          #line 2247 
                          coex_dm_3->ps_tdma_du_adj_type = (unsigned char)9U;
                        }
      }
    else 
      #line 2252 
      if ((unsigned int)max_interval == 2U) 
        #line 2253 
        if ((int)tx_pause != 0) {
          #line 2254 
          if ((unsigned int)coex_dm_3->cur_ps_tdma == 1U) {
            #line 2255 
            btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)6);
            #line 2258 
            coex_dm_3->ps_tdma_du_adj_type = (unsigned char)6U;
          }
          else 
            #line 2259 
            if ((unsigned int)coex_dm_3->cur_ps_tdma == 2U) {
              #line 2260 
              btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)6);
              #line 2263 
              coex_dm_3->ps_tdma_du_adj_type = (unsigned char)6U;
            }
            else 
              #line 2264 
              if ((unsigned int)coex_dm_3->cur_ps_tdma == 3U) {
                #line 2265 
                btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)7);
                #line 2268 
                coex_dm_3->ps_tdma_du_adj_type = (unsigned char)7U;
              }
              else 
                #line 2269 
                if ((unsigned int)coex_dm_3->cur_ps_tdma == 4U) {
                  #line 2270 
                  btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)8);
                  #line 2273 
                  coex_dm_3->ps_tdma_du_adj_type = (unsigned char)8U;
                }
          #line 2275 
          if ((unsigned int)coex_dm_3->cur_ps_tdma == 9U) {
            #line 2276 
            btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)14);
            #line 2279 
            coex_dm_3->ps_tdma_du_adj_type = (unsigned char)14U;
          }
          else 
            #line 2280 
            if ((unsigned int)coex_dm_3->cur_ps_tdma == 10U) {
              #line 2281 
              btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)14);
              #line 2284 
              coex_dm_3->ps_tdma_du_adj_type = (unsigned char)14U;
            }
            else 
              #line 2285 
              if ((unsigned int)coex_dm_3->cur_ps_tdma == 11U) {
                #line 2286 
                btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)15);
                #line 2289 
                coex_dm_3->ps_tdma_du_adj_type = (unsigned char)15U;
              }
              else 
                #line 2290 
                if ((unsigned int)coex_dm_3->cur_ps_tdma == 12U) {
                  #line 2291 
                  btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)16);
                  #line 2294 
                  coex_dm_3->ps_tdma_du_adj_type = (unsigned char)16U;
                }
          #line 2296 
          if (result == -1) {
            #line 2297 
            if ((unsigned int)coex_dm_3->cur_ps_tdma == 5U) {
              #line 2298 
              btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)6);
              #line 2301 
              coex_dm_3->ps_tdma_du_adj_type = (unsigned char)6U;
            }
            else 
              #line 2303 
              if ((unsigned int)coex_dm_3->cur_ps_tdma == 6U) {
                #line 2304 
                btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)7);
                #line 2307 
                coex_dm_3->ps_tdma_du_adj_type = (unsigned char)7U;
              }
              else 
                #line 2309 
                if ((unsigned int)coex_dm_3->cur_ps_tdma == 7U) {
                  #line 2310 
                  btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)8);
                  #line 2313 
                  coex_dm_3->ps_tdma_du_adj_type = (unsigned char)8U;
                }
                else 
                  #line 2315 
                  if ((unsigned int)coex_dm_3->cur_ps_tdma == 13U) {
                    #line 2316 
                    btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)14);
                    #line 2319 
                    coex_dm_3->ps_tdma_du_adj_type = (unsigned char)14U;
                  }
                  else 
                    #line 2321 
                    if ((unsigned int)coex_dm_3->cur_ps_tdma == 14U) {
                      #line 2322 
                      btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)15);
                      #line 2325 
                      coex_dm_3->ps_tdma_du_adj_type = (unsigned char)15U;
                    }
                    else 
                      #line 2327 
                      if ((unsigned int)coex_dm_3->cur_ps_tdma == 15U) {
                        #line 2328 
                        btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)16);
                        #line 2331 
                        coex_dm_3->ps_tdma_du_adj_type = (unsigned char)16U;
                      }
          }
          else 
            #line 2334 
            if (result == 1) 
              #line 2335 
              if ((unsigned int)coex_dm_3->cur_ps_tdma == 8U) {
                #line 2336 
                btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)7);
                #line 2339 
                coex_dm_3->ps_tdma_du_adj_type = (unsigned char)7U;
              }
              else 
                #line 2341 
                if ((unsigned int)coex_dm_3->cur_ps_tdma == 7U) {
                  #line 2342 
                  btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)6);
                  #line 2345 
                  coex_dm_3->ps_tdma_du_adj_type = (unsigned char)6U;
                }
                else 
                  #line 2347 
                  if ((unsigned int)coex_dm_3->cur_ps_tdma == 6U) {
                    #line 2348 
                    btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)6);
                    #line 2351 
                    coex_dm_3->ps_tdma_du_adj_type = (unsigned char)6U;
                  }
                  else 
                    #line 2353 
                    if ((unsigned int)coex_dm_3->cur_ps_tdma == 16U) {
                      #line 2354 
                      btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)15);
                      #line 2357 
                      coex_dm_3->ps_tdma_du_adj_type = (unsigned char)15U;
                    }
                    else 
                      #line 2359 
                      if ((unsigned int)coex_dm_3->cur_ps_tdma == 15U) {
                        #line 2360 
                        btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)14);
                        #line 2363 
                        coex_dm_3->ps_tdma_du_adj_type = (unsigned char)14U;
                      }
                      else 
                        #line 2365 
                        if ((unsigned int)coex_dm_3->cur_ps_tdma == 14U) {
                          #line 2366 
                          btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)14);
                          #line 2369 
                          coex_dm_3->ps_tdma_du_adj_type = (unsigned char)14U;
                        }
        }
        else {
          #line 2374 
          if ((unsigned int)coex_dm_3->cur_ps_tdma == 5U) {
            #line 2375 
            btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)2);
            #line 2378 
            coex_dm_3->ps_tdma_du_adj_type = (unsigned char)2U;
          }
          else 
            #line 2379 
            if ((unsigned int)coex_dm_3->cur_ps_tdma == 6U) {
              #line 2380 
              btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)2);
              #line 2383 
              coex_dm_3->ps_tdma_du_adj_type = (unsigned char)2U;
            }
            else 
              #line 2384 
              if ((unsigned int)coex_dm_3->cur_ps_tdma == 7U) {
                #line 2385 
                btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)3);
                #line 2388 
                coex_dm_3->ps_tdma_du_adj_type = (unsigned char)3U;
              }
              else 
                #line 2389 
                if ((unsigned int)coex_dm_3->cur_ps_tdma == 8U) {
                  #line 2390 
                  btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)4);
                  #line 2393 
                  coex_dm_3->ps_tdma_du_adj_type = (unsigned char)4U;
                }
          #line 2395 
          if ((unsigned int)coex_dm_3->cur_ps_tdma == 13U) {
            #line 2396 
            btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)10);
            #line 2399 
            coex_dm_3->ps_tdma_du_adj_type = (unsigned char)10U;
          }
          else 
            #line 2400 
            if ((unsigned int)coex_dm_3->cur_ps_tdma == 14U) {
              #line 2401 
              btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)10);
              #line 2404 
              coex_dm_3->ps_tdma_du_adj_type = (unsigned char)10U;
            }
            else 
              #line 2405 
              if ((unsigned int)coex_dm_3->cur_ps_tdma == 15U) {
                #line 2406 
                btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)11);
                #line 2409 
                coex_dm_3->ps_tdma_du_adj_type = (unsigned char)11U;
              }
              else 
                #line 2410 
                if ((unsigned int)coex_dm_3->cur_ps_tdma == 16U) {
                  #line 2411 
                  btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)12);
                  #line 2414 
                  coex_dm_3->ps_tdma_du_adj_type = (unsigned char)12U;
                }
          #line 2416 
          if (result == -1) {
            #line 2417 
            if ((unsigned int)coex_dm_3->cur_ps_tdma == 1U) {
              #line 2418 
              btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)2);
              #line 2421 
              coex_dm_3->ps_tdma_du_adj_type = (unsigned char)2U;
            }
            else 
              #line 2423 
              if ((unsigned int)coex_dm_3->cur_ps_tdma == 2U) {
                #line 2424 
                btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)3);
                #line 2427 
                coex_dm_3->ps_tdma_du_adj_type = (unsigned char)3U;
              }
              else 
                #line 2429 
                if ((unsigned int)coex_dm_3->cur_ps_tdma == 3U) {
                  #line 2430 
                  btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)4);
                  #line 2433 
                  coex_dm_3->ps_tdma_du_adj_type = (unsigned char)4U;
                }
                else 
                  #line 2435 
                  if ((unsigned int)coex_dm_3->cur_ps_tdma == 9U) {
                    #line 2436 
                    btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)10);
                    #line 2439 
                    coex_dm_3->ps_tdma_du_adj_type = (unsigned char)10U;
                  }
                  else 
                    #line 2441 
                    if ((unsigned int)coex_dm_3->cur_ps_tdma == 10U) {
                      #line 2442 
                      btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)11);
                      #line 2445 
                      coex_dm_3->ps_tdma_du_adj_type = (unsigned char)11U;
                    }
                    else 
                      #line 2447 
                      if ((unsigned int)coex_dm_3->cur_ps_tdma == 11U) {
                        #line 2448 
                        btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)12);
                        #line 2451 
                        coex_dm_3->ps_tdma_du_adj_type = (unsigned char)12U;
                      }
          }
          else 
            #line 2454 
            if (result == 1) 
              #line 2455 
              if ((unsigned int)coex_dm_3->cur_ps_tdma == 4U) {
                #line 2456 
                btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)3);
                #line 2459 
                coex_dm_3->ps_tdma_du_adj_type = (unsigned char)3U;
              }
              else 
                #line 2461 
                if ((unsigned int)coex_dm_3->cur_ps_tdma == 3U) {
                  #line 2462 
                  btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)2);
                  #line 2465 
                  coex_dm_3->ps_tdma_du_adj_type = (unsigned char)2U;
                }
                else 
                  #line 2467 
                  if ((unsigned int)coex_dm_3->cur_ps_tdma == 2U) {
                    #line 2468 
                    btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)2);
                    #line 2471 
                    coex_dm_3->ps_tdma_du_adj_type = (unsigned char)2U;
                  }
                  else 
                    #line 2473 
                    if ((unsigned int)coex_dm_3->cur_ps_tdma == 12U) {
                      #line 2474 
                      btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)11);
                      #line 2477 
                      coex_dm_3->ps_tdma_du_adj_type = (unsigned char)11U;
                    }
                    else 
                      #line 2479 
                      if ((unsigned int)coex_dm_3->cur_ps_tdma == 11U) {
                        #line 2480 
                        btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)10);
                        #line 2483 
                        coex_dm_3->ps_tdma_du_adj_type = (unsigned char)10U;
                      }
                      else 
                        #line 2485 
                        if ((unsigned int)coex_dm_3->cur_ps_tdma == 10U) {
                          #line 2486 
                          btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)10);
                          #line 2489 
                          coex_dm_3->ps_tdma_du_adj_type = (unsigned char)10U;
                        }
        }
      else 
        #line 2494 
        if ((unsigned int)max_interval == 3U) 
          #line 2495 
          if ((int)tx_pause != 0) {
            #line 2496 
            if ((unsigned int)coex_dm_3->cur_ps_tdma == 1U) {
              #line 2497 
              btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)7);
              #line 2500 
              coex_dm_3->ps_tdma_du_adj_type = (unsigned char)7U;
            }
            else 
              #line 2501 
              if ((unsigned int)coex_dm_3->cur_ps_tdma == 2U) {
                #line 2502 
                btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)7);
                #line 2505 
                coex_dm_3->ps_tdma_du_adj_type = (unsigned char)7U;
              }
              else 
                #line 2506 
                if ((unsigned int)coex_dm_3->cur_ps_tdma == 3U) {
                  #line 2507 
                  btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)7);
                  #line 2510 
                  coex_dm_3->ps_tdma_du_adj_type = (unsigned char)7U;
                }
                else 
                  #line 2511 
                  if ((unsigned int)coex_dm_3->cur_ps_tdma == 4U) {
                    #line 2512 
                    btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)8);
                    #line 2515 
                    coex_dm_3->ps_tdma_du_adj_type = (unsigned char)8U;
                  }
            #line 2517 
            if ((unsigned int)coex_dm_3->cur_ps_tdma == 9U) {
              #line 2518 
              btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)15);
              #line 2521 
              coex_dm_3->ps_tdma_du_adj_type = (unsigned char)15U;
            }
            else 
              #line 2522 
              if ((unsigned int)coex_dm_3->cur_ps_tdma == 10U) {
                #line 2523 
                btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)15);
                #line 2526 
                coex_dm_3->ps_tdma_du_adj_type = (unsigned char)15U;
              }
              else 
                #line 2527 
                if ((unsigned int)coex_dm_3->cur_ps_tdma == 11U) {
                  #line 2528 
                  btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)15);
                  #line 2531 
                  coex_dm_3->ps_tdma_du_adj_type = (unsigned char)15U;
                }
                else 
                  #line 2532 
                  if ((unsigned int)coex_dm_3->cur_ps_tdma == 12U) {
                    #line 2533 
                    btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)16);
                    #line 2536 
                    coex_dm_3->ps_tdma_du_adj_type = (unsigned char)16U;
                  }
            #line 2538 
            if (result == -1) {
              #line 2539 
              if ((unsigned int)coex_dm_3->cur_ps_tdma == 5U) {
                #line 2540 
                btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)7);
                #line 2543 
                coex_dm_3->ps_tdma_du_adj_type = (unsigned char)7U;
              }
              else 
                #line 2545 
                if ((unsigned int)coex_dm_3->cur_ps_tdma == 6U) {
                  #line 2546 
                  btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)7);
                  #line 2549 
                  coex_dm_3->ps_tdma_du_adj_type = (unsigned char)7U;
                }
                else 
                  #line 2551 
                  if ((unsigned int)coex_dm_3->cur_ps_tdma == 7U) {
                    #line 2552 
                    btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)8);
                    #line 2555 
                    coex_dm_3->ps_tdma_du_adj_type = (unsigned char)8U;
                  }
                  else 
                    #line 2557 
                    if ((unsigned int)coex_dm_3->cur_ps_tdma == 13U) {
                      #line 2558 
                      btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)15);
                      #line 2561 
                      coex_dm_3->ps_tdma_du_adj_type = (unsigned char)15U;
                    }
                    else 
                      #line 2563 
                      if ((unsigned int)coex_dm_3->cur_ps_tdma == 14U) {
                        #line 2564 
                        btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)15);
                        #line 2567 
                        coex_dm_3->ps_tdma_du_adj_type = (unsigned char)15U;
                      }
                      else 
                        #line 2569 
                        if ((unsigned int)coex_dm_3->cur_ps_tdma == 15U) {
                          #line 2570 
                          btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)16);
                          #line 2573 
                          coex_dm_3->ps_tdma_du_adj_type = (unsigned char)16U;
                        }
            }
            else 
              #line 2576 
              if (result == 1) 
                #line 2577 
                if ((unsigned int)coex_dm_3->cur_ps_tdma == 8U) {
                  #line 2578 
                  btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)7);
                  #line 2581 
                  coex_dm_3->ps_tdma_du_adj_type = (unsigned char)7U;
                }
                else 
                  #line 2583 
                  if ((unsigned int)coex_dm_3->cur_ps_tdma == 7U) {
                    #line 2584 
                    btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)7);
                    #line 2587 
                    coex_dm_3->ps_tdma_du_adj_type = (unsigned char)7U;
                  }
                  else 
                    #line 2589 
                    if ((unsigned int)coex_dm_3->cur_ps_tdma == 6U) {
                      #line 2590 
                      btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)7);
                      #line 2593 
                      coex_dm_3->ps_tdma_du_adj_type = (unsigned char)7U;
                    }
                    else 
                      #line 2595 
                      if ((unsigned int)coex_dm_3->cur_ps_tdma == 16U) {
                        #line 2596 
                        btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)15);
                        #line 2599 
                        coex_dm_3->ps_tdma_du_adj_type = (unsigned char)15U;
                      }
                      else 
                        #line 2601 
                        if ((unsigned int)coex_dm_3->cur_ps_tdma == 15U) {
                          #line 2602 
                          btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)15);
                          #line 2605 
                          coex_dm_3->ps_tdma_du_adj_type = (unsigned char)15U;
                        }
                        else 
                          #line 2607 
                          if ((unsigned int)coex_dm_3->cur_ps_tdma == 14U) {
                            #line 2608 
                            btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)15);
                            #line 2611 
                            coex_dm_3->ps_tdma_du_adj_type = (unsigned char)15U;
                          }
          }
          else {
            #line 2616 
            if ((unsigned int)coex_dm_3->cur_ps_tdma == 5U) {
              #line 2617 
              btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)3);
              #line 2620 
              coex_dm_3->ps_tdma_du_adj_type = (unsigned char)3U;
            }
            else 
              #line 2621 
              if ((unsigned int)coex_dm_3->cur_ps_tdma == 6U) {
                #line 2622 
                btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)3);
                #line 2625 
                coex_dm_3->ps_tdma_du_adj_type = (unsigned char)3U;
              }
              else 
                #line 2626 
                if ((unsigned int)coex_dm_3->cur_ps_tdma == 7U) {
                  #line 2627 
                  btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)3);
                  #line 2630 
                  coex_dm_3->ps_tdma_du_adj_type = (unsigned char)3U;
                }
                else 
                  #line 2631 
                  if ((unsigned int)coex_dm_3->cur_ps_tdma == 8U) {
                    #line 2632 
                    btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)4);
                    #line 2635 
                    coex_dm_3->ps_tdma_du_adj_type = (unsigned char)4U;
                  }
            #line 2637 
            if ((unsigned int)coex_dm_3->cur_ps_tdma == 13U) {
              #line 2638 
              btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)11);
              #line 2641 
              coex_dm_3->ps_tdma_du_adj_type = (unsigned char)11U;
            }
            else 
              #line 2642 
              if ((unsigned int)coex_dm_3->cur_ps_tdma == 14U) {
                #line 2643 
                btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)11);
                #line 2646 
                coex_dm_3->ps_tdma_du_adj_type = (unsigned char)11U;
              }
              else 
                #line 2647 
                if ((unsigned int)coex_dm_3->cur_ps_tdma == 15U) {
                  #line 2648 
                  btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)11);
                  #line 2651 
                  coex_dm_3->ps_tdma_du_adj_type = (unsigned char)11U;
                }
                else 
                  #line 2652 
                  if ((unsigned int)coex_dm_3->cur_ps_tdma == 16U) {
                    #line 2653 
                    btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)12);
                    #line 2656 
                    coex_dm_3->ps_tdma_du_adj_type = (unsigned char)12U;
                  }
            #line 2658 
            if (result == -1) {
              #line 2659 
              if ((unsigned int)coex_dm_3->cur_ps_tdma == 1U) {
                #line 2660 
                btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)3);
                #line 2663 
                coex_dm_3->ps_tdma_du_adj_type = (unsigned char)3U;
              }
              else 
                #line 2665 
                if ((unsigned int)coex_dm_3->cur_ps_tdma == 2U) {
                  #line 2666 
                  btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)3);
                  #line 2669 
                  coex_dm_3->ps_tdma_du_adj_type = (unsigned char)3U;
                }
                else 
                  #line 2671 
                  if ((unsigned int)coex_dm_3->cur_ps_tdma == 3U) {
                    #line 2672 
                    btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)4);
                    #line 2675 
                    coex_dm_3->ps_tdma_du_adj_type = (unsigned char)4U;
                  }
                  else 
                    #line 2677 
                    if ((unsigned int)coex_dm_3->cur_ps_tdma == 9U) {
                      #line 2678 
                      btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)11);
                      #line 2681 
                      coex_dm_3->ps_tdma_du_adj_type = (unsigned char)11U;
                    }
                    else 
                      #line 2683 
                      if ((unsigned int)coex_dm_3->cur_ps_tdma == 10U) {
                        #line 2684 
                        btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)11);
                        #line 2687 
                        coex_dm_3->ps_tdma_du_adj_type = (unsigned char)11U;
                      }
                      else 
                        #line 2689 
                        if ((unsigned int)coex_dm_3->cur_ps_tdma == 11U) {
                          #line 2690 
                          btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)12);
                          #line 2693 
                          coex_dm_3->ps_tdma_du_adj_type = (unsigned char)12U;
                        }
            }
            else 
              #line 2696 
              if (result == 1) 
                #line 2697 
                if ((unsigned int)coex_dm_3->cur_ps_tdma == 4U) {
                  #line 2698 
                  btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)3);
                  #line 2701 
                  coex_dm_3->ps_tdma_du_adj_type = (unsigned char)3U;
                }
                else 
                  #line 2703 
                  if ((unsigned int)coex_dm_3->cur_ps_tdma == 3U) {
                    #line 2704 
                    btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)3);
                    #line 2707 
                    coex_dm_3->ps_tdma_du_adj_type = (unsigned char)3U;
                  }
                  else 
                    #line 2709 
                    if ((unsigned int)coex_dm_3->cur_ps_tdma == 2U) {
                      #line 2710 
                      btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)3);
                      #line 2713 
                      coex_dm_3->ps_tdma_du_adj_type = (unsigned char)3U;
                    }
                    else 
                      #line 2715 
                      if ((unsigned int)coex_dm_3->cur_ps_tdma == 12U) {
                        #line 2716 
                        btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)11);
                        #line 2719 
                        coex_dm_3->ps_tdma_du_adj_type = (unsigned char)11U;
                      }
                      else 
                        #line 2721 
                        if ((unsigned int)coex_dm_3->cur_ps_tdma == 11U) {
                          #line 2722 
                          btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)11);
                          #line 2725 
                          coex_dm_3->ps_tdma_du_adj_type = (unsigned char)11U;
                        }
                        else 
                          #line 2727 
                          if ((unsigned int)coex_dm_3->cur_ps_tdma == 10U) {
                            #line 2728 
                            btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)11);
                            #line 2731 
                            coex_dm_3->ps_tdma_du_adj_type = (unsigned char)11U;
                          }
          }
  }
  #line 2739 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], max Interval = %d\n",(int)max_interval);
  #line 2745 
  if ((int)coex_dm_3->cur_ps_tdma != (int)coex_dm_3->ps_tdma_du_adj_type) {
    #line 2746 
    bool scan = (_Bool)0;
    #line 2746 
    bool link = (_Bool)0;
    #line 2746 
    bool roam = (_Bool)0;
    #line 2747 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], PsTdma type mismatch!!!, curPsTdma=%d, recordPsTdma=%d\n",(int)coex_dm_3->cur_ps_tdma,(int)coex_dm_3->ps_tdma_du_adj_type);
    #line 2751 
    (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)5,(void *)(& scan));
    #line 2752 
    (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)6,(void *)(& link));
    #line 2753 
    (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)11,(void *)(& roam));
    #line 2755 
    if ((! scan && ! link) && ! roam) 
                                      #line 2756 
                                      btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)((int)coex_dm_3->ps_tdma_du_adj_type)); else 
                                                                    #line 2759 
                                                                    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], roaming/link/scan is under progress, will adjust next time!!!\n");
  }
  #line 2761 
  return;
}

#line 2765  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b2ant.c"
static void btc8723b2ant_action_sco(struct btc_coexist *btcoexist)
{
  #line 2767 
  u8 wifi_rssi_state;
  #line 2767 
  u8 bt_rssi_state;
  #line 2768 
  u32 wifi_bw;
  #line 2770 
  wifi_rssi_state = btc8723b2ant_wifi_rssi_state(btcoexist,(unsigned char)0,(unsigned char)2,(unsigned char)15,(unsigned char)0);
  #line 2771 
  bt_rssi_state = btc8723b2ant_bt_rssi_state(btcoexist,(unsigned char)2,(unsigned char)((int)(46U - (unsigned int)coex_dm_3->switch_thres_offset)),(unsigned char)0);
  #line 2776 
  (*(btcoexist->btc_set_rf_reg))((void *)btcoexist,(unsigned char)0,1U,1048575U,0U);
  #line 2778 
  btc8723b2ant_limited_rx(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,(unsigned char)8);
  #line 2779 
  btc8723b2ant_fw_dac_swing_lvl(btcoexist,(_Bool)0,(unsigned char)4);
  #line 2781 
  if ((unsigned int)bt_rssi_state == 0U || (unsigned int)bt_rssi_state == 3U) 
    #line 2782 
    btc8723b2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)2); else 
                                                                    #line 2784 
                                                                    btc8723b2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)0);
  #line 2786 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)24,(void *)(& wifi_bw));
  #line 2788 
  if (wifi_bw == 0U) 
                     #line 2790 
                     btc8723b2ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)2); else 
                                                                    #line 2793 
                                                                    btc8723b2ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)8);
  #line 2796 
  btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)0,(unsigned char)0);
  #line 2799 
  if (wifi_bw == 2U) 
                     #line 2800 
                     btc8723b2ant_sw_mechanism(btcoexist,(_Bool)1,(_Bool)1,(_Bool)0,(_Bool)0); else 
                                                                    #line 2803 
                                                                    btc8723b2ant_sw_mechanism(btcoexist,(_Bool)0,(_Bool)1,(_Bool)0,(_Bool)0);
  #line 2804 
  return;
}

#line 2808  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b2ant.c"
static void btc8723b2ant_action_hid(struct btc_coexist *btcoexist)
{
  #line 2810 
  u8 wifi_rssi_state;
  #line 2810 
  u8 bt_rssi_state;
  #line 2811 
  u32 wifi_bw;
  #line 2812 
  u8 tmp = (unsigned char)(46U - (unsigned int)coex_dm_3->switch_thres_offset);
  #line 2815 
  wifi_rssi_state = btc8723b2ant_wifi_rssi_state(btcoexist,(unsigned char)0,(unsigned char)2,(unsigned char)15,(unsigned char)0);
  #line 2816 
  bt_rssi_state = btc8723b2ant_bt_rssi_state(btcoexist,(unsigned char)2,(unsigned char)((int)tmp),(unsigned char)0);
  #line 2818 
  (*(btcoexist->btc_set_rf_reg))((void *)btcoexist,(unsigned char)0,1U,1048575U,0U);
  #line 2820 
  btc8723b2ant_limited_rx(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,(unsigned char)8);
  #line 2821 
  btc8723b2ant_fw_dac_swing_lvl(btcoexist,(_Bool)0,(unsigned char)6);
  #line 2823 
  if ((unsigned int)bt_rssi_state == 0U || (unsigned int)bt_rssi_state == 3U) 
    #line 2824 
    btc8723b2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)2); else 
                                                                    #line 2826 
                                                                    btc8723b2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)0);
  #line 2828 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)24,(void *)(& wifi_bw));
  #line 2830 
  if (wifi_bw == 0U) 
                     #line 2832 
                     btc8723b2ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)7); else 
                                                                    #line 2835 
                                                                    btc8723b2ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)9);
  #line 2837 
  btc8723b2ant_power_save_state(btcoexist,(unsigned char)0,(unsigned char)0,(unsigned char)0);
  #line 2839 
  if ((unsigned int)bt_rssi_state == 0U || (unsigned int)bt_rssi_state == 3U) 
    #line 2841 
    btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)9); else 
                                                                    #line 2843 
                                                                    btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)13);
  #line 2846 
  if (wifi_bw == 2U) 
                     #line 2847 
                     btc8723b2ant_sw_mechanism(btcoexist,(_Bool)1,(_Bool)1,(_Bool)0,(_Bool)0); else 
                                                                    #line 2849 
                                                                    btc8723b2ant_sw_mechanism(btcoexist,(_Bool)0,(_Bool)1,(_Bool)0,(_Bool)0);
  #line 2850 
  return;
}

#line 2853  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b2ant.c"
static void btc8723b2ant_action_a2dp(struct btc_coexist *btcoexist)
{
  #line 2855 
  u8 wifi_rssi_state;
  #line 2855 
  u8 wifi_rssi_state1;
  #line 2855 
  u8 bt_rssi_state;
  #line 2856 
  u32 wifi_bw;
  #line 2857 
  u8 ap_num = (unsigned char)0U;
  #line 2858 
  u8 tmp = (unsigned char)(46U - (unsigned int)coex_dm_3->switch_thres_offset);
  #line 2861 
  wifi_rssi_state = btc8723b2ant_wifi_rssi_state(btcoexist,(unsigned char)0,(unsigned char)2,(unsigned char)15,(unsigned char)0);
  #line 2862 
  wifi_rssi_state1 = btc8723b2ant_wifi_rssi_state(btcoexist,(unsigned char)1,(unsigned char)2,(unsigned char)40,(unsigned char)0);
  #line 2863 
  bt_rssi_state = btc8723b2ant_bt_rssi_state(btcoexist,(unsigned char)2,(unsigned char)((int)tmp),(unsigned char)0);
  #line 2865 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)41,(void *)(& ap_num));
  #line 2869 
  if ((unsigned int)ap_num > 9U && ((unsigned int)wifi_rssi_state1 == 0U || (unsigned int)wifi_rssi_state1 == 3U)) {
    #line 2870 
    (*(btcoexist->btc_set_rf_reg))((void *)btcoexist,(unsigned char)0,1U,1048575U,0U);
    #line 2872 
    btc8723b2ant_fw_dac_swing_lvl(btcoexist,(_Bool)0,(unsigned char)6);
    #line 2873 
    btc8723b2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)0);
    #line 2874 
    btc8723b2ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)0);
    #line 2875 
    btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)0,(unsigned char)1);
    #line 2878 
    (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)24,(void *)(& wifi_bw));
    #line 2879 
    if (wifi_bw == 2U) 
                       #line 2880 
                       btc8723b2ant_sw_mechanism(btcoexist,(_Bool)1,(_Bool)0,(_Bool)0,(_Bool)0); else 
                                                                    #line 2883 
                                                                    btc8723b2ant_sw_mechanism(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,(_Bool)0);
    #line 2886 
    return;
  }
  #line 2889 
  (*(btcoexist->btc_set_rf_reg))((void *)btcoexist,(unsigned char)0,1U,1048575U,0U);
  #line 2890 
  btc8723b2ant_limited_rx(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,(unsigned char)8);
  #line 2892 
  btc8723b2ant_fw_dac_swing_lvl(btcoexist,(_Bool)0,(unsigned char)6);
  #line 2894 
  if ((unsigned int)bt_rssi_state == 0U || (unsigned int)bt_rssi_state == 3U) 
    #line 2895 
    btc8723b2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)2); else 
                                                                    #line 2897 
                                                                    btc8723b2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)0);
  #line 2899 
  if (((unsigned int)wifi_rssi_state1 == 0U || (unsigned int)wifi_rssi_state1 == 3U) && ((unsigned int)bt_rssi_state == 0U || (unsigned int)bt_rssi_state == 3U)) {
    #line 2900 
    btc8723b2ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)7);
    #line 2901 
    btc8723b2ant_power_save_state(btcoexist,(unsigned char)0,(unsigned char)0,(unsigned char)0);
  }
  else {
    #line 2904 
    btc8723b2ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)13);
    #line 2905 
    btc8723b2ant_power_save_state(btcoexist,(unsigned char)1,(unsigned char)80,(unsigned char)4);
  }
  #line 2909 
  if ((unsigned int)bt_rssi_state == 0U || (unsigned int)bt_rssi_state == 3U) 
    #line 2911 
    btc8723b2ant_tdma_duration_adjust(btcoexist,(_Bool)0,(_Bool)0,(unsigned char)1); else 
                                                                    #line 2914 
                                                                    btc8723b2ant_tdma_duration_adjust(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)1);
  #line 2917 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)24,(void *)(& wifi_bw));
  #line 2918 
  if (wifi_bw == 2U) 
                     #line 2919 
                     btc8723b2ant_sw_mechanism(btcoexist,(_Bool)1,(_Bool)0,(_Bool)0,(_Bool)0); else 
                                                                    #line 2922 
                                                                    btc8723b2ant_sw_mechanism(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,(_Bool)0);
  #line 2923 
  return;
}

#line 2927  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b2ant.c"
static void btc8723b2ant_action_a2dp_pan_hs(struct btc_coexist *btcoexist)
{
  #line 2929 
  u8 wifi_rssi_state;
  #line 2929 
  u8 wifi_rssi_state1;
  #line 2929 
  u8 bt_rssi_state;
  #line 2930 
  u32 wifi_bw;
  #line 2931 
  u8 tmp = (unsigned char)(42U - (unsigned int)coex_dm_3->switch_thres_offset);
  #line 2934 
  wifi_rssi_state = btc8723b2ant_wifi_rssi_state(btcoexist,(unsigned char)0,(unsigned char)2,(unsigned char)15,(unsigned char)0);
  #line 2935 
  wifi_rssi_state1 = btc8723b2ant_wifi_rssi_state(btcoexist,(unsigned char)1,(unsigned char)2,(unsigned char)((int)tmp),(unsigned char)0);
  #line 2937 
  tmp = (unsigned char)(46U - (unsigned int)coex_dm_3->switch_thres_offset);
  #line 2939 
  bt_rssi_state = btc8723b2ant_bt_rssi_state(btcoexist,(unsigned char)2,(unsigned char)((int)tmp),(unsigned char)0);
  #line 2941 
  (*(btcoexist->btc_set_rf_reg))((void *)btcoexist,(unsigned char)0,1U,1048575U,0U);
  #line 2943 
  btc8723b2ant_limited_rx(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,(unsigned char)8);
  #line 2944 
  btc8723b2ant_fw_dac_swing_lvl(btcoexist,(_Bool)0,(unsigned char)6);
  #line 2946 
  if ((unsigned int)bt_rssi_state == 0U || (unsigned int)bt_rssi_state == 3U) 
    #line 2947 
    btc8723b2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)2); else 
                                                                    #line 2949 
                                                                    btc8723b2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)0);
  #line 2951 
  if (((unsigned int)wifi_rssi_state1 == 0U || (unsigned int)wifi_rssi_state1 == 3U) && ((unsigned int)bt_rssi_state == 0U || (unsigned int)bt_rssi_state == 3U)) {
    #line 2952 
    btc8723b2ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)7);
    #line 2953 
    btc8723b2ant_power_save_state(btcoexist,(unsigned char)0,(unsigned char)0,(unsigned char)0);
  }
  else {
    #line 2956 
    btc8723b2ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)13);
    #line 2957 
    btc8723b2ant_power_save_state(btcoexist,(unsigned char)1,(unsigned char)80,(unsigned char)4);
  }
  #line 2961 
  btc8723b2ant_tdma_duration_adjust(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)2);
  #line 2964 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)24,(void *)(& wifi_bw));
  #line 2965 
  if (wifi_bw == 2U) 
                     #line 2966 
                     btc8723b2ant_sw_mechanism(btcoexist,(_Bool)1,(_Bool)0,(_Bool)0,(_Bool)0); else 
                                                                    #line 2969 
                                                                    btc8723b2ant_sw_mechanism(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,(_Bool)0);
  #line 2970 
  return;
}

#line 2974  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b2ant.c"
static void btc8723b2ant_action_pan_edr(struct btc_coexist *btcoexist)
{
  #line 2976 
  u8 wifi_rssi_state;
  #line 2976 
  u8 wifi_rssi_state1;
  #line 2976 
  u8 bt_rssi_state;
  #line 2977 
  u32 wifi_bw;
  #line 2978 
  u8 tmp = (unsigned char)(42U - (unsigned int)coex_dm_3->switch_thres_offset);
  #line 2981 
  wifi_rssi_state = btc8723b2ant_wifi_rssi_state(btcoexist,(unsigned char)0,(unsigned char)2,(unsigned char)15,(unsigned char)0);
  #line 2982 
  wifi_rssi_state1 = btc8723b2ant_wifi_rssi_state(btcoexist,(unsigned char)1,(unsigned char)2,(unsigned char)((int)tmp),(unsigned char)0);
  #line 2984 
  tmp = (unsigned char)(46U - (unsigned int)coex_dm_3->switch_thres_offset);
  #line 2986 
  bt_rssi_state = btc8723b2ant_bt_rssi_state(btcoexist,(unsigned char)2,(unsigned char)((int)tmp),(unsigned char)0);
  #line 2988 
  (*(btcoexist->btc_set_rf_reg))((void *)btcoexist,(unsigned char)0,1U,1048575U,0U);
  #line 2990 
  btc8723b2ant_limited_rx(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,(unsigned char)8);
  #line 2991 
  btc8723b2ant_fw_dac_swing_lvl(btcoexist,(_Bool)0,(unsigned char)6);
  #line 2993 
  if ((unsigned int)bt_rssi_state == 0U || (unsigned int)bt_rssi_state == 3U) 
    #line 2994 
    btc8723b2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)2); else 
                                                                    #line 2996 
                                                                    btc8723b2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)0);
  #line 2998 
  if (((unsigned int)wifi_rssi_state1 == 0U || (unsigned int)wifi_rssi_state1 == 3U) && ((unsigned int)bt_rssi_state == 0U || (unsigned int)bt_rssi_state == 3U)) {
    #line 2999 
    btc8723b2ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)10);
    #line 3000 
    btc8723b2ant_power_save_state(btcoexist,(unsigned char)0,(unsigned char)0,(unsigned char)0);
  }
  else {
    #line 3003 
    btc8723b2ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)13);
    #line 3004 
    btc8723b2ant_power_save_state(btcoexist,(unsigned char)1,(unsigned char)80,(unsigned char)4);
  }
  #line 3008 
  if ((unsigned int)bt_rssi_state == 0U || (unsigned int)bt_rssi_state == 3U) 
    #line 3010 
    btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)1); else 
                                                                    #line 3012 
                                                                    btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)5);
  #line 3015 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)24,(void *)(& wifi_bw));
  #line 3016 
  if (wifi_bw == 2U) 
                     #line 3017 
                     btc8723b2ant_sw_mechanism(btcoexist,(_Bool)1,(_Bool)0,(_Bool)0,(_Bool)0); else 
                                                                    #line 3020 
                                                                    btc8723b2ant_sw_mechanism(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,(_Bool)0);
  #line 3021 
  return;
}

#line 3026  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b2ant.c"
static void btc8723b2ant_action_pan_hs(struct btc_coexist *btcoexist)
{
  #line 3028 
  u8 wifi_rssi_state;
  #line 3028 
  u8 wifi_rssi_state1;
  #line 3028 
  u8 bt_rssi_state;
  #line 3029 
  u32 wifi_bw;
  #line 3030 
  u8 tmp = (unsigned char)(42U - (unsigned int)coex_dm_3->switch_thres_offset);
  #line 3033 
  wifi_rssi_state = btc8723b2ant_wifi_rssi_state(btcoexist,(unsigned char)0,(unsigned char)2,(unsigned char)15,(unsigned char)0);
  #line 3034 
  wifi_rssi_state1 = btc8723b2ant_wifi_rssi_state(btcoexist,(unsigned char)1,(unsigned char)2,(unsigned char)((int)tmp),(unsigned char)0);
  #line 3036 
  tmp = (unsigned char)(46U - (unsigned int)coex_dm_3->switch_thres_offset);
  #line 3038 
  bt_rssi_state = btc8723b2ant_bt_rssi_state(btcoexist,(unsigned char)2,(unsigned char)((int)tmp),(unsigned char)0);
  #line 3040 
  (*(btcoexist->btc_set_rf_reg))((void *)btcoexist,(unsigned char)0,1U,1048575U,0U);
  #line 3042 
  btc8723b2ant_limited_rx(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,(unsigned char)8);
  #line 3043 
  btc8723b2ant_fw_dac_swing_lvl(btcoexist,(_Bool)0,(unsigned char)6);
  #line 3045 
  if ((unsigned int)bt_rssi_state == 0U || (unsigned int)bt_rssi_state == 3U) 
    #line 3046 
    btc8723b2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)2); else 
                                                                    #line 3048 
                                                                    btc8723b2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)0);
  #line 3050 
  btc8723b2ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)7);
  #line 3051 
  btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)0,(unsigned char)1);
  #line 3053 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)24,(void *)(& wifi_bw));
  #line 3054 
  if (wifi_bw == 2U) 
                     #line 3055 
                     btc8723b2ant_sw_mechanism(btcoexist,(_Bool)1,(_Bool)0,(_Bool)0,(_Bool)0); else 
                                                                    #line 3058 
                                                                    btc8723b2ant_sw_mechanism(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,(_Bool)0);
  #line 3059 
  return;
}

#line 3064  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b2ant.c"
static void btc8723b2ant_action_pan_edr_a2dp(struct btc_coexist *btcoexist)
{
  #line 3066 
  u8 wifi_rssi_state;
  #line 3066 
  u8 wifi_rssi_state1;
  #line 3066 
  u8 bt_rssi_state;
  #line 3067 
  u32 wifi_bw;
  #line 3068 
  u8 tmp = (unsigned char)(42U - (unsigned int)coex_dm_3->switch_thres_offset);
  #line 3071 
  wifi_rssi_state = btc8723b2ant_wifi_rssi_state(btcoexist,(unsigned char)0,(unsigned char)2,(unsigned char)15,(unsigned char)0);
  #line 3072 
  wifi_rssi_state1 = btc8723b2ant_wifi_rssi_state(btcoexist,(unsigned char)1,(unsigned char)2,(unsigned char)((int)tmp),(unsigned char)0);
  #line 3074 
  tmp = (unsigned char)(46U - (unsigned int)coex_dm_3->switch_thres_offset);
  #line 3076 
  bt_rssi_state = btc8723b2ant_bt_rssi_state(btcoexist,(unsigned char)2,(unsigned char)((int)tmp),(unsigned char)0);
  #line 3078 
  (*(btcoexist->btc_set_rf_reg))((void *)btcoexist,(unsigned char)0,1U,1048575U,0U);
  #line 3080 
  btc8723b2ant_fw_dac_swing_lvl(btcoexist,(_Bool)0,(unsigned char)6);
  #line 3082 
  if ((unsigned int)bt_rssi_state == 0U || (unsigned int)bt_rssi_state == 3U) 
    #line 3083 
    btc8723b2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)2); else 
                                                                    #line 3085 
                                                                    btc8723b2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)0);
  #line 3087 
  if (((unsigned int)wifi_rssi_state1 == 0U || (unsigned int)wifi_rssi_state1 == 3U) && ((unsigned int)bt_rssi_state == 0U || (unsigned int)bt_rssi_state == 3U)) 
    #line 3088 
    btc8723b2ant_power_save_state(btcoexist,(unsigned char)0,(unsigned char)0,(unsigned char)0); else 
                                                                    #line 3091 
                                                                    btc8723b2ant_power_save_state(btcoexist,(unsigned char)1,(unsigned char)80,(unsigned char)4);
  #line 3093 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)24,(void *)(& wifi_bw));
  #line 3095 
  if ((unsigned int)bt_rssi_state == 0U || (unsigned int)bt_rssi_state == 3U) {
    #line 3097 
    btc8723b2ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)12);
    #line 3098 
    if (wifi_bw == 2U) 
                       #line 3099 
                       btc8723b2ant_tdma_duration_adjust(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)3); else 
                                                                    #line 3102 
                                                                    btc8723b2ant_tdma_duration_adjust(btcoexist,(_Bool)0,(_Bool)0,(unsigned char)3);
  }
  else {
    #line 3105 
    btc8723b2ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)7);
    #line 3106 
    btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)1,(unsigned char)3);
  }
  #line 3110 
  if (wifi_bw == 2U) 
                     #line 3111 
                     btc8723b2ant_sw_mechanism(btcoexist,(_Bool)1,(_Bool)0,(_Bool)0,(_Bool)0); else 
                                                                    #line 3114 
                                                                    btc8723b2ant_sw_mechanism(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,(_Bool)0);
  #line 3115 
  return;
}

#line 3119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b2ant.c"
static void btc8723b2ant_action_pan_edr_hid(struct btc_coexist *btcoexist)
{
  #line 3121 
  u8 wifi_rssi_state;
  #line 3121 
  u8 wifi_rssi_state1;
  #line 3121 
  u8 bt_rssi_state;
  #line 3122 
  u32 wifi_bw;
  #line 3123 
  u8 tmp = (unsigned char)(42U - (unsigned int)coex_dm_3->switch_thres_offset);
  #line 3126 
  wifi_rssi_state = btc8723b2ant_wifi_rssi_state(btcoexist,(unsigned char)0,(unsigned char)2,(unsigned char)15,(unsigned char)0);
  #line 3127 
  wifi_rssi_state1 = btc8723b2ant_wifi_rssi_state(btcoexist,(unsigned char)1,(unsigned char)2,(unsigned char)((int)tmp),(unsigned char)0);
  #line 3129 
  tmp = (unsigned char)(46U - (unsigned int)coex_dm_3->switch_thres_offset);
  #line 3131 
  bt_rssi_state = btc8723b2ant_bt_rssi_state(btcoexist,(unsigned char)2,(unsigned char)((int)tmp),(unsigned char)0);
  #line 3132 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)24,(void *)(& wifi_bw));
  #line 3134 
  btc8723b2ant_limited_rx(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,(unsigned char)8);
  #line 3136 
  if ((unsigned int)bt_rssi_state == 0U || (unsigned int)bt_rssi_state == 3U) 
    #line 3137 
    btc8723b2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)2); else 
                                                                    #line 3139 
                                                                    btc8723b2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)0);
  #line 3141 
  if (((unsigned int)wifi_rssi_state1 == 0U || (unsigned int)wifi_rssi_state1 == 3U) && ((unsigned int)bt_rssi_state == 0U || (unsigned int)bt_rssi_state == 3U)) {
    #line 3142 
    btc8723b2ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)7);
    #line 3143 
    btc8723b2ant_power_save_state(btcoexist,(unsigned char)0,(unsigned char)0,(unsigned char)0);
  }
  else {
    #line 3146 
    btc8723b2ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)14);
    #line 3147 
    btc8723b2ant_power_save_state(btcoexist,(unsigned char)1,(unsigned char)80,(unsigned char)4);
  }
  #line 3151 
  if ((unsigned int)bt_rssi_state == 0U || (unsigned int)bt_rssi_state == 3U) {
    #line 3153 
    if (wifi_bw == 2U) {
      #line 3154 
      btc8723b2ant_fw_dac_swing_lvl(btcoexist,(_Bool)0,(unsigned char)3);
      #line 3156 
      (*(btcoexist->btc_set_rf_reg))((void *)btcoexist,(unsigned char)0,1U,1048575U,1920U);
    }
    else {
      #line 3159 
      btc8723b2ant_fw_dac_swing_lvl(btcoexist,(_Bool)0,(unsigned char)6);
      #line 3161 
      (*(btcoexist->btc_set_rf_reg))((void *)btcoexist,(unsigned char)0,1U,1048575U,0U);
    }
    #line 3164 
    btc8723b2ant_tdma_duration_adjust(btcoexist,(_Bool)1,(_Bool)0,(unsigned char)2);
  }
  else {
    #line 3166 
    btc8723b2ant_fw_dac_swing_lvl(btcoexist,(_Bool)0,(unsigned char)6);
    #line 3167 
    (*(btcoexist->btc_set_rf_reg))((void *)btcoexist,(unsigned char)0,1U,1048575U,0U);
    #line 3169 
    btc8723b2ant_tdma_duration_adjust(btcoexist,(_Bool)1,(_Bool)1,(unsigned char)2);
  }
  #line 3173 
  if (wifi_bw == 2U) 
                     #line 3174 
                     btc8723b2ant_sw_mechanism(btcoexist,(_Bool)1,(_Bool)1,(_Bool)0,(_Bool)0); else 
                                                                    #line 3177 
                                                                    btc8723b2ant_sw_mechanism(btcoexist,(_Bool)0,(_Bool)1,(_Bool)0,(_Bool)0);
  #line 3178 
  return;
}

#line 3183  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b2ant.c"
static void btc8723b2ant_action_hid_a2dp_pan_edr(struct btc_coexist *btcoexist)
{
  #line 3185 
  u8 wifi_rssi_state;
  #line 3185 
  u8 wifi_rssi_state1;
  #line 3185 
  u8 bt_rssi_state;
  #line 3186 
  u32 wifi_bw;
  #line 3187 
  u8 tmp = (unsigned char)(42U - (unsigned int)coex_dm_3->switch_thres_offset);
  #line 3190 
  wifi_rssi_state = btc8723b2ant_wifi_rssi_state(btcoexist,(unsigned char)0,(unsigned char)2,(unsigned char)15,(unsigned char)0);
  #line 3191 
  wifi_rssi_state1 = btc8723b2ant_wifi_rssi_state(btcoexist,(unsigned char)1,(unsigned char)2,(unsigned char)((int)tmp),(unsigned char)0);
  #line 3193 
  tmp = (unsigned char)(46U - (unsigned int)coex_dm_3->switch_thres_offset);
  #line 3195 
  bt_rssi_state = btc8723b2ant_bt_rssi_state(btcoexist,(unsigned char)2,(unsigned char)((int)tmp),(unsigned char)0);
  #line 3197 
  (*(btcoexist->btc_set_rf_reg))((void *)btcoexist,(unsigned char)0,1U,1048575U,0U);
  #line 3199 
  btc8723b2ant_limited_rx(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,(unsigned char)8);
  #line 3200 
  btc8723b2ant_fw_dac_swing_lvl(btcoexist,(_Bool)0,(unsigned char)6);
  #line 3202 
  if ((unsigned int)bt_rssi_state == 0U || (unsigned int)bt_rssi_state == 3U) 
    #line 3203 
    btc8723b2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)2); else 
                                                                    #line 3205 
                                                                    btc8723b2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)0);
  #line 3207 
  if (((unsigned int)wifi_rssi_state1 == 0U || (unsigned int)wifi_rssi_state1 == 3U) && ((unsigned int)bt_rssi_state == 0U || (unsigned int)bt_rssi_state == 3U)) {
    #line 3208 
    btc8723b2ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)7);
    #line 3209 
    btc8723b2ant_power_save_state(btcoexist,(unsigned char)0,(unsigned char)0,(unsigned char)0);
  }
  else {
    #line 3212 
    btc8723b2ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)14);
    #line 3213 
    btc8723b2ant_power_save_state(btcoexist,(unsigned char)1,(unsigned char)80,(unsigned char)4);
  }
  #line 3217 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)24,(void *)(& wifi_bw));
  #line 3220 
  if ((unsigned int)bt_rssi_state == 0U || (unsigned int)bt_rssi_state == 3U) 
    #line 3222 
    if (wifi_bw == 2U) 
                       #line 3223 
                       btc8723b2ant_tdma_duration_adjust(btcoexist,(_Bool)1,(_Bool)1,(unsigned char)2); else 
                                                                    #line 3226 
                                                                    btc8723b2ant_tdma_duration_adjust(btcoexist,(_Bool)1,(_Bool)0,(unsigned char)3);
  else 
       #line 3229 
       btc8723b2ant_tdma_duration_adjust(btcoexist,(_Bool)1,(_Bool)1,(unsigned char)3);
  #line 3233 
  if (wifi_bw == 2U) 
                     #line 3234 
                     btc8723b2ant_sw_mechanism(btcoexist,(_Bool)1,(_Bool)1,(_Bool)0,(_Bool)0); else 
                                                                    #line 3237 
                                                                    btc8723b2ant_sw_mechanism(btcoexist,(_Bool)0,(_Bool)1,(_Bool)0,(_Bool)0);
  #line 3238 
  return;
}

#line 3242  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b2ant.c"
static void btc8723b2ant_action_hid_a2dp(struct btc_coexist *btcoexist)
{
  #line 3244 
  u8 wifi_rssi_state;
  #line 3244 
  u8 wifi_rssi_state1;
  #line 3244 
  u8 bt_rssi_state;
  #line 3245 
  u32 wifi_bw;
  #line 3246 
  u8 ap_num = (unsigned char)0U;
  #line 3247 
  u8 tmp = (unsigned char)(42U - (unsigned int)coex_dm_3->switch_thres_offset);
  #line 3250 
  wifi_rssi_state = btc8723b2ant_wifi_rssi_state(btcoexist,(unsigned char)0,(unsigned char)2,(unsigned char)15,(unsigned char)0);
  #line 3251 
  wifi_rssi_state1 = btc8723b2ant_wifi_rssi_state(btcoexist,(unsigned char)1,(unsigned char)2,(unsigned char)((int)tmp),(unsigned char)0);
  #line 3253 
  tmp = (unsigned char)(46U - (unsigned int)coex_dm_3->switch_thres_offset);
  #line 3255 
  bt_rssi_state = btc8723b2ant_bt_rssi_state(btcoexist,(unsigned char)3,(unsigned char)((int)tmp),(unsigned char)37);
  #line 3257 
  (*(btcoexist->btc_set_rf_reg))((void *)btcoexist,(unsigned char)0,1U,1048575U,0U);
  #line 3259 
  btc8723b2ant_limited_rx(btcoexist,(_Bool)0,(_Bool)0,(_Bool)1,(unsigned char)5);
  #line 3260 
  btc8723b2ant_fw_dac_swing_lvl(btcoexist,(_Bool)0,(unsigned char)6);
  #line 3262 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)24,(void *)(& wifi_bw));
  #line 3264 
  if (wifi_bw == 0U) 
    #line 3265 
    if ((unsigned int)bt_rssi_state == 0U || (unsigned int)bt_rssi_state == 3U) 
      #line 3266 
      btc8723b2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)2);
    else 
      #line 3267 
      if ((unsigned int)bt_rssi_state == 1U || (unsigned int)bt_rssi_state == 4U) 
        #line 3268 
        btc8723b2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)2); else 
                                                                    #line 3270 
                                                                    btc8723b2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)0);
  else 
    #line 3273 
    if ((unsigned int)bt_rssi_state == 0U || (unsigned int)bt_rssi_state == 3U) 
      #line 3275 
      if ((unsigned int)ap_num <= 9U) 
                                      #line 3276 
                                      btc8723b2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)4); else 
                                                                    #line 3279 
                                                                    btc8723b2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)2);
    else 
      #line 3281 
      if ((unsigned int)bt_rssi_state == 1U || (unsigned int)bt_rssi_state == 4U) 
        #line 3282 
        btc8723b2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)2); else 
                                                                    #line 3284 
                                                                    btc8723b2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)0);
  #line 3288 
  if (((unsigned int)wifi_rssi_state1 == 0U || (unsigned int)wifi_rssi_state1 == 3U) && ((unsigned int)bt_rssi_state == 0U || (unsigned int)bt_rssi_state == 3U)) {
    #line 3289 
    btc8723b2ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)7);
    #line 3290 
    btc8723b2ant_power_save_state(btcoexist,(unsigned char)0,(unsigned char)0,(unsigned char)0);
  }
  else {
    #line 3293 
    btc8723b2ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)14);
    #line 3294 
    btc8723b2ant_power_save_state(btcoexist,(unsigned char)1,(unsigned char)80,(unsigned char)4);
  }
  #line 3298 
  if ((unsigned int)bt_rssi_state == 0U || (unsigned int)bt_rssi_state == 3U) 
    #line 3299 
    if ((unsigned int)ap_num <= 9U) 
                                    #line 3300 
                                    btc8723b2ant_tdma_duration_adjust(btcoexist,(_Bool)1,(_Bool)0,(unsigned char)1); else 
                                                                    #line 3303 
                                                                    btc8723b2ant_tdma_duration_adjust(btcoexist,(_Bool)1,(_Bool)0,(unsigned char)3);
  else {
    #line 3306 
    btc8723b2ant_fw_dac_swing_lvl(btcoexist,(_Bool)0,(unsigned char)18);
    #line 3307 
    (*(btcoexist->btc_write_1byte))((void *)btcoexist,1110U,56U);
    #line 3308 
    (*(btcoexist->btc_write_2byte))((void *)btcoexist,1066U,(unsigned short)2056);
    #line 3309 
    (*(btcoexist->btc_write_4byte))((void *)btcoexist,1072U,0U);
    #line 3310 
    (*(btcoexist->btc_write_4byte))((void *)btcoexist,1076U,16842752U);
    #line 3312 
    if ((unsigned int)ap_num <= 9U) 
                                    #line 3313 
                                    btc8723b2ant_tdma_duration_adjust(btcoexist,(_Bool)1,(_Bool)1,(unsigned char)1); else 
                                                                    #line 3316 
                                                                    btc8723b2ant_tdma_duration_adjust(btcoexist,(_Bool)1,(_Bool)1,(unsigned char)3);
  }
  #line 3321 
  if (wifi_bw == 2U) 
                     #line 3322 
                     btc8723b2ant_sw_mechanism(btcoexist,(_Bool)1,(_Bool)1,(_Bool)0,(_Bool)0); else 
                                                                    #line 3325 
                                                                    btc8723b2ant_sw_mechanism(btcoexist,(_Bool)0,(_Bool)1,(_Bool)0,(_Bool)0);
  #line 3326 
  return;
}

#line 3330  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b2ant.c"
static void btc8723b2ant_action_wifi_multi_port(struct btc_coexist *btcoexist)
{
  #line 3332 
  btc8723b2ant_fw_dac_swing_lvl(btcoexist,(_Bool)0,(unsigned char)6);
  #line 3333 
  btc8723b2ant_dec_bt_pwr(btcoexist,(_Bool)0,(unsigned char)0);
  #line 3336 
  btc8723b2ant_sw_mechanism(btcoexist,(_Bool)0,(_Bool)0,(_Bool)0,(_Bool)0);
  #line 3339 
  btc8723b2ant_coex_table_with_type(btcoexist,(_Bool)0,(unsigned char)0);
  #line 3341 
  btc8723b2ant_power_save_state(btcoexist,(unsigned char)0,(unsigned char)0,(unsigned char)0);
  #line 3342 
  btc8723b2ant_ps_tdma(btcoexist,(_Bool)0,(_Bool)0,(unsigned char)1);
  #line 3343 
  return;
}

#line 3345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b2ant.c"
static void btc8723b2ant_run_coexist_mechanism(struct btc_coexist *btcoexist)
{
  #line 3347 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 3348 
  u8 algorithm = (unsigned char)0U;
  #line 3349 
  u32 num_of_wifi_link = 0U;
  #line 3350 
  u32 wifi_link_status = 0U;
  #line 3351 
  struct btc_bt_link_info *bt_link_info = & btcoexist->bt_link_info;
  #line 3352 
  bool miracast_plus_bt = (_Bool)0;
  #line 3353 
  bool scan = (_Bool)0;
  #line 3353 
  bool link = (_Bool)0;
  #line 3353 
  bool roam = (_Bool)0;
  #line 3355 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], RunCoexistMechanism()===>\n");
  #line 3358 
  if ((int)btcoexist->manual_control != 0) {
    #line 3359 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], RunCoexistMechanism(), return for Manual CTRL <===\n");
    #line 3361 
    return;
  }
  #line 3364 
  if ((int)coex_sta_3->under_ips != 0) {
    #line 3365 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], wifi is under IPS !!!\n");
    #line 3367 
    return;
  }
  #line 3370 
  algorithm = btc8723b2ant_action_algorithm(btcoexist);
  #line 3371 
  if ((int)coex_sta_3->c2h_bt_inquiry_page != 0 && (unsigned int)algorithm != 6U) {
    #line 3373 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BT is under inquiry/page scan !!\n");
    #line 3375 
    btc8723b2ant_action_bt_inquiry(btcoexist);
    #line 3376 
    return;
  }
  #line 3379 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)5,(void *)(& scan));
  #line 3380 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)6,(void *)(& link));
  #line 3381 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)11,(void *)(& roam));
  #line 3383 
  if (((int)scan != 0 || (int)link != 0) || (int)roam != 0) {
    #line 3384 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], WiFi is under Link Process !!\n");
    #line 3386 
    btc8723b2ant_action_wifi_link_process(btcoexist);
    #line 3387 
    return;
  }
  #line 3391 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)27,(void *)(& wifi_link_status));
  #line 3393 
  num_of_wifi_link = wifi_link_status >> 16;
  #line 3395 
  if (num_of_wifi_link > 1U || (wifi_link_status & 8U) != 0U) {
    #line 3397 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"############# [BTCoex],  Multi-Port num_of_wifi_link = %d, wifi_link_status = 0x%x\n",num_of_wifi_link,wifi_link_status);
    #line 3401 
    if ((int)bt_link_info->bt_link_exist != 0) 
                                               #line 3402 
                                               miracast_plus_bt = (_Bool)1; else 
                                                                    #line 3404 
                                                                    miracast_plus_bt = (_Bool)0;
    #line 3406 
    (*(btcoexist->btc_set))((void *)btcoexist,(unsigned char)8,(void *)(& miracast_plus_bt));
    #line 3408 
    btc8723b2ant_action_wifi_multi_port(btcoexist);
    #line 3410 
    return;
  }
  #line 3413 
  miracast_plus_bt = (_Bool)0;
  #line 3414 
  (*(btcoexist->btc_set))((void *)btcoexist,(unsigned char)8,(void *)(& miracast_plus_bt));
  #line 3417 
  coex_dm_3->cur_algorithm = algorithm;
  #line 3418 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Algorithm = %d\n",(int)coex_dm_3->cur_algorithm);
  #line 3422 
  if ((int)btc8723b2ant_is_common_action(btcoexist) != 0) {
    #line 3423 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Action 2-Ant common\n");
    #line 3425 
    coex_dm_3->auto_tdma_adjust = (_Bool)0;
  }
  else {
    #line 3427 
    if ((int)coex_dm_3->cur_algorithm != (int)coex_dm_3->pre_algorithm) {
      #line 3428 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], preAlgorithm=%d, curAlgorithm=%d\n",(int)coex_dm_3->pre_algorithm,(int)coex_dm_3->cur_algorithm);
      #line 3432 
      coex_dm_3->auto_tdma_adjust = (_Bool)0;
    }
    #line 3434 
    switch ((int)coex_dm_3->cur_algorithm) {
      #line 3435 
      case 1: 
              #line 3435 
      ;
      #line 3436 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Action 2-Ant, algorithm = SCO\n");
      #line 3438 
      btc8723b2ant_action_sco(btcoexist);
      #line 3439 
      break;
      #line 3440 
      case 2: 
              #line 3440 
      ;
      #line 3441 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Action 2-Ant, algorithm = HID\n");
      #line 3443 
      btc8723b2ant_action_hid(btcoexist);
      #line 3444 
      break;
      #line 3445 
      case 3: 
              #line 3445 
      ;
      #line 3446 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Action 2-Ant, algorithm = A2DP\n");
      #line 3448 
      btc8723b2ant_action_a2dp(btcoexist);
      #line 3449 
      break;
      #line 3450 
      case 4: 
              #line 3450 
      ;
      #line 3451 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Action 2-Ant, algorithm = A2DP+PAN(HS)\n");
      #line 3453 
      btc8723b2ant_action_a2dp_pan_hs(btcoexist);
      #line 3454 
      break;
      #line 3455 
      case 5: 
              #line 3455 
      ;
      #line 3456 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Action 2-Ant, algorithm = PAN(EDR)\n");
      #line 3458 
      btc8723b2ant_action_pan_edr(btcoexist);
      #line 3459 
      break;
      #line 3460 
      case 6: 
              #line 3460 
      ;
      #line 3461 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Action 2-Ant, algorithm = HS mode\n");
      #line 3463 
      btc8723b2ant_action_pan_hs(btcoexist);
      #line 3464 
      break;
      #line 3465 
      case 7: 
              #line 3465 
      ;
      #line 3466 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Action 2-Ant, algorithm = PAN+A2DP\n");
      #line 3468 
      btc8723b2ant_action_pan_edr_a2dp(btcoexist);
      #line 3469 
      break;
      #line 3470 
      case 8: 
              #line 3470 
      ;
      #line 3471 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Action 2-Ant, algorithm = PAN(EDR)+HID\n");
      #line 3473 
      btc8723b2ant_action_pan_edr_hid(btcoexist);
      #line 3474 
      break;
      #line 3475 
      case 9: 
              #line 3475 
      ;
      #line 3476 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Action 2-Ant, algorithm = HID+A2DP+PAN\n");
      #line 3478 
      btc8723b2ant_action_hid_a2dp_pan_edr(btcoexist);
      #line 3479 
      break;
      #line 3480 
      case 10: 
               #line 3480 
      ;
      #line 3481 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Action 2-Ant, algorithm = HID+A2DP\n");
      #line 3483 
      btc8723b2ant_action_hid_a2dp(btcoexist);
      #line 3484 
      break;
      #line 3485 
      default: 
               #line 3485 
      ;
      #line 3486 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Action 2-Ant, algorithm = coexist All Off!!\n");
      #line 3488 
      btc8723b2ant_coex_alloff(btcoexist);
      #line 3489 
      break;
    }
    #line 3491 
    coex_dm_3->pre_algorithm = coex_dm_3->cur_algorithm;
  }
  #line 3493 
  return;
}

#line 3495  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b2ant.c"
static void btc8723b2ant_wifioff_hwcfg(struct btc_coexist *btcoexist)
{
  #line 3497 
  bool is_in_mp_mode = (_Bool)0;
  #line 3498 
  u8 h2c_parameter[2U] = {(unsigned char)0U};
  #line 3499 
  u32 fw_ver = 0U;
  #line 3502 
  (*(btcoexist->btc_write_1byte))((void *)btcoexist,1902U,4U);
  #line 3505 
  (*(btcoexist->btc_set_rf_reg))((void *)btcoexist,(unsigned char)0,1U,1048575U,1920U);
  #line 3507 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)26,(void *)(& fw_ver));
  #line 3508 
  if (fw_ver > 1572863U) {
    #line 3510 
    h2c_parameter[0] = (unsigned char)1U;
    #line 3511 
    (*(btcoexist->btc_fill_h2c))((void *)btcoexist,(unsigned char)110,1U,(u8 *)(& h2c_parameter));
  }
  else 
       #line 3513 
       (*(btcoexist->btc_write_1byte))((void *)btcoexist,1893U,24U);
  #line 3516 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)18,(void *)(& is_in_mp_mode));
  #line 3518 
  if (! is_in_mp_mode) 
                       #line 3520 
                       (*(btcoexist->btc_write_1byte_bitmask))((void *)btcoexist,103U,32U,(unsigned char)0); else 
                                                                    #line 3523 
                                                                    (*(btcoexist->btc_write_1byte_bitmask))((void *)btcoexist,103U,32U,(unsigned char)1);
  #line 3524 
  return;
}

#line 3529  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b2ant.c"
void ex_btc8723b2ant_init_hwconfig(struct btc_coexist *btcoexist)
{
  #line 3531 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 3532 
  u8 u8tmp = (unsigned char)0U;
  #line 3534 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], 2Ant Init HW Config!!\n");
  #line 3536 
  coex_dm_3->bt_rf0x1e_backup = (*(btcoexist->btc_get_rf_reg))((void *)btcoexist,(unsigned char)0,30U,1048575U);
  #line 3540 
  u8tmp = (*(btcoexist->btc_read_1byte))((void *)btcoexist,1936U);
  #line 3541 
  u8tmp = (unsigned char)((unsigned int)u8tmp & 192U);
  #line 3542 
  u8tmp = (unsigned char)((unsigned int)u8tmp | 5U);
  #line 3543 
  (*(btcoexist->btc_write_1byte))((void *)btcoexist,1936U,(unsigned int)u8tmp);
  #line 3546 
  btc8723b2ant_set_ant_path(btcoexist,(unsigned char)0,(_Bool)1,(_Bool)0);
  #line 3548 
  coex_sta_3->dis_ver_info_cnt = (unsigned char)0U;
  #line 3551 
  btc8723b2ant_coex_table_with_type(btcoexist,(_Bool)1,(unsigned char)0);
  #line 3555 
  (*(btcoexist->btc_write_1byte))((void *)btcoexist,1902U,4U);
  #line 3556 
  (*(btcoexist->btc_write_1byte))((void *)btcoexist,1912U,3U);
  #line 3557 
  (*(btcoexist->btc_write_1byte_bitmask))((void *)btcoexist,64U,32U,(unsigned char)1);
  #line 3558 
  btcoexist->auto_report_2ant = (_Bool)1;
  #line 3559 
  return;
}

#line 3561  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b2ant.c"
void ex_btc8723b2ant_power_on_setting(struct btc_coexist *btcoexist)
{
  #line 3563 
  struct btc_board_info *board_info = & btcoexist->board_info;
  #line 3564 
  u16 u16tmp = (unsigned short)0U;
  #line 3565 
  u32 value = 0U;
  #line 3567 
  (*(btcoexist->btc_write_1byte))((void *)btcoexist,103U,32U);
  #line 3570 
  u16tmp = (*(btcoexist->btc_read_2byte))((void *)btcoexist,2U);
  #line 3571 
  (*(btcoexist->btc_write_2byte))((void *)btcoexist,2U,(unsigned short)((int)((unsigned int)u16tmp | 3U)));
  #line 3573 
  (*(btcoexist->btc_write_4byte))((void *)btcoexist,2376U,0U);
  #line 3575 
  if (btcoexist->chip_interface == (unsigned int)BTC_INTF_USB) 
                                                               #line 3577 
                                                               board_info->btdm_ant_pos = (unsigned char)2U;
  else {
    #line 3580 
    if ((unsigned int)board_info->single_ant_path == 0U) 
                                                         #line 3582 
                                                         board_info->btdm_ant_pos = (unsigned char)1U;
    else 
      #line 3583 
      if ((unsigned int)board_info->single_ant_path == 1U) 
                                                           #line 3585 
                                                           board_info->btdm_ant_pos = (unsigned char)2U;
    #line 3587 
    (*(btcoexist->btc_set))((void *)btcoexist,(unsigned char)14,(void *)(& value));
  }
  #line 3590 
  return;
}

#line 3592  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b2ant.c"
void ex_btc8723b2ant_pre_load_firmware(struct btc_coexist *btcoexist)
{
  #line 3594 
  struct btc_board_info *board_info = & btcoexist->board_info;
  #line 3595 
  u8 u8tmp = (unsigned char)4U;
  #line 3609 
  if (btcoexist->chip_interface == (unsigned int)BTC_INTF_USB) {
    #line 3611 
    u8tmp = (unsigned char)((unsigned int)u8tmp | 1U);
    #line 3612 
    (*(btcoexist->btc_write_local_reg_1byte))((void *)btcoexist,65032U,(unsigned char)((int)u8tmp));
  }
  else {
    #line 3615 
    if (! ((unsigned int)board_info->single_ant_path == 0U)) 
      #line 3616 
      if ((unsigned int)board_info->single_ant_path == 1U) 
                                                           #line 3618 
                                                           u8tmp = (unsigned char)((unsigned int)u8tmp | 1U);
    #line 3621 
    if (btcoexist->chip_interface == (unsigned int)BTC_INTF_PCI) 
                                                                 #line 3622 
                                                                 (*(btcoexist->btc_write_local_reg_1byte))((void *)btcoexist,900U,(unsigned char)((int)u8tmp));
    else 
      #line 3624 
      if (btcoexist->chip_interface == (unsigned int)BTC_INTF_SDIO) 
                                                                    #line 3625 
                                                                    (*(btcoexist->btc_write_local_reg_1byte))((void *)btcoexist,96U,(unsigned char)((int)u8tmp));
  }
  #line 3627 
  return;
}

#line 3630  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b2ant.c"
void ex_btc8723b2ant_init_coex_dm(struct btc_coexist *btcoexist)
{
  #line 3632 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 3634 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Coex Mechanism Init!!\n");
  #line 3636 
  btc8723b2ant_init_coex_dm(btcoexist);
  #line 3637 
  return;
}

#line 3639  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b2ant.c"
void ex_btc8723b2ant_display_coex_info(struct btc_coexist *btcoexist, struct seq_file *m)
{
  #line 3710 
  char *tmp_2;
  #line 3645 
  u8 u8tmp[4U];
  #line 3645 
  u8 i;
  #line 3645 
  u8 bt_info_ext;
  #line 3646 
  u32 u32tmp[4U];
  #line 3651 
  u32 wifi_bw;
  #line 3651 
  u32 wifi_traffic_dir;
  #line 3651 
  u32 fa_ofdm;
  #line 3651 
  u32 fa_cck;
  #line 3652 
  u8 wifi_dot11_chnl;
  #line 3652 
  u8 wifi_hs_chnl;
  #line 3668 
  char *tmp;
  #line 3712 
  char *tmp_1;
  #line 3709 
  char *tmp_3;
  #line 3709 
  char *tmp_4;
  #line 3724 
  char *tmp_5;
  #line 3738 
  char *tmp_6;
  #line 3737 
  char *tmp_7;
  #line 3642 
  struct btc_board_info *board_info = & btcoexist->board_info;
  #line 3643 
  struct btc_stack_info *stack_info = & btcoexist->stack_info;
  #line 3644 
  struct btc_bt_link_info *bt_link_info = & btcoexist->bt_link_info;
  #line 3645 
  u8 ps_tdma_case = (unsigned char)0U;
  #line 3647 
  bool roam = (_Bool)0;
  #line 3647 
  bool scan = (_Bool)0;
  #line 3648 
  bool link = (_Bool)0;
  #line 3648 
  bool wifi_under_5g = (_Bool)0;
  #line 3649 
  bool bt_hs_on = (_Bool)0;
  #line 3649 
  bool wifi_busy = (_Bool)0;
  #line 3650 
  s32 wifi_rssi = 0;
  #line 3650 
  s32 bt_hs_rssi = 0;
  #line 3653 
  u32 fw_ver = 0U;
  #line 3653 
  u32 bt_patch_ver = 0U;
  #line 3654 
  u8 ap_num = (unsigned char)0U;
  #line 3656 
  seq_puts(m,(char *)"\n ============[BT Coexist info]============");
  #line 3658 
  if ((int)btcoexist->manual_control != 0) {
    #line 3659 
    seq_puts(m,(char *)"\n ==========[Under Manual Control]============");
    #line 3660 
    seq_puts(m,(char *)"\n ==========================================");
  }
  #line 3663 
  seq_printf(m,(char *)"\n %-35s = %d/ %d ",(char *)"Ant PG number/ Ant mechanism:",(int)board_info->pg_ant_num,(int)board_info->btdm_ant_num);
  #line 3667 
  ;
  #line 3668 
  if ((int)stack_info->profile_notified != 0) 
                                              #line 3668 
                                              tmp = (char *)"Yes"; else 
                                                                    #line 3668 
                                                                    tmp = (char *)"No";
  #line 3667 
  ;
  #line 3667 
  seq_printf(m,(char *)"\n %-35s = %s / %d",(char *)"BT stack/ hci ext ver",tmp,(int)stack_info->hci_version);
  #line 3672 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)28,(void *)(& bt_patch_ver));
  #line 3673 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)26,(void *)(& fw_ver));
  #line 3674 
  seq_printf(m,(char *)"\n %-35s = %d_%x/ 0x%x/ 0x%x(%d)",(char *)"CoexVer/ FwVer/ PatchVer",glcoex_ver_date_8723b_2ant,glcoex_ver_8723b_2ant,fw_ver,bt_patch_ver,bt_patch_ver);
  #line 3679 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)0,(void *)(& bt_hs_on));
  #line 3680 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)37,(void *)(& wifi_dot11_chnl));
  #line 3682 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)39,(void *)(& wifi_hs_chnl));
  #line 3684 
  seq_printf(m,(char *)"\n %-35s = %d / %d(%d)",(char *)"Dot11 channel / HsChnl(HsMode)",(int)wifi_dot11_chnl,(int)wifi_hs_chnl,(int)bt_hs_on);
  #line 3688 
  seq_printf(m,(char *)"\n %-35s = %3ph ",(char *)"H2C Wifi inform bt chnl Info",(u8 *)(& coex_dm_3->wifi_chnl_info));
  #line 3691 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)22,(void *)(& wifi_rssi));
  #line 3692 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)23,(void *)(& bt_hs_rssi));
  #line 3693 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)41,(void *)(& ap_num));
  #line 3694 
  seq_printf(m,(char *)"\n %-35s = %d/ %d/ %d",(char *)"Wifi rssi/ HS rssi/ AP#",wifi_rssi,bt_hs_rssi,(int)ap_num);
  #line 3697 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)5,(void *)(& scan));
  #line 3698 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)6,(void *)(& link));
  #line 3699 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)11,(void *)(& roam));
  #line 3700 
  seq_printf(m,(char *)"\n %-35s = %d/ %d/ %d ",(char *)"Wifi link/ roam/ scan",(int)link,(int)roam,(int)scan);
  #line 3703 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)13,(void *)(& wifi_under_5g));
  #line 3704 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)24,(void *)(& wifi_bw));
  #line 3705 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)4,(void *)(& wifi_busy));
  #line 3706 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)25,(void *)(& wifi_traffic_dir));
  #line 3712 
  if (! wifi_busy) 
                   #line 3712 
                   tmp_1 = (char *)"idle";
  else {
    #line 3712 
    char *tmp_0;
    #line 3712 
    if (wifi_traffic_dir == 0U) 
                                #line 3712 
                                tmp_0 = (char *)"uplink"; else 
                                                               #line 3712 
                                                               tmp_0 = (char *)"downlink";
    #line 3712 
    tmp_1 = tmp_0;
  }
  #line 3709 
  if (wifi_bw != 0U) {
    #line 3710 
    if (wifi_bw == 2U) 
                       #line 3710 
                       tmp_2 = (char *)"HT40"; else 
                                                    #line 3710 
                                                    tmp_2 = (char *)"HT20";
    #line 3709 
    tmp_3 = tmp_2;
  }
  else 
       #line 3709 
       tmp_3 = (char *)"Legacy";
  #line 3709 
  if ((int)wifi_under_5g != 0) 
                               #line 3709 
                               tmp_4 = (char *)"5G"; else 
                                                          #line 3709 
                                                          tmp_4 = (char *)"2.4G";
  #line 3708 
  ;
  #line 3708 
  seq_printf(m,(char *)"\n %-35s = %s / %s/ %s ",(char *)"Wifi status",tmp_4,tmp_3,tmp_1);
  #line 3716 
  seq_printf(m,(char *)"\n %-35s = %d / %d / %d / %d",(char *)"SCO/HID/PAN/A2DP",(int)bt_link_info->sco_exist,(int)bt_link_info->hid_exist,(int)bt_link_info->pan_exist,(int)bt_link_info->a2dp_exist);
  #line 3720 
  (*(btcoexist->btc_disp_dbg_msg))((void *)btcoexist,(unsigned char)1,m);
  #line 3722 
  bt_info_ext = coex_sta_3->bt_info_ext;
  #line 3724 
  if (((int)bt_info_ext & 1) != 0) 
                                   #line 3724 
                                   tmp_5 = (char *)"Basic rate"; else 
                                                                   #line 3724 
                                                                   tmp_5 = (char *)"EDR rate";
  #line 3723 
  ;
  #line 3723 
  seq_printf(m,(char *)"\n %-35s = %s",(char *)"BT Info A2DP rate",tmp_5);
  #line 3727 
  i = (unsigned char)0U;
  #line 3727 
  while ((unsigned int)i <= 2U) {
    #line 3728 
    if (coex_sta_3->bt_info_c2h_cnt[(int)i] != 0U) 
                                                   #line 3729 
                                                   seq_printf(m,(char *)"\n %-35s = %7ph(%d)",glbt_info_src_8723b_2ant[(int)i],(u8 *)(& coex_sta_3->bt_info_c2h[(int)i]),coex_sta_3->bt_info_c2h_cnt[(int)i]);
    #line 3727 
    i = (u8)((int)i + 1);
  }
  #line 3738 
  if ((int)coex_sta_3->under_lps != 0) 
                                       #line 3738 
                                       tmp_6 = (char *)"LPS ON"; else 
                                                                   #line 3738 
                                                                   tmp_6 = (char *)"LPS OFF";
  #line 3737 
  if ((int)coex_sta_3->under_ips != 0) 
                                       #line 3737 
                                       tmp_7 = (char *)"IPS ON"; else 
                                                                   #line 3737 
                                                                   tmp_7 = (char *)"IPS OFF";
  #line 3736 
  ;
  #line 3736 
  seq_printf(m,(char *)"\n %-35s = %s/%s",(char *)"PS state, IPS/LPS",tmp_7,tmp_6);
  #line 3740 
  (*(btcoexist->btc_disp_dbg_msg))((void *)btcoexist,(unsigned char)3,m);
  #line 3743 
  seq_printf(m,(char *)"\n %-35s",(char *)"============[Sw mechanism]============");
  #line 3745 
  seq_printf(m,(char *)"\n %-35s = %d/ %d/ %d ",(char *)"SM1[ShRf/ LpRA/ LimDig]",(int)coex_dm_3->cur_rf_rx_lpf_shrink,(int)coex_dm_3->cur_low_penalty_ra,(int)coex_dm_3->limited_dig);
  #line 3748 
  seq_printf(m,(char *)"\n %-35s = %d/ %d/ %d(0x%x) ",(char *)"SM2[AgcT/ AdcB/ SwDacSwing(lvl)]",(int)coex_dm_3->cur_agc_table_en,(int)coex_dm_3->cur_adc_back_off,(int)coex_dm_3->cur_dac_swing_on,coex_dm_3->cur_dac_swing_lvl);
  #line 3754 
  seq_printf(m,(char *)"\n %-35s",(char *)"============[Fw mechanism]============");
  #line 3757 
  ps_tdma_case = coex_dm_3->cur_ps_tdma;
  #line 3758 
  seq_printf(m,(char *)"\n %-35s = %5ph case-%d (auto:%d)",(char *)"PS TDMA",(u8 *)(& coex_dm_3->ps_tdma_para),(int)ps_tdma_case,(int)coex_dm_3->auto_tdma_adjust);
  #line 3762 
  seq_printf(m,(char *)"\n %-35s = %d/ %d ",(char *)"DecBtPwr/ IgnWlanAct",(int)coex_dm_3->cur_dec_bt_pwr_lvl,(int)coex_dm_3->cur_ignore_wlan_act);
  #line 3767 
  seq_printf(m,(char *)"\n %-35s",(char *)"============[Hw setting]============");
  #line 3770 
  seq_printf(m,(char *)"\n %-35s = 0x%x",(char *)"RF-A, 0x1e initVal",coex_dm_3->bt_rf0x1e_backup);
  #line 3773 
  u8tmp[0] = (*(btcoexist->btc_read_1byte))((void *)btcoexist,1912U);
  #line 3774 
  u32tmp[0] = (*(btcoexist->btc_read_4byte))((void *)btcoexist,2176U);
  #line 3775 
  seq_printf(m,(char *)"\n %-35s = 0x%x/ 0x%x",(char *)"0x778/0x880[29:25]",(int)u8tmp[0],(u32tmp[0] >> 25) & 31U);
  #line 3779 
  u32tmp[0] = (*(btcoexist->btc_read_4byte))((void *)btcoexist,2376U);
  #line 3780 
  u8tmp[0] = (*(btcoexist->btc_read_1byte))((void *)btcoexist,103U);
  #line 3781 
  u8tmp[1] = (*(btcoexist->btc_read_1byte))((void *)btcoexist,1893U);
  #line 3782 
  seq_printf(m,(char *)"\n %-35s = 0x%x/ 0x%x/ 0x%x",(char *)"0x948/ 0x67[5] / 0x765",u32tmp[0],((int)u8tmp[0] >> 5) & 1,(int)u8tmp[1]);
  #line 3786 
  u32tmp[0] = (*(btcoexist->btc_read_4byte))((void *)btcoexist,2348U);
  #line 3787 
  u32tmp[1] = (*(btcoexist->btc_read_4byte))((void *)btcoexist,2352U);
  #line 3788 
  u32tmp[2] = (*(btcoexist->btc_read_4byte))((void *)btcoexist,2372U);
  #line 3789 
  seq_printf(m,(char *)"\n %-35s = 0x%x/ 0x%x/ 0x%x",(char *)"0x92c[1:0]/ 0x930[7:0]/0x944[1:0]",u32tmp[0] & 3U,u32tmp[1] & 255U,u32tmp[2] & 3U);
  #line 3793 
  u8tmp[0] = (*(btcoexist->btc_read_1byte))((void *)btcoexist,57U);
  #line 3794 
  u8tmp[1] = (*(btcoexist->btc_read_1byte))((void *)btcoexist,64U);
  #line 3795 
  u32tmp[0] = (*(btcoexist->btc_read_4byte))((void *)btcoexist,76U);
  #line 3796 
  u8tmp[2] = (*(btcoexist->btc_read_1byte))((void *)btcoexist,100U);
  #line 3797 
  seq_printf(m,(char *)"\n %-35s = 0x%x/ 0x%x/ 0x%x/ 0x%x",(char *)"0x38[11]/0x40/0x4c[24:23]/0x64[0]",((int)u8tmp[0] >> 3) & 1,(int)u8tmp[1],(u32tmp[0] >> 23) & 3U,(int)u8tmp[2] & 1);
  #line 3802 
  u32tmp[0] = (*(btcoexist->btc_read_4byte))((void *)btcoexist,1360U);
  #line 3803 
  u8tmp[0] = (*(btcoexist->btc_read_1byte))((void *)btcoexist,1314U);
  #line 3804 
  seq_printf(m,(char *)"\n %-35s = 0x%x/ 0x%x",(char *)"0x550(bcn ctrl)/0x522",u32tmp[0],(int)u8tmp[0]);
  #line 3807 
  u32tmp[0] = (*(btcoexist->btc_read_4byte))((void *)btcoexist,3152U);
  #line 3808 
  u8tmp[0] = (*(btcoexist->btc_read_1byte))((void *)btcoexist,1180U);
  #line 3809 
  seq_printf(m,(char *)"\n %-35s = 0x%x/ 0x%x",(char *)"0xc50(dig)/0x49c(null-drop)",u32tmp[0] & 255U,(int)u8tmp[0]);
  #line 3812 
  u32tmp[0] = (*(btcoexist->btc_read_4byte))((void *)btcoexist,3488U);
  #line 3813 
  u32tmp[1] = (*(btcoexist->btc_read_4byte))((void *)btcoexist,3492U);
  #line 3814 
  u32tmp[2] = (*(btcoexist->btc_read_4byte))((void *)btcoexist,3496U);
  #line 3815 
  u32tmp[3] = (*(btcoexist->btc_read_4byte))((void *)btcoexist,3312U);
  #line 3817 
  u8tmp[0] = (*(btcoexist->btc_read_1byte))((void *)btcoexist,2651U);
  #line 3818 
  u8tmp[1] = (*(btcoexist->btc_read_1byte))((void *)btcoexist,2652U);
  #line 3820 
  fa_ofdm = (((((u32tmp[0] >> 16) + (u32tmp[1] >> 16)) + (u32tmp[1] & 65535U)) + (u32tmp[2] & 65535U)) + (u32tmp[3] >> 16)) + (u32tmp[3] & 65535U);
  #line 3826 
  fa_cck = (unsigned int)(((int)u8tmp[0] << 8) + (int)u8tmp[1]);
  #line 3828 
  seq_printf(m,(char *)"\n %-35s = 0x%x/ 0x%x/ 0x%x",(char *)"OFDM-CCA/OFDM-FA/CCK-FA",u32tmp[0] & 65535U,fa_ofdm,fa_cck);
  #line 3832 
  u32tmp[0] = (*(btcoexist->btc_read_4byte))((void *)btcoexist,1728U);
  #line 3833 
  u32tmp[1] = (*(btcoexist->btc_read_4byte))((void *)btcoexist,1732U);
  #line 3834 
  u32tmp[2] = (*(btcoexist->btc_read_4byte))((void *)btcoexist,1736U);
  #line 3835 
  u8tmp[0] = (*(btcoexist->btc_read_1byte))((void *)btcoexist,1740U);
  #line 3836 
  seq_printf(m,(char *)"\n %-35s = 0x%x/ 0x%x/ 0x%x/ 0x%x",(char *)"0x6c0/0x6c4/0x6c8/0x6cc(coexTable)",u32tmp[0],u32tmp[1],u32tmp[2],(int)u8tmp[0]);
  #line 3840 
  seq_printf(m,(char *)"\n %-35s = %d/ %d",(char *)"0x770(high-pri rx/tx)",coex_sta_3->high_priority_rx,coex_sta_3->high_priority_tx);
  #line 3843 
  seq_printf(m,(char *)"\n %-35s = %d/ %d",(char *)"0x774(low-pri rx/tx)",coex_sta_3->low_priority_rx,coex_sta_3->low_priority_tx);
  #line 3846 
  if ((int)btcoexist->auto_report_2ant != 0) 
                                             #line 3847 
                                             btc8723b2ant_monitor_bt_ctr(btcoexist);
  #line 3848 
  (*(btcoexist->btc_disp_dbg_msg))((void *)btcoexist,(unsigned char)0,m);
  #line 3849 
  return;
}

#line 3851  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b2ant.c"
void ex_btc8723b2ant_ips_notify(struct btc_coexist *btcoexist, u8 type)
{
  #line 3853 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 3855 
  if ((unsigned int)type == 1U) {
    #line 3856 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], IPS ENTER notify\n");
    #line 3858 
    coex_sta_3->under_ips = (_Bool)1;
    #line 3859 
    btc8723b2ant_wifioff_hwcfg(btcoexist);
    #line 3860 
    btc8723b2ant_ignore_wlan_act(btcoexist,(_Bool)1,(_Bool)1);
    #line 3861 
    btc8723b2ant_coex_alloff(btcoexist);
  }
  else 
    #line 3862 
    if ((unsigned int)type == 0U) {
      #line 3863 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], IPS LEAVE notify\n");
      #line 3865 
      coex_sta_3->under_ips = (_Bool)0;
      #line 3866 
      ex_btc8723b2ant_init_hwconfig(btcoexist);
      #line 3867 
      btc8723b2ant_init_coex_dm(btcoexist);
      #line 3868 
      btc8723b2ant_query_bt_info(btcoexist);
    }
  #line 3870 
  return;
}

#line 3872  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b2ant.c"
void ex_btc8723b2ant_lps_notify(struct btc_coexist *btcoexist, u8 type)
{
  #line 3874 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 3876 
  if ((unsigned int)type == 1U) {
    #line 3877 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], LPS ENABLE notify\n");
    #line 3879 
    coex_sta_3->under_lps = (_Bool)1;
  }
  else 
    #line 3880 
    if ((unsigned int)type == 0U) {
      #line 3881 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], LPS DISABLE notify\n");
      #line 3883 
      coex_sta_3->under_lps = (_Bool)0;
    }
  #line 3885 
  return;
}

#line 3887  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b2ant.c"
void ex_btc8723b2ant_scan_notify(struct btc_coexist *btcoexist, u8 type)
{
  #line 3890 
  u32 u32tmp;
  #line 3891 
  u8 u8tmpa;
  #line 3891 
  u8 u8tmpb;
  #line 3889 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 3893 
  u32tmp = (*(btcoexist->btc_read_4byte))((void *)btcoexist,2376U);
  #line 3894 
  u8tmpa = (*(btcoexist->btc_read_1byte))((void *)btcoexist,1893U);
  #line 3895 
  u8tmpb = (*(btcoexist->btc_read_1byte))((void *)btcoexist,1902U);
  #line 3897 
  if ((unsigned int)type == 1U) 
                                #line 3898 
                                _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], SCAN START notify\n");
  else 
    #line 3900 
    if ((unsigned int)type == 0U) 
                                  #line 3901 
                                  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], SCAN FINISH notify\n");
  #line 3903 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)41,(void *)(& coex_sta_3->scan_ap_num));
  #line 3906 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"############# [BTCoex], 0x948=0x%x, 0x765=0x%x, 0x76e=0x%x\n",u32tmp,(int)u8tmpa,(int)u8tmpb);
  #line 3907 
  return;
}

#line 3911  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b2ant.c"
void ex_btc8723b2ant_connect_notify(struct btc_coexist *btcoexist, u8 type)
{
  #line 3913 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 3915 
  if ((unsigned int)type == 1U) 
                                #line 3916 
                                _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], CONNECT START notify\n");
  else 
    #line 3918 
    if ((unsigned int)type == 0U) 
                                  #line 3919 
                                  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], CONNECT FINISH notify\n");
  #line 3920 
  return;
}

#line 3923  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b2ant.c"
void ex_btc8723b2ant_media_status_notify(struct btc_coexist *btcoexist, u8 type)
{
  #line 3928 
  u32 wifi_bw;
  #line 3929 
  u8 wifi_central_chnl;
  #line 3926 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 3927 
  u8 h2c_parameter[3U] = {(unsigned char)0U};
  #line 3930 
  u8 ap_num = (unsigned char)0U;
  #line 3932 
  if ((unsigned int)type == 1U) 
                                #line 3933 
                                _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], MEDIA connect notify\n"); else 
                                                                    #line 3936 
                                                                    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], MEDIA disconnect notify\n");
  #line 3940 
  (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)38,(void *)(& wifi_central_chnl));
  #line 3942 
  if ((unsigned int)type == 1U && (unsigned int)wifi_central_chnl <= 14U) {
    #line 3944 
    h2c_parameter[0] = (unsigned char)1U;
    #line 3945 
    h2c_parameter[1] = wifi_central_chnl;
    #line 3946 
    (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)24,(void *)(& wifi_bw));
    #line 3948 
    if (wifi_bw == 2U) 
                       #line 3949 
                       h2c_parameter[2] = (unsigned char)48U;
    else {
      #line 3951 
      (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)41,(void *)(& ap_num));
      #line 3953 
      if ((unsigned int)ap_num <= 9U) 
                                      #line 3954 
                                      h2c_parameter[2] = (unsigned char)48U; else 
                                                                    #line 3956 
                                                                    h2c_parameter[2] = (unsigned char)32U;
    }
  }
  #line 3960 
  coex_dm_3->wifi_chnl_info[0] = h2c_parameter[0];
  #line 3961 
  coex_dm_3->wifi_chnl_info[1] = h2c_parameter[1];
  #line 3962 
  coex_dm_3->wifi_chnl_info[2] = h2c_parameter[2];
  #line 3964 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], FW write 0x66=0x%x\n",(((int)h2c_parameter[0] << 16) | ((int)h2c_parameter[1] << 8)) | (int)h2c_parameter[2]);
  #line 3969 
  (*(btcoexist->btc_fill_h2c))((void *)btcoexist,(unsigned char)102,3U,(u8 *)(& h2c_parameter));
  #line 3970 
  return;
}

#line 3972  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b2ant.c"
void ex_btc8723b2ant_special_packet_notify(struct btc_coexist *btcoexist, u8 type)
{
  #line 3975 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 3977 
  if ((unsigned int)type == 1U) 
                                #line 3978 
                                _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], DHCP Packet notify\n");
  #line 3979 
  return;
}

#line 3982  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b2ant.c"
void ex_btc8723b2ant_bt_info_notify(struct btc_coexist *btcoexist, u8 *tmpbuf, u8 length)
{
  #line 3987 
  u8 i;
  #line 3985 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 3986 
  u8 bt_info = (unsigned char)0U;
  #line 3987 
  u8 rsp_source = (unsigned char)0U;
  #line 3988 
  bool bt_busy = (_Bool)0;
  #line 3988 
  bool limited_dig = (_Bool)0;
  #line 3989 
  bool wifi_connected = (_Bool)0;
  #line 3991 
  coex_sta_3->c2h_bt_info_req_sent = (_Bool)0;
  #line 3993 
  rsp_source = (unsigned char)((unsigned int)*tmpbuf & 15U);
  #line 3994 
  if ((unsigned int)rsp_source > 2U) 
                                     #line 3995 
                                     rsp_source = (unsigned char)0U;
  #line 3996 
  (coex_sta_3->bt_info_c2h_cnt[(int)rsp_source]) ++;
  #line 3998 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Bt info[%d], length=%d, hex data=[",(int)rsp_source,(int)length);
  #line 4001 
  i = (unsigned char)0U;
  #line 4001 
  while ((int)i < (int)length) {
    #line 4002 
    coex_sta_3->bt_info_c2h[(int)rsp_source][(int)i] = *(tmpbuf + (unsigned long)i);
    #line 4003 
    if ((unsigned int)i == 1U) 
                               #line 4004 
                               bt_info = *(tmpbuf + (unsigned long)i);
    #line 4005 
    if ((int)i == (int)length + -1) 
                                    #line 4006 
                                    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"0x%02x]\n",(int)*(tmpbuf + (unsigned long)i)); else 
                                                                    #line 4009 
                                                                    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"0x%02x, ",(int)*(tmpbuf + (unsigned long)i));
    #line 4001 
    i = (u8)((int)i + 1);
  }
  #line 4013 
  if ((int)btcoexist->manual_control != 0) {
    #line 4014 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BtInfoNotify(), return for Manual CTRL<===\n");
    #line 4016 
    return;
  }
  #line 4019 
  if ((unsigned int)rsp_source != 0U) {
    #line 4020 
    coex_sta_3->bt_retry_cnt = (unsigned char)((unsigned int)coex_sta_3->bt_info_c2h[(int)rsp_source][2] & 15U);
    #line 4023 
    if ((unsigned int)coex_sta_3->bt_retry_cnt != 0U) 
                                                      #line 4024 
                                                      (coex_sta_3->pop_event_cnt) ++;
    #line 4026 
    coex_sta_3->bt_rssi = (unsigned char)(((unsigned int)coex_sta_3->bt_info_c2h[(int)rsp_source][3] + 5U) * 2U);
    #line 4029 
    coex_sta_3->bt_info_ext = coex_sta_3->bt_info_c2h[(int)rsp_source][4];
    #line 4031 
    if (((int)coex_sta_3->bt_info_c2h[(int)rsp_source][2] & 32) != 0) 
      #line 4032 
      coex_sta_3->c2h_bt_remote_name_req = (_Bool)1; else 
                                                          #line 4034 
                                                          coex_sta_3->c2h_bt_remote_name_req = (_Bool)0;
    #line 4036 
    if ((unsigned int)coex_sta_3->bt_info_c2h[(int)rsp_source][1] == 73U) 
      #line 4037 
      coex_sta_3->a2dp_bit_pool = coex_sta_3->bt_info_c2h[(int)rsp_source][6]; else 
                                                                    #line 4040 
                                                                    coex_sta_3->a2dp_bit_pool = (unsigned char)0U;
    #line 4045 
    if (((int)coex_sta_3->bt_info_ext & 2) != 0) {
      #line 4046 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BT ext info bit1 check, send wifi BW&Chnl to BT!!\n");
      #line 4048 
      (*(btcoexist->btc_get))((void *)btcoexist,(unsigned char)2,(void *)(& wifi_connected));
      #line 4050 
      if ((int)wifi_connected != 0) 
                                    #line 4051 
                                    ex_btc8723b2ant_media_status_notify(btcoexist,(unsigned char)1); else 
                                                                    #line 4055 
                                                                    ex_btc8723b2ant_media_status_notify(btcoexist,(unsigned char)0);
    }
    #line 4060 
    if (((int)coex_sta_3->bt_info_ext & 8) != 0) {
      #line 4061 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BT ext info bit3 check, set BT NOT to ignore Wlan active!!\n");
      #line 4063 
      btc8723b2ant_ignore_wlan_act(btcoexist,(_Bool)1,(_Bool)0);
    }
    #line 4068 
    if (! btcoexist->auto_report_2ant) 
      #line 4069 
      if (((int)coex_sta_3->bt_info_ext & 16) == 0) 
                                                    #line 4070 
                                                    btc8723b2ant_bt_auto_report(btcoexist,(_Bool)1,(_Bool)1);
  }
  #line 4076 
  if (((int)bt_info & 4) != 0) 
                               #line 4077 
                               coex_sta_3->c2h_bt_inquiry_page = (_Bool)1; else 
                                                                    #line 4079 
                                                                    coex_sta_3->c2h_bt_inquiry_page = (_Bool)0;
  #line 4081 
  if (((int)bt_info & 1) == 0) {
    #line 4083 
    coex_sta_3->bt_link_exist = (_Bool)0;
    #line 4084 
    coex_sta_3->pan_exist = (_Bool)0;
    #line 4085 
    coex_sta_3->a2dp_exist = (_Bool)0;
    #line 4086 
    coex_sta_3->hid_exist = (_Bool)0;
    #line 4087 
    coex_sta_3->sco_exist = (_Bool)0;
  }
  else {
    #line 4090 
    coex_sta_3->bt_link_exist = (_Bool)1;
    #line 4091 
    if (((int)bt_info & 128) != 0) 
                                   #line 4092 
                                   coex_sta_3->pan_exist = (_Bool)1; else 
                                                                    #line 4094 
                                                                    coex_sta_3->pan_exist = (_Bool)0;
    #line 4095 
    if (((int)bt_info & 64) != 0) 
                                  #line 4096 
                                  coex_sta_3->a2dp_exist = (_Bool)1; else 
                                                                    #line 4098 
                                                                    coex_sta_3->a2dp_exist = (_Bool)0;
    #line 4099 
    if (((int)bt_info & 32) != 0) 
                                  #line 4100 
                                  coex_sta_3->hid_exist = (_Bool)1; else 
                                                                    #line 4102 
                                                                    coex_sta_3->hid_exist = (_Bool)0;
    #line 4103 
    if (((int)bt_info & 2) != 0) 
                                 #line 4104 
                                 coex_sta_3->sco_exist = (_Bool)1; else 
                                                                    #line 4106 
                                                                    coex_sta_3->sco_exist = (_Bool)0;
    #line 4108 
    if ((! coex_sta_3->hid_exist && ! coex_sta_3->c2h_bt_inquiry_page) && ! coex_sta_3->sco_exist) 
      #line 4111 
      if (coex_sta_3->high_priority_tx + coex_sta_3->high_priority_rx > 159U) {
        #line 4113 
        coex_sta_3->hid_exist = (_Bool)1;
        #line 4114 
        bt_info = (unsigned char)((unsigned int)bt_info | 40U);
      }
  }
  #line 4119 
  btc8723b2ant_update_bt_link_info(btcoexist);
  #line 4121 
  if (((int)bt_info & 1) == 0) {
    #line 4122 
    coex_dm_3->bt_status = (unsigned char)0U;
    #line 4123 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BtInfoNotify(), BT Non-Connected idle!!!\n");
  }
  else 
    #line 4126 
    if ((unsigned int)bt_info == 1U) {
      #line 4127 
      coex_dm_3->bt_status = (unsigned char)1U;
      #line 4128 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BtInfoNotify(), BT Connected-idle!!!\n");
    }
    else 
      #line 4130 
      if (((int)bt_info & 2) != 0 || ((int)bt_info & 16) != 0) {
        #line 4132 
        coex_dm_3->bt_status = (unsigned char)4U;
        #line 4133 
        _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BtInfoNotify(), BT SCO busy!!!\n");
      }
      else 
        #line 4135 
        if (((int)bt_info & 8) != 0) {
          #line 4136 
          coex_dm_3->bt_status = (unsigned char)3U;
          #line 4137 
          _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BtInfoNotify(), BT ACL busy!!!\n");
        }
        else {
          #line 4140 
          coex_dm_3->bt_status = (unsigned char)6U;
          #line 4141 
          _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], BtInfoNotify(), BT Non-Defined state!!!\n");
        }
  #line 4145 
  if ((unsigned int)coex_dm_3->bt_status + 253U <= 2U) {
    #line 4148 
    bt_busy = (_Bool)1;
    #line 4149 
    limited_dig = (_Bool)1;
  }
  else {
    #line 4151 
    bt_busy = (_Bool)0;
    #line 4152 
    limited_dig = (_Bool)0;
  }
  #line 4155 
  (*(btcoexist->btc_set))((void *)btcoexist,(unsigned char)1,(void *)(& bt_busy));
  #line 4157 
  coex_dm_3->limited_dig = limited_dig;
  #line 4158 
  (*(btcoexist->btc_set))((void *)btcoexist,(unsigned char)2,(void *)(& limited_dig));
  #line 4160 
  btc8723b2ant_run_coexist_mechanism(btcoexist);
  #line 4161 
  return;
}

#line 4163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b2ant.c"
void ex_btc8723b2ant_halt_notify(struct btc_coexist *btcoexist)
{
  #line 4165 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 4167 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Halt notify\n");
  #line 4169 
  btc8723b2ant_wifioff_hwcfg(btcoexist);
  #line 4170 
  btc8723b2ant_ignore_wlan_act(btcoexist,(_Bool)1,(_Bool)1);
  #line 4171 
  ex_btc8723b2ant_media_status_notify(btcoexist,(unsigned char)0);
  #line 4172 
  return;
}

#line 4174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b2ant.c"
void ex_btc8723b2ant_pnp_notify(struct btc_coexist *btcoexist, u8 pnp_state)
{
  #line 4176 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 4178 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Pnp notify\n");
  #line 4180 
  if ((unsigned int)pnp_state == 1U) {
    #line 4181 
    _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Pnp notify to SLEEP\n");
    #line 4190 
    coex_sta_3->under_ips = (_Bool)0;
    #line 4191 
    coex_sta_3->under_lps = (_Bool)0;
  }
  else 
    #line 4192 
    if ((unsigned int)pnp_state == 0U) {
      #line 4193 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Pnp notify to WAKE UP\n");
      #line 4195 
      ex_btc8723b2ant_init_hwconfig(btcoexist);
      #line 4196 
      btc8723b2ant_init_coex_dm(btcoexist);
      #line 4197 
      btc8723b2ant_query_bt_info(btcoexist);
    }
  #line 4199 
  return;
}

#line 4201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b2ant.c"
void ex_btc8723b2ant_periodical(struct btc_coexist *btcoexist)
{
  #line 4203 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)btcoexist->adapter;
  #line 4204 
  struct btc_bt_link_info *bt_link_info = & btcoexist->bt_link_info;
  #line 4206 
  _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], ==========================Periodical===========================\n");
  #line 4209 
  if ((unsigned int)coex_sta_3->dis_ver_info_cnt <= 5U) {
    #line 4210 
    coex_sta_3->dis_ver_info_cnt = (unsigned char)((unsigned int)coex_sta_3->dis_ver_info_cnt + 1U);
    #line 4211 
    if ((unsigned int)coex_sta_3->dis_ver_info_cnt == 3U) {
      #line 4215 
      _rtl_dbg_trace(rtlpriv,1073741824ULL,4,(char *)"[BTCoex], Set GNT_BT control by PTA\n");
      #line 4217 
      btc8723b2ant_set_ant_path(btcoexist,(unsigned char)0,(_Bool)0,(_Bool)0);
    }
  }
  #line 4222 
  if (! btcoexist->auto_report_2ant) 
                                     #line 4223 
                                     btc8723b2ant_query_bt_info(btcoexist);
  else {
    #line 4225 
    btc8723b2ant_monitor_bt_ctr(btcoexist);
    #line 4226 
    btc8723b2ant_monitor_wifi_ctr(btcoexist);
    #line 4231 
    if (coex_sta_3->high_priority_tx + coex_sta_3->high_priority_rx <= 49U && (int)bt_link_info->hid_exist != 0) 
      #line 4234 
      bt_link_info->hid_exist = (_Bool)0;
    #line 4236 
    if ((int)btc8723b2ant_is_wifi_status_changed(btcoexist) != 0) 
                                                                  #line 4238 
                                                                  btc8723b2ant_run_coexist_mechanism(btcoexist);
    else 
      #line 4236 
      if ((int)coex_dm_3->auto_tdma_adjust != 0) 
                                                 #line 4238 
                                                 btc8723b2ant_run_coexist_mechanism(btcoexist);
  }
  #line 4240 
  return;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/common/inline_asm.c"
void ldv_inline_asm(void)
{
  #line 24 
  return;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_add(int i, atomic_t *v)
{
  #line 22 
  v->counter += i;
  #line 23 
  return;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_sub(int i, atomic_t *v)
{
  #line 27 
  v->counter -= i;
  #line 28 
  return;
}

#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_sub_and_test(int i, atomic_t *v)
{
  #line 32 
  v->counter -= i;
  #line 33 
  if (v->counter != 0) 
                       #line 34 
                       return 0;
  #line 36 
  return 1;
}

#line 39  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_inc(atomic_t *v)
{
  #line 41 
  (v->counter) ++;
  #line 42 
  return;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_dec(atomic_t *v)
{
  #line 46 
  (v->counter) --;
  #line 47 
  return;
}

#line 49  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_dec_and_test(atomic_t *v)
{
  #line 51 
  (v->counter) --;
  #line 52 
  if (v->counter != 0) 
                       #line 53 
                       return 0;
  #line 55 
  return 1;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_and_test(atomic_t *v)
{
  #line 60 
  (v->counter) ++;
  #line 61 
  if (v->counter != 0) 
                       #line 62 
                       return 0;
  #line 64 
  return 1;
}

#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_return(int i, atomic_t *v)
{
  #line 69 
  v->counter += i;
  #line 70 
  return v->counter;
}

#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_negative(int i, atomic_t *v)
{
  #line 75 
  v->counter += i;
  #line 76 
  return v->counter < 0;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_short(short *v)
{
  #line 81 
  *v = (short)((unsigned int)*v + 1U);
  #line 82 
  return (int)*v;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
static struct task_struct ldv_current;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
struct task_struct *ldv_get_current(void)
{
  #line 28 
  ldv_current.pid = 1;
  #line 29 
  return & ldv_current;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void);
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void);
#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void);
#line 112  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val);
#line 132  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val);
#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 133 
void ldv_check_return_value_probe(int);
#line 141 
#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 23 
void __VERIFIER_assume(int);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static bool __ldv_in_interrupt_context = (_Bool)0;
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void)
{
  #line 31 
  __ldv_in_interrupt_context = (_Bool)1;
  #line 32 
  return;
}

#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void)
{
  #line 37 
  __ldv_in_interrupt_context = (_Bool)0;
  #line 38 
  return;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void)
{
  #line 42 
  return __ldv_in_interrupt_context;
}

#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static int ldv_filter_positive_int(int val)
{
  #line 47 
  __VERIFIER_assume(val <= 0);
  #line 48 
  return val;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val)
{
  #line 57 
  return ldv_filter_positive_int(init_ret_val);
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val)
{
  #line 63 
  ldv_check_return_value_probe(probe_ret_val);
  #line 64 
  return ldv_filter_positive_int(probe_ret_val);
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val)
{
  #line 70 
  return ldv_filter_positive_int(ret_val);
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/list.h"
#line 28 
void ldv_save_allocated_memory_to_list(void *);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data);
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 57 
void *ldv_xzalloc(size_t size);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev)
{
  #line 31 
  if (dev != (struct device *)0 && dev->p != (struct device_private *)0) 
    #line 32 
    return (dev->p)->driver_data;
  #line 34 
  return (void *)0;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data)
{
  #line 45 
  dev->p = (struct device_private *)ldv_xzalloc(8UL);
  #line 46 
  ldv_save_allocated_memory_to_list((void *)dev->p);
  #line 47 
  (dev->p)->driver_data = data;
  #line 49 
  return 0;
}

#line 156  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 156 
void ldv_check_alloc_flags(gfp_t);
#line 48  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 48 
void *ldv_malloc(size_t size);
#line 49 
#line 49 
void *ldv_calloc(size_t nmemb, size_t size);
#line 50 
#line 50 
void *ldv_zalloc(size_t size);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc(size_t size, gfp_t flags)
{
  #line 26 
  void *res;
  #line 28 
  ldv_check_alloc_flags(flags);
  #line 29 
  res = ldv_malloc(size);
  #line 30 
  ldv_save_allocated_memory_to_list(res);
  #line 32 
  return res;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kzalloc(size_t size, gfp_t flags)
{
  #line 37 
  void *res;
  #line 39 
  ldv_check_alloc_flags(flags);
  #line 40 
  res = ldv_zalloc(size);
  #line 41 
  ldv_save_allocated_memory_to_list(res);
  #line 43 
  return res;
}

#line 46  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 48 
  void *res;
  #line 50 
  ldv_check_alloc_flags(flags);
  #line 51 
  res = ldv_malloc(n * size);
  #line 52 
  ldv_save_allocated_memory_to_list(res);
  #line 54 
  return res;
}

#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 59 
  void *res;
  #line 61 
  ldv_check_alloc_flags(flags);
  #line 62 
  res = ldv_calloc(n,size);
  #line 63 
  ldv_save_allocated_memory_to_list(res);
  #line 65 
  return res;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 51 
void ldv_free(void *s);
#line 59 
#line 59 
void *ldv_malloc_unknown_size(void);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 31 
int ldv_undef_int_positive(void);
#line 40 
#line 40 
int ldv_undef_int_nonpositive(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
int ldv_request_firmware(struct firmware **fw)
{
  #line 27 
  int retval;
  #line 26 
  struct firmware *_fw = (struct firmware *)0;
  #line 29 
  retval = ldv_undef_int_nonpositive();
  #line 31 
  if (retval == 0) {
    #line 33 
    _fw = (struct firmware *)ldv_xzalloc(32UL);
    #line 34 
    _fw->data = (u8 *)ldv_malloc_unknown_size();
    #line 35 
    __VERIFIER_assume(_fw->data != (u8 *)0U);
    #line 36 
    _fw->size = (unsigned long)ldv_undef_int_positive();
  }
  #line 39 
  *fw = _fw;
  #line 41 
  return retval;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
void ldv_release_firmware(struct firmware *fw)
{
  #line 46 
  if (fw != (struct firmware *)0) {
    #line 48 
    ldv_free((void *)fw->data);
    #line 49 
    ldv_free((void *)fw);
  }
  #line 51 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/i2c.h"
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values);
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 55 
void *ldv_xmalloc(size_t size);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 23 
int ldv_undef_int(void);
#line 34 
#line 34 
int ldv_undef_int_negative(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values)
{
  #line 27 
  __u8 size;
  #line 28 
  char *bytes;
  #line 30 
  if (ldv_undef_int() != 0) {
    #line 33 
    size = (unsigned char)ldv_undef_int_positive();
    #line 35 
    __VERIFIER_assume((unsigned int)size <= 32U);
    #line 37 
    bytes = (char *)ldv_xmalloc((unsigned long)size);
    #line 39 
    memcpy((void *)values,(void *)bytes,(unsigned long)size);
    #line 40 
    ldv_free((void *)bytes);
    #line 42 
    return (int)size;
  }
  else {
    #line 46 
    return ldv_undef_int_negative();
  }
}

#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
__inline static void v4l2_set_subdevdata(struct v4l2_subdev *sd, void *p)
{
  #line 990 
  sd->dev_priv = p;
  #line 991 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/media/v4l2-common.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops)
{
  #line 26 
  sd->ops = ops;
  #line 27 
  v4l2_set_subdevdata(sd,(void *)client);
  #line 28 
  ldv_dev_set_drvdata(& client->dev,(void *)sd);
  #line 29 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/spi.c"
struct spi_controller *ldv_spi_alloc_master(struct device *host, unsigned int size)
{
  #line 25 
  struct spi_controller *master;
  #line 27 
  master = (struct spi_controller *)ldv_zalloc((unsigned long)size + 2936UL);
  #line 29 
  if (master == (struct spi_controller *)0) 
                                            #line 30 
                                            return (struct spi_controller *)0;
  #line 32 
  ldv_dev_set_drvdata(& master->dev,(void *)(master + 1U));
  #line 34 
  return master;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size)
{
  #line 25 
  struct fb_info *info;
  #line 27 
  info = (struct fb_info *)ldv_zalloc(size + 1568UL);
  #line 29 
  if (info == (struct fb_info *)0) 
                                   #line 30 
                                   return (struct fb_info *)0;
  #line 32 
  if (size != 0UL) 
                   #line 33 
                   info->par = (void *)((char *)info + 1568UL);
  #line 35 
  return info;
}

#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info)
{
  #line 40 
  if (info == (struct fb_info *)0) 
                                   #line 41 
                                   return;
  #line 44 
  ldv_free((void *)info->apertures);
  #line 46 
  ldv_free((void *)info);
  #line 47 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err(void *ptr);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err_or_null(void *ptr);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_ptr_err(void *ptr);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err(void *ptr)
{
  #line 29 
  if ((unsigned long)ptr > 18446744073709547520UL) 
                                                   #line 30 
                                                   return (_Bool)1; else 
                                                                    #line 32 
                                                                    return (_Bool)0;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error)
{
  #line 37 
  unsigned long result;
  #line 39 
  __VERIFIER_assume(error < 0L);
  #line 40 
  __VERIFIER_assume(error >= -4095L);
  #line 41 
  result = 18446744073709547520UL - (unsigned long)error;
  #line 42 
  __VERIFIER_assume(result > 18446744073709547520UL);
  #line 44 
  return (void *)result;
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_ptr_err(void *ptr)
{
  #line 49 
  long result;
  #line 51 
  __VERIFIER_assume((unsigned long)ptr > 18446744073709547520UL);
  #line 52 
  result = (long)(18446744073709547520UL - (unsigned long)ptr);
  #line 53 
  __VERIFIER_assume(result < 0L);
  #line 54 
  __VERIFIER_assume(result >= -4095L);
  #line 56 
  return result;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err_or_null(void *ptr)
{
  #line 61 
  int tmp_0;
  #line 61 
  if (ptr == (void *)0) 
                        #line 61 
                        tmp_0 = 1;
  else {
    #line 61 
    if ((int)ldv_is_err(ptr) != 0) 
                                   #line 61 
                                   tmp_0 = 1; else 
                                                   #line 61 
                                                   tmp_0 = 0;
  }
  #line 61 
  return (_Bool)(tmp_0 != 0);
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/panic.h"
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void)
{
  #line 23 
  __VERIFIER_assume(0);
  #line 24 
  return;
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_set_bit(long nr, unsigned long *addr);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_clear_bit(long nr, unsigned long *addr);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 22 
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 23 
#line 23 
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 43 
void *memset(void *, int, size_t);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_set_bit(long nr, unsigned long *addr)
{
  #line 24 
  *(addr + (unsigned long)nr / 64UL) |= 1UL << ((unsigned long)nr & 63UL);
  #line 25 
  return;
}

#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_clear_bit(long nr, unsigned long *addr)
{
  #line 29 
  *(addr + (unsigned long)nr / 64UL) &= ~ (1UL << ((unsigned long)nr & 63UL));
  #line 30 
  return;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits)
{
  #line 34 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 35 
  unsigned int size = start + (unsigned int)nbits;
  #line 36 
  int bits_to_set = (int)(64U - (start & 63U));
  #line 37 
  unsigned long mask_to_set = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 39 
  while (nbits - bits_to_set >= 0) {
    #line 40 
    *p |= mask_to_set;
    #line 41 
    nbits -= bits_to_set;
    #line 42 
    bits_to_set = 64;
    #line 43 
    mask_to_set = 18446744073709551615UL;
    #line 44 
    p ++;
  }
  #line 46 
  if (nbits != 0) {
    #line 47 
    mask_to_set = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_set;
    #line 48 
    *p |= mask_to_set;
  }
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits)
{
  #line 54 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 55 
  unsigned int size = start + (unsigned int)nbits;
  #line 56 
  int bits_to_clear = (int)(64U - (start & 63U));
  #line 57 
  unsigned long mask_to_clear = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 59 
  while (nbits - bits_to_clear >= 0) {
    #line 60 
    *p &= ~ mask_to_clear;
    #line 61 
    nbits -= bits_to_clear;
    #line 62 
    bits_to_clear = 64;
    #line 63 
    mask_to_clear = 18446744073709551615UL;
    #line 64 
    p ++;
  }
  #line 66 
  if (nbits != 0) {
    #line 67 
    mask_to_clear = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_clear;
    #line 68 
    *p &= ~ mask_to_clear;
  }
  #line 70 
  return;
}

#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits)
{
  #line 74 
  unsigned int len = (unsigned int)(((unsigned long)nbits + 63UL) / 64UL) * 8U;
  #line 75 
  memset((void *)dst,0,(unsigned long)len);
  #line 76 
  return;
}

#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask)
{
  #line 80 
  unsigned long index;
  #line 80 
  unsigned long end;
  #line 80 
  unsigned long i;
  #line 82 
  again: 
         #line 82 
  ;
  #line 83 
  index = ldv_find_next_zero_bit(map,size,start);
  #line 84 
  index = (index + align_mask) & ~ align_mask;
  #line 85 
  end = (unsigned long)nr + index;
  #line 87 
  if (end > size) 
                  #line 88 
                  return end;
  #line 90 
  i = ldv_find_next_bit(map,end,index);
  #line 92 
  if (i < end) {
    #line 93 
    start = i + 1UL;
    #line 94 
    goto again;
  }
  #line 97 
  return index;
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 25 
void ldv_check_find_bit_offset(unsigned long, unsigned long);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_ffs(unsigned long word)
{
  #line 23 
  int num = 0;
  #line 25 
  if ((word & 4294967295UL) == 0UL) {
    #line 26 
    num += 32;
    #line 27 
    word >>= 32;
  }
  #line 29 
  if ((word & 65535UL) == 0UL) {
    #line 30 
    num += 16;
    #line 31 
    word >>= 16;
  }
  #line 33 
  if ((word & 255UL) == 0UL) {
    #line 34 
    num += 8;
    #line 35 
    word >>= 8;
  }
  #line 37 
  if ((word & 15UL) == 0UL) {
    #line 38 
    num += 4;
    #line 39 
    word >>= 4;
  }
  #line 41 
  if ((word & 3UL) == 0UL) {
    #line 42 
    num += 2;
    #line 43 
    word >>= 2;
  }
  #line 45 
  if ((word & 1UL) == 0UL) 
                           #line 46 
                           num ++;
  #line 48 
  return (unsigned long)num;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_min(unsigned long a, unsigned long b)
{
  #line 53 
  if (a < b) 
             #line 54 
             return a;
  #line 56 
  return b;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_restrict_find_bit_res(unsigned long res, unsigned long size)
{
  #line 62 
  __VERIFIER_assume(1);
  #line 63 
  __VERIFIER_assume(res <= size);
  #line 65 
  return res;
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size)
{
  #line 70 
  unsigned long i;
  #line 72 
  i = 0UL;
  #line 72 
  while (i * 64UL < size) {
    #line 73 
    if (*(addr + i) != 0UL) {
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      return ldv_restrict_find_bit_res(ldv_min(i * 64UL + ldv_ffs(*(addr + i)),size),
                                  size);
    }
    #line 72 
    i ++;
  }
  #line 76 
  return size;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 81 
  unsigned long tmp;
  #line 83 
  ldv_check_find_bit_offset(size,offset);
  #line 85 
  tmp = *(addr + offset / 64UL);
  #line 86 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 87 
  offset &= 18446744073709551552UL;
  #line 89 
  while (tmp == 0UL) {
    #line 90 
    offset += 64UL;
    #line 91 
    if (offset >= size) 
                        #line 92 
                        return size;
    #line 94 
    tmp = *(addr + offset / 64UL);
  }
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 102 
  unsigned long tmp;
  #line 104 
  ldv_check_find_bit_offset(size,offset);
  #line 106 
  tmp = *(addr + offset / 64UL);
  #line 107 
  tmp = ~ tmp;
  #line 108 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 109 
  offset &= 18446744073709551552UL;
  #line 111 
  while (tmp == 0UL) {
    #line 112 
    offset += 64UL;
    #line 113 
    if (offset >= size) 
                        #line 114 
                        return size;
    #line 116 
    tmp = *(addr + offset / 64UL);
    #line 117 
    tmp = ~ tmp;
  }
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
size_t ldv_strlen(char *s);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strcmp(char *cs, char *ct);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
size_t ldv_strlen(char *s)
{
  #line 23 
  unsigned int len = 0U;
  #line 25 
  while ((int)*s != 0) {
    #line 26 
    len ++;
    #line 25 
    s ++;
  }
  #line 28 
  return (unsigned long)len;
}

#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strcmp(char *cs, char *ct)
{
  #line 33 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 34 
    if ((int)*cs != (int)*ct) 
                              #line 35 
                              break;
    #line 33 
    cs ++;
    #line 33 
    ct ++;
  }
  #line 37 
  return (int)*cs - (int)*ct;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count)
{
  #line 42 
  if (count == 0UL) 
                    #line 43 
                    return 0;
  #line 45 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 46 
    if ((int)*cs != (int)*ct) 
                              #line 47 
                              break;
    #line 49 
    count --;
    #line 51 
    if (count == 0UL) 
                      #line 52 
                      break;
    #line 45 
    cs ++;
    #line 45 
    ct ++;
  }
  #line 55 
  return (int)*cs - (int)*ct;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_memcmp(void *cs, void *ct, size_t count)
{
  #line 60 
  unsigned char *su1;
  #line 60 
  unsigned char *su2;
  #line 61 
  int res = 0;
  #line 63 
  su1 = (unsigned char *)cs;
  #line 63 
  su2 = (unsigned char *)ct;
  #line 63 
  while (count != 0UL) {
    #line 64 
    res = (int)*su1 - (int)*su2;
    #line 64 
    if (res != 0) 
                  #line 65 
                  break;
    #line 63 
    su1 ++;
    #line 63 
    su2 ++;
    #line 63 
    count --;
  }
  #line 67 
  return res;
}

#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct)
{
  #line 72 
  size_t cs_len;
  #line 72 
  size_t ct_len;
  #line 74 
  cs_len = ldv_strlen(cs);
  #line 75 
  ct_len = ldv_strlen(ct);
  #line 77 
  while (cs_len >= ct_len) {
    #line 78 
    if (ldv_memcmp((void *)cs,(void *)ct,ct_len) == 0) 
                                                       #line 79 
                                                       return cs;
    #line 81 
    cs_len --;
    #line 82 
    cs ++;
  }
  #line 85 
  return (char *)0;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/list.h"
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/list.c"
void ldv_init_list_head(struct list_head *list);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/list.c"
void ldv_init_list_head(struct list_head *list)
{
  #line 23 
  list->next = list;
  #line 24 
  list->prev = list;
  #line 25 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc(size_t size, gfp_t flags);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags);
#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags);
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags);
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp);
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc(size_t size, gfp_t flags)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(flags);
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kzalloc(size_t size, gfp_t flags)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_flags(flags);
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 45 
  void *res;
  #line 47 
  ldv_check_alloc_flags(flags);
  #line 48 
  res = ldv_malloc(n * size);
  #line 50 
  return res;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 55 
  void *res;
  #line 57 
  ldv_check_alloc_flags(flags);
  #line 58 
  res = ldv_calloc(n,size);
  #line 60 
  return res;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size)
{
  #line 71 
  struct kmem_cache *res;
  #line 72 
  struct ldv_kmem_cache *ldv_res;
  #line 74 
  res = (struct kmem_cache *)ldv_zalloc(16UL);
  #line 76 
  if (res != (struct kmem_cache *)0) {
    #line 77 
    ldv_res = (struct ldv_kmem_cache *)res;
    #line 78 
    ldv_res->name = name;
    #line 79 
    ldv_res->size = size;
  }
  #line 82 
  return res;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 87 
  return ldv_kmalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 92 
  return ldv_kzalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp)
{
  #line 97 
  ldv_free(objp);
  #line 98 
  return;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep)
{
  #line 102 
  ldv_free((void *)cachep);
  #line 103 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/util.c"
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/util.c"
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(gfp);
  #line 28 
  res = ldv_malloc(len);
  #line 30 
  if (res != (void *)0) 
                        #line 31 
                        memcpy(res,src,len);
  #line 33 
  return res;
}

#line 162  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 162 
void ldv_check_alloc_nonatomic(void);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vmalloc(unsigned long size);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vzalloc(unsigned long size);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void ldv_vfree(void *addr);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vmalloc(unsigned long size)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_nonatomic();
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vzalloc(unsigned long size)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_nonatomic();
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void ldv_vfree(void *addr)
{
  #line 45 
  ldv_free(addr);
  #line 46 
  return;
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 28 
void *malloc(size_t);
#line 29 
#line 29 
void *calloc(size_t, size_t);
#line 30 
#line 30 
void free(void *);
#line 45 
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures;
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size);
#line 60  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void);
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void);
#line 64  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size);
#line 65  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size);
#line 66  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size);
#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s);
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size);
#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size);
#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size);
#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size);
#line 75  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void);
#line 76  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void);
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void);
#line 83  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size);
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size);
#line 87  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 87 
void *external_allocated_data(void);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures = 1U;
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size)
{
  #line 26 
  void *res;
  #line 28 
  if (ldv_is_memory_alloc_failures != 0U) {
    #line 28 
    if (ldv_undef_int() != 0) 
                              #line 29 
                              return (void *)0;
  }
  #line 32 
  res = malloc(size);
  #line 33 
  __VERIFIER_assume(res != (void *)0);
  #line 34 
  return res;
}

#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size)
{
  #line 39 
  return calloc(nmemb,size);
}

#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size)
{
  #line 44 
  return calloc(1UL,size);
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s)
{
  #line 49 
  free(s);
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size)
{
  #line 54 
  void *res;
  #line 56 
  if (ptr != (void *)0 && size == 0UL) {
    #line 57 
    free(ptr);
    #line 58 
    return (void *)0;
  }
  #line 61 
  if (ptr == (void *)0) {
    #line 62 
    res = malloc(size);
    #line 63 
    return res;
  }
  #line 66 
  if (ldv_undef_int() != 0) {
    #line 68 
    res = malloc(size);
    #line 69 
    __VERIFIER_assume(res != (void *)0);
    #line 71 
    memcpy(res,ptr,size);
    #line 72 
    free(ptr);
    #line 74 
    return res;
  }
  else 
       #line 77 
       return (void *)0;
}

#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size)
{
  #line 82 
  void *res;
  #line 84 
  res = malloc(size);
  #line 85 
  __VERIFIER_assume(res != (void *)0);
  #line 87 
  return res;
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size)
{
  #line 92 
  void *res;
  #line 94 
  res = calloc(nmemb,size);
  #line 95 
  __VERIFIER_assume(res != (void *)0);
  #line 97 
  return res;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size)
{
  #line 102 
  void *res;
  #line 104 
  res = calloc(1UL,size);
  #line 105 
  __VERIFIER_assume(res != (void *)0);
  #line 107 
  return res;
}

#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void)
{
  #line 112 
  void *res;
  #line 114 
  if (ldv_undef_int() != 0) {
    #line 116 
    res = external_allocated_data();
    #line 117 
    __VERIFIER_assume(res != (void *)0);
    #line 118 
    return res;
  }
  else 
       #line 121 
       return (void *)0;
}

#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void)
{
  #line 126 
  void *res;
  #line 128 
  if (ldv_undef_int() != 0) {
    #line 130 
    res = external_allocated_data();
    #line 131 
    memset(res,0,8UL);
    #line 132 
    __VERIFIER_assume(res != (void *)0);
    #line 133 
    return res;
  }
  else 
       #line 136 
       return (void *)0;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void)
{
  #line 141 
  return ldv_reference_calloc_unknown_size();
}

#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size)
{
  #line 146 
  void *res;
  #line 149 
  res = external_allocated_data();
  #line 150 
  __VERIFIER_assume(res != (void *)0);
  #line 152 
  return res;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc(size_t size)
{
  #line 25 
  void *res;
  #line 26 
  res = ldv_reference_malloc(size);
  #line 27 
  if (res != (void *)0) {
    #line 28 
    int tmp_0;
    #line 28 
    if (ldv_is_err(res)) 
                         #line 28 
                         tmp_0 = 0; else 
                                         #line 28 
                                         tmp_0 = 1;
    #line 28 
    __VERIFIER_assume(tmp_0);
  }
  #line 29 
  return res;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc(size_t nmemb, size_t size)
{
  #line 34 
  void *res;
  #line 35 
  res = ldv_reference_calloc(nmemb,size);
  #line 36 
  if (res != (void *)0) {
    #line 37 
    int tmp_0;
    #line 37 
    if (ldv_is_err(res)) 
                         #line 37 
                         tmp_0 = 0; else 
                                         #line 37 
                                         tmp_0 = 1;
    #line 37 
    __VERIFIER_assume(tmp_0);
  }
  #line 38 
  return res;
}

#line 41  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc(size_t size)
{
  #line 43 
  void *res;
  #line 44 
  res = ldv_reference_zalloc(size);
  #line 45 
  if (res != (void *)0) {
    #line 46 
    int tmp_0;
    #line 46 
    if (ldv_is_err(res)) 
                         #line 46 
                         tmp_0 = 0; else 
                                         #line 46 
                                         tmp_0 = 1;
    #line 46 
    __VERIFIER_assume(tmp_0);
  }
  #line 47 
  return res;
}

#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void ldv_free(void *s)
{
  #line 52 
  ldv_reference_free(s);
  #line 53 
  return;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc(size_t size)
{
  #line 57 
  void *res;
  #line 59 
  int tmp_0;
  #line 58 
  res = ldv_reference_xmalloc(size);
  #line 59 
  if (ldv_is_err(res)) 
                       #line 59 
                       tmp_0 = 0; else 
                                       #line 59 
                                       tmp_0 = 1;
  #line 59 
  __VERIFIER_assume(tmp_0);
  #line 60 
  return res;
}

#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size)
{
  #line 65 
  void *res;
  #line 67 
  int tmp_0;
  #line 66 
  res = ldv_reference_xcalloc(nmemb,size);
  #line 67 
  if (ldv_is_err(res)) 
                       #line 67 
                       tmp_0 = 0; else 
                                       #line 67 
                                       tmp_0 = 1;
  #line 67 
  __VERIFIER_assume(tmp_0);
  #line 68 
  return res;
}

#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xzalloc(size_t size)
{
  #line 73 
  void *res;
  #line 75 
  int tmp_0;
  #line 74 
  res = ldv_reference_xzalloc(size);
  #line 75 
  if (ldv_is_err(res)) 
                       #line 75 
                       tmp_0 = 0; else 
                                       #line 75 
                                       tmp_0 = 1;
  #line 75 
  __VERIFIER_assume(tmp_0);
  #line 76 
  return res;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc_unknown_size(void)
{
  #line 81 
  void *res;
  #line 82 
  res = ldv_reference_malloc_unknown_size();
  #line 83 
  if (res != (void *)0) {
    #line 84 
    int tmp_0;
    #line 84 
    if (ldv_is_err(res)) 
                         #line 84 
                         tmp_0 = 0; else 
                                         #line 84 
                                         tmp_0 = 1;
    #line 84 
    __VERIFIER_assume(tmp_0);
  }
  #line 85 
  return res;
}

#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void)
{
  #line 90 
  void *res;
  #line 91 
  res = ldv_reference_calloc_unknown_size();
  #line 92 
  if (res != (void *)0) {
    #line 93 
    int tmp_0;
    #line 93 
    if (ldv_is_err(res)) 
                         #line 93 
                         tmp_0 = 0; else 
                                         #line 93 
                                         tmp_0 = 1;
    #line 93 
    __VERIFIER_assume(tmp_0);
  }
  #line 94 
  return res;
}

#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void)
{
  #line 99 
  void *res;
  #line 100 
  res = ldv_reference_zalloc_unknown_size();
  #line 101 
  if (res != (void *)0) {
    #line 102 
    int tmp_0;
    #line 102 
    if (ldv_is_err(res)) 
                         #line 102 
                         tmp_0 = 0; else 
                                         #line 102 
                                         tmp_0 = 1;
    #line 102 
    __VERIFIER_assume(tmp_0);
  }
  #line 103 
  return res;
}

#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size)
{
  #line 108 
  void *res;
  #line 110 
  int tmp_0;
  #line 109 
  res = ldv_reference_xmalloc_unknown_size(size);
  #line 110 
  if (ldv_is_err(res)) 
                       #line 110 
                       tmp_0 = 0; else 
                                       #line 110 
                                       tmp_0 = 1;
  #line 110 
  __VERIFIER_assume(tmp_0);
  #line 111 
  return res;
}

/* compiler builtin: 
   long __builtin_expect(long exp, long c);   */
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 22 
void __VERIFIER_error(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
long __builtin_expect(long exp, long c)
{
  #line 26 
  return exp;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/gcc.c"
void __builtin_trap(void)
{
  #line 37 
  __VERIFIER_error();
  #line 38 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void);
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void);
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void);
#line 54  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end);
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end);
#line 29 
#line 29 
int __VERIFIER_nondet_int(void);
#line 31 
#line 31 
long __VERIFIER_nondet_long(void);
#line 38 
#line 38 
unsigned int __VERIFIER_nondet_uint(void);
#line 41 
#line 41 
unsigned long __VERIFIER_nondet_ulong(void);
#line 42 
#line 42 
unsigned long long __VERIFIER_nondet_ulonglong(void);
#line 43 
#line 43 
void *__VERIFIER_nondet_pointer(void);
#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int(void)
{
  #line 48 
  int undef_int = __VERIFIER_nondet_int();
  #line 50 
  return undef_int;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void)
{
  #line 56 
  long undef_long = __VERIFIER_nondet_long();
  #line 58 
  return undef_long;
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void)
{
  #line 64 
  unsigned int undef_uint = __VERIFIER_nondet_uint();
  #line 66 
  return undef_uint;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void)
{
  #line 72 
  void *undef_ptr = __VERIFIER_nondet_pointer();
  #line 74 
  return undef_ptr;
}

#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void)
{
  #line 80 
  unsigned long undef_ulong = __VERIFIER_nondet_ulong();
  #line 82 
  return undef_ulong;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void)
{
  #line 88 
  unsigned long long undef_ulonglong = __VERIFIER_nondet_ulonglong();
  #line 90 
  return undef_ulonglong;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_positive(void)
{
  #line 95 
  int ret = ldv_undef_int();
  #line 97 
  __VERIFIER_assume(ret > 0);
  #line 99 
  return ret;
}

#line 102  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_negative(void)
{
  #line 104 
  int ret = ldv_undef_int();
  #line 106 
  __VERIFIER_assume(ret < 0);
  #line 108 
  return ret;
}

#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void)
{
  #line 113 
  int ret = ldv_undef_int();
  #line 115 
  __VERIFIER_assume(ret >= 0);
  #line 117 
  return ret;
}

#line 120  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonpositive(void)
{
  #line 122 
  int ret = ldv_undef_int();
  #line 124 
  __VERIFIER_assume(ret <= 0);
  #line 126 
  return ret;
}

#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void)
{
  #line 131 
  void *ret = ldv_undef_ptr();
  #line 133 
  __VERIFIER_assume(ret != (void *)0);
  #line 135 
  return ret;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end)
{
  #line 141 
  int ret;
  #line 143 
  ret = ldv_undef_int();
  #line 144 
  __VERIFIER_assume(ret >= begin);
  #line 145 
  __VERIFIER_assume(ret <= end);
  #line 147 
  return ret;
}

#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end)
{
  #line 153 
  int ret;
  #line 155 
  ret = begin;
  #line 155 
  while (ret < end) {
    #line 156 
    if (ldv_undef_int() != 0) 
                              #line 157 
                              break;
    #line 155 
    ret ++;
  }
  #line 159 
  return ret;
}

#line 62  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 62 
void ldv_initialize(void);
#line 15  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/realtek/rtlwifi/btcoexist/btcoexist.ko/concurrency safety/emg/0/environment_model.c"
#line 20 
void *emg_entry_point_insmod(void *arg0);
#line 16 
#line 49 
int main(void);
#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/realtek/rtlwifi/btcoexist/btcoexist.ko/concurrency safety/emg/0/environment_model.c"
void *emg_entry_point_insmod(void *arg0)
{
  #line 23 
  int emg_1_ret;
  #line 26 
  emg_1_ret = emg_rtl_btcoexist_module_init();
  #line 27 
  emg_1_ret = ldv_post_init(emg_1_ret);
  #line 30 
  if (ldv_undef_int() != 0) {
    #line 32 
    __VERIFIER_assume(emg_1_ret == 0);
    #line 36 
    emg_rtl_btcoexist_module_exit();
  }
  else 
       #line 40 
       __VERIFIER_assume(emg_1_ret != 0);
  #line 44 
  return (void *)0;
}

#line 49  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/realtek/rtlwifi/btcoexist/btcoexist.ko/concurrency safety/emg/0/environment_model.c"
int main(void)
{
  #line 51 
  ldv_initialize();
  #line 53 
  emg_entry_point_insmod((void *)0);
  #line 55 
  return 0;
}

