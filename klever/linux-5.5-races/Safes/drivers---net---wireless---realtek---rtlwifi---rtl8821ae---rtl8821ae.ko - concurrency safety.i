/* Generated by Frama-C */
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler_types.h"
typedef signed char __s8;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef short __s16;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef int __s32;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef long long __s64;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef __s8 s8;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u8 u8;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s16 s16;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u16 u16;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s32 s32;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u32 u32;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s64 s64;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u64 u64;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/uapi/asm/posix_types_64.h"
typedef long __kernel_long_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned long __kernel_ulong_t;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_pid_t;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_uid32_t;
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_gid32_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_ulong_t __kernel_size_t;
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_ssize_t;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_loff_t;
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_time64_t;
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_clock_t;
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_timer_t;
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_clockid_t;
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __u16 __le16;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u16 __be16;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __le32;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __be32;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u64 __be64;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __wsum;
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef unsigned int __poll_t;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef u32 __kernel_dev_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned short umode_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef _Bool bool;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_size_t size_t;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef s16 int16_t;
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef s32 int32_t;
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u32 uint32_t;
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 sector_t;
#line 131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 blkcnt_t;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 dma_addr_t;
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int gfp_t;
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int slab_flags_t;
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int fmode_t;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 phys_addr_t;
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef phys_addr_t resource_size_t;
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int counter ;
};
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   s64 counter ;
};
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 185 
struct hlist_node;
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct callback_head {
   struct callback_head *next ;
   void (*func)(struct callback_head *) ;
} __attribute__((__aligned__(8)));
#line 14  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/rtl8821ae.ko/concurrency safety/0/concurrency safety/weaver/rf.i.aux"
struct task_struct;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
struct module;
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
struct kernel_symbol {
   int value_offset ;
   int name_offset ;
   int namespace_offset ;
};
#line 136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/init.h"
typedef void (*ctor_fn_t)(void);
#line 139 
struct file_system_type;
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct ctl_table;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry;
#line 87 
struct static_key_mod;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
union __anonunion_8 {
   unsigned long type ;
   struct jump_entry *entries ;
   struct static_key_mod *next ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key {
   atomic_t enabled ;
   union __anonunion_8 __anonCompField_static_key_4 ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry {
   s32 code ;
   s32 target ;
   long key ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
struct device;
#line 65 
struct net_device;
#line 476  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct file_operations;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/div64.h"
struct completion;
#line 88 
struct pt_regs;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bug.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/math64.h"
typedef __s64 time64_t;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/time_types.h"
struct __kernel_timespec {
   __kernel_time64_t tv_sec ;
   long long tv_nsec ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time64.h"
struct timespec64 {
   time64_t tv_sec ;
   long tv_nsec ;
};
#line 165 
struct old_timespec32;
#line 166 
struct pollfd;
#line 167 
enum timespec_type {
    TT_NONE = 0,
    TT_NATIVE = 1,
    TT_COMPAT = 2
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_futex_27 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_29 {
   struct __kernel_timespec *rmtp ;
   struct old_timespec32 *compat_rmtp ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_nanosleep_28 {
   clockid_t clockid ;
   enum timespec_type type ;
   union __anonunion_29 __anonCompField___anonstruct_nanosleep_28_5 ;
   u64 expires ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_poll_30 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_26 {
   struct __anonstruct_futex_27 futex ;
   struct __anonstruct_nanosleep_28 nanosleep ;
   struct __anonstruct_poll_30 poll ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct restart_block {
   long (*fn)(struct restart_block *) ;
   union __anonunion_26 __anonCompField_restart_block_6 ;
};
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
struct page;
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/getorder.h"
struct mm_struct;
#line 49 
struct io_bitmap;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/ptrace.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
struct desc_struct {
   u16 limit0 ;
   u16 base0 ;
   u16 base1 : 8 ;
   u16 type : 4 ;
   u16 s : 1 ;
   u16 dpl : 2 ;
   u16 p : 1 ;
   u16 limit1 : 4 ;
   u16 avl : 1 ;
   u16 l : 1 ;
   u16 d : 1 ;
   u16 g : 1 ;
   u16 base2 : 8 ;
} __attribute__((__packed__));
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
typedef unsigned long pteval_t;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pmdval_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pudval_t;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
struct __anonstruct_pte_t_53 {
   pteval_t pte ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef struct __anonstruct_pte_t_53 pte_t;
#line 265  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 267  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_54 {
   pgdval_t pgd ;
};
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_54 pgd_t;
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pud_t_56 {
   pudval_t pud ;
};
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pud_t_56 pud_t;
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pmd_t_57 {
   pmdval_t pmd ;
};
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pmd_t_57 pmd_t;
#line 505  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct page *pgtable_t;
#line 519 
struct file;
#line 530 
struct seq_file;
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/nospec-branch.h"
struct thread_struct;
#line 362 
struct cpumask;
#line 365 
struct vm_area_struct;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_59 {
   u8 locked ;
   u8 pending ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_60 {
   u16 locked_pending ;
   u16 tail ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
union __anonunion_58 {
   atomic_t val ;
   struct __anonstruct_59 __anonCompField___anonunion_58_7 ;
   struct __anonstruct_60 __anonCompField___anonunion_58_8 ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct qspinlock {
   union __anonunion_58 __anonCompField_qspinlock_9 ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
typedef struct qspinlock arch_spinlock_t;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct __anonstruct_62 {
   u8 wlocked ;
   u8 __lstate[3U] ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
union __anonunion_61 {
   atomic_t cnts ;
   struct __anonstruct_62 __anonCompField___anonunion_61_10 ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct qrwlock {
   union __anonunion_61 __anonCompField_qrwlock_11 ;
   arch_spinlock_t wait_lock ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
typedef struct qrwlock arch_rwlock_t;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/math_emu.h"
struct math_emu_info {
   long ___orig_eip ;
   struct pt_regs *regs ;
};
#line 2288  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/atomic-fallback.h"
typedef atomic64_t atomic_long_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
struct cpumask {
   unsigned long bits[128U] ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint_func {
   void *func ;
   void *data ;
   int prio ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint {
   char *name ;
   struct static_key key ;
   int (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   struct tracepoint_func *funcs ;
};
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
typedef int tracepoint_ptr_t;
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct bpf_raw_event_map {
   struct tracepoint *tp ;
   void *bpf_func ;
   u32 num_args ;
   u32 writable_size ;
} __attribute__((__aligned__(32)));
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_90 {
   u64 rip ;
   u64 rdp ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_91 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_89 {
   struct __anonstruct_90 __anonCompField___anonunion_89_17 ;
   struct __anonstruct_91 __anonCompField___anonunion_89_18 ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_92 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fxregs_state {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_89 __anonCompField_fxregs_state_19 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_92 __anonCompField_fxregs_state_20 ;
} __attribute__((__aligned__(16)));
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct swregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xstate_header {
   u64 xfeatures ;
   u64 xcomp_bv ;
   u64 reserved[6U] ;
} __attribute__((__packed__));
#line 253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xregs_state {
   struct fxregs_state i387 ;
   struct xstate_header header ;
   u8 extended_state_area[0U] ;
} __attribute__((__packed__, __aligned__(64)));
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union fpregs_state {
   struct fregs_state fsave ;
   struct fxregs_state fxsave ;
   struct swregs_state soft ;
   struct xregs_state xsave ;
   u8 __padding[4096U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fpu {
   unsigned int last_cpu ;
   unsigned long avx512_timestamp ;
   union fpregs_state state ;
};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/orc_types.h"
struct orc_entry {
   s16 sp_offset ;
   s16 bp_offset ;
   unsigned int sp_reg : 4 ;
   unsigned int bp_reg : 4 ;
   unsigned int type : 2 ;
   unsigned int end : 1 ;
} __attribute__((__packed__));
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct seq_operations;
#line 478 
struct perf_event;
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct __anonstruct_mm_segment_t_95 {
   unsigned long seg ;
};
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_95 mm_segment_t;
#line 485  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fsbase ;
   unsigned long gsbase ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_nr ;
   unsigned long error_code ;
   struct io_bitmap *io_bitmap ;
   unsigned long iopl_emul ;
   mm_segment_t addr_limit ;
   unsigned int sig_on_uaccess_err : 1 ;
   unsigned int uaccess_err : 1 ;
   struct fpu fpu ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/thread_info.h"
struct thread_info {
   unsigned long flags ;
   u32 status ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
struct lockdep_map;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_subclass_key {
   char __one_byte ;
} __attribute__((__packed__));
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
union __anonunion_96 {
   struct hlist_node hash_entry ;
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class_key {
   union __anonunion_96 __anonCompField_lock_class_key_23 ;
};
#line 68 
struct lock_trace;
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class {
   struct hlist_node hash_entry ;
   struct list_head lock_entry ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct lock_trace *usage_traces[9U] ;
   int name_version ;
   char *name ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char *name ;
   int cpu ;
   unsigned long ip ;
};
#line 226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned int class_idx : 13 ;
   unsigned int irq_context : 2 ;
   unsigned int trylock : 1 ;
   unsigned int read : 2 ;
   unsigned int check : 1 ;
   unsigned int hardirqs_off : 1 ;
   unsigned int references : 12 ;
   unsigned int pin_count ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_98 {
   u8 __padding[24U] ;
   struct lockdep_map dep_map ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
union __anonunion_97 {
   struct raw_spinlock rlock ;
   struct __anonstruct_98 __anonCompField___anonunion_97_24 ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_97 __anonCompField_spinlock_25 ;
};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_rwlock_t_99 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct __anonstruct_rwlock_t_99 rwlock_t;
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
struct mutex;
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
struct kmem_cache;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
struct wait_queue_head {
   spinlock_t lock ;
   struct list_head head ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
typedef struct wait_queue_head wait_queue_head_t;
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
struct refcount_struct {
   atomic_t refs ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
typedef struct refcount_struct refcount_t;
#line 305 
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_TGID = 1,
    PIDTYPE_PGID = 2,
    PIDTYPE_SID = 3,
    PIDTYPE_MAX = 4
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct pid_namespace;
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct pid {
   refcount_t count ;
   unsigned int level ;
   struct hlist_head tasks[4U] ;
   wait_queue_head_t wait_pidfd ;
   struct callback_head rcu ;
   struct upid numbers[1U] ;
};
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/highuid.h"
struct user_namespace;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kuid_t_142 {
   uid_t val ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kuid_t_142 kuid_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kgid_t_143 {
   gid_t val ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kgid_t_143 kgid_t;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/osq_lock.h"
struct optimistic_spin_queue {
   atomic_t tail ;
};
#line 40 
struct ww_acquire_ctx;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex {
   atomic_long_t owner ;
   spinlock_t wait_lock ;
   struct optimistic_spin_queue osq ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   struct ww_acquire_ctx *ww_ctx ;
   void *magic ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct seqcount {
   unsigned int sequence ;
   struct lockdep_map dep_map ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct seqcount seqcount_t;
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct __anonstruct_seqlock_t_152 {
   struct seqcount seqcount ;
   spinlock_t lock ;
};
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct __anonstruct_seqlock_t_152 seqlock_t;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timex.h"
typedef s32 old_time32_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time32.h"
struct old_timespec32 {
   old_time32_t tv_sec ;
   s32 tv_nsec ;
};
#line 461  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
typedef s64 ktime_t;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
struct timer_list {
   struct hlist_node entry ;
   unsigned long expires ;
   void (*function)(struct timer_list *) ;
   u32 flags ;
   struct lockdep_map lockdep_map ;
};
#line 196 
struct hrtimer;
#line 197 
enum hrtimer_restart;
#line 221 
struct workqueue_struct;
#line 222 
struct work_struct;
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct *) ;
   struct lockdep_map lockdep_map ;
};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
   struct workqueue_struct *wq ;
   int cpu ;
};
#line 124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct rcu_work {
   struct work_struct work ;
   struct callback_head rcu ;
   struct workqueue_struct *wq ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhash_head {
   struct rhash_head *next ;
};
#line 25 
struct bucket_table;
#line 33 
struct rhashtable;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_compare_arg {
   struct rhashtable *ht ;
   void *key ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_params {
   u16 nelem_hint ;
   u16 key_len ;
   u16 key_offset ;
   u16 head_offset ;
   unsigned int max_size ;
   u16 min_size ;
   bool automatic_shrinking ;
   u32 (*hashfn)(void *, u32 , u32 ) ;
   u32 (*obj_hashfn)(void *, u32 , u32 ) ;
   int (*obj_cmpfn)(struct rhashtable_compare_arg *, void *) ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable {
   struct bucket_table *tbl ;
   unsigned int key_len ;
   unsigned int max_elems ;
   struct rhashtable_params p ;
   bool rhlist ;
   struct work_struct run_work ;
   struct mutex mutex ;
   spinlock_t lock ;
   atomic_t nelems ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sem.h"
struct sem_undo_list;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shm.h"
struct sysv_shm {
   struct list_head shm_clist ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/plist.h"
struct plist_node {
   int prio ;
   struct list_head prio_list ;
   struct list_head node_list ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_node {
   unsigned long __rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
} __attribute__((__aligned__(8)));
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root_cached {
   struct rb_root rb_root ;
   struct rb_node *rb_leftmost ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node {
   struct llist_node *next ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/smp.h"
struct __call_single_data {
   struct llist_node llist ;
   void (*func)(void *) ;
   void *info ;
   unsigned int flags ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mpspec.h"
struct __anonstruct_nodemask_t_205 {
   unsigned long bits[16U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mpspec.h"
typedef struct __anonstruct_nodemask_t_205 nodemask_t;
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rwsem.h"
struct rw_semaphore {
   atomic_long_t count ;
   atomic_long_t owner ;
   struct optimistic_spin_queue osq ;
   raw_spinlock_t wait_lock ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 194 
struct ldt_struct;
#line 194 
struct vdso_image;
#line 194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rwsem.h"
struct __anonstruct_mm_context_t_206 {
   u64 ctx_id ;
   atomic64_t tlb_gen ;
   struct rw_semaphore ldt_usr_sem ;
   struct ldt_struct *ldt ;
   unsigned short ia32_compat ;
   struct mutex lock ;
   void *vdso ;
   struct vdso_image *vdso_image ;
   atomic_t perf_rdpmc_allowed ;
   u16 pkey_allocation_map ;
   s16 execute_only_pkey ;
   void *bd_addr ;
};
#line 194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rwsem.h"
typedef struct __anonstruct_mm_context_t_206 mm_context_t;
#line 440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/io.h"
struct fwnode_operations;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_handle {
   struct fwnode_handle *secondary ;
   struct fwnode_operations *ops ;
   struct device *dev ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_endpoint {
   unsigned int port ;
   unsigned int id ;
   struct fwnode_handle *local_fwnode ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_reference_args {
   struct fwnode_handle *fwnode ;
   unsigned int nargs ;
   u64 args[8U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_operations {
   struct fwnode_handle *(*get)(struct fwnode_handle *) ;
   void (*put)(struct fwnode_handle *) ;
   bool (*device_is_available)(struct fwnode_handle *) ;
   void *(*device_get_match_data)(struct fwnode_handle *, struct device *) ;
   bool (*property_present)(struct fwnode_handle *, char *) ;
   int (*property_read_int_array)(struct fwnode_handle *, char *, unsigned int , void *, size_t ) ;
   int (*property_read_string_array)(struct fwnode_handle *, char *, char **, size_t ) ;
   char *(*get_name)(struct fwnode_handle *) ;
   char *(*get_name_prefix)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_parent)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_next_child_node)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*get_named_child_node)(struct fwnode_handle *, char *) ;
   int (*get_reference_args)(struct fwnode_handle *, char *, char *, unsigned int , unsigned int , struct fwnode_reference_args *) ;
   struct fwnode_handle *(*graph_get_next_endpoint)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_remote_endpoint)(struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_port_parent)(struct fwnode_handle *) ;
   int (*graph_parse_endpoint)(struct fwnode_handle *, struct fwnode_endpoint *) ;
   int (*add_links)(struct fwnode_handle *, struct device *) ;
};
#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/overflow.h"
struct notifier_block;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
struct vm_struct {
   struct vm_struct *next ;
   void *addr ;
   unsigned long size ;
   unsigned long flags ;
   struct page **pages ;
   unsigned int nr_pages ;
   phys_addr_t phys_addr ;
   void *caller ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/tlbbatch.h"
struct arch_tlbflush_unmap_batch {
   struct cpumask cpumask ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct vmacache {
   u64 seqnum ;
   struct vm_area_struct *vmas[4U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct task_rss_stat {
   int events ;
   int count[4U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct mm_rss_stat {
   atomic_long_t count[4U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct page_frag {
   struct page *page ;
   __u32 offset ;
   __u32 size ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct tlbflush_unmap_batch {
   struct arch_tlbflush_unmap_batch arch ;
   bool flush_required ;
   bool writable ;
};
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/completion.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 120 
struct inode;
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_segcblist.h"
struct rcu_segcblist {
   struct callback_head *head ;
   struct callback_head **tails[4U] ;
   unsigned long gp_seq[4U] ;
   atomic_long_t len ;
   long len_lazy ;
   u8 enabled ;
   u8 offloaded ;
};
#line 80 
struct srcu_struct;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcu.h"
struct srcu_node;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_data {
   unsigned long srcu_lock_count[2U] ;
   unsigned long srcu_unlock_count[2U] ;
   spinlock_t lock ;
   struct rcu_segcblist srcu_cblist ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   bool srcu_cblist_invoking ;
   struct timer_list delay_work ;
   struct work_struct work ;
   struct callback_head srcu_barrier_head ;
   struct srcu_node *mynode ;
   unsigned long grpmask ;
   int cpu ;
   struct srcu_struct *ssp ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_node {
   spinlock_t lock ;
   unsigned long srcu_have_cbs[4U] ;
   unsigned long srcu_data_have_cbs[4U] ;
   unsigned long srcu_gp_seq_needed_exp ;
   struct srcu_node *srcu_parent ;
   int grplo ;
   int grphi ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_struct {
   struct srcu_node node[521U] ;
   struct srcu_node *level[4U] ;
   struct mutex srcu_cb_mutex ;
   spinlock_t lock ;
   struct mutex srcu_gp_mutex ;
   unsigned int srcu_idx ;
   unsigned long srcu_gp_seq ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   unsigned long srcu_last_gp_end ;
   struct srcu_data *sda ;
   unsigned long srcu_barrier_seq ;
   struct mutex srcu_barrier_mutex ;
   struct completion srcu_barrier_completion ;
   atomic_t srcu_barrier_cpu_cnt ;
   struct delayed_work work ;
   struct lockdep_map dep_map ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block *, unsigned long , void *) ;
   struct notifier_block *next ;
   int priority ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct raw_notifier_head {
   struct notifier_block *head ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/uprobes.h"
struct arch_uprobe_task {
   unsigned long saved_scratch_register ;
   unsigned int saved_trap_nr ;
   unsigned int saved_tf ;
};
#line 57 
enum uprobe_task_state {
    UTASK_RUNNING = 0,
    UTASK_SSTEP = 1,
    UTASK_SSTEP_ACK = 2,
    UTASK_SSTEP_TRAPPED = 3
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_222 {
   struct arch_uprobe_task autask ;
   unsigned long vaddr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_223 {
   struct callback_head dup_xol_work ;
   unsigned long dup_xol_addr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
union __anonunion_221 {
   struct __anonstruct_222 __anonCompField___anonunion_221_29 ;
   struct __anonstruct_223 __anonCompField___anonunion_221_30 ;
};
#line 61 
struct uprobe;
#line 61 
struct return_instance;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobe_task {
   enum uprobe_task_state state ;
   union __anonunion_221 __anonCompField_uprobe_task_31 ;
   struct uprobe *active_uprobe ;
   unsigned long xol_vaddr ;
   struct return_instance *return_instances ;
   unsigned int depth ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct return_instance {
   struct uprobe *uprobe ;
   unsigned long func ;
   unsigned long stack ;
   unsigned long orig_ret_vaddr ;
   bool chained ;
   struct return_instance *next ;
};
#line 98 
struct xol_area;
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobes_state {
   struct xol_area *xol_area ;
};
#line 140 
struct address_space;
#line 141 
struct mem_cgroup;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_225 {
   struct list_head lru ;
   struct address_space *mapping ;
   unsigned long index ;
   unsigned long private ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_226 {
   dma_addr_t dma_addr ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_229 {
   struct page *next ;
   int pages ;
   int pobjects ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
union __anonunion_228 {
   struct list_head slab_list ;
   struct __anonstruct_229 __anonCompField___anonunion_228_34 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_231 {
   unsigned int inuse : 16 ;
   unsigned int objects : 15 ;
   unsigned int frozen : 1 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
union __anonunion_230 {
   void *s_mem ;
   unsigned long counters ;
   struct __anonstruct_231 __anonCompField___anonunion_230_36 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_227 {
   union __anonunion_228 __anonCompField___anonstruct_227_35 ;
   struct kmem_cache *slab_cache ;
   void *freelist ;
   union __anonunion_230 __anonCompField___anonstruct_227_37 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_232 {
   unsigned long compound_head ;
   unsigned char compound_dtor ;
   unsigned char compound_order ;
   atomic_t compound_mapcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_233 {
   unsigned long _compound_pad_1 ;
   unsigned long _compound_pad_2 ;
   struct list_head deferred_list ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
union __anonunion_235 {
   struct mm_struct *pt_mm ;
   atomic_t pt_frag_refcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_234 {
   unsigned long _pt_pad_1 ;
   pgtable_t pmd_huge_pte ;
   unsigned long _pt_pad_2 ;
   union __anonunion_235 __anonCompField___anonstruct_234_41 ;
   spinlock_t *ptl ;
};
#line 68 
struct dev_pagemap;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_236 {
   struct dev_pagemap *pgmap ;
   void *zone_device_data ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
union __anonunion_224 {
   struct __anonstruct_225 __anonCompField___anonunion_224_32 ;
   struct __anonstruct_226 __anonCompField___anonunion_224_33 ;
   struct __anonstruct_227 __anonCompField___anonunion_224_38 ;
   struct __anonstruct_232 __anonCompField___anonunion_224_39 ;
   struct __anonstruct_233 __anonCompField___anonunion_224_40 ;
   struct __anonstruct_234 __anonCompField___anonunion_224_42 ;
   struct __anonstruct_236 __anonCompField___anonunion_224_43 ;
   struct callback_head callback_head ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
union __anonunion_237 {
   atomic_t _mapcount ;
   unsigned int page_type ;
   unsigned int active ;
   int units ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct page {
   unsigned long flags ;
   union __anonunion_224 __anonCompField_page_44 ;
   union __anonunion_237 __anonCompField_page_45 ;
   atomic_t _refcount ;
   struct mem_cgroup *mem_cgroup ;
} __attribute__((__aligned__(16)));
#line 278 
struct userfaultfd_ctx;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_userfaultfd_ctx {
   struct userfaultfd_ctx *ctx ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_shared_238 {
   struct rb_node rb ;
   unsigned long rb_subtree_last ;
};
#line 292 
struct anon_vma;
#line 292 
struct vm_operations_struct;
#line 292 
struct mempolicy;
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_area_struct {
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   struct rb_node vm_rb ;
   unsigned long rb_subtree_gap ;
   struct mm_struct *vm_mm ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct __anonstruct_shared_238 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   atomic_long_t swap_readahead_info ;
   struct mempolicy *vm_policy ;
   struct vm_userfaultfd_ctx vm_userfaultfd_ctx ;
} __attribute__((__designated_init__));
#line 358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 368 
struct kioctx_table;
#line 370 
struct linux_binfmt;
#line 370 
struct mmu_notifier_mm;
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_239 {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   u64 vmacache_seqnum ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   unsigned long mmap_base ;
   unsigned long mmap_legacy_base ;
   unsigned long mmap_compat_base ;
   unsigned long mmap_compat_legacy_base ;
   unsigned long task_size ;
   unsigned long highest_vm_end ;
   pgd_t *pgd ;
   atomic_t membarrier_state ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   atomic_long_t pgtables_bytes ;
   int map_count ;
   spinlock_t page_table_lock ;
   struct rw_semaphore mmap_sem ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   atomic64_t pinned_vm ;
   unsigned long data_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long def_flags ;
   spinlock_t arg_lock ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[46U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   mm_context_t context ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct kioctx_table *ioctx_table ;
   struct task_struct *owner ;
   struct user_namespace *user_ns ;
   struct file *exe_file ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
   unsigned long numa_next_scan ;
   unsigned long numa_scan_offset ;
   int numa_scan_seq ;
   atomic_t tlb_flush_pending ;
   bool tlb_flush_batched ;
   struct uprobes_state uprobes_state ;
   atomic_long_t hugetlb_usage ;
   struct work_struct async_put_work ;
} __attribute__((__designated_init__));
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct mm_struct {
   struct __anonstruct_239 __anonCompField_mm_struct_46 ;
   unsigned long cpu_bitmap[] ;
};
#line 642 
struct vm_fault;
#line 643  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
typedef unsigned int vm_fault_t;
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_node {
   struct rb_node node ;
   ktime_t expires ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_head {
   struct rb_root_cached rb_root ;
};
#line 60 
struct hrtimer_clock_base;
#line 61 
struct hrtimer_cpu_base;
#line 80 
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
};
#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer {
   struct timerqueue_node node ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer *) ;
   struct hrtimer_clock_base *base ;
   u8 state ;
   u8 is_rel ;
   u8 is_soft ;
   u8 is_hard ;
};
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   unsigned int index ;
   clockid_t clockid ;
   seqcount_t seq ;
   struct hrtimer *running ;
   struct timerqueue_head active ;
   ktime_t (*get_time)(void) ;
   ktime_t offset ;
} __attribute__((__aligned__(64)));
#line 213  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   unsigned int cpu ;
   unsigned int active_bases ;
   unsigned int clock_was_set_seq ;
   unsigned int hres_active : 1 ;
   unsigned int in_hrtirq : 1 ;
   unsigned int hang_detected : 1 ;
   unsigned int softirq_activated : 1 ;
   unsigned int nr_events ;
   unsigned short nr_retries ;
   unsigned short nr_hangs ;
   unsigned int max_hang_time ;
   ktime_t expires_next ;
   struct hrtimer *next_timer ;
   ktime_t softirq_expires_next ;
   struct hrtimer *softirq_next_timer ;
   struct hrtimer_clock_base clock_base[8U] ;
} __attribute__((__aligned__(64)));
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/seccomp.h"
struct seccomp_filter;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seccomp.h"
struct seccomp {
   int mode ;
   struct seccomp_filter *filter ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/resource.h"
struct rlimit {
   __kernel_ulong_t rlim_cur ;
   __kernel_ulong_t rlim_max ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/latencytop.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/types.h"
struct task_cputime {
   u64 stime ;
   u64 utime ;
   unsigned long long sum_exec_runtime ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_252 {
   unsigned long sig[1U] ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_252 sigset_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef void __signalfn_t(int );
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__kill_253 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__timer_254 {
   __kernel_timer_t _tid ;
   int _overrun ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__rt_255 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigchld_256 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_bnd_259 {
   char _dummy_bnd[8U] ;
   void *_lower ;
   void *_upper ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_pkey_260 {
   char _dummy_pkey[8U] ;
   __u32 _pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __anonunion_258 {
   short _addr_lsb ;
   struct __anonstruct__addr_bnd_259 _addr_bnd ;
   struct __anonstruct__addr_pkey_260 _addr_pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigfault_257 {
   void *_addr ;
   union __anonunion_258 __anonCompField___anonstruct__sigfault_257_47 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_261 {
   long _band ;
   int _fd ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigsys_262 {
   void *_call_addr ;
   int _syscall ;
   unsigned int _arch ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __sifields {
   struct __anonstruct__kill_253 _kill ;
   struct __anonstruct__timer_254 _timer ;
   struct __anonstruct__rt_255 _rt ;
   struct __anonstruct__sigchld_256 _sigchld ;
   struct __anonstruct__sigfault_257 _sigfault ;
   struct __anonstruct__sigpoll_261 _sigpoll ;
   struct __anonstruct__sigsys_262 _sigsys ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct __anonstruct_267 {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __sifields _sifields ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct kernel_siginfo {
   struct __anonstruct_267 __anonCompField_kernel_siginfo_50 ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
typedef struct kernel_siginfo kernel_siginfo_t;
#line 20 
struct user_struct;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/task_io_accounting.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimer_base {
   u64 nextevt ;
   struct timerqueue_head tqhead ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimers {
   struct posix_cputimer_base bases[3U] ;
   unsigned int timers_active ;
   unsigned int expiry_active ;
};
#line 193 
struct signal_struct;
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
union __anonunion_rseq_cs_272 {
   __u64 ptr64 ;
   __u64 ptr ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
struct rseq {
   __u32 cpu_id_start ;
   __u32 cpu_id ;
   union __anonunion_rseq_cs_272 rseq_cs ;
   __u32 flags ;
} __attribute__((__aligned__(32)));
#line 146 
struct audit_context;
#line 147 
struct backing_dev_info;
#line 148 
struct bio_list;
#line 149 
struct blk_plug;
#line 150 
struct capture_control;
#line 151 
struct cfs_rq;
#line 152 
struct fs_struct;
#line 153 
struct futex_pi_state;
#line 154 
struct io_context;
#line 155 
struct nameidata;
#line 156 
struct nsproxy;
#line 157 
struct perf_event_context;
#line 158 
struct pipe_inode_info;
#line 160 
struct reclaim_state;
#line 161 
struct robust_list_head;
#line 166 
struct sighand_struct;
#line 167 
struct task_delay_info;
#line 168 
struct task_group;
#line 242  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct prev_cputime {
   u64 utime ;
   u64 stime ;
   raw_spinlock_t lock ;
};
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   u32 inv_weight ;
};
#line 352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct util_est {
   unsigned int enqueued ;
   unsigned int ewma ;
} __attribute__((__aligned__(8)));
#line 401  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_avg {
   u64 last_update_time ;
   u64 load_sum ;
   u64 runnable_load_sum ;
   u32 util_sum ;
   u32 period_contrib ;
   unsigned long load_avg ;
   unsigned long runnable_load_avg ;
   unsigned long util_avg ;
   struct util_est util_est ;
} __attribute__((__aligned__(64)));
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};
#line 449  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   unsigned long runnable_weight ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   int depth ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
   struct sched_avg avg ;
};
#line 486 
struct rt_rq;
#line 486  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned long watchdog_stamp ;
   unsigned int time_slice ;
   unsigned short on_rq ;
   unsigned short on_list ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
} __attribute__((__designated_init__));
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_dl_entity {
   struct rb_node rb_node ;
   u64 dl_runtime ;
   u64 dl_deadline ;
   u64 dl_period ;
   u64 dl_bw ;
   u64 dl_density ;
   s64 runtime ;
   u64 deadline ;
   unsigned int flags ;
   unsigned int dl_throttled : 1 ;
   unsigned int dl_boosted : 1 ;
   unsigned int dl_yielded : 1 ;
   unsigned int dl_non_contending : 1 ;
   unsigned int dl_overrun : 1 ;
   struct hrtimer dl_timer ;
   struct hrtimer inactive_timer ;
};
#line 600  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct uclamp_se {
   unsigned int value : 11 ;
   unsigned int bucket_id : 3 ;
   unsigned int active : 1 ;
   unsigned int user_defined : 1 ;
};
#line 625  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct wake_q_node {
   struct wake_q_node *next ;
};
#line 629 
struct sched_class;
#line 629 
struct cred;
#line 629 
struct key;
#line 629 
struct files_struct;
#line 629 
struct rt_mutex_waiter;
#line 629 
struct css_set;
#line 629 
struct compat_robust_list_head;
#line 629 
struct numa_group;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
union __anonunion_274 {
   refcount_t rcu_users ;
   struct callback_head rcu ;
};
#line 629 
struct ftrace_ret_stack;
#line 629 
struct kcov;
#line 629 
struct request_queue;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct task_struct {
   struct thread_info thread_info ;
   long state ;
   void *stack ;
   refcount_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   struct llist_node wake_entry ;
   int on_cpu ;
   unsigned int cpu ;
   unsigned int wakee_flips ;
   unsigned long wakee_flip_decay_ts ;
   struct task_struct *last_wakee ;
   int recent_used_cpu ;
   int wake_cpu ;
   int on_rq ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct task_group *sched_task_group ;
   struct sched_dl_entity dl ;
   struct uclamp_se uclamp_req[2U] ;
   struct uclamp_se uclamp[2U] ;
   struct hlist_head preempt_notifiers ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   int nr_cpus_allowed ;
   cpumask_t *cpus_ptr ;
   cpumask_t cpus_mask ;
   unsigned long rcu_tasks_nvcsw ;
   u8 rcu_tasks_holdout ;
   u8 rcu_tasks_idx ;
   int rcu_tasks_idle_cpu ;
   struct list_head rcu_tasks_holdout_list ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct rb_node pushable_dl_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   struct vmacache vmacache ;
   struct task_rss_stat rss_stat ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned long jobctl ;
   unsigned int personality ;
   unsigned int sched_reset_on_fork : 1 ;
   unsigned int sched_contributes_to_load : 1 ;
   unsigned int sched_migrated : 1 ;
   unsigned int sched_remote_wakeup : 1 ;
   unsigned int sched_psi_wake_requeue : 1 ;
   unsigned int  ;
   unsigned int in_execve : 1 ;
   unsigned int in_iowait : 1 ;
   unsigned int restore_sigmask : 1 ;
   unsigned int in_user_fault : 1 ;
   unsigned int brk_randomized : 1 ;
   unsigned int no_cgroup_migration : 1 ;
   unsigned int frozen : 1 ;
   unsigned int use_memdelay : 1 ;
   unsigned long atomic_flags ;
   struct restart_block restart_block ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid *thread_pid ;
   struct hlist_node pid_links[4U] ;
   struct list_head thread_group ;
   struct list_head thread_node ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   u64 utime ;
   u64 stime ;
   u64 gtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   u64 start_time ;
   u64 start_boottime ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct posix_cputimers posix_cputimers ;
   struct cred *ptracer_cred ;
   struct cred *real_cred ;
   struct cred *cred ;
   struct key *cached_requested_key ;
   char comm[16U] ;
   struct nameidata *nameidata ;
   struct sysv_sem sysvsem ;
   struct sysv_shm sysvshm ;
   unsigned long last_switch_count ;
   unsigned long last_switch_time ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   unsigned int sas_ss_flags ;
   struct callback_head *task_works ;
   struct audit_context *audit_context ;
   kuid_t loginuid ;
   unsigned int sessionid ;
   struct seccomp seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   raw_spinlock_t pi_lock ;
   struct wake_q_node wake_q ;
   struct rb_root_cached pi_waiters ;
   struct task_struct *pi_top_task ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   int non_block_count ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   unsigned int in_ubsan ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct blk_plug *plug ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   struct capture_control *capture_control ;
   unsigned long ptrace_message ;
   kernel_siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   unsigned int psi_flags ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   u64 acct_timexpd ;
   nodemask_t mems_allowed ;
   seqcount_t mems_allowed_seq ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   u32 closid ;
   u32 rmid ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct mutex futex_exit_mutex ;
   unsigned int futex_state ;
   struct perf_event_context *perf_event_ctxp[2U] ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_prev ;
   short pref_node_fork ;
   int numa_scan_seq ;
   unsigned int numa_scan_period ;
   unsigned int numa_scan_period_max ;
   int numa_preferred_nid ;
   unsigned long numa_migrate_retry ;
   u64 node_stamp ;
   u64 last_task_numa_placement ;
   u64 last_sum_exec_runtime ;
   struct callback_head numa_work ;
   struct numa_group *numa_group ;
   unsigned long *numa_faults ;
   unsigned long total_numa_faults ;
   unsigned long numa_faults_locality[3U] ;
   unsigned long numa_pages_migrated ;
   struct rseq *rseq ;
   u32 rseq_sig ;
   unsigned long rseq_event_mask ;
   struct tlbflush_unmap_batch tlb_ubc ;
   union __anonunion_274 __anonCompField_task_struct_52 ;
   struct pipe_inode_info *splice_pipe ;
   struct page_frag task_frag ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   unsigned int fail_nth ;
   int nr_dirtied ;
   int nr_dirtied_pause ;
   unsigned long dirty_paused_when ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   u64 timer_slack_ns ;
   u64 default_timer_slack_ns ;
   unsigned int kasan_depth ;
   int curr_ret_stack ;
   int curr_ret_depth ;
   struct ftrace_ret_stack *ret_stack ;
   unsigned long long ftrace_timestamp ;
   atomic_t trace_overrun ;
   atomic_t tracing_graph_pause ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   unsigned int kcov_mode ;
   unsigned int kcov_size ;
   void *kcov_area ;
   struct kcov *kcov ;
   u64 kcov_handle ;
   int kcov_sequence ;
   struct mem_cgroup *memcg_in_oom ;
   gfp_t memcg_oom_gfp_mask ;
   int memcg_oom_order ;
   unsigned int memcg_nr_pages_over_high ;
   struct mem_cgroup *active_memcg ;
   struct request_queue *throttle_queue ;
   struct uprobe_task *utask ;
   unsigned int sequential_io ;
   unsigned int sequential_io_avg ;
   unsigned long task_state_change ;
   int pagefault_disabled ;
   struct task_struct *oom_reaper_list ;
   struct vm_struct *stack_vm_area ;
   refcount_t stack_refcount ;
   int patch_state ;
   void *security ;
   struct thread_struct thread ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct free_area {
   struct list_head free_list[6U] ;
   unsigned long nr_free ;
};
#line 158 
struct pglist_data;
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone_padding {
   char x[0U] ;
} __attribute__((__aligned__(4096)));
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone_reclaim_stat {
   unsigned long recent_rotated[2U] ;
   unsigned long recent_scanned[2U] ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct lruvec {
   struct list_head lists[5U] ;
   struct zone_reclaim_stat reclaim_stat ;
   atomic_long_t inactive_age ;
   unsigned long refaults ;
   unsigned long flags ;
   struct pglist_data *pgdat ;
};
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
typedef unsigned int isolate_mode_t;
#line 340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_pages {
   int count ;
   int high ;
   int batch ;
   struct list_head lists[3U] ;
};
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_pageset {
   struct per_cpu_pages pcp ;
   s8 expire ;
   u16 vm_numa_stat_diff[6U] ;
   s8 stat_threshold ;
   s8 vm_stat_diff[13U] ;
};
#line 361  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_nodestat {
   s8 stat_threshold ;
   s8 vm_node_stat_diff[32U] ;
};
#line 365 
enum zone_type {
    ZONE_DMA = 0,
    ZONE_DMA32 = 1,
    ZONE_NORMAL = 2,
    ZONE_MOVABLE = 3,
    ZONE_DEVICE = 4,
    __MAX_NR_ZONES = 5
};
#line 432  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone {
   unsigned long _watermark[3U] ;
   unsigned long watermark_boost ;
   unsigned long nr_reserved_highatomic ;
   long lowmem_reserve[5U] ;
   int node ;
   struct pglist_data *zone_pgdat ;
   struct per_cpu_pageset *pageset ;
   unsigned long zone_start_pfn ;
   atomic_long_t managed_pages ;
   unsigned long spanned_pages ;
   unsigned long present_pages ;
   char *name ;
   unsigned long nr_isolate_pageblock ;
   seqlock_t span_seqlock ;
   int initialized ;
   struct zone_padding _pad1_ ;
   struct free_area free_area[11U] ;
   unsigned long flags ;
   spinlock_t lock ;
   struct zone_padding _pad2_ ;
   unsigned long percpu_drift_mark ;
   unsigned long compact_cached_free_pfn ;
   unsigned long compact_cached_migrate_pfn[2U] ;
   unsigned long compact_init_migrate_pfn ;
   unsigned long compact_init_free_pfn ;
   unsigned int compact_considered ;
   unsigned int compact_defer_shift ;
   int compact_order_failed ;
   bool compact_blockskip_flush ;
   bool contiguous ;
   struct zone_padding _pad3_ ;
   atomic_long_t vm_stat[13U] ;
   atomic_long_t vm_numa_stat[6U] ;
} __attribute__((__aligned__(4096)));
#line 665  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zoneref {
   struct zone *zone ;
   int zone_idx ;
};
#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zonelist {
   struct zoneref _zonerefs[5121U] ;
};
#line 694  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct deferred_split {
   spinlock_t split_queue_lock ;
   struct list_head split_queue ;
   unsigned long split_queue_len ;
};
#line 710  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct pglist_data {
   struct zone node_zones[5U] ;
   struct zonelist node_zonelists[2U] ;
   int nr_zones ;
   spinlock_t node_size_lock ;
   unsigned long node_start_pfn ;
   unsigned long node_present_pages ;
   unsigned long node_spanned_pages ;
   int node_id ;
   wait_queue_head_t kswapd_wait ;
   wait_queue_head_t pfmemalloc_wait ;
   struct task_struct *kswapd ;
   int kswapd_order ;
   enum zone_type kswapd_classzone_idx ;
   int kswapd_failures ;
   int kcompactd_max_order ;
   enum zone_type kcompactd_classzone_idx ;
   wait_queue_head_t kcompactd_wait ;
   struct task_struct *kcompactd ;
   unsigned long totalreserve_pages ;
   unsigned long min_unmapped_pages ;
   unsigned long min_slab_pages ;
   struct zone_padding _pad1_ ;
   spinlock_t lru_lock ;
   unsigned long first_deferred_pfn ;
   struct deferred_split deferred_split_queue ;
   struct lruvec __lruvec ;
   unsigned long flags ;
   struct zone_padding _pad2_ ;
   struct per_cpu_nodestat *per_cpu_nodestats ;
   atomic_long_t vm_stat[32U] ;
};
#line 824 
struct resource;
#line 825 
struct vmem_altmap;
#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/firmware.h"
struct percpu_ref;
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/firmware.h"
typedef void percpu_ref_func_t(struct percpu_ref *);
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-refcount.h"
struct percpu_ref {
   atomic_long_t count ;
   unsigned long percpu_count_ptr ;
   percpu_ref_func_t *release ;
   percpu_ref_func_t *confirm_switch ;
   bool force_atomic : 1 ;
   bool allow_reinit : 1 ;
   struct callback_head rcu ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrink_control {
   gfp_t gfp_mask ;
   int nid ;
   unsigned long nr_to_scan ;
   unsigned long nr_scanned ;
   struct mem_cgroup *memcg ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrinker {
   unsigned long (*count_objects)(struct shrinker *, struct shrink_control *) ;
   unsigned long (*scan_objects)(struct shrinker *, struct shrink_control *) ;
   long batch ;
   int seeks ;
   unsigned int flags ;
   struct list_head list ;
   int id ;
   atomic_long_t *nr_deferred ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ioport.h"
struct resource {
   resource_size_t start ;
   resource_size_t end ;
   char *name ;
   unsigned long flags ;
   unsigned long desc ;
   struct resource *parent ;
   struct resource *sibling ;
   struct resource *child ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct vmem_altmap {
   unsigned long base_pfn ;
   unsigned long end_pfn ;
   unsigned long reserve ;
   unsigned long free ;
   unsigned long align ;
   unsigned long alloc ;
};
#line 26 
enum memory_type {
    MEMORY_DEVICE_PRIVATE = 1,
    MEMORY_DEVICE_FS_DAX = 2,
    MEMORY_DEVICE_DEVDAX = 3,
    MEMORY_DEVICE_PCI_P2PDMA = 4
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap_ops {
   void (*page_free)(struct page *) ;
   void (*kill)(struct dev_pagemap *) ;
   void (*cleanup)(struct dev_pagemap *) ;
   vm_fault_t (*migrate_to_ram)(struct vm_fault *) ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap {
   struct vmem_altmap altmap ;
   struct resource res ;
   struct percpu_ref *ref ;
   struct percpu_ref internal_ref ;
   struct completion done ;
   enum memory_type type ;
   unsigned int flags ;
   struct dev_pagemap_ops *ops ;
};
#line 176 
struct file_ra_state;
#line 177 
struct writeback_control;
#line 178 
struct bdi_writeback;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/extable.h"
struct exception_table_entry {
   int insn ;
   int fixup ;
   int handler ;
};
#line 417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_fault {
   struct vm_area_struct *vma ;
   unsigned int flags ;
   gfp_t gfp_mask ;
   unsigned long pgoff ;
   unsigned long address ;
   pmd_t *pmd ;
   pud_t *pud ;
   pte_t orig_pte ;
   struct page *cow_page ;
   struct mem_cgroup *memcg ;
   struct page *page ;
   pte_t *pte ;
   spinlock_t *ptl ;
   pgtable_t prealloc_pte ;
};
#line 448 
enum page_entry_size {
    PE_SIZE_PTE = 0,
    PE_SIZE_PMD = 1,
    PE_SIZE_PUD = 2
};
#line 467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct *) ;
   void (*close)(struct vm_area_struct *) ;
   int (*split)(struct vm_area_struct *, unsigned long ) ;
   int (*mremap)(struct vm_area_struct *) ;
   vm_fault_t (*fault)(struct vm_fault *) ;
   vm_fault_t (*huge_fault)(struct vm_fault *, enum page_entry_size ) ;
   void (*map_pages)(struct vm_fault *, unsigned long , unsigned long ) ;
   unsigned long (*pagesize)(struct vm_area_struct *) ;
   vm_fault_t (*page_mkwrite)(struct vm_fault *) ;
   vm_fault_t (*pfn_mkwrite)(struct vm_fault *) ;
   int (*access)(struct vm_area_struct *, unsigned long , void *, int , int ) ;
   char *(*name)(struct vm_area_struct *) ;
   int (*set_policy)(struct vm_area_struct *, struct mempolicy *) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct *, unsigned long ) ;
   struct page *(*find_special_page)(struct vm_area_struct *, unsigned long ) ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_head {
   struct hlist_bl_node *first ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node {
   struct hlist_bl_node *next ;
   struct hlist_bl_node **pprev ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct __anonstruct_387 {
   spinlock_t lock ;
   int count ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
union __anonunion_386 {
   struct __anonstruct_387 __anonCompField___anonunion_386_53 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct lockref {
   union __anonunion_386 __anonCompField_lockref_54 ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stringhash.h"
struct path;
#line 79 
struct vfsmount;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct __anonstruct_389 {
   u32 hash ;
   u32 len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_388 {
   struct __anonstruct_389 __anonCompField___anonunion_388_55 ;
   u64 hash_len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct qstr {
   union __anonunion_388 __anonCompField_qstr_56 ;
   unsigned char *name ;
};
#line 89 
struct dentry_operations;
#line 89 
struct super_block;
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_390 {
   struct list_head d_lru ;
   wait_queue_head_t *d_wait ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_d_u_391 {
   struct hlist_node d_alias ;
   struct hlist_bl_node d_in_lookup_hash ;
   struct callback_head d_rcu ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry {
   unsigned int d_flags ;
   seqcount_t d_seq ;
   struct hlist_bl_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct inode *d_inode ;
   unsigned char d_iname[32U] ;
   struct lockref d_lockref ;
   struct dentry_operations *d_op ;
   struct super_block *d_sb ;
   unsigned long d_time ;
   void *d_fsdata ;
   union __anonunion_390 __anonCompField_dentry_57 ;
   struct list_head d_child ;
   struct list_head d_subdirs ;
   union __anonunion_d_u_391 d_u ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_weak_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_hash)(struct dentry *, struct qstr *) ;
   int (*d_compare)(struct dentry *, unsigned int , char *, struct qstr *) ;
   int (*d_delete)(struct dentry *) ;
   int (*d_init)(struct dentry *) ;
   void (*d_release)(struct dentry *) ;
   void (*d_prune)(struct dentry *) ;
   void (*d_iput)(struct dentry *, struct inode *) ;
   char *(*d_dname)(struct dentry *, char *, int ) ;
   struct vfsmount *(*d_automount)(struct path *) ;
   int (*d_manage)(struct path *, bool ) ;
   struct dentry *(*d_real)(struct dentry *, struct inode *) ;
} __attribute__((__aligned__(64)));
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/path.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
} __attribute__((__designated_init__));
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stat.h"
struct kstat {
   u32 result_mask ;
   umode_t mode ;
   unsigned int nlink ;
   uint32_t blksize ;
   u64 attributes ;
   u64 attributes_mask ;
   u64 ino ;
   dev_t dev ;
   dev_t rdev ;
   kuid_t uid ;
   kgid_t gid ;
   loff_t size ;
   struct timespec64 atime ;
   struct timespec64 mtime ;
   struct timespec64 ctime ;
   struct timespec64 btime ;
   u64 blocks ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_one {
   struct list_head list ;
   long nr_items ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_memcg {
   struct callback_head rcu ;
   struct list_lru_one *lru[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_node {
   spinlock_t lock ;
   struct list_lru_one lru ;
   struct list_lru_memcg *memcg_lrus ;
   long nr_items ;
} __attribute__((__aligned__(64)));
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru {
   struct list_lru_node *node ;
   struct list_head list ;
   int shrinker_id ;
   bool memcg_aware ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/xarray.h"
struct xarray {
   spinlock_t xa_lock ;
   gfp_t xa_flags ;
   void *xa_head ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fiemap.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
#line 39 
enum migrate_mode {
    MIGRATE_ASYNC = 0,
    MIGRATE_SYNC_LIGHT = 1,
    MIGRATE_SYNC = 2,
    MIGRATE_SYNC_NO_COPY = 3
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcuwait.h"
struct rcuwait {
   struct task_struct *task ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_sync.h"
struct rcu_sync {
   int gp_state ;
   int gp_count ;
   wait_queue_head_t gp_wait ;
   struct callback_head cb_head ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-rwsem.h"
struct percpu_rw_semaphore {
   struct rcu_sync rss ;
   unsigned int *read_count ;
   struct rw_semaphore rw_sem ;
   struct rcuwait writer ;
   int readers_block ;
};
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delayed_call.h"
struct delayed_call {
   void (*fn)(void *) ;
   void *arg ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
struct __anonstruct_uuid_t_409 {
   __u8 b[16U] ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
typedef struct __anonstruct_uuid_t_409 uuid_t;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uuid.h"
typedef u32 errseq_t;
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_410 {
   struct list_head q_node ;
   struct kmem_cache *__rcu_icq_cache ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_411 {
   struct hlist_node ioc_node ;
   struct callback_head __rcu_head ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_cq {
   struct request_queue *q ;
   struct io_context *ioc ;
   union __anonunion_410 __anonCompField_io_cq_60 ;
   union __anonunion_411 __anonCompField_io_cq_61 ;
   unsigned int flags ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_context {
   atomic_long_t refcount ;
   atomic_t active_ref ;
   atomic_t nr_tasks ;
   spinlock_t lock ;
   unsigned short ioprio ;
   int nr_batch_requests ;
   unsigned long last_waited ;
   struct xarray icq_tree ;
   struct io_cq *icq_hint ;
   struct hlist_head icq_list ;
   struct work_struct release_work ;
};
#line 286  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fs.h"
struct bio;
#line 287 
struct export_operations;
#line 288 
struct hd_geometry;
#line 289 
struct iovec;
#line 290 
struct kiocb;
#line 291 
struct kobject;
#line 292 
struct poll_table_struct;
#line 293 
struct kstatfs;
#line 294 
struct swap_info_struct;
#line 295 
struct iov_iter;
#line 296 
struct fscrypt_info;
#line 297 
struct fscrypt_operations;
#line 298 
struct fsverity_info;
#line 299 
struct fsverity_operations;
#line 300 
struct fs_context;
#line 301 
struct fs_parameter_description;
#line 224  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   kuid_t ia_uid ;
   kgid_t ia_gid ;
   loff_t ia_size ;
   struct timespec64 ia_atime ;
   struct timespec64 ia_mtime ;
   struct timespec64 ia_ctime ;
   struct file *ia_file ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu_counter.h"
struct percpu_counter {
   raw_spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dqblk_xfs.h"
struct dquot;
#line 215 
struct kqid;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef __kernel_uid32_t projid_t;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
struct __anonstruct_kprojid_t_412 {
   projid_t val ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef struct __anonstruct_kprojid_t_412 kprojid_t;
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/quota.h"
enum quota_type {
    USRQUOTA = 0,
    GRPQUOTA = 1,
    PRJQUOTA = 2
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
typedef long long qsize_t;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
union __anonunion_413 {
   kuid_t uid ;
   kgid_t gid ;
   kprojid_t projid ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct kqid {
   union __anonunion_413 __anonCompField_kqid_62 ;
   enum quota_type type ;
};
#line 205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time64_t dqb_btime ;
   time64_t dqb_itime ;
};
#line 216 
struct quota_format_type;
#line 222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_max_spc_limit ;
   qsize_t dqi_max_ino_limit ;
   void *dqi_priv ;
};
#line 294  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   spinlock_t dq_dqb_lock ;
   atomic_t dq_count ;
   struct super_block *dq_sb ;
   struct kqid dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   struct mem_dqblk dq_dqb ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block *, int ) ;
   int (*read_file_info)(struct super_block *, int ) ;
   int (*write_file_info)(struct super_block *, int ) ;
   int (*free_file_info)(struct super_block *, int ) ;
   int (*read_dqblk)(struct dquot *) ;
   int (*commit_dqblk)(struct dquot *) ;
   int (*release_dqblk)(struct dquot *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 322  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot_operations {
   int (*write_dquot)(struct dquot *) ;
   struct dquot *(*alloc_dquot)(struct super_block *, int ) ;
   void (*destroy_dquot)(struct dquot *) ;
   int (*acquire_dquot)(struct dquot *) ;
   int (*release_dquot)(struct dquot *) ;
   int (*mark_dirty)(struct dquot *) ;
   int (*write_info)(struct super_block *, int ) ;
   qsize_t *(*get_reserved_space)(struct inode *) ;
   int (*get_projid)(struct inode *, kprojid_t *) ;
   int (*get_inode_usage)(struct inode *, qsize_t *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 343  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_dqblk {
   int d_fieldmask ;
   u64 d_spc_hardlimit ;
   u64 d_spc_softlimit ;
   u64 d_ino_hardlimit ;
   u64 d_ino_softlimit ;
   u64 d_space ;
   u64 d_ino_count ;
   s64 d_ino_timer ;
   s64 d_spc_timer ;
   int d_ino_warns ;
   int d_spc_warns ;
   u64 d_rt_spc_hardlimit ;
   u64 d_rt_spc_softlimit ;
   u64 d_rt_space ;
   s64 d_rt_spc_timer ;
   int d_rt_spc_warns ;
};
#line 395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_type_state {
   unsigned int flags ;
   unsigned int spc_timelimit ;
   unsigned int ino_timelimit ;
   unsigned int rt_spc_timelimit ;
   unsigned int spc_warnlimit ;
   unsigned int ino_warnlimit ;
   unsigned int rt_spc_warnlimit ;
   unsigned long long ino ;
   blkcnt_t blocks ;
   blkcnt_t nextents ;
};
#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_state {
   unsigned int s_incoredqs ;
   struct qc_type_state s_state[3U] ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_info {
   int i_fieldmask ;
   unsigned int i_flags ;
   unsigned int i_spc_timelimit ;
   unsigned int i_ino_timelimit ;
   unsigned int i_rt_spc_timelimit ;
   unsigned int i_spc_warnlimit ;
   unsigned int i_ino_warnlimit ;
   unsigned int i_rt_spc_warnlimit ;
};
#line 428  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block *, int , int , struct path *) ;
   int (*quota_off)(struct super_block *, int ) ;
   int (*quota_enable)(struct super_block *, unsigned int ) ;
   int (*quota_disable)(struct super_block *, unsigned int ) ;
   int (*quota_sync)(struct super_block *, int ) ;
   int (*set_info)(struct super_block *, int , struct qc_info *) ;
   int (*get_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_nextdqblk)(struct super_block *, struct kqid *, struct qc_dqblk *) ;
   int (*set_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_state)(struct super_block *, struct qc_state *) ;
   int (*rm_xquota)(struct super_block *, unsigned int ) ;
};
#line 443  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 518  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct rw_semaphore dqio_sem ;
   struct inode *files[3U] ;
   struct mem_dqinfo info[3U] ;
   struct quota_format_ops *ops[3U] ;
};
#line 538 
enum rw_hint {
    WRITE_LIFE_NOT_SET = 0,
    WRITE_LIFE_NONE = 1,
    WRITE_LIFE_SHORT = 2,
    WRITE_LIFE_MEDIUM = 3,
    WRITE_LIFE_LONG = 4,
    WRITE_LIFE_EXTREME = 5
};
#line 318  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct kiocb {
   struct file *ki_filp ;
   loff_t ki_pos ;
   void (*ki_complete)(struct kiocb *, long , long ) ;
   void *private ;
   int ki_flags ;
   u16 ki_hint ;
   u16 ki_ioprio ;
   unsigned int ki_cookie ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_arg_415 {
   char *buf ;
   void *data ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct __anonstruct_read_descriptor_t_414 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_415 arg ;
   int error ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
typedef struct __anonstruct_read_descriptor_t_414 read_descriptor_t;
#line 362  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page *, struct writeback_control *) ;
   int (*readpage)(struct file *, struct page *) ;
   int (*writepages)(struct address_space *, struct writeback_control *) ;
   int (*set_page_dirty)(struct page *) ;
   int (*readpages)(struct file *, struct address_space *, struct list_head *, unsigned int ) ;
   int (*write_begin)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page **, void **) ;
   int (*write_end)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page *, void *) ;
   sector_t (*bmap)(struct address_space *, sector_t ) ;
   void (*invalidatepage)(struct page *, unsigned int , unsigned int ) ;
   int (*releasepage)(struct page *, gfp_t ) ;
   void (*freepage)(struct page *) ;
   ssize_t (*direct_IO)(struct kiocb *, struct iov_iter *) ;
   int (*migratepage)(struct address_space *, struct page *, struct page *, enum migrate_mode ) ;
   bool (*isolate_page)(struct page *, isolate_mode_t ) ;
   void (*putback_page)(struct page *) ;
   int (*launder_page)(struct page *) ;
   int (*is_partially_uptodate)(struct page *, unsigned long , unsigned long ) ;
   void (*is_dirty_writeback)(struct page *, bool *, bool *) ;
   int (*error_remove_page)(struct address_space *, struct page *) ;
   int (*swap_activate)(struct swap_info_struct *, struct file *, sector_t *) ;
   void (*swap_deactivate)(struct file *) ;
};
#line 445  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct xarray i_pages ;
   gfp_t gfp_mask ;
   atomic_t i_mmap_writable ;
   atomic_t nr_thps ;
   struct rb_root_cached i_mmap ;
   struct rw_semaphore i_mmap_rwsem ;
   unsigned long nrpages ;
   unsigned long nrexceptional ;
   unsigned long writeback_index ;
   struct address_space_operations *a_ops ;
   unsigned long flags ;
   errseq_t wb_err ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   void *private_data ;
} __attribute__((__designated_init__, __aligned__(8)));
#line 473 
struct hd_struct;
#line 473 
struct gendisk;
#line 473  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   int bd_openers ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   struct mutex bd_mutex ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   bool bd_write_holder ;
   struct list_head bd_holder_disks ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   u8 bd_partno ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct request_queue *bd_queue ;
   struct backing_dev_info *bd_bdi ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
} __attribute__((__designated_init__));
#line 587 
struct posix_acl;
#line 614 
struct fsnotify_mark_connector;
#line 628 
struct inode_operations;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_418 {
   unsigned int i_nlink ;
   unsigned int __i_nlink ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_419 {
   struct hlist_head i_dentry ;
   struct callback_head i_rcu ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_420 {
   struct file_operations *i_fop ;
   void (*free_inode)(struct inode *) ;
};
#line 628 
struct file_lock_context;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_421 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
   char *i_link ;
   unsigned int i_dir_seq ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode {
   umode_t i_mode ;
   unsigned short i_opflags ;
   kuid_t i_uid ;
   kgid_t i_gid ;
   unsigned int i_flags ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   struct inode_operations *i_op ;
   struct super_block *i_sb ;
   struct address_space *i_mapping ;
   void *i_security ;
   unsigned long i_ino ;
   union __anonunion_418 __anonCompField_inode_63 ;
   dev_t i_rdev ;
   loff_t i_size ;
   struct timespec64 i_atime ;
   struct timespec64 i_mtime ;
   struct timespec64 i_ctime ;
   spinlock_t i_lock ;
   unsigned short i_bytes ;
   u8 i_blkbits ;
   u8 i_write_hint ;
   blkcnt_t i_blocks ;
   unsigned long i_state ;
   struct rw_semaphore i_rwsem ;
   unsigned long dirtied_when ;
   unsigned long dirtied_time_when ;
   struct hlist_node i_hash ;
   struct list_head i_io_list ;
   struct bdi_writeback *i_wb ;
   int i_wb_frn_winner ;
   u16 i_wb_frn_avg_time ;
   u16 i_wb_frn_history ;
   struct list_head i_lru ;
   struct list_head i_sb_list ;
   struct list_head i_wb_list ;
   union __anonunion_419 __anonCompField_inode_64 ;
   atomic64_t i_version ;
   atomic_t i_count ;
   atomic_t i_dio_count ;
   atomic_t i_writecount ;
   atomic_t i_readcount ;
   union __anonunion_420 __anonCompField_inode_65 ;
   struct file_lock_context *i_flctx ;
   struct address_space i_data ;
   struct list_head i_devices ;
   union __anonunion_421 __anonCompField_inode_66 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct fsnotify_mark_connector *i_fsnotify_marks ;
   struct fscrypt_info *i_crypt_info ;
   struct fsverity_info *i_verity_info ;
   void *i_private ;
} __attribute__((__designated_init__));
#line 904  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   kuid_t uid ;
   kuid_t euid ;
   int signum ;
};
#line 915  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_f_u_422 {
   struct llist_node fu_llist ;
   struct callback_head fu_rcuhead ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file {
   union __anonunion_f_u_422 f_u ;
   struct path f_path ;
   struct inode *f_inode ;
   struct file_operations *f_op ;
   spinlock_t f_lock ;
   enum rw_hint f_write_hint ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   struct mutex f_pos_lock ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct list_head f_tfile_llink ;
   struct address_space *f_mapping ;
   errseq_t f_wb_err ;
} __attribute__((__designated_init__, __aligned__(4)));
#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
typedef void *fl_owner_t;
#line 1026 
struct file_lock;
#line 1029  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock *, struct file_lock *) ;
   void (*fl_release_private)(struct file_lock *) ;
};
#line 1034  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct lock_manager_operations {
   fl_owner_t (*lm_get_owner)(fl_owner_t ) ;
   void (*lm_put_owner)(fl_owner_t ) ;
   void (*lm_notify)(struct file_lock *) ;
   int (*lm_grant)(struct file_lock *, int ) ;
   bool (*lm_break)(struct file_lock *) ;
   int (*lm_change)(struct file_lock *, int , struct list_head *) ;
   void (*lm_setup)(struct file_lock *, void **) ;
};
#line 1052 
struct net;
#line 1058 
struct nlm_lockowner;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 15 
struct nfs4_lock_state;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct;
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct __anonstruct_afs_424 {
   struct list_head link ;
   int state ;
   unsigned int debug_id ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_fl_u_423 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_424 afs ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock {
   struct file_lock *fl_blocker ;
   struct list_head fl_list ;
   struct hlist_node fl_link ;
   struct list_head fl_blocked_requests ;
   struct list_head fl_blocked_member ;
   fl_owner_t fl_owner ;
   unsigned int fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   int fl_link_cpu ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   unsigned long fl_downgrade_time ;
   struct file_lock_operations *fl_ops ;
   struct lock_manager_operations *fl_lmops ;
   union __anonunion_fl_u_423 fl_u ;
} __attribute__((__designated_init__));
#line 1117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_context {
   spinlock_t flc_lock ;
   struct list_head flc_flock ;
   struct list_head flc_posix ;
   struct list_head flc_lease ;
};
#line 1331  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct {
   rwlock_t fa_lock ;
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
   struct callback_head fa_rcu ;
};
#line 1418  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct sb_writers {
   int frozen ;
   wait_queue_head_t wait_unfrozen ;
   struct percpu_rw_semaphore rw_sem[3U] ;
};
#line 1424 
struct super_operations;
#line 1424 
struct xattr_handler;
#line 1424 
struct mtd_info;
#line 1424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations *s_op ;
   struct dquot_operations *dq_op ;
   struct quotactl_ops *s_qcop ;
   struct export_operations *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_iflags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   int s_count ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler **s_xattr ;
   struct fscrypt_operations *s_cop ;
   struct key *s_master_keys ;
   struct fsverity_operations *s_vop ;
   struct hlist_bl_head s_roots ;
   struct list_head s_mounts ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct hlist_node s_instances ;
   unsigned int s_quota_types ;
   struct quota_info s_dquot ;
   struct sb_writers s_writers ;
   void *s_fs_info ;
   u32 s_time_gran ;
   time64_t s_time_min ;
   time64_t s_time_max ;
   __u32 s_fsnotify_mask ;
   struct fsnotify_mark_connector *s_fsnotify_marks ;
   char s_id[32U] ;
   uuid_t s_uuid ;
   unsigned int s_max_links ;
   fmode_t s_mode ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   struct dentry_operations *s_d_op ;
   int cleancache_poolid ;
   struct shrinker s_shrink ;
   atomic_long_t s_remove_count ;
   atomic_long_t s_fsnotify_inode_refs ;
   int s_readonly_remount ;
   struct workqueue_struct *s_dio_done_wq ;
   struct hlist_head s_pins ;
   struct user_namespace *s_user_ns ;
   struct list_lru s_dentry_lru ;
   struct list_lru s_inode_lru ;
   struct callback_head rcu ;
   struct work_struct destroy_work ;
   struct mutex s_sync_lock ;
   int s_stack_depth ;
   spinlock_t s_inode_list_lock ;
   struct list_head s_inodes ;
   spinlock_t s_inode_wblist_lock ;
   struct list_head s_inodes_wb ;
} __attribute__((__designated_init__));
#line 1746  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1756 
struct dir_context;
#line 1767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct dir_context {
   int (*actor)(struct dir_context *, char *, int , loff_t , u64 , unsigned int ) ;
   loff_t pos ;
};
#line 1771 
struct block_device_operations;
#line 1821  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file *, loff_t , int ) ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*read_iter)(struct kiocb *, struct iov_iter *) ;
   ssize_t (*write_iter)(struct kiocb *, struct iov_iter *) ;
   int (*iopoll)(struct kiocb *, bool ) ;
   int (*iterate)(struct file *, struct dir_context *) ;
   int (*iterate_shared)(struct file *, struct dir_context *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   unsigned long mmap_supported_flags ;
   int (*open)(struct inode *, struct file *) ;
   int (*flush)(struct file *, fl_owner_t ) ;
   int (*release)(struct inode *, struct file *) ;
   int (*fsync)(struct file *, loff_t , loff_t , int ) ;
   int (*fasync)(int , struct file *, int ) ;
   int (*lock)(struct file *, int , struct file_lock *) ;
   ssize_t (*sendpage)(struct file *, struct page *, int , size_t , loff_t *, int ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*check_flags)(int ) ;
   int (*flock)(struct file *, int , struct file_lock *) ;
   ssize_t (*splice_write)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ) ;
   ssize_t (*splice_read)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*setlease)(struct file *, long , struct file_lock **, void **) ;
   long (*fallocate)(struct file *, int , loff_t , loff_t ) ;
   void (*show_fdinfo)(struct seq_file *, struct file *) ;
   ssize_t (*copy_file_range)(struct file *, loff_t , struct file *, loff_t , size_t , unsigned int ) ;
   loff_t (*remap_file_range)(struct file *, loff_t , struct file *, loff_t , loff_t , unsigned int ) ;
   int (*fadvise)(struct file *, loff_t , loff_t , int ) ;
} __attribute__((__designated_init__));
#line 1863  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode_operations {
   struct dentry *(*lookup)(struct inode *, struct dentry *, unsigned int ) ;
   char *(*get_link)(struct dentry *, struct inode *, struct delayed_call *) ;
   int (*permission)(struct inode *, int ) ;
   struct posix_acl *(*get_acl)(struct inode *, int ) ;
   int (*readlink)(struct dentry *, char *, int ) ;
   int (*create)(struct inode *, struct dentry *, umode_t , bool ) ;
   int (*link)(struct dentry *, struct inode *, struct dentry *) ;
   int (*unlink)(struct inode *, struct dentry *) ;
   int (*symlink)(struct inode *, struct dentry *, char *) ;
   int (*mkdir)(struct inode *, struct dentry *, umode_t ) ;
   int (*rmdir)(struct inode *, struct dentry *) ;
   int (*mknod)(struct inode *, struct dentry *, umode_t , dev_t ) ;
   int (*rename)(struct inode *, struct dentry *, struct inode *, struct dentry *, unsigned int ) ;
   int (*setattr)(struct dentry *, struct iattr *) ;
   int (*getattr)(struct path *, struct kstat *, u32 , unsigned int ) ;
   ssize_t (*listxattr)(struct dentry *, char *, size_t ) ;
   int (*fiemap)(struct inode *, struct fiemap_extent_info *, u64 , u64 ) ;
   int (*update_time)(struct inode *, struct timespec64 *, int ) ;
   int (*atomic_open)(struct inode *, struct dentry *, struct file *, unsigned int , umode_t ) ;
   int (*tmpfile)(struct inode *, struct dentry *, umode_t ) ;
   int (*set_acl)(struct inode *, struct posix_acl *, int ) ;
} __attribute__((__aligned__(64)));
#line 1942  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block *) ;
   void (*destroy_inode)(struct inode *) ;
   void (*free_inode)(struct inode *) ;
   void (*dirty_inode)(struct inode *, int ) ;
   int (*write_inode)(struct inode *, struct writeback_control *) ;
   int (*drop_inode)(struct inode *) ;
   void (*evict_inode)(struct inode *) ;
   void (*put_super)(struct super_block *) ;
   int (*sync_fs)(struct super_block *, int ) ;
   int (*freeze_super)(struct super_block *) ;
   int (*freeze_fs)(struct super_block *) ;
   int (*thaw_super)(struct super_block *) ;
   int (*unfreeze_fs)(struct super_block *) ;
   int (*statfs)(struct dentry *, struct kstatfs *) ;
   int (*remount_fs)(struct super_block *, int *, char *) ;
   void (*umount_begin)(struct super_block *) ;
   int (*show_options)(struct seq_file *, struct dentry *) ;
   int (*show_devname)(struct seq_file *, struct dentry *) ;
   int (*show_path)(struct seq_file *, struct dentry *) ;
   int (*show_stats)(struct seq_file *, struct dentry *) ;
   ssize_t (*quota_read)(struct super_block *, int , char *, size_t , loff_t ) ;
   ssize_t (*quota_write)(struct super_block *, int , char *, size_t , loff_t ) ;
   struct dquot **(*get_dquots)(struct inode *) ;
   int (*bdev_try_to_free_page)(struct super_block *, struct page *, gfp_t ) ;
   long (*nr_cached_objects)(struct super_block *, struct shrink_control *) ;
   long (*free_cached_objects)(struct super_block *, struct shrink_control *) ;
};
#line 2217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_system_type {
   char *name ;
   int fs_flags ;
   int (*init_fs_context)(struct fs_context *) ;
   struct fs_parameter_description *parameters ;
   struct dentry *(*mount)(struct file_system_type *, int , char *, void *) ;
   void (*kill_sb)(struct super_block *) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct hlist_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key s_vfs_rename_key ;
   struct lock_class_key s_writers_key[3U] ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
};
#line 3599 
struct sock;
#line 1565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct kvec;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bvec.h"
struct bio_vec {
   struct page *bv_page ;
   unsigned int bv_len ;
   unsigned int bv_offset ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bvec.h"
struct bvec_iter {
   sector_t bi_sector ;
   unsigned int bi_size ;
   unsigned int bi_idx ;
   unsigned int bi_bvec_done ;
};
#line 686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
struct scatterlist;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uio.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct kvec {
   void *iov_base ;
   size_t iov_len ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_438 {
   struct iovec *iov ;
   struct kvec *kvec ;
   struct bio_vec *bvec ;
   struct pipe_inode_info *pipe ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct __anonstruct_440 {
   unsigned int head ;
   unsigned int start_head ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_439 {
   unsigned long nr_segs ;
   struct __anonstruct_440 __anonCompField___anonunion_439_68 ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct iov_iter {
   unsigned int type ;
   size_t iov_offset ;
   size_t count ;
   union __anonunion_438 __anonCompField_iov_iter_67 ;
   union __anonunion_439 __anonCompField_iov_iter_69 ;
};
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
typedef unsigned short __kernel_sa_family_t;
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/socket.h"
struct socket;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
typedef __kernel_sa_family_t sa_family_t;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14U] ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct msghdr {
   void *msg_name ;
   int msg_namelen ;
   struct iov_iter msg_iter ;
   void *msg_control ;
   __kernel_size_t msg_controllen ;
   unsigned int msg_flags ;
   struct kiocb *msg_iocb ;
};
#line 422 
struct ns_common;
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
enum ldv_8880 {
    SS_FREE = 0,
    SS_UNCONNECTED = 1,
    SS_CONNECTING = 2,
    SS_CONNECTED = 3,
    SS_DISCONNECTING = 4
};
#line 209  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
typedef enum ldv_8880 socket_state;
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct socket_wq {
   wait_queue_head_t wait ;
   struct fasync_struct *fasync_list ;
   unsigned long flags ;
   struct callback_head rcu ;
} __attribute__((__aligned__(64)));
#line 112 
struct proto_ops;
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct socket {
   socket_state state ;
   short type ;
   unsigned long flags ;
   struct file *file ;
   struct sock *sk ;
   struct proto_ops *ops ;
   struct socket_wq wq ;
};
#line 125 
struct sk_buff;
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct proto_ops {
   int family ;
   struct module *owner ;
   int (*release)(struct socket *) ;
   int (*bind)(struct socket *, struct sockaddr *, int ) ;
   int (*connect)(struct socket *, struct sockaddr *, int , int ) ;
   int (*socketpair)(struct socket *, struct socket *) ;
   int (*accept)(struct socket *, struct socket *, int , bool ) ;
   int (*getname)(struct socket *, struct sockaddr *, int ) ;
   __poll_t (*poll)(struct file *, struct socket *, struct poll_table_struct *) ;
   int (*ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*compat_ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*gettstamp)(struct socket *, void *, bool , bool ) ;
   int (*listen)(struct socket *, int ) ;
   int (*shutdown)(struct socket *, int ) ;
   int (*setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*compat_setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*sendmsg)(struct socket *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct socket *, struct msghdr *, size_t , int ) ;
   int (*mmap)(struct file *, struct socket *, struct vm_area_struct *) ;
   ssize_t (*sendpage)(struct socket *, struct page *, int , size_t , int ) ;
   ssize_t (*splice_read)(struct socket *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*set_peek_off)(struct sock *, int ) ;
   int (*peek_len)(struct socket *) ;
   int (*read_sock)(struct sock *, read_descriptor_t *, int (*)(read_descriptor_t *, struct sk_buff *, unsigned int , size_t )) ;
   int (*sendpage_locked)(struct sock *, struct page *, int , size_t , int ) ;
   int (*sendmsg_locked)(struct sock *, struct msghdr *, size_t ) ;
   int (*set_rcvlowat)(struct sock *, int ) ;
};
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/checksum_64.h"
struct in6_addr;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct idr {
   struct xarray idr_rt ;
   unsigned int idr_base ;
   unsigned int idr_next ;
};
#line 323 
struct kernfs_open_node;
#line 324 
struct kernfs_iattrs;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_dir {
   unsigned long subdirs ;
   struct rb_root children ;
   struct kernfs_root *root ;
};
#line 96 
struct kernfs_node;
#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_symlink {
   struct kernfs_node *target_kn ;
};
#line 100 
struct kernfs_ops;
#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_attr {
   struct kernfs_ops *ops ;
   struct kernfs_open_node *open ;
   loff_t size ;
   struct kernfs_node *notify_next ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
union __anonunion_463 {
   struct kernfs_elem_dir dir ;
   struct kernfs_elem_symlink symlink ;
   struct kernfs_elem_attr attr ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_node {
   atomic_t count ;
   atomic_t active ;
   struct lockdep_map dep_map ;
   struct kernfs_node *parent ;
   char *name ;
   struct rb_node rb ;
   void *ns ;
   unsigned int hash ;
   union __anonunion_463 __anonCompField_kernfs_node_72 ;
   void *priv ;
   u64 id ;
   unsigned short flags ;
   umode_t mode ;
   struct kernfs_iattrs *iattr ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_syscall_ops {
   int (*show_options)(struct seq_file *, struct kernfs_root *) ;
   int (*mkdir)(struct kernfs_node *, char *, umode_t ) ;
   int (*rmdir)(struct kernfs_node *) ;
   int (*rename)(struct kernfs_node *, struct kernfs_node *, char *) ;
   int (*show_path)(struct seq_file *, struct kernfs_node *, struct kernfs_root *) ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root {
   struct kernfs_node *kn ;
   unsigned int flags ;
   struct idr ino_idr ;
   u32 last_id_lowbits ;
   u32 id_highbits ;
   struct kernfs_syscall_ops *syscall_ops ;
   struct list_head supers ;
   wait_queue_head_t deactivate_waitq ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_open_file {
   struct kernfs_node *kn ;
   struct file *file ;
   struct seq_file *seq_file ;
   void *priv ;
   struct mutex mutex ;
   struct mutex prealloc_mutex ;
   int event ;
   struct list_head list ;
   char *prealloc_buf ;
   size_t atomic_write_len ;
   bool mmapped : 1 ;
   bool released : 1 ;
   struct vm_operations_struct *vm_ops ;
};
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_ops {
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   ssize_t (*read)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   size_t atomic_write_len ;
   bool prealloc ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   int (*mmap)(struct kernfs_open_file *, struct vm_area_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 595 
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
};
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject_ns.h"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   bool (*current_may_mount)(void) ;
   void *(*grab_current_ns)(void) ;
   void *(*netlink_ns)(struct sock *) ;
   void *(*initial_ns)(void) ;
   void (*drop_ns)(void *) ;
};
#line 58 
struct bin_attribute;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute {
   char *name ;
   umode_t mode ;
   bool ignore_lockdep : 1 ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute_group {
   char *name ;
   umode_t (*is_visible)(struct kobject *, struct attribute *, int ) ;
   umode_t (*is_bin_visible)(struct kobject *, struct bin_attribute *, int ) ;
   struct attribute **attrs ;
   struct bin_attribute **bin_attrs ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   ssize_t (*write)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   int (*mmap)(struct file *, struct kobject *, struct bin_attribute *, struct vm_area_struct *) ;
};
#line 223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject *, struct attribute *, char *) ;
   ssize_t (*store)(struct kobject *, struct attribute *, char *, size_t ) ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kref.h"
struct kref {
   refcount_t refcount ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset;
#line 65 
struct kobj_type;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobject {
   char *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct kernfs_node *sd ;
   struct kref kref ;
   struct delayed_work release ;
   unsigned int state_initialized : 1 ;
   unsigned int state_in_sysfs : 1 ;
   unsigned int state_add_uevent_sent : 1 ;
   unsigned int state_remove_uevent_sent : 1 ;
   unsigned int uevent_suppress : 1 ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject *) ;
   struct sysfs_ops *sysfs_ops ;
   struct attribute **default_attrs ;
   struct attribute_group **default_groups ;
   struct kobj_ns_type_operations *(*child_ns_type)(struct kobject *) ;
   void *(*namespace)(struct kobject *) ;
   void (*get_ownership)(struct kobject *, kuid_t *, kgid_t *) ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_uevent_env {
   char *argv[3U] ;
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset_uevent_ops {
   int (*filter)(struct kset *, struct kobject *) ;
   char *(*name)(struct kset *, struct kobject *) ;
   int (*uevent)(struct kset *, struct kobject *, struct kobj_uevent_env *) ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops *uevent_ops ;
} __attribute__((__designated_init__));
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device *) ;
   void (*complete)(struct device *) ;
   int (*suspend)(struct device *) ;
   int (*resume)(struct device *) ;
   int (*freeze)(struct device *) ;
   int (*thaw)(struct device *) ;
   int (*poweroff)(struct device *) ;
   int (*restore)(struct device *) ;
   int (*suspend_late)(struct device *) ;
   int (*resume_early)(struct device *) ;
   int (*freeze_late)(struct device *) ;
   int (*thaw_early)(struct device *) ;
   int (*poweroff_late)(struct device *) ;
   int (*restore_early)(struct device *) ;
   int (*suspend_noirq)(struct device *) ;
   int (*resume_noirq)(struct device *) ;
   int (*freeze_noirq)(struct device *) ;
   int (*thaw_noirq)(struct device *) ;
   int (*poweroff_noirq)(struct device *) ;
   int (*restore_noirq)(struct device *) ;
   int (*runtime_suspend)(struct device *) ;
   int (*runtime_resume)(struct device *) ;
   int (*runtime_idle)(struct device *) ;
};
#line 303 
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
};
#line 310 
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
};
#line 318 
struct wakeup_source;
#line 319 
struct wake_irq;
#line 320 
struct pm_domain_data;
#line 530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_subsys_data {
   spinlock_t lock ;
   unsigned int refcount ;
   struct list_head clock_list ;
   struct pm_domain_data *domain_data ;
};
#line 573 
struct dev_pm_qos;
#line 573  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned int can_wakeup : 1 ;
   unsigned int async_suspend : 1 ;
   bool in_dpm_list : 1 ;
   bool is_prepared : 1 ;
   bool is_suspended : 1 ;
   bool is_noirq_suspended : 1 ;
   bool is_late_suspended : 1 ;
   bool no_pm : 1 ;
   bool early_init : 1 ;
   bool direct_complete : 1 ;
   u32 driver_flags ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   bool wakeup_path : 1 ;
   bool syscore : 1 ;
   bool no_pm_callbacks : 1 ;
   unsigned int must_resume : 1 ;
   unsigned int may_skip_resume : 1 ;
   struct hrtimer suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   struct wake_irq *wakeirq ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned int disable_depth : 3 ;
   unsigned int idle_notification : 1 ;
   unsigned int request_pending : 1 ;
   unsigned int deferred_resume : 1 ;
   unsigned int runtime_auto : 1 ;
   bool ignore_children : 1 ;
   unsigned int no_callbacks : 1 ;
   unsigned int irq_safe : 1 ;
   unsigned int use_autosuspend : 1 ;
   unsigned int timer_autosuspends : 1 ;
   unsigned int memalloc_noio : 1 ;
   unsigned int links_count ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   u64 last_busy ;
   u64 active_time ;
   u64 suspended_time ;
   u64 accounting_timestamp ;
   struct pm_subsys_data *subsys_data ;
   void (*set_latency_tolerance)(struct device *, s32 ) ;
   struct dev_pm_qos *qos ;
};
#line 650  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_domain {
   struct dev_pm_ops ops ;
   int (*start)(struct device *) ;
   void (*detach)(struct device *, bool ) ;
   int (*activate)(struct device *) ;
   void (*sync)(struct device *) ;
   void (*dismiss)(struct device *) ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ratelimit.h"
struct ratelimit_state {
   raw_spinlock_t lock ;
   int interval ;
   int burst ;
   int printed ;
   int missed ;
   unsigned long begin ;
   unsigned long flags ;
};
#line 5  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/device.h"
struct dev_archdata {
   void *iommu ;
};
#line 12 
struct dma_map_ops;
#line 23 
struct device_driver;
#line 24 
struct driver_private;
#line 25 
struct class;
#line 26 
struct subsys_private;
#line 27 
struct bus_type;
#line 28 
struct iommu_ops;
#line 29 
struct iommu_group;
#line 30 
struct iommu_fwspec;
#line 31 
struct dev_pin_info;
#line 32 
struct iommu_param;
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct bus_type {
   char *name ;
   char *dev_name ;
   struct device *dev_root ;
   struct attribute_group **bus_groups ;
   struct attribute_group **dev_groups ;
   struct attribute_group **drv_groups ;
   int (*match)(struct device *, struct device_driver *) ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*online)(struct device *) ;
   int (*offline)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   int (*num_vf)(struct device *) ;
   int (*dma_configure)(struct device *) ;
   struct dev_pm_ops *pm ;
   struct iommu_ops *iommu_ops ;
   struct subsys_private *p ;
   struct lock_class_key lock_key ;
   bool need_parent_lock ;
};
#line 164 
struct device_type;
#line 309 
enum probe_type {
    PROBE_DEFAULT_STRATEGY = 0,
    PROBE_PREFER_ASYNCHRONOUS = 1,
    PROBE_FORCE_SYNCHRONOUS = 2
};
#line 383 
struct of_device_id;
#line 383 
struct acpi_device_id;
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_driver {
   char *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char *mod_name ;
   bool suppress_bind_attrs ;
   enum probe_type probe_type ;
   struct of_device_id *of_match_table ;
   struct acpi_device_id *acpi_match_table ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   struct attribute_group **groups ;
   struct attribute_group **dev_groups ;
   struct dev_pm_ops *pm ;
   void (*coredump)(struct device *) ;
   struct driver_private *p ;
};
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct class {
   char *name ;
   struct module *owner ;
   struct attribute_group **class_groups ;
   struct attribute_group **dev_groups ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *) ;
   void (*class_release)(struct class *) ;
   void (*dev_release)(struct device *) ;
   int (*shutdown_pre)(struct device *) ;
   struct kobj_ns_type_operations *ns_type ;
   void *(*namespace)(struct device *) ;
   void (*get_ownership)(struct device *, kuid_t *, kgid_t *) ;
   struct dev_pm_ops *pm ;
   struct subsys_private *p ;
};
#line 809  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_type {
   char *name ;
   struct attribute_group **groups ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *, kuid_t *, kgid_t *) ;
   void (*release)(struct device *) ;
   struct dev_pm_ops *pm ;
};
#line 1008  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 1139 
enum dl_dev_state {
    DL_DEV_NO_DRIVER = 0,
    DL_DEV_PROBING = 1,
    DL_DEV_DRIVER_BOUND = 2,
    DL_DEV_UNBINDING = 3
};
#line 1164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct dev_links_info {
   struct list_head suppliers ;
   struct list_head consumers ;
   struct list_head needs_suppliers ;
   struct list_head defer_sync ;
   bool need_for_probe ;
   enum dl_dev_state status ;
};
#line 1259 
struct dma_coherent_mem;
#line 1259 
struct cma;
#line 1259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device {
   struct kobject kobj ;
   struct device *parent ;
   struct device_private *p ;
   char *init_name ;
   struct device_type *type ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   void *driver_data ;
   struct mutex lockdep_mutex ;
   struct mutex mutex ;
   struct dev_links_info links ;
   struct dev_pm_info power ;
   struct dev_pm_domain *pm_domain ;
   struct irq_domain *msi_domain ;
   struct dev_pin_info *pins ;
   struct list_head msi_list ;
   struct dma_map_ops *dma_ops ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   u64 bus_dma_limit ;
   unsigned long dma_pfn_offset ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct cma *cma_area ;
   struct dev_archdata archdata ;
   struct device_node *of_node ;
   struct fwnode_handle *fwnode ;
   int numa_node ;
   dev_t devt ;
   u32 id ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct class *class ;
   struct attribute_group **groups ;
   void (*release)(struct device *) ;
   struct iommu_group *iommu_group ;
   struct iommu_fwspec *iommu_fwspec ;
   struct iommu_param *iommu_param ;
   bool offline_disabled : 1 ;
   bool offline : 1 ;
   bool of_node_reused : 1 ;
   bool state_synced : 1 ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_wakeup.h"
struct wakeup_source {
   char *name ;
   int id ;
   struct list_head entry ;
   spinlock_t lock ;
   struct wake_irq *wakeirq ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   ktime_t start_prevent_time ;
   ktime_t prevent_sleep_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long expire_count ;
   unsigned long wakeup_count ;
   struct device *dev ;
   bool active : 1 ;
   bool autosleep_enabled : 1 ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct scatterlist {
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct sg_table {
   struct scatterlist *sgl ;
   unsigned int nents ;
   unsigned int orig_nents ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
struct dma_map_ops {
   void *(*alloc)(struct device *, size_t , dma_addr_t *, gfp_t , unsigned long ) ;
   void (*free)(struct device *, size_t , void *, dma_addr_t , unsigned long ) ;
   int (*mmap)(struct device *, struct vm_area_struct *, void *, dma_addr_t , size_t , unsigned long ) ;
   int (*get_sgtable)(struct device *, struct sg_table *, void *, dma_addr_t , size_t , unsigned long ) ;
   dma_addr_t (*map_page)(struct device *, struct page *, unsigned long , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_page)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   int (*map_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   void (*unmap_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   dma_addr_t (*map_resource)(struct device *, phys_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_resource)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*sync_single_for_cpu)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_single_for_device)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_sg_for_cpu)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*sync_sg_for_device)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*cache_sync)(struct device *, void *, size_t , enum dma_data_direction ) ;
   int (*dma_supported)(struct device *, u64 ) ;
   u64 (*get_required_mask)(struct device *) ;
   size_t (*max_mapping_size)(struct device *) ;
   unsigned long (*get_merge_boundary)(struct device *) ;
};
#line 803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
typedef u64 netdev_features_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
union __anonunion_in6_u_466 {
   __u8 u6_addr8[16U] ;
   __be16 u6_addr16[8U] ;
   __be32 u6_addr32[4U] ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
struct in6_addr {
   union __anonunion_in6_u_466 in6_u ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
struct __anonstruct_siphash_key_t_467 {
   u64 key[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
typedef struct __anonstruct_siphash_key_t_467 siphash_key_t;
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_ether.h"
struct ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_proto ;
} __attribute__((__packed__));
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buffer {
   struct page *page ;
   unsigned int offset ;
   unsigned int len ;
   struct pipe_buf_operations *ops ;
   unsigned int flags ;
   unsigned long private ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_inode_info {
   struct mutex mutex ;
   wait_queue_head_t wait ;
   unsigned int head ;
   unsigned int tail ;
   unsigned int max_usage ;
   unsigned int ring_size ;
   unsigned int readers ;
   unsigned int writers ;
   unsigned int files ;
   unsigned int r_counter ;
   unsigned int w_counter ;
   struct page *tmp_page ;
   struct fasync_struct *fasync_readers ;
   struct fasync_struct *fasync_writers ;
   struct pipe_buffer *bufs ;
   struct user_struct *user ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations {
   int (*confirm)(struct pipe_inode_info *, struct pipe_buffer *) ;
   void (*release)(struct pipe_inode_info *, struct pipe_buffer *) ;
   int (*steal)(struct pipe_inode_info *, struct pipe_buffer *) ;
   bool (*get)(struct pipe_inode_info *, struct pipe_buffer *) ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi_tunnel {
   __be64 tun_id ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi_common {
   int flowic_oif ;
   int flowic_iif ;
   __u32 flowic_mark ;
   __u8 flowic_tos ;
   __u8 flowic_scope ;
   __u8 flowic_proto ;
   __u8 flowic_flags ;
   __u32 flowic_secid ;
   kuid_t flowic_uid ;
   struct flowi_tunnel flowic_tun_key ;
   __u32 flowic_multipath_hash ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_ports_478 {
   __be16 dport ;
   __be16 sport ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_icmpt_479 {
   __u8 type ;
   __u8 code ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_dnports_480 {
   __le16 dport ;
   __le16 sport ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_mht_481 {
   __u8 type ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
union flowi_uli {
   struct __anonstruct_ports_478 ports ;
   struct __anonstruct_icmpt_479 icmpt ;
   struct __anonstruct_dnports_480 dnports ;
   __be32 spi ;
   __be32 gre_key ;
   struct __anonstruct_mht_481 mht ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi4 {
   struct flowi_common __fl_common ;
   __be32 saddr ;
   __be32 daddr ;
   union flowi_uli uli ;
} __attribute__((__aligned__(8)));
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi6 {
   struct flowi_common __fl_common ;
   struct in6_addr daddr ;
   struct in6_addr saddr ;
   __be32 flowlabel ;
   union flowi_uli uli ;
   __u32 mp_hash ;
} __attribute__((__aligned__(8)));
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowidn {
   struct flowi_common __fl_common ;
   __le16 daddr ;
   __le16 saddr ;
   union flowi_uli uli ;
} __attribute__((__aligned__(8)));
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
union __anonunion_u_482 {
   struct flowi_common __fl_common ;
   struct flowi4 ip4 ;
   struct flowi6 ip6 ;
   struct flowidn dn ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi {
   union __anonunion_u_482 u ;
} __attribute__((__aligned__(8)));
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netfilter/nf_conntrack_common.h"
struct ip_conntrack_stat {
   unsigned int found ;
   unsigned int invalid ;
   unsigned int ignore ;
   unsigned int insert ;
   unsigned int insert_failed ;
   unsigned int drop ;
   unsigned int early_drop ;
   unsigned int error ;
   unsigned int expect_new ;
   unsigned int expect_create ;
   unsigned int expect_delete ;
   unsigned int search_restart ;
};
#line 42 
struct bpf_prog;
#line 43 
union bpf_attr;
#line 44 
struct skb_ext;
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 562  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
typedef unsigned int sk_buff_data_t;
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_489 {
   struct net_device *dev ;
   unsigned long dev_scratch ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_488 {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   union __anonunion_489 __anonCompField___anonstruct_488_85 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_487 {
   struct __anonstruct_488 __anonCompField___anonunion_487_86 ;
   struct rb_node rbnode ;
   struct list_head list ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_490 {
   struct sock *sk ;
   int ip_defrag_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_491 {
   ktime_t tstamp ;
   u64 skb_mstamp_ns ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_493 {
   unsigned long _skb_refdst ;
   void (*destructor)(struct sk_buff *) ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_492 {
   struct __anonstruct_493 __anonCompField___anonunion_492_90 ;
   struct list_head tcp_tsorted_anchor ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_495 {
   __u16 csum_start ;
   __u16 csum_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_494 {
   __wsum csum ;
   struct __anonstruct_495 __anonCompField___anonunion_494_92 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_496 {
   unsigned int napi_id ;
   unsigned int sender_cpu ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_497 {
   __u32 mark ;
   __u32 reserved_tailroom ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_498 {
   __be16 inner_protocol ;
   __u8 inner_ipproto ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff {
   union __anonunion_487 __anonCompField_sk_buff_87 ;
   union __anonunion_490 __anonCompField_sk_buff_88 ;
   union __anonunion_491 __anonCompField_sk_buff_89 ;
   char cb[48U] ;
   union __anonunion_492 __anonCompField_sk_buff_91 ;
   unsigned long _nfct ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   __u16 queue_mapping ;
   __u8 __cloned_offset[0U] ;
   __u8 cloned : 1 ;
   __u8 nohdr : 1 ;
   __u8 fclone : 2 ;
   __u8 peeked : 1 ;
   __u8 head_frag : 1 ;
   __u8 pfmemalloc : 1 ;
   __u8 active_extensions ;
   __u32 headers_start[0U] ;
   __u8 __pkt_type_offset[0U] ;
   __u8 pkt_type : 3 ;
   __u8 ignore_df : 1 ;
   __u8 nf_trace : 1 ;
   __u8 ip_summed : 2 ;
   __u8 ooo_okay : 1 ;
   __u8 l4_hash : 1 ;
   __u8 sw_hash : 1 ;
   __u8 wifi_acked_valid : 1 ;
   __u8 wifi_acked : 1 ;
   __u8 no_fcs : 1 ;
   __u8 encapsulation : 1 ;
   __u8 encap_hdr_csum : 1 ;
   __u8 csum_valid : 1 ;
   __u8 __pkt_vlan_present_offset[0U] ;
   __u8 vlan_present : 1 ;
   __u8 csum_complete_sw : 1 ;
   __u8 csum_level : 2 ;
   __u8 csum_not_inet : 1 ;
   __u8 dst_pending_confirm : 1 ;
   __u8 ndisc_nodetype : 2 ;
   __u8 ipvs_property : 1 ;
   __u8 inner_protocol_type : 1 ;
   __u8 remcsum_offload : 1 ;
   __u8 offload_fwd_mark : 1 ;
   __u8 offload_l3_fwd_mark : 1 ;
   __u8 tc_skip_classify : 1 ;
   __u8 tc_at_ingress : 1 ;
   __u8 tc_redirected : 1 ;
   __u8 tc_from_ingress : 1 ;
   __u8 decrypted : 1 ;
   __u16 tc_index ;
   union __anonunion_494 __anonCompField_sk_buff_93 ;
   __u32 priority ;
   int skb_iif ;
   __u32 hash ;
   __be16 vlan_proto ;
   __u16 vlan_tci ;
   union __anonunion_496 __anonCompField_sk_buff_94 ;
   __u32 secmark ;
   union __anonunion_497 __anonCompField_sk_buff_95 ;
   union __anonunion_498 __anonCompField_sk_buff_96 ;
   __u16 inner_transport_header ;
   __u16 inner_network_header ;
   __u16 inner_mac_header ;
   __be16 protocol ;
   __u16 transport_header ;
   __u16 network_header ;
   __u16 mac_header ;
   __u32 headers_end[0U] ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   refcount_t users ;
   struct skb_ext *extensions ;
};
#line 920 
struct dst_entry;
#line 4108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_ext {
   refcount_t refcnt ;
   u8 offset[3U] ;
   u8 chunks ;
   char data[0U] ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
struct dql {
   unsigned int num_queued ;
   unsigned int adj_limit ;
   unsigned int last_obj_cnt ;
   unsigned int limit ;
   unsigned int num_completed ;
   unsigned int prev_ovlimit ;
   unsigned int prev_num_queued ;
   unsigned int prev_last_obj_cnt ;
   unsigned int lowest_slack ;
   unsigned long slack_start_time ;
   unsigned int max_limit ;
   unsigned int min_limit ;
   unsigned int slack_hold_time ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
struct __anonstruct_sync_serial_settings_528 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
typedef struct __anonstruct_sync_serial_settings_528 sync_serial_settings;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_te1_settings_529 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_te1_settings_529 te1_settings;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_raw_hdlc_proto_530 {
   unsigned short encoding ;
   unsigned short parity ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_raw_hdlc_proto_530 raw_hdlc_proto;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_531 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_531 fr_proto;
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_532 {
   unsigned int dlci ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_532 fr_proto_pvc;
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_info_533 {
   unsigned int dlci ;
   char master[16U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_info_533 fr_proto_pvc_info;
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_cisco_proto_534 {
   unsigned int interval ;
   unsigned int timeout ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_cisco_proto_534 cisco_proto;
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifs_ifsu_535 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_535 ifs_ifsu ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifrn_536 {
   char ifrn_name[16U] ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifru_537 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16U] ;
   char ifru_newname[16U] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifreq {
   union __anonunion_ifr_ifrn_536 ifr_ifrn ;
   union __anonunion_ifr_ifru_537 ifr_ifru ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef s32 compat_long_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef u32 compat_uptr_t;
#line 367  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list {
   compat_uptr_t next ;
};
#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list_head {
   struct compat_robust_list list ;
   compat_long_t futex_offset ;
   compat_uptr_t list_op_pending ;
};
#line 177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_drvinfo {
   __u32 cmd ;
   char driver[32U] ;
   char version[32U] ;
   char fw_version[32U] ;
   char bus_info[32U] ;
   char erom_version[32U] ;
   char reserved2[12U] ;
   __u32 n_priv_flags ;
   __u32 n_stats ;
   __u32 testinfo_len ;
   __u32 eedump_len ;
   __u32 regdump_len ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_wolinfo {
   __u32 cmd ;
   __u32 supported ;
   __u32 wolopts ;
   __u8 sopass[6U] ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tunable {
   __u32 cmd ;
   __u32 id ;
   __u32 type_id ;
   __u32 len ;
   void *data[0U] ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_regs {
   __u32 cmd ;
   __u32 version ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eeprom {
   __u32 cmd ;
   __u32 magic ;
   __u32 offset ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eee {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertised ;
   __u32 lp_advertised ;
   __u32 eee_active ;
   __u32 eee_enabled ;
   __u32 tx_lpi_enabled ;
   __u32 tx_lpi_timer ;
   __u32 reserved[2U] ;
};
#line 382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_modinfo {
   __u32 cmd ;
   __u32 type ;
   __u32 eeprom_len ;
   __u32 reserved[8U] ;
};
#line 462  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_coalesce {
   __u32 cmd ;
   __u32 rx_coalesce_usecs ;
   __u32 rx_max_coalesced_frames ;
   __u32 rx_coalesce_usecs_irq ;
   __u32 rx_max_coalesced_frames_irq ;
   __u32 tx_coalesce_usecs ;
   __u32 tx_max_coalesced_frames ;
   __u32 tx_coalesce_usecs_irq ;
   __u32 tx_max_coalesced_frames_irq ;
   __u32 stats_block_coalesce_usecs ;
   __u32 use_adaptive_rx_coalesce ;
   __u32 use_adaptive_tx_coalesce ;
   __u32 pkt_rate_low ;
   __u32 rx_coalesce_usecs_low ;
   __u32 rx_max_coalesced_frames_low ;
   __u32 tx_coalesce_usecs_low ;
   __u32 tx_max_coalesced_frames_low ;
   __u32 pkt_rate_high ;
   __u32 rx_coalesce_usecs_high ;
   __u32 rx_max_coalesced_frames_high ;
   __u32 tx_coalesce_usecs_high ;
   __u32 tx_max_coalesced_frames_high ;
   __u32 rate_sample_interval ;
};
#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ringparam {
   __u32 cmd ;
   __u32 rx_max_pending ;
   __u32 rx_mini_max_pending ;
   __u32 rx_jumbo_max_pending ;
   __u32 tx_max_pending ;
   __u32 rx_pending ;
   __u32 rx_mini_pending ;
   __u32 rx_jumbo_pending ;
   __u32 tx_pending ;
};
#line 541  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_channels {
   __u32 cmd ;
   __u32 max_rx ;
   __u32 max_tx ;
   __u32 max_other ;
   __u32 max_combined ;
   __u32 rx_count ;
   __u32 tx_count ;
   __u32 other_count ;
   __u32 combined_count ;
};
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_pauseparam {
   __u32 cmd ;
   __u32 autoneg ;
   __u32 rx_pause ;
   __u32 tx_pause ;
};
#line 683  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_test {
   __u32 cmd ;
   __u32 flags ;
   __u32 reserved ;
   __u32 len ;
   __u64 data[0U] ;
};
#line 702  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_stats {
   __u32 cmd ;
   __u32 n_stats ;
   __u64 data[0U] ;
};
#line 758  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tos ;
};
#line 775  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 spi ;
   __u8 tos ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 l4_4_bytes ;
   __u8 tos ;
   __u8 ip_ver ;
   __u8 proto ;
};
#line 812  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tclass ;
};
#line 829  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 spi ;
   __u8 tclass ;
};
#line 844  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 l4_4_bytes ;
   __u8 tclass ;
   __u8 l4_proto ;
};
#line 852  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union ethtool_flow_union {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   struct ethtool_tcpip6_spec tcp_ip6_spec ;
   struct ethtool_tcpip6_spec udp_ip6_spec ;
   struct ethtool_tcpip6_spec sctp_ip6_spec ;
   struct ethtool_ah_espip6_spec ah_ip6_spec ;
   struct ethtool_ah_espip6_spec esp_ip6_spec ;
   struct ethtool_usrip6_spec usr_ip6_spec ;
   struct ethhdr ether_spec ;
   __u8 hdata[52U] ;
};
#line 880  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flow_ext {
   __u8 padding[2U] ;
   unsigned char h_dest[6U] ;
   __be16 vlan_etype ;
   __be16 vlan_tci ;
   __be32 data[2U] ;
};
#line 905  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rx_flow_spec {
   __u32 flow_type ;
   union ethtool_flow_union h_u ;
   struct ethtool_flow_ext h_ext ;
   union ethtool_flow_union m_u ;
   struct ethtool_flow_ext m_ext ;
   __u64 ring_cookie ;
   __u32 location ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union __anonunion_556 {
   __u32 rule_cnt ;
   __u32 rss_context ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rxnfc {
   __u32 cmd ;
   __u32 flow_type ;
   __u64 data ;
   struct ethtool_rx_flow_spec fs ;
   union __anonunion_556 __anonCompField_ethtool_rxnfc_99 ;
   __u32 rule_locs[0U] ;
};
#line 1130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flash {
   __u32 cmd ;
   __u32 region ;
   char data[128U] ;
};
#line 1150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_dump {
   __u32 cmd ;
   __u32 version ;
   __u32 flag ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 1230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ts_info {
   __u32 cmd ;
   __u32 so_timestamping ;
   __s32 phc_index ;
   __u32 tx_types ;
   __u32 tx_reserved[3U] ;
   __u32 rx_filters ;
   __u32 rx_reserved[3U] ;
};
#line 1302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_fecparam {
   __u32 cmd ;
   __u32 active_fec ;
   __u32 fec ;
   __u32 reserved ;
};
#line 1876  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_link_settings {
   __u32 cmd ;
   __u32 speed ;
   __u8 duplex ;
   __u8 port ;
   __u8 phy_address ;
   __u8 autoneg ;
   __u8 mdio_support ;
   __u8 eth_tp_mdix ;
   __u8 eth_tp_mdix_ctrl ;
   __s8 link_mode_masks_nwords ;
   __u8 transceiver ;
   __u8 reserved1[3U] ;
   __u32 reserved[7U] ;
   __u32 link_mode_masks[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
enum ethtool_phys_id_state {
    ETHTOOL_ID_INACTIVE = 0,
    ETHTOOL_ID_ACTIVE = 1,
    ETHTOOL_ID_ON = 2,
    ETHTOOL_ID_OFF = 3
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct __anonstruct_link_modes_559 {
   unsigned long supported[2U] ;
   unsigned long advertising[2U] ;
   unsigned long lp_advertising[2U] ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_link_ksettings {
   struct ethtool_link_settings base ;
   struct __anonstruct_link_modes_559 link_modes ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_ops {
   void (*get_drvinfo)(struct net_device *, struct ethtool_drvinfo *) ;
   int (*get_regs_len)(struct net_device *) ;
   void (*get_regs)(struct net_device *, struct ethtool_regs *, void *) ;
   void (*get_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   int (*set_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   u32 (*get_msglevel)(struct net_device *) ;
   void (*set_msglevel)(struct net_device *, u32 ) ;
   int (*nway_reset)(struct net_device *) ;
   u32 (*get_link)(struct net_device *) ;
   int (*get_eeprom_len)(struct net_device *) ;
   int (*get_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*set_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   int (*set_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   void (*get_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   int (*set_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   void (*get_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   int (*set_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   void (*self_test)(struct net_device *, struct ethtool_test *, u64 *) ;
   void (*get_strings)(struct net_device *, u32 , u8 *) ;
   int (*set_phys_id)(struct net_device *, enum ethtool_phys_id_state ) ;
   void (*get_ethtool_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
   int (*begin)(struct net_device *) ;
   void (*complete)(struct net_device *) ;
   u32 (*get_priv_flags)(struct net_device *) ;
   int (*set_priv_flags)(struct net_device *, u32 ) ;
   int (*get_sset_count)(struct net_device *, int ) ;
   int (*get_rxnfc)(struct net_device *, struct ethtool_rxnfc *, u32 *) ;
   int (*set_rxnfc)(struct net_device *, struct ethtool_rxnfc *) ;
   int (*flash_device)(struct net_device *, struct ethtool_flash *) ;
   int (*reset)(struct net_device *, u32 *) ;
   u32 (*get_rxfh_key_size)(struct net_device *) ;
   u32 (*get_rxfh_indir_size)(struct net_device *) ;
   int (*get_rxfh)(struct net_device *, u32 *, u8 *, u8 *) ;
   int (*set_rxfh)(struct net_device *, u32 *, u8 *, u8 ) ;
   int (*get_rxfh_context)(struct net_device *, u32 *, u8 *, u8 *, u32 ) ;
   int (*set_rxfh_context)(struct net_device *, u32 *, u8 *, u8 , u32 *, bool ) ;
   void (*get_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*set_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*get_dump_flag)(struct net_device *, struct ethtool_dump *) ;
   int (*get_dump_data)(struct net_device *, struct ethtool_dump *, void *) ;
   int (*set_dump)(struct net_device *, struct ethtool_dump *) ;
   int (*get_ts_info)(struct net_device *, struct ethtool_ts_info *) ;
   int (*get_module_info)(struct net_device *, struct ethtool_modinfo *) ;
   int (*get_module_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*set_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*get_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*set_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*get_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*set_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*get_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*set_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*get_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   int (*set_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   void (*get_ethtool_phy_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
};
#line 822  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sysctl.h"
struct ctl_table_root;
#line 823 
struct ctl_table_header;
#line 824 
struct ctl_dir;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
typedef int proc_handler(struct ctl_table *, int , void *, size_t *, loff_t *);
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_poll {
   atomic_t event ;
   wait_queue_head_t wait ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table {
   char *procname ;
   void *data ;
   int maxlen ;
   umode_t mode ;
   struct ctl_table *child ;
   proc_handler *proc_handler ;
   struct ctl_table_poll *poll ;
   void *extra1 ;
   void *extra2 ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_node {
   struct rb_node node ;
   struct ctl_table_header *header ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct __anonstruct_561 {
   struct ctl_table *ctl_table ;
   int used ;
   int count ;
   int nreg ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
union __anonunion_560 {
   struct __anonstruct_561 __anonCompField___anonunion_560_100 ;
   struct callback_head rcu ;
};
#line 142 
struct ctl_table_set;
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_header {
   union __anonunion_560 __anonCompField_ctl_table_header_101 ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_dir *parent ;
   struct ctl_node *node ;
   struct hlist_head inodes ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_dir {
   struct ctl_table_header header ;
   struct rb_root root ;
};
#line 167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_set {
   int (*is_seen)(struct ctl_table_set *) ;
   struct ctl_dir dir ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_root {
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root *) ;
   void (*set_ownership)(struct ctl_table_header *, struct ctl_table *, kuid_t *, kgid_t *) ;
   int (*permissions)(struct ctl_table_header *, struct ctl_table *) ;
};
#line 242 
struct prot_inuse;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/core.h"
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   int *sock_inuse ;
   struct prot_inuse *prot_inuse ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct u64_stats_sync {
   };
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct __anonstruct_local_t_562 {
   atomic_long_t a ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
typedef struct __anonstruct_local_t_562 local_t;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
struct __anonstruct_local64_t_563 {
   local_t a ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
typedef struct __anonstruct_local64_t_563 local64_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
struct __anonstruct_u64_stats_t_564 {
   local64_t v ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
typedef struct __anonstruct_u64_stats_t_564 u64_stats_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct ipstats_mib {
   u64 mibs[37U] ;
   struct u64_stats_sync syncp ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmp_mib {
   unsigned long mibs[28U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpmsg_mib {
   atomic_long_t mibs[512U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6_mib {
   unsigned long mibs[6U] ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6msg_mib {
   atomic_long_t mibs[512U] ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct tcp_mib {
   unsigned long mibs[16U] ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct udp_mib {
   unsigned long mibs[9U] ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_mib {
   unsigned long mibs[120U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_xfrm_mib {
   unsigned long mibs[29U] ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_tls_mib {
   unsigned long mibs[11U] ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mib.h"
struct proc_dir_entry;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mib.h"
struct netns_mib {
   struct tcp_mib *tcp_statistics ;
   struct ipstats_mib *ip_statistics ;
   struct linux_mib *net_statistics ;
   struct udp_mib *udp_statistics ;
   struct udp_mib *udplite_statistics ;
   struct icmp_mib *icmp_statistics ;
   struct icmpmsg_mib *icmpmsg_statistics ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6 ;
   struct udp_mib *udplite_stats_in6 ;
   struct ipstats_mib *ipv6_statistics ;
   struct icmpv6_mib *icmpv6_statistics ;
   struct icmpv6msg_mib *icmpv6msg_statistics ;
   struct linux_xfrm_mib *xfrm_statistics ;
   struct linux_tls_mib *tls_statistics ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/unix.h"
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/packet.h"
struct netns_packet {
   struct mutex sklist_lock ;
   struct hlist_head sklist ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags;
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct fqdir {
   long high_thresh ;
   long low_thresh ;
   int timeout ;
   int max_dist ;
   struct inet_frags *f ;
   struct net *net ;
   bool dead ;
   struct rhashtable rhashtable ;
   atomic_long_t mem ;
   struct work_struct destroy_work ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v4_compare_key {
   __be32 saddr ;
   __be32 daddr ;
   u32 user ;
   u32 vif ;
   __be16 id ;
   u16 protocol ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v6_compare_key {
   struct in6_addr saddr ;
   struct in6_addr daddr ;
   u32 user ;
   __be32 id ;
   u32 iif ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
union __anonunion_key_565 {
   struct frag_v4_compare_key v4 ;
   struct frag_v6_compare_key v6 ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frag_queue {
   struct rhash_head node ;
   union __anonunion_key_565 key ;
   struct timer_list timer ;
   spinlock_t lock ;
   refcount_t refcnt ;
   struct rb_root rb_fragments ;
   struct sk_buff *fragments_tail ;
   struct sk_buff *last_run_head ;
   ktime_t stamp ;
   int len ;
   int meat ;
   __u8 flags ;
   u16 max_size ;
   struct fqdir *fqdir ;
   struct callback_head rcu ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags {
   unsigned int qsize ;
   void (*constructor)(struct inet_frag_queue *, void *) ;
   void (*destructor)(struct inet_frag_queue *) ;
   void (*frag_expire)(struct timer_list *) ;
   struct kmem_cache *frags_cachep ;
   char *frags_cache_name ;
   struct rhashtable_params rhash_params ;
   refcount_t refcnt ;
   struct completion completion ;
};
#line 177 
struct ipv4_devconf;
#line 178 
struct fib_rules_ops;
#line 179 
struct fib_table;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct local_ports {
   seqlock_t lock ;
   int range[2U] ;
   bool warned ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct ping_group_range {
   seqlock_t lock ;
   kgid_t range[2U] ;
};
#line 31 
struct inet_hashinfo;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct inet_timewait_death_row {
   atomic_t tw_count ;
   struct inet_hashinfo *hashinfo ;
   int sysctl_max_tw_buckets ;
};
#line 40 
struct tcp_fastopen_context;
#line 43 
struct ip_ra_chain;
#line 43 
struct inet_peer_base;
#line 43 
struct xt_table;
#line 43 
struct tcp_congestion_ops;
#line 43 
struct fib_notifier_ops;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *xfrm4_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct ip_ra_chain *ra_chain ;
   struct mutex ra_mutex ;
   struct fib_rules_ops *rules_ops ;
   bool fib_has_custom_rules ;
   unsigned int fib_rules_require_fldissect ;
   struct fib_table *fib_main ;
   struct fib_table *fib_default ;
   bool fib_has_custom_local_routes ;
   int fib_num_tclassid_users ;
   struct hlist_head *fib_table_hash ;
   bool fib_offload_disabled ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct inet_peer_base *peers ;
   struct sock **tcp_sk ;
   struct fqdir *fqdir ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   struct local_ports ip_local_ports ;
   int sysctl_tcp_ecn ;
   int sysctl_tcp_ecn_fallback ;
   int sysctl_ip_default_ttl ;
   int sysctl_ip_no_pmtu_disc ;
   int sysctl_ip_fwd_use_pmtu ;
   int sysctl_ip_fwd_update_priority ;
   int sysctl_ip_nonlocal_bind ;
   int sysctl_ip_dynaddr ;
   int sysctl_ip_early_demux ;
   int sysctl_raw_l3mdev_accept ;
   int sysctl_tcp_early_demux ;
   int sysctl_udp_early_demux ;
   int sysctl_fwmark_reflect ;
   int sysctl_tcp_fwmark_accept ;
   int sysctl_tcp_l3mdev_accept ;
   int sysctl_tcp_mtu_probing ;
   int sysctl_tcp_mtu_probe_floor ;
   int sysctl_tcp_base_mss ;
   int sysctl_tcp_min_snd_mss ;
   int sysctl_tcp_probe_threshold ;
   u32 sysctl_tcp_probe_interval ;
   int sysctl_tcp_keepalive_time ;
   int sysctl_tcp_keepalive_probes ;
   int sysctl_tcp_keepalive_intvl ;
   int sysctl_tcp_syn_retries ;
   int sysctl_tcp_synack_retries ;
   int sysctl_tcp_syncookies ;
   int sysctl_tcp_reordering ;
   int sysctl_tcp_retries1 ;
   int sysctl_tcp_retries2 ;
   int sysctl_tcp_orphan_retries ;
   int sysctl_tcp_fin_timeout ;
   unsigned int sysctl_tcp_notsent_lowat ;
   int sysctl_tcp_tw_reuse ;
   int sysctl_tcp_sack ;
   int sysctl_tcp_window_scaling ;
   int sysctl_tcp_timestamps ;
   int sysctl_tcp_early_retrans ;
   int sysctl_tcp_recovery ;
   int sysctl_tcp_thin_linear_timeouts ;
   int sysctl_tcp_slow_start_after_idle ;
   int sysctl_tcp_retrans_collapse ;
   int sysctl_tcp_stdurg ;
   int sysctl_tcp_rfc1337 ;
   int sysctl_tcp_abort_on_overflow ;
   int sysctl_tcp_fack ;
   int sysctl_tcp_max_reordering ;
   int sysctl_tcp_dsack ;
   int sysctl_tcp_app_win ;
   int sysctl_tcp_adv_win_scale ;
   int sysctl_tcp_frto ;
   int sysctl_tcp_nometrics_save ;
   int sysctl_tcp_moderate_rcvbuf ;
   int sysctl_tcp_tso_win_divisor ;
   int sysctl_tcp_workaround_signed_windows ;
   int sysctl_tcp_limit_output_bytes ;
   int sysctl_tcp_challenge_ack_limit ;
   int sysctl_tcp_min_tso_segs ;
   int sysctl_tcp_min_rtt_wlen ;
   int sysctl_tcp_autocorking ;
   int sysctl_tcp_invalid_ratelimit ;
   int sysctl_tcp_pacing_ss_ratio ;
   int sysctl_tcp_pacing_ca_ratio ;
   int sysctl_tcp_wmem[3U] ;
   int sysctl_tcp_rmem[3U] ;
   int sysctl_tcp_comp_sack_nr ;
   unsigned long sysctl_tcp_comp_sack_delay_ns ;
   struct inet_timewait_death_row tcp_death_row ;
   int sysctl_max_syn_backlog ;
   int sysctl_tcp_fastopen ;
   struct tcp_congestion_ops *tcp_congestion_control ;
   struct tcp_fastopen_context *tcp_fastopen_ctx ;
   spinlock_t tcp_fastopen_ctx_lock ;
   unsigned int sysctl_tcp_fastopen_blackhole_timeout ;
   atomic_t tfo_active_disable_times ;
   unsigned long tfo_active_disable_stamp ;
   int sysctl_udp_wmem_min ;
   int sysctl_udp_rmem_min ;
   int sysctl_udp_l3mdev_accept ;
   int sysctl_igmp_max_memberships ;
   int sysctl_igmp_max_msf ;
   int sysctl_igmp_llm_reports ;
   int sysctl_igmp_qrv ;
   struct ping_group_range ping_group_range ;
   atomic_t dev_addr_genid ;
   unsigned long *sysctl_local_reserved_ports ;
   int sysctl_ip_prot_sock ;
   struct list_head mr_tables ;
   struct fib_rules_ops *mr_rules_ops ;
   int sysctl_fib_multipath_use_neigh ;
   int sysctl_fib_multipath_hash_policy ;
   struct fib_notifier_ops *notifier_ops ;
   unsigned int fib_seq ;
   struct fib_notifier_ops *ipmr_notifier_ops ;
   unsigned int ipmr_seq ;
   atomic_t rt_genid ;
   siphash_key_t ip_id_key ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst_ops.h"
struct neighbour;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst_ops.h"
struct dst_ops {
   unsigned short family ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops *) ;
   struct dst_entry *(*check)(struct dst_entry *, __u32 ) ;
   unsigned int (*default_advmss)(struct dst_entry *) ;
   unsigned int (*mtu)(struct dst_entry *) ;
   u32 *(*cow_metrics)(struct dst_entry *, unsigned long ) ;
   void (*destroy)(struct dst_entry *) ;
   void (*ifdown)(struct dst_entry *, struct net_device *, int ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry *) ;
   void (*link_failure)(struct sk_buff *) ;
   void (*update_pmtu)(struct dst_entry *, struct sock *, struct sk_buff *, u32 , bool ) ;
   void (*redirect)(struct dst_entry *, struct sock *, struct sk_buff *) ;
   int (*local_out)(struct net *, struct sock *, struct sk_buff *) ;
   struct neighbour *(*neigh_lookup)(struct dst_entry *, struct sk_buff *, void *) ;
   void (*confirm_neigh)(struct dst_entry *, void *) ;
   struct kmem_cache *kmem_cachep ;
   struct percpu_counter pcpuc_entries ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_sysctl_ipv6 {
   struct ctl_table_header *hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *icmp_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *xfrm6_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int multipath_hash_policy ;
   int flowlabel_consistency ;
   int auto_flowlabels ;
   int icmpv6_time ;
   int icmpv6_echo_ignore_all ;
   int icmpv6_echo_ignore_multicast ;
   int icmpv6_echo_ignore_anycast ;
   unsigned long icmpv6_ratemask[4U] ;
   unsigned long *icmpv6_ratemask_ptr ;
   int anycast_src_echo_reply ;
   int ip_nonlocal_bind ;
   int fwmark_reflect ;
   int idgen_retries ;
   int idgen_delay ;
   int flowlabel_state_ranges ;
   int flowlabel_reflect ;
   int max_dst_opts_cnt ;
   int max_hbh_opts_cnt ;
   int max_dst_opts_len ;
   int max_hbh_opts_len ;
   int seg6_flowlabel ;
   bool skip_notify_on_dev_down ;
};
#line 56 
struct ipv6_devconf;
#line 56 
struct fib6_info;
#line 56 
struct rt6_info;
#line 56 
struct rt6_statistics;
#line 56 
struct fib6_table;
#line 56 
struct seg6_pernet_data;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct __anonstruct_ip6addrlbl_table_567 {
   struct hlist_head head ;
   spinlock_t lock ;
   u32 seq ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct inet_peer_base *peers ;
   struct fqdir *fqdir ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct xt_table *ip6table_nat ;
   struct fib6_info *fib6_null_entry ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct list_head fib6_walkers ;
   struct dst_ops ip6_dst_ops ;
   rwlock_t fib6_walker_lock ;
   spinlock_t fib6_gc_lock ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   unsigned int fib6_rules_require_fldissect ;
   bool fib6_has_custom_rules ;
   unsigned int fib6_routes_require_src ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct list_head mr6_tables ;
   struct fib_rules_ops *mr6_rules_ops ;
   atomic_t dev_addr_genid ;
   atomic_t fib6_sernum ;
   struct seg6_pernet_data *seg6_data ;
   struct fib_notifier_ops *notifier_ops ;
   struct fib_notifier_ops *ip6mr_notifier_ops ;
   unsigned int ipmr_seq ;
   struct __anonstruct_ip6addrlbl_table_567 ip6addrlbl_table ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_nf_frag {
   struct fqdir *fqdir ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nexthop.h"
struct netns_nexthop {
   struct rb_root rb_root ;
   struct hlist_head *devhash ;
   unsigned int seq ;
   u32 last_id_allocated ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_sysctl_lowpan {
   struct ctl_table_header *frags_hdr ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_ieee802154_lowpan {
   struct netns_sysctl_lowpan sysctl ;
   struct fqdir *fqdir ;
};
#line 21 
struct sctp_mib;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/sctp.h"
struct netns_sctp {
   struct sctp_mib *sctp_statistics ;
   struct proc_dir_entry *proc_net_sctp ;
   struct ctl_table_header *sysctl_header ;
   struct sock *ctl_sock ;
   struct list_head local_addr_list ;
   struct list_head addr_waitq ;
   struct timer_list addr_wq_timer ;
   struct list_head auto_asconf_splist ;
   spinlock_t addr_wq_lock ;
   spinlock_t local_addr_lock ;
   unsigned int rto_initial ;
   unsigned int rto_min ;
   unsigned int rto_max ;
   int rto_alpha ;
   int rto_beta ;
   int max_burst ;
   int cookie_preserve_enable ;
   char *sctp_hmac_alg ;
   unsigned int valid_cookie_life ;
   unsigned int sack_timeout ;
   unsigned int hb_interval ;
   int max_retrans_association ;
   int max_retrans_path ;
   int max_retrans_init ;
   int pf_retrans ;
   int ps_retrans ;
   int pf_enable ;
   int pf_expose ;
   int sndbuf_policy ;
   int rcvbuf_policy ;
   int default_auto_asconf ;
   int addip_enable ;
   int addip_noauth ;
   int prsctp_enable ;
   int reconf_enable ;
   int auth_enable ;
   int intl_enable ;
   int ecn_enable ;
   int scope_policy ;
   int rwnd_upd_shift ;
   unsigned long max_autoclose ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/dccp.h"
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netfilter.h"
struct nf_logger;
#line 76 
struct nf_queue_handler;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct nf_hook_entries;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct netns_nf {
   struct proc_dir_entry *proc_netfilter ;
   struct nf_queue_handler *queue_handler ;
   struct nf_logger *nf_loggers[13U] ;
   struct ctl_table_header *nf_log_dir_header ;
   struct nf_hook_entries *hooks_ipv4[5U] ;
   struct nf_hook_entries *hooks_ipv6[5U] ;
   struct nf_hook_entries *hooks_arp[3U] ;
   struct nf_hook_entries *hooks_bridge[5U] ;
   struct nf_hook_entries *hooks_decnet[7U] ;
   bool defrag_ipv4 ;
   bool defrag_ipv6 ;
};
#line 37 
struct ebt_table;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/x_tables.h"
struct netns_xt {
   struct list_head tables[13U] ;
   bool notrack_deprecated_warning ;
   bool clusterip_deprecated_warning ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_head {
   struct hlist_nulls_node *first ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_generic_net {
   unsigned int timeout ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_tcp_net {
   unsigned int timeouts[14U] ;
   int tcp_loose ;
   int tcp_be_liberal ;
   int tcp_max_retrans ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_udp_net {
   unsigned int timeouts[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_icmp_net {
   unsigned int timeout ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_dccp_net {
   int dccp_loose ;
   unsigned int dccp_timeout[10U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_sctp_net {
   unsigned int timeouts[10U] ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_gre_net {
   struct list_head keymap_list ;
   unsigned int timeouts[2U] ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_ip_net {
   struct nf_generic_net generic ;
   struct nf_tcp_net tcp ;
   struct nf_udp_net udp ;
   struct nf_icmp_net icmp ;
   struct nf_icmp_net icmpv6 ;
   struct nf_dccp_net dccp ;
   struct nf_sctp_net sctp ;
   struct nf_gre_net gre ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct ct_pcpu {
   spinlock_t lock ;
   struct hlist_nulls_head unconfirmed ;
   struct hlist_nulls_head dying ;
};
#line 95 
struct nf_ct_event_notifier;
#line 95 
struct nf_exp_event_notifier;
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   struct delayed_work ecache_dwork ;
   bool ecache_dwork_pending ;
   bool auto_assign_helper_warned ;
   struct ctl_table_header *sysctl_header ;
   unsigned int sysctl_log_invalid ;
   int sysctl_events ;
   int sysctl_acct ;
   int sysctl_auto_assign_helper ;
   int sysctl_tstamp ;
   int sysctl_checksum ;
   struct ct_pcpu *pcpu_lists ;
   struct ip_conntrack_stat *stat ;
   struct nf_ct_event_notifier *nf_conntrack_event_cb ;
   struct nf_exp_event_notifier *nf_expect_event_cb ;
   struct nf_ip_net nf_ct_proto ;
   unsigned int labels_used ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nftables.h"
struct netns_nftables {
   struct list_head tables ;
   struct list_head commit_list ;
   struct list_head module_list ;
   struct mutex commit_mutex ;
   unsigned int base_seq ;
   u8 gencursor ;
   u8 validate_state ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
   u8 dbits4 ;
   u8 sbits4 ;
   u8 dbits6 ;
   u8 sbits6 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hthresh {
   struct work_struct work ;
   seqlock_t lock ;
   u8 lbits4 ;
   u8 rbits4 ;
   u8 lbits6 ;
   u8 rbits6 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[3U] ;
   struct xfrm_policy_hash policy_bydst[3U] ;
   unsigned int policy_count[6U] ;
   struct work_struct policy_hash_work ;
   struct xfrm_policy_hthresh policy_hthresh ;
   struct list_head inexact_bins ;
   struct sock *nlsk ;
   struct sock *nlsk_stash ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
   struct dst_ops xfrm4_dst_ops ;
   struct dst_ops xfrm6_dst_ops ;
   spinlock_t xfrm_state_lock ;
   spinlock_t xfrm_policy_lock ;
   struct mutex xfrm_cfg_mutex ;
};
#line 79 
struct mpls_route;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mpls.h"
struct netns_mpls {
   int ip_ttl_propagate ;
   int default_ttl ;
   size_t platform_labels ;
   struct mpls_route **platform_label ;
   struct ctl_table_header *ctl ;
};
#line 20 
struct can_dev_rcv_lists;
#line 21 
struct can_pkg_stats;
#line 22 
struct can_rcv_lists_stats;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/can.h"
struct netns_can {
   struct proc_dir_entry *proc_dir ;
   struct proc_dir_entry *pde_version ;
   struct proc_dir_entry *pde_stats ;
   struct proc_dir_entry *pde_reset_stats ;
   struct proc_dir_entry *pde_rcvlist_all ;
   struct proc_dir_entry *pde_rcvlist_fil ;
   struct proc_dir_entry *pde_rcvlist_inv ;
   struct proc_dir_entry *pde_rcvlist_sff ;
   struct proc_dir_entry *pde_rcvlist_eff ;
   struct proc_dir_entry *pde_rcvlist_err ;
   struct proc_dir_entry *bcmproc_dir ;
   struct can_dev_rcv_lists *rx_alldev_list ;
   spinlock_t rcvlists_lock ;
   struct timer_list stattimer ;
   struct can_pkg_stats *pkg_stats ;
   struct can_rcv_lists_stats *rcv_lists_stats ;
   struct hlist_head cgw_list ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xdp.h"
struct netns_xdp {
   struct mutex lock ;
   struct hlist_head list ;
};
#line 12 
struct proc_ns_operations;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ns_common.h"
struct ns_common {
   atomic_long_t stashed ;
   struct proc_ns_operations *ops ;
   unsigned int inum ;
};
#line 12 
struct net_generic;
#line 13 
struct uevent_sock;
#line 14 
struct netns_ipvs;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct key_tag;
#line 55 
struct ucounts;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct net {
   refcount_t passive ;
   refcount_t count ;
   spinlock_t rules_mod_lock ;
   unsigned int dev_unreg_count ;
   unsigned int dev_base_seq ;
   int ifindex ;
   spinlock_t nsid_lock ;
   atomic_t fnhe_genid ;
   struct list_head list ;
   struct list_head exit_list ;
   struct llist_node cleanup_list ;
   struct key_tag *key_domain ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct idr netns_ids ;
   struct ns_common ns ;
   struct list_head dev_base_head ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct sock *rtnl ;
   struct sock *genl_sock ;
   struct uevent_sock *uevent_sock ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   struct raw_notifier_head netdev_chain ;
   u32 hash_mix ;
   struct net_device *loopback_dev ;
   struct list_head rules_ops ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_nexthop nexthop ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_ieee802154_lowpan ieee802154_lowpan ;
   struct netns_sctp sctp ;
   struct netns_dccp dccp ;
   struct netns_nf nf ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct netns_nftables nft ;
   struct netns_nf_frag nf_frag ;
   struct ctl_table_header *nf_frag_frags_hdr ;
   struct sock *nfnl ;
   struct sock *nfnl_stash ;
   struct list_head nfnl_acct_list ;
   struct list_head nfct_timeout_list ;
   struct sk_buff_head wext_nlevents ;
   struct net_generic *gen ;
   struct bpf_prog *flow_dissector_prog ;
   struct netns_xfrm xfrm ;
   struct netns_ipvs *ipvs ;
   struct netns_mpls mpls ;
   struct netns_can can ;
   struct netns_xdp xdp ;
   struct sock *crypto_nlsk ;
   struct sock *diag_nlsk ;
} __attribute__((__designated_init__));
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array_ptr;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array {
   struct assoc_array_ptr *root ;
   unsigned long nr_leaves_on_tree ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
typedef int32_t key_serial_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
typedef uint32_t key_perm_t;
#line 32 
struct key_type;
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_tag {
   struct callback_head rcu ;
   refcount_t usage ;
   bool removed ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_580 {
   u16 desc_len ;
   char desc[6U] ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_579 {
   struct __anonstruct_580 __anonCompField___anonunion_579_102 ;
   unsigned long x ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct keyring_index_key {
   unsigned long hash ;
   union __anonunion_579 __anonCompField_keyring_index_key_103 ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union key_payload {
   void *rcu_data0 ;
   void *data[4U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_restriction {
   int (*check)(struct key *, struct key_type *, union key_payload *, struct key *) ;
   struct key *key ;
   struct key_type *keytype ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_581 {
   struct list_head graveyard_link ;
   struct rb_node serial_node ;
};
#line 172 
struct key_user;
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_582 {
   time64_t expiry ;
   time64_t revoked_at ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_584 {
   unsigned long hash ;
   unsigned long len_desc ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_583 {
   struct keyring_index_key index_key ;
   struct __anonstruct_584 __anonCompField___anonunion_583_106 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_586 {
   struct list_head name_link ;
   struct assoc_array keys ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_585 {
   union key_payload payload ;
   struct __anonstruct_586 __anonCompField___anonunion_585_108 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key {
   refcount_t usage ;
   key_serial_t serial ;
   union __anonunion_581 __anonCompField_key_104 ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_582 __anonCompField_key_105 ;
   time64_t last_used_at ;
   kuid_t uid ;
   kgid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   short state ;
   unsigned long flags ;
   union __anonunion_583 __anonCompField_key_107 ;
   union __anonunion_585 __anonCompField_key_109 ;
   struct key_restriction *restrict_link ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/user.h"
struct user_struct {
   refcount_t __count ;
   atomic_t processes ;
   atomic_t sigpending ;
   atomic_t fanotify_listeners ;
   atomic_long_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   unsigned long unix_inflight ;
   atomic_long_t pipe_bufs ;
   struct hlist_node uidhash_node ;
   kuid_t uid ;
   atomic_long_t locked_vm ;
   struct ratelimit_state ratelimit ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   kgid_t gid[0U] ;
} __attribute__((__designated_init__));
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
union __anonunion_589 {
   int non_rcu ;
   struct callback_head rcu ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   kuid_t uid ;
   kgid_t gid ;
   kuid_t suid ;
   kgid_t sgid ;
   kuid_t euid ;
   kgid_t egid ;
   kuid_t fsuid ;
   kgid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   kernel_cap_t cap_ambient ;
   unsigned char jit_keyring ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   void *security ;
   struct user_struct *user ;
   struct user_namespace *user_ns ;
   struct group_info *group_info ;
   union __anonunion_589 __anonCompField_cred_110 ;
} __attribute__((__designated_init__));
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   size_t pad_until ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations *op ;
   int poll_event ;
   struct file *file ;
   void *private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_operations {
   void *(*start)(struct seq_file *, loff_t *) ;
   void (*stop)(struct seq_file *, void *) ;
   void *(*next)(struct seq_file *, void *, loff_t *) ;
   int (*show)(struct seq_file *, void *) ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct __anonstruct_possible_net_t_590 {
   struct net *net ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
typedef struct __anonstruct_possible_net_t_590 possible_net_t;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_ets {
   __u8 willing ;
   __u8 ets_cap ;
   __u8 cbs ;
   __u8 tc_tx_bw[8U] ;
   __u8 tc_rx_bw[8U] ;
   __u8 tc_tsa[8U] ;
   __u8 prio_tc[8U] ;
   __u8 tc_reco_bw[8U] ;
   __u8 tc_reco_tsa[8U] ;
   __u8 reco_prio_tc[8U] ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_maxrate {
   __u64 tc_maxrate[8U] ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn {
   __u8 rpg_enable[8U] ;
   __u32 rppp_max_rps[8U] ;
   __u32 rpg_time_reset[8U] ;
   __u32 rpg_byte_reset[8U] ;
   __u32 rpg_threshold[8U] ;
   __u32 rpg_max_rate[8U] ;
   __u32 rpg_ai_rate[8U] ;
   __u32 rpg_hai_rate[8U] ;
   __u32 rpg_gd[8U] ;
   __u32 rpg_min_dec_fac[8U] ;
   __u32 rpg_min_rate[8U] ;
   __u32 cndd_state_machine[8U] ;
};
#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn_stats {
   __u64 rppp_rp_centiseconds[8U] ;
   __u32 rppp_created_rps[8U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_pfc {
   __u8 pfc_cap ;
   __u8 pfc_en ;
   __u8 mbc ;
   __u16 delay ;
   __u64 requests[8U] ;
   __u64 indications[8U] ;
};
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcbnl_buffer {
   __u8 prio2buffer[8U] ;
   __u32 buffer_size[8U] ;
   __u32 total_size ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pg {
   __u8 willing ;
   __u8 error ;
   __u8 pg_en ;
   __u8 tcs_supported ;
   __u8 pg_bw[8U] ;
   __u8 prio_pg[8U] ;
};
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pfc {
   __u8 willing ;
   __u8 error ;
   __u8 pfc_en ;
   __u8 tcs_supported ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_app {
   __u8 selector ;
   __u8 priority ;
   __u16 protocol ;
};
#line 259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_peer_app_info {
   __u8 willing ;
   __u8 error ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dcbnl.h"
struct dcbnl_rtnl_ops {
   int (*ieee_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_setets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_getmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_setmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_getqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_setqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_getqcnstats)(struct net_device *, struct ieee_qcn_stats *) ;
   int (*ieee_getpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_setpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_getapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_setapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_delapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_peer_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_peer_getpfc)(struct net_device *, struct ieee_pfc *) ;
   u8 (*getstate)(struct net_device *) ;
   u8 (*setstate)(struct net_device *, u8 ) ;
   void (*getpermhwaddr)(struct net_device *, u8 *) ;
   void (*setpgtccfgtx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgtx)(struct net_device *, int , u8 ) ;
   void (*setpgtccfgrx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgrx)(struct net_device *, int , u8 ) ;
   void (*getpgtccfgtx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgtx)(struct net_device *, int , u8 *) ;
   void (*getpgtccfgrx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgrx)(struct net_device *, int , u8 *) ;
   void (*setpfccfg)(struct net_device *, int , u8 ) ;
   void (*getpfccfg)(struct net_device *, int , u8 *) ;
   u8 (*setall)(struct net_device *) ;
   u8 (*getcap)(struct net_device *, int , u8 *) ;
   int (*getnumtcs)(struct net_device *, int , u8 *) ;
   int (*setnumtcs)(struct net_device *, int , u8 ) ;
   u8 (*getpfcstate)(struct net_device *) ;
   void (*setpfcstate)(struct net_device *, u8 ) ;
   void (*getbcncfg)(struct net_device *, int , u32 *) ;
   void (*setbcncfg)(struct net_device *, int , u32 ) ;
   void (*getbcnrp)(struct net_device *, int , u8 *) ;
   void (*setbcnrp)(struct net_device *, int , u8 ) ;
   int (*setapp)(struct net_device *, u8 , u16 , u8 ) ;
   int (*getapp)(struct net_device *, u8 , u16 ) ;
   u8 (*getfeatcfg)(struct net_device *, int , u8 *) ;
   u8 (*setfeatcfg)(struct net_device *, int , u8 ) ;
   u8 (*getdcbx)(struct net_device *) ;
   u8 (*setdcbx)(struct net_device *, u8 ) ;
   int (*peer_getappinfo)(struct net_device *, struct dcb_peer_app_info *, u16 *) ;
   int (*peer_getapptable)(struct net_device *, struct dcb_app *) ;
   int (*cee_peer_getpg)(struct net_device *, struct cee_pg *) ;
   int (*cee_peer_getpfc)(struct net_device *, struct cee_pfc *) ;
   int (*dcbnl_getbuffer)(struct net_device *, struct dcbnl_buffer *) ;
   int (*dcbnl_setbuffer)(struct net_device *, struct dcbnl_buffer *) ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/taskstats.h"
struct taskstats {
   __u16 version ;
   __u32 ac_exitcode ;
   __u8 ac_flag ;
   __u8 ac_nice ;
   __u64 cpu_count ;
   __u64 cpu_delay_total ;
   __u64 blkio_count ;
   __u64 blkio_delay_total ;
   __u64 swapin_count ;
   __u64 swapin_delay_total ;
   __u64 cpu_run_real_total ;
   __u64 cpu_run_virtual_total ;
   char ac_comm[32U] ;
   __u8 ac_sched ;
   __u8 ac_pad[3U] ;
   __u32 ac_uid ;
   __u32 ac_gid ;
   __u32 ac_pid ;
   __u32 ac_ppid ;
   __u32 ac_btime ;
   __u64 ac_etime ;
   __u64 ac_utime ;
   __u64 ac_stime ;
   __u64 ac_minflt ;
   __u64 ac_majflt ;
   __u64 coremem ;
   __u64 virtmem ;
   __u64 hiwater_rss ;
   __u64 hiwater_vm ;
   __u64 read_char ;
   __u64 write_char ;
   __u64 read_syscalls ;
   __u64 write_syscalls ;
   __u64 read_bytes ;
   __u64 write_bytes ;
   __u64 cancelled_write_bytes ;
   __u64 nvcsw ;
   __u64 nivcsw ;
   __u64 ac_utimescaled ;
   __u64 ac_stimescaled ;
   __u64 cpu_scaled_run_real_total ;
   __u64 freepages_count ;
   __u64 freepages_delay_total ;
   __u64 thrashing_count ;
   __u64 thrashing_delay_total ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/cgroupstats.h"
struct mnt_namespace;
#line 60 
struct uts_namespace;
#line 61 
struct ipc_namespace;
#line 62 
struct cgroup_namespace;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nsproxy.h"
struct nsproxy {
   atomic_t count ;
   struct uts_namespace *uts_ns ;
   struct ipc_namespace *ipc_ns ;
   struct mnt_namespace *mnt_ns ;
   struct pid_namespace *pid_ns_for_children ;
   struct net *net_ns ;
   struct cgroup_namespace *cgroup_ns ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_extent {
   u32 first ;
   u32 lower_first ;
   u32 count ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct __anonstruct_592 {
   struct uid_gid_extent *forward ;
   struct uid_gid_extent *reverse ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
union __anonunion_591 {
   struct uid_gid_extent extent[5U] ;
   struct __anonstruct_592 __anonCompField___anonunion_591_111 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_map {
   u32 nr_extents ;
   union __anonunion_591 __anonCompField_uid_gid_map_112 ;
};
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct user_namespace {
   struct uid_gid_map uid_map ;
   struct uid_gid_map gid_map ;
   struct uid_gid_map projid_map ;
   atomic_t count ;
   struct user_namespace *parent ;
   int level ;
   kuid_t owner ;
   kgid_t group ;
   struct ns_common ns ;
   unsigned long flags ;
   struct list_head keyring_name_list ;
   struct key *user_keyring_register ;
   struct rw_semaphore keyring_sem ;
   struct key *persistent_keyring_register ;
   struct work_struct work ;
   struct ctl_table_set set ;
   struct ctl_table_header *sysctls ;
   struct ucounts *ucounts ;
   int ucount_max[9U] ;
} __attribute__((__designated_init__));
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct ucounts {
   struct hlist_node node ;
   struct user_namespace *ns ;
   kuid_t uid ;
   int count ;
   atomic_t ucount[9U] ;
};
#line 604  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
struct tasklet_struct {
   struct tasklet_struct *next ;
   unsigned long state ;
   atomic_t count ;
   void (*func)(unsigned long ) ;
   unsigned long data ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_insn {
   __u8 code ;
   __u8 dst_reg : 4 ;
   __u8 src_reg : 4 ;
   __s16 off ;
   __s32 imm ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_cgroup_storage_key {
   __u64 cgroup_inode_id ;
   __u32 attach_type ;
};
#line 110 
enum bpf_map_type {
    BPF_MAP_TYPE_UNSPEC = 0,
    BPF_MAP_TYPE_HASH = 1,
    BPF_MAP_TYPE_ARRAY = 2,
    BPF_MAP_TYPE_PROG_ARRAY = 3,
    BPF_MAP_TYPE_PERF_EVENT_ARRAY = 4,
    BPF_MAP_TYPE_PERCPU_HASH = 5,
    BPF_MAP_TYPE_PERCPU_ARRAY = 6,
    BPF_MAP_TYPE_STACK_TRACE = 7,
    BPF_MAP_TYPE_CGROUP_ARRAY = 8,
    BPF_MAP_TYPE_LRU_HASH = 9,
    BPF_MAP_TYPE_LRU_PERCPU_HASH = 10,
    BPF_MAP_TYPE_LPM_TRIE = 11,
    BPF_MAP_TYPE_ARRAY_OF_MAPS = 12,
    BPF_MAP_TYPE_HASH_OF_MAPS = 13,
    BPF_MAP_TYPE_DEVMAP = 14,
    BPF_MAP_TYPE_SOCKMAP = 15,
    BPF_MAP_TYPE_CPUMAP = 16,
    BPF_MAP_TYPE_XSKMAP = 17,
    BPF_MAP_TYPE_SOCKHASH = 18,
    BPF_MAP_TYPE_CGROUP_STORAGE = 19,
    BPF_MAP_TYPE_REUSEPORT_SOCKARRAY = 20,
    BPF_MAP_TYPE_PERCPU_CGROUP_STORAGE = 21,
    BPF_MAP_TYPE_QUEUE = 22,
    BPF_MAP_TYPE_STACK = 23,
    BPF_MAP_TYPE_SK_STORAGE = 24,
    BPF_MAP_TYPE_DEVMAP_HASH = 25
};
#line 139 
enum bpf_prog_type {
    BPF_PROG_TYPE_UNSPEC = 0,
    BPF_PROG_TYPE_SOCKET_FILTER = 1,
    BPF_PROG_TYPE_KPROBE = 2,
    BPF_PROG_TYPE_SCHED_CLS = 3,
    BPF_PROG_TYPE_SCHED_ACT = 4,
    BPF_PROG_TYPE_TRACEPOINT = 5,
    BPF_PROG_TYPE_XDP = 6,
    BPF_PROG_TYPE_PERF_EVENT = 7,
    BPF_PROG_TYPE_CGROUP_SKB = 8,
    BPF_PROG_TYPE_CGROUP_SOCK = 9,
    BPF_PROG_TYPE_LWT_IN = 10,
    BPF_PROG_TYPE_LWT_OUT = 11,
    BPF_PROG_TYPE_LWT_XMIT = 12,
    BPF_PROG_TYPE_SOCK_OPS = 13,
    BPF_PROG_TYPE_SK_SKB = 14,
    BPF_PROG_TYPE_CGROUP_DEVICE = 15,
    BPF_PROG_TYPE_SK_MSG = 16,
    BPF_PROG_TYPE_RAW_TRACEPOINT = 17,
    BPF_PROG_TYPE_CGROUP_SOCK_ADDR = 18,
    BPF_PROG_TYPE_LWT_SEG6LOCAL = 19,
    BPF_PROG_TYPE_LIRC_MODE2 = 20,
    BPF_PROG_TYPE_SK_REUSEPORT = 21,
    BPF_PROG_TYPE_FLOW_DISSECTOR = 22,
    BPF_PROG_TYPE_CGROUP_SYSCTL = 23,
    BPF_PROG_TYPE_RAW_TRACEPOINT_WRITABLE = 24,
    BPF_PROG_TYPE_CGROUP_SOCKOPT = 25,
    BPF_PROG_TYPE_TRACING = 26
};
#line 169 
enum bpf_attach_type {
    BPF_CGROUP_INET_INGRESS = 0,
    BPF_CGROUP_INET_EGRESS = 1,
    BPF_CGROUP_INET_SOCK_CREATE = 2,
    BPF_CGROUP_SOCK_OPS = 3,
    BPF_SK_SKB_STREAM_PARSER = 4,
    BPF_SK_SKB_STREAM_VERDICT = 5,
    BPF_CGROUP_DEVICE = 6,
    BPF_SK_MSG_VERDICT = 7,
    BPF_CGROUP_INET4_BIND = 8,
    BPF_CGROUP_INET6_BIND = 9,
    BPF_CGROUP_INET4_CONNECT = 10,
    BPF_CGROUP_INET6_CONNECT = 11,
    BPF_CGROUP_INET4_POST_BIND = 12,
    BPF_CGROUP_INET6_POST_BIND = 13,
    BPF_CGROUP_UDP4_SENDMSG = 14,
    BPF_CGROUP_UDP6_SENDMSG = 15,
    BPF_LIRC_MODE2 = 16,
    BPF_FLOW_DISSECTOR = 17,
    BPF_CGROUP_SYSCTL = 18,
    BPF_CGROUP_UDP4_RECVMSG = 19,
    BPF_CGROUP_UDP6_RECVMSG = 20,
    BPF_CGROUP_GETSOCKOPT = 21,
    BPF_CGROUP_SETSOCKOPT = 22,
    BPF_TRACE_RAW_TP = 23,
    BPF_TRACE_FENTRY = 24,
    BPF_TRACE_FEXIT = 25,
    __MAX_BPF_ATTACH_TYPE = 26
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_594 {
   __u32 map_type ;
   __u32 key_size ;
   __u32 value_size ;
   __u32 max_entries ;
   __u32 map_flags ;
   __u32 inner_map_fd ;
   __u32 numa_node ;
   char map_name[16U] ;
   __u32 map_ifindex ;
   __u32 btf_fd ;
   __u32 btf_key_type_id ;
   __u32 btf_value_type_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_596 {
   __u64 value ;
   __u64 next_key ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_595 {
   __u32 map_fd ;
   __u64 key ;
   union __anonunion_596 __anonCompField___anonstruct_595_115 ;
   __u64 flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_597 {
   __u32 prog_type ;
   __u32 insn_cnt ;
   __u64 insns ;
   __u64 license ;
   __u32 log_level ;
   __u32 log_size ;
   __u64 log_buf ;
   __u32 kern_version ;
   __u32 prog_flags ;
   char prog_name[16U] ;
   __u32 prog_ifindex ;
   __u32 expected_attach_type ;
   __u32 prog_btf_fd ;
   __u32 func_info_rec_size ;
   __u64 func_info ;
   __u32 func_info_cnt ;
   __u32 line_info_rec_size ;
   __u64 line_info ;
   __u32 line_info_cnt ;
   __u32 attach_btf_id ;
   __u32 attach_prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_598 {
   __u64 pathname ;
   __u32 bpf_fd ;
   __u32 file_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_599 {
   __u32 target_fd ;
   __u32 attach_bpf_fd ;
   __u32 attach_type ;
   __u32 attach_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_test_600 {
   __u32 prog_fd ;
   __u32 retval ;
   __u32 data_size_in ;
   __u32 data_size_out ;
   __u64 data_in ;
   __u64 data_out ;
   __u32 repeat ;
   __u32 duration ;
   __u32 ctx_size_in ;
   __u32 ctx_size_out ;
   __u64 ctx_in ;
   __u64 ctx_out ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_602 {
   __u32 start_id ;
   __u32 prog_id ;
   __u32 map_id ;
   __u32 btf_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_601 {
   union __anonunion_602 __anonCompField___anonstruct_601_120 ;
   __u32 next_id ;
   __u32 open_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_info_603 {
   __u32 bpf_fd ;
   __u32 info_len ;
   __u64 info ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_query_604 {
   __u32 target_fd ;
   __u32 attach_type ;
   __u32 query_flags ;
   __u32 attach_flags ;
   __u64 prog_ids ;
   __u32 prog_cnt ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_raw_tracepoint_605 {
   __u64 name ;
   __u32 prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_606 {
   __u64 btf ;
   __u64 btf_log_buf ;
   __u32 btf_size ;
   __u32 btf_log_size ;
   __u32 btf_log_level ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_task_fd_query_607 {
   __u32 pid ;
   __u32 fd ;
   __u32 flags ;
   __u32 buf_len ;
   __u64 buf ;
   __u32 prog_id ;
   __u32 fd_type ;
   __u64 probe_offset ;
   __u64 probe_addr ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union bpf_attr {
   struct __anonstruct_594 __anonCompField_bpf_attr_114 ;
   struct __anonstruct_595 __anonCompField_bpf_attr_116 ;
   struct __anonstruct_597 __anonCompField_bpf_attr_117 ;
   struct __anonstruct_598 __anonCompField_bpf_attr_118 ;
   struct __anonstruct_599 __anonCompField_bpf_attr_119 ;
   struct __anonstruct_test_600 test ;
   struct __anonstruct_601 __anonCompField_bpf_attr_121 ;
   struct __anonstruct_info_603 info ;
   struct __anonstruct_query_604 query ;
   struct __anonstruct_raw_tracepoint_605 raw_tracepoint ;
   struct __anonstruct_606 __anonCompField_bpf_attr_122 ;
   struct __anonstruct_task_fd_query_607 task_fd_query ;
} __attribute__((__aligned__(8)));
#line 3653  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_func_info {
   __u32 insn_off ;
   __u32 type_id ;
};
#line 3661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_line_info {
   __u32 insn_off ;
   __u32 file_name_off ;
   __u32 line_off ;
   __u32 line_col ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree_latch.h"
struct latch_tree_node {
   struct rb_node node[2U] ;
};
#line 215 
struct bpf_prog_aux;
#line 216 
struct bpf_map;
#line 217 
struct btf;
#line 218 
struct btf_type;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_ops {
   int (*map_alloc_check)(union bpf_attr *) ;
   struct bpf_map *(*map_alloc)(union bpf_attr *) ;
   void (*map_release)(struct bpf_map *, struct file *) ;
   void (*map_free)(struct bpf_map *) ;
   int (*map_get_next_key)(struct bpf_map *, void *, void *) ;
   void (*map_release_uref)(struct bpf_map *) ;
   void *(*map_lookup_elem_sys_only)(struct bpf_map *, void *) ;
   void *(*map_lookup_elem)(struct bpf_map *, void *) ;
   int (*map_update_elem)(struct bpf_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_map *, void *) ;
   int (*map_push_elem)(struct bpf_map *, void *, u64 ) ;
   int (*map_pop_elem)(struct bpf_map *, void *) ;
   int (*map_peek_elem)(struct bpf_map *, void *) ;
   void *(*map_fd_get_ptr)(struct bpf_map *, struct file *, int ) ;
   void (*map_fd_put_ptr)(void *) ;
   u32 (*map_gen_lookup)(struct bpf_map *, struct bpf_insn *) ;
   u32 (*map_fd_sys_lookup_elem)(void *) ;
   void (*map_seq_show_elem)(struct bpf_map *, void *, struct seq_file *) ;
   int (*map_check_btf)(struct bpf_map *, struct btf *, struct btf_type *, struct btf_type *) ;
   int (*map_poke_track)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_untrack)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_run)(struct bpf_map *, u32 , struct bpf_prog *, struct bpf_prog *) ;
   int (*map_direct_value_addr)(struct bpf_map *, u64 *, u32 ) ;
   int (*map_direct_value_meta)(struct bpf_map *, u64 , u32 *) ;
   int (*map_mmap)(struct bpf_map *, struct vm_area_struct *) ;
};
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_memory {
   u32 pages ;
   struct user_struct *user ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map {
   struct bpf_map_ops *ops ;
   struct bpf_map *inner_map_meta ;
   void *security ;
   enum bpf_map_type map_type ;
   u32 key_size ;
   u32 value_size ;
   u32 max_entries ;
   u32 map_flags ;
   int spin_lock_off ;
   u32 id ;
   int numa_node ;
   u32 btf_key_type_id ;
   u32 btf_value_type_id ;
   struct btf *btf ;
   struct bpf_map_memory memory ;
   char name[16U] ;
   bool unpriv_array ;
   bool frozen ;
   atomic64_t refcnt ;
   atomic64_t usercnt ;
   struct work_struct work ;
   struct mutex freeze_mutex ;
   u64 writecnt ;
};
#line 151 
struct bpf_offload_dev;
#line 152 
struct bpf_offloaded_map;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_dev_ops {
   int (*map_get_next_key)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_lookup_elem)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_update_elem)(struct bpf_offloaded_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_offloaded_map *, void *) ;
};
#line 166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_offloaded_map {
   struct bpf_map map ;
   struct net_device *netdev ;
   struct bpf_map_dev_ops *dev_ops ;
   void *dev_priv ;
   struct list_head offloads ;
};
#line 327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_ops {
   int (*test_run)(struct bpf_prog *, union bpf_attr *, union bpf_attr *) ;
};
#line 369  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_offload {
   struct bpf_prog *prog ;
   struct net_device *netdev ;
   struct bpf_offload_dev *offdev ;
   void *dev_priv ;
   struct list_head offloads ;
   bool dev_state ;
   bool opt_failed ;
   void *jited_image ;
   u32 jited_len ;
};
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_stats {
   u64 cnt ;
   u64 nsecs ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct btf_func_model {
   u8 ret_size ;
   u8 nr_args ;
   u8 arg_size[12U] ;
};
#line 447 
enum bpf_tramp_prog_type {
    BPF_TRAMP_FENTRY = 0,
    BPF_TRAMP_FEXIT = 1,
    BPF_TRAMP_MAX = 2
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_func_640 {
   struct btf_func_model model ;
   void *addr ;
   bool ftrace_managed ;
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_trampoline {
   struct hlist_node hlist ;
   struct mutex mutex ;
   refcount_t refcnt ;
   u64 key ;
   struct __anonstruct_func_640 func ;
   struct hlist_head progs_hlist[2U] ;
   int progs_cnt[2U] ;
   void *image ;
   u64 selector ;
};
#line 495  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_func_info_aux {
   bool unreliable ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_tail_call_642 {
   struct bpf_map *map ;
   u32 key ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_641 {
   struct __anonstruct_tail_call_642 tail_call ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_jit_poke_descriptor {
   void *ip ;
   union __anonunion_641 __anonCompField_bpf_jit_poke_descriptor_147 ;
   bool ip_stable ;
   u8 adj_off ;
   u16 reason ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_643 {
   struct work_struct work ;
   struct callback_head rcu ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_aux {
   atomic64_t refcnt ;
   u32 used_map_cnt ;
   u32 max_ctx_offset ;
   u32 max_pkt_offset ;
   u32 max_tp_access ;
   u32 stack_depth ;
   u32 id ;
   u32 func_cnt ;
   u32 func_idx ;
   u32 attach_btf_id ;
   struct bpf_prog *linked_prog ;
   bool verifier_zext ;
   bool offload_requested ;
   bool attach_btf_trace ;
   bool func_proto_unreliable ;
   enum bpf_tramp_prog_type trampoline_prog_type ;
   struct bpf_trampoline *trampoline ;
   struct hlist_node tramp_hlist ;
   struct btf_type *attach_func_proto ;
   char *attach_func_name ;
   struct bpf_prog **func ;
   void *jit_data ;
   struct bpf_jit_poke_descriptor *poke_tab ;
   u32 size_poke_tab ;
   struct latch_tree_node ksym_tnode ;
   struct list_head ksym_lnode ;
   struct bpf_prog_ops *ops ;
   struct bpf_map **used_maps ;
   struct bpf_prog *prog ;
   struct user_struct *user ;
   u64 load_time ;
   struct bpf_map *cgroup_storage[2U] ;
   char name[16U] ;
   void *security ;
   struct bpf_prog_offload *offload ;
   struct btf *btf ;
   struct bpf_func_info *func_info ;
   struct bpf_func_info_aux *func_info_aux ;
   struct bpf_line_info *linfo ;
   void **jited_linfo ;
   u32 func_info_cnt ;
   u32 nr_linfo ;
   u32 linfo_idx ;
   u32 num_exentries ;
   struct exception_table_entry *extable ;
   struct bpf_prog_stats *stats ;
   union __anonunion_643 __anonCompField_bpf_prog_aux_148 ;
};
#line 686 
struct bpf_cgroup_storage;
#line 686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array_item {
   struct bpf_prog *prog ;
   struct bpf_cgroup_storage *cgroup_storage[2U] ;
};
#line 691  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array {
   struct callback_head rcu ;
   struct bpf_prog_array_item items[0U] ;
};
#line 1335 
struct cgroup;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage_map;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_storage_buffer {
   struct callback_head rcu ;
   char data[0U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
union __anonunion_645 {
   struct bpf_storage_buffer *buf ;
   void *percpu_buf ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage {
   union __anonunion_645 __anonCompField_bpf_cgroup_storage_150 ;
   struct bpf_cgroup_storage_map *map ;
   struct bpf_cgroup_storage_key key ;
   struct list_head list ;
   struct rb_node node ;
   struct callback_head rcu ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct cgroup_bpf {
   struct bpf_prog_array *effective[26U] ;
   struct list_head progs[26U] ;
   u32 flags[26U] ;
   struct bpf_prog_array *inactive ;
   struct percpu_ref refcnt ;
   struct work_struct release_work ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work;
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_worker {
   unsigned int flags ;
   raw_spinlock_t lock ;
   struct list_head work_list ;
   struct list_head delayed_work_list ;
   struct task_struct *task ;
   struct kthread_work *current_work ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work {
   struct list_head node ;
   void (*func)(struct kthread_work *) ;
   struct kthread_worker *worker ;
   int canceling ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_delayed_work {
   struct kthread_work work ;
   struct timer_list timer ;
};
#line 199 
struct cgroup_subsys_state;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group_cpu {
   seqcount_t seq ;
   unsigned int tasks[3U] ;
   u32 state_mask ;
   u32 times[6U] ;
   u64 state_start ;
   u32 times_prev[2U][6U] ;
};
#line 96 
struct psi_group;
#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group {
   struct mutex avgs_lock ;
   struct psi_group_cpu *pcpu ;
   u64 avg_total[5U] ;
   u64 avg_last_update ;
   u64 avg_next_update ;
   struct delayed_work avgs_work ;
   u64 total[2U][5U] ;
   unsigned long avg[5U][3U] ;
   atomic_t poll_scheduled ;
   struct kthread_worker *poll_kworker ;
   struct kthread_delayed_work poll_work ;
   struct mutex trigger_lock ;
   struct list_head triggers ;
   u32 nr_triggers[5U] ;
   u32 poll_states ;
   u64 poll_min_period ;
   u64 polling_total[5U] ;
   u64 polling_next_update ;
   u64 polling_until ;
};
#line 166 
struct cgroup_root;
#line 167 
struct cgroup_subsys;
#line 168 
struct cgroup_taskset;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_file {
   struct kernfs_node *kn ;
   unsigned long notified_at ;
   struct timer_list notify_timer ;
};
#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys_state {
   struct cgroup *cgroup ;
   struct cgroup_subsys *ss ;
   struct percpu_ref refcnt ;
   struct list_head sibling ;
   struct list_head children ;
   struct list_head rstat_css_node ;
   int id ;
   unsigned int flags ;
   u64 serial_nr ;
   atomic_t online_cnt ;
   struct work_struct destroy_work ;
   struct rcu_work destroy_rwork ;
   struct cgroup_subsys_state *parent ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct css_set {
   struct cgroup_subsys_state *subsys[14U] ;
   refcount_t refcount ;
   struct css_set *dom_cset ;
   struct cgroup *dfl_cgrp ;
   int nr_tasks ;
   struct list_head tasks ;
   struct list_head mg_tasks ;
   struct list_head dying_tasks ;
   struct list_head task_iters ;
   struct list_head e_cset_node[14U] ;
   struct list_head threaded_csets ;
   struct list_head threaded_csets_node ;
   struct hlist_node hlist ;
   struct list_head cgrp_links ;
   struct list_head mg_preload_node ;
   struct list_head mg_node ;
   struct cgroup *mg_src_cgrp ;
   struct cgroup *mg_dst_cgrp ;
   struct css_set *mg_dst_cset ;
   bool dead ;
   struct callback_head callback_head ;
};
#line 279  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_base_stat {
   struct task_cputime cputime ;
};
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_rstat_cpu {
   struct u64_stats_sync bsync ;
   struct cgroup_base_stat bstat ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup *updated_children ;
   struct cgroup *updated_next ;
};
#line 332  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_freezer_state {
   bool freeze ;
   int e_freeze ;
   int nr_frozen_descendants ;
   int nr_frozen_tasks ;
};
#line 351  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup {
   struct cgroup_subsys_state self ;
   unsigned long flags ;
   int level ;
   int max_depth ;
   int nr_descendants ;
   int nr_dying_descendants ;
   int max_descendants ;
   int nr_populated_csets ;
   int nr_populated_domain_children ;
   int nr_populated_threaded_children ;
   int nr_threaded_children ;
   struct kernfs_node *kn ;
   struct cgroup_file procs_file ;
   struct cgroup_file events_file ;
   u16 subtree_control ;
   u16 subtree_ss_mask ;
   u16 old_subtree_control ;
   u16 old_subtree_ss_mask ;
   struct cgroup_subsys_state *subsys[14U] ;
   struct cgroup_root *root ;
   struct list_head cset_links ;
   struct list_head e_csets[14U] ;
   struct cgroup *dom_cgrp ;
   struct cgroup *old_dom_cgrp ;
   struct cgroup_rstat_cpu *rstat_cpu ;
   struct list_head rstat_css_list ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup_base_stat bstat ;
   struct prev_cputime prev_cputime ;
   struct list_head pidlists ;
   struct mutex pidlist_mutex ;
   wait_queue_head_t offline_waitq ;
   struct work_struct release_agent_work ;
   struct psi_group psi ;
   struct cgroup_bpf bpf ;
   atomic_t congestion_count ;
   struct cgroup_freezer_state freezer ;
   u64 ancestor_ids[] ;
};
#line 489  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_root {
   struct kernfs_root *kf_root ;
   unsigned int subsys_mask ;
   int hierarchy_id ;
   struct cgroup cgrp ;
   u64 cgrp_ancestor_id_storage ;
   atomic_t nr_cgrps ;
   struct list_head root_list ;
   unsigned int flags ;
   char release_agent_path[4096U] ;
   char name[64U] ;
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cftype {
   char name[64U] ;
   unsigned long private ;
   size_t max_write_len ;
   unsigned int flags ;
   unsigned int file_offset ;
   struct cgroup_subsys *ss ;
   struct list_head node ;
   struct kernfs_ops *kf_ops ;
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   u64 (*read_u64)(struct cgroup_subsys_state *, struct cftype *) ;
   s64 (*read_s64)(struct cgroup_subsys_state *, struct cftype *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   int (*write_u64)(struct cgroup_subsys_state *, struct cftype *, u64 ) ;
   int (*write_s64)(struct cgroup_subsys_state *, struct cftype *, s64 ) ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 616  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys {
   struct cgroup_subsys_state *(*css_alloc)(struct cgroup_subsys_state *) ;
   int (*css_online)(struct cgroup_subsys_state *) ;
   void (*css_offline)(struct cgroup_subsys_state *) ;
   void (*css_released)(struct cgroup_subsys_state *) ;
   void (*css_free)(struct cgroup_subsys_state *) ;
   void (*css_reset)(struct cgroup_subsys_state *) ;
   void (*css_rstat_flush)(struct cgroup_subsys_state *, int ) ;
   int (*css_extra_stat_show)(struct seq_file *, struct cgroup_subsys_state *) ;
   int (*can_attach)(struct cgroup_taskset *) ;
   void (*cancel_attach)(struct cgroup_taskset *) ;
   void (*attach)(struct cgroup_taskset *) ;
   void (*post_attach)(void) ;
   int (*can_fork)(struct task_struct *) ;
   void (*cancel_fork)(struct task_struct *) ;
   void (*fork)(struct task_struct *) ;
   void (*exit)(struct task_struct *) ;
   void (*release)(struct task_struct *) ;
   void (*bind)(struct cgroup_subsys_state *) ;
   bool early_init : 1 ;
   bool implicit_on_dfl : 1 ;
   bool threaded : 1 ;
   bool broken_hierarchy : 1 ;
   bool warned_broken_hierarchy : 1 ;
   int id ;
   char *name ;
   char *legacy_name ;
   struct cgroup_root *root ;
   struct idr css_idr ;
   struct list_head cfts ;
   struct cftype *dfl_cftypes ;
   struct cftype *legacy_cftypes ;
   unsigned int depends_on ;
};
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct __anonstruct_647 {
   u8 is_data ;
   u8 padding ;
   u16 prioidx ;
   u32 classid ;
} __attribute__((__packed__));
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
union __anonunion_646 {
   struct __anonstruct_647 __anonCompField___anonunion_646_151 ;
   u64 val ;
};
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct sock_cgroup_data {
   union __anonunion_646 __anonCompField_sock_cgroup_data_152 ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup.h"
struct cgroup_namespace {
   refcount_t count ;
   struct ns_common ns ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct css_set *root_cset ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netprio_cgroup.h"
struct netprio_map {
   struct callback_head rcu ;
   u32 priomap_len ;
   u32 priomap[] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_mem_info {
   u32 type ;
   u32 id ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_rxq_info {
   struct net_device *dev ;
   u32 queue_index ;
   u32 reg_state ;
   struct xdp_mem_info mem ;
} __attribute__((__aligned__(64)));
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_frame {
   void *data ;
   u16 len ;
   u16 headroom ;
   u16 metasize ;
   struct xdp_mem_info mem ;
   struct net_device *dev_rx ;
};
#line 175 
struct netdev_bpf;
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/security.h"
struct xfrm_policy;
#line 161 
struct xfrm_state;
#line 178 
struct request_sock;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct sighand_struct {
   spinlock_t siglock ;
   refcount_t count ;
   wait_queue_head_t signalfd_wqh ;
   struct k_sigaction action[64U] ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   u64 ac_utime ;
   u64 ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct cpu_itimer {
   u64 expires ;
   u64 incr ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct task_cputime_atomic {
   atomic64_t utime ;
   atomic64_t stime ;
   atomic64_t sum_exec_runtime ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct thread_group_cputimer {
   struct task_cputime_atomic cputime_atomic ;
};
#line 80 
struct tty_struct;
#line 80 
struct autogroup;
#line 80 
struct tty_audit_buf;
#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct signal_struct {
   refcount_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   struct list_head thread_head ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   struct hlist_head multiprocess ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   unsigned int is_child_subreaper : 1 ;
   unsigned int has_child_subreaper : 1 ;
   int posix_timer_id ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct posix_cputimers posix_cputimers ;
   struct pid *pids[4U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   struct autogroup *autogroup ;
   seqlock_t stats_lock ;
   u64 utime ;
   u64 stime ;
   u64 cutime ;
   u64 cstime ;
   u64 gtime ;
   u64 cgtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
   bool oom_flag_origin ;
   short oom_score_adj ;
   short oom_score_adj_min ;
   struct mm_struct *oom_mm ;
   struct mutex cred_guard_mutex ;
} __attribute__((__designated_init__));
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlmsghdr {
   __u32 nlmsg_len ;
   __u16 nlmsg_type ;
   __u16 nlmsg_flags ;
   __u32 nlmsg_seq ;
   __u32 nlmsg_pid ;
};
#line 211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_ext_ack {
   char *_msg ;
   struct nlattr *bad_attr ;
   u8 cookie[20U] ;
   u8 cookie_len ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
union __anonunion_670 {
   u8 ctx[48U] ;
   long args[6U] ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_callback {
   struct sk_buff *skb ;
   struct nlmsghdr *nlh ;
   int (*dump)(struct sk_buff *, struct netlink_callback *) ;
   int (*done)(struct netlink_callback *) ;
   void *data ;
   struct module *module ;
   struct netlink_ext_ack *extack ;
   u16 family ;
   u16 min_dump_alloc ;
   bool strict_check ;
   u16 answer_flags ;
   unsigned int prev_seq ;
   unsigned int seq ;
   union __anonunion_670 __anonCompField_netlink_callback_153 ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/neighbour.h"
struct ndmsg {
   __u8 ndm_family ;
   __u8 ndm_pad1 ;
   __u16 ndm_pad2 ;
   __s32 ndm_ifindex ;
   __u16 ndm_state ;
   __u8 ndm_flags ;
   __u8 ndm_type ;
};
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct rtnl_link_stats64 {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 rx_errors ;
   __u64 tx_errors ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
   __u64 multicast ;
   __u64 collisions ;
   __u64 rx_length_errors ;
   __u64 rx_over_errors ;
   __u64 rx_crc_errors ;
   __u64 rx_frame_errors ;
   __u64 rx_fifo_errors ;
   __u64 rx_missed_errors ;
   __u64 tx_aborted_errors ;
   __u64 tx_carrier_errors ;
   __u64 tx_fifo_errors ;
   __u64 tx_heartbeat_errors ;
   __u64 tx_window_errors ;
   __u64 rx_compressed ;
   __u64 tx_compressed ;
   __u64 rx_nohandler ;
};
#line 753  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct ifla_vf_guid {
   __u32 vf ;
   __u64 guid ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_stats {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 broadcast ;
   __u64 multicast ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_info {
   __u32 vf ;
   __u8 mac[32U] ;
   __u32 vlan ;
   __u32 qos ;
   __u32 spoofchk ;
   __u32 linkstate ;
   __u32 min_tx_rate ;
   __u32 max_tx_rate ;
   __u32 rss_query_en ;
   __u32 trusted ;
   __be16 vlan_proto ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/pkt_sched.h"
struct tc_stats {
   __u64 bytes ;
   __u32 packets ;
   __u32 drops ;
   __u32 overlimits ;
   __u32 bps ;
   __u32 pps ;
   __u32 qlen ;
   __u32 backlog ;
};
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/pkt_sched.h"
struct tc_sizespec {
   unsigned char cell_log ;
   unsigned char size_log ;
   short cell_align ;
   int overhead ;
   unsigned int linklayer ;
   unsigned int mpu ;
   unsigned int mtu ;
   unsigned int tsize ;
};
#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hashtable.h"
struct netpoll_info;
#line 119 
struct phy_device;
#line 120 
struct dsa_port;
#line 121 
struct sfp_bus;
#line 122 
struct wireless_dev;
#line 123 
struct wpan_dev;
#line 124 
struct mpls_dev;
#line 125 
struct udp_tunnel_info;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
enum netdev_tx {
    __NETDEV_TX_MIN = -2147483648,
    NETDEV_TX_OK = 0,
    NETDEV_TX_BUSY = 16
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum netdev_tx netdev_tx_t;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};
#line 195 
struct neigh_parms;
#line 217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_hw_addr_list {
   struct list_head list ;
   int count ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct hh_cache {
   unsigned int hh_len ;
   seqlock_t hh_lock ;
   unsigned long hh_data[16U] ;
};
#line 263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct header_ops {
   int (*create)(struct sk_buff *, struct net_device *, unsigned short , void *, void *, unsigned int ) ;
   int (*parse)(struct sk_buff *, unsigned char *) ;
   int (*cache)(struct neighbour *, struct hh_cache *, __be16 ) ;
   void (*cache_update)(struct hh_cache *, struct net_device *, unsigned char *) ;
   bool (*validate)(char *, unsigned int ) ;
   __be16 (*parse_protocol)(struct sk_buff *) ;
};
#line 372 
enum rx_handler_result {
    RX_HANDLER_CONSUMED = 0,
    RX_HANDLER_ANOTHER = 1,
    RX_HANDLER_EXACT = 2,
    RX_HANDLER_PASS = 3
};
#line 379  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum rx_handler_result rx_handler_result_t;
#line 421  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef rx_handler_result_t rx_handler_func_t(struct sk_buff **);
#line 589 
struct Qdisc;
#line 589 
struct xdp_umem;
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   struct Qdisc *qdisc_sleeping ;
   struct kobject kobj ;
   int numa_node ;
   unsigned long tx_maxrate ;
   unsigned long trans_timeout ;
   struct net_device *sb_dev ;
   struct xdp_umem *umem ;
   spinlock_t _xmit_lock ;
   int xmit_lock_owner ;
   unsigned long trans_start ;
   unsigned long state ;
   struct dql dql ;
} __attribute__((__aligned__(64)));
#line 662  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_map {
   unsigned int len ;
   struct callback_head rcu ;
   u16 cpus[0U] ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow {
   u16 cpu ;
   u16 filter ;
   unsigned int last_qtail ;
};
#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow_table {
   unsigned int mask ;
   struct callback_head rcu ;
   struct rps_dev_flow flows[0U] ;
};
#line 736  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_rx_queue {
   struct rps_map *rps_map ;
   struct rps_dev_flow_table *rps_flow_table ;
   struct kobject kobj ;
   struct net_device *dev ;
   struct xdp_rxq_info xdp_rxq ;
   struct xdp_umem *umem ;
} __attribute__((__aligned__(64)));
#line 764  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_map {
   unsigned int len ;
   unsigned int alloc_len ;
   struct callback_head rcu ;
   u16 queues[0U] ;
};
#line 777  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_dev_maps {
   struct callback_head rcu ;
   struct xps_map *attr_map[0U] ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_tc_txq {
   u16 count ;
   u16 offset ;
};
#line 803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_fcoe_hbainfo {
   char manufacturer[64U] ;
   char serial_number[64U] ;
   char hardware_version[64U] ;
   char driver_version[64U] ;
   char optionrom_version[64U] ;
   char firmware_version[64U] ;
   char model[256U] ;
   char model_description[256U] ;
};
#line 820  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_phys_item_id {
   unsigned char id[32U] ;
   unsigned char id_len ;
};
#line 833 
enum tc_setup_type {
    TC_SETUP_QDISC_MQPRIO = 0,
    TC_SETUP_CLSU32 = 1,
    TC_SETUP_CLSFLOWER = 2,
    TC_SETUP_CLSMATCHALL = 3,
    TC_SETUP_CLSBPF = 4,
    TC_SETUP_BLOCK = 5,
    TC_SETUP_QDISC_CBS = 6,
    TC_SETUP_QDISC_RED = 7,
    TC_SETUP_QDISC_PRIO = 8,
    TC_SETUP_QDISC_MQ = 9,
    TC_SETUP_QDISC_ETF = 10,
    TC_SETUP_ROOT_QDISC = 11,
    TC_SETUP_QDISC_GRED = 12,
    TC_SETUP_QDISC_TAPRIO = 13,
    TC_SETUP_FT = 14
};
#line 851 
enum bpf_netdev_command {
    XDP_SETUP_PROG = 0,
    XDP_SETUP_PROG_HW = 1,
    XDP_QUERY_PROG = 2,
    XDP_QUERY_PROG_HW = 3,
    BPF_OFFLOAD_MAP_ALLOC = 4,
    BPF_OFFLOAD_MAP_FREE = 5,
    XDP_SETUP_XSK_UMEM = 6
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_675 {
   u32 flags ;
   struct bpf_prog *prog ;
   struct netlink_ext_ack *extack ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_676 {
   u32 prog_id ;
   u32 prog_flags ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_677 {
   struct bpf_offloaded_map *offmap ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_xsk_678 {
   struct xdp_umem *umem ;
   u16 queue_id ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_674 {
   struct __anonstruct_675 __anonCompField___anonunion_674_155 ;
   struct __anonstruct_676 __anonCompField___anonunion_674_156 ;
   struct __anonstruct_677 __anonCompField___anonunion_674_157 ;
   struct __anonstruct_xsk_678 xsk ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_bpf {
   enum bpf_netdev_command command ;
   union __anonunion_674 __anonCompField_netdev_bpf_158 ;
};
#line 911  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xfrmdev_ops {
   int (*xdo_dev_state_add)(struct xfrm_state *) ;
   void (*xdo_dev_state_delete)(struct xfrm_state *) ;
   void (*xdo_dev_state_free)(struct xfrm_state *) ;
   bool (*xdo_dev_offload_ok)(struct sk_buff *, struct xfrm_state *) ;
   void (*xdo_dev_state_advance_esn)(struct xfrm_state *) ;
};
#line 921  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct dev_ifalias {
   struct callback_head rcuhead ;
   char ifalias[] ;
};
#line 926 
struct tlsdev_ops;
#line 929  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_name_node {
   struct hlist_node hlist ;
   struct list_head list ;
   struct net_device *dev ;
   char *name ;
};
#line 1257 
struct devlink_port;
#line 1257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_ops {
   int (*ndo_init)(struct net_device *) ;
   void (*ndo_uninit)(struct net_device *) ;
   int (*ndo_open)(struct net_device *) ;
   int (*ndo_stop)(struct net_device *) ;
   netdev_tx_t (*ndo_start_xmit)(struct sk_buff *, struct net_device *) ;
   netdev_features_t (*ndo_features_check)(struct sk_buff *, struct net_device *, netdev_features_t ) ;
   u16 (*ndo_select_queue)(struct net_device *, struct sk_buff *, struct net_device *) ;
   void (*ndo_change_rx_flags)(struct net_device *, int ) ;
   void (*ndo_set_rx_mode)(struct net_device *) ;
   int (*ndo_set_mac_address)(struct net_device *, void *) ;
   int (*ndo_validate_addr)(struct net_device *) ;
   int (*ndo_do_ioctl)(struct net_device *, struct ifreq *, int ) ;
   int (*ndo_set_config)(struct net_device *, struct ifmap *) ;
   int (*ndo_change_mtu)(struct net_device *, int ) ;
   int (*ndo_neigh_setup)(struct net_device *, struct neigh_parms *) ;
   void (*ndo_tx_timeout)(struct net_device *) ;
   void (*ndo_get_stats64)(struct net_device *, struct rtnl_link_stats64 *) ;
   bool (*ndo_has_offload_stats)(struct net_device *, int ) ;
   int (*ndo_get_offload_stats)(int , struct net_device *, void *) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device *) ;
   int (*ndo_vlan_rx_add_vid)(struct net_device *, __be16 , u16 ) ;
   int (*ndo_vlan_rx_kill_vid)(struct net_device *, __be16 , u16 ) ;
   void (*ndo_poll_controller)(struct net_device *) ;
   int (*ndo_netpoll_setup)(struct net_device *, struct netpoll_info *) ;
   void (*ndo_netpoll_cleanup)(struct net_device *) ;
   int (*ndo_set_vf_mac)(struct net_device *, int , u8 *) ;
   int (*ndo_set_vf_vlan)(struct net_device *, int , u16 , u8 , __be16 ) ;
   int (*ndo_set_vf_rate)(struct net_device *, int , int , int ) ;
   int (*ndo_set_vf_spoofchk)(struct net_device *, int , bool ) ;
   int (*ndo_set_vf_trust)(struct net_device *, int , bool ) ;
   int (*ndo_get_vf_config)(struct net_device *, int , struct ifla_vf_info *) ;
   int (*ndo_set_vf_link_state)(struct net_device *, int , int ) ;
   int (*ndo_get_vf_stats)(struct net_device *, int , struct ifla_vf_stats *) ;
   int (*ndo_set_vf_port)(struct net_device *, int , struct nlattr **) ;
   int (*ndo_get_vf_port)(struct net_device *, int , struct sk_buff *) ;
   int (*ndo_get_vf_guid)(struct net_device *, int , struct ifla_vf_guid *, struct ifla_vf_guid *) ;
   int (*ndo_set_vf_guid)(struct net_device *, int , u64 , int ) ;
   int (*ndo_set_vf_rss_query_en)(struct net_device *, int , bool ) ;
   int (*ndo_setup_tc)(struct net_device *, enum tc_setup_type , void *) ;
   int (*ndo_fcoe_enable)(struct net_device *) ;
   int (*ndo_fcoe_disable)(struct net_device *) ;
   int (*ndo_fcoe_ddp_setup)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_ddp_done)(struct net_device *, u16 ) ;
   int (*ndo_fcoe_ddp_target)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_get_hbainfo)(struct net_device *, struct netdev_fcoe_hbainfo *) ;
   int (*ndo_fcoe_get_wwn)(struct net_device *, u64 *, int ) ;
   int (*ndo_rx_flow_steer)(struct net_device *, struct sk_buff *, u16 , u32 ) ;
   int (*ndo_add_slave)(struct net_device *, struct net_device *, struct netlink_ext_ack *) ;
   int (*ndo_del_slave)(struct net_device *, struct net_device *) ;
   netdev_features_t (*ndo_fix_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_set_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_neigh_construct)(struct net_device *, struct neighbour *) ;
   void (*ndo_neigh_destroy)(struct net_device *, struct neighbour *) ;
   int (*ndo_fdb_add)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 , u16 , struct netlink_ext_ack *) ;
   int (*ndo_fdb_del)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 ) ;
   int (*ndo_fdb_dump)(struct sk_buff *, struct netlink_callback *, struct net_device *, struct net_device *, int *) ;
   int (*ndo_fdb_get)(struct sk_buff *, struct nlattr **, struct net_device *, unsigned char *, u16 , u32 , u32 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_setlink)(struct net_device *, struct nlmsghdr *, u16 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_getlink)(struct sk_buff *, u32 , u32 , struct net_device *, u32 , int ) ;
   int (*ndo_bridge_dellink)(struct net_device *, struct nlmsghdr *, u16 ) ;
   int (*ndo_change_carrier)(struct net_device *, bool ) ;
   int (*ndo_get_phys_port_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_port_parent_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_phys_port_name)(struct net_device *, char *, size_t ) ;
   void (*ndo_udp_tunnel_add)(struct net_device *, struct udp_tunnel_info *) ;
   void (*ndo_udp_tunnel_del)(struct net_device *, struct udp_tunnel_info *) ;
   void *(*ndo_dfwd_add_station)(struct net_device *, struct net_device *) ;
   void (*ndo_dfwd_del_station)(struct net_device *, void *) ;
   int (*ndo_set_tx_maxrate)(struct net_device *, int , u32 ) ;
   int (*ndo_get_iflink)(struct net_device *) ;
   int (*ndo_change_proto_down)(struct net_device *, bool ) ;
   int (*ndo_fill_metadata_dst)(struct net_device *, struct sk_buff *) ;
   void (*ndo_set_rx_headroom)(struct net_device *, int ) ;
   int (*ndo_bpf)(struct net_device *, struct netdev_bpf *) ;
   int (*ndo_xdp_xmit)(struct net_device *, int , struct xdp_frame **, u32 ) ;
   int (*ndo_xsk_wakeup)(struct net_device *, u32 , u32 ) ;
   struct devlink_port *(*ndo_get_devlink_port)(struct net_device *) ;
};
#line 1492 
enum ldv_14511 {
    NETREG_UNINITIALIZED = 0,
    NETREG_REGISTERED = 1,
    NETREG_UNREGISTERING = 2,
    NETREG_UNREGISTERED = 3,
    NETREG_RELEASED = 4,
    NETREG_DUMMY = 5
};
#line 1501 
enum ldv_14512 {
    RTNL_LINK_INITIALIZED = 0,
    RTNL_LINK_INITIALIZING = 1
};
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_adj_list_679 {
   struct list_head upper ;
   struct list_head lower ;
};
#line 1795 
struct iw_handler_def;
#line 1795 
struct iw_public_data;
#line 1795 
struct l3mdev_ops;
#line 1795 
struct ndisc_ops;
#line 1795 
struct vlan_info;
#line 1795 
struct tipc_bearer;
#line 1795 
struct in_device;
#line 1795 
struct dn_dev;
#line 1795 
struct inet6_dev;
#line 1795 
struct mini_Qdisc;
#line 1795 
struct cpu_rmap;
#line 1795 
struct pcpu_lstats;
#line 1795 
struct pcpu_sw_netstats;
#line 1795 
struct pcpu_dstats;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_680 {
   void *ml_priv ;
   struct pcpu_lstats *lstats ;
   struct pcpu_sw_netstats *tstats ;
   struct pcpu_dstats *dstats ;
};
#line 1795 
struct garp_port;
#line 1795 
struct mrp_port;
#line 1795 
struct rtnl_link_ops;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device {
   char name[16U] ;
   struct netdev_name_node *name_node ;
   struct dev_ifalias *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   int irq ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   struct list_head unreg_list ;
   struct list_head close_list ;
   struct list_head ptype_all ;
   struct list_head ptype_specific ;
   struct __anonstruct_adj_list_679 adj_list ;
   netdev_features_t features ;
   netdev_features_t hw_features ;
   netdev_features_t wanted_features ;
   netdev_features_t vlan_features ;
   netdev_features_t hw_enc_features ;
   netdev_features_t mpls_features ;
   netdev_features_t gso_partial_features ;
   int ifindex ;
   int group ;
   struct net_device_stats stats ;
   atomic_long_t rx_dropped ;
   atomic_long_t tx_dropped ;
   atomic_long_t rx_nohandler ;
   atomic_t carrier_up_count ;
   atomic_t carrier_down_count ;
   struct iw_handler_def *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops *netdev_ops ;
   struct ethtool_ops *ethtool_ops ;
   struct l3mdev_ops *l3mdev_ops ;
   struct ndisc_ops *ndisc_ops ;
   struct xfrmdev_ops *xfrmdev_ops ;
   struct tlsdev_ops *tlsdev_ops ;
   struct header_ops *header_ops ;
   unsigned int flags ;
   unsigned int priv_flags ;
   unsigned short gflags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned int mtu ;
   unsigned int min_mtu ;
   unsigned int max_mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned char min_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   unsigned char perm_addr[32U] ;
   unsigned char addr_assign_type ;
   unsigned char addr_len ;
   unsigned char upper_level ;
   unsigned char lower_level ;
   unsigned short neigh_priv_len ;
   unsigned short dev_id ;
   unsigned short dev_port ;
   spinlock_t addr_list_lock ;
   unsigned char name_assign_type ;
   bool uc_promisc ;
   struct netdev_hw_addr_list uc ;
   struct netdev_hw_addr_list mc ;
   struct netdev_hw_addr_list dev_addrs ;
   struct kset *queues_kset ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   struct vlan_info *vlan_info ;
   struct dsa_port *dsa_ptr ;
   struct tipc_bearer *tipc_ptr ;
   void *atalk_ptr ;
   struct in_device *ip_ptr ;
   struct dn_dev *dn_ptr ;
   struct inet6_dev *ip6_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   struct wpan_dev *ieee802154_ptr ;
   struct mpls_dev *mpls_ptr ;
   unsigned char *dev_addr ;
   struct netdev_rx_queue *_rx ;
   unsigned int num_rx_queues ;
   unsigned int real_num_rx_queues ;
   struct bpf_prog *xdp_prog ;
   unsigned long gro_flush_timeout ;
   rx_handler_func_t *rx_handler ;
   void *rx_handler_data ;
   struct mini_Qdisc *miniq_ingress ;
   struct netdev_queue *ingress_queue ;
   struct nf_hook_entries *nf_hooks_ingress ;
   unsigned char broadcast[32U] ;
   struct cpu_rmap *rx_cpu_rmap ;
   struct hlist_node index_hlist ;
   struct netdev_queue *_tx ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   struct Qdisc *qdisc ;
   struct hlist_head qdisc_hash[16U] ;
   unsigned int tx_queue_len ;
   spinlock_t tx_global_lock ;
   int watchdog_timeo ;
   struct xps_dev_maps *xps_cpus_map ;
   struct xps_dev_maps *xps_rxqs_map ;
   struct mini_Qdisc *miniq_egress ;
   struct timer_list watchdog_timer ;
   int *pcpu_refcnt ;
   struct list_head todo_list ;
   struct list_head link_watch_list ;
   enum ldv_14511 reg_state : 8 ;
   bool dismantle ;
   enum ldv_14512 rtnl_link_state : 16 ;
   bool needs_free_netdev ;
   void (*priv_destructor)(struct net_device *) ;
   struct netpoll_info *npinfo ;
   possible_net_t nd_net ;
   union __anonunion_680 __anonCompField_net_device_159 ;
   struct garp_port *garp_port ;
   struct mrp_port *mrp_port ;
   struct device dev ;
   struct attribute_group *sysfs_groups[4U] ;
   struct attribute_group *sysfs_rx_queue_group ;
   struct rtnl_link_ops *rtnl_link_ops ;
   unsigned int gso_max_size ;
   u16 gso_max_segs ;
   struct dcbnl_rtnl_ops *dcbnl_ops ;
   s16 num_tc ;
   struct netdev_tc_txq tc_to_txq[16U] ;
   u8 prio_tc_map[16U] ;
   unsigned int fcoe_ddp_xid ;
   struct netprio_map *priomap ;
   struct phy_device *phydev ;
   struct sfp_bus *sfp_bus ;
   struct lock_class_key qdisc_tx_busylock_key ;
   struct lock_class_key qdisc_running_key ;
   struct lock_class_key qdisc_xmit_lock_key ;
   struct lock_class_key addr_list_lock_key ;
   bool proto_down ;
   unsigned int wol_enabled : 1 ;
};
#line 2400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_sw_netstats {
   u64 rx_packets ;
   u64 rx_bytes ;
   u64 tx_packets ;
   u64 tx_bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(32)));
#line 2408  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_lstats {
   u64_stats_t packets ;
   u64_stats_t bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 534  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
typedef unsigned long kernel_ulong_t;
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct acpi_device_id {
   __u8 id[9U] ;
   kernel_ulong_t driver_data ;
   __u32 cls ;
   __u32 cls_msk ;
};
#line 260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct of_device_id {
   char name[32U] ;
   char type[32U] ;
   char compatible[128U] ;
   void *data ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/usb/ch9.h"
struct usb_device_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __le16 bcdUSB ;
   __u8 bDeviceClass ;
   __u8 bDeviceSubClass ;
   __u8 bDeviceProtocol ;
   __u8 bMaxPacketSize0 ;
   __le16 idVendor ;
   __le16 idProduct ;
   __le16 bcdDevice ;
   __u8 iManufacturer ;
   __u8 iProduct ;
   __u8 iSerialNumber ;
   __u8 bNumConfigurations ;
} __attribute__((__packed__));
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/usb/ch9.h"
struct usb_config_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __le16 wTotalLength ;
   __u8 bNumInterfaces ;
   __u8 bConfigurationValue ;
   __u8 iConfiguration ;
   __u8 bmAttributes ;
   __u8 bMaxPower ;
} __attribute__((__packed__));
#line 382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/usb/ch9.h"
struct usb_interface_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bInterfaceNumber ;
   __u8 bAlternateSetting ;
   __u8 bNumEndpoints ;
   __u8 bInterfaceClass ;
   __u8 bInterfaceSubClass ;
   __u8 bInterfaceProtocol ;
   __u8 iInterface ;
} __attribute__((__packed__));
#line 400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/usb/ch9.h"
struct usb_endpoint_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bEndpointAddress ;
   __u8 bmAttributes ;
   __le16 wMaxPacketSize ;
   __u8 bInterval ;
   __u8 bRefresh ;
   __u8 bSynchAddress ;
} __attribute__((__packed__));
#line 670  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/usb/ch9.h"
struct usb_ssp_isoc_ep_comp_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __le16 wReseved ;
   __le32 dwBytesPerInterval ;
} __attribute__((__packed__));
#line 682  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/usb/ch9.h"
struct usb_ss_ep_comp_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bMaxBurst ;
   __u8 bmAttributes ;
   __le16 wBytesPerInterval ;
} __attribute__((__packed__));
#line 776  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/usb/ch9.h"
struct usb_interface_assoc_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bFirstInterface ;
   __u8 bInterfaceCount ;
   __u8 bFunctionClass ;
   __u8 bFunctionSubClass ;
   __u8 bFunctionProtocol ;
   __u8 iFunction ;
} __attribute__((__packed__));
#line 837  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/usb/ch9.h"
struct usb_bos_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __le16 wTotalLength ;
   __u8 bNumDeviceCaps ;
} __attribute__((__packed__));
#line 888  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/usb/ch9.h"
struct usb_ext_cap_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bDevCapabilityType ;
   __le32 bmAttributes ;
} __attribute__((__packed__));
#line 910  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/usb/ch9.h"
struct usb_ss_cap_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bDevCapabilityType ;
   __u8 bmAttributes ;
   __le16 wSpeedSupported ;
   __u8 bFunctionalitySupport ;
   __u8 bU1devExitLat ;
   __le16 bU2DevExitLat ;
} __attribute__((__packed__));
#line 933  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/usb/ch9.h"
struct usb_ss_container_id_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bDevCapabilityType ;
   __u8 bReserved ;
   __u8 ContainerID[16U] ;
} __attribute__((__packed__));
#line 948  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/usb/ch9.h"
struct usb_ssp_cap_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bDevCapabilityType ;
   __u8 bReserved ;
   __le32 bmAttributes ;
   __le16 wFunctionalitySupport ;
   __le16 wReserved ;
   __le32 bmSublinkSpeedAttr[1U] ;
} __attribute__((__packed__));
#line 1073  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/usb/ch9.h"
struct usb_ptm_cap_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bDevCapabilityType ;
} __attribute__((__packed__));
#line 1134 
enum usb_device_speed {
    USB_SPEED_UNKNOWN = 0,
    USB_SPEED_LOW = 1,
    USB_SPEED_FULL = 2,
    USB_SPEED_HIGH = 3,
    USB_SPEED_WIRELESS = 4,
    USB_SPEED_SUPER = 5,
    USB_SPEED_SUPER_PLUS = 6
};
#line 1144 
enum usb_device_state {
    USB_STATE_NOTATTACHED = 0,
    USB_STATE_ATTACHED = 1,
    USB_STATE_POWERED = 2,
    USB_STATE_RECONNECTING = 3,
    USB_STATE_UNAUTHENTICATED = 4,
    USB_STATE_DEFAULT = 5,
    USB_STATE_ADDRESS = 6,
    USB_STATE_CONFIGURED = 7,
    USB_STATE_SUSPENDED = 8
};
#line 279  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_runtime.h"
struct usb_device;
#line 281 
struct wusb_dev;
#line 282 
struct ep_device;
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/usb.h"
struct usb_host_endpoint {
   struct usb_endpoint_descriptor desc ;
   struct usb_ss_ep_comp_descriptor ss_ep_comp ;
   struct usb_ssp_isoc_ep_comp_descriptor ssp_isoc_ep_comp ;
   struct list_head urb_list ;
   void *hcpriv ;
   struct ep_device *ep_dev ;
   unsigned char *extra ;
   int extralen ;
   int enabled ;
   int streams ;
};
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/usb.h"
struct usb_host_interface {
   struct usb_interface_descriptor desc ;
   int extralen ;
   unsigned char *extra ;
   struct usb_host_endpoint *endpoint ;
   char *string ;
};
#line 95 
enum usb_interface_condition {
    USB_INTERFACE_UNBOUND = 0,
    USB_INTERFACE_BINDING = 1,
    USB_INTERFACE_BOUND = 2,
    USB_INTERFACE_UNBINDING = 3
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/usb.h"
struct usb_interface {
   struct usb_host_interface *altsetting ;
   struct usb_host_interface *cur_altsetting ;
   unsigned int num_altsetting ;
   struct usb_interface_assoc_descriptor *intf_assoc ;
   int minor ;
   enum usb_interface_condition condition ;
   unsigned int sysfs_files_created : 1 ;
   unsigned int ep_devs_created : 1 ;
   unsigned int unregistering : 1 ;
   unsigned int needs_remote_wakeup : 1 ;
   unsigned int needs_altsetting0 : 1 ;
   unsigned int needs_binding : 1 ;
   unsigned int resetting_device : 1 ;
   unsigned int authorized : 1 ;
   struct device dev ;
   struct device *usb_dev ;
   struct work_struct reset_ws ;
};
#line 322  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/usb.h"
struct usb_interface_cache {
   unsigned int num_altsetting ;
   struct kref ref ;
   struct usb_host_interface altsetting[0U] ;
};
#line 374  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/usb.h"
struct usb_host_config {
   struct usb_config_descriptor desc ;
   char *string ;
   struct usb_interface_assoc_descriptor *intf_assoc[16U] ;
   struct usb_interface *interface[32U] ;
   struct usb_interface_cache *intf_cache[32U] ;
   unsigned char *extra ;
   int extralen ;
};
#line 396  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/usb.h"
struct usb_host_bos {
   struct usb_bos_descriptor *desc ;
   struct usb_ext_cap_descriptor *ext_cap ;
   struct usb_ss_cap_descriptor *ss_cap ;
   struct usb_ssp_cap_descriptor *ssp_cap ;
   struct usb_ss_container_id_descriptor *ss_id ;
   struct usb_ptm_cap_descriptor *ptm_cap ;
};
#line 417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/usb.h"
struct usb_devmap {
   unsigned long devicemap[2U] ;
};
#line 424 
struct mon_bus;
#line 424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/usb.h"
struct usb_bus {
   struct device *controller ;
   struct device *sysdev ;
   int busnum ;
   char *bus_name ;
   u8 uses_pio_for_control ;
   u8 otg_port ;
   unsigned int is_b_host : 1 ;
   unsigned int b_hnp_enable : 1 ;
   unsigned int no_stop_on_short : 1 ;
   unsigned int no_sg_constraint : 1 ;
   unsigned int sg_tablesize ;
   int devnum_next ;
   struct mutex devnum_next_mutex ;
   struct usb_devmap devmap ;
   struct usb_device *root_hub ;
   struct usb_bus *hs_companion ;
   int bandwidth_allocated ;
   int bandwidth_int_reqs ;
   int bandwidth_isoc_reqs ;
   unsigned int resuming_ports ;
   struct mon_bus *mon_bus ;
   int monitored ;
};
#line 469 
struct usb_tt;
#line 470 
enum usb_device_removable {
    USB_DEVICE_REMOVABLE_UNKNOWN = 0,
    USB_DEVICE_REMOVABLE = 1,
    USB_DEVICE_FIXED = 2
};
#line 502  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/usb.h"
struct usb2_lpm_parameters {
   unsigned int besl ;
   int timeout ;
};
#line 522  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/usb.h"
struct usb3_lpm_parameters {
   unsigned int mel ;
   unsigned int pel ;
   unsigned int sel ;
   int timeout ;
};
#line 631  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/usb.h"
struct usb_device {
   int devnum ;
   char devpath[16U] ;
   u32 route ;
   enum usb_device_state state ;
   enum usb_device_speed speed ;
   unsigned int rx_lanes ;
   unsigned int tx_lanes ;
   struct usb_tt *tt ;
   int ttport ;
   unsigned int toggle[2U] ;
   struct usb_device *parent ;
   struct usb_bus *bus ;
   struct usb_host_endpoint ep0 ;
   struct device dev ;
   struct usb_device_descriptor descriptor ;
   struct usb_host_bos *bos ;
   struct usb_host_config *config ;
   struct usb_host_config *actconfig ;
   struct usb_host_endpoint *ep_in[16U] ;
   struct usb_host_endpoint *ep_out[16U] ;
   char **rawdescriptors ;
   unsigned short bus_mA ;
   u8 portnum ;
   u8 level ;
   u8 devaddr ;
   unsigned int can_submit : 1 ;
   unsigned int persist_enabled : 1 ;
   unsigned int have_langid : 1 ;
   unsigned int authorized : 1 ;
   unsigned int authenticated : 1 ;
   unsigned int wusb : 1 ;
   unsigned int lpm_capable : 1 ;
   unsigned int usb2_hw_lpm_capable : 1 ;
   unsigned int usb2_hw_lpm_besl_capable : 1 ;
   unsigned int usb2_hw_lpm_enabled : 1 ;
   unsigned int usb2_hw_lpm_allowed : 1 ;
   unsigned int usb3_lpm_u1_enabled : 1 ;
   unsigned int usb3_lpm_u2_enabled : 1 ;
   int string_langid ;
   char *product ;
   char *manufacturer ;
   char *serial ;
   struct list_head filelist ;
   int maxchild ;
   u32 quirks ;
   atomic_t urbnum ;
   unsigned long active_duration ;
   unsigned long connect_time ;
   unsigned int do_remote_wakeup : 1 ;
   unsigned int reset_resume : 1 ;
   unsigned int port_is_suspended : 1 ;
   struct wusb_dev *wusb_dev ;
   int slot_id ;
   enum usb_device_removable removable ;
   struct usb2_lpm_parameters l1_params ;
   struct usb3_lpm_parameters u1_params ;
   struct usb3_lpm_parameters u2_params ;
   unsigned int lpm_disable_count ;
   u16 hub_delay ;
};
#line 1340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/usb.h"
struct usb_iso_packet_descriptor {
   unsigned int offset ;
   unsigned int length ;
   unsigned int actual_length ;
   int status ;
};
#line 1346 
struct urb;
#line 1349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/usb.h"
struct usb_anchor {
   struct list_head urb_list ;
   wait_queue_head_t wait ;
   spinlock_t lock ;
   atomic_t suspend_wakeups ;
   unsigned int poisoned : 1 ;
};
#line 1550  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/usb.h"
struct urb {
   struct kref kref ;
   int unlinked ;
   void *hcpriv ;
   atomic_t use_count ;
   atomic_t reject ;
   struct list_head urb_list ;
   struct list_head anchor_list ;
   struct usb_anchor *anchor ;
   struct usb_device *dev ;
   struct usb_host_endpoint *ep ;
   unsigned int pipe ;
   unsigned int stream_id ;
   int status ;
   unsigned int transfer_flags ;
   void *transfer_buffer ;
   dma_addr_t transfer_dma ;
   struct scatterlist *sg ;
   int num_mapped_sgs ;
   int num_sgs ;
   u32 transfer_buffer_length ;
   u32 actual_length ;
   unsigned char *setup_packet ;
   dma_addr_t setup_dma ;
   int start_frame ;
   int number_of_packets ;
   int interval ;
   int error_count ;
   void *context ;
   void (*complete)(struct urb *) ;
   struct usb_iso_packet_descriptor iso_frame_desc[0U] ;
};
#line 233  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_hdr {
   __le16 frame_control ;
   __le16 duration_id ;
   u8 addr1[6U] ;
   u8 addr2[6U] ;
   u8 addr3[6U] ;
   __le16 seq_ctrl ;
   u8 addr4[6U] ;
} __attribute__((__packed__, __aligned__(2)));
#line 1227  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_p2p_noa_desc {
   u8 count ;
   __le32 duration ;
   __le32 interval ;
   __le32 start_time ;
} __attribute__((__packed__));
#line 1234  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_p2p_noa_attr {
   u8 index ;
   u8 oppps_ctwindow ;
   struct ieee80211_p2p_noa_desc desc[4U] ;
} __attribute__((__packed__));
#line 1276  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_mcs_info {
   u8 rx_mask[10U] ;
   __le16 rx_highest ;
   u8 tx_params ;
   u8 reserved[3U] ;
} __attribute__((__packed__));
#line 1310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_ht_cap {
   __le16 cap_info ;
   u8 ampdu_params_info ;
   struct ieee80211_mcs_info mcs ;
   __le16 extended_ht_cap_info ;
   __le32 tx_BF_cap_info ;
   u8 antenna_selection_info ;
} __attribute__((__packed__));
#line 1483  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_vht_mcs_info {
   __le16 rx_mcs_map ;
   __le16 rx_highest ;
   __le16 tx_mcs_map ;
   __le16 tx_highest ;
} __attribute__((__packed__));
#line 1526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_vht_cap {
   __le32 vht_cap_info ;
   struct ieee80211_vht_mcs_info supp_mcs ;
} __attribute__((__packed__));
#line 1569  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_he_cap_elem {
   u8 mac_cap_info[6U] ;
   u8 phy_cap_info[11U] ;
} __attribute__((__packed__));
#line 1616  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_he_mcs_nss_supp {
   __le16 rx_mcs_80 ;
   __le16 tx_mcs_80 ;
   __le16 rx_mcs_160 ;
   __le16 tx_mcs_160 ;
   __le16 rx_mcs_80p80 ;
   __le16 tx_mcs_80p80 ;
} __attribute__((__packed__));
#line 1631  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_he_operation {
   __le32 he_oper_params ;
   __le16 he_mcs_nss_set ;
   u8 optional[0U] ;
} __attribute__((__packed__));
#line 1656  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_he_mu_edca_param_ac_rec {
   u8 aifsn ;
   u8 ecw_min_max ;
   u8 mu_edca_timer ;
} __attribute__((__packed__));
#line 811  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/debugfs.h"
enum nl80211_iftype {
    NL80211_IFTYPE_UNSPECIFIED = 0,
    NL80211_IFTYPE_ADHOC = 1,
    NL80211_IFTYPE_STATION = 2,
    NL80211_IFTYPE_AP = 3,
    NL80211_IFTYPE_AP_VLAN = 4,
    NL80211_IFTYPE_WDS = 5,
    NL80211_IFTYPE_MONITOR = 6,
    NL80211_IFTYPE_MESH_POINT = 7,
    NL80211_IFTYPE_P2P_CLIENT = 8,
    NL80211_IFTYPE_P2P_GO = 9,
    NL80211_IFTYPE_P2P_DEVICE = 10,
    NL80211_IFTYPE_OCB = 11,
    NL80211_IFTYPE_NAN = 12,
    NUM_NL80211_IFTYPES = 13,
    NL80211_IFTYPE_MAX = 12
};
#line 3263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/nl80211.h"
enum nl80211_reg_initiator {
    NL80211_REGDOM_SET_BY_CORE = 0,
    NL80211_REGDOM_SET_BY_USER = 1,
    NL80211_REGDOM_SET_BY_DRIVER = 2,
    NL80211_REGDOM_SET_BY_COUNTRY_IE = 3
};
#line 3320 
enum nl80211_dfs_regions {
    NL80211_DFS_UNSET = 0,
    NL80211_DFS_FCC = 1,
    NL80211_DFS_ETSI = 2,
    NL80211_DFS_JP = 3
};
#line 3327 
enum nl80211_user_reg_hint_type {
    NL80211_USER_REG_HINT_USER = 0,
    NL80211_USER_REG_HINT_CELL_BASE = 1,
    NL80211_USER_REG_HINT_INDOOR = 2
};
#line 3439 
enum nl80211_channel_type {
    NL80211_CHAN_NO_HT = 0,
    NL80211_CHAN_HT20 = 1,
    NL80211_CHAN_HT40MINUS = 2,
    NL80211_CHAN_HT40PLUS = 3
};
#line 3446 
enum nl80211_key_mode {
    NL80211_KEY_RX_TX = 0,
    NL80211_KEY_NO_TX = 1,
    NL80211_KEY_SET_TX = 2
};
#line 3452 
enum nl80211_chan_width {
    NL80211_CHAN_WIDTH_20_NOHT = 0,
    NL80211_CHAN_WIDTH_20 = 1,
    NL80211_CHAN_WIDTH_40 = 2,
    NL80211_CHAN_WIDTH_80 = 3,
    NL80211_CHAN_WIDTH_80P80 = 4,
    NL80211_CHAN_WIDTH_160 = 5,
    NL80211_CHAN_WIDTH_5 = 6,
    NL80211_CHAN_WIDTH_10 = 7
};
#line 3463 
enum nl80211_bss_scan_width {
    NL80211_BSS_CHAN_WIDTH_20 = 0,
    NL80211_BSS_CHAN_WIDTH_10 = 1,
    NL80211_BSS_CHAN_WIDTH_5 = 2
};
#line 3500 
enum nl80211_auth_type {
    NL80211_AUTHTYPE_OPEN_SYSTEM = 0,
    NL80211_AUTHTYPE_SHARED_KEY = 1,
    NL80211_AUTHTYPE_FT = 2,
    NL80211_AUTHTYPE_NETWORK_EAP = 3,
    NL80211_AUTHTYPE_SAE = 4,
    NL80211_AUTHTYPE_FILS_SK = 5,
    NL80211_AUTHTYPE_FILS_SK_PFS = 6,
    NL80211_AUTHTYPE_FILS_PK = 7,
    __NL80211_AUTHTYPE_NUM = 8,
    NL80211_AUTHTYPE_MAX = 7,
    NL80211_AUTHTYPE_AUTOMATIC = 8
};
#line 3521 
enum nl80211_mfp {
    NL80211_MFP_NO = 0,
    NL80211_MFP_REQUIRED = 1,
    NL80211_MFP_OPTIONAL = 2
};
#line 4599 
enum nl80211_band {
    NL80211_BAND_2GHZ = 0,
    NL80211_BAND_5GHZ = 1,
    NL80211_BAND_60GHZ = 2,
    NL80211_BAND_6GHZ = 3,
    NUM_NL80211_BANDS = 4
};
#line 4633 
enum nl80211_tx_power_setting {
    NL80211_TX_POWER_AUTOMATIC = 0,
    NL80211_TX_POWER_LIMITED = 1,
    NL80211_TX_POWER_FIXED = 2
};
#line 4914  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/nl80211.h"
struct nl80211_wowlan_tcp_data_seq {
   __u32 start ;
   __u32 offset ;
   __u32 len ;
};
#line 4925  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/nl80211.h"
struct nl80211_wowlan_tcp_data_token {
   __u32 offset ;
   __u32 len ;
   __u8 token_stream[] ;
};
#line 4936  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/nl80211.h"
struct nl80211_wowlan_tcp_data_token_feature {
   __u32 min_len ;
   __u32 max_len ;
   __u32 bufsize ;
};
#line 5237 
enum nl80211_dfs_state {
    NL80211_DFS_USABLE = 0,
    NL80211_DFS_UNAVAILABLE = 1,
    NL80211_DFS_AVAILABLE = 2
};
#line 5847  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/nl80211.h"
struct nl80211_vendor_cmd_info {
   __u32 vendor_id ;
   __u32 subcmd ;
};
#line 5903 
enum nl80211_bss_select_attr {
    __NL80211_BSS_SELECT_ATTR_INVALID = 0,
    NL80211_BSS_SELECT_ATTR_RSSI = 1,
    NL80211_BSS_SELECT_ATTR_BAND_PREF = 2,
    NL80211_BSS_SELECT_ATTR_RSSI_ADJUST = 3,
    __NL80211_BSS_SELECT_ATTR_AFTER_LAST = 4,
    NL80211_BSS_SELECT_ATTR_MAX = 3
};
#line 6138 
enum environment_cap {
    ENVIRON_ANY = 0,
    ENVIRON_INDOOR = 1,
    ENVIRON_OUTDOOR = 2
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/regulatory.h"
struct regulatory_request {
   struct callback_head callback_head ;
   int wiphy_idx ;
   enum nl80211_reg_initiator initiator ;
   enum nl80211_user_reg_hint_type user_reg_hint_type ;
   char alpha2[3U] ;
   enum nl80211_dfs_regions dfs_region ;
   bool intersect ;
   bool processed ;
   enum environment_cap country_ie_env ;
   struct list_head list ;
};
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/regulatory.h"
struct ieee80211_freq_range {
   u32 start_freq_khz ;
   u32 end_freq_khz ;
   u32 max_bandwidth_khz ;
};
#line 187  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/regulatory.h"
struct ieee80211_power_rule {
   u32 max_antenna_gain ;
   u32 max_eirp ;
};
#line 205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/regulatory.h"
struct ieee80211_wmm_ac {
   u16 cw_min ;
   u16 cw_max ;
   u16 cot ;
   u8 aifsn ;
};
#line 212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/regulatory.h"
struct ieee80211_wmm_rule {
   struct ieee80211_wmm_ac client[4U] ;
   struct ieee80211_wmm_ac ap[4U] ;
};
#line 217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/regulatory.h"
struct ieee80211_reg_rule {
   struct ieee80211_freq_range freq_range ;
   struct ieee80211_power_rule power_rule ;
   struct ieee80211_wmm_rule wmm_rule ;
   u32 flags ;
   u32 dfs_cac_ms ;
   bool has_wmm ;
};
#line 226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/regulatory.h"
struct ieee80211_regdomain {
   struct callback_head callback_head ;
   u32 n_reg_rules ;
   char alpha2[3U] ;
   enum nl80211_dfs_regions dfs_region ;
   struct ieee80211_reg_rule reg_rules[] ;
};
#line 233 
struct wiphy;
#line 147  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_channel {
   enum nl80211_band band ;
   u32 center_freq ;
   u16 hw_value ;
   u32 flags ;
   int max_antenna_gain ;
   int max_power ;
   int max_reg_power ;
   bool beacon_found ;
   u32 orig_flags ;
   int orig_mag ;
   int orig_mpwr ;
   enum nl80211_dfs_state dfs_state ;
   unsigned long dfs_state_entered ;
   unsigned int dfs_cac_ms ;
};
#line 172 
enum ieee80211_bss_type {
    IEEE80211_BSS_TYPE_ESS = 0,
    IEEE80211_BSS_TYPE_PBSS = 1,
    IEEE80211_BSS_TYPE_IBSS = 2,
    IEEE80211_BSS_TYPE_MBSS = 3,
    IEEE80211_BSS_TYPE_ANY = 4
};
#line 243  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_rate {
   u32 flags ;
   u16 bitrate ;
   u16 hw_value ;
   u16 hw_value_short ;
};
#line 256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_he_obss_pd {
   bool enable ;
   u8 min_offset ;
   u8 max_offset ;
};
#line 274  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_sta_ht_cap {
   u16 cap ;
   bool ht_supported ;
   u8 ampdu_factor ;
   u8 ampdu_density ;
   struct ieee80211_mcs_info mcs ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_sta_vht_cap {
   bool vht_supported ;
   u32 cap ;
   struct ieee80211_vht_mcs_info vht_mcs ;
};
#line 311  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_sta_he_cap {
   bool has_he ;
   struct ieee80211_he_cap_elem he_cap_elem ;
   struct ieee80211_he_mcs_nss_supp he_mcs_nss_supp ;
   u8 ppe_thres[25U] ;
};
#line 328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_sband_iftype_data {
   u16 types_mask ;
   struct ieee80211_sta_he_cap he_cap ;
};
#line 332 
enum ieee80211_edmg_bw_config {
    IEEE80211_EDMG_BW_CONFIG_4 = 4,
    IEEE80211_EDMG_BW_CONFIG_5 = 5,
    IEEE80211_EDMG_BW_CONFIG_6 = 6,
    IEEE80211_EDMG_BW_CONFIG_7 = 7,
    IEEE80211_EDMG_BW_CONFIG_8 = 8,
    IEEE80211_EDMG_BW_CONFIG_9 = 9,
    IEEE80211_EDMG_BW_CONFIG_10 = 10,
    IEEE80211_EDMG_BW_CONFIG_11 = 11,
    IEEE80211_EDMG_BW_CONFIG_12 = 12,
    IEEE80211_EDMG_BW_CONFIG_13 = 13,
    IEEE80211_EDMG_BW_CONFIG_14 = 14,
    IEEE80211_EDMG_BW_CONFIG_15 = 15
};
#line 382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_edmg {
   u8 channels ;
   enum ieee80211_edmg_bw_config bw_config ;
};
#line 410  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_supported_band {
   struct ieee80211_channel *channels ;
   struct ieee80211_rate *bitrates ;
   enum nl80211_band band ;
   int n_channels ;
   int n_bitrates ;
   struct ieee80211_sta_ht_cap ht_cap ;
   struct ieee80211_sta_vht_cap vht_cap ;
   struct ieee80211_edmg edmg_cap ;
   u16 n_iftype_data ;
   struct ieee80211_sband_iftype_data *iftype_data ;
};
#line 571  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct key_params {
   u8 *key ;
   u8 *seq ;
   int key_len ;
   int seq_len ;
   u16 vlan_id ;
   u32 cipher ;
   enum nl80211_key_mode mode ;
};
#line 593  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_chan_def {
   struct ieee80211_channel *chan ;
   enum nl80211_chan_width width ;
   u32 center_freq1 ;
   u32 center_freq2 ;
   struct ieee80211_edmg edmg ;
};
#line 853  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_crypto_settings {
   u32 wpa_versions ;
   u32 cipher_group ;
   int n_ciphers_pairwise ;
   u32 ciphers_pairwise[5U] ;
   int n_akm_suites ;
   u32 akm_suites[2U] ;
   bool control_port ;
   __be16 control_port_ethertype ;
   bool control_port_no_encrypt ;
   bool control_port_over_nl80211 ;
   struct key_params *wep_keys ;
   int wep_tx_key ;
   u8 *psk ;
   u8 *sae_pwd ;
   u8 sae_pwd_len ;
};
#line 917  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct mac_address {
   u8 addr[6U] ;
};
#line 1885  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_ssid {
   u8 ssid[32U] ;
   u8 ssid_len ;
};
#line 1991  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_match_set {
   struct cfg80211_ssid ssid ;
   u8 bssid[6U] ;
   s32 rssi_thold ;
   s32 per_band_rssi_thold[4U] ;
};
#line 2007  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_sched_scan_plan {
   u32 interval ;
   u32 iterations ;
};
#line 2018  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_bss_select_adjust {
   enum nl80211_band band ;
   s8 delta ;
};
#line 2073  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_sched_scan_request {
   u64 reqid ;
   struct cfg80211_ssid *ssids ;
   int n_ssids ;
   u32 n_channels ;
   enum nl80211_bss_scan_width scan_width ;
   u8 *ie ;
   size_t ie_len ;
   u32 flags ;
   struct cfg80211_match_set *match_sets ;
   int n_match_sets ;
   s32 min_rssi_thold ;
   u32 delay ;
   struct cfg80211_sched_scan_plan *scan_plans ;
   int n_scan_plans ;
   u8 mac_addr[6U] ;
   u8 mac_addr_mask[6U] ;
   bool relative_rssi_set ;
   s8 relative_rssi ;
   struct cfg80211_bss_select_adjust rssi_adjust ;
   struct wiphy *wiphy ;
   struct net_device *dev ;
   unsigned long scan_start ;
   bool report_results ;
   struct callback_head callback_head ;
   u32 owner_nlportid ;
   bool nl_owner_dead ;
   struct list_head list ;
   struct ieee80211_channel *channels[0U] ;
};
#line 2109 
enum cfg80211_signal_type {
    CFG80211_SIGNAL_TYPE_NONE = 0,
    CFG80211_SIGNAL_TYPE_MBM = 1,
    CFG80211_SIGNAL_TYPE_UNSPEC = 2
};
#line 2432  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_ibss_params {
   u8 *ssid ;
   u8 *bssid ;
   struct cfg80211_chan_def chandef ;
   u8 *ie ;
   u8 ssid_len ;
   u8 ie_len ;
   u16 beacon_interval ;
   u32 basic_rates ;
   bool channel_fixed ;
   bool privacy ;
   bool control_port ;
   bool control_port_over_nl80211 ;
   bool userspace_handles_dfs ;
   int mcast_rate[4U] ;
   struct ieee80211_ht_cap ht_capa ;
   struct ieee80211_ht_cap ht_capa_mask ;
   struct key_params *wep_keys ;
   int wep_tx_key ;
};
#line 2460  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
union __anonunion_param_736 {
   enum nl80211_band band_pref ;
   struct cfg80211_bss_select_adjust adjust ;
};
#line 2460  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_bss_selection {
   enum nl80211_bss_select_attr behaviour ;
   union __anonunion_param_736 param ;
};
#line 2531  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_connect_params {
   struct ieee80211_channel *channel ;
   struct ieee80211_channel *channel_hint ;
   u8 *bssid ;
   u8 *bssid_hint ;
   u8 *ssid ;
   size_t ssid_len ;
   enum nl80211_auth_type auth_type ;
   u8 *ie ;
   size_t ie_len ;
   bool privacy ;
   enum nl80211_mfp mfp ;
   struct cfg80211_crypto_settings crypto ;
   u8 *key ;
   u8 key_len ;
   u8 key_idx ;
   u32 flags ;
   int bg_scan_period ;
   struct ieee80211_ht_cap ht_capa ;
   struct ieee80211_ht_cap ht_capa_mask ;
   struct ieee80211_vht_cap vht_capa ;
   struct ieee80211_vht_cap vht_capa_mask ;
   bool pbss ;
   struct cfg80211_bss_selection bss_select ;
   u8 *prev_bssid ;
   u8 *fils_erp_username ;
   size_t fils_erp_username_len ;
   u8 *fils_erp_realm ;
   size_t fils_erp_realm_len ;
   u16 fils_erp_next_seq_num ;
   u8 *fils_erp_rrk ;
   size_t fils_erp_rrk_len ;
   bool want_1x ;
   struct ieee80211_edmg edmg ;
};
#line 2656  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_pkt_pattern {
   u8 *mask ;
   u8 *pattern ;
   int pattern_len ;
   int pkt_offset ;
};
#line 2681  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_wowlan_tcp {
   struct socket *sock ;
   __be32 src ;
   __be32 dst ;
   u16 src_port ;
   u16 dst_port ;
   u8 dst_mac[6U] ;
   int payload_len ;
   u8 *payload ;
   struct nl80211_wowlan_tcp_data_seq payload_seq ;
   u32 data_interval ;
   u32 wake_len ;
   u8 *wake_data ;
   u8 *wake_mask ;
   u32 tokens_size ;
   struct nl80211_wowlan_tcp_data_token payload_tok ;
};
#line 2715  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_wowlan {
   bool any ;
   bool disconnect ;
   bool magic_pkt ;
   bool gtk_rekey_failure ;
   bool eap_identity_req ;
   bool four_way_handshake ;
   bool rfkill_release ;
   struct cfg80211_pkt_pattern *patterns ;
   struct cfg80211_wowlan_tcp *tcp ;
   int n_patterns ;
   struct cfg80211_sched_scan_request *nd_config ;
};
#line 4043  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_iface_limit {
   u16 max ;
   u16 types ;
};
#line 4107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_iface_combination {
   struct ieee80211_iface_limit *limits ;
   u32 num_different_channels ;
   u16 max_interfaces ;
   u8 n_limits ;
   bool beacon_int_infra_match ;
   u8 radar_detect_widths ;
   u8 radar_detect_regions ;
   u32 beacon_int_min_gcd ;
};
#line 4165  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_txrx_stypes {
   u16 tx ;
   u16 rx ;
};
#line 4198  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct wiphy_wowlan_tcp_support {
   struct nl80211_wowlan_tcp_data_token_feature *tok ;
   u32 data_payload_max ;
   u32 data_interval_max ;
   u32 wake_payload_max ;
   bool seq ;
};
#line 4221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct wiphy_wowlan_support {
   u32 flags ;
   int n_patterns ;
   int pattern_max_len ;
   int pattern_min_len ;
   int max_pkt_offset ;
   int max_nd_match_sets ;
   struct wiphy_wowlan_tcp_support *tcp ;
};
#line 4241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct wiphy_coalesce_support {
   int n_rules ;
   int max_delay ;
   int n_patterns ;
   int pattern_max_len ;
   int pattern_min_len ;
   int max_pkt_offset ;
};
#line 4312 
struct nla_policy;
#line 4312  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct wiphy_vendor_command {
   struct nl80211_vendor_cmd_info info ;
   u32 flags ;
   int (*doit)(struct wiphy *, struct wireless_dev *, void *, int ) ;
   int (*dumpit)(struct wiphy *, struct wireless_dev *, struct sk_buff *, void *, int , unsigned long *) ;
   struct nla_policy *policy ;
   unsigned int maxattr ;
};
#line 4335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct wiphy_iftype_ext_capab {
   enum nl80211_iftype iftype ;
   u8 *extended_capabilities ;
   u8 *extended_capabilities_mask ;
   u8 extended_capabilities_len ;
};
#line 4360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct __anonstruct_ftm_738 {
   u32 preambles ;
   u32 bandwidths ;
   s8 max_bursts_exponent ;
   u8 max_ftms_per_burst ;
   u8 supported : 1 ;
   u8 asap : 1 ;
   u8 non_asap : 1 ;
   u8 request_lci : 1 ;
   u8 request_civicloc : 1 ;
};
#line 4360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_pmsr_capabilities {
   unsigned int max_peers ;
   u8 report_ap_tsf : 1 ;
   u8 randomize_mac_addr : 1 ;
   struct __anonstruct_ftm_738 ftm ;
};
#line 4552  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct wiphy {
   u8 perm_addr[6U] ;
   u8 addr_mask[6U] ;
   struct mac_address *addresses ;
   struct ieee80211_txrx_stypes *mgmt_stypes ;
   struct ieee80211_iface_combination *iface_combinations ;
   int n_iface_combinations ;
   u16 software_iftypes ;
   u16 n_addresses ;
   u16 interface_modes ;
   u16 max_acl_mac_addrs ;
   u32 flags ;
   u32 regulatory_flags ;
   u32 features ;
   u8 ext_features[6U] ;
   u32 ap_sme_capa ;
   enum cfg80211_signal_type signal_type ;
   int bss_priv_size ;
   u8 max_scan_ssids ;
   u8 max_sched_scan_reqs ;
   u8 max_sched_scan_ssids ;
   u8 max_match_sets ;
   u16 max_scan_ie_len ;
   u16 max_sched_scan_ie_len ;
   u32 max_sched_scan_plans ;
   u32 max_sched_scan_plan_interval ;
   u32 max_sched_scan_plan_iterations ;
   int n_cipher_suites ;
   u32 *cipher_suites ;
   int n_akm_suites ;
   u32 *akm_suites ;
   u8 retry_short ;
   u8 retry_long ;
   u32 frag_threshold ;
   u32 rts_threshold ;
   u8 coverage_class ;
   char fw_version[32U] ;
   u32 hw_version ;
   struct wiphy_wowlan_support *wowlan ;
   struct cfg80211_wowlan *wowlan_config ;
   u16 max_remain_on_channel_duration ;
   u8 max_num_pmkids ;
   u32 available_antennas_tx ;
   u32 available_antennas_rx ;
   u32 probe_resp_offload ;
   u8 *extended_capabilities ;
   u8 *extended_capabilities_mask ;
   u8 extended_capabilities_len ;
   struct wiphy_iftype_ext_capab *iftype_ext_capab ;
   unsigned int num_iftype_ext_capab ;
   void *privid ;
   struct ieee80211_supported_band *bands[4U] ;
   void (*reg_notifier)(struct wiphy *, struct regulatory_request *) ;
   struct ieee80211_regdomain *regd ;
   struct device dev ;
   bool registered ;
   struct dentry *debugfsdir ;
   struct ieee80211_ht_cap *ht_capa_mod_mask ;
   struct ieee80211_vht_cap *vht_capa_mod_mask ;
   struct list_head wdev_list ;
   possible_net_t _net ;
   struct iw_handler_def *wext ;
   struct wiphy_coalesce_support *coalesce ;
   struct wiphy_vendor_command *vendor_commands ;
   struct nl80211_vendor_cmd_info *vendor_events ;
   int n_vendor_commands ;
   int n_vendor_events ;
   u16 max_ap_assoc_sta ;
   u8 max_num_csa_counters ;
   u8 max_adj_channel_rssi_comp ;
   u32 bss_select_support ;
   u8 nan_supported_bands ;
   u32 txq_limit ;
   u32 txq_memory_limit ;
   u32 txq_quantum ;
   u8 support_mbssid : 1 ;
   u8 support_only_he_mbssid : 1 ;
   struct cfg80211_pmsr_capabilities *pmsr_capa ;
   char priv[0U] ;
};
#line 4826 
struct cfg80211_conn;
#line 4827 
struct cfg80211_internal_bss;
#line 4828 
struct cfg80211_cached_keys;
#line 4829 
struct cfg80211_cqm_config;
#line 4912  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct __anonstruct_wext_739 {
   struct cfg80211_ibss_params ibss ;
   struct cfg80211_connect_params connect ;
   struct cfg80211_cached_keys *keys ;
   u8 *ie ;
   size_t ie_len ;
   u8 bssid[6U] ;
   u8 prev_bssid[6U] ;
   u8 ssid[32U] ;
   s8 default_key ;
   s8 default_mgmt_key ;
   bool prev_bssid_valid ;
};
#line 4912  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct wireless_dev {
   struct wiphy *wiphy ;
   enum nl80211_iftype iftype ;
   struct list_head list ;
   struct net_device *netdev ;
   u32 identifier ;
   struct list_head mgmt_registrations ;
   spinlock_t mgmt_registrations_lock ;
   struct mutex mtx ;
   bool use_4addr ;
   bool is_running ;
   u8 address[6U] ;
   u8 ssid[32U] ;
   u8 ssid_len ;
   u8 mesh_id_len ;
   u8 mesh_id_up_len ;
   struct cfg80211_conn *conn ;
   struct cfg80211_cached_keys *connect_keys ;
   enum ieee80211_bss_type conn_bss_type ;
   u32 conn_owner_nlportid ;
   struct work_struct disconnect_wk ;
   u8 disconnect_bssid[6U] ;
   struct list_head event_list ;
   spinlock_t event_lock ;
   struct cfg80211_internal_bss *current_bss ;
   struct cfg80211_chan_def preset_chandef ;
   struct cfg80211_chan_def chandef ;
   bool ibss_fixed ;
   bool ibss_dfs_possible ;
   bool ps ;
   int ps_timeout ;
   int beacon_interval ;
   u32 ap_unexpected_nlportid ;
   u32 owner_nlportid ;
   bool nl_owner_dead ;
   bool cac_started ;
   unsigned long cac_start_time ;
   unsigned int cac_time_ms ;
   struct __anonstruct_wext_739 wext ;
   struct cfg80211_cqm_config *cqm_config ;
   struct list_head pmsr_list ;
   spinlock_t pmsr_lock ;
   struct work_struct pmsr_free_wk ;
};
#line 567  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rtnetlink.h"
struct tcmsg {
   unsigned char tcm_family ;
   unsigned char tcm__pad1 ;
   unsigned short tcm__pad2 ;
   int tcm_ifindex ;
   __u32 tcm_handle ;
   __u32 tcm_parent ;
   __u32 tcm_info ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/gen_stats.h"
struct gnet_stats_queue {
   __u32 qlen ;
   __u32 backlog ;
   __u32 drops ;
   __u32 requeues ;
   __u32 overlimits ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_stats_basic_packed {
   __u64 bytes ;
   __u64 packets ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_stats_basic_cpu {
   struct gnet_stats_basic_packed bstats ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 20 
struct net_rate_estimator;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_dump {
   spinlock_t *lock ;
   struct sk_buff *skb ;
   struct nlattr *tail ;
   int compat_tc_stats ;
   int compat_xstats ;
   int padattr ;
   void *xstats ;
   int xstats_len ;
   struct tc_stats tc_stats ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
struct __anonstruct_747 {
   s16 min ;
   s16 max ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
union __anonunion_746 {
   void *validation_data ;
   struct __anonstruct_747 __anonCompField___anonunion_746_162 ;
   int (*validate)(struct nlattr *, struct netlink_ext_ack *) ;
   u16 strict_start_type ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
struct nla_policy {
   u8 type ;
   u8 validation_type ;
   u16 len ;
   union __anonunion_746 __anonCompField_nla_policy_163 ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/rtnetlink.h"
struct rtnl_link_ops {
   struct list_head list ;
   char *kind ;
   size_t priv_size ;
   void (*setup)(struct net_device *) ;
   unsigned int maxtype ;
   struct nla_policy *policy ;
   int (*validate)(struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   int (*newlink)(struct net *, struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   int (*changelink)(struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   void (*dellink)(struct net_device *, struct list_head *) ;
   size_t (*get_size)(struct net_device *) ;
   int (*fill_info)(struct sk_buff *, struct net_device *) ;
   size_t (*get_xstats_size)(struct net_device *) ;
   int (*fill_xstats)(struct sk_buff *, struct net_device *) ;
   unsigned int (*get_num_tx_queues)(void) ;
   unsigned int (*get_num_rx_queues)(void) ;
   unsigned int slave_maxtype ;
   struct nla_policy *slave_policy ;
   int (*slave_changelink)(struct net_device *, struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   size_t (*get_slave_size)(struct net_device *, struct net_device *) ;
   int (*fill_slave_info)(struct sk_buff *, struct net_device *, struct net_device *) ;
   struct net *(*get_link_net)(struct net_device *) ;
   size_t (*get_linkxstats_size)(struct net_device *, int ) ;
   int (*fill_linkxstats)(struct sk_buff *, struct net_device *, int *, int ) ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jhash.h"
struct rhash_lock_head {
   };
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable.h"
struct bucket_table {
   unsigned int size ;
   unsigned int nest ;
   u32 hash_rnd ;
   struct list_head walkers ;
   struct callback_head rcu ;
   struct bucket_table *future_tbl ;
   struct lockdep_map dep_map ;
   struct rhash_lock_head *buckets[] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct flow_block {
   struct list_head cb_list ;
};
#line 298  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
typedef int flow_setup_cb_t(enum tc_setup_type , void *, void *);
#line 412 
struct Qdisc_ops;
#line 413 
struct qdisc_walker;
#line 414 
struct tcf_walker;
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct qdisc_size_table {
   struct callback_head rcu ;
   struct list_head list ;
   struct tc_sizespec szopts ;
   int refcnt ;
   u16 data[] ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct qdisc_skb_head {
   struct sk_buff *head ;
   struct sk_buff *tail ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc {
   int (*enqueue)(struct sk_buff *, struct Qdisc *, struct sk_buff **) ;
   struct sk_buff *(*dequeue)(struct Qdisc *) ;
   unsigned int flags ;
   u32 limit ;
   struct Qdisc_ops *ops ;
   struct qdisc_size_table *stab ;
   struct hlist_node hash ;
   u32 handle ;
   u32 parent ;
   struct netdev_queue *dev_queue ;
   struct net_rate_estimator *rate_est ;
   struct gnet_stats_basic_cpu *cpu_bstats ;
   struct gnet_stats_queue *cpu_qstats ;
   int padded ;
   refcount_t refcnt ;
   struct sk_buff_head gso_skb ;
   struct qdisc_skb_head q ;
   struct gnet_stats_basic_packed bstats ;
   seqcount_t running ;
   struct gnet_stats_queue qstats ;
   unsigned long state ;
   struct Qdisc *next_sched ;
   struct sk_buff_head skb_bad_txq ;
   spinlock_t busylock ;
   spinlock_t seqlock ;
   bool empty ;
   struct callback_head rcu ;
};
#line 195 
struct tcf_block;
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc_class_ops {
   unsigned int flags ;
   struct netdev_queue *(*select_queue)(struct Qdisc *, struct tcmsg *) ;
   int (*graft)(struct Qdisc *, unsigned long , struct Qdisc *, struct Qdisc **, struct netlink_ext_ack *) ;
   struct Qdisc *(*leaf)(struct Qdisc *, unsigned long ) ;
   void (*qlen_notify)(struct Qdisc *, unsigned long ) ;
   unsigned long (*find)(struct Qdisc *, u32 ) ;
   int (*change)(struct Qdisc *, u32 , u32 , struct nlattr **, unsigned long *, struct netlink_ext_ack *) ;
   int (*delete)(struct Qdisc *, unsigned long ) ;
   void (*walk)(struct Qdisc *, struct qdisc_walker *) ;
   struct tcf_block *(*tcf_block)(struct Qdisc *, unsigned long , struct netlink_ext_ack *) ;
   unsigned long (*bind_tcf)(struct Qdisc *, unsigned long , u32 ) ;
   void (*unbind_tcf)(struct Qdisc *, unsigned long ) ;
   int (*dump)(struct Qdisc *, unsigned long , struct sk_buff *, struct tcmsg *) ;
   int (*dump_stats)(struct Qdisc *, unsigned long , struct gnet_dump *) ;
};
#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc_ops {
   struct Qdisc_ops *next ;
   struct Qdisc_class_ops *cl_ops ;
   char id[16U] ;
   int priv_size ;
   unsigned int static_flags ;
   int (*enqueue)(struct sk_buff *, struct Qdisc *, struct sk_buff **) ;
   struct sk_buff *(*dequeue)(struct Qdisc *) ;
   struct sk_buff *(*peek)(struct Qdisc *) ;
   int (*init)(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *) ;
   void (*reset)(struct Qdisc *) ;
   void (*destroy)(struct Qdisc *) ;
   int (*change)(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *) ;
   void (*attach)(struct Qdisc *) ;
   int (*change_tx_queue_len)(struct Qdisc *, unsigned int ) ;
   int (*dump)(struct Qdisc *, struct sk_buff *) ;
   int (*dump_stats)(struct Qdisc *, struct gnet_dump *) ;
   void (*ingress_block_set)(struct Qdisc *, u32 ) ;
   void (*egress_block_set)(struct Qdisc *, u32 ) ;
   u32 (*ingress_block_get)(struct Qdisc *) ;
   u32 (*egress_block_get)(struct Qdisc *) ;
   struct module *owner ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_821 {
   unsigned long class ;
   u32 classid ;
};
#line 272 
struct tcf_proto;
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_822 {
   bool ingress ;
   struct gnet_stats_queue *qstats ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
union __anonunion_820 {
   struct __anonstruct_821 __anonCompField___anonunion_820_165 ;
   struct tcf_proto *goto_tp ;
   struct __anonstruct_822 __anonCompField___anonunion_820_166 ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_result {
   union __anonunion_820 __anonCompField_tcf_result_167 ;
};
#line 287 
struct tcf_chain;
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_proto_ops {
   struct list_head head ;
   char kind[16U] ;
   int (*classify)(struct sk_buff *, struct tcf_proto *, struct tcf_result *) ;
   int (*init)(struct tcf_proto *) ;
   void (*destroy)(struct tcf_proto *, bool , struct netlink_ext_ack *) ;
   void *(*get)(struct tcf_proto *, u32 ) ;
   void (*put)(struct tcf_proto *, void *) ;
   int (*change)(struct net *, struct sk_buff *, struct tcf_proto *, unsigned long , u32 , struct nlattr **, void **, bool , bool , struct netlink_ext_ack *) ;
   int (*delete)(struct tcf_proto *, void *, bool *, bool , struct netlink_ext_ack *) ;
   bool (*delete_empty)(struct tcf_proto *) ;
   void (*walk)(struct tcf_proto *, struct tcf_walker *, bool ) ;
   int (*reoffload)(struct tcf_proto *, bool , flow_setup_cb_t *, void *, struct netlink_ext_ack *) ;
   void (*hw_add)(struct tcf_proto *, void *) ;
   void (*hw_del)(struct tcf_proto *, void *) ;
   void (*bind_class)(void *, u32 , unsigned long ) ;
   void *(*tmplt_create)(struct net *, struct tcf_chain *, struct nlattr **, struct netlink_ext_ack *) ;
   void (*tmplt_destroy)(void *) ;
   int (*dump)(struct net *, struct tcf_proto *, void *, struct sk_buff *, struct tcmsg *, bool ) ;
   int (*tmplt_dump)(struct sk_buff *, struct net *, void *) ;
   struct module *owner ;
   int flags ;
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_proto {
   struct tcf_proto *next ;
   void *root ;
   int (*classify)(struct sk_buff *, struct tcf_proto *, struct tcf_result *) ;
   __be16 protocol ;
   u32 prio ;
   void *data ;
   struct tcf_proto_ops *ops ;
   struct tcf_chain *chain ;
   spinlock_t lock ;
   bool deleting ;
   refcount_t refcnt ;
   struct callback_head rcu ;
   struct hlist_node destroy_ht_node ;
};
#line 386  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_chain {
   struct mutex filter_chain_lock ;
   struct tcf_proto *filter_chain ;
   struct list_head list ;
   struct tcf_block *block ;
   u32 index ;
   unsigned int refcnt ;
   unsigned int action_refcnt ;
   bool explicitly_created ;
   bool flushing ;
   struct tcf_proto_ops *tmplt_ops ;
   void *tmplt_priv ;
   struct callback_head rcu ;
};
#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_chain0_824 {
   struct tcf_chain *chain ;
   struct list_head filter_chain_list ;
};
#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_block {
   struct mutex lock ;
   struct list_head chain_list ;
   u32 index ;
   refcount_t refcnt ;
   struct net *net ;
   struct Qdisc *q ;
   struct rw_semaphore cb_lock ;
   struct flow_block flow_block ;
   struct list_head owner_list ;
   bool keep_dst ;
   atomic_t offloadcnt ;
   unsigned int nooffloaddevcnt ;
   unsigned int lockeddevcnt ;
   struct __anonstruct_chain0_824 chain0 ;
   struct callback_head rcu ;
   struct hlist_head proto_destroy_ht[128U] ;
   struct mutex proto_destroy_lock ;
};
#line 1269  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct mini_Qdisc {
   struct tcf_proto *filter_list ;
   struct gnet_stats_basic_cpu *cpu_bstats ;
   struct gnet_stats_queue *cpu_qstats ;
   struct callback_head rcu ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/pkt_sched.h"
struct qdisc_walker {
   int stop ;
   int skip ;
   int count ;
   int (*fn)(struct Qdisc *, unsigned long , struct qdisc_walker *) ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_counter.h"
struct page_counter {
   atomic_long_t usage ;
   unsigned long min ;
   unsigned long low ;
   unsigned long max ;
   struct page_counter *parent ;
   unsigned long emin ;
   atomic_long_t min_usage ;
   atomic_long_t children_min_usage ;
   unsigned long elow ;
   atomic_long_t low_usage ;
   atomic_long_t children_low_usage ;
   unsigned long watermark ;
   unsigned long failcnt ;
};
#line 66 
struct eventfd_ctx;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmpressure.h"
struct vmpressure {
   unsigned long scanned ;
   unsigned long reclaimed ;
   unsigned long tree_scanned ;
   unsigned long tree_reclaimed ;
   spinlock_t sr_lock ;
   struct list_head events ;
   struct mutex events_lock ;
   struct work_struct work ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
struct fprop_global {
   struct percpu_counter events ;
   unsigned int period ;
   seqcount_t sequence ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
struct fprop_local_percpu {
   struct percpu_counter events ;
   unsigned int period ;
   raw_spinlock_t lock ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
typedef int congested_fn(void *, int );
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
enum wb_reason {
    WB_REASON_BACKGROUND = 0,
    WB_REASON_VMSCAN = 1,
    WB_REASON_SYNC = 2,
    WB_REASON_PERIODIC = 3,
    WB_REASON_LAPTOP_TIMER = 4,
    WB_REASON_FREE_MORE_MEM = 5,
    WB_REASON_FS_FREE_SPACE = 6,
    WB_REASON_FORKER_THREAD = 7,
    WB_REASON_FOREIGN_FLUSH = 8,
    WB_REASON_MAX = 9
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct wb_completion {
   atomic_t cnt ;
   wait_queue_head_t *waitq ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct bdi_writeback_congested {
   unsigned long state ;
   refcount_t refcnt ;
   struct backing_dev_info *__bdi ;
   int blkcg_id ;
   struct rb_node rb_node ;
};
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
union __anonunion_837 {
   struct work_struct release_work ;
   struct callback_head rcu ;
};
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct bdi_writeback {
   struct backing_dev_info *bdi ;
   unsigned long state ;
   unsigned long last_old_flush ;
   struct list_head b_dirty ;
   struct list_head b_io ;
   struct list_head b_more_io ;
   struct list_head b_dirty_time ;
   spinlock_t list_lock ;
   struct percpu_counter stat[4U] ;
   struct bdi_writeback_congested *congested ;
   unsigned long bw_time_stamp ;
   unsigned long dirtied_stamp ;
   unsigned long written_stamp ;
   unsigned long write_bandwidth ;
   unsigned long avg_write_bandwidth ;
   unsigned long dirty_ratelimit ;
   unsigned long balanced_dirty_ratelimit ;
   struct fprop_local_percpu completions ;
   int dirty_exceeded ;
   enum wb_reason start_all_reason ;
   spinlock_t work_lock ;
   struct list_head work_list ;
   struct delayed_work dwork ;
   unsigned long dirty_sleep ;
   struct list_head bdi_node ;
   struct percpu_ref refcnt ;
   struct fprop_local_percpu memcg_completions ;
   struct cgroup_subsys_state *memcg_css ;
   struct cgroup_subsys_state *blkcg_css ;
   struct list_head memcg_node ;
   struct list_head blkcg_node ;
   union __anonunion_837 __anonCompField_bdi_writeback_169 ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct backing_dev_info {
   u64 id ;
   struct rb_node rb_node ;
   struct list_head bdi_list ;
   unsigned long ra_pages ;
   unsigned long io_pages ;
   congested_fn *congested_fn ;
   void *congested_data ;
   char *name ;
   struct kref refcnt ;
   unsigned int capabilities ;
   unsigned int min_ratio ;
   unsigned int max_ratio ;
   unsigned int max_prop_frac ;
   atomic_long_t tot_write_bandwidth ;
   struct bdi_writeback wb ;
   struct list_head wb_list ;
   struct xarray cgwb_tree ;
   struct rb_root cgwb_congested_tree ;
   struct mutex cgwb_release_mutex ;
   struct rw_semaphore wb_switch_rwsem ;
   wait_queue_head_t wb_waitq ;
   struct device *dev ;
   struct device *owner ;
   struct timer_list laptop_mode_wb_timer ;
   struct dentry *debug_dir ;
};
#line 306 
struct bio_set;
#line 307 
struct bio_integrity_payload;
#line 308  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
typedef void bio_end_io_t(struct bio *);
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
typedef u8 blk_status_t;
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct bio_issue {
   u64 value ;
};
#line 144 
struct blkcg_gq;
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
union __anonunion_838 {
   struct bio_integrity_payload *bi_integrity ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct bio {
   struct bio *bi_next ;
   struct gendisk *bi_disk ;
   unsigned int bi_opf ;
   unsigned short bi_flags ;
   unsigned short bi_ioprio ;
   unsigned short bi_write_hint ;
   blk_status_t bi_status ;
   u8 bi_partno ;
   atomic_t __bi_remaining ;
   struct bvec_iter bi_iter ;
   bio_end_io_t *bi_end_io ;
   void *bi_private ;
   struct blkcg_gq *bi_blkg ;
   struct bio_issue bi_issue ;
   u64 bi_iocost_cost ;
   union __anonunion_838 __anonCompField_bio_170 ;
   unsigned short bi_vcnt ;
   unsigned short bi_max_vecs ;
   atomic_t __bi_cnt ;
   struct bio_vec *bi_io_vec ;
   struct bio_set *bi_pool ;
   struct bio_vec bi_inline_vecs[0U] ;
};
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
typedef unsigned int blk_qc_t;
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct blk_rq_stat {
   u64 mean ;
   u64 min ;
   u64 max ;
   u32 nr_samples ;
   u64 batch ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct disk_stats {
   u64 nsecs[4U] ;
   unsigned long sectors[4U] ;
   unsigned long ios[4U] ;
   unsigned long merges[4U] ;
   unsigned long io_ticks ;
   unsigned long time_in_queue ;
   local_t in_flight[2U] ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct partition_meta_info {
   char uuid[37U] ;
   u8 volname[64U] ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct hd_struct {
   sector_t start_sect ;
   sector_t nr_sects ;
   seqcount_t nr_sects_seq ;
   sector_t alignment_offset ;
   unsigned int discard_alignment ;
   struct device __dev ;
   struct kobject *holder_dir ;
   int policy ;
   int partno ;
   struct partition_meta_info *info ;
   int make_it_fail ;
   unsigned long stamp ;
   struct disk_stats *dkstats ;
   struct percpu_ref ref ;
   struct rcu_work rcu_work ;
};
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct disk_part_tbl {
   struct callback_head callback_head ;
   int len ;
   struct hd_struct *last_lookup ;
   struct hd_struct *part[] ;
};
#line 166 
struct disk_events;
#line 167 
struct badblocks;
#line 172 
struct blk_integrity_profile;
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct blk_integrity {
   struct blk_integrity_profile *profile ;
   unsigned char flags ;
   unsigned char tuple_size ;
   unsigned char interval_exp ;
   unsigned char tag_size ;
};
#line 182 
struct timer_rand_state;
#line 182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct gendisk {
   int major ;
   int first_minor ;
   int minors ;
   char disk_name[32U] ;
   char *(*devnode)(struct gendisk *, umode_t *) ;
   unsigned short events ;
   unsigned short event_flags ;
   struct disk_part_tbl *part_tbl ;
   struct hd_struct part0 ;
   struct block_device_operations *fops ;
   struct request_queue *queue ;
   void *private_data ;
   int flags ;
   struct rw_semaphore lookup_sem ;
   struct kobject *slave_dir ;
   struct timer_rand_state *random ;
   atomic_t sync_io ;
   struct disk_events *ev ;
   struct kobject integrity_kobj ;
   int node_id ;
   struct badblocks *bb ;
   struct lockdep_map lockdep_map ;
};
#line 637  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pagemap.h"
typedef void *mempool_alloc_t(gfp_t , void *);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
typedef void mempool_free_t(void *, void *);
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
struct mempool_s {
   spinlock_t lock ;
   int min_nr ;
   int curr_nr ;
   void **elements ;
   void *pool_data ;
   mempool_alloc_t *alloc ;
   mempool_free_t *free ;
   wait_queue_head_t wait ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
typedef struct mempool_s mempool_t;
#line 307  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_integrity_payload {
   struct bio *bip_bio ;
   struct bvec_iter bip_iter ;
   unsigned short bip_slab ;
   unsigned short bip_vcnt ;
   unsigned short bip_max_vcnt ;
   unsigned short bip_flags ;
   struct bvec_iter bio_iter ;
   struct work_struct bip_work ;
   struct bio_vec *bip_vec ;
   struct bio_vec bip_inline_vecs[0U] ;
};
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_list {
   struct bio *head ;
   struct bio *tail ;
};
#line 703  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_set {
   struct kmem_cache *bio_slab ;
   unsigned int front_pad ;
   mempool_t bio_pool ;
   mempool_t bvec_pool ;
   mempool_t bio_integrity_pool ;
   mempool_t bvec_integrity_pool ;
   spinlock_t rescue_lock ;
   struct bio_list rescue_list ;
   struct work_struct rescue_work ;
   struct workqueue_struct *rescue_workqueue ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bsg.h"
struct sg_io_v4 {
   __s32 guard ;
   __u32 protocol ;
   __u32 subprotocol ;
   __u32 request_len ;
   __u64 request ;
   __u64 request_tag ;
   __u32 request_attr ;
   __u32 request_priority ;
   __u32 request_extra ;
   __u32 max_response_len ;
   __u64 response ;
   __u32 dout_iovec_count ;
   __u32 dout_xfer_len ;
   __u32 din_iovec_count ;
   __u32 din_xfer_len ;
   __u64 dout_xferp ;
   __u64 din_xferp ;
   __u32 timeout ;
   __u32 flags ;
   __u64 usr_ptr ;
   __u32 spare_in ;
   __u32 driver_status ;
   __u32 transport_status ;
   __u32 device_status ;
   __u32 retry_delay ;
   __u32 info ;
   __u32 duration ;
   __u32 response_len ;
   __s32 din_resid ;
   __s32 dout_resid ;
   __u64 generated_tag ;
   __u32 spare_out ;
   __u32 padding ;
};
#line 65 
struct request;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bsg.h"
struct bsg_ops {
   int (*check_proto)(struct sg_io_v4 *) ;
   int (*fill_hdr)(struct request *, struct sg_io_v4 *, fmode_t ) ;
   int (*complete_rq)(struct request *, struct sg_io_v4 *) ;
   void (*free_rq)(struct request *) ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bsg.h"
struct bsg_class_device {
   struct device *class_dev ;
   int minor ;
   struct request_queue *queue ;
   struct bsg_ops *ops ;
};
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/blkzoned.h"
struct blk_zone {
   __u64 start ;
   __u64 len ;
   __u64 wp ;
   __u8 type ;
   __u8 cond ;
   __u8 non_seq ;
   __u8 reset ;
   __u8 reserved[36U] ;
};
#line 134 
struct elevator_queue;
#line 135 
struct blk_trace;
#line 138 
struct blk_flush_queue;
#line 139 
struct pr_ops;
#line 140 
struct rq_qos;
#line 141 
struct blk_queue_stats;
#line 142 
struct blk_stat_callback;
#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/blkzoned.h"
typedef void rq_end_io_fn(struct request *, blk_status_t );
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef __u32 req_flags_t;
#line 67 
enum mq_rq_state {
    MQ_RQ_IDLE = 0,
    MQ_RQ_IN_FLIGHT = 1,
    MQ_RQ_COMPLETE = 2
};
#line 132 
struct blk_mq_ctx;
#line 132 
struct blk_mq_hw_ctx;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_841 {
   struct hlist_node hash ;
   struct list_head ipi_list ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_842 {
   struct rb_node rb_node ;
   struct bio_vec special_vec ;
   void *completion_data ;
   int error_count ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct __anonstruct_elv_844 {
   struct io_cq *icq ;
   void *priv[2U] ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct __anonstruct_flush_845 {
   unsigned int seq ;
   struct list_head list ;
   rq_end_io_fn *saved_end_io ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_843 {
   struct __anonstruct_elv_844 elv ;
   struct __anonstruct_flush_845 flush ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_846 {
   struct __call_single_data csd ;
   u64 fifo_time ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct request {
   struct request_queue *q ;
   struct blk_mq_ctx *mq_ctx ;
   struct blk_mq_hw_ctx *mq_hctx ;
   unsigned int cmd_flags ;
   req_flags_t rq_flags ;
   int tag ;
   int internal_tag ;
   unsigned int __data_len ;
   sector_t __sector ;
   struct bio *bio ;
   struct bio *biotail ;
   struct list_head queuelist ;
   union __anonunion_841 __anonCompField_request_171 ;
   union __anonunion_842 __anonCompField_request_172 ;
   union __anonunion_843 __anonCompField_request_173 ;
   struct gendisk *rq_disk ;
   struct hd_struct *part ;
   u64 alloc_time_ns ;
   u64 start_time_ns ;
   u64 io_start_time_ns ;
   unsigned short wbt_flags ;
   unsigned short stats_sectors ;
   unsigned short nr_phys_segments ;
   unsigned short nr_integrity_segments ;
   unsigned short write_hint ;
   unsigned short ioprio ;
   unsigned int extra_len ;
   enum mq_rq_state state ;
   refcount_t ref ;
   unsigned int timeout ;
   unsigned long deadline ;
   union __anonunion_846 __anonCompField_request_174 ;
   rq_end_io_fn *end_io ;
   void *end_io_data ;
};
#line 285 
struct elevator_type;
#line 286 
struct blk_mq_debugfs_attr;
#line 287 
enum elv_merge {
    ELEVATOR_NO_MERGE = 0,
    ELEVATOR_FRONT_MERGE = 1,
    ELEVATOR_BACK_MERGE = 2,
    ELEVATOR_DISCARD_MERGE = 3
};
#line 294 
struct blk_mq_alloc_data;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_mq_ops {
   int (*init_sched)(struct request_queue *, struct elevator_type *) ;
   void (*exit_sched)(struct elevator_queue *) ;
   int (*init_hctx)(struct blk_mq_hw_ctx *, unsigned int ) ;
   void (*exit_hctx)(struct blk_mq_hw_ctx *, unsigned int ) ;
   void (*depth_updated)(struct blk_mq_hw_ctx *) ;
   bool (*allow_merge)(struct request_queue *, struct request *, struct bio *) ;
   bool (*bio_merge)(struct blk_mq_hw_ctx *, struct bio *, unsigned int ) ;
   int (*request_merge)(struct request_queue *, struct request **, struct bio *) ;
   void (*request_merged)(struct request_queue *, struct request *, enum elv_merge ) ;
   void (*requests_merged)(struct request_queue *, struct request *, struct request *) ;
   void (*limit_depth)(unsigned int , struct blk_mq_alloc_data *) ;
   void (*prepare_request)(struct request *, struct bio *) ;
   void (*finish_request)(struct request *) ;
   void (*insert_requests)(struct blk_mq_hw_ctx *, struct list_head *, bool ) ;
   struct request *(*dispatch_request)(struct blk_mq_hw_ctx *) ;
   bool (*has_work)(struct blk_mq_hw_ctx *) ;
   void (*completed_request)(struct request *, u64 ) ;
   void (*requeue_request)(struct request *) ;
   struct request *(*former_request)(struct request_queue *, struct request *) ;
   struct request *(*next_request)(struct request_queue *, struct request *) ;
   void (*init_icq)(struct io_cq *) ;
   void (*exit_icq)(struct io_cq *) ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elv_fs_entry {
   struct attribute attr ;
   ssize_t (*show)(struct elevator_queue *, char *) ;
   ssize_t (*store)(struct elevator_queue *, char *, size_t ) ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_type {
   struct kmem_cache *icq_cache ;
   struct elevator_mq_ops ops ;
   size_t icq_size ;
   size_t icq_align ;
   struct elv_fs_entry *elevator_attrs ;
   char *elevator_name ;
   char *elevator_alias ;
   unsigned int elevator_features ;
   struct module *elevator_owner ;
   struct blk_mq_debugfs_attr *queue_debugfs_attrs ;
   struct blk_mq_debugfs_attr *hctx_debugfs_attrs ;
   char icq_cache_name[22U] ;
   struct list_head list ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_queue {
   struct elevator_type *type ;
   void *elevator_data ;
   struct kobject kobj ;
   struct mutex sysfs_lock ;
   unsigned int registered : 1 ;
   struct hlist_head hash[64U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
typedef blk_qc_t make_request_fn(struct request_queue *, struct bio *);
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef int dma_drain_needed_fn(struct request *);
#line 304 
enum blk_zoned_model {
    BLK_ZONED_NONE = 0,
    BLK_ZONED_HA = 1,
    BLK_ZONED_HM = 2
};
#line 320  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct queue_limits {
   unsigned long bounce_pfn ;
   unsigned long seg_boundary_mask ;
   unsigned long virt_boundary_mask ;
   unsigned int max_hw_sectors ;
   unsigned int max_dev_sectors ;
   unsigned int chunk_sectors ;
   unsigned int max_sectors ;
   unsigned int max_segment_size ;
   unsigned int physical_block_size ;
   unsigned int logical_block_size ;
   unsigned int alignment_offset ;
   unsigned int io_min ;
   unsigned int io_opt ;
   unsigned int max_discard_sectors ;
   unsigned int max_hw_discard_sectors ;
   unsigned int max_write_same_sectors ;
   unsigned int max_write_zeroes_sectors ;
   unsigned int discard_granularity ;
   unsigned int discard_alignment ;
   unsigned short max_segments ;
   unsigned short max_integrity_segments ;
   unsigned short max_discard_segments ;
   unsigned char misaligned ;
   unsigned char discard_misaligned ;
   unsigned char raid_partial_stripes_expensive ;
   enum blk_zoned_model zoned ;
};
#line 394 
struct blk_mq_ops;
#line 394 
struct throtl_data;
#line 394 
struct blk_mq_tag_set;
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct request_queue {
   struct request *last_merge ;
   struct elevator_queue *elevator ;
   struct blk_queue_stats *stats ;
   struct rq_qos *rq_qos ;
   make_request_fn *make_request_fn ;
   dma_drain_needed_fn *dma_drain_needed ;
   struct blk_mq_ops *mq_ops ;
   struct blk_mq_ctx *queue_ctx ;
   unsigned int queue_depth ;
   struct blk_mq_hw_ctx **queue_hw_ctx ;
   unsigned int nr_hw_queues ;
   struct backing_dev_info *backing_dev_info ;
   void *queuedata ;
   unsigned long queue_flags ;
   atomic_t pm_only ;
   int id ;
   gfp_t bounce_gfp ;
   spinlock_t queue_lock ;
   struct kobject kobj ;
   struct kobject *mq_kobj ;
   struct blk_integrity integrity ;
   struct device *dev ;
   int rpm_status ;
   unsigned int nr_pending ;
   unsigned long nr_requests ;
   unsigned int dma_drain_size ;
   void *dma_drain_buffer ;
   unsigned int dma_pad_mask ;
   unsigned int dma_alignment ;
   unsigned int rq_timeout ;
   int poll_nsec ;
   struct blk_stat_callback *poll_cb ;
   struct blk_rq_stat poll_stat[16U] ;
   struct timer_list timeout ;
   struct work_struct timeout_work ;
   struct list_head icq_list ;
   unsigned long blkcg_pols[1U] ;
   struct blkcg_gq *root_blkg ;
   struct list_head blkg_list ;
   struct queue_limits limits ;
   unsigned int required_elevator_features ;
   unsigned int nr_zones ;
   unsigned long *conv_zones_bitmap ;
   unsigned long *seq_zones_wlock ;
   unsigned int sg_timeout ;
   unsigned int sg_reserved_size ;
   int node ;
   struct blk_trace *blk_trace ;
   struct mutex blk_trace_mutex ;
   struct blk_flush_queue *fq ;
   struct list_head requeue_list ;
   spinlock_t requeue_lock ;
   struct delayed_work requeue_work ;
   struct mutex sysfs_lock ;
   struct mutex sysfs_dir_lock ;
   struct list_head unused_hctx_list ;
   spinlock_t unused_hctx_lock ;
   int mq_freeze_depth ;
   struct bsg_class_device bsg_dev ;
   struct throtl_data *td ;
   struct callback_head callback_head ;
   wait_queue_head_t mq_freeze_wq ;
   struct mutex mq_freeze_lock ;
   struct percpu_ref q_usage_counter ;
   struct blk_mq_tag_set *tag_set ;
   struct list_head tag_set_list ;
   struct bio_set bio_split ;
   struct dentry *debugfs_dir ;
   struct dentry *sched_debugfs_dir ;
   struct dentry *rqos_debugfs_dir ;
   bool mq_sysfs_init_done ;
   size_t cmd_size ;
   struct work_struct release_work ;
   u64 write_hints[5U] ;
};
#line 1160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_plug {
   struct list_head mq_list ;
   struct list_head cb_list ;
   unsigned short rq_count ;
   bool multiple_queues ;
};
#line 1514  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_integrity_iter {
   void *prot_buf ;
   void *data_buf ;
   sector_t seed ;
   unsigned int data_size ;
   unsigned short interval ;
   char *disk_name ;
};
#line 1522  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef blk_status_t integrity_processing_fn(struct blk_integrity_iter *);
#line 1524  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef void integrity_prepare_fn(struct request *);
#line 1525  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef void integrity_complete_fn(struct request *, unsigned int );
#line 1527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_integrity_profile {
   integrity_processing_fn *generate_fn ;
   integrity_processing_fn *verify_fn ;
   integrity_prepare_fn *prepare_fn ;
   integrity_complete_fn *complete_fn ;
   char *name ;
};
#line 1693  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct block_device_operations {
   int (*open)(struct block_device *, fmode_t ) ;
   void (*release)(struct gendisk *, fmode_t ) ;
   int (*rw_page)(struct block_device *, sector_t , struct page *, unsigned int ) ;
   int (*ioctl)(struct block_device *, fmode_t , unsigned int , unsigned long ) ;
   int (*compat_ioctl)(struct block_device *, fmode_t , unsigned int , unsigned long ) ;
   unsigned int (*check_events)(struct gendisk *, unsigned int ) ;
   int (*media_changed)(struct gendisk *) ;
   void (*unlock_native_capacity)(struct gendisk *) ;
   int (*revalidate_disk)(struct gendisk *) ;
   int (*getgeo)(struct block_device *, struct hd_geometry *) ;
   void (*swap_slot_free_notify)(struct block_device *, unsigned long ) ;
   int (*report_zones)(struct gendisk *, sector_t , unsigned int , int (*)(struct blk_zone *, unsigned int , void *), void *) ;
   struct module *owner ;
   struct pr_ops *pr_ops ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_policy_data;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg {
   struct cgroup_subsys_state css ;
   spinlock_t lock ;
   struct xarray blkg_tree ;
   struct blkcg_gq *blkg_hint ;
   struct hlist_head blkg_list ;
   struct blkcg_policy_data *cpd[5U] ;
   struct list_head all_blkcgs_node ;
   struct list_head cgwb_list ;
   refcount_t cgwb_refcnt ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_iostat {
   u64 bytes[3U] ;
   u64 ios[3U] ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_iostat_set {
   struct u64_stats_sync sync ;
   struct blkg_iostat cur ;
   struct blkg_iostat last ;
};
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_policy_data {
   struct blkcg_gq *blkg ;
   int plid ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_policy_data {
   struct blkcg *blkcg ;
   int plid ;
};
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_gq {
   struct request_queue *q ;
   struct list_head q_node ;
   struct hlist_node blkcg_node ;
   struct blkcg *blkcg ;
   struct bdi_writeback_congested *wb_congested ;
   struct blkcg_gq *parent ;
   struct percpu_ref refcnt ;
   bool online ;
   struct blkg_iostat_set *iostat_cpu ;
   struct blkg_iostat_set iostat ;
   struct blkg_policy_data *pd[5U] ;
   spinlock_t async_bio_lock ;
   struct bio_list async_bios ;
   struct work_struct async_bio_work ;
   atomic_t use_delay ;
   atomic64_t delay_nsec ;
   atomic64_t delay_start ;
   u64 last_delay ;
   int last_use ;
   struct callback_head callback_head ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
enum writeback_sync_modes {
    WB_SYNC_NONE = 0,
    WB_SYNC_ALL = 1
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
struct writeback_control {
   long nr_to_write ;
   long pages_skipped ;
   loff_t range_start ;
   loff_t range_end ;
   enum writeback_sync_modes sync_mode ;
   unsigned int for_kupdate : 1 ;
   unsigned int for_background : 1 ;
   unsigned int tagged_writepages : 1 ;
   unsigned int for_reclaim : 1 ;
   unsigned int range_cyclic : 1 ;
   unsigned int for_sync : 1 ;
   unsigned int no_cgroup_owner : 1 ;
   unsigned int punt_to_cgroup : 1 ;
   struct bdi_writeback *wb ;
   struct inode *inode ;
   int wb_id ;
   int wb_lcand_id ;
   int wb_tcand_id ;
   size_t wb_bytes ;
   size_t wb_lcand_bytes ;
   size_t wb_tcand_bytes ;
};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
struct wb_domain {
   spinlock_t lock ;
   struct fprop_global completions ;
   struct timer_list period_timer ;
   unsigned long period_time ;
   unsigned long dirty_limit_tstamp ;
   unsigned long dirty_limit ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_id {
   int id ;
   refcount_t ref ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_vmstats_percpu {
   long stat[38U] ;
   unsigned long events[91U] ;
   unsigned long nr_page_events ;
   unsigned long targets[2U] ;
};
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_reclaim_iter {
   struct mem_cgroup *position ;
   unsigned int generation ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct lruvec_stat {
   long count[32U] ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_shrinker_map {
   struct callback_head rcu ;
   unsigned long map[0U] ;
};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_per_node {
   struct lruvec lruvec ;
   struct lruvec_stat *lruvec_stat_local ;
   struct lruvec_stat *lruvec_stat_cpu ;
   atomic_long_t lruvec_stat[32U] ;
   unsigned long lru_zone_size[5U][5U] ;
   struct mem_cgroup_reclaim_iter iter ;
   struct memcg_shrinker_map *shrinker_map ;
   struct rb_node tree_node ;
   unsigned long usage_in_excess ;
   bool on_tree ;
   struct mem_cgroup *memcg ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_threshold {
   struct eventfd_ctx *eventfd ;
   unsigned long threshold ;
};
#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_threshold_ary {
   int current_threshold ;
   unsigned int size ;
   struct mem_cgroup_threshold entries[0U] ;
};
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_thresholds {
   struct mem_cgroup_threshold_ary *primary ;
   struct mem_cgroup_threshold_ary *spare ;
};
#line 164 
enum memcg_kmem_state {
    KMEM_NONE = 0,
    KMEM_ALLOCATED = 1,
    KMEM_ONLINE = 2
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_padding {
   char x[0U] ;
} __attribute__((__aligned__(4096)));
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_cgwb_frn {
   u64 bdi_id ;
   int memcg_id ;
   u64 at ;
   struct wb_completion done ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup {
   struct cgroup_subsys_state css ;
   struct mem_cgroup_id id ;
   struct page_counter memory ;
   struct page_counter swap ;
   struct page_counter memsw ;
   struct page_counter kmem ;
   struct page_counter tcpmem ;
   unsigned long high ;
   struct work_struct high_work ;
   unsigned long soft_limit ;
   struct vmpressure vmpressure ;
   bool use_hierarchy ;
   bool oom_group ;
   bool oom_lock ;
   int under_oom ;
   int swappiness ;
   int oom_kill_disable ;
   struct cgroup_file events_file ;
   struct cgroup_file events_local_file ;
   struct cgroup_file swap_events_file ;
   struct mutex thresholds_lock ;
   struct mem_cgroup_thresholds thresholds ;
   struct mem_cgroup_thresholds memsw_thresholds ;
   struct list_head oom_notify ;
   unsigned long move_charge_at_immigrate ;
   spinlock_t move_lock ;
   unsigned long move_lock_flags ;
   struct memcg_padding _pad1_ ;
   atomic_t moving_account ;
   struct task_struct *move_lock_task ;
   struct memcg_vmstats_percpu *vmstats_local ;
   struct memcg_vmstats_percpu *vmstats_percpu ;
   struct memcg_padding _pad2_ ;
   atomic_long_t vmstats[38U] ;
   atomic_long_t vmevents[91U] ;
   atomic_long_t memory_events[7U] ;
   atomic_long_t memory_events_local[7U] ;
   unsigned long socket_pressure ;
   bool tcpmem_active ;
   int tcpmem_pressure ;
   int kmemcg_id ;
   enum memcg_kmem_state kmem_state ;
   struct list_head kmem_caches ;
   struct list_head cgwb_list ;
   struct wb_domain cgwb_domain ;
   struct memcg_cgwb_frn cgwb_frn[4U] ;
   struct list_head event_list ;
   spinlock_t event_list_lock ;
   struct deferred_split deferred_split_queue ;
   struct mem_cgroup_per_node *nodeinfo[0U] ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/vdso.h"
struct vdso_image {
   void *data ;
   unsigned long size ;
   unsigned long alt ;
   unsigned long alt_len ;
   long sym_vvar_start ;
   long sym_vvar_page ;
   long sym_pvclock_page ;
   long sym_hvclock_page ;
   long sym_VDSO32_NOTE_MASK ;
   long sym___kernel_sigreturn ;
   long sym___kernel_rt_sigreturn ;
   long sym___kernel_vsyscall ;
   long sym_int80_landing_pad ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u16 Elf64_Half;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Off;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u32 Elf64_Word;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_hdr {
   unsigned char e_ident[16U] ;
   Elf64_Half e_type ;
   Elf64_Half e_machine ;
   Elf64_Word e_version ;
   Elf64_Addr e_entry ;
   Elf64_Off e_phoff ;
   Elf64_Off e_shoff ;
   Elf64_Word e_flags ;
   Elf64_Half e_ehsize ;
   Elf64_Half e_phentsize ;
   Elf64_Half e_phnum ;
   Elf64_Half e_shentsize ;
   Elf64_Half e_shnum ;
   Elf64_Half e_shstrndx ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_hdr Elf64_Ehdr;
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_shdr {
   Elf64_Word sh_name ;
   Elf64_Word sh_type ;
   Elf64_Xword sh_flags ;
   Elf64_Addr sh_addr ;
   Elf64_Off sh_offset ;
   Elf64_Xword sh_size ;
   Elf64_Word sh_link ;
   Elf64_Word sh_info ;
   Elf64_Xword sh_addralign ;
   Elf64_Xword sh_entsize ;
};
#line 328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_shdr Elf64_Shdr;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elf.h"
struct kernel_param;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param_ops {
   unsigned int flags ;
   int (*set)(char *, struct kernel_param *) ;
   int (*get)(char *, struct kernel_param *) ;
   void (*free)(void *) ;
};
#line 69 
struct kparam_string;
#line 69 
struct kparam_array;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
union __anonunion_865 {
   void *arg ;
   struct kparam_string *str ;
   struct kparam_array *arr ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param {
   char *name ;
   struct module *mod ;
   struct kernel_param_ops *ops ;
   u16 perm ;
   s8 level ;
   u8 flags ;
   union __anonunion_865 __anonCompField_kernel_param_175 ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int elemsize ;
   unsigned int *num ;
   struct kernel_param_ops *ops ;
   void *elem ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/error-injection.h"
struct error_injection_entry {
   unsigned long addr ;
   int etype ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/module.h"
struct mod_arch_specific {
   unsigned int num_orcs ;
   int *orc_unwind_ip ;
   struct orc_entry *orc_unwind ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_param_attrs;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
   struct completion *kobj_completion ;
} __attribute__((__designated_init__));
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute *, struct module_kobject *, char *) ;
   ssize_t (*store)(struct module_attribute *, struct module_kobject *, char *, size_t ) ;
   void (*setup)(struct module *, char *) ;
   int (*test)(struct module *) ;
   void (*free)(struct module *) ;
};
#line 297 
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2,
    MODULE_STATE_UNFORMED = 3
};
#line 305  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_tree_node {
   struct module *mod ;
   struct latch_tree_node node ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_layout {
   void *base ;
   unsigned int size ;
   unsigned int text_size ;
   unsigned int ro_size ;
   unsigned int ro_after_init_size ;
   struct mod_tree_node mtn ;
};
#line 334  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_kallsyms {
   Elf64_Sym *symtab ;
   unsigned int num_symtab ;
   char *strtab ;
   char *typetab ;
};
#line 342  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct klp_modinfo {
   Elf64_Ehdr hdr ;
   Elf64_Shdr *sechdrs ;
   char *secstrings ;
   unsigned int symndx ;
};
#line 350 
struct module_sect_attrs;
#line 350 
struct module_notes_attrs;
#line 350 
struct trace_event_call;
#line 350 
struct trace_eval_map;
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char *version ;
   char *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol *syms ;
   s32 *crcs ;
   unsigned int num_syms ;
   struct mutex param_lock ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol *gpl_syms ;
   s32 *gpl_crcs ;
   struct kernel_symbol *unused_syms ;
   s32 *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol *unused_gpl_syms ;
   s32 *unused_gpl_crcs ;
   bool sig_ok ;
   bool async_probe_requested ;
   struct kernel_symbol *gpl_future_syms ;
   s32 *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   struct module_layout core_layout ;
   struct module_layout init_layout ;
   struct mod_arch_specific arch ;
   unsigned long taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   struct mod_kallsyms *kallsyms ;
   struct mod_kallsyms core_kallsyms ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   char *args ;
   void *percpu ;
   unsigned int percpu_size ;
   unsigned int num_tracepoints ;
   tracepoint_ptr_t *tracepoints_ptrs ;
   unsigned int num_srcu_structs ;
   struct srcu_struct **srcu_struct_ptrs ;
   unsigned int num_bpf_raw_events ;
   struct bpf_raw_event_map *bpf_raw_events ;
   struct jump_entry *jump_entries ;
   unsigned int num_jump_entries ;
   unsigned int num_trace_bprintk_fmt ;
   char **trace_bprintk_fmt_start ;
   struct trace_event_call **trace_events ;
   unsigned int num_trace_events ;
   struct trace_eval_map **trace_evals ;
   unsigned int num_trace_evals ;
   unsigned int num_ftrace_callsites ;
   unsigned long *ftrace_callsites ;
   bool klp ;
   bool klp_alive ;
   struct klp_modinfo *klp_info ;
   struct list_head source_list ;
   struct list_head target_list ;
   void (*exit)(void) ;
   atomic_t refcnt ;
   ctor_fn_t *ctors ;
   unsigned int num_ctors ;
   struct error_injection_entry *ei_funcs ;
   unsigned int num_ei_funcs ;
} __attribute__((__designated_init__, __aligned__(64)));
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/filter.h"
struct sock_filter {
   __u16 code ;
   __u8 jt ;
   __u8 jf ;
   __u32 k ;
};
#line 35 
struct sock_reuseport;
#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct sock_fprog_kern {
   u16 len ;
   struct sock_filter *filter ;
};
#line 526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
union __anonunion_866 {
   struct sock_filter insns[0U] ;
   struct bpf_insn insnsi[0U] ;
};
#line 526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct bpf_prog {
   u16 pages ;
   u16 jited : 1 ;
   u16 jit_requested : 1 ;
   u16 gpl_compatible : 1 ;
   u16 cb_access : 1 ;
   u16 dst_needed : 1 ;
   u16 blinded : 1 ;
   u16 is_func : 1 ;
   u16 kprobe_override : 1 ;
   u16 has_callchain_buf : 1 ;
   u16 enforce_expected_attach_type : 1 ;
   enum bpf_prog_type type ;
   enum bpf_attach_type expected_attach_type ;
   u32 len ;
   u32 jited_len ;
   u8 tag[8U] ;
   struct bpf_prog_aux *aux ;
   struct sock_fprog_kern *orig_prog ;
   unsigned int (*bpf_func)(void *, struct bpf_insn *) ;
   union __anonunion_866 __anonCompField_bpf_prog_176 ;
};
#line 554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct sk_filter {
   refcount_t refcnt ;
   struct callback_head rcu ;
   struct bpf_prog *prog ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/poll.h"
struct pollfd {
   int fd ;
   short events ;
   short revents ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/poll.h"
struct poll_table_struct {
   void (*_qproc)(struct file *, wait_queue_head_t *, struct poll_table_struct *) ;
   __poll_t _key ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_table;
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_parms {
   possible_net_t net ;
   struct net_device *dev ;
   struct list_head list ;
   int (*neigh_setup)(struct neighbour *) ;
   struct neigh_table *tbl ;
   void *sysctl_table ;
   int dead ;
   refcount_t refcnt ;
   struct callback_head callback_head ;
   int reachable_time ;
   int data[13U] ;
   unsigned long data_state[1U] ;
};
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_statistics {
   unsigned long allocs ;
   unsigned long destroys ;
   unsigned long hash_grows ;
   unsigned long res_failed ;
   unsigned long lookups ;
   unsigned long hits ;
   unsigned long rcv_probes_mcast ;
   unsigned long rcv_probes_ucast ;
   unsigned long periodic_gc_runs ;
   unsigned long forced_gc_runs ;
   unsigned long unres_discards ;
   unsigned long table_fulls ;
};
#line 134 
struct neigh_ops;
#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neighbour {
   struct neighbour *next ;
   struct neigh_table *tbl ;
   struct neigh_parms *parms ;
   unsigned long confirmed ;
   unsigned long updated ;
   rwlock_t lock ;
   refcount_t refcnt ;
   unsigned int arp_queue_len_bytes ;
   struct sk_buff_head arp_queue ;
   struct timer_list timer ;
   unsigned long used ;
   atomic_t probes ;
   __u8 flags ;
   __u8 nud_state ;
   __u8 type ;
   __u8 dead ;
   u8 protocol ;
   seqlock_t ha_lock ;
   unsigned char ha[32U] ;
   struct hh_cache hh ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   struct neigh_ops *ops ;
   struct list_head gc_list ;
   struct callback_head rcu ;
   struct net_device *dev ;
   u8 primary_key[0U] ;
} __attribute__((__designated_init__));
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_ops {
   int family ;
   void (*solicit)(struct neighbour *, struct sk_buff *) ;
   void (*error_report)(struct neighbour *, struct sk_buff *) ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   int (*connected_output)(struct neighbour *, struct sk_buff *) ;
};
#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct pneigh_entry {
   struct pneigh_entry *next ;
   possible_net_t net ;
   struct net_device *dev ;
   u8 flags ;
   u8 protocol ;
   u8 key[0U] ;
};
#line 186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_hash_table {
   struct neighbour **hash_buckets ;
   unsigned int hash_shift ;
   __u32 hash_rnd[4U] ;
   struct callback_head rcu ;
};
#line 194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_table {
   int family ;
   unsigned int entry_size ;
   unsigned int key_len ;
   __be16 protocol ;
   __u32 (*hash)(void *, struct net_device *, __u32 *) ;
   bool (*key_eq)(struct neighbour *, void *) ;
   int (*constructor)(struct neighbour *) ;
   int (*pconstructor)(struct pneigh_entry *) ;
   void (*pdestructor)(struct pneigh_entry *) ;
   void (*proxy_redo)(struct sk_buff *) ;
   bool (*allow_add)(struct net_device *, struct netlink_ext_ack *) ;
   char *id ;
   struct neigh_parms parms ;
   struct list_head parms_list ;
   int gc_interval ;
   int gc_thresh1 ;
   int gc_thresh2 ;
   int gc_thresh3 ;
   unsigned long last_flush ;
   struct delayed_work gc_work ;
   struct timer_list proxy_timer ;
   struct sk_buff_head proxy_queue ;
   atomic_t entries ;
   atomic_t gc_entries ;
   struct list_head gc_list ;
   rwlock_t lock ;
   unsigned long last_rand ;
   struct neigh_statistics *stats ;
   struct neigh_hash_table *nht ;
   struct pneigh_entry **phash_buckets ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst.h"
struct lwtunnel_state;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst.h"
struct dst_entry {
   struct net_device *dev ;
   struct dst_ops *ops ;
   unsigned long _metrics ;
   unsigned long expires ;
   struct xfrm_state *xfrm ;
   int (*input)(struct sk_buff *) ;
   int (*output)(struct net *, struct sock *, struct sk_buff *) ;
   unsigned short flags ;
   short obsolete ;
   unsigned short header_len ;
   unsigned short trailer_len ;
   atomic_t __refcnt ;
   int __use ;
   unsigned long lastuse ;
   struct lwtunnel_state *lwtstate ;
   struct callback_head callback_head ;
   short error ;
   short __pad ;
   __u32 tclassid ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fib_rules.h"
struct fib_rule_hdr {
   __u8 family ;
   __u8 dst_len ;
   __u8 src_len ;
   __u8 tos ;
   __u8 table ;
   __u8 res1 ;
   __u8 res2 ;
   __u8 action ;
   __u32 flags ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fib_rules.h"
struct fib_rule_port_range {
   __u16 start ;
   __u16 end ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_notifier.h"
struct fib_notifier_ops {
   int family ;
   struct list_head list ;
   unsigned int (*fib_seq_read)(struct net *) ;
   int (*fib_dump)(struct net *, struct notifier_block *, struct netlink_ext_ack *) ;
   struct module *owner ;
   struct callback_head rcu ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_kuid_range {
   kuid_t start ;
   kuid_t end ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_rule {
   struct list_head list ;
   int iifindex ;
   int oifindex ;
   u32 mark ;
   u32 mark_mask ;
   u32 flags ;
   u32 table ;
   u8 action ;
   u8 l3mdev ;
   u8 proto ;
   u8 ip_proto ;
   u32 target ;
   __be64 tun_id ;
   struct fib_rule *ctarget ;
   struct net *fr_net ;
   refcount_t refcnt ;
   u32 pref ;
   int suppress_ifgroup ;
   int suppress_prefixlen ;
   char iifname[16U] ;
   char oifname[16U] ;
   struct fib_kuid_range uid_range ;
   struct fib_rule_port_range sport_range ;
   struct fib_rule_port_range dport_range ;
   struct callback_head rcu ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_lookup_arg {
   void *lookup_ptr ;
   void *lookup_data ;
   void *result ;
   struct fib_rule *rule ;
   u32 table ;
   int flags ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_rules_ops {
   int family ;
   struct list_head list ;
   int rule_size ;
   int addr_size ;
   int unresolved_rules ;
   int nr_goto_rules ;
   unsigned int fib_rules_seq ;
   int (*action)(struct fib_rule *, struct flowi *, int , struct fib_lookup_arg *) ;
   bool (*suppress)(struct fib_rule *, struct fib_lookup_arg *) ;
   int (*match)(struct fib_rule *, struct flowi *, int ) ;
   int (*configure)(struct fib_rule *, struct sk_buff *, struct fib_rule_hdr *, struct nlattr **, struct netlink_ext_ack *) ;
   int (*delete)(struct fib_rule *) ;
   int (*compare)(struct fib_rule *, struct fib_rule_hdr *, struct nlattr **) ;
   int (*fill)(struct fib_rule *, struct sk_buff *, struct fib_rule_hdr *) ;
   size_t (*nlmsg_payload)(struct fib_rule *) ;
   void (*flush_cache)(struct fib_rules_ops *) ;
   int nlgroup ;
   struct nla_policy *policy ;
   struct list_head rules_list ;
   struct module *owner ;
   struct net *fro_net ;
   struct callback_head rcu ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
struct l3mdev_ops {
   u32 (*l3mdev_fib_table)(struct net_device *) ;
   struct sk_buff *(*l3mdev_l3_rcv)(struct net_device *, struct sk_buff *, u16 ) ;
   struct sk_buff *(*l3mdev_l3_out)(struct net_device *, struct sock *, struct sk_buff *, u16 ) ;
   struct dst_entry *(*l3mdev_link_scope_lookup)(struct net_device *, struct flowi6 *) ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
struct __anonstruct_socket_lock_t_888 {
   spinlock_t slock ;
   int owned ;
   wait_queue_head_t wq ;
   struct lockdep_map dep_map ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
typedef struct __anonstruct_socket_lock_t_888 socket_lock_t;
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct proto;
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
typedef __u32 __portpair;
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
typedef __u64 __addrpair;
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_890 {
   __be32 skc_daddr ;
   __be32 skc_rcv_saddr ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_889 {
   __addrpair skc_addrpair ;
   struct __anonstruct_890 __anonCompField___anonunion_889_178 ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_891 {
   unsigned int skc_hash ;
   __u16 skc_u16hashes[2U] ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_893 {
   __be16 skc_dport ;
   __u16 skc_num ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_892 {
   __portpair skc_portpair ;
   struct __anonstruct_893 __anonCompField___anonunion_892_181 ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_894 {
   struct hlist_node skc_bind_node ;
   struct hlist_node skc_portaddr_node ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_895 {
   unsigned long skc_flags ;
   struct sock *skc_listener ;
   struct inet_timewait_death_row *skc_tw_dr ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_896 {
   struct hlist_node skc_node ;
   struct hlist_nulls_node skc_nulls_node ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_897 {
   int skc_incoming_cpu ;
   u32 skc_rcv_wnd ;
   u32 skc_tw_rcv_nxt ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_898 {
   u32 skc_rxhash ;
   u32 skc_window_clamp ;
   u32 skc_tw_snd_nxt ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct sock_common {
   union __anonunion_889 __anonCompField_sock_common_179 ;
   union __anonunion_891 __anonCompField_sock_common_180 ;
   union __anonunion_892 __anonCompField_sock_common_182 ;
   unsigned short skc_family ;
   unsigned char skc_state ;
   unsigned char skc_reuse : 4 ;
   unsigned char skc_reuseport : 1 ;
   unsigned char skc_ipv6only : 1 ;
   unsigned char skc_net_refcnt : 1 ;
   int skc_bound_dev_if ;
   union __anonunion_894 __anonCompField_sock_common_183 ;
   struct proto *skc_prot ;
   possible_net_t skc_net ;
   struct in6_addr skc_v6_daddr ;
   struct in6_addr skc_v6_rcv_saddr ;
   atomic64_t skc_cookie ;
   union __anonunion_895 __anonCompField_sock_common_184 ;
   int skc_dontcopy_begin[0U] ;
   union __anonunion_896 __anonCompField_sock_common_185 ;
   unsigned short skc_tx_queue_mapping ;
   unsigned short skc_rx_queue_mapping ;
   union __anonunion_897 __anonCompField_sock_common_186 ;
   refcount_t skc_refcnt ;
   int skc_dontcopy_end[0U] ;
   union __anonunion_898 __anonCompField_sock_common_187 ;
};
#line 231 
struct bpf_sk_storage;
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_sk_backlog_899 {
   atomic_t rmem_alloc ;
   int len ;
   struct sk_buff *head ;
   struct sk_buff *tail ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_900 {
   struct socket_wq *sk_wq ;
   struct socket_wq *sk_wq_raw ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_901 {
   struct sk_buff *sk_send_head ;
   struct rb_root tcp_rtx_queue ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct sock {
   struct sock_common __sk_common ;
   socket_lock_t sk_lock ;
   atomic_t sk_drops ;
   int sk_rcvlowat ;
   struct sk_buff_head sk_error_queue ;
   struct sk_buff *sk_rx_skb_cache ;
   struct sk_buff_head sk_receive_queue ;
   struct __anonstruct_sk_backlog_899 sk_backlog ;
   int sk_forward_alloc ;
   unsigned int sk_ll_usec ;
   unsigned int sk_napi_id ;
   int sk_rcvbuf ;
   struct sk_filter *sk_filter ;
   union __anonunion_900 __anonCompField_sock_188 ;
   struct xfrm_policy *sk_policy[2U] ;
   struct dst_entry *sk_rx_dst ;
   struct dst_entry *sk_dst_cache ;
   atomic_t sk_omem_alloc ;
   int sk_sndbuf ;
   int sk_wmem_queued ;
   refcount_t sk_wmem_alloc ;
   unsigned long sk_tsq_flags ;
   union __anonunion_901 __anonCompField_sock_189 ;
   struct sk_buff *sk_tx_skb_cache ;
   struct sk_buff_head sk_write_queue ;
   __s32 sk_peek_off ;
   int sk_write_pending ;
   __u32 sk_dst_pending_confirm ;
   u32 sk_pacing_status ;
   long sk_sndtimeo ;
   struct timer_list sk_timer ;
   __u32 sk_priority ;
   __u32 sk_mark ;
   unsigned long sk_pacing_rate ;
   unsigned long sk_max_pacing_rate ;
   struct page_frag sk_frag ;
   netdev_features_t sk_route_caps ;
   netdev_features_t sk_route_nocaps ;
   netdev_features_t sk_route_forced_caps ;
   int sk_gso_type ;
   unsigned int sk_gso_max_size ;
   gfp_t sk_allocation ;
   __u32 sk_txhash ;
   unsigned int __sk_flags_offset[0U] ;
   unsigned int sk_padding : 1 ;
   unsigned int sk_kern_sock : 1 ;
   unsigned int sk_no_check_tx : 1 ;
   unsigned int sk_no_check_rx : 1 ;
   unsigned int sk_userlocks : 4 ;
   unsigned int sk_protocol : 8 ;
   unsigned int sk_type : 16 ;
   u16 sk_gso_max_segs ;
   u8 sk_pacing_shift ;
   unsigned long sk_lingertime ;
   struct proto *sk_prot_creator ;
   rwlock_t sk_callback_lock ;
   int sk_err ;
   int sk_err_soft ;
   u32 sk_ack_backlog ;
   u32 sk_max_ack_backlog ;
   kuid_t sk_uid ;
   struct pid *sk_peer_pid ;
   struct cred *sk_peer_cred ;
   long sk_rcvtimeo ;
   ktime_t sk_stamp ;
   u16 sk_tsflags ;
   u8 sk_shutdown ;
   u32 sk_tskey ;
   atomic_t sk_zckey ;
   u8 sk_clockid ;
   u8 sk_txtime_deadline_mode : 1 ;
   u8 sk_txtime_report_errors : 1 ;
   u8 sk_txtime_unused : 6 ;
   struct socket *sk_socket ;
   void *sk_user_data ;
   void *sk_security ;
   struct sock_cgroup_data sk_cgrp_data ;
   struct mem_cgroup *sk_memcg ;
   void (*sk_state_change)(struct sock *) ;
   void (*sk_data_ready)(struct sock *) ;
   void (*sk_write_space)(struct sock *) ;
   void (*sk_error_report)(struct sock *) ;
   int (*sk_backlog_rcv)(struct sock *, struct sk_buff *) ;
   struct sk_buff *(*sk_validate_xmit_skb)(struct sock *, struct net_device *, struct sk_buff *) ;
   void (*sk_destruct)(struct sock *) ;
   struct sock_reuseport *sk_reuseport_cb ;
   struct bpf_sk_storage *sk_bpf_storage ;
   struct callback_head sk_rcu ;
};
#line 1048 
struct request_sock_ops;
#line 1049 
struct timewait_sock_ops;
#line 1050 
struct raw_hashinfo;
#line 1051 
struct smc_hashinfo;
#line 1071 
struct udp_table;
#line 1071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_h_936 {
   struct inet_hashinfo *hashinfo ;
   struct udp_table *udp_table ;
   struct raw_hashinfo *raw_hash ;
   struct smc_hashinfo *smc_hash ;
};
#line 1071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct proto {
   void (*close)(struct sock *, long ) ;
   int (*pre_connect)(struct sock *, struct sockaddr *, int ) ;
   int (*connect)(struct sock *, struct sockaddr *, int ) ;
   int (*disconnect)(struct sock *, int ) ;
   struct sock *(*accept)(struct sock *, int , int *, bool ) ;
   int (*ioctl)(struct sock *, int , unsigned long ) ;
   int (*init)(struct sock *) ;
   void (*destroy)(struct sock *) ;
   void (*shutdown)(struct sock *, int ) ;
   int (*setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct sock *, int , int , char *, int *) ;
   void (*keepalive)(struct sock *, int ) ;
   int (*compat_setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct sock *, int , int , char *, int *) ;
   int (*compat_ioctl)(struct sock *, unsigned int , unsigned long ) ;
   int (*sendmsg)(struct sock *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct sock *, struct msghdr *, size_t , int , int , int *) ;
   int (*sendpage)(struct sock *, struct page *, int , size_t , int ) ;
   int (*bind)(struct sock *, struct sockaddr *, int ) ;
   int (*backlog_rcv)(struct sock *, struct sk_buff *) ;
   void (*release_cb)(struct sock *) ;
   int (*hash)(struct sock *) ;
   void (*unhash)(struct sock *) ;
   void (*rehash)(struct sock *) ;
   int (*get_port)(struct sock *, unsigned short ) ;
   unsigned int inuse_idx ;
   bool (*stream_memory_free)(struct sock *, int ) ;
   bool (*stream_memory_read)(struct sock *) ;
   void (*enter_memory_pressure)(struct sock *) ;
   void (*leave_memory_pressure)(struct sock *) ;
   atomic_long_t *memory_allocated ;
   struct percpu_counter *sockets_allocated ;
   unsigned long *memory_pressure ;
   long *sysctl_mem ;
   int *sysctl_wmem ;
   int *sysctl_rmem ;
   u32 sysctl_wmem_offset ;
   u32 sysctl_rmem_offset ;
   int max_header ;
   bool no_autobind ;
   struct kmem_cache *slab ;
   unsigned int obj_size ;
   slab_flags_t slab_flags ;
   unsigned int useroffset ;
   unsigned int usersize ;
   struct percpu_counter *orphan_count ;
   struct request_sock_ops *rsk_prot ;
   struct timewait_sock_ops *twsk_prot ;
   union __anonunion_h_936 h ;
   struct module *owner ;
   char name[32U] ;
   struct list_head node ;
   int (*diag_destroy)(struct sock *, int ) ;
} __attribute__((__designated_init__));
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/request_sock.h"
struct request_sock_ops {
   int family ;
   unsigned int obj_size ;
   struct kmem_cache *slab ;
   char *slab_name ;
   int (*rtx_syn_ack)(struct sock *, struct request_sock *) ;
   void (*send_ack)(struct sock *, struct sk_buff *, struct request_sock *) ;
   void (*send_reset)(struct sock *, struct sk_buff *) ;
   void (*destructor)(struct request_sock *) ;
   void (*syn_ack_timeout)(struct request_sock *) ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/request_sock.h"
struct request_sock {
   struct sock_common __req_common ;
   struct request_sock *dl_next ;
   u16 mss ;
   u8 num_retrans ;
   u8 cookie_ts : 1 ;
   u8 num_timeout : 7 ;
   u32 ts_recent ;
   struct timer_list rsk_timer ;
   struct request_sock_ops *rsk_ops ;
   struct sock *sk ;
   u32 *saved_syn ;
   u32 secid ;
   u32 peer_secid ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
struct ipv6_stable_secret {
   bool initialized ;
   struct in6_addr secret ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
struct ipv6_devconf {
   __s32 forwarding ;
   __s32 hop_limit ;
   __s32 mtu6 ;
   __s32 accept_ra ;
   __s32 accept_redirects ;
   __s32 autoconf ;
   __s32 dad_transmits ;
   __s32 rtr_solicits ;
   __s32 rtr_solicit_interval ;
   __s32 rtr_solicit_max_interval ;
   __s32 rtr_solicit_delay ;
   __s32 force_mld_version ;
   __s32 mldv1_unsolicited_report_interval ;
   __s32 mldv2_unsolicited_report_interval ;
   __s32 use_tempaddr ;
   __s32 temp_valid_lft ;
   __s32 temp_prefered_lft ;
   __s32 regen_max_retry ;
   __s32 max_desync_factor ;
   __s32 max_addresses ;
   __s32 accept_ra_defrtr ;
   __s32 accept_ra_min_hop_limit ;
   __s32 accept_ra_pinfo ;
   __s32 ignore_routes_with_linkdown ;
   __s32 accept_ra_rtr_pref ;
   __s32 rtr_probe_interval ;
   __s32 accept_ra_rt_info_min_plen ;
   __s32 accept_ra_rt_info_max_plen ;
   __s32 proxy_ndp ;
   __s32 accept_source_route ;
   __s32 accept_ra_from_local ;
   __s32 optimistic_dad ;
   __s32 use_optimistic ;
   __s32 mc_forwarding ;
   __s32 disable_ipv6 ;
   __s32 drop_unicast_in_l2_multicast ;
   __s32 accept_dad ;
   __s32 force_tllao ;
   __s32 ndisc_notify ;
   __s32 suppress_frag_ndisc ;
   __s32 accept_ra_mtu ;
   __s32 drop_unsolicited_na ;
   struct ipv6_stable_secret stable_secret ;
   __s32 use_oif_addrs_only ;
   __s32 keep_addr_on_down ;
   __s32 seg6_enabled ;
   __s32 seg6_require_hmac ;
   __u32 enhanced_dad ;
   __u32 addr_gen_mode ;
   __s32 disable_policy ;
   __s32 ndisc_tclass ;
   struct ctl_table_header *sysctl_header ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/timewait_sock.h"
struct timewait_sock_ops {
   struct kmem_cache *twsk_slab ;
   char *twsk_slab_name ;
   unsigned int twsk_obj_size ;
   int (*twsk_unique)(struct sock *, struct sock *, void *) ;
   void (*twsk_destructor)(struct sock *) ;
};
#line 246  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_ecn.h"
typedef u32 codel_time_t;
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_tx_queue_params {
   u16 txop ;
   u16 cw_min ;
   u16 cw_max ;
   u8 aifs ;
   bool acm ;
   bool uapsd ;
   bool mu_edca ;
   struct ieee80211_he_mu_edca_param_ac_rec mu_edca_param_rec ;
};
#line 225  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_chanctx_conf {
   struct cfg80211_chan_def def ;
   struct cfg80211_chan_def min_def ;
   u8 rx_chains_static ;
   u8 rx_chains_dynamic ;
   bool radar_enabled ;
   u8 drv_priv[0U] ;
};
#line 267 
struct ieee80211_vif;
#line 440 
struct ieee80211_sta;
#line 471  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_mu_group_data {
   u8 membership[8U] ;
   u8 position[16U] ;
};
#line 484  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_ftm_responder_params {
   u8 *lci ;
   u8 *civicloc ;
   size_t lci_len ;
   size_t civicloc_len ;
};
#line 608  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_bss_conf {
   u8 *bssid ;
   u8 bss_color ;
   u8 htc_trig_based_pkt_ext ;
   bool multi_sta_back_32bit ;
   bool uora_exists ;
   bool ack_enabled ;
   u8 uora_ocw_range ;
   u16 frame_time_rts_th ;
   bool he_support ;
   bool twt_requester ;
   bool twt_responder ;
   bool assoc ;
   bool ibss_joined ;
   bool ibss_creator ;
   u16 aid ;
   bool use_cts_prot ;
   bool use_short_preamble ;
   bool use_short_slot ;
   bool enable_beacon ;
   u8 dtim_period ;
   u16 beacon_int ;
   u16 assoc_capability ;
   u64 sync_tsf ;
   u32 sync_device_ts ;
   u8 sync_dtim_count ;
   u32 basic_rates ;
   struct ieee80211_rate *beacon_rate ;
   int mcast_rate[4U] ;
   u16 ht_operation_mode ;
   s32 cqm_rssi_thold ;
   u32 cqm_rssi_hyst ;
   s32 cqm_rssi_low ;
   s32 cqm_rssi_high ;
   struct cfg80211_chan_def chandef ;
   struct ieee80211_mu_group_data mu_group ;
   __be32 arp_addr_list[4U] ;
   int arp_addr_cnt ;
   bool qos ;
   bool idle ;
   bool ps ;
   u8 ssid[32U] ;
   size_t ssid_len ;
   bool hidden_ssid ;
   int txpower ;
   enum nl80211_tx_power_setting txpower_type ;
   struct ieee80211_p2p_noa_attr p2p_noa_attr ;
   bool allow_p2p_go_ps ;
   u16 max_idle_period ;
   bool protected_keep_alive ;
   bool ftm_responder ;
   struct ieee80211_ftm_responder_params *ftmr_params ;
   bool nontransmitted ;
   u8 transmitter_bssid[6U] ;
   u8 bssid_index ;
   u8 bssid_indicator ;
   bool ema_ap ;
   u8 profile_periodicity ;
   struct ieee80211_he_operation he_operation ;
   struct ieee80211_he_obss_pd he_obss_pd ;
};
#line 930  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_tx_rate {
   s8 idx ;
   u16 count : 5 ;
   u16 flags : 11 ;
} __attribute__((__packed__));
#line 1004  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct __anonstruct_1012 {
   struct ieee80211_tx_rate rates[4U] ;
   s8 rts_cts_rate_idx ;
   u8 use_rts : 1 ;
   u8 use_cts_prot : 1 ;
   u8 short_preamble : 1 ;
   u8 skip_table : 1 ;
};
#line 1004  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
union __anonunion_1011 {
   struct __anonstruct_1012 __anonCompField___anonunion_1011_192 ;
   unsigned long jiffies ;
};
#line 1004 
struct ieee80211_key_conf;
#line 1004  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct __anonstruct_control_1010 {
   union __anonunion_1011 __anonCompField___anonstruct_control_1010_193 ;
   struct ieee80211_vif *vif ;
   struct ieee80211_key_conf *hw_key ;
   u32 flags ;
   codel_time_t enqueue_time ;
};
#line 1004  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct __anonstruct_ack_1013 {
   u64 cookie ;
};
#line 1004  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct __anonstruct_status_1014 {
   struct ieee80211_tx_rate rates[4U] ;
   s32 ack_signal ;
   u8 ampdu_ack_len ;
   u8 ampdu_len ;
   u8 antenna ;
   u16 tx_time ;
   bool is_valid_ack_signal ;
   void *status_driver_data[2U] ;
};
#line 1004  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct __anonstruct_1015 {
   struct ieee80211_tx_rate driver_rates[4U] ;
   u8 pad[4U] ;
   void *rate_driver_data[3U] ;
};
#line 1004  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
union __anonunion_1009 {
   struct __anonstruct_control_1010 control ;
   struct __anonstruct_ack_1013 ack ;
   struct __anonstruct_status_1014 status ;
   struct __anonstruct_1015 __anonCompField___anonunion_1009_194 ;
   void *driver_data[5U] ;
};
#line 1004  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_tx_info {
   u32 flags ;
   u8 band ;
   u8 hw_queue ;
   u16 ack_frame_id : 6 ;
   u16 tx_time_est : 10 ;
   union __anonunion_1009 __anonCompField_ieee80211_tx_info_195 ;
};
#line 1119 
struct ieee80211_rx_status;
#line 1358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_rx_status {
   u64 mactime ;
   u64 boottime_ns ;
   u32 device_timestamp ;
   u32 ampdu_reference ;
   u32 flag ;
   u16 freq ;
   u8 enc_flags ;
   u8 encoding : 2 ;
   u8 bw : 3 ;
   u8 he_ru : 3 ;
   u8 he_gi : 2 ;
   u8 he_dcm : 1 ;
   u8 rate_idx ;
   u8 nss ;
   u8 rx_flags ;
   u8 band ;
   u8 antenna ;
   s8 signal ;
   u8 chains ;
   s8 chain_signal[4U] ;
   u8 ampdu_delimiter_crc ;
   u8 zero_length_psdu_type ;
};
#line 1430 
enum ieee80211_smps_mode {
    IEEE80211_SMPS_AUTOMATIC = 0,
    IEEE80211_SMPS_OFF = 1,
    IEEE80211_SMPS_STATIC = 2,
    IEEE80211_SMPS_DYNAMIC = 3,
    IEEE80211_SMPS_NUM_MODES = 4
};
#line 1522  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_conf {
   u32 flags ;
   int power_level ;
   int dynamic_ps_timeout ;
   u16 listen_interval ;
   u8 ps_dtim_period ;
   u8 long_frame_max_tx_count ;
   u8 short_frame_max_tx_count ;
   struct cfg80211_chan_def chandef ;
   bool radar_enabled ;
   enum ieee80211_smps_mode smps_mode ;
};
#line 1627 
struct ieee80211_txq;
#line 1627  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_vif {
   enum nl80211_iftype type ;
   struct ieee80211_bss_conf bss_conf ;
   u8 addr[6U] ;
   bool p2p ;
   bool csa_active ;
   bool mu_mimo_owner ;
   u8 cab_queue ;
   u8 hw_queue[4U] ;
   struct ieee80211_txq *txq ;
   struct ieee80211_chanctx_conf *chanctx_conf ;
   u32 driver_flags ;
   struct dentry *debugfs_dir ;
   unsigned int probe_req_reg ;
   bool txqs_stopped[4U] ;
   u8 drv_priv[0U] ;
};
#line 1772  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_key_conf {
   atomic64_t tx_pn ;
   u32 cipher ;
   u8 icv_len ;
   u8 iv_len ;
   u8 hw_key_idx ;
   s8 keyidx ;
   u16 flags ;
   u8 keylen ;
   u8 key[0U] ;
};
#line 1846  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_cipher_scheme {
   u32 cipher ;
   u16 iftype ;
   u8 hdr_len ;
   u8 pn_len ;
   u8 pn_off ;
   u8 key_idx_off ;
   u8 key_idx_mask ;
   u8 key_idx_shift ;
   u8 mic_len ;
};
#line 1870 
enum ieee80211_sta_rx_bandwidth {
    IEEE80211_STA_RX_BW_20 = 0,
    IEEE80211_STA_RX_BW_40 = 1,
    IEEE80211_STA_RX_BW_80 = 2,
    IEEE80211_STA_RX_BW_160 = 3
};
#line 1915  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct __anonstruct_rate_1023 {
   s8 idx ;
   u8 count ;
   u8 count_cts ;
   u8 count_rts ;
   u16 flags ;
};
#line 1915  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_sta_rates {
   struct callback_head callback_head ;
   struct __anonstruct_rate_1023 rate[4U] ;
};
#line 1939  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_sta_txpwr {
   s16 power ;
   enum nl80211_tx_power_setting type ;
};
#line 1991  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_sta {
   u32 supp_rates[4U] ;
   u8 addr[6U] ;
   u16 aid ;
   struct ieee80211_sta_ht_cap ht_cap ;
   struct ieee80211_sta_vht_cap vht_cap ;
   struct ieee80211_sta_he_cap he_cap ;
   u16 max_rx_aggregation_subframes ;
   bool wme ;
   u8 uapsd_queues ;
   u8 max_sp ;
   u8 rx_nss ;
   enum ieee80211_sta_rx_bandwidth bandwidth ;
   enum ieee80211_smps_mode smps_mode ;
   struct ieee80211_sta_rates *rates ;
   bool tdls ;
   bool tdls_initiator ;
   bool mfp ;
   u8 max_amsdu_subframes ;
   u16 max_amsdu_len ;
   bool support_p2p_ps ;
   u16 max_rc_amsdu_len ;
   u16 max_tid_amsdu_len[16U] ;
   struct ieee80211_sta_txpwr txpwr ;
   struct ieee80211_txq *txq[17U] ;
   u8 drv_priv[0U] ;
};
#line 2074  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_txq {
   struct ieee80211_vif *vif ;
   struct ieee80211_sta *sta ;
   u8 tid ;
   u8 ac ;
   u8 drv_priv[0U] ;
};
#line 2487  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct __anonstruct_radiotap_timestamp_1024 {
   int units_pos ;
   s16 accuracy ;
};
#line 2487  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_hw {
   struct ieee80211_conf conf ;
   struct wiphy *wiphy ;
   char *rate_control_algorithm ;
   void *priv ;
   unsigned long flags[1U] ;
   unsigned int extra_tx_headroom ;
   unsigned int extra_beacon_tailroom ;
   int vif_data_size ;
   int sta_data_size ;
   int chanctx_data_size ;
   int txq_data_size ;
   u16 queues ;
   u16 max_listen_interval ;
   s8 max_signal ;
   u8 max_rates ;
   u8 max_report_rates ;
   u8 max_rate_tries ;
   u16 max_rx_aggregation_subframes ;
   u16 max_tx_aggregation_subframes ;
   u8 max_tx_fragments ;
   u8 offchannel_tx_hw_queue ;
   u8 radiotap_mcs_details ;
   u16 radiotap_vht_details ;
   struct __anonstruct_radiotap_timestamp_1024 radiotap_timestamp ;
   netdev_features_t netdev_features ;
   u8 uapsd_queues ;
   u8 uapsd_max_sp_len ;
   u8 n_cipher_schemes ;
   struct ieee80211_cipher_scheme *cipher_schemes ;
   u8 max_nan_de_entries ;
   u8 tx_sk_pacing_shift ;
   u8 weight_multiplier ;
   u32 max_mtu ;
};
#line 166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitfield.h"
struct rtl_priv;
#line 234  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct rtlwifi_firmware_header {
   __le16 signature ;
   u8 category ;
   u8 function ;
   __le16 version ;
   u8 subversion ;
   u8 rsvd1 ;
   u8 month ;
   u8 date ;
   u8 hour ;
   u8 minute ;
   __le16 ramcodesize ;
   __le16 rsvd2 ;
   __le32 svnindex ;
   __le32 rsvd3 ;
   __le32 rsvd4 ;
   __le32 rsvd5 ;
};
#line 284 
enum intf_type {
    INTF_PCI = 0,
    INTF_USB = 1
};
#line 289 
enum radio_path {
    RF90_PATH_A = 0,
    RF90_PATH_B = 1,
    RF90_PATH_C = 2,
    RF90_PATH_D = 3
};
#line 349 
enum rf_pwrstate {
    ERFON = 0,
    ERFSLEEP = 1,
    ERFOFF = 2
};
#line 384  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct bb_reg_def {
   u32 rfintfs ;
   u32 rfintfi ;
   u32 rfintfo ;
   u32 rfintfe ;
   u32 rf3wire_offset ;
   u32 rflssi_select ;
   u32 rftxgain_stage ;
   u32 rfhssi_para1 ;
   u32 rfhssi_para2 ;
   u32 rfsw_ctrl ;
   u32 rfagc_control1 ;
   u32 rfagc_control2 ;
   u32 rfrxiq_imbal ;
   u32 rfrx_afe ;
   u32 rftxiq_imbal ;
   u32 rftx_afe ;
   u32 rf_rb ;
   u32 rf_rbpi ;
};
#line 404 
enum io_type {
    IO_CMD_PAUSE_DM_BY_SCAN = 0,
    IO_CMD_PAUSE_BAND0_DM_BY_SCAN = 0,
    IO_CMD_PAUSE_BAND1_DM_BY_SCAN = 1,
    IO_CMD_RESUME_DM_BY_SCAN = 2
};
#line 513 
enum rt_media_status {
    RT_MEDIA_DISCONNECT = 0,
    RT_MEDIA_CONNECT = 1
};
#line 595 
enum rt_enc_alg {
    NO_ENCRYPTION = 0,
    WEP40_ENCRYPTION = 1,
    TKIP_ENCRYPTION = 2,
    RSERVED_ENCRYPTION = 3,
    AESCCMP_ENCRYPTION = 4,
    WEP104_ENCRYPTION = 5,
    AESCMAC_ENCRYPTION = 6
};
#line 772 
enum rt_psmode {
    EACTIVE = 0,
    EMAXPS = 1,
    EFASTPS = 2,
    EAUTOPS = 3
};
#line 779 
enum led_ctl_mode {
    LED_CTL_POWER_ON = 1,
    LED_CTL_LINK = 2,
    LED_CTL_NO_LINK = 3,
    LED_CTL_TX = 4,
    LED_CTL_RX = 5,
    LED_CTL_SITE_SURVEY = 6,
    LED_CTL_POWER_OFF = 7,
    LED_CTL_START_TO_LINK = 8,
    LED_CTL_START_WPS = 9,
    LED_CTL_STOP_WPS = 10
};
#line 792 
enum rtl_led_pin {
    LED_PIN_GPIO0 = 0,
    LED_PIN_LED0 = 1,
    LED_PIN_LED1 = 2,
    LED_PIN_LED2 = 3
};
#line 805 
enum macphy_mode {
    SINGLEMAC_SINGLEPHY = 0,
    DUALMAC_DUALPHY = 1,
    DUALMAC_SINGLEPHY = 2
};
#line 811 
enum band_type {
    BAND_ON_2_4G = 0,
    BAND_ON_5G = 1,
    BAND_ON_BOTH = 2,
    BANDMAX = 3
};
#line 910 
enum rtl_link_state {
    MAC80211_NOLINK = 0,
    MAC80211_LINKING = 1,
    MAC80211_LINKED = 2,
    MAC80211_LINKED_SCANNING = 3
};
#line 931 
enum rt_polarity_ctl {
    RT_POLARITY_LOW_ACT = 0,
    RT_POLARITY_HIGH_ACT = 1
};
#line 967 
enum rtl_spec_ver {
    RTL_SPEC_NEW_RATEID = 1,
    RTL_SPEC_SUPPORT_VHT = 2,
    RTL_SPEC_EXT_C2H = 4
};
#line 1076  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct rtl_led {
   void *hw ;
   enum rtl_led_pin ledpin ;
   bool ledon ;
};
#line 1082  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct rtl_led_ctl {
   bool led_opendrain ;
   struct rtl_led sw_led0 ;
   struct rtl_led sw_led1 ;
};
#line 1088  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct rtl_qos_parameters {
   __le16 cw_min ;
   __le16 cw_max ;
   u8 aifs ;
   u8 flag ;
   __le16 tx_op ;
} __attribute__((__packed__));
#line 1096  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct rt_smooth_data {
   u32 elements[100U] ;
   u32 index ;
   u32 total_num ;
   u32 total_val ;
};
#line 1103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct false_alarm_statistics {
   u32 cnt_parity_fail ;
   u32 cnt_rate_illegal ;
   u32 cnt_crc8_fail ;
   u32 cnt_mcs_fail ;
   u32 cnt_fast_fsync_fail ;
   u32 cnt_sb_search_fail ;
   u32 cnt_ofdm_fail ;
   u32 cnt_cck_fail ;
   u32 cnt_all ;
   u32 cnt_ofdm_cca ;
   u32 cnt_cck_cca ;
   u32 cnt_cca_all ;
   u32 cnt_bw_usc ;
   u32 cnt_bw_lsc ;
};
#line 1120  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct init_gain {
   u8 xaagccore1 ;
   u8 xbagccore1 ;
   u8 xcagccore1 ;
   u8 xdagccore1 ;
   u8 cca ;
};
#line 1129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct wireless_stats {
   u64 txbytesunicast ;
   u64 txbytesmulticast ;
   u64 txbytesbroadcast ;
   u64 rxbytesunicast ;
   u64 txbytesunicast_inperiod ;
   u64 rxbytesunicast_inperiod ;
   u32 txbytesunicast_inperiod_tp ;
   u32 rxbytesunicast_inperiod_tp ;
   u64 txbytesunicast_last ;
   u64 rxbytesunicast_last ;
   long rx_snr_db[4U] ;
   long recv_signal_power ;
   long signal_quality ;
   long last_sigstrength_inpercent ;
   u32 rssi_calculate_cnt ;
   u32 pwdb_all_cnt ;
   long signal_strength ;
   u8 rx_rssi_percentage[4U] ;
   u8 rx_evm_dbm[4U] ;
   u8 rx_evm_percentage[2U] ;
   u16 rx_cfo_short[4U] ;
   u16 rx_cfo_tail[4U] ;
   struct rt_smooth_data ui_rssi ;
   struct rt_smooth_data ui_link_quality ;
};
#line 1169  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct rate_adaptive {
   u8 rate_adaptive_disabled ;
   u8 ratr_state ;
   u16 reserve ;
   u32 high_rssi_thresh_for_ra ;
   u32 high2low_rssi_thresh_for_ra ;
   u8 low2high_rssi_thresh_for_ra40m ;
   u32 low_rssi_thresh_for_ra40m ;
   u8 low2high_rssi_thresh_for_ra20m ;
   u32 low_rssi_thresh_for_ra20m ;
   u32 upper_rssi_threshold_ratr ;
   u32 middleupper_rssi_threshold_ratr ;
   u32 middle_rssi_threshold_ratr ;
   u32 middlelow_rssi_threshold_ratr ;
   u32 low_rssi_threshold_ratr ;
   u32 ultralow_rssi_threshold_ratr ;
   u32 low_rssi_threshold_ratr_40m ;
   u32 low_rssi_threshold_ratr_20m ;
   u8 ping_rssi_enable ;
   u32 ping_rssi_ratr ;
   u32 ping_rssi_thresh_for_ra ;
   u32 last_ratr ;
   u8 pre_ratr_state ;
   u8 ldpc_thres ;
   bool use_ldpc ;
   bool lower_rts_rate ;
   bool is_special_data ;
};
#line 1199  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct regd_pair_mapping {
   u16 reg_dmnenum ;
   u16 reg_5ghz_ctl ;
   u16 reg_2ghz_ctl ;
};
#line 1205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct dynamic_primary_cca {
   u8 pricca_flag ;
   u8 intf_flag ;
   u8 intf_type ;
   u8 dup_rts_flag ;
   u8 monitor_flag ;
   u8 ch_offset ;
   u8 mf_state ;
};
#line 1215  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct rtl_regulatory {
   s8 alpha2[2U] ;
   u16 country_code ;
   u16 max_power_level ;
   u32 tp_scale ;
   u16 current_rd ;
   u16 current_rd_ext ;
   int16_t power_limit ;
   struct regd_pair_mapping *regpair ;
};
#line 1226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct rtl_rfkill {
   bool rfkill_state ;
};
#line 1236 
enum p2p_ps_state {
    P2P_PS_DISABLE = 0,
    P2P_PS_ENABLE = 1,
    P2P_PS_SCAN = 2,
    P2P_PS_SCAN_DONE = 3,
    P2P_PS_ALLSTASLEEP = 4
};
#line 1244 
enum p2p_ps_mode {
    P2P_PS_NONE = 0,
    P2P_PS_CTWINDOW = 1,
    P2P_PS_NOA = 2,
    P2P_PS_MIX = 3
};
#line 1255  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct rtl_p2p_ps_info {
   enum p2p_ps_mode p2p_ps_mode ;
   enum p2p_ps_state p2p_ps_state ;
   u8 noa_index ;
   u8 ctwindow ;
   u8 opp_ps ;
   u8 noa_num ;
   u8 noa_count_type[2U] ;
   u32 noa_duration[2U] ;
   u32 noa_interval[2U] ;
   u32 noa_start_time[2U] ;
};
#line 1277  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct p2p_ps_offload_t {
   u8 offload_en : 1 ;
   u8 role : 1 ;
   u8 ctwindow_en : 1 ;
   u8 noa0_en : 1 ;
   u8 noa1_en : 1 ;
   u8 allstasleep : 1 ;
   u8 discovery : 1 ;
   u8 reserved : 1 ;
};
#line 1291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct iqk_matrix_regs {
   bool iqk_done ;
   long value[1U][8U] ;
};
#line 1296  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct phy_parameters {
   u16 length ;
   u32 *pdata ;
};
#line 1315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct rtl_phy {
   struct bb_reg_def phyreg_def[4U] ;
   struct init_gain initgain_backup ;
   enum io_type current_io_type ;
   u8 rf_mode ;
   u8 rf_type ;
   u8 current_chan_bw ;
   u8 set_bwmode_inprogress ;
   u8 sw_chnl_inprogress ;
   u8 sw_chnl_stage ;
   u8 sw_chnl_step ;
   u8 current_channel ;
   u8 h2c_box_num ;
   u8 set_io_inprogress ;
   u8 lck_inprogress ;
   s32 reg_e94 ;
   s32 reg_e9c ;
   s32 reg_ea4 ;
   s32 reg_eac ;
   s32 reg_eb4 ;
   s32 reg_ebc ;
   s32 reg_ec4 ;
   s32 reg_ecc ;
   u8 rfpienable ;
   u8 reserve_0 ;
   u16 reserve_1 ;
   u32 reg_c04 ;
   u32 reg_c08 ;
   u32 reg_874 ;
   u32 adda_backup[16U] ;
   u32 iqk_mac_backup[4U] ;
   u32 iqk_bb_backup[10U] ;
   bool iqk_initialized ;
   bool rfpath_rx_enable[4U] ;
   u8 reg_837 ;
   bool need_iqk ;
   struct iqk_matrix_regs iqk_matrix[46U] ;
   bool rfpi_enable ;
   bool iqk_in_progress ;
   u8 pwrgroup_cnt ;
   u8 cck_high_power ;
   u32 mcs_txpwrlevel_origoffset[13U][16U] ;
   u32 mcs_offset[13U][16U] ;
   u32 tx_power_by_rate_offset[2U][4U][4U][84U] ;
   u8 txpwr_by_rate_base_24g[4U][4U][6U] ;
   u8 txpwr_by_rate_base_5g[4U][4U][5U] ;
   u8 default_initialgain[4U] ;
   u8 cur_cck_txpwridx ;
   u8 cur_ofdm24g_txpwridx ;
   u8 cur_bw20_txpwridx ;
   u8 cur_bw40_txpwridx ;
   s8 txpwr_limit_2_4g[4U][4U][6U][14U][4U] ;
   s8 txpwr_limit_5g[4U][4U][6U][49U][4U] ;
   u32 rfreg_chnlval[2U] ;
   bool apk_done ;
   u32 reg_rf3c[2U] ;
   u32 backup_rf_0x1a ;
   u8 framesync ;
   u32 framesync_c34 ;
   u8 num_total_rfpath ;
   struct phy_parameters hwparam_tables[10U] ;
   u16 rf_pathmap ;
   u8 hw_rof_enable ;
   enum rt_polarity_ctl polarity_ctl ;
};
#line 1423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct rtl_ht_agg {
   u16 txq_id ;
   u16 wait_for_ba ;
   u16 start_idx ;
   u64 bitmap ;
   u32 rate_n_flags ;
   u8 agg_state ;
   u8 rx_agg_state ;
};
#line 1438  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct rtl_tid_data {
   struct rtl_ht_agg agg ;
};
#line 1455  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct rtl_io {
   struct device *dev ;
   struct mutex bb_mutex ;
   unsigned long pci_mem_end ;
   unsigned long pci_mem_start ;
   unsigned long pci_base_addr ;
   void (*write8_async)(struct rtl_priv *, u32 , u8 ) ;
   void (*write16_async)(struct rtl_priv *, u32 , u16 ) ;
   void (*write32_async)(struct rtl_priv *, u32 , u32 ) ;
   void (*writen_sync)(struct rtl_priv *, u32 , void *, u16 ) ;
   u8 (*read8_sync)(struct rtl_priv *, u32 ) ;
   u16 (*read16_sync)(struct rtl_priv *, u32 ) ;
   u32 (*read32_sync)(struct rtl_priv *, u32 ) ;
};
#line 1478  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct rtl_mac {
   u8 mac_addr[6U] ;
   u8 mac80211_registered ;
   u8 beacon_enabled ;
   u32 tx_ss_num ;
   u32 rx_ss_num ;
   struct ieee80211_supported_band bands[4U] ;
   struct ieee80211_hw *hw ;
   struct ieee80211_vif *vif ;
   enum nl80211_iftype opmode ;
   struct rtl_tid_data tids[9U] ;
   enum rtl_link_state link_state ;
   int n_channels ;
   int n_bitrates ;
   bool offchan_delay ;
   u8 p2p ;
   bool p2p_in_use ;
   u32 rx_conf ;
   u16 rx_mgt_filter ;
   u16 rx_ctrl_filter ;
   u16 rx_data_filter ;
   bool act_scanning ;
   u8 cnt_after_linked ;
   bool skip_scan ;
   struct sk_buff_head skb_waitq[9U] ;
   u8 ht_stbc_cap ;
   u8 ht_cur_stbc ;
   u8 vht_enable ;
   u8 bw_80 ;
   u8 vht_cur_ldpc ;
   u8 vht_cur_stbc ;
   u8 vht_stbc_cap ;
   u8 vht_ldpc_cap ;
   bool rdg_en ;
   u8 bssid[6U] ;
   u32 vendor ;
   u8 mcs[16U] ;
   u32 basic_rates ;
   u8 ht_enable ;
   u8 sgi_40 ;
   u8 sgi_20 ;
   u8 bw_40 ;
   u16 mode ;
   u8 slot_time ;
   u8 short_preamble ;
   u8 use_cts_protect ;
   u8 cur_40_prime_sc ;
   u8 cur_40_prime_sc_bk ;
   u8 cur_80_prime_sc ;
   u64 tsf ;
   u8 retry_short ;
   u8 retry_long ;
   u16 assoc_id ;
   bool hiddenssid ;
   int beacon_interval ;
   u8 min_space_cfg ;
   u8 max_mss_density ;
   u8 current_ampdu_factor ;
   u8 current_ampdu_density ;
   struct ieee80211_tx_queue_params edca_param[5U] ;
   struct rtl_qos_parameters ac[4U] ;
   u64 last_txok_cnt ;
   u64 last_rxok_cnt ;
   u32 last_bt_edca_ul ;
   u32 last_bt_edca_dl ;
};
#line 1572  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct btdm_8723 {
   bool all_off ;
   bool agc_table_en ;
   bool adc_back_off_on ;
   bool b2_ant_hid_en ;
   bool low_penalty_rate_adaptive ;
   bool rf_rx_lpf_shrink ;
   bool reject_aggre_pkt ;
   bool tra_tdma_on ;
   u8 tra_tdma_nav ;
   u8 tra_tdma_ant ;
   bool tdma_on ;
   u8 tdma_ant ;
   u8 tdma_nav ;
   u8 tdma_dac_swing ;
   u8 fw_dac_swing_lvl ;
   bool ps_tdma_on ;
   u8 ps_tdma_byte[5U] ;
   bool pta_on ;
   u32 val_0x6c0 ;
   u32 val_0x6c8 ;
   u32 val_0x6cc ;
   bool sw_dac_swing_on ;
   u32 sw_dac_swing_lvl ;
   u32 wlan_act_hi ;
   u32 wlan_act_lo ;
   u32 bt_retry_index ;
   bool dec_bt_pwr ;
   bool ignore_wlan_act ;
};
#line 1603  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct bt_coexist_8723 {
   u32 high_priority_tx ;
   u32 high_priority_rx ;
   u32 low_priority_tx ;
   u32 low_priority_rx ;
   u8 c2h_bt_info ;
   bool c2h_bt_info_req_sent ;
   bool c2h_bt_inquiry_page ;
   u32 bt_inq_page_start_time ;
   u8 bt_retry_cnt ;
   u8 c2h_bt_info_original ;
   u8 bt_inquiry_page_cnt ;
   struct btdm_8723 btdm ;
};
#line 1618  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct rtl_hal {
   struct ieee80211_hw *hw ;
   bool driver_is_goingto_unload ;
   bool up_first_time ;
   bool first_init ;
   bool being_init_adapter ;
   bool bbrf_ready ;
   bool mac_func_enable ;
   bool pre_edcca_enable ;
   struct bt_coexist_8723 hal_coex_8723 ;
   enum intf_type interface ;
   u16 hw_type ;
   u8 ic_class ;
   u8 oem_id ;
   u32 version ;
   u8 state ;
   u8 board_type ;
   u8 package_type ;
   u8 external_pa ;
   u8 pa_mode ;
   u8 pa_type_2g ;
   u8 pa_type_5g ;
   u8 lna_type_2g ;
   u8 lna_type_5g ;
   u8 external_pa_2g ;
   u8 external_lna_2g ;
   u8 external_pa_5g ;
   u8 external_lna_5g ;
   u8 type_glna ;
   u8 type_gpa ;
   u8 type_alna ;
   u8 type_apa ;
   u8 rfe_type ;
   u32 fwsize ;
   u8 *pfirmware ;
   u16 fw_version ;
   u16 fw_subversion ;
   bool h2c_setinprogress ;
   u8 last_hmeboxnum ;
   bool fw_ready ;
   u8 fw_rsvdpage_startoffset ;
   u8 h2c_txcmd_seq ;
   u8 current_ra_rate ;
   u16 fwcmd_iomap ;
   u32 fwcmd_ioparam ;
   bool set_fwcmd_inprogress ;
   u8 current_fwcmd_io ;
   struct p2p_ps_offload_t p2p_ps_offload ;
   bool fw_clk_change_in_progress ;
   bool allow_sw_to_change_hwclc ;
   u8 fw_ps_state ;
   bool driver_going2unload ;
   u8 minspace_cfg ;
   enum macphy_mode macphymode ;
   enum band_type current_bandtype ;
   enum band_type current_bandtypebackup ;
   enum band_type bandset ;
   u32 interfaceindex ;
   u8 macphyctl_reg ;
   bool earlymode_enable ;
   u8 max_earlymode_num ;
   bool during_mac0init_radiob ;
   bool during_mac1init_radioa ;
   bool reloadtxpowerindex ;
   bool load_imrandiqk_setting_for2g ;
   bool disable_amsdu_8k ;
   bool master_of_dmsp ;
   bool slave_of_dmsp ;
   u16 rx_tag ;
   u8 rts_en ;
   bool wow_enable ;
   bool enter_pnp_sleep ;
   bool wake_from_pnp_sleep ;
   bool wow_enabled ;
   time64_t last_suspend_sec ;
   u32 wowlan_fwsize ;
   u8 *wowlan_firmware ;
   u8 hw_rof_enable ;
   bool real_wow_v2_enable ;
   bool re_init_llt_table ;
};
#line 1725  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct rtl_security {
   bool use_sw_sec ;
   bool being_setkey ;
   bool use_defaultkey ;
   enum rt_enc_alg pairwise_enc_algorithm ;
   enum rt_enc_alg group_enc_algorithm ;
   u32 hwsec_cam_bitmap ;
   u8 hwsec_cam_sta_addr[32U][6U] ;
   u8 key_buf[5U][61U] ;
   u8 key_len[5U] ;
   u8 *pairwise_key ;
};
#line 1752  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct fast_ant_training {
   u8 bssid[6U] ;
   u8 antsel_rx_keep_0 ;
   u8 antsel_rx_keep_1 ;
   u8 antsel_rx_keep_2 ;
   u32 ant_sum[7U] ;
   u32 ant_cnt[7U] ;
   u32 ant_ave[7U] ;
   u8 fat_state ;
   u32 train_idx ;
   u8 antsel_a[33U] ;
   u8 antsel_b[33U] ;
   u8 antsel_c[33U] ;
   u32 main_ant_sum[33U] ;
   u32 aux_ant_sum[33U] ;
   u32 main_ant_cnt[33U] ;
   u32 aux_ant_cnt[33U] ;
   u8 rx_idle_ant ;
   bool becomelinked ;
};
#line 1773  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct dm_phy_dbg_info {
   s8 rx_snrdb[4U] ;
   u64 num_qry_phy_status ;
   u64 num_qry_phy_status_cck ;
   u64 num_qry_phy_status_ofdm ;
   u16 num_qry_beacon_pkt ;
   u16 num_non_be_pkt ;
   s32 rx_evm[4U] ;
};
#line 1783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct rtl_dm {
   long entry_min_undec_sm_pwdb ;
   long undec_sm_cck ;
   long undec_sm_pwdb ;
   long entry_max_undec_sm_pwdb ;
   s32 ofdm_pkt_cnt ;
   bool dm_initialgain_enable ;
   bool dynamic_txpower_enable ;
   bool current_turbo_edca ;
   bool is_any_nonbepkts ;
   bool is_cur_rdlstate ;
   bool txpower_trackinginit ;
   bool disable_framebursting ;
   bool cck_inch14 ;
   bool txpower_tracking ;
   bool useramask ;
   bool rfpath_rxenable[4U] ;
   bool inform_fw_driverctrldm ;
   bool current_mrc_switch ;
   u8 txpowercount ;
   u8 powerindex_backup[6U] ;
   u8 thermalvalue_rxgain ;
   u8 thermalvalue_iqk ;
   u8 thermalvalue_lck ;
   u8 thermalvalue ;
   u8 last_dtp_lvl ;
   u8 thermalvalue_avg[8U] ;
   u8 thermalvalue_avg_index ;
   u8 tm_trigger ;
   bool done_txpower ;
   u8 dynamic_txhighpower_lvl ;
   u8 dm_flag ;
   u8 dm_flag_tmp ;
   u8 dm_type ;
   u8 dm_rssi_sel ;
   u8 txpower_track_control ;
   bool interrupt_migration ;
   bool disable_tx_int ;
   s8 ofdm_index[4U] ;
   u8 default_ofdm_index ;
   u8 default_cck_index ;
   s8 cck_index ;
   s8 delta_power_index[4U] ;
   s8 delta_power_index_last[4U] ;
   s8 power_index_offset[4U] ;
   s8 absolute_ofdm_swing_idx[4U] ;
   s8 remnant_ofdm_swing_idx[4U] ;
   s8 remnant_cck_idx ;
   bool modify_txagc_flag_path_a ;
   bool modify_txagc_flag_path_b ;
   bool one_entry_only ;
   struct dm_phy_dbg_info dbginfo ;
   bool atc_status ;
   bool large_cfo_hit ;
   bool is_freeze ;
   int cfo_tail[2U] ;
   int cfo_ave_pre ;
   int crystal_cap ;
   u8 cfo_threshold ;
   u32 packet_count ;
   u32 packet_count_pre ;
   u8 tx_rate ;
   u8 swing_idx_ofdm[4U] ;
   u8 swing_idx_ofdm_cur ;
   u8 swing_idx_ofdm_base[4U] ;
   bool swing_flag_ofdm ;
   u8 swing_idx_cck ;
   u8 swing_idx_cck_cur ;
   u8 swing_idx_cck_base ;
   bool swing_flag_cck ;
   s8 swing_diff_2g ;
   s8 swing_diff_5g ;
   bool supp_phymode_switch ;
   struct fast_ant_training fat_table ;
   u8 resp_tx_path ;
   u8 path_sel ;
   u32 patha_sum ;
   u32 pathb_sum ;
   u32 patha_cnt ;
   u32 pathb_cnt ;
   u8 pre_channel ;
   u8 *p_channel ;
   u8 linked_interval ;
   u64 last_tx_ok_cnt ;
   u64 last_rx_ok_cnt ;
};
#line 1887 
struct rtl_efuse_ops;
#line 1887  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct rtl_efuse {
   struct rtl_efuse_ops *efuse_ops ;
   bool autoload_ok ;
   bool bootfromefuse ;
   u16 max_physical_size ;
   u8 efuse_map[2U][512U] ;
   u16 efuse_usedbytes ;
   u8 efuse_usedpercentage ;
   u8 autoload_failflag ;
   u8 autoload_status ;
   short epromtype ;
   u16 eeprom_vid ;
   u16 eeprom_did ;
   u16 eeprom_svid ;
   u16 eeprom_smid ;
   u8 eeprom_oemid ;
   u16 eeprom_channelplan ;
   u8 eeprom_version ;
   u8 board_type ;
   u8 external_pa ;
   u8 dev_addr[6U] ;
   u8 wowlan_enable ;
   u8 antenna_div_cfg ;
   u8 antenna_div_type ;
   bool txpwr_fromeprom ;
   u8 eeprom_crystalcap ;
   u8 eeprom_tssi[2U] ;
   u8 eeprom_tssi_5g[3U][2U] ;
   u8 eeprom_pwrlimit_ht20[12U] ;
   u8 eeprom_pwrlimit_ht40[12U] ;
   u8 eeprom_chnlarea_txpwr_cck[4U][3U] ;
   u8 eeprom_chnlarea_txpwr_ht40_1s[4U][12U] ;
   u8 eprom_chnl_txpwr_ht40_2sdf[4U][12U] ;
   u8 internal_pa_5g[2U] ;
   u8 eeprom_c9 ;
   u8 eeprom_cc ;
   u8 eeprom_pwrgroup[2U][3U] ;
   u8 pwrgroup_ht20[2U][59U] ;
   u8 pwrgroup_ht40[2U][59U] ;
   u8 txpwrlevel_cck[4U][14U] ;
   u8 txpwrlevel_ht40_1s[4U][59U] ;
   u8 txpwrlevel_ht40_2s[4U][59U] ;
   s8 txpwr_cckdiff[4U][59U] ;
   s8 txpwr_ht20diff[4U][59U] ;
   s8 txpwr_ht40diff[4U][59U] ;
   s8 txpwr_legacyhtdiff[4U][59U] ;
   u8 txpwr_5g_bw40base[4U][59U] ;
   u8 txpwr_5g_bw80base[4U][7U] ;
   s8 txpwr_5g_ofdmdiff[4U][4U] ;
   s8 txpwr_5g_bw20diff[4U][4U] ;
   s8 txpwr_5g_bw40diff[4U][4U] ;
   s8 txpwr_5g_bw80diff[4U][4U] ;
   u8 txpwr_safetyflag ;
   u16 eeprom_txpowerdiff ;
   u8 legacy_httxpowerdiff ;
   u8 antenna_txpwdiff[3U] ;
   u8 eeprom_regulatory ;
   u8 eeprom_thermalmeter ;
   u8 thermalmeter[2U] ;
   u16 tssi_13dbm ;
   u8 crystalcap ;
   u8 delta_iqk ;
   u8 delta_lck ;
   u8 legacy_ht_txpowerdiff ;
   bool apk_thermalmeterignore ;
   bool b1x1_recvcombine ;
   bool b1ss_support ;
   u8 channel_plan ;
};
#line 1990  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct rtl_efuse_ops {
   int (*efuse_onebyte_read)(struct ieee80211_hw *, u16 , u8 *) ;
   void (*efuse_logical_map_read)(struct ieee80211_hw *, u8 , u16 , u32 *) ;
};
#line 1996  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct rtl_tx_report {
   atomic_t sn ;
   u16 last_sent_sn ;
   unsigned long last_sent_time ;
   u16 last_recv_sn ;
   struct sk_buff_head queue ;
};
#line 2004  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct rtl_ps_ctl {
   bool pwrdomain_protect ;
   bool in_powersavemode ;
   bool rfchange_inprogress ;
   bool swrf_processing ;
   bool hwradiooff ;
   bool support_aspm ;
   bool support_backdoor ;
   enum rt_psmode dot11_psmode ;
   bool swctrl_lps ;
   bool leisure_ps ;
   bool fwctrl_lps ;
   u8 fwctrl_psmode ;
   u8 reg_fwctrl_lps ;
   bool fw_current_inpsmode ;
   u8 reg_max_lps_awakeintvl ;
   bool report_linked ;
   bool low_power_enable ;
   bool inactiveps ;
   u32 rfoff_reason ;
   u32 cur_ps_level ;
   u32 reg_rfps_level ;
   u8 const_amdpci_aspm ;
   bool pwrdown_mode ;
   enum rf_pwrstate inactive_pwrstate ;
   enum rf_pwrstate rfpwr_state ;
   bool sw_ps_enabled ;
   bool state ;
   bool state_inap ;
   bool multi_buffered ;
   u16 nullfunc_seq ;
   unsigned int dtim_counter ;
   unsigned int sleep_ms ;
   unsigned long last_sleep_jiffies ;
   unsigned long last_awake_jiffies ;
   unsigned long last_delaylps_stamp_jiffies ;
   unsigned long last_dtim ;
   unsigned long last_beacon ;
   unsigned long last_action ;
   unsigned long last_slept ;
   struct rtl_p2p_ps_info p2p_ps_info ;
   u8 pwr_mode ;
   u8 smart_ps ;
   u8 wo_wlan_mode ;
   u8 arp_offload_enable ;
   u8 gtk_offload_enable ;
   u32 wakeup_reason ;
};
#line 2076  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct rtl_stats {
   u8 psaddr[6U] ;
   u32 mac_time[2U] ;
   s8 rssi ;
   u8 signal ;
   u8 noise ;
   u8 rate ;
   u8 received_channel ;
   u8 control ;
   u8 mask ;
   u8 freq ;
   u16 len ;
   u64 tsf ;
   u32 beacon_time ;
   u8 nic_type ;
   u16 length ;
   u8 signalquality ;
   s32 recvsignalpower ;
   s8 rxpower ;
   u8 signalstrength ;
   u16 hwerror : 1 ;
   u16 crc : 1 ;
   u16 icv : 1 ;
   u16 shortpreamble : 1 ;
   u16 antenna : 1 ;
   u16 decrypted : 1 ;
   u16 wakeup : 1 ;
   u32 timestamp_low ;
   u32 timestamp_high ;
   bool shift ;
   u8 rx_drvinfo_size ;
   u8 rx_bufshift ;
   bool isampdu ;
   bool isfirst_ampdu ;
   bool rx_is40mhzpacket ;
   u8 rx_packet_bw ;
   u32 rx_pwdb_all ;
   u8 rx_mimo_signalstrength[4U] ;
   s8 rx_mimo_signalquality[4U] ;
   u8 rx_mimo_evm_dbm[4U] ;
   u16 cfo_short[4U] ;
   u16 cfo_tail[4U] ;
   s8 rx_mimo_sig_qual[4U] ;
   u8 rx_pwr[4U] ;
   u8 rx_snr[4U] ;
   u8 bandwidth ;
   u8 bt_coex_pwr_adjust ;
   bool packet_matchbssid ;
   bool is_cck ;
   bool is_ht ;
   bool packet_toself ;
   bool packet_beacon ;
   s8 cck_adc_pwdb[4U] ;
   bool is_vht ;
   bool is_short_gi ;
   u8 vht_nss ;
   u8 packet_report_type ;
   u32 macid ;
   u32 bt_rx_rssi_percentage ;
   u32 macid_valid_entry[2U] ;
};
#line 2146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct rt_link_detect {
   u32 bcn_rx_inperiod ;
   u32 roam_times ;
   u32 num_tx_in4period[4U] ;
   u32 num_rx_in4period[4U] ;
   u32 num_tx_inperiod ;
   u32 num_rx_inperiod ;
   bool busytraffic ;
   bool tx_busy_traffic ;
   bool rx_busy_traffic ;
   bool higher_busytraffic ;
   bool higher_busyrxtraffic ;
   u32 tidtx_in4period[9U][4U] ;
   u32 tidtx_inperiod[9U] ;
   bool higher_busytxtraffic[9U] ;
};
#line 2168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct rtl_tcb_desc {
   u8 packet_bw : 2 ;
   u8 multicast : 1 ;
   u8 broadcast : 1 ;
   u8 rts_stbc : 1 ;
   u8 rts_enable : 1 ;
   u8 cts_enable : 1 ;
   u8 rts_use_shortpreamble : 1 ;
   u8 rts_use_shortgi : 1 ;
   u8 rts_sc : 1 ;
   u8 rts_bw : 1 ;
   u8 rts_rate ;
   u8 use_shortgi : 1 ;
   u8 use_shortpreamble : 1 ;
   u8 use_driver_rate : 1 ;
   u8 disable_ratefallback : 1 ;
   u8 use_spe_rpt : 1 ;
   u8 ratr_index ;
   u8 mac_id ;
   u8 hw_rate ;
   u8 last_inipkt : 1 ;
   u8 cmd_or_init : 1 ;
   u8 queue_index ;
   u8 empkt_num ;
   u32 empkt_len[10U] ;
   bool tx_enable_sw_calc_duration ;
};
#line 2204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct rtl_wow_pattern {
   u8 type ;
   u16 crc ;
   u32 mask[4U] ;
};
#line 2211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct rtl_int {
   u32 inta ;
   u32 intb ;
   u32 intc ;
   u32 intd ;
};
#line 2218  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct rtl_hal_ops {
   int (*init_sw_vars)(struct ieee80211_hw *) ;
   void (*deinit_sw_vars)(struct ieee80211_hw *) ;
   void (*read_chip_version)(struct ieee80211_hw *) ;
   void (*read_eeprom_info)(struct ieee80211_hw *) ;
   void (*interrupt_recognized)(struct ieee80211_hw *, struct rtl_int *) ;
   int (*hw_init)(struct ieee80211_hw *) ;
   void (*hw_disable)(struct ieee80211_hw *) ;
   void (*hw_suspend)(struct ieee80211_hw *) ;
   void (*hw_resume)(struct ieee80211_hw *) ;
   void (*enable_interrupt)(struct ieee80211_hw *) ;
   void (*disable_interrupt)(struct ieee80211_hw *) ;
   int (*set_network_type)(struct ieee80211_hw *, enum nl80211_iftype ) ;
   void (*set_chk_bssid)(struct ieee80211_hw *, bool ) ;
   void (*set_bw_mode)(struct ieee80211_hw *, enum nl80211_channel_type ) ;
   u8 (*switch_channel)(struct ieee80211_hw *) ;
   void (*set_qos)(struct ieee80211_hw *, int ) ;
   void (*set_bcn_reg)(struct ieee80211_hw *) ;
   void (*set_bcn_intv)(struct ieee80211_hw *) ;
   void (*update_interrupt_mask)(struct ieee80211_hw *, u32 , u32 ) ;
   void (*get_hw_reg)(struct ieee80211_hw *, u8 , u8 *) ;
   void (*set_hw_reg)(struct ieee80211_hw *, u8 , u8 *) ;
   void (*update_rate_tbl)(struct ieee80211_hw *, struct ieee80211_sta *, u8 , bool ) ;
   void (*pre_fill_tx_bd_desc)(struct ieee80211_hw *, u8 *, u8 *, u8 , struct sk_buff *, dma_addr_t ) ;
   void (*update_rate_mask)(struct ieee80211_hw *, u8 ) ;
   u16 (*rx_desc_buff_remained_cnt)(struct ieee80211_hw *, u8 ) ;
   void (*rx_check_dma_ok)(struct ieee80211_hw *, u8 *, u8 ) ;
   void (*fill_tx_desc)(struct ieee80211_hw *, struct ieee80211_hdr *, u8 *, u8 *, struct ieee80211_tx_info *, struct ieee80211_sta *, struct sk_buff *, u8 , struct rtl_tcb_desc *) ;
   void (*fill_fake_txdesc)(struct ieee80211_hw *, u8 *, u32 , bool ) ;
   void (*fill_tx_cmddesc)(struct ieee80211_hw *, u8 *, bool , bool , struct sk_buff *) ;
   void (*fill_tx_special_desc)(struct ieee80211_hw *, u8 *, u8 *, struct sk_buff *, u8 ) ;
   bool (*query_rx_desc)(struct ieee80211_hw *, struct rtl_stats *, struct ieee80211_rx_status *, u8 *, struct sk_buff *) ;
   void (*set_channel_access)(struct ieee80211_hw *) ;
   bool (*radio_onoff_checking)(struct ieee80211_hw *, u8 *) ;
   void (*dm_watchdog)(struct ieee80211_hw *) ;
   void (*scan_operation_backup)(struct ieee80211_hw *, u8 ) ;
   bool (*set_rf_power_state)(struct ieee80211_hw *, enum rf_pwrstate ) ;
   void (*led_control)(struct ieee80211_hw *, enum led_ctl_mode ) ;
   void (*set_desc)(struct ieee80211_hw *, u8 *, bool , u8 , u8 *) ;
   u64 (*get_desc)(struct ieee80211_hw *, u8 *, bool , u8 ) ;
   bool (*is_tx_desc_closed)(struct ieee80211_hw *, u8 , u16 ) ;
   void (*tx_polling)(struct ieee80211_hw *, u8 ) ;
   void (*enable_hw_sec)(struct ieee80211_hw *) ;
   void (*set_key)(struct ieee80211_hw *, u32 , u8 *, bool , u8 , bool , bool ) ;
   void (*init_sw_leds)(struct ieee80211_hw *) ;
   void (*deinit_sw_leds)(struct ieee80211_hw *) ;
   u32 (*get_bbreg)(struct ieee80211_hw *, u32 , u32 ) ;
   void (*set_bbreg)(struct ieee80211_hw *, u32 , u32 , u32 ) ;
   u32 (*get_rfreg)(struct ieee80211_hw *, enum radio_path , u32 , u32 ) ;
   void (*set_rfreg)(struct ieee80211_hw *, enum radio_path , u32 , u32 , u32 ) ;
   void (*linked_set_reg)(struct ieee80211_hw *) ;
   void (*chk_switch_dmdp)(struct ieee80211_hw *) ;
   void (*dualmac_easy_concurrent)(struct ieee80211_hw *) ;
   void (*dualmac_switch_to_dmdp)(struct ieee80211_hw *) ;
   bool (*phy_rf6052_config)(struct ieee80211_hw *) ;
   void (*phy_rf6052_set_cck_txpower)(struct ieee80211_hw *, u8 *) ;
   void (*phy_rf6052_set_ofdm_txpower)(struct ieee80211_hw *, u8 *, u8 ) ;
   bool (*config_bb_with_headerfile)(struct ieee80211_hw *, u8 ) ;
   bool (*config_bb_with_pgheaderfile)(struct ieee80211_hw *, u8 ) ;
   void (*phy_lc_calibrate)(struct ieee80211_hw *, bool ) ;
   void (*phy_set_bw_mode_callback)(struct ieee80211_hw *) ;
   void (*dm_dynamic_txpower)(struct ieee80211_hw *) ;
   void (*c2h_command_handle)(struct ieee80211_hw *) ;
   void (*bt_wifi_media_status_notify)(struct ieee80211_hw *, bool ) ;
   void (*bt_coex_off_before_lps)(struct ieee80211_hw *) ;
   void (*fill_h2c_cmd)(struct ieee80211_hw *, u8 , u32 , u8 *) ;
   void (*set_default_port_id_cmd)(struct ieee80211_hw *) ;
   bool (*get_btc_status)(void) ;
   bool (*is_fw_header)(struct rtlwifi_firmware_header *) ;
   void (*add_wowlan_pattern)(struct ieee80211_hw *, struct rtl_wow_pattern *, u8 ) ;
   u16 (*get_available_desc)(struct ieee80211_hw *, u8 ) ;
   void (*c2h_ra_report_handler)(struct ieee80211_hw *, u8 *, u8 ) ;
};
#line 2336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct rtl_intf_ops {
   void (*read_efuse_byte)(struct ieee80211_hw *, u16 , u8 *) ;
   int (*adapter_start)(struct ieee80211_hw *) ;
   void (*adapter_stop)(struct ieee80211_hw *) ;
   bool (*check_buddy_priv)(struct ieee80211_hw *, struct rtl_priv **) ;
   int (*adapter_tx)(struct ieee80211_hw *, struct ieee80211_sta *, struct sk_buff *, struct rtl_tcb_desc *) ;
   void (*flush)(struct ieee80211_hw *, u32 , bool ) ;
   int (*reset_trx_ring)(struct ieee80211_hw *) ;
   bool (*waitq_insert)(struct ieee80211_hw *, struct ieee80211_sta *, struct sk_buff *) ;
   void (*disable_aspm)(struct ieee80211_hw *) ;
   void (*enable_aspm)(struct ieee80211_hw *) ;
};
#line 2361  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct rtl_mod_params {
   u64 debug_mask ;
   bool sw_crypto ;
   int debug_level ;
   bool inactiveps ;
   bool swctrl_lps ;
   bool fwctrl_lps ;
   bool msi_support ;
   bool dma64 ;
   int aspm_support ;
   bool disable_watchdog ;
   bool int_clear ;
   int ant_sel ;
};
#line 2400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct rtl_hal_usbint_cfg {
   u32 in_ep_num ;
   u32 rx_urb_num ;
   u32 rx_max_size ;
   void (*usb_rx_hdl)(struct ieee80211_hw *, struct sk_buff *) ;
   void (*usb_rx_segregate_hdl)(struct ieee80211_hw *, struct sk_buff *, struct sk_buff_head *) ;
   void (*usb_tx_cleanup)(struct ieee80211_hw *, struct sk_buff *) ;
   int (*usb_tx_post_hdl)(struct ieee80211_hw *, struct urb *, struct sk_buff *) ;
   struct sk_buff *(*usb_tx_aggregate_hdl)(struct ieee80211_hw *, struct sk_buff_head *) ;
   int (*usb_endpoint_mapping)(struct ieee80211_hw *) ;
   u16 (*usb_mq_to_hwq)(__le16 , u16 ) ;
};
#line 2423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct rtl_hal_cfg {
   u8 bar_id ;
   bool write_readback ;
   char *name ;
   char *alt_fw_name ;
   struct rtl_hal_ops *ops ;
   struct rtl_mod_params *mod_params ;
   struct rtl_hal_usbint_cfg *usb_interface_cfg ;
   enum rtl_spec_ver spec_ver ;
   u32 maps[91U] ;
};
#line 2440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct rtl_locks {
   struct mutex conf_mutex ;
   struct mutex ips_mutex ;
   struct mutex lps_mutex ;
   spinlock_t irq_th_lock ;
   spinlock_t h2c_lock ;
   spinlock_t rf_ps_lock ;
   spinlock_t rf_lock ;
   spinlock_t waitq_lock ;
   spinlock_t entry_list_lock ;
   spinlock_t usb_lock ;
   spinlock_t c2hcmd_lock ;
   spinlock_t scan_list_lock ;
   spinlock_t fw_ps_lock ;
   spinlock_t cck_and_rw_pagea_lock ;
   spinlock_t iqk_lock ;
};
#line 2466  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct rtl_works {
   struct ieee80211_hw *hw ;
   struct timer_list watchdog_timer ;
   struct timer_list dualmac_easyconcurrent_retrytimer ;
   struct timer_list fw_clockoff_timer ;
   struct timer_list fast_antenna_training_timer ;
   struct tasklet_struct irq_tasklet ;
   struct tasklet_struct irq_prepare_bcn_tasklet ;
   struct workqueue_struct *rtl_wq ;
   struct delayed_work watchdog_wq ;
   struct delayed_work ips_nic_off_wq ;
   struct delayed_work c2hcmd_wq ;
   struct delayed_work ps_work ;
   struct delayed_work ps_rfon_wq ;
   struct delayed_work fwevt_wq ;
   struct work_struct lps_change_work ;
   struct work_struct fill_h2c_cmd ;
};
#line 2493  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct rtl_debug {
   struct dentry *debugfs_dir ;
   char debugfs_name[20U] ;
};
#line 2503  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct rtl_dualmac_easy_concurrent_ctl {
   enum band_type currentbandtype_backfordmdp ;
   bool close_bbandrf_for_dmsp ;
   bool change_to_dmdp ;
   bool change_to_dmsp ;
   bool switch_in_process ;
};
#line 2511  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct rtl_dmsp_ctl {
   bool activescan_for_slaveofdmsp ;
   bool scan_for_anothermac_fordmsp ;
   bool scan_for_itself_fordmsp ;
   bool writedig_for_anothermacofdmsp ;
   u32 curdigvalue_for_anothermacofdmsp ;
   bool changecckpdstate_for_anothermacofdmsp ;
   u8 curcckpdstate_for_anothermacofdmsp ;
   bool changetxhighpowerlvl_for_anothermacofdmsp ;
   u8 curtxhighlvl_for_anothermacofdmsp ;
   long rssivalmin_for_anothermacofdmsp ;
};
#line 2524  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct ps_t {
   u8 pre_ccastate ;
   u8 cur_ccasate ;
   u8 pre_rfstate ;
   u8 cur_rfstate ;
   u8 initialize ;
   long rssi_val_min ;
};
#line 2533  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct dig_t {
   u32 rssi_lowthresh ;
   u32 rssi_highthresh ;
   u32 fa_lowthresh ;
   u32 fa_highthresh ;
   long last_min_undec_pwdb_for_dm ;
   long rssi_highpower_lowthresh ;
   long rssi_highpower_highthresh ;
   u32 recover_cnt ;
   u32 pre_igvalue ;
   u32 cur_igvalue ;
   long rssi_val ;
   u8 dig_enable_flag ;
   u8 dig_ext_port_stage ;
   u8 dig_algorithm ;
   u8 dig_twoport_algorithm ;
   u8 dig_dbgmode ;
   u8 dig_slgorithm_switch ;
   u8 cursta_cstate ;
   u8 presta_cstate ;
   u8 curmultista_cstate ;
   u8 stop_dig ;
   s8 back_val ;
   s8 back_range_max ;
   s8 back_range_min ;
   u8 rx_gain_max ;
   u8 rx_gain_min ;
   u8 min_undec_pwdb_for_dm ;
   u8 rssi_val_min ;
   u8 pre_cck_cca_thres ;
   u8 cur_cck_cca_thres ;
   u8 pre_cck_pd_state ;
   u8 cur_cck_pd_state ;
   u8 pre_cck_fa_state ;
   u8 cur_cck_fa_state ;
   u8 pre_ccastate ;
   u8 cur_ccasate ;
   u8 large_fa_hit ;
   u8 forbidden_igi ;
   u8 dig_state ;
   u8 dig_highpwrstate ;
   u8 cur_sta_cstate ;
   u8 pre_sta_cstate ;
   u8 cur_ap_cstate ;
   u8 pre_ap_cstate ;
   u8 cur_pd_thstate ;
   u8 pre_pd_thstate ;
   u8 cur_cs_ratiostate ;
   u8 pre_cs_ratiostate ;
   u8 backoff_enable_flag ;
   s8 backoffval_range_max ;
   s8 backoffval_range_min ;
   u8 dig_min_0 ;
   u8 dig_min_1 ;
   u8 bt30_cur_igi ;
   bool media_connect_0 ;
   bool media_connect_1 ;
   u32 antdiv_rssi_max ;
   u32 rssi_max ;
};
#line 2595  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct rtl_global_var {
   struct list_head glb_priv_list ;
   spinlock_t glb_list_lock ;
};
#line 2605  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct rtl_btc_info {
   u8 bt_type ;
   u8 btcoexist ;
   u8 ant_num ;
   u8 single_ant_path ;
   u8 ap_num ;
   bool in_4way ;
   unsigned long in_4way_ts ;
};
#line 2616 
struct rtl_btc_ops;
#line 2616  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct bt_coexist_info {
   struct rtl_btc_ops *btc_ops ;
   struct rtl_btc_info btc_info ;
   void *btc_context ;
   void *wifi_only_context ;
   u8 eeprom_bt_coexist ;
   u8 eeprom_bt_type ;
   u8 eeprom_bt_ant_num ;
   u8 eeprom_bt_ant_isol ;
   u8 eeprom_bt_radio_shared ;
   u8 bt_coexistence ;
   u8 bt_ant_num ;
   u8 bt_coexist_type ;
   u8 bt_state ;
   u8 bt_cur_state ;
   u8 bt_ant_isolation ;
   u8 bt_pape_ctrl ;
   u8 bt_service ;
   u8 bt_radio_shared_type ;
   u8 bt_rfreg_origin_1e ;
   u8 bt_rfreg_origin_1f ;
   u8 bt_rssi_state ;
   u32 ratio_tx ;
   u32 ratio_pri ;
   u32 bt_edca_ul ;
   u32 bt_edca_dl ;
   bool init_set ;
   bool bt_busy_traffic ;
   bool bt_traffic_mode_set ;
   bool bt_non_traffic_mode_set ;
   bool fw_coexist_all_off ;
   bool sw_coexist_all_off ;
   bool hw_coexist_all_off ;
   u32 cstate ;
   u32 previous_state ;
   u32 cstate_h ;
   u32 previous_state_h ;
   u8 bt_pre_rssi_state ;
   u8 bt_pre_rssi_state1 ;
   u8 reg_bt_iso ;
   u8 reg_bt_sco ;
   bool balance_on ;
   u8 bt_active_zero_cnt ;
   bool cur_bt_disabled ;
   bool pre_bt_disabled ;
   u8 bt_profile_case ;
   u8 bt_profile_action ;
   bool bt_busy ;
   bool hold_for_bt_operation ;
   u8 lps_counter ;
};
#line 2676  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct rtl_btc_ops {
   void (*btc_init_variables)(struct rtl_priv *) ;
   void (*btc_init_variables_wifi_only)(struct rtl_priv *) ;
   void (*btc_deinit_variables)(struct rtl_priv *) ;
   void (*btc_init_hal_vars)(struct rtl_priv *) ;
   void (*btc_power_on_setting)(struct rtl_priv *) ;
   void (*btc_init_hw_config)(struct rtl_priv *) ;
   void (*btc_init_hw_config_wifi_only)(struct rtl_priv *) ;
   void (*btc_ips_notify)(struct rtl_priv *, u8 ) ;
   void (*btc_lps_notify)(struct rtl_priv *, u8 ) ;
   void (*btc_scan_notify)(struct rtl_priv *, u8 ) ;
   void (*btc_scan_notify_wifi_only)(struct rtl_priv *, u8 ) ;
   void (*btc_connect_notify)(struct rtl_priv *, u8 ) ;
   void (*btc_mediastatus_notify)(struct rtl_priv *, enum rt_media_status ) ;
   void (*btc_periodical)(struct rtl_priv *) ;
   void (*btc_halt_notify)(struct rtl_priv *) ;
   void (*btc_btinfo_notify)(struct rtl_priv *, u8 *, u8 ) ;
   void (*btc_btmpinfo_notify)(struct rtl_priv *, u8 *, u8 ) ;
   bool (*btc_is_limited_dig)(struct rtl_priv *) ;
   bool (*btc_is_disable_edca_turbo)(struct rtl_priv *) ;
   bool (*btc_is_bt_disabled)(struct rtl_priv *) ;
   void (*btc_special_packet_notify)(struct rtl_priv *, u8 ) ;
   void (*btc_switch_band_notify)(struct rtl_priv *, u8 , bool ) ;
   void (*btc_switch_band_notify_wifi_only)(struct rtl_priv *, u8 , bool ) ;
   void (*btc_display_bt_coex_info)(struct rtl_priv *, struct seq_file *) ;
   void (*btc_record_pwr_mode)(struct rtl_priv *, u8 *, u8 ) ;
   u8 (*btc_get_lps_val)(struct rtl_priv *) ;
   u8 (*btc_get_rpwm_val)(struct rtl_priv *) ;
   bool (*btc_is_bt_ctrl_lps)(struct rtl_priv *) ;
   void (*btc_get_ampdu_cfg)(struct rtl_priv *, u8 *, u8 *, u8 *) ;
   bool (*btc_is_bt_lps_on)(struct rtl_priv *) ;
};
#line 2718  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct proxim {
   bool proxim_on ;
   void *proximity_priv ;
   int (*proxim_rx)(struct ieee80211_hw *, struct rtl_stats *, struct sk_buff *) ;
   u8 (*proxim_get_var)(struct ieee80211_hw *, u8 ) ;
};
#line 2740  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct rtl_scan_list {
   int num ;
   struct list_head list ;
};
#line 2745 
struct rtl_rate_priv;
#line 2745  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct rtl_priv {
   struct ieee80211_hw *hw ;
   struct completion firmware_loading_complete ;
   struct list_head list ;
   struct rtl_priv *buddy_priv ;
   struct rtl_global_var *glb_var ;
   struct rtl_dualmac_easy_concurrent_ctl easy_concurrent_ctl ;
   struct rtl_dmsp_ctl dmsp_ctl ;
   struct rtl_locks locks ;
   struct rtl_works works ;
   struct rtl_mac mac80211 ;
   struct rtl_hal rtlhal ;
   struct rtl_regulatory regd ;
   struct rtl_rfkill rfkill ;
   struct rtl_io io ;
   struct rtl_phy phy ;
   struct rtl_dm dm ;
   struct rtl_security sec ;
   struct rtl_efuse efuse ;
   struct rtl_led_ctl ledctl ;
   struct rtl_tx_report tx_report ;
   struct rtl_scan_list scan_list ;
   struct rtl_ps_ctl psc ;
   struct rate_adaptive ra ;
   struct dynamic_primary_cca primarycca ;
   struct wireless_stats stats ;
   struct rt_link_detect link_info ;
   struct false_alarm_statistics falsealm_cnt ;
   struct rtl_rate_priv *rate_priv ;
   struct list_head entry_list ;
   struct sk_buff_head c2hcmd_queue ;
   struct rtl_debug dbg ;
   int max_fw_size ;
   struct rtl_hal_cfg *cfg ;
   struct rtl_intf_ops *intf_ops ;
   unsigned long status ;
   struct dig_t dm_digtable ;
   struct ps_t dm_pstable ;
   u32 reg_874 ;
   u32 reg_c70 ;
   u32 reg_85c ;
   u32 reg_a74 ;
   bool reg_init ;
   bool bt_operation_on ;
   __le32 *usb_data ;
   int usb_data_index ;
   bool initialized ;
   bool enter_ps ;
   u8 rate_mask[5U] ;
   struct proxim proximity ;
   struct bt_coexist_info btcoexist ;
   bool use_new_trx_flow ;
   struct wiphy_wowlan_support wowlan ;
   u8 priv[0U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 282  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/x86_init.h"
struct pci_dev;
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/topology.h"
struct pci_bus;
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct pci_device_id {
   __u32 vendor ;
   __u32 device ;
   __u32 subvendor ;
   __u32 subdevice ;
   __u32 class ;
   __u32 class_mask ;
   kernel_ulong_t driver_data ;
};
#line 252  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_qos_hdr {
   __le16 frame_control ;
   __le16 duration_id ;
   u8 addr1[6U] ;
   u8 addr2[6U] ;
   u8 addr3[6U] ;
   __le16 seq_ctrl ;
   __le16 qos_ctrl ;
} __attribute__((__packed__, __aligned__(2)));
#line 799  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
enum acm_method {
    EACMWAY0_SWANDHW = 0,
    EACMWAY1_HW = 1,
    EACMWAY2_SW = 2
};
#line 1027  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct rtlwifi_tx_info {
   int sn ;
   unsigned long send_time ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct hotplug_slot;
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_slot {
   struct pci_bus *bus ;
   struct list_head list ;
   struct hotplug_slot *hotplug ;
   unsigned char number ;
   struct kobject kobj ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef int pci_power_t;
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned int pci_channel_state_t;
#line 162 
enum pci_channel_state {
    pci_channel_io_normal = 1,
    pci_channel_io_frozen = 2,
    pci_channel_io_perm_failure = 3
};
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned short pci_dev_flags_t;
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned short pci_bus_flags_t;
#line 282 
struct pcie_link_state;
#line 283 
struct pci_vpd;
#line 284 
struct pci_sriov;
#line 285 
struct pci_p2pdma;
#line 290 
struct aer_stats;
#line 290 
struct pci_driver;
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
union __anonunion_2053 {
   struct pci_sriov *sriov ;
   struct pci_dev *physfn ;
};
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_dev {
   struct list_head bus_list ;
   struct pci_bus *bus ;
   struct pci_bus *subordinate ;
   void *sysdata ;
   struct proc_dir_entry *procent ;
   struct pci_slot *slot ;
   unsigned int devfn ;
   unsigned short vendor ;
   unsigned short device ;
   unsigned short subsystem_vendor ;
   unsigned short subsystem_device ;
   unsigned int class ;
   u8 revision ;
   u8 hdr_type ;
   u16 aer_cap ;
   struct aer_stats *aer_stats ;
   u8 pcie_cap ;
   u8 msi_cap ;
   u8 msix_cap ;
   u8 pcie_mpss : 3 ;
   u8 rom_base_reg ;
   u8 pin ;
   u16 pcie_flags_reg ;
   unsigned long *dma_alias_mask ;
   struct pci_driver *driver ;
   u64 dma_mask ;
   struct device_dma_parameters dma_parms ;
   pci_power_t current_state ;
   unsigned int imm_ready : 1 ;
   u8 pm_cap ;
   unsigned int pme_support : 5 ;
   unsigned int pme_poll : 1 ;
   unsigned int d1_support : 1 ;
   unsigned int d2_support : 1 ;
   unsigned int no_d1d2 : 1 ;
   unsigned int no_d3cold : 1 ;
   unsigned int bridge_d3 : 1 ;
   unsigned int d3cold_allowed : 1 ;
   unsigned int mmio_always_on : 1 ;
   unsigned int wakeup_prepared : 1 ;
   unsigned int runtime_d3cold : 1 ;
   unsigned int skip_bus_pm : 1 ;
   unsigned int ignore_hotplug : 1 ;
   unsigned int hotplug_user_indicators : 1 ;
   unsigned int clear_retrain_link : 1 ;
   unsigned int d3_delay ;
   unsigned int d3cold_delay ;
   struct pcie_link_state *link_state ;
   unsigned int ltr_path : 1 ;
   unsigned int eetlp_prefix_path : 1 ;
   pci_channel_state_t error_state ;
   struct device dev ;
   int cfg_size ;
   unsigned int irq ;
   struct resource resource[17U] ;
   bool match_driver ;
   unsigned int transparent : 1 ;
   unsigned int io_window : 1 ;
   unsigned int pref_window : 1 ;
   unsigned int pref_64_window : 1 ;
   unsigned int multifunction : 1 ;
   unsigned int is_busmaster : 1 ;
   unsigned int no_msi : 1 ;
   unsigned int no_64bit_msi : 1 ;
   unsigned int block_cfg_access : 1 ;
   unsigned int broken_parity_status : 1 ;
   unsigned int irq_reroute_variant : 2 ;
   unsigned int msi_enabled : 1 ;
   unsigned int msix_enabled : 1 ;
   unsigned int ari_enabled : 1 ;
   unsigned int ats_enabled : 1 ;
   unsigned int pasid_enabled : 1 ;
   unsigned int pri_enabled : 1 ;
   unsigned int is_managed : 1 ;
   unsigned int needs_freset : 1 ;
   unsigned int state_saved : 1 ;
   unsigned int is_physfn : 1 ;
   unsigned int is_virtfn : 1 ;
   unsigned int reset_fn : 1 ;
   unsigned int is_hotplug_bridge : 1 ;
   unsigned int shpc_managed : 1 ;
   unsigned int is_thunderbolt : 1 ;
   unsigned int untrusted : 1 ;
   unsigned int __aer_firmware_first_valid : 1 ;
   unsigned int __aer_firmware_first : 1 ;
   unsigned int broken_intx_masking : 1 ;
   unsigned int io_window_1k : 1 ;
   unsigned int irq_managed : 1 ;
   unsigned int non_compliant_bars : 1 ;
   unsigned int is_probed : 1 ;
   unsigned int link_active_reporting : 1 ;
   unsigned int no_vf_scan : 1 ;
   pci_dev_flags_t dev_flags ;
   atomic_t enable_cnt ;
   u32 saved_config_space[16U] ;
   struct hlist_head saved_cap_space ;
   struct bin_attribute *rom_attr ;
   int rom_attr_enabled ;
   struct bin_attribute *res_attr[17U] ;
   struct bin_attribute *res_attr_wc[17U] ;
   unsigned int broken_cmd_compl : 1 ;
   unsigned int ptm_root : 1 ;
   unsigned int ptm_enabled : 1 ;
   u8 ptm_granularity ;
   struct attribute_group **msi_irq_groups ;
   struct pci_vpd *vpd ;
   union __anonunion_2053 __anonCompField_pci_dev_197 ;
   u16 ats_cap ;
   u8 ats_stu ;
   u16 pri_cap ;
   u32 pri_reqs_alloc ;
   unsigned int pasid_required : 1 ;
   u16 pasid_cap ;
   u16 pasid_features ;
   struct pci_p2pdma *p2pdma ;
   phys_addr_t rom ;
   size_t romlen ;
   char *driver_override ;
   unsigned long priv_flags ;
};
#line 493 
struct pci_ops;
#line 493 
struct msi_controller;
#line 571  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_bus {
   struct list_head node ;
   struct pci_bus *parent ;
   struct list_head children ;
   struct list_head devices ;
   struct pci_dev *self ;
   struct list_head slots ;
   struct resource *resource[4U] ;
   struct list_head resources ;
   struct resource busn_res ;
   struct pci_ops *ops ;
   struct msi_controller *msi ;
   void *sysdata ;
   struct proc_dir_entry *procdir ;
   unsigned char number ;
   unsigned char primary ;
   unsigned char max_bus_speed ;
   unsigned char cur_bus_speed ;
   char name[48U] ;
   unsigned short bridge_ctl ;
   pci_bus_flags_t bus_flags ;
   struct device *bridge ;
   struct device dev ;
   struct bin_attribute *legacy_io ;
   struct bin_attribute *legacy_mem ;
   unsigned int is_added : 1 ;
};
#line 697  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_ops {
   int (*add_bus)(struct pci_bus *) ;
   void (*remove_bus)(struct pci_bus *) ;
   void *(*map_bus)(struct pci_bus *, unsigned int , int ) ;
   int (*read)(struct pci_bus *, unsigned int , int , int , u32 *) ;
   int (*write)(struct pci_bus *, unsigned int , int , int , u32 ) ;
};
#line 725  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_dynids {
   spinlock_t lock ;
   struct list_head list ;
};
#line 729  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned int pci_ers_result_t;
#line 761  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_error_handlers {
   pci_ers_result_t (*error_detected)(struct pci_dev *, enum pci_channel_state ) ;
   pci_ers_result_t (*mmio_enabled)(struct pci_dev *) ;
   pci_ers_result_t (*slot_reset)(struct pci_dev *) ;
   void (*reset_prepare)(struct pci_dev *) ;
   void (*reset_done)(struct pci_dev *) ;
   void (*resume)(struct pci_dev *) ;
};
#line 824  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_driver {
   struct list_head node ;
   char *name ;
   struct pci_device_id *id_table ;
   int (*probe)(struct pci_dev *, struct pci_device_id *) ;
   void (*remove)(struct pci_dev *) ;
   int (*suspend)(struct pci_dev *, pm_message_t ) ;
   int (*resume)(struct pci_dev *) ;
   void (*shutdown)(struct pci_dev *) ;
   int (*sriov_configure)(struct pci_dev *, int ) ;
   struct pci_error_handlers *err_handler ;
   struct attribute_group **groups ;
   struct device_driver driver ;
   struct pci_dynids dynids ;
};
#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/pci.h"
struct rtl_tx_buffer_desc {
   u32 dword[16U] ;
} __attribute__((__packed__));
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/pci.h"
struct rtl_tx_desc {
   u32 dword[16U] ;
} __attribute__((__packed__));
#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/pci.h"
struct rtl_rx_buffer_desc {
   u32 dword[4U] ;
} __attribute__((__packed__));
#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/pci.h"
struct rtl_rx_desc {
   u32 dword[8U] ;
} __attribute__((__packed__));
#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/pci.h"
struct rtl8192_tx_ring {
   struct rtl_tx_desc *desc ;
   dma_addr_t dma ;
   unsigned int idx ;
   unsigned int entries ;
   struct sk_buff_head queue ;
   struct rtl_tx_buffer_desc *buffer_desc ;
   dma_addr_t buffer_desc_dma ;
   u16 cur_tx_wp ;
   u16 cur_tx_rp ;
};
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/pci.h"
struct rtl8192_rx_ring {
   struct rtl_rx_desc *desc ;
   dma_addr_t dma ;
   unsigned int idx ;
   struct sk_buff *rx_buf[512U] ;
   struct rtl_rx_buffer_desc *buffer_desc ;
   u16 next_rx_rp ;
};
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/pci.h"
struct rtl_pci {
   struct pci_dev *pdev ;
   bool irq_enabled ;
   bool driver_is_goingto_unload ;
   bool up_first_time ;
   bool first_init ;
   bool being_init_adapter ;
   bool init_ready ;
   struct rtl8192_tx_ring tx_ring[9U] ;
   int txringcount[9U] ;
   u32 transmit_config ;
   struct rtl8192_rx_ring rx_ring[2U] ;
   int rxringcount ;
   u16 rxbuffersize ;
   u32 receive_config ;
   u8 irq_alloc ;
   u32 irq_mask[4U] ;
   u32 sys_irq_mask ;
   u32 reg_bcn_ctrl_val ;
   u8 const_pci_aspm ;
   u8 const_amdpci_aspm ;
   u8 const_hwsw_rfoff_d3 ;
   u8 const_support_pciaspm ;
   u8 const_hostpci_aspm_setting ;
   u8 const_devicepci_aspm_setting ;
   bool support_aspm ;
   bool support_backdoor ;
   enum acm_method acm_method ;
   u16 shortretry_limit ;
   u16 longretry_limit ;
   bool msi_support ;
   bool using_msi ;
   bool int_clear ;
};
#line 224  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/pci.h"
struct mp_adapter {
   u8 linkctrl_reg ;
   u8 busnumber ;
   u8 devnumber ;
   u8 funcnumber ;
   u8 pcibridge_busnum ;
   u8 pcibridge_devnum ;
   u8 pcibridge_funcnum ;
   u8 pcibridge_vendor ;
   u16 pcibridge_vendorid ;
   u16 pcibridge_deviceid ;
   u8 num4bytes ;
   u8 pcibridge_pciehdr_offset ;
   u8 pcibridge_linkctrlreg ;
   bool amd_l1_patch ;
};
#line 247  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/pci.h"
struct rtl_pci_priv {
   struct bt_coexist_info bt_coexist ;
   struct rtl_led_ctl ledctl ;
   struct rtl_pci dev ;
   struct mp_adapter ndis_adapter ;
};
#line 411  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.h"
struct phy_status_rpt {
   u8 gain_trsw[2U] ;
   u16 chl_num : 10 ;
   u16 sub_chnl : 4 ;
   u16 r_rfmod : 2 ;
   u8 pwdb_all ;
   u8 cfosho[4U] ;
   s8 cfotail[4U] ;
   s8 rxevm[2U] ;
   s8 rxsnr[2U] ;
   u8 pcts_msk_rpt[2U] ;
   u8 pdsnr[2U] ;
   u8 csi_current[2U] ;
   u8 rx_gain_c ;
   u8 rx_gain_d ;
   u8 sigevm ;
   u8 resvd_0 ;
   u8 antidx_anta : 3 ;
   u8 antidx_antb : 3 ;
   u8 resvd_1 : 2 ;
} __attribute__((__packed__));
#line 451  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.h"
struct rx_fwinfo_8821ae {
   u8 gain_trsw[4U] ;
   u8 pwdb_all ;
   u8 cfosho[4U] ;
   u8 cfotail[4U] ;
   s8 rxevm[2U] ;
   s8 rxsnr[4U] ;
   u8 pdsnr[2U] ;
   u8 csi_current[2U] ;
   u8 csi_target[2U] ;
   u8 sigevm ;
   u8 max_ex_pwr ;
   u8 ex_intf_flag : 1 ;
   u8 sgi_en : 1 ;
   u8 rxsc : 2 ;
   u8 reserve : 4 ;
} __attribute__((__packed__));
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 196 
enum hrtimer_restart;
#line 2026  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion___u_3600 {
   struct sk_buff *__val ;
   char __c[1U] ;
};
#line 2027  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion___u_3602 {
   struct sk_buff *__val ;
   char __c[1U] ;
};
#line 253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct txpower_info_2g {
   u8 index_cck_base[4U][6U] ;
   u8 index_bw40_base[4U][6U] ;
   u8 cck_diff[4U][4U] ;
   u8 ofdm_diff[4U][4U] ;
   u8 bw20_diff[4U][4U] ;
   u8 bw40_diff[4U][4U] ;
   u8 bw80_diff[4U][4U] ;
   u8 bw160_diff[4U][4U] ;
};
#line 265  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct txpower_info_5g {
   u8 index_bw40_base[4U][14U] ;
   u8 ofdm_diff[4U][4U] ;
   u8 bw20_diff[4U][4U] ;
   u8 bw40_diff[4U][4U] ;
   u8 bw80_diff[4U][4U] ;
   u8 bw160_diff[4U][4U] ;
};
#line 854  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct __anonstruct_f_4106 {
   u8 aifsn : 4 ;
   u8 acm : 1 ;
   u8 aci : 2 ;
   u8 reserved : 1 ;
};
#line 854  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
union aci_aifsn {
   u8 char_data ;
   struct __anonstruct_f_4106 f ;
};
#line 864 
enum wireless_mode {
    WIRELESS_MODE_UNKNOWN = 0,
    WIRELESS_MODE_A = 1,
    WIRELESS_MODE_B = 2,
    WIRELESS_MODE_G = 4,
    WIRELESS_MODE_AUTO = 8,
    WIRELESS_MODE_N_24G = 16,
    WIRELESS_MODE_N_5G = 32,
    WIRELESS_MODE_AC_5G = 64,
    WIRELESS_MODE_AC_24G = 128,
    WIRELESS_MODE_AC_ONLY = 256,
    WIRELESS_MODE_MAX = 2048
};
#line 1433  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct rssi_sta {
   long undec_sm_pwdb ;
   long undec_sm_cck ;
};
#line 1442  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
struct rtl_sta_info {
   struct list_head list ;
   struct rtl_tid_data tids[9U] ;
   struct rssi_sta rssi_stat ;
   u8 rssi_level ;
   u16 wireless_mode ;
   u8 ratr_index ;
   u8 mimo_ps ;
   u8 mac_addr[6U] ;
} __attribute__((__packed__));
#line 317  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/pci.h"
enum version_8821ae {
    VERSION_TEST_CHIP_1T1R_8812 = 4,
    VERSION_TEST_CHIP_2T2R_8812 = 36,
    VERSION_NORMAL_TSMC_CHIP_1T1R_8812 = 4108,
    VERSION_NORMAL_TSMC_CHIP_2T2R_8812 = 4140,
    VERSION_NORMAL_TSMC_CHIP_1T1R_8812_C_CUT = 8204,
    VERSION_NORMAL_TSMC_CHIP_2T2R_8812_C_CUT = 8236,
    VERSION_TEST_CHIP_8821 = 5,
    VERSION_NORMAL_TSMC_CHIP_8821 = 13,
    VERSION_NORMAL_TSMC_CHIP_8821_B_CUT = 4109,
    VERSION_UNKNOWN = 255
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/pwrseqcmd.h"
struct wlan_pwr_cfg {
   u16 offset ;
   u8 cut_msk ;
   u8 fab_msk : 4 ;
   u8 interface_msk : 4 ;
   u8 base : 4 ;
   u8 cmd : 4 ;
   u8 msk ;
   u8 value ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 197 
enum hrtimer_restart;
#line 588  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
enum ht_channel_width {
    HT_CHANNEL_WIDTH_20 = 0,
    HT_CHANNEL_WIDTH_20_40 = 1,
    HT_CHANNEL_WIDTH_80 = 2,
    HT_CHANNEL_WIDTH_MAX = 3
};
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key_true {
   struct static_key key ;
};
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key_false {
   struct static_key key ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
union __anonunion_key_7300 {
   struct static_key_true dd_key_true ;
   struct static_key_false dd_key_false ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
struct _ddebug {
   char *modname ;
   char *function ;
   char *filename ;
   char *format ;
   unsigned int lineno : 18 ;
   unsigned int flags : 8 ;
   union __anonunion_key_7300 key ;
} __attribute__((__aligned__(8)));
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 270  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.h"
enum pwr_track_control_method {
    BBSWING = 0,
    TXAGC = 1,
    MIX_MODE = 2
};
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
struct firmware;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/firmware.h"
struct firmware {
   size_t size ;
   u8 *data ;
   struct page **pages ;
   void *priv ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 197 
enum hrtimer_restart;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
struct device_private {
   void *driver_data ;
};
#line 164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned long irq_hw_number_t;
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ioport.h"
struct irq_data;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct ida {
   struct xarray xa ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/property.h"
typedef u32 phandle;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct property {
   char *name ;
   int length ;
   void *value ;
   struct property *next ;
   unsigned long _flags ;
   struct bin_attribute attr ;
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct device_node {
   char *name ;
   phandle phandle ;
   char *full_name ;
   struct fwnode_handle fwnode ;
   struct property *properties ;
   struct property *deadprops ;
   struct device_node *parent ;
   struct device_node *child ;
   struct device_node *sibling ;
   struct kobject kobj ;
   unsigned long _flags ;
   void *data ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_fwspec {
   struct fwnode_handle *fwnode ;
   int param_count ;
   u32 param[16U] ;
};
#line 68 
enum irq_domain_bus_token {
    DOMAIN_BUS_ANY = 0,
    DOMAIN_BUS_WIRED = 1,
    DOMAIN_BUS_GENERIC_MSI = 2,
    DOMAIN_BUS_PCI_MSI = 3,
    DOMAIN_BUS_PLATFORM_MSI = 4,
    DOMAIN_BUS_NEXUS = 5,
    DOMAIN_BUS_IPI = 6,
    DOMAIN_BUS_FSL_MC_MSI = 7,
    DOMAIN_BUS_TI_SCI_INTA_MSI = 8,
    DOMAIN_BUS_WAKEUP = 9
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain_ops {
   int (*match)(struct irq_domain *, struct device_node *, enum irq_domain_bus_token ) ;
   int (*select)(struct irq_domain *, struct irq_fwspec *, enum irq_domain_bus_token ) ;
   int (*map)(struct irq_domain *, unsigned int , irq_hw_number_t ) ;
   void (*unmap)(struct irq_domain *, unsigned int ) ;
   int (*xlate)(struct irq_domain *, struct device_node *, u32 *, unsigned int , unsigned long *, unsigned int *) ;
   int (*alloc)(struct irq_domain *, unsigned int , unsigned int , void *) ;
   void (*free)(struct irq_domain *, unsigned int , unsigned int ) ;
   int (*activate)(struct irq_domain *, struct irq_data *, bool ) ;
   void (*deactivate)(struct irq_domain *, struct irq_data *) ;
   int (*translate)(struct irq_domain *, struct irq_fwspec *, unsigned long *, unsigned int *) ;
   void (*debug_show)(struct seq_file *, struct irq_domain *, struct irq_data *, int ) ;
};
#line 132 
struct irq_domain_chip_generic;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain {
   struct list_head link ;
   char *name ;
   struct irq_domain_ops *ops ;
   void *host_data ;
   unsigned int flags ;
   unsigned int mapcount ;
   struct fwnode_handle *fwnode ;
   enum irq_domain_bus_token bus_token ;
   struct irq_domain_chip_generic *gc ;
   struct irq_domain *parent ;
   struct dentry *debugfs_file ;
   irq_hw_number_t hwirq_max ;
   unsigned int revmap_direct_max_irq ;
   unsigned int revmap_size ;
   struct xarray revmap_tree ;
   struct mutex revmap_tree_mutex ;
   unsigned int linear_revmap[] ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rtmutex.h"
struct rt_mutex {
   raw_spinlock_t wait_lock ;
   struct rb_root_cached waiters ;
   struct task_struct *owner ;
   int save_state ;
   char *name ;
   char *file ;
   int line ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
struct i2c_msg {
   __u16 addr ;
   __u16 flags ;
   __u16 len ;
   __u8 *buf ;
};
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
union i2c_smbus_data {
   __u8 byte ;
   __u16 word ;
   __u8 block[34U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm;
#line 28 
struct i2c_adapter;
#line 29 
struct i2c_client;
#line 33 
enum i2c_slave_event;
#line 33 
enum i2c_slave_event;
#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_client {
   unsigned short flags ;
   unsigned short addr ;
   char name[20U] ;
   struct i2c_adapter *adapter ;
   struct device dev ;
   int init_irq ;
   int irq ;
   struct list_head detected ;
   int (*slave_cb)(struct i2c_client *, enum i2c_slave_event , u8 *) ;
};
#line 360 
enum i2c_slave_event {
    I2C_SLAVE_READ_REQUESTED = 0,
    I2C_SLAVE_WRITE_REQUESTED = 1,
    I2C_SLAVE_READ_PROCESSED = 2,
    I2C_SLAVE_WRITE_RECEIVED = 3,
    I2C_SLAVE_STOP = 4
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm {
   int (*master_xfer)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*master_xfer_atomic)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*smbus_xfer)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   int (*smbus_xfer_atomic)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   u32 (*functionality)(struct i2c_adapter *) ;
   int (*reg_slave)(struct i2c_client *) ;
   int (*unreg_slave)(struct i2c_client *) ;
};
#line 565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_lock_operations {
   void (*lock_bus)(struct i2c_adapter *, unsigned int ) ;
   int (*trylock_bus)(struct i2c_adapter *, unsigned int ) ;
   void (*unlock_bus)(struct i2c_adapter *, unsigned int ) ;
};
#line 618 
struct gpio_desc;
#line 618  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_bus_recovery_info {
   int (*recover_bus)(struct i2c_adapter *) ;
   int (*get_scl)(struct i2c_adapter *) ;
   void (*set_scl)(struct i2c_adapter *, int ) ;
   int (*get_sda)(struct i2c_adapter *) ;
   void (*set_sda)(struct i2c_adapter *, int ) ;
   int (*get_bus_free)(struct i2c_adapter *) ;
   void (*prepare_recovery)(struct i2c_adapter *) ;
   void (*unprepare_recovery)(struct i2c_adapter *) ;
   struct gpio_desc *scl_gpiod ;
   struct gpio_desc *sda_gpiod ;
};
#line 661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter_quirks {
   u64 flags ;
   int max_num_msgs ;
   u16 max_write_len ;
   u16 max_read_len ;
   u16 max_comb_1st_msg_len ;
   u16 max_comb_2nd_msg_len ;
};
#line 692  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter {
   struct module *owner ;
   unsigned int class ;
   struct i2c_algorithm *algo ;
   void *algo_data ;
   struct i2c_lock_operations *lock_ops ;
   struct rt_mutex bus_lock ;
   struct rt_mutex mux_lock ;
   int timeout ;
   int retries ;
   struct device dev ;
   unsigned long locked_flags ;
   int nr ;
   char name[48U] ;
   struct completion dev_released ;
   struct mutex userspace_clients_lock ;
   struct list_head userspace_clients ;
   struct i2c_bus_recovery_info *bus_recovery_info ;
   struct i2c_adapter_quirks *quirks ;
   struct irq_domain *host_notify_domain ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cdev.h"
struct cdev {
   struct kobject kobj ;
   struct module *owner ;
   struct file_operations *ops ;
   struct list_head list ;
   dev_t dev ;
   unsigned int count ;
} __attribute__((__designated_init__));
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-common.h"
struct v4l2_edid {
   __u32 pad ;
   __u32 start_block ;
   __u32 blocks ;
   __u32 reserved[5U] ;
   __u8 *edid ;
};
#line 754 
enum v4l2_priority {
    V4L2_PRIORITY_UNSET = 0,
    V4L2_PRIORITY_BACKGROUND = 1,
    V4L2_PRIORITY_INTERACTIVE = 2,
    V4L2_PRIORITY_RECORD = 3,
    V4L2_PRIORITY_DEFAULT = 2
};
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_rect {
   __s32 left ;
   __s32 top ;
   __u32 width ;
   __u32 height ;
};
#line 420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_fract {
   __u32 numerator ;
   __u32 denominator ;
};
#line 1212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
typedef __u64 v4l2_std_id;
#line 1394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings {
   __u32 width ;
   __u32 height ;
   __u32 interlaced ;
   __u32 polarities ;
   __u64 pixelclock ;
   __u32 hfrontporch ;
   __u32 hsync ;
   __u32 hbackporch ;
   __u32 vfrontporch ;
   __u32 vsync ;
   __u32 vbackporch ;
   __u32 il_vfrontporch ;
   __u32 il_vsync ;
   __u32 il_vbackporch ;
   __u32 standards ;
   __u32 flags ;
   struct v4l2_fract picture_aspect ;
   __u8 cea861_vic ;
   __u8 hdmi_vic ;
   __u8 reserved[46U] ;
} __attribute__((__packed__));
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_11124 {
   struct v4l2_bt_timings bt ;
   __u32 reserved[32U] ;
};
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings {
   __u32 type ;
   union __anonunion_11124 __anonCompField_v4l2_dv_timings_77 ;
} __attribute__((__packed__));
#line 1536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_enum_dv_timings {
   __u32 index ;
   __u32 pad ;
   __u32 reserved[2U] ;
   struct v4l2_dv_timings timings ;
};
#line 1554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings_cap {
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u64 min_pixelclock ;
   __u64 max_pixelclock ;
   __u32 standards ;
   __u32 capabilities ;
   __u32 reserved[16U] ;
} __attribute__((__packed__));
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_11125 {
   struct v4l2_bt_timings_cap bt ;
   __u32 raw_data[32U] ;
};
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings_cap {
   __u32 type ;
   __u32 pad ;
   __u32 reserved[2U] ;
   union __anonunion_11125 __anonCompField_v4l2_dv_timings_cap_78 ;
};
#line 1803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_tuner {
   __u32 index ;
   __u8 name[32U] ;
   __u32 type ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 rxsubchans ;
   __u32 audmode ;
   __s32 signal ;
   __s32 afc ;
   __u32 reserved[4U] ;
};
#line 1817  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_modulator {
   __u32 index ;
   __u8 name[32U] ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 txsubchans ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 1860  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency {
   __u32 tuner ;
   __u32 type ;
   __u32 frequency ;
   __u32 reserved[8U] ;
};
#line 1871  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency_band {
   __u32 tuner ;
   __u32 type ;
   __u32 index ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 modulation ;
   __u32 reserved[9U] ;
};
#line 2043  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_vbi_format {
   __u32 sampling_rate ;
   __u32 offset ;
   __u32 samples_per_line ;
   __u32 sample_format ;
   __s32 start[2U] ;
   __u32 count[2U] ;
   __u32 flags ;
   __u32 reserved[2U] ;
};
#line 2071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_format {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 io_size ;
   __u32 reserved[2U] ;
};
#line 2095  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_cap {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 2106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_data {
   __u32 id ;
   __u32 field ;
   __u32 line ;
   __u32 reserved ;
   __u8 data[48U] ;
};
#line 2350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_event_subscription {
   __u32 type ;
   __u32 id ;
   __u32 flags ;
   __u32 reserved[5U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_11141 {
   __u32 addr ;
   char name[32U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_match {
   __u32 type ;
   union __anonunion_11141 __anonCompField_v4l2_dbg_match_87 ;
} __attribute__((__packed__));
#line 2383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_register {
   struct v4l2_dbg_match match ;
   __u32 size ;
   __u64 reg ;
   __u64 val ;
} __attribute__((__packed__));
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_device;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_gobj {
   struct media_device *mdev ;
   u32 id ;
   struct list_head list ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_enum {
   unsigned long *bmap ;
   int idx_max ;
};
#line 88 
struct media_entity;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_stack_11145 {
   struct media_entity *entity ;
   struct list_head *link ;
};
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_graph {
   struct __anonstruct_stack_11145 stack[16U] ;
   struct media_entity_enum ent_enum ;
   int top ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pipeline {
   int streaming_count ;
   struct media_graph graph ;
};
#line 132 
struct media_pad;
#line 132 
struct media_interface;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_11146 {
   struct media_gobj *gobj0 ;
   struct media_pad *source ;
   struct media_interface *intf ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_11147 {
   struct media_gobj *gobj1 ;
   struct media_pad *sink ;
   struct media_entity *entity ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_link {
   struct media_gobj graph_obj ;
   struct list_head list ;
   union __anonunion_11146 __anonCompField_media_link_90 ;
   union __anonunion_11147 __anonCompField_media_link_91 ;
   struct media_link *reverse ;
   unsigned long flags ;
   bool is_backlink ;
};
#line 149 
enum media_pad_signal_type {
    PAD_SIGNAL_DEFAULT = 0,
    PAD_SIGNAL_ANALOG = 1,
    PAD_SIGNAL_DV = 2,
    PAD_SIGNAL_AUDIO = 3
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pad {
   struct media_gobj graph_obj ;
   struct media_entity *entity ;
   u16 index ;
   enum media_pad_signal_type sig_type ;
   unsigned long flags ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_operations {
   int (*get_fwnode_pad)(struct fwnode_endpoint *) ;
   int (*link_setup)(struct media_entity *, struct media_pad *, struct media_pad *, u32 ) ;
   int (*link_validate)(struct media_link *) ;
};
#line 221 
enum media_entity_type {
    MEDIA_ENTITY_TYPE_BASE = 0,
    MEDIA_ENTITY_TYPE_VIDEO_DEVICE = 1,
    MEDIA_ENTITY_TYPE_V4L2_SUBDEV = 2
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_dev_11149 {
   u32 major ;
   u32 minor ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_info_11148 {
   struct __anonstruct_dev_11149 dev ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity {
   struct media_gobj graph_obj ;
   char *name ;
   enum media_entity_type obj_type ;
   u32 function ;
   unsigned long flags ;
   u16 num_pads ;
   u16 num_links ;
   u16 num_backlinks ;
   int internal_idx ;
   struct media_pad *pads ;
   struct list_head links ;
   struct media_entity_operations *ops ;
   int stream_count ;
   int use_count ;
   struct media_pipeline *pipe ;
   union __anonunion_info_11148 info ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_interface {
   struct media_gobj graph_obj ;
   struct list_head links ;
   u32 type ;
   u32 flags ;
};
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_intf_devnode {
   struct media_interface intf ;
   u32 major ;
   u32 minor ;
};
#line 1087 
enum vfl_devnode_type {
    VFL_TYPE_GRABBER = 0,
    VFL_TYPE_VBI = 1,
    VFL_TYPE_RADIO = 2,
    VFL_TYPE_SUBDEV = 3,
    VFL_TYPE_SDR = 4,
    VFL_TYPE_TOUCH = 5,
    VFL_TYPE_MAX = 6
};
#line 1097 
enum vfl_devnode_direction {
    VFL_DIR_RX = 0,
    VFL_DIR_TX = 1,
    VFL_DIR_M2M = 2
};
#line 1104 
struct video_device;
#line 1105 
struct v4l2_device;
#line 1106 
struct v4l2_ctrl_handler;
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_prio_state {
   atomic_t prios[4U] ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl32)(struct file *, unsigned int , unsigned long ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 256 
struct vb2_queue;
#line 256 
struct v4l2_ioctl_ops;
#line 256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct video_device {
   struct media_entity entity ;
   struct media_intf_devnode *intf_devnode ;
   struct media_pipeline pipe ;
   struct v4l2_file_operations *fops ;
   u32 device_caps ;
   struct device dev ;
   struct cdev *cdev ;
   struct v4l2_device *v4l2_dev ;
   struct device *dev_parent ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct vb2_queue *queue ;
   struct v4l2_prio_state *prio ;
   char name[32U] ;
   enum vfl_devnode_type vfl_type ;
   enum vfl_devnode_direction vfl_dir ;
   int minor ;
   u16 num ;
   unsigned long flags ;
   int index ;
   spinlock_t fh_lock ;
   struct list_head fh_list ;
   int dev_debug ;
   v4l2_std_id tvnorms ;
   void (*release)(struct video_device *) ;
   struct v4l2_ioctl_ops *ioctl_ops ;
   unsigned long valid_ioctls[3U] ;
   struct mutex *lock ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_subdev;
#line 96 
struct v4l2_subdev_ops;
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_priv_tun_config {
   int tuner ;
   void *priv ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_devnode {
   struct media_device *media_dev ;
   struct media_file_operations *fops ;
   struct device dev ;
   struct cdev cdev ;
   struct device *parent ;
   int minor ;
   unsigned long flags ;
   void (*release)(struct media_devnode *) ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_request;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device_ops {
   int (*link_notify)(struct media_link *, u32 , unsigned int ) ;
   struct media_request *(*req_alloc)(struct media_device *) ;
   void (*req_free)(struct media_request *) ;
   int (*req_validate)(struct media_request *) ;
   void (*req_queue)(struct media_request *) ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device {
   struct device *dev ;
   struct media_devnode *devnode ;
   char model[32U] ;
   char driver_name[32U] ;
   char serial[40U] ;
   char bus_info[32U] ;
   u32 hw_revision ;
   u64 topology_version ;
   u32 id ;
   struct ida entity_internal_idx ;
   int entity_internal_idx_max ;
   struct list_head entities ;
   struct list_head interfaces ;
   struct list_head pads ;
   struct list_head links ;
   struct list_head entity_notify ;
   struct mutex graph_mutex ;
   struct media_graph pm_count_walk ;
   void *source_priv ;
   int (*enable_source)(struct media_entity *, struct media_pipeline *) ;
   void (*disable_source)(struct media_entity *) ;
   struct media_device_ops *ops ;
   struct mutex req_queue_mutex ;
   atomic_t request_id ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-mediabus.h"
struct v4l2_mbus_framefmt {
   __u32 width ;
   __u32 height ;
   __u32 code ;
   __u32 field ;
   __u32 colorspace ;
   __u16 ycbcr_enc ;
   __u16 quantization ;
   __u16 xfer_func ;
   __u16 reserved[11U] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_format {
   __u32 which ;
   __u32 pad ;
   struct v4l2_mbus_framefmt format ;
   __u32 reserved[8U] ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_mbus_code_enum {
   __u32 pad ;
   __u32 index ;
   __u32 code ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_size_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval {
   __u32 pad ;
   struct v4l2_fract interval ;
   __u32 reserved[9U] ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 width ;
   __u32 height ;
   struct v4l2_fract interval ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_selection {
   __u32 which ;
   __u32 pad ;
   __u32 target ;
   __u32 flags ;
   struct v4l2_rect r ;
   __u32 reserved[8U] ;
};
#line 157 
struct v4l2_async_notifier;
#line 158 
enum v4l2_async_match_type {
    V4L2_ASYNC_MATCH_CUSTOM = 0,
    V4L2_ASYNC_MATCH_DEVNAME = 1,
    V4L2_ASYNC_MATCH_I2C = 2,
    V4L2_ASYNC_MATCH_FWNODE = 3
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_i2c_11163 {
   int adapter_id ;
   unsigned short address ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_custom_11164 {
   bool (*match)(struct device *, struct v4l2_async_subdev *) ;
   void *priv ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
union __anonunion_match_11162 {
   struct fwnode_handle *fwnode ;
   char *device_name ;
   struct __anonstruct_i2c_11163 i2c ;
   struct __anonstruct_custom_11164 custom ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_subdev {
   enum v4l2_async_match_type match_type ;
   union __anonunion_match_11162 match ;
   struct list_head list ;
   struct list_head asd_list ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier_operations {
   int (*bound)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
   int (*complete)(struct v4l2_async_notifier *) ;
   void (*unbind)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier {
   struct v4l2_async_notifier_operations *ops ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev *sd ;
   struct v4l2_async_notifier *parent ;
   struct list_head asd_list ;
   struct list_head waiting ;
   struct list_head done ;
   struct list_head list ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_m2m_ctx;
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_fh {
   struct list_head list ;
   struct video_device *vdev ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   enum v4l2_priority prio ;
   wait_queue_head_t wait ;
   struct mutex subscribe_lock ;
   struct list_head subscribed ;
   struct list_head available ;
   unsigned int navailable ;
   u32 sequence ;
   struct v4l2_m2m_ctx *m2m_ctx ;
};
#line 162 
enum v4l2_mbus_type {
    V4L2_MBUS_UNKNOWN = 0,
    V4L2_MBUS_PARALLEL = 1,
    V4L2_MBUS_BT656 = 2,
    V4L2_MBUS_CSI1 = 3,
    V4L2_MBUS_CCP2 = 4,
    V4L2_MBUS_CSI2_DPHY = 5,
    V4L2_MBUS_CSI2_CPHY = 6
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-mediabus.h"
struct v4l2_mbus_config {
   enum v4l2_mbus_type type ;
   unsigned int flags ;
};
#line 184 
struct v4l2_subdev_fh;
#line 185 
struct tuner_setup;
#line 186 
struct v4l2_mbus_frame_desc;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_decode_vbi_line {
   u32 is_second_field ;
   u8 *p ;
   u32 line ;
   u32 type ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_io_pin_config {
   u32 flags ;
   u8 pin ;
   u8 function ;
   u8 value ;
   u8 strength ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_core_ops {
   int (*log_status)(struct v4l2_subdev *) ;
   int (*s_io_pin_config)(struct v4l2_subdev *, size_t , struct v4l2_subdev_io_pin_config *) ;
   int (*init)(struct v4l2_subdev *, u32 ) ;
   int (*load_fw)(struct v4l2_subdev *) ;
   int (*reset)(struct v4l2_subdev *, u32 ) ;
   int (*s_gpio)(struct v4l2_subdev *, u32 ) ;
   long (*ioctl)(struct v4l2_subdev *, unsigned int , void *) ;
   long (*compat_ioctl32)(struct v4l2_subdev *, unsigned int , unsigned long ) ;
   int (*g_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_power)(struct v4l2_subdev *, int ) ;
   int (*interrupt_service_routine)(struct v4l2_subdev *, u32 , bool *) ;
   int (*subscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
   int (*unsubscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
};
#line 264  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_tuner_ops {
   int (*standby)(struct v4l2_subdev *) ;
   int (*s_radio)(struct v4l2_subdev *) ;
   int (*s_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*g_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*enum_freq_bands)(struct v4l2_subdev *, struct v4l2_frequency_band *) ;
   int (*g_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*s_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*g_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_type_addr)(struct v4l2_subdev *, struct tuner_setup *) ;
   int (*s_config)(struct v4l2_subdev *, struct v4l2_priv_tun_config *) ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_audio_ops {
   int (*s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_i2s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
};
#line 310 
enum v4l2_mbus_frame_desc_flags {
    V4L2_MBUS_FRAME_DESC_FL_LEN_MAX = 1,
    V4L2_MBUS_FRAME_DESC_FL_BLOB = 2
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc_entry {
   enum v4l2_mbus_frame_desc_flags flags ;
   u32 pixelcode ;
   u32 length ;
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc {
   struct v4l2_mbus_frame_desc_entry entry[4U] ;
   unsigned short num_entries ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_video_ops {
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_crystal_freq)(struct v4l2_subdev *, u32 , u32 ) ;
   int (*g_std)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*s_std)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*s_std_output)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*g_std_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*querystd)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_input_status)(struct v4l2_subdev *, u32 *) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
   int (*g_pixelaspect)(struct v4l2_subdev *, struct v4l2_fract *) ;
   int (*g_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*query_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_rx_buffer)(struct v4l2_subdev *, void *, unsigned int *) ;
};
#line 481  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_vbi_ops {
   int (*decode_vbi_line)(struct v4l2_subdev *, struct v4l2_decode_vbi_line *) ;
   int (*s_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_sliced_vbi_cap)(struct v4l2_subdev *, struct v4l2_sliced_vbi_cap *) ;
   int (*s_raw_fmt)(struct v4l2_subdev *, struct v4l2_vbi_format *) ;
   int (*g_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
   int (*s_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
};
#line 501  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_sensor_ops {
   int (*g_skip_top_lines)(struct v4l2_subdev *, u32 *) ;
   int (*g_skip_frames)(struct v4l2_subdev *, u32 *) ;
};
#line 505 
enum v4l2_subdev_ir_mode {
    V4L2_SUBDEV_IR_MODE_PULSE_WIDTH = 0
};
#line 540  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_parameters {
   unsigned int bytes_per_data_element ;
   enum v4l2_subdev_ir_mode mode ;
   bool enable ;
   bool interrupt_enable ;
   bool shutdown ;
   bool modulation ;
   u32 max_pulse_width ;
   unsigned int carrier_freq ;
   unsigned int duty_cycle ;
   bool invert_level ;
   bool invert_carrier_sense ;
   u32 noise_filter_min_width ;
   unsigned int carrier_range_lower ;
   unsigned int carrier_range_upper ;
   u32 resolution ;
};
#line 599  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_ops {
   int (*rx_read)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*rx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*rx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_write)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*tx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
};
#line 630  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_config {
   struct v4l2_mbus_framefmt try_fmt ;
   struct v4l2_rect try_crop ;
   struct v4l2_rect try_compose ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_ops {
   int (*init_cfg)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *) ;
   int (*enum_mbus_code)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_mbus_code_enum *) ;
   int (*enum_frame_size)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_size_enum *) ;
   int (*enum_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_interval_enum *) ;
   int (*get_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*set_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*get_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*set_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*get_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*set_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*dv_timings_cap)(struct v4l2_subdev *, struct v4l2_dv_timings_cap *) ;
   int (*enum_dv_timings)(struct v4l2_subdev *, struct v4l2_enum_dv_timings *) ;
   int (*link_validate)(struct v4l2_subdev *, struct media_link *, struct v4l2_subdev_format *, struct v4l2_subdev_format *) ;
   int (*get_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
   int (*set_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
};
#line 727  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ops {
   struct v4l2_subdev_core_ops *core ;
   struct v4l2_subdev_tuner_ops *tuner ;
   struct v4l2_subdev_audio_ops *audio ;
   struct v4l2_subdev_video_ops *video ;
   struct v4l2_subdev_vbi_ops *vbi ;
   struct v4l2_subdev_ir_ops *ir ;
   struct v4l2_subdev_sensor_ops *sensor ;
   struct v4l2_subdev_pad_ops *pad ;
};
#line 765  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_internal_ops {
   int (*registered)(struct v4l2_subdev *) ;
   void (*unregistered)(struct v4l2_subdev *) ;
   int (*open)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   int (*close)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   void (*release)(struct v4l2_subdev *) ;
};
#line 772 
struct regulator_bulk_data;
#line 797  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_platform_data {
   struct regulator_bulk_data *regulators ;
   int num_regulators ;
   void *host_priv ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev {
   struct media_entity entity ;
   struct list_head list ;
   struct module *owner ;
   bool owner_v4l2_dev ;
   u32 flags ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev_ops *ops ;
   struct v4l2_subdev_internal_ops *internal_ops ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   char name[32U] ;
   u32 grp_id ;
   void *dev_priv ;
   void *host_priv ;
   struct video_device *devnode ;
   struct device *dev ;
   struct fwnode_handle *fwnode ;
   struct list_head async_list ;
   struct v4l2_async_subdev *asd ;
   struct v4l2_async_notifier *notifier ;
   struct v4l2_async_notifier *subdev_notifier ;
   struct v4l2_subdev_platform_data *pdata ;
};
#line 906  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_fh {
   struct v4l2_fh vfh ;
   struct module *owner ;
   struct v4l2_subdev_pad_config *pad ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-device.h"
struct v4l2_device {
   struct device *dev ;
   struct media_device *mdev ;
   struct list_head subdevs ;
   spinlock_t lock ;
   char name[36U] ;
   void (*notify)(struct v4l2_subdev *, unsigned int , void *) ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct v4l2_prio_state prio ;
   struct kref ref ;
   void (*release)(struct v4l2_device *) ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
struct ptp_system_timestamp {
   struct timespec64 pre_ts ;
   struct timespec64 post_ts ;
};
#line 277 
struct dma_chan;
#line 279 
struct spi_controller;
#line 280 
struct spi_transfer;
#line 281 
struct spi_controller_mem_ops;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_statistics {
   spinlock_t lock ;
   unsigned long messages ;
   unsigned long transfers ;
   unsigned long errors ;
   unsigned long timedout ;
   unsigned long spi_sync ;
   unsigned long spi_sync_immediate ;
   unsigned long spi_async ;
   unsigned long long bytes ;
   unsigned long long bytes_rx ;
   unsigned long long bytes_tx ;
   unsigned long transfer_bytes_histo[17U] ;
   unsigned long transfers_split_maxsize ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_delay {
   u16 value ;
   u8 unit ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_device {
   struct device dev ;
   struct spi_controller *controller ;
   struct spi_controller *master ;
   u32 max_speed_hz ;
   u8 chip_select ;
   u8 bits_per_word ;
   bool rt ;
   u32 mode ;
   int irq ;
   void *controller_state ;
   void *controller_data ;
   char modalias[32U] ;
   char *driver_override ;
   int cs_gpio ;
   struct gpio_desc *cs_gpiod ;
   struct spi_delay word_delay ;
   struct spi_statistics statistics ;
};
#line 247 
struct spi_message;
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_controller {
   struct device dev ;
   struct list_head list ;
   s16 bus_num ;
   u16 num_chipselect ;
   u16 dma_alignment ;
   u32 mode_bits ;
   u32 bits_per_word_mask ;
   u32 min_speed_hz ;
   u32 max_speed_hz ;
   u16 flags ;
   bool slave ;
   size_t (*max_transfer_size)(struct spi_device *) ;
   size_t (*max_message_size)(struct spi_device *) ;
   struct mutex io_mutex ;
   spinlock_t bus_lock_spinlock ;
   struct mutex bus_lock_mutex ;
   bool bus_lock_flag ;
   int (*setup)(struct spi_device *) ;
   int (*set_cs_timing)(struct spi_device *, struct spi_delay *, struct spi_delay *, struct spi_delay *) ;
   int (*transfer)(struct spi_device *, struct spi_message *) ;
   void (*cleanup)(struct spi_device *) ;
   bool (*can_dma)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   bool queued ;
   struct kthread_worker kworker ;
   struct task_struct *kworker_task ;
   struct kthread_work pump_messages ;
   spinlock_t queue_lock ;
   struct list_head queue ;
   struct spi_message *cur_msg ;
   bool idling ;
   bool busy ;
   bool running ;
   bool rt ;
   bool auto_runtime_pm ;
   bool cur_msg_prepared ;
   bool cur_msg_mapped ;
   struct completion xfer_completion ;
   size_t max_dma_len ;
   int (*prepare_transfer_hardware)(struct spi_controller *) ;
   int (*transfer_one_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_transfer_hardware)(struct spi_controller *) ;
   int (*prepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*slave_abort)(struct spi_controller *) ;
   void (*set_cs)(struct spi_device *, bool ) ;
   int (*transfer_one)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   void (*handle_err)(struct spi_controller *, struct spi_message *) ;
   struct spi_controller_mem_ops *mem_ops ;
   struct spi_delay cs_setup ;
   struct spi_delay cs_hold ;
   struct spi_delay cs_inactive ;
   int *cs_gpios ;
   struct gpio_desc **cs_gpiods ;
   bool use_gpio_descriptors ;
   struct spi_statistics statistics ;
   struct dma_chan *dma_tx ;
   struct dma_chan *dma_rx ;
   void *dummy_rx ;
   void *dummy_tx ;
   int (*fw_translate_cs)(struct spi_controller *, unsigned int ) ;
   bool ptp_sts_supported ;
   unsigned long irq_flags ;
};
#line 890  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_transfer {
   void *tx_buf ;
   void *rx_buf ;
   unsigned int len ;
   dma_addr_t tx_dma ;
   dma_addr_t rx_dma ;
   struct sg_table tx_sg ;
   struct sg_table rx_sg ;
   unsigned int cs_change : 1 ;
   unsigned int tx_nbits : 3 ;
   unsigned int rx_nbits : 3 ;
   u8 bits_per_word ;
   u16 delay_usecs ;
   struct spi_delay delay ;
   struct spi_delay cs_change_delay ;
   struct spi_delay word_delay ;
   u32 speed_hz ;
   u32 effective_speed_hz ;
   unsigned int ptp_sts_word_pre ;
   unsigned int ptp_sts_word_post ;
   struct ptp_system_timestamp *ptp_sts ;
   bool timestamped_pre ;
   bool timestamped_post ;
   struct list_head transfer_list ;
};
#line 961  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_message {
   struct list_head transfers ;
   struct spi_device *spi ;
   unsigned int is_dma_mapped : 1 ;
   void (*complete)(void *) ;
   void *context ;
   unsigned int frame_length ;
   unsigned int actual_length ;
   int status ;
   struct list_head queue ;
   void *state ;
   struct list_head resources ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fix_screeninfo {
   char id[16U] ;
   unsigned long smem_start ;
   __u32 smem_len ;
   __u32 type ;
   __u32 type_aux ;
   __u32 visual ;
   __u16 xpanstep ;
   __u16 ypanstep ;
   __u16 ywrapstep ;
   __u32 line_length ;
   unsigned long mmio_start ;
   __u32 mmio_len ;
   __u32 accel ;
   __u16 capabilities ;
   __u16 reserved[2U] ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_bitfield {
   __u32 offset ;
   __u32 length ;
   __u32 msb_right ;
};
#line 241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_var_screeninfo {
   __u32 xres ;
   __u32 yres ;
   __u32 xres_virtual ;
   __u32 yres_virtual ;
   __u32 xoffset ;
   __u32 yoffset ;
   __u32 bits_per_pixel ;
   __u32 grayscale ;
   struct fb_bitfield red ;
   struct fb_bitfield green ;
   struct fb_bitfield blue ;
   struct fb_bitfield transp ;
   __u32 nonstd ;
   __u32 activate ;
   __u32 height ;
   __u32 width ;
   __u32 accel_flags ;
   __u32 pixclock ;
   __u32 left_margin ;
   __u32 right_margin ;
   __u32 upper_margin ;
   __u32 lower_margin ;
   __u32 hsync_len ;
   __u32 vsync_len ;
   __u32 sync ;
   __u32 vmode ;
   __u32 rotate ;
   __u32 colorspace ;
   __u32 reserved[4U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cmap {
   __u32 start ;
   __u32 len ;
   __u16 *red ;
   __u16 *green ;
   __u16 *blue ;
   __u16 *transp ;
};
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_copyarea {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 sx ;
   __u32 sy ;
};
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fillrect {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 color ;
   __u32 rop ;
};
#line 359  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_image {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 fg_color ;
   __u32 bg_color ;
   __u8 depth ;
   char *data ;
   struct fb_cmap cmap ;
};
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fbcurpos {
   __u16 x ;
   __u16 y ;
};
#line 387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cursor {
   __u16 set ;
   __u16 enable ;
   __u16 rop ;
   char *mask ;
   struct fbcurpos hot ;
   struct fb_image image ;
};
#line 400 
enum backlight_type {
    BACKLIGHT_RAW = 1,
    BACKLIGHT_PLATFORM = 2,
    BACKLIGHT_FIRMWARE = 3,
    BACKLIGHT_TYPE_MAX = 4
};
#line 412 
enum backlight_scale {
    BACKLIGHT_SCALE_UNKNOWN = 0,
    BACKLIGHT_SCALE_LINEAR = 1,
    BACKLIGHT_SCALE_NON_LINEAR = 2
};
#line 418 
struct backlight_device;
#line 419 
struct fb_info;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_ops {
   unsigned int options ;
   int (*update_status)(struct backlight_device *) ;
   int (*get_brightness)(struct backlight_device *) ;
   int (*check_fb)(struct backlight_device *, struct fb_info *) ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_properties {
   int brightness ;
   int max_brightness ;
   int power ;
   int fb_blank ;
   enum backlight_type type ;
   unsigned int state ;
   enum backlight_scale scale ;
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_device {
   struct backlight_properties props ;
   struct mutex update_lock ;
   struct mutex ops_lock ;
   struct backlight_ops *ops ;
   struct notifier_block fb_notif ;
   struct list_head entry ;
   struct device dev ;
   bool fb_bl_on[32U] ;
   int use_count ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_chroma {
   __u32 redx ;
   __u32 greenx ;
   __u32 bluex ;
   __u32 whitex ;
   __u32 redy ;
   __u32 greeny ;
   __u32 bluey ;
   __u32 whitey ;
};
#line 63 
struct fb_videomode;
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_monspecs {
   struct fb_chroma chroma ;
   struct fb_videomode *modedb ;
   __u8 manufacturer[4U] ;
   __u8 monitor[14U] ;
   __u8 serial_no[14U] ;
   __u8 ascii[14U] ;
   __u32 modedb_len ;
   __u32 model ;
   __u32 serial ;
   __u32 year ;
   __u32 week ;
   __u32 hfmin ;
   __u32 hfmax ;
   __u32 dclkmin ;
   __u32 dclkmax ;
   __u16 input ;
   __u16 dpms ;
   __u16 signal ;
   __u16 vfmin ;
   __u16 vfmax ;
   __u16 gamma ;
   __u16 gtf : 1 ;
   __u16 misc ;
   __u8 version ;
   __u8 revision ;
   __u8 max_x ;
   __u8 max_y ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_blit_caps {
   u32 x ;
   u32 y ;
   u32 len ;
   u32 flags ;
};
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_pixmap {
   u8 *addr ;
   u32 size ;
   u32 offset ;
   u32 buf_align ;
   u32 scan_align ;
   u32 access_align ;
   u32 flags ;
   u32 blit_x ;
   u32 blit_y ;
   void (*writeio)(struct fb_info *, void *, void *, unsigned int ) ;
   void (*readio)(struct fb_info *, void *, void *, unsigned int ) ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_deferred_io {
   unsigned long delay ;
   struct mutex lock ;
   struct list_head pagelist ;
   void (*first_io)(struct fb_info *) ;
   void (*deferred_io)(struct fb_info *, struct list_head *) ;
};
#line 228  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_ops {
   struct module *owner ;
   int (*fb_open)(struct fb_info *, int ) ;
   int (*fb_release)(struct fb_info *, int ) ;
   ssize_t (*fb_read)(struct fb_info *, char *, size_t , loff_t *) ;
   ssize_t (*fb_write)(struct fb_info *, char *, size_t , loff_t *) ;
   int (*fb_check_var)(struct fb_var_screeninfo *, struct fb_info *) ;
   int (*fb_set_par)(struct fb_info *) ;
   int (*fb_setcolreg)(unsigned int , unsigned int , unsigned int , unsigned int , unsigned int , struct fb_info *) ;
   int (*fb_setcmap)(struct fb_cmap *, struct fb_info *) ;
   int (*fb_blank)(int , struct fb_info *) ;
   int (*fb_pan_display)(struct fb_var_screeninfo *, struct fb_info *) ;
   void (*fb_fillrect)(struct fb_info *, struct fb_fillrect *) ;
   void (*fb_copyarea)(struct fb_info *, struct fb_copyarea *) ;
   void (*fb_imageblit)(struct fb_info *, struct fb_image *) ;
   int (*fb_cursor)(struct fb_info *, struct fb_cursor *) ;
   int (*fb_sync)(struct fb_info *) ;
   int (*fb_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_compat_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_mmap)(struct fb_info *, struct vm_area_struct *) ;
   void (*fb_get_caps)(struct fb_info *, struct fb_blit_caps *, struct fb_var_screeninfo *) ;
   void (*fb_destroy)(struct fb_info *) ;
   int (*fb_debug_enter)(struct fb_info *) ;
   int (*fb_debug_leave)(struct fb_info *) ;
};
#line 306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilemap {
   __u32 width ;
   __u32 height ;
   __u32 depth ;
   __u32 length ;
   __u8 *data ;
};
#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilerect {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 index ;
   __u32 fg ;
   __u32 bg ;
   __u32 rop ;
};
#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilearea {
   __u32 sx ;
   __u32 sy ;
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tileblit {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 fg ;
   __u32 bg ;
   __u32 length ;
   __u32 *indices ;
};
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilecursor {
   __u32 sx ;
   __u32 sy ;
   __u32 mode ;
   __u32 shape ;
   __u32 fg ;
   __u32 bg ;
};
#line 355  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tile_ops {
   void (*fb_settile)(struct fb_info *, struct fb_tilemap *) ;
   void (*fb_tilecopy)(struct fb_info *, struct fb_tilearea *) ;
   void (*fb_tilefill)(struct fb_info *, struct fb_tilerect *) ;
   void (*fb_tileblit)(struct fb_info *, struct fb_tileblit *) ;
   void (*fb_tilecursor)(struct fb_info *, struct fb_tilecursor *) ;
   int (*fb_get_tilemax)(struct fb_info *) ;
};
#line 499  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct aperture {
   resource_size_t base ;
   resource_size_t size ;
};
#line 497  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct apertures_struct {
   unsigned int count ;
   struct aperture ranges[0U] ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
union __anonunion_12065 {
   char *screen_base ;
   char *screen_buffer ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_info {
   atomic_t count ;
   int node ;
   int flags ;
   int fbcon_rotate_hint ;
   struct mutex lock ;
   struct mutex mm_lock ;
   struct fb_var_screeninfo var ;
   struct fb_fix_screeninfo fix ;
   struct fb_monspecs monspecs ;
   struct work_struct queue ;
   struct fb_pixmap pixmap ;
   struct fb_pixmap sprite ;
   struct fb_cmap cmap ;
   struct list_head modelist ;
   struct fb_videomode *mode ;
   struct backlight_device *bl_dev ;
   struct mutex bl_curve_mutex ;
   u8 bl_curve[128U] ;
   struct delayed_work deferred_work ;
   struct fb_deferred_io *fbdefio ;
   struct fb_ops *fbops ;
   struct device *device ;
   struct device *dev ;
   int class_flag ;
   struct fb_tile_ops *tileops ;
   union __anonunion_12065 __anonCompField_fb_info_73 ;
   unsigned long screen_size ;
   void *pseudo_palette ;
   u32 state ;
   void *fbcon_par ;
   void *par ;
   struct apertures_struct *apertures ;
   bool skip_vt_switch ;
};
#line 767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_videomode {
   char *name ;
   u32 refresh ;
   u32 xres ;
   u32 yres ;
   u32 pixclock ;
   u32 left_margin ;
   u32 right_margin ;
   u32 upper_margin ;
   u32 lower_margin ;
   u32 hsync_len ;
   u32 vsync_len ;
   u32 sync ;
   u32 vmode ;
   u32 flag ;
};
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct ldv_kmem_cache {
   char *name ;
   unsigned int size ;
};
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
typedef unsigned long pthread_t;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
union pthread_attr_t {
   char __size[56U] ;
   long __align ;
};
#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
typedef union pthread_attr_t pthread_attr_t;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 13  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/rtl8821ae.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_pci_scenario_rtl8821ae_driver_5 {
   struct pci_driver *arg0 ;
   int signal_pending ;
};
#line 18  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/rtl8821ae.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_timer_scenario_2_7 {
   struct timer_list *arg0 ;
   int signal_pending ;
};
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/inline_asm.h"
#line 22 
void ldv_inline_asm(void);
#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
#line 171 
int printk(char * , ...);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
#line 20 
unsigned long native_save_fl(void);
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
unsigned long native_save_fl(void)
{
  #line 22 
  unsigned long flags;
  #line 23 
  ldv_inline_asm();
  #line 35 
  return flags;
}

#line 38 
#line 39 
void native_restore_fl(unsigned long flags);
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
void native_restore_fl(unsigned long flags)
{
  #line 41 
  ldv_inline_asm();
  #line 42 
  return;
}

#line 152  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/debug.h"
#line 152 
void _rtl_dbg_trace(struct rtl_priv *, u64, int, char * , ...);
#line 156 
#line 156 
void _rtl_dbg_print(struct rtl_priv *, u64, int, char * , ...);
#line 3146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
__inline static void rtl_set_bbreg(struct ieee80211_hw *hw, u32 regaddr, u32 bitmask, u32 data)
{
  #line 3149 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 3151 
  (*(((rtlpriv->cfg)->ops)->set_bbreg))(hw,regaddr,bitmask,data);
  #line 3152 
  return;
}

#line 3169  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
__inline static void rtl_set_rfreg(struct ieee80211_hw *hw, enum radio_path rfpath, u32 regaddr, u32 bitmask, u32 data)
{
  #line 3173 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 3175 
  (*(((rtlpriv->cfg)->ops)->set_rfreg))(hw,rfpath,regaddr,bitmask,data);
  #line 3176 
  return;
}

#line 220  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.h"
#line 220 
bool rtl8812ae_phy_config_rf_with_headerfile(struct ieee80211_hw *hw, enum radio_path rfpath);
#line 222 
#line 222 
bool rtl8821ae_phy_config_rf_with_headerfile(struct ieee80211_hw *hw, enum radio_path rfpath);
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/rf.h"
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/rf.c"
void rtl8821ae_phy_rf6052_set_bandwidth(struct ieee80211_hw *hw, u8 bandwidth);
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/rf.h"
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/rf.c"
void rtl8821ae_phy_rf6052_set_cck_txpower(struct ieee80211_hw *hw, u8 *ppowerlevel);
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/rf.h"
#line 344  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/rf.c"
void rtl8821ae_phy_rf6052_set_ofdm_txpower(struct ieee80211_hw *hw, u8 *ppowerlevel_ofdm, u8 *ppowerlevel_bw20, u8 *ppowerlevel_bw40, u8 channel);
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/rf.h"
#line 380  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/rf.c"
bool rtl8821ae_phy_rf6052_config(struct ieee80211_hw *hw);
#line 274  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/dm.h"
#line 274 
void rtl8821ae_dm_txpower_track_adjust(struct ieee80211_hw *hw, u8 type, u8 *pdirection, u32 *poutwrite_val);
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/rf.c"
#line 393 
static bool _rtl8821ae_phy_rf6052_config_parafile(struct ieee80211_hw *hw);
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/rf.c"
void rtl8821ae_phy_rf6052_set_bandwidth(struct ieee80211_hw *hw, u8 bandwidth)
{
  #line 15 
  switch ((int)bandwidth) {
    #line 16 
    case 0: 
            #line 16 
    ;
    #line 17 
    rtl_set_rfreg(hw,(enum radio_path)RF90_PATH_A,24U,3072U,3U);
    #line 18 
    rtl_set_rfreg(hw,(enum radio_path)RF90_PATH_B,24U,3072U,3U);
    #line 19 
    break;
    #line 20 
    case 1: 
            #line 20 
    ;
    #line 21 
    rtl_set_rfreg(hw,(enum radio_path)RF90_PATH_A,24U,3072U,1U);
    #line 22 
    rtl_set_rfreg(hw,(enum radio_path)RF90_PATH_B,24U,3072U,1U);
    #line 23 
    break;
    #line 24 
    case 2: 
            #line 24 
    ;
    #line 25 
    rtl_set_rfreg(hw,(enum radio_path)RF90_PATH_A,24U,3072U,0U);
    #line 26 
    rtl_set_rfreg(hw,(enum radio_path)RF90_PATH_B,24U,3072U,0U);
    #line 27 
    break;
    #line 28 
    default: 
             #line 28 
    ;
    #line 29 
    printk((char *)"\001",(int)bandwidth);
    #line 30 
    break;
  }
  #line 32 
  return;
}

#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/rf.c"
void rtl8821ae_phy_rf6052_set_cck_txpower(struct ieee80211_hw *hw, u8 *ppowerlevel)
{
  #line 41 
  u32 tmpval;
  #line 43 
  u8 idx1;
  #line 43 
  u8 idx2;
  #line 44 
  u8 *ptr;
  #line 45 
  u8 direction;
  #line 46 
  u32 pwrtrac_value;
  #line 37 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 38 
  struct rtl_phy *rtlphy = & rtlpriv->phy;
  #line 39 
  struct rtl_mac *mac = & ((struct rtl_priv *)hw->priv)->mac80211;
  #line 40 
  struct rtl_efuse *rtlefuse = & ((struct rtl_priv *)hw->priv)->efuse;
  #line 41 
  u32 tx_agc[2U] = {0U, 0U};
  #line 42 
  bool turbo_scanoff = (_Bool)0;
  #line 48 
  if ((unsigned int)rtlefuse->eeprom_regulatory != 0U) 
                                                       #line 49 
                                                       turbo_scanoff = (_Bool)1;
  #line 51 
  if ((int)mac->act_scanning != 0) {
    #line 52 
    tx_agc[0] = 1061109567U;
    #line 53 
    tx_agc[1] = 1061109567U;
    #line 55 
    if ((int)turbo_scanoff != 0) {
      #line 56 
      idx1 = (unsigned char)0U;
      #line 56 
      while ((unsigned int)idx1 <= 1U) {
        #line 59 
        tx_agc[(int)idx1] = (unsigned int)((((int)*(ppowerlevel + (unsigned long)idx1) | ((int)*(ppowerlevel + (unsigned long)idx1) << 8)) | ((int)*(ppowerlevel + (unsigned long)idx1) << 16)) | ((int)*(ppowerlevel + (unsigned long)idx1) << 24));
        #line 57 
        idx1 = (u8)((int)idx1 + 1);
      }
    }
  }
  else {
    #line 66 
    idx1 = (unsigned char)0U;
    #line 66 
    while ((unsigned int)idx1 <= 1U) {
      #line 67 
      tx_agc[(int)idx1] = (unsigned int)((((int)*(ppowerlevel + (unsigned long)idx1) | ((int)*(ppowerlevel + (unsigned long)idx1) << 8)) | ((int)*(ppowerlevel + (unsigned long)idx1) << 16)) | ((int)*(ppowerlevel + (unsigned long)idx1) << 24));
      #line 66 
      idx1 = (u8)((int)idx1 + 1);
    }
    #line 73 
    if ((unsigned int)rtlefuse->eeprom_regulatory == 0U) {
      #line 74 
      tmpval = rtlphy->mcs_txpwrlevel_origoffset[0][6] + (rtlphy->mcs_txpwrlevel_origoffset[0][7] << 8);
      #line 78 
      tx_agc[0] += tmpval;
      #line 80 
      tmpval = rtlphy->mcs_txpwrlevel_origoffset[0][14] + (rtlphy->mcs_txpwrlevel_origoffset[0][15] << 24);
      #line 83 
      tx_agc[1] += tmpval;
    }
  }
  #line 87 
  idx1 = (unsigned char)0U;
  #line 87 
  while ((unsigned int)idx1 <= 1U) {
    #line 88 
    ptr = (u8 *)(& tx_agc[(int)idx1]);
    #line 89 
    idx2 = (unsigned char)0U;
    #line 89 
    while ((unsigned int)idx2 <= 3U) {
      #line 90 
      if ((unsigned int)*ptr > 63U) 
                                    #line 91 
                                    *ptr = (unsigned char)63U;
      #line 92 
      ptr ++;
      #line 89 
      idx2 = (u8)((int)idx2 + 1);
    }
    #line 87 
    idx1 = (u8)((int)idx1 + 1);
  }
  #line 95 
  rtl8821ae_dm_txpower_track_adjust(hw,(unsigned char)1,& direction,& pwrtrac_value);
  #line 96 
  if ((unsigned int)direction == 1U) {
    #line 97 
    tx_agc[0] += pwrtrac_value;
    #line 98 
    tx_agc[1] += pwrtrac_value;
  }
  else 
    #line 99 
    if ((unsigned int)direction == 2U) {
      #line 100 
      tx_agc[0] -= pwrtrac_value;
      #line 101 
      tx_agc[1] -= pwrtrac_value;
    }
  #line 103 
  tmpval = tx_agc[0];
  #line 104 
  rtl_set_bbreg(hw,3104U,4294967295U,tmpval);
  #line 106 
  _rtl_dbg_print(rtlpriv,9ULL,256,(char *)"CCK PWR 1~11M (rf-A) = 0x%x (reg 0x%x)\n",tmpval,3104);
  #line 110 
  tmpval = tx_agc[1];
  #line 111 
  rtl_set_bbreg(hw,3616U,4294967295U,tmpval);
  #line 113 
  _rtl_dbg_print(rtlpriv,9ULL,256,(char *)"CCK PWR 11M (rf-B) = 0x%x (reg 0x%x)\n",tmpval,3616);
  #line 114 
  return;
}

#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/rf.c"
static void rtl8821ae_phy_get_power_base(struct ieee80211_hw *hw, u8 *ppowerlevel_ofdm, u8 *ppowerlevel_bw20, u8 *ppowerlevel_bw40, u8 channel, u32 *ofdmbase, u32 *mcsbase)
{
  #line 126 
  u32 powerbase0;
  #line 126 
  u32 powerbase1;
  #line 127 
  u8 i;
  #line 127 
  u8 powerlevel[2U];
  #line 124 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 125 
  struct rtl_phy *rtlphy = & rtlpriv->phy;
  #line 129 
  i = (unsigned char)0U;
  #line 129 
  while ((unsigned int)i <= 1U) {
    {
      #line 135 
      int tmp;
      #line 130 
      powerbase0 = (unsigned int)*(ppowerlevel_ofdm + (unsigned long)i);
      #line 132 
      powerbase0 = (((powerbase0 << 24) | (powerbase0 << 16)) | (powerbase0 << 8)) | powerbase0;
      #line 134 
      *(ofdmbase + (unsigned long)i) = powerbase0;
      #line 135 
      ;
      #line 135 
      if ((unsigned int)i == 0U) 
                                 #line 135 
                                 tmp = 65; else 
                                                #line 135 
                                                tmp = 66;
      #line 135 
      ;
      #line 135 
      _rtl_dbg_print(rtlpriv,9ULL,256,(char *)" [OFDM power base index rf(%c) = 0x%x]\n",tmp,*(ofdmbase + (unsigned long)i));
    }
    #line 129 
    i = (u8)((int)i + 1);
  }
  #line 140 
  i = (unsigned char)0U;
  #line 140 
  while ((unsigned int)i <= 1U) {
    {
      #line 152 
      int tmp_0;
      #line 141 
      if ((unsigned int)rtlphy->current_chan_bw == 0U) 
                                                       #line 142 
                                                       powerlevel[(int)i] = *(ppowerlevel_bw20 + (unsigned long)i); else 
                                                                    #line 144 
                                                                    powerlevel[(int)i] = *(ppowerlevel_bw40 + (unsigned long)i);
      #line 146 
      powerbase1 = (unsigned int)powerlevel[(int)i];
      #line 147 
      powerbase1 = (((powerbase1 << 24) | (powerbase1 << 16)) | (powerbase1 << 8)) | powerbase1;
      #line 150 
      *(mcsbase + (unsigned long)i) = powerbase1;
      #line 152 
      ;
      #line 152 
      if ((unsigned int)i == 0U) 
                                 #line 152 
                                 tmp_0 = 65; else 
                                                  #line 152 
                                                  tmp_0 = 66;
      #line 152 
      ;
      #line 152 
      _rtl_dbg_print(rtlpriv,9ULL,256,(char *)" [MCS power base index rf(%c) = 0x%x]\n",tmp_0,*(mcsbase + (unsigned long)i));
    }
    #line 140 
    i = (u8)((int)i + 1);
  }
  #line 154 
  return;
}

#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/rf.c"
static void get_txpower_writeval_by_regulatory(struct ieee80211_hw *hw, u8 channel, u8 index, u32 *powerbase0, u32 *powerbase1, u32 *p_outwriteval)
{
  #line 167 
  u8 i;
  #line 167 
  u8 pwr_diff_limit[4U];
  #line 167 
  u8 customer_pwr_diff;
  #line 168 
  u32 writeval;
  #line 168 
  u32 customer_limit;
  #line 168 
  u32 rf;
  #line 164 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 165 
  struct rtl_phy *rtlphy = & rtlpriv->phy;
  #line 166 
  struct rtl_efuse *rtlefuse = & ((struct rtl_priv *)hw->priv)->efuse;
  #line 167 
  u8 chnlgroup = (unsigned char)0U;
  #line 167 
  u8 pwr_diff = (unsigned char)0U;
  #line 170 
  rf = 0U;
  #line 170 
  while (rf <= 1U) {
    #line 171 
    switch ((int)rtlefuse->eeprom_regulatory) {
      #line 176 
      int tmp;
      #line 178 
      u32 tmp_0;
      #line 180 
      int tmp_1;
      #line 204 
      int tmp_2;
      #line 204 
      u32 tmp_3;
      #line 208 
      int tmp_4;
      #line 217 
      int tmp_5;
      #line 270 
      int tmp_9;
      #line 274 
      u32 tmp_10;
      #line 277 
      int tmp_11;
      #line 285 
      int tmp_12;
      #line 286 
      u32 tmp_13;
      #line 288 
      int tmp_14;
      #line 172 
      case 0: 
              #line 172 
      ;
      #line 173 
      chnlgroup = (unsigned char)0U;
      #line 176 
      if (rf != 0U) 
                    #line 176 
                    tmp = 8; else 
                                  #line 176 
                                  tmp = 0;
      #line 178 
      if ((unsigned int)index <= 1U) 
                                     #line 178 
                                     tmp_0 = *(powerbase0 + (unsigned long)rf); else 
                                                                    #line 178 
                                                                    tmp_0 = *(powerbase1 + (unsigned long)rf);
      #line 175 
      writeval = rtlphy->mcs_txpwrlevel_origoffset[(int)chnlgroup][(int)index + tmp] + tmp_0;
      #line 180 
      ;
      #line 180 
      if (rf == 0U) 
                    #line 180 
                    tmp_1 = 65; else 
                                     #line 180 
                                     tmp_1 = 66;
      #line 180 
      ;
      #line 180 
      _rtl_dbg_print(rtlpriv,9ULL,256,(char *)"RTK better performance, writeval(%c) = 0x%x\n",tmp_1,writeval);
      #line 183 
      break;
      #line 184 
      case 1: 
              #line 184 
      ;
      #line 185 
      if ((unsigned int)rtlphy->pwrgroup_cnt == 1U) 
                                                    #line 186 
                                                    chnlgroup = (unsigned char)0U;
      else 
        #line 188 
        if ((unsigned int)channel <= 2U) 
                                         #line 189 
                                         chnlgroup = (unsigned char)0U;
        else 
          #line 190 
          if ((unsigned int)channel <= 5U) 
                                           #line 191 
                                           chnlgroup = (unsigned char)1U;
          else 
            #line 192 
            if ((unsigned int)channel <= 8U) 
                                             #line 193 
                                             chnlgroup = (unsigned char)2U;
            else 
              #line 194 
              if ((unsigned int)channel <= 11U) 
                                                #line 195 
                                                chnlgroup = (unsigned char)3U;
              else 
                #line 196 
                if ((unsigned int)channel <= 13U) 
                                                  #line 197 
                                                  chnlgroup = (unsigned char)4U;
                else 
                  #line 198 
                  if ((unsigned int)channel == 14U) 
                                                    #line 199 
                                                    chnlgroup = (unsigned char)5U;
      #line 204 
      if (rf != 0U) 
                    #line 204 
                    tmp_2 = 8; else 
                                    #line 204 
                                    tmp_2 = 0;
      #line 204 
      if ((unsigned int)index <= 1U) 
                                     #line 204 
                                     tmp_3 = *(powerbase0 + (unsigned long)rf); else 
                                                                    #line 204 
                                                                    tmp_3 = *(powerbase1 + (unsigned long)rf);
      #line 202 
      writeval = rtlphy->mcs_txpwrlevel_origoffset[(int)chnlgroup][(int)index + tmp_2] + tmp_3;
      #line 208 
      ;
      #line 208 
      if (rf == 0U) 
                    #line 208 
                    tmp_4 = 65; else 
                                     #line 208 
                                     tmp_4 = 66;
      #line 208 
      ;
      #line 208 
      _rtl_dbg_print(rtlpriv,9ULL,256,(char *)"Realtek regulatory, 20MHz, writeval(%c) = 0x%x\n",tmp_4,writeval);
      #line 212 
      break;
      #line 213 
      case 2: 
              #line 213 
      ;
      #line 214 
      if ((unsigned int)index <= 1U) 
                                     #line 214 
                                     writeval = *(powerbase0 + (unsigned long)rf); else 
                                                                    #line 214 
                                                                    writeval = *(powerbase1 + (unsigned long)rf);
      #line 217 
      ;
      #line 217 
      if (rf == 0U) 
                    #line 217 
                    tmp_5 = 65; else 
                                     #line 217 
                                     tmp_5 = 66;
      #line 217 
      ;
      #line 217 
      _rtl_dbg_print(rtlpriv,9ULL,256,(char *)"Better regulatory, writeval(%c) = 0x%x\n",tmp_5,writeval);
      #line 220 
      break;
      #line 221 
      case 3: 
              #line 221 
      ;
      #line 222 
      chnlgroup = (unsigned char)0U;
      #line 224 
      if ((unsigned int)rtlphy->current_chan_bw == 1U) {
        #line 225 
        int tmp_6;
        #line 225 
        ;
        #line 225 
        if (rf == 0U) 
                      #line 225 
                      tmp_6 = 65; else 
                                       #line 225 
                                       tmp_6 = 66;
        #line 225 
        ;
        #line 225 
        _rtl_dbg_print(rtlpriv,9ULL,256,(char *)"customer\'s limit, 40MHz rf(%c) = 0x%x\n",tmp_6,(int)rtlefuse->pwrgroup_ht40[rf][(int)channel + -1]);
      }
      else {
        #line 231 
        int tmp_7;
        #line 231 
        ;
        #line 231 
        if (rf == 0U) 
                      #line 231 
                      tmp_7 = 65; else 
                                       #line 231 
                                       tmp_7 = 66;
        #line 231 
        ;
        #line 231 
        _rtl_dbg_print(rtlpriv,9ULL,256,(char *)"customer\'s limit, 20MHz rf(%c) = 0x%x\n",tmp_7,(int)rtlefuse->pwrgroup_ht20[rf][(int)channel + -1]);
      }
      #line 238 
      if ((unsigned int)index <= 1U) 
                                     #line 239 
                                     pwr_diff = (unsigned char)rtlefuse->txpwr_legacyhtdiff[rf][(int)channel + -1];
      else 
        #line 240 
        if ((unsigned int)rtlphy->current_chan_bw == 0U) 
                                                         #line 241 
                                                         pwr_diff = (unsigned char)rtlefuse->txpwr_ht20diff[rf][(int)channel + -1];
      #line 244 
      if ((unsigned int)rtlphy->current_chan_bw == 1U) 
                                                       #line 245 
                                                       customer_pwr_diff = rtlefuse->pwrgroup_ht40[rf][(int)channel + -1]; else 
                                                                    #line 248 
                                                                    customer_pwr_diff = rtlefuse->pwrgroup_ht20[rf][(int)channel + -1];
      #line 251 
      if ((int)pwr_diff > (int)customer_pwr_diff) 
                                                  #line 252 
                                                  pwr_diff = (unsigned char)0U; else 
                                                                    #line 254 
                                                                    pwr_diff = (unsigned char)((int)customer_pwr_diff - (int)pwr_diff);
      #line 256 
      i = (unsigned char)0U;
      #line 256 
      while ((unsigned int)i <= 3U) {
        {
          #line 259 
          int tmp_8;
          #line 259 
          if (rf != 0U) 
                        #line 259 
                        tmp_8 = 8; else 
                                        #line 259 
                                        tmp_8 = 0;
          #line 257 
          pwr_diff_limit[(int)i] = (unsigned char)((rtlphy->mcs_txpwrlevel_origoffset[(int)chnlgroup][(int)index + tmp_8] & (unsigned int)(127 << (int)i * 8)) >> (int)i * 8);
          #line 262 
          if ((int)pwr_diff_limit[(int)i] > (int)pwr_diff) 
                                                           #line 263 
                                                           pwr_diff_limit[(int)i] = pwr_diff;
        }
        #line 256 
        i = (u8)((int)i + 1);
      }
      #line 266 
      customer_limit = (unsigned int)(((((int)pwr_diff_limit[3] << 24) | ((int)pwr_diff_limit[2] << 16)) | ((int)pwr_diff_limit[1] << 8)) | (int)pwr_diff_limit[0]);
      #line 270 
      ;
      #line 270 
      if (rf == 0U) 
                    #line 270 
                    tmp_9 = 65; else 
                                     #line 270 
                                     tmp_9 = 66;
      #line 270 
      ;
      #line 270 
      _rtl_dbg_print(rtlpriv,9ULL,256,(char *)"Customer\'s limit rf(%c) = 0x%x\n",tmp_9,customer_limit);
      #line 274 
      if ((unsigned int)index <= 1U) 
                                     #line 274 
                                     tmp_10 = *(powerbase0 + (unsigned long)rf); else 
                                                                    #line 274 
                                                                    tmp_10 = *(powerbase1 + (unsigned long)rf);
      #line 274 
      writeval = tmp_10 + customer_limit;
      #line 277 
      ;
      #line 277 
      if (rf == 0U) 
                    #line 277 
                    tmp_11 = 65; else 
                                      #line 277 
                                      tmp_11 = 66;
      #line 277 
      ;
      #line 277 
      _rtl_dbg_print(rtlpriv,9ULL,256,(char *)"Customer, writeval rf(%c)= 0x%x\n",tmp_11,writeval);
      #line 280 
      break;
      #line 281 
      default: 
               #line 281 
      ;
      #line 282 
      chnlgroup = (unsigned char)0U;
      #line 285 
      if (rf != 0U) 
                    #line 285 
                    tmp_12 = 8; else 
                                     #line 285 
                                     tmp_12 = 0;
      #line 286 
      if ((unsigned int)index <= 1U) 
                                     #line 286 
                                     tmp_13 = *(powerbase0 + (unsigned long)rf); else 
                                                                    #line 286 
                                                                    tmp_13 = *(powerbase1 + (unsigned long)rf);
      #line 283 
      writeval = rtlphy->mcs_txpwrlevel_origoffset[(int)chnlgroup][(int)index + tmp_12] + tmp_13;
      #line 288 
      ;
      #line 288 
      if (rf == 0U) 
                    #line 288 
                    tmp_14 = 65; else 
                                      #line 288 
                                      tmp_14 = 66;
      #line 288 
      ;
      #line 288 
      _rtl_dbg_print(rtlpriv,9ULL,256,(char *)"RTK better performance, writeval rf(%c) = 0x%x\n",tmp_14,writeval);
      #line 291 
      break;
    }
    #line 294 
    if ((unsigned int)rtlpriv->dm.dynamic_txhighpower_lvl == 3U) 
                                                                 #line 295 
                                                                 writeval += 4193909242U;
    else 
      #line 296 
      if ((unsigned int)rtlpriv->dm.dynamic_txhighpower_lvl == 4U) 
                                                                   #line 298 
                                                                   writeval += 4092851188U;
    #line 299 
    *(p_outwriteval + (unsigned long)rf) = writeval;
    #line 170 
    rf ++;
  }
  #line 301 
  return;
}

#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/rf.c"
static void _rtl8821ae_write_ofdm_power_reg(struct ieee80211_hw *hw, u8 index, u32 *pvalue)
{
  #line 317 
  u8 i;
  #line 317 
  u8 rf;
  #line 317 
  u8 pwr_val[4U];
  #line 318 
  u32 writeval;
  #line 319 
  u16 regoffset;
  #line 306 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 307 
  u16 regoffset_a[6U] = {(unsigned short)3108U, (unsigned short)3112U, (unsigned short)3116U, (unsigned short)3120U, (unsigned short)3124U, (unsigned short)3128U};
  #line 312 
  u16 regoffset_b[6U] = {(unsigned short)3620U, (unsigned short)3624U, (unsigned short)3628U, (unsigned short)3632U, (unsigned short)3636U, (unsigned short)3640U};
  #line 321 
  rf = (unsigned char)0U;
  #line 321 
  while ((unsigned int)rf <= 1U) {
    #line 322 
    writeval = *(pvalue + (unsigned long)rf);
    #line 323 
    i = (unsigned char)0U;
    #line 323 
    while ((unsigned int)i <= 3U) {
      #line 324 
      pwr_val[(int)i] = (unsigned char)(((unsigned int)(127 << (int)i * 8) & writeval) >> (int)i * 8);
      #line 327 
      if ((unsigned int)pwr_val[(int)i] > 63U) 
                                               #line 328 
                                               pwr_val[(int)i] = (unsigned char)63U;
      #line 323 
      i = (u8)((int)i + 1);
    }
    #line 330 
    writeval = (unsigned int)(((((int)pwr_val[3] << 24) | ((int)pwr_val[2] << 16)) | ((int)pwr_val[1] << 8)) | (int)pwr_val[0]);
    #line 333 
    if ((unsigned int)rf == 0U) 
                                #line 334 
                                regoffset = regoffset_a[(int)index]; else 
                                                                    #line 336 
                                                                    regoffset = regoffset_b[(int)index];
    #line 337 
    rtl_set_bbreg(hw,(unsigned int)regoffset,4294967295U,writeval);
    #line 339 
    _rtl_dbg_print(rtlpriv,9ULL,256,(char *)"Set 0x%x = %08x\n",(int)regoffset,writeval);
    #line 321 
    rf = (u8)((int)rf + 1);
  }
  #line 341 
  return;
}

#line 344  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/rf.c"
void rtl8821ae_phy_rf6052_set_ofdm_txpower(struct ieee80211_hw *hw, u8 *ppowerlevel_ofdm, u8 *ppowerlevel_bw20, u8 *ppowerlevel_bw40, u8 channel)
{
  #line 350 
  u32 writeval[2U];
  #line 350 
  u32 powerbase0[2U];
  #line 350 
  u32 powerbase1[2U];
  #line 351 
  u8 index;
  #line 352 
  u8 direction;
  #line 353 
  u32 pwrtrac_value;
  #line 355 
  rtl8821ae_phy_get_power_base(hw,ppowerlevel_ofdm,ppowerlevel_bw20,ppowerlevel_bw40,(unsigned char)((int)channel),powerbase0,powerbase1);
  #line 362 
  rtl8821ae_dm_txpower_track_adjust(hw,(unsigned char)1,& direction,& pwrtrac_value);
  #line 364 
  index = (unsigned char)0U;
  #line 364 
  while ((unsigned int)index <= 5U) {
    #line 365 
    get_txpower_writeval_by_regulatory(hw,(unsigned char)((int)channel),(unsigned char)((int)index),powerbase0,powerbase1,writeval);
    #line 369 
    if ((unsigned int)direction == 1U) {
      #line 370 
      writeval[0] += pwrtrac_value;
      #line 371 
      writeval[1] += pwrtrac_value;
    }
    else 
      #line 372 
      if ((unsigned int)direction == 2U) {
        #line 373 
        writeval[0] -= pwrtrac_value;
        #line 374 
        writeval[1] -= pwrtrac_value;
      }
    #line 376 
    _rtl8821ae_write_ofdm_power_reg(hw,(unsigned char)((int)index),writeval);
    #line 364 
    index = (u8)((int)index + 1);
  }
  #line 378 
  return;
}

#line 380  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/rf.c"
bool rtl8821ae_phy_rf6052_config(struct ieee80211_hw *hw)
{
  #line 382 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 383 
  struct rtl_phy *rtlphy = & rtlpriv->phy;
  #line 385 
  if ((unsigned int)rtlphy->rf_type == 0U) 
                                           #line 386 
                                           rtlphy->num_total_rfpath = (unsigned char)1U; else 
                                                                    #line 388 
                                                                    rtlphy->num_total_rfpath = (unsigned char)2U;
  #line 390 
  return _rtl8821ae_phy_rf6052_config_parafile(hw);
}

#line 393  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/rf.c"
static bool _rtl8821ae_phy_rf6052_config_parafile(struct ieee80211_hw *hw)
{
  #line 398 
  u8 rfpath;
  #line 395 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 396 
  struct rtl_phy *rtlphy = & rtlpriv->phy;
  #line 397 
  struct rtl_hal *rtlhal = & ((struct rtl_priv *)hw->priv)->rtlhal;
  #line 399 
  bool rtstatus = (_Bool)1;
  #line 401 
  rfpath = (unsigned char)0U;
  #line 401 
  while ((int)rtlphy->num_total_rfpath > (int)rfpath) {
    #line 402 
    switch ((int)rfpath) {
      #line 403 
      case 0: 
              #line 403 
      ;
      #line 404 
      if ((unsigned int)rtlhal->hw_type == 14U) 
                                                #line 405 
                                                rtstatus = rtl8812ae_phy_config_rf_with_headerfile(hw,(enum radio_path)rfpath); else 
                                                                    #line 409 
                                                                    rtstatus = rtl8821ae_phy_config_rf_with_headerfile(hw,(enum radio_path)rfpath);
      #line 412 
      break;
      #line 414 
      case 1: 
              #line 414 
      ;
      #line 415 
      if ((unsigned int)rtlhal->hw_type == 14U) 
                                                #line 416 
                                                rtstatus = rtl8812ae_phy_config_rf_with_headerfile(hw,(enum radio_path)rfpath); else 
                                                                    #line 420 
                                                                    rtstatus = rtl8821ae_phy_config_rf_with_headerfile(hw,(enum radio_path)rfpath);
      #line 423 
      break;
      #line 424 
      case 2: 
              #line 424 
      ;
      #line 425 
      break;
      #line 426 
      case 3: 
              #line 426 
      ;
      #line 427 
      break;
    }
    #line 430 
    if (! rtstatus) {
      #line 431 
      _rtl_dbg_trace(rtlpriv,4ULL,5,(char *)"Radio[%d] Fail!!\n",(int)rfpath);
      #line 433 
      return (_Bool)0;
    }
    #line 401 
    rfpath = (u8)((int)rfpath + 1);
  }
  #line 438 
  _rtl_dbg_trace(rtlpriv,4ULL,5,(char *)"\n");
  #line 439 
  return rtstatus;
}

/* compiler builtin: 
   void __builtin_unreachable(void);   */
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bug.h"
#line 89 
void __warn_printk(char * , ...);
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
#line 15 
extern unsigned long vmalloc_base;
#line 16 
#line 16 
extern unsigned long vmemmap_base;
#line 29 
#line 29 
unsigned long __phys_addr(unsigned long);
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 18 
void *memset(void *, int, size_t);
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cpufeature.h"
__inline static bool _static_cpu_has(u16 bit)
{
  #line 177 
  ldv_inline_asm();
  #line 178 
  ldv_inline_asm();
  #line 211 
  t_yes: 
         #line 211 
  ;
  #line 212 
  return (_Bool)1;
  #line 213 
  t_no: 
        #line 213 
  ;
  #line 214 
  return (_Bool)0;
}

#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static bool is_vmalloc_addr(void *x)
{
  #line 633 
  int tmp_1;
  #line 631 
  unsigned long addr = (unsigned long)x;
  #line 633 
  if (addr >= vmalloc_base) {
    #line 633 
    unsigned long tmp_0;
    #line 633 
    if ((int)_static_cpu_has((unsigned short)528) != 0) 
                                                        #line 633 
                                                        tmp_0 = 14073748835532800UL; else 
                                                                    #line 633 
                                                                    tmp_0 = 35184372088832UL;
    #line 633 
    ;
    #line 633 
    if ((tmp_0 + vmalloc_base) + 18446744073709551615UL > addr) 
                                                                #line 633 
                                                                tmp_1 = 1; else 
                                                                    #line 633 
                                                                    tmp_1 = 0;
  }
  else 
       #line 633 
       tmp_1 = 0;
  #line 633 
  return (_Bool)(tmp_1 != 0);
}

#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
__inline static char *kobject_name(struct kobject *kobj)
{
  #line 91 
  return kobj->name;
}

#line 1370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static char *dev_name(struct device *dev)
{
  #line 1373 
  if (dev->init_name != (char *)0) 
                                   #line 1374 
                                   return dev->init_name;
  #line 1376 
  return kobject_name(& dev->kobj);
}

#line 1680 
#line 1680 
char *dev_driver_string(struct device *);
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
#line 21 
void debug_dma_map_single(struct device *, void *, unsigned long);
#line 24 
#line 24 
void debug_dma_map_page(struct device *, struct page *, size_t, size_t, int, dma_addr_t);
#line 28 
#line 28 
void debug_dma_mapping_error(struct device *, dma_addr_t);
#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static int valid_dma_direction(int dma_direction)
{
  #line 146 
  return (unsigned int)dma_direction <= 2U;
}

#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static bool dma_is_direct(struct dma_map_ops *ops)
{
  #line 193 
  return (_Bool)((long)(ops == (struct dma_map_ops *)0) != 0L);
}

#line 200 
#line 200 
dma_addr_t dma_direct_map_page(struct device *, struct page *, unsigned long, size_t, enum dma_data_direction, unsigned long);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/dma-mapping.h"
#line 19 
extern struct dma_map_ops *dma_ops;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/dma-mapping.h"
__inline static struct dma_map_ops *get_arch_dma_ops(struct bus_type *bus)
{
  #line 23 
  return dma_ops;
}

#line 261  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static struct dma_map_ops *get_dma_ops(struct device *dev)
{
  #line 263 
  if (dev->dma_ops != (struct dma_map_ops *)0) 
                                               #line 264 
                                               return dev->dma_ops;
  #line 265 
  return get_arch_dma_ops(dev->bus);
}

#line 274  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static dma_addr_t dma_map_page_attrs(struct device *dev, struct page *page, size_t offset, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 279 
  dma_addr_t addr;
  #line 278 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 281 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 282 
    ldv_inline_asm();
    #line 283 
    ldv_inline_asm();
    #line 284 
    ldv_inline_asm();
    #line 281 
    ;
  }
  #line 282 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 283 
                                    addr = dma_direct_map_page(dev,page,offset,size,dir,attrs); else 
                                                                    #line 285 
                                                                    addr = (*(ops->map_page))(dev,page,offset,size,dir,attrs);
  #line 286 
  debug_dma_map_page(dev,page,offset,size,(int)dir,addr);
  #line 288 
  return addr;
}

#line 433  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static int dma_mapping_error(struct device *dev, dma_addr_t dma_addr)
{
  #line 435 
  debug_dma_mapping_error(dev,dma_addr);
  #line 437 
  if (dma_addr == 18446744073709551615ULL) 
                                           #line 438 
                                           return -12;
  #line 439 
  return 0;
}

#line 580  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static dma_addr_t dma_map_single_attrs(struct device *dev, void *ptr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 584 
  int __ret_warn_once;
  {
    #line 584 
    bool __warned;
    #line 584 
    __ret_warn_once = (int)is_vmalloc_addr(ptr) != 0;
    #line 584 
    if ((long)(__ret_warn_once != 0) != 0L && (long)(! __warned) != 0L) {
      #line 584 
      __warned = (_Bool)1;
      {
        #line 584 
        int __ret_warn_on = 1;
        #line 584 
        if ((long)(__ret_warn_on != 0) != 0L) {
          #line 584 
          __warn_printk((char *)"%s %s: ",dev_driver_string(dev),dev_name(dev));
          #line 585 
          ldv_inline_asm();
          #line 586 
          ldv_inline_asm();
        }
        #line 584 
        long tmp_2 = (long)(__ret_warn_on != 0);
      }
    }
    }
  #line 584 
  if ((long)((long)(__ret_warn_once != 0)) != 0L) 
                                                  #line 586 
                                                  return 18446744073709551615ULL;
  #line 587 
  debug_dma_map_single(dev,ptr,size);
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  return dma_map_page_attrs(dev,
                           (struct page *)((__phys_addr((unsigned long)ptr) >> 12) + vmemmap_base),
                           (unsigned long)ptr & 4095UL,size,dir,attrs);
}

#line 2245  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
#line 2245 
void *skb_push(struct sk_buff *, unsigned int);
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_multicast_ether_addr(u8 *addr)
{
  #line 119 
  u32 a = *((u32 *)addr);
  #line 126 
  return (_Bool)((a & 1U) != 0U);
}

#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_broadcast_ether_addr(u8 *addr)
{
  #line 166 
  return (_Bool)((unsigned int)(((int)*((u16 *)addr) & (int)*((u16 *)(addr + 2U))) & (int)*((u16 *)(addr + 4U))) == 65535U);
}

#line 276  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static void ether_addr_copy(u8 *dst, u8 *src)
{
  #line 279 
  *((u32 *)dst) = *((u32 *)src);
  #line 280 
  *((u16 *)(dst + 4U)) = *((u16 *)(src + 4U));
  #line 281 
  return;
}

#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool ether_addr_equal(u8 *addr1, u8 *addr2)
{
  #line 318 
  u32 fold = (*((u32 *)addr1) ^ *((u32 *)addr2)) | (unsigned int)((int)*((u16 *)(addr1 + 4U)) ^ (int)*((u16 *)(addr2 + 4U)));
  #line 321 
  return (_Bool)(fold == 0U);
}

#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
__inline static bool ieee80211_has_tods(__le16 fc)
{
  #line 268 
  return (_Bool)(((int)fc & 256) != 0);
}

#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
__inline static bool ieee80211_has_fromds(__le16 fc)
{
  #line 277 
  return (_Bool)(((int)fc & 512) != 0);
}

#line 284  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
__inline static bool ieee80211_has_a4(__le16 fc)
{
  #line 286 
  __le16 tmp = (unsigned short)768U;
  #line 287 
  return (_Bool)(((int)fc & (int)tmp) == (int)tmp);
}

#line 330  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
__inline static bool ieee80211_has_protected(__le16 fc)
{
  #line 332 
  return (_Bool)(((int)fc & 16384) != 0);
}

#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
__inline static bool ieee80211_is_mgmt(__le16 fc)
{
  #line 350 
  return (_Bool)(((int)fc & 12) == 0);
}

#line 358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
__inline static bool ieee80211_is_ctl(__le16 fc)
{
  #line 360 
  return (_Bool)(((int)fc & 12) == 4);
}

#line 378  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
__inline static bool ieee80211_is_data_qos(__le16 fc)
{
  #line 384 
  return (_Bool)(((int)fc & 140) == 136);
}

#line 466  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
__inline static bool ieee80211_is_beacon(__le16 fc)
{
  #line 468 
  return (_Bool)(((int)fc & 252) == 128);
}

#line 486  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
__inline static bool ieee80211_is_disassoc(__le16 fc)
{
  #line 488 
  return (_Bool)(((int)fc & 252) == 160);
}

#line 506  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
__inline static bool ieee80211_is_deauth(__le16 fc)
{
  #line 508 
  return (_Bool)(((int)fc & 252) == 192);
}

#line 516  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
__inline static bool ieee80211_is_action(__le16 fc)
{
  #line 518 
  return (_Bool)(((int)fc & 252) == 208);
}

#line 606  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
__inline static bool ieee80211_is_nullfunc(__le16 fc)
{
  #line 608 
  return (_Bool)(((int)fc & 252) == 72);
}

#line 3129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
__inline static u8 *ieee80211_get_SA(struct ieee80211_hdr *hdr)
{
  #line 3131 
  if ((int)ieee80211_has_a4((unsigned short)((int)hdr->frame_control)) != 0) 
    #line 3132 
    return (u8 *)(& hdr->addr4);
  #line 3133 
  if ((int)ieee80211_has_fromds((unsigned short)((int)hdr->frame_control)) != 0) 
    #line 3134 
    return (u8 *)(& hdr->addr3);
  #line 3135 
  return (u8 *)(& hdr->addr2);
}

#line 3148  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
__inline static u8 *ieee80211_get_DA(struct ieee80211_hdr *hdr)
{
  #line 3150 
  if ((int)ieee80211_has_tods((unsigned short)((int)hdr->frame_control)) != 0) 
    #line 3151 
    return (u8 *)(& hdr->addr3); else 
                                      #line 3153 
                                      return (u8 *)(& hdr->addr1);
}

#line 3160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
__inline static bool _ieee80211_is_robust_mgmt_frame(struct ieee80211_hdr *hdr)
{
  #line 3162 
  if ((int)ieee80211_is_disassoc((unsigned short)((int)hdr->frame_control)) != 0) 
    #line 3164 
    return (_Bool)1;
  else {
    #line 3162 
    if ((int)ieee80211_is_deauth((unsigned short)((int)hdr->frame_control)) != 0) 
      #line 3164 
      return (_Bool)1;
  }
  #line 3166 
  if ((int)ieee80211_is_action((unsigned short)((int)hdr->frame_control)) != 0) {
    #line 3167 
    u8 *category;
    #line 3176 
    if ((int)ieee80211_has_protected((unsigned short)((int)hdr->frame_control)) != 0) 
      #line 3177 
      return (_Bool)1;
    #line 3178 
    category = (u8 *)hdr + 24U;
    #line 3184 
    return (_Bool)((((((((unsigned int)*category != 4U && (unsigned int)*category != 7U) && (unsigned int)*category != 11U) && (unsigned int)*category != 15U) && (unsigned int)*category != 20U) && (unsigned int)*category != 21U) && (unsigned int)*category != 127U) != 0);
  }
  #line 3188 
  return (_Bool)0;
}

#line 1114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
__inline static struct ieee80211_tx_info *IEEE80211_SKB_CB(struct sk_buff *skb)
{
  #line 1116 
  return (struct ieee80211_tx_info *)(& skb->cb);
}

#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitfield.h"
#line 100 
void __field_overflow(void);
#line 102 
#line 102 
void __bad_mask(void);
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitfield.h"
__inline static u64 field_multiplier(u64 field)
{
  #line 105 
  if ((((field + 18446744073709551615ULL) | field) & (((field + 18446744073709551615ULL) | field) + 1ULL)) != 0ULL) 
    #line 106 
    __bad_mask();
  #line 107 
  return - field & field;
}

#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitfield.h"
__inline static u64 field_mask(u64 field)
{
  #line 111 
  ;
  #line 111 
  return field / field_multiplier(field);
}

#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitfield.h"
__inline static __le32 le32_encode_bits(u32 v, u32 field)
{
  #line 140 
  if (0 != 0) {
    #line 140 
    ;
    #line 140 
    if (((unsigned long long)v & ~ field_mask((unsigned long long)field)) != 0ULL) 
      #line 140 
      __field_overflow();
  }
  #line 140 
  ;
  #line 140 
  return (unsigned int)((unsigned long long)v & field_mask((unsigned long long)field)) * (unsigned int)field_multiplier((unsigned long long)field);
}

#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitfield.h"
__inline static void le32p_replace_bits(__le32 *p, u32 val, u32 field)
{
  #line 140 
  *p = (*p & ~ field) | le32_encode_bits(val,field);
  #line 141 
  return;
}

#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitfield.h"
__inline static u32 le32_get_bits(__le32 v, u32 field)
{
  #line 140 
  ;
  #line 140 
  return (unsigned int)((unsigned long long)(v & field) / field_multiplier((unsigned long long)field));
}

#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/debug.h"
#line 159 
void _rtl_dbg_print_data(struct rtl_priv *, u64, int, char *, void *, int);
#line 1032  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
__inline static struct rtlwifi_tx_info *rtl_tx_skb_cb_info(struct sk_buff *skb)
{
  #line 1034 
  struct ieee80211_tx_info *info = IEEE80211_SKB_CB(skb);
  #line 1039 
  return (struct rtlwifi_tx_info *)(& info->__anonCompField_ieee80211_tx_info_195.status.status_driver_data);
}

#line 3121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
__inline static void rtl_write_word(struct rtl_priv *rtlpriv, u32 addr, u16 val16)
{
  #line 3123 
  (*(rtlpriv->io.write16_async))(rtlpriv,addr,(unsigned short)((int)val16));
  #line 3125 
  if ((int)(rtlpriv->cfg)->write_readback != 0) 
                                                #line 3126 
                                                (*(rtlpriv->io.read16_sync))(rtlpriv,addr);
  #line 3127 
  return;
}

#line 3198  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
__inline static struct ieee80211_hdr *rtl_get_hdr(struct sk_buff *skb)
{
  #line 3200 
  return (struct ieee80211_hdr *)skb->data;
}

#line 3203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
__inline static __le16 rtl_get_fc(struct sk_buff *skb)
{
  #line 3205 
  return rtl_get_hdr(skb)->frame_control;
}

#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static dma_addr_t pci_map_single(struct pci_dev *hwdev, void *ptr, size_t size, int direction)
{
  #line 40 
  return dma_map_single_attrs(& hwdev->dev,ptr,size,
                           (enum dma_data_direction)direction,0UL);
}

#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static int pci_dma_mapping_error(struct pci_dev *pdev, dma_addr_t dma_addr)
{
  #line 109 
  return dma_mapping_error(& pdev->dev,dma_addr);
}

#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/base.h"
#line 78 
int rtlwifi_rate_mapping(struct ieee80211_hw *, bool, bool, u8);
#line 86 
#line 86 
void rtl_set_tx_report(struct rtl_tcb_desc *, u8 *, struct ieee80211_hw *, struct rtlwifi_tx_info *);
#line 119 
#line 119 
void rtl_get_tcb_desc(struct ieee80211_hw *, struct ieee80211_tx_info *, struct ieee80211_sta *, struct sk_buff *, struct rtl_tcb_desc *);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/stats.h"
#line 14 
u8 rtl_query_rxpwrpercentage(s8);
#line 15 
#line 15 
u8 rtl_evm_db_to_percentage(s8);
#line 16 
#line 16 
long rtl_signal_scale_mapping(struct ieee80211_hw *, long);
#line 17 
#line 17 
void rtl_process_phyinfo(struct ieee80211_hw *, u8 *, struct rtl_stats *);
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.h"
__inline static void set_tx_desc_pkt_size(__le32 *__pdesc, u32 __val)
{
  #line 19 
  le32p_replace_bits(__pdesc,__val,65535U);
  #line 20 
  return;
}

#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.h"
__inline static void set_tx_desc_offset(__le32 *__pdesc, u32 __val)
{
  #line 24 
  le32p_replace_bits(__pdesc,__val,16711680U);
  #line 25 
  return;
}

#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.h"
__inline static void set_tx_desc_bmc(__le32 *__pdesc, u32 __val)
{
  #line 29 
  le32p_replace_bits(__pdesc,__val,16777216U);
  #line 30 
  return;
}

#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.h"
__inline static void set_tx_desc_htc(__le32 *__pdesc, u32 __val)
{
  #line 34 
  le32p_replace_bits(__pdesc,__val,33554432U);
  #line 35 
  return;
}

#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.h"
__inline static void set_tx_desc_last_seg(__le32 *__pdesc, u32 __val)
{
  #line 39 
  le32p_replace_bits(__pdesc,__val,67108864U);
  #line 40 
  return;
}

#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.h"
__inline static void set_tx_desc_first_seg(__le32 *__pdesc, u32 __val)
{
  #line 44 
  le32p_replace_bits(__pdesc,__val,134217728U);
  #line 45 
  return;
}

#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.h"
__inline static void set_tx_desc_linip(__le32 *__pdesc, u32 __val)
{
  #line 49 
  le32p_replace_bits(__pdesc,__val,268435456U);
  #line 50 
  return;
}

#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.h"
__inline static void set_tx_desc_own(__le32 *__pdesc, u32 __val)
{
  #line 54 
  le32p_replace_bits(__pdesc,__val,2147483648U);
  #line 55 
  return;
}

#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.h"
__inline static int get_tx_desc_own(__le32 *__pdesc)
{
  #line 59 
  return (int)le32_get_bits(*__pdesc,2147483648U);
}

#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.h"
__inline static void set_tx_desc_macid(__le32 *__pdesc, u32 __val)
{
  #line 64 
  le32p_replace_bits(__pdesc + 1U,__val,127U);
  #line 65 
  return;
}

#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.h"
__inline static void set_tx_desc_queue_sel(__le32 *__pdesc, u32 __val)
{
  #line 69 
  le32p_replace_bits(__pdesc + 1U,__val,7936U);
  #line 70 
  return;
}

#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.h"
__inline static void set_tx_desc_rate_id(__le32 *__pdesc, u32 __val)
{
  #line 74 
  le32p_replace_bits(__pdesc + 1U,__val,2031616U);
  #line 75 
  return;
}

#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.h"
__inline static void set_tx_desc_sec_type(__le32 *__pdesc, u32 __val)
{
  #line 79 
  le32p_replace_bits(__pdesc + 1U,__val,12582912U);
  #line 80 
  return;
}

#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.h"
__inline static void set_tx_desc_pkt_offset(__le32 *__pdesc, u32 __val)
{
  #line 84 
  le32p_replace_bits(__pdesc + 1U,__val,520093696U);
  #line 85 
  return;
}

#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.h"
__inline static void set_tx_desc_agg_enable(__le32 *__pdesc, u32 __val)
{
  #line 89 
  le32p_replace_bits(__pdesc + 2U,__val,4096U);
  #line 90 
  return;
}

#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.h"
__inline static void set_tx_desc_rdg_enable(__le32 *__pdesc, u32 __val)
{
  #line 94 
  le32p_replace_bits(__pdesc + 2U,__val,8192U);
  #line 95 
  return;
}

#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.h"
__inline static void set_tx_desc_more_frag(__le32 *__pdesc, u32 __val)
{
  #line 99 
  le32p_replace_bits(__pdesc + 2U,__val,131072U);
  #line 100 
  return;
}

#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.h"
__inline static void set_tx_desc_ampdu_density(__le32 *__pdesc, u32 __val)
{
  #line 104 
  le32p_replace_bits(__pdesc + 2U,__val,7340032U);
  #line 105 
  return;
}

#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.h"
__inline static void set_tx_desc_hwseq_sel(__le32 *__pdesc, u32 __val)
{
  #line 109 
  le32p_replace_bits(__pdesc + 3U,__val,192U);
  #line 110 
  return;
}

#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.h"
__inline static void set_tx_desc_use_rate(__le32 *__pdesc, u32 __val)
{
  #line 114 
  le32p_replace_bits(__pdesc + 3U,__val,256U);
  #line 115 
  return;
}

#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.h"
__inline static void set_tx_desc_disable_fb(__le32 *__pdesc, u32 __val)
{
  #line 119 
  le32p_replace_bits(__pdesc + 3U,__val,1024U);
  #line 120 
  return;
}

#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.h"
__inline static void set_tx_desc_cts2self(__le32 *__pdesc, u32 __val)
{
  #line 124 
  le32p_replace_bits(__pdesc + 3U,__val,2048U);
  #line 125 
  return;
}

#line 127  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.h"
__inline static void set_tx_desc_rts_enable(__le32 *__pdesc, u32 __val)
{
  #line 129 
  le32p_replace_bits(__pdesc + 3U,__val,4096U);
  #line 130 
  return;
}

#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.h"
__inline static void set_tx_desc_hw_rts_enable(__le32 *__pdesc, u32 __val)
{
  #line 134 
  le32p_replace_bits(__pdesc + 3U,__val,8192U);
  #line 135 
  return;
}

#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.h"
__inline static void set_tx_desc_nav_use_hdr(__le32 *__pdesc, u32 __val)
{
  #line 139 
  le32p_replace_bits(__pdesc + 3U,__val,32768U);
  #line 140 
  return;
}

#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.h"
__inline static void set_tx_desc_max_agg_num(__le32 *__pdesc, u32 __val)
{
  #line 144 
  le32p_replace_bits(__pdesc + 3U,__val,4063232U);
  #line 145 
  return;
}

#line 152  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.h"
__inline static void set_tx_desc_tx_rate(__le32 *__pdesc, u32 __val)
{
  #line 154 
  le32p_replace_bits(__pdesc + 4U,__val,127U);
  #line 155 
  return;
}

#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.h"
__inline static void set_tx_desc_data_rate_fb_limit(__le32 *__pdesc, u32 __val)
{
  #line 159 
  le32p_replace_bits(__pdesc + 4U,__val,7936U);
  #line 160 
  return;
}

#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.h"
__inline static void set_tx_desc_rts_rate_fb_limit(__le32 *__pdesc, u32 __val)
{
  #line 164 
  le32p_replace_bits(__pdesc + 4U,__val,122880U);
  #line 165 
  return;
}

#line 167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.h"
__inline static void set_tx_desc_rts_rate(__le32 *__pdesc, u32 __val)
{
  #line 169 
  le32p_replace_bits(__pdesc + 4U,__val,520093696U);
  #line 170 
  return;
}

#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.h"
__inline static void set_tx_desc_tx_sub_carrier(__le32 *__pdesc, u32 __val)
{
  #line 174 
  le32p_replace_bits(__pdesc + 5U,__val,15U);
  #line 175 
  return;
}

#line 177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.h"
__inline static void set_tx_desc_data_shortgi(__le32 *__pdesc, u32 __val)
{
  #line 179 
  le32p_replace_bits(__pdesc + 5U,__val,16U);
  #line 180 
  return;
}

#line 182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.h"
__inline static void set_tx_desc_data_bw(__le32 *__pdesc, u32 __val)
{
  #line 184 
  le32p_replace_bits(__pdesc + 5U,__val,96U);
  #line 185 
  return;
}

#line 187  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.h"
__inline static void set_tx_desc_rts_short(__le32 *__pdesc, u32 __val)
{
  #line 189 
  le32p_replace_bits(__pdesc + 5U,__val,4096U);
  #line 190 
  return;
}

#line 192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.h"
__inline static void set_tx_desc_rts_sc(__le32 *__pdesc, u32 __val)
{
  #line 194 
  le32p_replace_bits(__pdesc + 5U,__val,122880U);
  #line 195 
  return;
}

#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.h"
__inline static void set_tx_desc_tx_buffer_size(__le32 *__pdesc, u32 __val)
{
  #line 199 
  le32p_replace_bits(__pdesc + 7U,__val,65535U);
  #line 200 
  return;
}

#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.h"
__inline static void set_tx_desc_hwseq_en(__le32 *__pdesc, u32 __val)
{
  #line 204 
  le32p_replace_bits(__pdesc + 8U,__val,32768U);
  #line 205 
  return;
}

#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.h"
__inline static void set_tx_desc_seq(__le32 *__pdesc, u32 __val)
{
  #line 209 
  le32p_replace_bits(__pdesc + 9U,__val,16773120U);
  #line 210 
  return;
}

#line 212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.h"
__inline static void set_tx_desc_tx_buffer_address(__le32 *__pdesc, u32 __val)
{
  #line 214 
  *(__pdesc + 10U) = __val;
  #line 215 
  return;
}

#line 217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.h"
__inline static u32 get_tx_desc_tx_buffer_address(__le32 *__pdesc)
{
  #line 219 
  return *(__pdesc + 10U);
}

#line 222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.h"
__inline static void set_tx_desc_next_desc_address(__le32 *__pdesc, u32 __val)
{
  #line 224 
  *(__pdesc + 12U) = __val;
  #line 225 
  return;
}

#line 227  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.h"
__inline static int get_rx_desc_pkt_len(__le32 *__pdesc)
{
  #line 229 
  return (int)le32_get_bits(*__pdesc,16383U);
}

#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.h"
__inline static int get_rx_desc_crc32(__le32 *__pdesc)
{
  #line 234 
  return (int)le32_get_bits(*__pdesc,16384U);
}

#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.h"
__inline static int get_rx_desc_icv(__le32 *__pdesc)
{
  #line 239 
  return (int)le32_get_bits(*__pdesc,32768U);
}

#line 242  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.h"
__inline static int get_rx_desc_drv_info_size(__le32 *__pdesc)
{
  #line 244 
  return (int)le32_get_bits(*__pdesc,983040U);
}

#line 247  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.h"
__inline static int get_rx_desc_shift(__le32 *__pdesc)
{
  #line 249 
  return (int)le32_get_bits(*__pdesc,50331648U);
}

#line 252  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.h"
__inline static int get_rx_desc_physt(__le32 *__pdesc)
{
  #line 254 
  return (int)le32_get_bits(*__pdesc,67108864U);
}

#line 257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.h"
__inline static int get_rx_desc_swdec(__le32 *__pdesc)
{
  #line 259 
  return (int)le32_get_bits(*__pdesc,134217728U);
}

#line 267  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.h"
__inline static void set_rx_desc_pkt_len(__le32 *__pdesc, u32 __val)
{
  #line 269 
  le32p_replace_bits(__pdesc,__val,16383U);
  #line 270 
  return;
}

#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.h"
__inline static void set_rx_desc_eor(__le32 *__pdesc, u32 __val)
{
  #line 274 
  le32p_replace_bits(__pdesc,__val,1073741824U);
  #line 275 
  return;
}

#line 282  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.h"
__inline static int get_rx_desc_macid(__le32 *__pdesc)
{
  #line 284 
  return (int)le32_get_bits(*(__pdesc + 1U),127U);
}

#line 287  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.h"
__inline static int get_rx_desc_paggr(__le32 *__pdesc)
{
  #line 289 
  return (int)le32_get_bits(*(__pdesc + 1U),32768U);
}

#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.h"
__inline static int get_rx_status_desc_rpt_sel(__le32 *__pdesc)
{
  #line 294 
  return (int)le32_get_bits(*(__pdesc + 1U),268435456U);
}

#line 297  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.h"
__inline static int get_rx_desc_rxmcs(__le32 *__pdesc)
{
  #line 299 
  return (int)le32_get_bits(*(__pdesc + 3U),127U);
}

#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.h"
__inline static int get_rx_status_desc_pattern_match(__le32 *__pdesc)
{
  #line 304 
  return (int)le32_get_bits(*(__pdesc + 3U),536870912U);
}

#line 307  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.h"
__inline static int get_rx_status_desc_unicast_match(__le32 *__pdesc)
{
  #line 309 
  return (int)le32_get_bits(*(__pdesc + 3U),1073741824U);
}

#line 312  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.h"
__inline static int get_rx_status_desc_magic_match(__le32 *__pdesc)
{
  #line 314 
  return (int)le32_get_bits(*(__pdesc + 3U),2147483648U);
}

#line 317  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.h"
__inline static int get_rx_desc_splcp(__le32 *__pdesc)
{
  #line 319 
  return (int)le32_get_bits(*(__pdesc + 4U),1U);
}

#line 322  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.h"
__inline static int get_rx_desc_bw(__le32 *__pdesc)
{
  #line 324 
  return (int)le32_get_bits(*(__pdesc + 4U),48U);
}

#line 327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.h"
__inline static u32 get_rx_desc_tsfl(__le32 *__pdesc)
{
  #line 329 
  return *(__pdesc + 5U);
}

#line 332  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.h"
__inline static u32 get_rx_desc_buff_addr(__le32 *__pdesc)
{
  #line 334 
  return *(__pdesc + 6U);
}

#line 337  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.h"
__inline static void set_rx_desc_buff_addr(__le32 *__pdesc, u32 __val)
{
  #line 339 
  *(__pdesc + 6U) = __val;
  #line 340 
  return;
}

#line 344  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.h"
__inline static u32 get_rx_rpt2_desc_macid_valid_1(__le32 *__status)
{
  #line 346 
  return *(__status + 4U);
}

#line 354  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.h"
__inline static void set_earlymode_pktnum(__le32 *__paddr, u32 __value)
{
  #line 356 
  le32p_replace_bits(__paddr,__value,15U);
  #line 357 
  return;
}

#line 359  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.h"
__inline static void set_earlymode_len0(__le32 *__paddr, u32 __value)
{
  #line 361 
  le32p_replace_bits(__paddr,__value,65520U);
  #line 362 
  return;
}

#line 364  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.h"
__inline static void set_earlymode_len1(__le32 *__paddr, u32 __value)
{
  #line 366 
  le32p_replace_bits(__paddr,__value,268369920U);
  #line 367 
  return;
}

#line 369  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.h"
__inline static void set_earlymode_len2_1(__le32 *__paddr, u32 __value)
{
  #line 371 
  le32p_replace_bits(__paddr,__value,4026531840U);
  #line 372 
  return;
}

#line 374  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.h"
__inline static void set_earlymode_len2_2(__le32 *__paddr, u32 __value)
{
  #line 376 
  le32p_replace_bits(__paddr,__value,255U);
  #line 377 
  return;
}

#line 379  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.h"
__inline static void set_earlymode_len3(__le32 *__paddr, u32 __value)
{
  #line 381 
  le32p_replace_bits(__paddr + 1U,__value,1048320U);
  #line 382 
  return;
}

#line 384  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.h"
__inline static void set_earlymode_len4(__le32 *__paddr, u32 __value)
{
  #line 386 
  le32p_replace_bits(__paddr + 1U,__value,4293918720U);
  #line 387 
  return;
}

#line 389  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.h"
__inline static void clear_pci_tx_desc_content(__le32 *__pdesc, int _size)
{
  #line 391 
  if (_size > 40) 
                  #line 392 
                  memset((void *)__pdesc,0,40UL); else 
                                                       #line 394 
                                                       memset((void *)__pdesc,0,(unsigned long)_size);
  #line 395 
  return;
}

#line 633 
#line 659  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.c"
void rtl8821ae_tx_fill_desc(struct ieee80211_hw *hw, struct ieee80211_hdr *hdr, u8 *pdesc8, u8 *txbd, struct ieee80211_tx_info *info, struct ieee80211_sta *sta, struct sk_buff *skb, u8 hw_queue, struct rtl_tcb_desc *ptcb_desc);
#line 639  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.h"
#line 431  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.c"
bool rtl8821ae_rx_query_desc(struct ieee80211_hw *hw, struct rtl_stats *status, struct ieee80211_rx_status *rx_status, u8 *pdesc8, struct sk_buff *skb);
#line 643  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.h"
#line 878  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.c"
void rtl8821ae_set_desc(struct ieee80211_hw *hw, u8 *pdesc8, bool istx, u8 desc_name, u8 *val);
#line 645  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.h"
#line 920  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.c"
u64 rtl8821ae_get_desc(struct ieee80211_hw *hw, u8 *pdesc8, bool istx, u8 desc_name);
#line 647  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.h"
#line 961  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.c"
bool rtl8821ae_is_tx_desc_closed(struct ieee80211_hw *hw, u8 hw_queue, u16 index);
#line 649  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.h"
#line 979  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.c"
void rtl8821ae_tx_polling(struct ieee80211_hw *hw, u8 hw_queue);
#line 650  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.h"
#line 828  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.c"
void rtl8821ae_tx_fill_cmddesc(struct ieee80211_hw *hw, u8 *pdesc8, bool firstseg, bool lastseg, struct sk_buff *skb);
#line 262  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/dm.h"
#line 262 
void rtl8821ae_dm_set_tx_ant_by_tx_info(struct ieee80211_hw *hw, u8 *pdesc, u32 mac_id);
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.c"
static u8 _rtl8821ae_map_hwqueue_to_fwqueue(struct sk_buff *skb, u8 hw_queue)
{
  #line 18 
  __le16 fc = rtl_get_fc(skb);
  #line 20 
  if ((long)((int)ieee80211_is_beacon((unsigned short)((int)fc)) != 0) != 0L) 
    #line 21 
    return (unsigned char)16U;
  #line 22 
  if ((int)ieee80211_is_mgmt((unsigned short)((int)fc)) != 0) 
                                                              #line 23 
                                                              return (unsigned char)18U;
  else {
    #line 22 
    if ((int)ieee80211_is_ctl((unsigned short)((int)fc)) != 0) 
                                                               #line 23 
                                                               return (unsigned char)18U;
  }
  #line 25 
  return (unsigned char)skb->priority;
}

#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.c"
static u16 odm_cfo(s8 value)
{
  #line 30 
  int ret_val;
  #line 32 
  if ((int)value < 0) {
    #line 33 
    ret_val = - ((int)value);
    #line 34 
    ret_val = (ret_val << 1) + (ret_val >> 1);
    #line 36 
    ret_val |= 4096;
  }
  else {
    #line 38 
    ret_val = (int)value;
    #line 39 
    ret_val = (ret_val << 1) + (ret_val >> 1);
  }
  #line 41 
  return (unsigned short)ret_val;
}

#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.c"
static u8 _rtl8821ae_evm_dbm_jaguar(s8 value)
{
  #line 46 
  s8 ret_val = value;
  #line 49 
  if ((int)ret_val == -128) 
                            #line 50 
                            ret_val = (signed char)127;
  else 
    #line 51 
    if ((int)ret_val < 0) 
                          #line 52 
                          ret_val = (signed char)(- ((int)ret_val));
  #line 54 
  ret_val = (signed char)((int)ret_val >> 1);
  #line 55 
  return (unsigned char)ret_val;
}

#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.c"
static void query_rxphystatus(struct ieee80211_hw *hw, struct rtl_stats *pstatus, __le32 *pdesc, struct rx_fwinfo_8821ae *p_drvinfo, bool bpacket_match_bssid, bool bpacket_toself, bool packet_beacon)
{
  #line 68 
  s8 rx_pwr[4U];
  #line 69 
  u8 evm;
  #line 69 
  u8 evmdbm;
  #line 69 
  u8 pwdb_all;
  #line 70 
  u8 i;
  #line 70 
  u8 max_spatial_stream;
  #line 71 
  u32 rssi;
  #line 73 
  u8 lan_idx;
  #line 73 
  u8 vga_idx;
  #line 64 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 65 
  struct phy_status_rpt *p_phystrpt = (struct phy_status_rpt *)p_drvinfo;
  #line 66 
  struct rtl_dm *rtldm = & ((struct rtl_priv *)hw->priv)->dm;
  #line 67 
  struct rtl_phy *rtlphy = & rtlpriv->phy;
  #line 68 
  s8 rx_pwr_all = (signed char)0;
  #line 69 
  u8 rf_rx_num = (unsigned char)0U;
  #line 71 
  u32 total_rssi = 0U;
  #line 72 
  bool is_cck = pstatus->is_cck;
  #line 76 
  pstatus->packet_matchbssid = bpacket_match_bssid;
  #line 77 
  pstatus->packet_toself = bpacket_toself;
  #line 78 
  pstatus->packet_beacon = packet_beacon;
  #line 79 
  pstatus->rx_mimo_signalquality[0] = (signed char)(-1);
  #line 80 
  pstatus->rx_mimo_signalquality[1] = (signed char)(-1);
  #line 82 
  if ((int)is_cck != 0) {
    #line 83 
    u8 cck_highpwr;
    #line 84 
    u8 cck_agc_rpt;
    #line 86 
    cck_agc_rpt = p_phystrpt->cfosho[0];
    #line 92 
    cck_highpwr = rtlphy->cck_high_power;
    #line 94 
    lan_idx = (unsigned char)((int)cck_agc_rpt >> 5);
    #line 95 
    vga_idx = (unsigned char)((unsigned int)cck_agc_rpt & 31U);
    #line 96 
    if ((unsigned int)rtlpriv->rtlhal.hw_type == 14U) {
      #line 97 
      switch ((int)lan_idx) {
        #line 98 
        case 7: 
                #line 98 
        ;
        #line 99 
        if ((unsigned int)vga_idx <= 27U) 
                                          #line 101 
                                          rx_pwr_all = (signed char)((unsigned int)(-23 - (int)vga_idx) * 2U); else 
                                                                    #line 103 
                                                                    rx_pwr_all = (signed char)(-100);
        #line 104 
        break;
        #line 105 
        case 6: 
                #line 105 
        ;
        #line 107 
        rx_pwr_all = (signed char)((unsigned int)(-22 - (int)vga_idx) * 2U);
        #line 108 
        break;
        #line 109 
        case 5: 
                #line 109 
        ;
        #line 111 
        rx_pwr_all = (signed char)((unsigned int)(-14 - (int)vga_idx) * 2U);
        #line 112 
        break;
        #line 113 
        case 4: 
                #line 113 
        ;
        #line 115 
        rx_pwr_all = (signed char)((unsigned int)(-11 - (int)vga_idx) * 2U);
        #line 116 
        break;
        #line 117 
        case 3: 
                #line 117 
        ;
        #line 119 
        rx_pwr_all = (signed char)((unsigned int)(-5 - (int)vga_idx) * 2U);
        #line 120 
        break;
        #line 121 
        case 2: 
                #line 121 
        ;
        #line 122 
        if ((unsigned int)cck_highpwr != 0U) 
                                             #line 124 
                                             rx_pwr_all = (signed char)((unsigned int)(~ ((int)vga_idx)) * 2U); else 
                                                                    #line 126 
                                                                    rx_pwr_all = (signed char)((unsigned int)(2 - (int)vga_idx) * 2U);
        #line 127 
        break;
        #line 128 
        case 1: 
                #line 128 
        ;
        #line 129 
        rx_pwr_all = (signed char)((unsigned int)(4 - (int)vga_idx) * 2U);
        #line 130 
        break;
        #line 131 
        case 0: 
                #line 131 
        ;
        #line 132 
        rx_pwr_all = (signed char)((unsigned int)(7 - (int)vga_idx) * 2U);
        #line 133 
        break;
        #line 134 
        default: 
                 #line 134 
        ;
        #line 135 
        break;
      }
      #line 137 
      rx_pwr_all = (signed char)((unsigned int)rx_pwr_all + 6U);
      #line 138 
      pwdb_all = rtl_query_rxpwrpercentage((signed char)((int)rx_pwr_all));
      #line 139 
      if ((unsigned int)cck_highpwr == 0U) {
        #line 140 
        if ((unsigned int)pwdb_all > 79U) 
                                          #line 141 
                                          pwdb_all = (unsigned char)(((((unsigned int)pwdb_all + 176U) << 1U) + (unsigned int)((unsigned char)(((int)pwdb_all + -80) >> 1))) + 80U);
        else 
          #line 144 
          if ((unsigned int)pwdb_all + 236U <= 58U) 
                                                    #line 145 
                                                    pwdb_all = (unsigned char)((unsigned int)pwdb_all + 3U);
        #line 146 
        if ((unsigned int)pwdb_all > 100U) 
                                           #line 147 
                                           pwdb_all = (unsigned char)100U;
      }
    }
    else {
      #line 150 
      s8 pout = (signed char)(-6);
      #line 152 
      switch ((int)lan_idx) {
        #line 153 
        case 5: 
                #line 153 
        ;
        #line 154 
        rx_pwr_all = (signed char)(((unsigned int)pout - (unsigned int)vga_idx * 2U) + 224U);
        #line 155 
        break;
        #line 156 
        case 4: 
                #line 156 
        ;
        #line 157 
        rx_pwr_all = (signed char)(((unsigned int)pout - (unsigned int)vga_idx * 2U) + 232U);
        #line 158 
        break;
        #line 159 
        case 2: 
                #line 159 
        ;
        #line 160 
        rx_pwr_all = (signed char)(((unsigned int)pout - (unsigned int)vga_idx * 2U) + 245U);
        #line 161 
        break;
        #line 162 
        case 1: 
                #line 162 
        ;
        #line 163 
        rx_pwr_all = (signed char)(((unsigned int)pout - (unsigned int)vga_idx * 2U) + 5U);
        #line 164 
        break;
        #line 165 
        case 0: 
                #line 165 
        ;
        #line 166 
        rx_pwr_all = (signed char)(((unsigned int)pout - (unsigned int)vga_idx * 2U) + 21U);
        #line 167 
        break;
      }
      #line 169 
      pwdb_all = rtl_query_rxpwrpercentage((signed char)((int)rx_pwr_all));
    }
    #line 172 
    pstatus->rx_pwdb_all = (unsigned int)pwdb_all;
    #line 173 
    pstatus->recvsignalpower = (int)rx_pwr_all;
    #line 176 
    if ((int)bpacket_match_bssid != 0) {
      #line 177 
      u8 sq;
      #line 179 
      if (pstatus->rx_pwdb_all > 40U) 
                                      #line 180 
                                      sq = (unsigned char)100U;
      else {
        #line 182 
        sq = p_phystrpt->pwdb_all;
        #line 183 
        if ((unsigned int)sq > 64U) 
                                    #line 184 
                                    sq = (unsigned char)0U;
        else 
          #line 185 
          if ((unsigned int)sq <= 19U) 
                                       #line 186 
                                       sq = (unsigned char)100U; else 
                                                                   #line 188 
                                                                   sq = (unsigned char)(((64 - (int)sq) * 100) / 44);
      }
      #line 191 
      pstatus->signalquality = sq;
      #line 192 
      pstatus->rx_mimo_signalquality[0] = (signed char)sq;
      #line 193 
      pstatus->rx_mimo_signalquality[1] = (signed char)(-1);
    }
  }
  else {
    #line 197 
    i = (unsigned char)0U;
    #line 197 
    while ((unsigned int)i <= 1U) {
      {
        #line 199 
        if ((int)rtlpriv->dm.rfpath_rxenable[(int)i] != 0) 
                                                           #line 200 
                                                           rf_rx_num = (u8)((int)rf_rx_num + 1);
        #line 202 
        rx_pwr[(int)i] = (signed char)(((unsigned int)p_phystrpt->gain_trsw[(int)i] & 127U) + 146U);
        #line 205 
        rssi = (unsigned int)rtl_query_rxpwrpercentage((signed char)((int)rx_pwr[(int)i]));
        #line 206 
        total_rssi += rssi;
        #line 209 
        pstatus->rx_snr[(int)i] = (unsigned char)((int)p_phystrpt->rxsnr[(int)i] / 2);
        #line 210 
        rtlpriv->stats.rx_snr_db[(int)i] = (long)((int)p_phystrpt->rxsnr[(int)i] / 2);
        #line 212 
        pstatus->cfo_short[(int)i] = odm_cfo((signed char)((int)((signed char)p_phystrpt->cfosho[(int)i])));
        #line 213 
        pstatus->cfo_tail[(int)i] = odm_cfo((signed char)((int)p_phystrpt->cfotail[(int)i]));
        #line 215 
        pstatus->rx_mimo_signalstrength[(int)i] = (unsigned char)rssi;
      }
      #line 197 
      i = (u8)((int)i + 1);
    }
    #line 221 
    rx_pwr_all = (signed char)((unsigned int)((int)p_drvinfo->pwdb_all >> 1) + 146U);
    #line 223 
    pwdb_all = rtl_query_rxpwrpercentage((signed char)((int)rx_pwr_all));
    #line 224 
    pstatus->rx_pwdb_all = (unsigned int)pwdb_all;
    #line 225 
    pstatus->rxpower = rx_pwr_all;
    #line 226 
    pstatus->recvsignalpower = (int)rx_pwr_all;
    #line 229 
    if (((int)pstatus->is_ht != 0 && (unsigned int)pstatus->rate > 19U) && (unsigned int)pstatus->rate <= 27U || ((int)pstatus->is_vht != 0 && (unsigned int)pstatus->rate > 53U) && (unsigned int)pstatus->rate <= 63U) 
      #line 234 
      max_spatial_stream = (unsigned char)2U; else 
                                                   #line 236 
                                                   max_spatial_stream = (unsigned char)1U;
    #line 238 
    i = (unsigned char)0U;
    #line 238 
    while ((int)i < (int)max_spatial_stream) {
      #line 239 
      evm = rtl_evm_db_to_percentage((signed char)((int)p_phystrpt->rxevm[(int)i]));
      #line 240 
      evmdbm = _rtl8821ae_evm_dbm_jaguar((signed char)((int)p_phystrpt->rxevm[(int)i]));
      #line 242 
      if ((int)bpacket_match_bssid != 0) {
        #line 246 
        if ((unsigned int)i == 0U) 
                                   #line 247 
                                   pstatus->signalquality = evm;
        #line 248 
        pstatus->rx_mimo_signalquality[(int)i] = (signed char)evm;
        #line 249 
        pstatus->rx_mimo_evm_dbm[(int)i] = evmdbm;
      }
      #line 238 
      i = (u8)((int)i + 1);
    }
    #line 252 
    if ((int)bpacket_match_bssid != 0) {
      #line 253 
      i = (unsigned char)0U;
      #line 253 
      while ((unsigned int)i <= 1U) {
        #line 254 
        ((struct rtl_priv *)hw->priv)->dm.cfo_tail[(int)i] = (int)p_phystrpt->cfotail[(int)i];
        #line 253 
        i = (u8)((int)i + 1);
      }
      #line 257 
      (((struct rtl_priv *)hw->priv)->dm.packet_count) ++;
    }
  }
  #line 264 
  if ((int)is_cck != 0) {
    #line 265 
    pstatus->signalstrength = (unsigned char)rtl_signal_scale_mapping(hw,(long)pwdb_all);
  }
  else 
    #line 267 
    if ((unsigned int)rf_rx_num != 0U) {
      #line 269 
      total_rssi /= (unsigned int)rf_rx_num;
      #line 268 
      ;
      #line 268 
      pstatus->signalstrength = (unsigned char)rtl_signal_scale_mapping(hw,(long)total_rssi);
    }
  #line 271 
  rtldm->fat_table.antsel_rx_keep_0 = (unsigned char)p_phystrpt->antidx_anta;
  #line 272 
  rtldm->fat_table.antsel_rx_keep_1 = (unsigned char)p_phystrpt->antidx_antb;
  #line 273 
  return;
}

#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.c"
static void translate_rx_signal_stuff(struct ieee80211_hw *hw, struct sk_buff *skb, struct rtl_stats *pstatus, __le32 *pdesc, struct rx_fwinfo_8821ae *p_drvinfo)
{
  #line 282 
  struct ieee80211_hdr *hdr;
  #line 283 
  u8 *tmp_buf;
  #line 284 
  u8 *praddr;
  #line 285 
  u8 *psaddr;
  #line 286 
  __le16 fc;
  #line 287 
  bool packet_matchbssid;
  #line 287 
  bool packet_toself;
  #line 287 
  bool packet_beacon;
  #line 297 
  int tmp_5;
  #line 306 
  int tmp_7;
  #line 280 
  struct rtl_mac *mac = & ((struct rtl_priv *)hw->priv)->mac80211;
  #line 281 
  struct rtl_efuse *rtlefuse = & ((struct rtl_priv *)hw->priv)->efuse;
  #line 289 
  tmp_buf = skb->data + ((unsigned long)pstatus->rx_drvinfo_size + (unsigned long)pstatus->rx_bufshift);
  #line 291 
  hdr = (struct ieee80211_hdr *)tmp_buf;
  #line 292 
  fc = hdr->frame_control;
  #line 293 
  praddr = (u8 *)(& hdr->addr1);
  #line 294 
  psaddr = ieee80211_get_SA(hdr);
  #line 295 
  ether_addr_copy((u8 *)(& pstatus->psaddr),psaddr);
  #line 297 
  if (ieee80211_is_ctl((unsigned short)((int)fc))) 
                                                   #line 297 
                                                   tmp_5 = 0;
  else {
    #line 300 
    u8 (*tmp_3)[6U];
    #line 300 
    if ((int)ieee80211_has_tods((unsigned short)((int)fc)) != 0) 
                                                                 #line 300 
                                                                 tmp_3 = & hdr->addr1;
    else {
      #line 300 
      u8 (*tmp_2)[6U];
      #line 300 
      if ((int)ieee80211_has_fromds((unsigned short)((int)fc)) != 0) 
        #line 300 
        tmp_2 = & hdr->addr2; else 
                                   #line 300 
                                   tmp_2 = & hdr->addr3;
      #line 300 
      tmp_3 = tmp_2;
    }
    #line 297 
    ;
    #line 297 
    if ((int)ether_addr_equal((u8 *)(& mac->bssid),(u8 *)tmp_3) != 0) 
      #line 302 
      if ((unsigned int)pstatus->hwerror == 0U) 
        #line 303 
        if ((unsigned int)pstatus->crc == 0U) 
          #line 304 
          if ((unsigned int)pstatus->icv == 0U) 
                                                #line 297 
                                                tmp_5 = 1; else 
                                                                #line 297 
                                                                tmp_5 = 0;
        else 
             #line 297 
             tmp_5 = 0;
      else 
           #line 297 
           tmp_5 = 0;
    else 
         #line 297 
         tmp_5 = 0;
  }
  #line 297 
  packet_matchbssid = (_Bool)(tmp_5 != 0);
  #line 306 
  if ((int)packet_matchbssid != 0) {
    #line 306 
    if ((int)ether_addr_equal(praddr,(u8 *)(& rtlefuse->dev_addr)) != 0) 
      #line 306 
      tmp_7 = 1; else 
                      #line 306 
                      tmp_7 = 0;
  }
  else 
       #line 306 
       tmp_7 = 0;
  #line 306 
  packet_toself = (_Bool)(tmp_7 != 0);
  #line 309 
  if ((int)ieee80211_is_beacon((unsigned short)((int)hdr->frame_control)) != 0) 
    #line 310 
    packet_beacon = (_Bool)1; else 
                                   #line 312 
                                   packet_beacon = (_Bool)0;
  #line 314 
  if ((int)packet_beacon != 0 && (int)packet_matchbssid != 0) 
                                                              #line 315 
                                                              ((struct rtl_priv *)hw->priv)->dm.dbginfo.num_qry_beacon_pkt = (u16)((int)((struct rtl_priv *)hw->priv)->dm.dbginfo.num_qry_beacon_pkt + 1);
  #line 317 
  if ((int)packet_matchbssid != 0) {
    #line 317 
    if ((int)ieee80211_is_data_qos((unsigned short)((int)hdr->frame_control)) != 0) {
      #line 319 
      if (! is_multicast_ether_addr(ieee80211_get_DA(hdr))) {
        #line 320 
        struct ieee80211_qos_hdr *hdr_qos = (struct ieee80211_qos_hdr *)tmp_buf;
        #line 322 
        u16 tid = (unsigned short)((unsigned int)hdr_qos->qos_ctrl & 15U);
        #line 324 
        if ((unsigned int)tid != 0U && (unsigned int)tid != 3U) 
                                                                #line 325 
                                                                ((struct rtl_priv *)hw->priv)->dm.dbginfo.num_non_be_pkt = (u16)((int)((struct rtl_priv *)hw->priv)->dm.dbginfo.num_non_be_pkt + 1);
      }
    }
  }
  #line 328 
  query_rxphystatus(hw,pstatus,pdesc,p_drvinfo,(_Bool)((bool)((int)packet_matchbssid) != 0),(_Bool)((bool)((int)packet_toself) != 0),(_Bool)((bool)((int)packet_beacon) != 0));
  #line 332 
  rtl_process_phyinfo(hw,tmp_buf,pstatus);
  #line 333 
  return;
}

#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.c"
static void rtl8821ae_insert_emcontent(struct rtl_tcb_desc *ptcb_desc, __le32 *virtualaddress)
{
  #line 338 
  u32 dwtmp = 0U;
  #line 340 
  memset((void *)virtualaddress,0,8UL);
  #line 342 
  set_earlymode_pktnum(virtualaddress,(unsigned int)ptcb_desc->empkt_num);
  #line 343 
  if ((unsigned int)ptcb_desc->empkt_num == 1U) 
                                                #line 344 
                                                dwtmp = ptcb_desc->empkt_len[0];
  else {
    #line 347 
    unsigned int tmp;
    #line 346 
    dwtmp = ptcb_desc->empkt_len[0];
    #line 347 
    if ((dwtmp & 3U) != 0U) 
                            #line 347 
                            tmp = 8U - (dwtmp & 3U); else 
                                                          #line 347 
                                                          tmp = 4U;
    #line 347 
    dwtmp = tmp + dwtmp;
    #line 348 
    dwtmp = ptcb_desc->empkt_len[1] + dwtmp;
  }
  #line 350 
  set_earlymode_len0(virtualaddress,dwtmp);
  #line 352 
  if ((unsigned int)ptcb_desc->empkt_num <= 3U) 
                                                #line 353 
                                                dwtmp = ptcb_desc->empkt_len[2];
  else {
    #line 356 
    unsigned int tmp_0;
    #line 355 
    dwtmp = ptcb_desc->empkt_len[2];
    #line 356 
    if ((dwtmp & 3U) != 0U) 
                            #line 356 
                            tmp_0 = 8U - (dwtmp & 3U); else 
                                                            #line 356 
                                                            tmp_0 = 4U;
    #line 356 
    dwtmp = tmp_0 + dwtmp;
    #line 357 
    dwtmp = ptcb_desc->empkt_len[3] + dwtmp;
  }
  #line 359 
  set_earlymode_len1(virtualaddress,dwtmp);
  #line 360 
  if ((unsigned int)ptcb_desc->empkt_num <= 5U) 
                                                #line 361 
                                                dwtmp = ptcb_desc->empkt_len[4];
  else {
    #line 364 
    unsigned int tmp_1;
    #line 363 
    dwtmp = ptcb_desc->empkt_len[4];
    #line 364 
    if ((dwtmp & 3U) != 0U) 
                            #line 364 
                            tmp_1 = 8U - (dwtmp & 3U); else 
                                                            #line 364 
                                                            tmp_1 = 4U;
    #line 364 
    dwtmp = tmp_1 + dwtmp;
    #line 365 
    dwtmp = ptcb_desc->empkt_len[5] + dwtmp;
  }
  #line 367 
  set_earlymode_len2_1(virtualaddress,dwtmp & 15U);
  #line 368 
  set_earlymode_len2_2(virtualaddress,dwtmp >> 4);
  #line 369 
  if ((unsigned int)ptcb_desc->empkt_num <= 7U) 
                                                #line 370 
                                                dwtmp = ptcb_desc->empkt_len[6];
  else {
    #line 373 
    unsigned int tmp_2;
    #line 372 
    dwtmp = ptcb_desc->empkt_len[6];
    #line 373 
    if ((dwtmp & 3U) != 0U) 
                            #line 373 
                            tmp_2 = 8U - (dwtmp & 3U); else 
                                                            #line 373 
                                                            tmp_2 = 4U;
    #line 373 
    dwtmp = tmp_2 + dwtmp;
    #line 374 
    dwtmp = ptcb_desc->empkt_len[7] + dwtmp;
  }
  #line 376 
  set_earlymode_len3(virtualaddress,dwtmp);
  #line 377 
  if ((unsigned int)ptcb_desc->empkt_num <= 9U) 
                                                #line 378 
                                                dwtmp = ptcb_desc->empkt_len[8];
  else {
    #line 381 
    unsigned int tmp_3;
    #line 380 
    dwtmp = ptcb_desc->empkt_len[8];
    #line 381 
    if ((dwtmp & 3U) != 0U) 
                            #line 381 
                            tmp_3 = 8U - (dwtmp & 3U); else 
                                                            #line 381 
                                                            tmp_3 = 4U;
    #line 381 
    dwtmp = tmp_3 + dwtmp;
    #line 382 
    dwtmp = ptcb_desc->empkt_len[9] + dwtmp;
  }
  #line 384 
  set_earlymode_len4(virtualaddress,dwtmp);
  #line 385 
  return;
}

#line 387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.c"
static bool rtl8821ae_get_rxdesc_is_ht(struct ieee80211_hw *hw, __le32 *pdesc)
{
  #line 389 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 390 
  u8 rx_rate = (unsigned char)0U;
  #line 392 
  rx_rate = (unsigned char)get_rx_desc_rxmcs(pdesc);
  #line 394 
  _rtl_dbg_trace(rtlpriv,4096ULL,4,(char *)"rx_rate=0x%02x.\n",(int)rx_rate);
  #line 396 
  if ((unsigned int)rx_rate + 244U <= 15U) 
                                           #line 397 
                                           return (_Bool)1;
  #line 398 
  return (_Bool)0;
}

#line 401  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.c"
static bool rtl8821ae_get_rxdesc_is_vht(struct ieee80211_hw *hw, __le32 *pdesc)
{
  #line 403 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 404 
  u8 rx_rate = (unsigned char)0U;
  #line 406 
  rx_rate = (unsigned char)get_rx_desc_rxmcs(pdesc);
  #line 408 
  _rtl_dbg_trace(rtlpriv,4096ULL,4,(char *)"rx_rate=0x%02x.\n",(int)rx_rate);
  #line 410 
  if ((unsigned int)rx_rate > 43U) 
                                   #line 411 
                                   return (_Bool)1;
  #line 412 
  return (_Bool)0;
}

#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.c"
static u8 rtl8821ae_get_rx_vht_nss(struct ieee80211_hw *hw, __le32 *pdesc)
{
  #line 417 
  u8 rx_rate = (unsigned char)0U;
  #line 418 
  u8 vht_nss = (unsigned char)0U;
  #line 420 
  rx_rate = (unsigned char)get_rx_desc_rxmcs(pdesc);
  #line 421 
  if ((unsigned int)rx_rate + 212U <= 9U) 
                                          #line 423 
                                          vht_nss = (unsigned char)1U;
  else 
    #line 424 
    if ((unsigned int)rx_rate + 202U <= 9U) 
                                            #line 426 
                                            vht_nss = (unsigned char)2U;
  #line 428 
  return vht_nss;
}

#line 431  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.c"
bool rtl8821ae_rx_query_desc(struct ieee80211_hw *hw, struct rtl_stats *status, struct ieee80211_rx_status *rx_status, u8 *pdesc8, struct sk_buff *skb)
{
  #line 464 
  char *tmp_13;
  #line 437 
  struct rx_fwinfo_8821ae *p_drvinfo;
  #line 438 
  struct ieee80211_hdr *hdr;
  #line 439 
  u8 wake_match;
  #line 464 
  char *tmp_14;
  #line 436 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 440 
  __le32 *pdesc = (__le32 *)pdesc8;
  #line 441 
  u32 phystatus = (unsigned int)get_rx_desc_physt(pdesc);
  #line 443 
  status->length = (unsigned short)get_rx_desc_pkt_len(pdesc);
  #line 444 
  status->rx_drvinfo_size = (unsigned char)((unsigned int)((unsigned char)get_rx_desc_drv_info_size(pdesc)) * 8U);
  #line 446 
  status->rx_bufshift = (unsigned char)((unsigned int)((unsigned char)get_rx_desc_shift(pdesc)) & 3U);
  #line 447 
  status->icv = (unsigned short)get_rx_desc_icv(pdesc);
  #line 448 
  status->crc = (unsigned short)get_rx_desc_crc32(pdesc);
  #line 449 
  status->hwerror = (unsigned short)((int)status->crc | (int)status->icv);
  #line 450 
  status->decrypted = (unsigned short)(get_rx_desc_swdec(pdesc) == 0);
  #line 451 
  status->rate = (unsigned char)get_rx_desc_rxmcs(pdesc);
  #line 452 
  status->shortpreamble = (unsigned short)get_rx_desc_splcp(pdesc);
  #line 453 
  status->isampdu = (_Bool)(get_rx_desc_paggr(pdesc) == 1);
  #line 454 
  status->isfirst_ampdu = (_Bool)(get_rx_desc_paggr(pdesc) == 1);
  #line 455 
  status->timestamp_low = get_rx_desc_tsfl(pdesc);
  #line 456 
  status->rx_packet_bw = (unsigned char)get_rx_desc_bw(pdesc);
  #line 457 
  status->macid = (unsigned int)get_rx_desc_macid(pdesc);
  #line 458 
  status->is_short_gi = (_Bool)(get_rx_desc_splcp(pdesc) == 0);
  #line 459 
  status->is_ht = rtl8821ae_get_rxdesc_is_ht(hw,pdesc);
  #line 460 
  status->is_vht = rtl8821ae_get_rxdesc_is_vht(hw,pdesc);
  #line 461 
  status->vht_nss = rtl8821ae_get_rx_vht_nss(hw,pdesc);
  #line 462 
  status->is_cck = (_Bool)((unsigned int)status->rate <= 3U);
  #line 464 
  ;
  #line 464 
  ;
  #line 464 
  ;
  #line 464 
  ;
  #line 464 
  if ((unsigned int)status->rx_packet_bw != 2U) {
    #line 464 
    if ((unsigned int)status->rx_packet_bw == 1U) 
                                                  #line 464 
                                                  tmp_13 = (char *)"40M"; else 
                                                                    #line 464 
                                                                    tmp_13 = (char *)"20M";
    #line 464 
    tmp_14 = tmp_13;
  }
  else 
       #line 464 
       tmp_14 = (char *)"80M";
  #line 464 
  ;
  #line 464 
  _rtl_dbg_trace(rtlpriv,4096ULL,4,(char *)"rx_packet_bw=%s,is_ht %d, is_vht %d, vht_nss=%d,is_short_gi %d.\n",tmp_14,(int)status->is_ht,(int)status->is_vht,(int)status->vht_nss,(int)status->is_short_gi);
  #line 471 
  if (get_rx_status_desc_rpt_sel(pdesc) != 0) 
                                              #line 472 
                                              status->packet_report_type = (unsigned char)4U; else 
                                                                    #line 474 
                                                                    status->packet_report_type = (unsigned char)0U;
  #line 476 
  if (get_rx_status_desc_pattern_match(pdesc) != 0) 
                                                    #line 477 
                                                    wake_match = (unsigned char)4U;
  else {
    #line 478 
    if (get_rx_status_desc_magic_match(pdesc) != 0) 
                                                    #line 479 
                                                    wake_match = (unsigned char)2U;
    else {
      #line 480 
      if (get_rx_status_desc_unicast_match(pdesc) != 0) 
                                                        #line 481 
                                                        wake_match = (unsigned char)1U; else 
                                                                    #line 483 
                                                                    wake_match = (unsigned char)0U;
    }
  }
  #line 485 
  if ((unsigned int)wake_match != 0U) 
                                      #line 486 
                                      _rtl_dbg_trace(rtlpriv,4096ULL,4,(char *)"GGGGGGGGGGGGGet Wakeup Packet!! WakeMatch=%d\n",(int)wake_match);
  #line 489 
  rx_status->freq = (unsigned short)(hw->conf.chandef.chan)->center_freq;
  #line 490 
  rx_status->band = (unsigned char)(hw->conf.chandef.chan)->band;
  #line 492 
  hdr = (struct ieee80211_hdr *)(skb->data + ((unsigned long)status->rx_drvinfo_size + (unsigned long)status->rx_bufshift));
  #line 495 
  if ((unsigned int)status->crc != 0U) 
                                       #line 496 
                                       rx_status->flag |= 32U;
  #line 498 
  if ((unsigned int)status->rx_packet_bw == 1U) 
                                                #line 499 
                                                rx_status->bw = (unsigned char)3U;
  else 
    #line 500 
    if ((unsigned int)status->rx_packet_bw == 2U) 
                                                  #line 501 
                                                  rx_status->bw = (unsigned char)4U;
  #line 502 
  if ((int)status->is_ht != 0) 
                               #line 503 
                               rx_status->encoding = (unsigned char)1U;
  #line 504 
  if ((int)status->is_vht != 0) 
                                #line 505 
                                rx_status->encoding = (unsigned char)2U;
  #line 507 
  if ((int)status->is_short_gi != 0) 
                                     #line 508 
                                     rx_status->enc_flags = (unsigned char)((unsigned int)rx_status->enc_flags | 4U);
  #line 510 
  rx_status->nss = status->vht_nss;
  #line 511 
  rx_status->flag |= 128U;
  #line 521 
  if ((unsigned int)status->decrypted != 0U) {
    #line 522 
    if (_ieee80211_is_robust_mgmt_frame(hdr)) 
                                              #line 526 
                                              rx_status->flag &= 4294967293U;
    else {
      #line 522 
      if ((int)ieee80211_has_protected((unsigned short)((int)hdr->frame_control)) != 0) 
        #line 524 
        rx_status->flag |= 2U; else 
                                    #line 526 
                                    rx_status->flag &= 4294967293U;
    }
  }
  #line 533 
  rx_status->rate_idx = (unsigned char)rtlwifi_rate_mapping(hw,(_Bool)((bool)((int)status->is_ht) != 0),
                              (_Bool)((bool)((int)status->is_vht) != 0),
                              (unsigned char)((int)status->rate));
  #line 537 
  rx_status->mactime = (unsigned long long)status->timestamp_low;
  #line 538 
  if (phystatus != 0U) {
    #line 539 
    p_drvinfo = (struct rx_fwinfo_8821ae *)(skb->data + (unsigned long)status->rx_bufshift);
    #line 542 
    translate_rx_signal_stuff(hw,skb,status,pdesc,p_drvinfo);
  }
  #line 544 
  rx_status->signal = (signed char)((unsigned int)status->recvsignalpower + 10U);
  #line 545 
  if ((unsigned int)status->packet_report_type == 2U) {
    #line 546 
    status->macid_valid_entry[0] = get_rx_rpt2_desc_macid_valid_1(pdesc);
    #line 548 
    status->macid_valid_entry[1] = get_rx_desc_tsfl(pdesc);
  }
  #line 551 
  return (_Bool)1;
}

#line 554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.c"
static u8 rtl8821ae_bw_mapping(struct ieee80211_hw *hw, struct rtl_tcb_desc *ptcb_desc)
{
  #line 557 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 558 
  struct rtl_phy *rtlphy = & rtlpriv->phy;
  #line 559 
  u8 bw_setting_of_desc = (unsigned char)0U;
  #line 561 
  _rtl_dbg_trace(rtlpriv,16ULL,5,(char *)"rtl8821ae_bw_mapping, current_chan_bw %d, packet_bw %d\n",(int)rtlphy->current_chan_bw,(int)ptcb_desc->packet_bw);
  #line 565 
  if ((unsigned int)rtlphy->current_chan_bw == 2U) 
    #line 566 
    if ((unsigned int)ptcb_desc->packet_bw == 2U) 
                                                  #line 567 
                                                  bw_setting_of_desc = (unsigned char)2U;
    else 
      #line 568 
      if ((unsigned int)ptcb_desc->packet_bw == 1U) 
                                                    #line 569 
                                                    bw_setting_of_desc = (unsigned char)1U; else 
                                                                    #line 571 
                                                                    bw_setting_of_desc = (unsigned char)0U;
  else 
    #line 572 
    if ((unsigned int)rtlphy->current_chan_bw == 1U) 
      #line 573 
      if ((unsigned int)ptcb_desc->packet_bw + 3U <= 1U) 
                                                         #line 575 
                                                         bw_setting_of_desc = (unsigned char)1U; else 
                                                                    #line 577 
                                                                    bw_setting_of_desc = (unsigned char)0U;
    else 
         #line 579 
         bw_setting_of_desc = (unsigned char)0U;
  #line 581 
  return bw_setting_of_desc;
}

#line 584  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.c"
static u8 rtl8821ae_sc_mapping(struct ieee80211_hw *hw, struct rtl_tcb_desc *ptcb_desc)
{
  #line 587 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 588 
  struct rtl_phy *rtlphy = & rtlpriv->phy;
  #line 589 
  struct rtl_mac *mac = & rtlpriv->mac80211;
  #line 590 
  u8 sc_setting_of_desc = (unsigned char)0U;
  #line 592 
  if ((unsigned int)rtlphy->current_chan_bw == 2U) 
    #line 593 
    if ((unsigned int)ptcb_desc->packet_bw == 2U) 
                                                  #line 594 
                                                  sc_setting_of_desc = (unsigned char)0U;
    else 
      #line 595 
      if ((unsigned int)ptcb_desc->packet_bw == 1U) 
        #line 596 
        if ((unsigned int)mac->cur_80_prime_sc == 1U) 
                                                      #line 598 
                                                      sc_setting_of_desc = (unsigned char)10U;
        else 
          #line 600 
          if ((unsigned int)mac->cur_80_prime_sc == 2U) 
                                                        #line 602 
                                                        sc_setting_of_desc = (unsigned char)9U; else 
                                                                    #line 605 
                                                                    _rtl_dbg_trace(rtlpriv,16ULL,4,(char *)"rtl8821ae_sc_mapping: Not Correct Primary40MHz Setting\n");
      else 
        #line 608 
        if ((unsigned int)mac->cur_40_prime_sc == 1U && (unsigned int)mac->cur_80_prime_sc == 1U) 
          #line 612 
          sc_setting_of_desc = (unsigned char)4U;
        else 
          #line 614 
          if ((unsigned int)mac->cur_40_prime_sc == 2U && (unsigned int)mac->cur_80_prime_sc == 1U) 
            #line 618 
            sc_setting_of_desc = (unsigned char)2U;
          else 
            #line 620 
            if ((unsigned int)mac->cur_40_prime_sc == 1U && (unsigned int)mac->cur_80_prime_sc == 2U) 
              #line 624 
              sc_setting_of_desc = (unsigned char)1U;
            else 
              #line 626 
              if ((unsigned int)mac->cur_40_prime_sc == 2U && (unsigned int)mac->cur_80_prime_sc == 2U) 
                #line 630 
                sc_setting_of_desc = (unsigned char)3U; else 
                                                             #line 633 
                                                             _rtl_dbg_trace(rtlpriv,16ULL,4,(char *)"rtl8821ae_sc_mapping: Not Correct Primary40MHz Setting\n");
  else 
    #line 636 
    if ((unsigned int)rtlphy->current_chan_bw == 1U) {
      #line 637 
      if ((unsigned int)ptcb_desc->packet_bw == 1U) 
                                                    #line 638 
                                                    sc_setting_of_desc = (unsigned char)0U;
      else 
        #line 639 
        if ((unsigned int)ptcb_desc->packet_bw == 0U) 
          #line 640 
          if ((unsigned int)mac->cur_40_prime_sc == 2U) 
                                                        #line 642 
                                                        sc_setting_of_desc = (unsigned char)1U;
          else 
            #line 644 
            if ((unsigned int)mac->cur_40_prime_sc == 1U) 
                                                          #line 646 
                                                          sc_setting_of_desc = (unsigned char)2U; else 
                                                                    #line 649 
                                                                    sc_setting_of_desc = (unsigned char)0U;
    }
    else 
         #line 653 
         sc_setting_of_desc = (unsigned char)0U;
  #line 656 
  return sc_setting_of_desc;
}

#line 659  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.c"
void rtl8821ae_tx_fill_desc(struct ieee80211_hw *hw, struct ieee80211_hdr *hdr, u8 *pdesc8, u8 *txbd, struct ieee80211_tx_info *info, struct ieee80211_sta *sta, struct sk_buff *skb, u8 hw_queue, struct rtl_tcb_desc *ptcb_desc)
{
  #line 671 
  u16 seq_number;
  #line 680 
  dma_addr_t mapping;
  #line 682 
  bool tmp_bool;
  #line 666 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 667 
  struct rtl_mac *mac = & ((struct rtl_priv *)hw->priv)->mac80211;
  #line 668 
  struct rtl_pci *rtlpci = & ((struct rtl_pci_priv *)(& ((struct rtl_priv *)hw->priv)->priv))->dev;
  #line 669 
  struct rtl_hal *rtlhal = & rtlpriv->rtlhal;
  #line 670 
  struct rtlwifi_tx_info *tx_info = rtl_tx_skb_cb_info(skb);
  #line 672 
  __le16 fc = hdr->frame_control;
  #line 673 
  unsigned int buf_len = 0U;
  #line 674 
  unsigned int skb_len = skb->len;
  #line 675 
  u8 fw_qsel = _rtl8821ae_map_hwqueue_to_fwqueue(skb,(unsigned char)((int)hw_queue));
  #line 676 
  bool firstseg = (_Bool)(((int)hdr->seq_ctrl & 15) == 0);
  #line 678 
  bool lastseg = (_Bool)(((int)hdr->frame_control & 1024) == 0);
  #line 681 
  u8 short_gi = (unsigned char)0U;
  #line 683 
  __le32 *pdesc = (__le32 *)pdesc8;
  #line 685 
  seq_number = (unsigned short)((int)hdr->seq_ctrl >> 4);
  #line 686 
  rtl_get_tcb_desc(hw,info,sta,skb,ptcb_desc);
  #line 688 
  if ((int)rtlhal->earlymode_enable != 0) {
    #line 689 
    skb_push(skb,8U);
    #line 690 
    memset((void *)skb->data,0,8UL);
  }
  #line 692 
  buf_len = skb->len;
  #line 693 
  mapping = pci_map_single(rtlpci->pdev,(void *)skb->data,(unsigned long)skb->len,1);
  #line 695 
  if (pci_dma_mapping_error(rtlpci->pdev,mapping) != 0) {
    #line 696 
    _rtl_dbg_trace(rtlpriv,16ULL,5,(char *)"DMA mapping error\n");
    #line 698 
    return;
  }
  #line 700 
  clear_pci_tx_desc_content(pdesc,64);
  #line 701 
  if ((int)ieee80211_is_nullfunc((unsigned short)((int)fc)) != 0) 
                                                                  #line 701 
                                                                  goto _LOR;
  else {
    #line 701 
    if ((int)ieee80211_is_ctl((unsigned short)((int)fc)) != 0) {
      #line 701 
      _LOR: {
              #line 702 
              firstseg = (_Bool)1;
              #line 703 
              lastseg = (_Bool)1;
            }
    }
  }
  #line 705 
  if ((int)firstseg != 0) {
    #line 706 
    if ((int)rtlhal->earlymode_enable != 0) {
      #line 707 
      set_tx_desc_pkt_offset(pdesc,1U);
      #line 708 
      set_tx_desc_offset(pdesc,48U);
      #line 710 
      if ((unsigned int)ptcb_desc->empkt_num != 0U) {
        #line 711 
        _rtl_dbg_trace(rtlpriv,16ULL,5,(char *)"Insert 8 byte.pTcb->EMPktNum:%d\n",(int)ptcb_desc->empkt_num);
        #line 714 
        rtl8821ae_insert_emcontent(ptcb_desc,(__le32 *)skb->data);
      }
    }
    else 
         #line 718 
         set_tx_desc_offset(pdesc,40U);
    #line 723 
    set_tx_desc_tx_rate(pdesc,(unsigned int)ptcb_desc->hw_rate);
    #line 724 
    if ((unsigned int)ptcb_desc->hw_rate > 12U) 
                                                #line 725 
                                                short_gi = (unsigned char)((unsigned int)ptcb_desc->use_shortgi != 0U); else 
                                                                    #line 727 
                                                                    short_gi = (unsigned char)((unsigned int)ptcb_desc->use_shortpreamble != 0U);
    #line 729 
    set_tx_desc_data_shortgi(pdesc,(unsigned int)short_gi);
    #line 731 
    if ((info->flags & 64U) != 0U) {
      #line 732 
      set_tx_desc_agg_enable(pdesc,1U);
      #line 733 
      set_tx_desc_max_agg_num(pdesc,31U);
    }
    #line 735 
    set_tx_desc_seq(pdesc,(unsigned int)seq_number);
    #line 736 
    set_tx_desc_rts_enable(pdesc,(unsigned int)(((unsigned int)ptcb_desc->rts_enable != 0U && (unsigned int)ptcb_desc->cts_enable == 0U) != 0));
    #line 739 
    set_tx_desc_hw_rts_enable(pdesc,0U);
    #line 740 
    set_tx_desc_cts2self(pdesc,(unsigned int)((unsigned int)ptcb_desc->cts_enable != 0U));
    #line 742 
    set_tx_desc_rts_rate(pdesc,(unsigned int)ptcb_desc->rts_rate);
    #line 743 
    set_tx_desc_rts_sc(pdesc,(unsigned int)ptcb_desc->rts_sc);
    #line 744 
    if ((unsigned int)ptcb_desc->rts_rate <= 11U) 
                                                  #line 744 
                                                  tmp_bool = (_Bool)((unsigned int)ptcb_desc->rts_use_shortpreamble != 0U); else 
                                                                    #line 744 
                                                                    tmp_bool = (_Bool)((unsigned int)ptcb_desc->rts_use_shortgi != 0U);
    #line 747 
    set_tx_desc_rts_short(pdesc,(unsigned int)tmp_bool);
    #line 749 
    if ((int)ptcb_desc->tx_enable_sw_calc_duration != 0) 
                                                         #line 750 
                                                         set_tx_desc_nav_use_hdr(pdesc,1U);
    #line 752 
    ;
    #line 752 
    set_tx_desc_data_bw(pdesc,(unsigned int)rtl8821ae_bw_mapping(hw,ptcb_desc));
    #line 755 
    ;
    #line 755 
    set_tx_desc_tx_sub_carrier(pdesc,(unsigned int)rtl8821ae_sc_mapping(hw,ptcb_desc));
    #line 758 
    set_tx_desc_linip(pdesc,0U);
    #line 759 
    set_tx_desc_pkt_size(pdesc,(unsigned int)((unsigned short)skb_len));
    #line 760 
    if (sta != (struct ieee80211_sta *)0) {
      #line 761 
      u8 ampdu_density = sta->ht_cap.ampdu_density;
      #line 763 
      set_tx_desc_ampdu_density(pdesc,(unsigned int)ampdu_density);
    }
    #line 765 
    if (info->__anonCompField_ieee80211_tx_info_195.control.hw_key != (struct ieee80211_key_conf *)0) {
      #line 766 
      struct ieee80211_key_conf *keyconf = info->__anonCompField_ieee80211_tx_info_195.control.hw_key;
      #line 768 
      switch (keyconf->cipher) {
        #line 769 
        case (u32)1027073: 
                           #line 769 
        ;
        #line 770 
        case (u32)1027077: 
                           #line 770 
        ;
        #line 771 
        case (u32)1027074: 
                           #line 771 
        ;
        #line 772 
        set_tx_desc_sec_type(pdesc,1U);
        #line 773 
        break;
        #line 774 
        case (u32)1027076: 
                           #line 774 
        ;
        #line 775 
        set_tx_desc_sec_type(pdesc,3U);
        #line 776 
        break;
        #line 777 
        default: 
                 #line 777 
        ;
        #line 778 
        set_tx_desc_sec_type(pdesc,0U);
        #line 779 
        break;
      }
    }
    #line 783 
    set_tx_desc_queue_sel(pdesc,(unsigned int)fw_qsel);
    #line 784 
    set_tx_desc_data_rate_fb_limit(pdesc,31U);
    #line 785 
    set_tx_desc_rts_rate_fb_limit(pdesc,15U);
    #line 786 
    set_tx_desc_disable_fb(pdesc,(unsigned int)((unsigned int)ptcb_desc->disable_ratefallback != 0U));
    #line 788 
    set_tx_desc_use_rate(pdesc,(unsigned int)((unsigned int)ptcb_desc->use_driver_rate != 0U));
    #line 790 
    if ((int)ieee80211_is_data_qos((unsigned short)((int)fc)) != 0) 
      #line 791 
      if ((int)mac->rdg_en != 0) {
        #line 792 
        _rtl_dbg_trace(rtlpriv,16ULL,5,(char *)"Enable RDG function.\n");
        #line 794 
        set_tx_desc_rdg_enable(pdesc,1U);
        #line 795 
        set_tx_desc_htc(pdesc,1U);
      }
    #line 799 
    rtl_set_tx_report(ptcb_desc,pdesc8,hw,tx_info);
  }
  #line 802 
  set_tx_desc_first_seg(pdesc,(unsigned int)((int)firstseg != 0));
  #line 803 
  set_tx_desc_last_seg(pdesc,(unsigned int)((int)lastseg != 0));
  #line 804 
  set_tx_desc_tx_buffer_size(pdesc,buf_len);
  #line 805 
  set_tx_desc_tx_buffer_address(pdesc,(unsigned int)mapping);
  #line 808 
  set_tx_desc_rate_id(pdesc,(unsigned int)ptcb_desc->ratr_index);
  #line 809 
  set_tx_desc_macid(pdesc,(unsigned int)ptcb_desc->mac_id);
  #line 814 
  if (! ieee80211_is_data_qos((unsigned short)((int)fc))) {
    #line 815 
    set_tx_desc_hwseq_en(pdesc,1U);
    #line 816 
    set_tx_desc_hwseq_sel(pdesc,0U);
  }
  #line 818 
  set_tx_desc_more_frag(pdesc,(unsigned int)(! lastseg));
  #line 819 
  if ((int)is_multicast_ether_addr(ieee80211_get_DA(hdr)) != 0) 
                                                                #line 821 
                                                                set_tx_desc_bmc(pdesc,1U);
  else {
    #line 819 
    if ((int)is_broadcast_ether_addr(ieee80211_get_DA(hdr)) != 0) 
                                                                  #line 821 
                                                                  set_tx_desc_bmc(pdesc,1U);
  }
  #line 824 
  rtl8821ae_dm_set_tx_ant_by_tx_info(hw,pdesc8,(unsigned int)ptcb_desc->mac_id);
  #line 825 
  _rtl_dbg_trace(rtlpriv,16ULL,5,(char *)"\n");
  #line 826 
  return;
}

#line 828  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.c"
void rtl8821ae_tx_fill_cmddesc(struct ieee80211_hw *hw, u8 *pdesc8, bool firstseg, bool lastseg, struct sk_buff *skb)
{
  #line 832 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 833 
  struct rtl_pci *rtlpci = & ((struct rtl_pci_priv *)(& ((struct rtl_priv *)hw->priv)->priv))->dev;
  #line 834 
  u8 fw_queue = (unsigned char)16U;
  #line 835 
  __le32 *pdesc = (__le32 *)pdesc8;
  #line 837 
  dma_addr_t mapping = pci_map_single(rtlpci->pdev,(void *)skb->data,(unsigned long)skb->len,1);
  #line 841 
  if (pci_dma_mapping_error(rtlpci->pdev,mapping) != 0) {
    #line 842 
    _rtl_dbg_trace(rtlpriv,16ULL,5,(char *)"DMA mapping error\n");
    #line 844 
    return;
  }
  #line 846 
  clear_pci_tx_desc_content(pdesc,40);
  #line 848 
  set_tx_desc_first_seg(pdesc,1U);
  #line 849 
  set_tx_desc_last_seg(pdesc,1U);
  #line 851 
  set_tx_desc_pkt_size(pdesc,(unsigned int)((unsigned short)skb->len));
  #line 853 
  set_tx_desc_offset(pdesc,40U);
  #line 855 
  set_tx_desc_use_rate(pdesc,1U);
  #line 856 
  set_tx_desc_tx_rate(pdesc,0U);
  #line 857 
  set_tx_desc_disable_fb(pdesc,1U);
  #line 859 
  set_tx_desc_data_bw(pdesc,0U);
  #line 861 
  set_tx_desc_hwseq_en(pdesc,1U);
  #line 863 
  set_tx_desc_queue_sel(pdesc,(unsigned int)fw_queue);
  #line 865 
  set_tx_desc_tx_buffer_size(pdesc,skb->len);
  #line 867 
  set_tx_desc_tx_buffer_address(pdesc,(unsigned int)mapping);
  #line 869 
  set_tx_desc_macid(pdesc,0U);
  #line 871 
  set_tx_desc_own(pdesc,1U);
  #line 873 
  _rtl_dbg_print_data(rtlpriv,8388608ULL,4,(char *)"H2C Tx Cmd Content\n",(void *)pdesc8,40);
  #line 874 
  return;
}

#line 878  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.c"
void rtl8821ae_set_desc(struct ieee80211_hw *hw, u8 *pdesc8, bool istx, u8 desc_name, u8 *val)
{
  #line 881 
  __le32 *pdesc = (__le32 *)pdesc8;
  #line 883 
  if ((int)istx != 0) 
    #line 884 
    switch ((int)desc_name) {
      #line 885 
      case 0: 
              #line 885 
      ;
      #line 886 
      set_tx_desc_own(pdesc,1U);
      #line 887 
      break;
      #line 888 
      case 2: 
              #line 888 
      ;
      #line 889 
      set_tx_desc_next_desc_address(pdesc,*((u32 *)val));
      #line 890 
      break;
      #line 891 
      default: 
               #line 891 
      ;
      {
        #line 892 
        bool __warned;
        #line 892 
        int __ret_warn_once = 1;
        #line 892 
        if ((long)(__ret_warn_once != 0) != 0L && (long)(! __warned) != 0L) {
          #line 892 
          __warned = (_Bool)1;
          {
            #line 892 
            int __ret_warn_on = 1;
            #line 892 
            if ((long)(__ret_warn_on != 0) != 0L) {
              #line 892 
              __warn_printk((char *)"rtl8821ae: ERR txdesc :%d not processed\n",(int)desc_name);
              #line 893 
              ldv_inline_asm();
              #line 894 
              ldv_inline_asm();
            }
            #line 892 
            long tmp = (long)(__ret_warn_on != 0);
          }
        }
        #line 892 
        long tmp_3 = (long)(__ret_warn_once != 0);
      }
      #line 895 
      break;
    }
  else 
    #line 898 
    switch ((int)desc_name) {
      #line 899 
      case 1: 
              #line 899 
      ;
      #line 900 
      set_tx_desc_own(pdesc,1U);
      #line 901 
      break;
      #line 902 
      case 4: 
              #line 902 
      ;
      #line 903 
      set_rx_desc_buff_addr(pdesc,*((u32 *)val));
      #line 904 
      break;
      #line 905 
      case 5: 
              #line 905 
      ;
      #line 906 
      set_rx_desc_pkt_len(pdesc,*((u32 *)val));
      #line 907 
      break;
      #line 908 
      case 6: 
              #line 908 
      ;
      #line 909 
      set_rx_desc_eor(pdesc,1U);
      #line 910 
      break;
      #line 911 
      default: 
               #line 911 
      ;
      {
        #line 912 
        bool __warned_0;
        #line 912 
        int __ret_warn_once_0 = 1;
        #line 912 
        if ((long)(__ret_warn_once_0 != 0) != 0L && (long)(! __warned_0) != 0L) {
          #line 912 
          __warned_0 = (_Bool)1;
          {
            #line 912 
            int __ret_warn_on_0 = 1;
            #line 912 
            if ((long)(__ret_warn_on_0 != 0) != 0L) {
              #line 912 
              __warn_printk((char *)"rtl8821ae: ERR rxdesc :%d not processed\n",(int)desc_name);
              #line 913 
              ldv_inline_asm();
              #line 914 
              ldv_inline_asm();
            }
            #line 912 
            long tmp_5 = (long)(__ret_warn_on_0 != 0);
          }
        }
        #line 912 
        long tmp_7 = (long)(__ret_warn_once_0 != 0);
      }
      #line 915 
      break;
    }
  #line 917 
  return;
}

#line 920  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.c"
u64 rtl8821ae_get_desc(struct ieee80211_hw *hw, u8 *pdesc8, bool istx, u8 desc_name)
{
  #line 923 
  u32 ret = 0U;
  #line 924 
  __le32 *pdesc = (__le32 *)pdesc8;
  #line 926 
  if ((int)istx != 0) 
    #line 927 
    switch ((int)desc_name) {
      #line 928 
      case 0: 
              #line 928 
      ;
      #line 929 
      ret = (unsigned int)get_tx_desc_own(pdesc);
      #line 930 
      break;
      #line 931 
      case 3: 
              #line 931 
      ;
      #line 932 
      ret = get_tx_desc_tx_buffer_address(pdesc);
      #line 933 
      break;
      #line 934 
      default: 
               #line 934 
      ;
      {
        #line 935 
        bool __warned;
        #line 935 
        int __ret_warn_once = 1;
        #line 935 
        if ((long)(__ret_warn_once != 0) != 0L && (long)(! __warned) != 0L) {
          #line 935 
          __warned = (_Bool)1;
          {
            #line 935 
            int __ret_warn_on = 1;
            #line 935 
            if ((long)(__ret_warn_on != 0) != 0L) {
              #line 935 
              __warn_printk((char *)"rtl8821ae: ERR txdesc :%d not processed\n",(int)desc_name);
              #line 936 
              ldv_inline_asm();
              #line 937 
              ldv_inline_asm();
            }
            #line 935 
            long tmp_2 = (long)(__ret_warn_on != 0);
          }
        }
        #line 935 
        long tmp_4 = (long)(__ret_warn_once != 0);
      }
      #line 938 
      break;
    }
  else 
    #line 941 
    switch ((int)desc_name) {
      #line 942 
      case 0: 
              #line 942 
      ;
      #line 943 
      ret = (unsigned int)get_tx_desc_own(pdesc);
      #line 944 
      break;
      #line 945 
      case 5: 
              #line 945 
      ;
      #line 946 
      ret = (unsigned int)get_rx_desc_pkt_len(pdesc);
      #line 947 
      break;
      #line 948 
      case 4: 
              #line 948 
      ;
      #line 949 
      ret = get_rx_desc_buff_addr(pdesc);
      #line 950 
      break;
      #line 951 
      default: 
               #line 951 
      ;
      {
        #line 952 
        bool __warned_0;
        #line 952 
        int __ret_warn_once_0 = 1;
        #line 952 
        if ((long)(__ret_warn_once_0 != 0) != 0L && (long)(! __warned_0) != 0L) {
          #line 952 
          __warned_0 = (_Bool)1;
          {
            #line 952 
            int __ret_warn_on_0 = 1;
            #line 952 
            if ((long)(__ret_warn_on_0 != 0) != 0L) {
              #line 952 
              __warn_printk((char *)"rtl8821ae: ERR rxdesc :%d not processed\n",(int)desc_name);
              #line 953 
              ldv_inline_asm();
              #line 954 
              ldv_inline_asm();
            }
            #line 952 
            long tmp_6 = (long)(__ret_warn_on_0 != 0);
          }
        }
        #line 952 
        long tmp_8 = (long)(__ret_warn_once_0 != 0);
      }
      #line 955 
      break;
    }
  #line 958 
  return (unsigned long long)ret;
}

#line 961  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.c"
bool rtl8821ae_is_tx_desc_closed(struct ieee80211_hw *hw, u8 hw_queue, u16 index)
{
  #line 964 
  struct rtl_pci *rtlpci = & ((struct rtl_pci_priv *)(& ((struct rtl_priv *)hw->priv)->priv))->dev;
  #line 965 
  struct rtl8192_tx_ring *ring = & rtlpci->tx_ring[(int)hw_queue];
  #line 966 
  u8 *entry = (u8 *)(ring->desc + (unsigned long)ring->idx);
  #line 967 
  u8 own = (unsigned char)rtl8821ae_get_desc(hw,entry,(_Bool)1,(unsigned char)0);
  #line 974 
  if ((unsigned int)own != 0U) 
                               #line 975 
                               return (_Bool)0;
  #line 976 
  return (_Bool)1;
}

#line 979  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.c"
void rtl8821ae_tx_polling(struct ieee80211_hw *hw, u8 hw_queue)
{
  #line 981 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 983 
  if ((unsigned int)hw_queue == 4U) 
                                    #line 984 
                                    rtl_write_word(rtlpriv,768U,(unsigned short)16); else 
                                                                    #line 986 
                                                                    rtl_write_word(rtlpriv,768U,(unsigned short)((int)((unsigned short)(1UL << (int)hw_queue))));
  #line 988 
  return;
}

#line 3090  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
__inline static u8 rtl_read_byte(struct rtl_priv *rtlpriv, u32 addr)
{
  #line 3092 
  return (*(rtlpriv->io.read8_sync))(rtlpriv,addr);
}

#line 3105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
__inline static void rtl_write_byte(struct rtl_priv *rtlpriv, u32 addr, u8 val8)
{
  #line 3107 
  (*(rtlpriv->io.write8_async))(rtlpriv,addr,(unsigned char)((int)val8));
  #line 3109 
  if ((int)(rtlpriv->cfg)->write_readback != 0) 
                                                #line 3110 
                                                (*(rtlpriv->io.read8_sync))(rtlpriv,addr);
  #line 3111 
  return;
}

#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/led.h"
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/led.c"
void rtl8821ae_init_sw_leds(struct ieee80211_hw *hw);
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/led.h"
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/led.c"
void rtl8821ae_sw_led_on(struct ieee80211_hw *hw, struct rtl_led *pled);
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/led.h"
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/led.c"
void rtl8812ae_sw_led_on(struct ieee80211_hw *hw, struct rtl_led *pled);
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/led.h"
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/led.c"
void rtl8821ae_sw_led_off(struct ieee80211_hw *hw, struct rtl_led *pled);
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/led.h"
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/led.c"
void rtl8812ae_sw_led_off(struct ieee80211_hw *hw, struct rtl_led *pled);
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/led.h"
#line 194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/led.c"
void rtl8821ae_led_control(struct ieee80211_hw *hw, enum led_ctl_mode ledaction);
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/led.c"
static void _rtl8821ae_init_led(struct ieee80211_hw *hw, struct rtl_led *pled, enum rtl_led_pin ledpin)
{
  #line 13 
  pled->hw = (void *)hw;
  #line 14 
  pled->ledpin = ledpin;
  #line 15 
  pled->ledon = (_Bool)0;
  #line 16 
  return;
}

#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/led.c"
void rtl8821ae_sw_led_on(struct ieee80211_hw *hw, struct rtl_led *pled)
{
  #line 20 
  u8 ledcfg;
  #line 21 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 23 
  _rtl_dbg_trace(rtlpriv,256ULL,4,(char *)"LedAddr:%X ledpin=%d\n",78,(unsigned int)pled->ledpin);
  #line 26 
  switch ((unsigned int)pled->ledpin) {
    #line 27 
    case (unsigned int)0: 
                          #line 27 
    ;
    #line 28 
    break;
    #line 29 
    case (unsigned int)1: 
                          #line 29 
    ;
    #line 30 
    ledcfg = rtl_read_byte(rtlpriv,78U);
    #line 31 
    ledcfg = (unsigned char)((unsigned int)ledcfg & 191U);
    #line 32 
    rtl_write_byte(rtlpriv,78U,(unsigned char)((int)(((unsigned int)ledcfg & 208U) | 32U)));
    #line 34 
    break;
    #line 35 
    case (unsigned int)2: 
                          #line 35 
    ;
    #line 36 
    ledcfg = rtl_read_byte(rtlpriv,77U);
    #line 37 
    rtl_write_byte(rtlpriv,77U,(unsigned char)((int)ledcfg & 16));
    #line 38 
    break;
    #line 39 
    default: 
             #line 39 
    ;
    #line 40 
    _rtl_dbg_trace(rtlpriv,1ULL,4,(char *)"switch case %#x not processed\n",(unsigned int)pled->ledpin);
    #line 42 
    break;
  }
  #line 44 
  pled->ledon = (_Bool)1;
  #line 45 
  return;
}

#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/led.c"
void rtl8812ae_sw_led_on(struct ieee80211_hw *hw, struct rtl_led *pled)
{
  #line 49 
  u16 ledreg = (unsigned short)77U;
  #line 50 
  u8 ledcfg = (unsigned char)0U;
  #line 51 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 53 
  switch ((unsigned int)pled->ledpin) {
    #line 54 
    case (unsigned int)1: 
                          #line 54 
    ;
    #line 55 
    ledreg = (unsigned short)77U;
    #line 56 
    break;
    #line 58 
    case (unsigned int)2: 
                          #line 58 
    ;
    #line 59 
    ledreg = (unsigned short)78U;
    #line 60 
    break;
    #line 62 
    case (unsigned int)0: 
                          #line 62 
    ;
    #line 63 
    default: 
             #line 63 
    ;
    #line 64 
    break;
  }
  #line 67 
  _rtl_dbg_trace(rtlpriv,256ULL,4,(char *)"In SwLedOn, LedAddr:%X LEDPIN=%d\n",(int)ledreg,(unsigned int)pled->ledpin);
  #line 71 
  ledcfg = rtl_read_byte(rtlpriv,(unsigned int)ledreg);
  #line 72 
  ledcfg = (unsigned char)((unsigned int)ledcfg | 32U);
  #line 73 
  ledcfg = (unsigned char)((unsigned int)ledcfg & 48U);
  #line 75 
  rtl_write_byte(rtlpriv,(unsigned int)ledreg,(unsigned char)((int)ledcfg));
  #line 76 
  pled->ledon = (_Bool)1;
  #line 77 
  return;
}

#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/led.c"
void rtl8821ae_sw_led_off(struct ieee80211_hw *hw, struct rtl_led *pled)
{
  #line 82 
  u8 ledcfg;
  #line 81 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 84 
  _rtl_dbg_trace(rtlpriv,256ULL,4,(char *)"LedAddr:%X ledpin=%d\n",78,(unsigned int)pled->ledpin);
  #line 87 
  ledcfg = rtl_read_byte(rtlpriv,78U);
  #line 89 
  switch ((unsigned int)pled->ledpin) {
    #line 90 
    case (unsigned int)0: 
                          #line 90 
    ;
    #line 91 
    break;
    #line 92 
    case (unsigned int)1: 
                          #line 92 
    ;
    #line 93 
    ledcfg = (unsigned char)((unsigned int)ledcfg & 240U);
    #line 94 
    if ((int)rtlpriv->ledctl.led_opendrain != 0) {
      #line 95 
      ledcfg = (unsigned char)((unsigned int)ledcfg & 144U);
      #line 96 
      rtl_write_byte(rtlpriv,78U,(unsigned char)((int)((unsigned int)ledcfg | 8U)));
      #line 97 
      ledcfg = rtl_read_byte(rtlpriv,67U);
      #line 98 
      ledcfg = (unsigned char)((unsigned int)ledcfg & 254U);
      #line 99 
      rtl_write_byte(rtlpriv,67U,(unsigned char)((int)ledcfg));
    }
    else {
      #line 101 
      ledcfg = (unsigned char)((unsigned int)ledcfg & 191U);
      #line 102 
      rtl_write_byte(rtlpriv,78U,(unsigned char)((int)((unsigned int)ledcfg | 40U)));
    }
    #line 105 
    break;
    #line 106 
    case (unsigned int)2: 
                          #line 106 
    ;
    #line 107 
    ledcfg = rtl_read_byte(rtlpriv,77U);
    #line 108 
    ledcfg = (unsigned char)((unsigned int)ledcfg & 16U);
    #line 109 
    rtl_write_byte(rtlpriv,77U,(unsigned char)((int)((unsigned int)ledcfg | 8U)));
    #line 110 
    break;
    #line 111 
    default: 
             #line 111 
    ;
    #line 112 
    _rtl_dbg_trace(rtlpriv,1ULL,4,(char *)"switch case %#x not processed\n",(unsigned int)pled->ledpin);
    #line 114 
    break;
  }
  #line 116 
  pled->ledon = (_Bool)0;
  #line 117 
  return;
}

#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/led.c"
void rtl8812ae_sw_led_off(struct ieee80211_hw *hw, struct rtl_led *pled)
{
  #line 121 
  u16 ledreg = (unsigned short)77U;
  #line 122 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 124 
  switch ((unsigned int)pled->ledpin) {
    #line 125 
    case (unsigned int)1: 
                          #line 125 
    ;
    #line 126 
    ledreg = (unsigned short)77U;
    #line 127 
    break;
    #line 129 
    case (unsigned int)2: 
                          #line 129 
    ;
    #line 130 
    ledreg = (unsigned short)78U;
    #line 131 
    break;
    #line 133 
    case (unsigned int)0: 
                          #line 133 
    ;
    #line 134 
    default: 
             #line 134 
    ;
    #line 135 
    break;
  }
  #line 138 
  _rtl_dbg_trace(rtlpriv,256ULL,4,(char *)"In SwLedOff,LedAddr:%X LEDPIN=%d\n",(int)ledreg,(unsigned int)pled->ledpin);
  #line 142 
  if ((int)rtlpriv->ledctl.led_opendrain != 0) {
    #line 143 
    u8 ledcfg = rtl_read_byte(rtlpriv,(unsigned int)ledreg);
    #line 145 
    ledreg = (unsigned short)((unsigned int)ledreg & 208U);
    #line 146 
    rtl_write_byte(rtlpriv,(unsigned int)ledreg,(unsigned char)((int)((unsigned int)ledcfg | 8U)));
    #line 149 
    ledcfg = rtl_read_byte(rtlpriv,67U);
    #line 150 
    ledcfg = (unsigned char)((unsigned int)ledcfg & 254U);
    #line 151 
    rtl_write_byte(rtlpriv,67U,(unsigned char)((int)ledcfg));
  }
  else 
       #line 153 
       rtl_write_byte(rtlpriv,(unsigned int)ledreg,(unsigned char)40);
  #line 156 
  pled->ledon = (_Bool)0;
  #line 157 
  return;
}

#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/led.c"
void rtl8821ae_init_sw_leds(struct ieee80211_hw *hw)
{
  #line 161 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 163 
  _rtl8821ae_init_led(hw,& rtlpriv->ledctl.sw_led0,(enum rtl_led_pin)LED_PIN_LED0);
  #line 164 
  _rtl8821ae_init_led(hw,& rtlpriv->ledctl.sw_led1,(enum rtl_led_pin)LED_PIN_LED1);
  #line 165 
  return;
}

#line 167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/led.c"
static void _rtl8821ae_sw_led_control(struct ieee80211_hw *hw, enum led_ctl_mode ledaction)
{
  #line 170 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 171 
  struct rtl_led *pled0 = & rtlpriv->ledctl.sw_led0;
  #line 172 
  struct rtl_hal *rtlhal = & ((struct rtl_priv *)hw->priv)->rtlhal;
  #line 174 
  switch ((unsigned int)ledaction) {
    #line 175 
    case (unsigned int)1: 
                          #line 175 
    ;
    #line 176 
    case (unsigned int)2: 
                          #line 176 
    ;
    #line 177 
    case (unsigned int)3: 
                          #line 177 
    ;
    #line 178 
    if ((unsigned int)rtlhal->hw_type == 14U) 
                                              #line 179 
                                              rtl8812ae_sw_led_on(hw,pled0); else 
                                                                    #line 181 
                                                                    rtl8821ae_sw_led_on(hw,pled0);
    #line 182 
    break;
    #line 183 
    case (unsigned int)7: 
                          #line 183 
    ;
    #line 184 
    if ((unsigned int)rtlhal->hw_type == 14U) 
                                              #line 185 
                                              rtl8812ae_sw_led_off(hw,pled0); else 
                                                                    #line 187 
                                                                    rtl8821ae_sw_led_off(hw,pled0);
    #line 188 
    break;
    #line 189 
    default: 
             #line 189 
    ;
    #line 190 
    break;
  }
  #line 192 
  return;
}

#line 194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/led.c"
void rtl8821ae_led_control(struct ieee80211_hw *hw, enum led_ctl_mode ledaction)
{
  #line 197 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 198 
  struct rtl_ps_ctl *ppsc = & ((struct rtl_priv *)hw->priv)->psc;
  #line 200 
  if (ppsc->rfoff_reason > 536870912U && ((((unsigned int)ledaction + 4294967292U <= 2U || ledaction == (unsigned int)LED_CTL_LINK) || (ledaction == (unsigned int)LED_CTL_NO_LINK || ledaction == (unsigned int)LED_CTL_START_TO_LINK)) || ledaction == (unsigned int)LED_CTL_POWER_ON)) 
    #line 208 
    return;
  #line 210 
  _rtl_dbg_trace(rtlpriv,256ULL,4,(char *)"ledaction %d,\n",(unsigned int)ledaction);
  #line 212 
  _rtl8821ae_sw_led_control(hw,ledaction);
  #line 213 
  return;
}

/* compiler builtin: 
   void *__builtin_memcpy(void *, void const *, unsigned long);   */
#line 220  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler.h"
__inline static void __write_once_size(void *p, void *res, int size)
{
  #line 222 
  switch (size) {
    #line 223 
    case 1: 
            #line 223 
    ;
    #line 223 
    *((__u8 *)p) = *((__u8 *)res);
    #line 223 
    break;
    #line 224 
    case 2: 
            #line 224 
    ;
    #line 224 
    *((__u16 *)p) = *((__u16 *)res);
    #line 224 
    break;
    #line 225 
    case 4: 
            #line 225 
    ;
    #line 225 
    *((__u32 *)p) = *((__u32 *)res);
    #line 225 
    break;
    #line 226 
    case 8: 
            #line 226 
    ;
    #line 226 
    *((__u64 *)p) = *((__u64 *)res);
    #line 226 
    break;
    #line 227 
    default: 
             #line 227 
    ;
    #line 228 
    ldv_inline_asm();
    #line 229 
    __builtin_memcpy(p,(void const *)res,(unsigned long)size);
    #line 230 
    ldv_inline_asm();
  }
  #line 232 
  return;
}

#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_api_smp.h"
#line 22 
void _raw_spin_lock(raw_spinlock_t *);
#line 28 
#line 28 
void _raw_spin_lock_bh(raw_spinlock_t *);
#line 39 
#line 39 
void _raw_spin_unlock(raw_spinlock_t *);
#line 40 
#line 40 
void _raw_spin_unlock_bh(raw_spinlock_t *);
#line 43 
#line 43 
void _raw_spin_unlock_irqrestore(raw_spinlock_t *, unsigned long);
#line 336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock(spinlock_t *lock)
{
  #line 338 
  _raw_spin_lock(& lock->__anonCompField_spinlock_25.rlock);
  #line 339 
  return;
}

#line 340 
#line 827  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/rtl8821ae.ko/concurrency safety/0/concurrency safety/weaver/hw.i.aux"
static void cif_spin_lock_rf_ps_lock_of_rtl_locks(spinlock_t *lock);
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_bh(spinlock_t *lock)
{
  #line 343 
  _raw_spin_lock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 344 
  return;
}

#line 345 
#line 801  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/rtl8821ae.ko/concurrency safety/0/concurrency safety/weaver/hw.i.aux"
static void cif_spin_lock_bh_fw_ps_lock_of_rtl_locks(spinlock_t *lock);
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock(spinlock_t *lock)
{
  #line 378 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_25.rlock);
  #line 379 
  return;
}

#line 380 
#line 836  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/rtl8821ae.ko/concurrency safety/0/concurrency safety/weaver/hw.i.aux"
static void cif_spin_unlock_rf_ps_lock_of_rtl_locks(spinlock_t *lock);
#line 381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_bh(spinlock_t *lock)
{
  #line 383 
  _raw_spin_unlock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 384 
  return;
}

#line 385 
#line 810  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/rtl8821ae.ko/concurrency safety/0/concurrency safety/weaver/hw.i.aux"
static void cif_spin_unlock_bh_fw_ps_lock_of_rtl_locks(spinlock_t *lock);
#line 391  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_irqrestore(spinlock_t *lock, unsigned long flags)
{
  {
    #line 393 
    unsigned long __dummy;
    #line 393 
    unsigned long __dummy2;
    }
  #line 393 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_25.rlock,flags);
  #line 395 
  return;
}

#line 395 
#line 792  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/rtl8821ae.ko/concurrency safety/0/concurrency safety/weaver/hw.i.aux"
static void cif_spin_unlock_irqrestore_irq_th_lock_of_rtl_locks(spinlock_t *lock, unsigned long flags);
#line 33 
#line 33 
void __ldv_spin_lock(spinlock_t *);
#line 35 
#line 783 
static void cif___ldv_spin_lock_irq_th_lock_of_rtl_locks(spinlock_t *lock);
#line 40 
#line 40 
void ldv_spin_model_lock(char *);
#line 41 
#line 41 
void ldv_spin_model_unlock(char *);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 23 
void *ldv_kzalloc(size_t size, gfp_t flags);
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
#line 81 
extern unsigned long jiffies;
#line 302 
#line 302 
unsigned long __msecs_to_jiffies(unsigned int);
#line 309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
__inline static unsigned long _msecs_to_jiffies(unsigned int m)
{
  #line 311 
  return (unsigned long)(((long)m + 3L) / 4L);
}

#line 364  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
__inline static unsigned long msecs_to_jiffies(unsigned int m)
{
  #line 366 
  if (0 != 0) {
    #line 367 
    if ((int)m < 0) 
                    #line 368 
                    return 4611686018427387902UL;
    #line 369 
    return _msecs_to_jiffies(m);
  }
  else {
    #line 371 
    return __msecs_to_jiffies(m);
  }
}

#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timekeeping.h"
#line 54 
time64_t ktime_get_real_seconds(void);
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
#line 819  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/rtl8821ae.ko/concurrency safety/0/concurrency safety/weaver/hw.i.aux"
static int cif_mod_timer(struct timer_list *timer, unsigned long expires);
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 189 
void kfree(void *);
#line 668 
#line 412  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/rtl8821ae.ko/concurrency safety/0/concurrency safety/weaver/hw.i.aux"
static void *kzalloc(size_t size, gfp_t flags);
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
#line 30 
void debug_dma_unmap_page(struct device *, dma_addr_t, size_t, int);
#line 228  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
#line 228 
void dma_direct_unmap_page(struct device *, dma_addr_t, size_t, enum dma_data_direction, unsigned long);
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_unmap_page_attrs(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 294 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 296 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 297 
    ldv_inline_asm();
    #line 298 
    ldv_inline_asm();
    #line 299 
    ldv_inline_asm();
    #line 296 
    ;
  }
  #line 297 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 298 
                                    dma_direct_unmap_page(dev,addr,size,dir,attrs);
  else 
    #line 299 
    if (ops->unmap_page != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ))0) 
      #line 300 
      (*(ops->unmap_page))(dev,addr,size,dir,attrs);
  #line 301 
  debug_dma_unmap_page(dev,addr,size,(int)dir);
  #line 302 
  return;
}

#line 592  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_unmap_single_attrs(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 595 
  dma_unmap_page_attrs(dev,addr,size,dir,attrs);
  #line 596 
  return;
}

#line 1019  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
#line 1019 
void kfree_skb(struct sk_buff *);
#line 1744  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct sk_buff *skb_peek(struct sk_buff_head *list_)
{
  #line 1746 
  struct sk_buff *skb = list_->next;
  #line 1748 
  if (skb == (struct sk_buff *)list_) 
                                      #line 1749 
                                      skb = (struct sk_buff *)0;
  #line 1750 
  return skb;
}

#line 1812  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static __u32 skb_queue_len(struct sk_buff_head *list_)
{
  #line 1814 
  return list_->qlen;
}

#line 2018  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void __skb_unlink(struct sk_buff *skb, struct sk_buff_head *list)
{
  #line 2020 
  struct sk_buff *next;
  #line 2020 
  struct sk_buff *prev;
  #line 2022 
  (list->qlen) --;
  #line 2023 
  next = skb->__anonCompField_sk_buff_87.__anonCompField___anonunion_487_86.next;
  #line 2024 
  prev = skb->__anonCompField_sk_buff_87.__anonCompField___anonunion_487_86.prev;
  #line 2025 
  skb->__anonCompField_sk_buff_87.__anonCompField___anonunion_487_86.prev = ((struct sk_buff *)0);
  #line 2025 
  skb->__anonCompField_sk_buff_87.__anonCompField___anonunion_487_86.next = ((struct sk_buff *)0);
  {
    #line 2027 
    union __anonunion___u_3600 __u = {.__val = prev};
    #line 2026 
    __write_once_size((void *)(& next->__anonCompField_sk_buff_87.__anonCompField___anonunion_487_86.prev),(void *)(& __u.__c),8);
    #line 2026 
    struct sk_buff *tmp_2 = __u.__val;
  }
  {
    #line 2028 
    union __anonunion___u_3602 __u_0 = {.__val = next};
    #line 2027 
    __write_once_size((void *)(& prev->__anonCompField_sk_buff_87.__anonCompField___anonunion_487_86.next),(void *)(& __u_0.__c),8);
    #line 2027 
    struct sk_buff *tmp_4 = __u_0.__val;
  }
  #line 2029 
  return;
}

#line 2038  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct sk_buff *__skb_dequeue(struct sk_buff_head *list)
{
  #line 2040 
  struct sk_buff *skb = skb_peek(list);
  #line 2041 
  if (skb != (struct sk_buff *)0) 
                                  #line 2042 
                                  __skb_unlink(skb,list);
  #line 2043 
  return skb;
}

#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/delay.h"
#line 11 
void __const_udelay(unsigned long);
#line 3086  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
#line 3086 
extern u8 channel5g[49U];
#line 3088 
#line 3088 
extern u8 channel5g_80m[7U];
#line 3095  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
__inline static u16 rtl_read_word(struct rtl_priv *rtlpriv, u32 addr)
{
  #line 3097 
  return (*(rtlpriv->io.read16_sync))(rtlpriv,addr);
}

#line 3100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
__inline static u32 rtl_read_dword(struct rtl_priv *rtlpriv, u32 addr)
{
  #line 3102 
  return (*(rtlpriv->io.read32_sync))(rtlpriv,addr);
}

#line 3129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
__inline static void rtl_write_dword(struct rtl_priv *rtlpriv, u32 addr, u32 val32)
{
  #line 3132 
  (*(rtlpriv->io.write32_async))(rtlpriv,addr,val32);
  #line 3134 
  if ((int)(rtlpriv->cfg)->write_readback != 0) 
                                                #line 3135 
                                                (*(rtlpriv->io.read32_sync))(rtlpriv,addr);
  #line 3136 
  return;
}

#line 3193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
__inline static u8 get_rf_type(struct rtl_phy *rtlphy)
{
  #line 3195 
  return rtlphy->rf_type;
}

#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/efuse.h"
#line 91 
int rtl_get_hwinfo(struct ieee80211_hw *, struct rtl_priv *, int, u8 *, int *);
#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/base.h"
#line 117 
u8 rtl_mrate_idx_to_arfr_id(struct ieee80211_hw *, u8, enum wireless_mode);
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/cam.h"
#line 16 
void rtl_cam_reset_all_entry(struct ieee80211_hw *);
#line 17 
#line 17 
u8 rtl_cam_add_one_entry(struct ieee80211_hw *, u8 *, u32, u32, u32, u32, u8 *);
#line 20 
#line 20 
int rtl_cam_delete_one_entry(struct ieee80211_hw *, u8 *, u32);
#line 22 
#line 22 
void rtl_cam_mark_invalid(struct ieee80211_hw *, u8);
#line 23 
#line 23 
void rtl_cam_empty_entry(struct ieee80211_hw *, u8);
#line 25 
#line 25 
u8 rtl_cam_get_free_entry(struct ieee80211_hw *, u8 *);
#line 26 
#line 26 
void rtl_cam_del_entry(struct ieee80211_hw *, u8 *);
#line 1083  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 1083 
int pci_read_config_byte(struct pci_dev *, int, u8 *);
#line 1084 
#line 1084 
int pci_read_config_word(struct pci_dev *, int, u16 *);
#line 1086 
#line 1086 
int pci_write_config_byte(struct pci_dev *, int, u8);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static void pci_unmap_single(struct pci_dev *hwdev, dma_addr_t dma_addr, size_t size, int direction)
{
  #line 47 
  dma_unmap_single_attrs(& hwdev->dev,dma_addr,size,(enum dma_data_direction)direction,0UL);
  #line 48 
  return;
}

#line 196  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.h"
#line 196 
bool rtl8821ae_phy_mac_config(struct ieee80211_hw *hw);
#line 197 
#line 197 
bool rtl8821ae_phy_bb_config(struct ieee80211_hw *hw);
#line 198 
#line 198 
bool rtl8821ae_phy_rf_config(struct ieee80211_hw *hw);
#line 199 
#line 199 
void rtl8821ae_phy_switch_wirelessband(struct ieee80211_hw *hw, u8 band);
#line 224 
#line 224 
bool rtl8821ae_phy_set_io_cmd(struct ieee80211_hw *hw, enum io_type iotype);
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/dm.h"
#line 268 
void rtl8821ae_dm_init(struct ieee80211_hw *hw);
#line 271 
#line 271 
void rtl8821ae_dm_init_edca_turbo(struct ieee80211_hw *hw);
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/fw.h"
#line 272 
int rtl8821ae_download_fw(struct ieee80211_hw *hw, bool buse_wake_on_wlan_fw);
#line 274 
#line 274 
void rtl8821ae_set_fw_related_for_wowlan(struct ieee80211_hw *hw, bool used_wowlan_fw);
#line 278 
#line 278 
void rtl8821ae_fill_h2c_cmd(struct ieee80211_hw *hw, u8 element_id, u32 cmd_len, u8 *cmdbuffer);
#line 280 
#line 280 
void rtl8821ae_firmware_selfreset(struct ieee80211_hw *hw);
#line 281 
#line 281 
void rtl8821ae_set_fw_pwrmode_cmd(struct ieee80211_hw *hw, u8 mode);
#line 282 
#line 282 
void rtl8821ae_set_fw_media_status_rpt_cmd(struct ieee80211_hw *hw, u8 mstatus);
#line 286 
#line 286 
void rtl8821ae_set_fw_rsvdpagepkt(struct ieee80211_hw *hw, bool b_dl_finished, bool dl_whole_packets);
#line 288 
#line 288 
void rtl8812ae_set_fw_rsvdpagepkt(struct ieee80211_hw *hw, bool b_dl_finished, bool dl_whole_packets);
#line 290 
#line 290 
void rtl8821ae_set_p2p_ps_offload_cmd(struct ieee80211_hw *hw, u8 p2p_ps_state);
#line 292 
#line 292 
void rtl8821ae_set_fw_wowlan_mode(struct ieee80211_hw *hw, bool func_en);
#line 293 
#line 293 
void rtl8821ae_set_fw_remote_wake_ctrl_cmd(struct ieee80211_hw *hw, u8 enable);
#line 295 
#line 295 
void rtl8821ae_set_fw_keep_alive_cmd(struct ieee80211_hw *hw, bool func_en);
#line 296 
#line 296 
void rtl8821ae_set_fw_disconnect_decision_ctrl_cmd(struct ieee80211_hw *hw, bool enabled);
#line 298 
#line 298 
void rtl8821ae_set_fw_global_info_cmd(struct ieee80211_hw *hw);
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.h"
#line 388  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
void rtl8821ae_get_hw_reg(struct ieee80211_hw *hw, u8 variable, u8 *val);
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.h"
#line 3253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
void rtl8821ae_read_eeprom_info(struct ieee80211_hw *hw);
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.h"
#line 2464  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
void rtl8821ae_interrupt_recognized(struct ieee80211_hw *hw, struct rtl_int *intvec);
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.h"
#line 1843  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
int rtl8821ae_hw_init(struct ieee80211_hw *hw);
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.h"
#line 2339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
void rtl8821ae_card_disable(struct ieee80211_hw *hw);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.h"
#line 2239  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
void rtl8821ae_enable_interrupt(struct ieee80211_hw *hw);
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.h"
#line 2260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
void rtl8821ae_disable_interrupt(struct ieee80211_hw *hw);
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.h"
#line 2182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
int rtl8821ae_set_network_type(struct ieee80211_hw *hw, enum nl80211_iftype type);
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.h"
#line 2160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
void rtl8821ae_set_check_bssid(struct ieee80211_hw *hw, bool check_bssid);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.h"
#line 2202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
void rtl8821ae_set_qos(struct ieee80211_hw *hw, int aci);
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.h"
#line 2477  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
void rtl8821ae_set_beacon_related_registers(struct ieee80211_hw *hw);
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.h"
#line 2498  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
void rtl8821ae_set_beacon_interval(struct ieee80211_hw *hw);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.h"
#line 2511  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
void rtl8821ae_update_interrupt_mask(struct ieee80211_hw *hw, u32 add_msr, u32 rm_msr);
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.h"
#line 467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
void rtl8821ae_set_hw_reg(struct ieee80211_hw *hw, u8 variable, u8 *val);
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.h"
#line 3706  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
void rtl8821ae_update_hal_rate_tbl(struct ieee80211_hw *hw, struct ieee80211_sta *sta, u8 rssi_level, bool update_bw);
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.h"
#line 3718  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
void rtl8821ae_update_channel_access_setting(struct ieee80211_hw *hw);
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.h"
#line 3749  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
bool rtl8821ae_gpio_radio_on_off_checking(struct ieee80211_hw *hw, u8 *valid);
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.h"
#line 1158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
void rtl8821ae_enable_hw_security_config(struct ieee80211_hw *hw);
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.h"
#line 3818  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
void rtl8821ae_set_key(struct ieee80211_hw *hw, u32 key_index, u8 *p_macaddr, bool is_group, u8 enc_algo, bool is_wepkey, bool clear_all);
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.h"
#line 3942  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
void rtl8821ae_bt_reg_init(struct ieee80211_hw *hw);
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.h"
#line 3954  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
void rtl8821ae_bt_hw_init(struct ieee80211_hw *hw);
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.h"
#line 3962  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
void rtl8821ae_suspend(struct ieee80211_hw *hw);
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.h"
#line 3966  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
void rtl8821ae_resume(struct ieee80211_hw *hw);
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.h"
#line 3971  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
void rtl8821ae_allow_all_destaddr(struct ieee80211_hw *hw, bool allow_all_da, bool write_into_reg);
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.h"
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
void _rtl8821ae_stop_tx_beacon(struct ieee80211_hw *hw);
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.h"
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
void _rtl8821ae_resume_tx_beacon(struct ieee80211_hw *hw);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.h"
#line 3991  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
void rtl8821ae_add_wowlan_pattern(struct ieee80211_hw *hw, struct rtl_wow_pattern *rtl_pattern, u8 index);
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/pwrseqcmd.h"
#line 68 
bool rtl_hal_pwrseqcmdparsing(struct rtl_priv *, u8, u8, u8, struct wlan_pwr_cfg *);
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/pwrseq.h"
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/pwrseq.c"
struct wlan_pwr_cfg rtl8812_card_disable_flow[41U];
#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/pwrseq.h"
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/pwrseq.c"
struct wlan_pwr_cfg rtl8812_card_enable_flow[41U];
#line 667  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/pwrseq.h"
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/pwrseq.c"
struct wlan_pwr_cfg rtl8821A_card_disable_flow[31U];
#line 671  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/pwrseq.h"
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/pwrseq.c"
struct wlan_pwr_cfg rtl8821A_card_enable_flow[41U];
#line 687  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/pwrseq.h"
#line 147  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/pwrseq.c"
struct wlan_pwr_cfg rtl8821A_enter_lps_flow[16U];
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
static void _rtl8821ae_return_beacon_queue_skb(struct ieee80211_hw *hw)
{
  #line 29 
  unsigned long flags;
  #line 26 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 27 
  struct rtl_pci *rtlpci = & ((struct rtl_pci_priv *)(& ((struct rtl_priv *)hw->priv)->priv))->dev;
  #line 28 
  struct rtl8192_tx_ring *ring = & rtlpci->tx_ring[4];
  #line 31 
  cif___ldv_spin_lock_irq_th_lock_of_rtl_locks(& rtlpriv->locks.irq_th_lock);
  #line 32 
  while (1) {
    #line 32 
    if (! (skb_queue_len(& ring->queue) != 0U)) 
                                                #line 32 
                                                break;
    {
      #line 33 
      struct rtl_tx_desc *entry = ring->desc + (unsigned long)ring->idx;
      #line 34 
      struct sk_buff *skb = __skb_dequeue(& ring->queue);
      #line 36 
      ;
      #line 36 
      ;
      #line 36 
      pci_unmap_single(rtlpci->pdev,(*(((rtlpriv->cfg)->ops)->get_desc))(hw,(u8 *)entry,(_Bool)1,
                                             (unsigned char)3),(unsigned long)skb->len,1);
      #line 41 
      kfree_skb(skb);
      #line 42 
      ring->idx = (ring->idx + 1U) % ring->entries;
    }
  }
  #line 44 
  cif_spin_unlock_irqrestore_irq_th_lock_of_rtl_locks(& rtlpriv->locks.irq_th_lock,flags);
  #line 45 
  return;
}

#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
static void _rtl8821ae_set_bcn_ctrl_reg(struct ieee80211_hw *hw, u8 set_bits, u8 clear_bits)
{
  #line 50 
  struct rtl_pci *rtlpci = & ((struct rtl_pci_priv *)(& ((struct rtl_priv *)hw->priv)->priv))->dev;
  #line 51 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 53 
  rtlpci->reg_bcn_ctrl_val |= (unsigned int)set_bits;
  #line 54 
  rtlpci->reg_bcn_ctrl_val &= (unsigned int)(~ ((int)clear_bits));
  #line 56 
  rtl_write_byte(rtlpriv,1360U,(unsigned char)((int)((unsigned char)rtlpci->reg_bcn_ctrl_val)));
  #line 57 
  return;
}

#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
void _rtl8821ae_stop_tx_beacon(struct ieee80211_hw *hw)
{
  #line 62 
  u8 tmp1byte;
  #line 61 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 64 
  tmp1byte = rtl_read_byte(rtlpriv,1058U);
  #line 65 
  rtl_write_byte(rtlpriv,1058U,(unsigned char)((int)tmp1byte & 191));
  #line 66 
  rtl_write_byte(rtlpriv,1345U,(unsigned char)100);
  #line 67 
  tmp1byte = rtl_read_byte(rtlpriv,1346U);
  #line 68 
  tmp1byte = (unsigned char)((unsigned int)tmp1byte & 254U);
  #line 69 
  rtl_write_byte(rtlpriv,1346U,(unsigned char)((int)tmp1byte));
  #line 70 
  return;
}

#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
void _rtl8821ae_resume_tx_beacon(struct ieee80211_hw *hw)
{
  #line 75 
  u8 tmp1byte;
  #line 74 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 77 
  tmp1byte = rtl_read_byte(rtlpriv,1058U);
  #line 78 
  rtl_write_byte(rtlpriv,1058U,(unsigned char)((int)((unsigned int)tmp1byte | 64U)));
  #line 79 
  rtl_write_byte(rtlpriv,1345U,(unsigned char)255);
  #line 80 
  tmp1byte = rtl_read_byte(rtlpriv,1346U);
  #line 81 
  tmp1byte = (unsigned char)((unsigned int)tmp1byte | 1U);
  #line 82 
  rtl_write_byte(rtlpriv,1346U,(unsigned char)((int)tmp1byte));
  #line 83 
  return;
}

#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
static void _rtl8821ae_enable_bcn_sub_func(struct ieee80211_hw *hw)
{
  #line 87 
  _rtl8821ae_set_bcn_ctrl_reg(hw,(unsigned char)0,(unsigned char)2);
  #line 88 
  return;
}

#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
static void _rtl8821ae_disable_bcn_sub_func(struct ieee80211_hw *hw)
{
  #line 92 
  _rtl8821ae_set_bcn_ctrl_reg(hw,(unsigned char)2,(unsigned char)0);
  #line 93 
  return;
}

#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
static void _rtl8821ae_set_fw_clock_on(struct ieee80211_hw *hw, u8 rpwm_val, bool b_need_turn_off_ckk)
{
  #line 100 
  bool b_support_remote_wake_up;
  #line 101 
  u32 isr_regaddr;
  #line 101 
  u32 content;
  #line 98 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 99 
  struct rtl_hal *rtlhal = & ((struct rtl_priv *)hw->priv)->rtlhal;
  #line 101 
  u32 count = 0U;
  #line 102 
  bool b_schedule_timer = b_need_turn_off_ckk;
  #line 104 
  (*(((rtlpriv->cfg)->ops)->get_hw_reg))(hw,(unsigned char)92,(u8 *)(& b_support_remote_wake_up));
  #line 107 
  if (! rtlhal->fw_ready) 
                          #line 108 
                          return;
  #line 109 
  if (! rtlpriv->psc.fw_current_inpsmode) 
                                          #line 110 
                                          return;
  #line 112 
  while (1) {
    #line 113 
    cif_spin_lock_bh_fw_ps_lock_of_rtl_locks(& rtlpriv->locks.fw_ps_lock);
    #line 114 
    if ((int)rtlhal->fw_clk_change_in_progress != 0) {
      #line 115 
      while ((int)rtlhal->fw_clk_change_in_progress != 0) {
        #line 116 
        cif_spin_unlock_bh_fw_ps_lock_of_rtl_locks(& rtlpriv->locks.fw_ps_lock);
        #line 117 
        count ++;
        #line 118 
        __const_udelay(429500UL);
        #line 119 
        if (count > 1000U) 
                           #line 120 
                           goto change_done;
        #line 121 
        cif_spin_lock_bh_fw_ps_lock_of_rtl_locks(& rtlpriv->locks.fw_ps_lock);
      }
      #line 123 
      cif_spin_unlock_bh_fw_ps_lock_of_rtl_locks(& rtlpriv->locks.fw_ps_lock);
    }
    else {
      #line 125 
      rtlhal->fw_clk_change_in_progress = (_Bool)0;
      #line 126 
      cif_spin_unlock_bh_fw_ps_lock_of_rtl_locks(& rtlpriv->locks.fw_ps_lock);
      #line 127 
      goto change_done;
    }
  }
  #line 130 
  change_done: 
               #line 130 
  ;
  #line 131 
  if (((unsigned int)rtlhal->fw_ps_state & 15U) == 1U) {
    #line 132 
    (*(((rtlpriv->cfg)->ops)->get_hw_reg))(hw,(unsigned char)60,& rpwm_val);
    #line 134 
    if (((unsigned long)rpwm_val & 64UL) != 0UL) {
      #line 135 
      isr_regaddr = 180U;
      #line 136 
      content = rtl_read_dword(rtlpriv,isr_regaddr);
      #line 137 
      while (((unsigned long)content & 256UL) == 0UL && count <= 499U) {
        #line 138 
        __const_udelay(214750UL);
        #line 139 
        count ++;
        #line 140 
        content = rtl_read_dword(rtlpriv,isr_regaddr);
      }
      #line 143 
      if (((unsigned long)content & 256UL) != 0UL) {
        #line 144 
        rtl_write_word(rtlpriv,isr_regaddr,(unsigned short)256);
        #line 145 
        rtlhal->fw_ps_state = (unsigned char)0U;
        #line 146 
        _rtl_dbg_trace(rtlpriv,65536ULL,4,(char *)"Receive CPWM INT!!! Set rtlhal->FwPSState = %X\n",(int)rtlhal->fw_ps_state);
      }
    }
    #line 152 
    cif_spin_lock_bh_fw_ps_lock_of_rtl_locks(& rtlpriv->locks.fw_ps_lock);
    #line 153 
    rtlhal->fw_clk_change_in_progress = (_Bool)0;
    #line 154 
    cif_spin_unlock_bh_fw_ps_lock_of_rtl_locks(& rtlpriv->locks.fw_ps_lock);
    #line 155 
    if ((int)b_schedule_timer != 0) {
      #line 156 
      ;
      #line 156 
      ;
      #line 156 
      cif_mod_timer(& rtlpriv->works.fw_clockoff_timer,msecs_to_jiffies(10U) + jiffies);
    }
  }
  else {
    #line 159 
    cif_spin_lock_bh_fw_ps_lock_of_rtl_locks(& rtlpriv->locks.fw_ps_lock);
    #line 160 
    rtlhal->fw_clk_change_in_progress = (_Bool)0;
    #line 161 
    cif_spin_unlock_bh_fw_ps_lock_of_rtl_locks(& rtlpriv->locks.fw_ps_lock);
  }
  #line 163 
  return;
}

#line 165  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
static void _rtl8821ae_set_fw_clock_off(struct ieee80211_hw *hw, u8 rpwm_val)
{
  #line 171 
  struct rtl8192_tx_ring *ring;
  #line 172 
  enum rf_pwrstate rtstate;
  #line 174 
  u8 queue;
  #line 168 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 169 
  struct rtl_hal *rtlhal = & ((struct rtl_priv *)hw->priv)->rtlhal;
  #line 170 
  struct rtl_pci *rtlpci = & ((struct rtl_pci_priv *)(& ((struct rtl_priv *)hw->priv)->priv))->dev;
  #line 173 
  bool b_schedule_timer = (_Bool)0;
  #line 176 
  if (! rtlhal->fw_ready) 
                          #line 177 
                          return;
  #line 178 
  if (! rtlpriv->psc.fw_current_inpsmode) 
                                          #line 179 
                                          return;
  #line 180 
  if (! rtlhal->allow_sw_to_change_hwclc) 
                                          #line 181 
                                          return;
  #line 182 
  (*(((rtlpriv->cfg)->ops)->get_hw_reg))(hw,(unsigned char)40,(u8 *)(& rtstate));
  #line 183 
  if (rtstate == (unsigned int)ERFOFF || rtlpriv->psc.inactive_pwrstate == (unsigned int)ERFOFF) 
    #line 184 
    return;
  #line 186 
  queue = (unsigned char)0U;
  #line 186 
  while ((unsigned int)queue <= 8U) {
    {
      #line 187 
      ring = & rtlpci->tx_ring[(int)queue];
      #line 188 
      if (skb_queue_len(& ring->queue) != 0U) {
        #line 189 
        b_schedule_timer = (_Bool)1;
        #line 190 
        break;
      }
    }
    #line 186 
    queue = (u8)((int)queue + 1);
  }
  #line 194 
  if ((int)b_schedule_timer != 0) {
    #line 195 
    ;
    #line 195 
    ;
    #line 195 
    cif_mod_timer(& rtlpriv->works.fw_clockoff_timer,msecs_to_jiffies(10U) + jiffies);
    #line 197 
    return;
  }
  #line 200 
  if (((unsigned int)rtlhal->fw_ps_state & 15U) != 1U) {
    #line 202 
    cif_spin_lock_bh_fw_ps_lock_of_rtl_locks(& rtlpriv->locks.fw_ps_lock);
    #line 203 
    if (! rtlhal->fw_clk_change_in_progress) {
      #line 204 
      rtlhal->fw_clk_change_in_progress = (_Bool)1;
      #line 205 
      cif_spin_unlock_bh_fw_ps_lock_of_rtl_locks(& rtlpriv->locks.fw_ps_lock);
      #line 206 
      rtlhal->fw_ps_state = (unsigned char)((unsigned int)rpwm_val & 15U);
      #line 207 
      rtl_write_word(rtlpriv,180U,(unsigned short)256);
      #line 208 
      (*(((rtlpriv->cfg)->ops)->set_hw_reg))(hw,(unsigned char)60,& rpwm_val);
      #line 210 
      cif_spin_lock_bh_fw_ps_lock_of_rtl_locks(& rtlpriv->locks.fw_ps_lock);
      #line 211 
      rtlhal->fw_clk_change_in_progress = (_Bool)0;
      #line 212 
      cif_spin_unlock_bh_fw_ps_lock_of_rtl_locks(& rtlpriv->locks.fw_ps_lock);
    }
    else {
      #line 214 
      cif_spin_unlock_bh_fw_ps_lock_of_rtl_locks(& rtlpriv->locks.fw_ps_lock);
      #line 215 
      ;
      #line 215 
      ;
      #line 215 
      cif_mod_timer(& rtlpriv->works.fw_clockoff_timer,msecs_to_jiffies(10U) + jiffies);
    }
  }
  #line 219 
  return;
}

#line 221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
static void _rtl8821ae_set_fw_ps_rf_on(struct ieee80211_hw *hw)
{
  #line 223 
  u8 rpwm_val = (unsigned char)0U;
  #line 225 
  rpwm_val = (unsigned char)((unsigned int)rpwm_val | 64U);
  #line 226 
  _rtl8821ae_set_fw_clock_on(hw,(unsigned char)((int)rpwm_val),(_Bool)1);
  #line 227 
  return;
}

#line 229  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
static void _rtl8821ae_fwlps_leave(struct ieee80211_hw *hw)
{
  #line 231 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 232 
  struct rtl_ps_ctl *ppsc = & ((struct rtl_priv *)hw->priv)->psc;
  #line 233 
  struct rtl_hal *rtlhal = & ((struct rtl_priv *)hw->priv)->rtlhal;
  #line 234 
  bool fw_current_inps = (_Bool)0;
  #line 235 
  u8 rpwm_val = (unsigned char)0U;
  #line 235 
  u8 fw_pwrmode = (unsigned char)0U;
  #line 237 
  if ((int)ppsc->low_power_enable != 0) {
    #line 238 
    rpwm_val = (unsigned char)64U;
    #line 239 
    _rtl8821ae_set_fw_clock_on(hw,(unsigned char)((int)rpwm_val),(_Bool)0);
    #line 240 
    rtlhal->allow_sw_to_change_hwclc = (_Bool)0;
    #line 241 
    (*(((rtlpriv->cfg)->ops)->set_hw_reg))(hw,(unsigned char)61,& fw_pwrmode);
    #line 243 
    (*(((rtlpriv->cfg)->ops)->set_hw_reg))(hw,(unsigned char)65,(u8 *)(& fw_current_inps));
  }
  else {
    #line 246 
    rpwm_val = (unsigned char)0U;
    #line 247 
    (*(((rtlpriv->cfg)->ops)->set_hw_reg))(hw,(unsigned char)60,& rpwm_val);
    #line 249 
    (*(((rtlpriv->cfg)->ops)->set_hw_reg))(hw,(unsigned char)61,& fw_pwrmode);
    #line 251 
    (*(((rtlpriv->cfg)->ops)->set_hw_reg))(hw,(unsigned char)65,(u8 *)(& fw_current_inps));
  }
  #line 254 
  return;
}

#line 256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
static void _rtl8821ae_fwlps_enter(struct ieee80211_hw *hw)
{
  #line 262 
  u8 rpwm_val;
  #line 258 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 259 
  struct rtl_ps_ctl *ppsc = & ((struct rtl_priv *)hw->priv)->psc;
  #line 260 
  struct rtl_hal *rtlhal = & ((struct rtl_priv *)hw->priv)->rtlhal;
  #line 261 
  bool fw_current_inps = (_Bool)1;
  #line 264 
  if ((int)ppsc->low_power_enable != 0) {
    #line 265 
    rpwm_val = (unsigned char)1U;
    #line 266 
    (*(((rtlpriv->cfg)->ops)->set_hw_reg))(hw,(unsigned char)65,(u8 *)(& fw_current_inps));
    #line 269 
    (*(((rtlpriv->cfg)->ops)->set_hw_reg))(hw,(unsigned char)61,& ppsc->fwctrl_psmode);
    #line 272 
    rtlhal->allow_sw_to_change_hwclc = (_Bool)1;
    #line 273 
    _rtl8821ae_set_fw_clock_off(hw,(unsigned char)((int)rpwm_val));
  }
  else {
    #line 275 
    rpwm_val = (unsigned char)0U;
    #line 276 
    (*(((rtlpriv->cfg)->ops)->set_hw_reg))(hw,(unsigned char)65,(u8 *)(& fw_current_inps));
    #line 279 
    (*(((rtlpriv->cfg)->ops)->set_hw_reg))(hw,(unsigned char)61,& ppsc->fwctrl_psmode);
    #line 282 
    (*(((rtlpriv->cfg)->ops)->set_hw_reg))(hw,(unsigned char)60,& rpwm_val);
  }
  #line 286 
  return;
}

#line 288  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
static void _rtl8821ae_download_rsvd_page(struct ieee80211_hw *hw, bool dl_whole_packets)
{
  #line 293 
  u8 tmp_regcr;
  #line 293 
  u8 tmp_reg422;
  #line 293 
  u8 bcnvalid_reg;
  #line 291 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 292 
  struct rtl_hal *rtlhal = & rtlpriv->rtlhal;
  #line 294 
  u8 count = (unsigned char)0U;
  #line 294 
  u8 dlbcn_count = (unsigned char)0U;
  #line 295 
  bool send_beacon = (_Bool)0;
  #line 297 
  tmp_regcr = rtl_read_byte(rtlpriv,257U);
  #line 298 
  rtl_write_byte(rtlpriv,257U,(unsigned char)((int)((unsigned int)tmp_regcr | 1U)));
  #line 300 
  _rtl8821ae_set_bcn_ctrl_reg(hw,(unsigned char)0,(unsigned char)8);
  #line 301 
  _rtl8821ae_set_bcn_ctrl_reg(hw,(unsigned char)16,(unsigned char)0);
  #line 303 
  tmp_reg422 = rtl_read_byte(rtlpriv,1058U);
  #line 304 
  rtl_write_byte(rtlpriv,1058U,(unsigned char)((int)tmp_reg422 & 191));
  #line 306 
  if (((unsigned long)tmp_reg422 & 64UL) != 0UL) 
                                                 #line 307 
                                                 send_beacon = (_Bool)1;
  #line 309 
  while (1) {
    #line 310 
    bcnvalid_reg = rtl_read_byte(rtlpriv,522U);
    #line 311 
    rtl_write_byte(rtlpriv,522U,(unsigned char)((int)((unsigned int)bcnvalid_reg | 1U)));
    #line 313 
    _rtl8821ae_return_beacon_queue_skb(hw);
    #line 315 
    if ((unsigned int)rtlhal->hw_type == 14U) 
                                              #line 316 
                                              rtl8812ae_set_fw_rsvdpagepkt(hw,(_Bool)0,(_Bool)((bool)((int)dl_whole_packets) != 0)); else 
                                                                    #line 319 
                                                                    rtl8821ae_set_fw_rsvdpagepkt(hw,(_Bool)0,(_Bool)((bool)((int)dl_whole_packets) != 0));
    #line 322 
    bcnvalid_reg = rtl_read_byte(rtlpriv,522U);
    #line 323 
    count = (unsigned char)0U;
    #line 324 
    while (((unsigned long)bcnvalid_reg & 1UL) == 0UL && (unsigned int)count <= 19U) {
      #line 325 
      count = (u8)((int)count + 1);
      #line 326 
      __const_udelay(42950UL);
      #line 327 
      bcnvalid_reg = rtl_read_byte(rtlpriv,522U);
    }
    #line 329 
    dlbcn_count = (u8)((int)dlbcn_count + 1);
    #line 330 
    if (! (((unsigned long)bcnvalid_reg & 1UL) == 0UL && (unsigned int)dlbcn_count <= 4U)) 
      #line 309 
      break;
  }
  #line 332 
  if (((unsigned long)bcnvalid_reg & 1UL) == 0UL) 
                                                  #line 333 
                                                  _rtl_dbg_trace(rtlpriv,4ULL,4,(char *)"Download RSVD page failed!\n");
  #line 335 
  if (((unsigned long)bcnvalid_reg & 1UL) != 0UL && (int)rtlhal->enter_pnp_sleep != 0) {
    #line 336 
    rtl_write_byte(rtlpriv,522U,(unsigned char)((int)((unsigned int)bcnvalid_reg | 1U)));
    #line 337 
    _rtl8821ae_return_beacon_queue_skb(hw);
    #line 338 
    if ((int)send_beacon != 0) {
      #line 339 
      dlbcn_count = (unsigned char)0U;
      #line 340 
      while (1) {
        #line 341 
        rtl_write_byte(rtlpriv,522U,(unsigned char)((int)((unsigned int)bcnvalid_reg | 1U)));
        #line 344 
        _rtl8821ae_return_beacon_queue_skb(hw);
        #line 346 
        if ((unsigned int)rtlhal->hw_type == 14U) 
                                                  #line 347 
                                                  rtl8812ae_set_fw_rsvdpagepkt(hw,(_Bool)1,(_Bool)0); else 
                                                                    #line 350 
                                                                    rtl8821ae_set_fw_rsvdpagepkt(hw,(_Bool)1,(_Bool)0);
        #line 354 
        bcnvalid_reg = rtl_read_byte(rtlpriv,522U);
        #line 356 
        count = (unsigned char)0U;
        #line 357 
        while (((unsigned long)bcnvalid_reg & 1UL) == 0UL && (unsigned int)count <= 19U) {
          #line 358 
          count = (u8)((int)count + 1);
          #line 359 
          __const_udelay(42950UL);
          #line 360 
          bcnvalid_reg = rtl_read_byte(rtlpriv,522U);
        }
        #line 364 
        dlbcn_count = (u8)((int)dlbcn_count + 1);
        #line 365 
        if (! (((unsigned long)bcnvalid_reg & 1UL) == 0UL && (unsigned int)dlbcn_count <= 4U)) 
          #line 340 
          break;
      }
      #line 367 
      if (((unsigned long)bcnvalid_reg & 1UL) == 0UL) 
                                                      #line 368 
                                                      _rtl_dbg_trace(rtlpriv,4ULL,4,(char *)"2 Download RSVD page failed!\n");
    }
  }
  #line 373 
  if (((unsigned long)bcnvalid_reg & 1UL) != 0UL) 
                                                  #line 374 
                                                  rtl_write_byte(rtlpriv,522U,(unsigned char)1);
  #line 376 
  _rtl8821ae_set_bcn_ctrl_reg(hw,(unsigned char)8,(unsigned char)0);
  #line 377 
  _rtl8821ae_set_bcn_ctrl_reg(hw,(unsigned char)0,(unsigned char)16);
  #line 379 
  if ((int)send_beacon != 0) 
                             #line 380 
                             rtl_write_byte(rtlpriv,1058U,(unsigned char)((int)tmp_reg422));
  #line 382 
  if (! rtlhal->enter_pnp_sleep) {
    #line 383 
    tmp_regcr = rtl_read_byte(rtlpriv,257U);
    #line 384 
    rtl_write_byte(rtlpriv,257U,(unsigned char)((int)tmp_regcr & 254));
  }
  #line 386 
  return;
}

#line 388  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
void rtl8821ae_get_hw_reg(struct ieee80211_hw *hw, u8 variable, u8 *val)
{
  #line 390 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 391 
  struct rtl_ps_ctl *ppsc = & ((struct rtl_priv *)hw->priv)->psc;
  #line 392 
  struct rtl_pci *rtlpci = & ((struct rtl_pci_priv *)(& ((struct rtl_priv *)hw->priv)->priv))->dev;
  #line 393 
  struct rtl_mac *mac = & ((struct rtl_priv *)hw->priv)->mac80211;
  #line 395 
  switch ((int)variable) {
    #line 396 
    case 0: 
            #line 396 
    ;
    #line 397 
    *((u32 *)val) = rtl_read_dword(rtlpriv,1552U);
    #line 398 
    *((u16 *)(val + 4U)) = rtl_read_word(rtlpriv,1556U);
    #line 399 
    break;
    #line 400 
    case 3: 
            #line 400 
    ;
    #line 401 
    *((u32 *)val) = rtl_read_dword(rtlpriv,1560U);
    #line 402 
    *((u16 *)(val + 4U)) = rtl_read_word(rtlpriv,1564U);
    #line 403 
    break;
    #line 404 
    case 4: 
            #line 404 
    ;
    #line 405 
    *val = (unsigned char)((unsigned int)rtl_read_byte(rtlpriv,258U) & 3U);
    #line 406 
    break;
    #line 407 
    case 18: 
             #line 407 
    ;
    #line 408 
    *val = mac->slot_time;
    #line 409 
    break;
    #line 410 
    case 6: 
            #line 410 
    ;
    #line 411 
    *((u16 *)val) = rtl_read_word(rtlpriv,1364U);
    #line 412 
    break;
    #line 413 
    case 7: 
            #line 413 
    ;
    #line 414 
    *((u16 *)val) = rtl_read_word(rtlpriv,1370U);
    #line 415 
    break;
    #line 416 
    case 44: 
             #line 416 
    ;
    #line 417 
    *((u32 *)val) = rtlpci->receive_config;
    #line 418 
    break;
    #line 419 
    case 40: 
             #line 419 
    ;
    #line 420 
    *((enum rf_pwrstate *)val) = ppsc->rfpwr_state;
    #line 421 
    break;
    #line 422 
    case 86: 
             #line 422 
    ;
    {
      #line 423 
      enum rf_pwrstate rfstate;
      #line 424 
      u32 val_rcr;
      #line 426 
      (*(((rtlpriv->cfg)->ops)->get_hw_reg))(hw,(unsigned char)40,(u8 *)(& rfstate));
      #line 429 
      if (rfstate == (unsigned int)ERFOFF) 
                                           #line 430 
                                           *((bool *)val) = (_Bool)1;
      else {
        #line 432 
        val_rcr = rtl_read_dword(rtlpriv,1544U);
        #line 433 
        val_rcr &= 458752U;
        #line 434 
        if (val_rcr != 0U) 
                           #line 435 
                           *((bool *)val) = (_Bool)0; else 
                                                           #line 437 
                                                           *((bool *)val) = (_Bool)1;
      }
      #line 439 
      break;
    }
    #line 440 
    case 65: 
             #line 440 
    ;
    #line 441 
    *((bool *)val) = ppsc->fw_current_inpsmode;
    #line 442 
    break;
    #line 443 
    case 84: 
             #line 443 
    ;
    {
      #line 444 
      u64 tsf;
      #line 445 
      u32 *ptsf_low = (u32 *)(& tsf);
      #line 446 
      u32 *ptsf_high = (u32 *)(& tsf) + 1U;
      #line 448 
      *ptsf_high = rtl_read_dword(rtlpriv,1380U);
      #line 449 
      *ptsf_low = rtl_read_dword(rtlpriv,1376U);
      #line 451 
      *((u64 *)val) = tsf;
      #line 453 
      break;
    }
    #line 454 
    case 92: 
             #line 454 
    ;
    #line 455 
    if ((unsigned int)ppsc->wo_wlan_mode != 0U) 
                                                #line 456 
                                                *((bool *)val) = (_Bool)1; else 
                                                                    #line 458 
                                                                    *((bool *)val) = (_Bool)0;
    #line 459 
    break;
    #line 460 
    default: 
             #line 460 
    ;
    #line 461 
    _rtl_dbg_trace(rtlpriv,1ULL,4,(char *)"switch case %#x not processed\n",(int)variable);
    #line 463 
    break;
  }
  #line 465 
  return;
}

#line 467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
void rtl8821ae_set_hw_reg(struct ieee80211_hw *hw, u8 variable, u8 *val)
{
  #line 475 
  u8 idx;
  #line 469 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 470 
  struct rtl_pci *rtlpci = & ((struct rtl_pci_priv *)(& ((struct rtl_priv *)hw->priv)->priv))->dev;
  #line 471 
  struct rtl_mac *mac = & ((struct rtl_priv *)hw->priv)->mac80211;
  #line 472 
  struct rtl_efuse *rtlefuse = & ((struct rtl_priv *)hw->priv)->efuse;
  #line 473 
  struct rtl_ps_ctl *ppsc = & ((struct rtl_priv *)hw->priv)->psc;
  #line 474 
  struct rtl_hal *rtlhal = & ((struct rtl_priv *)hw->priv)->rtlhal;
  #line 477 
  switch ((int)variable) {
    #line 478 
    case 0: 
            #line 478 
    ;
    #line 479 
    idx = (unsigned char)0U;
    #line 479 
    while ((unsigned int)idx <= 5U) {
      #line 480 
      rtl_write_byte(rtlpriv,(unsigned int)((int)idx + 1552),(unsigned char)((int)*(val + (unsigned long)idx)));
      #line 479 
      idx = (u8)((int)idx + 1);
    }
    #line 483 
    break;
    #line 485 
    case 2: 
            #line 485 
    ;
    {
      #line 486 
      u16 b_rate_cfg = *((u16 *)val);
      #line 487 
      b_rate_cfg = (unsigned short)((unsigned int)b_rate_cfg & 351U);
      #line 488 
      rtl_write_word(rtlpriv,1088U,(unsigned short)((int)b_rate_cfg));
      #line 489 
      break;
    }
    #line 491 
    case 3: 
            #line 491 
    ;
    #line 492 
    idx = (unsigned char)0U;
    #line 492 
    while ((unsigned int)idx <= 5U) {
      #line 493 
      rtl_write_byte(rtlpriv,(unsigned int)((int)idx + 1560),(unsigned char)((int)*(val + (unsigned long)idx)));
      #line 492 
      idx = (u8)((int)idx + 1);
    }
    #line 496 
    break;
    #line 498 
    case 14: 
             #line 498 
    ;
    #line 499 
    rtl_write_byte(rtlpriv,1301U,(unsigned char)((int)*val));
    #line 500 
    rtl_write_byte(rtlpriv,1303U,(unsigned char)((int)*val));
    #line 502 
    rtl_write_byte(rtlpriv,1065U,(unsigned char)((int)*val));
    #line 503 
    rtl_write_byte(rtlpriv,1595U,(unsigned char)((int)*val));
    #line 505 
    rtl_write_byte(rtlpriv,1599U,(unsigned char)((int)*val));
    #line 506 
    rtl_write_byte(rtlpriv,1598U,(unsigned char)((int)*val));
    #line 507 
    break;
    #line 508 
    case 15: 
             #line 508 
    ;
    #line 509 
    rtl_write_byte(rtlpriv,1599U,(unsigned char)((int)*val));
    #line 510 
    break;
    #line 511 
    case 18: 
             #line 511 
    ;
    {
      #line 512 
      u8 e_aci;
      #line 514 
      _rtl_dbg_trace(rtlpriv,32ULL,4,(char *)"HW_VAR_SLOT_TIME %x\n",(int)*val);
      #line 517 
      rtl_write_byte(rtlpriv,1307U,(unsigned char)((int)*val));
      #line 519 
      e_aci = (unsigned char)0U;
      #line 519 
      while ((unsigned int)e_aci <= 3U) {
        #line 520 
        (*(((rtlpriv->cfg)->ops)->set_hw_reg))(hw,(unsigned char)32,& e_aci);
        #line 519 
        e_aci = (u8)((int)e_aci + 1);
      }
      #line 524 
      break;
    }
    #line 525 
    case 19: 
             #line 525 
    ;
    {
      #line 526 
      u8 reg_tmp;
      #line 527 
      u8 short_preamble = (unsigned char)((unsigned int)*val != 0U);
      #line 529 
      reg_tmp = rtl_read_byte(rtlpriv,1642U);
      #line 530 
      if ((unsigned int)short_preamble != 0U) {
        #line 531 
        reg_tmp = (unsigned char)((unsigned int)reg_tmp | 2U);
        #line 532 
        rtl_write_byte(rtlpriv,1642U,(unsigned char)((int)reg_tmp));
      }
      else {
        #line 535 
        reg_tmp = (unsigned char)((unsigned int)reg_tmp & 253U);
        #line 536 
        rtl_write_byte(rtlpriv,1642U,(unsigned char)((int)reg_tmp));
      }
      #line 540 
      break;
    }
    #line 541 
    case 27: 
             #line 541 
    ;
    #line 542 
    rtl_write_byte(rtlpriv,1664U,(unsigned char)((int)*val));
    #line 543 
    break;
    #line 544 
    case 28: 
             #line 544 
    ;
    {
      #line 545 
      u8 min_spacing_to_set;
      #line 546 
      u8 sec_min_space;
      #line 548 
      min_spacing_to_set = *val;
      #line 549 
      if ((unsigned int)min_spacing_to_set <= 7U) {
        #line 550 
        sec_min_space = (unsigned char)0U;
        #line 552 
        if ((int)min_spacing_to_set < (int)sec_min_space) 
                                                          #line 553 
                                                          min_spacing_to_set = sec_min_space;
        #line 555 
        mac->min_space_cfg = (unsigned char)(((int)mac->min_space_cfg & -8) | (int)min_spacing_to_set);
        #line 559 
        *val = min_spacing_to_set;
        #line 561 
        _rtl_dbg_trace(rtlpriv,32ULL,4,(char *)"Set HW_VAR_AMPDU_MIN_SPACE: %#x\n",(int)mac->min_space_cfg);
        #line 565 
        rtl_write_byte(rtlpriv,1116U,(unsigned char)((int)mac->min_space_cfg));
      }
      #line 568 
      break;
    }
    #line 569 
    case 29: 
             #line 569 
    ;
    {
      #line 570 
      u8 density_to_set;
      #line 572 
      density_to_set = *val;
      #line 573 
      mac->min_space_cfg = (unsigned char)((int)mac->min_space_cfg | ((int)density_to_set << 3));
      #line 575 
      _rtl_dbg_trace(rtlpriv,32ULL,4,(char *)"Set HW_VAR_SHORTGI_DENSITY: %#x\n",(int)mac->min_space_cfg);
      #line 579 
      rtl_write_byte(rtlpriv,1116U,(unsigned char)((int)mac->min_space_cfg));
      #line 582 
      break;
    }
    #line 583 
    case 30: 
             #line 583 
    ;
    {
      #line 584 
      u32 ampdu_len = (unsigned int)*val;
      #line 586 
      if ((unsigned int)rtlhal->hw_type == 14U) 
        #line 587 
        if (ampdu_len <= 3U) 
                             #line 588 
                             ampdu_len = (unsigned int)((8192 << (int)*val) + -1); else 
                                                                    #line 591 
                                                                    ampdu_len = 131071U;
      else 
        #line 592 
        if ((unsigned int)rtlhal->hw_type == 13U) 
          #line 593 
          if (ampdu_len <= 2U) 
                               #line 594 
                               ampdu_len = (unsigned int)((8192 << (int)*val) + -1); else 
                                                                    #line 597 
                                                                    ampdu_len = 65535U;
      #line 599 
      ampdu_len |= 2147483648U;
      #line 601 
      rtl_write_dword(rtlpriv,1112U,ampdu_len);
      #line 603 
      break;
    }
    #line 604 
    case 32: 
             #line 604 
    ;
    {
      #line 605 
      u8 e_aci_0 = *val;
      #line 607 
      rtl8821ae_dm_init_edca_turbo(hw);
      #line 608 
      if (rtlpci->acm_method != (unsigned int)EACMWAY2_SW) 
                                                           #line 609 
                                                           (*(((rtlpriv->cfg)->ops)->set_hw_reg))(hw,(unsigned char)33,& e_aci_0);
      #line 612 
      break;
    }
    #line 613 
    case 33: 
             #line 613 
    ;
    {
      #line 614 
      u8 e_aci_1 = *val;
      #line 615 
      union aci_aifsn *p_aci_aifsn = (union aci_aifsn *)(& mac->ac[0].aifs);
      #line 617 
      u8 acm = (unsigned char)p_aci_aifsn->f.acm;
      #line 618 
      u8 acm_ctrl = rtl_read_byte(rtlpriv,1472U);
      #line 620 
      acm_ctrl = (unsigned char)((rtlpci->acm_method != (unsigned int)EACMWAY2_SW) | (int)acm_ctrl);
      #line 623 
      if ((unsigned int)acm != 0U) 
        #line 624 
        switch ((int)e_aci_1) {
          #line 625 
          case 0: 
                  #line 625 
          ;
          #line 626 
          acm_ctrl = (unsigned char)((unsigned int)acm_ctrl | 2U);
          #line 627 
          break;
          #line 628 
          case 2: 
                  #line 628 
          ;
          #line 629 
          acm_ctrl = (unsigned char)((unsigned int)acm_ctrl | 4U);
          #line 630 
          break;
          #line 631 
          case 3: 
                  #line 631 
          ;
          #line 632 
          acm_ctrl = (unsigned char)((unsigned int)acm_ctrl | 8U);
          #line 633 
          break;
          #line 634 
          default: 
                   #line 634 
          ;
          #line 635 
          _rtl_dbg_trace(rtlpriv,1ULL,2,(char *)"HW_VAR_ACM_CTRL acm set failed: eACI is %d\n",(int)acm);
          #line 638 
          break;
        }
      else 
        #line 641 
        switch ((int)e_aci_1) {
          #line 642 
          case 0: 
                  #line 642 
          ;
          #line 643 
          acm_ctrl = (unsigned char)((unsigned int)acm_ctrl & 253U);
          #line 644 
          break;
          #line 645 
          case 2: 
                  #line 645 
          ;
          #line 646 
          acm_ctrl = (unsigned char)((unsigned int)acm_ctrl & 251U);
          #line 647 
          break;
          #line 648 
          case 3: 
                  #line 648 
          ;
          #line 649 
          acm_ctrl = (unsigned char)((unsigned int)acm_ctrl & 247U);
          #line 650 
          break;
          #line 651 
          default: 
                   #line 651 
          ;
          #line 652 
          _rtl_dbg_trace(rtlpriv,1ULL,4,(char *)"switch case %#x not processed\n",(int)e_aci_1);
          #line 655 
          break;
        }
      #line 659 
      _rtl_dbg_trace(rtlpriv,33554432ULL,5,(char *)"SetHwReg8190pci(): [HW_VAR_ACM_CTRL] Write 0x%X\n",(int)acm_ctrl);
      #line 662 
      rtl_write_byte(rtlpriv,1472U,(unsigned char)((int)acm_ctrl));
      #line 663 
      break;
    }
    #line 664 
    case 44: 
             #line 664 
    ;
    #line 665 
    rtl_write_dword(rtlpriv,1544U,*((u32 *)val));
    #line 666 
    rtlpci->receive_config = *((u32 *)val);
    #line 667 
    break;
    #line 668 
    case 53: 
             #line 668 
    ;
    {
      #line 669 
      u8 retry_limit = *val;
      #line 671 
      rtl_write_word(rtlpriv,1066U,(unsigned short)((int)((unsigned short)(((int)retry_limit << 8) | (int)retry_limit))));
      #line 674 
      break;
    }
    #line 675 
    case 87: 
             #line 675 
    ;
    #line 676 
    rtl_write_byte(rtlpriv,1363U,(unsigned char)3);
    #line 677 
    break;
    #line 678 
    case 57: 
             #line 678 
    ;
    #line 679 
    rtlefuse->efuse_usedbytes = *((u16 *)val);
    #line 680 
    break;
    #line 681 
    case 56: 
             #line 681 
    ;
    #line 682 
    rtlefuse->efuse_usedpercentage = *val;
    #line 683 
    break;
    #line 684 
    case 72: 
             #line 684 
    ;
    #line 685 
    rtl8821ae_phy_set_io_cmd(hw,*((enum io_type *)val));
    #line 686 
    break;
    #line 687 
    case 60: 
             #line 687 
    ;
    {
      #line 688 
      u8 rpwm_val;
      #line 690 
      rpwm_val = rtl_read_byte(rtlpriv,865U);
      #line 691 
      __const_udelay(4295UL);
      #line 693 
      if (((unsigned long)rpwm_val & 128UL) != 0UL) 
                                                    #line 694 
                                                    rtl_write_byte(rtlpriv,865U,(unsigned char)((int)*val)); else 
                                                                    #line 697 
                                                                    rtl_write_byte(rtlpriv,865U,(unsigned char)((int)((unsigned int)*val | 128U)));
      #line 701 
      break;
    }
    #line 702 
    case 61: 
             #line 702 
    ;
    #line 703 
    rtl8821ae_set_fw_pwrmode_cmd(hw,(unsigned char)((int)*val));
    #line 704 
    break;
    #line 705 
    case 65: 
             #line 705 
    ;
    #line 706 
    ppsc->fw_current_inpsmode = *((bool *)val);
    #line 707 
    break;
    #line 708 
    case 66: 
             #line 708 
    ;
    #line 709 
    break;
    #line 710 
    case 67: 
             #line 710 
    ;
    #line 711 
    _rtl8821ae_set_fw_ps_rf_on(hw);
    #line 712 
    break;
    #line 713 
    case 68: 
             #line 713 
    ;
    {
      #line 714 
      bool b_enter_fwlps = *((bool *)val);
      #line 716 
      if ((int)b_enter_fwlps != 0) 
                                   #line 717 
                                   _rtl8821ae_fwlps_enter(hw); else 
                                                                    #line 719 
                                                                    _rtl8821ae_fwlps_leave(hw);
      #line 720 
      break;
    }
    #line 721 
    case 62: 
             #line 721 
    ;
    {
      #line 722 
      u8 mstatus = *val;
      #line 724 
      if ((unsigned int)mstatus == 1U) {
        #line 725 
        (*(((rtlpriv->cfg)->ops)->set_hw_reg))(hw,(unsigned char)82,(u8 *)0U);
        #line 727 
        _rtl8821ae_download_rsvd_page(hw,(_Bool)0);
      }
      #line 729 
      rtl8821ae_set_fw_media_status_rpt_cmd(hw,(unsigned char)((int)mstatus));
      #line 731 
      break;
    }
    #line 732 
    case 64: 
             #line 732 
    ;
    #line 733 
    rtl8821ae_set_p2p_ps_offload_cmd(hw,(unsigned char)((int)*val));
    #line 734 
    break;
    #line 735 
    case 82: 
             #line 735 
    ;
    {
      #line 736 
      u16 u2btmp;
      #line 737 
      u2btmp = rtl_read_word(rtlpriv,1704U);
      #line 738 
      u2btmp = (unsigned short)((unsigned int)u2btmp & 49152U);
      #line 739 
      rtl_write_word(rtlpriv,1704U,(unsigned short)((int)mac->assoc_id | (int)u2btmp));
      #line 741 
      break;
    }
    #line 742 
    case 84: 
             #line 742 
    ;
    {
      #line 743 
      u8 btype_ibss = *val;
      #line 745 
      if ((unsigned int)btype_ibss != 0U) 
                                          #line 746 
                                          _rtl8821ae_stop_tx_beacon(hw);
      #line 748 
      _rtl8821ae_set_bcn_ctrl_reg(hw,(unsigned char)0,(unsigned char)8);
      #line 750 
      rtl_write_dword(rtlpriv,1376U,(unsigned int)mac->tsf);
      #line 752 
      rtl_write_dword(rtlpriv,1380U,(unsigned int)(mac->tsf >> 32));
      #line 755 
      _rtl8821ae_set_bcn_ctrl_reg(hw,(unsigned char)8,(unsigned char)0);
      #line 757 
      if ((unsigned int)btype_ibss != 0U) 
                                          #line 758 
                                          _rtl8821ae_resume_tx_beacon(hw);
      #line 759 
      break;
    }
    #line 760 
    case 95: 
             #line 760 
    ;
    {
      #line 761 
      u32 us_nav_upper = *((u32 *)val);
      #line 763 
      if (us_nav_upper > 32640U) {
        #line 764 
        _rtl_dbg_trace(rtlpriv,4ULL,2,(char *)"The setting value (0x%08X us) of NAV_UPPER is larger than (%d * 0xFF)!!!\n",us_nav_upper,128);
        #line 767 
        break;
      }
      #line 769 
      rtl_write_byte(rtlpriv,1618U,(unsigned char)((int)((unsigned char)((us_nav_upper + 127U) / 128U))));
      #line 773 
      break;
    }
    #line 774 
    case 94: 
             #line 774 
    ;
    {
      #line 775 
      u8 array[2U];
      #line 776 
      array[0] = (unsigned char)255U;
      #line 777 
      array[1] = *val;
      #line 778 
      rtl8821ae_fill_h2c_cmd(hw,(unsigned char)3,2U,(u8 *)(& array));
      #line 780 
      break;
    }
    #line 781 
    default: 
             #line 781 
    ;
    #line 782 
    _rtl_dbg_trace(rtlpriv,1ULL,4,(char *)"switch case %#x not processed\n",(int)variable);
    #line 784 
    break;
  }
  #line 786 
  return;
}

#line 788  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
static bool _rtl8821ae_llt_write(struct ieee80211_hw *hw, u32 address, u32 data)
{
  #line 790 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 791 
  bool status = (_Bool)1;
  #line 792 
  long count = 0L;
  #line 793 
  u32 value = (((address << 8) & 65535U) | (data & 255U)) | 1073741824U;
  #line 796 
  rtl_write_dword(rtlpriv,480U,value);
  #line 798 
  while (1) {
    #line 799 
    value = rtl_read_dword(rtlpriv,480U);
    #line 800 
    if (value >> 30 == 0U) 
                           #line 801 
                           break;
    #line 803 
    if (count > 20L) {
      #line 804 
      printk((char *)"\001",address);
      #line 806 
      status = (_Bool)0;
      #line 807 
      break;
    }
    #line 809 
    count ++;
    #line 809 
    if (! (count != 0L)) 
                         #line 798 
                         break;
  }
  #line 811 
  return status;
}

#line 814  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
static bool _rtl8821ae_llt_table_init(struct ieee80211_hw *hw)
{
  #line 817 
  unsigned short i;
  #line 818 
  u8 txpktbuf_bndy;
  #line 819 
  u32 rqpn;
  #line 820 
  u8 maxpage;
  #line 821 
  bool status;
  #line 816 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 823 
  maxpage = (unsigned char)255U;
  #line 824 
  txpktbuf_bndy = (unsigned char)247U;
  #line 825 
  rqpn = 2162558984U;
  #line 827 
  rtl_write_byte(rtlpriv,276U,(unsigned char)((int)txpktbuf_bndy));
  #line 828 
  rtl_write_word(rtlpriv,278U,(unsigned short)15999);
  #line 830 
  rtl_write_byte(rtlpriv,521U,(unsigned char)((int)txpktbuf_bndy));
  #line 832 
  rtl_write_byte(rtlpriv,1060U,(unsigned char)((int)txpktbuf_bndy));
  #line 833 
  rtl_write_byte(rtlpriv,1061U,(unsigned char)((int)txpktbuf_bndy));
  #line 835 
  rtl_write_byte(rtlpriv,260U,(unsigned char)49);
  #line 836 
  rtl_write_byte(rtlpriv,1551U,(unsigned char)4);
  #line 838 
  i = (unsigned short)0U;
  #line 838 
  while ((int)i < (int)txpktbuf_bndy + -1) {
    #line 839 
    status = _rtl8821ae_llt_write(hw,(unsigned int)i,(unsigned int)((int)i + 1));
    #line 840 
    if (! status) 
                  #line 841 
                  return status;
    #line 838 
    i = (unsigned short)((int)i + 1);
  }
  #line 844 
  status = _rtl8821ae_llt_write(hw,(unsigned int)((int)txpktbuf_bndy + -1),255U);
  #line 845 
  if (! status) 
                #line 846 
                return status;
  #line 848 
  i = (unsigned short)txpktbuf_bndy;
  #line 848 
  while ((int)((unsigned short)maxpage) > (int)i) {
    #line 849 
    status = _rtl8821ae_llt_write(hw,(unsigned int)i,(unsigned int)((int)i + 1));
    #line 850 
    if (! status) 
                  #line 851 
                  return status;
    #line 848 
    i = (unsigned short)((int)i + 1);
  }
  #line 854 
  status = _rtl8821ae_llt_write(hw,(unsigned int)maxpage,(unsigned int)txpktbuf_bndy);
  #line 855 
  if (! status) 
                #line 856 
                return status;
  #line 858 
  rtl_write_dword(rtlpriv,512U,rqpn);
  #line 860 
  rtl_write_byte(rtlpriv,532U,(unsigned char)0);
  #line 862 
  return (_Bool)1;
}

#line 865  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
static void _rtl8821ae_gen_refresh_led_state(struct ieee80211_hw *hw)
{
  #line 867 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 868 
  struct rtl_ps_ctl *ppsc = & ((struct rtl_priv *)hw->priv)->psc;
  #line 869 
  struct rtl_led *pled0 = & rtlpriv->ledctl.sw_led0;
  #line 870 
  struct rtl_hal *rtlhal = & ((struct rtl_priv *)hw->priv)->rtlhal;
  #line 872 
  if ((int)rtlpriv->rtlhal.up_first_time != 0) 
                                               #line 873 
                                               return;
  #line 875 
  if (ppsc->rfoff_reason == 268435456U) 
    #line 876 
    if ((unsigned int)rtlhal->hw_type == 14U) 
                                              #line 877 
                                              rtl8812ae_sw_led_on(hw,pled0); else 
                                                                    #line 879 
                                                                    rtl8821ae_sw_led_on(hw,pled0);
  else 
    #line 880 
    if (ppsc->rfoff_reason == 0U) 
      #line 881 
      if ((unsigned int)rtlhal->hw_type == 14U) 
                                                #line 882 
                                                rtl8812ae_sw_led_on(hw,pled0); else 
                                                                    #line 884 
                                                                    rtl8821ae_sw_led_on(hw,pled0);
    else 
      #line 886 
      if ((unsigned int)rtlhal->hw_type == 14U) 
                                                #line 887 
                                                rtl8812ae_sw_led_off(hw,pled0); else 
                                                                    #line 889 
                                                                    rtl8821ae_sw_led_off(hw,pled0);
  #line 890 
  return;
}

#line 892  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
static bool _rtl8821ae_init_mac(struct ieee80211_hw *hw)
{
  #line 894 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 895 
  struct rtl_pci *rtlpci = & ((struct rtl_pci_priv *)(& ((struct rtl_priv *)hw->priv)->priv))->dev;
  #line 896 
  struct rtl_hal *rtlhal = & ((struct rtl_priv *)hw->priv)->rtlhal;
  #line 898 
  u8 bytetmp = (unsigned char)0U;
  #line 899 
  u16 wordtmp = (unsigned short)0U;
  #line 900 
  bool mac_func_enable = rtlhal->mac_func_enable;
  #line 902 
  rtl_write_byte(rtlpriv,28U,(unsigned char)0);
  #line 905 
  bytetmp = (unsigned char)((unsigned int)rtl_read_byte(rtlpriv,5U) & 127U);
  #line 906 
  rtl_write_byte(rtlpriv,5U,(unsigned char)((int)bytetmp));
  #line 908 
  if ((unsigned int)rtlhal->hw_type == 14U) {
    #line 910 
    if (! rtl_hal_pwrseqcmdparsing(rtlpriv,(unsigned char)255,
                                 (unsigned char)15,(unsigned char)4,
                                 (struct wlan_pwr_cfg *)(& rtl8812_card_enable_flow))) {
      #line 913 
      _rtl_dbg_trace(rtlpriv,4ULL,4,(char *)"init 8812 MAC Fail as power on failure\n");
      #line 915 
      return (_Bool)0;
    }
  }
  else {
    #line 919 
    if (! rtl_hal_pwrseqcmdparsing(rtlpriv,(unsigned char)2,(unsigned char)15,
                                 (unsigned char)4,
                                 (struct wlan_pwr_cfg *)(& rtl8821A_card_enable_flow))) {
      #line 922 
      _rtl_dbg_trace(rtlpriv,4ULL,4,(char *)"init 8821 MAC Fail as power on failure\n");
      #line 924 
      return (_Bool)0;
    }
  }
  #line 928 
  bytetmp = (unsigned char)((unsigned int)rtl_read_byte(rtlpriv,4U) | 16U);
  #line 929 
  rtl_write_byte(rtlpriv,4U,(unsigned char)((int)bytetmp));
  #line 931 
  bytetmp = rtl_read_byte(rtlpriv,256U);
  #line 932 
  bytetmp = (unsigned char)255U;
  #line 933 
  rtl_write_byte(rtlpriv,256U,(unsigned char)((int)bytetmp));
  #line 934 
  __const_udelay(8590000UL);
  #line 936 
  bytetmp = (unsigned char)255U;
  #line 937 
  rtl_write_byte(rtlpriv,1059U,(unsigned char)((int)bytetmp));
  #line 938 
  __const_udelay(8590000UL);
  #line 940 
  if ((unsigned int)rtlhal->hw_type == 13U) {
    #line 941 
    bytetmp = rtl_read_byte(rtlpriv,243U);
    #line 942 
    if (((unsigned long)bytetmp & 1UL) != 0UL) {
      #line 943 
      bytetmp = rtl_read_byte(rtlpriv,124U);
      #line 944 
      bytetmp = (unsigned char)((unsigned int)bytetmp | 64U);
      #line 945 
      rtl_write_byte(rtlpriv,124U,(unsigned char)((int)bytetmp));
    }
  }
  #line 949 
  bytetmp = rtl_read_byte(rtlpriv,65U);
  #line 950 
  bytetmp = (unsigned char)((unsigned int)bytetmp & 239U);
  #line 951 
  rtl_write_byte(rtlpriv,65U,(unsigned char)((int)bytetmp));
  #line 953 
  rtl_write_word(rtlpriv,256U,(unsigned short)767);
  #line 955 
  if (! mac_func_enable) {
    #line 956 
    if (! _rtl8821ae_llt_table_init(hw)) 
                                         #line 957 
                                         return (_Bool)0;
  }
  #line 960 
  rtl_write_dword(rtlpriv,180U,4294967295U);
  #line 961 
  rtl_write_dword(rtlpriv,188U,4294967295U);
  #line 964 
  bytetmp = rtl_read_byte(rtlpriv,307U);
  #line 965 
  rtl_write_byte(rtlpriv,307U,(unsigned char)((int)((unsigned int)bytetmp | 64U)));
  #line 967 
  wordtmp = rtl_read_word(rtlpriv,268U);
  #line 968 
  wordtmp = (unsigned short)((unsigned int)wordtmp & 15U);
  #line 969 
  wordtmp = (unsigned short)((unsigned int)wordtmp | 62897U);
  #line 970 
  rtl_write_word(rtlpriv,268U,(unsigned short)((int)wordtmp));
  #line 972 
  rtl_write_byte(rtlpriv,1057U,(unsigned char)31);
  #line 973 
  rtl_write_dword(rtlpriv,1544U,rtlpci->receive_config);
  #line 974 
  rtl_write_word(rtlpriv,1700U,(unsigned short)65535);
  #line 976 
  rtl_write_dword(rtlpriv,776U,(unsigned int)rtlpci->tx_ring[4].dma);
  #line 978 
  rtl_write_dword(rtlpriv,792U,(unsigned int)rtlpci->tx_ring[6].dma);
  #line 980 
  rtl_write_dword(rtlpriv,800U,(unsigned int)rtlpci->tx_ring[3].dma);
  #line 982 
  rtl_write_dword(rtlpriv,808U,(unsigned int)rtlpci->tx_ring[2].dma);
  #line 984 
  rtl_write_dword(rtlpriv,816U,(unsigned int)rtlpci->tx_ring[1].dma);
  #line 986 
  rtl_write_dword(rtlpriv,824U,(unsigned int)rtlpci->tx_ring[0].dma);
  #line 988 
  rtl_write_dword(rtlpriv,784U,(unsigned int)rtlpci->tx_ring[7].dma);
  #line 990 
  rtl_write_dword(rtlpriv,832U,(unsigned int)rtlpci->rx_ring[0].dma);
  #line 993 
  rtl_write_byte(rtlpriv,771U,(unsigned char)119);
  #line 995 
  rtl_write_dword(rtlpriv,772U,0U);
  #line 997 
  rtl_write_dword(rtlpriv,448U,0U);
  #line 999 
  rtl_write_byte(rtlpriv,1399U,(unsigned char)3);
  #line 1000 
  _rtl8821ae_gen_refresh_led_state(hw);
  #line 1002 
  return (_Bool)1;
}

#line 1005  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
static void _rtl8821ae_hw_configure(struct ieee80211_hw *hw)
{
  #line 1009 
  u32 reg_rrsr;
  #line 1007 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 1008 
  struct rtl_pci *rtlpci = & ((struct rtl_pci_priv *)(& ((struct rtl_priv *)hw->priv)->priv))->dev;
  #line 1011 
  reg_rrsr = 4095U;
  #line 1013 
  rtl_write_dword(rtlpriv,1088U,reg_rrsr);
  #line 1015 
  rtl_write_dword(rtlpriv,1096U,4294963200U);
  #line 1017 
  rtl_write_dword(rtlpriv,1104U,4190208U);
  #line 1019 
  rtl_write_dword(rtlpriv,1164U,21U);
  #line 1020 
  rtl_write_dword(rtlpriv,1168U,4190208U);
  #line 1022 
  rtl_write_dword(rtlpriv,1172U,21U);
  #line 1023 
  rtl_write_dword(rtlpriv,1176U,4291817472U);
  #line 1025 
  rtl_write_word(rtlpriv,1056U,(unsigned short)7936);
  #line 1026 
  rtl_write_byte(rtlpriv,1110U,(unsigned char)112);
  #line 1029 
  rtl_write_word(rtlpriv,1066U,(unsigned short)1799);
  #line 1032 
  rtl_write_dword(rtlpriv,1072U,16777216U);
  #line 1033 
  rtl_write_dword(rtlpriv,1076U,117835012U);
  #line 1034 
  rtl_write_dword(rtlpriv,1080U,16777216U);
  #line 1035 
  rtl_write_dword(rtlpriv,1084U,117835012U);
  #line 1037 
  rtlpci->reg_bcn_ctrl_val = 29U;
  #line 1038 
  rtl_write_byte(rtlpriv,1360U,(unsigned char)((int)((unsigned char)rtlpci->reg_bcn_ctrl_val)));
  #line 1041 
  rtl_write_byte(rtlpriv,1345U,(unsigned char)255);
  #line 1044 
  rtl_write_word(rtlpriv,1350U,(unsigned short)64);
  #line 1047 
  rtl_write_dword(rtlpriv,1120U,50882150U);
  #line 1049 
  rtl_write_byte(rtlpriv,1223U,(unsigned char)128);
  #line 1050 
  rtl_write_byte(rtlpriv,1548U,(unsigned char)32);
  #line 1051 
  rtl_write_word(rtlpriv,1226U,(unsigned short)7967);
  #line 1052 
  return;
}

#line 1054  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
static u16 _rtl8821ae_mdio_read(struct rtl_priv *rtlpriv, u8 addr)
{
  #line 1056 
  u16 ret = (unsigned short)0U;
  #line 1057 
  u8 tmp = (unsigned char)0U;
  #line 1057 
  u8 count = (unsigned char)0U;
  #line 1059 
  rtl_write_byte(rtlpriv,856U,(unsigned char)((int)((unsigned int)addr | 64U)));
  #line 1060 
  tmp = (unsigned char)((unsigned int)rtl_read_byte(rtlpriv,856U) & 64U);
  #line 1061 
  count = (unsigned char)0U;
  #line 1062 
  while ((unsigned int)tmp != 0U && (unsigned int)count <= 19U) {
    #line 1063 
    __const_udelay(42950UL);
    #line 1064 
    tmp = (unsigned char)((unsigned int)rtl_read_byte(rtlpriv,856U) & 64U);
    #line 1065 
    count = (u8)((int)count + 1);
  }
  #line 1067 
  if ((unsigned int)tmp == 0U) 
                               #line 1068 
                               ret = rtl_read_word(rtlpriv,854U);
  #line 1070 
  return ret;
}

#line 1073  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
static void _rtl8821ae_mdio_write(struct rtl_priv *rtlpriv, u8 addr, u16 data)
{
  #line 1075 
  u8 tmp = (unsigned char)0U;
  #line 1075 
  u8 count = (unsigned char)0U;
  #line 1077 
  rtl_write_word(rtlpriv,852U,(unsigned short)((int)data));
  #line 1078 
  rtl_write_byte(rtlpriv,856U,(unsigned char)((int)((unsigned int)addr | 32U)));
  #line 1079 
  tmp = (unsigned char)((unsigned int)rtl_read_byte(rtlpriv,856U) & 32U);
  #line 1080 
  count = (unsigned char)0U;
  #line 1081 
  while ((unsigned int)tmp != 0U && (unsigned int)count <= 19U) {
    #line 1082 
    __const_udelay(42950UL);
    #line 1083 
    tmp = (unsigned char)((unsigned int)rtl_read_byte(rtlpriv,856U) & 32U);
    #line 1084 
    count = (u8)((int)count + 1);
  }
  #line 1086 
  return;
}

#line 1088  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
static u8 _rtl8821ae_dbi_read(struct rtl_priv *rtlpriv, u16 addr)
{
  #line 1090 
  u16 read_addr = (unsigned short)((unsigned int)addr & 65532U);
  #line 1091 
  u8 tmp = (unsigned char)0U;
  #line 1091 
  u8 count = (unsigned char)0U;
  #line 1091 
  u8 ret = (unsigned char)0U;
  #line 1093 
  rtl_write_word(rtlpriv,848U,(unsigned short)((int)read_addr));
  #line 1094 
  rtl_write_byte(rtlpriv,850U,(unsigned char)2);
  #line 1095 
  tmp = rtl_read_byte(rtlpriv,850U);
  #line 1096 
  count = (unsigned char)0U;
  #line 1097 
  while ((unsigned int)tmp != 0U && (unsigned int)count <= 19U) {
    #line 1098 
    __const_udelay(42950UL);
    #line 1099 
    tmp = rtl_read_byte(rtlpriv,850U);
    #line 1100 
    count = (u8)((int)count + 1);
  }
  #line 1102 
  if ((unsigned int)tmp == 0U) {
    #line 1103 
    read_addr = (unsigned short)(((unsigned int)addr & 3U) + 844U);
    #line 1104 
    ret = rtl_read_byte(rtlpriv,(unsigned int)read_addr);
  }
  #line 1106 
  return ret;
}

#line 1109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
static void _rtl8821ae_dbi_write(struct rtl_priv *rtlpriv, u16 addr, u8 data)
{
  #line 1112 
  u16 write_addr;
  #line 1111 
  u8 tmp = (unsigned char)0U;
  #line 1111 
  u8 count = (unsigned char)0U;
  #line 1112 
  u16 remainder = (unsigned short)((unsigned int)addr & 3U);
  #line 1114 
  write_addr = (unsigned short)((unsigned int)remainder + 840U);
  #line 1115 
  rtl_write_byte(rtlpriv,(unsigned int)write_addr,(unsigned char)((int)data));
  #line 1117 
  write_addr = (unsigned short)(((unsigned int)addr & 65532U) | (unsigned int)((unsigned short)(1UL << ((int)remainder + 12))));
  #line 1118 
  rtl_write_word(rtlpriv,848U,(unsigned short)((int)write_addr));
  #line 1120 
  rtl_write_byte(rtlpriv,850U,(unsigned char)1);
  #line 1122 
  tmp = rtl_read_byte(rtlpriv,850U);
  #line 1123 
  count = (unsigned char)0U;
  #line 1124 
  while ((unsigned int)tmp != 0U && (unsigned int)count <= 19U) {
    #line 1125 
    __const_udelay(42950UL);
    #line 1126 
    tmp = rtl_read_byte(rtlpriv,850U);
    #line 1127 
    count = (u8)((int)count + 1);
  }
  #line 1129 
  return;
}

#line 1131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
static void _rtl8821ae_enable_aspm_back_door(struct ieee80211_hw *hw)
{
  #line 1135 
  u8 tmp;
  #line 1133 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 1134 
  struct rtl_hal *rtlhal = & ((struct rtl_priv *)hw->priv)->rtlhal;
  #line 1137 
  if ((unsigned int)rtlhal->hw_type == 13U) {
    #line 1138 
    if ((unsigned int)_rtl8821ae_mdio_read(rtlpriv,(unsigned char)4) != 34116U) 
      #line 1139 
      _rtl8821ae_mdio_write(rtlpriv,(unsigned char)4,(unsigned short)34116);
    #line 1141 
    if ((unsigned int)_rtl8821ae_mdio_read(rtlpriv,(unsigned char)11) != 112U) 
      #line 1142 
      _rtl8821ae_mdio_write(rtlpriv,(unsigned char)11,(unsigned short)112);
  }
  #line 1145 
  tmp = _rtl8821ae_dbi_read(rtlpriv,(unsigned short)1807);
  #line 1146 
  _rtl8821ae_dbi_write(rtlpriv,(unsigned short)1807,(unsigned char)((int)((unsigned int)tmp | 184U)));
  #line 1149 
  tmp = _rtl8821ae_dbi_read(rtlpriv,(unsigned short)1817);
  #line 1150 
  _rtl8821ae_dbi_write(rtlpriv,(unsigned short)1817,(unsigned char)((int)((unsigned int)tmp | 24U)));
  #line 1152 
  if ((unsigned int)rtlhal->hw_type == 14U) {
    #line 1153 
    tmp = _rtl8821ae_dbi_read(rtlpriv,(unsigned short)1816);
    #line 1154 
    _rtl8821ae_dbi_write(rtlpriv,(unsigned short)1816,(unsigned char)((int)((unsigned int)tmp | 16U)));
  }
  #line 1156 
  return;
}

#line 1158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
void rtl8821ae_enable_hw_security_config(struct ieee80211_hw *hw)
{
  #line 1161 
  u8 sec_reg_value;
  #line 1162 
  u8 tmp;
  #line 1160 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 1164 
  _rtl_dbg_trace(rtlpriv,4ULL,3,(char *)"PairwiseEncAlgorithm = %d GroupEncAlgorithm = %d\n",(unsigned int)rtlpriv->sec.pairwise_enc_algorithm,(unsigned int)rtlpriv->sec.group_enc_algorithm);
  #line 1169 
  if ((int)((rtlpriv->cfg)->mod_params)->sw_crypto != 0 || (int)rtlpriv->sec.use_sw_sec != 0) {
    #line 1170 
    _rtl_dbg_trace(rtlpriv,512ULL,3,(char *)"not open hw encryption\n");
    #line 1172 
    return;
  }
  #line 1175 
  sec_reg_value = (unsigned char)12U;
  #line 1177 
  if ((int)rtlpriv->sec.use_defaultkey != 0) {
    #line 1178 
    sec_reg_value = (unsigned char)((unsigned int)sec_reg_value | 1U);
    #line 1179 
    sec_reg_value = (unsigned char)((unsigned int)sec_reg_value | 2U);
  }
  #line 1182 
  sec_reg_value = (unsigned char)((unsigned int)sec_reg_value | 192U);
  #line 1184 
  tmp = rtl_read_byte(rtlpriv,257U);
  #line 1185 
  rtl_write_byte(rtlpriv,257U,(unsigned char)((int)((unsigned int)tmp | 2U)));
  #line 1187 
  _rtl_dbg_trace(rtlpriv,512ULL,3,(char *)"The SECR-value %x\n",(int)sec_reg_value);
  #line 1190 
  (*(((rtlpriv->cfg)->ops)->set_hw_reg))(hw,(unsigned char)27,& sec_reg_value);
  #line 1191 
  return;
}

#line 1200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
static void rtl8821ae_macid_initialize_mediastatus(struct ieee80211_hw *hw)
{
  #line 1202 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 1203 
  u8 media_rpt[4U] = {(unsigned char)1U, (unsigned char)1U, (unsigned char)1U, (unsigned char)3U};
  #line 1207 
  (*(((rtlpriv->cfg)->ops)->set_hw_reg))(hw,(unsigned char)63,(u8 *)(& media_rpt));
  #line 1210 
  _rtl_dbg_trace(rtlpriv,4ULL,4,(char *)"Initialize MacId media status: from %d to %d\n",1,3);
  #line 1211 
  return;
}

#line 1216  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
static bool _rtl8821ae_check_pcie_dma_hang(struct ieee80211_hw *hw)
{
  #line 1219 
  u8 tmp;
  #line 1218 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 1222 
  tmp = rtl_read_byte(rtlpriv,851U);
  #line 1223 
  if (((unsigned long)tmp & 4UL) == 0UL) {
    #line 1224 
    rtl_write_byte(rtlpriv,851U,(unsigned char)((int)((unsigned int)tmp | 4U)));
    {
      #line 1225 
      unsigned long __ms = 100UL;
      #line 1225 
      while (1) {
        #line 1225 
        unsigned long tmp_0;
        #line 1225 
        tmp_0 = __ms;
        #line 1225 
        __ms --;
        #line 1225 
        ;
        #line 1225 
        if (! (tmp_0 != 0UL)) 
                              #line 1225 
                              break;
        #line 1225 
        __const_udelay(4295000UL);
      }
    }
  }
  #line 1230 
  tmp = rtl_read_byte(rtlpriv,851U);
  #line 1231 
  if (((unsigned long)tmp & 1UL) != 0UL || ((unsigned long)tmp & 2UL) != 0UL) {
    #line 1232 
    _rtl_dbg_trace(rtlpriv,4ULL,4,(char *)"CheckPcieDMAHang8821AE(): true! Reset PCIE DMA!\n");
    #line 1234 
    return (_Bool)1;
  }
  else 
       #line 1236 
       return (_Bool)0;
}

#line 1240  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
static bool _rtl8821ae_reset_pcie_interface_dma(struct ieee80211_hw *hw, bool mac_power_on, bool in_watchdog)
{
  #line 1246 
  u8 tmp;
  #line 1247 
  bool release_mac_rx_pause;
  #line 1248 
  u8 backup_pcie_dma_pause;
  #line 1244 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 1245 
  struct rtl_hal *rtlhal = & ((struct rtl_priv *)hw->priv)->rtlhal;
  #line 1250 
  _rtl_dbg_trace(rtlpriv,4ULL,4,(char *)"\n");
  #line 1253 
  tmp = rtl_read_byte(rtlpriv,28U);
  #line 1254 
  tmp = (unsigned char)((unsigned int)tmp & 253U);
  #line 1255 
  rtl_write_byte(rtlpriv,28U,(unsigned char)((int)tmp));
  #line 1256 
  if ((unsigned int)rtlhal->hw_type == 13U) {
    #line 1258 
    tmp = rtl_read_byte(rtlpriv,204U);
    #line 1259 
    tmp = (unsigned char)((unsigned int)tmp | 4U);
    #line 1260 
    rtl_write_byte(rtlpriv,204U,(unsigned char)((int)tmp));
  }
  #line 1266 
  tmp = rtl_read_byte(rtlpriv,646U);
  #line 1267 
  if (((unsigned long)tmp & 4UL) != 0UL) 
                                         #line 1269 
                                         release_mac_rx_pause = (_Bool)0;
  else {
    #line 1271 
    rtl_write_byte(rtlpriv,646U,(unsigned char)((int)((unsigned int)tmp | 4U)));
    #line 1272 
    release_mac_rx_pause = (_Bool)1;
  }
  #line 1274 
  backup_pcie_dma_pause = rtl_read_byte(rtlpriv,769U);
  #line 1275 
  if ((unsigned int)backup_pcie_dma_pause != 255U) 
                                                   #line 1276 
                                                   rtl_write_byte(rtlpriv,769U,(unsigned char)255);
  #line 1278 
  if ((int)mac_power_on != 0) 
                              #line 1281 
                              rtl_write_byte(rtlpriv,256U,(unsigned char)0);
  #line 1285 
  tmp = rtl_read_byte(rtlpriv,3U);
  #line 1286 
  tmp = (unsigned char)((unsigned int)tmp & 254U);
  #line 1287 
  rtl_write_byte(rtlpriv,3U,(unsigned char)((int)tmp));
  #line 1290 
  tmp = rtl_read_byte(rtlpriv,3U);
  #line 1291 
  tmp = (unsigned char)((unsigned int)tmp | 1U);
  #line 1292 
  rtl_write_byte(rtlpriv,3U,(unsigned char)((int)tmp));
  #line 1294 
  if ((int)mac_power_on != 0) 
                              #line 1297 
                              rtl_write_byte(rtlpriv,256U,(unsigned char)255);
  #line 1306 
  if ((unsigned int)rtlhal->hw_type == 13U) {
    #line 1308 
    tmp = rtl_read_byte(rtlpriv,250U);
    #line 1309 
    tmp = (unsigned char)((unsigned int)tmp | 2U);
    #line 1310 
    rtl_write_byte(rtlpriv,250U,(unsigned char)((int)tmp));
  }
  #line 1317 
  if (! mac_power_on) {
    #line 1321 
    if ((int)release_mac_rx_pause != 0) {
      #line 1322 
      tmp = rtl_read_byte(rtlpriv,646U);
      #line 1323 
      rtl_write_byte(rtlpriv,646U,(unsigned char)((int)tmp & 251));
    }
    #line 1326 
    rtl_write_byte(rtlpriv,769U,(unsigned char)((int)backup_pcie_dma_pause));
  }
  #line 1330 
  if ((unsigned int)rtlhal->hw_type == 13U) {
    #line 1333 
    tmp = rtl_read_byte(rtlpriv,204U);
    #line 1334 
    tmp = (unsigned char)((unsigned int)tmp & 251U);
    #line 1335 
    rtl_write_byte(rtlpriv,204U,(unsigned char)((int)tmp));
  }
  #line 1337 
  return (_Bool)1;
}

#line 1340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
static void _rtl8821ae_get_wakeup_reason(struct ieee80211_hw *hw)
{
  #line 1342 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 1343 
  struct rtl_hal *rtlhal = & ((struct rtl_priv *)hw->priv)->rtlhal;
  #line 1344 
  struct rtl_ps_ctl *ppsc = & rtlpriv->psc;
  #line 1345 
  u8 fw_reason = (unsigned char)0U;
  #line 1347 
  fw_reason = rtl_read_byte(rtlpriv,455U);
  #line 1349 
  _rtl_dbg_trace(rtlpriv,65536ULL,4,(char *)"WOL Read 0x1c7 = %02X\n",(int)fw_reason);
  #line 1352 
  ppsc->wakeup_reason = 0U;
  #line 1354 
  rtlhal->last_suspend_sec = ktime_get_real_seconds();
  #line 1356 
  switch ((int)fw_reason) {
    #line 1357 
    case 1: 
            #line 1357 
    ;
    #line 1358 
    ppsc->wakeup_reason = 1U;
    #line 1359 
    _rtl_dbg_trace(rtlpriv,65536ULL,3,(char *)"It\'s a WOL PTK Key update event!\n");
    #line 1361 
    break;
    #line 1362 
    case 2: 
            #line 1362 
    ;
    #line 1363 
    ppsc->wakeup_reason = 2U;
    #line 1364 
    _rtl_dbg_trace(rtlpriv,65536ULL,3,(char *)"It\'s a WOL GTK Key update event!\n");
    #line 1366 
    break;
    #line 1367 
    case 4: 
            #line 1367 
    ;
    #line 1368 
    ppsc->wakeup_reason = 4U;
    #line 1369 
    _rtl_dbg_trace(rtlpriv,65536ULL,3,(char *)"It\'s a disassociation event!\n");
    #line 1371 
    break;
    #line 1372 
    case 8: 
            #line 1372 
    ;
    #line 1373 
    ppsc->wakeup_reason = 8U;
    #line 1374 
    _rtl_dbg_trace(rtlpriv,65536ULL,3,(char *)"It\'s a deauth event!\n");
    #line 1376 
    break;
    #line 1377 
    case 16: 
             #line 1377 
    ;
    #line 1378 
    ppsc->wakeup_reason = 16U;
    #line 1379 
    _rtl_dbg_trace(rtlpriv,65536ULL,3,(char *)"It\'s a Fw disconnect decision (AP lost) event!\n");
    #line 1381 
    break;
    #line 1382 
    case 33: 
             #line 1382 
    ;
    #line 1383 
    ppsc->wakeup_reason = 32U;
    #line 1384 
    _rtl_dbg_trace(rtlpriv,65536ULL,3,(char *)"It\'s a magic packet event!\n");
    #line 1386 
    break;
    #line 1387 
    case 34: 
             #line 1387 
    ;
    #line 1388 
    ppsc->wakeup_reason = 64U;
    #line 1389 
    _rtl_dbg_trace(rtlpriv,65536ULL,3,(char *)"It\'s an unicast packet event!\n");
    #line 1391 
    break;
    #line 1392 
    case 35: 
             #line 1392 
    ;
    #line 1393 
    ppsc->wakeup_reason = 128U;
    #line 1394 
    _rtl_dbg_trace(rtlpriv,65536ULL,3,(char *)"It\'s a pattern match event!\n");
    #line 1396 
    break;
    #line 1397 
    case 36: 
             #line 1397 
    ;
    #line 1398 
    ppsc->wakeup_reason = 256U;
    #line 1399 
    _rtl_dbg_trace(rtlpriv,65536ULL,3,(char *)"It\'s an RTD3 Ssid match event!\n");
    #line 1401 
    break;
    #line 1402 
    case 48: 
             #line 1402 
    ;
    #line 1403 
    ppsc->wakeup_reason = 512U;
    #line 1404 
    _rtl_dbg_trace(rtlpriv,65536ULL,3,(char *)"It\'s an RealWoW wake packet event!\n");
    #line 1406 
    break;
    #line 1407 
    case 49: 
             #line 1407 
    ;
    #line 1408 
    ppsc->wakeup_reason = 1024U;
    #line 1409 
    _rtl_dbg_trace(rtlpriv,65536ULL,3,(char *)"It\'s an RealWoW ack lost event!\n");
    #line 1411 
    break;
    #line 1412 
    default: 
             #line 1412 
    ;
    #line 1413 
    _rtl_dbg_trace(rtlpriv,65536ULL,3,(char *)"WOL Read 0x1c7 = %02X, Unknown reason!\n",(int)fw_reason);
    #line 1416 
    break;
  }
  #line 1418 
  return;
}

#line 1420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
static void _rtl8821ae_init_trx_desc_hw_address(struct ieee80211_hw *hw)
{
  #line 1422 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 1423 
  struct rtl_pci *rtlpci = & ((struct rtl_pci_priv *)(& ((struct rtl_priv *)hw->priv)->priv))->dev;
  #line 1426 
  rtl_write_dword(rtlpriv,776U,(unsigned int)rtlpci->tx_ring[4].dma);
  #line 1428 
  rtl_write_dword(rtlpriv,792U,(unsigned int)rtlpci->tx_ring[6].dma);
  #line 1430 
  rtl_write_dword(rtlpriv,800U,(unsigned int)rtlpci->tx_ring[3].dma);
  #line 1432 
  rtl_write_dword(rtlpriv,808U,(unsigned int)rtlpci->tx_ring[2].dma);
  #line 1434 
  rtl_write_dword(rtlpriv,816U,(unsigned int)rtlpci->tx_ring[1].dma);
  #line 1436 
  rtl_write_dword(rtlpriv,824U,(unsigned int)rtlpci->tx_ring[0].dma);
  #line 1438 
  rtl_write_dword(rtlpriv,784U,(unsigned int)rtlpci->tx_ring[7].dma);
  #line 1440 
  rtl_write_dword(rtlpriv,832U,(unsigned int)rtlpci->rx_ring[0].dma);
  #line 1442 
  return;
}

#line 1444  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
static bool _rtl8821ae_init_llt_table(struct ieee80211_hw *hw, u32 boundary)
{
  #line 1447 
  u32 i;
  #line 1446 
  bool status = (_Bool)1;
  #line 1448 
  u32 txpktbuf_bndy = boundary;
  #line 1449 
  u32 last_entry_of_txpktbuf = 255U;
  #line 1451 
  i = 0U;
  #line 1451 
  while (txpktbuf_bndy + 4294967295U > i) {
    #line 1452 
    status = _rtl8821ae_llt_write(hw,i,i + 1U);
    #line 1453 
    if (! status) 
                  #line 1454 
                  return status;
    #line 1451 
    i ++;
  }
  #line 1457 
  status = _rtl8821ae_llt_write(hw,txpktbuf_bndy + 4294967295U,255U);
  #line 1458 
  if (! status) 
                #line 1459 
                return status;
  #line 1461 
  i = txpktbuf_bndy;
  #line 1461 
  while (i < last_entry_of_txpktbuf) {
    #line 1462 
    status = _rtl8821ae_llt_write(hw,i,i + 1U);
    #line 1463 
    if (! status) 
                  #line 1464 
                  return status;
    #line 1461 
    i ++;
  }
  #line 1467 
  status = _rtl8821ae_llt_write(hw,last_entry_of_txpktbuf,txpktbuf_bndy);
  #line 1469 
  if (! status) 
                #line 1470 
                return status;
  #line 1472 
  return status;
}

#line 1475  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
static bool _rtl8821ae_dynamic_rqpn(struct ieee80211_hw *hw, u32 boundary, u16 npq_rqpn_value, u32 rqpn_val)
{
  #line 1479 
  u8 tmp;
  #line 1481 
  u16 tmp16;
  #line 1482 
  bool support_remote_wakeup;
  #line 1478 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 1480 
  bool ret = (_Bool)1;
  #line 1481 
  u16 count = (unsigned short)0U;
  #line 1484 
  (*(((rtlpriv->cfg)->ops)->get_hw_reg))(hw,(unsigned char)92,(u8 *)(& support_remote_wakeup));
  #line 1487 
  _rtl_dbg_trace(rtlpriv,4ULL,4,(char *)"boundary=%#X, NPQ_RQPNValue=%#X, RQPNValue=%#X\n",boundary,(int)npq_rqpn_value,rqpn_val);
  #line 1493 
  rtl_write_byte(rtlpriv,769U,(unsigned char)254);
  #line 1497 
  tmp16 = rtl_read_word(rtlpriv,1050U);
  #line 1498 
  while (((int)tmp16 & 2047) != 2047) {
    #line 1499 
    __const_udelay(429500UL);
    #line 1500 
    tmp16 = rtl_read_word(rtlpriv,1050U);
    #line 1501 
    count = (u16)((int)count + 1);
    #line 1502 
    if ((unsigned int)count % 200U == 0U) 
                                          #line 1503 
                                          _rtl_dbg_trace(rtlpriv,4ULL,4,(char *)"Tx queue is not empty for 20ms!\n");
    #line 1506 
    if ((unsigned int)count > 999U) {
      #line 1507 
      _rtl_dbg_trace(rtlpriv,4ULL,4,(char *)"Wait for Tx FIFO empty timeout!\n");
      #line 1509 
      break;
    }
  }
  #line 1515 
  rtl_write_byte(rtlpriv,1314U,(unsigned char)255);
  #line 1519 
  count = (unsigned short)0U;
  #line 1520 
  while (1) {
    #line 1520 
    if (! ((unsigned int)rtl_read_byte(rtlpriv,1528U) != 0U)) 
                                                              #line 1520 
                                                              break;
    #line 1521 
    __const_udelay(429500UL);
    #line 1522 
    count = (u16)((int)count + 1);
    #line 1523 
    if ((unsigned int)count > 499U) {
      #line 1524 
      _rtl_dbg_trace(rtlpriv,4ULL,4,(char *)"Wait for TX State Machine ready timeout !!\n");
      #line 1526 
      break;
    }
  }
  #line 1534 
  count = (unsigned short)0U;
  #line 1535 
  tmp = rtl_read_byte(rtlpriv,646U);
  #line 1536 
  rtl_write_byte(rtlpriv,646U,(unsigned char)((int)((unsigned int)tmp | 4U)));
  #line 1537 
  while (1) {
    #line 1538 
    tmp = rtl_read_byte(rtlpriv,646U);
    #line 1539 
    __const_udelay(42950UL);
    #line 1540 
    count = (u16)((int)count + 1);
    #line 1541 
    if (! (((unsigned long)tmp & 2UL) == 0UL && (unsigned int)count <= 99U)) 
      #line 1537 
      break;
  }
  #line 1543 
  _rtl_dbg_trace(rtlpriv,4ULL,4,(char *)"Wait until Rx DMA Idle. count=%d REG[0x286]=0x%x\n",(int)count,(int)tmp);
  #line 1549 
  tmp = rtl_read_byte(rtlpriv,2U);
  #line 1550 
  tmp = (unsigned char)((unsigned int)tmp & 254U);
  #line 1551 
  rtl_write_byte(rtlpriv,2U,(unsigned char)((int)tmp));
  #line 1556 
  rtl_write_byte(rtlpriv,256U,(unsigned char)0);
  #line 1557 
  __const_udelay(4295000UL);
  #line 1561 
  tmp = rtl_read_byte(rtlpriv,257U);
  #line 1562 
  tmp = (unsigned char)((unsigned int)tmp & 253U);
  #line 1563 
  rtl_write_byte(rtlpriv,257U,(unsigned char)((int)tmp));
  #line 1567 
  tmp = rtl_read_byte(rtlpriv,1363U);
  #line 1568 
  rtl_write_byte(rtlpriv,1363U,(unsigned char)((int)((unsigned int)tmp | 32U)));
  #line 1572 
  tmp = rtl_read_byte(rtlpriv,257U);
  #line 1573 
  rtl_write_byte(rtlpriv,257U,(unsigned char)((int)((unsigned int)tmp | 2U)));
  #line 1578 
  rtl_write_byte(rtlpriv,256U,(unsigned char)255);
  #line 1579 
  __const_udelay(4295000UL);
  #line 1583 
  tmp = rtl_read_byte(rtlpriv,2U);
  #line 1584 
  rtl_write_byte(rtlpriv,2U,(unsigned char)((int)((unsigned int)tmp | 1U)));
  #line 1588 
  rtl_write_byte(rtlpriv,521U,(unsigned char)((int)((unsigned char)boundary)));
  #line 1589 
  rtl_write_byte(rtlpriv,1060U,(unsigned char)((int)((unsigned char)boundary)));
  #line 1590 
  rtl_write_byte(rtlpriv,1061U,(unsigned char)((int)((unsigned char)boundary)));
  #line 1594 
  rtl_write_byte(rtlpriv,1117U,(unsigned char)((int)((unsigned char)boundary)));
  #line 1597 
  rtl_write_word(rtlpriv,276U,(unsigned short)((int)((unsigned short)boundary)));
  #line 1601 
  if (! _rtl8821ae_init_llt_table(hw,boundary)) {
    #line 1602 
    _rtl_dbg_trace(rtlpriv,4ULL,2,(char *)"Failed to init LLT table!\n");
    #line 1604 
    return (_Bool)0;
  }
  #line 1609 
  rtl_write_word(rtlpriv,532U,(unsigned short)((int)npq_rqpn_value));
  #line 1610 
  rtl_write_dword(rtlpriv,512U,rqpn_val);
  #line 1614 
  rtl_write_byte(rtlpriv,1314U,(unsigned char)0);
  #line 1619 
  rtl_write_byte(rtlpriv,769U,(unsigned char)0);
  #line 1620 
  tmp = rtl_read_byte(rtlpriv,646U);
  #line 1621 
  rtl_write_byte(rtlpriv,646U,(unsigned char)((int)tmp & 251));
  #line 1623 
  _rtl_dbg_trace(rtlpriv,4ULL,4,(char *)"End.\n");
  #line 1624 
  return ret;
}

#line 1627  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
static void _rtl8821ae_simple_initialize_adapter(struct ieee80211_hw *hw)
{
  #line 1629 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 1630 
  struct rtl_hal *rtlhal = & rtlpriv->rtlhal;
  #line 1631 
  struct rtl_ps_ctl *ppsc = & rtlpriv->psc;
  #line 1635 
  rtl8821ae_set_fw_related_for_wowlan(hw,(_Bool)0);
  #line 1639 
  if ((int)rtlhal->re_init_llt_table != 0) {
    #line 1640 
    u32 rqpn = 2162624520U;
    #line 1641 
    u8 rqpn_npq = (unsigned char)0U;
    #line 1641 
    u8 boundary = (unsigned char)248U;
    #line 1642 
    if ((unsigned int)rtlhal->hw_type == 14U) {
      #line 1643 
      rqpn = 2162755592U;
      #line 1644 
      boundary = (unsigned char)250U;
    }
    #line 1646 
    if ((int)_rtl8821ae_dynamic_rqpn(hw,(unsigned int)boundary,
                              (unsigned short)((int)rqpn_npq),rqpn) != 0) 
      #line 1647 
      rtlhal->re_init_llt_table = (_Bool)0;
  }
  #line 1650 
  ppsc->rfpwr_state = ERFON;
  #line 1651 
  return;
}

#line 1653  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
static void _rtl8821ae_enable_l1off(struct ieee80211_hw *hw)
{
  #line 1655 
  u8 tmp = (unsigned char)0U;
  #line 1656 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 1658 
  _rtl_dbg_trace(rtlpriv,4ULL,4,(char *)"--->\n");
  #line 1660 
  tmp = _rtl8821ae_dbi_read(rtlpriv,(unsigned short)352);
  #line 1661 
  if (((unsigned long)tmp & 12UL) == 0UL) {
    #line 1662 
    _rtl_dbg_trace(rtlpriv,65540ULL,4,(char *)"0x160(%#x)return!!\n",(int)tmp);
    #line 1664 
    return;
  }
  #line 1667 
  tmp = (unsigned char)_rtl8821ae_mdio_read(rtlpriv,(unsigned char)27);
  #line 1668 
  _rtl8821ae_mdio_write(rtlpriv,(unsigned char)27,(unsigned short)((int)((unsigned int)tmp | 16U)));
  #line 1670 
  tmp = _rtl8821ae_dbi_read(rtlpriv,(unsigned short)1816);
  #line 1671 
  _rtl8821ae_dbi_write(rtlpriv,(unsigned short)1816,(unsigned char)((int)((unsigned int)tmp | 32U)));
  #line 1673 
  _rtl_dbg_trace(rtlpriv,4ULL,4,(char *)"<---\n");
  #line 1674 
  return;
}

#line 1676  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
static void _rtl8821ae_enable_ltr(struct ieee80211_hw *hw)
{
  #line 1678 
  u8 tmp = (unsigned char)0U;
  #line 1679 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 1681 
  _rtl_dbg_trace(rtlpriv,4ULL,4,(char *)"--->\n");
  #line 1684 
  tmp = _rtl8821ae_dbi_read(rtlpriv,(unsigned short)153);
  #line 1685 
  if (((unsigned long)tmp & 4UL) == 0UL) {
    #line 1686 
    _rtl_dbg_trace(rtlpriv,4ULL,4,(char *)"<---0x99(%#x) return!!\n",(int)tmp);
    #line 1688 
    return;
  }
  #line 1692 
  rtl_write_dword(rtlpriv,1944U,2291173520U);
  #line 1695 
  rtl_write_dword(rtlpriv,1948U,2285668412U);
  #line 1697 
  tmp = rtl_read_byte(rtlpriv,1956U);
  #line 1698 
  rtl_write_byte(rtlpriv,1956U,(unsigned char)((int)((unsigned int)tmp | 16U)));
  #line 1700 
  tmp = rtl_read_byte(rtlpriv,1956U);
  #line 1701 
  rtl_write_byte(rtlpriv,1956U,(unsigned char)((int)tmp & 254));
  #line 1702 
  rtl_write_byte(rtlpriv,1956U,(unsigned char)((int)((unsigned int)tmp | 1U)));
  #line 1704 
  _rtl_dbg_trace(rtlpriv,4ULL,4,(char *)"<---\n");
  #line 1705 
  return;
}

#line 1707  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
static bool _rtl8821ae_wowlan_initialize_adapter(struct ieee80211_hw *hw)
{
  #line 1709 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 1710 
  struct rtl_hal *rtlhal = & rtlpriv->rtlhal;
  #line 1711 
  bool init_finished = (_Bool)1;
  #line 1712 
  u8 tmp = (unsigned char)0U;
  #line 1715 
  _rtl8821ae_get_wakeup_reason(hw);
  #line 1719 
  if ((int)_rtl8821ae_check_pcie_dma_hang(hw) != 0) 
                                                    #line 1720 
                                                    _rtl8821ae_reset_pcie_interface_dma(hw,(_Bool)1,(_Bool)0);
  #line 1723 
  _rtl8821ae_init_trx_desc_hw_address(hw);
  #line 1726 
  rtl_write_byte(rtlpriv,769U,(unsigned char)254);
  #line 1727 
  _rtl_dbg_trace(rtlpriv,65536ULL,4,(char *)"Enable PCIE Rx DMA.\n");
  #line 1732 
  tmp = rtl_read_byte(rtlpriv,319U);
  #line 1733 
  _rtl_dbg_trace(rtlpriv,65536ULL,4,(char *)"Read REG_FTISR 0x13f = %#X\n",(int)tmp);
  #line 1737 
  rtl8821ae_set_fw_wowlan_mode(hw,(_Bool)0);
  #line 1738 
  rtl8821ae_set_fw_remote_wake_ctrl_cmd(hw,(unsigned char)0);
  #line 1740 
  if ((unsigned int)rtlhal->hw_rof_enable != 0U) {
    #line 1741 
    tmp = rtl_read_byte(rtlpriv,95U);
    #line 1742 
    if (((unsigned long)tmp & 2UL) != 0UL) {
      #line 1744 
      rtl_write_byte(rtlpriv,95U,(unsigned char)((int)((unsigned int)tmp | 2U)));
      #line 1745 
      init_finished = (_Bool)0;
    }
    else 
         #line 1747 
         init_finished = (_Bool)1;
  }
  #line 1751 
  if ((int)init_finished != 0) {
    #line 1752 
    _rtl8821ae_simple_initialize_adapter(hw);
    #line 1755 
    rtl_write_byte(rtlpriv,769U,(unsigned char)0);
    #line 1757 
    rtl_write_byte(rtlpriv,646U,(unsigned char)2);
    #line 1759 
    tmp = rtl_read_byte(rtlpriv,257U);
    #line 1760 
    rtl_write_byte(rtlpriv,257U,(unsigned char)((int)tmp & 254));
    #line 1762 
    _rtl8821ae_enable_l1off(hw);
    #line 1763 
    _rtl8821ae_enable_ltr(hw);
  }
  #line 1766 
  return init_finished;
}

#line 1769  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
static void _rtl8812ae_bb8812_config_1t(struct ieee80211_hw *hw)
{
  #line 1772 
  rtl_set_bbreg(hw,2056U,255U,17U);
  #line 1774 
  rtl_set_bbreg(hw,2060U,65535U,4369U);
  #line 1776 
  rtl_set_bbreg(hw,2564U,201326592U,0U);
  #line 1778 
  rtl_set_bbreg(hw,2236U,3221225568U,4U);
  #line 1780 
  rtl_set_bbreg(hw,3584U,15U,4U);
  #line 1782 
  rtl_set_bbreg(hw,3728U,4294967295U,0U);
  #line 1784 
  rtl_set_bbreg(hw,3680U,4294967295U,0U);
  #line 1785 
  rtl_set_bbreg(hw,3684U,4294967295U,0U);
  #line 1786 
  return;
}

#line 1788  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
static void _rtl8821ae_poweroff_adapter(struct ieee80211_hw *hw)
{
  #line 1792 
  u8 u1b_tmp;
  #line 1790 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 1791 
  struct rtl_hal *rtlhal = & ((struct rtl_priv *)hw->priv)->rtlhal;
  #line 1794 
  rtlhal->mac_func_enable = (_Bool)0;
  #line 1796 
  if ((unsigned int)rtlhal->hw_type == 13U) 
                                            #line 1802 
                                            rtl_hal_pwrseqcmdparsing(rtlpriv,(unsigned char)255,(unsigned char)15,(unsigned char)4,(struct wlan_pwr_cfg *)(& rtl8821A_enter_lps_flow));
  #line 1809 
  if (((unsigned long)rtl_read_byte(rtlpriv,128U) & 128UL) != 0UL) 
    #line 1809 
    if ((int)rtlhal->fw_ready != 0) 
                                    #line 1811 
                                    rtl8821ae_firmware_selfreset(hw);
  #line 1815 
  u1b_tmp = rtl_read_byte(rtlpriv,3U);
  #line 1816 
  rtl_write_byte(rtlpriv,3U,(unsigned char)((int)u1b_tmp & 251));
  #line 1820 
  rtl_write_byte(rtlpriv,128U,(unsigned char)0);
  #line 1822 
  if ((unsigned int)rtlhal->hw_type == 13U) 
                                            #line 1824 
                                            rtl_hal_pwrseqcmdparsing(rtlpriv,(unsigned char)255,(unsigned char)15,(unsigned char)4,(struct wlan_pwr_cfg *)(& rtl8821A_card_disable_flow)); else 
                                                                    #line 1828 
                                                                    rtl_hal_pwrseqcmdparsing(rtlpriv,(unsigned char)255,(unsigned char)15,(unsigned char)4,(struct wlan_pwr_cfg *)(& rtl8812_card_disable_flow));
  #line 1833 
  u1b_tmp = rtl_read_byte(rtlpriv,29U);
  #line 1834 
  rtl_write_byte(rtlpriv,29U,(unsigned char)((int)u1b_tmp & 254));
  #line 1835 
  u1b_tmp = rtl_read_byte(rtlpriv,29U);
  #line 1836 
  rtl_write_byte(rtlpriv,29U,(unsigned char)((int)((unsigned int)u1b_tmp | 1U)));
  #line 1840 
  rtl_write_byte(rtlpriv,28U,(unsigned char)14);
  #line 1841 
  return;
}

#line 1843  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
int rtl8821ae_hw_init(struct ieee80211_hw *hw)
{
  #line 1850 
  int err;
  #line 1851 
  u8 tmp_u1b;
  #line 1852 
  bool support_remote_wakeup;
  #line 1845 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 1846 
  struct rtl_hal *rtlhal = & ((struct rtl_priv *)hw->priv)->rtlhal;
  #line 1847 
  struct rtl_mac *mac = & ((struct rtl_priv *)hw->priv)->mac80211;
  #line 1848 
  struct rtl_ps_ctl *ppsc = & ((struct rtl_priv *)hw->priv)->psc;
  #line 1849 
  bool rtstatus = (_Bool)1;
  #line 1853 
  u32 nav_upper = 30000U;
  #line 1855 
  rtlhal->being_init_adapter = (_Bool)1;
  #line 1856 
  (*(((rtlpriv->cfg)->ops)->get_hw_reg))(hw,(unsigned char)92,(u8 *)(& support_remote_wakeup));
  #line 1858 
  (*((rtlpriv->intf_ops)->disable_aspm))(hw);
  #line 1862 
  tmp_u1b = rtl_read_byte(rtlpriv,256U);
  #line 1863 
  if ((unsigned int)tmp_u1b != 0U && (unsigned int)tmp_u1b != 234U) {
    #line 1864 
    rtlhal->mac_func_enable = (_Bool)1;
    #line 1865 
    _rtl_dbg_trace(rtlpriv,4ULL,4,(char *)"MAC has already power on.\n");
  }
  else {
    #line 1868 
    rtlhal->mac_func_enable = (_Bool)0;
    #line 1869 
    rtlhal->fw_ps_state = (unsigned char)0U;
  }
  #line 1872 
  if (((int)support_remote_wakeup != 0 && (int)rtlhal->wake_from_pnp_sleep != 0) && (int)rtlhal->mac_func_enable != 0) {
    #line 1875 
    if ((int)_rtl8821ae_wowlan_initialize_adapter(hw) != 0) {
      #line 1876 
      rtlhal->being_init_adapter = (_Bool)0;
      #line 1877 
      return 0;
    }
  }
  #line 1881 
  if ((int)_rtl8821ae_check_pcie_dma_hang(hw) != 0) {
    #line 1882 
    _rtl8821ae_reset_pcie_interface_dma(hw,(_Bool)((bool)((int)rtlhal->mac_func_enable) != 0),(_Bool)0);
    #line 1885 
    rtlhal->mac_func_enable = (_Bool)0;
  }
  #line 1892 
  if ((int)rtlhal->mac_func_enable != 0) {
    #line 1893 
    _rtl8821ae_poweroff_adapter(hw);
    #line 1894 
    rtlhal->mac_func_enable = (_Bool)0;
  }
  #line 1897 
  rtstatus = _rtl8821ae_init_mac(hw);
  #line 1898 
  if (! rtstatus) {
    #line 1899 
    printk((char *)"\001");
    #line 1900 
    err = 1;
    #line 1901 
    return err;
  }
  #line 1904 
  tmp_u1b = rtl_read_byte(rtlpriv,240U);
  #line 1905 
  tmp_u1b = (unsigned char)((unsigned int)tmp_u1b & 127U);
  #line 1906 
  rtl_write_byte(rtlpriv,240U,(unsigned char)((int)tmp_u1b));
  #line 1908 
  err = rtl8821ae_download_fw(hw,(_Bool)0);
  #line 1909 
  if (err != 0) {
    #line 1910 
    _rtl_dbg_trace(rtlpriv,1ULL,2,(char *)"Failed to download FW. Init HW without FW now\n");
    #line 1912 
    err = 1;
    #line 1913 
    rtlhal->fw_ready = (_Bool)0;
    #line 1914 
    return err;
  }
  else 
       #line 1916 
       rtlhal->fw_ready = (_Bool)1;
  #line 1918 
  ppsc->fw_current_inpsmode = (_Bool)0;
  #line 1919 
  rtlhal->fw_ps_state = (unsigned char)0U;
  #line 1920 
  rtlhal->fw_clk_change_in_progress = (_Bool)0;
  #line 1921 
  rtlhal->allow_sw_to_change_hwclc = (_Bool)0;
  #line 1922 
  rtlhal->last_hmeboxnum = (unsigned char)0U;
  #line 1928 
  rtl8821ae_phy_mac_config(hw);
  #line 1936 
  rtl8821ae_phy_bb_config(hw);
  #line 1938 
  rtl8821ae_phy_rf_config(hw);
  #line 1940 
  if ((unsigned int)rtlpriv->phy.rf_type == 0U && (unsigned int)rtlhal->hw_type == 14U) 
    #line 1942 
    _rtl8812ae_bb8812_config_1t(hw);
  #line 1944 
  _rtl8821ae_hw_configure(hw);
  #line 1946 
  rtl8821ae_phy_switch_wirelessband(hw,(unsigned char)0);
  #line 1950 
  rtlhal->mac_func_enable = (_Bool)1;
  #line 1952 
  rtl_cam_reset_all_entry(hw);
  #line 1954 
  rtl8821ae_enable_hw_security_config(hw);
  #line 1956 
  ppsc->rfpwr_state = ERFON;
  #line 1958 
  (*(((rtlpriv->cfg)->ops)->set_hw_reg))(hw,(unsigned char)0,(u8 *)(& mac->mac_addr));
  #line 1959 
  _rtl8821ae_enable_aspm_back_door(hw);
  #line 1960 
  (*((rtlpriv->intf_ops)->enable_aspm))(hw);
  #line 1962 
  if ((unsigned int)rtlhal->hw_type == 14U && ((unsigned int)rtlhal->rfe_type == 1U || (unsigned int)rtlhal->rfe_type == 5U)) 
    #line 1964 
    rtl_set_bbreg(hw,2304U,771U,770U);
  #line 1966 
  rtl8821ae_bt_hw_init(hw);
  #line 1967 
  rtlpriv->rtlhal.being_init_adapter = (_Bool)0;
  #line 1969 
  (*(((rtlpriv->cfg)->ops)->set_hw_reg))(hw,(unsigned char)95,(u8 *)(& nav_upper));
  #line 1973 
  if ((int)support_remote_wakeup != 0) 
                                       #line 1974 
                                       rtl_write_byte(rtlpriv,1680U,(unsigned char)0);
  #line 1977 
  tmp_u1b = rtl_read_byte(rtlpriv,646U);
  #line 1978 
  if (((unsigned long)tmp_u1b & 4UL) != 0UL) {
    #line 1980 
    tmp_u1b = (unsigned char)((unsigned int)tmp_u1b & 251U);
    #line 1981 
    rtl_write_byte(rtlpriv,646U,(unsigned char)((int)tmp_u1b));
  }
  #line 1985 
  rtl_write_byte(rtlpriv,769U,(unsigned char)0);
  #line 1987 
  rtl8821ae_dm_init(hw);
  #line 1988 
  rtl8821ae_macid_initialize_mediastatus(hw);
  #line 1990 
  _rtl_dbg_trace(rtlpriv,4ULL,4,(char *)"rtl8821ae_hw_init() <====\n");
  #line 1991 
  return err;
}

#line 1994  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
static enum version_8821ae _rtl8821ae_read_chip_version(struct ieee80211_hw *hw)
{
  #line 2000 
  u32 value32;
  #line 1996 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 1997 
  struct rtl_phy *rtlphy = & rtlpriv->phy;
  #line 1998 
  struct rtl_hal *rtlhal = & ((struct rtl_priv *)hw->priv)->rtlhal;
  #line 1999 
  enum version_8821ae version = VERSION_UNKNOWN;
  #line 2002 
  value32 = rtl_read_dword(rtlpriv,240U);
  #line 2003 
  _rtl_dbg_trace(rtlpriv,4ULL,4,(char *)"ReadChipVersion8812A 0xF0 = 0x%x\n",value32);
  #line 2006 
  if ((unsigned int)rtlhal->hw_type == 14U) 
                                            #line 2007 
                                            rtlphy->rf_type = (unsigned char)2U;
  else 
    #line 2008 
    if ((unsigned int)rtlhal->hw_type == 13U) 
                                              #line 2009 
                                              rtlphy->rf_type = (unsigned char)0U;
  #line 2011 
  _rtl_dbg_trace(rtlpriv,4ULL,4,(char *)"RF_Type is %x!!\n",(int)rtlphy->rf_type);
  #line 2014 
  if (((unsigned long)value32 & 8388608UL) != 0UL) 
    #line 2015 
    if ((unsigned int)rtlhal->hw_type == 14U) 
      #line 2016 
      if ((unsigned int)rtlphy->rf_type == 2U) 
                                               #line 2017 
                                               version = VERSION_TEST_CHIP_2T2R_8812; else 
                                                                    #line 2019 
                                                                    version = VERSION_TEST_CHIP_1T1R_8812;
    else 
         #line 2021 
         version = VERSION_TEST_CHIP_8821;
  else 
    #line 2023 
    if ((unsigned int)rtlhal->hw_type == 14U) {
      #line 2024 
      u32 rtl_id = ((value32 >> 12) & 15U) + 1U;
      #line 2026 
      if ((unsigned int)rtlphy->rf_type == 2U) 
                                               #line 2027 
                                               version = (enum version_8821ae)44; else 
                                                                    #line 2032 
                                                                    version = (enum version_8821ae)12;
      #line 2035 
      version = (enum version_8821ae)((rtl_id << 12) | (unsigned int)version);
    }
    else 
      #line 2036 
      if ((unsigned int)rtlhal->hw_type == 13U) {
        #line 2037 
        u32 rtl_id_0 = value32 & 61440U;
        #line 2039 
        version = (enum version_8821ae)(rtl_id_0 | 13U);
      }
  #line 2044 
  if ((unsigned int)rtlhal->hw_type == 13U) {
    #line 2046 
    value32 = rtl_read_dword(rtlpriv,104U);
    #line 2047 
    rtlhal->hw_rof_enable = (unsigned char)((unsigned int)((unsigned char)((unsigned long)value32 >> 3)) & 1U);
  }
  #line 2050 
  switch ((unsigned int)version) {
    #line 2051 
    case (unsigned int)4: 
                          #line 2051 
    ;
    #line 2052 
    _rtl_dbg_trace(rtlpriv,4ULL,4,(char *)"Chip Version ID: VERSION_TEST_CHIP_1T1R_8812\n");
    #line 2054 
    break;
    #line 2055 
    case (unsigned int)36: 
                           #line 2055 
    ;
    #line 2056 
    _rtl_dbg_trace(rtlpriv,4ULL,4,(char *)"Chip Version ID: VERSION_TEST_CHIP_2T2R_8812\n");
    #line 2058 
    break;
    #line 2059 
    case (unsigned int)4108: 
                             #line 2059 
    ;
    #line 2060 
    _rtl_dbg_trace(rtlpriv,4ULL,4,(char *)"Chip Version ID:VERSION_NORMAL_TSMC_CHIP_1T1R_8812\n");
    #line 2062 
    break;
    #line 2063 
    case (unsigned int)4140: 
                             #line 2063 
    ;
    #line 2064 
    _rtl_dbg_trace(rtlpriv,4ULL,4,(char *)"Chip Version ID: VERSION_NORMAL_TSMC_CHIP_2T2R_8812\n");
    #line 2066 
    break;
    #line 2067 
    case (unsigned int)8204: 
                             #line 2067 
    ;
    #line 2068 
    _rtl_dbg_trace(rtlpriv,4ULL,4,(char *)"Chip Version ID: VERSION_NORMAL_TSMC_CHIP_1T1R_8812 C CUT\n");
    #line 2070 
    break;
    #line 2071 
    case (unsigned int)8236: 
                             #line 2071 
    ;
    #line 2072 
    _rtl_dbg_trace(rtlpriv,4ULL,4,(char *)"Chip Version ID: VERSION_NORMAL_TSMC_CHIP_2T2R_8812 C CUT\n");
    #line 2074 
    break;
    #line 2075 
    case (unsigned int)5: 
                          #line 2075 
    ;
    #line 2076 
    _rtl_dbg_trace(rtlpriv,4ULL,4,(char *)"Chip Version ID: VERSION_TEST_CHIP_8821\n");
    #line 2078 
    break;
    #line 2079 
    case (unsigned int)13: 
                           #line 2079 
    ;
    #line 2080 
    _rtl_dbg_trace(rtlpriv,4ULL,4,(char *)"Chip Version ID: VERSION_NORMAL_TSMC_CHIP_8821 A CUT\n");
    #line 2082 
    break;
    #line 2083 
    case (unsigned int)4109: 
                             #line 2083 
    ;
    #line 2084 
    _rtl_dbg_trace(rtlpriv,4ULL,4,(char *)"Chip Version ID: VERSION_NORMAL_TSMC_CHIP_8821 B CUT\n");
    #line 2086 
    break;
    #line 2087 
    default: 
             #line 2087 
    ;
    #line 2088 
    _rtl_dbg_trace(rtlpriv,4ULL,4,(char *)"Chip Version ID: Unknown (0x%X)\n",(unsigned int)version);
    #line 2090 
    break;
  }
  #line 2093 
  return version;
}

#line 2096  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
static int _rtl8821ae_set_media_status(struct ieee80211_hw *hw, enum nl80211_iftype type)
{
  #line 2099 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 2100 
  u8 bt_msr = rtl_read_byte(rtlpriv,258U);
  #line 2101 
  enum led_ctl_mode ledaction = LED_CTL_NO_LINK;
  #line 2102 
  bt_msr = (unsigned char)((unsigned int)bt_msr & 252U);
  #line 2104 
  rtl_write_dword(rtlpriv,1360U,0U);
  #line 2105 
  _rtl_dbg_trace(rtlpriv,1024ULL,4,(char *)"clear 0x550 when set HW_VAR_MEDIA_STATUS\n");
  #line 2108 
  if (type == (unsigned int)NL80211_IFTYPE_UNSPECIFIED || type == (unsigned int)NL80211_IFTYPE_STATION) {
    #line 2110 
    _rtl8821ae_stop_tx_beacon(hw);
    #line 2111 
    _rtl8821ae_enable_bcn_sub_func(hw);
  }
  else 
    #line 2112 
    if (type == (unsigned int)NL80211_IFTYPE_ADHOC || type == (unsigned int)NL80211_IFTYPE_AP) {
      #line 2114 
      _rtl8821ae_resume_tx_beacon(hw);
      #line 2115 
      _rtl8821ae_disable_bcn_sub_func(hw);
    }
    else 
         #line 2117 
         _rtl_dbg_trace(rtlpriv,1ULL,2,(char *)"Set HW_VAR_MEDIA_STATUS: No such media status(%x).\n",(unsigned int)type);
  #line 2122 
  switch ((unsigned int)type) {
    #line 2123 
    case (unsigned int)0: 
                          #line 2123 
    ;
    #line 2124 
    bt_msr = bt_msr;
    #line 2125 
    ledaction = LED_CTL_LINK;
    #line 2126 
    _rtl_dbg_trace(rtlpriv,4ULL,5,(char *)"Set Network type to NO LINK!\n");
    #line 2128 
    break;
    #line 2129 
    case (unsigned int)1: 
                          #line 2129 
    ;
    #line 2130 
    bt_msr = (unsigned char)((unsigned int)bt_msr | 1U);
    #line 2131 
    _rtl_dbg_trace(rtlpriv,4ULL,5,(char *)"Set Network type to Ad Hoc!\n");
    #line 2133 
    break;
    #line 2134 
    case (unsigned int)2: 
                          #line 2134 
    ;
    #line 2135 
    bt_msr = (unsigned char)((unsigned int)bt_msr | 2U);
    #line 2136 
    ledaction = LED_CTL_LINK;
    #line 2137 
    _rtl_dbg_trace(rtlpriv,4ULL,5,(char *)"Set Network type to STA!\n");
    #line 2139 
    break;
    #line 2140 
    case (unsigned int)3: 
                          #line 2140 
    ;
    #line 2141 
    bt_msr = (unsigned char)((unsigned int)bt_msr | 3U);
    #line 2142 
    _rtl_dbg_trace(rtlpriv,4ULL,5,(char *)"Set Network type to AP!\n");
    #line 2144 
    break;
    #line 2145 
    default: 
             #line 2145 
    ;
    #line 2146 
    printk((char *)"\001",(unsigned int)type);
    #line 2147 
    return 1;
  }
  #line 2150 
  rtl_write_byte(rtlpriv,258U,(unsigned char)((int)bt_msr));
  #line 2151 
  (*(((rtlpriv->cfg)->ops)->led_control))(hw,ledaction);
  #line 2152 
  if (((int)bt_msr & 3) == 3) 
                              #line 2153 
                              rtl_write_byte(rtlpriv,1297U,(unsigned char)0); else 
                                                                    #line 2155 
                                                                    rtl_write_byte(rtlpriv,1297U,(unsigned char)102);
  #line 2157 
  return 0;
}

#line 2160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
void rtl8821ae_set_check_bssid(struct ieee80211_hw *hw, bool check_bssid)
{
  #line 2162 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 2163 
  struct rtl_pci *rtlpci = & ((struct rtl_pci_priv *)(& ((struct rtl_priv *)hw->priv)->priv))->dev;
  #line 2164 
  u32 reg_rcr = rtlpci->receive_config;
  #line 2166 
  if (rtlpriv->psc.rfpwr_state != (unsigned int)ERFON) 
                                                       #line 2167 
                                                       return;
  #line 2169 
  if ((int)check_bssid != 0) {
    #line 2170 
    reg_rcr |= 192U;
    #line 2171 
    (*(((rtlpriv->cfg)->ops)->set_hw_reg))(hw,(unsigned char)44,(u8 *)(& reg_rcr));
    #line 2173 
    _rtl8821ae_set_bcn_ctrl_reg(hw,(unsigned char)0,(unsigned char)16);
  }
  else 
    #line 2174 
    if (! check_bssid) {
      #line 2175 
      reg_rcr &= 4294967103U;
      #line 2176 
      _rtl8821ae_set_bcn_ctrl_reg(hw,(unsigned char)16,(unsigned char)0);
      #line 2177 
      (*(((rtlpriv->cfg)->ops)->set_hw_reg))(hw,(unsigned char)44,(u8 *)(& reg_rcr));
    }
  #line 2180 
  return;
}

#line 2182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
int rtl8821ae_set_network_type(struct ieee80211_hw *hw, enum nl80211_iftype type)
{
  #line 2184 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 2186 
  _rtl_dbg_trace(rtlpriv,4ULL,4,(char *)"rtl8821ae_set_network_type!\n");
  #line 2188 
  if (_rtl8821ae_set_media_status(hw,type) != 0) 
                                                 #line 2189 
                                                 return -95;
  #line 2191 
  if (rtlpriv->mac80211.link_state == (unsigned int)MAC80211_LINKED) {
    #line 2192 
    if (type != (unsigned int)NL80211_IFTYPE_AP) 
                                                 #line 2193 
                                                 rtl8821ae_set_check_bssid(hw,(_Bool)1);
  }
  else 
       #line 2195 
       rtl8821ae_set_check_bssid(hw,(_Bool)0);
  #line 2198 
  return 0;
}

#line 2202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
void rtl8821ae_set_qos(struct ieee80211_hw *hw, int aci)
{
  #line 2204 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 2205 
  rtl8821ae_dm_init_edca_turbo(hw);
  #line 2206 
  switch (aci) {
    #line 2207 
    case 1: 
            #line 2207 
    ;
    #line 2208 
    rtl_write_dword(rtlpriv,1292U,42063U);
    #line 2209 
    break;
    #line 2210 
    case 0: 
            #line 2210 
    ;
    #line 2212 
    break;
    #line 2213 
    case 2: 
            #line 2213 
    ;
    #line 2214 
    rtl_write_dword(rtlpriv,1284U,6177570U);
    #line 2215 
    break;
    #line 2216 
    case 3: 
            #line 2216 
    ;
    #line 2217 
    rtl_write_dword(rtlpriv,1280U,3093026U);
    #line 2218 
    break;
    #line 2219 
    default: 
             #line 2219 
    ;
    {
      #line 2220 
      bool __warned;
      #line 2220 
      int __ret_warn_once = 1;
      #line 2220 
      if ((long)(__ret_warn_once != 0) != 0L && (long)(! __warned) != 0L) {
        #line 2220 
        __warned = (_Bool)1;
        {
          #line 2220 
          int __ret_warn_on = 1;
          #line 2220 
          if ((long)(__ret_warn_on != 0) != 0L) {
            #line 2220 
            __warn_printk((char *)"rtl8821ae: invalid aci: %d !\n",aci);
            #line 2221 
            ldv_inline_asm();
            #line 2222 
            ldv_inline_asm();
          }
          #line 2220 
          long tmp = (long)(__ret_warn_on != 0);
        }
      }
      #line 2220 
      long tmp_3 = (long)(__ret_warn_once != 0);
    }
    #line 2221 
    break;
  }
  #line 2223 
  return;
}

#line 2225  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
static void rtl8821ae_clear_interrupt(struct ieee80211_hw *hw)
{
  #line 2227 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 2228 
  u32 tmp = rtl_read_dword(rtlpriv,180U);
  #line 2230 
  rtl_write_dword(rtlpriv,180U,tmp);
  #line 2232 
  tmp = rtl_read_dword(rtlpriv,188U);
  #line 2233 
  rtl_write_dword(rtlpriv,188U,tmp);
  #line 2235 
  tmp = rtl_read_dword(rtlpriv,92U);
  #line 2236 
  rtl_write_dword(rtlpriv,92U,tmp);
  #line 2237 
  return;
}

#line 2239  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
void rtl8821ae_enable_interrupt(struct ieee80211_hw *hw)
{
  #line 2241 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 2242 
  struct rtl_pci *rtlpci = & ((struct rtl_pci_priv *)(& ((struct rtl_priv *)hw->priv)->priv))->dev;
  #line 2244 
  if ((int)rtlpci->int_clear != 0) 
                                   #line 2245 
                                   rtl8821ae_clear_interrupt(hw);
  #line 2247 
  rtl_write_dword(rtlpriv,176U,rtlpci->irq_mask[0]);
  #line 2248 
  rtl_write_dword(rtlpriv,184U,rtlpci->irq_mask[1]);
  #line 2249 
  rtlpci->irq_enabled = (_Bool)1;
  #line 2257 
  rtl_write_dword(rtlpriv,88U,rtlpci->sys_irq_mask);
  #line 2258 
  return;
}

#line 2260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
void rtl8821ae_disable_interrupt(struct ieee80211_hw *hw)
{
  #line 2262 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 2263 
  struct rtl_pci *rtlpci = & ((struct rtl_pci_priv *)(& ((struct rtl_priv *)hw->priv)->priv))->dev;
  #line 2265 
  rtl_write_dword(rtlpriv,176U,0U);
  #line 2266 
  rtl_write_dword(rtlpriv,184U,0U);
  #line 2267 
  rtlpci->irq_enabled = (_Bool)0;
  #line 2268 
  return;
}

#line 2271  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
static void _rtl8821ae_clear_pci_pme_status(struct ieee80211_hw *hw)
{
  #line 2275 
  u16 cap_hdr;
  #line 2276 
  u8 cap_pointer;
  #line 2278 
  u8 pmcs_reg;
  #line 2273 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 2274 
  struct rtl_pci *rtlpci = & ((struct rtl_pci_priv *)(& ((struct rtl_priv *)hw->priv)->priv))->dev;
  #line 2277 
  u8 cap_id = (unsigned char)255U;
  #line 2279 
  u8 cnt = (unsigned char)0U;
  #line 2285 
  pci_read_config_byte(rtlpci->pdev,52,& cap_pointer);
  #line 2286 
  _rtl_dbg_trace(rtlpriv,4ULL,4,(char *)"PCI configuration 0x34 = 0x%2x\n",(int)cap_pointer);
  #line 2289 
  while (1) {
    #line 2308 
    u8 tmp;
    #line 2290 
    pci_read_config_word(rtlpci->pdev,(int)cap_pointer,& cap_hdr);
    #line 2291 
    cap_id = (unsigned char)cap_hdr;
    #line 2293 
    _rtl_dbg_trace(rtlpriv,4ULL,4,(char *)"in pci configuration, cap_pointer%x = %x\n",(int)cap_pointer,(int)cap_id);
    #line 2297 
    if ((unsigned int)cap_id == 1U) 
                                    #line 2298 
                                    break;
    else {
      #line 2301 
      cap_pointer = (unsigned char)((int)cap_hdr >> 8);
      #line 2303 
      if ((unsigned int)cap_pointer + 255U > 253U) {
        #line 2304 
        cap_id = (unsigned char)255U;
        #line 2305 
        break;
      }
    }
    #line 2308 
    tmp = cnt;
    #line 2308 
    cnt = (u8)((int)cnt + 1);
    #line 2308 
    ;
    #line 2308 
    if (! ((unsigned int)tmp <= 199U)) 
                                       #line 2289 
                                       break;
  }
  #line 2310 
  if ((unsigned int)cap_id == 1U) {
    #line 2314 
    pci_read_config_byte(rtlpci->pdev,(int)cap_pointer + 5,& pmcs_reg);
    #line 2316 
    if (((unsigned long)pmcs_reg & 128UL) != 0UL) {
      #line 2318 
      pmcs_reg = (unsigned char)((unsigned int)pmcs_reg | 128U);
      #line 2320 
      pci_write_config_byte(rtlpci->pdev,(int)cap_pointer + 5,(unsigned char)((int)pmcs_reg));
      #line 2323 
      pci_read_config_byte(rtlpci->pdev,(int)cap_pointer + 5,& pmcs_reg);
      #line 2325 
      _rtl_dbg_trace(rtlpriv,4ULL,3,(char *)"Clear PME status 0x%2x to 0x%2x\n",(int)cap_pointer + 5,(int)pmcs_reg);
    }
    else 
         #line 2329 
         _rtl_dbg_trace(rtlpriv,4ULL,3,(char *)"PME status(0x%2x) = 0x%2x\n",(int)cap_pointer + 5,(int)pmcs_reg);
  }
  else 
       #line 2334 
       _rtl_dbg_trace(rtlpriv,4ULL,2,(char *)"Cannot find PME Capability\n");
  #line 2335 
  return;
}

#line 2339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
void rtl8821ae_card_disable(struct ieee80211_hw *hw)
{
  #line 2345 
  enum nl80211_iftype opmode;
  #line 2346 
  bool support_remote_wakeup;
  #line 2347 
  u8 tmp;
  #line 2341 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 2342 
  struct rtl_hal *rtlhal = & rtlpriv->rtlhal;
  #line 2343 
  struct rtl_ps_ctl *ppsc = & rtlpriv->psc;
  #line 2344 
  struct rtl_mac *mac = & rtlpriv->mac80211;
  #line 2348 
  u32 count = 0U;
  #line 2350 
  (*(((rtlpriv->cfg)->ops)->get_hw_reg))(hw,(unsigned char)92,(u8 *)(& support_remote_wakeup));
  #line 2353 
  ppsc->cur_ps_level |= 8U;
  #line 2355 
  if ((! support_remote_wakeup || mac->opmode != (unsigned int)NL80211_IFTYPE_STATION) || ! rtlhal->enter_pnp_sleep) {
    #line 2357 
    _rtl_dbg_trace(rtlpriv,4ULL,3,(char *)"Normal Power off\n");
    #line 2358 
    mac->link_state = MAC80211_NOLINK;
    #line 2359 
    opmode = NL80211_IFTYPE_UNSPECIFIED;
    #line 2360 
    _rtl8821ae_set_media_status(hw,opmode);
    #line 2361 
    _rtl8821ae_poweroff_adapter(hw);
  }
  else {
    #line 2363 
    _rtl_dbg_trace(rtlpriv,4ULL,3,(char *)"Wowlan Supported.\n");
    #line 2366 
    rtl_write_byte(rtlpriv,455U,(unsigned char)0);
    #line 2369 
    rtl8821ae_set_fw_related_for_wowlan(hw,(_Bool)1);
    #line 2374 
    if ((int)_rtl8821ae_dynamic_rqpn(hw,224U,(unsigned short)3,2160200973U) != 0) 
      #line 2375 
      rtlhal->re_init_llt_table = (_Bool)1;
    #line 2380 
    rtl8821ae_set_fw_global_info_cmd(hw);
    #line 2382 
    _rtl8821ae_download_rsvd_page(hw,(_Bool)1);
    #line 2385 
    printk((char *)"mac->link_state = %d\n",(unsigned int)mac->link_state);
    #line 2386 
    if (mac->link_state > (unsigned int)MAC80211_LINKING && mac->opmode == (unsigned int)NL80211_IFTYPE_STATION) {
      #line 2388 
      (*(((rtlpriv->cfg)->ops)->set_hw_reg))(hw,(unsigned char)82,(u8 *)0U);
      #line 2389 
      rtl8821ae_set_fw_media_status_rpt_cmd(hw,(unsigned char)1);
      #line 2392 
      rtl8821ae_set_fw_wowlan_mode(hw,(_Bool)1);
      #line 2394 
      rtl8821ae_set_fw_keep_alive_cmd(hw,(_Bool)1);
      #line 2397 
      rtl8821ae_set_fw_disconnect_decision_ctrl_cmd(hw,(_Bool)1);
    }
    #line 2405 
    rtl_write_byte(rtlpriv,646U,(unsigned char)4);
    #line 2407 
    tmp = rtl_read_byte(rtlpriv,646U);
    #line 2408 
    count = 0U;
    #line 2409 
    while (1) {
      #line 2409 
      if (((unsigned long)tmp & 2UL) == 0UL) {
        #line 2409 
        u32 tmp_1;
        #line 2409 
        tmp_1 = count;
        #line 2409 
        count ++;
        #line 2409 
        ;
        #line 2409 
        if (! (tmp_1 <= 99U)) 
                              #line 2409 
                              break;
      }
      else 
           #line 2409 
           break;
      #line 2410 
      __const_udelay(42950UL);
      #line 2411 
      tmp = rtl_read_byte(rtlpriv,646U);
    }
    #line 2413 
    _rtl_dbg_trace(rtlpriv,4ULL,4,(char *)"Wait Rx DMA Finished before host sleep. count=%d\n",count);
    #line 2418 
    (*((rtlpriv->intf_ops)->reset_trx_ring))(hw);
    #line 2420 
    rtl_write_byte(rtlpriv,5U,(unsigned char)0);
    #line 2422 
    _rtl8821ae_clear_pci_pme_status(hw);
    #line 2423 
    tmp = rtl_read_byte(rtlpriv,8U);
    #line 2424 
    rtl_write_byte(rtlpriv,8U,(unsigned char)((int)((unsigned int)tmp | 8U)));
    #line 2426 
    rtl_write_byte(rtlpriv,28U,(unsigned char)32);
    #line 2427 
    rtl_write_byte(rtlpriv,28U,(unsigned char)96);
  }
  #line 2430 
  if ((int)rtlpriv->rtlhal.driver_is_goingto_unload != 0 || ppsc->rfoff_reason > 536870912U) 
    #line 2432 
    (*(((rtlpriv->cfg)->ops)->led_control))(hw,(enum led_ctl_mode)LED_CTL_POWER_OFF);
  #line 2434 
  if ((int)support_remote_wakeup != 0 && (int)rtlhal->enter_pnp_sleep != 0) {
    #line 2437 
    rtl8821ae_set_fw_remote_wake_ctrl_cmd(hw,(unsigned char)1);
    #line 2440 
    rtl_write_byte(rtlpriv,769U,(unsigned char)255);
    #line 2441 
    _rtl_dbg_trace(rtlpriv,65536ULL,4,(char *)"Stop PCIE Tx DMA.\n");
    #line 2444 
    count = 0U;
    #line 2445 
    while (1) {
      #line 2446 
      tmp = rtl_read_byte(rtlpriv,768U);
      #line 2447 
      __const_udelay(42950UL);
      #line 2448 
      count ++;
      #line 2449 
      if (! ((unsigned int)tmp != 0U && count <= 99U)) 
                                                       #line 2445 
                                                       break;
    }
    #line 2450 
    _rtl_dbg_trace(rtlpriv,4ULL,4,(char *)"Wait Tx DMA Finished before host sleep. count=%d\n",count);
    #line 2454 
    if ((unsigned int)rtlhal->hw_rof_enable != 0U) {
      #line 2455 
      printk((char *)"hw_rof_enable\n");
      #line 2456 
      tmp = rtl_read_byte(rtlpriv,95U);
      #line 2457 
      rtl_write_byte(rtlpriv,95U,(unsigned char)((int)((unsigned int)tmp | 2U)));
    }
  }
  #line 2461 
  rtlpriv->phy.iqk_initialized = (_Bool)0;
  #line 2462 
  return;
}

#line 2464  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
void rtl8821ae_interrupt_recognized(struct ieee80211_hw *hw, struct rtl_int *intvec)
{
  #line 2467 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 2468 
  struct rtl_pci *rtlpci = & ((struct rtl_pci_priv *)(& ((struct rtl_priv *)hw->priv)->priv))->dev;
  #line 2470 
  intvec->inta = rtl_read_dword(rtlpriv,180U) & rtlpci->irq_mask[0];
  #line 2471 
  rtl_write_dword(rtlpriv,180U,intvec->inta);
  #line 2473 
  intvec->intb = rtl_read_dword(rtlpriv,188U) & rtlpci->irq_mask[1];
  #line 2474 
  rtl_write_dword(rtlpriv,188U,intvec->intb);
  #line 2475 
  return;
}

#line 2477  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
void rtl8821ae_set_beacon_related_registers(struct ieee80211_hw *hw)
{
  #line 2482 
  u16 bcn_interval;
  #line 2482 
  u16 atim_window;
  #line 2479 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 2480 
  struct rtl_mac *mac = & ((struct rtl_priv *)hw->priv)->mac80211;
  #line 2481 
  struct rtl_pci *rtlpci = & ((struct rtl_pci_priv *)(& ((struct rtl_priv *)hw->priv)->priv))->dev;
  #line 2484 
  bcn_interval = (unsigned short)mac->beacon_interval;
  #line 2485 
  atim_window = (unsigned short)2U;
  #line 2486 
  rtl8821ae_disable_interrupt(hw);
  #line 2487 
  rtl_write_word(rtlpriv,1370U,(unsigned short)((int)atim_window));
  #line 2488 
  rtl_write_word(rtlpriv,1364U,(unsigned short)((int)bcn_interval));
  #line 2489 
  rtl_write_word(rtlpriv,1296U,(unsigned short)26127);
  #line 2490 
  rtl_write_byte(rtlpriv,1374U,(unsigned char)24);
  #line 2491 
  rtl_write_byte(rtlpriv,1375U,(unsigned char)24);
  #line 2492 
  rtl_write_byte(rtlpriv,1542U,(unsigned char)48);
  #line 2493 
  rtlpci->reg_bcn_ctrl_val |= 8U;
  #line 2494 
  rtl_write_byte(rtlpriv,1360U,(unsigned char)((int)((unsigned char)rtlpci->reg_bcn_ctrl_val)));
  #line 2495 
  rtl8821ae_enable_interrupt(hw);
  #line 2496 
  return;
}

#line 2498  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
void rtl8821ae_set_beacon_interval(struct ieee80211_hw *hw)
{
  #line 2500 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 2501 
  struct rtl_mac *mac = & ((struct rtl_priv *)hw->priv)->mac80211;
  #line 2502 
  u16 bcn_interval = (unsigned short)mac->beacon_interval;
  #line 2504 
  _rtl_dbg_trace(rtlpriv,1024ULL,3,(char *)"beacon_interval:%d\n",(int)bcn_interval);
  #line 2506 
  rtl8821ae_disable_interrupt(hw);
  #line 2507 
  rtl_write_word(rtlpriv,1364U,(unsigned short)((int)bcn_interval));
  #line 2508 
  rtl8821ae_enable_interrupt(hw);
  #line 2509 
  return;
}

#line 2511  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
void rtl8821ae_update_interrupt_mask(struct ieee80211_hw *hw, u32 add_msr, u32 rm_msr)
{
  #line 2514 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 2515 
  struct rtl_pci *rtlpci = & ((struct rtl_pci_priv *)(& ((struct rtl_priv *)hw->priv)->priv))->dev;
  #line 2517 
  _rtl_dbg_trace(rtlpriv,128ULL,4,(char *)"add_msr:%x, rm_msr:%x\n",add_msr,rm_msr);
  #line 2520 
  if (add_msr != 0U) 
                     #line 2521 
                     rtlpci->irq_mask[0] |= add_msr;
  #line 2522 
  if (rm_msr != 0U) 
                    #line 2523 
                    rtlpci->irq_mask[0] &= ~ rm_msr;
  #line 2524 
  rtl8821ae_disable_interrupt(hw);
  #line 2525 
  rtl8821ae_enable_interrupt(hw);
  #line 2526 
  return;
}

#line 2528  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
static u8 _rtl8821ae_get_chnl_group(u8 chnl)
{
  #line 2530 
  u8 group = (unsigned char)0U;
  #line 2532 
  if ((unsigned int)chnl <= 14U) 
    #line 2533 
    if ((unsigned int)chnl + 255U <= 1U) 
                                         #line 2534 
                                         group = (unsigned char)0U;
    else 
      #line 2535 
      if ((unsigned int)chnl + 253U <= 2U) 
                                           #line 2536 
                                           group = (unsigned char)1U;
      else 
        #line 2537 
        if ((unsigned int)chnl + 250U <= 2U) 
                                             #line 2538 
                                             group = (unsigned char)2U;
        else 
          #line 2539 
          if ((unsigned int)chnl + 247U <= 2U) 
                                               #line 2540 
                                               group = (unsigned char)3U; else 
                                                                    #line 2542 
                                                                    group = (unsigned char)4U;
  else 
    #line 2544 
    if ((unsigned int)chnl + 220U <= 6U) 
                                         #line 2545 
                                         group = (unsigned char)0U;
    else 
      #line 2546 
      if ((unsigned int)chnl + 212U <= 4U) 
                                           #line 2547 
                                           group = (unsigned char)1U;
      else 
        #line 2548 
        if ((unsigned int)chnl + 206U <= 8U) 
                                             #line 2549 
                                             group = (unsigned char)2U;
        else 
          #line 2550 
          if ((unsigned int)chnl + 196U <= 4U) 
                                               #line 2551 
                                               group = (unsigned char)3U;
          else 
            #line 2552 
            if ((unsigned int)chnl + 156U <= 6U) 
                                                 #line 2553 
                                                 group = (unsigned char)4U;
            else 
              #line 2554 
              if ((unsigned int)chnl + 148U <= 6U) 
                                                   #line 2555 
                                                   group = (unsigned char)5U;
              else 
                #line 2556 
                if ((unsigned int)chnl + 140U <= 6U) 
                                                     #line 2557 
                                                     group = (unsigned char)6U;
                else 
                  #line 2558 
                  if ((unsigned int)chnl + 132U <= 6U) 
                                                       #line 2559 
                                                       group = (unsigned char)7U;
                  else 
                    #line 2560 
                    if ((unsigned int)chnl + 124U <= 6U) 
                                                         #line 2561 
                                                         group = (unsigned char)8U;
                    else 
                      #line 2562 
                      if ((unsigned int)chnl + 116U <= 4U) 
                                                           #line 2563 
                                                           group = (unsigned char)9U;
                      else 
                        #line 2564 
                        if ((unsigned int)chnl + 107U <= 6U) 
                                                             #line 2565 
                                                             group = (unsigned char)10U;
                        else 
                          #line 2566 
                          if ((unsigned int)chnl + 99U <= 4U) 
                                                              #line 2567 
                                                              group = (unsigned char)11U;
                          else 
                            #line 2568 
                            if ((unsigned int)chnl + 91U <= 6U) 
                                                                #line 2569 
                                                                group = (unsigned char)12U;
                            else 
                              #line 2570 
                              if ((unsigned int)chnl + 83U <= 4U) 
                                                                  #line 2571 
                                                                  group = (unsigned char)13U;
                              else {
                                #line 2573 
                                bool __warned;
                                #line 2573 
                                int __ret_warn_once = 1;
                                #line 2573 
                                if ((long)(__ret_warn_once != 0) != 0L && (long)(! __warned) != 0L) {
                                  #line 2573 
                                  __warned = (_Bool)1;
                                  {
                                    #line 2573 
                                    int __ret_warn_on = 1;
                                    #line 2573 
                                    if ((long)(__ret_warn_on != 0) != 0L) {
                                      #line 2573 
                                      __warn_printk((char *)"rtl8821ae: 5G, Channel %d in Group not found\n",(int)chnl);
                                      #line 2574 
                                      ldv_inline_asm();
                                      #line 2575 
                                      ldv_inline_asm();
                                    }
                                    #line 2573 
                                    long tmp = (long)(__ret_warn_on != 0);
                                  }
                                }
                                #line 2573 
                                long tmp_3 = (long)(__ret_warn_once != 0);
                              }
  #line 2577 
  return group;
}

#line 2580  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
static void _rtl8821ae_read_power_value_fromprom(struct ieee80211_hw *hw, struct txpower_info_2g *pwrinfo24g, struct txpower_info_5g *pwrinfo5g, bool autoload_fail, u8 *hwinfo)
{
  #line 2587 
  u32 rfpath;
  #line 2587 
  u32 group;
  #line 2586 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 2587 
  u32 eeaddr = 16U;
  #line 2587 
  u32 txcount = 0U;
  #line 2589 
  _rtl_dbg_trace(rtlpriv,4ULL,4,(char *)"hal_ReadPowerValueFromPROM8821ae(): hwinfo[0x%x]=0x%x\n",eeaddr + 1U,(int)*(hwinfo + (unsigned long)(eeaddr + 1U)));
  #line 2592 
  if ((unsigned int)*(hwinfo + (unsigned long)(eeaddr + 1U)) == 255U) 
    #line 2593 
    autoload_fail = (_Bool)1;
  #line 2595 
  if ((int)autoload_fail != 0) {
    #line 2596 
    _rtl_dbg_trace(rtlpriv,4ULL,4,(char *)"auto load fail : Use Default value!\n");
    #line 2598 
    rfpath = 0U;
    #line 2598 
    while (rfpath <= 3U) {
      #line 2600 
      group = 0U;
      #line 2600 
      while (group <= 5U) {
        #line 2601 
        pwrinfo24g->index_cck_base[rfpath][group] = (unsigned char)45U;
        #line 2602 
        pwrinfo24g->index_bw40_base[rfpath][group] = (unsigned char)45U;
        #line 2600 
        group ++;
      }
      #line 2604 
      txcount = 0U;
      #line 2604 
      while (txcount <= 3U) {
        #line 2605 
        if (txcount == 0U) {
          #line 2606 
          pwrinfo24g->bw20_diff[rfpath][0] = (unsigned char)2U;
          #line 2607 
          pwrinfo24g->ofdm_diff[rfpath][0] = (unsigned char)4U;
        }
        else {
          #line 2609 
          pwrinfo24g->bw20_diff[rfpath][txcount] = (unsigned char)254U;
          #line 2610 
          pwrinfo24g->bw40_diff[rfpath][txcount] = (unsigned char)254U;
          #line 2611 
          pwrinfo24g->cck_diff[rfpath][txcount] = (unsigned char)254U;
          #line 2612 
          pwrinfo24g->ofdm_diff[rfpath][txcount] = (unsigned char)254U;
        }
        #line 2604 
        txcount ++;
      }
      #line 2616 
      group = 0U;
      #line 2616 
      while (group <= 13U) {
        #line 2617 
        pwrinfo5g->index_bw40_base[rfpath][group] = (unsigned char)42U;
        #line 2616 
        group ++;
      }
      #line 2619 
      txcount = 0U;
      #line 2619 
      while (txcount <= 3U) {
        #line 2620 
        if (txcount == 0U) {
          #line 2621 
          pwrinfo5g->ofdm_diff[rfpath][0] = (unsigned char)4U;
          #line 2622 
          pwrinfo5g->bw20_diff[rfpath][0] = (unsigned char)0U;
          #line 2623 
          pwrinfo5g->bw80_diff[rfpath][0] = (unsigned char)254U;
          #line 2624 
          pwrinfo5g->bw160_diff[rfpath][0] = (unsigned char)254U;
        }
        else {
          #line 2626 
          pwrinfo5g->ofdm_diff[rfpath][0] = (unsigned char)254U;
          #line 2627 
          pwrinfo5g->bw20_diff[rfpath][0] = (unsigned char)254U;
          #line 2628 
          pwrinfo5g->bw40_diff[rfpath][0] = (unsigned char)254U;
          #line 2629 
          pwrinfo5g->bw80_diff[rfpath][0] = (unsigned char)254U;
          #line 2630 
          pwrinfo5g->bw160_diff[rfpath][0] = (unsigned char)254U;
        }
        #line 2619 
        txcount ++;
      }
      #line 2598 
      rfpath ++;
    }
    #line 2634 
    return;
  }
  #line 2637 
  ((struct rtl_priv *)hw->priv)->efuse.txpwr_fromeprom = (_Bool)1;
  #line 2639 
  rfpath = 0U;
  #line 2639 
  while (rfpath <= 3U) {
    #line 2641 
    group = 0U;
    #line 2641 
    while (group <= 5U) {
      {
        #line 2642 
        u32 tmp;
        #line 2642 
        tmp = eeaddr;
        #line 2642 
        eeaddr ++;
        #line 2642 
        pwrinfo24g->index_cck_base[rfpath][group] = *(hwinfo + (unsigned long)tmp);
        #line 2643 
        if ((unsigned int)pwrinfo24g->index_cck_base[rfpath][group] == 255U) 
          #line 2644 
          pwrinfo24g->index_cck_base[rfpath][group] = (unsigned char)45U;
      }
      #line 2641 
      group ++;
    }
    #line 2646 
    group = 0U;
    #line 2646 
    while (group <= 4U) {
      {
        #line 2647 
        u32 tmp_0;
        #line 2647 
        tmp_0 = eeaddr;
        #line 2647 
        eeaddr ++;
        #line 2647 
        pwrinfo24g->index_bw40_base[rfpath][group] = *(hwinfo + (unsigned long)tmp_0);
        #line 2648 
        if ((unsigned int)pwrinfo24g->index_bw40_base[rfpath][group] == 255U) 
          #line 2649 
          pwrinfo24g->index_bw40_base[rfpath][group] = (unsigned char)45U;
      }
      #line 2646 
      group ++;
    }
    #line 2651 
    txcount = 0U;
    #line 2651 
    while (txcount <= 3U) {
      #line 2652 
      if (txcount == 0U) {
        #line 2653 
        pwrinfo24g->bw40_diff[rfpath][txcount] = (unsigned char)0U;
        #line 2655 
        pwrinfo24g->bw20_diff[rfpath][txcount] = (unsigned char)((int)*(hwinfo + (unsigned long)eeaddr) >> 4);
        #line 2656 
        if (((unsigned long)pwrinfo24g->bw20_diff[rfpath][txcount] & 8UL) != 0UL) 
          #line 2657 
          pwrinfo24g->bw20_diff[rfpath][txcount] = (unsigned char)((unsigned int)pwrinfo24g->bw20_diff[rfpath][txcount] | 240U);
        #line 2659 
        pwrinfo24g->ofdm_diff[rfpath][txcount] = (unsigned char)((unsigned int)*(hwinfo + (unsigned long)eeaddr) & 15U);
        #line 2660 
        if (((unsigned long)pwrinfo24g->ofdm_diff[rfpath][txcount] & 8UL) != 0UL) 
          #line 2661 
          pwrinfo24g->ofdm_diff[rfpath][txcount] = (unsigned char)((unsigned int)pwrinfo24g->ofdm_diff[rfpath][txcount] | 240U);
        #line 2663 
        pwrinfo24g->cck_diff[rfpath][txcount] = (unsigned char)0U;
        #line 2664 
        eeaddr ++;
      }
      else {
        #line 2666 
        pwrinfo24g->bw40_diff[rfpath][txcount] = (unsigned char)((int)*(hwinfo + (unsigned long)eeaddr) >> 4);
        #line 2667 
        if (((unsigned long)pwrinfo24g->bw40_diff[rfpath][txcount] & 8UL) != 0UL) 
          #line 2668 
          pwrinfo24g->bw40_diff[rfpath][txcount] = (unsigned char)((unsigned int)pwrinfo24g->bw40_diff[rfpath][txcount] | 240U);
        #line 2670 
        pwrinfo24g->bw20_diff[rfpath][txcount] = (unsigned char)((unsigned int)*(hwinfo + (unsigned long)eeaddr) & 15U);
        #line 2671 
        if (((unsigned long)pwrinfo24g->bw20_diff[rfpath][txcount] & 8UL) != 0UL) 
          #line 2672 
          pwrinfo24g->bw20_diff[rfpath][txcount] = (unsigned char)((unsigned int)pwrinfo24g->bw20_diff[rfpath][txcount] | 240U);
        #line 2674 
        eeaddr ++;
        #line 2676 
        pwrinfo24g->ofdm_diff[rfpath][txcount] = (unsigned char)((int)*(hwinfo + (unsigned long)eeaddr) >> 4);
        #line 2677 
        if (((unsigned long)pwrinfo24g->ofdm_diff[rfpath][txcount] & 8UL) != 0UL) 
          #line 2678 
          pwrinfo24g->ofdm_diff[rfpath][txcount] = (unsigned char)((unsigned int)pwrinfo24g->ofdm_diff[rfpath][txcount] | 240U);
        #line 2680 
        pwrinfo24g->cck_diff[rfpath][txcount] = (unsigned char)((unsigned int)*(hwinfo + (unsigned long)eeaddr) & 15U);
        #line 2681 
        if (((unsigned long)pwrinfo24g->cck_diff[rfpath][txcount] & 8UL) != 0UL) 
          #line 2682 
          pwrinfo24g->cck_diff[rfpath][txcount] = (unsigned char)((unsigned int)pwrinfo24g->cck_diff[rfpath][txcount] | 240U);
        #line 2684 
        eeaddr ++;
      }
      #line 2651 
      txcount ++;
    }
    #line 2689 
    group = 0U;
    #line 2689 
    while (group <= 13U) {
      {
        #line 2690 
        u32 tmp_1;
        #line 2690 
        tmp_1 = eeaddr;
        #line 2690 
        eeaddr ++;
        #line 2690 
        pwrinfo5g->index_bw40_base[rfpath][group] = *(hwinfo + (unsigned long)tmp_1);
        #line 2691 
        if ((unsigned int)pwrinfo5g->index_bw40_base[rfpath][group] == 255U) 
          #line 2692 
          pwrinfo5g->index_bw40_base[rfpath][group] = (unsigned char)254U;
      }
      #line 2689 
      group ++;
    }
    #line 2695 
    txcount = 0U;
    #line 2695 
    while (txcount <= 3U) {
      #line 2696 
      if (txcount == 0U) {
        #line 2697 
        pwrinfo5g->bw40_diff[rfpath][txcount] = (unsigned char)0U;
        #line 2699 
        pwrinfo5g->bw20_diff[rfpath][0] = (unsigned char)((int)*(hwinfo + (unsigned long)eeaddr) >> 4);
        #line 2700 
        if (((unsigned long)pwrinfo5g->bw20_diff[rfpath][txcount] & 8UL) != 0UL) 
          #line 2701 
          pwrinfo5g->bw20_diff[rfpath][txcount] = (unsigned char)((unsigned int)pwrinfo5g->bw20_diff[rfpath][txcount] | 240U);
        #line 2703 
        pwrinfo5g->ofdm_diff[rfpath][0] = (unsigned char)((unsigned int)*(hwinfo + (unsigned long)eeaddr) & 15U);
        #line 2704 
        if (((unsigned long)pwrinfo5g->ofdm_diff[rfpath][txcount] & 8UL) != 0UL) 
          #line 2705 
          pwrinfo5g->ofdm_diff[rfpath][txcount] = (unsigned char)((unsigned int)pwrinfo5g->ofdm_diff[rfpath][txcount] | 240U);
        #line 2707 
        eeaddr ++;
      }
      else {
        #line 2709 
        pwrinfo5g->bw40_diff[rfpath][txcount] = (unsigned char)((int)*(hwinfo + (unsigned long)eeaddr) >> 4);
        #line 2710 
        if (((unsigned long)pwrinfo5g->bw40_diff[rfpath][txcount] & 8UL) != 0UL) 
          #line 2711 
          pwrinfo5g->bw40_diff[rfpath][txcount] = (unsigned char)((unsigned int)pwrinfo5g->bw40_diff[rfpath][txcount] | 240U);
        #line 2713 
        pwrinfo5g->bw20_diff[rfpath][txcount] = (unsigned char)((unsigned int)*(hwinfo + (unsigned long)eeaddr) & 15U);
        #line 2714 
        if (((unsigned long)pwrinfo5g->bw20_diff[rfpath][txcount] & 8UL) != 0UL) 
          #line 2715 
          pwrinfo5g->bw20_diff[rfpath][txcount] = (unsigned char)((unsigned int)pwrinfo5g->bw20_diff[rfpath][txcount] | 240U);
        #line 2717 
        eeaddr ++;
      }
      #line 2695 
      txcount ++;
    }
    #line 2721 
    pwrinfo5g->ofdm_diff[rfpath][1] = (unsigned char)((int)*(hwinfo + (unsigned long)eeaddr) >> 4);
    #line 2722 
    pwrinfo5g->ofdm_diff[rfpath][2] = (unsigned char)((unsigned int)*(hwinfo + (unsigned long)eeaddr) & 15U);
    #line 2724 
    eeaddr ++;
    #line 2726 
    pwrinfo5g->ofdm_diff[rfpath][3] = (unsigned char)((unsigned int)*(hwinfo + (unsigned long)eeaddr) & 15U);
    #line 2728 
    eeaddr ++;
    #line 2730 
    txcount = 1U;
    #line 2730 
    while (txcount <= 3U) {
      #line 2731 
      if (((unsigned long)pwrinfo5g->ofdm_diff[rfpath][txcount] & 8UL) != 0UL) 
        #line 2732 
        pwrinfo5g->ofdm_diff[rfpath][txcount] = (unsigned char)((unsigned int)pwrinfo5g->ofdm_diff[rfpath][txcount] | 240U);
      #line 2730 
      txcount ++;
    }
    #line 2734 
    txcount = 0U;
    #line 2734 
    while (txcount <= 3U) {
      #line 2735 
      pwrinfo5g->bw80_diff[rfpath][txcount] = (unsigned char)((int)*(hwinfo + (unsigned long)eeaddr) >> 4);
      #line 2737 
      if (((unsigned long)pwrinfo5g->bw80_diff[rfpath][txcount] & 8UL) != 0UL) 
        #line 2738 
        pwrinfo5g->bw80_diff[rfpath][txcount] = (unsigned char)((unsigned int)pwrinfo5g->bw80_diff[rfpath][txcount] | 240U);
      #line 2740 
      pwrinfo5g->bw160_diff[rfpath][txcount] = (unsigned char)((unsigned int)*(hwinfo + (unsigned long)eeaddr) & 15U);
      #line 2741 
      if (((unsigned long)pwrinfo5g->bw160_diff[rfpath][txcount] & 8UL) != 0UL) 
        #line 2742 
        pwrinfo5g->bw160_diff[rfpath][txcount] = (unsigned char)((unsigned int)pwrinfo5g->bw160_diff[rfpath][txcount] | 240U);
      #line 2744 
      eeaddr ++;
      #line 2734 
      txcount ++;
    }
    #line 2639 
    rfpath ++;
  }
  #line 2747 
  return;
}

#line 2827  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
static void _rtl8821ae_read_txpower_info_from_hwpg(struct ieee80211_hw *hw, bool autoload_fail, u8 *hwinfo)
{
  #line 2833 
  struct txpower_info_2g pwrinfo24g;
  #line 2834 
  struct txpower_info_5g pwrinfo5g;
  #line 2835 
  u8 rf_path;
  #line 2835 
  u8 index;
  #line 2836 
  u8 i;
  #line 2831 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 2832 
  struct rtl_efuse *rtlefuse = & ((struct rtl_priv *)hw->priv)->efuse;
  #line 2838 
  _rtl8821ae_read_power_value_fromprom(hw,& pwrinfo24g,& pwrinfo5g,(_Bool)((bool)((int)autoload_fail) != 0),hwinfo);
  #line 2841 
  rf_path = (unsigned char)0U;
  #line 2841 
  while ((unsigned int)rf_path <= 1U) {
    #line 2842 
    i = (unsigned char)0U;
    #line 2842 
    while ((unsigned int)i <= 13U) {
      #line 2843 
      index = _rtl8821ae_get_chnl_group((unsigned char)((int)((unsigned int)i + 1U)));
      #line 2845 
      if ((unsigned int)i == 13U) {
        #line 2846 
        rtlefuse->txpwrlevel_cck[(int)rf_path][(int)i] = pwrinfo24g.index_cck_base[(int)rf_path][5];
        #line 2848 
        rtlefuse->txpwrlevel_ht40_1s[(int)rf_path][(int)i] = pwrinfo24g.index_bw40_base[(int)rf_path][(int)index];
      }
      else {
        #line 2851 
        rtlefuse->txpwrlevel_cck[(int)rf_path][(int)i] = pwrinfo24g.index_cck_base[(int)rf_path][(int)index];
        #line 2853 
        rtlefuse->txpwrlevel_ht40_1s[(int)rf_path][(int)i] = pwrinfo24g.index_bw40_base[(int)rf_path][(int)index];
      }
      #line 2842 
      i = (u8)((int)i + 1);
    }
    #line 2858 
    i = (unsigned char)0U;
    #line 2858 
    while ((unsigned int)i <= 48U) {
      #line 2859 
      index = _rtl8821ae_get_chnl_group((unsigned char)((int)channel5g[(int)i]));
      #line 2860 
      rtlefuse->txpwr_5g_bw40base[(int)rf_path][(int)i] = pwrinfo5g.index_bw40_base[(int)rf_path][(int)index];
      #line 2858 
      i = (u8)((int)i + 1);
    }
    #line 2863 
    i = (unsigned char)0U;
    #line 2863 
    while ((unsigned int)i <= 6U) {
      {
        #line 2864 
        u8 upper;
        #line 2864 
        u8 lower;
        #line 2865 
        index = _rtl8821ae_get_chnl_group((unsigned char)((int)channel5g_80m[(int)i]));
        #line 2866 
        upper = pwrinfo5g.index_bw40_base[(int)rf_path][(int)index];
        #line 2867 
        lower = pwrinfo5g.index_bw40_base[(int)rf_path][(int)index + 1];
        #line 2869 
        rtlefuse->txpwr_5g_bw80base[(int)rf_path][(int)i] = (unsigned char)(((int)upper + (int)lower) / 2);
      }
      #line 2863 
      i = (u8)((int)i + 1);
    }
    #line 2871 
    i = (unsigned char)0U;
    #line 2871 
    while ((unsigned int)i <= 3U) {
      #line 2872 
      rtlefuse->txpwr_cckdiff[(int)rf_path][(int)i] = (signed char)pwrinfo24g.cck_diff[(int)rf_path][(int)i];
      #line 2874 
      rtlefuse->txpwr_legacyhtdiff[(int)rf_path][(int)i] = (signed char)pwrinfo24g.ofdm_diff[(int)rf_path][(int)i];
      #line 2876 
      rtlefuse->txpwr_ht20diff[(int)rf_path][(int)i] = (signed char)pwrinfo24g.bw20_diff[(int)rf_path][(int)i];
      #line 2878 
      rtlefuse->txpwr_ht40diff[(int)rf_path][(int)i] = (signed char)pwrinfo24g.bw40_diff[(int)rf_path][(int)i];
      #line 2881 
      rtlefuse->txpwr_5g_ofdmdiff[(int)rf_path][(int)i] = (signed char)pwrinfo5g.ofdm_diff[(int)rf_path][(int)i];
      #line 2883 
      rtlefuse->txpwr_5g_bw20diff[(int)rf_path][(int)i] = (signed char)pwrinfo5g.bw20_diff[(int)rf_path][(int)i];
      #line 2885 
      rtlefuse->txpwr_5g_bw40diff[(int)rf_path][(int)i] = (signed char)pwrinfo5g.bw40_diff[(int)rf_path][(int)i];
      #line 2887 
      rtlefuse->txpwr_5g_bw80diff[(int)rf_path][(int)i] = (signed char)pwrinfo5g.bw80_diff[(int)rf_path][(int)i];
      #line 2871 
      i = (u8)((int)i + 1);
    }
    #line 2841 
    rf_path = (u8)((int)rf_path + 1);
  }
  #line 2892 
  if (! autoload_fail) {
    #line 2893 
    rtlefuse->eeprom_regulatory = (unsigned char)((unsigned int)*(hwinfo + 193U) & 7U);
    #line 2894 
    if ((unsigned int)*(hwinfo + 193U) == 255U) 
                                                #line 2895 
                                                rtlefuse->eeprom_regulatory = (unsigned char)0U;
  }
  else 
       #line 2897 
       rtlefuse->eeprom_regulatory = (unsigned char)0U;
  #line 2900 
  _rtl_dbg_print(rtlpriv,17ULL,2,(char *)"eeprom_regulatory = 0x%x\n",(int)rtlefuse->eeprom_regulatory);
  #line 2901 
  return;
}

#line 2904  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
static void _rtl8812ae_read_pa_type(struct ieee80211_hw *hw, u8 *hwinfo, bool autoload_fail)
{
  #line 2907 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 2908 
  struct rtl_hal *rtlhal = & rtlpriv->rtlhal;
  #line 2910 
  if (! autoload_fail) {
    #line 2911 
    rtlhal->pa_type_2g = *(hwinfo + 188U);
    #line 2912 
    rtlhal->lna_type_2g = *(hwinfo + 189U);
    #line 2913 
    if ((unsigned int)rtlhal->pa_type_2g == 255U && (unsigned int)rtlhal->lna_type_2g == 255U) {
      #line 2914 
      rtlhal->pa_type_2g = (unsigned char)0U;
      #line 2915 
      rtlhal->lna_type_2g = (unsigned char)0U;
    }
    #line 2917 
    rtlhal->external_pa_2g = (unsigned char)((((unsigned long)rtlhal->pa_type_2g & 32UL) != 0UL && ((unsigned long)rtlhal->pa_type_2g & 16UL) != 0UL) != 0);
    #line 2920 
    rtlhal->external_lna_2g = (unsigned char)((((unsigned long)rtlhal->lna_type_2g & 128UL) != 0UL && ((unsigned long)rtlhal->lna_type_2g & 8UL) != 0UL) != 0);
    #line 2924 
    rtlhal->pa_type_5g = *(hwinfo + 188U);
    #line 2925 
    rtlhal->lna_type_5g = *(hwinfo + 191U);
    #line 2926 
    if ((unsigned int)rtlhal->pa_type_5g == 255U && (unsigned int)rtlhal->lna_type_5g == 255U) {
      #line 2927 
      rtlhal->pa_type_5g = (unsigned char)0U;
      #line 2928 
      rtlhal->lna_type_5g = (unsigned char)0U;
    }
    #line 2930 
    rtlhal->external_pa_5g = (unsigned char)((((unsigned long)rtlhal->pa_type_5g & 2UL) != 0UL && ((unsigned long)rtlhal->pa_type_5g & 1UL) != 0UL) != 0);
    #line 2933 
    rtlhal->external_lna_5g = (unsigned char)((((unsigned long)rtlhal->lna_type_5g & 128UL) != 0UL && ((unsigned long)rtlhal->lna_type_5g & 8UL) != 0UL) != 0);
  }
  else {
    #line 2937 
    rtlhal->external_pa_2g = (unsigned char)0U;
    #line 2938 
    rtlhal->external_lna_2g = (unsigned char)0U;
    #line 2939 
    rtlhal->external_pa_5g = (unsigned char)0U;
    #line 2940 
    rtlhal->external_lna_5g = (unsigned char)0U;
  }
  #line 2942 
  return;
}

#line 2944  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
static void _rtl8812ae_read_amplifier_type(struct ieee80211_hw *hw, u8 *hwinfo, bool autoload_fail)
{
  #line 2947 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 2948 
  struct rtl_hal *rtlhal = & rtlpriv->rtlhal;
  #line 2950 
  u8 ext_type_pa_2g_a = (unsigned char)((unsigned int)((unsigned char)((unsigned long)*(hwinfo + 189U) >> 2)) & 1U);
  #line 2951 
  u8 ext_type_pa_2g_b = (unsigned char)((unsigned int)((unsigned char)((unsigned long)*(hwinfo + 189U) >> 6)) & 1U);
  #line 2952 
  u8 ext_type_pa_5g_a = (unsigned char)((unsigned int)((unsigned char)((unsigned long)*(hwinfo + 191U) >> 2)) & 1U);
  #line 2953 
  u8 ext_type_pa_5g_b = (unsigned char)((unsigned int)((unsigned char)((unsigned long)*(hwinfo + 191U) >> 6)) & 1U);
  #line 2955 
  u8 ext_type_lna_2g_a = (unsigned char)((unsigned int)*(hwinfo + 189U) & 3U);
  #line 2957 
  u8 ext_type_lna_2g_b = (unsigned char)((unsigned int)((unsigned char)((unsigned long)*(hwinfo + 189U) >> 4)) & 3U);
  #line 2959 
  u8 ext_type_lna_5g_a = (unsigned char)((unsigned int)*(hwinfo + 191U) & 3U);
  #line 2961 
  u8 ext_type_lna_5g_b = (unsigned char)((unsigned int)((unsigned char)((unsigned long)*(hwinfo + 191U) >> 4)) & 3U);
  #line 2963 
  _rtl8812ae_read_pa_type(hw,hwinfo,(_Bool)((bool)((int)autoload_fail) != 0));
  #line 2966 
  if (((unsigned long)rtlhal->pa_type_2g & 48UL) == 48UL) 
                                                          #line 2967 
                                                          rtlhal->type_gpa = (unsigned char)(((int)ext_type_pa_2g_b << 2) | (int)ext_type_pa_2g_a);
  #line 2970 
  if (((unsigned long)rtlhal->pa_type_5g & 3UL) == 3UL) 
                                                        #line 2971 
                                                        rtlhal->type_apa = (unsigned char)(((int)ext_type_pa_5g_b << 2) | (int)ext_type_pa_5g_a);
  #line 2974 
  if (((unsigned long)rtlhal->lna_type_2g & 136UL) == 136UL) 
                                                             #line 2975 
                                                             rtlhal->type_glna = (unsigned char)(((int)ext_type_lna_2g_b << 2) | (int)ext_type_lna_2g_a);
  #line 2978 
  if (((unsigned long)rtlhal->lna_type_5g & 136UL) == 136UL) 
                                                             #line 2979 
                                                             rtlhal->type_alna = (unsigned char)(((int)ext_type_lna_5g_b << 2) | (int)ext_type_lna_5g_a);
  #line 2980 
  return;
}

#line 2982  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
static void _rtl8821ae_read_pa_type(struct ieee80211_hw *hw, u8 *hwinfo, bool autoload_fail)
{
  #line 2985 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 2986 
  struct rtl_hal *rtlhal = & rtlpriv->rtlhal;
  #line 2988 
  if (! autoload_fail) {
    #line 2989 
    rtlhal->pa_type_2g = *(hwinfo + 188U);
    #line 2990 
    rtlhal->lna_type_2g = *(hwinfo + 189U);
    #line 2991 
    if ((unsigned int)rtlhal->pa_type_2g == 255U && (unsigned int)rtlhal->lna_type_2g == 255U) {
      #line 2992 
      rtlhal->pa_type_2g = (unsigned char)0U;
      #line 2993 
      rtlhal->lna_type_2g = (unsigned char)0U;
    }
    #line 2995 
    rtlhal->external_pa_2g = (unsigned char)((unsigned int)((unsigned char)((unsigned long)rtlhal->pa_type_2g >> 5)) & 1U);
    #line 2996 
    rtlhal->external_lna_2g = (unsigned char)((unsigned int)((unsigned char)((unsigned long)rtlhal->lna_type_2g >> 7)) & 1U);
    #line 2998 
    rtlhal->pa_type_5g = *(hwinfo + 188U);
    #line 2999 
    rtlhal->lna_type_5g = *(hwinfo + 191U);
    #line 3000 
    if ((unsigned int)rtlhal->pa_type_5g == 255U && (unsigned int)rtlhal->lna_type_5g == 255U) {
      #line 3001 
      rtlhal->pa_type_5g = (unsigned char)0U;
      #line 3002 
      rtlhal->lna_type_5g = (unsigned char)0U;
    }
    #line 3004 
    rtlhal->external_pa_5g = (unsigned char)((unsigned int)((unsigned char)((unsigned long)rtlhal->pa_type_5g >> 1)) & 1U);
    #line 3005 
    rtlhal->external_lna_5g = (unsigned char)((unsigned int)((unsigned char)((unsigned long)rtlhal->lna_type_5g >> 7)) & 1U);
  }
  else {
    #line 3007 
    rtlhal->external_pa_2g = (unsigned char)0U;
    #line 3008 
    rtlhal->external_lna_2g = (unsigned char)0U;
    #line 3009 
    rtlhal->external_pa_5g = (unsigned char)0U;
    #line 3010 
    rtlhal->external_lna_5g = (unsigned char)0U;
  }
  #line 3012 
  return;
}

#line 3014  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
static void _rtl8821ae_read_rfe_type(struct ieee80211_hw *hw, u8 *hwinfo, bool autoload_fail)
{
  #line 3017 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 3018 
  struct rtl_hal *rtlhal = & rtlpriv->rtlhal;
  #line 3020 
  if (! autoload_fail) 
    #line 3021 
    if (((unsigned long)*(hwinfo + 202U) & 128UL) != 0UL) 
      #line 3022 
      if ((unsigned int)rtlhal->external_lna_5g != 0U) 
        #line 3023 
        if ((unsigned int)rtlhal->external_pa_5g != 0U) 
          #line 3024 
          if ((unsigned int)rtlhal->external_lna_2g != 0U && (unsigned int)rtlhal->external_pa_2g != 0U) 
            #line 3026 
            rtlhal->rfe_type = (unsigned char)3U; else 
                                                       #line 3028 
                                                       rtlhal->rfe_type = (unsigned char)0U;
        else 
             #line 3030 
             rtlhal->rfe_type = (unsigned char)2U;
      else 
           #line 3033 
           rtlhal->rfe_type = (unsigned char)4U;
    else {
      #line 3036 
      rtlhal->rfe_type = (unsigned char)((unsigned int)*(hwinfo + 202U) & 63U);
      #line 3038 
      if ((unsigned int)rtlhal->rfe_type == 4U && ((((unsigned int)rtlhal->external_pa_5g != 0U || (unsigned int)rtlhal->external_pa_2g != 0U) || (unsigned int)rtlhal->external_lna_5g != 0U) || (unsigned int)rtlhal->external_lna_2g != 0U)) 
        #line 3043 
        if ((unsigned int)rtlhal->hw_type == 14U) 
                                                  #line 3044 
                                                  rtlhal->rfe_type = (unsigned char)2U;
    }
  else 
       #line 3048 
       rtlhal->rfe_type = (unsigned char)4U;
  #line 3051 
  _rtl_dbg_trace(rtlpriv,4ULL,4,(char *)"RFE Type: 0x%2x\n",(int)rtlhal->rfe_type);
  #line 3052 
  return;
}

#line 3055  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
static void _rtl8812ae_read_bt_coexist_info_from_hwpg(struct ieee80211_hw *hw, bool auto_load_fail, u8 *hwinfo)
{
  #line 3059 
  u8 value;
  #line 3058 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 3061 
  if (! auto_load_fail) {
    #line 3062 
    value = *(hwinfo + 193U);
    #line 3063 
    if ((unsigned int)((int)value >> 5) == 1U) 
                                               #line 3064 
                                               rtlpriv->btcoexist.btc_info.btcoexist = (unsigned char)1U; else 
                                                                    #line 3066 
                                                                    rtlpriv->btcoexist.btc_info.btcoexist = (unsigned char)0U;
    #line 3067 
    rtlpriv->btcoexist.btc_info.bt_type = (unsigned char)11U;
    #line 3069 
    value = *(hwinfo + 195U);
    #line 3070 
    rtlpriv->btcoexist.btc_info.ant_num = (unsigned char)((unsigned int)value & 1U);
  }
  else {
    #line 3072 
    rtlpriv->btcoexist.btc_info.btcoexist = (unsigned char)0U;
    #line 3073 
    rtlpriv->btcoexist.btc_info.bt_type = (unsigned char)11U;
    #line 3074 
    rtlpriv->btcoexist.btc_info.ant_num = (unsigned char)0U;
  }
  #line 3076 
  return;
}

#line 3079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
static void _rtl8821ae_read_bt_coexist_info_from_hwpg(struct ieee80211_hw *hw, bool auto_load_fail, u8 *hwinfo)
{
  #line 3083 
  u8 value;
  #line 3084 
  u32 tmpu_32;
  #line 3082 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 3086 
  if (! auto_load_fail) {
    #line 3087 
    tmpu_32 = rtl_read_dword(rtlpriv,104U);
    #line 3088 
    if (((unsigned long)tmpu_32 & 262144UL) != 0UL) 
                                                    #line 3089 
                                                    rtlpriv->btcoexist.btc_info.btcoexist = (unsigned char)1U; else 
                                                                    #line 3091 
                                                                    rtlpriv->btcoexist.btc_info.btcoexist = (unsigned char)0U;
    #line 3092 
    rtlpriv->btcoexist.btc_info.bt_type = (unsigned char)7U;
    #line 3094 
    value = *(hwinfo + 195U);
    #line 3095 
    rtlpriv->btcoexist.btc_info.ant_num = (unsigned char)((unsigned int)value & 1U);
  }
  else {
    #line 3097 
    rtlpriv->btcoexist.btc_info.btcoexist = (unsigned char)0U;
    #line 3098 
    rtlpriv->btcoexist.btc_info.bt_type = (unsigned char)7U;
    #line 3099 
    rtlpriv->btcoexist.btc_info.ant_num = (unsigned char)0U;
  }
  #line 3101 
  return;
}

#line 3104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
static void _rtl8821ae_read_adapter_info(struct ieee80211_hw *hw, bool b_pseudo_test)
{
  #line 3113 
  u8 *hwinfo;
  #line 3106 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 3107 
  struct rtl_efuse *rtlefuse = & ((struct rtl_priv *)hw->priv)->efuse;
  #line 3108 
  struct rtl_hal *rtlhal = & ((struct rtl_priv *)hw->priv)->rtlhal;
  #line 3109 
  int params[10U] = {33065, 214, 216, 218, 220, 208, 184, 196, 197, 11};
  #line 3115 
  if ((int)b_pseudo_test != 0) ;
  #line 3119 
  hwinfo = (u8 *)kzalloc(512UL,3264U);
  #line 3120 
  if (hwinfo == (u8 *)0U) 
                          #line 3121 
                          return;
  #line 3123 
  if (rtl_get_hwinfo(hw,rtlpriv,512,hwinfo,(int *)(& params)) != 0) 
                                                                    #line 3124 
                                                                    goto exit;
  #line 3126 
  _rtl8821ae_read_txpower_info_from_hwpg(hw,(_Bool)((unsigned int)rtlefuse->autoload_failflag != 0U),hwinfo);
  #line 3129 
  if ((unsigned int)rtlhal->hw_type == 14U) {
    #line 3130 
    _rtl8812ae_read_amplifier_type(hw,hwinfo,(_Bool)((unsigned int)rtlefuse->autoload_failflag != 0U));
    #line 3132 
    _rtl8812ae_read_bt_coexist_info_from_hwpg(hw,(_Bool)((unsigned int)rtlefuse->autoload_failflag != 0U),hwinfo);
  }
  else {
    #line 3135 
    _rtl8821ae_read_pa_type(hw,hwinfo,(_Bool)((unsigned int)rtlefuse->autoload_failflag != 0U));
    #line 3136 
    _rtl8821ae_read_bt_coexist_info_from_hwpg(hw,(_Bool)((unsigned int)rtlefuse->autoload_failflag != 0U),hwinfo);
  }
  #line 3140 
  _rtl8821ae_read_rfe_type(hw,hwinfo,(_Bool)((unsigned int)rtlefuse->autoload_failflag != 0U));
  #line 3142 
  rtlefuse->board_type = (unsigned char)0U;
  #line 3143 
  if ((unsigned int)rtlhal->external_lna_2g != 0U) 
                                                   #line 3144 
                                                   rtlefuse->board_type = (unsigned char)((unsigned int)rtlefuse->board_type | 16U);
  #line 3145 
  if ((unsigned int)rtlhal->external_lna_5g != 0U) 
                                                   #line 3146 
                                                   rtlefuse->board_type = (unsigned char)((unsigned int)rtlefuse->board_type | 128U);
  #line 3147 
  if ((unsigned int)rtlhal->external_pa_2g != 0U) 
                                                  #line 3148 
                                                  rtlefuse->board_type = (unsigned char)((unsigned int)rtlefuse->board_type | 8U);
  #line 3149 
  if ((unsigned int)rtlhal->external_pa_5g != 0U) 
                                                  #line 3150 
                                                  rtlefuse->board_type = (unsigned char)((unsigned int)rtlefuse->board_type | 64U);
  #line 3152 
  if ((unsigned int)rtlpriv->btcoexist.btc_info.btcoexist == 1U) 
                                                                 #line 3153 
                                                                 rtlefuse->board_type = (unsigned char)((unsigned int)rtlefuse->board_type | 4U);
  #line 3155 
  rtlhal->board_type = rtlefuse->board_type;
  #line 3156 
  _rtl_dbg_trace(rtlpriv,4ULL,4,(char *)"board_type = 0x%x\n",(int)rtlefuse->board_type);
  #line 3159 
  rtlefuse->eeprom_channelplan = (unsigned short)*(hwinfo + 184U);
  #line 3160 
  if ((unsigned int)rtlefuse->eeprom_channelplan == 255U) 
                                                          #line 3161 
                                                          rtlefuse->eeprom_channelplan = (unsigned short)127U;
  #line 3164 
  rtlefuse->channel_plan = (unsigned char)rtlefuse->eeprom_channelplan;
  #line 3167 
  rtlefuse->crystalcap = *(hwinfo + 185U);
  #line 3168 
  if ((unsigned int)rtlefuse->crystalcap == 255U) 
                                                  #line 3169 
                                                  rtlefuse->crystalcap = (unsigned char)32U;
  #line 3171 
  rtlefuse->eeprom_thermalmeter = *(hwinfo + 186U);
  #line 3172 
  if ((unsigned int)rtlefuse->eeprom_thermalmeter == 255U || (unsigned int)rtlefuse->autoload_failflag != 0U) {
    #line 3174 
    rtlefuse->apk_thermalmeterignore = (_Bool)1;
    #line 3175 
    rtlefuse->eeprom_thermalmeter = (unsigned char)255U;
  }
  #line 3178 
  rtlefuse->thermalmeter[0] = rtlefuse->eeprom_thermalmeter;
  #line 3179 
  _rtl_dbg_trace(rtlpriv,4ULL,4,(char *)"thermalmeter = 0x%x\n",(int)rtlefuse->eeprom_thermalmeter);
  #line 3182 
  if ((unsigned int)rtlefuse->autoload_failflag == 0U) {
    #line 3183 
    rtlefuse->antenna_div_cfg = (unsigned char)((unsigned int)((unsigned char)((int)*(hwinfo + 193U) >> 3)) & 3U);
    #line 3185 
    if ((unsigned int)*(hwinfo + 193U) == 255U) 
                                                #line 3186 
                                                rtlefuse->antenna_div_cfg = (unsigned char)0U;
    #line 3188 
    if ((unsigned int)rtlpriv->btcoexist.btc_info.btcoexist == 1U && (unsigned int)rtlpriv->btcoexist.btc_info.ant_num == 1U) 
      #line 3190 
      rtlefuse->antenna_div_cfg = (unsigned char)0U;
    #line 3192 
    rtlefuse->antenna_div_type = *(hwinfo + 201U);
    #line 3193 
    if ((unsigned int)rtlefuse->antenna_div_type == 255U) 
                                                          #line 3194 
                                                          rtlefuse->antenna_div_type = (unsigned char)3U;
  }
  else {
    #line 3196 
    rtlefuse->antenna_div_cfg = (unsigned char)0U;
    #line 3197 
    rtlefuse->antenna_div_type = (unsigned char)0U;
  }
  #line 3200 
  _rtl_dbg_trace(rtlpriv,4ULL,4,(char *)"SWAS: bHwAntDiv = %x, TRxAntDivType = %x\n",(int)rtlefuse->antenna_div_cfg,(int)rtlefuse->antenna_div_type);
  #line 3204 
  rtlpriv->ledctl.led_opendrain = (_Bool)1;
  #line 3206 
  if ((unsigned int)rtlhal->oem_id == 0U) 
    #line 3207 
    switch ((int)rtlefuse->eeprom_oemid) {
      #line 3208 
      case 0: 
              #line 3208 
      ;
      #line 3209 
      break;
      #line 3210 
      case 4: 
              #line 3210 
      ;
      #line 3211 
      rtlhal->oem_id = (unsigned char)9U;
      #line 3212 
      break;
      #line 3213 
      case 16: 
               #line 3213 
      ;
      #line 3214 
      rtlhal->oem_id = (unsigned char)17U;
      #line 3215 
      break;
      #line 3216 
      case 13: 
               #line 3216 
      ;
      #line 3217 
      rtlhal->oem_id = (unsigned char)19U;
      #line 3218 
      break;
      #line 3219 
      case 254: 
                #line 3219 
      ;
      #line 3220 
      break;
      #line 3221 
      default: 
               #line 3221 
      ;
      #line 3222 
      break;
    }
  #line 3225 
  exit: 
        #line 3225 
  ;
  #line 3226 
  kfree((void *)hwinfo);
  #line 3227 
  return;
}

#line 3253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
void rtl8821ae_read_eeprom_info(struct ieee80211_hw *hw)
{
  #line 3259 
  u8 tmp_u1b;
  #line 3255 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 3256 
  struct rtl_efuse *rtlefuse = & ((struct rtl_priv *)hw->priv)->efuse;
  #line 3257 
  struct rtl_phy *rtlphy = & rtlpriv->phy;
  #line 3258 
  struct rtl_hal *rtlhal = & ((struct rtl_priv *)hw->priv)->rtlhal;
  #line 3261 
  rtlhal->version = (unsigned int)_rtl8821ae_read_chip_version(hw);
  #line 3262 
  if ((unsigned int)get_rf_type(rtlphy) == 0U) 
                                               #line 3263 
                                               rtlpriv->dm.rfpath_rxenable[0] = (_Bool)1;
  else {
    #line 3265 
    rtlpriv->dm.rfpath_rxenable[1] = ((_Bool)1);
    #line 3265 
    rtlpriv->dm.rfpath_rxenable[0] = ((_Bool)1);
  }
  #line 3267 
  _rtl_dbg_trace(rtlpriv,4ULL,4,(char *)"VersionID = 0x%4x\n",rtlhal->version);
  #line 3270 
  tmp_u1b = rtl_read_byte(rtlpriv,10U);
  #line 3271 
  if (((unsigned long)tmp_u1b & 16UL) != 0UL) {
    #line 3272 
    _rtl_dbg_trace(rtlpriv,4ULL,3,(char *)"Boot from EEPROM\n");
    #line 3273 
    rtlefuse->epromtype = (short)0;
  }
  else {
    #line 3275 
    _rtl_dbg_trace(rtlpriv,4ULL,3,(char *)"Boot from EFUSE\n");
    #line 3276 
    rtlefuse->epromtype = (short)2;
  }
  #line 3279 
  if (((unsigned long)tmp_u1b & 32UL) != 0UL) {
    #line 3280 
    _rtl_dbg_trace(rtlpriv,4ULL,4,(char *)"Autoload OK\n");
    #line 3281 
    rtlefuse->autoload_failflag = (unsigned char)0U;
    #line 3282 
    _rtl8821ae_read_adapter_info(hw,(_Bool)0);
  }
  else 
       #line 3284 
       printk((char *)"\001");
  #line 3285 
  return;
}

#line 3290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
static void rtl8821ae_update_hal_rate_table(struct ieee80211_hw *hw, struct ieee80211_sta *sta)
{
  #line 3297 
  u32 ratr_value;
  #line 3301 
  u16 shortgi_rate;
  #line 3302 
  u32 tmp_ratr_value;
  #line 3293 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 3294 
  struct rtl_phy *rtlphy = & rtlpriv->phy;
  #line 3295 
  struct rtl_mac *mac = & ((struct rtl_priv *)hw->priv)->mac80211;
  #line 3296 
  struct rtl_hal *rtlhal = & ((struct rtl_priv *)hw->priv)->rtlhal;
  #line 3298 
  u8 ratr_index = (unsigned char)0U;
  #line 3299 
  u8 b_nmode = mac->ht_enable;
  #line 3300 
  u8 mimo_ps = (unsigned char)1U;
  #line 3303 
  u8 curtxbw_40mhz = mac->bw_40;
  #line 3304 
  u8 b_curshortgi_40mhz = (unsigned char)((unsigned int)((unsigned char)((int)sta->ht_cap.cap >> 6)) & 1U);
  #line 3306 
  u8 b_curshortgi_20mhz = (unsigned char)((unsigned int)((unsigned char)((int)sta->ht_cap.cap >> 5)) & 1U);
  #line 3308 
  enum wireless_mode wirelessmode = (enum wireless_mode)mac->mode;
  #line 3310 
  if (rtlhal->current_bandtype == (unsigned int)BAND_ON_5G) 
                                                            #line 3311 
                                                            ratr_value = sta->supp_rates[1] << 4; else 
                                                                    #line 3313 
                                                                    ratr_value = sta->supp_rates[0];
  #line 3314 
  if (mac->opmode == (unsigned int)NL80211_IFTYPE_ADHOC) 
                                                         #line 3315 
                                                         ratr_value = 4095U;
  #line 3316 
  ratr_value = (unsigned int)(((int)sta->ht_cap.mcs.rx_mask[1] << 20) | ((int)sta->ht_cap.mcs.rx_mask[0] << 12)) | ratr_value;
  #line 3318 
  switch ((unsigned int)wirelessmode) {
    #line 3319 
    case (unsigned int)2: 
                          #line 3319 
    ;
    #line 3320 
    if ((ratr_value & 12U) != 0U) 
                                  #line 3321 
                                  ratr_value &= 13U; else 
                                                          #line 3323 
                                                          ratr_value &= 15U;
    #line 3324 
    break;
    #line 3325 
    case (unsigned int)4: 
                          #line 3325 
    ;
    #line 3326 
    ratr_value &= 4085U;
    #line 3327 
    break;
    #line 3328 
    case (unsigned int)16: 
                           #line 3328 
    ;
    #line 3329 
    case (unsigned int)32: 
                           #line 3329 
    ;
    #line 3330 
    b_nmode = (unsigned char)1U;
    #line 3331 
    if ((unsigned int)mimo_ps == 2U) 
                                     #line 3332 
                                     ratr_value &= 520197U;
    else {
      #line 3334 
      u32 ratr_mask;
      #line 3336 
      if ((unsigned int)get_rf_type(rtlphy) == 1U) 
                                                   #line 3336 
                                                   goto _LOR;
      else {
        #line 3336 
        if ((unsigned int)get_rf_type(rtlphy) == 0U) 
                                                     #line 3336 
                                                     _LOR: 
                                                           #line 3338 
                                                           ratr_mask = 1044485U; else 
                                                                    #line 3340 
                                                                    ratr_mask = 252702725U;
      }
      #line 3342 
      ratr_value &= ratr_mask;
    }
    #line 3344 
    break;
    #line 3345 
    default: 
             #line 3345 
    ;
    #line 3346 
    if ((unsigned int)rtlphy->rf_type == 1U) 
                                             #line 3347 
                                             ratr_value &= 1044735U; else 
                                                                    #line 3349 
                                                                    ratr_value &= 252702975U;
    #line 3351 
    break;
  }
  #line 3354 
  if (((((unsigned int)rtlpriv->btcoexist.bt_coexistence != 0U && (unsigned int)rtlpriv->btcoexist.bt_coexist_type == 3U) && (unsigned int)rtlpriv->btcoexist.bt_cur_state != 0U) && (unsigned int)rtlpriv->btcoexist.bt_ant_isolation != 0U) && ((unsigned int)rtlpriv->btcoexist.bt_service == 0U || (unsigned int)rtlpriv->btcoexist.bt_service == 7U)) 
    #line 3360 
    ratr_value &= 268423104U; else 
                                   #line 3362 
                                   ratr_value &= 268435455U;
  #line 3364 
  if ((unsigned int)b_nmode != 0U && ((unsigned int)curtxbw_40mhz != 0U && (unsigned int)b_curshortgi_40mhz != 0U || (unsigned int)curtxbw_40mhz == 0U && (unsigned int)b_curshortgi_20mhz != 0U)) {
    #line 3367 
    ratr_value |= 268435456U;
    #line 3368 
    tmp_ratr_value = ratr_value >> 12;
    #line 3370 
    shortgi_rate = (unsigned short)15U;
    #line 3370 
    while ((unsigned int)shortgi_rate != 0U) {
      #line 3371 
      if (((unsigned int)(1 << (int)shortgi_rate) & tmp_ratr_value) != 0U) 
        #line 3372 
        break;
      #line 3370 
      shortgi_rate = (u16)((int)shortgi_rate - 1);
    }
    #line 3375 
    shortgi_rate = (unsigned short)(((((int)shortgi_rate << 12) | ((int)shortgi_rate << 8)) | ((int)shortgi_rate << 4)) | (int)shortgi_rate);
  }
  #line 3379 
  rtl_write_dword(rtlpriv,(unsigned int)(((int)ratr_index + 273) * 4),ratr_value);
  #line 3381 
  ;
  #line 3381 
  _rtl_dbg_trace(rtlpriv,4194304ULL,3,(char *)"%x\n",rtl_read_dword(rtlpriv,1092U));
  #line 3382 
  return;
}

#line 3385  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
static u32 _rtl8821ae_rate_to_bitmap_2ssvht(__le16 vht_rate)
{
  #line 3387 
  u8 i;
  #line 3387 
  u8 j;
  #line 3387 
  u8 tmp_rate;
  #line 3388 
  u32 rate_bitmap = 0U;
  #line 3390 
  j = (unsigned char)0U;
  #line 3390 
  i = j;
  #line 3390 
  while ((unsigned int)i <= 3U) {
    #line 3391 
    tmp_rate = (unsigned char)((unsigned int)((unsigned char)((int)vht_rate >> (int)i)) & 3U);
    #line 3393 
    switch ((int)tmp_rate) {
      #line 3394 
      case 2: 
              #line 3394 
      ;
      #line 3395 
      rate_bitmap = (unsigned int)(1023 << (int)j) | rate_bitmap;
      #line 3396 
      break;
      #line 3397 
      case 1: 
              #line 3397 
      ;
      #line 3398 
      rate_bitmap = (unsigned int)(511 << (int)j) | rate_bitmap;
      #line 3399 
      break;
      #line 3400 
      case 0: 
              #line 3400 
      ;
      #line 3401 
      rate_bitmap = (unsigned int)(255 << (int)j) | rate_bitmap;
      #line 3402 
      break;
      #line 3403 
      default: 
               #line 3403 
      ;
      #line 3404 
      break;
    }
    #line 3390 
    i = (unsigned char)((unsigned int)i + 2U);
    #line 3390 
    j = (unsigned char)((unsigned int)j + 10U);
  }
  #line 3408 
  return rate_bitmap;
}

#line 3411  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
static u32 _rtl8821ae_set_ra_vht_ratr_bitmap(struct ieee80211_hw *hw, enum wireless_mode wirelessmode, u32 ratr_bitmap)
{
  #line 3415 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 3416 
  struct rtl_phy *rtlphy = & rtlpriv->phy;
  #line 3417 
  u32 ret_bitmap = ratr_bitmap;
  #line 3419 
  if ((unsigned int)rtlphy->current_chan_bw + 255U <= 1U) 
                                                          #line 3421 
                                                          ret_bitmap = ratr_bitmap;
  else 
    #line 3422 
    if (wirelessmode == (unsigned int)WIRELESS_MODE_AC_5G || wirelessmode == (unsigned int)WIRELESS_MODE_AC_24G) 
      #line 3424 
      if ((unsigned int)rtlphy->rf_type == 0U) 
                                               #line 3425 
                                               ret_bitmap = ratr_bitmap & 4292870143U; else 
                                                                    #line 3427 
                                                                    ret_bitmap = ratr_bitmap & 2145386495U;
  #line 3430 
  return ret_bitmap;
}

#line 3433  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
static u8 _rtl8821ae_get_vht_eni(enum wireless_mode wirelessmode, u32 ratr_bitmap)
{
  #line 3436 
  u8 ret = (unsigned char)0U;
  #line 3437 
  if (wirelessmode <= (unsigned int)15) 
                                        #line 3438 
                                        ret = (unsigned char)0U;
  else 
    #line 3439 
    if (wirelessmode == (unsigned int)WIRELESS_MODE_AC_24G) 
      #line 3440 
      if ((ratr_bitmap & 4293918720U) != 0U) 
                                             #line 3441 
                                             ret = (unsigned char)3U; else 
                                                                    #line 3443 
                                                                    ret = (unsigned char)2U;
    else 
      #line 3444 
      if (wirelessmode == (unsigned int)WIRELESS_MODE_AC_5G) 
                                                             #line 3445 
                                                             ret = (unsigned char)1U;
  #line 3448 
  return (unsigned char)((int)ret << 4U);
}

#line 3451  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
static u8 _rtl8821ae_get_ra_ldpc(struct ieee80211_hw *hw, u8 mac_id, struct rtl_sta_info *sta_entry, enum wireless_mode wirelessmode)
{
  #line 3455 
  u8 b_ldpc = (unsigned char)0U;
  #line 3457 
  return (unsigned char)((int)b_ldpc << 2U);
}

#line 3460  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
static u8 _rtl8821ae_get_ra_rftype(struct ieee80211_hw *hw, enum wireless_mode wirelessmode, u32 ratr_bitmap)
{
  #line 3464 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 3465 
  struct rtl_phy *rtlphy = & rtlpriv->phy;
  #line 3466 
  u8 rf_type = (unsigned char)0U;
  #line 3468 
  if ((unsigned int)rtlphy->rf_type == 0U) 
                                           #line 3469 
                                           rf_type = (unsigned char)0U;
  else 
    #line 3470 
    if ((wirelessmode == (unsigned int)WIRELESS_MODE_AC_5G || wirelessmode == (unsigned int)WIRELESS_MODE_AC_24G) || wirelessmode == (unsigned int)WIRELESS_MODE_AC_ONLY) {
      #line 3473 
      if ((ratr_bitmap & 4290772992U) != 0U) 
                                             #line 3474 
                                             rf_type = (unsigned char)2U;
    }
    else 
      #line 3475 
      if (wirelessmode == (unsigned int)WIRELESS_MODE_N_5G || wirelessmode == (unsigned int)WIRELESS_MODE_N_24G) 
        #line 3477 
        if ((ratr_bitmap & 4293918720U) != 0U) 
                                               #line 3478 
                                               rf_type = (unsigned char)2U;
  #line 3481 
  return rf_type;
}

#line 3484  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
static bool _rtl8821ae_get_ra_shortgi(struct ieee80211_hw *hw, struct ieee80211_sta *sta, u8 mac_id)
{
  #line 3487 
  bool b_short_gi = (_Bool)0;
  #line 3488 
  u8 b_curshortgi_40mhz = (unsigned char)((unsigned int)((unsigned char)((int)sta->ht_cap.cap >> 6)) & 1U);
  #line 3490 
  u8 b_curshortgi_20mhz = (unsigned char)((unsigned int)((unsigned char)((int)sta->ht_cap.cap >> 5)) & 1U);
  #line 3492 
  u8 b_curshortgi_80mhz = (unsigned char)0U;
  #line 3493 
  b_curshortgi_80mhz = (unsigned char)((unsigned int)((unsigned char)(sta->vht_cap.cap >> 5)) & 1U);
  #line 3496 
  if ((unsigned int)mac_id == 1U) 
                                  #line 3497 
                                  b_short_gi = (_Bool)0;
  #line 3499 
  if (((unsigned int)b_curshortgi_40mhz != 0U || (unsigned int)b_curshortgi_80mhz != 0U) || (unsigned int)b_curshortgi_20mhz != 0U) 
    #line 3501 
    b_short_gi = (_Bool)1;
  #line 3503 
  return b_short_gi;
}

#line 3506  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
static void rtl8821ae_update_hal_rate_mask(struct ieee80211_hw *hw, struct ieee80211_sta *sta, u8 rssi_level, bool update_bw)
{
  #line 3513 
  u32 ratr_bitmap;
  #line 3514 
  u8 ratr_index;
  #line 3519 
  u8 rate_mask[7U];
  #line 3522 
  u8 rf_type;
  #line 3685 
  int tmp_0;
  #line 3509 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 3510 
  struct rtl_phy *rtlphy = & rtlpriv->phy;
  #line 3511 
  struct rtl_mac *mac = & ((struct rtl_priv *)hw->priv)->mac80211;
  #line 3512 
  struct rtl_sta_info *sta_entry = (struct rtl_sta_info *)0;
  #line 3515 
  enum wireless_mode wirelessmode = WIRELESS_MODE_UNKNOWN;
  #line 3516 
  u8 curtxbw_40mhz = (unsigned char)((unsigned int)((unsigned char)((int)sta->ht_cap.cap >> 1)) & 1U);
  #line 3518 
  bool b_shortgi = (_Bool)0;
  #line 3520 
  u8 macid = (unsigned char)0U;
  #line 3521 
  u8 mimo_ps = (unsigned char)1U;
  #line 3524 
  sta_entry = (struct rtl_sta_info *)(& sta->drv_priv);
  #line 3525 
  wirelessmode = (enum wireless_mode)sta_entry->wireless_mode;
  #line 3527 
  _rtl_dbg_trace(rtlpriv,4194304ULL,4,(char *)"wireless mode = 0x%x\n",(unsigned int)wirelessmode);
  #line 3529 
  if (mac->opmode == (unsigned int)NL80211_IFTYPE_STATION || mac->opmode == (unsigned int)NL80211_IFTYPE_MESH_POINT) 
    #line 3531 
    curtxbw_40mhz = mac->bw_40;
  else 
    #line 3532 
    if (mac->opmode == (unsigned int)NL80211_IFTYPE_AP || mac->opmode == (unsigned int)NL80211_IFTYPE_ADHOC) 
      #line 3534 
      macid = (unsigned char)((unsigned int)((unsigned char)sta->aid) + 1U);
  #line 3535 
  if ((wirelessmode == (unsigned int)WIRELESS_MODE_N_5G || wirelessmode == (unsigned int)WIRELESS_MODE_AC_5G) || wirelessmode == (unsigned int)WIRELESS_MODE_A) 
    #line 3538 
    ratr_bitmap = sta->supp_rates[1] << 4; else 
                                                #line 3540 
                                                ratr_bitmap = sta->supp_rates[0];
  #line 3542 
  if (mac->opmode == (unsigned int)NL80211_IFTYPE_ADHOC) 
                                                         #line 3543 
                                                         ratr_bitmap = 4095U;
  #line 3545 
  if (wirelessmode == (unsigned int)WIRELESS_MODE_N_24G || wirelessmode == (unsigned int)WIRELESS_MODE_N_5G) 
    #line 3547 
    ratr_bitmap = (unsigned int)(((int)sta->ht_cap.mcs.rx_mask[1] << 20) | ((int)sta->ht_cap.mcs.rx_mask[0] << 12)) | ratr_bitmap;
  else 
    #line 3549 
    if ((wirelessmode == (unsigned int)WIRELESS_MODE_AC_24G || wirelessmode == (unsigned int)WIRELESS_MODE_AC_5G) || wirelessmode == (unsigned int)WIRELESS_MODE_AC_ONLY) {
      #line 3553 
      ratr_bitmap = (_rtl8821ae_rate_to_bitmap_2ssvht((unsigned short)((int)sta->vht_cap.vht_mcs.rx_mcs_map)) << 12) | ratr_bitmap;
    }
  #line 3555 
  b_shortgi = _rtl8821ae_get_ra_shortgi(hw,sta,(unsigned char)((int)macid));
  #line 3556 
  rf_type = _rtl8821ae_get_ra_rftype(hw,wirelessmode,ratr_bitmap);
  #line 3559 
  switch ((unsigned int)wirelessmode) {
    #line 3560 
    case (unsigned int)2: 
                          #line 3560 
    ;
    #line 3561 
    ratr_index = (unsigned char)6U;
    #line 3562 
    if ((ratr_bitmap & 12U) != 0U) 
                                   #line 3563 
                                   ratr_bitmap &= 13U; else 
                                                            #line 3565 
                                                            ratr_bitmap &= 15U;
    #line 3566 
    break;
    #line 3567 
    case (unsigned int)4: 
                          #line 3567 
    ;
    #line 3568 
    ratr_index = (unsigned char)4U;
    #line 3570 
    if ((unsigned int)rssi_level == 1U) 
                                        #line 3571 
                                        ratr_bitmap &= 3840U;
    else 
      #line 3572 
      if ((unsigned int)rssi_level == 2U) 
                                          #line 3573 
                                          ratr_bitmap &= 4080U; else 
                                                                  #line 3575 
                                                                  ratr_bitmap &= 4085U;
    #line 3576 
    break;
    #line 3577 
    case (unsigned int)1: 
                          #line 3577 
    ;
    #line 3578 
    ratr_index = (unsigned char)5U;
    #line 3579 
    ratr_bitmap &= 4080U;
    #line 3580 
    break;
    #line 3581 
    case (unsigned int)16: 
                           #line 3581 
    ;
    #line 3582 
    case (unsigned int)32: 
                           #line 3582 
    ;
    #line 3583 
    if (wirelessmode == (unsigned int)WIRELESS_MODE_N_24G) 
                                                           #line 3584 
                                                           ratr_index = (unsigned char)0U; else 
                                                                    #line 3586 
                                                                    ratr_index = (unsigned char)1U;
    #line 3588 
    if ((unsigned int)mimo_ps + 254U <= 1U) 
      #line 3590 
      if ((unsigned int)rssi_level == 1U) 
                                          #line 3591 
                                          ratr_bitmap &= 983040U;
      else 
        #line 3592 
        if ((unsigned int)rssi_level == 2U) 
                                            #line 3593 
                                            ratr_bitmap &= 1044480U; else 
                                                                    #line 3595 
                                                                    ratr_bitmap &= 1044485U;
    else 
      #line 3597 
      if ((unsigned int)rf_type == 0U) 
        #line 3598 
        if ((unsigned int)curtxbw_40mhz != 0U) 
          #line 3599 
          if ((unsigned int)rssi_level == 1U) 
                                              #line 3600 
                                              ratr_bitmap &= 983040U;
          else 
            #line 3601 
            if ((unsigned int)rssi_level == 2U) 
                                                #line 3602 
                                                ratr_bitmap &= 1044480U; else 
                                                                    #line 3604 
                                                                    ratr_bitmap &= 1044501U;
        else 
          #line 3606 
          if ((unsigned int)rssi_level == 1U) 
                                              #line 3607 
                                              ratr_bitmap &= 983040U;
          else 
            #line 3608 
            if ((unsigned int)rssi_level == 2U) 
                                                #line 3609 
                                                ratr_bitmap &= 1044480U; else 
                                                                    #line 3611 
                                                                    ratr_bitmap &= 1044485U;
      else 
        #line 3614 
        if ((unsigned int)curtxbw_40mhz != 0U) 
          #line 3615 
          if ((unsigned int)rssi_level == 1U) 
                                              #line 3616 
                                              ratr_bitmap &= 268369920U;
          else 
            #line 3617 
            if ((unsigned int)rssi_level == 2U) 
                                                #line 3618 
                                                ratr_bitmap &= 268431360U; else 
                                                                    #line 3620 
                                                                    ratr_bitmap &= 268431381U;
        else 
          #line 3622 
          if ((unsigned int)rssi_level == 1U) 
                                              #line 3623 
                                              ratr_bitmap &= 268369920U;
          else 
            #line 3624 
            if ((unsigned int)rssi_level == 2U) 
                                                #line 3625 
                                                ratr_bitmap &= 268431360U; else 
                                                                    #line 3627 
                                                                    ratr_bitmap &= 268431365U;
    #line 3631 
    break;
    #line 3633 
    case (unsigned int)128: 
                            #line 3633 
    ;
    #line 3634 
    ratr_index = (unsigned char)9U;
    #line 3635 
    if ((unsigned int)rssi_level == 1U) 
                                        #line 3636 
                                        ratr_bitmap &= 4231987200U;
    else 
      #line 3637 
      if ((unsigned int)rssi_level == 2U) 
                                          #line 3638 
                                          ratr_bitmap &= 4294963200U; else 
                                                                    #line 3640 
                                                                    ratr_bitmap = ratr_bitmap;
    #line 3641 
    break;
    #line 3643 
    case (unsigned int)64: 
                           #line 3643 
    ;
    #line 3644 
    ratr_index = (unsigned char)8U;
    #line 3646 
    if ((unsigned int)rf_type == 0U) 
      #line 3647 
      if ((unsigned int)rssi_level == 1U) 
                                          #line 3648 
                                          ratr_bitmap &= 4161536U;
      else 
        #line 3649 
        if ((unsigned int)rssi_level == 2U) 
                                            #line 3650 
                                            ratr_bitmap &= 4190208U; else 
                                                                    #line 3652 
                                                                    ratr_bitmap &= 4190224U;
    else 
      #line 3654 
      if ((unsigned int)rssi_level == 1U) 
                                          #line 3655 
                                          ratr_bitmap &= 4265574400U;
      else 
        #line 3656 
        if ((unsigned int)rssi_level == 2U) 
                                            #line 3657 
                                            ratr_bitmap &= 4294963200U; else 
                                                                    #line 3659 
                                                                    ratr_bitmap &= 4294963216U;
    #line 3661 
    break;
    #line 3663 
    default: 
             #line 3663 
    ;
    #line 3664 
    ratr_index = (unsigned char)0U;
    #line 3666 
    if ((unsigned int)rf_type == 1U) 
                                     #line 3667 
                                     ratr_bitmap &= 1044735U; else 
                                                                   #line 3669 
                                                                   ratr_bitmap &= 261091583U;
    #line 3670 
    break;
  }
  #line 3673 
  ratr_index = rtl_mrate_idx_to_arfr_id(hw,(unsigned char)((int)ratr_index),wirelessmode);
  #line 3674 
  sta_entry->ratr_index = ratr_index;
  #line 3675 
  ratr_bitmap = _rtl8821ae_set_ra_vht_ratr_bitmap(hw,wirelessmode,ratr_bitmap);
  #line 3678 
  _rtl_dbg_trace(rtlpriv,4194304ULL,4,(char *)"ratr_bitmap :%x\n",ratr_bitmap);
  #line 3684 
  rate_mask[0] = macid;
  #line 3685 
  if ((int)b_shortgi != 0) 
                           #line 3685 
                           tmp_0 = -128; else 
                                              #line 3685 
                                              tmp_0 = 0;
  #line 3685 
  rate_mask[1] = (unsigned char)(tmp_0 | (int)ratr_index);
  #line 3686 
  rate_mask[2] = (unsigned char)((((int)rtlphy->current_chan_bw | (! update_bw << 3)) | (int)_rtl8821ae_get_vht_eni(wirelessmode,ratr_bitmap)) | (int)_rtl8821ae_get_ra_ldpc(hw,(unsigned char)((int)macid),sta_entry,
                               wirelessmode));
  #line 3690 
  rate_mask[3] = (unsigned char)ratr_bitmap;
  #line 3691 
  rate_mask[4] = (unsigned char)(ratr_bitmap >> 8);
  #line 3692 
  rate_mask[5] = (unsigned char)(ratr_bitmap >> 16);
  #line 3693 
  rate_mask[6] = (unsigned char)(ratr_bitmap >> 24);
  #line 3695 
  _rtl_dbg_trace(rtlpriv,4194304ULL,3,(char *)"Rate_index:%x, ratr_val:%x, %x:%x:%x:%x:%x:%x:%x\n",(int)ratr_index,ratr_bitmap,(int)rate_mask[0],(int)rate_mask[1],(int)rate_mask[2],(int)rate_mask[3],(int)rate_mask[4],(int)rate_mask[5],(int)rate_mask[6]);
  #line 3702 
  rtl8821ae_fill_h2c_cmd(hw,(unsigned char)64,7U,(u8 *)(& rate_mask));
  #line 3703 
  _rtl8821ae_set_bcn_ctrl_reg(hw,(unsigned char)8,(unsigned char)0);
  #line 3704 
  return;
}

#line 3706  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
void rtl8821ae_update_hal_rate_tbl(struct ieee80211_hw *hw, struct ieee80211_sta *sta, u8 rssi_level, bool update_bw)
{
  #line 3709 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 3710 
  if ((int)rtlpriv->dm.useramask != 0) 
                                       #line 3711 
                                       rtl8821ae_update_hal_rate_mask(hw,sta,(unsigned char)((int)rssi_level),(_Bool)((bool)((int)update_bw) != 0)); else 
                                                                    #line 3715 
                                                                    rtl8821ae_update_hal_rate_table(hw,sta);
  #line 3716 
  return;
}

#line 3718  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
void rtl8821ae_update_channel_access_setting(struct ieee80211_hw *hw)
{
  #line 3723 
  u8 sifs_timer;
  #line 3723 
  u8 r2t_sifs;
  #line 3720 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 3721 
  struct rtl_mac *mac = & ((struct rtl_priv *)hw->priv)->mac80211;
  #line 3722 
  u16 wireless_mode = mac->mode;
  #line 3725 
  (*(((rtlpriv->cfg)->ops)->set_hw_reg))(hw,(unsigned char)18,& mac->slot_time);
  #line 3727 
  if ((unsigned int)wireless_mode == 4U) 
                                         #line 3728 
                                         sifs_timer = (unsigned char)10U; else 
                                                                    #line 3730 
                                                                    sifs_timer = (unsigned char)14U;
  #line 3731 
  (*(((rtlpriv->cfg)->ops)->set_hw_reg))(hw,(unsigned char)14,& sifs_timer);
  #line 3733 
  r2t_sifs = (unsigned char)10U;
  #line 3735 
  if (((unsigned int)wireless_mode == 64U && ((unsigned long)mac->vht_ldpc_cap & 1UL) != 0UL) && ((unsigned long)mac->vht_stbc_cap & 1UL) != 0UL) 
    #line 3738 
    if (mac->vendor == 5U) 
                           #line 3739 
                           r2t_sifs = (unsigned char)8U; else 
                                                              #line 3741 
                                                              r2t_sifs = (unsigned char)10U;
  else 
    #line 3742 
    if ((unsigned int)wireless_mode == 64U) 
                                            #line 3743 
                                            r2t_sifs = (unsigned char)10U;
  #line 3746 
  (*(((rtlpriv->cfg)->ops)->set_hw_reg))(hw,(unsigned char)15,& r2t_sifs);
  #line 3747 
  return;
}

#line 3749  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
bool rtl8821ae_gpio_radio_on_off_checking(struct ieee80211_hw *hw, u8 *valid)
{
  #line 3754 
  enum rf_pwrstate e_rfpowerstate_toset;
  #line 3751 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 3752 
  struct rtl_ps_ctl *ppsc = & ((struct rtl_priv *)hw->priv)->psc;
  #line 3753 
  struct rtl_phy *rtlphy = & rtlpriv->phy;
  #line 3755 
  u8 u1tmp = (unsigned char)0U;
  #line 3756 
  bool b_actuallyset = (_Bool)0;
  #line 3758 
  if ((int)rtlpriv->rtlhal.being_init_adapter != 0) 
                                                    #line 3759 
                                                    return (_Bool)0;
  #line 3761 
  if ((int)ppsc->swrf_processing != 0) 
                                       #line 3762 
                                       return (_Bool)0;
  #line 3764 
  cif_spin_lock_rf_ps_lock_of_rtl_locks(& rtlpriv->locks.rf_ps_lock);
  #line 3765 
  if ((int)ppsc->rfchange_inprogress != 0) {
    #line 3766 
    cif_spin_unlock_rf_ps_lock_of_rtl_locks(& rtlpriv->locks.rf_ps_lock);
    #line 3767 
    return (_Bool)0;
  }
  else {
    #line 3769 
    ppsc->rfchange_inprogress = (_Bool)1;
    #line 3770 
    cif_spin_unlock_rf_ps_lock_of_rtl_locks(& rtlpriv->locks.rf_ps_lock);
  }
  #line 3773 
  ;
  #line 3773 
  rtl_write_byte(rtlpriv,98U,(unsigned char)((int)rtl_read_byte(rtlpriv,98U) & 253));
  #line 3777 
  u1tmp = rtl_read_byte(rtlpriv,96U);
  #line 3779 
  if (rtlphy->polarity_ctl != (unsigned int)RT_POLARITY_LOW_ACT) 
                                                                 #line 3780 
                                                                 e_rfpowerstate_toset = (enum rf_pwrstate)((int)u1tmp & 2);
  else 
    #line 3782 
    if (((unsigned long)u1tmp & 2UL) != 0UL) 
                                             #line 3782 
                                             e_rfpowerstate_toset = ERFON; else 
                                                                    #line 3782 
                                                                    e_rfpowerstate_toset = ERFOFF;
  #line 3784 
  if ((int)ppsc->hwradiooff != 0 && e_rfpowerstate_toset == (unsigned int)ERFON) {
    #line 3785 
    _rtl_dbg_trace(rtlpriv,1048576ULL,3,(char *)"GPIOChangeRF  - HW Radio ON, RF ON\n");
    #line 3788 
    e_rfpowerstate_toset = ERFON;
    #line 3789 
    ppsc->hwradiooff = (_Bool)0;
    #line 3790 
    b_actuallyset = (_Bool)1;
  }
  else 
    #line 3791 
    if (! ppsc->hwradiooff && e_rfpowerstate_toset == (unsigned int)ERFOFF) {
      #line 3793 
      _rtl_dbg_trace(rtlpriv,1048576ULL,3,(char *)"GPIOChangeRF  - HW Radio OFF, RF OFF\n");
      #line 3796 
      e_rfpowerstate_toset = ERFOFF;
      #line 3797 
      ppsc->hwradiooff = (_Bool)1;
      #line 3798 
      b_actuallyset = (_Bool)1;
    }
  #line 3801 
  if ((int)b_actuallyset != 0) {
    #line 3802 
    cif_spin_lock_rf_ps_lock_of_rtl_locks(& rtlpriv->locks.rf_ps_lock);
    #line 3803 
    ppsc->rfchange_inprogress = (_Bool)0;
    #line 3804 
    cif_spin_unlock_rf_ps_lock_of_rtl_locks(& rtlpriv->locks.rf_ps_lock);
  }
  else {
    #line 3806 
    if (((unsigned long)ppsc->reg_rfps_level & 8UL) != 0UL) 
                                                            #line 3807 
                                                            ppsc->cur_ps_level |= 8U;
    #line 3809 
    cif_spin_lock_rf_ps_lock_of_rtl_locks(& rtlpriv->locks.rf_ps_lock);
    #line 3810 
    ppsc->rfchange_inprogress = (_Bool)0;
    #line 3811 
    cif_spin_unlock_rf_ps_lock_of_rtl_locks(& rtlpriv->locks.rf_ps_lock);
  }
  #line 3814 
  *valid = (unsigned char)1U;
  #line 3815 
  return (_Bool)(! ((int)ppsc->hwradiooff != 0));
}

#line 3818  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
void rtl8821ae_set_key(struct ieee80211_hw *hw, u32 key_index, u8 *p_macaddr, bool is_group, u8 enc_algo, bool is_wepkey, bool clear_all)
{
  #line 3822 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 3823 
  struct rtl_mac *mac = & ((struct rtl_priv *)hw->priv)->mac80211;
  #line 3824 
  struct rtl_efuse *rtlefuse = & ((struct rtl_priv *)hw->priv)->efuse;
  #line 3825 
  u8 *macaddr = p_macaddr;
  #line 3826 
  u32 entry_id = 0U;
  #line 3827 
  bool is_pairwise = (_Bool)0;
  #line 3829 
  u8 cam_const_addr[4U][6U] = {{(unsigned char)0U, (unsigned char)0U, (unsigned char)0U, (unsigned char)0U, (unsigned char)0U, (unsigned char)0U}, {(unsigned char)0U, (unsigned char)0U, (unsigned char)0U, (unsigned char)0U, (unsigned char)0U, (unsigned char)1U}, {(unsigned char)0U, (unsigned char)0U, (unsigned char)0U, (unsigned char)0U, (unsigned char)0U, (unsigned char)2U}, {(unsigned char)0U, (unsigned char)0U, (unsigned char)0U, (unsigned char)0U, (unsigned char)0U, (unsigned char)3U}};
  #line 3835 
  u8 cam_const_broad[6U] = {(unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U};
  #line 3839 
  if ((int)clear_all != 0) {
    #line 3840 
    u8 idx = (unsigned char)0U;
    #line 3841 
    u8 cam_offset = (unsigned char)0U;
    #line 3842 
    u8 clear_number = (unsigned char)5U;
    #line 3844 
    _rtl_dbg_trace(rtlpriv,512ULL,3,(char *)"clear_all\n");
    #line 3846 
    idx = (unsigned char)0U;
    #line 3846 
    while ((int)idx < (int)clear_number) {
      #line 3847 
      rtl_cam_mark_invalid(hw,(unsigned char)((int)cam_offset + (int)idx));
      #line 3848 
      rtl_cam_empty_entry(hw,(unsigned char)((int)cam_offset + (int)idx));
      #line 3850 
      if ((unsigned int)idx <= 4U) {
        #line 3851 
        memset((void *)(& rtlpriv->sec.key_buf[(int)idx]),0,61UL);
        #line 3853 
        rtlpriv->sec.key_len[(int)idx] = (unsigned char)0U;
      }
      #line 3846 
      idx = (u8)((int)idx + 1);
    }
  }
  else {
    #line 3857 
    switch ((int)enc_algo) {
      #line 3858 
      case 1: 
              #line 3858 
      ;
      #line 3859 
      enc_algo = (unsigned char)1U;
      #line 3860 
      break;
      #line 3861 
      case 5: 
              #line 3861 
      ;
      #line 3862 
      enc_algo = (unsigned char)5U;
      #line 3863 
      break;
      #line 3864 
      case 2: 
              #line 3864 
      ;
      #line 3865 
      enc_algo = (unsigned char)2U;
      #line 3866 
      break;
      #line 3867 
      case 4: 
              #line 3867 
      ;
      #line 3868 
      enc_algo = (unsigned char)4U;
      #line 3869 
      break;
      #line 3870 
      default: 
               #line 3870 
      ;
      #line 3871 
      _rtl_dbg_trace(rtlpriv,1ULL,4,(char *)"switch case %#x not processed\n",(int)enc_algo);
      #line 3873 
      enc_algo = (unsigned char)2U;
      #line 3874 
      break;
    }
    #line 3877 
    if ((int)is_wepkey != 0 || (int)rtlpriv->sec.use_defaultkey != 0) {
      #line 3878 
      macaddr = (u8 *)(& cam_const_addr[key_index]);
      #line 3879 
      entry_id = key_index;
    }
    else 
      #line 3881 
      if ((int)is_group != 0) {
        #line 3882 
        macaddr = (u8 *)(& cam_const_broad);
        #line 3883 
        entry_id = key_index;
      }
      else {
        #line 3885 
        if (mac->opmode == (unsigned int)NL80211_IFTYPE_AP) {
          #line 3886 
          entry_id = (unsigned int)rtl_cam_get_free_entry(hw,p_macaddr);
          #line 3887 
          if (entry_id > 31U) {
            #line 3888 
            printk((char *)"\001");
            #line 3889 
            return;
          }
        }
        else 
             #line 3892 
             entry_id = 4U;
        #line 3895 
        key_index = 0U;
        #line 3896 
        is_pairwise = (_Bool)1;
      }
    #line 3900 
    if ((unsigned int)rtlpriv->sec.key_len[key_index] == 0U) {
      #line 3901 
      _rtl_dbg_trace(rtlpriv,512ULL,3,(char *)"delete one entry, entry_id is %d\n",entry_id);
      #line 3904 
      if (mac->opmode == (unsigned int)NL80211_IFTYPE_AP) 
                                                          #line 3905 
                                                          rtl_cam_del_entry(hw,p_macaddr);
      #line 3906 
      rtl_cam_delete_one_entry(hw,p_macaddr,entry_id);
    }
    else {
      #line 3908 
      _rtl_dbg_trace(rtlpriv,512ULL,3,(char *)"add one entry\n");
      #line 3910 
      if ((int)is_pairwise != 0) {
        #line 3911 
        _rtl_dbg_trace(rtlpriv,512ULL,3,(char *)"set Pairwise key\n");
        #line 3914 
        rtl_cam_add_one_entry(hw,macaddr,key_index,entry_id,(unsigned int)enc_algo,0U,(u8 *)(& rtlpriv->sec.key_buf[key_index]));
      }
      else {
        #line 3919 
        _rtl_dbg_trace(rtlpriv,512ULL,3,(char *)"set group key\n");
        #line 3922 
        if (mac->opmode == (unsigned int)NL80211_IFTYPE_ADHOC) 
                                                               #line 3923 
                                                               rtl_cam_add_one_entry(hw,(u8 *)(& rtlefuse->dev_addr),0U,4U,(unsigned int)enc_algo,0U,(u8 *)(& rtlpriv->sec.key_buf[entry_id]));
        #line 3933 
        rtl_cam_add_one_entry(hw,macaddr,key_index,entry_id,(unsigned int)enc_algo,0U,(u8 *)(& rtlpriv->sec.key_buf[entry_id]));
      }
    }
  }
  #line 3940 
  return;
}

#line 3942  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
void rtl8821ae_bt_reg_init(struct ieee80211_hw *hw)
{
  #line 3944 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 3947 
  rtlpriv->btcoexist.reg_bt_iso = (unsigned char)2U;
  #line 3949 
  rtlpriv->btcoexist.reg_bt_sco = (unsigned char)3U;
  #line 3951 
  rtlpriv->btcoexist.reg_bt_sco = (unsigned char)0U;
  #line 3952 
  return;
}

#line 3954  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
void rtl8821ae_bt_hw_init(struct ieee80211_hw *hw)
{
  #line 3956 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 3958 
  if ((int)(*(((rtlpriv->cfg)->ops)->get_btc_status))() != 0) 
                                                              #line 3959 
                                                              (*((rtlpriv->btcoexist.btc_ops)->btc_init_hw_config))(rtlpriv);
  #line 3960 
  return;
}

#line 3962  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
void rtl8821ae_suspend(struct ieee80211_hw *hw)
{
  #line 3964 
  return;
}

#line 3966  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
void rtl8821ae_resume(struct ieee80211_hw *hw)
{
  #line 3968 
  return;
}

#line 3971  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
void rtl8821ae_allow_all_destaddr(struct ieee80211_hw *hw, bool allow_all_da, bool write_into_reg)
{
  #line 3974 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 3975 
  struct rtl_pci *rtlpci = & ((struct rtl_pci_priv *)(& ((struct rtl_priv *)hw->priv)->priv))->dev;
  #line 3977 
  if ((int)allow_all_da != 0) 
                              #line 3978 
                              rtlpci->receive_config |= 1U; else 
                                                                 #line 3980 
                                                                 rtlpci->receive_config &= 4294967294U;
  #line 3982 
  if ((int)write_into_reg != 0) 
                                #line 3983 
                                rtl_write_dword(rtlpriv,1544U,rtlpci->receive_config);
  #line 3985 
  _rtl_dbg_trace(rtlpriv,2097156ULL,4,(char *)"receive_config=0x%08X, write_into_reg=%d\n",rtlpci->receive_config,(int)write_into_reg);
  #line 3986 
  return;
}

#line 3991  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/hw.c"
void rtl8821ae_add_wowlan_pattern(struct ieee80211_hw *hw, struct rtl_wow_pattern *rtl_pattern, u8 index)
{
  #line 3998 
  u16 rxbuf_addr;
  #line 3999 
  u8 tmp;
  #line 4000 
  u16 cam_start;
  #line 4001 
  u16 offset;
  #line 3995 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 3996 
  u32 cam = 0U;
  #line 3997 
  u8 addr = (unsigned char)0U;
  #line 3999 
  u8 count = (unsigned char)0U;
  #line 4006 
  offset = (unsigned short)125U;
  #line 4008 
  cam_start = (unsigned short)((unsigned int)offset * 128U);
  #line 4011 
  rtl_write_byte(rtlpriv,262U,(unsigned char)165);
  #line 4012 
  addr = (unsigned char)0U;
  #line 4012 
  while ((unsigned int)addr <= 5U) {
    #line 4023 
    rxbuf_addr = (unsigned short)((((int)cam_start + (int)index * 24) + (int)addr * 4) >> 3);
    #line 4025 
    rtl_write_word(rtlpriv,320U,(unsigned short)((int)rxbuf_addr));
    #line 4027 
    if ((unsigned int)addr == 0U) {
      #line 4028 
      cam = (unsigned int)rtl_pattern->crc | 2147483648U;
      #line 4030 
      if ((unsigned int)rtl_pattern->type == 0U) 
                                                 #line 4031 
                                                 cam |= 16777216U;
      else 
        #line 4032 
        if ((unsigned int)rtl_pattern->type == 1U) 
                                                   #line 4033 
                                                   cam |= 33554432U;
        else 
          #line 4034 
          if ((unsigned int)rtl_pattern->type == 2U) 
                                                     #line 4035 
                                                     cam |= 67108864U;
      #line 4037 
      rtl_write_dword(rtlpriv,324U,cam);
      #line 4038 
      _rtl_dbg_trace(rtlpriv,65536ULL,5,(char *)"WRITE entry[%d] 0x%x: %x\n",(int)addr,324,cam);
      #line 4043 
      rtl_write_word(rtlpriv,322U,(unsigned short)3841);
    }
    else 
      #line 4044 
      if ((unsigned int)addr == 2U || (unsigned int)addr == 4U) {
        #line 4045 
        cam = rtl_pattern->mask[(int)addr + -2];
        #line 4047 
        rtl_write_dword(rtlpriv,324U,cam);
        #line 4048 
        _rtl_dbg_trace(rtlpriv,65536ULL,5,(char *)"WRITE entry[%d] 0x%x: %x\n",(int)addr,324,cam);
        #line 4052 
        rtl_write_word(rtlpriv,322U,(unsigned short)3841);
      }
      else 
        #line 4053 
        if ((unsigned int)addr == 3U || (unsigned int)addr == 5U) {
          #line 4054 
          cam = rtl_pattern->mask[(int)addr + -2];
          #line 4056 
          rtl_write_dword(rtlpriv,328U,cam);
          #line 4057 
          _rtl_dbg_trace(rtlpriv,65536ULL,5,(char *)"WRITE entry[%d] 0x%x: %x\n",(int)addr,328,cam);
          #line 4061 
          rtl_write_word(rtlpriv,322U,(unsigned short)61441);
        }
    #line 4064 
    count = (unsigned char)0U;
    #line 4065 
    while (1) {
      #line 4066 
      tmp = rtl_read_byte(rtlpriv,322U);
      #line 4067 
      __const_udelay(8590UL);
      #line 4068 
      count = (u8)((int)count + 1);
      #line 4069 
      if (! ((unsigned int)tmp != 0U && (unsigned int)count <= 99U)) 
        #line 4065 
        break;
    }
    {
      #line 4071 
      bool __warned;
      #line 4071 
      int __ret_warn_once = (unsigned int)count > 99U;
      #line 4071 
      if ((long)(__ret_warn_once != 0) != 0L && (long)(! __warned) != 0L) {
        #line 4071 
        __warned = (_Bool)1;
        {
          #line 4071 
          int __ret_warn_on = 1;
          #line 4071 
          if ((long)(__ret_warn_on != 0) != 0L) {
            #line 4071 
            __warn_printk((char *)"rtl8821ae: Write wake up frame mask FAIL %d value!\n",(int)tmp);
            #line 4072 
            ldv_inline_asm();
            #line 4073 
            ldv_inline_asm();
          }
          #line 4071 
          long tmp_2 = (long)(__ret_warn_on != 0);
        }
      }
      #line 4071 
      long tmp_4 = (long)(__ret_warn_once != 0);
    }
    #line 4012 
    addr = (u8)((int)addr + 1);
  }
  #line 4076 
  rtl_write_byte(rtlpriv,262U,(unsigned char)0);
  #line 4077 
  return;
}

#line 94  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/rtl8821ae.ko/concurrency safety/0/concurrency safety/weaver/hw.i.aux"
#line 94 
int emg_mod_timer(struct timer_list *arg0, unsigned long arg1);
#line 412  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/rtl8821ae.ko/concurrency safety/0/concurrency safety/weaver/hw.i.aux"
static void *kzalloc(size_t size, gfp_t flags)
{
  #line 415 
  return ldv_kzalloc(size,flags);
}

#line 783  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/rtl8821ae.ko/concurrency safety/0/concurrency safety/weaver/hw.i.aux"
static void cif___ldv_spin_lock_irq_th_lock_of_rtl_locks(spinlock_t *lock)
{
  #line 786 
  ldv_spin_model_lock((char *)"irq_th_lock_of_rtl_locks");
  #line 788 
  __ldv_spin_lock(lock);
  #line 789 
  return;
}

#line 792  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/rtl8821ae.ko/concurrency safety/0/concurrency safety/weaver/hw.i.aux"
static void cif_spin_unlock_irqrestore_irq_th_lock_of_rtl_locks(spinlock_t *lock, unsigned long flags)
{
  #line 795 
  ldv_spin_model_unlock((char *)"irq_th_lock_of_rtl_locks");
  #line 797 
  spin_unlock_irqrestore(lock,flags);
  #line 798 
  return;
}

#line 801  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/rtl8821ae.ko/concurrency safety/0/concurrency safety/weaver/hw.i.aux"
static void cif_spin_lock_bh_fw_ps_lock_of_rtl_locks(spinlock_t *lock)
{
  #line 804 
  ldv_spin_model_lock((char *)"fw_ps_lock_of_rtl_locks");
  #line 806 
  spin_lock_bh(lock);
  #line 807 
  return;
}

#line 810  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/rtl8821ae.ko/concurrency safety/0/concurrency safety/weaver/hw.i.aux"
static void cif_spin_unlock_bh_fw_ps_lock_of_rtl_locks(spinlock_t *lock)
{
  #line 813 
  ldv_spin_model_unlock((char *)"fw_ps_lock_of_rtl_locks");
  #line 815 
  spin_unlock_bh(lock);
  #line 816 
  return;
}

#line 819  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/rtl8821ae.ko/concurrency safety/0/concurrency safety/weaver/hw.i.aux"
static int cif_mod_timer(struct timer_list *timer, unsigned long expires)
{
  #line 823 
  return emg_mod_timer(timer,expires);
}

#line 827  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/rtl8821ae.ko/concurrency safety/0/concurrency safety/weaver/hw.i.aux"
static void cif_spin_lock_rf_ps_lock_of_rtl_locks(spinlock_t *lock)
{
  #line 830 
  ldv_spin_model_lock((char *)"rf_ps_lock_of_rtl_locks");
  #line 832 
  spin_lock(lock);
  #line 833 
  return;
}

#line 836  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/rtl8821ae.ko/concurrency safety/0/concurrency safety/weaver/hw.i.aux"
static void cif_spin_unlock_rf_ps_lock_of_rtl_locks(spinlock_t *lock)
{
  #line 839 
  ldv_spin_model_unlock((char *)"rf_ps_lock_of_rtl_locks");
  #line 841 
  spin_unlock(lock);
  #line 842 
  return;
}

#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 14 
void *memcpy(void *, void *, size_t);
#line 391  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_irqrestore_0(spinlock_t *lock, unsigned long flags)
{
  {
    #line 393 
    unsigned long __dummy;
    #line 393 
    unsigned long __dummy2;
    }
  #line 393 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_25.rlock,flags);
  #line 395 
  return;
}

#line 395 
#line 792  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/rtl8821ae.ko/concurrency safety/0/concurrency safety/weaver/fw.i.aux"
static void cif_spin_unlock_irqrestore_h2c_lock_of_rtl_locks(spinlock_t *lock, unsigned long flags);
#line 35 
#line 783 
static void cif___ldv_spin_lock_h2c_lock_of_rtl_locks(spinlock_t *lock);
#line 2189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
#line 2189 
void *skb_put(struct sk_buff *, unsigned int);
#line 2230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void *skb_put_data(struct sk_buff *skb, void *data, unsigned int len)
{
  #line 2233 
  void *tmp = skb_put(skb,len);
  #line 2235 
  memcpy(tmp,data,(unsigned long)len);
  #line 2237 
  return tmp;
}

#line 2762 
#line 2762 
struct sk_buff *__netdev_alloc_skb(struct net_device *, unsigned int, gfp_t);
#line 2778  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct sk_buff *netdev_alloc_skb(struct net_device *dev, unsigned int length)
{
  #line 2781 
  return __netdev_alloc_skb(dev,length,2592U);
}

#line 2792  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct sk_buff *dev_alloc_skb(unsigned int length)
{
  #line 2794 
  return netdev_alloc_skb((struct net_device *)0,length);
}

#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/core.h"
#line 60 
bool rtl_cmd_send_packet(struct ieee80211_hw *, struct sk_buff *);
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/efuse.h"
#line 93 
void rtl_fill_dummy(u8 *, u32 *);
#line 94 
#line 94 
void rtl_fw_page_write(struct ieee80211_hw *, u32, u8 *, u32);
#line 284  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/fw.h"
#line 572  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/fw.c"
void rtl8821ae_set_fw_ap_off_load_cmd(struct ieee80211_hw *hw, u8 ap_offload_enable);
#line 299  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/fw.h"
#line 1892  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/fw.c"
void rtl8821ae_c2h_ra_report_handler(struct ieee80211_hw *hw, u8 *cmd_buf, u8 cmd_len);
#line 288  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/dm.h"
#line 288 
void rtl8821ae_dm_update_init_rate(struct ieee80211_hw *hw, u8 rate);
#line 289 
#line 289 
u8 rtl8821ae_hw_rate_to_mrate(struct ieee80211_hw *hw, u8 rate);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/fw.c"
static void _rtl8821ae_enable_fw_download(struct ieee80211_hw *hw, bool enable)
{
  #line 17 
  u8 tmp;
  #line 16 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 19 
  if ((int)enable != 0) {
    #line 20 
    rtl_write_byte(rtlpriv,128U,(unsigned char)5);
    #line 22 
    tmp = rtl_read_byte(rtlpriv,130U);
    #line 23 
    rtl_write_byte(rtlpriv,130U,(unsigned char)((int)tmp & 247));
    #line 25 
    tmp = rtl_read_byte(rtlpriv,128U);
  }
  else {
    #line 27 
    tmp = rtl_read_byte(rtlpriv,128U);
    #line 28 
    rtl_write_byte(rtlpriv,128U,(unsigned char)((int)tmp & 254));
    #line 29 
    tmp = rtl_read_byte(rtlpriv,128U);
  }
  #line 31 
  return;
}

#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/fw.c"
static void _rtl8821ae_write_fw(struct ieee80211_hw *hw, enum version_8821ae version, u8 *buffer, u32 size)
{
  #line 39 
  u32 pagenums;
  #line 39 
  u32 remainsize;
  #line 40 
  u32 page;
  #line 40 
  u32 offset;
  #line 37 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 38 
  u8 *bufferptr = buffer;
  #line 42 
  _rtl_dbg_trace(rtlpriv,2ULL,4,(char *)"FW size is %d bytes,\n",size);
  #line 44 
  rtl_fill_dummy(bufferptr,& size);
  #line 46 
  pagenums = size / 4096U;
  #line 47 
  remainsize = size & 4095U;
  #line 49 
  if (pagenums > 8U) 
                     #line 50 
                     printk((char *)"\001");
  #line 52 
  page = 0U;
  #line 52 
  while (page < pagenums) {
    #line 53 
    offset = page * 4096U;
    #line 54 
    rtl_fw_page_write(hw,page,bufferptr + (unsigned long)offset,4096U);
    #line 52 
    page ++;
  }
  #line 58 
  if (remainsize != 0U) {
    #line 59 
    offset = pagenums * 4096U;
    #line 60 
    page = pagenums;
    #line 61 
    rtl_fw_page_write(hw,page,bufferptr + (unsigned long)offset,remainsize);
  }
  #line 63 
  return;
}

#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/fw.c"
static int _rtl8821ae_fw_free_to_go(struct ieee80211_hw *hw)
{
  #line 70 
  u32 value32;
  #line 67 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 68 
  int err = -5;
  #line 69 
  u32 counter = 0U;
  #line 72 
  while (1) {
    #line 73 
    u32 tmp;
    #line 73 
    value32 = rtl_read_dword(rtlpriv,128U);
    #line 73 
    tmp = counter;
    #line 73 
    counter ++;
    #line 73 
    ;
    #line 73 
    if (tmp <= 5999U) {
      #line 74 
      if (! (((unsigned long)value32 & 4UL) == 0UL)) 
                                                     #line 72 
                                                     break;
    }
    else 
         #line 72 
         break;
  }
  #line 77 
  if (counter > 5999U) {
    #line 78 
    _rtl_dbg_trace(rtlpriv,1ULL,4,(char *)"chksum report fail! REG_MCUFWDL:0x%08x .\n",value32);
    #line 81 
    goto exit;
  }
  #line 83 
  value32 = rtl_read_dword(rtlpriv,128U);
  #line 84 
  value32 |= 2U;
  #line 85 
  value32 &= 4294967231U;
  #line 86 
  rtl_write_dword(rtlpriv,128U,value32);
  #line 88 
  rtl8821ae_firmware_selfreset(hw);
  #line 90 
  counter = 0U;
  #line 91 
  while (1) {
    #line 98 
    u32 tmp_0;
    #line 92 
    value32 = rtl_read_dword(rtlpriv,128U);
    #line 93 
    if (((unsigned long)value32 & 64UL) != 0UL) 
                                                #line 94 
                                                return 0;
    #line 96 
    __const_udelay(21475UL);
    #line 98 
    tmp_0 = counter;
    #line 98 
    counter ++;
    #line 98 
    ;
    #line 98 
    if (! (tmp_0 <= 5999U)) 
                            #line 91 
                            break;
  }
  #line 99 
  printk((char *)"\001",value32);
  #line 102 
  exit: 
        #line 102 
  ;
  #line 103 
  return err;
}

#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/fw.c"
static void _rtl8821ae_wait_for_h2c_cmd_finish(struct rtl_priv *rtlpriv)
{
  #line 108 
  u8 val;
  #line 109 
  u16 count = (unsigned short)0U;
  #line 111 
  while (1) {
    #line 112 
    val = rtl_read_byte(rtlpriv,460U);
    #line 113 
    __const_udelay(4295000UL);
    #line 114 
    count = (u16)((int)count + 1);
    #line 115 
    if (! (((int)val & 15) != 0 && (unsigned int)count <= 999U)) 
                                                                 #line 111 
                                                                 break;
  }
  #line 116 
  return;
}

#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/fw.c"
int rtl8821ae_download_fw(struct ieee80211_hw *hw, bool buse_wake_on_wlan_fw)
{
  #line 122 
  struct rtlwifi_firmware_header *pfwheader;
  #line 123 
  u8 *pfwdata;
  #line 124 
  u32 fwsize;
  #line 125 
  int err;
  #line 126 
  bool support_remote_wakeup;
  #line 157 
  char *tmp;
  #line 120 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 121 
  struct rtl_hal *rtlhal = & ((struct rtl_priv *)hw->priv)->rtlhal;
  #line 127 
  enum version_8821ae version = rtlhal->version;
  #line 129 
  (*(((rtlpriv->cfg)->ops)->get_hw_reg))(hw,(unsigned char)92,(u8 *)(& support_remote_wakeup));
  #line 132 
  if ((int)support_remote_wakeup != 0) 
                                       #line 133 
                                       _rtl8821ae_wait_for_h2c_cmd_finish(rtlpriv);
  #line 135 
  if ((int)buse_wake_on_wlan_fw != 0) {
    #line 136 
    if (rtlhal->wowlan_firmware == (u8 *)0U) 
                                             #line 137 
                                             return 1;
    #line 139 
    pfwheader = (struct rtlwifi_firmware_header *)rtlhal->wowlan_firmware;
    #line 141 
    rtlhal->fw_version = pfwheader->version;
    #line 142 
    rtlhal->fw_subversion = (unsigned short)pfwheader->subversion;
    #line 143 
    pfwdata = rtlhal->wowlan_firmware;
    #line 144 
    fwsize = rtlhal->wowlan_fwsize;
  }
  else {
    #line 146 
    if (rtlhal->pfirmware == (u8 *)0U) 
                                       #line 147 
                                       return 1;
    #line 149 
    pfwheader = (struct rtlwifi_firmware_header *)rtlhal->pfirmware;
    #line 151 
    rtlhal->fw_version = pfwheader->version;
    #line 152 
    rtlhal->fw_subversion = (unsigned short)pfwheader->subversion;
    #line 153 
    pfwdata = rtlhal->pfirmware;
    #line 154 
    fwsize = rtlhal->fwsize;
  }
  #line 157 
  ;
  #line 157 
  if ((int)buse_wake_on_wlan_fw != 0) 
                                      #line 157 
                                      tmp = (char *)"Wowlan"; else 
                                                                   #line 157 
                                                                   tmp = (char *)"Normal";
  #line 157 
  ;
  #line 157 
  _rtl_dbg_trace(rtlpriv,2ULL,3,(char *)"%s Firmware SIZE %d\n",tmp,fwsize);
  #line 161 
  if (((int)pfwheader->signature & 65520) == 38144 || ((int)pfwheader->signature & 65520) == 8448) {
    #line 163 
    _rtl_dbg_trace(rtlpriv,2ULL,3,(char *)"Firmware Version(%d), Signature(%#x)\n",(int)pfwheader->version,(int)pfwheader->signature);
    #line 167 
    pfwdata += 32UL;
    #line 168 
    fwsize += 4294967264U;
  }
  #line 171 
  if ((int)rtlhal->mac_func_enable != 0) {
    #line 172 
    if (((unsigned long)rtl_read_byte(rtlpriv,128U) & 128UL) != 0UL) {
      #line 173 
      rtl_write_byte(rtlpriv,128U,(unsigned char)0);
      #line 174 
      rtl8821ae_firmware_selfreset(hw);
    }
  }
  #line 177 
  _rtl8821ae_enable_fw_download(hw,(_Bool)1);
  #line 178 
  _rtl8821ae_write_fw(hw,version,pfwdata,fwsize);
  #line 179 
  _rtl8821ae_enable_fw_download(hw,(_Bool)0);
  #line 181 
  err = _rtl8821ae_fw_free_to_go(hw);
  #line 182 
  if (err != 0) 
                #line 183 
                _rtl_dbg_trace(rtlpriv,1ULL,3,(char *)"Firmware is not ready to run!\n"); else 
                                                                    #line 186 
                                                                    _rtl_dbg_trace(rtlpriv,2ULL,4,(char *)"Firmware is ready to run!\n");
  #line 190 
  return 0;
}

#line 194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/fw.c"
void rtl8821ae_set_fw_related_for_wowlan(struct ieee80211_hw *hw, bool used_wowlan_fw)
{
  #line 197 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 198 
  struct rtl_hal *rtlhal = & ((struct rtl_priv *)hw->priv)->rtlhal;
  #line 199 
  struct rtl_ps_ctl *ppsc = & ((struct rtl_priv *)hw->priv)->psc;
  #line 201 
  if (rtl8821ae_download_fw(hw,(_Bool)((bool)((int)used_wowlan_fw) != 0)) != 0) {
    #line 202 
    _rtl_dbg_trace(rtlpriv,4ULL,3,(char *)"Re-Download Firmware failed!!\n");
    #line 204 
    rtlhal->fw_ready = (_Bool)0;
    #line 205 
    return;
  }
  #line 207 
  _rtl_dbg_trace(rtlpriv,4ULL,3,(char *)"Re-Download Firmware Success !!\n");
  #line 209 
  rtlhal->fw_ready = (_Bool)1;
  #line 212 
  ppsc->fw_current_inpsmode = (_Bool)0;
  #line 213 
  rtlhal->fw_ps_state = (unsigned char)0U;
  #line 214 
  rtlhal->fw_clk_change_in_progress = (_Bool)0;
  #line 215 
  rtlhal->allow_sw_to_change_hwclc = (_Bool)0;
  #line 216 
  rtlhal->last_hmeboxnum = (unsigned char)0U;
  #line 217 
  return;
}

#line 220  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/fw.c"
static bool _rtl8821ae_check_fw_read_last_h2c(struct ieee80211_hw *hw, u8 boxnum)
{
  #line 224 
  u8 val_hmetfr;
  #line 223 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 225 
  bool result = (_Bool)0;
  #line 227 
  val_hmetfr = rtl_read_byte(rtlpriv,460U);
  #line 228 
  if (((unsigned long)((int)val_hmetfr >> (int)boxnum) & 1UL) == 0UL) 
    #line 229 
    result = (_Bool)1;
  #line 230 
  return result;
}

#line 233  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/fw.c"
static void _rtl8821ae_fill_h2c_command(struct ieee80211_hw *hw, u8 element_id, u32 cmd_len, u8 *cmdbuffer)
{
  #line 247 
  u8 boxcontent[4U];
  #line 247 
  u8 boxextcontent[4U];
  #line 237 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 238 
  struct rtl_hal *rtlhal = & ((struct rtl_priv *)hw->priv)->rtlhal;
  #line 239 
  u8 boxnum = (unsigned char)0U;
  #line 240 
  u16 box_reg = (unsigned short)0U;
  #line 240 
  u16 box_extreg = (unsigned short)0U;
  #line 241 
  u8 u1b_tmp = (unsigned char)0U;
  #line 242 
  bool isfw_read = (_Bool)0;
  #line 243 
  u8 buf_index = (unsigned char)0U;
  #line 244 
  bool bwrite_sucess = (_Bool)0;
  #line 245 
  u8 wait_h2c_limmit = (unsigned char)100U;
  #line 248 
  u32 h2c_waitcounter = 0U;
  #line 249 
  unsigned long flag = 0UL;
  #line 250 
  u8 idx = (unsigned char)0U;
  #line 252 
  _rtl_dbg_trace(rtlpriv,8388608ULL,4,(char *)"come in\n");
  #line 254 
  while (1) {
    #line 255 
    cif___ldv_spin_lock_h2c_lock_of_rtl_locks(& rtlpriv->locks.h2c_lock);
    #line 256 
    if ((int)rtlhal->h2c_setinprogress != 0) {
      #line 257 
      _rtl_dbg_trace(rtlpriv,8388608ULL,4,(char *)"H2C set in progress! Wait to set..element_id(%d).\n",(int)element_id);
      #line 261 
      while ((int)rtlhal->h2c_setinprogress != 0) {
        #line 262 
        cif_spin_unlock_irqrestore_h2c_lock_of_rtl_locks(& rtlpriv->locks.h2c_lock,flag);
        #line 264 
        h2c_waitcounter ++;
        #line 265 
        _rtl_dbg_trace(rtlpriv,8388608ULL,4,(char *)"Wait 100 us (%d times)...\n",h2c_waitcounter);
        #line 268 
        __const_udelay(429500UL);
        #line 270 
        if (h2c_waitcounter > 1000U) 
                                     #line 271 
                                     return;
        #line 272 
        cif___ldv_spin_lock_h2c_lock_of_rtl_locks(& rtlpriv->locks.h2c_lock);
      }
      #line 275 
      cif_spin_unlock_irqrestore_h2c_lock_of_rtl_locks(& rtlpriv->locks.h2c_lock,flag);
    }
    else {
      #line 277 
      rtlhal->h2c_setinprogress = (_Bool)1;
      #line 278 
      cif_spin_unlock_irqrestore_h2c_lock_of_rtl_locks(& rtlpriv->locks.h2c_lock,flag);
      #line 279 
      break;
    }
  }
  #line 283 
  while (! bwrite_sucess) {
    #line 284 
    boxnum = rtlhal->last_hmeboxnum;
    #line 285 
    switch ((int)boxnum) {
      #line 286 
      case 0: 
              #line 286 
      ;
      #line 287 
      box_reg = (unsigned short)464U;
      #line 288 
      box_extreg = (unsigned short)496U;
      #line 289 
      break;
      #line 290 
      case 1: 
              #line 290 
      ;
      #line 291 
      box_reg = (unsigned short)468U;
      #line 292 
      box_extreg = (unsigned short)500U;
      #line 293 
      break;
      #line 294 
      case 2: 
              #line 294 
      ;
      #line 295 
      box_reg = (unsigned short)472U;
      #line 296 
      box_extreg = (unsigned short)504U;
      #line 297 
      break;
      #line 298 
      case 3: 
              #line 298 
      ;
      #line 299 
      box_reg = (unsigned short)476U;
      #line 300 
      box_extreg = (unsigned short)508U;
      #line 301 
      break;
      #line 302 
      default: 
               #line 302 
      ;
      #line 303 
      _rtl_dbg_trace(rtlpriv,1ULL,4,(char *)"switch case %#x not processed\n",(int)boxnum);
      #line 305 
      break;
    }
    #line 308 
    isfw_read = (_Bool)0;
    #line 309 
    u1b_tmp = rtl_read_byte(rtlpriv,256U);
    #line 311 
    if ((unsigned int)u1b_tmp != 234U) 
                                       #line 312 
                                       isfw_read = (_Bool)1;
    else {
      #line 314 
      if ((unsigned int)rtl_read_byte(rtlpriv,528U) == 234U) 
                                                             #line 316 
                                                             rtl_write_byte(rtlpriv,255U,(unsigned char)255);
      else {
        #line 314 
        if ((unsigned int)rtl_read_byte(rtlpriv,1050U) == 234U) 
                                                                #line 316 
                                                                rtl_write_byte(rtlpriv,255U,(unsigned char)255);
      }
    }
    #line 319 
    if ((int)isfw_read != 0) {
      #line 320 
      wait_h2c_limmit = (unsigned char)100U;
      #line 321 
      isfw_read = _rtl8821ae_check_fw_read_last_h2c(hw,(unsigned char)((int)boxnum));
      #line 323 
      while (! isfw_read) {
        #line 325 
        wait_h2c_limmit = (u8)((int)wait_h2c_limmit - 1);
        #line 326 
        if ((unsigned int)wait_h2c_limmit == 0U) {
          #line 327 
          _rtl_dbg_trace(rtlpriv,8388608ULL,4,(char *)"Waiting too long for FW read clear HMEBox(%d)!\n",(int)boxnum);
          #line 330 
          break;
        }
        #line 333 
        __const_udelay(42950UL);
        #line 335 
        isfw_read = _rtl8821ae_check_fw_read_last_h2c(hw,(unsigned char)((int)boxnum));
        #line 337 
        u1b_tmp = rtl_read_byte(rtlpriv,304U);
        #line 338 
        _rtl_dbg_trace(rtlpriv,8388608ULL,4,(char *)"Waiting for FW read clear HMEBox(%d)!!! 0x130 = %2x\n",(int)boxnum,(int)u1b_tmp);
      }
    }
    #line 344 
    if (! isfw_read) {
      #line 345 
      _rtl_dbg_trace(rtlpriv,8388608ULL,4,(char *)"Write H2C register BOX[%d] fail!!!!! Fw do not read.\n",(int)boxnum);
      #line 348 
      break;
    }
    #line 351 
    memset((void *)(& boxcontent),0,4UL);
    #line 352 
    memset((void *)(& boxextcontent),0,4UL);
    #line 353 
    boxcontent[0] = element_id;
    #line 354 
    _rtl_dbg_trace(rtlpriv,8388608ULL,4,(char *)"Write element_id box_reg(%4x) = %2x\n",(int)box_reg,(int)element_id);
    #line 358 
    switch (cmd_len) {
      #line 359 
      case (u32)1: 
                   #line 359 
      ;
      #line 360 
      case (u32)2: 
                   #line 360 
      ;
      #line 361 
      case (u32)3: 
                   #line 361 
      ;
      #line 363 
      memcpy((void *)((u8 *)(& boxcontent) + 1U),(void *)(cmdbuffer + (unsigned long)buf_index),(unsigned long)cmd_len);
      #line 366 
      idx = (unsigned char)0U;
      #line 366 
      while ((unsigned int)idx <= 3U) {
        #line 367 
        rtl_write_byte(rtlpriv,(unsigned int)((int)box_reg + (int)idx),(unsigned char)((int)boxcontent[(int)idx]));
        #line 366 
        idx = (u8)((int)idx + 1);
      }
      #line 370 
      break;
      #line 371 
      case (u32)4: 
                   #line 371 
      ;
      #line 372 
      case (u32)5: 
                   #line 372 
      ;
      #line 373 
      case (u32)6: 
                   #line 373 
      ;
      #line 374 
      case (u32)7: 
                   #line 374 
      ;
      #line 376 
      memcpy((void *)(& boxextcontent),(void *)(cmdbuffer + ((unsigned long)buf_index + (unsigned long)3U)),(unsigned long)(cmd_len + 4294967293U));
      #line 378 
      memcpy((void *)((u8 *)(& boxcontent) + 1U),(void *)(cmdbuffer + (unsigned long)buf_index),3UL);
      #line 381 
      idx = (unsigned char)0U;
      #line 381 
      while ((unsigned int)idx <= 3U) {
        #line 382 
        rtl_write_byte(rtlpriv,(unsigned int)((int)box_extreg + (int)idx),(unsigned char)((int)boxextcontent[(int)idx]));
        #line 381 
        idx = (u8)((int)idx + 1);
      }
      #line 386 
      idx = (unsigned char)0U;
      #line 386 
      while ((unsigned int)idx <= 3U) {
        #line 387 
        rtl_write_byte(rtlpriv,(unsigned int)((int)box_reg + (int)idx),(unsigned char)((int)boxcontent[(int)idx]));
        #line 386 
        idx = (u8)((int)idx + 1);
      }
      #line 390 
      break;
      #line 391 
      default: 
               #line 391 
      ;
      #line 392 
      _rtl_dbg_trace(rtlpriv,1ULL,4,(char *)"switch case %#x not processed\n",cmd_len);
      #line 394 
      break;
    }
    #line 397 
    bwrite_sucess = (_Bool)1;
    #line 399 
    rtlhal->last_hmeboxnum = (unsigned char)((unsigned int)boxnum + 1U);
    #line 400 
    if ((unsigned int)rtlhal->last_hmeboxnum == 4U) 
                                                    #line 401 
                                                    rtlhal->last_hmeboxnum = (unsigned char)0U;
    #line 403 
    _rtl_dbg_trace(rtlpriv,8388608ULL,4,(char *)"pHalData->last_hmeboxnum  = %d\n",(int)rtlhal->last_hmeboxnum);
  }
  #line 408 
  cif___ldv_spin_lock_h2c_lock_of_rtl_locks(& rtlpriv->locks.h2c_lock);
  #line 409 
  rtlhal->h2c_setinprogress = (_Bool)0;
  #line 410 
  cif_spin_unlock_irqrestore_h2c_lock_of_rtl_locks(& rtlpriv->locks.h2c_lock,flag);
  #line 412 
  _rtl_dbg_trace(rtlpriv,8388608ULL,4,(char *)"go out\n");
  #line 413 
  return;
}

#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/fw.c"
void rtl8821ae_fill_h2c_cmd(struct ieee80211_hw *hw, u8 element_id, u32 cmd_len, u8 *cmdbuffer)
{
  #line 419 
  u32 tmp_cmdbuf[2U];
  #line 418 
  struct rtl_hal *rtlhal = & ((struct rtl_priv *)hw->priv)->rtlhal;
  #line 421 
  if (! rtlhal->fw_ready) {
    {
      #line 422 
      bool __warned;
      #line 422 
      int __ret_warn_once = 1;
      #line 422 
      if ((long)(__ret_warn_once != 0) != 0L && (long)(! __warned) != 0L) {
        #line 422 
        __warned = (_Bool)1;
        {
          #line 422 
          int __ret_warn_on = 1;
          #line 422 
          if ((long)(__ret_warn_on != 0) != 0L) {
            #line 422 
            __warn_printk((char *)"rtl8821ae: error H2C cmd because of Fw download fail!!!\n");
            #line 423 
            ldv_inline_asm();
            #line 424 
            ldv_inline_asm();
          }
          #line 422 
          long tmp = (long)(__ret_warn_on != 0);
        }
      }
      #line 422 
      long tmp_3 = (long)(__ret_warn_once != 0);
    }
    #line 424 
    return;
  }
  #line 427 
  memset((void *)(& tmp_cmdbuf),0,8UL);
  #line 428 
  memcpy((void *)(& tmp_cmdbuf),(void *)cmdbuffer,(unsigned long)cmd_len);
  #line 429 
  _rtl8821ae_fill_h2c_command(hw,(unsigned char)((int)element_id),cmd_len,(u8 *)(& tmp_cmdbuf));
  #line 430 
  return;
}

#line 432  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/fw.c"
void rtl8821ae_firmware_selfreset(struct ieee80211_hw *hw)
{
  #line 436 
  u8 u1b_tmp;
  #line 434 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 435 
  struct rtl_hal *rtlhal = & ((struct rtl_priv *)hw->priv)->rtlhal;
  #line 438 
  if ((unsigned int)rtlhal->hw_type == 14U) {
    #line 439 
    u1b_tmp = rtl_read_byte(rtlpriv,29U);
    #line 440 
    rtl_write_byte(rtlpriv,29U,(unsigned char)((int)u1b_tmp & 247));
  }
  else {
    #line 442 
    u1b_tmp = rtl_read_byte(rtlpriv,29U);
    #line 443 
    rtl_write_byte(rtlpriv,29U,(unsigned char)((int)u1b_tmp & 254));
  }
  #line 446 
  u1b_tmp = rtl_read_byte(rtlpriv,3U);
  #line 447 
  rtl_write_byte(rtlpriv,3U,(unsigned char)((int)u1b_tmp & 251));
  #line 448 
  __const_udelay(214750UL);
  #line 450 
  if ((unsigned int)rtlhal->hw_type == 14U) {
    #line 451 
    u1b_tmp = rtl_read_byte(rtlpriv,29U);
    #line 452 
    rtl_write_byte(rtlpriv,29U,(unsigned char)((int)((unsigned int)u1b_tmp | 8U)));
  }
  else {
    #line 454 
    u1b_tmp = rtl_read_byte(rtlpriv,29U);
    #line 455 
    rtl_write_byte(rtlpriv,29U,(unsigned char)((int)((unsigned int)u1b_tmp | 1U)));
  }
  #line 458 
  u1b_tmp = rtl_read_byte(rtlpriv,3U);
  #line 459 
  rtl_write_byte(rtlpriv,3U,(unsigned char)((int)((unsigned int)u1b_tmp | 4U)));
  #line 461 
  _rtl_dbg_trace(rtlpriv,4ULL,4,(char *)"_8051Reset8812ae(): 8051 reset success .\n");
  #line 462 
  return;
}

#line 465  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/fw.c"
void rtl8821ae_set_fw_pwrmode_cmd(struct ieee80211_hw *hw, u8 mode)
{
  #line 470 
  u8 rlbm;
  #line 471 
  u8 awake_intvl;
  #line 473 
  int tmp_1;
  #line 475 
  int tmp_4;
  #line 534 
  int tmp_6;
  #line 467 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 468 
  u8 u1_h2c_set_pwrmode[7U] = {(unsigned char)0U};
  #line 469 
  struct rtl_ps_ctl *ppsc = & ((struct rtl_priv *)hw->priv)->psc;
  #line 470 
  u8 power_state = (unsigned char)0U;
  #line 470 
  u8 byte5 = (unsigned char)0U;
  #line 472 
  struct rtl_btc_ops *btc_ops = rtlpriv->btcoexist.btc_ops;
  #line 473 
  if ((int)(*(((rtlpriv->cfg)->ops)->get_btc_status))() != 0) {
    #line 474 
    if ((int)(*(btc_ops->btc_is_bt_ctrl_lps))(rtlpriv) != 0) 
                                                             #line 473 
                                                             tmp_1 = 1; else 
                                                                    #line 473 
                                                                    tmp_1 = 0;
  }
  else 
       #line 473 
       tmp_1 = 0;
  #line 473 
  bool bt_ctrl_lps = (_Bool)(tmp_1 != 0);
  #line 475 
  if ((int)(*(((rtlpriv->cfg)->ops)->get_btc_status))() != 0) {
    #line 476 
    if ((int)(*(btc_ops->btc_is_bt_lps_on))(rtlpriv) != 0) 
                                                           #line 475 
                                                           tmp_4 = 1; else 
                                                                    #line 475 
                                                                    tmp_4 = 0;
  }
  else 
       #line 475 
       tmp_4 = 0;
  #line 475 
  bool bt_lps_on = (_Bool)(tmp_4 != 0);
  #line 478 
  if ((int)bt_ctrl_lps != 0) 
                             #line 479 
                             mode = (unsigned char)((int)bt_lps_on != 0);
  #line 481 
  _rtl_dbg_trace(rtlpriv,65536ULL,3,(char *)"FW LPS mode = %d (coex:%d)\n",(int)mode,(int)bt_ctrl_lps);
  #line 484 
  switch ((int)mode) {
    #line 485 
    case 1: 
            #line 485 
    ;
    #line 486 
    rlbm = (unsigned char)0U;
    #line 487 
    awake_intvl = (unsigned char)2U;
    #line 488 
    break;
    #line 489 
    case 2: 
            #line 489 
    ;
    #line 490 
    rlbm = (unsigned char)1U;
    #line 491 
    awake_intvl = (unsigned char)2U;
    #line 492 
    break;
    #line 493 
    case 3: 
            #line 493 
    ;
    #line 494 
    rlbm = (unsigned char)2U;
    #line 495 
    awake_intvl = ppsc->reg_max_lps_awakeintvl;
    #line 499 
    break;
    #line 500 
    default: 
             #line 500 
    ;
    #line 501 
    rlbm = (unsigned char)2U;
    #line 502 
    awake_intvl = (unsigned char)4U;
    #line 503 
    break;
  }
  #line 506 
  if ((unsigned int)rtlpriv->mac80211.p2p != 0U) {
    #line 507 
    awake_intvl = (unsigned char)2U;
    #line 508 
    rlbm = (unsigned char)1U;
  }
  #line 511 
  if ((unsigned int)mode == 0U) {
    #line 512 
    byte5 = (unsigned char)64U;
    #line 513 
    power_state = (unsigned char)12U;
  }
  else 
    #line 515 
    if ((int)bt_ctrl_lps != 0) {
      #line 516 
      byte5 = (*(btc_ops->btc_get_lps_val))(rtlpriv);
      #line 517 
      power_state = (*(btc_ops->btc_get_rpwm_val))(rtlpriv);
      #line 519 
      if ((unsigned int)rlbm == 2U && ((unsigned long)byte5 & 16UL) != 0UL) {
        #line 523 
        awake_intvl = (unsigned char)2U;
        #line 524 
        rlbm = (unsigned char)2U;
      }
    }
    else {
      #line 527 
      byte5 = (unsigned char)64U;
      #line 528 
      power_state = (unsigned char)0U;
    }
  #line 532 
  *((u8 *)(& u1_h2c_set_pwrmode)) = (unsigned char)((unsigned int)mode != 0U);
  #line 533 
  *((u8 *)(& u1_h2c_set_pwrmode) + 1U) = (unsigned char)(((int)*((u8 *)(& u1_h2c_set_pwrmode) + 1U) & -16) | ((int)rlbm & 15));
  #line 534 
  if (bt_ctrl_lps) 
                   #line 534 
                   tmp_6 = 0;
  else {
    #line 534 
    int tmp_5;
    #line 534 
    if ((unsigned int)rtlpriv->mac80211.p2p != 0U) 
                                                   #line 534 
                                                   tmp_5 = (int)ppsc->smart_ps << 4; else 
                                                                    #line 534 
                                                                    tmp_5 = 16;
    #line 534 
    tmp_6 = tmp_5;
  }
  #line 534 
  *((u8 *)(& u1_h2c_set_pwrmode) + 1U) = (unsigned char)(((int)*((u8 *)(& u1_h2c_set_pwrmode) + 1U) & 15) | tmp_6);
  #line 538 
  *((u8 *)(& u1_h2c_set_pwrmode) + 2U) = awake_intvl;
  #line 540 
  *((u8 *)(& u1_h2c_set_pwrmode) + 3U) = (unsigned char)0U;
  #line 541 
  *((u8 *)(& u1_h2c_set_pwrmode) + 4U) = power_state;
  #line 542 
  *((u8 *)(& u1_h2c_set_pwrmode) + 5U) = byte5;
  #line 544 
  _rtl_dbg_print_data(rtlpriv,8388608ULL,3,(char *)"rtl92c_set_fw_pwrmode(): u1_h2c_set_pwrmode\n",(void *)(& u1_h2c_set_pwrmode),7);
  #line 547 
  if ((int)(*(((rtlpriv->cfg)->ops)->get_btc_status))() != 0) 
                                                              #line 548 
                                                              (*(btc_ops->btc_record_pwr_mode))(rtlpriv,(u8 *)(& u1_h2c_set_pwrmode),(unsigned char)7);
  #line 550 
  rtl8821ae_fill_h2c_cmd(hw,(unsigned char)32,7U,(u8 *)(& u1_h2c_set_pwrmode));
  #line 553 
  return;
}

#line 555  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/fw.c"
void rtl8821ae_set_fw_media_status_rpt_cmd(struct ieee80211_hw *hw, u8 mstatus)
{
  #line 558 
  u8 parm[3U] = {(unsigned char)0U, (unsigned char)0U, (unsigned char)0U};
  #line 566 
  *((u8 *)(& parm)) = (unsigned char)(((int)*((u8 *)(& parm)) & -2) | ((int)mstatus & 1));
  #line 567 
  *((u8 *)(& parm)) = (unsigned char)((unsigned int)*((u8 *)(& parm)) & 253U);
  #line 569 
  rtl8821ae_fill_h2c_cmd(hw,(unsigned char)1,3U,(u8 *)(& parm));
  #line 570 
  return;
}

#line 572  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/fw.c"
void rtl8821ae_set_fw_ap_off_load_cmd(struct ieee80211_hw *hw, u8 ap_offload_enable)
{
  #line 575 
  struct rtl_mac *mac = & ((struct rtl_priv *)hw->priv)->mac80211;
  #line 576 
  u8 u1_apoffload_parm[3U] = {(unsigned char)0U};
  #line 578 
  *((u8 *)(& u1_apoffload_parm)) = ap_offload_enable;
  #line 579 
  *((u8 *)(& u1_apoffload_parm) + 1U) = (unsigned char)mac->hiddenssid;
  #line 580 
  *((u8 *)(& u1_apoffload_parm) + 2U) = (unsigned char)0U;
  #line 582 
  rtl8821ae_fill_h2c_cmd(hw,(unsigned char)8,3U,(u8 *)(& u1_apoffload_parm));
  #line 585 
  return;
}

#line 587  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/fw.c"
void rtl8821ae_set_fw_wowlan_mode(struct ieee80211_hw *hw, bool func_en)
{
  #line 589 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 590 
  struct rtl_ps_ctl *ppsc = & ((struct rtl_priv *)hw->priv)->psc;
  #line 591 
  u8 fw_wowlan_info[3U] = {(unsigned char)0U};
  #line 593 
  _rtl_dbg_trace(rtlpriv,65536ULL,4,(char *)"enable(%d)\n",(int)func_en);
  #line 595 
  *((u8 *)(& fw_wowlan_info)) = (unsigned char)(((int)*((u8 *)(& fw_wowlan_info)) & -2) | ((int)func_en != 0));
  #line 598 
  *((u8 *)(& fw_wowlan_info)) = (unsigned char)(((int)*((u8 *)(& fw_wowlan_info)) & -3) | (((int)((unsigned long)ppsc->wo_wlan_mode >> 1) << 1) & 2));
  #line 600 
  *((u8 *)(& fw_wowlan_info)) = (unsigned char)(((int)*((u8 *)(& fw_wowlan_info)) & -5) | (((int)ppsc->wo_wlan_mode << 2) & 4));
  #line 603 
  *((u8 *)(& fw_wowlan_info)) = (unsigned char)((unsigned int)*((u8 *)(& fw_wowlan_info)) & 247U);
  #line 604 
  *((u8 *)(& fw_wowlan_info)) = (unsigned char)((unsigned int)*((u8 *)(& fw_wowlan_info)) & 239U);
  #line 605 
  *((u8 *)(& fw_wowlan_info)) = (unsigned char)((unsigned int)*((u8 *)(& fw_wowlan_info)) & 223U);
  #line 606 
  *((u8 *)(& fw_wowlan_info)) = (unsigned char)((int)*((u8 *)(& fw_wowlan_info)) | -128);
  #line 607 
  *((u8 *)(& fw_wowlan_info) + 1U) = (unsigned char)0U;
  #line 608 
  *((u8 *)(& fw_wowlan_info) + 2U) = (unsigned char)0U;
  #line 610 
  _rtl_dbg_print_data(rtlpriv,65536ULL,3,(char *)"wowlan mode: cmd 0x80: Content:\n",(void *)(& fw_wowlan_info),3);
  #line 614 
  rtl8821ae_fill_h2c_cmd(hw,(unsigned char)128,3U,(u8 *)(& fw_wowlan_info));
  #line 617 
  return;
}

#line 619  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/fw.c"
void rtl8821ae_set_fw_remote_wake_ctrl_cmd(struct ieee80211_hw *hw, u8 enable)
{
  #line 632 
  int tmp;
  #line 634 
  int tmp_0;
  #line 636 
  int tmp_1;
  #line 622 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 623 
  struct rtl_ps_ctl *ppsc = & ((struct rtl_priv *)hw->priv)->psc;
  #line 624 
  struct rtl_hal *rtlhal = & ((struct rtl_priv *)hw->priv)->rtlhal;
  #line 625 
  u8 remote_wake_ctrl_parm[1U] = {(unsigned char)0U};
  #line 627 
  _rtl_dbg_trace(rtlpriv,65536ULL,4,(char *)"enable=%d, ARP offload=%d, GTK offload=%d\n",(int)enable,(int)ppsc->arp_offload_enable,(int)ppsc->gtk_offload_enable);
  #line 631 
  *((u8 *)(& remote_wake_ctrl_parm)) = (unsigned char)(((int)*((u8 *)(& remote_wake_ctrl_parm)) & -2) | ((int)enable & 1));
  #line 632 
  if ((unsigned int)ppsc->arp_offload_enable != 0U) 
                                                    #line 632 
                                                    tmp = 2; else 
                                                                  #line 632 
                                                                  tmp = 0;
  #line 632 
  *((u8 *)(& remote_wake_ctrl_parm)) = (unsigned char)(((int)*((u8 *)(& remote_wake_ctrl_parm)) & -3) | tmp);
  #line 634 
  if ((unsigned int)ppsc->gtk_offload_enable != 0U) 
                                                    #line 634 
                                                    tmp_0 = 8; else 
                                                                    #line 634 
                                                                    tmp_0 = 0;
  #line 634 
  *((u8 *)(& remote_wake_ctrl_parm)) = (unsigned char)(((int)*((u8 *)(& remote_wake_ctrl_parm)) & -9) | tmp_0);
  #line 636 
  if ((int)rtlhal->real_wow_v2_enable != 0) 
                                            #line 636 
                                            tmp_1 = 64; else 
                                                             #line 636 
                                                             tmp_1 = 0;
  #line 636 
  *((u8 *)(& remote_wake_ctrl_parm)) = (unsigned char)(((int)*((u8 *)(& remote_wake_ctrl_parm)) & -65) | tmp_1);
  #line 639 
  _rtl_dbg_print_data(rtlpriv,65536ULL,5,(char *)"remote_wake_ctrl: cmd 0x4: Content:\n",(void *)(& remote_wake_ctrl_parm),1);
  #line 643 
  rtl8821ae_fill_h2c_cmd(hw,(unsigned char)129,1U,(u8 *)(& remote_wake_ctrl_parm));
  #line 646 
  return;
}

#line 648  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/fw.c"
void rtl8821ae_set_fw_keep_alive_cmd(struct ieee80211_hw *hw, bool func_en)
{
  #line 651 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 652 
  u8 keep_alive_info[3U] = {(unsigned char)0U};
  #line 654 
  _rtl_dbg_trace(rtlpriv,65536ULL,4,(char *)"Enable(%d)\n",(int)func_en);
  #line 656 
  *((u8 *)(& keep_alive_info)) = (unsigned char)(((int)*((u8 *)(& keep_alive_info)) & -2) | (int)func_en);
  #line 658 
  *((u8 *)(& keep_alive_info)) = (unsigned char)((int)*((u8 *)(& keep_alive_info)) | 2);
  #line 659 
  *((u8 *)(& keep_alive_info) + 1U) = (unsigned char)10U;
  #line 661 
  _rtl_dbg_print_data(rtlpriv,65536ULL,5,(char *)"keep alive: cmd 0x3: Content:\n",(void *)(& keep_alive_info),3);
  #line 664 
  rtl8821ae_fill_h2c_cmd(hw,(unsigned char)3,3U,(u8 *)(& keep_alive_info));
  #line 667 
  return;
}

#line 669  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/fw.c"
void rtl8821ae_set_fw_disconnect_decision_ctrl_cmd(struct ieee80211_hw *hw, bool enabled)
{
  #line 672 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 673 
  u8 parm[3U] = {(unsigned char)0U};
  #line 675 
  *((u8 *)(& parm)) = (unsigned char)(((int)*((u8 *)(& parm)) & -2) | (int)enabled);
  #line 676 
  *((u8 *)(& parm)) = (unsigned char)((int)*((u8 *)(& parm)) | 2);
  #line 677 
  *((u8 *)(& parm) + 1U) = (unsigned char)30U;
  #line 678 
  *((u8 *)(& parm) + 2U) = (unsigned char)3U;
  #line 680 
  _rtl_dbg_print_data(rtlpriv,65536ULL,5,(char *)"disconnect_decision_ctrl: cmd 0x4: Content:\n",(void *)(& parm),3);
  #line 683 
  rtl8821ae_fill_h2c_cmd(hw,(unsigned char)4,3U,(u8 *)(& parm));
  #line 685 
  return;
}

#line 687  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/fw.c"
void rtl8821ae_set_fw_global_info_cmd(struct ieee80211_hw *hw)
{
  #line 689 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 690 
  struct rtl_security *sec = & rtlpriv->sec;
  #line 691 
  u8 remote_wakeup_sec_info[2U] = {(unsigned char)0U};
  #line 693 
  _rtl_dbg_trace(rtlpriv,65536ULL,4,(char *)"PairwiseEncAlgorithm=%d, GroupEncAlgorithm=%d\n",(unsigned int)sec->pairwise_enc_algorithm,(unsigned int)sec->group_enc_algorithm);
  #line 697 
  *((u8 *)(& remote_wakeup_sec_info)) = (unsigned char)sec->pairwise_enc_algorithm;
  #line 700 
  *((u8 *)(& remote_wakeup_sec_info) + 1U) = (unsigned char)sec->group_enc_algorithm;
  #line 703 
  rtl8821ae_fill_h2c_cmd(hw,(unsigned char)130,2U,(u8 *)(& remote_wakeup_sec_info));
  #line 707 
  _rtl_dbg_print_data(rtlpriv,8388608ULL,5,(char *)"rtl8821ae_set_global_info: cmd 0x82:\n",(void *)(& remote_wakeup_sec_info),2);
  #line 708 
  return;
}

#line 724  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/fw.c"
static u8 reserved_page_packet_8821[2048U] = {(unsigned char)128U, [4] = (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, [11] = (unsigned char)224U, (unsigned char)76U, (unsigned char)2U, (unsigned char)226U, (unsigned char)100U, (unsigned char)64U, (unsigned char)22U, (unsigned char)159U, (unsigned char)35U, (unsigned char)212U, (unsigned char)70U, (unsigned char)32U, [32] = (unsigned char)100U, [34] = (unsigned char)32U, (unsigned char)4U, [37] = (unsigned char)6U, (unsigned char)100U, (unsigned char)108U, (unsigned char)105U, (unsigned char)110U, (unsigned char)107U, (unsigned char)49U, (unsigned char)1U, (unsigned char)8U, (unsigned char)130U, (unsigned char)132U, (unsigned char)139U, (unsigned char)150U, (unsigned char)12U, (unsigned char)24U, (unsigned char)48U, (unsigned char)72U, (unsigned char)3U, (unsigned char)1U, (unsigned char)11U, (unsigned char)6U, (unsigned char)2U, [61] = (unsigned char)42U, (unsigned char)1U, (unsigned char)139U, (unsigned char)50U, (unsigned char)4U, (unsigned char)18U, (unsigned char)36U, (unsigned char)96U, (unsigned char)108U, [216] = (unsigned char)16U, [218] = (unsigned char)40U, (unsigned char)140U, [221] = (unsigned char)18U, [229] = (unsigned char)129U, [256] = (unsigned char)164U, (unsigned char)16U, (unsigned char)1U, (unsigned char)192U, (unsigned char)64U, (unsigned char)22U, (unsigned char)159U, (unsigned char)35U, (unsigned char)212U, (unsigned char)70U, [267] = (unsigned char)224U, (unsigned char)76U, (unsigned char)2U, (unsigned char)226U, (unsigned char)100U, [472] = (unsigned char)24U, [474] = (unsigned char)40U, (unsigned char)140U, [477] = (unsigned char)18U, [485] = (unsigned char)1U, [505] = (unsigned char)128U, [512] = (unsigned char)72U, (unsigned char)1U, [516] = (unsigned char)64U, (unsigned char)22U, (unsigned char)159U, (unsigned char)35U, (unsigned char)212U, (unsigned char)70U, [523] = (unsigned char)224U, (unsigned char)76U, (unsigned char)2U, (unsigned char)226U, (unsigned char)100U, (unsigned char)64U, (unsigned char)22U, (unsigned char)159U, (unsigned char)35U, (unsigned char)212U, (unsigned char)70U, [728] = (unsigned char)26U, [730] = (unsigned char)40U, (unsigned char)140U, [733] = (unsigned char)18U, [741] = (unsigned char)1U, [761] = (unsigned char)128U, [768] = (unsigned char)200U, (unsigned char)1U, [772] = (unsigned char)132U, (unsigned char)201U, (unsigned char)178U, (unsigned char)167U, (unsigned char)179U, (unsigned char)110U, [779] = (unsigned char)224U, (unsigned char)76U, (unsigned char)2U, (unsigned char)81U, (unsigned char)2U, (unsigned char)132U, (unsigned char)201U, (unsigned char)178U, (unsigned char)167U, (unsigned char)179U, (unsigned char)110U, [984] = (unsigned char)26U, [986] = (unsigned char)40U, (unsigned char)140U, [989] = (unsigned char)18U, [994] = (unsigned char)128U, [997] = (unsigned char)1U, [1017] = (unsigned char)128U, [1024] = (unsigned char)200U, (unsigned char)1U, [1028] = (unsigned char)132U, (unsigned char)201U, (unsigned char)178U, (unsigned char)167U, (unsigned char)179U, (unsigned char)110U, [1035] = (unsigned char)224U, (unsigned char)76U, (unsigned char)2U, (unsigned char)81U, (unsigned char)2U, (unsigned char)132U, (unsigned char)201U, (unsigned char)178U, (unsigned char)167U, (unsigned char)179U, (unsigned char)110U, [1240] = (unsigned char)60U, [1242] = (unsigned char)40U, (unsigned char)140U, [1245] = (unsigned char)18U, [1253] = (unsigned char)1U, [1273] = (unsigned char)128U, [1280] = (unsigned char)8U, (unsigned char)1U, [1284] = (unsigned char)132U, (unsigned char)201U, (unsigned char)178U, (unsigned char)167U, (unsigned char)179U, (unsigned char)110U, [1291] = (unsigned char)224U, (unsigned char)76U, (unsigned char)2U, (unsigned char)81U, (unsigned char)2U, (unsigned char)132U, (unsigned char)201U, (unsigned char)178U, (unsigned char)167U, (unsigned char)179U, (unsigned char)110U, [1304] = (unsigned char)170U, (unsigned char)170U, (unsigned char)3U, [1310] = (unsigned char)8U, (unsigned char)6U, [1313] = (unsigned char)1U, (unsigned char)8U, [1316] = (unsigned char)6U, (unsigned char)4U, [1319] = (unsigned char)2U, [1321] = (unsigned char)224U, (unsigned char)76U, (unsigned char)2U, (unsigned char)81U, (unsigned char)2U, [1331] = (unsigned char)224U, (unsigned char)76U, (unsigned char)2U, (unsigned char)81U, (unsigned char)2U};
#line 992  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/fw.c"
static u8 reserved_page_packet_8812[4096U] = {(unsigned char)128U, [4] = (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, [11] = (unsigned char)224U, (unsigned char)76U, (unsigned char)2U, (unsigned char)81U, (unsigned char)2U, (unsigned char)132U, (unsigned char)201U, (unsigned char)178U, (unsigned char)167U, (unsigned char)179U, (unsigned char)110U, (unsigned char)96U, [32] = (unsigned char)100U, [34] = (unsigned char)32U, (unsigned char)4U, [37] = (unsigned char)3U, (unsigned char)50U, (unsigned char)49U, (unsigned char)53U, (unsigned char)1U, (unsigned char)8U, (unsigned char)130U, (unsigned char)132U, (unsigned char)139U, (unsigned char)150U, (unsigned char)12U, (unsigned char)18U, (unsigned char)24U, (unsigned char)36U, (unsigned char)3U, (unsigned char)1U, (unsigned char)1U, (unsigned char)6U, (unsigned char)2U, [58] = (unsigned char)42U, (unsigned char)1U, (unsigned char)2U, (unsigned char)50U, (unsigned char)4U, (unsigned char)48U, (unsigned char)72U, (unsigned char)96U, (unsigned char)108U, (unsigned char)45U, (unsigned char)26U, (unsigned char)237U, (unsigned char)9U, (unsigned char)3U, (unsigned char)255U, (unsigned char)255U, [95] = (unsigned char)61U, [97] = (unsigned char)221U, (unsigned char)7U, [100] = (unsigned char)224U, (unsigned char)76U, (unsigned char)2U, (unsigned char)2U, (unsigned char)8U, (unsigned char)4U, [472] = (unsigned char)16U, [474] = (unsigned char)40U, (unsigned char)140U, [477] = (unsigned char)18U, [485] = (unsigned char)129U, [488] = (unsigned char)4U, [512] = (unsigned char)164U, (unsigned char)16U, (unsigned char)9U, (unsigned char)192U, (unsigned char)132U, (unsigned char)201U, (unsigned char)178U, (unsigned char)167U, (unsigned char)179U, (unsigned char)110U, [523] = (unsigned char)224U, (unsigned char)76U, (unsigned char)2U, (unsigned char)81U, (unsigned char)2U, [984] = (unsigned char)24U, [986] = (unsigned char)40U, (unsigned char)140U, [989] = (unsigned char)18U, [997] = (unsigned char)1U, [1017] = (unsigned char)128U, [1024] = (unsigned char)72U, (unsigned char)1U, [1028] = (unsigned char)132U, (unsigned char)201U, (unsigned char)178U, (unsigned char)167U, (unsigned char)179U, (unsigned char)110U, [1035] = (unsigned char)224U, (unsigned char)76U, (unsigned char)2U, (unsigned char)81U, (unsigned char)2U, (unsigned char)132U, (unsigned char)201U, (unsigned char)178U, (unsigned char)167U, (unsigned char)179U, (unsigned char)110U, [1496] = (unsigned char)26U, [1498] = (unsigned char)40U, (unsigned char)140U, [1501] = (unsigned char)18U, [1509] = (unsigned char)1U, [1529] = (unsigned char)128U, [1536] = (unsigned char)200U, (unsigned char)1U, [1540] = (unsigned char)132U, (unsigned char)201U, (unsigned char)178U, (unsigned char)167U, (unsigned char)179U, (unsigned char)110U, [1547] = (unsigned char)224U, (unsigned char)76U, (unsigned char)2U, (unsigned char)81U, (unsigned char)2U, (unsigned char)132U, (unsigned char)201U, (unsigned char)178U, (unsigned char)167U, (unsigned char)179U, (unsigned char)110U, [2008] = (unsigned char)26U, [2010] = (unsigned char)40U, (unsigned char)140U, [2013] = (unsigned char)18U, [2018] = (unsigned char)128U, [2021] = (unsigned char)1U, [2041] = (unsigned char)128U, [2048] = (unsigned char)200U, (unsigned char)1U, [2052] = (unsigned char)132U, (unsigned char)201U, (unsigned char)178U, (unsigned char)167U, (unsigned char)179U, (unsigned char)110U, [2059] = (unsigned char)224U, (unsigned char)76U, (unsigned char)2U, (unsigned char)81U, (unsigned char)2U, (unsigned char)132U, (unsigned char)201U, (unsigned char)178U, (unsigned char)167U, (unsigned char)179U, (unsigned char)110U, [2520] = (unsigned char)60U, [2522] = (unsigned char)40U, (unsigned char)140U, [2525] = (unsigned char)18U, [2533] = (unsigned char)1U, [2553] = (unsigned char)128U, [2560] = (unsigned char)8U, (unsigned char)1U, [2564] = (unsigned char)132U, (unsigned char)201U, (unsigned char)178U, (unsigned char)167U, (unsigned char)179U, (unsigned char)110U, [2571] = (unsigned char)224U, (unsigned char)76U, (unsigned char)2U, (unsigned char)81U, (unsigned char)2U, (unsigned char)132U, (unsigned char)201U, (unsigned char)178U, (unsigned char)167U, (unsigned char)179U, (unsigned char)110U, [2584] = (unsigned char)170U, (unsigned char)170U, (unsigned char)3U, [2590] = (unsigned char)8U, (unsigned char)6U, [2593] = (unsigned char)1U, (unsigned char)8U, [2596] = (unsigned char)6U, (unsigned char)4U, [2599] = (unsigned char)2U, [2601] = (unsigned char)224U, (unsigned char)76U, (unsigned char)2U, (unsigned char)81U, (unsigned char)2U, [2611] = (unsigned char)224U, (unsigned char)76U, (unsigned char)2U, (unsigned char)81U, (unsigned char)2U};
#line 1516  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/fw.c"
void rtl8812ae_set_fw_rsvdpagepkt(struct ieee80211_hw *hw, bool b_dl_finished, bool dl_whole_packets)
{
  #line 1522 
  u32 totalpacketlen;
  #line 1523 
  bool rtstatus;
  #line 1527 
  u8 *beacon;
  #line 1528 
  u8 *p_pspoll;
  #line 1529 
  u8 *nullfunc;
  #line 1530 
  u8 *qosnull;
  #line 1531 
  u8 *btqosnull;
  #line 1532 
  u8 *arpresp;
  #line 1519 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 1520 
  struct rtl_mac *mac = & rtlpriv->mac80211;
  #line 1521 
  struct sk_buff *skb = (struct sk_buff *)0;
  #line 1524 
  u8 u1rsvdpageloc[5U] = {(unsigned char)0U};
  #line 1525 
  u8 u1rsvdpageloc2[7U] = {(unsigned char)0U};
  #line 1526 
  bool b_dlok = (_Bool)0;
  #line 1538 
  beacon = reserved_page_packet_8812;
  #line 1539 
  *(beacon + 10U) = *((u8 *)(& mac->mac_addr));
  #line 1539 
  *(beacon + 11U) = *((u8 *)(& mac->mac_addr) + 1U);
  #line 1539 
  *(beacon + 12U) = *((u8 *)(& mac->mac_addr) + 2U);
  #line 1539 
  *(beacon + 13U) = *((u8 *)(& mac->mac_addr) + 3U);
  #line 1539 
  *(beacon + 14U) = *((u8 *)(& mac->mac_addr) + 4U);
  #line 1539 
  *(beacon + 15U) = *((u8 *)(& mac->mac_addr) + 5U);
  #line 1540 
  *(beacon + 16U) = *((u8 *)(& mac->bssid));
  #line 1540 
  *(beacon + 17U) = *((u8 *)(& mac->bssid) + 1U);
  #line 1540 
  *(beacon + 18U) = *((u8 *)(& mac->bssid) + 2U);
  #line 1540 
  *(beacon + 19U) = *((u8 *)(& mac->bssid) + 3U);
  #line 1540 
  *(beacon + 20U) = *((u8 *)(& mac->bssid) + 4U);
  #line 1540 
  *(beacon + 21U) = *((u8 *)(& mac->bssid) + 5U);
  #line 1542 
  if ((int)b_dl_finished != 0) {
    #line 1543 
    totalpacketlen = 472U;
    #line 1544 
    goto out;
  }
  #line 1550 
  p_pspoll = & reserved_page_packet_8812[512];
  #line 1551 
  *((u16 *)(p_pspoll + 2U)) = (unsigned short)((unsigned int)mac->assoc_id | 49152U);
  #line 1552 
  ether_addr_copy(p_pspoll + 4U,(u8 *)(& mac->bssid));
  #line 1553 
  ether_addr_copy(p_pspoll + 10U,(u8 *)(& mac->mac_addr));
  #line 1555 
  *((u8 *)(& u1rsvdpageloc) + 1U) = (unsigned char)1U;
  #line 1561 
  nullfunc = & reserved_page_packet_8812[1024];
  #line 1562 
  *(nullfunc + 4U) = *((u8 *)(& mac->bssid));
  #line 1562 
  *(nullfunc + 5U) = *((u8 *)(& mac->bssid) + 1U);
  #line 1562 
  *(nullfunc + 6U) = *((u8 *)(& mac->bssid) + 2U);
  #line 1562 
  *(nullfunc + 7U) = *((u8 *)(& mac->bssid) + 3U);
  #line 1562 
  *(nullfunc + 8U) = *((u8 *)(& mac->bssid) + 4U);
  #line 1562 
  *(nullfunc + 9U) = *((u8 *)(& mac->bssid) + 5U);
  #line 1563 
  *(nullfunc + 10U) = *((u8 *)(& mac->mac_addr));
  #line 1563 
  *(nullfunc + 11U) = *((u8 *)(& mac->mac_addr) + 1U);
  #line 1563 
  *(nullfunc + 12U) = *((u8 *)(& mac->mac_addr) + 2U);
  #line 1563 
  *(nullfunc + 13U) = *((u8 *)(& mac->mac_addr) + 3U);
  #line 1563 
  *(nullfunc + 14U) = *((u8 *)(& mac->mac_addr) + 4U);
  #line 1563 
  *(nullfunc + 15U) = *((u8 *)(& mac->mac_addr) + 5U);
  #line 1564 
  *(nullfunc + 16U) = *((u8 *)(& mac->bssid));
  #line 1564 
  *(nullfunc + 17U) = *((u8 *)(& mac->bssid) + 1U);
  #line 1564 
  *(nullfunc + 18U) = *((u8 *)(& mac->bssid) + 2U);
  #line 1564 
  *(nullfunc + 19U) = *((u8 *)(& mac->bssid) + 3U);
  #line 1564 
  *(nullfunc + 20U) = *((u8 *)(& mac->bssid) + 4U);
  #line 1564 
  *(nullfunc + 21U) = *((u8 *)(& mac->bssid) + 5U);
  #line 1566 
  *((u8 *)(& u1rsvdpageloc) + 2U) = (unsigned char)2U;
  #line 1572 
  qosnull = & reserved_page_packet_8812[1536];
  #line 1573 
  *(qosnull + 4U) = *((u8 *)(& mac->bssid));
  #line 1573 
  *(qosnull + 5U) = *((u8 *)(& mac->bssid) + 1U);
  #line 1573 
  *(qosnull + 6U) = *((u8 *)(& mac->bssid) + 2U);
  #line 1573 
  *(qosnull + 7U) = *((u8 *)(& mac->bssid) + 3U);
  #line 1573 
  *(qosnull + 8U) = *((u8 *)(& mac->bssid) + 4U);
  #line 1573 
  *(qosnull + 9U) = *((u8 *)(& mac->bssid) + 5U);
  #line 1574 
  *(qosnull + 10U) = *((u8 *)(& mac->mac_addr));
  #line 1574 
  *(qosnull + 11U) = *((u8 *)(& mac->mac_addr) + 1U);
  #line 1574 
  *(qosnull + 12U) = *((u8 *)(& mac->mac_addr) + 2U);
  #line 1574 
  *(qosnull + 13U) = *((u8 *)(& mac->mac_addr) + 3U);
  #line 1574 
  *(qosnull + 14U) = *((u8 *)(& mac->mac_addr) + 4U);
  #line 1574 
  *(qosnull + 15U) = *((u8 *)(& mac->mac_addr) + 5U);
  #line 1575 
  *(qosnull + 16U) = *((u8 *)(& mac->bssid));
  #line 1575 
  *(qosnull + 17U) = *((u8 *)(& mac->bssid) + 1U);
  #line 1575 
  *(qosnull + 18U) = *((u8 *)(& mac->bssid) + 2U);
  #line 1575 
  *(qosnull + 19U) = *((u8 *)(& mac->bssid) + 3U);
  #line 1575 
  *(qosnull + 20U) = *((u8 *)(& mac->bssid) + 4U);
  #line 1575 
  *(qosnull + 21U) = *((u8 *)(& mac->bssid) + 5U);
  #line 1577 
  *((u8 *)(& u1rsvdpageloc) + 3U) = (unsigned char)3U;
  #line 1583 
  btqosnull = & reserved_page_packet_8812[2048];
  #line 1584 
  *(btqosnull + 4U) = *((u8 *)(& mac->bssid));
  #line 1584 
  *(btqosnull + 5U) = *((u8 *)(& mac->bssid) + 1U);
  #line 1584 
  *(btqosnull + 6U) = *((u8 *)(& mac->bssid) + 2U);
  #line 1584 
  *(btqosnull + 7U) = *((u8 *)(& mac->bssid) + 3U);
  #line 1584 
  *(btqosnull + 8U) = *((u8 *)(& mac->bssid) + 4U);
  #line 1584 
  *(btqosnull + 9U) = *((u8 *)(& mac->bssid) + 5U);
  #line 1585 
  *(btqosnull + 10U) = *((u8 *)(& mac->mac_addr));
  #line 1585 
  *(btqosnull + 11U) = *((u8 *)(& mac->mac_addr) + 1U);
  #line 1585 
  *(btqosnull + 12U) = *((u8 *)(& mac->mac_addr) + 2U);
  #line 1585 
  *(btqosnull + 13U) = *((u8 *)(& mac->mac_addr) + 3U);
  #line 1585 
  *(btqosnull + 14U) = *((u8 *)(& mac->mac_addr) + 4U);
  #line 1585 
  *(btqosnull + 15U) = *((u8 *)(& mac->mac_addr) + 5U);
  #line 1586 
  *(btqosnull + 16U) = *((u8 *)(& mac->bssid));
  #line 1586 
  *(btqosnull + 17U) = *((u8 *)(& mac->bssid) + 1U);
  #line 1586 
  *(btqosnull + 18U) = *((u8 *)(& mac->bssid) + 2U);
  #line 1586 
  *(btqosnull + 19U) = *((u8 *)(& mac->bssid) + 3U);
  #line 1586 
  *(btqosnull + 20U) = *((u8 *)(& mac->bssid) + 4U);
  #line 1586 
  *(btqosnull + 21U) = *((u8 *)(& mac->bssid) + 5U);
  #line 1588 
  *((u8 *)(& u1rsvdpageloc) + 4U) = (unsigned char)4U;
  #line 1590 
  if (! dl_whole_packets) {
    #line 1591 
    totalpacketlen = 2520U;
    #line 1592 
    goto out;
  }
  #line 1598 
  arpresp = & reserved_page_packet_8812[2560];
  #line 1599 
  *(arpresp + 4U) = *((u8 *)(& mac->bssid));
  #line 1599 
  *(arpresp + 5U) = *((u8 *)(& mac->bssid) + 1U);
  #line 1599 
  *(arpresp + 6U) = *((u8 *)(& mac->bssid) + 2U);
  #line 1599 
  *(arpresp + 7U) = *((u8 *)(& mac->bssid) + 3U);
  #line 1599 
  *(arpresp + 8U) = *((u8 *)(& mac->bssid) + 4U);
  #line 1599 
  *(arpresp + 9U) = *((u8 *)(& mac->bssid) + 5U);
  #line 1600 
  *(arpresp + 10U) = *((u8 *)(& mac->mac_addr));
  #line 1600 
  *(arpresp + 11U) = *((u8 *)(& mac->mac_addr) + 1U);
  #line 1600 
  *(arpresp + 12U) = *((u8 *)(& mac->mac_addr) + 2U);
  #line 1600 
  *(arpresp + 13U) = *((u8 *)(& mac->mac_addr) + 3U);
  #line 1600 
  *(arpresp + 14U) = *((u8 *)(& mac->mac_addr) + 4U);
  #line 1600 
  *(arpresp + 15U) = *((u8 *)(& mac->mac_addr) + 5U);
  #line 1601 
  *(arpresp + 16U) = *((u8 *)(& mac->bssid));
  #line 1601 
  *(arpresp + 17U) = *((u8 *)(& mac->bssid) + 1U);
  #line 1601 
  *(arpresp + 18U) = *((u8 *)(& mac->bssid) + 2U);
  #line 1601 
  *(arpresp + 19U) = *((u8 *)(& mac->bssid) + 3U);
  #line 1601 
  *(arpresp + 20U) = *((u8 *)(& mac->bssid) + 4U);
  #line 1601 
  *(arpresp + 21U) = *((u8 *)(& mac->bssid) + 5U);
  #line 1603 
  *((u8 *)(& u1rsvdpageloc2) + 1U) = (unsigned char)5U;
  #line 1609 
  *((u8 *)(& u1rsvdpageloc2)) = (unsigned char)6U;
  #line 1616 
  *((u8 *)(& u1rsvdpageloc2) + 5U) = (unsigned char)7U;
  #line 1618 
  totalpacketlen = 4056U;
  #line 1620 
  out: 
       #line 1620 
  ;
  #line 1621 
  _rtl_dbg_print_data(rtlpriv,8388608ULL,4,(char *)"rtl8812ae_set_fw_rsvdpagepkt(): packet data\n",(void *)(reserved_page_packet_8812),(int)totalpacketlen);
  #line 1625 
  skb = dev_alloc_skb(totalpacketlen);
  #line 1626 
  if (skb == (struct sk_buff *)0) 
                                  #line 1627 
                                  return;
  #line 1628 
  skb_put_data(skb,(void *)(& reserved_page_packet_8812),totalpacketlen);
  #line 1630 
  rtstatus = rtl_cmd_send_packet(hw,skb);
  #line 1632 
  if ((int)rtstatus != 0) 
                          #line 1633 
                          b_dlok = (_Bool)1;
  #line 1635 
  if (! b_dl_finished && (int)b_dlok != 0) {
    #line 1636 
    _rtl_dbg_print_data(rtlpriv,8388608ULL,3,(char *)"H2C_RSVDPAGE:\n",(void *)(& u1rsvdpageloc),5);
    #line 1638 
    rtl8821ae_fill_h2c_cmd(hw,(unsigned char)0,5U,(u8 *)(& u1rsvdpageloc));
    #line 1640 
    if ((int)dl_whole_packets != 0) {
      #line 1641 
      _rtl_dbg_print_data(rtlpriv,8388608ULL,3,(char *)"wowlan H2C_RSVDPAGE:\n",(void *)(& u1rsvdpageloc2),7);
      #line 1643 
      rtl8821ae_fill_h2c_cmd(hw,(unsigned char)131,7U,(u8 *)(& u1rsvdpageloc2));
    }
  }
  #line 1648 
  if (! b_dlok) 
                #line 1649 
                _rtl_dbg_trace(rtlpriv,1ULL,2,(char *)"Set RSVD page location to Fw FAIL!!!!!!.\n");
  #line 1650 
  return;
}

#line 1653  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/fw.c"
void rtl8821ae_set_fw_rsvdpagepkt(struct ieee80211_hw *hw, bool b_dl_finished, bool dl_whole_packets)
{
  #line 1659 
  u32 totalpacketlen;
  #line 1660 
  bool rtstatus;
  #line 1664 
  u8 *beacon;
  #line 1665 
  u8 *p_pspoll;
  #line 1666 
  u8 *nullfunc;
  #line 1667 
  u8 *qosnull;
  #line 1668 
  u8 *btqosnull;
  #line 1669 
  u8 *arpresp;
  #line 1656 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 1657 
  struct rtl_mac *mac = & ((struct rtl_priv *)hw->priv)->mac80211;
  #line 1658 
  struct sk_buff *skb = (struct sk_buff *)0;
  #line 1661 
  u8 u1rsvdpageloc[5U] = {(unsigned char)0U};
  #line 1662 
  u8 u1rsvdpageloc2[7U] = {(unsigned char)0U};
  #line 1663 
  bool b_dlok = (_Bool)0;
  #line 1675 
  beacon = reserved_page_packet_8821;
  #line 1676 
  *(beacon + 10U) = *((u8 *)(& mac->mac_addr));
  #line 1676 
  *(beacon + 11U) = *((u8 *)(& mac->mac_addr) + 1U);
  #line 1676 
  *(beacon + 12U) = *((u8 *)(& mac->mac_addr) + 2U);
  #line 1676 
  *(beacon + 13U) = *((u8 *)(& mac->mac_addr) + 3U);
  #line 1676 
  *(beacon + 14U) = *((u8 *)(& mac->mac_addr) + 4U);
  #line 1676 
  *(beacon + 15U) = *((u8 *)(& mac->mac_addr) + 5U);
  #line 1677 
  *(beacon + 16U) = *((u8 *)(& mac->bssid));
  #line 1677 
  *(beacon + 17U) = *((u8 *)(& mac->bssid) + 1U);
  #line 1677 
  *(beacon + 18U) = *((u8 *)(& mac->bssid) + 2U);
  #line 1677 
  *(beacon + 19U) = *((u8 *)(& mac->bssid) + 3U);
  #line 1677 
  *(beacon + 20U) = *((u8 *)(& mac->bssid) + 4U);
  #line 1677 
  *(beacon + 21U) = *((u8 *)(& mac->bssid) + 5U);
  #line 1679 
  if ((int)b_dl_finished != 0) {
    #line 1680 
    totalpacketlen = 216U;
    #line 1681 
    goto out;
  }
  #line 1687 
  p_pspoll = & reserved_page_packet_8821[256];
  #line 1688 
  *((u16 *)(p_pspoll + 2U)) = (unsigned short)((unsigned int)mac->assoc_id | 49152U);
  #line 1689 
  ether_addr_copy(p_pspoll + 4U,(u8 *)(& mac->bssid));
  #line 1690 
  ether_addr_copy(p_pspoll + 10U,(u8 *)(& mac->mac_addr));
  #line 1692 
  *((u8 *)(& u1rsvdpageloc) + 1U) = (unsigned char)1U;
  #line 1698 
  nullfunc = & reserved_page_packet_8821[512];
  #line 1699 
  *(nullfunc + 4U) = *((u8 *)(& mac->bssid));
  #line 1699 
  *(nullfunc + 5U) = *((u8 *)(& mac->bssid) + 1U);
  #line 1699 
  *(nullfunc + 6U) = *((u8 *)(& mac->bssid) + 2U);
  #line 1699 
  *(nullfunc + 7U) = *((u8 *)(& mac->bssid) + 3U);
  #line 1699 
  *(nullfunc + 8U) = *((u8 *)(& mac->bssid) + 4U);
  #line 1699 
  *(nullfunc + 9U) = *((u8 *)(& mac->bssid) + 5U);
  #line 1700 
  *(nullfunc + 10U) = *((u8 *)(& mac->mac_addr));
  #line 1700 
  *(nullfunc + 11U) = *((u8 *)(& mac->mac_addr) + 1U);
  #line 1700 
  *(nullfunc + 12U) = *((u8 *)(& mac->mac_addr) + 2U);
  #line 1700 
  *(nullfunc + 13U) = *((u8 *)(& mac->mac_addr) + 3U);
  #line 1700 
  *(nullfunc + 14U) = *((u8 *)(& mac->mac_addr) + 4U);
  #line 1700 
  *(nullfunc + 15U) = *((u8 *)(& mac->mac_addr) + 5U);
  #line 1701 
  *(nullfunc + 16U) = *((u8 *)(& mac->bssid));
  #line 1701 
  *(nullfunc + 17U) = *((u8 *)(& mac->bssid) + 1U);
  #line 1701 
  *(nullfunc + 18U) = *((u8 *)(& mac->bssid) + 2U);
  #line 1701 
  *(nullfunc + 19U) = *((u8 *)(& mac->bssid) + 3U);
  #line 1701 
  *(nullfunc + 20U) = *((u8 *)(& mac->bssid) + 4U);
  #line 1701 
  *(nullfunc + 21U) = *((u8 *)(& mac->bssid) + 5U);
  #line 1703 
  *((u8 *)(& u1rsvdpageloc) + 2U) = (unsigned char)2U;
  #line 1709 
  qosnull = & reserved_page_packet_8821[768];
  #line 1710 
  *(qosnull + 4U) = *((u8 *)(& mac->bssid));
  #line 1710 
  *(qosnull + 5U) = *((u8 *)(& mac->bssid) + 1U);
  #line 1710 
  *(qosnull + 6U) = *((u8 *)(& mac->bssid) + 2U);
  #line 1710 
  *(qosnull + 7U) = *((u8 *)(& mac->bssid) + 3U);
  #line 1710 
  *(qosnull + 8U) = *((u8 *)(& mac->bssid) + 4U);
  #line 1710 
  *(qosnull + 9U) = *((u8 *)(& mac->bssid) + 5U);
  #line 1711 
  *(qosnull + 10U) = *((u8 *)(& mac->mac_addr));
  #line 1711 
  *(qosnull + 11U) = *((u8 *)(& mac->mac_addr) + 1U);
  #line 1711 
  *(qosnull + 12U) = *((u8 *)(& mac->mac_addr) + 2U);
  #line 1711 
  *(qosnull + 13U) = *((u8 *)(& mac->mac_addr) + 3U);
  #line 1711 
  *(qosnull + 14U) = *((u8 *)(& mac->mac_addr) + 4U);
  #line 1711 
  *(qosnull + 15U) = *((u8 *)(& mac->mac_addr) + 5U);
  #line 1712 
  *(qosnull + 16U) = *((u8 *)(& mac->bssid));
  #line 1712 
  *(qosnull + 17U) = *((u8 *)(& mac->bssid) + 1U);
  #line 1712 
  *(qosnull + 18U) = *((u8 *)(& mac->bssid) + 2U);
  #line 1712 
  *(qosnull + 19U) = *((u8 *)(& mac->bssid) + 3U);
  #line 1712 
  *(qosnull + 20U) = *((u8 *)(& mac->bssid) + 4U);
  #line 1712 
  *(qosnull + 21U) = *((u8 *)(& mac->bssid) + 5U);
  #line 1714 
  *((u8 *)(& u1rsvdpageloc) + 3U) = (unsigned char)3U;
  #line 1720 
  btqosnull = & reserved_page_packet_8821[1024];
  #line 1721 
  *(btqosnull + 4U) = *((u8 *)(& mac->bssid));
  #line 1721 
  *(btqosnull + 5U) = *((u8 *)(& mac->bssid) + 1U);
  #line 1721 
  *(btqosnull + 6U) = *((u8 *)(& mac->bssid) + 2U);
  #line 1721 
  *(btqosnull + 7U) = *((u8 *)(& mac->bssid) + 3U);
  #line 1721 
  *(btqosnull + 8U) = *((u8 *)(& mac->bssid) + 4U);
  #line 1721 
  *(btqosnull + 9U) = *((u8 *)(& mac->bssid) + 5U);
  #line 1722 
  *(btqosnull + 10U) = *((u8 *)(& mac->mac_addr));
  #line 1722 
  *(btqosnull + 11U) = *((u8 *)(& mac->mac_addr) + 1U);
  #line 1722 
  *(btqosnull + 12U) = *((u8 *)(& mac->mac_addr) + 2U);
  #line 1722 
  *(btqosnull + 13U) = *((u8 *)(& mac->mac_addr) + 3U);
  #line 1722 
  *(btqosnull + 14U) = *((u8 *)(& mac->mac_addr) + 4U);
  #line 1722 
  *(btqosnull + 15U) = *((u8 *)(& mac->mac_addr) + 5U);
  #line 1723 
  *(btqosnull + 16U) = *((u8 *)(& mac->bssid));
  #line 1723 
  *(btqosnull + 17U) = *((u8 *)(& mac->bssid) + 1U);
  #line 1723 
  *(btqosnull + 18U) = *((u8 *)(& mac->bssid) + 2U);
  #line 1723 
  *(btqosnull + 19U) = *((u8 *)(& mac->bssid) + 3U);
  #line 1723 
  *(btqosnull + 20U) = *((u8 *)(& mac->bssid) + 4U);
  #line 1723 
  *(btqosnull + 21U) = *((u8 *)(& mac->bssid) + 5U);
  #line 1725 
  *((u8 *)(& u1rsvdpageloc) + 4U) = (unsigned char)4U;
  #line 1727 
  if (! dl_whole_packets) {
    #line 1728 
    totalpacketlen = 1240U;
    #line 1729 
    goto out;
  }
  #line 1735 
  arpresp = & reserved_page_packet_8821[1280];
  #line 1736 
  *(arpresp + 4U) = *((u8 *)(& mac->bssid));
  #line 1736 
  *(arpresp + 5U) = *((u8 *)(& mac->bssid) + 1U);
  #line 1736 
  *(arpresp + 6U) = *((u8 *)(& mac->bssid) + 2U);
  #line 1736 
  *(arpresp + 7U) = *((u8 *)(& mac->bssid) + 3U);
  #line 1736 
  *(arpresp + 8U) = *((u8 *)(& mac->bssid) + 4U);
  #line 1736 
  *(arpresp + 9U) = *((u8 *)(& mac->bssid) + 5U);
  #line 1737 
  *(arpresp + 10U) = *((u8 *)(& mac->mac_addr));
  #line 1737 
  *(arpresp + 11U) = *((u8 *)(& mac->mac_addr) + 1U);
  #line 1737 
  *(arpresp + 12U) = *((u8 *)(& mac->mac_addr) + 2U);
  #line 1737 
  *(arpresp + 13U) = *((u8 *)(& mac->mac_addr) + 3U);
  #line 1737 
  *(arpresp + 14U) = *((u8 *)(& mac->mac_addr) + 4U);
  #line 1737 
  *(arpresp + 15U) = *((u8 *)(& mac->mac_addr) + 5U);
  #line 1738 
  *(arpresp + 16U) = *((u8 *)(& mac->bssid));
  #line 1738 
  *(arpresp + 17U) = *((u8 *)(& mac->bssid) + 1U);
  #line 1738 
  *(arpresp + 18U) = *((u8 *)(& mac->bssid) + 2U);
  #line 1738 
  *(arpresp + 19U) = *((u8 *)(& mac->bssid) + 3U);
  #line 1738 
  *(arpresp + 20U) = *((u8 *)(& mac->bssid) + 4U);
  #line 1738 
  *(arpresp + 21U) = *((u8 *)(& mac->bssid) + 5U);
  #line 1740 
  *((u8 *)(& u1rsvdpageloc2) + 1U) = (unsigned char)5U;
  #line 1746 
  *((u8 *)(& u1rsvdpageloc2)) = (unsigned char)6U;
  #line 1753 
  *((u8 *)(& u1rsvdpageloc2) + 5U) = (unsigned char)7U;
  #line 1755 
  totalpacketlen = 2008U;
  #line 1757 
  out: 
       #line 1757 
  ;
  #line 1759 
  _rtl_dbg_print_data(rtlpriv,8388608ULL,4,(char *)"rtl8821ae_set_fw_rsvdpagepkt(): packet data\n",(void *)(reserved_page_packet_8821),(int)totalpacketlen);
  #line 1763 
  skb = dev_alloc_skb(totalpacketlen);
  #line 1764 
  if (skb == (struct sk_buff *)0) 
                                  #line 1765 
                                  return;
  #line 1766 
  skb_put_data(skb,(void *)(& reserved_page_packet_8821),totalpacketlen);
  #line 1768 
  rtstatus = rtl_cmd_send_packet(hw,skb);
  #line 1770 
  if ((int)rtstatus != 0) 
                          #line 1771 
                          b_dlok = (_Bool)1;
  #line 1773 
  if (! b_dl_finished && (int)b_dlok != 0) {
    #line 1774 
    _rtl_dbg_trace(rtlpriv,65536ULL,4,(char *)"Set RSVD page location to Fw.\n");
    #line 1776 
    _rtl_dbg_print_data(rtlpriv,8388608ULL,3,(char *)"H2C_RSVDPAGE:\n",(void *)(& u1rsvdpageloc),5);
    #line 1778 
    rtl8821ae_fill_h2c_cmd(hw,(unsigned char)0,5U,(u8 *)(& u1rsvdpageloc));
    #line 1780 
    if ((int)dl_whole_packets != 0) {
      #line 1781 
      _rtl_dbg_print_data(rtlpriv,8388608ULL,3,(char *)"wowlan H2C_RSVDPAGE:\n",(void *)(& u1rsvdpageloc2),7);
      #line 1784 
      rtl8821ae_fill_h2c_cmd(hw,(unsigned char)131,7U,(u8 *)(& u1rsvdpageloc2));
    }
  }
  #line 1790 
  if (! b_dlok) 
                #line 1791 
                _rtl_dbg_trace(rtlpriv,1ULL,2,(char *)"Set RSVD page location to Fw FAIL!!!!!!.\n");
  #line 1792 
  return;
}

#line 1797  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/fw.c"
static void rtl8821ae_set_p2p_ctw_period_cmd(struct ieee80211_hw *hw, u8 ctwindow)
{
  #line 1799 
  u8 u1_ctwindow_period[1U] = {ctwindow};
  #line 1801 
  rtl8821ae_fill_h2c_cmd(hw,(unsigned char)68,1U,(u8 *)(& u1_ctwindow_period));
  #line 1803 
  return;
}

#line 1805  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/fw.c"
void rtl8821ae_set_p2p_ps_offload_cmd(struct ieee80211_hw *hw, u8 p2p_ps_state)
{
  #line 1812 
  u8 i;
  #line 1813 
  u16 ctwindow;
  #line 1814 
  u32 start_time;
  #line 1814 
  u32 tsf_low;
  #line 1807 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 1808 
  struct rtl_ps_ctl *rtlps = & ((struct rtl_priv *)hw->priv)->psc;
  #line 1809 
  struct rtl_hal *rtlhal = & ((struct rtl_priv *)hw->priv)->rtlhal;
  #line 1810 
  struct rtl_p2p_ps_info *p2pinfo = & rtlps->p2p_ps_info;
  #line 1811 
  struct p2p_ps_offload_t *p2p_ps_offload = & rtlhal->p2p_ps_offload;
  #line 1816 
  switch ((int)p2p_ps_state) {
    #line 1817 
    case 0: 
            #line 1817 
    ;
    #line 1818 
    _rtl_dbg_trace(rtlpriv,2ULL,4,(char *)"P2P_PS_DISABLE\n");
    #line 1819 
    memset((void *)p2p_ps_offload,0,1UL);
    #line 1820 
    break;
    #line 1821 
    case 1: 
            #line 1821 
    ;
    #line 1822 
    _rtl_dbg_trace(rtlpriv,2ULL,4,(char *)"P2P_PS_ENABLE\n");
    #line 1824 
    if ((unsigned int)p2pinfo->ctwindow != 0U) {
      #line 1825 
      p2p_ps_offload->ctwindow_en = (unsigned char)1U;
      #line 1826 
      ctwindow = (unsigned short)p2pinfo->ctwindow;
      #line 1827 
      rtl8821ae_set_p2p_ctw_period_cmd(hw,(unsigned char)((int)((unsigned char)ctwindow)));
    }
    #line 1831 
    i = (unsigned char)0U;
    #line 1831 
    while ((int)p2pinfo->noa_num > (int)i) {
      #line 1833 
      rtl_write_byte(rtlpriv,1487U,(unsigned char)((int)i << 4U));
      #line 1834 
      if ((unsigned int)i == 0U) 
                                 #line 1835 
                                 p2p_ps_offload->noa0_en = (unsigned char)1U; else 
                                                                    #line 1837 
                                                                    p2p_ps_offload->noa1_en = (unsigned char)1U;
      #line 1840 
      rtl_write_dword(rtlpriv,1504U,p2pinfo->noa_duration[(int)i]);
      #line 1841 
      rtl_write_dword(rtlpriv,1508U,p2pinfo->noa_interval[(int)i]);
      #line 1844 
      tsf_low = rtl_read_dword(rtlpriv,1376U);
      #line 1846 
      start_time = p2pinfo->noa_start_time[(int)i];
      #line 1847 
      if ((unsigned int)p2pinfo->noa_count_type[(int)i] != 1U) 
        #line 1848 
        while (tsf_low + 51200U >= start_time) {
          #line 1849 
          start_time = p2pinfo->noa_interval[(int)i] + start_time;
          #line 1850 
          if ((unsigned int)p2pinfo->noa_count_type[(int)i] != 255U) 
            #line 1851 
            p2pinfo->noa_count_type[(int)i] = (u8)((int)p2pinfo->noa_count_type[(int)i] - 1);
        }
      #line 1854 
      rtl_write_dword(rtlpriv,1512U,start_time);
      #line 1855 
      rtl_write_dword(rtlpriv,1516U,(unsigned int)p2pinfo->noa_count_type[(int)i]);
      #line 1831 
      i = (u8)((int)i + 1);
    }
    #line 1859 
    if ((unsigned int)p2pinfo->opp_ps == 1U || (unsigned int)p2pinfo->noa_num != 0U) {
      #line 1861 
      rtl_write_byte(rtlpriv,1363U,(unsigned char)16);
      #line 1863 
      p2p_ps_offload->offload_en = (unsigned char)1U;
      #line 1865 
      if ((unsigned int)rtlpriv->mac80211.p2p == 3U) {
        #line 1866 
        p2p_ps_offload->role = (unsigned char)1U;
        #line 1867 
        p2p_ps_offload->allstasleep = (unsigned char)0U;
      }
      else 
           #line 1869 
           p2p_ps_offload->role = (unsigned char)0U;
      #line 1872 
      p2p_ps_offload->discovery = (unsigned char)0U;
    }
    #line 1874 
    break;
    #line 1875 
    case 2: 
            #line 1875 
    ;
    #line 1876 
    _rtl_dbg_trace(rtlpriv,2ULL,4,(char *)"P2P_PS_SCAN\n");
    #line 1877 
    p2p_ps_offload->discovery = (unsigned char)1U;
    #line 1878 
    break;
    #line 1879 
    case 3: 
            #line 1879 
    ;
    #line 1880 
    _rtl_dbg_trace(rtlpriv,2ULL,4,(char *)"P2P_PS_SCAN_DONE\n");
    #line 1881 
    p2p_ps_offload->discovery = (unsigned char)0U;
    #line 1882 
    p2pinfo->p2p_ps_state = P2P_PS_ENABLE;
    #line 1883 
    break;
    #line 1884 
    default: 
             #line 1884 
    ;
    #line 1885 
    break;
  }
  #line 1888 
  rtl8821ae_fill_h2c_cmd(hw,(unsigned char)20,1U,(u8 *)p2p_ps_offload);
  #line 1890 
  return;
}

#line 1892  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/fw.c"
void rtl8821ae_c2h_ra_report_handler(struct ieee80211_hw *hw, u8 *cmd_buf, u8 cmd_len)
{
  #line 1895 
  struct rtl_hal *rtlhal = & ((struct rtl_priv *)hw->priv)->rtlhal;
  #line 1896 
  u8 rate = (unsigned char)((unsigned int)*cmd_buf & 63U);
  #line 1898 
  rtlhal->current_ra_rate = rtl8821ae_hw_rate_to_mrate(hw,(unsigned char)((int)rate));
  #line 1900 
  rtl8821ae_dm_update_init_rate(hw,(unsigned char)((int)rate));
  #line 1901 
  return;
}

#line 783  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/rtl8821ae.ko/concurrency safety/0/concurrency safety/weaver/fw.i.aux"
static void cif___ldv_spin_lock_h2c_lock_of_rtl_locks(spinlock_t *lock)
{
  #line 786 
  ldv_spin_model_lock((char *)"h2c_lock_of_rtl_locks");
  #line 788 
  __ldv_spin_lock(lock);
  #line 789 
  return;
}

#line 792  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/rtl8821ae.ko/concurrency safety/0/concurrency safety/weaver/fw.i.aux"
static void cif_spin_unlock_irqrestore_h2c_lock_of_rtl_locks(spinlock_t *lock, unsigned long flags)
{
  #line 795 
  ldv_spin_model_unlock((char *)"h2c_lock_of_rtl_locks");
  #line 797 
  spin_unlock_irqrestore_0(lock,flags);
  #line 798 
  return;
}

#line 336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_0(spinlock_t *lock)
{
  #line 338 
  _raw_spin_lock(& lock->__anonCompField_spinlock_25.rlock);
  #line 339 
  return;
}

#line 340 
#line 783  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/rtl8821ae.ko/concurrency safety/0/concurrency safety/weaver/phy.i.aux"
static void cif_spin_lock_rf_lock_of_rtl_locks(spinlock_t *lock);
#line 340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 801  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/rtl8821ae.ko/concurrency safety/0/concurrency safety/weaver/phy.i.aux"
static void cif_spin_lock_iqk_lock_of_rtl_locks(spinlock_t *lock);
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_0(spinlock_t *lock)
{
  #line 378 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_25.rlock);
  #line 379 
  return;
}

#line 380 
#line 792  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/rtl8821ae.ko/concurrency safety/0/concurrency safety/weaver/phy.i.aux"
static void cif_spin_unlock_rf_lock_of_rtl_locks(spinlock_t *lock);
#line 380  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 810  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/rtl8821ae.ko/concurrency safety/0/concurrency safety/weaver/phy.i.aux"
static void cif_spin_unlock_iqk_lock_of_rtl_locks(spinlock_t *lock);
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
#line 291 
unsigned int jiffies_to_msecs(unsigned long);
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delay.h"
#line 59 
void msleep(unsigned int);
#line 3113  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
__inline static void rtl_write_byte_with_val32(struct ieee80211_hw *hw, u32 addr, u32 val8)
{
  #line 3116 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 3118 
  rtl_write_byte(rtlpriv,addr,(unsigned char)((int)((unsigned char)val8)));
  #line 3119 
  return;
}

#line 3138  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
__inline static u32 rtl_get_bbreg(struct ieee80211_hw *hw, u32 regaddr, u32 bitmask)
{
  #line 3141 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 3143 
  return (*(((rtlpriv->cfg)->ops)->get_bbreg))(hw,regaddr,bitmask);
}

#line 3154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
__inline static void rtl_set_bbreg_with_dwmask(struct ieee80211_hw *hw, u32 regaddr, u32 data)
{
  #line 3157 
  rtl_set_bbreg(hw,regaddr,4294967295U,data);
  #line 3158 
  return;
}

#line 3160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
__inline static u32 rtl_get_rfreg(struct ieee80211_hw *hw, enum radio_path rfpath, u32 regaddr, u32 bitmask)
{
  #line 3164 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 3166 
  return (*(((rtlpriv->cfg)->ops)->get_rfreg))(hw,rfpath,regaddr,bitmask);
}

#line 3178  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
__inline static bool is_hal_stop(struct rtl_hal *rtlhal)
{
  #line 3180 
  return (_Bool)((unsigned int)rtlhal->state == 0U);
}

#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/ps.h"
#line 9 
bool rtl_ps_enable_nic(struct ieee80211_hw *);
#line 10 
#line 10 
bool rtl_ps_disable_nic(struct ieee80211_hw *);
#line 186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.h"
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
u32 rtl8821ae_phy_query_bb_reg(struct ieee80211_hw *hw, u32 regaddr, u32 bitmask);
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.h"
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
void rtl8821ae_phy_set_bb_reg(struct ieee80211_hw *hw, u32 regaddr, u32 bitmask, u32 data);
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.h"
#line 136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
u32 rtl8821ae_phy_query_rf_reg(struct ieee80211_hw *hw, enum radio_path rfpath, u32 regaddr, u32 bitmask);
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.h"
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
void rtl8821ae_phy_set_rf_reg(struct ieee80211_hw *hw, enum radio_path rfpath, u32 regaddr, u32 bitmask, u32 data);
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.h"
#line 2135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
void rtl8821ae_phy_get_hw_reg_originalvalue(struct ieee80211_hw *hw);
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.h"
#line 2193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
void rtl8821ae_phy_get_txpower_level(struct ieee80211_hw *hw, long *powerlevel);
#line 204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.h"
#line 3269  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
void rtl8821ae_phy_set_txpower_level(struct ieee80211_hw *hw, u8 channel);
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.h"
#line 3302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
void rtl8821ae_phy_scan_operation_backup(struct ieee80211_hw *hw, u8 operation);
#line 208  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.h"
#line 3399  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
void rtl8821ae_phy_set_bw_mode_callback(struct ieee80211_hw *hw);
#line 209  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.h"
#line 3483  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
void rtl8821ae_phy_set_bw_mode(struct ieee80211_hw *hw, enum nl80211_channel_type ch_type);
#line 211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.h"
#line 3504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
void rtl8821ae_phy_sw_chnl_callback(struct ieee80211_hw *hw);
#line 212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.h"
#line 3559  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
u8 rtl8821ae_phy_sw_chnl(struct ieee80211_hw *hw);
#line 213  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.h"
#line 4558  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
void rtl8821ae_phy_iq_calibrate(struct ieee80211_hw *hw, bool b_recovery);
#line 215  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.h"
#line 4545  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
void rtl8812ae_phy_iq_calibrate(struct ieee80211_hw *hw, bool b_recovery);
#line 217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.h"
#line 4618  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
void rtl8821ae_phy_ap_calibrate(struct ieee80211_hw *hw, s8 delta);
#line 218  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.h"
#line 4614  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
void rtl8821ae_phy_lc_calibrate(struct ieee80211_hw *hw);
#line 219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.h"
#line 4622  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
void rtl8821ae_phy_set_rfpath_switch(struct ieee80211_hw *hw, bool bmain);
#line 225  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.h"
#line 4810  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
bool rtl8821ae_phy_set_rf_power_state(struct ieee80211_hw *hw, enum rf_pwrstate rfpwr_state);
#line 227  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.h"
#line 3605  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
u8 _rtl8812ae_get_right_chnl_place_for_iqk(u8 chnl);
#line 228  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.h"
#line 3209  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
void rtl8821ae_phy_set_txpower_level_by_path(struct ieee80211_hw *hw, u8 channel, u8 path);
#line 230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.h"
#line 4549  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
void rtl8812ae_do_iqk(struct ieee80211_hw *hw, u8 delta_thermal_index, u8 thermal_value, u8 threshold);
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.h"
#line 4603  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
void rtl8821ae_do_iqk(struct ieee80211_hw *hw, u8 delta_thermal_index, u8 thermal_value, u8 threshold);
#line 234  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.h"
#line 4576  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
void rtl8821ae_reset_iqk_result(struct ieee80211_hw *hw);
#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.h"
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
u32 phy_get_tx_swing_8812A(struct ieee80211_hw *hw, u8 band, u8 rf_path);
#line 270  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/dm.h"
#line 270 
void rtl8821ae_dm_write_dig(struct ieee80211_hw *hw, u8 current_igi);
#line 277 
#line 277 
void rtl8821ae_dm_clear_txpower_tracking_state(struct ieee80211_hw *hw);
#line 278 
#line 278 
void rtl8821ae_dm_write_cck_cca_thres(struct ieee80211_hw *hw, u8 current_cca);
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/table.h"
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/table.c"
u32 RTL8821AE_PHY_REG_1TARRAYLEN;
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/table.h"
#line 240  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/table.c"
u32 RTL8821AE_PHY_REG_ARRAY[344U];
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/table.h"
#line 238  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/table.c"
u32 RTL8812AE_PHY_REG_1TARRAYLEN;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/table.h"
#line 6  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/table.c"
u32 RTL8812AE_PHY_REG_ARRAY[470U];
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/table.h"
#line 486  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/table.c"
u32 RTL8821AE_PHY_REG_ARRAY_PGLEN;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/table.h"
#line 468  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/table.c"
u32 RTL8821AE_PHY_REG_ARRAY_PG[90U];
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/table.h"
#line 466  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/table.c"
u32 RTL8812AE_PHY_REG_ARRAY_PGLEN;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/table.h"
#line 417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/table.c"
u32 RTL8812AE_PHY_REG_ARRAY_PG[276U];
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/table.h"
#line 903  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/table.c"
u32 RTL8812AE_RADIOA_1TARRAYLEN;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/table.h"
#line 488  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/table.c"
u32 RTL8812AE_RADIOA_ARRAY[864U];
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/table.h"
#line 1311  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/table.c"
u32 RTL8812AE_RADIOB_1TARRAYLEN;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/table.h"
#line 905  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/table.c"
u32 RTL8812AE_RADIOB_ARRAY[848U];
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/table.h"
#line 1905  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/table.c"
u32 RTL8821AE_RADIOA_1TARRAYLEN;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/table.h"
#line 1313  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/table.c"
u32 RTL8821AE_RADIOA_ARRAY[1176U];
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/table.h"
#line 2119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/table.c"
u32 RTL8821AE_MAC_1T_ARRAYLEN;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/table.h"
#line 2019  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/table.c"
u32 RTL8821AE_MAC_REG_ARRAY[194U];
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/table.h"
#line 2017  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/table.c"
u32 RTL8812AE_MAC_1T_ARRAYLEN;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/table.h"
#line 1907  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/table.c"
u32 RTL8812AE_MAC_REG_ARRAY[216U];
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/table.h"
#line 2651  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/table.c"
u32 RTL8821AE_AGC_TAB_1TARRAYLEN;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/table.h"
#line 2457  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/table.c"
u32 RTL8821AE_AGC_TAB_ARRAY[382U];
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/table.h"
#line 2455  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/table.c"
u32 RTL8812AE_AGC_TAB_1TARRAYLEN;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/table.h"
#line 2121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/table.c"
u32 RTL8812AE_AGC_TAB_ARRAY[668U];
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/table.h"
#line 3224  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/table.c"
u32 RTL8812AE_TXPWR_LMT_ARRAY_LEN;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/table.h"
#line 2657  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/table.c"
u8 *RTL8812AE_TXPWR_LMT[3948U];
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/table.h"
#line 3793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/table.c"
u32 RTL8821AE_TXPWR_LMT_ARRAY_LEN;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/table.h"
#line 3226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/table.c"
u8 *RTL8821AE_TXPWR_LMT[3948U];
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/efuse.h"
#line 81 
void efuse_shadow_read(struct ieee80211_hw *, u8, u16, u32 *);
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
#line 191 
static u32 _rtl8821ae_phy_rf_serial_read(struct ieee80211_hw *hw, enum radio_path rfpath, u32 offset);
#line 27 
#line 251 
static void _rtl8821ae_phy_rf_serial_write(struct ieee80211_hw *hw, enum radio_path rfpath, u32 offset, u32 data);
#line 30 
#line 275 
static u32 _rtl8821ae_phy_calculate_bit_shift(u32 bitmask);
#line 31 
#line 1800 
static bool _rtl8821ae_phy_bb8821a_config_parafile(struct ieee80211_hw *hw);
#line 33 
#line 1899 
static bool _rtl8821ae_phy_config_mac_with_headerfile(struct ieee80211_hw *hw);
#line 34 
#line 1921 
static bool _rtl8821ae_phy_config_bb_with_headerfile(struct ieee80211_hw *hw, u8 configtype);
#line 36 
#line 1999 
static bool _rtl8821ae_phy_config_bb_with_pgheaderfile(struct ieee80211_hw *hw, u8 configtype);
#line 38 
#line 2166 
static void phy_init_bb_rf_register_definition(struct ieee80211_hw *hw);
#line 40 
#line 3279 
static long _rtl8821ae_phy_txpwr_idx_to_dbm(struct ieee80211_hw *hw, enum wireless_mode wirelessmode, u8 txpwridx);
#line 43 
#line 4703 
static void rtl8821ae_phy_set_rf_on(struct ieee80211_hw *hw);
#line 44 
#line 4666 
static void rtl8821ae_phy_set_io(struct ieee80211_hw *hw);
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
static void rtl8812ae_fixspur(struct ieee80211_hw *hw, enum ht_channel_width band_width, u8 channel)
{
  #line 49 
  struct rtl_hal *rtlhal = & ((struct rtl_priv *)hw->priv)->rtlhal;
  #line 52 
  if (((unsigned long)rtlhal->version & 7UL) == 4UL && ((unsigned long)rtlhal->version & 61440UL) == 8192UL) {
    #line 53 
    if (band_width == (unsigned int)HT_CHANNEL_WIDTH_20_40 && (unsigned int)channel == 11U) 
      #line 54 
      rtl_set_bbreg(hw,2220U,3072U,3U); else 
                                             #line 57 
                                             rtl_set_bbreg(hw,2220U,3072U,2U);
    #line 63 
    if (band_width == (unsigned int)HT_CHANNEL_WIDTH_20 && (unsigned int)channel + 243U <= 1U) {
      #line 65 
      rtl_set_bbreg(hw,2220U,768U,3U);
      #line 67 
      rtl_set_bbreg(hw,2244U,1073741824U,1U);
    }
    else 
      #line 69 
      if (band_width == (unsigned int)HT_CHANNEL_WIDTH_20_40 && (unsigned int)channel == 11U) 
        #line 71 
        rtl_set_bbreg(hw,2244U,1073741824U,1U);
      else 
        #line 73 
        if (band_width != (unsigned int)HT_CHANNEL_WIDTH_80) {
          #line 74 
          rtl_set_bbreg(hw,2220U,768U,2U);
          #line 76 
          rtl_set_bbreg(hw,2244U,1073741824U,0U);
        }
  }
  else 
    #line 79 
    if ((unsigned int)rtlhal->hw_type == 14U) 
      #line 83 
      if (band_width == (unsigned int)HT_CHANNEL_WIDTH_20 && (unsigned int)channel + 243U <= 1U) 
        #line 85 
        rtl_set_bbreg(hw,2220U,768U,3U);
      else 
        #line 87 
        if ((unsigned int)channel <= 14U) 
                                          #line 88 
                                          rtl_set_bbreg(hw,2220U,768U,2U);
  #line 89 
  return;
}

#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
u32 rtl8821ae_phy_query_bb_reg(struct ieee80211_hw *hw, u32 regaddr, u32 bitmask)
{
  #line 97 
  u32 returnvalue;
  #line 97 
  u32 originalvalue;
  #line 97 
  u32 bitshift;
  #line 96 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 99 
  _rtl_dbg_trace(rtlpriv,1048576ULL,5,(char *)"regaddr(%#x), bitmask(%#x)\n",regaddr,bitmask);
  #line 102 
  originalvalue = rtl_read_dword(rtlpriv,regaddr);
  #line 103 
  bitshift = _rtl8821ae_phy_calculate_bit_shift(bitmask);
  #line 104 
  returnvalue = (originalvalue & bitmask) >> bitshift;
  #line 106 
  _rtl_dbg_trace(rtlpriv,1048576ULL,5,(char *)"BBR MASK=0x%x Addr[0x%x]=0x%x\n",bitmask,regaddr,originalvalue);
  #line 109 
  return returnvalue;
}

#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
void rtl8821ae_phy_set_bb_reg(struct ieee80211_hw *hw, u32 regaddr, u32 bitmask, u32 data)
{
  #line 116 
  u32 originalvalue;
  #line 116 
  u32 bitshift;
  #line 115 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 118 
  _rtl_dbg_trace(rtlpriv,1048576ULL,5,(char *)"regaddr(%#x), bitmask(%#x), data(%#x)\n",regaddr,bitmask,data);
  #line 122 
  if (bitmask != 4294967295U) {
    #line 123 
    originalvalue = rtl_read_dword(rtlpriv,regaddr);
    #line 124 
    bitshift = _rtl8821ae_phy_calculate_bit_shift(bitmask);
    #line 125 
    data = (~ bitmask & originalvalue) | ((data << bitshift) & bitmask);
  }
  #line 129 
  rtl_write_dword(rtlpriv,regaddr,data);
  #line 131 
  _rtl_dbg_trace(rtlpriv,1048576ULL,5,(char *)"regaddr(%#x), bitmask(%#x), data(%#x)\n",regaddr,bitmask,data);
  #line 132 
  return;
}

#line 136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
u32 rtl8821ae_phy_query_rf_reg(struct ieee80211_hw *hw, enum radio_path rfpath, u32 regaddr, u32 bitmask)
{
  #line 141 
  u32 original_value;
  #line 141 
  u32 readback_value;
  #line 141 
  u32 bitshift;
  #line 140 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 143 
  _rtl_dbg_trace(rtlpriv,1048576ULL,5,(char *)"regaddr(%#x), rfpath(%#x), bitmask(%#x)\n",regaddr,(unsigned int)rfpath,bitmask);
  #line 147 
  cif_spin_lock_rf_lock_of_rtl_locks(& rtlpriv->locks.rf_lock);
  #line 149 
  original_value = _rtl8821ae_phy_rf_serial_read(hw,rfpath,regaddr);
  #line 150 
  bitshift = _rtl8821ae_phy_calculate_bit_shift(bitmask);
  #line 151 
  readback_value = (original_value & bitmask) >> bitshift;
  #line 153 
  cif_spin_unlock_rf_lock_of_rtl_locks(& rtlpriv->locks.rf_lock);
  #line 155 
  _rtl_dbg_trace(rtlpriv,1048576ULL,5,(char *)"regaddr(%#x), rfpath(%#x), bitmask(%#x), original_value(%#x)\n",regaddr,(unsigned int)rfpath,bitmask,original_value);
  #line 159 
  return readback_value;
}

#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
void rtl8821ae_phy_set_rf_reg(struct ieee80211_hw *hw, enum radio_path rfpath, u32 regaddr, u32 bitmask, u32 data)
{
  #line 167 
  u32 original_value;
  #line 167 
  u32 bitshift;
  #line 166 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 169 
  _rtl_dbg_trace(rtlpriv,1048576ULL,5,(char *)"regaddr(%#x), bitmask(%#x), data(%#x), rfpath(%#x)\n",regaddr,bitmask,data,(unsigned int)rfpath);
  #line 173 
  cif_spin_lock_rf_lock_of_rtl_locks(& rtlpriv->locks.rf_lock);
  #line 175 
  if (bitmask != 1048575U) {
    #line 176 
    original_value = _rtl8821ae_phy_rf_serial_read(hw,rfpath,regaddr);
    #line 178 
    bitshift = _rtl8821ae_phy_calculate_bit_shift(bitmask);
    #line 179 
    data = (~ bitmask & original_value) | (data << bitshift);
  }
  #line 182 
  _rtl8821ae_phy_rf_serial_write(hw,rfpath,regaddr,data);
  #line 184 
  cif_spin_unlock_rf_lock_of_rtl_locks(& rtlpriv->locks.rf_lock);
  #line 186 
  _rtl_dbg_trace(rtlpriv,1048576ULL,5,(char *)"regaddr(%#x), bitmask(%#x), data(%#x), rfpath(%#x)\n",regaddr,bitmask,data,(unsigned int)rfpath);
  #line 187 
  return;
}

#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
static u32 _rtl8821ae_phy_rf_serial_read(struct ieee80211_hw *hw, enum radio_path rfpath, u32 offset)
{
  #line 194 
  struct rtl_hal *rtlhal = & ((struct rtl_priv *)hw->priv)->rtlhal;
  #line 195 
  bool is_pi_mode = (_Bool)0;
  #line 196 
  u32 retvalue = 0U;
  #line 207 
  if (((unsigned int)rtlhal->hw_type != 13U && (((unsigned long)rtlhal->version & 7UL) != 4UL || ((unsigned long)rtlhal->version & 61440UL) != 8192UL)) && offset != 0U) 
    #line 210 
    rtl_set_bbreg(hw,2104U,8U,1U);
  #line 211 
  offset &= 255U;
  #line 213 
  if (rfpath == (unsigned int)RF90_PATH_A) {
    #line 214 
    is_pi_mode = (_Bool)(rtl_get_bbreg(hw,3072U,4U) != 0U);
  }
  else 
    #line 215 
    if (rfpath == (unsigned int)RF90_PATH_B) {
      #line 216 
      is_pi_mode = (_Bool)(rtl_get_bbreg(hw,3584U,4U) != 0U);
    }
  #line 218 
  rtl_set_bbreg(hw,2224U,255U,offset);
  #line 220 
  if ((unsigned int)rtlhal->hw_type == 13U || ((unsigned long)rtlhal->version & 7UL) == 4UL && ((unsigned long)rtlhal->version & 61440UL) == 8192UL) 
    #line 222 
    __const_udelay(85900UL);
  #line 224 
  if ((int)is_pi_mode != 0) {
    #line 225 
    if (rfpath == (unsigned int)RF90_PATH_A) 
                                             #line 226 
                                             retvalue = rtl_get_bbreg(hw,3332U,1048575U);
    else 
      #line 228 
      if (rfpath == (unsigned int)RF90_PATH_B) 
                                               #line 229 
                                               retvalue = rtl_get_bbreg(hw,3396U,1048575U);
  }
  else 
    #line 232 
    if (rfpath == (unsigned int)RF90_PATH_A) 
                                             #line 233 
                                             retvalue = rtl_get_bbreg(hw,3336U,1048575U);
    else 
      #line 235 
      if (rfpath == (unsigned int)RF90_PATH_B) 
                                               #line 236 
                                               retvalue = rtl_get_bbreg(hw,3400U,1048575U);
  #line 244 
  if (((unsigned int)rtlhal->hw_type != 13U && (((unsigned long)rtlhal->version & 7UL) != 4UL || ((unsigned long)rtlhal->version & 61440UL) != 8192UL)) && offset != 0U) 
    #line 247 
    rtl_set_bbreg(hw,2104U,8U,0U);
  #line 248 
  return retvalue;
}

#line 251  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
static void _rtl8821ae_phy_rf_serial_write(struct ieee80211_hw *hw, enum radio_path rfpath, u32 offset, u32 data)
{
  #line 258 
  u32 data_and_addr;
  #line 259 
  u32 newoffset;
  #line 255 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 256 
  struct rtl_phy *rtlphy = & rtlpriv->phy;
  #line 257 
  struct bb_reg_def *pphyreg = & rtlphy->phyreg_def[(unsigned int)rfpath];
  #line 265 
  offset &= 255U;
  #line 266 
  newoffset = offset;
  #line 267 
  data_and_addr = ((newoffset << 20) | (data & 1048575U)) & 268435455U;
  #line 269 
  rtl_set_bbreg(hw,pphyreg->rf3wire_offset,4294967295U,data_and_addr);
  #line 270 
  _rtl_dbg_trace(rtlpriv,1048576ULL,5,(char *)"RFW-%d Addr[0x%x]=0x%x\n",(unsigned int)rfpath,pphyreg->rf3wire_offset,data_and_addr);
  #line 271 
  return;
}

#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
static u32 _rtl8821ae_phy_calculate_bit_shift(u32 bitmask)
{
  #line 277 
  u32 i;
  #line 279 
  i = 0U;
  #line 279 
  while (i <= 31U) {
    #line 280 
    if (((bitmask >> i) & 1U) != 0U) 
                                     #line 281 
                                     break;
    #line 279 
    i ++;
  }
  #line 283 
  return i;
}

#line 286  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
bool rtl8821ae_phy_mac_config(struct ieee80211_hw *hw)
{
  #line 288 
  bool rtstatus = (_Bool)0;
  #line 290 
  rtstatus = _rtl8821ae_phy_config_mac_with_headerfile(hw);
  #line 292 
  return rtstatus;
}

#line 295  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
bool rtl8821ae_phy_bb_config(struct ieee80211_hw *hw)
{
  #line 302 
  u8 regval;
  #line 303 
  u8 crystal_cap;
  #line 297 
  bool rtstatus = (_Bool)1;
  #line 298 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 299 
  struct rtl_efuse *rtlefuse = & ((struct rtl_priv *)hw->priv)->efuse;
  #line 300 
  struct rtl_phy *rtlphy = & rtlpriv->phy;
  #line 301 
  struct rtl_hal *rtlhal = & ((struct rtl_priv *)hw->priv)->rtlhal;
  #line 305 
  phy_init_bb_rf_register_definition(hw);
  #line 307 
  regval = rtl_read_byte(rtlpriv,2U);
  #line 308 
  regval = (unsigned char)((unsigned int)regval | 64U);
  #line 309 
  rtl_write_byte(rtlpriv,2U,(unsigned char)((int)regval));
  #line 310 
  rtl_write_byte(rtlpriv,2U,(unsigned char)((int)((unsigned int)regval | 3U)));
  #line 313 
  rtl_write_byte(rtlpriv,31U,(unsigned char)7);
  #line 314 
  rtl_write_byte(rtlpriv,118U,(unsigned char)7);
  #line 316 
  rtstatus = _rtl8821ae_phy_bb8821a_config_parafile(hw);
  #line 318 
  if ((unsigned int)rtlhal->hw_type == 14U) {
    #line 319 
    crystal_cap = (unsigned char)((unsigned int)rtlefuse->crystalcap & 63U);
    #line 320 
    rtl_set_bbreg(hw,44U,2146959360U,(unsigned int)((int)crystal_cap | ((int)crystal_cap << 6)));
  }
  else {
    #line 323 
    crystal_cap = (unsigned char)((unsigned int)rtlefuse->crystalcap & 63U);
    #line 324 
    rtl_set_bbreg(hw,44U,16773120U,(unsigned int)((int)crystal_cap | ((int)crystal_cap << 6)));
  }
  #line 327 
  rtlphy->reg_837 = rtl_read_byte(rtlpriv,2103U);
  #line 329 
  return rtstatus;
}

#line 332  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
bool rtl8821ae_phy_rf_config(struct ieee80211_hw *hw)
{
  #line 334 
  return rtl8821ae_phy_rf6052_config(hw);
}

#line 337  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
static void _rtl8812ae_phy_set_rfe_reg_24g(struct ieee80211_hw *hw)
{
  #line 341 
  u8 tmp;
  #line 339 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 340 
  struct rtl_hal *rtlhal = & ((struct rtl_priv *)hw->priv)->rtlhal;
  #line 343 
  switch ((int)rtlhal->rfe_type) {
    #line 344 
    case 3: 
            #line 344 
    ;
    #line 345 
    rtl_set_bbreg(hw,3248U,4294967295U,1412659056U);
    #line 346 
    rtl_set_bbreg(hw,3760U,4294967295U,1412659056U);
    #line 347 
    rtl_set_bbreg(hw,3252U,1072693248U,16U);
    #line 348 
    rtl_set_bbreg(hw,3764U,1072693248U,16U);
    #line 349 
    rtl_set_bbreg(hw,2304U,771U,1U);
    #line 350 
    break;
    #line 351 
    case 4: 
            #line 351 
    ;
    #line 352 
    rtl_set_bbreg(hw,3248U,4294967295U,2004318071U);
    #line 353 
    rtl_set_bbreg(hw,3760U,4294967295U,2004318071U);
    #line 354 
    rtl_set_bbreg(hw,3252U,1072693248U,1U);
    #line 355 
    rtl_set_bbreg(hw,3764U,1072693248U,1U);
    #line 356 
    break;
    #line 357 
    case 5: 
            #line 357 
    ;
    #line 358 
    rtl_write_byte(rtlpriv,3250U,(unsigned char)119);
    #line 359 
    rtl_set_bbreg(hw,3760U,4294967295U,2004318071U);
    #line 360 
    tmp = rtl_read_byte(rtlpriv,3255U);
    #line 361 
    rtl_write_byte(rtlpriv,3255U,(unsigned char)((int)tmp & 254));
    #line 362 
    rtl_set_bbreg(hw,3764U,1072693248U,0U);
    #line 363 
    break;
    #line 364 
    case 1: 
            #line 364 
    ;
    #line 365 
    if ((unsigned int)rtlpriv->btcoexist.bt_coexistence != 0U) {
      #line 366 
      rtl_set_bbreg(hw,3248U,16777215U,7829367U);
      #line 367 
      rtl_set_bbreg(hw,3760U,4294967295U,2004318071U);
      #line 369 
      rtl_set_bbreg(hw,3252U,871366656U,0U);
      #line 370 
      rtl_set_bbreg(hw,3764U,1072693248U,0U);
      #line 371 
      break;
    }
    #line 374 
    case 0: 
            #line 374 
    ;
    #line 375 
    case 2: 
            #line 375 
    ;
    #line 376 
    default: 
             #line 376 
    ;
    #line 377 
    rtl_set_bbreg(hw,3248U,4294967295U,2004318071U);
    #line 378 
    rtl_set_bbreg(hw,3760U,4294967295U,2004318071U);
    #line 379 
    rtl_set_bbreg(hw,3252U,1072693248U,0U);
    #line 380 
    rtl_set_bbreg(hw,3764U,1072693248U,0U);
    #line 381 
    break;
  }
  #line 383 
  return;
}

#line 385  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
static void _rtl8812ae_phy_set_rfe_reg_5g(struct ieee80211_hw *hw)
{
  #line 389 
  u8 tmp;
  #line 387 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 388 
  struct rtl_hal *rtlhal = & ((struct rtl_priv *)hw->priv)->rtlhal;
  #line 391 
  switch ((int)rtlhal->rfe_type) {
    #line 392 
    case 0: 
            #line 392 
    ;
    #line 393 
    rtl_set_bbreg(hw,3248U,4294967295U,1999861527U);
    #line 394 
    rtl_set_bbreg(hw,3760U,4294967295U,1999861527U);
    #line 395 
    rtl_set_bbreg(hw,3252U,1072693248U,16U);
    #line 396 
    rtl_set_bbreg(hw,3764U,1072693248U,16U);
    #line 397 
    break;
    #line 398 
    case 1: 
            #line 398 
    ;
    #line 399 
    if ((unsigned int)rtlpriv->btcoexist.bt_coexistence != 0U) {
      #line 400 
      rtl_set_bbreg(hw,3248U,16777215U,3372823U);
      #line 401 
      rtl_set_bbreg(hw,3760U,4294967295U,1999861527U);
      #line 403 
      rtl_set_bbreg(hw,3252U,871366656U,0U);
      #line 404 
      rtl_set_bbreg(hw,3764U,1072693248U,0U);
    }
    else {
      #line 406 
      rtl_set_bbreg(hw,3248U,4294967295U,1999861527U);
      #line 408 
      rtl_set_bbreg(hw,3760U,4294967295U,1999861527U);
      #line 410 
      rtl_set_bbreg(hw,3252U,1072693248U,0U);
      #line 411 
      rtl_set_bbreg(hw,3764U,1072693248U,0U);
    }
    #line 413 
    break;
    #line 414 
    case 3: 
            #line 414 
    ;
    #line 415 
    rtl_set_bbreg(hw,3248U,4294967295U,1412658967U);
    #line 416 
    rtl_set_bbreg(hw,3760U,4294967295U,1412658967U);
    #line 417 
    rtl_set_bbreg(hw,3252U,1072693248U,16U);
    #line 418 
    rtl_set_bbreg(hw,3764U,1072693248U,16U);
    #line 419 
    rtl_set_bbreg(hw,2304U,771U,1U);
    #line 420 
    break;
    #line 421 
    case 5: 
            #line 421 
    ;
    #line 422 
    rtl_write_byte(rtlpriv,3250U,(unsigned char)51);
    #line 423 
    rtl_set_bbreg(hw,3760U,4294967295U,1999861623U);
    #line 424 
    tmp = rtl_read_byte(rtlpriv,3255U);
    #line 425 
    rtl_write_byte(rtlpriv,3255U,(unsigned char)((int)((unsigned int)tmp | 1U)));
    #line 426 
    rtl_set_bbreg(hw,3764U,1072693248U,16U);
    #line 427 
    break;
    #line 428 
    case 2: 
            #line 428 
    ;
    #line 429 
    case 4: 
            #line 429 
    ;
    #line 430 
    default: 
             #line 430 
    ;
    #line 431 
    rtl_set_bbreg(hw,3248U,4294967295U,1999861623U);
    #line 432 
    rtl_set_bbreg(hw,3760U,4294967295U,1999861623U);
    #line 433 
    rtl_set_bbreg(hw,3252U,1072693248U,16U);
    #line 434 
    rtl_set_bbreg(hw,3764U,1072693248U,16U);
    #line 435 
    break;
  }
  #line 437 
  return;
}

#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
u32 phy_get_tx_swing_8812A(struct ieee80211_hw *hw, u8 band, u8 rf_path)
{
  #line 442 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 443 
  struct rtl_hal *rtlhal = & ((struct rtl_priv *)hw->priv)->rtlhal;
  #line 444 
  struct rtl_dm *rtldm = & rtlpriv->dm;
  #line 445 
  struct rtl_efuse *rtlefuse = & ((struct rtl_priv *)hw->priv)->efuse;
  #line 446 
  s8 reg_swing_2g = (signed char)(-1);
  #line 447 
  s8 reg_swing_5g = (signed char)(-1);
  #line 448 
  s8 swing_2g = (signed char)(- ((int)reg_swing_2g));
  #line 449 
  s8 swing_5g = (signed char)(- ((int)reg_swing_5g));
  #line 450 
  u32 out = 512U;
  #line 451 
  s8 auto_temp = (signed char)(-1);
  #line 453 
  _rtl_dbg_trace(rtlpriv,64ULL,4,(char *)"===> PHY_GetTXBBSwing_8812A, bbSwing_2G: %d, bbSwing_5G: %d,autoload_failflag=%d.\n",(int)swing_2g,(int)swing_5g,(int)rtlefuse->autoload_failflag);
  #line 458 
  if ((unsigned int)rtlefuse->autoload_failflag != 0U) 
    #line 459 
    if ((unsigned int)band == 0U) {
      #line 460 
      rtldm->swing_diff_2g = swing_2g;
      #line 461 
      if ((int)swing_2g == 0) 
                              #line 462 
                              out = 512U;
      else 
        #line 463 
        if ((int)swing_2g == -3) 
                                 #line 464 
                                 out = 362U;
        else 
          #line 465 
          if ((int)swing_2g == -6) 
                                   #line 466 
                                   out = 257U;
          else 
            #line 467 
            if ((int)swing_2g == -9) 
                                     #line 468 
                                     out = 182U;
            else {
              #line 470 
              rtldm->swing_diff_2g = (signed char)0;
              #line 471 
              out = 512U;
            }
    }
    else 
      #line 473 
      if ((unsigned int)band == 1U) {
        #line 474 
        rtldm->swing_diff_5g = swing_5g;
        #line 475 
        if ((int)swing_5g == 0) 
                                #line 476 
                                out = 512U;
        else 
          #line 477 
          if ((int)swing_5g == -3) 
                                   #line 478 
                                   out = 362U;
          else 
            #line 479 
            if ((int)swing_5g == -6) 
                                     #line 480 
                                     out = 257U;
            else 
              #line 481 
              if ((int)swing_5g == -9) 
                                       #line 482 
                                       out = 182U;
              else 
                #line 484 
                if ((unsigned int)rtlhal->hw_type == 13U) {
                  #line 485 
                  rtldm->swing_diff_5g = (signed char)(-3);
                  #line 486 
                  out = 362U;
                }
                else {
                  #line 488 
                  rtldm->swing_diff_5g = (signed char)0;
                  #line 489 
                  out = 512U;
                }
      }
      else {
        #line 493 
        rtldm->swing_diff_2g = (signed char)(-3);
        #line 494 
        rtldm->swing_diff_5g = (signed char)(-3);
        #line 495 
        out = 362U;
      }
  else {
    #line 498 
    u32 swing = 0U;
    #line 498 
    u32 swing_a = 0U;
    #line 498 
    u32 swing_b = 0U;
    #line 500 
    if ((unsigned int)band == 0U) 
      #line 501 
      if ((int)reg_swing_2g == -1) {
        #line 502 
        efuse_shadow_read(hw,(unsigned char)1,(unsigned short)198,& swing);
        #line 503 
        if (swing != 255U) 
                           #line 503 
                           swing = swing; else 
                                               #line 503 
                                               swing = 0U;
      }
      else 
        #line 504 
        if ((int)swing_2g == 0) 
                                #line 505 
                                swing = 0U;
        else 
          #line 506 
          if ((int)swing_2g == -3) 
                                   #line 507 
                                   swing = 5U;
          else 
            #line 508 
            if ((int)swing_2g == -6) 
                                     #line 509 
                                     swing = 10U;
            else 
              #line 510 
              if ((int)swing_2g == -9) 
                                       #line 511 
                                       swing = 255U; else 
                                                          #line 513 
                                                          swing = 0U;
    else 
      #line 516 
      if ((int)reg_swing_5g == -1) {
        #line 517 
        efuse_shadow_read(hw,(unsigned char)1,(unsigned short)199,& swing);
        #line 518 
        if (swing != 255U) 
                           #line 518 
                           swing = swing; else 
                                               #line 518 
                                               swing = 0U;
      }
      else 
        #line 519 
        if ((int)swing_5g == 0) 
                                #line 520 
                                swing = 0U;
        else 
          #line 521 
          if ((int)swing_5g == -3) 
                                   #line 522 
                                   swing = 5U;
          else 
            #line 523 
            if ((int)swing_5g == -6) 
                                     #line 524 
                                     swing = 10U;
            else 
              #line 525 
              if ((int)swing_5g == -9) 
                                       #line 526 
                                       swing = 255U; else 
                                                          #line 528 
                                                          swing = 0U;
    #line 532 
    swing_a = swing & 3U;
    #line 533 
    swing_b = (swing >> 2) & 3U;
    #line 534 
    _rtl_dbg_trace(rtlpriv,64ULL,4,(char *)"===> PHY_GetTXBBSwing_8812A, swingA: 0x%X, swingB: 0x%X\n",swing_a,swing_b);
    #line 539 
    if (swing_a == 0U) {
      #line 540 
      if ((unsigned int)band == 0U) 
                                    #line 541 
                                    rtldm->swing_diff_2g = (signed char)0; else 
                                                                    #line 543 
                                                                    rtldm->swing_diff_5g = (signed char)0;
      #line 544 
      out = 512U;
    }
    else 
      #line 545 
      if (swing_a == 1U) {
        #line 546 
        if ((unsigned int)band == 0U) 
                                      #line 547 
                                      rtldm->swing_diff_2g = (signed char)(-3); else 
                                                                    #line 549 
                                                                    rtldm->swing_diff_5g = (signed char)(-3);
        #line 550 
        out = 362U;
      }
      else 
        #line 551 
        if (swing_a == 2U) {
          #line 552 
          if ((unsigned int)band == 0U) 
                                        #line 553 
                                        rtldm->swing_diff_2g = (signed char)(-6); else 
                                                                    #line 555 
                                                                    rtldm->swing_diff_5g = (signed char)(-6);
          #line 556 
          out = 257U;
        }
        else 
          #line 557 
          if (swing_a == 3U) {
            #line 558 
            if ((unsigned int)band == 0U) 
                                          #line 559 
                                          rtldm->swing_diff_2g = (signed char)(-9); else 
                                                                    #line 561 
                                                                    rtldm->swing_diff_5g = (signed char)(-9);
            #line 562 
            out = 182U;
          }
    #line 565 
    if (swing_b == 0U) {
      #line 566 
      if ((unsigned int)band == 0U) 
                                    #line 567 
                                    rtldm->swing_diff_2g = (signed char)0; else 
                                                                    #line 569 
                                                                    rtldm->swing_diff_5g = (signed char)0;
      #line 570 
      out = 512U;
    }
    else 
      #line 571 
      if (swing_b == 1U) {
        #line 572 
        if ((unsigned int)band == 0U) 
                                      #line 573 
                                      rtldm->swing_diff_2g = (signed char)(-3); else 
                                                                    #line 575 
                                                                    rtldm->swing_diff_5g = (signed char)(-3);
        #line 576 
        out = 362U;
      }
      else 
        #line 577 
        if (swing_b == 2U) {
          #line 578 
          if ((unsigned int)band == 0U) 
                                        #line 579 
                                        rtldm->swing_diff_2g = (signed char)(-6); else 
                                                                    #line 581 
                                                                    rtldm->swing_diff_5g = (signed char)(-6);
          #line 582 
          out = 257U;
        }
        else 
          #line 583 
          if (swing_b == 3U) {
            #line 584 
            if ((unsigned int)band == 0U) 
                                          #line 585 
                                          rtldm->swing_diff_2g = (signed char)(-9); else 
                                                                    #line 587 
                                                                    rtldm->swing_diff_5g = (signed char)(-9);
            #line 588 
            out = 182U;
          }
  }
  #line 592 
  _rtl_dbg_trace(rtlpriv,64ULL,4,(char *)"<=== PHY_GetTXBBSwing_8812A, out = 0x%X\n",out);
  #line 594 
  return out;
}

#line 597  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
void rtl8821ae_phy_switch_wirelessband(struct ieee80211_hw *hw, u8 band)
{
  #line 603 
  u32 txpath;
  #line 603 
  u32 rxpath;
  #line 604 
  s8 bb_diff_between_band;
  #line 599 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 600 
  struct rtl_hal *rtlhal = & ((struct rtl_priv *)hw->priv)->rtlhal;
  #line 601 
  struct rtl_dm *rtldm = & rtlpriv->dm;
  #line 602 
  u8 current_band = (unsigned char)rtlhal->current_bandtype;
  #line 606 
  txpath = rtl8821ae_phy_query_bb_reg(hw,2060U,240U);
  #line 607 
  rxpath = rtl8821ae_phy_query_bb_reg(hw,2564U,251658240U);
  #line 608 
  rtlhal->current_bandtype = (enum band_type)band;
  #line 610 
  if (rtlhal->current_bandtype == (unsigned int)BAND_ON_2_4G) {
    #line 612 
    rtl_set_bbreg(hw,2056U,805306368U,3U);
    #line 614 
    if ((unsigned int)rtlhal->hw_type == 13U) {
      #line 616 
      rtl_set_bbreg(hw,3248U,61440U,7U);
      #line 618 
      rtl_set_bbreg(hw,3248U,240U,7U);
    }
    #line 621 
    if ((unsigned int)rtlhal->hw_type == 14U) 
                                              #line 623 
                                              rtl_set_bbreg(hw,2100U,3U,1U);
    #line 626 
    if ((unsigned int)rtlhal->hw_type == 13U) 
                                              #line 628 
                                              rtl_set_bbreg(hw,3100U,3840U,0U); else 
                                                                    #line 631 
                                                                    rtl_set_bbreg(hw,2092U,3U,0U);
    #line 634 
    if ((unsigned int)rtlhal->hw_type == 14U) 
                                              #line 635 
                                              _rtl8812ae_phy_set_rfe_reg_24g(hw);
    #line 637 
    rtl_set_bbreg(hw,2060U,240U,1U);
    #line 638 
    rtl_set_bbreg(hw,2564U,251658240U,1U);
    #line 640 
    rtl_write_byte(rtlpriv,1108U,(unsigned char)0);
  }
  else {
    #line 642 
    u16 count;
    #line 642 
    u16 reg_41a;
    #line 644 
    if ((unsigned int)rtlhal->hw_type == 13U) {
      #line 646 
      rtl_set_bbreg(hw,3248U,61440U,5U);
      #line 648 
      rtl_set_bbreg(hw,3248U,240U,4U);
    }
    #line 651 
    rtl_write_byte(rtlpriv,1108U,(unsigned char)128);
    #line 653 
    count = (unsigned short)0U;
    #line 654 
    reg_41a = rtl_read_word(rtlpriv,1050U);
    #line 655 
    _rtl_dbg_trace(rtlpriv,64ULL,4,(char *)"Reg41A value %d\n",(int)reg_41a);
    #line 657 
    reg_41a = (unsigned short)((unsigned int)reg_41a & 48U);
    #line 658 
    while ((unsigned int)reg_41a != 48U && (unsigned int)count <= 49U) {
      #line 659 
      __const_udelay(214750UL);
      #line 660 
      _rtl_dbg_trace(rtlpriv,64ULL,4,(char *)"Delay 50us\n");
      #line 662 
      reg_41a = rtl_read_word(rtlpriv,1050U);
      #line 663 
      reg_41a = (unsigned short)((unsigned int)reg_41a & 48U);
      #line 664 
      count = (u16)((int)count + 1);
      #line 665 
      _rtl_dbg_trace(rtlpriv,64ULL,4,(char *)"Reg41A value %d\n",(int)reg_41a);
    }
    #line 668 
    if ((unsigned int)count != 0U) 
                                   #line 669 
                                   _rtl_dbg_trace(rtlpriv,32ULL,4,(char *)"PHY_SwitchWirelessBand8812(): Switch to 5G Band. Count = %d reg41A=0x%x\n",(int)count,(int)reg_41a);
    #line 675 
    rtl_set_bbreg(hw,2056U,805306368U,3U);
    #line 677 
    if ((unsigned int)rtlhal->hw_type == 14U) 
                                              #line 679 
                                              rtl_set_bbreg(hw,2100U,3U,2U);
    #line 682 
    if ((unsigned int)rtlhal->hw_type == 13U) 
                                              #line 685 
                                              rtl_set_bbreg(hw,3100U,3840U,1U); else 
                                                                    #line 688 
                                                                    rtl_set_bbreg(hw,2092U,3U,1U);
    #line 690 
    if ((unsigned int)rtlhal->hw_type == 14U) 
                                              #line 691 
                                              _rtl8812ae_phy_set_rfe_reg_5g(hw);
    #line 693 
    rtl_set_bbreg(hw,2060U,240U,0U);
    #line 694 
    rtl_set_bbreg(hw,2564U,251658240U,15U);
    #line 696 
    _rtl_dbg_trace(rtlpriv,64ULL,4,(char *)"==>PHY_SwitchWirelessBand8812() BAND_ON_5G settings OFDM index 0x%x\n",(int)rtlpriv->dm.ofdm_index[0]);
  }
  #line 701 
  if ((unsigned int)rtlhal->hw_type + 65523U <= 1U) {
    #line 704 
    ;
    #line 704 
    rtl_set_bbreg(hw,3100U,4292870144U,phy_get_tx_swing_8812A(hw,(unsigned char)((int)band),(unsigned char)0));
    #line 707 
    ;
    #line 707 
    rtl_set_bbreg(hw,3612U,4292870144U,phy_get_tx_swing_8812A(hw,(unsigned char)((int)band),
                               (unsigned char)1));
    #line 714 
    if ((int)band != (int)current_band) {
      #line 715 
      bb_diff_between_band = (signed char)((int)rtldm->swing_diff_2g - (int)rtldm->swing_diff_5g);
      #line 717 
      if ((unsigned int)band != 0U) 
                                    #line 717 
                                    bb_diff_between_band = (signed char)(- ((int)bb_diff_between_band)); else 
                                                                    #line 717 
                                                                    bb_diff_between_band = bb_diff_between_band;
      #line 720 
      rtldm->default_ofdm_index = (unsigned char)((unsigned int)rtldm->default_ofdm_index + (unsigned int)((unsigned char)bb_diff_between_band) * 2U);
    }
    #line 722 
    rtl8821ae_dm_clear_txpower_tracking_state(hw);
  }
  #line 725 
  _rtl_dbg_trace(rtlpriv,64ULL,5,(char *)"<==rtl8821ae_phy_switch_wirelessband():Switch Band OK.\n");
  #line 727 
  return;
}

#line 730  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
static bool _rtl8821ae_check_positive(struct ieee80211_hw *hw, u32 condition1, u32 condition2)
{
  #line 738 
  unsigned int tmp;
  #line 734 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 735 
  struct rtl_hal *rtlhal = & rtlpriv->rtlhal;
  #line 736 
  u32 cut_ver = (rtlhal->version >> 12) & 15U;
  #line 738 
  if (rtlhal->interface == (unsigned int)INTF_USB) 
                                                   #line 738 
                                                   tmp = 2U; else 
                                                                  #line 738 
                                                                  tmp = 1U;
  #line 738 
  u32 intf = tmp;
  #line 740 
  u8 board_type = (unsigned char)((((((unsigned int)((unsigned char)((unsigned long)rtlhal->board_type >> 4)) & 1U) | ((unsigned int)((int)((unsigned char)((unsigned long)rtlhal->board_type >> 3)) << 1U) & 2U)) | (unsigned int)(((int)rtlhal->board_type >> 7) << 2U)) | ((unsigned int)((int)((unsigned char)((unsigned long)rtlhal->board_type >> 6)) << 3U) & 8U)) | ((unsigned int)((int)((unsigned char)((unsigned long)rtlhal->board_type >> 2)) << 4U) & 16U));
  #line 746 
  u32 cond1 = condition1;
  #line 746 
  u32 cond2 = condition2;
  #line 747 
  u32 driver1 = ((((cut_ver << 24) | (unsigned int)((int)rtlhal->package_type << 12)) | (intf << 8)) | (unsigned int)board_type) | 262144U;
  #line 754 
  u32 driver2 = (unsigned int)((((int)rtlhal->type_glna | ((int)rtlhal->type_gpa << 8)) | ((int)rtlhal->type_alna << 16)) | ((int)rtlhal->type_apa << 24));
  #line 759 
  _rtl_dbg_trace(rtlpriv,4ULL,5,(char *)"===> [8812A] CheckPositive (cond1, cond2) = (0x%X 0x%X)\n",cond1,cond2);
  #line 762 
  _rtl_dbg_trace(rtlpriv,4ULL,5,(char *)"===> [8812A] CheckPositive (driver1, driver2) = (0x%X 0x%X)\n",driver1,driver2);
  #line 766 
  _rtl_dbg_trace(rtlpriv,4ULL,5,(char *)"\t(Platform, Interface) = (0x%X, 0x%X)\n",4,intf);
  #line 768 
  _rtl_dbg_trace(rtlpriv,4ULL,5,(char *)"\t(Board, Package) = (0x%X, 0x%X)\n",(int)rtlhal->board_type,(int)rtlhal->package_type);
  #line 775 
  if ((cond1 & 61440U) != 0U && ((cond1 ^ driver1) & 61440U) != 0U) 
                                                                    #line 777 
                                                                    return (_Bool)0;
  #line 778 
  if ((cond1 & 251658240U) != 0U && ((cond1 ^ driver1) & 251658240U) != 0U) 
    #line 780 
    return (_Bool)0;
  #line 785 
  cond1 &= 16715775U;
  #line 786 
  driver1 &= 16715775U;
  #line 788 
  if ((cond1 & driver1) == cond1) {
    #line 789 
    u32 mask = 0U;
    #line 791 
    if ((cond1 & 15U) == 0U) 
                             #line 792 
                             return (_Bool)1;
    #line 794 
    if (((unsigned long)cond1 & 1UL) != 0UL) 
                                             #line 795 
                                             mask |= 255U;
    #line 796 
    if (((unsigned long)cond1 & 2UL) != 0UL) 
                                             #line 797 
                                             mask |= 65280U;
    #line 798 
    if (((unsigned long)cond1 & 4UL) != 0UL) 
                                             #line 799 
                                             mask |= 16711680U;
    #line 800 
    if (((unsigned long)cond1 & 8UL) != 0UL) 
                                             #line 801 
                                             mask |= 4278190080U;
    #line 804 
    if (((cond2 ^ driver2) & mask) == 0U) 
                                          #line 805 
                                          return (_Bool)1; else 
                                                                #line 807 
                                                                return (_Bool)0;
  }
  else 
       #line 809 
       return (_Bool)0;
}

#line 812  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
static bool _rtl8821ae_check_condition(struct ieee80211_hw *hw, u32 condition)
{
  #line 815 
  struct rtl_efuse *rtlefuse = & ((struct rtl_priv *)hw->priv)->efuse;
  #line 816 
  u32 _board = (unsigned int)rtlefuse->board_type;
  #line 817 
  u32 _interface = 1U;
  #line 818 
  u32 _platform = 8U;
  #line 819 
  u32 cond = condition;
  #line 821 
  if (condition == 3452816845U) 
                                #line 822 
                                return (_Bool)1;
  #line 824 
  cond = condition & 255U;
  #line 825 
  if (_board != cond && cond != 255U) 
                                      #line 826 
                                      return (_Bool)0;
  #line 828 
  cond = condition & 65280U;
  #line 829 
  cond >>= 8;
  #line 830 
  if ((_interface & cond) == 0U && cond != 7U) 
                                               #line 831 
                                               return (_Bool)0;
  #line 833 
  cond = condition & 16711680U;
  #line 834 
  cond >>= 16;
  #line 835 
  if ((_platform & cond) == 0U && cond != 15U) 
                                               #line 836 
                                               return (_Bool)0;
  #line 837 
  return (_Bool)1;
}

#line 840  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
static void _rtl8821ae_config_rf_reg(struct ieee80211_hw *hw, u32 addr, u32 data, enum radio_path rfpath, u32 regaddr)
{
  #line 844 
  if (addr == 254U || addr == 4094U) {
    #line 848 
    unsigned long __ms = 50UL;
    #line 848 
    while (1) {
      #line 848 
      unsigned long tmp;
      #line 848 
      tmp = __ms;
      #line 848 
      __ms --;
      #line 848 
      ;
      #line 848 
      if (! (tmp != 0UL)) 
                          #line 848 
                          break;
      #line 848 
      __const_udelay(4295000UL);
    }
  }
  else {
    #line 850 
    rtl_set_rfreg(hw,rfpath,regaddr,1048575U,data);
    #line 851 
    __const_udelay(4295UL);
  }
  #line 854 
  return;
}

#line 855  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
static void _rtl8821ae_config_rf_radio_a(struct ieee80211_hw *hw, u32 addr, u32 data)
{
  #line 858 
  u32 content = 4096U;
  #line 859 
  u32 maskforphyset = content & 57344U;
  #line 861 
  _rtl8821ae_config_rf_reg(hw,addr,data,(enum radio_path)RF90_PATH_A,addr | maskforphyset);
  #line 863 
  return;
}

#line 865  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
static void _rtl8821ae_config_rf_radio_b(struct ieee80211_hw *hw, u32 addr, u32 data)
{
  #line 868 
  u32 content = 4097U;
  #line 869 
  u32 maskforphyset = content & 57344U;
  #line 871 
  _rtl8821ae_config_rf_reg(hw,addr,data,(enum radio_path)RF90_PATH_B,addr | maskforphyset);
  #line 873 
  return;
}

#line 875  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
static void _rtl8821ae_config_bb_reg(struct ieee80211_hw *hw, u32 addr, u32 data)
{
  #line 878 
  if (addr == 254U) {
    #line 879 
    unsigned long __ms = 50UL;
    #line 879 
    while (1) {
      #line 879 
      unsigned long tmp;
      #line 879 
      tmp = __ms;
      #line 879 
      __ms --;
      #line 879 
      ;
      #line 879 
      if (! (tmp != 0UL)) 
                          #line 879 
                          break;
      #line 879 
      __const_udelay(4295000UL);
    }
  }
  else 
    #line 880 
    if (addr == 253U) 
                      #line 881 
                      __const_udelay(21475000UL);
    else 
      #line 882 
      if (addr == 252U) 
                        #line 883 
                        __const_udelay(4295000UL);
      else 
        #line 884 
        if (addr == 251U) 
                          #line 885 
                          __const_udelay(214750UL);
        else 
          #line 886 
          if (addr == 250U) 
                            #line 887 
                            __const_udelay(21475UL);
          else 
            #line 888 
            if (addr == 249U) 
                              #line 889 
                              __const_udelay(4295UL); else 
                                                           #line 891 
                                                           rtl_set_bbreg(hw,addr,4294967295U,data);
  #line 893 
  __const_udelay(4295UL);
  #line 895 
  return;
}

#line 896  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
static void _rtl8821ae_phy_init_tx_power_by_rate(struct ieee80211_hw *hw)
{
  #line 900 
  u8 band;
  #line 900 
  u8 rfpath;
  #line 900 
  u8 txnum;
  #line 900 
  u8 rate_section;
  #line 898 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 899 
  struct rtl_phy *rtlphy = & rtlpriv->phy;
  #line 902 
  band = (unsigned char)0U;
  #line 902 
  while ((unsigned int)band <= 1U) {
    #line 903 
    rfpath = (unsigned char)0U;
    #line 903 
    while ((unsigned int)rfpath <= 3U) {
      #line 904 
      txnum = (unsigned char)0U;
      #line 904 
      while ((unsigned int)txnum <= 3U) {
        #line 905 
        rate_section = (unsigned char)0U;
        #line 905 
        while ((unsigned int)rate_section <= 11U) {
          #line 909 
          rtlphy->tx_power_by_rate_offset[(int)band][(int)rfpath][(int)txnum][(int)rate_section] = 0U;
          #line 907 
          rate_section = (u8)((int)rate_section + 1);
        }
        #line 904 
        txnum = (u8)((int)txnum + 1);
      }
      #line 903 
      rfpath = (u8)((int)rfpath + 1);
    }
    #line 902 
    band = (u8)((int)band + 1);
  }
  #line 913 
  return;
}

#line 912  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
static void _rtl8821ae_phy_set_txpower_by_rate_base(struct ieee80211_hw *hw, u8 band, u8 path, u8 rate_section, u8 txnum, u8 value)
{
  #line 917 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 918 
  struct rtl_phy *rtlphy = & rtlpriv->phy;
  #line 920 
  if ((unsigned int)path > 3U) {
    #line 921 
    _rtl_dbg_trace(rtlpriv,4ULL,4,(char *)"Invalid Rf Path %d in phy_SetTxPowerByRatBase()\n",(int)path);
    #line 923 
    return;
  }
  #line 926 
  if ((unsigned int)band == 0U) 
    #line 927 
    switch ((int)rate_section) {
      #line 928 
      case 0: 
              #line 928 
      ;
      #line 929 
      rtlphy->txpwr_by_rate_base_24g[(int)path][(int)txnum][0] = value;
      #line 930 
      break;
      #line 931 
      case 1: 
              #line 931 
      ;
      #line 932 
      rtlphy->txpwr_by_rate_base_24g[(int)path][(int)txnum][1] = value;
      #line 933 
      break;
      #line 934 
      case 2: 
              #line 934 
      ;
      #line 935 
      rtlphy->txpwr_by_rate_base_24g[(int)path][(int)txnum][2] = value;
      #line 936 
      break;
      #line 937 
      case 3: 
              #line 937 
      ;
      #line 938 
      rtlphy->txpwr_by_rate_base_24g[(int)path][(int)txnum][3] = value;
      #line 939 
      break;
      #line 940 
      case 4: 
              #line 940 
      ;
      #line 941 
      rtlphy->txpwr_by_rate_base_24g[(int)path][(int)txnum][4] = value;
      #line 942 
      break;
      #line 943 
      case 5: 
              #line 943 
      ;
      #line 944 
      rtlphy->txpwr_by_rate_base_24g[(int)path][(int)txnum][5] = value;
      #line 945 
      break;
      #line 946 
      default: 
               #line 946 
      ;
      #line 947 
      _rtl_dbg_trace(rtlpriv,4ULL,4,(char *)"Invalid RateSection %d in Band 2.4G,Rf Path %d, %dTx in PHY_SetTxPowerByRateBase()\n",(int)rate_section,(int)path,(int)txnum);
      #line 950 
      break;
    }
  else 
    #line 952 
    if ((unsigned int)band == 1U) 
      #line 953 
      switch ((int)rate_section) {
        #line 954 
        case 1: 
                #line 954 
        ;
        #line 955 
        rtlphy->txpwr_by_rate_base_5g[(int)path][(int)txnum][0] = value;
        #line 956 
        break;
        #line 957 
        case 2: 
                #line 957 
        ;
        #line 958 
        rtlphy->txpwr_by_rate_base_5g[(int)path][(int)txnum][1] = value;
        #line 959 
        break;
        #line 960 
        case 3: 
                #line 960 
        ;
        #line 961 
        rtlphy->txpwr_by_rate_base_5g[(int)path][(int)txnum][2] = value;
        #line 962 
        break;
        #line 963 
        case 4: 
                #line 963 
        ;
        #line 964 
        rtlphy->txpwr_by_rate_base_5g[(int)path][(int)txnum][3] = value;
        #line 965 
        break;
        #line 966 
        case 5: 
                #line 966 
        ;
        #line 967 
        rtlphy->txpwr_by_rate_base_5g[(int)path][(int)txnum][4] = value;
        #line 968 
        break;
        #line 969 
        default: 
                 #line 969 
        ;
        #line 970 
        _rtl_dbg_trace(rtlpriv,4ULL,4,(char *)"Invalid RateSection %d in Band 5G, Rf Path %d, %dTx in PHY_SetTxPowerByRateBase()\n",(int)rate_section,(int)path,(int)txnum);
        #line 973 
        break;
      }
    else 
         #line 976 
         _rtl_dbg_trace(rtlpriv,4ULL,4,(char *)"Invalid Band %d in PHY_SetTxPowerByRateBase()\n",(int)band);
  #line 977 
  return;
}

#line 981  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
static u8 _rtl8821ae_phy_get_txpower_by_rate_base(struct ieee80211_hw *hw, u8 band, u8 path, u8 txnum, u8 rate_section)
{
  #line 985 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 986 
  struct rtl_phy *rtlphy = & rtlpriv->phy;
  #line 987 
  u8 value = (unsigned char)0U;
  #line 989 
  if ((unsigned int)path > 3U) {
    #line 990 
    _rtl_dbg_trace(rtlpriv,4ULL,4,(char *)"Invalid Rf Path %d in PHY_GetTxPowerByRateBase()\n",(int)path);
    #line 993 
    return (unsigned char)0U;
  }
  #line 996 
  if ((unsigned int)band == 0U) 
    #line 997 
    switch ((int)rate_section) {
      #line 998 
      case 0: 
              #line 998 
      ;
      #line 999 
      value = rtlphy->txpwr_by_rate_base_24g[(int)path][(int)txnum][0];
      #line 1000 
      break;
      #line 1001 
      case 1: 
              #line 1001 
      ;
      #line 1002 
      value = rtlphy->txpwr_by_rate_base_24g[(int)path][(int)txnum][1];
      #line 1003 
      break;
      #line 1004 
      case 2: 
              #line 1004 
      ;
      #line 1005 
      value = rtlphy->txpwr_by_rate_base_24g[(int)path][(int)txnum][2];
      #line 1006 
      break;
      #line 1007 
      case 3: 
              #line 1007 
      ;
      #line 1008 
      value = rtlphy->txpwr_by_rate_base_24g[(int)path][(int)txnum][3];
      #line 1009 
      break;
      #line 1010 
      case 4: 
              #line 1010 
      ;
      #line 1011 
      value = rtlphy->txpwr_by_rate_base_24g[(int)path][(int)txnum][4];
      #line 1012 
      break;
      #line 1013 
      case 5: 
              #line 1013 
      ;
      #line 1014 
      value = rtlphy->txpwr_by_rate_base_24g[(int)path][(int)txnum][5];
      #line 1015 
      break;
      #line 1016 
      default: 
               #line 1016 
      ;
      #line 1017 
      _rtl_dbg_trace(rtlpriv,4ULL,4,(char *)"Invalid RateSection %d in Band 2.4G, Rf Path %d, %dTx in PHY_GetTxPowerByRateBase()\n",(int)rate_section,(int)path,(int)txnum);
      #line 1020 
      break;
    }
  else 
    #line 1022 
    if ((unsigned int)band == 1U) 
      #line 1023 
      switch ((int)rate_section) {
        #line 1024 
        case 1: 
                #line 1024 
        ;
        #line 1025 
        value = rtlphy->txpwr_by_rate_base_5g[(int)path][(int)txnum][0];
        #line 1026 
        break;
        #line 1027 
        case 2: 
                #line 1027 
        ;
        #line 1028 
        value = rtlphy->txpwr_by_rate_base_5g[(int)path][(int)txnum][1];
        #line 1029 
        break;
        #line 1030 
        case 3: 
                #line 1030 
        ;
        #line 1031 
        value = rtlphy->txpwr_by_rate_base_5g[(int)path][(int)txnum][2];
        #line 1032 
        break;
        #line 1033 
        case 4: 
                #line 1033 
        ;
        #line 1034 
        value = rtlphy->txpwr_by_rate_base_5g[(int)path][(int)txnum][3];
        #line 1035 
        break;
        #line 1036 
        case 5: 
                #line 1036 
        ;
        #line 1037 
        value = rtlphy->txpwr_by_rate_base_5g[(int)path][(int)txnum][4];
        #line 1038 
        break;
        #line 1039 
        default: 
                 #line 1039 
        ;
        #line 1040 
        _rtl_dbg_trace(rtlpriv,4ULL,4,(char *)"Invalid RateSection %d in Band 5G, Rf Path %d, %dTx in PHY_GetTxPowerByRateBase()\n",(int)rate_section,(int)path,(int)txnum);
        #line 1043 
        break;
      }
    else 
         #line 1046 
         _rtl_dbg_trace(rtlpriv,4ULL,4,(char *)"Invalid Band %d in PHY_GetTxPowerByRateBase()\n",(int)band);
  #line 1050 
  return value;
}

#line 1053  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
static void _rtl8821ae_phy_store_txpower_by_rate_base(struct ieee80211_hw *hw)
{
  #line 1055 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 1056 
  struct rtl_phy *rtlphy = & rtlpriv->phy;
  #line 1057 
  u16 rawvalue = (unsigned short)0U;
  #line 1058 
  u8 base = (unsigned char)0U;
  #line 1058 
  u8 path = (unsigned char)0U;
  #line 1060 
  path = (unsigned char)0U;
  #line 1060 
  while ((unsigned int)path <= 1U) {
    #line 1061 
    rawvalue = (unsigned short)((unsigned int)((unsigned short)(rtlphy->tx_power_by_rate_offset[0][(int)path][0][0] >> 24)) & 255U);
    #line 1062 
    base = (unsigned char)((unsigned int)((unsigned char)((int)rawvalue >> 4)) * 10U + ((unsigned int)((unsigned char)rawvalue) & 15U));
    #line 1063 
    _rtl8821ae_phy_set_txpower_by_rate_base(hw,(unsigned char)0,(unsigned char)((int)path),(unsigned char)0,(unsigned char)0,(unsigned char)((int)base));
    #line 1065 
    rawvalue = (unsigned short)((unsigned int)((unsigned short)(rtlphy->tx_power_by_rate_offset[0][(int)path][0][2] >> 24)) & 255U);
    #line 1066 
    base = (unsigned char)((unsigned int)((unsigned char)((int)rawvalue >> 4)) * 10U + ((unsigned int)((unsigned char)rawvalue) & 15U));
    #line 1067 
    _rtl8821ae_phy_set_txpower_by_rate_base(hw,(unsigned char)0,(unsigned char)((int)path),(unsigned char)1,(unsigned char)0,(unsigned char)((int)base));
    #line 1069 
    rawvalue = (unsigned short)((unsigned int)((unsigned short)(rtlphy->tx_power_by_rate_offset[0][(int)path][0][4] >> 24)) & 255U);
    #line 1070 
    base = (unsigned char)((unsigned int)((unsigned char)((int)rawvalue >> 4)) * 10U + ((unsigned int)((unsigned char)rawvalue) & 15U));
    #line 1071 
    _rtl8821ae_phy_set_txpower_by_rate_base(hw,(unsigned char)0,(unsigned char)((int)path),(unsigned char)2,(unsigned char)0,(unsigned char)((int)base));
    #line 1073 
    rawvalue = (unsigned short)((unsigned int)((unsigned short)(rtlphy->tx_power_by_rate_offset[0][(int)path][1][6] >> 24)) & 255U);
    #line 1074 
    base = (unsigned char)((unsigned int)((unsigned char)((int)rawvalue >> 4)) * 10U + ((unsigned int)((unsigned char)rawvalue) & 15U));
    #line 1075 
    _rtl8821ae_phy_set_txpower_by_rate_base(hw,(unsigned char)0,(unsigned char)((int)path),(unsigned char)3,(unsigned char)1,(unsigned char)((int)base));
    #line 1077 
    rawvalue = (unsigned short)((unsigned int)((unsigned short)(rtlphy->tx_power_by_rate_offset[0][(int)path][0][8] >> 24)) & 255U);
    #line 1078 
    base = (unsigned char)((unsigned int)((unsigned char)((int)rawvalue >> 4)) * 10U + ((unsigned int)((unsigned char)rawvalue) & 15U));
    #line 1079 
    _rtl8821ae_phy_set_txpower_by_rate_base(hw,(unsigned char)0,(unsigned char)((int)path),(unsigned char)4,(unsigned char)0,(unsigned char)((int)base));
    #line 1081 
    rawvalue = (unsigned short)((unsigned int)((unsigned short)(rtlphy->tx_power_by_rate_offset[0][(int)path][1][11] >> 8)) & 255U);
    #line 1082 
    base = (unsigned char)((unsigned int)((unsigned char)((int)rawvalue >> 4)) * 10U + ((unsigned int)((unsigned char)rawvalue) & 15U));
    #line 1083 
    _rtl8821ae_phy_set_txpower_by_rate_base(hw,(unsigned char)0,(unsigned char)((int)path),(unsigned char)5,(unsigned char)1,(unsigned char)((int)base));
    #line 1085 
    rawvalue = (unsigned short)((unsigned int)((unsigned short)(rtlphy->tx_power_by_rate_offset[1][(int)path][0][2] >> 24)) & 255U);
    #line 1086 
    base = (unsigned char)((unsigned int)((unsigned char)((int)rawvalue >> 4)) * 10U + ((unsigned int)((unsigned char)rawvalue) & 15U));
    #line 1087 
    _rtl8821ae_phy_set_txpower_by_rate_base(hw,(unsigned char)1,(unsigned char)((int)path),(unsigned char)1,(unsigned char)0,(unsigned char)((int)base));
    #line 1089 
    rawvalue = (unsigned short)((unsigned int)((unsigned short)(rtlphy->tx_power_by_rate_offset[1][(int)path][0][4] >> 24)) & 255U);
    #line 1090 
    base = (unsigned char)((unsigned int)((unsigned char)((int)rawvalue >> 4)) * 10U + ((unsigned int)((unsigned char)rawvalue) & 15U));
    #line 1091 
    _rtl8821ae_phy_set_txpower_by_rate_base(hw,(unsigned char)1,(unsigned char)((int)path),(unsigned char)2,(unsigned char)0,(unsigned char)((int)base));
    #line 1093 
    rawvalue = (unsigned short)((unsigned int)((unsigned short)(rtlphy->tx_power_by_rate_offset[1][(int)path][1][6] >> 24)) & 255U);
    #line 1094 
    base = (unsigned char)((unsigned int)((unsigned char)((int)rawvalue >> 4)) * 10U + ((unsigned int)((unsigned char)rawvalue) & 15U));
    #line 1095 
    _rtl8821ae_phy_set_txpower_by_rate_base(hw,(unsigned char)1,(unsigned char)((int)path),(unsigned char)3,(unsigned char)1,(unsigned char)((int)base));
    #line 1097 
    rawvalue = (unsigned short)((unsigned int)((unsigned short)(rtlphy->tx_power_by_rate_offset[1][(int)path][0][8] >> 24)) & 255U);
    #line 1098 
    base = (unsigned char)((unsigned int)((unsigned char)((int)rawvalue >> 4)) * 10U + ((unsigned int)((unsigned char)rawvalue) & 15U));
    #line 1099 
    _rtl8821ae_phy_set_txpower_by_rate_base(hw,(unsigned char)1,(unsigned char)((int)path),(unsigned char)4,(unsigned char)0,(unsigned char)((int)base));
    #line 1101 
    rawvalue = (unsigned short)((unsigned int)((unsigned short)(rtlphy->tx_power_by_rate_offset[1][(int)path][1][11] >> 8)) & 255U);
    #line 1102 
    base = (unsigned char)((unsigned int)((unsigned char)((int)rawvalue >> 4)) * 10U + ((unsigned int)((unsigned char)rawvalue) & 15U));
    #line 1103 
    _rtl8821ae_phy_set_txpower_by_rate_base(hw,(unsigned char)1,(unsigned char)((int)path),(unsigned char)5,(unsigned char)1,(unsigned char)((int)base));
    #line 1060 
    path = (u8)((int)path + 1);
  }
  #line 1105 
  return;
}

#line 1107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
static void _phy_convert_txpower_dbm_to_relative_value(u32 *data, u8 start, u8 end, u8 base_val)
{
  #line 1110 
  int i;
  #line 1111 
  u8 temp_value = (unsigned char)0U;
  #line 1112 
  u32 temp_data = 0U;
  #line 1114 
  i = 3;
  #line 1114 
  while (i >= 0) {
    #line 1115 
    if ((int)start <= i && (int)end >= i) {
      #line 1117 
      temp_value = (unsigned char)((unsigned int)((unsigned char)(*data >> i * 8)) & 15U);
      #line 1118 
      temp_value = (unsigned char)(((unsigned int)((unsigned char)(*data >> (i * 8 + 4))) & 15U) * 10U + (unsigned int)temp_value);
      #line 1121 
      if ((int)temp_value > (int)base_val) 
                                           #line 1121 
                                           temp_value = (unsigned char)((int)temp_value - (int)base_val); else 
                                                                    #line 1121 
                                                                    temp_value = (unsigned char)((int)base_val - (int)temp_value);
    }
    else 
         #line 1124 
         temp_value = (unsigned char)(*data >> i * 8);
    #line 1126 
    temp_data <<= 8;
    #line 1127 
    temp_data = (unsigned int)temp_value | temp_data;
    #line 1114 
    i --;
  }
  #line 1129 
  *data = temp_data;
  #line 1130 
  return;
}

#line 1132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
static void _rtl8812ae_phy_cross_reference_ht_and_vht_txpower_limit(struct ieee80211_hw *hw)
{
  #line 1136 
  u8 regulation;
  #line 1136 
  u8 bw;
  #line 1136 
  u8 channel;
  #line 1136 
  u8 rate_section;
  #line 1134 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 1135 
  struct rtl_phy *rtlphy = & rtlpriv->phy;
  #line 1137 
  s8 temp_pwrlmt = (signed char)0;
  #line 1139 
  regulation = (unsigned char)0U;
  #line 1139 
  while ((unsigned int)regulation <= 3U) {
    #line 1140 
    bw = (unsigned char)0U;
    #line 1140 
    while ((unsigned int)bw <= 3U) {
      #line 1141 
      channel = (unsigned char)0U;
      #line 1141 
      while ((unsigned int)channel <= 48U) {
        #line 1142 
        rate_section = (unsigned char)0U;
        #line 1142 
        while ((unsigned int)rate_section <= 5U) {
          #line 1143 
          temp_pwrlmt = rtlphy->txpwr_limit_5g[(int)regulation][(int)bw][(int)rate_section][(int)channel][0];
          #line 1145 
          if ((int)temp_pwrlmt == 63) 
            #line 1146 
            if ((unsigned int)bw <= 1U) {
              #line 1147 
              _rtl_dbg_trace(rtlpriv,4ULL,5,(char *)"No power limit table of the specified band %d, bandwidth %d, ratesection %d, channel %d, rf path %d\n",1,(int)bw,(int)rate_section,(int)channel,0);
              #line 1150 
              if ((unsigned int)rate_section == 2U) 
                                                    #line 1151 
                                                    rtlphy->txpwr_limit_5g[(int)regulation][(int)bw][2][(int)channel][0] = rtlphy->txpwr_limit_5g[(int)regulation][(int)bw][4][(int)channel][0];
              else 
                #line 1153 
                if ((unsigned int)rate_section == 4U) 
                                                      #line 1154 
                                                      rtlphy->txpwr_limit_5g[(int)regulation][(int)bw][4][(int)channel][0] = rtlphy->txpwr_limit_5g[(int)regulation][(int)bw][2][(int)channel][0];
                else 
                  #line 1156 
                  if ((unsigned int)rate_section == 3U) 
                                                        #line 1157 
                                                        rtlphy->txpwr_limit_5g[(int)regulation][(int)bw][3][(int)channel][0] = rtlphy->txpwr_limit_5g[(int)regulation][(int)bw][5][(int)channel][0];
                  else 
                    #line 1159 
                    if ((unsigned int)rate_section == 5U) 
                                                          #line 1160 
                                                          rtlphy->txpwr_limit_5g[(int)regulation][(int)bw][5][(int)channel][0] = rtlphy->txpwr_limit_5g[(int)regulation][(int)bw][3][(int)channel][0];
              #line 1164 
              _rtl_dbg_trace(rtlpriv,4ULL,5,(char *)"use other value %d\n",(int)temp_pwrlmt);
            }
          #line 1142 
          rate_section = (u8)((int)rate_section + 1);
        }
        #line 1141 
        channel = (u8)((int)channel + 1);
      }
      #line 1140 
      bw = (u8)((int)bw + 1);
    }
    #line 1139 
    regulation = (u8)((int)regulation + 1);
  }
  #line 1170 
  return;
}

#line 1173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
static u8 _rtl8812ae_phy_get_txpower_by_rate_base_index(struct ieee80211_hw *hw, enum band_type band, u8 rate)
{
  #line 1176 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 1177 
  u8 index = (unsigned char)0U;
  #line 1178 
  if (band == (unsigned int)BAND_ON_2_4G) 
    #line 1179 
    switch ((int)rate) {
      #line 1180 
      case 2: 
              #line 1180 
      ;
      #line 1181 
      case 4: 
              #line 1181 
      ;
      #line 1182 
      case 11: 
               #line 1182 
      ;
      #line 1183 
      case 22: 
               #line 1183 
      ;
      #line 1184 
      index = (unsigned char)0U;
      #line 1185 
      break;
      #line 1187 
      case 12: 
               #line 1187 
      ;
      #line 1188 
      case 18: 
               #line 1188 
      ;
      #line 1189 
      case 24: 
               #line 1189 
      ;
      #line 1190 
      case 36: 
               #line 1190 
      ;
      #line 1191 
      case 48: 
               #line 1191 
      ;
      #line 1192 
      case 72: 
               #line 1192 
      ;
      #line 1193 
      case 96: 
               #line 1193 
      ;
      #line 1194 
      case 108: 
                #line 1194 
      ;
      #line 1195 
      index = (unsigned char)1U;
      #line 1196 
      break;
      #line 1198 
      case 128: 
                #line 1198 
      ;
      #line 1199 
      case 129: 
                #line 1199 
      ;
      #line 1200 
      case 130: 
                #line 1200 
      ;
      #line 1201 
      case 131: 
                #line 1201 
      ;
      #line 1202 
      case 132: 
                #line 1202 
      ;
      #line 1203 
      case 133: 
                #line 1203 
      ;
      #line 1204 
      case 134: 
                #line 1204 
      ;
      #line 1205 
      case 135: 
                #line 1205 
      ;
      #line 1206 
      index = (unsigned char)2U;
      #line 1207 
      break;
      #line 1209 
      case 136: 
                #line 1209 
      ;
      #line 1210 
      case 137: 
                #line 1210 
      ;
      #line 1211 
      case 138: 
                #line 1211 
      ;
      #line 1212 
      case 139: 
                #line 1212 
      ;
      #line 1213 
      case 140: 
                #line 1213 
      ;
      #line 1214 
      case 141: 
                #line 1214 
      ;
      #line 1215 
      case 142: 
                #line 1215 
      ;
      #line 1216 
      case 143: 
                #line 1216 
      ;
      #line 1217 
      index = (unsigned char)3U;
      #line 1218 
      break;
      #line 1220 
      default: 
               #line 1220 
      ;
      #line 1221 
      _rtl_dbg_trace(rtlpriv,4ULL,4,(char *)"Wrong rate 0x%x to obtain index in 2.4G in PHY_GetTxPowerByRateBaseIndex()\n",(int)rate);
      #line 1224 
      break;
    }
  else 
    #line 1226 
    if (band == (unsigned int)BAND_ON_5G) 
      #line 1227 
      switch ((int)rate) {
        #line 1228 
        case 12: 
                 #line 1228 
        ;
        #line 1229 
        case 18: 
                 #line 1229 
        ;
        #line 1230 
        case 24: 
                 #line 1230 
        ;
        #line 1231 
        case 36: 
                 #line 1231 
        ;
        #line 1232 
        case 48: 
                 #line 1232 
        ;
        #line 1233 
        case 72: 
                 #line 1233 
        ;
        #line 1234 
        case 96: 
                 #line 1234 
        ;
        #line 1235 
        case 108: 
                  #line 1235 
        ;
        #line 1236 
        index = (unsigned char)0U;
        #line 1237 
        break;
        #line 1239 
        case 128: 
                  #line 1239 
        ;
        #line 1240 
        case 129: 
                  #line 1240 
        ;
        #line 1241 
        case 130: 
                  #line 1241 
        ;
        #line 1242 
        case 131: 
                  #line 1242 
        ;
        #line 1243 
        case 132: 
                  #line 1243 
        ;
        #line 1244 
        case 133: 
                  #line 1244 
        ;
        #line 1245 
        case 134: 
                  #line 1245 
        ;
        #line 1246 
        case 135: 
                  #line 1246 
        ;
        #line 1247 
        index = (unsigned char)1U;
        #line 1248 
        break;
        #line 1250 
        case 136: 
                  #line 1250 
        ;
        #line 1251 
        case 137: 
                  #line 1251 
        ;
        #line 1252 
        case 138: 
                  #line 1252 
        ;
        #line 1253 
        case 139: 
                  #line 1253 
        ;
        #line 1254 
        case 140: 
                  #line 1254 
        ;
        #line 1255 
        case 141: 
                  #line 1255 
        ;
        #line 1256 
        case 142: 
                  #line 1256 
        ;
        #line 1257 
        case 143: 
                  #line 1257 
        ;
        #line 1258 
        index = (unsigned char)2U;
        #line 1259 
        break;
        #line 1261 
        case 144: 
                  #line 1261 
        ;
        #line 1262 
        case 145: 
                  #line 1262 
        ;
        #line 1263 
        case 146: 
                  #line 1263 
        ;
        #line 1264 
        case 147: 
                  #line 1264 
        ;
        #line 1265 
        case 148: 
                  #line 1265 
        ;
        #line 1266 
        case 149: 
                  #line 1266 
        ;
        #line 1267 
        case 150: 
                  #line 1267 
        ;
        #line 1268 
        case 151: 
                  #line 1268 
        ;
        #line 1269 
        case 152: 
                  #line 1269 
        ;
        #line 1270 
        case 153: 
                  #line 1270 
        ;
        #line 1271 
        index = (unsigned char)3U;
        #line 1272 
        break;
        #line 1274 
        case 154: 
                  #line 1274 
        ;
        #line 1275 
        case 155: 
                  #line 1275 
        ;
        #line 1276 
        case 156: 
                  #line 1276 
        ;
        #line 1277 
        case 157: 
                  #line 1277 
        ;
        #line 1278 
        case 158: 
                  #line 1278 
        ;
        #line 1279 
        case 159: 
                  #line 1279 
        ;
        #line 1280 
        case 160: 
                  #line 1280 
        ;
        #line 1281 
        case 161: 
                  #line 1281 
        ;
        #line 1282 
        case 162: 
                  #line 1282 
        ;
        #line 1283 
        case 163: 
                  #line 1283 
        ;
        #line 1284 
        index = (unsigned char)4U;
        #line 1285 
        break;
        #line 1287 
        default: 
                 #line 1287 
        ;
        #line 1288 
        _rtl_dbg_trace(rtlpriv,4ULL,4,(char *)"Wrong rate 0x%x to obtain index in 5G in PHY_GetTxPowerByRateBaseIndex()\n",(int)rate);
        #line 1291 
        break;
      }
  #line 1295 
  return index;
}

#line 1298  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
static void _rtl8812ae_phy_convert_txpower_limit_to_power_index(struct ieee80211_hw *hw)
{
  #line 1302 
  u8 bw40_pwr_base_dbm2_4G;
  #line 1302 
  u8 bw40_pwr_base_dbm5G;
  #line 1303 
  u8 regulation;
  #line 1303 
  u8 bw;
  #line 1303 
  u8 channel;
  #line 1303 
  u8 rate_section;
  #line 1300 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 1301 
  struct rtl_phy *rtlphy = & rtlpriv->phy;
  #line 1304 
  u8 base_index2_4G = (unsigned char)0U;
  #line 1305 
  u8 base_index5G = (unsigned char)0U;
  #line 1306 
  s8 temp_value = (signed char)0;
  #line 1306 
  s8 temp_pwrlmt = (signed char)0;
  #line 1307 
  u8 rf_path = (unsigned char)0U;
  #line 1309 
  _rtl_dbg_trace(rtlpriv,4ULL,5,(char *)"=====> _rtl8812ae_phy_convert_txpower_limit_to_power_index()\n");
  #line 1312 
  _rtl8812ae_phy_cross_reference_ht_and_vht_txpower_limit(hw);
  #line 1314 
  regulation = (unsigned char)0U;
  #line 1314 
  while ((unsigned int)regulation <= 3U) {
    #line 1315 
    bw = (unsigned char)0U;
    #line 1315 
    while ((unsigned int)bw <= 3U) {
      #line 1316 
      channel = (unsigned char)0U;
      #line 1316 
      while ((unsigned int)channel <= 13U) {
        #line 1317 
        rate_section = (unsigned char)0U;
        #line 1317 
        while ((unsigned int)rate_section <= 5U) {
          #line 1320 
          if ((unsigned int)rate_section == 0U) 
                                                #line 1321 
                                                base_index2_4G = _rtl8812ae_phy_get_txpower_by_rate_base_index(hw,(enum band_type)BAND_ON_2_4G,(unsigned char)22);
          else 
            #line 1324 
            if ((unsigned int)rate_section == 1U) 
                                                  #line 1325 
                                                  base_index2_4G = _rtl8812ae_phy_get_txpower_by_rate_base_index(hw,(enum band_type)BAND_ON_2_4G,(unsigned char)108);
            else 
              #line 1328 
              if ((unsigned int)rate_section == 2U) 
                                                    #line 1329 
                                                    base_index2_4G = _rtl8812ae_phy_get_txpower_by_rate_base_index(hw,(enum band_type)BAND_ON_2_4G,(unsigned char)135);
              else 
                #line 1332 
                if ((unsigned int)rate_section == 3U) 
                                                      #line 1333 
                                                      base_index2_4G = _rtl8812ae_phy_get_txpower_by_rate_base_index(hw,(enum band_type)BAND_ON_2_4G,(unsigned char)143);
          #line 1338 
          temp_pwrlmt = rtlphy->txpwr_limit_2_4g[(int)regulation][(int)bw][(int)rate_section][(int)channel][0];
          #line 1341 
          rf_path = (unsigned char)0U;
          #line 1341 
          while ((unsigned int)rf_path <= 3U) {
            {
              #line 1358 
              int tmp;
              #line 1344 
              if ((unsigned int)rate_section == 3U) 
                                                    #line 1345 
                                                    bw40_pwr_base_dbm2_4G = rtlphy->txpwr_by_rate_base_24g[(int)rf_path][1][(int)base_index2_4G]; else 
                                                                    #line 1348 
                                                                    bw40_pwr_base_dbm2_4G = rtlphy->txpwr_by_rate_base_24g[(int)rf_path][0][(int)base_index2_4G];
              #line 1351 
              if ((int)temp_pwrlmt != 63) {
                #line 1352 
                temp_value = (signed char)((int)temp_pwrlmt - (int)bw40_pwr_base_dbm2_4G);
                #line 1354 
                rtlphy->txpwr_limit_2_4g[(int)regulation][(int)bw][(int)rate_section][(int)channel][(int)rf_path] = temp_value;
              }
              #line 1358 
              ;
              #line 1358 
              ;
              #line 1358 
              ;
              #line 1358 
              if ((int)temp_pwrlmt != 63) 
                                          #line 1358 
                                          tmp = (int)temp_pwrlmt / 2; else 
                                                                    #line 1358 
                                                                    tmp = 0;
              #line 1358 
              ;
              #line 1358 
              ;
              #line 1358 
              ;
              #line 1358 
              ;
              #line 1358 
              ;
              #line 1358 
              ;
              #line 1358 
              _rtl_dbg_trace(rtlpriv,4ULL,5,(char *)"TxPwrLimit_2_4G[regulation %d][bw %d][rateSection %d][channel %d] = %d\n(TxPwrLimit in dBm %d - BW40PwrLmt2_4G[channel %d][rfpath %d] %d)\n",(int)regulation,(int)bw,(int)rate_section,(int)channel,(int)rtlphy->txpwr_limit_2_4g[(int)regulation][(int)bw][(int)rate_section][(int)channel][(int)rf_path],tmp,(int)channel,(int)rf_path,(int)bw40_pwr_base_dbm2_4G);
            }
            #line 1343 
            rf_path = (u8)((int)rf_path + 1);
          }
          #line 1317 
          rate_section = (u8)((int)rate_section + 1);
        }
        #line 1316 
        channel = (u8)((int)channel + 1);
      }
      #line 1315 
      bw = (u8)((int)bw + 1);
    }
    #line 1314 
    regulation = (u8)((int)regulation + 1);
  }
  #line 1370 
  regulation = (unsigned char)0U;
  #line 1370 
  while ((unsigned int)regulation <= 3U) {
    #line 1371 
    bw = (unsigned char)0U;
    #line 1371 
    while ((unsigned int)bw <= 3U) {
      #line 1372 
      channel = (unsigned char)0U;
      #line 1372 
      while ((unsigned int)channel <= 48U) {
        #line 1373 
        rate_section = (unsigned char)0U;
        #line 1373 
        while ((unsigned int)rate_section <= 5U) {
          #line 1377 
          if ((unsigned int)rate_section == 1U) 
                                                #line 1378 
                                                base_index5G = _rtl8812ae_phy_get_txpower_by_rate_base_index(hw,(enum band_type)BAND_ON_5G,(unsigned char)108);
          else 
            #line 1381 
            if ((unsigned int)rate_section == 2U) 
                                                  #line 1382 
                                                  base_index5G = _rtl8812ae_phy_get_txpower_by_rate_base_index(hw,(enum band_type)BAND_ON_5G,(unsigned char)135);
            else 
              #line 1385 
              if ((unsigned int)rate_section == 3U) 
                                                    #line 1386 
                                                    base_index5G = _rtl8812ae_phy_get_txpower_by_rate_base_index(hw,(enum band_type)BAND_ON_5G,(unsigned char)143);
              else 
                #line 1389 
                if ((unsigned int)rate_section == 4U) 
                                                      #line 1390 
                                                      base_index5G = _rtl8812ae_phy_get_txpower_by_rate_base_index(hw,(enum band_type)BAND_ON_5G,(unsigned char)151);
                else 
                  #line 1393 
                  if ((unsigned int)rate_section == 5U) 
                                                        #line 1394 
                                                        base_index5G = _rtl8812ae_phy_get_txpower_by_rate_base_index(hw,(enum band_type)BAND_ON_5G,(unsigned char)161);
          #line 1399 
          temp_pwrlmt = rtlphy->txpwr_limit_5g[(int)regulation][(int)bw][(int)rate_section][(int)channel][0];
          #line 1403 
          rf_path = (unsigned char)0U;
          #line 1403 
          while ((unsigned int)rf_path <= 3U) {
            #line 1406 
            if ((unsigned int)rate_section == 3U || (unsigned int)rate_section == 5U) 
              #line 1407 
              bw40_pwr_base_dbm5G = rtlphy->txpwr_by_rate_base_5g[(int)rf_path][1][(int)base_index5G]; else 
                                                                    #line 1411 
                                                                    bw40_pwr_base_dbm5G = rtlphy->txpwr_by_rate_base_5g[(int)rf_path][0][(int)base_index5G];
            #line 1415 
            if ((int)temp_pwrlmt != 63) {
              #line 1416 
              temp_value = (signed char)((int)temp_pwrlmt - (int)bw40_pwr_base_dbm5G);
              #line 1420 
              rtlphy->txpwr_limit_5g[(int)regulation][(int)bw][(int)rate_section][(int)channel][(int)rf_path] = temp_value;
            }
            #line 1423 
            _rtl_dbg_trace(rtlpriv,4ULL,5,(char *)"TxPwrLimit_5G[regulation %d][bw %d][rateSection %d][channel %d] =%d\n(TxPwrLimit in dBm %d - BW40PwrLmt5G[chnl group %d][rfpath %d] %d)\n",(int)regulation,(int)bw,(int)rate_section,(int)channel,(int)rtlphy->txpwr_limit_5g[(int)regulation][(int)bw][(int)rate_section][(int)channel][(int)rf_path],(int)temp_pwrlmt,(int)channel,(int)rf_path,(int)bw40_pwr_base_dbm5G);
            #line 1405 
            rf_path = (u8)((int)rf_path + 1);
          }
          #line 1373 
          rate_section = (u8)((int)rate_section + 1);
        }
        #line 1372 
        channel = (u8)((int)channel + 1);
      }
      #line 1371 
      bw = (u8)((int)bw + 1);
    }
    #line 1370 
    regulation = (u8)((int)regulation + 1);
  }
  #line 1434 
  _rtl_dbg_trace(rtlpriv,4ULL,5,(char *)"<===== _rtl8812ae_phy_convert_txpower_limit_to_power_index()\n");
  #line 1435 
  return;
}

#line 1438  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
static void _rtl8821ae_phy_init_txpower_limit(struct ieee80211_hw *hw)
{
  #line 1442 
  u8 i;
  #line 1442 
  u8 j;
  #line 1442 
  u8 k;
  #line 1442 
  u8 l;
  #line 1442 
  u8 m;
  #line 1440 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 1441 
  struct rtl_phy *rtlphy = & rtlpriv->phy;
  #line 1444 
  _rtl_dbg_trace(rtlpriv,4ULL,4,(char *)"=====> _rtl8821ae_phy_init_txpower_limit()!\n");
  #line 1447 
  i = (unsigned char)0U;
  #line 1447 
  while ((unsigned int)i <= 3U) {
    #line 1448 
    j = (unsigned char)0U;
    #line 1448 
    while ((unsigned int)j <= 3U) {
      #line 1449 
      k = (unsigned char)0U;
      #line 1449 
      while ((unsigned int)k <= 5U) {
        #line 1450 
        m = (unsigned char)0U;
        #line 1450 
        while ((unsigned int)m <= 13U) {
          #line 1451 
          l = (unsigned char)0U;
          #line 1451 
          while ((unsigned int)l <= 3U) {
            #line 1454 
            rtlphy->txpwr_limit_2_4g[(int)i][(int)j][(int)k][(int)m][(int)l] = (signed char)63;
            #line 1451 
            l = (u8)((int)l + 1);
          }
          #line 1450 
          m = (u8)((int)m + 1);
        }
        #line 1449 
        k = (u8)((int)k + 1);
      }
      #line 1448 
      j = (u8)((int)j + 1);
    }
    #line 1447 
    i = (u8)((int)i + 1);
  }
  #line 1456 
  i = (unsigned char)0U;
  #line 1456 
  while ((unsigned int)i <= 3U) {
    #line 1457 
    j = (unsigned char)0U;
    #line 1457 
    while ((unsigned int)j <= 3U) {
      #line 1458 
      k = (unsigned char)0U;
      #line 1458 
      while ((unsigned int)k <= 5U) {
        #line 1459 
        m = (unsigned char)0U;
        #line 1459 
        while ((unsigned int)m <= 48U) {
          #line 1460 
          l = (unsigned char)0U;
          #line 1460 
          while ((unsigned int)l <= 3U) {
            #line 1463 
            rtlphy->txpwr_limit_5g[(int)i][(int)j][(int)k][(int)m][(int)l] = (signed char)63;
            #line 1460 
            l = (u8)((int)l + 1);
          }
          #line 1459 
          m = (u8)((int)m + 1);
        }
        #line 1458 
        k = (u8)((int)k + 1);
      }
      #line 1457 
      j = (u8)((int)j + 1);
    }
    #line 1456 
    i = (u8)((int)i + 1);
  }
  #line 1466 
  _rtl_dbg_trace(rtlpriv,4ULL,4,(char *)"<===== _rtl8821ae_phy_init_txpower_limit()!\n");
  #line 1467 
  return;
}

#line 1470  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
static void _rtl8821ae_phy_convert_txpower_dbm_to_relative_value(struct ieee80211_hw *hw)
{
  #line 1472 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 1473 
  struct rtl_phy *rtlphy = & rtlpriv->phy;
  #line 1474 
  u8 base = (unsigned char)0U;
  #line 1474 
  u8 rfpath = (unsigned char)0U;
  #line 1476 
  rfpath = (unsigned char)0U;
  #line 1476 
  while ((unsigned int)rfpath <= 1U) {
    #line 1477 
    base = _rtl8821ae_phy_get_txpower_by_rate_base(hw,(unsigned char)0,(unsigned char)((int)rfpath),(unsigned char)0,(unsigned char)0);
    #line 1478 
    _phy_convert_txpower_dbm_to_relative_value(& rtlphy->tx_power_by_rate_offset[0][(int)rfpath][0][0],(unsigned char)0,(unsigned char)3,(unsigned char)((int)base));
    #line 1482 
    base = _rtl8821ae_phy_get_txpower_by_rate_base(hw,(unsigned char)0,(unsigned char)((int)rfpath),(unsigned char)0,(unsigned char)1);
    #line 1483 
    _phy_convert_txpower_dbm_to_relative_value(& rtlphy->tx_power_by_rate_offset[0][(int)rfpath][0][1],(unsigned char)0,(unsigned char)3,(unsigned char)((int)base));
    #line 1486 
    _phy_convert_txpower_dbm_to_relative_value(& rtlphy->tx_power_by_rate_offset[0][(int)rfpath][0][2],(unsigned char)0,(unsigned char)3,(unsigned char)((int)base));
    #line 1490 
    base = _rtl8821ae_phy_get_txpower_by_rate_base(hw,(unsigned char)0,(unsigned char)((int)rfpath),(unsigned char)0,(unsigned char)2);
    #line 1491 
    _phy_convert_txpower_dbm_to_relative_value(& rtlphy->tx_power_by_rate_offset[0][(int)rfpath][0][3],(unsigned char)0,(unsigned char)3,(unsigned char)((int)base));
    #line 1494 
    _phy_convert_txpower_dbm_to_relative_value(& rtlphy->tx_power_by_rate_offset[0][(int)rfpath][0][4],(unsigned char)0,(unsigned char)3,(unsigned char)((int)base));
    #line 1498 
    base = _rtl8821ae_phy_get_txpower_by_rate_base(hw,(unsigned char)0,(unsigned char)((int)rfpath),(unsigned char)1,(unsigned char)3);
    #line 1500 
    _phy_convert_txpower_dbm_to_relative_value(& rtlphy->tx_power_by_rate_offset[0][(int)rfpath][1][5],(unsigned char)0,(unsigned char)3,(unsigned char)((int)base));
    #line 1504 
    _phy_convert_txpower_dbm_to_relative_value(& rtlphy->tx_power_by_rate_offset[0][(int)rfpath][1][6],(unsigned char)0,(unsigned char)3,(unsigned char)((int)base));
    #line 1508 
    base = _rtl8821ae_phy_get_txpower_by_rate_base(hw,(unsigned char)0,(unsigned char)((int)rfpath),(unsigned char)0,(unsigned char)4);
    #line 1509 
    _phy_convert_txpower_dbm_to_relative_value(& rtlphy->tx_power_by_rate_offset[0][(int)rfpath][0][7],(unsigned char)0,(unsigned char)3,(unsigned char)((int)base));
    #line 1512 
    _phy_convert_txpower_dbm_to_relative_value(& rtlphy->tx_power_by_rate_offset[0][(int)rfpath][0][8],(unsigned char)0,(unsigned char)3,(unsigned char)((int)base));
    #line 1515 
    _phy_convert_txpower_dbm_to_relative_value(& rtlphy->tx_power_by_rate_offset[0][(int)rfpath][0][9],(unsigned char)0,(unsigned char)1,(unsigned char)((int)base));
    #line 1519 
    base = _rtl8821ae_phy_get_txpower_by_rate_base(hw,(unsigned char)0,(unsigned char)((int)rfpath),(unsigned char)1,(unsigned char)5);
    #line 1520 
    _phy_convert_txpower_dbm_to_relative_value(& rtlphy->tx_power_by_rate_offset[0][(int)rfpath][0][9],(unsigned char)2,(unsigned char)3,(unsigned char)((int)base));
    #line 1523 
    _phy_convert_txpower_dbm_to_relative_value(& rtlphy->tx_power_by_rate_offset[0][(int)rfpath][1][10],(unsigned char)0,(unsigned char)3,(unsigned char)((int)base));
    #line 1526 
    _phy_convert_txpower_dbm_to_relative_value(& rtlphy->tx_power_by_rate_offset[0][(int)rfpath][1][11],(unsigned char)0,(unsigned char)3,(unsigned char)((int)base));
    #line 1530 
    base = _rtl8821ae_phy_get_txpower_by_rate_base(hw,(unsigned char)1,(unsigned char)((int)rfpath),(unsigned char)0,(unsigned char)1);
    #line 1531 
    _phy_convert_txpower_dbm_to_relative_value(& rtlphy->tx_power_by_rate_offset[1][(int)rfpath][0][1],(unsigned char)0,(unsigned char)3,(unsigned char)((int)base));
    #line 1534 
    _phy_convert_txpower_dbm_to_relative_value(& rtlphy->tx_power_by_rate_offset[1][(int)rfpath][0][2],(unsigned char)0,(unsigned char)3,(unsigned char)((int)base));
    #line 1538 
    base = _rtl8821ae_phy_get_txpower_by_rate_base(hw,(unsigned char)1,(unsigned char)((int)rfpath),(unsigned char)0,(unsigned char)2);
    #line 1539 
    _phy_convert_txpower_dbm_to_relative_value(& rtlphy->tx_power_by_rate_offset[1][(int)rfpath][0][3],(unsigned char)0,(unsigned char)3,(unsigned char)((int)base));
    #line 1542 
    _phy_convert_txpower_dbm_to_relative_value(& rtlphy->tx_power_by_rate_offset[1][(int)rfpath][0][4],(unsigned char)0,(unsigned char)3,(unsigned char)((int)base));
    #line 1546 
    base = _rtl8821ae_phy_get_txpower_by_rate_base(hw,(unsigned char)1,(unsigned char)((int)rfpath),(unsigned char)1,(unsigned char)3);
    #line 1547 
    _phy_convert_txpower_dbm_to_relative_value(& rtlphy->tx_power_by_rate_offset[1][(int)rfpath][1][5],(unsigned char)0,(unsigned char)3,(unsigned char)((int)base));
    #line 1550 
    _phy_convert_txpower_dbm_to_relative_value(& rtlphy->tx_power_by_rate_offset[1][(int)rfpath][1][6],(unsigned char)0,(unsigned char)3,(unsigned char)((int)base));
    #line 1554 
    base = _rtl8821ae_phy_get_txpower_by_rate_base(hw,(unsigned char)1,(unsigned char)((int)rfpath),(unsigned char)0,(unsigned char)4);
    #line 1555 
    _phy_convert_txpower_dbm_to_relative_value(& rtlphy->tx_power_by_rate_offset[1][(int)rfpath][0][7],(unsigned char)0,(unsigned char)3,(unsigned char)((int)base));
    #line 1558 
    _phy_convert_txpower_dbm_to_relative_value(& rtlphy->tx_power_by_rate_offset[1][(int)rfpath][0][8],(unsigned char)0,(unsigned char)3,(unsigned char)((int)base));
    #line 1561 
    _phy_convert_txpower_dbm_to_relative_value(& rtlphy->tx_power_by_rate_offset[1][(int)rfpath][0][9],(unsigned char)0,(unsigned char)1,(unsigned char)((int)base));
    #line 1565 
    base = _rtl8821ae_phy_get_txpower_by_rate_base(hw,(unsigned char)1,(unsigned char)((int)rfpath),(unsigned char)1,(unsigned char)5);
    #line 1566 
    _phy_convert_txpower_dbm_to_relative_value(& rtlphy->tx_power_by_rate_offset[1][(int)rfpath][0][9],(unsigned char)2,(unsigned char)3,(unsigned char)((int)base));
    #line 1569 
    _phy_convert_txpower_dbm_to_relative_value(& rtlphy->tx_power_by_rate_offset[1][(int)rfpath][1][10],(unsigned char)0,(unsigned char)3,(unsigned char)((int)base));
    #line 1572 
    _phy_convert_txpower_dbm_to_relative_value(& rtlphy->tx_power_by_rate_offset[1][(int)rfpath][1][11],(unsigned char)0,(unsigned char)3,(unsigned char)((int)base));
    #line 1476 
    rfpath = (u8)((int)rfpath + 1);
  }
  #line 1577 
  _rtl_dbg_trace(rtlpriv,65536ULL,5,(char *)"<===_rtl8821ae_phy_convert_txpower_dbm_to_relative_value()\n");
  #line 1578 
  return;
}

#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
static void _rtl8821ae_phy_txpower_by_rate_configuration(struct ieee80211_hw *hw)
{
  #line 1583 
  _rtl8821ae_phy_store_txpower_by_rate_base(hw);
  #line 1584 
  _rtl8821ae_phy_convert_txpower_dbm_to_relative_value(hw);
  #line 1585 
  return;
}

#line 1588  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
static bool _rtl8812ae_get_integer_from_string(char *str, u8 *pint)
{
  #line 1590 
  u16 i = (unsigned short)0U;
  #line 1591 
  *pint = (unsigned char)0U;
  #line 1593 
  while ((int)*(str + (unsigned long)i) != 0) {
    #line 1594 
    if ((unsigned int)*(str + (unsigned long)i) + 208U <= 9U) {
      #line 1595 
      *pint = (unsigned char)((unsigned int)*pint * 10U);
      #line 1596 
      *pint = (unsigned char)((unsigned int)((int)*pint + (int)((unsigned char)*(str + (unsigned long)i))) + 208U);
    }
    else 
         #line 1598 
         return (_Bool)0;
    #line 1600 
    i = (u16)((int)i + 1);
  }
  #line 1603 
  return (_Bool)1;
}

#line 1606  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
static bool _rtl8812ae_eq_n_byte(u8 *str1, u8 *str2, u32 num)
{
  #line 1608 
  if (num == 0U) 
                 #line 1609 
                 return (_Bool)0;
  #line 1610 
  while (num != 0U) {
    #line 1611 
    num --;
    #line 1612 
    if ((int)*(str1 + (unsigned long)num) != (int)*(str2 + (unsigned long)num)) 
      #line 1613 
      return (_Bool)0;
  }
  #line 1615 
  return (_Bool)1;
}

#line 1618  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
static s8 _rtl8812ae_phy_get_chnl_idx_of_txpwr_lmt(struct ieee80211_hw *hw, u8 band, u8 channel)
{
  #line 1621 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 1622 
  s8 channel_index = (signed char)(-1);
  #line 1623 
  u8 i = (unsigned char)0U;
  #line 1625 
  if ((unsigned int)band == 0U) 
                                #line 1626 
                                channel_index = (signed char)((unsigned int)channel + 255U);
  else 
    #line 1627 
    if ((unsigned int)band == 1U) {
      #line 1628 
      i = (unsigned char)0U;
      #line 1628 
      while ((unsigned int)i <= 48U) {
        #line 1629 
        if ((int)channel5g[(int)i] == (int)channel) 
                                                    #line 1630 
                                                    channel_index = (signed char)i;
        #line 1628 
        i = (u8)((int)i + 1);
      }
    }
    else 
         #line 1633 
         _rtl_dbg_trace(rtlpriv,65536ULL,4,(char *)"Invalid Band %d in %s\n",(int)band,(char *)"_rtl8812ae_phy_get_chnl_idx_of_txpwr_lmt");
  #line 1636 
  if ((int)channel_index == -1) 
                                #line 1637 
                                _rtl_dbg_trace(rtlpriv,65536ULL,4,(char *)"Invalid Channel %d of Band %d in %s\n",(int)channel,(int)band,(char *)"_rtl8812ae_phy_get_chnl_idx_of_txpwr_lmt");
  #line 1641 
  return channel_index;
}

#line 1644  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
static void _rtl8812ae_phy_set_txpower_limit(struct ieee80211_hw *hw, u8 *pregulation, u8 *pband, u8 *pbandwidth, u8 *prate_section, u8 *prf_path, u8 *pchannel, u8 *ppower_limit)
{
  #line 1651 
  u8 channel;
  #line 1652 
  u8 channel_index;
  #line 1653 
  s8 prev_power_limit;
  #line 1653 
  s8 ret;
  #line 1649 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 1650 
  struct rtl_phy *rtlphy = & rtlpriv->phy;
  #line 1651 
  u8 regulation = (unsigned char)0U;
  #line 1651 
  u8 bandwidth = (unsigned char)0U;
  #line 1651 
  u8 rate_section = (unsigned char)0U;
  #line 1653 
  s8 power_limit = (signed char)0;
  #line 1655 
  if (_rtl8812ae_get_integer_from_string((char *)pchannel,& channel)) {
    #line 1656 
    if (! _rtl8812ae_get_integer_from_string((char *)ppower_limit,
                                           (u8 *)(& power_limit))) 
      #line 1658 
      _rtl_dbg_trace(rtlpriv,4ULL,5,(char *)"Illegal index of pwr_lmt table [chnl %d][val %d]\n",(int)channel,(int)power_limit);
  }
  else 
       #line 1658 
       _rtl_dbg_trace(rtlpriv,4ULL,5,(char *)"Illegal index of pwr_lmt table [chnl %d][val %d]\n",(int)channel,(int)power_limit);
  #line 1663 
  if (63 < (int)power_limit) 
                             #line 1663 
                             power_limit = (signed char)63; else 
                                                                 #line 1663 
                                                                 power_limit = power_limit;
  #line 1666 
  if ((int)_rtl8812ae_eq_n_byte(pregulation,(u8 *)"FCC",3U) != 0) 
                                                                  #line 1667 
                                                                  regulation = (unsigned char)0U;
  else {
    #line 1668 
    if ((int)_rtl8812ae_eq_n_byte(pregulation,(u8 *)"MKK",3U) != 0) 
                                                                    #line 1669 
                                                                    regulation = (unsigned char)1U;
    else {
      #line 1670 
      if ((int)_rtl8812ae_eq_n_byte(pregulation,(u8 *)"ETSI",4U) != 0) 
        #line 1671 
        regulation = (unsigned char)2U;
      else {
        #line 1672 
        if ((int)_rtl8812ae_eq_n_byte(pregulation,(u8 *)"WW13",4U) != 0) 
          #line 1673 
          regulation = (unsigned char)3U;
      }
    }
  }
  #line 1675 
  if ((int)_rtl8812ae_eq_n_byte(prate_section,(u8 *)"CCK",3U) != 0) 
                                                                    #line 1676 
                                                                    rate_section = (unsigned char)0U;
  else {
    #line 1677 
    if ((int)_rtl8812ae_eq_n_byte(prate_section,(u8 *)"OFDM",4U) != 0) 
      #line 1678 
      rate_section = (unsigned char)1U;
    else {
      #line 1679 
      if ((int)_rtl8812ae_eq_n_byte(prate_section,(u8 *)"HT",2U) != 0) {
        #line 1679 
        if ((int)_rtl8812ae_eq_n_byte(prf_path,(u8 *)"1T",2U) != 0) 
                                                                    #line 1681 
                                                                    rate_section = (unsigned char)2U; else 
                                                                    #line 1679 
                                                                    goto _LAND_1;
      }
      else {
        #line 1679 
        _LAND_1: 
        #line 1682 
        if ((int)_rtl8812ae_eq_n_byte(prate_section,(u8 *)"HT",2U) != 0) {
          #line 1682 
          if ((int)_rtl8812ae_eq_n_byte(prf_path,(u8 *)"2T",2U) != 0) 
            #line 1684 
            rate_section = (unsigned char)3U; else 
                                                   #line 1682 
                                                   goto _LAND_0;
        }
        else {
          #line 1682 
          _LAND_0: 
          #line 1685 
          if ((int)_rtl8812ae_eq_n_byte(prate_section,(u8 *)"VHT",3U) != 0) {
            #line 1685 
            if ((int)_rtl8812ae_eq_n_byte(prf_path,(u8 *)"1T",2U) != 0) 
              #line 1687 
              rate_section = (unsigned char)4U; else 
                                                     #line 1685 
                                                     goto _LAND;
          }
          else {
            #line 1685 
            _LAND: 
            #line 1688 
            if ((int)_rtl8812ae_eq_n_byte(prate_section,(u8 *)"VHT",3U) != 0) {
              #line 1688 
              if ((int)_rtl8812ae_eq_n_byte(prf_path,(u8 *)"2T",2U) != 0) 
                #line 1690 
                rate_section = (unsigned char)5U;
            }
          }
        }
      }
    }
  }
  #line 1692 
  if ((int)_rtl8812ae_eq_n_byte(pbandwidth,(u8 *)"20M",3U) != 0) 
                                                                 #line 1693 
                                                                 bandwidth = (unsigned char)0U;
  else {
    #line 1694 
    if ((int)_rtl8812ae_eq_n_byte(pbandwidth,(u8 *)"40M",3U) != 0) 
                                                                   #line 1695 
                                                                   bandwidth = (unsigned char)1U;
    else {
      #line 1696 
      if ((int)_rtl8812ae_eq_n_byte(pbandwidth,(u8 *)"80M",3U) != 0) 
        #line 1697 
        bandwidth = (unsigned char)2U;
      else {
        #line 1698 
        if ((int)_rtl8812ae_eq_n_byte(pbandwidth,(u8 *)"160M",4U) != 0) 
          #line 1699 
          bandwidth = (unsigned char)3U;
      }
    }
  }
  #line 1701 
  if ((int)_rtl8812ae_eq_n_byte(pband,(u8 *)"2.4G",4U) != 0) {
    #line 1702 
    ret = _rtl8812ae_phy_get_chnl_idx_of_txpwr_lmt(hw,(unsigned char)0,(unsigned char)((int)channel));
    #line 1706 
    if ((int)ret == -1) 
                        #line 1707 
                        return;
    #line 1709 
    channel_index = (unsigned char)ret;
    #line 1711 
    prev_power_limit = rtlphy->txpwr_limit_2_4g[(int)regulation][(int)bandwidth][(int)rate_section][(int)channel_index][0];
    #line 1715 
    if ((int)power_limit < (int)prev_power_limit) 
                                                  #line 1717 
                                                  rtlphy->txpwr_limit_2_4g[(int)regulation][(int)bandwidth][(int)rate_section][(int)channel_index][0] = power_limit;
    #line 1720 
    _rtl_dbg_trace(rtlpriv,4ULL,5,(char *)"2.4G [regula %d][bw %d][sec %d][chnl %d][val %d]\n",(int)regulation,(int)bandwidth,(int)rate_section,(int)channel_index,(int)rtlphy->txpwr_limit_2_4g[(int)regulation][(int)bandwidth][(int)rate_section][(int)channel_index][0]);
  }
  else {
    #line 1725 
    if ((int)_rtl8812ae_eq_n_byte(pband,(u8 *)"5G",2U) != 0) {
      #line 1726 
      ret = _rtl8812ae_phy_get_chnl_idx_of_txpwr_lmt(hw,(unsigned char)1,(unsigned char)((int)channel));
      #line 1730 
      if ((int)ret == -1) 
                          #line 1731 
                          return;
      #line 1733 
      channel_index = (unsigned char)ret;
      #line 1735 
      prev_power_limit = rtlphy->txpwr_limit_5g[(int)regulation][(int)bandwidth][(int)rate_section][(int)channel_index][0];
      #line 1739 
      if ((int)power_limit < (int)prev_power_limit) 
                                                    #line 1741 
                                                    rtlphy->txpwr_limit_5g[(int)regulation][(int)bandwidth][(int)rate_section][(int)channel_index][0] = power_limit;
      #line 1743 
      _rtl_dbg_trace(rtlpriv,4ULL,5,(char *)"5G: [regul %d][bw %d][sec %d][chnl %d][val %d]\n",(int)regulation,(int)bandwidth,(int)rate_section,(int)channel,(int)rtlphy->txpwr_limit_5g[(int)regulation][(int)bandwidth][(int)rate_section][(int)channel_index][0]);
    }
    else {
      #line 1749 
      _rtl_dbg_trace(rtlpriv,4ULL,5,(char *)"Cannot recognize the band info in %s\n",pband);
      #line 1751 
      return;
    }
  }
  #line 1753 
  return;
}

#line 1755  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
static void _rtl8812ae_phy_config_bb_txpwr_lmt(struct ieee80211_hw *hw, u8 *regulation, u8 *band, u8 *bandwidth, u8 *rate_section, u8 *rf_path, u8 *channel, u8 *power_limit)
{
  #line 1761 
  _rtl8812ae_phy_set_txpower_limit(hw,regulation,band,bandwidth,rate_section,rf_path,channel,power_limit);
  #line 1762 
  return;
}

#line 1766  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
static void _rtl8821ae_phy_read_and_config_txpwr_lmt(struct ieee80211_hw *hw)
{
  #line 1771 
  u32 array_len;
  #line 1772 
  u8 **array;
  #line 1768 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 1769 
  struct rtl_hal *rtlhal = & rtlpriv->rtlhal;
  #line 1770 
  u32 i = 0U;
  #line 1774 
  if ((unsigned int)rtlhal->hw_type == 14U) {
    #line 1775 
    array_len = RTL8812AE_TXPWR_LMT_ARRAY_LEN;
    #line 1776 
    array = (u8 **)(& RTL8812AE_TXPWR_LMT);
  }
  else {
    #line 1778 
    array_len = RTL8821AE_TXPWR_LMT_ARRAY_LEN;
    #line 1779 
    array = (u8 **)(& RTL8821AE_TXPWR_LMT);
  }
  #line 1782 
  _rtl_dbg_trace(rtlpriv,4ULL,5,(char *)"\n");
  #line 1785 
  i = 0U;
  #line 1785 
  while (i < array_len) {
    {
      #line 1786 
      u8 *regulation = *(array + (unsigned long)i);
      #line 1787 
      u8 *band = *(array + (unsigned long)(i + 1U));
      #line 1788 
      u8 *bandwidth = *(array + (unsigned long)(i + 2U));
      #line 1789 
      u8 *rate = *(array + (unsigned long)(i + 3U));
      #line 1790 
      u8 *rf_path = *(array + (unsigned long)(i + 4U));
      #line 1791 
      u8 *chnl = *(array + (unsigned long)(i + 5U));
      #line 1792 
      u8 *val = *(array + (unsigned long)(i + 6U));
      #line 1794 
      _rtl8812ae_phy_config_bb_txpwr_lmt(hw,regulation,band,bandwidth,rate,rf_path,chnl,val);
    }
    #line 1785 
    i += 7U;
  }
  #line 1796 
  return;
}

#line 1800  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
static bool _rtl8821ae_phy_bb8821a_config_parafile(struct ieee80211_hw *hw)
{
  #line 1805 
  bool rtstatus;
  #line 1802 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 1803 
  struct rtl_phy *rtlphy = & rtlpriv->phy;
  #line 1804 
  struct rtl_efuse *rtlefuse = & ((struct rtl_priv *)hw->priv)->efuse;
  #line 1807 
  _rtl8821ae_phy_init_txpower_limit(hw);
  #line 1810 
  if ((unsigned int)rtlefuse->eeprom_regulatory != 2U) 
                                                       #line 1811 
                                                       _rtl8821ae_phy_read_and_config_txpwr_lmt(hw);
  #line 1813 
  rtstatus = _rtl8821ae_phy_config_bb_with_headerfile(hw,(unsigned char)0);
  #line 1815 
  if (! rtstatus) {
    #line 1816 
    printk((char *)"\001");
    #line 1817 
    return (_Bool)0;
  }
  #line 1819 
  _rtl8821ae_phy_init_tx_power_by_rate(hw);
  #line 1820 
  if ((unsigned int)rtlefuse->autoload_failflag == 0U) 
                                                       #line 1821 
                                                       rtstatus = _rtl8821ae_phy_config_bb_with_pgheaderfile(hw,(unsigned char)0);
  #line 1824 
  if (! rtstatus) {
    #line 1825 
    printk((char *)"\001");
    #line 1826 
    return (_Bool)0;
  }
  #line 1829 
  _rtl8821ae_phy_txpower_by_rate_configuration(hw);
  #line 1832 
  if ((unsigned int)rtlefuse->eeprom_regulatory != 2U) 
                                                       #line 1833 
                                                       _rtl8812ae_phy_convert_txpower_limit_to_power_index(hw);
  #line 1835 
  rtstatus = _rtl8821ae_phy_config_bb_with_headerfile(hw,(unsigned char)1);
  #line 1838 
  if (! rtstatus) {
    #line 1839 
    printk((char *)"\001");
    #line 1840 
    return (_Bool)0;
  }
  #line 1842 
  rtlphy->cck_high_power = (unsigned char)(rtl_get_bbreg(hw,2084U,512U) != 0U);
  #line 1844 
  return (_Bool)1;
}

#line 1848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
static bool __rtl8821ae_phy_config_with_headerfile(struct ieee80211_hw *hw, u32 *array_table, u16 arraylen, void (*set_reg)(struct ieee80211_hw *, u32 , u32 ))
{
  #line 1857 
  u8 cond;
  #line 1856 
  int i = 0;
  #line 1858 
  bool matched = (_Bool)1;
  #line 1858 
  bool skipped = (_Bool)0;
  #line 1860 
  while (i + 1 < (int)arraylen) {
    #line 1861 
    u32 v1 = *(array_table + (unsigned long)i);
    #line 1862 
    u32 v2 = *(array_table + ((unsigned long)i + (unsigned long)1U));
    #line 1864 
    if (((unsigned long)v1 & 3221225472UL) != 0UL) {
      #line 1865 
      if (((unsigned long)v1 & 2147483648UL) != 0UL) {
        #line 1866 
        cond = (unsigned char)((unsigned int)((unsigned char)((unsigned long)v1 >> 28)) & 3U);
        #line 1867 
        if ((unsigned int)cond == 3U) {
          #line 1868 
          matched = (_Bool)1;
          #line 1869 
          skipped = (_Bool)0;
        }
        else 
          #line 1870 
          if ((unsigned int)cond == 2U) 
                                        #line 1871 
                                        matched = (_Bool)((int)skipped == 0);
          else 
            #line 1873 
            if ((int)skipped != 0) 
                                   #line 1874 
                                   matched = (_Bool)0;
            else {
              #line 1876 
              if ((int)_rtl8821ae_check_positive(hw,v1,v2) != 0) {
                #line 1878 
                matched = (_Bool)1;
                #line 1879 
                skipped = (_Bool)1;
              }
              else {
                #line 1881 
                matched = (_Bool)0;
                #line 1882 
                skipped = (_Bool)0;
              }
            }
      }
      else 
        #line 1886 
        if (((unsigned long)v1 & 1073741824UL) != 0UL) ;
    }
    else 
      #line 1890 
      if ((int)matched != 0) 
                             #line 1891 
                             (*set_reg)(hw,v1,v2);
    #line 1893 
    i += 2;
  }
  #line 1896 
  return (_Bool)1;
}

#line 1899  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
static bool _rtl8821ae_phy_config_mac_with_headerfile(struct ieee80211_hw *hw)
{
  #line 1903 
  u32 arraylength;
  #line 1904 
  u32 *ptrarray;
  #line 1901 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 1902 
  struct rtl_hal *rtlhal = & rtlpriv->rtlhal;
  #line 1906 
  _rtl_dbg_trace(rtlpriv,4ULL,5,(char *)"Read MAC_REG_Array\n");
  #line 1907 
  if ((unsigned int)rtlhal->hw_type == 13U) {
    #line 1908 
    arraylength = RTL8821AE_MAC_1T_ARRAYLEN;
    #line 1909 
    ptrarray = (u32 *)(& RTL8821AE_MAC_REG_ARRAY);
  }
  else {
    #line 1911 
    arraylength = RTL8812AE_MAC_1T_ARRAYLEN;
    #line 1912 
    ptrarray = (u32 *)(& RTL8812AE_MAC_REG_ARRAY);
  }
  #line 1914 
  _rtl_dbg_trace(rtlpriv,4ULL,4,(char *)"Img: MAC_REG_ARRAY LEN %d\n",arraylength);
  #line 1917 
  return __rtl8821ae_phy_config_with_headerfile(hw,ptrarray,
                                             (unsigned short)((int)((unsigned short)arraylength)),
                                             & rtl_write_byte_with_val32);
}

#line 1921  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
static bool _rtl8821ae_phy_config_bb_with_headerfile(struct ieee80211_hw *hw, u8 configtype)
{
  #line 1926 
  u32 *array_table;
  #line 1927 
  u16 arraylen;
  #line 1924 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 1925 
  struct rtl_hal *rtlhal = & rtlpriv->rtlhal;
  #line 1929 
  if ((unsigned int)configtype == 0U) {
    #line 1930 
    if ((unsigned int)rtlhal->hw_type == 14U) {
      #line 1931 
      arraylen = (unsigned short)RTL8812AE_PHY_REG_1TARRAYLEN;
      #line 1932 
      array_table = (u32 *)(& RTL8812AE_PHY_REG_ARRAY);
    }
    else {
      #line 1934 
      arraylen = (unsigned short)RTL8821AE_PHY_REG_1TARRAYLEN;
      #line 1935 
      array_table = (u32 *)(& RTL8821AE_PHY_REG_ARRAY);
    }
    #line 1938 
    return __rtl8821ae_phy_config_with_headerfile(hw,array_table,
                                             (unsigned short)((int)arraylen),
                                             & _rtl8821ae_config_bb_reg);
  }
  else 
    #line 1941 
    if ((unsigned int)configtype == 1U) {
      #line 1942 
      if ((unsigned int)rtlhal->hw_type == 14U) {
        #line 1943 
        arraylen = (unsigned short)RTL8812AE_AGC_TAB_1TARRAYLEN;
        #line 1944 
        array_table = (u32 *)(& RTL8812AE_AGC_TAB_ARRAY);
      }
      else {
        #line 1946 
        arraylen = (unsigned short)RTL8821AE_AGC_TAB_1TARRAYLEN;
        #line 1947 
        array_table = (u32 *)(& RTL8821AE_AGC_TAB_ARRAY);
      }
      #line 1950 
      return __rtl8821ae_phy_config_with_headerfile(hw,array_table,
                                               (unsigned short)((int)arraylen),
                                               & rtl_set_bbreg_with_dwmask);
    }
  #line 1954 
  return (_Bool)1;
}

#line 1957  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
static u8 _rtl8821ae_get_rate_section_index(u32 regaddr)
{
  #line 1959 
  u8 index = (unsigned char)0U;
  #line 1960 
  regaddr &= 4095U;
  #line 1961 
  if (regaddr + 4294964192U <= 44U) 
                                    #line 1962 
                                    index = (unsigned char)((regaddr + 4294964192U) / 4U);
  else 
    #line 1963 
    if (regaddr + 4294963680U <= 44U) 
                                      #line 1964 
                                      index = (unsigned char)((regaddr + 4294963680U) / 4U);
    else {
      #line 1966 
      bool __warned;
      #line 1966 
      int __ret_warn_once = 1;
      #line 1966 
      if ((long)(__ret_warn_once != 0) != 0L && (long)(! __warned) != 0L) {
        #line 1966 
        __warned = (_Bool)1;
        {
          #line 1966 
          int __ret_warn_on = 1;
          #line 1966 
          if ((long)(__ret_warn_on != 0) != 0L) {
            #line 1966 
            __warn_printk((char *)"rtl8821ae: Invalid RegAddr 0x%x\n",regaddr);
            #line 1967 
            ldv_inline_asm();
            #line 1968 
            ldv_inline_asm();
          }
          #line 1966 
          long tmp = (long)(__ret_warn_on != 0);
        }
      }
      #line 1966 
      long tmp_3 = (long)(__ret_warn_once != 0);
    }
  #line 1968 
  return index;
}

#line 1971  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
static void _rtl8821ae_store_tx_power_by_rate(struct ieee80211_hw *hw, u32 band, u32 rfpath, u32 txnum, u32 regaddr, u32 bitmask, u32 data)
{
  #line 1976 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 1977 
  struct rtl_phy *rtlphy = & rtlpriv->phy;
  #line 1978 
  u8 rate_section = _rtl8821ae_get_rate_section_index(regaddr);
  #line 1980 
  if (band > 1U) {
    #line 1981 
    _rtl_dbg_trace(rtlpriv,4ULL,2,(char *)"Invalid Band %d\n",band);
    #line 1982 
    band = 0U;
  }
  #line 1984 
  if (rfpath > 3U) {
    #line 1985 
    _rtl_dbg_trace(rtlpriv,4ULL,2,(char *)"Invalid RfPath %d\n",rfpath);
    #line 1986 
    rfpath = 3U;
  }
  #line 1988 
  if (txnum > 3U) {
    #line 1989 
    _rtl_dbg_trace(rtlpriv,4ULL,2,(char *)"Invalid TxNum %d\n",txnum);
    #line 1990 
    txnum = 3U;
  }
  #line 1992 
  rtlphy->tx_power_by_rate_offset[band][rfpath][txnum][(int)rate_section] = data;
  #line 1993 
  _rtl_dbg_trace(rtlpriv,4ULL,4,(char *)"TxPwrByRateOffset[Band %d][RfPath %d][TxNum %d][RateSection %d] = 0x%x\n",band,rfpath,txnum,(int)rate_section,rtlphy->tx_power_by_rate_offset[band][rfpath][txnum][(int)rate_section]);
  #line 1994 
  return;
}

#line 1999  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
static bool _rtl8821ae_phy_config_bb_with_pgheaderfile(struct ieee80211_hw *hw, u8 configtype)
{
  #line 2004 
  int i;
  #line 2005 
  u32 *array;
  #line 2006 
  u16 arraylen;
  #line 2007 
  u32 v1;
  #line 2007 
  u32 v2;
  #line 2007 
  u32 v3;
  #line 2007 
  u32 v4;
  #line 2007 
  u32 v5;
  #line 2007 
  u32 v6;
  #line 2002 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 2003 
  struct rtl_hal *rtlhal = & rtlpriv->rtlhal;
  #line 2009 
  if ((unsigned int)rtlhal->hw_type == 14U) {
    #line 2010 
    arraylen = (unsigned short)RTL8812AE_PHY_REG_ARRAY_PGLEN;
    #line 2011 
    array = (u32 *)(& RTL8812AE_PHY_REG_ARRAY_PG);
  }
  else {
    #line 2013 
    arraylen = (unsigned short)RTL8821AE_PHY_REG_ARRAY_PGLEN;
    #line 2014 
    array = (u32 *)(& RTL8821AE_PHY_REG_ARRAY_PG);
  }
  #line 2017 
  if ((unsigned int)configtype != 0U) {
    #line 2018 
    _rtl_dbg_trace(rtlpriv,16ULL,5,(char *)"configtype != BaseBand_Config_PHY_REG\n");
    #line 2020 
    return (_Bool)1;
  }
  #line 2022 
  i = 0;
  #line 2022 
  while ((int)arraylen > i) {
    #line 2023 
    v1 = *(array + (unsigned long)i);
    #line 2024 
    v2 = *(array + ((unsigned long)i + (unsigned long)1U));
    #line 2025 
    v3 = *(array + ((unsigned long)i + (unsigned long)2U));
    #line 2026 
    v4 = *(array + ((unsigned long)i + (unsigned long)3U));
    #line 2027 
    v5 = *(array + ((unsigned long)i + (unsigned long)4U));
    #line 2028 
    v6 = *(array + ((unsigned long)i + (unsigned long)5U));
    #line 2030 
    if (v1 <= 3452816844U) {
      #line 2031 
      if ((unsigned int)rtlhal->hw_type == 14U && (v4 == 254U || v4 == 4094U)) {
        #line 2033 
        msleep(50U);
        #line 2034 
        goto __Cont;
      }
      #line 2037 
      if ((unsigned int)rtlhal->hw_type == 13U) 
        #line 2038 
        if (v4 == 254U) 
                        #line 2039 
                        msleep(50U);
        else 
          #line 2040 
          if (v4 == 253U) 
                          #line 2041 
                          __const_udelay(21475000UL);
          else 
            #line 2042 
            if (v4 == 252U) 
                            #line 2043 
                            __const_udelay(4295000UL);
            else 
              #line 2044 
              if (v4 == 251U) 
                              #line 2045 
                              __const_udelay(214750UL);
              else 
                #line 2046 
                if (v4 == 250U) 
                                #line 2047 
                                __const_udelay(21475UL);
                else 
                  #line 2048 
                  if (v4 == 249U) 
                                  #line 2049 
                                  __const_udelay(4295UL);
      #line 2051 
      _rtl8821ae_store_tx_power_by_rate(hw,v1,v2,v3,v4,v5,v6);
      #line 2053 
      goto __Cont;
    }
    else {
      #line 2056 
      if (! _rtl8821ae_check_condition(hw,v1)) {
        #line 2057 
        i += 2;
        #line 2058 
        v1 = *(array + (unsigned long)i);
        #line 2059 
        v2 = *(array + ((unsigned long)i + (unsigned long)1U));
        #line 2060 
        v3 = *(array + ((unsigned long)i + (unsigned long)2U));
        #line 2061 
        while (v2 != 57005U) {
          #line 2062 
          i += 3;
          #line 2063 
          v1 = *(array + (unsigned long)i);
          #line 2064 
          v2 = *(array + ((unsigned long)i + (unsigned long)1U));
          #line 2065 
          v3 = *(array + ((unsigned long)i + (unsigned long)2U));
        }
      }
    }
    #line 2022 
    __Cont: 
            #line 2022 
    i += 6;
  }
  #line 2071 
  return (_Bool)1;
}

#line 2074  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
bool rtl8812ae_phy_config_rf_with_headerfile(struct ieee80211_hw *hw, enum radio_path rfpath)
{
  #line 2077 
  u32 *radioa_array_table_a;
  #line 2077 
  u32 *radioa_array_table_b;
  #line 2078 
  u16 radioa_arraylen_a;
  #line 2078 
  u16 radioa_arraylen_b;
  #line 2079 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 2081 
  radioa_arraylen_a = (unsigned short)RTL8812AE_RADIOA_1TARRAYLEN;
  #line 2082 
  radioa_array_table_a = (u32 *)(& RTL8812AE_RADIOA_ARRAY);
  #line 2083 
  radioa_arraylen_b = (unsigned short)RTL8812AE_RADIOB_1TARRAYLEN;
  #line 2084 
  radioa_array_table_b = (u32 *)(& RTL8812AE_RADIOB_ARRAY);
  #line 2085 
  _rtl_dbg_trace(rtlpriv,4ULL,4,(char *)"Radio_A:RTL8821AE_RADIOA_ARRAY %d\n",(int)radioa_arraylen_a);
  #line 2087 
  _rtl_dbg_trace(rtlpriv,4ULL,4,(char *)"Radio No %x\n",(unsigned int)rfpath);
  #line 2088 
  switch ((unsigned int)rfpath) {
    #line 2089 
    case (unsigned int)0: 
                          #line 2089 
    ;
    #line 2090 
    return __rtl8821ae_phy_config_with_headerfile(hw,radioa_array_table_a,
                                             (unsigned short)((int)radioa_arraylen_a),
                                             & _rtl8821ae_config_rf_radio_a);
    #line 2094 
    case (unsigned int)1: 
                          #line 2094 
    ;
    #line 2095 
    return __rtl8821ae_phy_config_with_headerfile(hw,radioa_array_table_b,
                                               (unsigned short)((int)radioa_arraylen_b),
                                               & _rtl8821ae_config_rf_radio_b);
    #line 2099 
    case (unsigned int)2: 
                          #line 2099 
    ;
    #line 2100 
    case (unsigned int)3: 
                          #line 2100 
    ;
    #line 2101 
    printk((char *)"\001",(unsigned int)rfpath);
    #line 2102 
    break;
  }
  #line 2104 
  return (_Bool)1;
}

#line 2107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
bool rtl8821ae_phy_config_rf_with_headerfile(struct ieee80211_hw *hw, enum radio_path rfpath)
{
  #line 2110 
  u32 *radioa_array_table;
  #line 2111 
  u16 radioa_arraylen;
  #line 2112 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 2114 
  radioa_arraylen = (unsigned short)RTL8821AE_RADIOA_1TARRAYLEN;
  #line 2115 
  radioa_array_table = (u32 *)(& RTL8821AE_RADIOA_ARRAY);
  #line 2116 
  _rtl_dbg_trace(rtlpriv,4ULL,4,(char *)"Radio_A:RTL8821AE_RADIOA_ARRAY %d\n",(int)radioa_arraylen);
  #line 2118 
  _rtl_dbg_trace(rtlpriv,4ULL,4,(char *)"Radio No %x\n",(unsigned int)rfpath);
  #line 2119 
  switch ((unsigned int)rfpath) {
    #line 2120 
    case (unsigned int)0: 
                          #line 2120 
    ;
    #line 2121 
    return __rtl8821ae_phy_config_with_headerfile(hw,radioa_array_table,
                                             (unsigned short)((int)radioa_arraylen),
                                             & _rtl8821ae_config_rf_radio_a);
    #line 2126 
    case (unsigned int)1: 
                          #line 2126 
    ;
    #line 2127 
    case (unsigned int)2: 
                          #line 2127 
    ;
    #line 2128 
    case (unsigned int)3: 
                          #line 2128 
    ;
    #line 2129 
    printk((char *)"\001",(unsigned int)rfpath);
    #line 2130 
    break;
  }
  #line 2132 
  return (_Bool)1;
}

#line 2135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
void rtl8821ae_phy_get_hw_reg_originalvalue(struct ieee80211_hw *hw)
{
  #line 2137 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 2138 
  struct rtl_phy *rtlphy = & rtlpriv->phy;
  #line 2140 
  rtlphy->default_initialgain[0] = (unsigned char)rtl_get_bbreg(hw,3152U,255U);
  #line 2142 
  rtlphy->default_initialgain[1] = (unsigned char)rtl_get_bbreg(hw,3160U,255U);
  #line 2144 
  rtlphy->default_initialgain[2] = (unsigned char)rtl_get_bbreg(hw,3168U,255U);
  #line 2146 
  rtlphy->default_initialgain[3] = (unsigned char)rtl_get_bbreg(hw,3176U,255U);
  #line 2149 
  _rtl_dbg_trace(rtlpriv,4ULL,5,(char *)"Default initial gain (c50=0x%x, c58=0x%x, c60=0x%x, c68=0x%x\n",(int)rtlphy->default_initialgain[0],(int)rtlphy->default_initialgain[1],(int)rtlphy->default_initialgain[2],(int)rtlphy->default_initialgain[3]);
  #line 2156 
  rtlphy->framesync = (unsigned char)rtl_get_bbreg(hw,3128U,255U);
  #line 2158 
  rtlphy->framesync_c34 = rtl_get_bbreg(hw,3124U,4294967295U);
  #line 2161 
  _rtl_dbg_trace(rtlpriv,4ULL,5,(char *)"Default framesync (0x%x) = 0x%x\n",3128,(int)rtlphy->framesync);
  #line 2162 
  return;
}

#line 2166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
static void phy_init_bb_rf_register_definition(struct ieee80211_hw *hw)
{
  #line 2168 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 2169 
  struct rtl_phy *rtlphy = & rtlpriv->phy;
  #line 2171 
  rtlphy->phyreg_def[0].rfintfs = 2160U;
  #line 2172 
  rtlphy->phyreg_def[1].rfintfs = 2160U;
  #line 2174 
  rtlphy->phyreg_def[0].rfintfo = 2144U;
  #line 2175 
  rtlphy->phyreg_def[1].rfintfo = 2148U;
  #line 2177 
  rtlphy->phyreg_def[0].rfintfe = 2144U;
  #line 2178 
  rtlphy->phyreg_def[1].rfintfe = 2148U;
  #line 2180 
  rtlphy->phyreg_def[0].rf3wire_offset = 3216U;
  #line 2181 
  rtlphy->phyreg_def[1].rf3wire_offset = 3728U;
  #line 2183 
  rtlphy->phyreg_def[0].rfhssi_para2 = 2224U;
  #line 2184 
  rtlphy->phyreg_def[1].rfhssi_para2 = 2224U;
  #line 2186 
  rtlphy->phyreg_def[0].rf_rb = 3336U;
  #line 2187 
  rtlphy->phyreg_def[1].rf_rb = 3400U;
  #line 2189 
  rtlphy->phyreg_def[0].rf_rbpi = 3332U;
  #line 2190 
  rtlphy->phyreg_def[1].rf_rbpi = 3396U;
  #line 2191 
  return;
}

#line 2193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
void rtl8821ae_phy_get_txpower_level(struct ieee80211_hw *hw, long *powerlevel)
{
  #line 2197 
  u8 txpwr_level;
  #line 2198 
  long txpwr_dbm;
  #line 2195 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 2196 
  struct rtl_phy *rtlphy = & rtlpriv->phy;
  #line 2200 
  txpwr_level = rtlphy->cur_cck_txpwridx;
  #line 2201 
  txpwr_dbm = _rtl8821ae_phy_txpwr_idx_to_dbm(hw,(enum wireless_mode)WIRELESS_MODE_B,(unsigned char)((int)txpwr_level));
  #line 2203 
  txpwr_level = rtlphy->cur_ofdm24g_txpwridx;
  #line 2204 
  ;
  #line 2204 
  if (_rtl8821ae_phy_txpwr_idx_to_dbm(hw,(enum wireless_mode)WIRELESS_MODE_G,
                                      (unsigned char)((int)txpwr_level)) > txpwr_dbm) 
    #line 2207 
    txpwr_dbm = _rtl8821ae_phy_txpwr_idx_to_dbm(hw,(enum wireless_mode)WIRELESS_MODE_G,(unsigned char)((int)txpwr_level));
  #line 2210 
  txpwr_level = rtlphy->cur_ofdm24g_txpwridx;
  #line 2211 
  ;
  #line 2211 
  if (_rtl8821ae_phy_txpwr_idx_to_dbm(hw,
                                        (enum wireless_mode)WIRELESS_MODE_N_24G,
                                        (unsigned char)((int)txpwr_level)) > txpwr_dbm) 
    #line 2214 
    txpwr_dbm = _rtl8821ae_phy_txpwr_idx_to_dbm(hw,(enum wireless_mode)WIRELESS_MODE_N_24G,(unsigned char)((int)txpwr_level));
  #line 2217 
  *powerlevel = txpwr_dbm;
  #line 2218 
  return;
}

#line 2220  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
static bool _rtl8821ae_phy_get_chnl_index(u8 channel, u8 *chnl_index)
{
  #line 2222 
  u8 i = (unsigned char)0U;
  #line 2223 
  bool in_24g = (_Bool)1;
  #line 2225 
  if ((unsigned int)channel <= 14U) {
    #line 2226 
    in_24g = (_Bool)1;
    #line 2227 
    *chnl_index = (unsigned char)((unsigned int)channel + 255U);
  }
  else {
    #line 2229 
    in_24g = (_Bool)0;
    #line 2231 
    i = (unsigned char)0U;
    #line 2231 
    while ((unsigned int)i <= 48U) {
      #line 2232 
      if ((int)channel5g[(int)i] == (int)channel) {
        #line 2233 
        *chnl_index = i;
        #line 2234 
        return in_24g;
      }
      #line 2231 
      i = (u8)((int)i + 1);
    }
  }
  #line 2238 
  return in_24g;
}

#line 2241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
static s8 _rtl8821ae_phy_get_ratesection_intxpower_byrate(u8 path, u8 rate)
{
  #line 2243 
  s8 rate_section = (signed char)0;
  #line 2244 
  switch ((int)rate) {
    #line 2245 
    case 0: 
            #line 2245 
    ;
    #line 2246 
    case 1: 
            #line 2246 
    ;
    #line 2247 
    case 2: 
            #line 2247 
    ;
    #line 2248 
    case 3: 
            #line 2248 
    ;
    #line 2249 
    rate_section = (signed char)0;
    #line 2250 
    break;
    #line 2251 
    case 4: 
            #line 2251 
    ;
    #line 2252 
    case 5: 
            #line 2252 
    ;
    #line 2253 
    case 6: 
            #line 2253 
    ;
    #line 2254 
    case 7: 
            #line 2254 
    ;
    #line 2255 
    rate_section = (signed char)1;
    #line 2256 
    break;
    #line 2257 
    case 8: 
            #line 2257 
    ;
    #line 2258 
    case 9: 
            #line 2258 
    ;
    #line 2259 
    case 10: 
             #line 2259 
    ;
    #line 2260 
    case 11: 
             #line 2260 
    ;
    #line 2261 
    rate_section = (signed char)2;
    #line 2262 
    break;
    #line 2263 
    case 12: 
             #line 2263 
    ;
    #line 2264 
    case 13: 
             #line 2264 
    ;
    #line 2265 
    case 14: 
             #line 2265 
    ;
    #line 2266 
    case 15: 
             #line 2266 
    ;
    #line 2267 
    rate_section = (signed char)3;
    #line 2268 
    break;
    #line 2269 
    case 16: 
             #line 2269 
    ;
    #line 2270 
    case 17: 
             #line 2270 
    ;
    #line 2271 
    case 18: 
             #line 2271 
    ;
    #line 2272 
    case 19: 
             #line 2272 
    ;
    #line 2273 
    rate_section = (signed char)4;
    #line 2274 
    break;
    #line 2275 
    case 20: 
             #line 2275 
    ;
    #line 2276 
    case 21: 
             #line 2276 
    ;
    #line 2277 
    case 22: 
             #line 2277 
    ;
    #line 2278 
    case 23: 
             #line 2278 
    ;
    #line 2279 
    rate_section = (signed char)5;
    #line 2280 
    break;
    #line 2281 
    case 24: 
             #line 2281 
    ;
    #line 2282 
    case 25: 
             #line 2282 
    ;
    #line 2283 
    case 26: 
             #line 2283 
    ;
    #line 2284 
    case 27: 
             #line 2284 
    ;
    #line 2285 
    rate_section = (signed char)6;
    #line 2286 
    break;
    #line 2287 
    case 44: 
             #line 2287 
    ;
    #line 2288 
    case 45: 
             #line 2288 
    ;
    #line 2289 
    case 46: 
             #line 2289 
    ;
    #line 2290 
    case 47: 
             #line 2290 
    ;
    #line 2291 
    rate_section = (signed char)7;
    #line 2292 
    break;
    #line 2293 
    case 48: 
             #line 2293 
    ;
    #line 2294 
    case 49: 
             #line 2294 
    ;
    #line 2295 
    case 50: 
             #line 2295 
    ;
    #line 2296 
    case 51: 
             #line 2296 
    ;
    #line 2297 
    rate_section = (signed char)8;
    #line 2298 
    break;
    #line 2299 
    case 52: 
             #line 2299 
    ;
    #line 2300 
    case 53: 
             #line 2300 
    ;
    #line 2301 
    case 54: 
             #line 2301 
    ;
    #line 2302 
    case 55: 
             #line 2302 
    ;
    #line 2303 
    rate_section = (signed char)9;
    #line 2304 
    break;
    #line 2305 
    case 56: 
             #line 2305 
    ;
    #line 2306 
    case 57: 
             #line 2306 
    ;
    #line 2307 
    case 58: 
             #line 2307 
    ;
    #line 2308 
    case 59: 
             #line 2308 
    ;
    #line 2309 
    rate_section = (signed char)10;
    #line 2310 
    break;
    #line 2311 
    case 60: 
             #line 2311 
    ;
    #line 2312 
    case 61: 
             #line 2312 
    ;
    #line 2313 
    case 62: 
             #line 2313 
    ;
    #line 2314 
    case 63: 
             #line 2314 
    ;
    #line 2315 
    rate_section = (signed char)11;
    #line 2316 
    break;
    #line 2317 
    default: 
             #line 2317 
    ;
    {
      #line 2318 
      bool __warned;
      #line 2318 
      int __ret_warn_once = 1;
      #line 2318 
      if ((long)(__ret_warn_once != 0) != 0L && (long)(! __warned) != 0L) {
        #line 2318 
        __warned = (_Bool)1;
        {
          #line 2318 
          int __ret_warn_on = 1;
          #line 2318 
          if ((long)(__ret_warn_on != 0) != 0L) {
            #line 2318 
            __warn_printk((char *)"rtl8821ae: Rate_Section is Illegal\n");
            #line 2319 
            ldv_inline_asm();
            #line 2320 
            ldv_inline_asm();
          }
          #line 2318 
          long tmp = (long)(__ret_warn_on != 0);
        }
      }
      #line 2318 
      long tmp_3 = (long)(__ret_warn_once != 0);
    }
    #line 2319 
    break;
  }
  #line 2322 
  return rate_section;
}

#line 2325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
static s8 _rtl8812ae_phy_get_world_wide_limit(s8 *limit_table)
{
  #line 2327 
  s8 min = *limit_table;
  #line 2328 
  u8 i = (unsigned char)0U;
  #line 2330 
  i = (unsigned char)0U;
  #line 2330 
  while ((unsigned int)i <= 3U) {
    #line 2331 
    if ((int)*(limit_table + (unsigned long)i) < (int)min) 
                                                           #line 2332 
                                                           min = *(limit_table + (unsigned long)i);
    #line 2330 
    i = (u8)((int)i + 1);
  }
  #line 2334 
  return min;
}

#line 2337  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
static s8 _rtl8812ae_phy_get_txpower_limit(struct ieee80211_hw *hw, u8 band, enum ht_channel_width bandwidth, enum radio_path rf_path, u8 rate, u8 channel)
{
  #line 2348 
  u16 regu;
  #line 2348 
  u16 bdwidth;
  #line 2348 
  u16 sec;
  #line 2348 
  u16 chnl;
  #line 2343 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 2344 
  struct rtl_efuse *rtlefuse = & rtlpriv->efuse;
  #line 2345 
  struct rtl_phy *rtlphy = & rtlpriv->phy;
  #line 2346 
  short band_temp = (short)(-1);
  #line 2346 
  short regulation = (short)(-1);
  #line 2346 
  short bandwidth_temp = (short)(-1);
  #line 2347 
  short rate_section = (short)(-1);
  #line 2347 
  short channel_temp = (short)(-1);
  #line 2349 
  s8 power_limit = (signed char)63;
  #line 2351 
  if ((unsigned int)rtlefuse->eeprom_regulatory == 2U) 
                                                       #line 2352 
                                                       return (signed char)63;
  #line 2354 
  regulation = (short)3;
  #line 2356 
  if ((unsigned int)band == 0U) 
                                #line 2357 
                                band_temp = (short)0;
  else 
    #line 2358 
    if ((unsigned int)band == 1U) 
                                  #line 2359 
                                  band_temp = (short)1;
  #line 2361 
  if (bandwidth == (unsigned int)HT_CHANNEL_WIDTH_20) 
                                                      #line 2362 
                                                      bandwidth_temp = (short)0;
  else 
    #line 2363 
    if (bandwidth == (unsigned int)HT_CHANNEL_WIDTH_20_40) 
                                                           #line 2364 
                                                           bandwidth_temp = (short)1;
    else 
      #line 2365 
      if (bandwidth == (unsigned int)HT_CHANNEL_WIDTH_80) 
                                                          #line 2366 
                                                          bandwidth_temp = (short)2;
  #line 2368 
  switch ((int)rate) {
    #line 2369 
    case 0: 
            #line 2369 
    ;
    #line 2370 
    case 1: 
            #line 2370 
    ;
    #line 2371 
    case 2: 
            #line 2371 
    ;
    #line 2372 
    case 3: 
            #line 2372 
    ;
    #line 2373 
    rate_section = (short)0;
    #line 2374 
    break;
    #line 2375 
    case 4: 
            #line 2375 
    ;
    #line 2376 
    case 5: 
            #line 2376 
    ;
    #line 2377 
    case 6: 
            #line 2377 
    ;
    #line 2378 
    case 7: 
            #line 2378 
    ;
    #line 2379 
    case 8: 
            #line 2379 
    ;
    #line 2380 
    case 9: 
            #line 2380 
    ;
    #line 2381 
    case 10: 
             #line 2381 
    ;
    #line 2382 
    case 11: 
             #line 2382 
    ;
    #line 2383 
    rate_section = (short)1;
    #line 2384 
    break;
    #line 2385 
    case 12: 
             #line 2385 
    ;
    #line 2386 
    case 13: 
             #line 2386 
    ;
    #line 2387 
    case 14: 
             #line 2387 
    ;
    #line 2388 
    case 15: 
             #line 2388 
    ;
    #line 2389 
    case 16: 
             #line 2389 
    ;
    #line 2390 
    case 17: 
             #line 2390 
    ;
    #line 2391 
    case 18: 
             #line 2391 
    ;
    #line 2392 
    case 19: 
             #line 2392 
    ;
    #line 2393 
    rate_section = (short)2;
    #line 2394 
    break;
    #line 2395 
    case 20: 
             #line 2395 
    ;
    #line 2396 
    case 21: 
             #line 2396 
    ;
    #line 2397 
    case 22: 
             #line 2397 
    ;
    #line 2398 
    case 23: 
             #line 2398 
    ;
    #line 2399 
    case 24: 
             #line 2399 
    ;
    #line 2400 
    case 25: 
             #line 2400 
    ;
    #line 2401 
    case 26: 
             #line 2401 
    ;
    #line 2402 
    case 27: 
             #line 2402 
    ;
    #line 2403 
    rate_section = (short)3;
    #line 2404 
    break;
    #line 2405 
    case 44: 
             #line 2405 
    ;
    #line 2406 
    case 45: 
             #line 2406 
    ;
    #line 2407 
    case 46: 
             #line 2407 
    ;
    #line 2408 
    case 47: 
             #line 2408 
    ;
    #line 2409 
    case 48: 
             #line 2409 
    ;
    #line 2410 
    case 49: 
             #line 2410 
    ;
    #line 2411 
    case 50: 
             #line 2411 
    ;
    #line 2412 
    case 51: 
             #line 2412 
    ;
    #line 2413 
    case 52: 
             #line 2413 
    ;
    #line 2414 
    case 53: 
             #line 2414 
    ;
    #line 2415 
    rate_section = (short)4;
    #line 2416 
    break;
    #line 2417 
    case 54: 
             #line 2417 
    ;
    #line 2418 
    case 55: 
             #line 2418 
    ;
    #line 2419 
    case 56: 
             #line 2419 
    ;
    #line 2420 
    case 57: 
             #line 2420 
    ;
    #line 2421 
    case 58: 
             #line 2421 
    ;
    #line 2422 
    case 59: 
             #line 2422 
    ;
    #line 2423 
    case 60: 
             #line 2423 
    ;
    #line 2424 
    case 61: 
             #line 2424 
    ;
    #line 2425 
    case 62: 
             #line 2425 
    ;
    #line 2426 
    case 63: 
             #line 2426 
    ;
    #line 2427 
    rate_section = (short)5;
    #line 2428 
    break;
    #line 2429 
    default: 
             #line 2429 
    ;
    #line 2430 
    _rtl_dbg_trace(rtlpriv,65536ULL,4,(char *)"Wrong rate 0x%x\n",(int)rate);
    #line 2432 
    break;
  }
  #line 2435 
  if ((int)band_temp == 1 && (int)rate_section == 0) 
                                                     #line 2436 
                                                     _rtl_dbg_trace(rtlpriv,65536ULL,4,(char *)"Wrong rate 0x%x: No CCK in 5G Band\n",(int)rate);
  #line 2441 
  if ((int)rate_section == 1) 
                              #line 2442 
                              bandwidth_temp = (short)0;
  #line 2447 
  if ((unsigned int)rate_section + 65534U <= 1U && ((unsigned int)band == 1U && (int)bandwidth_temp == 2)) 
    #line 2449 
    bandwidth_temp = (short)1;
  #line 2451 
  if ((unsigned int)band == 0U) {
    #line 2452 
    channel_temp = (short)_rtl8812ae_phy_get_chnl_idx_of_txpwr_lmt(hw,(unsigned char)0,
                                               (unsigned char)((int)channel));
  }
  else 
    #line 2454 
    if ((unsigned int)band == 1U) {
      #line 2455 
      channel_temp = (short)_rtl8812ae_phy_get_chnl_idx_of_txpwr_lmt(hw,(unsigned char)1,
                                                 (unsigned char)((int)channel));
    }
  #line 2460 
  if ((((int)band_temp == -1 || (int)regulation == -1) || ((int)bandwidth_temp == -1 || (int)rate_section == -1)) || (int)channel_temp == -1) {
    #line 2462 
    _rtl_dbg_trace(rtlpriv,65536ULL,4,(char *)"Wrong index value to access power limit table [band %d][regulation %d][bandwidth %d][rf_path %d][rate_section %d][chnl %d]\n",(int)band_temp,(int)regulation,(int)bandwidth_temp,(unsigned int)rf_path,(int)rate_section,(int)channel_temp);
    #line 2466 
    return (signed char)63;
  }
  #line 2469 
  regu = (unsigned short)regulation;
  #line 2470 
  bdwidth = (unsigned short)bandwidth_temp;
  #line 2471 
  sec = (unsigned short)rate_section;
  #line 2472 
  chnl = (unsigned short)channel_temp;
  #line 2474 
  if ((unsigned int)band == 0U) {
    #line 2476 
    u8 i;
    #line 2475 
    s8 limits[10U] = {(signed char)0};
    #line 2478 
    i = (unsigned char)0U;
    #line 2478 
    while ((unsigned int)i <= 3U) {
      #line 2479 
      limits[(int)i] = rtlphy->txpwr_limit_2_4g[(int)i][(int)bdwidth][(int)sec][(int)chnl][(unsigned int)rf_path];
      #line 2478 
      i = (u8)((int)i + 1);
    }
    #line 2482 
    if ((int)regulation == 3) 
                              #line 2482 
                              power_limit = _rtl8812ae_phy_get_world_wide_limit((s8 *)(& limits)); else 
                                                                    #line 2482 
                                                                    power_limit = rtlphy->txpwr_limit_2_4g[(int)regu][(int)bdwidth][(int)sec][(int)chnl][(unsigned int)rf_path];
  }
  else 
    #line 2486 
    if ((unsigned int)band == 1U) {
      #line 2488 
      u8 i_0;
      #line 2487 
      s8 limits_0[10U] = {(signed char)0};
      #line 2490 
      i_0 = (unsigned char)0U;
      #line 2490 
      while ((unsigned int)i_0 <= 3U) {
        #line 2491 
        limits_0[(int)i_0] = rtlphy->txpwr_limit_5g[(int)i_0][(int)bdwidth][(int)sec][(int)chnl][(unsigned int)rf_path];
        #line 2490 
        i_0 = (u8)((int)i_0 + 1);
      }
      #line 2494 
      if ((int)regulation == 3) 
                                #line 2494 
                                power_limit = _rtl8812ae_phy_get_world_wide_limit((s8 *)(& limits_0)); else 
                                                                    #line 2494 
                                                                    power_limit = rtlphy->txpwr_limit_5g[(int)regu][(int)chnl][(int)sec][(int)chnl][(unsigned int)rf_path];
    }
    else 
         #line 2499 
         _rtl_dbg_trace(rtlpriv,4ULL,4,(char *)"No power limit table of the specified band\n");
  #line 2502 
  return power_limit;
}

#line 2505  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
static s8 _rtl8821ae_phy_get_txpower_by_rate(struct ieee80211_hw *hw, u8 band, u8 path, u8 rate)
{
  #line 2510 
  u8 rate_section;
  #line 2510 
  u8 tx_num;
  #line 2508 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 2509 
  struct rtl_phy *rtlphy = & rtlpriv->phy;
  #line 2510 
  u8 shift = (unsigned char)0U;
  #line 2511 
  s8 tx_pwr_diff = (signed char)0;
  #line 2512 
  s8 limit = (signed char)0;
  #line 2514 
  rate_section = (unsigned char)_rtl8821ae_phy_get_ratesection_intxpower_byrate((unsigned char)((int)path),
                                                      (unsigned char)((int)rate));
  #line 2515 
  tx_num = (unsigned char)3U;
  #line 2517 
  if ((unsigned int)tx_num == 3U) 
    #line 2518 
    if ((unsigned int)rate + 236U <= 7U || (unsigned int)rate + 200U <= 7U) 
      #line 2520 
      tx_num = (unsigned char)1U; else 
                                       #line 2522 
                                       tx_num = (unsigned char)0U;
  #line 2525 
  switch ((int)rate) {
    #line 2526 
    case 0: 
            #line 2526 
    ;
    #line 2527 
    case 4: 
            #line 2527 
    ;
    #line 2528 
    case 8: 
            #line 2528 
    ;
    #line 2529 
    case 12: 
             #line 2529 
    ;
    #line 2530 
    case 16: 
             #line 2530 
    ;
    #line 2531 
    case 20: 
             #line 2531 
    ;
    #line 2532 
    case 24: 
             #line 2532 
    ;
    #line 2533 
    case 44: 
             #line 2533 
    ;
    #line 2534 
    case 48: 
             #line 2534 
    ;
    #line 2535 
    case 52: 
             #line 2535 
    ;
    #line 2536 
    case 56: 
             #line 2536 
    ;
    #line 2537 
    case 60: 
             #line 2537 
    ;
    #line 2538 
    shift = (unsigned char)0U;
    #line 2539 
    break;
    #line 2540 
    case 1: 
            #line 2540 
    ;
    #line 2541 
    case 5: 
            #line 2541 
    ;
    #line 2542 
    case 9: 
            #line 2542 
    ;
    #line 2543 
    case 13: 
             #line 2543 
    ;
    #line 2544 
    case 17: 
             #line 2544 
    ;
    #line 2545 
    case 21: 
             #line 2545 
    ;
    #line 2546 
    case 25: 
             #line 2546 
    ;
    #line 2547 
    case 45: 
             #line 2547 
    ;
    #line 2548 
    case 49: 
             #line 2548 
    ;
    #line 2549 
    case 53: 
             #line 2549 
    ;
    #line 2550 
    case 57: 
             #line 2550 
    ;
    #line 2551 
    case 61: 
             #line 2551 
    ;
    #line 2552 
    shift = (unsigned char)8U;
    #line 2553 
    break;
    #line 2554 
    case 2: 
            #line 2554 
    ;
    #line 2555 
    case 6: 
            #line 2555 
    ;
    #line 2556 
    case 10: 
             #line 2556 
    ;
    #line 2557 
    case 14: 
             #line 2557 
    ;
    #line 2558 
    case 18: 
             #line 2558 
    ;
    #line 2559 
    case 22: 
             #line 2559 
    ;
    #line 2560 
    case 26: 
             #line 2560 
    ;
    #line 2561 
    case 46: 
             #line 2561 
    ;
    #line 2562 
    case 50: 
             #line 2562 
    ;
    #line 2563 
    case 54: 
             #line 2563 
    ;
    #line 2564 
    case 58: 
             #line 2564 
    ;
    #line 2565 
    case 62: 
             #line 2565 
    ;
    #line 2566 
    shift = (unsigned char)16U;
    #line 2567 
    break;
    #line 2568 
    case 3: 
            #line 2568 
    ;
    #line 2569 
    case 7: 
            #line 2569 
    ;
    #line 2570 
    case 11: 
             #line 2570 
    ;
    #line 2571 
    case 15: 
             #line 2571 
    ;
    #line 2572 
    case 19: 
             #line 2572 
    ;
    #line 2573 
    case 23: 
             #line 2573 
    ;
    #line 2574 
    case 27: 
             #line 2574 
    ;
    #line 2575 
    case 47: 
             #line 2575 
    ;
    #line 2576 
    case 51: 
             #line 2576 
    ;
    #line 2577 
    case 55: 
             #line 2577 
    ;
    #line 2578 
    case 59: 
             #line 2578 
    ;
    #line 2579 
    case 63: 
             #line 2579 
    ;
    #line 2580 
    shift = (unsigned char)24U;
    #line 2581 
    break;
    #line 2582 
    default: 
             #line 2582 
    ;
    {
      #line 2583 
      bool __warned;
      #line 2583 
      int __ret_warn_once = 1;
      #line 2583 
      if ((long)(__ret_warn_once != 0) != 0L && (long)(! __warned) != 0L) {
        #line 2583 
        __warned = (_Bool)1;
        {
          #line 2583 
          int __ret_warn_on = 1;
          #line 2583 
          if ((long)(__ret_warn_on != 0) != 0L) {
            #line 2583 
            __warn_printk((char *)"rtl8821ae: Rate_Section is Illegal\n");
            #line 2584 
            ldv_inline_asm();
            #line 2585 
            ldv_inline_asm();
          }
          #line 2583 
          long tmp_2 = (long)(__ret_warn_on != 0);
        }
      }
      #line 2583 
      long tmp_4 = (long)(__ret_warn_once != 0);
    }
    #line 2584 
    break;
  }
  #line 2587 
  tx_pwr_diff = (signed char)(rtlphy->tx_power_by_rate_offset[(int)band][(int)path][(int)tx_num][(int)rate_section] >> (int)shift);
  #line 2591 
  if ((unsigned int)rtlpriv->efuse.eeprom_regulatory != 2U) {
    #line 2592 
    limit = _rtl8812ae_phy_get_txpower_limit(hw,(unsigned char)((int)band),(enum ht_channel_width)rtlphy->current_chan_bw,(enum radio_path)path,(unsigned char)((int)rate),(unsigned char)((int)rtlphy->current_channel));
    #line 2596 
    if (((unsigned int)rate + 204U <= 1U || (unsigned int)rate == 62U) || (unsigned int)rate == 63U) {
      #line 2598 
      if ((int)limit < 0) 
        #line 2599 
        if ((int)tx_pwr_diff < - ((int)limit)) 
                                               #line 2600 
                                               tx_pwr_diff = (signed char)(- ((int)limit));
    }
    else 
      #line 2603 
      if ((int)limit < 0) 
                          #line 2604 
                          tx_pwr_diff = limit;
      else 
        #line 2606 
        if ((int)limit < (int)tx_pwr_diff) 
                                           #line 2606 
                                           tx_pwr_diff = limit; else 
                                                                  #line 2606 
                                                                  tx_pwr_diff = tx_pwr_diff;
    #line 2608 
    _rtl_dbg_trace(rtlpriv,131072ULL,4,(char *)"Maximum power by rate %d, final power by rate %d\n",(int)limit,(int)tx_pwr_diff);
  }
  #line 2613 
  return tx_pwr_diff;
}

#line 2616  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
static u8 _rtl8821ae_get_txpower_index(struct ieee80211_hw *hw, u8 path, u8 rate, u8 bandwidth, u8 channel)
{
  #line 2619 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 2620 
  struct rtl_hal *rtlhal = & rtlpriv->rtlhal;
  #line 2621 
  struct rtl_efuse *rtlefuse = & ((struct rtl_priv *)hw->priv)->efuse;
  #line 2622 
  u8 index = (unsigned char)((unsigned int)channel + 255U);
  #line 2623 
  u8 txpower = (unsigned char)0U;
  #line 2624 
  bool in_24g = (_Bool)0;
  #line 2625 
  s8 powerdiff_byrate = (signed char)0;
  #line 2627 
  if (rtlhal->current_bandtype == (unsigned int)BAND_ON_2_4G && (unsigned int)channel + 255U > 13U || rtlhal->current_bandtype == (unsigned int)BAND_ON_5G && (unsigned int)channel <= 14U) {
    #line 2630 
    index = (unsigned char)0U;
    #line 2631 
    _rtl_dbg_trace(rtlpriv,131072ULL,4,(char *)"Illegal channel!!\n");
  }
  #line 2635 
  in_24g = _rtl8821ae_phy_get_chnl_index((unsigned char)((int)channel),& index);
  #line 2636 
  if ((int)in_24g != 0) {
    #line 2637 
    if ((unsigned int)rate <= 3U) 
                                  #line 2638 
                                  txpower = rtlefuse->txpwrlevel_cck[(int)path][(int)index];
    else 
      #line 2639 
      if ((unsigned int)rate > 3U) 
                                   #line 2640 
                                   txpower = rtlefuse->txpwrlevel_ht40_1s[(int)path][(int)index]; else 
                                                                    #line 2642 
                                                                    _rtl_dbg_trace(rtlpriv,131072ULL,4,(char *)"invalid rate\n");
    #line 2644 
    if ((unsigned int)rate + 252U <= 7U) 
                                         #line 2646 
                                         txpower = (unsigned char)((int)((unsigned char)rtlefuse->txpwr_legacyhtdiff[(int)path][0]) + (int)txpower);
    #line 2648 
    if ((unsigned int)bandwidth == 0U) {
      #line 2649 
      if ((unsigned int)rate + 244U <= 15U || (unsigned int)rate + 212U <= 19U) 
        #line 2651 
        txpower = (unsigned char)((int)((unsigned char)rtlefuse->txpwr_ht20diff[(int)path][0]) + (int)txpower);
      #line 2652 
      if ((unsigned int)rate + 236U <= 7U || (unsigned int)rate + 202U <= 9U) 
        #line 2654 
        txpower = (unsigned char)((int)((unsigned char)rtlefuse->txpwr_ht20diff[(int)path][1]) + (int)txpower);
    }
    else 
      #line 2655 
      if ((unsigned int)bandwidth == 1U) {
        #line 2656 
        if ((unsigned int)rate + 244U <= 15U || (unsigned int)rate + 212U <= 19U) 
          #line 2658 
          txpower = (unsigned char)((int)((unsigned char)rtlefuse->txpwr_ht40diff[(int)path][0]) + (int)txpower);
        #line 2659 
        if ((unsigned int)rate + 236U <= 7U || (unsigned int)rate + 202U <= 9U) 
          #line 2661 
          txpower = (unsigned char)((int)((unsigned char)rtlefuse->txpwr_ht40diff[(int)path][1]) + (int)txpower);
      }
      else 
        #line 2662 
        if ((unsigned int)bandwidth == 2U) {
          #line 2663 
          if ((unsigned int)rate + 244U <= 15U || (unsigned int)rate + 212U <= 19U) 
            #line 2666 
            txpower = (unsigned char)((int)((unsigned char)rtlefuse->txpwr_ht40diff[(int)path][0]) + (int)txpower);
          #line 2667 
          if ((unsigned int)rate + 236U <= 7U || (unsigned int)rate + 202U <= 9U) 
            #line 2670 
            txpower = (unsigned char)((int)((unsigned char)rtlefuse->txpwr_ht40diff[(int)path][1]) + (int)txpower);
        }
  }
  else {
    #line 2673 
    if ((unsigned int)rate > 3U) 
                                 #line 2674 
                                 txpower = rtlefuse->txpwr_5g_bw40base[(int)path][(int)index]; else 
                                                                    #line 2676 
                                                                    _rtl_dbg_trace(rtlpriv,131072ULL,2,(char *)"INVALID Rate.\n");
    #line 2679 
    if ((unsigned int)rate + 252U <= 7U) 
                                         #line 2681 
                                         txpower = (unsigned char)((int)((unsigned char)rtlefuse->txpwr_5g_ofdmdiff[(int)path][0]) + (int)txpower);
    #line 2683 
    if ((unsigned int)bandwidth == 0U) {
      #line 2684 
      if ((unsigned int)rate + 244U <= 15U || (unsigned int)rate + 212U <= 19U) 
        #line 2687 
        txpower = (unsigned char)((int)((unsigned char)rtlefuse->txpwr_5g_bw20diff[(int)path][0]) + (int)txpower);
      #line 2688 
      if ((unsigned int)rate + 236U <= 7U || (unsigned int)rate + 202U <= 9U) 
        #line 2691 
        txpower = (unsigned char)((int)((unsigned char)rtlefuse->txpwr_5g_bw20diff[(int)path][1]) + (int)txpower);
    }
    else 
      #line 2692 
      if ((unsigned int)bandwidth == 1U) {
        #line 2693 
        if ((unsigned int)rate + 244U <= 15U || (unsigned int)rate + 212U <= 19U) 
          #line 2696 
          txpower = (unsigned char)((int)((unsigned char)rtlefuse->txpwr_5g_bw40diff[(int)path][0]) + (int)txpower);
        #line 2697 
        if ((unsigned int)rate + 236U <= 7U || (unsigned int)rate + 202U <= 9U) 
          #line 2700 
          txpower = (unsigned char)((int)((unsigned char)rtlefuse->txpwr_5g_bw40diff[(int)path][1]) + (int)txpower);
      }
      else 
        #line 2701 
        if ((unsigned int)bandwidth == 2U) {
          #line 2702 
          u8 i;
          #line 2704 
          i = (unsigned char)0U;
          #line 2704 
          while ((unsigned int)i <= 6U) {
            #line 2705 
            if ((int)channel5g_80m[(int)i] == (int)channel) 
                                                            #line 2706 
                                                            index = i;
            #line 2704 
            i = (u8)((int)i + 1);
          }
          #line 2708 
          if ((unsigned int)rate + 244U <= 15U || (unsigned int)rate + 212U <= 19U) 
            #line 2711 
            txpower = (unsigned char)((int)rtlefuse->txpwr_5g_bw80base[(int)path][(int)index] + (int)((unsigned char)rtlefuse->txpwr_5g_bw80diff[(int)path][0]));
          #line 2713 
          if ((unsigned int)rate + 236U <= 7U || (unsigned int)rate + 202U <= 9U) 
            #line 2716 
            txpower = (unsigned char)(((int)rtlefuse->txpwr_5g_bw80base[(int)path][(int)index] + (int)((unsigned char)rtlefuse->txpwr_5g_bw80diff[(int)path][0])) + (int)((unsigned char)rtlefuse->txpwr_5g_bw80diff[(int)path][1]));
        }
  }
  #line 2721 
  if ((unsigned int)rtlefuse->eeprom_regulatory != 2U) 
                                                       #line 2722 
                                                       powerdiff_byrate = _rtl8821ae_phy_get_txpower_by_rate(hw,(unsigned char)(! in_24g),(unsigned char)((int)path),(unsigned char)((int)rate));
  #line 2726 
  if (((unsigned int)rate + 204U <= 1U || (unsigned int)rate == 62U) || (unsigned int)rate == 63U) 
    #line 2728 
    txpower = (unsigned char)((int)txpower - (int)((unsigned char)powerdiff_byrate)); else 
                                                                    #line 2730 
                                                                    txpower = (unsigned char)((int)txpower + (int)((unsigned char)powerdiff_byrate));
  #line 2732 
  if ((unsigned int)rate > 3U) 
                               #line 2733 
                               txpower = (unsigned char)((int)((unsigned char)rtlpriv->dm.remnant_ofdm_swing_idx[(int)path]) + (int)txpower); else 
                                                                    #line 2735 
                                                                    txpower = (unsigned char)((int)((unsigned char)rtlpriv->dm.remnant_cck_idx) + (int)txpower);
  #line 2737 
  if ((unsigned int)txpower > 63U) 
                                   #line 2738 
                                   txpower = (unsigned char)63U;
  #line 2740 
  return txpower;
}

#line 2743  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
static void _rtl8821ae_phy_set_txpower_index(struct ieee80211_hw *hw, u8 power_index, u8 path, u8 rate)
{
  #line 2746 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 2748 
  if ((unsigned int)path == 0U) 
    #line 2749 
    switch ((int)rate) {
      #line 2750 
      case 0: 
              #line 2750 
      ;
      #line 2751 
      rtl_set_bbreg(hw,3104U,255U,(unsigned int)power_index);
      #line 2753 
      break;
      #line 2754 
      case 1: 
              #line 2754 
      ;
      #line 2755 
      rtl_set_bbreg(hw,3104U,65280U,(unsigned int)power_index);
      #line 2757 
      break;
      #line 2758 
      case 2: 
              #line 2758 
      ;
      #line 2759 
      rtl_set_bbreg(hw,3104U,16711680U,(unsigned int)power_index);
      #line 2761 
      break;
      #line 2762 
      case 3: 
              #line 2762 
      ;
      #line 2763 
      rtl_set_bbreg(hw,3104U,4278190080U,(unsigned int)power_index);
      #line 2765 
      break;
      #line 2766 
      case 4: 
              #line 2766 
      ;
      #line 2767 
      rtl_set_bbreg(hw,3108U,255U,(unsigned int)power_index);
      #line 2769 
      break;
      #line 2770 
      case 5: 
              #line 2770 
      ;
      #line 2771 
      rtl_set_bbreg(hw,3108U,65280U,(unsigned int)power_index);
      #line 2773 
      break;
      #line 2774 
      case 6: 
              #line 2774 
      ;
      #line 2775 
      rtl_set_bbreg(hw,3108U,16711680U,(unsigned int)power_index);
      #line 2777 
      break;
      #line 2778 
      case 7: 
              #line 2778 
      ;
      #line 2779 
      rtl_set_bbreg(hw,3108U,4278190080U,(unsigned int)power_index);
      #line 2781 
      break;
      #line 2782 
      case 8: 
              #line 2782 
      ;
      #line 2783 
      rtl_set_bbreg(hw,3112U,255U,(unsigned int)power_index);
      #line 2785 
      break;
      #line 2786 
      case 9: 
              #line 2786 
      ;
      #line 2787 
      rtl_set_bbreg(hw,3112U,65280U,(unsigned int)power_index);
      #line 2789 
      break;
      #line 2790 
      case 10: 
               #line 2790 
      ;
      #line 2791 
      rtl_set_bbreg(hw,3112U,16711680U,(unsigned int)power_index);
      #line 2793 
      break;
      #line 2794 
      case 11: 
               #line 2794 
      ;
      #line 2795 
      rtl_set_bbreg(hw,3112U,4278190080U,(unsigned int)power_index);
      #line 2797 
      break;
      #line 2798 
      case 12: 
               #line 2798 
      ;
      #line 2799 
      rtl_set_bbreg(hw,3116U,255U,(unsigned int)power_index);
      #line 2801 
      break;
      #line 2802 
      case 13: 
               #line 2802 
      ;
      #line 2803 
      rtl_set_bbreg(hw,3116U,65280U,(unsigned int)power_index);
      #line 2805 
      break;
      #line 2806 
      case 14: 
               #line 2806 
      ;
      #line 2807 
      rtl_set_bbreg(hw,3116U,16711680U,(unsigned int)power_index);
      #line 2809 
      break;
      #line 2810 
      case 15: 
               #line 2810 
      ;
      #line 2811 
      rtl_set_bbreg(hw,3116U,4278190080U,(unsigned int)power_index);
      #line 2813 
      break;
      #line 2814 
      case 16: 
               #line 2814 
      ;
      #line 2815 
      rtl_set_bbreg(hw,3120U,255U,(unsigned int)power_index);
      #line 2817 
      break;
      #line 2818 
      case 17: 
               #line 2818 
      ;
      #line 2819 
      rtl_set_bbreg(hw,3120U,65280U,(unsigned int)power_index);
      #line 2821 
      break;
      #line 2822 
      case 18: 
               #line 2822 
      ;
      #line 2823 
      rtl_set_bbreg(hw,3120U,16711680U,(unsigned int)power_index);
      #line 2825 
      break;
      #line 2826 
      case 19: 
               #line 2826 
      ;
      #line 2827 
      rtl_set_bbreg(hw,3120U,4278190080U,(unsigned int)power_index);
      #line 2829 
      break;
      #line 2830 
      case 20: 
               #line 2830 
      ;
      #line 2831 
      rtl_set_bbreg(hw,3124U,255U,(unsigned int)power_index);
      #line 2833 
      break;
      #line 2834 
      case 21: 
               #line 2834 
      ;
      #line 2835 
      rtl_set_bbreg(hw,3124U,65280U,(unsigned int)power_index);
      #line 2837 
      break;
      #line 2838 
      case 22: 
               #line 2838 
      ;
      #line 2839 
      rtl_set_bbreg(hw,3124U,16711680U,(unsigned int)power_index);
      #line 2841 
      break;
      #line 2842 
      case 23: 
               #line 2842 
      ;
      #line 2843 
      rtl_set_bbreg(hw,3124U,4278190080U,(unsigned int)power_index);
      #line 2845 
      break;
      #line 2846 
      case 24: 
               #line 2846 
      ;
      #line 2847 
      rtl_set_bbreg(hw,3128U,255U,(unsigned int)power_index);
      #line 2849 
      break;
      #line 2850 
      case 25: 
               #line 2850 
      ;
      #line 2851 
      rtl_set_bbreg(hw,3128U,65280U,(unsigned int)power_index);
      #line 2853 
      break;
      #line 2854 
      case 26: 
               #line 2854 
      ;
      #line 2855 
      rtl_set_bbreg(hw,3128U,16711680U,(unsigned int)power_index);
      #line 2857 
      break;
      #line 2858 
      case 27: 
               #line 2858 
      ;
      #line 2859 
      rtl_set_bbreg(hw,3128U,4278190080U,(unsigned int)power_index);
      #line 2861 
      break;
      #line 2862 
      case 44: 
               #line 2862 
      ;
      #line 2863 
      rtl_set_bbreg(hw,3132U,255U,(unsigned int)power_index);
      #line 2865 
      break;
      #line 2866 
      case 45: 
               #line 2866 
      ;
      #line 2867 
      rtl_set_bbreg(hw,3132U,65280U,(unsigned int)power_index);
      #line 2869 
      break;
      #line 2870 
      case 46: 
               #line 2870 
      ;
      #line 2871 
      rtl_set_bbreg(hw,3132U,16711680U,(unsigned int)power_index);
      #line 2873 
      break;
      #line 2874 
      case 47: 
               #line 2874 
      ;
      #line 2875 
      rtl_set_bbreg(hw,3132U,4278190080U,(unsigned int)power_index);
      #line 2877 
      break;
      #line 2878 
      case 48: 
               #line 2878 
      ;
      #line 2879 
      rtl_set_bbreg(hw,3136U,255U,(unsigned int)power_index);
      #line 2881 
      break;
      #line 2882 
      case 49: 
               #line 2882 
      ;
      #line 2883 
      rtl_set_bbreg(hw,3136U,65280U,(unsigned int)power_index);
      #line 2885 
      break;
      #line 2886 
      case 50: 
               #line 2886 
      ;
      #line 2887 
      rtl_set_bbreg(hw,3136U,16711680U,(unsigned int)power_index);
      #line 2889 
      break;
      #line 2890 
      case 51: 
               #line 2890 
      ;
      #line 2891 
      rtl_set_bbreg(hw,3136U,4278190080U,(unsigned int)power_index);
      #line 2893 
      break;
      #line 2894 
      case 52: 
               #line 2894 
      ;
      #line 2895 
      rtl_set_bbreg(hw,3140U,255U,(unsigned int)power_index);
      #line 2897 
      break;
      #line 2898 
      case 53: 
               #line 2898 
      ;
      #line 2899 
      rtl_set_bbreg(hw,3140U,65280U,(unsigned int)power_index);
      #line 2901 
      break;
      #line 2902 
      case 54: 
               #line 2902 
      ;
      #line 2903 
      rtl_set_bbreg(hw,3140U,16711680U,(unsigned int)power_index);
      #line 2905 
      break;
      #line 2906 
      case 55: 
               #line 2906 
      ;
      #line 2907 
      rtl_set_bbreg(hw,3140U,4278190080U,(unsigned int)power_index);
      #line 2909 
      break;
      #line 2910 
      case 56: 
               #line 2910 
      ;
      #line 2911 
      rtl_set_bbreg(hw,3144U,255U,(unsigned int)power_index);
      #line 2913 
      break;
      #line 2914 
      case 57: 
               #line 2914 
      ;
      #line 2915 
      rtl_set_bbreg(hw,3144U,65280U,(unsigned int)power_index);
      #line 2917 
      break;
      #line 2918 
      case 58: 
               #line 2918 
      ;
      #line 2919 
      rtl_set_bbreg(hw,3144U,16711680U,(unsigned int)power_index);
      #line 2921 
      break;
      #line 2922 
      case 59: 
               #line 2922 
      ;
      #line 2923 
      rtl_set_bbreg(hw,3144U,4278190080U,(unsigned int)power_index);
      #line 2925 
      break;
      #line 2926 
      case 60: 
               #line 2926 
      ;
      #line 2927 
      rtl_set_bbreg(hw,3148U,255U,(unsigned int)power_index);
      #line 2929 
      break;
      #line 2930 
      case 61: 
               #line 2930 
      ;
      #line 2931 
      rtl_set_bbreg(hw,3148U,65280U,(unsigned int)power_index);
      #line 2933 
      break;
      #line 2934 
      case 62: 
               #line 2934 
      ;
      #line 2935 
      rtl_set_bbreg(hw,3148U,16711680U,(unsigned int)power_index);
      #line 2937 
      break;
      #line 2938 
      case 63: 
               #line 2938 
      ;
      #line 2939 
      rtl_set_bbreg(hw,3148U,4278190080U,(unsigned int)power_index);
      #line 2941 
      break;
      #line 2942 
      default: 
               #line 2942 
      ;
      #line 2943 
      _rtl_dbg_trace(rtlpriv,65536ULL,4,(char *)"Invalid Rate!!\n");
      #line 2945 
      break;
    }
  else 
    #line 2947 
    if ((unsigned int)path == 1U) 
      #line 2948 
      switch ((int)rate) {
        #line 2949 
        case 0: 
                #line 2949 
        ;
        #line 2950 
        rtl_set_bbreg(hw,3616U,255U,(unsigned int)power_index);
        #line 2952 
        break;
        #line 2953 
        case 1: 
                #line 2953 
        ;
        #line 2954 
        rtl_set_bbreg(hw,3616U,65280U,(unsigned int)power_index);
        #line 2956 
        break;
        #line 2957 
        case 2: 
                #line 2957 
        ;
        #line 2958 
        rtl_set_bbreg(hw,3616U,16711680U,(unsigned int)power_index);
        #line 2960 
        break;
        #line 2961 
        case 3: 
                #line 2961 
        ;
        #line 2962 
        rtl_set_bbreg(hw,3616U,4278190080U,(unsigned int)power_index);
        #line 2964 
        break;
        #line 2965 
        case 4: 
                #line 2965 
        ;
        #line 2966 
        rtl_set_bbreg(hw,3620U,255U,(unsigned int)power_index);
        #line 2968 
        break;
        #line 2969 
        case 5: 
                #line 2969 
        ;
        #line 2970 
        rtl_set_bbreg(hw,3620U,65280U,(unsigned int)power_index);
        #line 2972 
        break;
        #line 2973 
        case 6: 
                #line 2973 
        ;
        #line 2974 
        rtl_set_bbreg(hw,3620U,16711680U,(unsigned int)power_index);
        #line 2976 
        break;
        #line 2977 
        case 7: 
                #line 2977 
        ;
        #line 2978 
        rtl_set_bbreg(hw,3620U,4278190080U,(unsigned int)power_index);
        #line 2980 
        break;
        #line 2981 
        case 8: 
                #line 2981 
        ;
        #line 2982 
        rtl_set_bbreg(hw,3624U,255U,(unsigned int)power_index);
        #line 2984 
        break;
        #line 2985 
        case 9: 
                #line 2985 
        ;
        #line 2986 
        rtl_set_bbreg(hw,3624U,65280U,(unsigned int)power_index);
        #line 2988 
        break;
        #line 2989 
        case 10: 
                 #line 2989 
        ;
        #line 2990 
        rtl_set_bbreg(hw,3624U,16711680U,(unsigned int)power_index);
        #line 2992 
        break;
        #line 2993 
        case 11: 
                 #line 2993 
        ;
        #line 2994 
        rtl_set_bbreg(hw,3624U,4278190080U,(unsigned int)power_index);
        #line 2996 
        break;
        #line 2997 
        case 12: 
                 #line 2997 
        ;
        #line 2998 
        rtl_set_bbreg(hw,3628U,255U,(unsigned int)power_index);
        #line 3000 
        break;
        #line 3001 
        case 13: 
                 #line 3001 
        ;
        #line 3002 
        rtl_set_bbreg(hw,3628U,65280U,(unsigned int)power_index);
        #line 3004 
        break;
        #line 3005 
        case 14: 
                 #line 3005 
        ;
        #line 3006 
        rtl_set_bbreg(hw,3628U,16711680U,(unsigned int)power_index);
        #line 3008 
        break;
        #line 3009 
        case 15: 
                 #line 3009 
        ;
        #line 3010 
        rtl_set_bbreg(hw,3628U,4278190080U,(unsigned int)power_index);
        #line 3012 
        break;
        #line 3013 
        case 16: 
                 #line 3013 
        ;
        #line 3014 
        rtl_set_bbreg(hw,3632U,255U,(unsigned int)power_index);
        #line 3016 
        break;
        #line 3017 
        case 17: 
                 #line 3017 
        ;
        #line 3018 
        rtl_set_bbreg(hw,3632U,65280U,(unsigned int)power_index);
        #line 3020 
        break;
        #line 3021 
        case 18: 
                 #line 3021 
        ;
        #line 3022 
        rtl_set_bbreg(hw,3632U,16711680U,(unsigned int)power_index);
        #line 3024 
        break;
        #line 3025 
        case 19: 
                 #line 3025 
        ;
        #line 3026 
        rtl_set_bbreg(hw,3632U,4278190080U,(unsigned int)power_index);
        #line 3028 
        break;
        #line 3029 
        case 20: 
                 #line 3029 
        ;
        #line 3030 
        rtl_set_bbreg(hw,3636U,255U,(unsigned int)power_index);
        #line 3032 
        break;
        #line 3033 
        case 21: 
                 #line 3033 
        ;
        #line 3034 
        rtl_set_bbreg(hw,3636U,65280U,(unsigned int)power_index);
        #line 3036 
        break;
        #line 3037 
        case 22: 
                 #line 3037 
        ;
        #line 3038 
        rtl_set_bbreg(hw,3636U,16711680U,(unsigned int)power_index);
        #line 3040 
        break;
        #line 3041 
        case 23: 
                 #line 3041 
        ;
        #line 3042 
        rtl_set_bbreg(hw,3636U,4278190080U,(unsigned int)power_index);
        #line 3044 
        break;
        #line 3045 
        case 24: 
                 #line 3045 
        ;
        #line 3046 
        rtl_set_bbreg(hw,3640U,255U,(unsigned int)power_index);
        #line 3048 
        break;
        #line 3049 
        case 25: 
                 #line 3049 
        ;
        #line 3050 
        rtl_set_bbreg(hw,3640U,65280U,(unsigned int)power_index);
        #line 3052 
        break;
        #line 3053 
        case 26: 
                 #line 3053 
        ;
        #line 3054 
        rtl_set_bbreg(hw,3640U,16711680U,(unsigned int)power_index);
        #line 3056 
        break;
        #line 3057 
        case 27: 
                 #line 3057 
        ;
        #line 3058 
        rtl_set_bbreg(hw,3640U,4278190080U,(unsigned int)power_index);
        #line 3060 
        break;
        #line 3061 
        case 44: 
                 #line 3061 
        ;
        #line 3062 
        rtl_set_bbreg(hw,3644U,255U,(unsigned int)power_index);
        #line 3064 
        break;
        #line 3065 
        case 45: 
                 #line 3065 
        ;
        #line 3066 
        rtl_set_bbreg(hw,3644U,65280U,(unsigned int)power_index);
        #line 3068 
        break;
        #line 3069 
        case 46: 
                 #line 3069 
        ;
        #line 3070 
        rtl_set_bbreg(hw,3644U,16711680U,(unsigned int)power_index);
        #line 3072 
        break;
        #line 3073 
        case 47: 
                 #line 3073 
        ;
        #line 3074 
        rtl_set_bbreg(hw,3644U,4278190080U,(unsigned int)power_index);
        #line 3076 
        break;
        #line 3077 
        case 48: 
                 #line 3077 
        ;
        #line 3078 
        rtl_set_bbreg(hw,3648U,255U,(unsigned int)power_index);
        #line 3080 
        break;
        #line 3081 
        case 49: 
                 #line 3081 
        ;
        #line 3082 
        rtl_set_bbreg(hw,3648U,65280U,(unsigned int)power_index);
        #line 3084 
        break;
        #line 3085 
        case 50: 
                 #line 3085 
        ;
        #line 3086 
        rtl_set_bbreg(hw,3648U,16711680U,(unsigned int)power_index);
        #line 3088 
        break;
        #line 3089 
        case 51: 
                 #line 3089 
        ;
        #line 3090 
        rtl_set_bbreg(hw,3648U,4278190080U,(unsigned int)power_index);
        #line 3092 
        break;
        #line 3093 
        case 52: 
                 #line 3093 
        ;
        #line 3094 
        rtl_set_bbreg(hw,3652U,255U,(unsigned int)power_index);
        #line 3096 
        break;
        #line 3097 
        case 53: 
                 #line 3097 
        ;
        #line 3098 
        rtl_set_bbreg(hw,3652U,65280U,(unsigned int)power_index);
        #line 3100 
        break;
        #line 3101 
        case 54: 
                 #line 3101 
        ;
        #line 3102 
        rtl_set_bbreg(hw,3652U,16711680U,(unsigned int)power_index);
        #line 3104 
        break;
        #line 3105 
        case 55: 
                 #line 3105 
        ;
        #line 3106 
        rtl_set_bbreg(hw,3652U,4278190080U,(unsigned int)power_index);
        #line 3108 
        break;
        #line 3109 
        case 56: 
                 #line 3109 
        ;
        #line 3110 
        rtl_set_bbreg(hw,3656U,255U,(unsigned int)power_index);
        #line 3112 
        break;
        #line 3113 
        case 57: 
                 #line 3113 
        ;
        #line 3114 
        rtl_set_bbreg(hw,3656U,65280U,(unsigned int)power_index);
        #line 3116 
        break;
        #line 3117 
        case 58: 
                 #line 3117 
        ;
        #line 3118 
        rtl_set_bbreg(hw,3656U,16711680U,(unsigned int)power_index);
        #line 3120 
        break;
        #line 3121 
        case 59: 
                 #line 3121 
        ;
        #line 3122 
        rtl_set_bbreg(hw,3656U,4278190080U,(unsigned int)power_index);
        #line 3124 
        break;
        #line 3125 
        case 60: 
                 #line 3125 
        ;
        #line 3126 
        rtl_set_bbreg(hw,3660U,255U,(unsigned int)power_index);
        #line 3128 
        break;
        #line 3129 
        case 61: 
                 #line 3129 
        ;
        #line 3130 
        rtl_set_bbreg(hw,3660U,65280U,(unsigned int)power_index);
        #line 3132 
        break;
        #line 3133 
        case 62: 
                 #line 3133 
        ;
        #line 3134 
        rtl_set_bbreg(hw,3660U,16711680U,(unsigned int)power_index);
        #line 3136 
        break;
        #line 3137 
        case 63: 
                 #line 3137 
        ;
        #line 3138 
        rtl_set_bbreg(hw,3660U,4278190080U,(unsigned int)power_index);
        #line 3140 
        break;
        #line 3141 
        default: 
                 #line 3141 
        ;
        #line 3142 
        _rtl_dbg_trace(rtlpriv,65536ULL,4,(char *)"Invalid Rate!!\n");
        #line 3144 
        break;
      }
    else 
         #line 3147 
         _rtl_dbg_trace(rtlpriv,65536ULL,4,(char *)"Invalid RFPath!!\n");
  #line 3148 
  return;
}

#line 3152  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
static void _rtl8821ae_phy_set_txpower_level_by_path(struct ieee80211_hw *hw, u8 *array, u8 path, u8 channel, u8 size)
{
  #line 3158 
  u8 i;
  #line 3159 
  u8 power_index;
  #line 3156 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 3157 
  struct rtl_phy *rtlphy = & rtlpriv->phy;
  #line 3161 
  i = (unsigned char)0U;
  #line 3161 
  while ((int)i < (int)size) {
    #line 3162 
    power_index = _rtl8821ae_get_txpower_index(hw,(unsigned char)((int)path),(unsigned char)((int)*(array + (unsigned long)i)),(unsigned char)((int)rtlphy->current_chan_bw),(unsigned char)((int)channel));
    #line 3166 
    _rtl8821ae_phy_set_txpower_index(hw,(unsigned char)((int)power_index),(unsigned char)((int)path),(unsigned char)((int)*(array + (unsigned long)i)));
    #line 3161 
    i = (u8)((int)i + 1);
  }
  #line 3169 
  return;
}

#line 3171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
static void _rtl8821ae_phy_txpower_training_by_path(struct ieee80211_hw *hw, u8 bw, u8 channel, u8 path)
{
  #line 3177 
  u8 i;
  #line 3178 
  u32 power_level;
  #line 3178 
  u32 data;
  #line 3178 
  u32 offset;
  #line 3174 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 3175 
  struct rtl_phy *rtlphy = & rtlpriv->phy;
  #line 3180 
  if ((int)rtlphy->num_total_rfpath <= (int)path) 
                                                  #line 3181 
                                                  return;
  #line 3183 
  data = 0U;
  #line 3184 
  if ((unsigned int)path == 0U) {
    #line 3185 
    power_level = (unsigned int)_rtl8821ae_get_txpower_index(hw,(unsigned char)0,(unsigned char)19,
                                   (unsigned char)((int)bw),
                                   (unsigned char)((int)channel));
    #line 3188 
    offset = 3156U;
  }
  else {
    #line 3190 
    power_level = (unsigned int)_rtl8821ae_get_txpower_index(hw,(unsigned char)1,(unsigned char)19,
                                     (unsigned char)((int)bw),
                                     (unsigned char)((int)channel));
    #line 3193 
    offset = 3668U;
  }
  #line 3196 
  i = (unsigned char)0U;
  #line 3196 
  while ((unsigned int)i <= 2U) {
    {
      #line 3204 
      unsigned int tmp_1;
      #line 3197 
      if ((unsigned int)i == 0U) 
                                 #line 3198 
                                 power_level += 4294967286U;
      else 
        #line 3199 
        if ((unsigned int)i == 1U) 
                                   #line 3200 
                                   power_level += 4294967288U; else 
                                                                    #line 3202 
                                                                    power_level += 4294967290U;
      #line 3204 
      if (2U > power_level) 
                            #line 3204 
                            tmp_1 = 2U; else 
                                             #line 3204 
                                             tmp_1 = power_level;
      #line 3204 
      data = (tmp_1 << (int)i * 8) | data;
    }
    #line 3196 
    i = (u8)((int)i + 1);
  }
  #line 3206 
  rtl_set_bbreg(hw,offset,16777215U,data);
  #line 3207 
  return;
}

#line 3209  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
void rtl8821ae_phy_set_txpower_level_by_path(struct ieee80211_hw *hw, u8 channel, u8 path)
{
  #line 3213 
  struct rtl_hal *rtlhal = & ((struct rtl_priv *)hw->priv)->rtlhal;
  #line 3214 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 3215 
  struct rtl_phy *rtlphy = & rtlpriv->phy;
  #line 3216 
  u8 cck_rates[4U] = {(unsigned char)0U, (unsigned char)1U, (unsigned char)2U, (unsigned char)3U};
  #line 3218 
  u8 sizes_of_cck_retes = (unsigned char)4U;
  #line 3219 
  u8 ofdm_rates[8U] = {(unsigned char)4U, (unsigned char)5U, (unsigned char)6U, (unsigned char)7U, (unsigned char)8U, (unsigned char)9U, (unsigned char)10U, (unsigned char)11U};
  #line 3222 
  u8 sizes_of_ofdm_retes = (unsigned char)8U;
  #line 3223 
  u8 ht_rates_1t[8U] = {(unsigned char)12U, (unsigned char)13U, (unsigned char)14U, (unsigned char)15U, (unsigned char)16U, (unsigned char)17U, (unsigned char)18U, (unsigned char)19U};
  #line 3226 
  u8 sizes_of_ht_retes_1t = (unsigned char)8U;
  #line 3227 
  u8 ht_rates_2t[8U] = {(unsigned char)20U, (unsigned char)21U, (unsigned char)22U, (unsigned char)23U, (unsigned char)24U, (unsigned char)25U, (unsigned char)26U, (unsigned char)27U};
  #line 3231 
  u8 sizes_of_ht_retes_2t = (unsigned char)8U;
  #line 3232 
  u8 vht_rates_1t[10U] = {(unsigned char)44U, (unsigned char)45U, (unsigned char)46U, (unsigned char)47U, (unsigned char)48U, (unsigned char)49U, (unsigned char)50U, (unsigned char)51U, (unsigned char)52U, (unsigned char)53U};
  #line 3237 
  u8 vht_rates_2t[10U] = {(unsigned char)54U, (unsigned char)55U, (unsigned char)56U, (unsigned char)57U, (unsigned char)58U, (unsigned char)59U, (unsigned char)60U, (unsigned char)61U, (unsigned char)62U, (unsigned char)63U};
  #line 3242 
  u8 sizes_of_vht_retes = (unsigned char)10U;
  #line 3244 
  if (rtlhal->current_bandtype == (unsigned int)BAND_ON_2_4G) 
                                                              #line 3245 
                                                              _rtl8821ae_phy_set_txpower_level_by_path(hw,(u8 *)(& cck_rates),(unsigned char)((int)path),(unsigned char)((int)channel),(unsigned char)((int)sizes_of_cck_retes));
  #line 3248 
  _rtl8821ae_phy_set_txpower_level_by_path(hw,(u8 *)(& ofdm_rates),(unsigned char)((int)path),(unsigned char)((int)channel),(unsigned char)((int)sizes_of_ofdm_retes));
  #line 3250 
  _rtl8821ae_phy_set_txpower_level_by_path(hw,(u8 *)(& ht_rates_1t),(unsigned char)((int)path),(unsigned char)((int)channel),(unsigned char)((int)sizes_of_ht_retes_1t));
  #line 3252 
  _rtl8821ae_phy_set_txpower_level_by_path(hw,(u8 *)(& vht_rates_1t),(unsigned char)((int)path),(unsigned char)((int)channel),(unsigned char)((int)sizes_of_vht_retes));
  #line 3255 
  if ((unsigned int)rtlphy->num_total_rfpath > 1U) {
    #line 3256 
    _rtl8821ae_phy_set_txpower_level_by_path(hw,(u8 *)(& ht_rates_2t),(unsigned char)((int)path),(unsigned char)((int)channel),(unsigned char)((int)sizes_of_ht_retes_2t));
    #line 3259 
    _rtl8821ae_phy_set_txpower_level_by_path(hw,(u8 *)(& vht_rates_2t),(unsigned char)((int)path),(unsigned char)((int)channel),(unsigned char)((int)sizes_of_vht_retes));
  }
  #line 3264 
  _rtl8821ae_phy_txpower_training_by_path(hw,(unsigned char)((int)rtlphy->current_chan_bw),(unsigned char)((int)channel),(unsigned char)((int)path));
  #line 3265 
  return;
}

#line 3269  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
void rtl8821ae_phy_set_txpower_level(struct ieee80211_hw *hw, u8 channel)
{
  #line 3271 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 3272 
  struct rtl_phy *rtlphy = & rtlpriv->phy;
  #line 3273 
  u8 path = (unsigned char)0U;
  #line 3275 
  path = (unsigned char)0U;
  #line 3275 
  while ((int)rtlphy->num_total_rfpath > (int)path) {
    #line 3276 
    rtl8821ae_phy_set_txpower_level_by_path(hw,(unsigned char)((int)channel),(unsigned char)((int)path));
    #line 3275 
    path = (u8)((int)path + 1);
  }
  #line 3277 
  return;
}

#line 3279  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
static long _rtl8821ae_phy_txpwr_idx_to_dbm(struct ieee80211_hw *hw, enum wireless_mode wirelessmode, u8 txpwridx)
{
  #line 3283 
  long offset;
  #line 3284 
  long pwrout_dbm;
  #line 3286 
  switch ((unsigned int)wirelessmode) {
    #line 3287 
    case (unsigned int)2: 
                          #line 3287 
    ;
    #line 3288 
    offset = -7L;
    #line 3289 
    break;
    #line 3290 
    case (unsigned int)4: 
                          #line 3290 
    ;
    #line 3291 
    case (unsigned int)16: 
                           #line 3291 
    ;
    #line 3292 
    offset = -8L;
    #line 3293 
    break;
    #line 3294 
    default: 
             #line 3294 
    ;
    #line 3295 
    offset = -8L;
    #line 3296 
    break;
  }
  #line 3298 
  pwrout_dbm = (long)((unsigned int)txpwridx / 2U) + offset;
  #line 3299 
  return pwrout_dbm;
}

#line 3302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
void rtl8821ae_phy_scan_operation_backup(struct ieee80211_hw *hw, u8 operation)
{
  #line 3304 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 3305 
  struct rtl_hal *rtlhal = & ((struct rtl_priv *)hw->priv)->rtlhal;
  #line 3306 
  enum io_type iotype = IO_CMD_PAUSE_DM_BY_SCAN;
  #line 3308 
  if (! is_hal_stop(rtlhal)) 
    #line 3309 
    switch ((int)operation) {
      #line 3310 
      case 0: 
              #line 3310 
      ;
      #line 3311 
      iotype = IO_CMD_PAUSE_DM_BY_SCAN;
      #line 3312 
      (*(((rtlpriv->cfg)->ops)->set_hw_reg))(hw,(unsigned char)72,(u8 *)(& iotype));
      #line 3316 
      break;
      #line 3317 
      case 1: 
              #line 3317 
      ;
      #line 3318 
      iotype = IO_CMD_PAUSE_BAND1_DM_BY_SCAN;
      #line 3319 
      (*(((rtlpriv->cfg)->ops)->set_hw_reg))(hw,(unsigned char)72,(u8 *)(& iotype));
      #line 3323 
      break;
      #line 3324 
      case 2: 
              #line 3324 
      ;
      #line 3325 
      iotype = IO_CMD_RESUME_DM_BY_SCAN;
      #line 3326 
      (*(((rtlpriv->cfg)->ops)->set_hw_reg))(hw,(unsigned char)72,(u8 *)(& iotype));
      #line 3329 
      break;
      #line 3330 
      default: 
               #line 3330 
      ;
      #line 3331 
      printk((char *)"\001");
      #line 3332 
      break;
    }
  #line 3334 
  return;
}

#line 3337  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
static void _rtl8821ae_phy_set_reg_bw(struct rtl_priv *rtlpriv, u8 bw)
{
  #line 3339 
  u16 reg_rf_mode_bw;
  #line 3339 
  u16 tmp = (unsigned short)0U;
  #line 3341 
  reg_rf_mode_bw = rtl_read_word(rtlpriv,1640U);
  #line 3342 
  switch ((int)bw) {
    #line 3343 
    case 0: 
            #line 3343 
    ;
    #line 3344 
    rtl_write_word(rtlpriv,1640U,(unsigned short)((int)reg_rf_mode_bw & 65151));
    #line 3345 
    break;
    #line 3346 
    case 1: 
            #line 3346 
    ;
    #line 3347 
    tmp = (unsigned short)((unsigned int)reg_rf_mode_bw | 128U);
    #line 3348 
    rtl_write_word(rtlpriv,1640U,(unsigned short)((int)tmp & 65279));
    #line 3349 
    break;
    #line 3350 
    case 2: 
            #line 3350 
    ;
    #line 3351 
    tmp = (unsigned short)((unsigned int)reg_rf_mode_bw | 256U);
    #line 3352 
    rtl_write_word(rtlpriv,1640U,(unsigned short)((int)tmp & 65407));
    #line 3353 
    break;
    #line 3354 
    default: 
             #line 3354 
    ;
    #line 3355 
    _rtl_dbg_trace(rtlpriv,1ULL,2,(char *)"unknown Bandwidth: 0x%x\n",(int)bw);
    #line 3356 
    break;
  }
  #line 3358 
  return;
}

#line 3360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
static u8 _rtl8821ae_phy_get_secondary_chnl(struct rtl_priv *rtlpriv)
{
  #line 3362 
  struct rtl_phy *rtlphy = & rtlpriv->phy;
  #line 3363 
  struct rtl_mac *mac = & rtlpriv->mac80211;
  #line 3364 
  u8 sc_set_40 = (unsigned char)0U;
  #line 3364 
  u8 sc_set_20 = (unsigned char)0U;
  #line 3366 
  if ((unsigned int)rtlphy->current_chan_bw == 2U) {
    #line 3367 
    if ((unsigned int)mac->cur_80_prime_sc == 1U) 
                                                  #line 3368 
                                                  sc_set_40 = (unsigned char)10U;
    else 
      #line 3369 
      if ((unsigned int)mac->cur_80_prime_sc == 2U) 
                                                    #line 3370 
                                                    sc_set_40 = (unsigned char)9U; else 
                                                                    #line 3372 
                                                                    printk((char *)"\001");
    #line 3374 
    if ((unsigned int)mac->cur_40_prime_sc == 1U && (unsigned int)mac->cur_80_prime_sc == 1U) 
      #line 3376 
      sc_set_20 = (unsigned char)4U;
    else 
      #line 3377 
      if ((unsigned int)mac->cur_40_prime_sc == 2U && (unsigned int)mac->cur_80_prime_sc == 1U) 
        #line 3379 
        sc_set_20 = (unsigned char)2U;
      else 
        #line 3380 
        if ((unsigned int)mac->cur_40_prime_sc == 1U && (unsigned int)mac->cur_80_prime_sc == 2U) 
          #line 3382 
          sc_set_20 = (unsigned char)1U;
        else 
          #line 3383 
          if ((unsigned int)mac->cur_40_prime_sc == 2U && (unsigned int)mac->cur_80_prime_sc == 2U) 
            #line 3385 
            sc_set_20 = (unsigned char)3U; else 
                                                #line 3387 
                                                printk((char *)"\001");
  }
  else 
    #line 3388 
    if ((unsigned int)rtlphy->current_chan_bw == 1U) 
      #line 3389 
      if ((unsigned int)mac->cur_40_prime_sc == 2U) 
                                                    #line 3390 
                                                    sc_set_20 = (unsigned char)1U;
      else 
        #line 3391 
        if ((unsigned int)mac->cur_40_prime_sc == 1U) 
                                                      #line 3392 
                                                      sc_set_20 = (unsigned char)2U; else 
                                                                    #line 3394 
                                                                    printk((char *)"\001");
  #line 3396 
  return (unsigned char)(((int)sc_set_40 << 4) | (int)sc_set_20);
}

#line 3399  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
void rtl8821ae_phy_set_bw_mode_callback(struct ieee80211_hw *hw)
{
  #line 3406 
  char *tmp;
  #line 3406 
  char *tmp_0;
  #line 3401 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 3402 
  struct rtl_phy *rtlphy = & rtlpriv->phy;
  #line 3403 
  u8 sub_chnl = (unsigned char)0U;
  #line 3404 
  u8 l1pk_val = (unsigned char)0U;
  #line 3406 
  if ((unsigned int)rtlphy->current_chan_bw != 0U) {
    #line 3406 
    if ((unsigned int)rtlphy->current_chan_bw == 1U) 
                                                     #line 3406 
                                                     tmp = (char *)"40MHz"; else 
                                                                    #line 3406 
                                                                    tmp = (char *)"80MHz";
    #line 3406 
    tmp_0 = tmp;
  }
  else 
       #line 3406 
       tmp_0 = (char *)"20MHz";
  #line 3406 
  ;
  #line 3406 
  _rtl_dbg_trace(rtlpriv,64ULL,5,(char *)"Switch to %s bandwidth\n",tmp_0);
  #line 3413 
  _rtl8821ae_phy_set_reg_bw(rtlpriv,(unsigned char)((int)rtlphy->current_chan_bw));
  #line 3414 
  sub_chnl = _rtl8821ae_phy_get_secondary_chnl(rtlpriv);
  #line 3415 
  rtl_write_byte(rtlpriv,1155U,(unsigned char)((int)sub_chnl));
  #line 3417 
  switch ((int)rtlphy->current_chan_bw) {
    #line 3418 
    case 0: 
            #line 3418 
    ;
    #line 3419 
    rtl_set_bbreg(hw,2220U,3146691U,3146240U);
    #line 3420 
    rtl_set_bbreg(hw,2244U,1073741824U,0U);
    #line 3422 
    if ((unsigned int)rtlphy->rf_type == 2U) 
                                             #line 3423 
                                             rtl_set_bbreg(hw,2120U,62914560U,7U); else 
                                                                    #line 3425 
                                                                    rtl_set_bbreg(hw,2120U,62914560U,8U);
    #line 3426 
    break;
    #line 3427 
    case 1: 
            #line 3427 
    ;
    #line 3428 
    rtl_set_bbreg(hw,2220U,3146691U,3146241U);
    #line 3429 
    rtl_set_bbreg(hw,2244U,1073741824U,0U);
    #line 3430 
    rtl_set_bbreg(hw,2220U,60U,(unsigned int)sub_chnl);
    #line 3431 
    rtl_set_bbreg(hw,2104U,4026531840U,(unsigned int)sub_chnl);
    #line 3433 
    if (((unsigned long)rtlphy->reg_837 & 4UL) != 0UL) 
                                                       #line 3434 
                                                       l1pk_val = (unsigned char)6U;
    else 
      #line 3436 
      if ((unsigned int)rtlphy->rf_type == 2U) 
                                               #line 3437 
                                               l1pk_val = (unsigned char)7U; else 
                                                                    #line 3439 
                                                                    l1pk_val = (unsigned char)8U;
    #line 3442 
    rtl_set_bbreg(hw,2120U,62914560U,(unsigned int)l1pk_val);
    #line 3444 
    if ((unsigned int)sub_chnl == 1U) 
                                      #line 3445 
                                      rtl_set_bbreg(hw,2560U,16U,1U); else 
                                                                    #line 3447 
                                                                    rtl_set_bbreg(hw,2560U,16U,0U);
    #line 3448 
    break;
    #line 3450 
    case 2: 
            #line 3450 
    ;
    #line 3452 
    rtl_set_bbreg(hw,2220U,3146691U,3146242U);
    #line 3454 
    rtl_set_bbreg(hw,2244U,1073741824U,1U);
    #line 3455 
    rtl_set_bbreg(hw,2220U,60U,(unsigned int)sub_chnl);
    #line 3456 
    rtl_set_bbreg(hw,2104U,4026531840U,(unsigned int)sub_chnl);
    #line 3458 
    if (((unsigned long)rtlphy->reg_837 & 4UL) != 0UL) 
                                                       #line 3459 
                                                       l1pk_val = (unsigned char)5U;
    else 
      #line 3461 
      if ((unsigned int)rtlphy->rf_type == 2U) 
                                               #line 3462 
                                               l1pk_val = (unsigned char)6U; else 
                                                                    #line 3464 
                                                                    l1pk_val = (unsigned char)7U;
    #line 3466 
    rtl_set_bbreg(hw,2120U,62914560U,(unsigned int)l1pk_val);
    #line 3468 
    break;
    #line 3469 
    default: 
             #line 3469 
    ;
    #line 3470 
    printk((char *)"\001",(int)rtlphy->current_chan_bw);
    #line 3472 
    break;
  }
  #line 3475 
  rtl8812ae_fixspur(hw,(enum ht_channel_width)rtlphy->current_chan_bw,(unsigned char)((int)rtlphy->current_channel));
  #line 3477 
  rtl8821ae_phy_rf6052_set_bandwidth(hw,(unsigned char)((int)rtlphy->current_chan_bw));
  #line 3478 
  rtlphy->set_bwmode_inprogress = (unsigned char)0U;
  #line 3480 
  _rtl_dbg_trace(rtlpriv,64ULL,4,(char *)"\n");
  #line 3481 
  return;
}

#line 3483  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
void rtl8821ae_phy_set_bw_mode(struct ieee80211_hw *hw, enum nl80211_channel_type ch_type)
{
  #line 3486 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 3487 
  struct rtl_phy *rtlphy = & rtlpriv->phy;
  #line 3488 
  struct rtl_hal *rtlhal = & ((struct rtl_priv *)hw->priv)->rtlhal;
  #line 3489 
  u8 tmp_bw = rtlphy->current_chan_bw;
  #line 3491 
  if ((unsigned int)rtlphy->set_bwmode_inprogress != 0U) 
                                                         #line 3492 
                                                         return;
  #line 3493 
  rtlphy->set_bwmode_inprogress = (unsigned char)1U;
  #line 3494 
  if (is_hal_stop(rtlhal)) {
    #line 3497 
    _rtl_dbg_trace(rtlpriv,1ULL,2,(char *)"FALSE driver sleep or unload\n");
    #line 3499 
    rtlphy->set_bwmode_inprogress = (unsigned char)0U;
    #line 3500 
    rtlphy->current_chan_bw = tmp_bw;
  }
  else 
       #line 3495 
       rtl8821ae_phy_set_bw_mode_callback(hw);
  #line 3502 
  return;
}

#line 3504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
void rtl8821ae_phy_sw_chnl_callback(struct ieee80211_hw *hw)
{
  #line 3510 
  u8 path;
  #line 3511 
  u32 data;
  #line 3506 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 3507 
  struct rtl_hal *rtlhal = & ((struct rtl_priv *)hw->priv)->rtlhal;
  #line 3508 
  struct rtl_phy *rtlphy = & rtlpriv->phy;
  #line 3509 
  u8 channel = rtlphy->current_channel;
  #line 3513 
  _rtl_dbg_trace(rtlpriv,64ULL,5,(char *)"switch to channel%d\n",(int)rtlphy->current_channel);
  #line 3515 
  if ((int)is_hal_stop(rtlhal) != 0) 
                                     #line 3516 
                                     return;
  #line 3518 
  if ((unsigned int)channel + 220U <= 12U) 
                                           #line 3519 
                                           data = 1172U;
  else 
    #line 3520 
    if ((unsigned int)channel + 206U <= 14U) 
                                             #line 3521 
                                             data = 1107U;
    else 
      #line 3522 
      if ((unsigned int)channel + 156U <= 16U) 
                                               #line 3523 
                                               data = 1106U;
      else 
        #line 3524 
        if ((unsigned int)channel > 117U) 
                                          #line 3525 
                                          data = 1042U; else 
                                                             #line 3527 
                                                             data = 2410U;
  #line 3528 
  rtl_set_bbreg(hw,2144U,536739840U,data);
  #line 3530 
  path = (unsigned char)0U;
  #line 3530 
  while ((int)rtlphy->num_total_rfpath > (int)path) {
    #line 3531 
    if ((unsigned int)channel + 220U <= 28U) 
                                             #line 3532 
                                             data = 257U;
    else 
      #line 3533 
      if ((unsigned int)channel + 156U <= 40U) 
                                               #line 3534 
                                               data = 769U;
      else 
        #line 3535 
        if ((unsigned int)channel > 140U) 
                                          #line 3536 
                                          data = 1281U; else 
                                                             #line 3538 
                                                             data = 0U;
    #line 3539 
    rtl8821ae_phy_set_rf_reg(hw,(enum radio_path)path,24U,459520U,data);
    #line 3542 
    rtl8821ae_phy_set_rf_reg(hw,(enum radio_path)path,24U,255U,(unsigned int)channel);
    #line 3545 
    if ((unsigned int)channel > 14U) 
      #line 3546 
      if ((unsigned int)rtlhal->hw_type == 13U) {
        #line 3547 
        if ((unsigned int)channel + 220U <= 28U) 
                                                 #line 3548 
                                                 data = 70889U; else 
                                                                  #line 3550 
                                                                  data = 69865U;
        #line 3551 
        rtl8821ae_phy_set_rf_reg(hw,(enum radio_path)path,99U,1048575U,data);
      }
    #line 3530 
    path = (u8)((int)path + 1);
  }
  #line 3556 
  _rtl_dbg_trace(rtlpriv,64ULL,5,(char *)"\n");
  #line 3557 
  return;
}

#line 3559  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
u8 rtl8821ae_phy_sw_chnl(struct ieee80211_hw *hw)
{
  #line 3561 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 3562 
  struct rtl_phy *rtlphy = & rtlpriv->phy;
  #line 3563 
  struct rtl_hal *rtlhal = & ((struct rtl_priv *)hw->priv)->rtlhal;
  #line 3564 
  u32 timeout = 1000U;
  #line 3564 
  u32 timecount = 0U;
  #line 3565 
  u8 channel = rtlphy->current_channel;
  #line 3567 
  if ((unsigned int)rtlphy->sw_chnl_inprogress != 0U) 
                                                      #line 3568 
                                                      return (unsigned char)0U;
  #line 3569 
  if ((unsigned int)rtlphy->set_bwmode_inprogress != 0U) 
                                                         #line 3570 
                                                         return (unsigned char)0U;
  #line 3572 
  if (is_hal_stop(rtlhal)) {
    #line 3573 
    _rtl_dbg_trace(rtlpriv,268435456ULL,4,(char *)"sw_chnl_inprogress false driver sleep or unload\n");
    #line 3575 
    return (unsigned char)0U;
  }
  #line 3577 
  while ((unsigned int)rtlphy->lck_inprogress != 0U && timecount < timeout) {
    {
      #line 3578 
      unsigned long __ms = 50UL;
      #line 3578 
      while (1) {
        #line 3578 
        unsigned long tmp_0;
        #line 3578 
        tmp_0 = __ms;
        #line 3578 
        __ms --;
        #line 3578 
        ;
        #line 3578 
        if (! (tmp_0 != 0UL)) 
                              #line 3578 
                              break;
        #line 3578 
        __const_udelay(4295000UL);
      }
    }
    #line 3579 
    timecount += 50U;
  }
  #line 3582 
  if ((unsigned int)rtlphy->current_channel > 14U && rtlhal->current_bandtype != (unsigned int)BAND_ON_5G) 
    #line 3583 
    rtl8821ae_phy_switch_wirelessband(hw,(unsigned char)1);
  else 
    #line 3584 
    if ((unsigned int)rtlphy->current_channel <= 14U && rtlhal->current_bandtype != (unsigned int)BAND_ON_2_4G) 
      #line 3585 
      rtl8821ae_phy_switch_wirelessband(hw,(unsigned char)0);
  #line 3587 
  rtlphy->sw_chnl_inprogress = (unsigned char)1U;
  #line 3588 
  if ((unsigned int)channel == 0U) 
                                   #line 3589 
                                   channel = (unsigned char)1U;
  #line 3591 
  _rtl_dbg_trace(rtlpriv,64ULL,5,(char *)"switch to channel%d, band type is %d\n",(int)rtlphy->current_channel,(unsigned int)rtlhal->current_bandtype);
  #line 3595 
  rtl8821ae_phy_sw_chnl_callback(hw);
  #line 3597 
  rtl8821ae_dm_clear_txpower_tracking_state(hw);
  #line 3598 
  rtl8821ae_phy_set_txpower_level(hw,(unsigned char)((int)rtlphy->current_channel));
  #line 3600 
  _rtl_dbg_trace(rtlpriv,64ULL,5,(char *)"\n");
  #line 3601 
  rtlphy->sw_chnl_inprogress = (unsigned char)0U;
  #line 3602 
  return (unsigned char)1U;
}

#line 3605  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
u8 _rtl8812ae_get_right_chnl_place_for_iqk(u8 chnl)
{
  #line 3614 
  u8 place;
  #line 3607 
  u8 channel_all[59U] = {(unsigned char)1U, (unsigned char)2U, (unsigned char)3U, (unsigned char)4U, (unsigned char)5U, (unsigned char)6U, (unsigned char)7U, (unsigned char)8U, (unsigned char)9U, (unsigned char)10U, (unsigned char)11U, (unsigned char)12U, (unsigned char)13U, (unsigned char)14U, (unsigned char)36U, (unsigned char)38U, (unsigned char)40U, (unsigned char)42U, (unsigned char)44U, (unsigned char)46U, (unsigned char)48U, (unsigned char)50U, (unsigned char)52U, (unsigned char)54U, (unsigned char)56U, (unsigned char)58U, (unsigned char)60U, (unsigned char)62U, (unsigned char)64U, (unsigned char)100U, (unsigned char)102U, (unsigned char)104U, (unsigned char)106U, (unsigned char)108U, (unsigned char)110U, (unsigned char)112U, (unsigned char)114U, (unsigned char)116U, (unsigned char)118U, (unsigned char)120U, (unsigned char)122U, (unsigned char)124U, (unsigned char)126U, (unsigned char)128U, (unsigned char)130U, (unsigned char)132U, (unsigned char)134U, (unsigned char)136U, (unsigned char)138U, (unsigned char)140U, (unsigned char)149U, (unsigned char)151U, (unsigned char)153U, (unsigned char)155U, (unsigned char)157U, (unsigned char)159U, (unsigned char)161U, (unsigned char)163U, (unsigned char)165U};
  #line 3616 
  if ((unsigned int)chnl > 14U) {
    #line 3617 
    place = (unsigned char)14U;
    #line 3617 
    while ((unsigned int)place <= 58U) {
      #line 3618 
      if ((int)channel_all[(int)place] == (int)chnl) 
                                                     #line 3619 
                                                     return (unsigned char)((unsigned int)place + 243U);
      #line 3617 
      place = (u8)((int)place + 1);
    }
  }
  #line 3622 
  return (unsigned char)0U;
}

#line 3629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
static void _rtl8821ae_iqk_backup_macbb(struct ieee80211_hw *hw, u32 *macbb_backup, u32 *backup_macbb_reg, u32 mac_bb_num)
{
  #line 3634 
  u32 i;
  #line 3633 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 3636 
  rtl_set_bbreg(hw,2092U,2147483648U,0U);
  #line 3638 
  i = 0U;
  #line 3638 
  while (i < mac_bb_num) {
    #line 3639 
    *(macbb_backup + (unsigned long)i) = rtl_read_dword(rtlpriv,*(backup_macbb_reg + (unsigned long)i));
    #line 3638 
    i ++;
  }
  #line 3641 
  _rtl_dbg_trace(rtlpriv,2147483648ULL,4,(char *)"BackupMacBB Success!!!!\n");
  #line 3642 
  return;
}

#line 3644  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
static void _rtl8821ae_iqk_backup_afe(struct ieee80211_hw *hw, u32 *afe_backup, u32 *backup_afe_REG, u32 afe_num)
{
  #line 3648 
  u32 i;
  #line 3647 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 3650 
  rtl_set_bbreg(hw,2092U,2147483648U,0U);
  #line 3652 
  i = 0U;
  #line 3652 
  while (i < afe_num) {
    #line 3653 
    *(afe_backup + (unsigned long)i) = rtl_read_dword(rtlpriv,*(backup_afe_REG + (unsigned long)i));
    #line 3652 
    i ++;
  }
  #line 3654 
  _rtl_dbg_trace(rtlpriv,2147483648ULL,4,(char *)"BackupAFE Success!!!!\n");
  #line 3655 
  return;
}

#line 3657  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
static void _rtl8821ae_iqk_backup_rf(struct ieee80211_hw *hw, u32 *rfa_backup, u32 *rfb_backup, u32 *backup_rf_reg, u32 rf_num)
{
  #line 3662 
  u32 i;
  #line 3661 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 3664 
  rtl_set_bbreg(hw,2092U,2147483648U,0U);
  #line 3666 
  i = 0U;
  #line 3666 
  while (i < rf_num) {
    #line 3667 
    *(rfa_backup + (unsigned long)i) = rtl_get_rfreg(hw,(enum radio_path)RF90_PATH_A,*(backup_rf_reg + (unsigned long)i),4294967295U);
    #line 3669 
    *(rfb_backup + (unsigned long)i) = rtl_get_rfreg(hw,(enum radio_path)RF90_PATH_B,*(backup_rf_reg + (unsigned long)i),4294967295U);
    #line 3666 
    i ++;
  }
  #line 3672 
  _rtl_dbg_trace(rtlpriv,2147483648ULL,4,(char *)"BackupRF Success!!!!\n");
  #line 3673 
  return;
}

#line 3675  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
static void _rtl8821ae_iqk_configure_mac(struct ieee80211_hw *hw)
{
  #line 3679 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 3681 
  rtl_set_bbreg(hw,2092U,2147483648U,0U);
  #line 3682 
  rtl_write_byte(rtlpriv,1314U,(unsigned char)63);
  #line 3683 
  rtl_set_bbreg(hw,1360U,2056U,0U);
  #line 3684 
  rtl_write_byte(rtlpriv,2056U,(unsigned char)0);
  #line 3685 
  rtl_set_bbreg(hw,2104U,15U,12U);
  #line 3686 
  return;
}

#line 3688  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
static void _rtl8821ae_iqk_tx_fill_iqc(struct ieee80211_hw *hw, enum radio_path path, u32 tx_x, u32 tx_y)
{
  #line 3691 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 3692 
  switch ((unsigned int)path) {
    #line 3693 
    case (unsigned int)0: 
                          #line 3693 
    ;
    #line 3695 
    rtl_set_bbreg(hw,2092U,2147483648U,1U);
    #line 3696 
    rtl_write_dword(rtlpriv,3216U,128U);
    #line 3697 
    rtl_write_dword(rtlpriv,3268U,537133056U);
    #line 3698 
    rtl_write_dword(rtlpriv,3272U,536870912U);
    #line 3699 
    rtl_set_bbreg(hw,3276U,2047U,tx_y);
    #line 3700 
    rtl_set_bbreg(hw,3284U,2047U,tx_x);
    #line 3701 
    _rtl_dbg_trace(rtlpriv,2147483648ULL,4,(char *)"TX_X = %x;;TX_Y = %x =====> fill to IQC\n",tx_x,tx_y);
    #line 3704 
    ;
    #line 3704 
    _rtl_dbg_trace(rtlpriv,2147483648ULL,4,(char *)"0xcd4 = %x;;0xccc = %x ====>fill to IQC\n",rtl_get_bbreg(hw,3284U,2047U),rtl_get_bbreg(hw,3276U,2047U));
    #line 3708 
    break;
    #line 3709 
    default: 
             #line 3709 
    ;
    #line 3710 
    break;
  }
  #line 3712 
  return;
}

#line 3714  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
static void _rtl8821ae_iqk_rx_fill_iqc(struct ieee80211_hw *hw, enum radio_path path, u32 rx_x, u32 rx_y)
{
  #line 3717 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 3718 
  switch ((unsigned int)path) {
    #line 3719 
    case (unsigned int)0: 
                          #line 3719 
    ;
    #line 3720 
    rtl_set_bbreg(hw,2092U,2147483648U,0U);
    #line 3721 
    rtl_set_bbreg(hw,3088U,1023U,rx_x >> 1);
    #line 3722 
    rtl_set_bbreg(hw,3088U,67043328U,rx_y >> 1);
    #line 3723 
    _rtl_dbg_trace(rtlpriv,2147483648ULL,4,(char *)"rx_x = %x;;rx_y = %x ====>fill to IQC\n",rx_x >> 1,rx_y >> 1);
    #line 3726 
    ;
    #line 3726 
    _rtl_dbg_trace(rtlpriv,2147483648ULL,4,(char *)"0xc10 = %x ====>fill to IQC\n",rtl_read_dword(rtlpriv,3088U));
    #line 3729 
    break;
    #line 3730 
    default: 
             #line 3730 
    ;
    #line 3731 
    break;
  }
  #line 3733 
  return;
}

#line 3737  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
static void _rtl8821ae_iqk_tx(struct ieee80211_hw *hw, enum radio_path path)
{
  #line 3743 
  u32 tx_fail;
  #line 3743 
  u32 rx_fail;
  #line 3743 
  u32 delay_count;
  #line 3743 
  u32 iqk_ready;
  #line 3743 
  u32 cal_retry;
  #line 3743 
  u32 temp_reg65;
  #line 3745 
  int tx_x0[10U];
  #line 3745 
  int tx_y0[10U];
  #line 3745 
  int tx_x0_rxk[10U];
  #line 3746 
  int tx_y0_rxk[10U];
  #line 3746 
  int rx_x0[10U];
  #line 3746 
  int rx_y0[10U];
  #line 3747 
  int tx_dt[10U];
  #line 3747 
  int rx_dt[10U];
  #line 3750 
  int i;
  #line 3750 
  int k;
  #line 3750 
  int vdf_y[3U];
  #line 3750 
  int vdf_x[3U];
  #line 3751 
  int ii;
  #line 3739 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 3740 
  struct rtl_phy *rtlphy = & rtlpriv->phy;
  #line 3741 
  struct rtl_hal *rtlhal = & ((struct rtl_priv *)hw->priv)->rtlhal;
  #line 3743 
  u32 cal = 0U;
  #line 3744 
  int tx_x = 0;
  #line 3744 
  int tx_y = 0;
  #line 3744 
  int rx_x = 0;
  #line 3744 
  int rx_y = 0;
  #line 3744 
  int tx_average = 0;
  #line 3744 
  int rx_average = 0;
  #line 3748 
  bool tx0iqkok = (_Bool)0;
  #line 3748 
  bool rx0iqkok = (_Bool)0;
  #line 3749 
  bool vdf_enable = (_Bool)0;
  #line 3751 
  int dx = 0;
  #line 3751 
  int dy = 0;
  #line 3751 
  int tx_finish = 0;
  #line 3751 
  int rx_finish = 0;
  #line 3753 
  _rtl_dbg_trace(rtlpriv,2147483648ULL,4,(char *)"BandWidth = %d.\n",(int)rtlphy->current_chan_bw);
  #line 3756 
  if ((unsigned int)rtlphy->current_chan_bw == 2U) 
                                                   #line 3757 
                                                   vdf_enable = (_Bool)1;
  #line 3759 
  while (cal <= 9U) {
    #line 3760 
    switch ((unsigned int)path) {
      #line 3761 
      case (unsigned int)0: 
                            #line 3761 
      ;
      #line 3762 
      temp_reg65 = rtl_get_rfreg(hw,path,101U,4294967295U);
      #line 3764 
      rtl_set_bbreg(hw,2092U,2147483648U,0U);
      #line 3767 
      rtl_write_dword(rtlpriv,3168U,2004318071U);
      #line 3768 
      rtl_write_dword(rtlpriv,3172U,2004318071U);
      #line 3769 
      rtl_write_dword(rtlpriv,3176U,427366777U);
      #line 3770 
      rtl_write_dword(rtlpriv,3180U,427366777U);
      #line 3771 
      rtl_write_dword(rtlpriv,3184U,427366777U);
      #line 3772 
      rtl_write_dword(rtlpriv,3188U,427366777U);
      #line 3773 
      rtl_write_dword(rtlpriv,3192U,427366777U);
      #line 3774 
      rtl_write_dword(rtlpriv,3196U,427366777U);
      #line 3775 
      rtl_write_dword(rtlpriv,3200U,427366777U);
      #line 3776 
      rtl_write_dword(rtlpriv,3204U,427366777U);
      #line 3778 
      rtl_set_bbreg(hw,3072U,15U,4U);
      #line 3783 
      rtl_set_bbreg(hw,3164U,117440512U,7U);
      #line 3786 
      rtl_set_rfreg(hw,path,239U,1048575U,524290U);
      #line 3787 
      rtl_set_rfreg(hw,path,24U,3072U,3U);
      #line 3788 
      rtl_set_rfreg(hw,path,48U,1048575U,131072U);
      #line 3789 
      rtl_set_rfreg(hw,path,49U,1048575U,63U);
      #line 3790 
      rtl_set_rfreg(hw,path,50U,1048575U,999363U);
      #line 3791 
      rtl_set_rfreg(hw,path,101U,1048575U,602581U);
      #line 3792 
      rtl_set_rfreg(hw,path,143U,1048575U,565249U);
      #line 3793 
      rtl_set_bbreg(hw,3256U,15U,13U);
      #line 3794 
      rtl_write_dword(rtlpriv,2316U,32768U);
      #line 3795 
      rtl_write_dword(rtlpriv,2816U,50331904U);
      #line 3796 
      rtl_set_bbreg(hw,3220U,1U,1U);
      #line 3797 
      rtl_write_dword(rtlpriv,2424U,687874048U);
      #line 3798 
      rtl_write_dword(rtlpriv,2428U,2835357696U);
      #line 3799 
      rtl_write_dword(rtlpriv,2436U,4598032U);
      #line 3801 
      rtl_set_bbreg(hw,2092U,2147483648U,1U);
      #line 3802 
      rtl_write_dword(rtlpriv,3208U,2182349812U);
      #line 3804 
      if (rtlhal->current_bandtype != (unsigned int)BAND_ON_2_4G) 
                                                                  #line 3805 
                                                                  rtl_write_dword(rtlpriv,3212U,1746288278U); else 
                                                                    #line 3807 
                                                                    rtl_write_dword(rtlpriv,3212U,672546454U);
      #line 3809 
      rtl_write_dword(rtlpriv,3200U,402689040U);
      #line 3810 
      rtl_write_dword(rtlpriv,3204U,939559952U);
      #line 3811 
      rtl_write_dword(rtlpriv,3256U,1048576U);
      #line 3812 
      rtl_write_dword(rtlpriv,2432U,4194304000U);
      #line 3813 
      rtl_write_dword(rtlpriv,2432U,4160749568U);
      {
        #line 3815 
        unsigned long __ms = 10UL;
        #line 3815 
        while (1) {
          #line 3815 
          unsigned long tmp;
          #line 3815 
          tmp = __ms;
          #line 3815 
          __ms --;
          #line 3815 
          ;
          #line 3815 
          if (! (tmp != 0UL)) 
                              #line 3815 
                              break;
          #line 3815 
          __const_udelay(4295000UL);
        }
      }
      #line 3816 
      rtl_write_dword(rtlpriv,3256U,0U);
      #line 3818 
      rtl_set_bbreg(hw,2092U,2147483648U,0U);
      #line 3819 
      ;
      #line 3819 
      ;
      #line 3819 
      rtl_set_rfreg(hw,path,88U,523776U,rtl_get_rfreg(hw,path,8U,1047552U));
      #line 3821 
      switch ((int)rtlphy->current_chan_bw) {
        #line 3822 
        case 1: 
                #line 3822 
        ;
        #line 3823 
        rtl_set_rfreg(hw,path,24U,3072U,1U);
        #line 3824 
        break;
        #line 3825 
        case 2: 
                #line 3825 
        ;
        #line 3826 
        rtl_set_rfreg(hw,path,24U,3072U,0U);
        #line 3827 
        break;
        #line 3828 
        default: 
                 #line 3828 
        ;
        #line 3829 
        break;
      }
      #line 3832 
      rtl_set_bbreg(hw,2092U,2147483648U,1U);
      #line 3835 
      rtl_set_bbreg(hw,2092U,2147483648U,0U);
      #line 3836 
      rtl_set_rfreg(hw,path,239U,1048575U,524288U);
      #line 3837 
      rtl_set_rfreg(hw,path,48U,1048575U,131072U);
      #line 3838 
      rtl_set_rfreg(hw,path,49U,1048575U,63U);
      #line 3839 
      rtl_set_rfreg(hw,path,50U,1048575U,999363U);
      #line 3840 
      rtl_set_rfreg(hw,path,101U,1048575U,602581U);
      #line 3841 
      rtl_set_rfreg(hw,path,143U,1048575U,565249U);
      #line 3842 
      rtl_set_rfreg(hw,path,239U,1048575U,0U);
      #line 3844 
      rtl_write_dword(rtlpriv,2316U,32768U);
      #line 3845 
      rtl_write_dword(rtlpriv,2816U,50331904U);
      #line 3846 
      rtl_set_bbreg(hw,3220U,1U,1U);
      #line 3847 
      rtl_write_dword(rtlpriv,2424U,687874048U);
      #line 3848 
      rtl_write_dword(rtlpriv,2428U,2835357696U);
      #line 3849 
      rtl_write_dword(rtlpriv,2436U,4630800U);
      #line 3851 
      rtl_set_bbreg(hw,2092U,2147483648U,1U);
      #line 3852 
      rtl_write_dword(rtlpriv,3208U,2182349809U);
      #line 3853 
      if (rtlhal->current_bandtype != (unsigned int)BAND_ON_2_4G) 
                                                                  #line 3854 
                                                                  rtl_write_dword(rtlpriv,3212U,1075199638U); else 
                                                                    #line 3856 
                                                                    rtl_write_dword(rtlpriv,3212U,1457814U);
      #line 3858 
      if ((int)vdf_enable == 1) {
        #line 3859 
        _rtl_dbg_trace(rtlpriv,2147483648ULL,4,(char *)"VDF_enable\n");
        #line 3860 
        k = 0;
        #line 3860 
        while (k <= 2) {
          #line 3861 
          switch (k) {
            #line 3862 
            case 0: 
                    #line 3862 
            ;
            #line 3863 
            rtl_write_dword(rtlpriv,3200U,402689080U);
            #line 3864 
            rtl_write_dword(rtlpriv,3204U,939559992U);
            #line 3865 
            rtl_set_bbreg(hw,3304U,2147483648U,0U);
            #line 3866 
            break;
            #line 3867 
            case 1: 
                    #line 3867 
            ;
            #line 3868 
            rtl_set_bbreg(hw,3200U,268435456U,0U);
            #line 3869 
            rtl_set_bbreg(hw,3204U,268435456U,0U);
            #line 3870 
            rtl_set_bbreg(hw,3304U,2147483648U,0U);
            #line 3871 
            break;
            #line 3872 
            case 2: 
                    #line 3872 
            ;
            #line 3873 
            _rtl_dbg_trace(rtlpriv,2147483648ULL,4,(char *)"vdf_y[1] = %x;;;vdf_y[0] = %x\n",vdf_y[1] >> 21,vdf_y[0] >> 21);
            #line 3875 
            _rtl_dbg_trace(rtlpriv,2147483648ULL,4,(char *)"vdf_x[1] = %x;;;vdf_x[0] = %x\n",vdf_x[1] >> 21,vdf_x[0] >> 21);
            #line 3877 
            tx_dt[cal] = (vdf_y[1] >> 20) - (vdf_y[0] >> 20);
            #line 3878 
            tx_dt[cal] = (tx_dt[cal] * 160000) / 15708;
            #line 3879 
            tx_dt[cal] = (int)((unsigned int)(tx_dt[cal] >> 1) + ((unsigned int)tx_dt[cal] & 1U));
            #line 3880 
            rtl_write_dword(rtlpriv,3200U,402689056U);
            #line 3881 
            rtl_write_dword(rtlpriv,3204U,939559968U);
            #line 3882 
            rtl_set_bbreg(hw,3304U,2147483648U,1U);
            #line 3883 
            rtl_set_bbreg(hw,3304U,1073676288U,(unsigned int)tx_dt[cal] & 16383U);
            #line 3884 
            break;
            #line 3885 
            default: 
                     #line 3885 
            ;
            #line 3886 
            break;
          }
          #line 3888 
          rtl_write_dword(rtlpriv,3256U,1048576U);
          #line 3889 
          cal_retry = 0U;
          #line 3890 
          while (1) {
            #line 3892 
            rtl_write_dword(rtlpriv,2432U,4194304000U);
            #line 3893 
            rtl_write_dword(rtlpriv,2432U,4160749568U);
            {
              #line 3895 
              unsigned long __ms_0 = 10UL;
              #line 3895 
              while (1) {
                #line 3895 
                unsigned long tmp_1;
                #line 3895 
                tmp_1 = __ms_0;
                #line 3895 
                __ms_0 --;
                #line 3895 
                ;
                #line 3895 
                if (! (tmp_1 != 0UL)) 
                                      #line 3895 
                                      break;
                #line 3895 
                __const_udelay(4295000UL);
              }
            }
            #line 3896 
            rtl_write_dword(rtlpriv,3256U,0U);
            #line 3897 
            delay_count = 0U;
            #line 3898 
            while (1) {
              #line 3899 
              iqk_ready = rtl_get_bbreg(hw,3328U,1024U);
              #line 3900 
              if (iqk_ready != 4294967295U || delay_count > 20U) 
                                                                 #line 3901 
                                                                 break;
              else {
                #line 3903 
                __const_udelay(4295000UL);
                #line 3904 
                delay_count ++;
              }
            }
            #line 3908 
            if (delay_count <= 19U) {
              #line 3910 
              tx_fail = rtl_get_bbreg(hw,3328U,4096U);
              #line 3912 
              if (tx_fail != 4294967295U) {
                #line 3913 
                rtl_write_dword(rtlpriv,3256U,33554432U);
                #line 3914 
                vdf_x[k] = (int)(rtl_get_bbreg(hw,3328U,134152192U) << 21);
                #line 3915 
                rtl_write_dword(rtlpriv,3256U,67108864U);
                #line 3916 
                vdf_y[k] = (int)(rtl_get_bbreg(hw,3328U,134152192U) << 21);
                #line 3917 
                tx0iqkok = (_Bool)1;
                #line 3918 
                break;
              }
              else {
                #line 3920 
                rtl_set_bbreg(hw,3276U,2047U,0U);
                #line 3921 
                rtl_set_bbreg(hw,3284U,2047U,512U);
                #line 3922 
                tx0iqkok = (_Bool)0;
                #line 3923 
                cal_retry ++;
                #line 3924 
                if (cal_retry == 10U) 
                                      #line 3925 
                                      break;
              }
            }
            else {
              #line 3928 
              tx0iqkok = (_Bool)0;
              #line 3929 
              cal_retry ++;
              #line 3930 
              if (cal_retry == 10U) 
                                    #line 3931 
                                    break;
            }
          }
          #line 3860 
          k ++;
        }
        #line 3935 
        if (k == 3) {
          #line 3936 
          tx_x0[cal] = vdf_x[k + -1];
          #line 3937 
          tx_y0[cal] = vdf_y[k + -1];
        }
      }
      else {
        #line 3940 
        rtl_write_dword(rtlpriv,3200U,402689040U);
        #line 3941 
        rtl_write_dword(rtlpriv,3204U,939559952U);
        #line 3942 
        rtl_write_dword(rtlpriv,3256U,1048576U);
        #line 3943 
        cal_retry = 0U;
        #line 3944 
        while (1) {
          #line 3946 
          rtl_write_dword(rtlpriv,2432U,4194304000U);
          #line 3947 
          rtl_write_dword(rtlpriv,2432U,4160749568U);
          {
            #line 3949 
            unsigned long __ms_1 = 10UL;
            #line 3949 
            while (1) {
              #line 3949 
              unsigned long tmp_4;
              #line 3949 
              tmp_4 = __ms_1;
              #line 3949 
              __ms_1 --;
              #line 3949 
              ;
              #line 3949 
              if (! (tmp_4 != 0UL)) 
                                    #line 3949 
                                    break;
              #line 3949 
              __const_udelay(4295000UL);
            }
          }
          #line 3950 
          rtl_write_dword(rtlpriv,3256U,0U);
          #line 3951 
          delay_count = 0U;
          #line 3952 
          while (1) {
            #line 3953 
            iqk_ready = rtl_get_bbreg(hw,3328U,1024U);
            #line 3954 
            if (iqk_ready != 4294967295U || delay_count > 20U) 
                                                               #line 3955 
                                                               break;
            else {
              #line 3957 
              __const_udelay(4295000UL);
              #line 3958 
              delay_count ++;
            }
          }
          #line 3962 
          if (delay_count <= 19U) {
            #line 3964 
            tx_fail = rtl_get_bbreg(hw,3328U,4096U);
            #line 3966 
            if (tx_fail != 4294967295U) {
              #line 3967 
              rtl_write_dword(rtlpriv,3256U,33554432U);
              #line 3968 
              tx_x0[cal] = (int)(rtl_get_bbreg(hw,3328U,134152192U) << 21);
              #line 3969 
              rtl_write_dword(rtlpriv,3256U,67108864U);
              #line 3970 
              tx_y0[cal] = (int)(rtl_get_bbreg(hw,3328U,134152192U) << 21);
              #line 3971 
              tx0iqkok = (_Bool)1;
              #line 3972 
              break;
            }
            else {
              #line 3974 
              rtl_set_bbreg(hw,3276U,2047U,0U);
              #line 3975 
              rtl_set_bbreg(hw,3284U,2047U,512U);
              #line 3976 
              tx0iqkok = (_Bool)0;
              #line 3977 
              cal_retry ++;
              #line 3978 
              if (cal_retry == 10U) 
                                    #line 3979 
                                    break;
            }
          }
          else {
            #line 3982 
            tx0iqkok = (_Bool)0;
            #line 3983 
            cal_retry ++;
            #line 3984 
            if (cal_retry == 10U) 
                                  #line 3985 
                                  break;
          }
        }
      }
      #line 3990 
      if (! tx0iqkok) 
                      #line 3991 
                      break;
      #line 3993 
      if ((int)vdf_enable == 1) {
        #line 3994 
        rtl_set_bbreg(hw,3304U,2147483648U,0U);
        #line 3995 
        _rtl_dbg_trace(rtlpriv,2147483648ULL,4,(char *)"RXVDF Start\n");
        #line 3996 
        k = 0;
        #line 3996 
        while (k <= 2) {
          #line 3998 
          rtl_set_bbreg(hw,2092U,2147483648U,0U);
          #line 4000 
          rtl_set_rfreg(hw,path,239U,1048575U,524288U);
          #line 4001 
          rtl_set_rfreg(hw,path,48U,1048575U,196608U);
          #line 4002 
          rtl_set_rfreg(hw,path,49U,1048575U,41U);
          #line 4003 
          rtl_set_rfreg(hw,path,50U,1048575U,884731U);
          #line 4004 
          rtl_set_rfreg(hw,path,101U,1048575U,temp_reg65);
          #line 4005 
          rtl_set_rfreg(hw,path,143U,1048575U,565249U);
          #line 4006 
          rtl_set_rfreg(hw,path,239U,1048575U,0U);
          #line 4008 
          rtl_set_bbreg(hw,3256U,15U,13U);
          #line 4009 
          rtl_write_dword(rtlpriv,2424U,687874048U);
          #line 4010 
          rtl_write_dword(rtlpriv,2428U,2835357696U);
          #line 4011 
          rtl_write_dword(rtlpriv,2436U,4630800U);
          #line 4012 
          rtl_write_dword(rtlpriv,2316U,32768U);
          #line 4013 
          rtl_write_dword(rtlpriv,2816U,50331904U);
          #line 4014 
          rtl_set_bbreg(hw,2092U,2147483648U,1U);
          #line 4015 
          switch (k) {
            #line 4016 
            case 0: 
                    #line 4016 
            ;
            #line 4018 
            rtl_write_dword(rtlpriv,3200U,402689080U);
            #line 4019 
            rtl_write_dword(rtlpriv,3204U,939559992U);
            #line 4020 
            rtl_set_bbreg(hw,3304U,1073741824U,0U);
            #line 4022 
            break;
            #line 4023 
            case 1: 
                    #line 4023 
            ;
            #line 4025 
            rtl_write_dword(rtlpriv,3200U,134253624U);
            #line 4026 
            rtl_write_dword(rtlpriv,3204U,671124536U);
            #line 4027 
            rtl_set_bbreg(hw,3304U,1073741824U,0U);
            #line 4029 
            break;
            #line 4030 
            case 2: 
                    #line 4030 
            ;
            #line 4032 
            _rtl_dbg_trace(rtlpriv,2147483648ULL,4,(char *)"VDF_Y[1] = %x;;;VDF_Y[0] = %x\n",vdf_y[1] >> 21,vdf_y[0] >> 21);
            #line 4035 
            _rtl_dbg_trace(rtlpriv,2147483648ULL,4,(char *)"VDF_X[1] = %x;;;VDF_X[0] = %x\n",vdf_x[1] >> 21,vdf_x[0] >> 21);
            #line 4038 
            rx_dt[cal] = (vdf_y[1] >> 20) - (vdf_y[0] >> 20);
            #line 4039 
            _rtl_dbg_trace(rtlpriv,2147483648ULL,4,(char *)"Rx_dt = %d\n",rx_dt[cal]);
            #line 4040 
            rx_dt[cal] = (rx_dt[cal] * 160000) / 13823;
            #line 4041 
            rx_dt[cal] = (int)((unsigned int)(rx_dt[cal] >> 1) + ((unsigned int)rx_dt[cal] & 1U));
            #line 4042 
            rtl_write_dword(rtlpriv,3200U,402689056U);
            #line 4043 
            rtl_write_dword(rtlpriv,3204U,939559968U);
            #line 4044 
            rtl_set_bbreg(hw,3304U,16383U,(unsigned int)rx_dt[cal] & 16383U);
            #line 4046 
            break;
            #line 4047 
            default: 
                     #line 4047 
            ;
            #line 4048 
            break;
          }
          #line 4050 
          rtl_write_dword(rtlpriv,3208U,2182480864U);
          #line 4051 
          rtl_write_dword(rtlpriv,3212U,1746288278U);
          #line 4052 
          rtl_write_dword(rtlpriv,3256U,1048576U);
          #line 4053 
          cal_retry = 0U;
          #line 4054 
          while (1) {
            #line 4056 
            rtl_write_dword(rtlpriv,2432U,4194304000U);
            #line 4057 
            rtl_write_dword(rtlpriv,2432U,4160749568U);
            {
              #line 4059 
              unsigned long __ms_2 = 10UL;
              #line 4059 
              while (1) {
                #line 4059 
                unsigned long tmp_7;
                #line 4059 
                tmp_7 = __ms_2;
                #line 4059 
                __ms_2 --;
                #line 4059 
                ;
                #line 4059 
                if (! (tmp_7 != 0UL)) 
                                      #line 4059 
                                      break;
                #line 4059 
                __const_udelay(4295000UL);
              }
            }
            #line 4060 
            rtl_write_dword(rtlpriv,3256U,0U);
            #line 4061 
            delay_count = 0U;
            #line 4062 
            while (1) {
              #line 4063 
              iqk_ready = rtl_get_bbreg(hw,3328U,1024U);
              #line 4064 
              if (iqk_ready != 4294967295U || delay_count > 20U) 
                                                                 #line 4065 
                                                                 break;
              else {
                #line 4067 
                __const_udelay(4295000UL);
                #line 4068 
                delay_count ++;
              }
            }
            #line 4072 
            if (delay_count <= 19U) {
              #line 4074 
              tx_fail = rtl_get_bbreg(hw,3328U,4096U);
              #line 4076 
              if (tx_fail != 4294967295U) {
                #line 4077 
                rtl_write_dword(rtlpriv,3256U,33554432U);
                #line 4078 
                tx_x0_rxk[cal] = (int)(rtl_get_bbreg(hw,3328U,134152192U) << 21);
                #line 4079 
                rtl_write_dword(rtlpriv,3256U,67108864U);
                #line 4080 
                tx_y0_rxk[cal] = (int)(rtl_get_bbreg(hw,3328U,134152192U) << 21);
                #line 4081 
                tx0iqkok = (_Bool)1;
                #line 4082 
                break;
              }
              else {
                #line 4084 
                tx0iqkok = (_Bool)0;
                #line 4085 
                cal_retry ++;
                #line 4086 
                if (cal_retry == 10U) 
                                      #line 4087 
                                      break;
              }
            }
            else {
              #line 4090 
              tx0iqkok = (_Bool)0;
              #line 4091 
              cal_retry ++;
              #line 4092 
              if (cal_retry == 10U) 
                                    #line 4093 
                                    break;
            }
          }
          #line 4097 
          if (! tx0iqkok) {
            #line 4098 
            tx_x0_rxk[cal] = tx_x0[cal];
            #line 4099 
            tx_y0_rxk[cal] = tx_y0[cal];
            #line 4100 
            tx0iqkok = (_Bool)1;
            #line 4101 
            _rtl_dbg_trace(rtlpriv,2147483648ULL,4,(char *)"RXK Step 1 fail\n");
          }
          #line 4108 
          rtl_set_bbreg(hw,2092U,2147483648U,0U);
          #line 4110 
          rtl_set_rfreg(hw,path,239U,1048575U,524288U);
          #line 4111 
          rtl_set_rfreg(hw,path,48U,1048575U,196608U);
          #line 4112 
          rtl_set_rfreg(hw,path,49U,1048575U,47U);
          #line 4113 
          rtl_set_rfreg(hw,path,50U,1048575U,1048507U);
          #line 4114 
          rtl_set_rfreg(hw,path,143U,1048575U,557057U);
          #line 4115 
          rtl_set_rfreg(hw,path,101U,1048575U,602584U);
          #line 4116 
          rtl_set_rfreg(hw,path,239U,1048575U,0U);
          #line 4118 
          rtl_set_bbreg(hw,2424U,67076096U,(unsigned int)(tx_x0_rxk[cal] >> 21));
          #line 4119 
          rtl_set_bbreg(hw,2424U,2047U,(unsigned int)(tx_y0_rxk[cal] >> 21));
          #line 4120 
          rtl_set_bbreg(hw,2424U,2147483648U,1U);
          #line 4121 
          rtl_set_bbreg(hw,2428U,2147483648U,0U);
          #line 4122 
          rtl_set_bbreg(hw,3256U,15U,14U);
          #line 4123 
          rtl_write_dword(rtlpriv,2316U,32768U);
          #line 4124 
          rtl_write_dword(rtlpriv,2436U,4630801U);
          #line 4126 
          rtl_set_bbreg(hw,2092U,2147483648U,1U);
          #line 4127 
          rtl_set_bbreg(hw,3200U,536870912U,1U);
          #line 4128 
          rtl_set_bbreg(hw,3204U,536870912U,0U);
          #line 4129 
          rtl_write_dword(rtlpriv,3208U,34865433U);
          #line 4131 
          rtl_write_dword(rtlpriv,3212U,672533760U);
          #line 4133 
          if (k == 2) 
                      #line 4134 
                      rtl_set_bbreg(hw,3304U,1073741824U,1U);
          #line 4135 
          rtl_write_dword(rtlpriv,3256U,1048576U);
          #line 4137 
          cal_retry = 0U;
          #line 4138 
          while (1) {
            #line 4140 
            rtl_write_dword(rtlpriv,2432U,4194304000U);
            #line 4141 
            rtl_write_dword(rtlpriv,2432U,4160749568U);
            {
              #line 4143 
              unsigned long __ms_3 = 10UL;
              #line 4143 
              while (1) {
                #line 4143 
                unsigned long tmp_10;
                #line 4143 
                tmp_10 = __ms_3;
                #line 4143 
                __ms_3 --;
                #line 4143 
                ;
                #line 4143 
                if (! (tmp_10 != 0UL)) 
                                       #line 4143 
                                       break;
                #line 4143 
                __const_udelay(4295000UL);
              }
            }
            #line 4144 
            rtl_write_dword(rtlpriv,3256U,0U);
            #line 4145 
            delay_count = 0U;
            #line 4146 
            while (1) {
              #line 4147 
              iqk_ready = rtl_get_bbreg(hw,3328U,1024U);
              #line 4148 
              if (iqk_ready != 4294967295U || delay_count > 20U) 
                                                                 #line 4149 
                                                                 break;
              else {
                #line 4151 
                __const_udelay(4295000UL);
                #line 4152 
                delay_count ++;
              }
            }
            #line 4156 
            if (delay_count <= 19U) {
              #line 4158 
              rx_fail = rtl_get_bbreg(hw,3328U,2048U);
              #line 4159 
              if (rx_fail == 0U) {
                #line 4160 
                rtl_write_dword(rtlpriv,3256U,100663296U);
                #line 4161 
                vdf_x[k] = (int)(rtl_get_bbreg(hw,3328U,134152192U) << 21);
                #line 4162 
                rtl_write_dword(rtlpriv,3256U,134217728U);
                #line 4163 
                vdf_y[k] = (int)(rtl_get_bbreg(hw,3328U,134152192U) << 21);
                #line 4164 
                rx0iqkok = (_Bool)1;
                #line 4165 
                break;
              }
              else {
                #line 4167 
                rtl_set_bbreg(hw,3088U,1023U,256U);
                #line 4168 
                rtl_set_bbreg(hw,3088U,67043328U,0U);
                #line 4169 
                rx0iqkok = (_Bool)0;
                #line 4170 
                cal_retry ++;
                #line 4171 
                if (cal_retry == 10U) 
                                      #line 4172 
                                      break;
              }
            }
            else {
              #line 4176 
              rx0iqkok = (_Bool)0;
              #line 4177 
              cal_retry ++;
              #line 4178 
              if (cal_retry == 10U) 
                                    #line 4179 
                                    break;
            }
          }
          #line 3996 
          k ++;
        }
        #line 4184 
        if (k == 3) {
          #line 4185 
          rx_x0[cal] = vdf_x[k + -1];
          #line 4186 
          rx_y0[cal] = vdf_y[k + -1];
        }
        #line 4188 
        rtl_set_bbreg(hw,3304U,2147483648U,1U);
      }
      else {
        #line 4193 
        rtl_set_bbreg(hw,2092U,2147483648U,0U);
        #line 4195 
        rtl_set_rfreg(hw,path,239U,1048575U,524288U);
        #line 4196 
        rtl_set_rfreg(hw,path,48U,1048575U,196608U);
        #line 4197 
        rtl_set_rfreg(hw,path,49U,1048575U,41U);
        #line 4198 
        rtl_set_rfreg(hw,path,50U,1048575U,884731U);
        #line 4199 
        rtl_set_rfreg(hw,path,101U,1048575U,temp_reg65);
        #line 4200 
        rtl_set_rfreg(hw,path,143U,1048575U,565249U);
        #line 4201 
        rtl_set_rfreg(hw,path,239U,1048575U,0U);
        #line 4202 
        rtl_write_dword(rtlpriv,2316U,32768U);
        #line 4203 
        rtl_write_dword(rtlpriv,2816U,50331904U);
        #line 4204 
        rtl_write_dword(rtlpriv,2436U,4630800U);
        #line 4206 
        rtl_set_bbreg(hw,2092U,2147483648U,1U);
        #line 4207 
        rtl_write_dword(rtlpriv,3200U,402689040U);
        #line 4208 
        rtl_write_dword(rtlpriv,3204U,939559952U);
        #line 4209 
        rtl_write_dword(rtlpriv,3208U,2182480864U);
        #line 4211 
        rtl_write_dword(rtlpriv,3256U,1048576U);
        #line 4212 
        cal_retry = 0U;
        #line 4213 
        while (1) {
          #line 4215 
          rtl_write_dword(rtlpriv,2432U,4194304000U);
          #line 4216 
          rtl_write_dword(rtlpriv,2432U,4160749568U);
          {
            #line 4218 
            unsigned long __ms_4 = 10UL;
            #line 4218 
            while (1) {
              #line 4218 
              unsigned long tmp_13;
              #line 4218 
              tmp_13 = __ms_4;
              #line 4218 
              __ms_4 --;
              #line 4218 
              ;
              #line 4218 
              if (! (tmp_13 != 0UL)) 
                                     #line 4218 
                                     break;
              #line 4218 
              __const_udelay(4295000UL);
            }
          }
          #line 4219 
          rtl_write_dword(rtlpriv,3256U,0U);
          #line 4220 
          delay_count = 0U;
          #line 4221 
          while (1) {
            #line 4222 
            iqk_ready = rtl_get_bbreg(hw,3328U,1024U);
            #line 4223 
            if (iqk_ready != 4294967295U || delay_count > 20U) 
                                                               #line 4224 
                                                               break;
            else {
              #line 4226 
              __const_udelay(4295000UL);
              #line 4227 
              delay_count ++;
            }
          }
          #line 4231 
          if (delay_count <= 19U) {
            #line 4233 
            tx_fail = rtl_get_bbreg(hw,3328U,4096U);
            #line 4235 
            if (tx_fail != 4294967295U) {
              #line 4236 
              rtl_write_dword(rtlpriv,3256U,33554432U);
              #line 4237 
              tx_x0_rxk[cal] = (int)(rtl_get_bbreg(hw,3328U,134152192U) << 21);
              #line 4238 
              rtl_write_dword(rtlpriv,3256U,67108864U);
              #line 4239 
              tx_y0_rxk[cal] = (int)(rtl_get_bbreg(hw,3328U,134152192U) << 21);
              #line 4240 
              tx0iqkok = (_Bool)1;
              #line 4241 
              break;
            }
            else {
              #line 4243 
              tx0iqkok = (_Bool)0;
              #line 4244 
              cal_retry ++;
              #line 4245 
              if (cal_retry == 10U) 
                                    #line 4246 
                                    break;
            }
          }
          else {
            #line 4249 
            tx0iqkok = (_Bool)0;
            #line 4250 
            cal_retry ++;
            #line 4251 
            if (cal_retry == 10U) 
                                  #line 4252 
                                  break;
          }
        }
        #line 4256 
        if (! tx0iqkok) {
          #line 4257 
          tx_x0_rxk[cal] = tx_x0[cal];
          #line 4258 
          tx_y0_rxk[cal] = tx_y0[cal];
          #line 4259 
          tx0iqkok = (_Bool)1;
          #line 4260 
          _rtl_dbg_trace(rtlpriv,2147483648ULL,4,(char *)"1");
        }
        #line 4265 
        rtl_set_bbreg(hw,2092U,2147483648U,0U);
        #line 4267 
        rtl_set_rfreg(hw,path,239U,1048575U,524288U);
        #line 4268 
        rtl_set_rfreg(hw,path,48U,1048575U,196608U);
        #line 4269 
        rtl_set_rfreg(hw,path,49U,1048575U,47U);
        #line 4270 
        rtl_set_rfreg(hw,path,50U,1048575U,1048507U);
        #line 4271 
        rtl_set_rfreg(hw,path,143U,1048575U,557057U);
        #line 4272 
        rtl_set_rfreg(hw,path,101U,1048575U,602584U);
        #line 4273 
        rtl_set_rfreg(hw,path,239U,1048575U,0U);
        #line 4275 
        rtl_set_bbreg(hw,2424U,67076096U,(unsigned int)(tx_x0_rxk[cal] >> 21));
        #line 4276 
        rtl_set_bbreg(hw,2424U,2047U,(unsigned int)(tx_y0_rxk[cal] >> 21));
        #line 4277 
        rtl_set_bbreg(hw,2424U,2147483648U,1U);
        #line 4278 
        rtl_set_bbreg(hw,2428U,2147483648U,0U);
        #line 4280 
        rtl_write_dword(rtlpriv,2316U,32768U);
        #line 4281 
        rtl_write_dword(rtlpriv,2436U,4630801U);
        #line 4283 
        rtl_set_bbreg(hw,2092U,2147483648U,1U);
        #line 4284 
        rtl_write_dword(rtlpriv,3200U,939559952U);
        #line 4285 
        rtl_write_dword(rtlpriv,3204U,402689040U);
        #line 4286 
        rtl_write_dword(rtlpriv,3208U,34865433U);
        #line 4288 
        rtl_write_dword(rtlpriv,3212U,672533760U);
        #line 4290 
        rtl_write_dword(rtlpriv,3256U,1048576U);
        #line 4292 
        cal_retry = 0U;
        #line 4293 
        while (1) {
          #line 4295 
          rtl_write_dword(rtlpriv,2432U,4194304000U);
          #line 4296 
          rtl_write_dword(rtlpriv,2432U,4160749568U);
          {
            #line 4298 
            unsigned long __ms_5 = 10UL;
            #line 4298 
            while (1) {
              #line 4298 
              unsigned long tmp_16;
              #line 4298 
              tmp_16 = __ms_5;
              #line 4298 
              __ms_5 --;
              #line 4298 
              ;
              #line 4298 
              if (! (tmp_16 != 0UL)) 
                                     #line 4298 
                                     break;
              #line 4298 
              __const_udelay(4295000UL);
            }
          }
          #line 4299 
          rtl_write_dword(rtlpriv,3256U,0U);
          #line 4300 
          delay_count = 0U;
          #line 4301 
          while (1) {
            #line 4302 
            iqk_ready = rtl_get_bbreg(hw,3328U,1024U);
            #line 4303 
            if (iqk_ready != 4294967295U || delay_count > 20U) 
                                                               #line 4304 
                                                               break;
            else {
              #line 4306 
              __const_udelay(4295000UL);
              #line 4307 
              delay_count ++;
            }
          }
          #line 4311 
          if (delay_count <= 19U) {
            #line 4313 
            rx_fail = rtl_get_bbreg(hw,3328U,2048U);
            #line 4314 
            if (rx_fail == 0U) {
              #line 4315 
              rtl_write_dword(rtlpriv,3256U,100663296U);
              #line 4316 
              rx_x0[cal] = (int)(rtl_get_bbreg(hw,3328U,134152192U) << 21);
              #line 4317 
              rtl_write_dword(rtlpriv,3256U,134217728U);
              #line 4318 
              rx_y0[cal] = (int)(rtl_get_bbreg(hw,3328U,134152192U) << 21);
              #line 4319 
              rx0iqkok = (_Bool)1;
              #line 4320 
              break;
            }
            else {
              #line 4322 
              rtl_set_bbreg(hw,3088U,1023U,256U);
              #line 4323 
              rtl_set_bbreg(hw,3088U,67043328U,0U);
              #line 4324 
              rx0iqkok = (_Bool)0;
              #line 4325 
              cal_retry ++;
              #line 4326 
              if (cal_retry == 10U) 
                                    #line 4327 
                                    break;
            }
          }
          else {
            #line 4331 
            rx0iqkok = (_Bool)0;
            #line 4332 
            cal_retry ++;
            #line 4333 
            if (cal_retry == 10U) 
                                  #line 4334 
                                  break;
          }
        }
      }
      #line 4339 
      if ((int)tx0iqkok != 0) 
                              #line 4340 
                              tx_average ++;
      #line 4341 
      if ((int)rx0iqkok != 0) 
                              #line 4342 
                              rx_average ++;
      #line 4343 
      rtl_set_bbreg(hw,2092U,2147483648U,0U);
      #line 4344 
      rtl_set_rfreg(hw,path,101U,1048575U,temp_reg65);
      #line 4345 
      break;
      #line 4346 
      default: 
               #line 4346 
      ;
      #line 4347 
      break;
    }
    #line 4349 
    cal ++;
  }
  #line 4353 
  switch ((unsigned int)path) {
    #line 4354 
    case (unsigned int)0: 
                          #line 4354 
    ;
    #line 4355 
    _rtl_dbg_trace(rtlpriv,2147483648ULL,4,(char *)"========Path_A =======\n");
    #line 4357 
    if (tx_average == 0) 
                         #line 4358 
                         break;
    #line 4360 
    i = 0;
    #line 4360 
    while (i < tx_average) {
      #line 4361 
      _rtl_dbg_trace(rtlpriv,2147483648ULL,4,(char *)"TX_X0_RXK[%d] = %x ;; TX_Y0_RXK[%d] = %x\n",i,tx_x0_rxk[i] >> 21,i,tx_y0_rxk[i] >> 21);
      #line 4365 
      _rtl_dbg_trace(rtlpriv,2147483648ULL,4,(char *)"TX_X0[%d] = %x ;; TX_Y0[%d] = %x\n",i,tx_x0[i] >> 21,i,tx_y0[i] >> 21);
      #line 4360 
      i ++;
    }
    #line 4370 
    i = 0;
    #line 4370 
    while (i < tx_average) {
      #line 4371 
      ii = i + 1;
      #line 4371 
      while (ii < tx_average) {
        #line 4372 
        dx = (tx_x0[i] >> 21) - (tx_x0[ii] >> 21);
        #line 4373 
        if ((unsigned int)dx + 2U <= 4U) {
          #line 4374 
          dy = (tx_y0[i] >> 21) - (tx_y0[ii] >> 21);
          #line 4375 
          if ((unsigned int)dy + 2U <= 4U) {
            #line 4376 
            tx_x = ((tx_x0[i] >> 21) + (tx_x0[ii] >> 21)) / 2;
            #line 4377 
            tx_y = ((tx_y0[i] >> 21) + (tx_y0[ii] >> 21)) / 2;
            #line 4378 
            tx_finish = 1;
            #line 4379 
            break;
          }
        }
        #line 4371 
        ii ++;
      }
      #line 4383 
      if (tx_finish == 1) 
                          #line 4384 
                          break;
      #line 4370 
      i ++;
    }
    #line 4387 
    if (tx_finish == 1) 
                        #line 4388 
                        _rtl8821ae_iqk_tx_fill_iqc(hw,path,(unsigned int)tx_x,(unsigned int)tx_y); else 
                                                                    #line 4390 
                                                                    _rtl8821ae_iqk_tx_fill_iqc(hw,path,512U,0U);
    #line 4392 
    if (rx_average == 0) 
                         #line 4393 
                         break;
    #line 4395 
    i = 0;
    #line 4395 
    while (i < rx_average) {
      #line 4396 
      _rtl_dbg_trace(rtlpriv,2147483648ULL,4,(char *)"RX_X0[%d] = %x ;; RX_Y0[%d] = %x\n",i,rx_x0[i] >> 21,i,rx_y0[i] >> 21);
      #line 4395 
      i ++;
    }
    #line 4400 
    i = 0;
    #line 4400 
    while (i < rx_average) {
      #line 4401 
      ii = i + 1;
      #line 4401 
      while (ii < rx_average) {
        #line 4402 
        dx = (rx_x0[i] >> 21) - (rx_x0[ii] >> 21);
        #line 4403 
        if ((unsigned int)dx + 3U <= 6U) {
          #line 4404 
          dy = (rx_y0[i] >> 21) - (rx_y0[ii] >> 21);
          #line 4405 
          if ((unsigned int)dy + 3U <= 6U) {
            #line 4406 
            rx_x = ((rx_x0[i] >> 21) + (rx_x0[ii] >> 21)) / 2;
            #line 4407 
            rx_y = ((rx_y0[i] >> 21) + (rx_y0[ii] >> 21)) / 2;
            #line 4408 
            rx_finish = 1;
            #line 4409 
            break;
          }
        }
        #line 4401 
        ii ++;
      }
      #line 4413 
      if (rx_finish == 1) 
                          #line 4414 
                          break;
      #line 4400 
      i ++;
    }
    #line 4417 
    if (rx_finish == 1) 
                        #line 4418 
                        _rtl8821ae_iqk_rx_fill_iqc(hw,path,(unsigned int)rx_x,(unsigned int)rx_y); else 
                                                                    #line 4420 
                                                                    _rtl8821ae_iqk_rx_fill_iqc(hw,path,512U,0U);
    #line 4421 
    break;
    #line 4422 
    default: 
             #line 4422 
    ;
    #line 4423 
    break;
  }
  #line 4425 
  return;
}

#line 4427  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
static void _rtl8821ae_iqk_restore_rf(struct ieee80211_hw *hw, enum radio_path path, u32 *backup_rf_reg, u32 *rf_backup, u32 rf_reg_num)
{
  #line 4433 
  u32 i;
  #line 4432 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 4435 
  rtl_set_bbreg(hw,2092U,2147483648U,0U);
  #line 4436 
  i = 0U;
  #line 4436 
  while (i <= 2U) {
    #line 4437 
    rtl_set_rfreg(hw,path,*(backup_rf_reg + (unsigned long)i),1048575U,*(rf_backup + (unsigned long)i));
    #line 4436 
    i ++;
  }
  #line 4440 
  switch ((unsigned int)path) {
    #line 4441 
    case (unsigned int)0: 
                          #line 4441 
    ;
    #line 4442 
    _rtl_dbg_trace(rtlpriv,2147483648ULL,4,(char *)"RestoreRF Path A Success!!!!\n");
    #line 4444 
    break;
    #line 4445 
    default: 
             #line 4445 
    ;
    #line 4446 
    break;
  }
  #line 4448 
  return;
}

#line 4450  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
static void _rtl8821ae_iqk_restore_afe(struct ieee80211_hw *hw, u32 *afe_backup, u32 *backup_afe_reg, u32 afe_num)
{
  #line 4454 
  u32 i;
  #line 4455 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 4457 
  rtl_set_bbreg(hw,2092U,2147483648U,0U);
  #line 4459 
  i = 0U;
  #line 4459 
  while (i < afe_num) {
    #line 4460 
    rtl_write_dword(rtlpriv,*(backup_afe_reg + (unsigned long)i),*(afe_backup + (unsigned long)i));
    #line 4459 
    i ++;
  }
  #line 4461 
  rtl_set_bbreg(hw,2092U,2147483648U,1U);
  #line 4462 
  rtl_write_dword(rtlpriv,3200U,0U);
  #line 4463 
  rtl_write_dword(rtlpriv,3204U,0U);
  #line 4464 
  rtl_write_dword(rtlpriv,3208U,0U);
  #line 4465 
  rtl_write_dword(rtlpriv,3212U,1006632960U);
  #line 4466 
  rtl_write_dword(rtlpriv,3216U,128U);
  #line 4467 
  rtl_write_dword(rtlpriv,3220U,0U);
  #line 4468 
  rtl_write_dword(rtlpriv,3268U,537133056U);
  #line 4469 
  rtl_write_dword(rtlpriv,3272U,536870912U);
  #line 4470 
  rtl_write_dword(rtlpriv,3256U,0U);
  #line 4471 
  _rtl_dbg_trace(rtlpriv,2147483648ULL,4,(char *)"RestoreAFE Success!!!!\n");
  #line 4472 
  return;
}

#line 4474  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
static void _rtl8821ae_iqk_restore_macbb(struct ieee80211_hw *hw, u32 *macbb_backup, u32 *backup_macbb_reg, u32 macbb_num)
{
  #line 4479 
  u32 i;
  #line 4480 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 4482 
  rtl_set_bbreg(hw,2092U,2147483648U,0U);
  #line 4484 
  i = 0U;
  #line 4484 
  while (i < macbb_num) {
    #line 4485 
    rtl_write_dword(rtlpriv,*(backup_macbb_reg + (unsigned long)i),*(macbb_backup + (unsigned long)i));
    #line 4484 
    i ++;
  }
  #line 4486 
  _rtl_dbg_trace(rtlpriv,2147483648ULL,4,(char *)"RestoreMacBB Success!!!!\n");
  #line 4487 
  return;
}

#line 4497  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
static void _rtl8821ae_phy_iq_calibrate(struct ieee80211_hw *hw)
{
  #line 4499 
  u32 macbb_backup[11U];
  #line 4500 
  u32 afe_backup[12U];
  #line 4501 
  u32 rfa_backup[3U];
  #line 4502 
  u32 rfb_backup[3U];
  #line 4503 
  u32 backup_macbb_reg[11U] = {2816U, 1312U, 1360U, 2056U, 2316U, 3072U, 3152U, 3584U, 3664U, 2104U, 2092U};
  #line 4507 
  u32 backup_afe_reg[12U] = {3164U, 3168U, 3172U, 3176U, 3180U, 3184U, 3188U, 3192U, 3196U, 3200U, 3204U, 3256U};
  #line 4511 
  u32 backup_rf_reg[3U] = {101U, 143U, 0U};
  #line 4513 
  _rtl8821ae_iqk_backup_macbb(hw,(u32 *)(& macbb_backup),(u32 *)(& backup_macbb_reg),11U);
  #line 4515 
  _rtl8821ae_iqk_backup_afe(hw,(u32 *)(& afe_backup),(u32 *)(& backup_afe_reg),12U);
  #line 4516 
  _rtl8821ae_iqk_backup_rf(hw,(u32 *)(& rfa_backup),(u32 *)(& rfb_backup),(u32 *)(& backup_rf_reg),3U);
  #line 4519 
  _rtl8821ae_iqk_configure_mac(hw);
  #line 4520 
  _rtl8821ae_iqk_tx(hw,(enum radio_path)RF90_PATH_A);
  #line 4521 
  _rtl8821ae_iqk_restore_rf(hw,(enum radio_path)RF90_PATH_A,(u32 *)(& backup_rf_reg),(u32 *)(& rfa_backup),3U);
  #line 4524 
  _rtl8821ae_iqk_restore_afe(hw,(u32 *)(& afe_backup),(u32 *)(& backup_afe_reg),12U);
  #line 4525 
  _rtl8821ae_iqk_restore_macbb(hw,(u32 *)(& macbb_backup),(u32 *)(& backup_macbb_reg),11U);
  #line 4526 
  return;
}

#line 4529  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
static void _rtl8821ae_phy_set_rfpath_switch(struct ieee80211_hw *hw, bool main_0)
{
  #line 4531 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 4534 
  _rtl_dbg_trace(rtlpriv,4ULL,4,(char *)"\n");
  #line 4536 
  if ((int)main_0 != 0) 
                        #line 4537 
                        rtl_set_bbreg(hw,3252U,805306368U,1U); else 
                                                                    #line 4539 
                                                                    rtl_set_bbreg(hw,3252U,805306368U,2U);
  #line 4540 
  return;
}

#line 4545  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
void rtl8812ae_phy_iq_calibrate(struct ieee80211_hw *hw, bool b_recovery)
{
  #line 4547 
  return;
}

#line 4549  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
void rtl8812ae_do_iqk(struct ieee80211_hw *hw, u8 delta_thermal_index, u8 thermal_value, u8 threshold)
{
  #line 4552 
  struct rtl_dm *rtldm = & ((struct rtl_priv *)hw->priv)->dm;
  #line 4554 
  rtldm->thermalvalue_iqk = thermal_value;
  #line 4555 
  rtl8812ae_phy_iq_calibrate(hw,(_Bool)0);
  #line 4556 
  return;
}

#line 4558  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
void rtl8821ae_phy_iq_calibrate(struct ieee80211_hw *hw, bool b_recovery)
{
  #line 4560 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 4561 
  struct rtl_phy *rtlphy = & rtlpriv->phy;
  #line 4563 
  if ((unsigned int)rtlphy->lck_inprogress == 0U) {
    #line 4564 
    cif_spin_lock_iqk_lock_of_rtl_locks(& rtlpriv->locks.iqk_lock);
    #line 4565 
    rtlphy->lck_inprogress = (unsigned char)1U;
    #line 4566 
    cif_spin_unlock_iqk_lock_of_rtl_locks(& rtlpriv->locks.iqk_lock);
    #line 4568 
    _rtl8821ae_phy_iq_calibrate(hw);
    #line 4570 
    cif_spin_lock_iqk_lock_of_rtl_locks(& rtlpriv->locks.iqk_lock);
    #line 4571 
    rtlphy->lck_inprogress = (unsigned char)0U;
    #line 4572 
    cif_spin_unlock_iqk_lock_of_rtl_locks(& rtlpriv->locks.iqk_lock);
  }
  #line 4574 
  return;
}

#line 4576  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
void rtl8821ae_reset_iqk_result(struct ieee80211_hw *hw)
{
  #line 4580 
  u8 i;
  #line 4578 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 4579 
  struct rtl_phy *rtlphy = & rtlpriv->phy;
  #line 4582 
  _rtl_dbg_trace(rtlpriv,2147483648ULL,4,(char *)"rtl8812ae_dm_reset_iqk_result:: settings regs %d default regs %d\n",46,46);
  #line 4588 
  i = (unsigned char)0U;
  #line 4588 
  while ((unsigned int)i <= 45U) {
    #line 4589 
    rtlphy->iqk_matrix[(int)i].value[0][0] = 256L;
    #line 4590 
    rtlphy->iqk_matrix[(int)i].value[0][2] = 256L;
    #line 4591 
    rtlphy->iqk_matrix[(int)i].value[0][4] = 256L;
    #line 4592 
    rtlphy->iqk_matrix[(int)i].value[0][6] = 256L;
    #line 4594 
    rtlphy->iqk_matrix[(int)i].value[0][1] = 0L;
    #line 4595 
    rtlphy->iqk_matrix[(int)i].value[0][3] = 0L;
    #line 4596 
    rtlphy->iqk_matrix[(int)i].value[0][5] = 0L;
    #line 4597 
    rtlphy->iqk_matrix[(int)i].value[0][7] = 0L;
    #line 4599 
    rtlphy->iqk_matrix[(int)i].iqk_done = (_Bool)0;
    #line 4588 
    i = (u8)((int)i + 1);
  }
  #line 4601 
  return;
}

#line 4603  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
void rtl8821ae_do_iqk(struct ieee80211_hw *hw, u8 delta_thermal_index, u8 thermal_value, u8 threshold)
{
  #line 4606 
  struct rtl_dm *rtldm = & ((struct rtl_priv *)hw->priv)->dm;
  #line 4608 
  rtl8821ae_reset_iqk_result(hw);
  #line 4610 
  rtldm->thermalvalue_iqk = thermal_value;
  #line 4611 
  rtl8821ae_phy_iq_calibrate(hw,(_Bool)0);
  #line 4612 
  return;
}

#line 4614  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
void rtl8821ae_phy_lc_calibrate(struct ieee80211_hw *hw)
{
  #line 4616 
  return;
}

#line 4618  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
void rtl8821ae_phy_ap_calibrate(struct ieee80211_hw *hw, s8 delta)
{
  #line 4620 
  return;
}

#line 4622  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
void rtl8821ae_phy_set_rfpath_switch(struct ieee80211_hw *hw, bool bmain)
{
  #line 4624 
  _rtl8821ae_phy_set_rfpath_switch(hw,(_Bool)((bool)((int)bmain) != 0));
  #line 4625 
  return;
}

#line 4627  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
bool rtl8821ae_phy_set_io_cmd(struct ieee80211_hw *hw, enum io_type iotype)
{
  #line 4629 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 4630 
  struct rtl_phy *rtlphy = & rtlpriv->phy;
  #line 4631 
  bool postprocessing = (_Bool)0;
  #line 4633 
  _rtl_dbg_trace(rtlpriv,8388608ULL,5,(char *)"-->IO Cmd(%#x), set_io_inprogress(%d)\n",(unsigned int)iotype,(int)rtlphy->set_io_inprogress);
  #line 4637 
  switch ((unsigned int)iotype) {
    #line 4638 
    case (unsigned int)2: 
                          #line 4638 
    ;
    #line 4639 
    _rtl_dbg_trace(rtlpriv,8388608ULL,5,(char *)"[IO CMD] Resume DM after scan.\n");
    #line 4641 
    postprocessing = (_Bool)1;
    #line 4642 
    break;
    #line 4643 
    case (unsigned int)0: 
                          #line 4643 
    ;
    #line 4644 
    case (unsigned int)1: 
                          #line 4644 
    ;
    #line 4645 
    _rtl_dbg_trace(rtlpriv,8388608ULL,5,(char *)"[IO CMD] Pause DM before scan.\n");
    #line 4647 
    postprocessing = (_Bool)1;
    #line 4648 
    break;
    #line 4649 
    default: 
             #line 4649 
    ;
    #line 4650 
    printk((char *)"\001",(unsigned int)iotype);
    #line 4652 
    break;
  }
  #line 4655 
  if ((int)postprocessing != 0 && (unsigned int)rtlphy->set_io_inprogress == 0U) {
    #line 4656 
    rtlphy->set_io_inprogress = (unsigned char)1U;
    #line 4657 
    rtlphy->current_io_type = iotype;
  }
  else 
       #line 4659 
       return (_Bool)0;
  #line 4661 
  rtl8821ae_phy_set_io(hw);
  #line 4662 
  _rtl_dbg_trace(rtlpriv,8388608ULL,5,(char *)"IO Type(%#x)\n",(unsigned int)iotype);
  #line 4663 
  return (_Bool)1;
}

#line 4666  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
static void rtl8821ae_phy_set_io(struct ieee80211_hw *hw)
{
  #line 4668 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 4669 
  struct dig_t *dm_digtable = & rtlpriv->dm_digtable;
  #line 4670 
  struct rtl_phy *rtlphy = & rtlpriv->phy;
  #line 4672 
  _rtl_dbg_trace(rtlpriv,8388608ULL,5,(char *)"--->Cmd(%#x), set_io_inprogress(%d)\n",(unsigned int)rtlphy->current_io_type,(int)rtlphy->set_io_inprogress);
  #line 4675 
  switch ((unsigned int)rtlphy->current_io_type) {
    #line 4676 
    case (unsigned int)2: 
                          #line 4676 
    ;
    #line 4677 
    if (rtlpriv->mac80211.opmode == (unsigned int)NL80211_IFTYPE_ADHOC) 
      #line 4678 
      _rtl8821ae_resume_tx_beacon(hw);
    #line 4679 
    rtl8821ae_dm_write_dig(hw,(unsigned char)((int)rtlphy->initgain_backup.xaagccore1));
    #line 4680 
    rtl8821ae_dm_write_cck_cca_thres(hw,(unsigned char)((int)rtlphy->initgain_backup.cca));
    #line 4682 
    break;
    #line 4683 
    case (unsigned int)0: 
                          #line 4683 
    ;
    #line 4684 
    if (rtlpriv->mac80211.opmode == (unsigned int)NL80211_IFTYPE_ADHOC) 
      #line 4685 
      _rtl8821ae_stop_tx_beacon(hw);
    #line 4686 
    rtlphy->initgain_backup.xaagccore1 = (unsigned char)dm_digtable->cur_igvalue;
    #line 4687 
    rtl8821ae_dm_write_dig(hw,(unsigned char)23);
    #line 4688 
    rtlphy->initgain_backup.cca = dm_digtable->cur_cck_cca_thres;
    #line 4689 
    rtl8821ae_dm_write_cck_cca_thres(hw,(unsigned char)64);
    #line 4690 
    break;
    #line 4691 
    case (unsigned int)1: 
                          #line 4691 
    ;
    #line 4692 
    break;
    #line 4693 
    default: 
             #line 4693 
    ;
    #line 4694 
    printk((char *)"\001",(unsigned int)rtlphy->current_io_type);
    #line 4696 
    break;
  }
  #line 4698 
  rtlphy->set_io_inprogress = (unsigned char)0U;
  #line 4699 
  _rtl_dbg_trace(rtlpriv,8388608ULL,5,(char *)"(%#x)\n",(unsigned int)rtlphy->current_io_type);
  #line 4700 
  return;
}

#line 4703  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
static void rtl8821ae_phy_set_rf_on(struct ieee80211_hw *hw)
{
  #line 4705 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 4707 
  rtl_write_byte(rtlpriv,17U,(unsigned char)43);
  #line 4708 
  rtl_write_byte(rtlpriv,2U,(unsigned char)227);
  #line 4709 
  rtl_write_byte(rtlpriv,2U,(unsigned char)226);
  #line 4710 
  rtl_write_byte(rtlpriv,2U,(unsigned char)227);
  #line 4711 
  rtl_write_byte(rtlpriv,1314U,(unsigned char)0);
  #line 4712 
  return;
}

#line 4714  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
static bool _rtl8821ae_phy_set_rf_power_state(struct ieee80211_hw *hw, enum rf_pwrstate rfpwr_state)
{
  #line 4722 
  u8 i;
  #line 4722 
  u8 queue_id;
  #line 4717 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 4718 
  struct rtl_pci_priv *pcipriv = (struct rtl_pci_priv *)(& ((struct rtl_priv *)hw->priv)->priv);
  #line 4719 
  struct rtl_mac *mac = & ((struct rtl_priv *)hw->priv)->mac80211;
  #line 4720 
  struct rtl_ps_ctl *ppsc = & ((struct rtl_priv *)hw->priv)->psc;
  #line 4721 
  bool bresult = (_Bool)1;
  #line 4723 
  struct rtl8192_tx_ring *ring = (struct rtl8192_tx_ring *)0;
  #line 4725 
  switch ((unsigned int)rfpwr_state) {
    #line 4726 
    case (unsigned int)0: 
                          #line 4726 
    ;
    #line 4727 
    if (ppsc->rfpwr_state == (unsigned int)ERFOFF && (int)((unsigned long)ppsc->cur_ps_level >> 3) & 1) {
      #line 4729 
      bool rtstatus = (_Bool)0;
      #line 4730 
      u32 initializecount = 0U;
      #line 4732 
      while (1) {
        #line 4733 
        initializecount ++;
        #line 4734 
        _rtl_dbg_trace(rtlpriv,1048576ULL,3,(char *)"IPS Set eRf nic enable\n");
        #line 4736 
        rtstatus = rtl_ps_enable_nic(hw);
        #line 4737 
        if (! (! rtstatus && initializecount <= 9U)) 
                                                     #line 4732 
                                                     break;
      }
      #line 4738 
      ppsc->cur_ps_level &= 4294967287U;
    }
    else {
      #line 4741 
      ;
      #line 4741 
      _rtl_dbg_trace(rtlpriv,1048576ULL,3,(char *)"Set ERFON sleeped:%d ms\n",jiffies_to_msecs(jiffies - ppsc->last_sleep_jiffies));
      #line 4746 
      ppsc->last_awake_jiffies = jiffies;
      #line 4747 
      rtl8821ae_phy_set_rf_on(hw);
    }
    #line 4749 
    if (mac->link_state == (unsigned int)MAC80211_LINKED) 
                                                          #line 4750 
                                                          (*(((rtlpriv->cfg)->ops)->led_control))(hw,(enum led_ctl_mode)LED_CTL_LINK); else 
                                                                    #line 4753 
                                                                    (*(((rtlpriv->cfg)->ops)->led_control))(hw,(enum led_ctl_mode)LED_CTL_NO_LINK);
    #line 4756 
    break;
    #line 4757 
    case (unsigned int)2: 
                          #line 4757 
    ;
    #line 4758 
    queue_id = (unsigned char)0U;
    #line 4758 
    i = (unsigned char)0U;
    #line 4758 
    while ((unsigned int)queue_id <= 8U) {
      #line 4760 
      ring = & pcipriv->dev.tx_ring[(int)queue_id];
      #line 4761 
      if ((unsigned int)queue_id == 4U) 
                                        #line 4761 
                                        goto _LOR;
      else {
        #line 4761 
        if (skb_queue_len(& ring->queue) == 0U) {
          #line 4761 
          _LOR: {
                  #line 4763 
                  queue_id = (u8)((int)queue_id + 1);
                  #line 4764 
                  goto __Cont;
                }
        }
        else {
          #line 4766 
          ;
          #line 4766 
          ;
          #line 4766 
          ;
          #line 4766 
          _rtl_dbg_trace(rtlpriv,1ULL,2,(char *)"eRf Off/Sleep: %d times TcbBusyQueue[%d] =%d before doze!\n",(int)i + 1,(int)queue_id,skb_queue_len(& ring->queue));
          #line 4771 
          __const_udelay(42950UL);
          #line 4772 
          i = (u8)((int)i + 1);
        }
      }
      #line 4774 
      if ((unsigned int)i > 63U) {
        #line 4775 
        ;
        #line 4775 
        ;
        #line 4775 
        _rtl_dbg_trace(rtlpriv,1ULL,2,(char *)"\n ERFSLEEP: %d times TcbBusyQueue[%d] = %d !\n",64,(int)queue_id,skb_queue_len(& ring->queue));
        #line 4780 
        break;
      }
      #line 4758 
      __Cont: 
              #line 4758 
      ;
    }
    #line 4784 
    if (((unsigned long)ppsc->reg_rfps_level & 8UL) != 0UL) {
      #line 4785 
      _rtl_dbg_trace(rtlpriv,1048576ULL,3,(char *)"IPS Set eRf nic disable\n");
      #line 4787 
      rtl_ps_disable_nic(hw);
      #line 4788 
      ppsc->cur_ps_level |= 8U;
    }
    else 
      #line 4790 
      if (ppsc->rfoff_reason == 268435456U) 
                                            #line 4791 
                                            (*(((rtlpriv->cfg)->ops)->led_control))(hw,(enum led_ctl_mode)LED_CTL_NO_LINK); else 
                                                                    #line 4794 
                                                                    (*(((rtlpriv->cfg)->ops)->led_control))(hw,(enum led_ctl_mode)LED_CTL_POWER_OFF);
    #line 4798 
    break;
    #line 4799 
    default: 
             #line 4799 
    ;
    #line 4800 
    printk((char *)"\001",(unsigned int)rfpwr_state);
    #line 4802 
    bresult = (_Bool)0;
    #line 4803 
    break;
  }
  #line 4805 
  if ((int)bresult != 0) 
                         #line 4806 
                         ppsc->rfpwr_state = rfpwr_state;
  #line 4807 
  return bresult;
}

#line 4810  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/phy.c"
bool rtl8821ae_phy_set_rf_power_state(struct ieee80211_hw *hw, enum rf_pwrstate rfpwr_state)
{
  #line 4813 
  struct rtl_ps_ctl *ppsc = & ((struct rtl_priv *)hw->priv)->psc;
  #line 4815 
  bool bresult = (_Bool)0;
  #line 4817 
  if (ppsc->rfpwr_state == rfpwr_state) 
                                        #line 4818 
                                        return bresult;
  #line 4819 
  bresult = _rtl8821ae_phy_set_rf_power_state(hw,rfpwr_state);
  #line 4820 
  return bresult;
}

#line 783  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/rtl8821ae.ko/concurrency safety/0/concurrency safety/weaver/phy.i.aux"
static void cif_spin_lock_rf_lock_of_rtl_locks(spinlock_t *lock)
{
  #line 786 
  ldv_spin_model_lock((char *)"rf_lock_of_rtl_locks");
  #line 788 
  spin_lock_0(lock);
  #line 789 
  return;
}

#line 792  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/rtl8821ae.ko/concurrency safety/0/concurrency safety/weaver/phy.i.aux"
static void cif_spin_unlock_rf_lock_of_rtl_locks(spinlock_t *lock)
{
  #line 795 
  ldv_spin_model_unlock((char *)"rf_lock_of_rtl_locks");
  #line 797 
  spin_unlock_0(lock);
  #line 798 
  return;
}

#line 801  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/rtl8821ae.ko/concurrency safety/0/concurrency safety/weaver/phy.i.aux"
static void cif_spin_lock_iqk_lock_of_rtl_locks(spinlock_t *lock)
{
  #line 804 
  ldv_spin_model_lock((char *)"iqk_lock_of_rtl_locks");
  #line 806 
  spin_lock_0(lock);
  #line 807 
  return;
}

#line 810  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/rtl8821ae.ko/concurrency safety/0/concurrency safety/weaver/phy.i.aux"
static void cif_spin_unlock_iqk_lock_of_rtl_locks(spinlock_t *lock)
{
  #line 813 
  ldv_spin_model_unlock((char *)"iqk_lock_of_rtl_locks");
  #line 815 
  spin_unlock_0(lock);
  #line 816 
  return;
}

#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/pwrseq.h"
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/pwrseq.c"
struct wlan_pwr_cfg rtl8812_power_on_flow[16U];
#line 307  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/pwrseq.h"
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/pwrseq.c"
struct wlan_pwr_cfg rtl8812_radio_off_flow[16U];
#line 318  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/pwrseq.h"
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/pwrseq.c"
struct wlan_pwr_cfg rtl8812_suspend_flow[31U];
#line 322  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/pwrseq.h"
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/pwrseq.c"
struct wlan_pwr_cfg rtl8812_resume_flow[31U];
#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/pwrseq.h"
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/pwrseq.c"
struct wlan_pwr_cfg rtl8812_hwpdn_flow[41U];
#line 330  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/pwrseq.h"
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/pwrseq.c"
struct wlan_pwr_cfg rtl8812_enter_lps_flow[16U];
#line 333  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/pwrseq.h"
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/pwrseq.c"
struct wlan_pwr_cfg rtl8812_leave_lps_flow[16U];
#line 661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/pwrseq.h"
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/pwrseq.c"
struct wlan_pwr_cfg rtl8821A_power_on_flow[26U];
#line 664  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/pwrseq.h"
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/pwrseq.c"
struct wlan_pwr_cfg rtl8821A_radio_off_flow[16U];
#line 675  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/pwrseq.h"
#line 120  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/pwrseq.c"
struct wlan_pwr_cfg rtl8821A_suspend_flow[31U];
#line 679  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/pwrseq.h"
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/pwrseq.c"
struct wlan_pwr_cfg rtl8821A_resume_flow[31U];
#line 683  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/pwrseq.h"
#line 138  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/pwrseq.c"
struct wlan_pwr_cfg rtl8821A_hwpdn_flow[31U];
#line 690  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/pwrseq.h"
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/pwrseq.c"
struct wlan_pwr_cfg rtl8821A_leave_lps_flow[16U];
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/pwrseq.c"
struct wlan_pwr_cfg rtl8812_power_on_flow[16U] = {{.offset = (unsigned short)5U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)4U}, {.offset = (unsigned short)6U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)2U, .msk = (unsigned char)2U, .value = (unsigned char)2U}, {.offset = (unsigned short)5U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)128U}, {.offset = (unsigned short)5U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)8U}, {.offset = (unsigned short)5U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)1U, .value = (unsigned char)1U}, {.offset = (unsigned short)5U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)2U, .msk = (unsigned char)1U}, {.offset = (unsigned short)65535U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)4U}};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/pwrseq.c"
struct wlan_pwr_cfg rtl8812_radio_off_flow[16U] = {{.offset = (unsigned short)3072U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)255U, .value = (unsigned char)4U}, {.offset = (unsigned short)3584U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)255U, .value = (unsigned char)4U}, {.offset = (unsigned short)2U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)1U}, {.offset = (unsigned short)2U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)3U}, {.offset = (unsigned short)2U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)4U, .cmd = (unsigned char)1U, .msk = (unsigned char)2U}, {.offset = (unsigned short)7U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)255U, .value = (unsigned char)42U}, {.offset = (unsigned short)8U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)2U, .cmd = (unsigned char)1U, .msk = (unsigned char)2U}, {.offset = (unsigned short)5U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)2U, .value = (unsigned char)2U}, {.offset = (unsigned short)5U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)2U, .msk = (unsigned char)2U}, {.offset = (unsigned short)65535U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)4U}};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/pwrseq.c"
struct wlan_pwr_cfg rtl8812_card_disable_flow[41U] = {{.offset = (unsigned short)3072U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)255U, .value = (unsigned char)4U}, {.offset = (unsigned short)3584U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)255U, .value = (unsigned char)4U}, {.offset = (unsigned short)2U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)1U}, {.offset = (unsigned short)2U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)3U}, {.offset = (unsigned short)2U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)4U, .cmd = (unsigned char)1U, .msk = (unsigned char)2U}, {.offset = (unsigned short)7U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)255U, .value = (unsigned char)42U}, {.offset = (unsigned short)8U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)2U, .cmd = (unsigned char)1U, .msk = (unsigned char)2U}, {.offset = (unsigned short)5U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)2U, .value = (unsigned char)2U}, {.offset = (unsigned short)5U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)2U, .msk = (unsigned char)2U}, {.offset = (unsigned short)3U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)4U}, {.offset = (unsigned short)128U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)255U, .value = (unsigned char)5U}, {.offset = (unsigned short)66U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)2U, .cmd = (unsigned char)1U, .msk = (unsigned char)240U, .value = (unsigned char)204U}, {.offset = (unsigned short)66U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)4U, .cmd = (unsigned char)1U, .msk = (unsigned char)240U, .value = (unsigned char)236U}, {.offset = (unsigned short)67U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)255U, .value = (unsigned char)7U}, {.offset = (unsigned short)69U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)255U}, {.offset = (unsigned short)70U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)255U, .value = (unsigned char)255U}, {.offset = (unsigned short)71U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)255U}, {.offset = (unsigned short)20U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)128U, .value = (unsigned char)128U}, {.offset = (unsigned short)21U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)1U, .value = (unsigned char)1U}, {.offset = (unsigned short)18U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)1U}, {.offset = (unsigned short)35U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)16U, .value = (unsigned char)16U}, {.offset = (unsigned short)8U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)2U, .cmd = (unsigned char)1U, .msk = (unsigned char)2U}, {.offset = (unsigned short)7U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)2U, .cmd = (unsigned char)1U, .msk = (unsigned char)255U, .value = (unsigned char)32U}, {.offset = (unsigned short)31U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)2U, .cmd = (unsigned char)1U, .msk = (unsigned char)2U}, {.offset = (unsigned short)118U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)2U, .cmd = (unsigned char)1U, .msk = (unsigned char)2U}, {.offset = (unsigned short)5U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)8U, .value = (unsigned char)8U}, {.offset = (unsigned short)65535U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)4U}};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/pwrseq.c"
struct wlan_pwr_cfg rtl8812_card_enable_flow[41U] = {{.offset = (unsigned short)18U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)1U, .value = (unsigned char)1U}, {.offset = (unsigned short)20U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)128U}, {.offset = (unsigned short)21U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)1U}, {.offset = (unsigned short)35U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)16U}, {.offset = (unsigned short)70U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)255U}, {.offset = (unsigned short)67U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)255U}, {.offset = (unsigned short)5U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)4U, .cmd = (unsigned char)1U, .msk = (unsigned char)4U}, {.offset = (unsigned short)5U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)8U}, {.offset = (unsigned short)3U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)4U, .value = (unsigned char)4U}, {.offset = (unsigned short)769U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)4U, .cmd = (unsigned char)1U, .msk = (unsigned char)255U}, {.offset = (unsigned short)5U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)4U}, {.offset = (unsigned short)6U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)2U, .msk = (unsigned char)2U, .value = (unsigned char)2U}, {.offset = (unsigned short)5U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)128U}, {.offset = (unsigned short)5U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)8U}, {.offset = (unsigned short)5U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)1U, .value = (unsigned char)1U}, {.offset = (unsigned short)5U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)2U, .msk = (unsigned char)1U}, {.offset = (unsigned short)65535U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)4U}};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/pwrseq.c"
struct wlan_pwr_cfg rtl8812_suspend_flow[31U] = {{.offset = (unsigned short)3072U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)255U, .value = (unsigned char)4U}, {.offset = (unsigned short)3584U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)255U, .value = (unsigned char)4U}, {.offset = (unsigned short)2U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)1U}, {.offset = (unsigned short)2U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)3U}, {.offset = (unsigned short)2U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)4U, .cmd = (unsigned char)1U, .msk = (unsigned char)2U}, {.offset = (unsigned short)7U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)255U, .value = (unsigned char)42U}, {.offset = (unsigned short)8U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)2U, .cmd = (unsigned char)1U, .msk = (unsigned char)2U}, {.offset = (unsigned short)5U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)2U, .value = (unsigned char)2U}, {.offset = (unsigned short)5U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)2U, .msk = (unsigned char)2U}, {.offset = (unsigned short)66U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)2U, .cmd = (unsigned char)1U, .msk = (unsigned char)240U, .value = (unsigned char)192U}, {.offset = (unsigned short)66U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)4U, .cmd = (unsigned char)1U, .msk = (unsigned char)240U, .value = (unsigned char)224U}, {.offset = (unsigned short)67U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)255U, .value = (unsigned char)7U}, {.offset = (unsigned short)69U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)255U}, {.offset = (unsigned short)70U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)255U, .value = (unsigned char)255U}, {.offset = (unsigned short)71U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)255U}, {.offset = (unsigned short)7U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)2U, .cmd = (unsigned char)1U, .msk = (unsigned char)255U}, {.offset = (unsigned short)20U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)128U, .value = (unsigned char)128U}, {.offset = (unsigned short)21U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)1U, .value = (unsigned char)1U}, {.offset = (unsigned short)35U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)16U, .value = (unsigned char)16U}, {.offset = (unsigned short)8U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)2U, .cmd = (unsigned char)1U, .msk = (unsigned char)2U}, {.offset = (unsigned short)5U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)8U, .value = (unsigned char)8U}, {.offset = (unsigned short)65535U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)4U}};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/pwrseq.c"
struct wlan_pwr_cfg rtl8812_resume_flow[31U] = {{.offset = (unsigned short)5U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)8U}, {.offset = (unsigned short)35U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)16U}, {.offset = (unsigned short)21U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)1U}, {.offset = (unsigned short)20U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)128U}, {.offset = (unsigned short)70U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)255U}, {.offset = (unsigned short)67U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)255U}, {.offset = (unsigned short)5U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)4U}, {.offset = (unsigned short)6U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)2U, .msk = (unsigned char)2U, .value = (unsigned char)2U}, {.offset = (unsigned short)5U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)128U}, {.offset = (unsigned short)5U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)8U}, {.offset = (unsigned short)5U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)1U, .value = (unsigned char)1U}, {.offset = (unsigned short)5U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)2U, .msk = (unsigned char)1U}, {.offset = (unsigned short)65535U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)4U}};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/pwrseq.c"
struct wlan_pwr_cfg rtl8812_hwpdn_flow[41U] = {{.offset = (unsigned short)3072U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)255U, .value = (unsigned char)4U}, {.offset = (unsigned short)3584U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)255U, .value = (unsigned char)4U}, {.offset = (unsigned short)2U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)1U}, {.offset = (unsigned short)2U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)3U}, {.offset = (unsigned short)2U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)4U, .cmd = (unsigned char)1U, .msk = (unsigned char)2U}, {.offset = (unsigned short)7U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)255U, .value = (unsigned char)42U}, {.offset = (unsigned short)8U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)2U, .cmd = (unsigned char)1U, .msk = (unsigned char)2U}, {.offset = (unsigned short)5U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)2U, .value = (unsigned char)2U}, {.offset = (unsigned short)5U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)2U, .msk = (unsigned char)2U}, {.offset = (unsigned short)5U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)128U, .value = (unsigned char)128U}, {.offset = (unsigned short)65535U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)4U}};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/pwrseq.c"
struct wlan_pwr_cfg rtl8812_enter_lps_flow[16U] = {{.offset = (unsigned short)769U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)4U, .cmd = (unsigned char)1U, .msk = (unsigned char)255U, .value = (unsigned char)255U}, {.offset = (unsigned short)1314U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)255U, .value = (unsigned char)127U}, {.offset = (unsigned short)1528U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)2U, .msk = (unsigned char)255U}, {.offset = (unsigned short)1529U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)2U, .msk = (unsigned char)255U}, {.offset = (unsigned short)1530U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)2U, .msk = (unsigned char)255U}, {.offset = (unsigned short)1531U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)2U, .msk = (unsigned char)255U}, {.offset = (unsigned short)3072U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)255U, .value = (unsigned char)4U}, {.offset = (unsigned short)3584U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)255U, .value = (unsigned char)4U}, {.offset = (unsigned short)2U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)1U}, {.offset = (unsigned short)2U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)3U}, {.offset = (unsigned short)2U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)2U, .cmd = (unsigned char)1U, .msk = (unsigned char)2U}, {.offset = (unsigned short)256U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)255U, .value = (unsigned char)3U}, {.offset = (unsigned short)257U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)2U}, {.offset = (unsigned short)1363U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)32U, .value = (unsigned char)32U}, {.offset = (unsigned short)65535U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)4U}};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/pwrseq.c"
struct wlan_pwr_cfg rtl8812_leave_lps_flow[16U] = {{.offset = (unsigned short)128U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)1U, .base = (unsigned char)3U, .cmd = (unsigned char)1U, .msk = (unsigned char)255U, .value = (unsigned char)132U}, {.offset = (unsigned short)65112U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)2U, .cmd = (unsigned char)1U, .msk = (unsigned char)255U, .value = (unsigned char)132U}, {.offset = (unsigned short)865U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)4U, .cmd = (unsigned char)1U, .msk = (unsigned char)255U, .value = (unsigned char)132U}, {.offset = (unsigned short)2U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)3U, .value = (unsigned char)1U}, {.offset = (unsigned short)8U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)16U}, {.offset = (unsigned short)265U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)2U, .msk = (unsigned char)128U}, {.offset = (unsigned short)41U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)192U}, {.offset = (unsigned short)257U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)2U, .value = (unsigned char)2U}, {.offset = (unsigned short)256U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)255U, .value = (unsigned char)255U}, {.offset = (unsigned short)2U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)3U, .value = (unsigned char)3U}, {.offset = (unsigned short)1314U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)255U}, {.offset = (unsigned short)65535U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)4U}};
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/pwrseq.c"
struct wlan_pwr_cfg rtl8821A_power_on_flow[26U] = {{.offset = (unsigned short)32U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)3U, .cmd = (unsigned char)1U, .msk = (unsigned char)1U, .value = (unsigned char)1U}, {.offset = (unsigned short)103U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)3U, .cmd = (unsigned char)1U, .msk = (unsigned char)16U}, {.offset = (unsigned short)1U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)3U, .cmd = (unsigned char)3U, .msk = (unsigned char)1U, .value = (unsigned char)1U}, {.cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)3U, .cmd = (unsigned char)1U, .msk = (unsigned char)32U}, {.offset = (unsigned short)5U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)28U}, {.offset = (unsigned short)117U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)4U, .cmd = (unsigned char)1U, .msk = (unsigned char)1U, .value = (unsigned char)1U}, {.offset = (unsigned short)6U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)2U, .msk = (unsigned char)2U, .value = (unsigned char)2U}, {.offset = (unsigned short)117U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)4U, .cmd = (unsigned char)1U, .msk = (unsigned char)1U}, {.offset = (unsigned short)6U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)1U, .value = (unsigned char)1U}, {.offset = (unsigned short)5U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)128U}, {.offset = (unsigned short)5U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)24U}, {.offset = (unsigned short)5U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)1U, .value = (unsigned char)1U}, {.offset = (unsigned short)5U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)2U, .msk = (unsigned char)1U}, {.offset = (unsigned short)79U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)1U, .value = (unsigned char)1U}, {.offset = (unsigned short)103U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)48U, .value = (unsigned char)48U}, {.offset = (unsigned short)37U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)64U}, {.offset = (unsigned short)73U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)2U, .value = (unsigned char)2U}, {.offset = (unsigned short)99U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)2U, .value = (unsigned char)2U}, {.offset = (unsigned short)98U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)2U}, {.offset = (unsigned short)88U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)1U, .value = (unsigned char)1U}, {.offset = (unsigned short)90U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)2U, .value = (unsigned char)2U}, {.offset = (unsigned short)122U, .cut_msk = (unsigned char)1U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)255U, .value = (unsigned char)58U}, {.offset = (unsigned short)46U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)255U, .value = (unsigned char)130U}, {.offset = (unsigned short)16U, .cut_msk = (unsigned char)2U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)64U, .value = (unsigned char)64U}, {.offset = (unsigned short)65535U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)4U}};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/pwrseq.c"
struct wlan_pwr_cfg rtl8821A_radio_off_flow[16U] = {{.offset = (unsigned short)31U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)255U}, {.offset = (unsigned short)79U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)1U}, {.offset = (unsigned short)73U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)2U}, {.offset = (unsigned short)5U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)2U, .value = (unsigned char)2U}, {.offset = (unsigned short)5U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)2U, .msk = (unsigned char)2U}, {.cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)3U, .cmd = (unsigned char)1U, .msk = (unsigned char)32U, .value = (unsigned char)32U}, {.offset = (unsigned short)32U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)3U, .cmd = (unsigned char)1U, .msk = (unsigned char)1U}, {.offset = (unsigned short)65535U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)4U}};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/pwrseq.c"
struct wlan_pwr_cfg rtl8821A_card_disable_flow[31U] = {{.offset = (unsigned short)31U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)255U}, {.offset = (unsigned short)79U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)1U}, {.offset = (unsigned short)73U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)2U}, {.offset = (unsigned short)5U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)2U, .value = (unsigned char)2U}, {.offset = (unsigned short)5U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)2U, .msk = (unsigned char)2U}, {.cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)3U, .cmd = (unsigned char)1U, .msk = (unsigned char)32U, .value = (unsigned char)32U}, {.offset = (unsigned short)32U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)3U, .cmd = (unsigned char)1U, .msk = (unsigned char)1U}, {.offset = (unsigned short)7U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)1U, .cmd = (unsigned char)1U, .msk = (unsigned char)255U, .value = (unsigned char)32U}, {.offset = (unsigned short)5U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)3U, .cmd = (unsigned char)1U, .msk = (unsigned char)24U, .value = (unsigned char)8U}, {.offset = (unsigned short)5U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)4U, .cmd = (unsigned char)1U, .msk = (unsigned char)4U, .value = (unsigned char)4U}, {.offset = (unsigned short)74U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)2U, .cmd = (unsigned char)1U, .msk = (unsigned char)1U, .value = (unsigned char)1U}, {.offset = (unsigned short)35U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)1U, .cmd = (unsigned char)1U, .msk = (unsigned char)16U, .value = (unsigned char)16U}, {.offset = (unsigned short)134U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)1U, .base = (unsigned char)3U, .cmd = (unsigned char)1U, .msk = (unsigned char)1U, .value = (unsigned char)1U}, {.offset = (unsigned short)134U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)1U, .base = (unsigned char)3U, .cmd = (unsigned char)2U, .msk = (unsigned char)2U}, {.offset = (unsigned short)65535U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)4U}};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/pwrseq.c"
struct wlan_pwr_cfg rtl8821A_card_enable_flow[41U] = {{.offset = (unsigned short)5U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)136U}, {.offset = (unsigned short)134U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)1U, .base = (unsigned char)3U, .cmd = (unsigned char)1U, .msk = (unsigned char)1U}, {.offset = (unsigned short)134U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)1U, .base = (unsigned char)3U, .cmd = (unsigned char)2U, .msk = (unsigned char)2U, .value = (unsigned char)2U}, {.offset = (unsigned short)74U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)2U, .cmd = (unsigned char)1U, .msk = (unsigned char)1U}, {.offset = (unsigned short)5U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)24U}, {.offset = (unsigned short)35U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)1U, .cmd = (unsigned char)1U, .msk = (unsigned char)16U}, {.offset = (unsigned short)769U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)4U, .cmd = (unsigned char)1U, .msk = (unsigned char)255U}, {.offset = (unsigned short)32U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)3U, .cmd = (unsigned char)1U, .msk = (unsigned char)1U, .value = (unsigned char)1U}, {.offset = (unsigned short)103U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)3U, .cmd = (unsigned char)1U, .msk = (unsigned char)16U}, {.offset = (unsigned short)1U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)3U, .cmd = (unsigned char)3U, .msk = (unsigned char)1U, .value = (unsigned char)1U}, {.cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)3U, .cmd = (unsigned char)1U, .msk = (unsigned char)32U}, {.offset = (unsigned short)5U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)28U}, {.offset = (unsigned short)117U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)4U, .cmd = (unsigned char)1U, .msk = (unsigned char)1U, .value = (unsigned char)1U}, {.offset = (unsigned short)6U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)2U, .msk = (unsigned char)2U, .value = (unsigned char)2U}, {.offset = (unsigned short)117U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)4U, .cmd = (unsigned char)1U, .msk = (unsigned char)1U}, {.offset = (unsigned short)6U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)1U, .value = (unsigned char)1U}, {.offset = (unsigned short)5U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)128U}, {.offset = (unsigned short)5U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)24U}, {.offset = (unsigned short)5U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)1U, .value = (unsigned char)1U}, {.offset = (unsigned short)5U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)2U, .msk = (unsigned char)1U}, {.offset = (unsigned short)79U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)1U, .value = (unsigned char)1U}, {.offset = (unsigned short)103U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)48U, .value = (unsigned char)48U}, {.offset = (unsigned short)37U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)64U}, {.offset = (unsigned short)73U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)2U, .value = (unsigned char)2U}, {.offset = (unsigned short)99U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)2U, .value = (unsigned char)2U}, {.offset = (unsigned short)98U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)2U}, {.offset = (unsigned short)88U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)1U, .value = (unsigned char)1U}, {.offset = (unsigned short)90U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)2U, .value = (unsigned char)2U}, {.offset = (unsigned short)122U, .cut_msk = (unsigned char)1U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)255U, .value = (unsigned char)58U}, {.offset = (unsigned short)46U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)255U, .value = (unsigned char)130U}, {.offset = (unsigned short)16U, .cut_msk = (unsigned char)2U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)64U, .value = (unsigned char)64U}, {.offset = (unsigned short)65535U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)4U}};
#line 120  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/pwrseq.c"
struct wlan_pwr_cfg rtl8821A_suspend_flow[31U] = {{.offset = (unsigned short)31U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)255U}, {.offset = (unsigned short)79U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)1U}, {.offset = (unsigned short)73U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)2U}, {.offset = (unsigned short)5U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)2U, .value = (unsigned char)2U}, {.offset = (unsigned short)5U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)2U, .msk = (unsigned char)2U}, {.cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)3U, .cmd = (unsigned char)1U, .msk = (unsigned char)32U, .value = (unsigned char)32U}, {.offset = (unsigned short)32U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)3U, .cmd = (unsigned char)1U, .msk = (unsigned char)1U}, {.offset = (unsigned short)5U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)4U, .cmd = (unsigned char)1U, .msk = (unsigned char)24U, .value = (unsigned char)24U}, {.offset = (unsigned short)5U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)3U, .cmd = (unsigned char)1U, .msk = (unsigned char)24U, .value = (unsigned char)8U}, {.offset = (unsigned short)35U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)1U, .cmd = (unsigned char)1U, .msk = (unsigned char)16U, .value = (unsigned char)16U}, {.offset = (unsigned short)7U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)1U, .cmd = (unsigned char)1U, .msk = (unsigned char)255U, .value = (unsigned char)32U}, {.offset = (unsigned short)5U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)4U, .cmd = (unsigned char)1U, .msk = (unsigned char)24U, .value = (unsigned char)24U}, {.offset = (unsigned short)134U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)1U, .base = (unsigned char)3U, .cmd = (unsigned char)1U, .msk = (unsigned char)1U, .value = (unsigned char)1U}, {.offset = (unsigned short)134U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)1U, .base = (unsigned char)3U, .cmd = (unsigned char)2U, .msk = (unsigned char)2U}, {.offset = (unsigned short)65535U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)4U}};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/pwrseq.c"
struct wlan_pwr_cfg rtl8821A_resume_flow[31U] = {{.offset = (unsigned short)5U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)136U}, {.offset = (unsigned short)134U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)1U, .base = (unsigned char)3U, .cmd = (unsigned char)1U, .msk = (unsigned char)1U}, {.offset = (unsigned short)134U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)1U, .base = (unsigned char)3U, .cmd = (unsigned char)2U, .msk = (unsigned char)2U, .value = (unsigned char)2U}, {.offset = (unsigned short)35U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)1U, .cmd = (unsigned char)1U, .msk = (unsigned char)16U}, {.offset = (unsigned short)5U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)24U}, {.offset = (unsigned short)32U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)3U, .cmd = (unsigned char)1U, .msk = (unsigned char)1U, .value = (unsigned char)1U}, {.offset = (unsigned short)103U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)3U, .cmd = (unsigned char)1U, .msk = (unsigned char)16U}, {.offset = (unsigned short)1U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)3U, .cmd = (unsigned char)3U, .msk = (unsigned char)1U, .value = (unsigned char)1U}, {.cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)3U, .cmd = (unsigned char)1U, .msk = (unsigned char)32U}, {.offset = (unsigned short)5U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)28U}, {.offset = (unsigned short)117U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)4U, .cmd = (unsigned char)1U, .msk = (unsigned char)1U, .value = (unsigned char)1U}, {.offset = (unsigned short)6U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)2U, .msk = (unsigned char)2U, .value = (unsigned char)2U}, {.offset = (unsigned short)117U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)4U, .cmd = (unsigned char)1U, .msk = (unsigned char)1U}, {.offset = (unsigned short)6U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)1U, .value = (unsigned char)1U}, {.offset = (unsigned short)5U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)128U}, {.offset = (unsigned short)5U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)24U}, {.offset = (unsigned short)5U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)1U, .value = (unsigned char)1U}, {.offset = (unsigned short)5U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)2U, .msk = (unsigned char)1U}, {.offset = (unsigned short)79U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)1U, .value = (unsigned char)1U}, {.offset = (unsigned short)103U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)48U, .value = (unsigned char)48U}, {.offset = (unsigned short)37U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)64U}, {.offset = (unsigned short)73U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)2U, .value = (unsigned char)2U}, {.offset = (unsigned short)99U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)2U, .value = (unsigned char)2U}, {.offset = (unsigned short)98U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)2U}, {.offset = (unsigned short)88U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)1U, .value = (unsigned char)1U}, {.offset = (unsigned short)90U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)2U, .value = (unsigned char)2U}, {.offset = (unsigned short)122U, .cut_msk = (unsigned char)1U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)255U, .value = (unsigned char)58U}, {.offset = (unsigned short)46U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)255U, .value = (unsigned char)130U}, {.offset = (unsigned short)16U, .cut_msk = (unsigned char)2U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)64U, .value = (unsigned char)64U}, {.offset = (unsigned short)65535U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)4U}};
#line 138  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/pwrseq.c"
struct wlan_pwr_cfg rtl8821A_hwpdn_flow[31U] = {{.offset = (unsigned short)31U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)255U}, {.offset = (unsigned short)79U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)1U}, {.offset = (unsigned short)73U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)2U}, {.offset = (unsigned short)5U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)2U, .value = (unsigned char)2U}, {.offset = (unsigned short)5U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)2U, .msk = (unsigned char)2U}, {.cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)3U, .cmd = (unsigned char)1U, .msk = (unsigned char)32U, .value = (unsigned char)32U}, {.offset = (unsigned short)32U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)3U, .cmd = (unsigned char)1U, .msk = (unsigned char)1U}, {.offset = (unsigned short)35U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)1U, .cmd = (unsigned char)1U, .msk = (unsigned char)16U, .value = (unsigned char)16U}, {.offset = (unsigned short)7U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)3U, .cmd = (unsigned char)1U, .msk = (unsigned char)255U, .value = (unsigned char)32U}, {.offset = (unsigned short)6U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)1U}, {.offset = (unsigned short)5U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)128U, .value = (unsigned char)128U}, {.offset = (unsigned short)65535U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)4U}};
#line 147  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/pwrseq.c"
struct wlan_pwr_cfg rtl8821A_enter_lps_flow[16U] = {{.offset = (unsigned short)769U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)4U, .cmd = (unsigned char)1U, .msk = (unsigned char)255U, .value = (unsigned char)255U}, {.offset = (unsigned short)1314U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)255U, .value = (unsigned char)255U}, {.offset = (unsigned short)1528U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)2U, .msk = (unsigned char)255U}, {.offset = (unsigned short)1529U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)2U, .msk = (unsigned char)255U}, {.offset = (unsigned short)1530U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)2U, .msk = (unsigned char)255U}, {.offset = (unsigned short)1531U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)2U, .msk = (unsigned char)255U}, {.offset = (unsigned short)2U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)1U}, {.offset = (unsigned short)2U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)3U}, {.offset = (unsigned short)2U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)2U}, {.offset = (unsigned short)256U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)255U, .value = (unsigned char)3U}, {.offset = (unsigned short)257U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)2U}, {.offset = (unsigned short)147U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)1U, .cmd = (unsigned char)1U, .msk = (unsigned char)255U}, {.offset = (unsigned short)1363U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)32U, .value = (unsigned char)32U}, {.offset = (unsigned short)65535U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)4U}};
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/pwrseq.c"
struct wlan_pwr_cfg rtl8821A_leave_lps_flow[16U] = {{.offset = (unsigned short)128U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)1U, .base = (unsigned char)3U, .cmd = (unsigned char)1U, .msk = (unsigned char)255U, .value = (unsigned char)132U}, {.offset = (unsigned short)65112U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)2U, .cmd = (unsigned char)1U, .msk = (unsigned char)255U, .value = (unsigned char)132U}, {.offset = (unsigned short)865U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)4U, .cmd = (unsigned char)1U, .msk = (unsigned char)255U, .value = (unsigned char)132U}, {.offset = (unsigned short)2U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)3U, .value = (unsigned char)1U}, {.offset = (unsigned short)8U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)16U}, {.offset = (unsigned short)265U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)2U, .msk = (unsigned char)128U}, {.offset = (unsigned short)41U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)192U}, {.offset = (unsigned short)257U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)2U, .value = (unsigned char)2U}, {.offset = (unsigned short)256U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)255U, .value = (unsigned char)255U}, {.offset = (unsigned short)2U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)3U, .value = (unsigned char)3U}, {.offset = (unsigned short)1314U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)1U, .msk = (unsigned char)255U}, {.offset = (unsigned short)65535U, .cut_msk = (unsigned char)255U, .fab_msk = (unsigned char)15U, .interface_msk = (unsigned char)15U, .cmd = (unsigned char)4U}};
#line 6  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/table.c"
u32 RTL8812AE_PHY_REG_ARRAY[470U] = {2048U, 2149634064U, 2052U, 134288096U, 2056U, 235045427U, 2060U, 303239443U, 2064U, 537924195U, 2068U, 34356496U, 2072U, 60818309U, 2080U, [16] = 2084U, 200672U, 2088U, [20] = 2092U, 2130909U, 2096U, 782954168U, 2100U, 3647238U, 2104U, 113810244U, 2108U, 2395U, 2112U, 3221225473U, 2116U, 1073757406U, 2120U, 1645281163U, 2124U, 1828585400U, 2128U, 679954182U, 2132U, 86540U, 2136U, 2153832448U, 2140U, 1948320104U, 2144U, 1764344609U, 2148U, 2037543986U, 2152U, 2359796500U, 2156U, 864823416U, 2160U, 53687091U, 2164U, 828386350U, 2168U, 12626U, 2172U, 1032192U, 2208U, 19U, 2212U, 2139062143U, 2216U, 2718040894U, 2220U, 267450890U, 2224U, 1536U, 2228U, 1032320U, 2232U, 1811961855U, 2236U, 1285890211U, 2240U, 670040096U, 2244U, [82] = 2248U, 77161U, 2252U, 136610962U, 2256U, 47104U, 2268U, [90] = 2260U, 2483030176U, 2264U, 688608786U, 2296U, 1073742528U, 2300U, [98] = 2304U, 1793U, 2316U, [102] = 2320U, 64512U, 2324U, 1028U, 2328U, 470821056U, 2332U, 1689328156U, 2336U, 3765858867U, 2340U, 89826560U, 2344U, 4U, 2348U, 4294836224U, 2352U, 4294967294U, 2356U, 2097151U, 2400U, [124] = 2404U, [126] = 2408U, [128] = 2412U, [130] = 2416U, 2149580799U, 2424U, [134] = 2428U, [136] = 2432U, [138] = 2436U, [140] = 2440U, [142] = 2448U, 655360000U, 2452U, 4294902016U, 2456U, 4294967132U, 2460U, 4294967295U, 2464U, 255U, 2468U, 524416U, 2472U, [156] = 2476U, [158] = 2480U, 2164789256U, 2484U, [162] = 2488U, 17305608U, 2492U, 17305608U, 2512U, [168] = 2516U, [170] = 2520U, [172] = 2524U, [174] = 2532U, 3U, 2536U, 725U, 2560U, 13649864U, 2564U, 33488908U, 2568U, 2357428992U, 2572U, 780075023U, 2576U, 2499853176U, 2580U, 286539816U, 2584U, 8917271U, 2588U, 2299793152U, 2592U, 437977088U, 2596U, 151917335U, 2600U, 516U, 2604U, 9437184U, 2672U, 270532352U, 2676U, 8U, 2680U, 2304U, 2684U, 576390662U, 2688U, 562066866U, 2692U, 2067584U, 2816U, 51380224U, 2820U, 45056U, 2824U, 2919367147U, 2828U, 16790023U, 2832U, 38919U, 2836U, 16777216U, 2840U, 2U, 2844U, 2U, 2848U, 31U, 2852U, 50462976U, 2856U, 117835012U, 2860U, 185207048U, 2864U, 252579084U, 2868U, 319951120U, 2872U, 387323156U, 2876U, 58U, 2880U, [248] = 2884U, [250] = 2888U, 318767154U, 2892U, 1208483840U, 2896U, [256] = 2900U, [258] = 2904U, [260] = 2908U, [262] = 3072U, 7U, 3076U, 270368U, 3080U, 2151744049U, 3084U, [270] = 3088U, 256U, 3092U, 16777216U, 3100U, 1073741827U, 3104U, 303174162U, 3108U, 303174162U, 3112U, 303174162U, 3116U, 303174162U, 3120U, 303174162U, 3124U, 303174162U, 3128U, 303174162U, 3132U, 303174162U, 3136U, 303174162U, 3140U, 303174162U, 3144U, 303174162U, 3148U, 303174162U, 3152U, 32U, 3156U, 528924U, 3160U, 805309468U, 3164U, 88U, 3168U, 875840579U, 3172U, 117453619U, 2147483656U, [314] = 1073741824U, [316] = 3176U, 1501108601U, 2415919112U, 83886080U, 1073741824U, [322] = 3176U, 1501108601U, 2415919106U, [326] = 1073741824U, [328] = 3176U, 1501108601U, 2415919108U, [332] = 1073741824U, [334] = 3176U, 1501108601U, 2415919105U, [338] = 1073741824U, [340] = 3176U, 1501108601U, 2415919105U, 5U, 1073741824U, [346] = 3176U, 1501108601U, 2684354560U, [350] = 3176U, 1501141369U, 2952790016U, [354] = 3180U, 1501124985U, 3184U, 427383161U, 3188U, 427383161U, 3192U, 427366777U, 3196U, 427366777U, 3200U, 427366777U, 3204U, 427366777U, 3220U, 16777308U, 3224U, [372] = 3228U, [374] = 3232U, 41U, 3236U, 134480385U, 3240U, 2151686160U, 3248U, 2002024311U, 3252U, 119U, 3256U, 5276226U, 3584U, 7U, 3588U, 270368U, 3592U, 2151744049U, 3596U, [394] = 3600U, 256U, 3604U, 16777216U, 3612U, 1073741827U, 3616U, 303174162U, 3620U, 303174162U, 3624U, 303174162U, 3628U, 303174162U, 3632U, 303174162U, 3636U, 303174162U, 3640U, 303174162U, 3644U, 303174162U, 3648U, 303174162U, 3652U, 303174162U, 3656U, 303174162U, 3660U, 303174162U, 3664U, 32U, 3668U, 528924U, 3672U, 805309468U, 3676U, 88U, 3680U, 875840579U, 3684U, 117453619U, 3688U, 1501108601U, 3692U, 1501124985U, 3696U, 427383161U, 3700U, 427383161U, 3704U, 427366777U, 3708U, 427366777U, 3712U, 427366777U, 3716U, 427366777U, 3732U, 16777308U, 3736U, [456] = 3740U, [458] = 3744U, 41U, 3748U, 134480385U, 3752U, 2151686160U, 3760U, 2002024311U, 3764U, 119U, 3768U, 5276226U};
#line 238  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/table.c"
u32 RTL8812AE_PHY_REG_1TARRAYLEN = 470U;
#line 240  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/table.c"
u32 RTL8821AE_PHY_REG_ARRAY[344U] = {2048U, 2150544U, 2052U, 134288096U, 2056U, 235045393U, 2060U, 2450723089U, 2064U, 537924193U, 2068U, 34356496U, 2072U, 60818309U, 2080U, [16] = 2084U, 200672U, 2088U, [20] = 2092U, 2130397U, 2096U, 715820580U, 2100U, 3647238U, 2104U, 105421636U, 2108U, 2395U, 2112U, 3221225473U, 2116U, 1073757406U, 2120U, 1645232011U, 2124U, 1828585400U, 2128U, 679954182U, 2132U, 86540U, 2136U, 2153832448U, 2140U, 1948320104U, 2144U, 1764344609U, 2148U, 2037543986U, 2152U, 2359796500U, 2156U, 2290886776U, 2160U, 143165576U, 2164U, 828451886U, 2168U, 338U, 2172U, 1036288U, 2208U, 19U, 2212U, 2139062143U, 2216U, 2717909816U, 2220U, 267450890U, 2228U, 1032320U, 2232U, 1813043199U, 2236U, 212148368U, 2240U, 468713504U, 2244U, [80] = 2248U, 78185U, 2252U, 136610962U, 2260U, 2483030176U, 2264U, 688608786U, 2296U, 1073742528U, 2300U, [92] = 2304U, 1792U, 2316U, [96] = 2320U, 64512U, 2324U, 1028U, 2328U, 470821056U, 2332U, 1689328156U, 2336U, 3765858867U, 2340U, 89826560U, 2344U, 4U, 2348U, 4294836224U, 2352U, 4294967294U, 2356U, 2097151U, 2400U, [118] = 2404U, [120] = 2408U, [122] = 2412U, [124] = 2416U, 2149580799U, 2420U, 1023U, 2424U, [130] = 2428U, [132] = 2432U, [134] = 2436U, [136] = 2440U, [138] = 2448U, 655360000U, 2452U, 4294902016U, 2456U, 4294967132U, 2460U, 4294967295U, 2464U, 255U, 2468U, 4718720U, 2472U, [152] = 2476U, [154] = 2480U, 2164789256U, 2484U, 17305608U, 2488U, 17305608U, 2492U, 17305608U, 2512U, [164] = 2516U, [166] = 2520U, [168] = 2524U, [170] = 2528U, 23808U, 2532U, 2U, 2536U, 1U, 2560U, 13649864U, 2564U, 33488908U, 2568U, 2357887744U, 2572U, 778567695U, 2576U, 2499853176U, 2580U, 286539816U, 2584U, 8917271U, 2588U, 2299793152U, 2592U, 437977088U, 2596U, 151917335U, 2600U, 516U, 2604U, 9437184U, 2672U, 270532352U, 2676U, 8U, 2680U, 2304U, 2684U, 576390662U, 2688U, 562058384U, 2692U, 2031616U, 2816U, 51380288U, 2820U, 45056U, 2824U, 2919367147U, 2828U, 16790023U, 2832U, 38919U, 2836U, 16777216U, 2840U, 2U, 2844U, 2U, 2848U, 31U, 2852U, 50462976U, 2856U, 117835012U, 2860U, 185207048U, 2864U, 252579084U, 2868U, 319951120U, 2872U, 387323156U, 2876U, 58U, 2880U, [246] = 2884U, [248] = 2888U, 318767154U, 2892U, 1208483840U, 2896U, [254] = 2900U, [256] = 2904U, [258] = 2908U, [260] = 3072U, 7U, 3076U, 270368U, 3080U, 2151744049U, 3084U, [268] = 3088U, 256U, 3092U, 16777216U, 3100U, 1073741827U, 3104U, 741092396U, 3108U, 808464432U, 3112U, 808464432U, 3116U, 741092396U, 3120U, 741092396U, 3124U, 741092396U, 3128U, 741092396U, 3132U, 707406378U, 3136U, 707406378U, 3140U, 707406378U, 3144U, 707406378U, 3148U, 707406378U, 3152U, 32U, 3156U, 1839624U, 3160U, 805309468U, 3164U, 88U, 3168U, 875840579U, 3172U, 117453619U, 3176U, 427366777U, 3180U, 427366777U, 3184U, 427366777U, 3188U, 427366777U, 3192U, 427366777U, 3196U, 427366777U, 3200U, 427366777U, 3204U, 427366777U, 3220U, 16777308U, 3224U, [330] = 3228U, [332] = 3232U, 41U, 3236U, 134480385U, 3240U, 2151686160U, 3248U, 2004309831U, 3252U, 268435575U, 3256U, 5276224U};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/table.c"
u32 RTL8821AE_PHY_REG_1TARRAYLEN = 344U;
#line 417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/table.c"
u32 RTL8812AE_PHY_REG_ARRAY_PG[276U] = {[3] = 3104U, 4294967295U, 875968576U, [9] = 3108U, 4294967295U, 1111639108U, [15] = 3112U, 4294967295U, 808597048U, [21] = 3116U, 4294967295U, 1078084676U, [27] = 3120U, 4294967295U, 674247222U, [32] = 1U, 3124U, 4294967295U, 943735362U, [38] = 1U, 3128U, 4294967295U, 640167988U, [45] = 3132U, 4294967295U, 1078084676U, [51] = 3136U, 4294967295U, 674247222U, [57] = 3140U, 4294967295U, 1111630886U, [62] = 1U, 3144U, 4294967295U, 808728640U, [68] = 1U, 3148U, 4294967295U, 572794408U, [73] = 1U, [75] = 3616U, 4294967295U, 875968576U, [79] = 1U, [81] = 3620U, 4294967295U, 1111639108U, [85] = 1U, [87] = 3624U, 4294967295U, 808597048U, [91] = 1U, [93] = 3628U, 4294967295U, 1078084676U, [97] = 1U, [99] = 3632U, 4294967295U, 674247222U, [103] = 1U, 1U, 3636U, 4294967295U, 943735362U, [109] = 1U, 1U, 3640U, 4294967295U, 640167988U, [115] = 1U, [117] = 3644U, 4294967295U, 1078084676U, [121] = 1U, [123] = 3648U, 4294967295U, 674247222U, [127] = 1U, [129] = 3652U, 4294967295U, 1111630886U, [133] = 1U, 1U, 3656U, 4294967295U, 808728640U, [139] = 1U, 1U, 3660U, 4294967295U, 572794408U, 1U, [147] = 3108U, 4294967295U, 1111639108U, 1U, [153] = 3112U, 4294967295U, 808597056U, 1U, [159] = 3116U, 4294967295U, 1078084676U, 1U, [165] = 3120U, 4294967295U, 674247222U, 1U, [170] = 1U, 3124U, 4294967295U, 943735362U, 1U, [176] = 1U, 3128U, 4294967295U, 640167988U, 1U, [183] = 3132U, 4294967295U, 1078084676U, 1U, [189] = 3136U, 4294967295U, 674247222U, 1U, [195] = 3140U, 4294967295U, 1111630886U, 1U, [200] = 1U, 3144U, 4294967295U, 808728640U, 1U, [206] = 1U, 3148U, 4294967295U, 572794408U, 1U, 1U, [213] = 3620U, 4294967295U, 1111639108U, 1U, 1U, [219] = 3624U, 4294967295U, 808597056U, 1U, 1U, [225] = 3628U, 4294967295U, 1078084676U, 1U, 1U, [231] = 3632U, 4294967295U, 674247222U, 1U, 1U, 1U, 3636U, 4294967295U, 943735362U, 1U, 1U, 1U, 3640U, 4294967295U, 640167988U, 1U, 1U, [249] = 3644U, 4294967295U, 1078084676U, 1U, 1U, [255] = 3648U, 4294967295U, 674247222U, 1U, 1U, [261] = 3652U, 4294967295U, 1111630886U, 1U, 1U, 1U, 3656U, 4294967295U, 808728640U, 1U, 1U, 1U, 3660U, 4294967295U, 572794408U};
#line 466  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/table.c"
u32 RTL8812AE_PHY_REG_ARRAY_PGLEN = 276U;
#line 468  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/table.c"
u32 RTL8821AE_PHY_REG_ARRAY_PG[90U] = {[3] = 3104U, 4294967295U, 842282552U, [9] = 3108U, 4294967295U, 909523000U, [15] = 3112U, 4294967295U, 674247220U, [21] = 3116U, 4294967295U, 875968568U, [27] = 3120U, 4294967295U, 640167986U, [33] = 3132U, 4294967295U, 842282550U, [39] = 3136U, 4294967295U, 606480432U, [45] = 3140U, 65535U, 8226U, 1U, [51] = 3108U, 4294967295U, 875836982U, 1U, [57] = 3112U, 4294967295U, 640167986U, 1U, [63] = 3116U, 4294967295U, 842282550U, 1U, [69] = 3120U, 4294967295U, 606480432U, 1U, [75] = 3132U, 4294967295U, 842282550U, 1U, [81] = 3136U, 4294967295U, 606480432U, 1U, [87] = 3140U, 65535U, 8226U};
#line 486  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/table.c"
u32 RTL8821AE_PHY_REG_ARRAY_PGLEN = 90U;
#line 488  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/table.c"
u32 RTL8812AE_RADIOA_ARRAY[864U] = {[1] = 65536U, 24U, 94506U, 86U, 335090U, 102U, 262144U, 30U, 524288U, 137U, 128U, 2147483649U, [14] = 1073741824U, [16] = 134U, 84794U, 2415919105U, 5U, 1073741824U, [22] = 134U, 84794U, 2684354560U, [26] = 134U, 84792U, 2952790016U, [30] = 2147483652U, [32] = 1073741824U, [34] = 139U, 524672U, 2684354560U, [38] = 139U, 553344U, 2952790016U, [42] = 177U, 130074U, 179U, 985104U, 180U, 108429U, 186U, 549248U, 24U, 6U, 239U, 8192U, 2147483649U, [56] = 1073741824U, [58] = 59U, 258584U, 59U, 199256U, 59U, 195160U, 59U, 140688U, 59U, 129616U, 59U, 66120U, 59U, 33344U, 2415919105U, 5U, 1073741824U, [76] = 59U, 258584U, 59U, 199256U, 59U, 195160U, 59U, 140688U, 59U, 129616U, 59U, 66120U, 59U, 33344U, 2684354560U, [92] = 59U, 232024U, 59U, 227928U, 59U, 173456U, 59U, 162384U, 59U, 98888U, 59U, 66112U, 59U, 33344U, 2952790016U, [108] = 239U, 256U, 2147483650U, [112] = 1073741824U, [114] = 52U, 42222U, 52U, 36982U, 52U, 32883U, 52U, 28784U, 52U, 24685U, 52U, 20586U, 52U, 16457U, 52U, 12358U, 52U, 8232U, 52U, 4133U, 52U, 34U, 2684354560U, [138] = 52U, 44532U, 52U, 40433U, 52U, 36334U, 52U, 32235U, 52U, 28136U, 52U, 23788U, 52U, 19689U, 52U, 13546U, 52U, 9447U, 52U, 5227U, 52U, 109U, 2952790016U, [162] = 239U, [164] = 239U, 8354U, 223U, 128U, 53U, 402U, 53U, 33170U, 53U, 65938U, 54U, 36U, 54U, 32804U, 54U, 65572U, 54U, 98340U, 239U, [184] = 81U, 3105U, 82U, 1753U, 83U, 1033801U, 84U, 382U, 239U, 2U, 8U, 33792U, 24U, 94506U, 239U, 4096U, 58U, 128U, 59U, 237612U, 60U, 16384U, 58U, 1024U, 59U, 204844U, 60U, 65536U, 58U, 160U, 59U, 176228U, 60U, 16384U, 58U, 216U, 59U, 143472U, 60U, 16384U, 58U, 1128U, 59U, 112752U, 60U, 65536U, 58U, 152U, 59U, 73861U, 60U, 933888U, 58U, 1048U, 59U, 41088U, 60U, 983040U, 58U, 1048U, 59U, 8320U, 60U, 65536U, 58U, 128U, 59U, 499756U, 60U, 16384U, 58U, 1024U, 59U, 466988U, 60U, 65536U, 58U, 160U, 59U, 438372U, 60U, 16384U, 58U, 216U, 59U, 405616U, 60U, 16384U, 58U, 1128U, 59U, 374896U, 60U, 65536U, 58U, 152U, 59U, 336005U, 60U, 933888U, 58U, 1048U, 59U, 303232U, 60U, 983040U, 58U, 1048U, 59U, 270464U, 60U, 65536U, 58U, 128U, 59U, 761900U, 60U, 16384U, 58U, 1024U, 59U, 729132U, 60U, 65536U, 58U, 160U, 59U, 700516U, 60U, 16384U, 58U, 216U, 59U, 667760U, 60U, 16384U, 58U, 1128U, 59U, 637040U, 60U, 65536U, 58U, 152U, 59U, 598149U, 60U, 933888U, 58U, 1048U, 59U, 565376U, 60U, 983040U, 58U, 1048U, 59U, 532608U, 60U, 65536U, 239U, 4352U, 2147483656U, [348] = 1073741824U, [350] = 52U, 303282U, 52U, 299183U, 52U, 295024U, 52U, 290925U, 52U, 286800U, 52U, 282701U, 52U, 278602U, 52U, 274503U, 52U, 270346U, 52U, 266247U, 52U, 262148U, 2415919112U, 83886080U, 1073741824U, [376] = 52U, 303282U, 52U, 299183U, 52U, 295024U, 52U, 290925U, 52U, 286797U, 52U, 282698U, 52U, 278599U, 52U, 274500U, 52U, 270343U, 52U, 266244U, 52U, 262145U, 2684354560U, [400] = 52U, 306677U, 52U, 302578U, 52U, 298479U, 52U, 294380U, 52U, 290281U, 52U, 286182U, 52U, 282083U, 52U, 276680U, 52U, 272581U, 52U, 268482U, 52U, 264384U, 2952790016U, [424] = 2147483656U, [426] = 1073741824U, [428] = 52U, 172210U, 52U, 168111U, 52U, 163952U, 52U, 159853U, 52U, 155728U, 52U, 151629U, 52U, 147530U, 52U, 143431U, 52U, 139274U, 52U, 135175U, 52U, 131076U, 2415919112U, 83886080U, 1073741824U, [454] = 52U, 172212U, 52U, 168113U, 52U, 163954U, 52U, 159855U, 52U, 155727U, 52U, 151628U, 52U, 147529U, 52U, 143430U, 52U, 139273U, 52U, 135174U, 52U, 131075U, 2684354560U, [478] = 52U, 175605U, 52U, 171506U, 52U, 167407U, 52U, 163308U, 52U, 159209U, 52U, 155110U, 52U, 151011U, 52U, 145608U, 52U, 141509U, 52U, 137410U, 52U, 133312U, 2952790016U, [502] = 2147483656U, [504] = 1073741824U, [506] = 52U, 41138U, 52U, 37039U, 52U, 32880U, 52U, 28781U, 52U, 24656U, 52U, 20557U, 52U, 16458U, 52U, 12359U, 52U, 8202U, 52U, 4103U, 52U, 4U, 2415919112U, 83886080U, 1073741824U, [532] = 52U, 41138U, 52U, 37039U, 52U, 32880U, 52U, 28781U, 52U, 24653U, 52U, 20554U, 52U, 16455U, 52U, 12356U, 52U, 8199U, 52U, 4100U, 52U, 1U, 2684354560U, [556] = 52U, 45047U, 52U, 40439U, 52U, 36340U, 52U, 32241U, 52U, 28142U, 52U, 24043U, 52U, 19944U, 52U, 14540U, 52U, 10441U, 52U, 6342U, 52U, 2243U, 2952790016U, [580] = 239U, [582] = 2147483656U, [584] = 1073741824U, [586] = 24U, 94506U, 239U, 64U, 53U, 468U, 53U, 33236U, 53U, 66004U, 53U, 131508U, 53U, 164276U, 53U, 197044U, 53U, 262580U, 53U, 295348U, 53U, 328116U, 2415919112U, 83886080U, 1073741824U, [612] = 24U, 94506U, 239U, 64U, 53U, 468U, 53U, 33236U, 53U, 66004U, 53U, 131508U, 53U, 164276U, 53U, 197044U, 53U, 262580U, 53U, 295348U, 53U, 328116U, 2684354560U, [636] = 24U, 94506U, 239U, 64U, 53U, 392U, 53U, 33095U, 53U, 65863U, 53U, 131543U, 53U, 164311U, 53U, 197079U, 53U, 262616U, 53U, 295384U, 53U, 328152U, 2952790016U, [660] = 239U, [662] = 2147483656U, [664] = 1073741824U, [666] = 24U, 94506U, 239U, 16U, 54U, 19451U, 54U, 52219U, 54U, 84987U, 54U, 117755U, 54U, 151371U, 54U, 184139U, 54U, 216907U, 54U, 249675U, 54U, 282443U, 54U, 315211U, 54U, 347979U, 54U, 380747U, 2415919112U, 83886080U, 1073741824U, [698] = 24U, 94506U, 239U, 16U, 54U, 19451U, 54U, 52219U, 54U, 84987U, 54U, 117755U, 54U, 151371U, 54U, 184139U, 54U, 216907U, 54U, 249675U, 54U, 282443U, 54U, 315211U, 54U, 347979U, 54U, 380747U, 2684354560U, [728] = 24U, 94506U, 239U, 16U, 54U, 544436U, 54U, 576565U, 54U, 609333U, 54U, 642101U, 54U, 674869U, 54U, 707637U, 54U, 740405U, 54U, 773173U, 54U, 805940U, 54U, 838709U, 54U, 871477U, 54U, 904245U, 2952790016U, [758] = 239U, [760] = 239U, 8U, 2147483656U, [764] = 1073741824U, [766] = 60U, 716U, 60U, 1314U, 60U, 2306U, 2415919112U, 83886080U, 1073741824U, [776] = 60U, 716U, 60U, 1314U, 60U, 2306U, 2684354560U, [784] = 60U, 680U, 60U, 1442U, 60U, 2176U, 2952790016U, [792] = 239U, [794] = 24U, 94506U, 239U, 2U, 223U, 128U, 31U, 100U, 2147483656U, [804] = 1073741824U, [806] = 97U, 1039683U, 98U, 233291U, 99U, 205079U, 100U, 103596U, 101U, 602577U, 2415919112U, 83886080U, 1073741824U, [820] = 97U, 1039683U, 98U, 233291U, 99U, 205079U, 100U, 103596U, 101U, 602578U, 2684354560U, [832] = 97U, 941395U, 98U, 233421U, 99U, 70891U, 100U, 104108U, 101U, 594391U, 2952790016U, [844] = 8U, 33792U, 28U, 473554U, 180U, 124813U, 24U, 127274U, 254U, [854] = 254U, [856] = 254U, [858] = 254U, [860] = 180U, 108429U, 24U, 94506U};
#line 903  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/table.c"
u32 RTL8812AE_RADIOA_1TARRAYLEN = 864U;
#line 905  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/table.c"
u32 RTL8812AE_RADIOB_ARRAY[848U] = {86U, 335090U, 102U, 262144U, 137U, 128U, 2147483649U, [8] = 1073741824U, [10] = 134U, 84794U, 2415919105U, 5U, 1073741824U, [16] = 134U, 84794U, 2684354560U, [20] = 134U, 84792U, 2952790016U, [24] = 2147483652U, [26] = 1073741824U, [28] = 139U, 524672U, 2684354560U, [32] = 139U, 553344U, 2952790016U, [36] = 24U, 6U, 239U, 8192U, 2147483649U, [42] = 1073741824U, [44] = 59U, 258584U, 59U, 199256U, 59U, 195160U, 59U, 140688U, 59U, 129616U, 59U, 66120U, 59U, 33344U, 2415919105U, 5U, 1073741824U, [62] = 59U, 258584U, 59U, 199256U, 59U, 195160U, 59U, 140688U, 59U, 129616U, 59U, 66120U, 59U, 33344U, 2684354560U, [78] = 59U, 232024U, 59U, 227928U, 59U, 173456U, 59U, 162384U, 59U, 98888U, 59U, 66112U, 59U, 33344U, 2952790016U, [94] = 239U, 256U, 2147483650U, [98] = 1073741824U, [100] = 52U, 42222U, 52U, 36982U, 52U, 32883U, 52U, 28784U, 52U, 24685U, 52U, 20586U, 52U, 16457U, 52U, 12358U, 52U, 8232U, 52U, 4133U, 52U, 34U, 2684354560U, [124] = 52U, 44532U, 52U, 40433U, 52U, 36334U, 52U, 32235U, 52U, 28136U, 52U, 23788U, 52U, 19689U, 52U, 13546U, 52U, 9447U, 52U, 5227U, 52U, 109U, 2952790016U, [148] = 239U, [150] = 239U, 8354U, 223U, 128U, 53U, 402U, 53U, 33170U, 53U, 65938U, 54U, 36U, 54U, 32804U, 54U, 65572U, 54U, 98340U, 239U, [170] = 81U, 3105U, 82U, 1753U, 83U, 1033801U, 84U, 382U, 239U, 2U, 8U, 33792U, 24U, 94506U, 239U, 4096U, 58U, 128U, 59U, 237612U, 60U, 16384U, 58U, 1024U, 59U, 204844U, 60U, 65536U, 58U, 160U, 59U, 176228U, 60U, 16384U, 58U, 216U, 59U, 143472U, 60U, 16384U, 58U, 1128U, 59U, 112752U, 60U, 65536U, 58U, 152U, 59U, 73861U, 60U, 933888U, 58U, 1048U, 59U, 41088U, 60U, 983040U, 58U, 1048U, 59U, 8320U, 60U, 65536U, 58U, 128U, 59U, 499756U, 60U, 16384U, 58U, 1024U, 59U, 466988U, 60U, 65536U, 58U, 160U, 59U, 438372U, 60U, 16384U, 58U, 216U, 59U, 405616U, 60U, 16384U, 58U, 1128U, 59U, 374896U, 60U, 65536U, 58U, 152U, 59U, 336005U, 60U, 933888U, 58U, 1048U, 59U, 303232U, 60U, 983040U, 58U, 1048U, 59U, 270464U, 60U, 65536U, 58U, 128U, 59U, 761900U, 60U, 16384U, 58U, 1024U, 59U, 729132U, 60U, 65536U, 58U, 160U, 59U, 700516U, 60U, 16384U, 58U, 216U, 59U, 667760U, 60U, 16384U, 58U, 1128U, 59U, 637040U, 60U, 65536U, 58U, 152U, 59U, 598149U, 60U, 933888U, 58U, 1048U, 59U, 565376U, 60U, 983040U, 58U, 1048U, 59U, 532608U, 60U, 65536U, 239U, 4352U, 2147483656U, [334] = 1073741824U, [336] = 52U, 303282U, 52U, 299183U, 52U, 295024U, 52U, 290925U, 52U, 286800U, 52U, 282701U, 52U, 278602U, 52U, 274503U, 52U, 270346U, 52U, 266247U, 52U, 262148U, 2415919112U, 83886080U, 1073741824U, [362] = 52U, 303281U, 52U, 299182U, 52U, 295023U, 52U, 290924U, 52U, 286796U, 52U, 282697U, 52U, 278598U, 52U, 274499U, 52U, 270342U, 52U, 266243U, 52U, 262144U, 2684354560U, [386] = 52U, 306677U, 52U, 302578U, 52U, 298479U, 52U, 294380U, 52U, 290281U, 52U, 286182U, 52U, 282083U, 52U, 276680U, 52U, 272581U, 52U, 268482U, 52U, 264384U, 2952790016U, [410] = 2147483656U, [412] = 1073741824U, [414] = 52U, 172210U, 52U, 168111U, 52U, 163952U, 52U, 159853U, 52U, 155728U, 52U, 151629U, 52U, 147530U, 52U, 143431U, 52U, 139274U, 52U, 135175U, 52U, 131076U, 2415919112U, 83886080U, 1073741824U, [440] = 52U, 172211U, 52U, 168112U, 52U, 163953U, 52U, 159854U, 52U, 155726U, 52U, 151627U, 52U, 147528U, 52U, 143429U, 52U, 139272U, 52U, 135173U, 52U, 131074U, 2684354560U, [464] = 52U, 175605U, 52U, 171506U, 52U, 167407U, 52U, 163308U, 52U, 159209U, 52U, 155110U, 52U, 151011U, 52U, 145608U, 52U, 141509U, 52U, 137410U, 52U, 133312U, 2952790016U, [488] = 2147483656U, [490] = 1073741824U, [492] = 52U, 41138U, 52U, 37039U, 52U, 32880U, 52U, 28781U, 52U, 24656U, 52U, 20557U, 52U, 16458U, 52U, 12359U, 52U, 8202U, 52U, 4103U, 52U, 4U, 2415919112U, 83886080U, 1073741824U, [518] = 52U, 41139U, 52U, 37040U, 52U, 32880U, 52U, 28781U, 52U, 24653U, 52U, 20554U, 52U, 16455U, 52U, 12356U, 52U, 8199U, 52U, 4100U, 52U, 1U, 2684354560U, [542] = 52U, 45047U, 52U, 40439U, 52U, 36340U, 52U, 32241U, 52U, 28142U, 52U, 24043U, 52U, 19944U, 52U, 14540U, 52U, 10441U, 52U, 6342U, 52U, 2243U, 2952790016U, [566] = 239U, [568] = 2147483656U, [570] = 1073741824U, [572] = 24U, 94506U, 239U, 64U, 53U, 453U, 53U, 33221U, 53U, 65989U, 53U, 131444U, 53U, 164212U, 53U, 196980U, 53U, 262533U, 53U, 295301U, 53U, 328069U, 239U, [596] = 2415919112U, 83886080U, 1073741824U, [600] = 24U, 94506U, 239U, 64U, 53U, 453U, 53U, 33221U, 53U, 65989U, 53U, 131444U, 53U, 164212U, 53U, 196980U, 53U, 262533U, 53U, 295301U, 53U, 328069U, 239U, [624] = 2684354560U, [626] = 24U, 94506U, 239U, 64U, 53U, 392U, 53U, 33095U, 53U, 65863U, 53U, 131543U, 53U, 164311U, 53U, 197079U, 53U, 262616U, 53U, 295384U, 53U, 328152U, 239U, [650] = 2952790016U, [652] = 2147483656U, [654] = 1073741824U, [656] = 24U, 94506U, 239U, 16U, 54U, 23435U, 54U, 56203U, 54U, 88971U, 54U, 121739U, 54U, 156379U, 54U, 189147U, 54U, 221915U, 54U, 254683U, 54U, 283963U, 54U, 316731U, 54U, 349499U, 54U, 382267U, 2415919112U, 83886080U, 1073741824U, [688] = 24U, 94506U, 239U, 16U, 54U, 23435U, 54U, 56203U, 54U, 88971U, 54U, 121739U, 54U, 156379U, 54U, 189147U, 54U, 221915U, 54U, 254683U, 54U, 283963U, 54U, 316731U, 54U, 349499U, 54U, 382267U, 2684354560U, [718] = 24U, 94506U, 239U, 16U, 54U, 544436U, 54U, 576565U, 54U, 609333U, 54U, 642101U, 54U, 674869U, 54U, 707637U, 54U, 740405U, 54U, 773173U, 54U, 805940U, 54U, 838709U, 54U, 871477U, 54U, 904245U, 2952790016U, [748] = 239U, [750] = 239U, 8U, 2147483656U, [754] = 1073741824U, [756] = 60U, 732U, 60U, 1316U, 60U, 2306U, 2415919112U, 83886080U, 1073741824U, [766] = 60U, 732U, 60U, 1316U, 60U, 2306U, 2684354560U, [774] = 60U, 680U, 60U, 1442U, 60U, 2176U, 2952790016U, [782] = 239U, [784] = 24U, 94506U, 239U, 2U, 223U, 128U, 2147483656U, [792] = 1073741824U, [794] = 97U, 961603U, 98U, 233287U, 99U, 201047U, 100U, 115884U, 101U, 602577U, 2415919112U, 83886080U, 1073741824U, [808] = 97U, 961603U, 98U, 233287U, 99U, 201047U, 100U, 115884U, 101U, 602578U, 2415919106U, [820] = 1073741824U, [822] = 97U, 961603U, 98U, 233287U, 99U, 201047U, 100U, 115884U, 101U, 602577U, 2684354560U, [834] = 97U, 941395U, 98U, 233421U, 99U, 70891U, 100U, 104108U, 101U, 594391U, 2952790016U, [846] = 8U, 33792U};
#line 1311  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/table.c"
u32 RTL8812AE_RADIOB_1TARRAYLEN = 848U;
#line 1313  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/table.c"
u32 RTL8821AE_RADIOA_ARRAY[1176U] = {24U, 94506U, 86U, 335090U, 102U, 262144U, [7] = 65536U, 30U, 524288U, 130U, 2096U, 131U, 137216U, 132U, 163840U, 133U, 294912U, 134U, 608312U, 135U, 280960U, 136U, 294912U, 137U, 54400U, 138U, 270912U, 139U, 983936U, 140U, 589824U, 141U, 141394U, 142U, 415040U, 143U, 557057U, 239U, 131072U, 62U, 896U, 63U, 589848U, 62U, 131968U, 63U, 655384U, 62U, 262920U, 63U, 655384U, 62U, 393240U, 63U, 655384U, 239U, [58] = 24U, 94506U, 137U, 128U, 139U, 524672U, 239U, 4096U, 58U, 580U, 59U, 229415U, 60U, 532480U, 58U, 580U, 59U, 196883U, 60U, 532480U, 58U, 332U, 59U, 163879U, 60U, 532480U, 58U, 204U, 59U, 159783U, 60U, 270336U, 58U, 332U, 59U, 129299U, 60U, 270336U, 58U, 268U, 59U, 98064U, 60U, 73728U, 58U, 208U, 59U, 32807U, 60U, 827392U, 58U, 580U, 59U, 491559U, 60U, 532480U, 58U, 580U, 59U, 459027U, 60U, 532480U, 58U, 332U, 59U, 426023U, 60U, 532480U, 58U, 204U, 59U, 421927U, 60U, 270336U, 58U, 332U, 59U, 391443U, 60U, 270336U, 58U, 268U, 59U, 360208U, 60U, 73728U, 58U, 208U, 59U, 294951U, 60U, 827392U, 58U, 580U, 59U, 753703U, 60U, 532480U, 58U, 580U, 59U, 721171U, 60U, 532480U, 58U, 332U, 59U, 688167U, 60U, 532480U, 58U, 204U, 59U, 684071U, 60U, 270336U, 58U, 332U, 59U, 653587U, 60U, 270336U, 58U, 268U, 59U, 622352U, 60U, 73728U, 58U, 208U, 59U, 557095U, 60U, 827392U, 239U, [194] = 239U, 4352U, 4279173380U, 43981U, 52U, 306675U, 52U, 302576U, 4279173636U, 52719U, 52U, 306675U, 52U, 302576U, 4279174148U, 52719U, 52U, 306675U, 52U, 302576U, 4279173632U, 52719U, 52U, 306677U, 52U, 302578U, 4279173824U, 52719U, 52U, 303347U, 52U, 299185U, 3452816845U, 52685U, 52U, 306679U, 52U, 302579U, 4279173380U, 57005U, 4279173380U, 43981U, 52U, 298477U, 52U, 294378U, 52U, 290279U, 52U, 285929U, 52U, 281830U, 52U, 276678U, 52U, 272518U, 52U, 267398U, 52U, 263239U, 4279173636U, 52719U, 52U, 298477U, 52U, 294378U, 52U, 290279U, 52U, 285929U, 52U, 281830U, 52U, 276678U, 52U, 272518U, 52U, 267398U, 52U, 263239U, 4279174148U, 52719U, 52U, 298477U, 52U, 294378U, 52U, 290279U, 52U, 285929U, 52U, 281830U, 52U, 276678U, 52U, 272518U, 52U, 267398U, 52U, 263239U, 4279173824U, 52719U, 52U, 295086U, 52U, 290987U, 52U, 286859U, 52U, 282729U, 52U, 278600U, 52U, 274501U, 52U, 270374U, 52U, 266275U, 52U, 262146U, 3452816845U, 52685U, 52U, 298479U, 52U, 294380U, 52U, 290281U, 52U, 285899U, 52U, 280717U, 52U, 275597U, 52U, 271498U, 52U, 266381U, 52U, 262282U, 4279173380U, 57005U, 4279173632U, 43981U, 52U, 175604U, 4279173824U, 52719U, 52U, 172275U, 3452816845U, 52685U, 52U, 175607U, 4279173632U, 57005U, 4279173380U, 43981U, 52U, 171508U, 4279173636U, 52719U, 52U, 171508U, 4279174148U, 52719U, 52U, 171508U, 4279173632U, 52719U, 52U, 171505U, 4279173824U, 52719U, 52U, 168176U, 3452816845U, 52685U, 52U, 171506U, 4279173380U, 57005U, 4279173380U, 43981U, 52U, 167409U, 52U, 163310U, 52U, 159211U, 52U, 154860U, 52U, 150761U, 52U, 145610U, 52U, 141449U, 52U, 136329U, 52U, 132170U, 4279173636U, 52719U, 52U, 167409U, 52U, 163310U, 52U, 159211U, 52U, 154860U, 52U, 150761U, 52U, 145610U, 52U, 141449U, 52U, 136329U, 52U, 132170U, 4279174148U, 52719U, 52U, 167409U, 52U, 163310U, 52U, 159211U, 52U, 154860U, 52U, 150761U, 52U, 145610U, 52U, 141449U, 52U, 136329U, 52U, 132170U, 4279173824U, 52719U, 52U, 164015U, 52U, 159916U, 52U, 155787U, 52U, 151657U, 52U, 147528U, 52U, 143429U, 52U, 139302U, 52U, 135203U, 52U, 131074U, 3452816845U, 52685U, 52U, 167406U, 52U, 163307U, 52U, 158925U, 52U, 154826U, 52U, 149644U, 52U, 145484U, 52U, 141385U, 52U, 136265U, 52U, 131149U, 4279173380U, 57005U, 4279173824U, 43981U, 52U, 41175U, 52U, 37075U, 52U, 32945U, 52U, 28846U, 3452816845U, 52685U, 52U, 44535U, 52U, 40436U, 52U, 36337U, 52U, 32238U, 4279173824U, 57005U, 4279173380U, 43981U, 52U, 28139U, 52U, 23788U, 52U, 19689U, 52U, 14538U, 52U, 10377U, 52U, 5257U, 52U, 1098U, 4279173636U, 52719U, 52U, 28139U, 52U, 23788U, 52U, 19689U, 52U, 14538U, 52U, 10377U, 52U, 5257U, 52U, 1098U, 4279174148U, 52719U, 52U, 28139U, 52U, 23788U, 52U, 19689U, 52U, 14538U, 52U, 10377U, 52U, 5257U, 52U, 1098U, 4279173824U, 52719U, 52U, 24717U, 52U, 20587U, 52U, 16458U, 52U, 12359U, 52U, 8260U, 52U, 4133U, 52U, 4U, 3452816845U, 52685U, 52U, 28109U, 52U, 23757U, 52U, 19658U, 52U, 14476U, 52U, 10376U, 52U, 5256U, 52U, 1158U, 4279173380U, 57005U, 239U, [584] = 24U, 94506U, 239U, 64U, 4279173380U, 43981U, 53U, 391U, 53U, 33159U, 53U, 65927U, 53U, 131464U, 53U, 164232U, 53U, 197000U, 53U, 262536U, 53U, 295304U, 53U, 328072U, 4279173636U, 52719U, 53U, 391U, 53U, 33159U, 53U, 65927U, 53U, 131464U, 53U, 164232U, 53U, 197000U, 53U, 262536U, 53U, 295304U, 53U, 328072U, 4279174148U, 52719U, 53U, 391U, 53U, 33159U, 53U, 65927U, 53U, 131464U, 53U, 164232U, 53U, 197000U, 53U, 262536U, 53U, 295304U, 53U, 328072U, 3452816845U, 52685U, 53U, 325U, 53U, 33093U, 53U, 65861U, 53U, 131478U, 53U, 164246U, 53U, 197014U, 53U, 262599U, 53U, 295367U, 53U, 328135U, 4279173380U, 57005U, 239U, [672] = 24U, 94506U, 239U, 16U, 4279173380U, 43981U, 54U, 546611U, 54U, 579379U, 54U, 612147U, 54U, 644915U, 54U, 681140U, 54U, 713908U, 54U, 746676U, 54U, 779444U, 54U, 812212U, 54U, 844980U, 54U, 877748U, 54U, 910516U, 4279173636U, 52719U, 54U, 546611U, 54U, 579379U, 54U, 612147U, 54U, 644915U, 54U, 681140U, 54U, 713908U, 54U, 746676U, 54U, 779444U, 54U, 812212U, 54U, 844980U, 54U, 877748U, 54U, 910516U, 4279174148U, 52719U, 54U, 546611U, 54U, 579379U, 54U, 612147U, 54U, 644915U, 54U, 681140U, 54U, 713908U, 54U, 746676U, 54U, 779444U, 54U, 812212U, 54U, 844980U, 54U, 877748U, 54U, 910516U, 3452816845U, 52685U, 54U, 22195U, 54U, 54963U, 54U, 87731U, 54U, 120499U, 54U, 157236U, 54U, 190004U, 54U, 222772U, 54U, 255540U, 54U, 288692U, 54U, 321460U, 54U, 354228U, 54U, 386996U, 4279173380U, 57005U, 239U, [784] = 239U, 8U, 4279173380U, 43981U, 60U, 456U, 60U, 1170U, 4279173636U, 52719U, 60U, 456U, 60U, 1170U, 4279174148U, 52719U, 60U, 456U, 60U, 1170U, 3452816845U, 52685U, 60U, 554U, 60U, 1428U, 4279173380U, 57005U, 4279173380U, 43981U, 60U, 2048U, 4279173636U, 52719U, 60U, 2048U, 4279174148U, 52719U, 60U, 2048U, 4279173824U, 52719U, 60U, 2080U, 3452816845U, 52685U, 60U, 2304U, 4279173380U, 57005U, 239U, [836] = 24U, 94506U, 239U, 2U, 4279173380U, 43981U, 8U, 320512U, 4279173636U, 52719U, 8U, 320512U, 4279174148U, 52719U, 8U, 320512U, 3452816845U, 52685U, 8U, 8192U, 4279173380U, 57005U, 239U, [860] = 223U, 192U, 31U, 262244U, 4279173380U, 43981U, 88U, 684676U, 89U, 393452U, 4279173636U, 52719U, 88U, 684676U, 89U, 393452U, 4279174148U, 52719U, 88U, 684676U, 89U, 393452U, 3452816845U, 52685U, 88U, 528772U, 89U, 393580U, 4279173380U, 57005U, 4279173380U, 43981U, 97U, 953715U, 98U, 606149U, 4279173636U, 52719U, 97U, 953715U, 98U, 606149U, 4279174148U, 52719U, 97U, 953715U, 98U, 606149U, 3452816845U, 52685U, 97U, 961875U, 98U, 605124U, 4279173380U, 57005U, 4279173380U, 43981U, 99U, 69865U, 4279173636U, 52719U, 99U, 69865U, 4279174148U, 52719U, 99U, 69865U, 4279173632U, 52719U, 99U, 463081U, 4279173824U, 52719U, 99U, 69865U, 3452816845U, 52685U, 99U, 464105U, 4279173380U, 57005U, 4279173380U, 43981U, 100U, 115324U, 4279173636U, 52719U, 100U, 115324U, 4279174148U, 52719U, 100U, 115324U, 3452816845U, 52685U, 100U, 116348U, 4279173380U, 57005U, 4279173632U, 43981U, 101U, 602134U, 4279173824U, 52719U, 101U, 602133U, 3452816845U, 52685U, 101U, 593942U, 4279173632U, 57005U, 24U, 6U, 239U, 8192U, 59U, 229963U, 59U, 197195U, 59U, 164939U, 59U, 134987U, 59U, 102219U, 59U, 66738U, 59U, 32841U, 59U, 328U, 59U, 492107U, 59U, 459339U, 59U, 426571U, 59U, 397131U, 59U, 364363U, 59U, 328882U, 59U, 294985U, 59U, 262472U, 239U, [1012] = 239U, 256U, 52U, 44531U, 52U, 40432U, 52U, 36208U, 52U, 32109U, 52U, 27886U, 52U, 23756U, 52U, 17644U, 52U, 13484U, 52U, 9325U, 52U, 4207U, 52U, 108U, 239U, [1038] = 237U, 16U, 68U, 44530U, 68U, 40431U, 68U, 36332U, 68U, 32233U, 68U, 27884U, 68U, 23785U, 68U, 17644U, 68U, 13545U, 68U, 9324U, 68U, 5225U, 68U, 108U, 237U, [1064] = 237U, 1U, 64U, 232871U, 64U, 196802U, 64U, 166114U, 64U, 131256U, 64U, 100517U, 64U, 69564U, 64U, 36721U, 64U, 576U, 237U, [1084] = 239U, 8354U, 223U, 128U, 53U, 288U, 53U, 33056U, 53U, 65824U, 54U, 133U, 54U, 32901U, 54U, 65669U, 54U, 98437U, 239U, [1104] = 81U, 3121U, 82U, 1570U, 83U, 1033995U, 84U, 382U, 86U, 335347U, 81U, 3073U, 82U, 1750U, 83U, 1033801U, 112U, 300641U, 113U, 492606U, 114U, 898U, 116U, 332800U, 53U, 352U, 53U, 33120U, 53U, 65888U, 54U, 292U, 54U, 33060U, 54U, 65828U, 54U, 98596U, 237U, 12U, 69U, 320U, 69U, 33088U, 69U, 65856U, 70U, 292U, 70U, 33060U, 70U, 65828U, 70U, 98596U, 223U, 136U, 179U, 986648U, 180U, 74060U, 183U, 196620U, 28U, 342482U, 24U, 127274U, 254U, [1172] = 254U, [1174] = 24U, 94506U};
#line 1905  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/table.c"
u32 RTL8821AE_RADIOA_1TARRAYLEN = 1176U;
#line 1907  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/table.c"
u32 RTL8812AE_MAC_REG_ARRAY[216U] = {16U, 12U, 2147484160U, [4] = 1073741824U, [6] = 17U, 102U, 2684354560U, [10] = 17U, 90U, 2952790016U, [14] = 37U, 15U, 114U, [18] = 1056U, 128U, 1064U, 10U, 1065U, 16U, 1072U, [26] = 1073U, [28] = 1074U, [30] = 1075U, 1U, 1076U, 4U, 1077U, 5U, 1078U, 7U, 1079U, 8U, 1084U, 4U, 1085U, 5U, 1086U, 7U, 1087U, 8U, 1088U, 93U, 1089U, 1U, 1090U, [54] = 1092U, 16U, 1093U, [58] = 1094U, [60] = 1095U, [62] = 1096U, [64] = 1097U, 240U, 1098U, 15U, 1099U, 62U, 1100U, 16U, 1101U, [74] = 1102U, [76] = 1103U, [78] = 1104U, [80] = 1105U, 240U, 1106U, 15U, 1107U, [86] = 1115U, 128U, 1120U, 102U, 1121U, 102U, 1224U, 255U, 1225U, 8U, 1228U, 255U, 1229U, 255U, 1230U, 1U, 1280U, 38U, 1281U, 162U, 1282U, 47U, 1283U, [110] = 1284U, 40U, 1285U, 163U, 1286U, 94U, 1287U, [118] = 1288U, 43U, 1289U, 164U, 1290U, 94U, 1291U, [126] = 1292U, 79U, 1293U, 164U, 1294U, [132] = 1295U, [134] = 1298U, 28U, 1300U, 10U, 1302U, 10U, 1317U, 79U, 1360U, 16U, 1361U, 16U, 1369U, 2U, 1372U, 80U, 1373U, 255U, 1540U, 9U, 1541U, 48U, 1543U, 3U, 1544U, 14U, 1545U, 42U, 1568U, 255U, 1569U, 255U, 1570U, 255U, 1571U, 255U, 1572U, 255U, 1573U, 255U, 1574U, 255U, 1575U, 255U, 1592U, 80U, 1596U, 10U, 1597U, 10U, 1598U, 14U, 1599U, 14U, 1600U, 128U, 1602U, 64U, 1603U, [194] = 1618U, 200U, 1646U, 5U, 1792U, 33U, 1793U, 67U, 1794U, 101U, 1795U, 135U, 1800U, 33U, 1801U, 67U, 1802U, 101U, 1803U, 135U, 1816U, 64U};
#line 2017  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/table.c"
u32 RTL8812AE_MAC_1T_ARRAYLEN = 216U;
#line 2019  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/table.c"
u32 RTL8821AE_MAC_REG_ARRAY[194U] = {1064U, 10U, 1065U, 16U, 1072U, [6] = 1073U, [8] = 1074U, [10] = 1075U, 1U, 1076U, 4U, 1077U, 5U, 1078U, 7U, 1079U, 8U, 1084U, 4U, 1085U, 5U, 1086U, 7U, 1087U, 8U, 1088U, 93U, 1089U, 1U, 1090U, [34] = 1092U, 16U, 1093U, [38] = 1094U, [40] = 1095U, [42] = 1096U, [44] = 1097U, 240U, 1098U, 15U, 1099U, 62U, 1100U, 16U, 1101U, [54] = 1102U, [56] = 1103U, [58] = 1104U, [60] = 1105U, 240U, 1106U, 15U, 1107U, [66] = 1110U, 94U, 1120U, 102U, 1121U, 102U, 1224U, 63U, 1225U, 255U, 1228U, 255U, 1229U, 255U, 1230U, 1U, 1280U, 38U, 1281U, 162U, 1282U, 47U, 1283U, [90] = 1284U, 40U, 1285U, 163U, 1286U, 94U, 1287U, [98] = 1288U, 43U, 1289U, 164U, 1290U, 94U, 1291U, [106] = 1292U, 79U, 1293U, 164U, 1294U, [112] = 1295U, [114] = 1298U, 28U, 1300U, 10U, 1302U, 10U, 1317U, 79U, 1360U, 16U, 1361U, 16U, 1369U, 2U, 1372U, 80U, 1373U, 255U, 1541U, 48U, 1543U, 7U, 1544U, 14U, 1545U, 42U, 1568U, 255U, 1569U, 255U, 1570U, 255U, 1571U, 255U, 1572U, 255U, 1573U, 255U, 1574U, 255U, 1575U, 255U, 1592U, 80U, 1596U, 10U, 1597U, 10U, 1598U, 14U, 1599U, 14U, 1600U, 64U, 1602U, 64U, 1603U, [172] = 1618U, 200U, 1646U, 5U, 1792U, 33U, 1793U, 67U, 1794U, 101U, 1795U, 135U, 1800U, 33U, 1801U, 67U, 1802U, 101U, 1803U, 135U, 1816U, 64U};
#line 2119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/table.c"
u32 RTL8821AE_MAC_1T_ARRAYLEN = 194U;
#line 2121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/table.c"
u32 RTL8812AE_AGC_TAB_ARRAY[668U] = {2147483649U, [2] = 1073741824U, [4] = 2076U, 4227858433U, 2076U, 4211212289U, 2076U, 4194566145U, 2076U, 4177920001U, 2076U, 4161273857U, 2076U, 4144627713U, 2076U, 4127981569U, 2076U, 4111335425U, 2076U, 4094689281U, 2076U, 4078043137U, 2076U, 4061396993U, 2076U, 4044750849U, 2076U, 4028104705U, 2076U, 4011458561U, 2076U, 3994812417U, 2076U, 3978166273U, 2076U, 3961520129U, 2076U, 3944873985U, 2076U, 3928227841U, 2076U, 3441819649U, 2076U, 3425173505U, 2076U, 3408527361U, 2076U, 3391881217U, 2076U, 3375235073U, 2076U, 3358588929U, 2076U, 2788294657U, 2076U, 2771648513U, 2076U, 2755002369U, 2076U, 2738356225U, 2076U, 2721710081U, 2076U, 2285633537U, 2076U, 2268987393U, 2076U, 2252341249U, 2076U, 2235695105U, 2076U, 2219048961U, 2076U, 2202402817U, 2076U, 2185756673U, 2076U, 2169110529U, 2076U, 1212940289U, 2076U, 1196294145U, 2076U, 1179648001U, 2076U, 1163001857U, 2076U, 1146355713U, 2076U, 1129709569U, 2076U, 1113063425U, 2076U, 1096417281U, 2076U, 626786305U, 2076U, 610140161U, 2076U, 593494017U, 2076U, 576847873U, 2076U, 560201729U, 2076U, 560332801U, 2076U, 560463873U, 2076U, 560594945U, 2076U, 560726017U, 2076U, 560857089U, 2076U, 560988161U, 2076U, 561119233U, 2076U, 561250305U, 2076U, 561381377U, 2076U, 561512449U, 2076U, 561643521U, 2076U, 561774593U, 2076U, 561905665U, 2415919105U, 5U, 1073741824U, [136] = 2076U, 4177526785U, 2076U, 4160880641U, 2076U, 4144234497U, 2076U, 4127588353U, 2076U, 4110942209U, 2076U, 4094296065U, 2076U, 4077649921U, 2076U, 4061003777U, 2076U, 4044357633U, 2076U, 4027711489U, 2076U, 4011065345U, 2076U, 3994419201U, 2076U, 3977773057U, 2076U, 3961126913U, 2076U, 3944480769U, 2076U, 3927834625U, 2076U, 3441426433U, 2076U, 3424780289U, 2076U, 3408134145U, 2076U, 3391488001U, 2076U, 3374841857U, 2076U, 3358195713U, 2076U, 3341549569U, 2076U, 3324903425U, 2076U, 2771386369U, 2076U, 2754740225U, 2076U, 2738094081U, 2076U, 2721447937U, 2076U, 2285371393U, 2076U, 2268725249U, 2076U, 2252079105U, 2076U, 2235432961U, 2076U, 2218786817U, 2076U, 2202140673U, 2076U, 2185494529U, 2076U, 2168848385U, 2076U, 1212678145U, 2076U, 1196032001U, 2076U, 1179385857U, 2076U, 1162739713U, 2076U, 1146093569U, 2076U, 1129447425U, 2076U, 1112801281U, 2076U, 1096155137U, 2076U, 626524161U, 2076U, 609878017U, 2076U, 593231873U, 2076U, 576585729U, 2076U, 559939585U, 2076U, 560070657U, 2076U, 560201729U, 2076U, 560332801U, 2076U, 560463873U, 2076U, 560594945U, 2076U, 594280449U, 2076U, 577634305U, 2076U, 560988161U, 2076U, 561119233U, 2076U, 561250305U, 2076U, 561381377U, 2076U, 561512449U, 2076U, 561643521U, 2076U, 561774593U, 2076U, 561905665U, 2684354560U, [266] = 2076U, 4278190081U, 2076U, 4278321153U, 2076U, 4278452225U, 2076U, 4278583297U, 2076U, 4278714369U, 2076U, 4262068225U, 2076U, 4245422081U, 2076U, 4228775937U, 2076U, 4212129793U, 2076U, 4195483649U, 2076U, 4178837505U, 2076U, 4162191361U, 2076U, 4145545217U, 2076U, 4128899073U, 2076U, 4112252929U, 2076U, 4095606785U, 2076U, 4078960641U, 2076U, 4062314497U, 2076U, 4045668353U, 2076U, 4029022209U, 2076U, 4012376065U, 2076U, 3995729921U, 2076U, 3979083777U, 2076U, 3962437633U, 2076U, 3945791489U, 2076U, 3929145345U, 2076U, 3912499201U, 2076U, 3895853057U, 2076U, 3879206913U, 2076U, 3862560769U, 2076U, 3845914625U, 2076U, 3342729217U, 2076U, 3326083073U, 2076U, 3309436929U, 2076U, 3292790785U, 2076U, 3276144641U, 2076U, 3259498497U, 2076U, 3242852353U, 2076U, 2806775809U, 2076U, 2790129665U, 2076U, 2773483521U, 2076U, 2756837377U, 2076U, 2740191233U, 2076U, 2723545089U, 2076U, 2706898945U, 2076U, 1733951489U, 2076U, 1717305345U, 2076U, 1700659201U, 2076U, 1684013057U, 2076U, 1667366913U, 2076U, 1214513153U, 2076U, 1197867009U, 2076U, 1181220865U, 2076U, 1164574721U, 2076U, 1147928577U, 2076U, 1131282433U, 2076U, 1114636289U, 2076U, 1097990145U, 2076U, 1098121217U, 2076U, 1098252289U, 2076U, 1098383361U, 2076U, 1098514433U, 2076U, 1098645505U, 2076U, 1098776577U, 2952790016U, [396] = 2147483652U, [398] = 1073741824U, [400] = 2076U, 4236247041U, 2076U, 4219600897U, 2076U, 4202954753U, 2076U, 4186308609U, 2076U, 4169662465U, 2076U, 4153016321U, 2076U, 4136370177U, 2076U, 4119724033U, 2076U, 4103077889U, 2076U, 4086431745U, 2076U, 4069785601U, 2076U, 4053139457U, 2076U, 4036493313U, 2076U, 4019847169U, 2076U, 4003201025U, 2076U, 3986554881U, 2076U, 3969908737U, 2076U, 3953262593U, 2076U, 3936616449U, 2076U, 3919970305U, 2076U, 3903324161U, 2076U, 3886678017U, 2076U, 3870031873U, 2076U, 3853385729U, 2076U, 3836739585U, 2076U, 3820093441U, 2076U, 2830368769U, 2076U, 2813722625U, 2076U, 2797076481U, 2076U, 2780430337U, 2076U, 2763784193U, 2076U, 2747138049U, 2076U, 2730491905U, 2076U, 2713845761U, 2076U, 1757675521U, 2076U, 1741029377U, 2076U, 1724383233U, 2076U, 1707737089U, 2076U, 1691090945U, 2076U, 1204682753U, 2076U, 1188036609U, 2076U, 1171390465U, 2076U, 1154744321U, 2076U, 1138098177U, 2076U, 1121452033U, 2076U, 148504577U, 2076U, 131858433U, 2076U, 115212289U, 2076U, 98566145U, 2076U, 81920001U, 2076U, 65273857U, 2076U, 48627713U, 2076U, 31981569U, 2076U, 32112641U, 2076U, 32243713U, 2076U, 32374785U, 2076U, 32505857U, 2076U, 32636929U, 2076U, 32768001U, 2076U, 32899073U, 2076U, 33030145U, 2076U, 33161217U, 2076U, 33292289U, 2076U, 33423361U, 2684354560U, [530] = 2076U, 4286578689U, 2076U, 4286709761U, 2076U, 4286840833U, 2076U, 4270194689U, 2076U, 4253548545U, 2076U, 4236902401U, 2076U, 4220256257U, 2076U, 4203610113U, 2076U, 4186963969U, 2076U, 4170317825U, 2076U, 4153671681U, 2076U, 4137025537U, 2076U, 4120379393U, 2076U, 4103733249U, 2076U, 4087087105U, 2076U, 4070440961U, 2076U, 4053794817U, 2076U, 4037148673U, 2076U, 4020502529U, 2076U, 4003856385U, 2076U, 3987210241U, 2076U, 3970564097U, 2076U, 3953917953U, 2076U, 3937271809U, 2076U, 3920625665U, 2076U, 3903979521U, 2076U, 3887333377U, 2076U, 3870687233U, 2076U, 3854041089U, 2076U, 3837394945U, 2076U, 3820748801U, 2076U, 2831024129U, 2076U, 2814377985U, 2076U, 2797731841U, 2076U, 2781085697U, 2076U, 2764439553U, 2076U, 2747793409U, 2076U, 2731147265U, 2076U, 2714501121U, 2076U, 1758330881U, 2076U, 1741684737U, 2076U, 1725038593U, 2076U, 1708392449U, 2076U, 1691746305U, 2076U, 1205338113U, 2076U, 1188691969U, 2076U, 1172045825U, 2076U, 1155399681U, 2076U, 1138753537U, 2076U, 1122107393U, 2076U, 149159937U, 2076U, 132513793U, 2076U, 115867649U, 2076U, 99221505U, 2076U, 82575361U, 2076U, 65929217U, 2076U, 49283073U, 2076U, 32636929U, 2076U, 32768001U, 2076U, 32899073U, 2076U, 33030145U, 2076U, 33161217U, 2076U, 33292289U, 2076U, 33423361U, 2952790016U, [660] = 3152U, 34U, 3152U, 32U, 3664U, 34U, 3664U, 32U};
#line 2455  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/table.c"
u32 RTL8812AE_AGC_TAB_1TARRAYLEN = 668U;
#line 2457  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/table.c"
u32 RTL8821AE_AGC_TAB_ARRAY[382U] = {2076U, 3204448257U, 2076U, 3204579329U, 2076U, 3204710401U, 2076U, 3204841473U, 2076U, 3188195329U, 2076U, 3171549185U, 2076U, 3154903041U, 2076U, 3121479681U, 2076U, 3104833537U, 2076U, 3088187393U, 2076U, 3071541249U, 2076U, 3054895105U, 2076U, 3038248961U, 2076U, 3021602817U, 2076U, 3004956673U, 2076U, 2988310529U, 2076U, 2971664385U, 2076U, 2955018241U, 2076U, 2938372097U, 2076U, 2921725953U, 2076U, 2905079809U, 2076U, 2888433665U, 2076U, 2871787521U, 2076U, 2855141377U, 2076U, 2838495233U, 2076U, 2821849089U, 2076U, 2805202945U, 2076U, 2788556801U, 2076U, 2771910657U, 2076U, 2755264513U, 2076U, 2738618369U, 2076U, 1732116481U, 2076U, 1715470337U, 2076U, 1698824193U, 2076U, 1682178049U, 2076U, 1665531905U, 2076U, 1648885761U, 2076U, 1632239617U, 2076U, 1196163073U, 2076U, 1179516929U, 2076U, 1162870785U, 2076U, 1146224641U, 2076U, 1129578497U, 2076U, 1112932353U, 2076U, 1096286209U, 2076U, 676986881U, 2076U, 660340737U, 2076U, 643694593U, 2076U, 627048449U, 2076U, 610402305U, 2076U, 174325761U, 2076U, 157679617U, 2076U, 141033473U, 2076U, 124387329U, 2076U, 107741185U, 2076U, 91095041U, 2076U, 74448897U, 2076U, 57802753U, 2076U, 41156609U, 2076U, 24510465U, 2076U, 24641537U, 2076U, 24772609U, 2076U, 24903681U, 2076U, 25034753U, 4279173824U, 43981U, 2076U, 4211081473U, 2076U, 4194435329U, 2076U, 4177789185U, 2076U, 4161143041U, 2076U, 4144496897U, 2076U, 4127850753U, 2076U, 4111204609U, 2076U, 4094558465U, 2076U, 4077912321U, 2076U, 4061266177U, 2076U, 4044620033U, 2076U, 4027973889U, 2076U, 4011327745U, 2076U, 3994681601U, 2076U, 3978035457U, 2076U, 3961389313U, 2076U, 3944743169U, 2076U, 3928097025U, 2076U, 3911450881U, 2076U, 3894804737U, 2076U, 3878158593U, 2076U, 3861512449U, 2076U, 3844866305U, 2076U, 3828220161U, 2076U, 3811574017U, 2076U, 2771517697U, 2076U, 2754871553U, 2076U, 2738225409U, 2076U, 2268594433U, 2076U, 2251948289U, 2076U, 2235302145U, 2076U, 2218656001U, 2076U, 1765802241U, 2076U, 1749156097U, 2076U, 1732509953U, 2076U, 1715863809U, 2076U, 1229455617U, 2076U, 1212809473U, 2076U, 1196163329U, 2076U, 709755137U, 2076U, 693108993U, 2076U, 676462849U, 2076U, 659816705U, 2076U, 643170561U, 2076U, 626524417U, 2076U, 609878273U, 2076U, 593232129U, 2076U, 90046721U, 2076U, 73400577U, 2076U, 56754433U, 2076U, 40108289U, 2076U, 23462145U, 2076U, 23593217U, 2076U, 23724289U, 2076U, 23855361U, 2076U, 23986433U, 2076U, 24117505U, 2076U, 24248577U, 3452816845U, 52685U, 2076U, 4278190337U, 2076U, 4278321409U, 2076U, 4261675265U, 2076U, 4245029121U, 2076U, 4228382977U, 2076U, 4245291265U, 2076U, 4228645121U, 2076U, 4211998977U, 2076U, 4195352833U, 2076U, 4178706689U, 2076U, 4162060545U, 2076U, 4145414401U, 2076U, 4128768257U, 2076U, 4112122113U, 2076U, 4095475969U, 2076U, 4078829825U, 2076U, 4062183681U, 2076U, 4045537537U, 2076U, 4028891393U, 2076U, 4012245249U, 2076U, 3995599105U, 2076U, 3978952961U, 2076U, 3962306817U, 2076U, 3945660673U, 2076U, 3929014529U, 2076U, 3912368385U, 2076U, 3895722241U, 2076U, 3879076097U, 2076U, 3862429953U, 2076U, 3845783809U, 2076U, 3829137665U, 2076U, 3812491521U, 2076U, 2772435201U, 2076U, 2755789057U, 2076U, 2739142913U, 2076U, 2269511937U, 2076U, 2252865793U, 2076U, 2236219649U, 2076U, 2219573505U, 2076U, 1766719745U, 2076U, 1750073601U, 2076U, 1733427457U, 2076U, 1716781313U, 2076U, 1230373121U, 2076U, 1213726977U, 2076U, 1197080833U, 2076U, 710672641U, 2076U, 694026497U, 2076U, 677380353U, 2076U, 660734209U, 2076U, 644088065U, 2076U, 627441921U, 2076U, 610795777U, 2076U, 594149633U, 2076U, 90964225U, 2076U, 74318081U, 2076U, 57671937U, 2076U, 41025793U, 4279173824U, 57005U, 2076U, 24379649U, 2076U, 24510721U, 2076U, 24641793U, 2076U, 24772865U, 2076U, 24903937U, 2076U, 25035009U, 3152U, 34U, 3152U, 32U};
#line 2651  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/table.c"
u32 RTL8821AE_AGC_TAB_1TARRAYLEN = 382U;
#line 2657  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/table.c"
u8 *RTL8812AE_TXPWR_LMT[3948U] = {(u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"CCK", (u8 *)"1T", (u8 *)"01", (u8 *)"36", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"CCK", (u8 *)"1T", (u8 *)"01", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"CCK", (u8 *)"1T", (u8 *)"01", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"CCK", (u8 *)"1T", (u8 *)"02", (u8 *)"36", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"CCK", (u8 *)"1T", (u8 *)"02", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"CCK", (u8 *)"1T", (u8 *)"02", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"CCK", (u8 *)"1T", (u8 *)"03", (u8 *)"36", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"CCK", (u8 *)"1T", (u8 *)"03", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"CCK", (u8 *)"1T", (u8 *)"03", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"CCK", (u8 *)"1T", (u8 *)"04", (u8 *)"36", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"CCK", (u8 *)"1T", (u8 *)"04", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"CCK", (u8 *)"1T", (u8 *)"04", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"CCK", (u8 *)"1T", (u8 *)"05", (u8 *)"36", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"CCK", (u8 *)"1T", (u8 *)"05", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"CCK", (u8 *)"1T", (u8 *)"05", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"CCK", (u8 *)"1T", (u8 *)"06", (u8 *)"36", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"CCK", (u8 *)"1T", (u8 *)"06", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"CCK", (u8 *)"1T", (u8 *)"06", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"CCK", (u8 *)"1T", (u8 *)"07", (u8 *)"36", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"CCK", (u8 *)"1T", (u8 *)"07", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"CCK", (u8 *)"1T", (u8 *)"07", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"CCK", (u8 *)"1T", (u8 *)"08", (u8 *)"36", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"CCK", (u8 *)"1T", (u8 *)"08", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"CCK", (u8 *)"1T", (u8 *)"08", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"CCK", (u8 *)"1T", (u8 *)"09", (u8 *)"36", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"CCK", (u8 *)"1T", (u8 *)"09", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"CCK", (u8 *)"1T", (u8 *)"09", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"CCK", (u8 *)"1T", (u8 *)"10", (u8 *)"36", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"CCK", (u8 *)"1T", (u8 *)"10", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"CCK", (u8 *)"1T", (u8 *)"10", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"CCK", (u8 *)"1T", (u8 *)"11", (u8 *)"36", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"CCK", (u8 *)"1T", (u8 *)"11", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"CCK", (u8 *)"1T", (u8 *)"11", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"CCK", (u8 *)"1T", (u8 *)"12", (u8 *)"63", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"CCK", (u8 *)"1T", (u8 *)"12", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"CCK", (u8 *)"1T", (u8 *)"12", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"CCK", (u8 *)"1T", (u8 *)"13", (u8 *)"63", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"CCK", (u8 *)"1T", (u8 *)"13", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"CCK", (u8 *)"1T", (u8 *)"13", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"CCK", (u8 *)"1T", (u8 *)"14", (u8 *)"63", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"CCK", (u8 *)"1T", (u8 *)"14", (u8 *)"63", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"CCK", (u8 *)"1T", (u8 *)"14", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"01", (u8 *)"34", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"01", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"01", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"02", (u8 *)"36", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"02", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"02", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"03", (u8 *)"36", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"03", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"03", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"04", (u8 *)"36", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"04", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"04", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"05", (u8 *)"36", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"05", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"05", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"06", (u8 *)"36", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"06", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"06", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"07", (u8 *)"36", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"07", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"07", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"08", (u8 *)"36", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"08", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"08", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"09", (u8 *)"36", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"09", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"09", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"10", (u8 *)"36", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"10", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"10", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"11", (u8 *)"32", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"11", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"11", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"12", (u8 *)"63", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"12", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"12", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"13", (u8 *)"63", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"13", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"13", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"14", (u8 *)"63", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"14", (u8 *)"63", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"14", (u8 *)"63", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"01", (u8 *)"34", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"01", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"01", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"02", (u8 *)"36", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"02", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"02", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"03", (u8 *)"36", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"03", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"03", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"04", (u8 *)"36", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"04", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"04", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"05", (u8 *)"36", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"05", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"05", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"06", (u8 *)"36", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"06", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"06", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"07", (u8 *)"36", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"07", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"07", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"08", (u8 *)"36", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"08", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"08", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"09", (u8 *)"36", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"09", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"09", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"10", (u8 *)"36", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"10", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"10", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"11", (u8 *)"32", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"11", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"11", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"12", (u8 *)"63", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"12", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"12", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"13", (u8 *)"63", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"13", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"13", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"14", (u8 *)"63", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"14", (u8 *)"63", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"14", (u8 *)"63", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"01", (u8 *)"32", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"01", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"01", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"02", (u8 *)"34", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"02", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"02", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"03", (u8 *)"34", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"03", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"03", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"04", (u8 *)"34", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"04", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"04", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"05", (u8 *)"34", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"05", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"05", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"06", (u8 *)"34", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"06", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"06", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"07", (u8 *)"34", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"07", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"07", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"08", (u8 *)"34", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"08", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"08", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"09", (u8 *)"34", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"09", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"09", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"10", (u8 *)"34", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"10", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"10", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"11", (u8 *)"30", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"11", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"11", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"12", (u8 *)"63", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"12", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"12", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"13", (u8 *)"63", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"13", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"13", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"14", (u8 *)"63", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"14", (u8 *)"63", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"14", (u8 *)"63", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"01", (u8 *)"63", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"01", (u8 *)"63", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"01", (u8 *)"63", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"02", (u8 *)"63", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"02", (u8 *)"63", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"02", (u8 *)"63", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"03", (u8 *)"32", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"03", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"03", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"04", (u8 *)"36", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"04", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"04", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"05", (u8 *)"36", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"05", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"05", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"06", (u8 *)"36", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"06", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"06", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"07", (u8 *)"36", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"07", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"07", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"08", (u8 *)"36", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"08", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"08", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"09", (u8 *)"36", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"09", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"09", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"10", (u8 *)"36", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"10", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"10", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"11", (u8 *)"32", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"11", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"11", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"12", (u8 *)"63", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"12", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"12", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"13", (u8 *)"63", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"13", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"13", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"14", (u8 *)"63", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"14", (u8 *)"63", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"14", (u8 *)"63", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"01", (u8 *)"63", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"01", (u8 *)"63", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"01", (u8 *)"63", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"02", (u8 *)"63", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"02", (u8 *)"63", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"02", (u8 *)"63", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"03", (u8 *)"30", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"03", (u8 *)"30", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"03", (u8 *)"30", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"04", (u8 *)"34", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"04", (u8 *)"30", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"04", (u8 *)"30", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"05", (u8 *)"34", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"05", (u8 *)"30", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"05", (u8 *)"30", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"06", (u8 *)"34", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"06", (u8 *)"30", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"06", (u8 *)"30", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"07", (u8 *)"34", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"07", (u8 *)"30", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"07", (u8 *)"30", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"08", (u8 *)"34", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"08", (u8 *)"30", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"08", (u8 *)"30", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"09", (u8 *)"34", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"09", (u8 *)"30", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"09", (u8 *)"30", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"10", (u8 *)"34", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"10", (u8 *)"30", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"10", (u8 *)"30", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"11", (u8 *)"30", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"11", (u8 *)"30", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"11", (u8 *)"30", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"12", (u8 *)"63", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"12", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"12", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"13", (u8 *)"63", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"13", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"13", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"14", (u8 *)"63", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"14", (u8 *)"63", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"14", (u8 *)"63", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"36", (u8 *)"30", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"36", (u8 *)"32", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"36", (u8 *)"32", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"40", (u8 *)"30", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"40", (u8 *)"32", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"40", (u8 *)"32", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"44", (u8 *)"30", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"44", (u8 *)"32", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"44", (u8 *)"32", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"48", (u8 *)"30", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"48", (u8 *)"32", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"48", (u8 *)"32", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"52", (u8 *)"36", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"52", (u8 *)"32", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"52", (u8 *)"32", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"56", (u8 *)"34", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"56", (u8 *)"32", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"56", (u8 *)"32", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"60", (u8 *)"32", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"60", (u8 *)"32", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"60", (u8 *)"32", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"64", (u8 *)"28", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"64", (u8 *)"32", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"64", (u8 *)"32", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"100", (u8 *)"30", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"100", (u8 *)"32", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"100", (u8 *)"32", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"104", (u8 *)"30", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"104", (u8 *)"32", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"104", (u8 *)"32", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"108", (u8 *)"32", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"108", (u8 *)"32", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"108", (u8 *)"32", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"112", (u8 *)"34", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"112", (u8 *)"32", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"112", (u8 *)"32", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"116", (u8 *)"34", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"116", (u8 *)"32", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"116", (u8 *)"32", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"120", (u8 *)"36", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"120", (u8 *)"32", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"120", (u8 *)"32", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"124", (u8 *)"34", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"124", (u8 *)"32", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"124", (u8 *)"32", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"128", (u8 *)"32", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"128", (u8 *)"32", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"128", (u8 *)"32", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"132", (u8 *)"30", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"132", (u8 *)"32", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"132", (u8 *)"32", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"136", (u8 *)"30", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"136", (u8 *)"32", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"136", (u8 *)"32", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"140", (u8 *)"28", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"140", (u8 *)"32", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"140", (u8 *)"32", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"149", (u8 *)"36", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"149", (u8 *)"32", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"149", (u8 *)"63", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"153", (u8 *)"36", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"153", (u8 *)"32", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"153", (u8 *)"63", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"157", (u8 *)"36", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"157", (u8 *)"32", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"157", (u8 *)"63", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"161", (u8 *)"36", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"161", (u8 *)"32", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"161", (u8 *)"63", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"165", (u8 *)"36", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"165", (u8 *)"32", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"165", (u8 *)"63", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"36", (u8 *)"30", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"36", (u8 *)"32", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"36", (u8 *)"32", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"40", (u8 *)"30", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"40", (u8 *)"32", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"40", (u8 *)"32", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"44", (u8 *)"30", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"44", (u8 *)"32", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"44", (u8 *)"32", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"48", (u8 *)"30", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"48", (u8 *)"32", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"48", (u8 *)"32", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"52", (u8 *)"36", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"52", (u8 *)"32", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"52", (u8 *)"32", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"56", (u8 *)"34", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"56", (u8 *)"32", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"56", (u8 *)"32", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"60", (u8 *)"32", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"60", (u8 *)"32", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"60", (u8 *)"32", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"64", (u8 *)"28", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"64", (u8 *)"32", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"64", (u8 *)"32", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"100", (u8 *)"30", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"100", (u8 *)"32", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"100", (u8 *)"32", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"104", (u8 *)"30", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"104", (u8 *)"32", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"104", (u8 *)"32", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"108", (u8 *)"32", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"108", (u8 *)"32", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"108", (u8 *)"32", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"112", (u8 *)"34", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"112", (u8 *)"32", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"112", (u8 *)"32", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"116", (u8 *)"34", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"116", (u8 *)"32", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"116", (u8 *)"32", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"120", (u8 *)"36", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"120", (u8 *)"32", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"120", (u8 *)"32", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"124", (u8 *)"34", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"124", (u8 *)"32", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"124", (u8 *)"32", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"128", (u8 *)"32", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"128", (u8 *)"32", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"128", (u8 *)"32", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"132", (u8 *)"30", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"132", (u8 *)"32", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"132", (u8 *)"32", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"136", (u8 *)"30", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"136", (u8 *)"32", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"136", (u8 *)"32", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"140", (u8 *)"28", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"140", (u8 *)"32", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"140", (u8 *)"32", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"149", (u8 *)"36", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"149", (u8 *)"32", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"149", (u8 *)"63", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"153", (u8 *)"36", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"153", (u8 *)"32", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"153", (u8 *)"63", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"157", (u8 *)"36", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"157", (u8 *)"32", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"157", (u8 *)"63", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"161", (u8 *)"36", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"161", (u8 *)"32", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"161", (u8 *)"63", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"165", (u8 *)"36", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"165", (u8 *)"32", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"165", (u8 *)"63", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"36", (u8 *)"28", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"36", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"36", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"40", (u8 *)"28", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"40", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"40", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"44", (u8 *)"28", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"44", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"44", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"48", (u8 *)"28", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"48", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"48", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"52", (u8 *)"34", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"52", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"52", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"56", (u8 *)"32", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"56", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"56", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"60", (u8 *)"30", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"60", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"60", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"64", (u8 *)"26", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"64", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"64", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"100", (u8 *)"28", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"100", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"100", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"104", (u8 *)"28", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"104", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"104", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"108", (u8 *)"30", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"108", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"108", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"112", (u8 *)"32", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"112", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"112", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"116", (u8 *)"32", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"116", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"116", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"120", (u8 *)"34", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"120", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"120", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"124", (u8 *)"32", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"124", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"124", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"128", (u8 *)"30", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"128", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"128", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"132", (u8 *)"28", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"132", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"132", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"136", (u8 *)"28", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"136", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"136", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"140", (u8 *)"26", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"140", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"140", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"149", (u8 *)"34", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"149", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"149", (u8 *)"63", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"153", (u8 *)"34", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"153", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"153", (u8 *)"63", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"157", (u8 *)"34", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"157", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"157", (u8 *)"63", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"161", (u8 *)"34", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"161", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"161", (u8 *)"63", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"165", (u8 *)"34", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"165", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"165", (u8 *)"63", (u8 *)"FCC", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"38", (u8 *)"30", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"38", (u8 *)"32", (u8 *)"MKK", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"38", (u8 *)"32", (u8 *)"FCC", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"46", (u8 *)"30", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"46", (u8 *)"32", (u8 *)"MKK", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"46", (u8 *)"32", (u8 *)"FCC", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"54", (u8 *)"32", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"54", (u8 *)"32", (u8 *)"MKK", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"54", (u8 *)"32", (u8 *)"FCC", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"62", (u8 *)"32", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"62", (u8 *)"32", (u8 *)"MKK", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"62", (u8 *)"32", (u8 *)"FCC", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"102", (u8 *)"28", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"102", (u8 *)"32", (u8 *)"MKK", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"102", (u8 *)"32", (u8 *)"FCC", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"110", (u8 *)"32", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"110", (u8 *)"32", (u8 *)"MKK", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"110", (u8 *)"32", (u8 *)"FCC", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"118", (u8 *)"36", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"118", (u8 *)"32", (u8 *)"MKK", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"118", (u8 *)"32", (u8 *)"FCC", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"126", (u8 *)"34", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"126", (u8 *)"32", (u8 *)"MKK", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"126", (u8 *)"32", (u8 *)"FCC", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"134", (u8 *)"32", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"134", (u8 *)"32", (u8 *)"MKK", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"134", (u8 *)"32", (u8 *)"FCC", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"151", (u8 *)"36", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"151", (u8 *)"32", (u8 *)"MKK", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"151", (u8 *)"63", (u8 *)"FCC", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"159", (u8 *)"36", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"159", (u8 *)"32", (u8 *)"MKK", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"159", (u8 *)"63", (u8 *)"FCC", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"38", (u8 *)"28", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"38", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"38", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"46", (u8 *)"28", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"46", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"46", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"54", (u8 *)"30", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"54", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"54", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"62", (u8 *)"30", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"62", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"62", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"102", (u8 *)"26", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"102", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"102", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"110", (u8 *)"30", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"110", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"110", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"118", (u8 *)"34", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"118", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"118", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"126", (u8 *)"32", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"126", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"126", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"134", (u8 *)"30", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"134", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"134", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"151", (u8 *)"34", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"151", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"151", (u8 *)"63", (u8 *)"FCC", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"159", (u8 *)"34", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"159", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"159", (u8 *)"63", (u8 *)"FCC", (u8 *)"5G", (u8 *)"80M", (u8 *)"VHT", (u8 *)"1T", (u8 *)"42", (u8 *)"30", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"80M", (u8 *)"VHT", (u8 *)"1T", (u8 *)"42", (u8 *)"32", (u8 *)"MKK", (u8 *)"5G", (u8 *)"80M", (u8 *)"VHT", (u8 *)"1T", (u8 *)"42", (u8 *)"32", (u8 *)"FCC", (u8 *)"5G", (u8 *)"80M", (u8 *)"VHT", (u8 *)"1T", (u8 *)"58", (u8 *)"28", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"80M", (u8 *)"VHT", (u8 *)"1T", (u8 *)"58", (u8 *)"32", (u8 *)"MKK", (u8 *)"5G", (u8 *)"80M", (u8 *)"VHT", (u8 *)"1T", (u8 *)"58", (u8 *)"32", (u8 *)"FCC", (u8 *)"5G", (u8 *)"80M", (u8 *)"VHT", (u8 *)"1T", (u8 *)"106", (u8 *)"30", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"80M", (u8 *)"VHT", (u8 *)"1T", (u8 *)"106", (u8 *)"32", (u8 *)"MKK", (u8 *)"5G", (u8 *)"80M", (u8 *)"VHT", (u8 *)"1T", (u8 *)"106", (u8 *)"32", (u8 *)"FCC", (u8 *)"5G", (u8 *)"80M", (u8 *)"VHT", (u8 *)"1T", (u8 *)"122", (u8 *)"34", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"80M", (u8 *)"VHT", (u8 *)"1T", (u8 *)"122", (u8 *)"32", (u8 *)"MKK", (u8 *)"5G", (u8 *)"80M", (u8 *)"VHT", (u8 *)"1T", (u8 *)"122", (u8 *)"32", (u8 *)"FCC", (u8 *)"5G", (u8 *)"80M", (u8 *)"VHT", (u8 *)"1T", (u8 *)"155", (u8 *)"36", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"80M", (u8 *)"VHT", (u8 *)"1T", (u8 *)"155", (u8 *)"32", (u8 *)"MKK", (u8 *)"5G", (u8 *)"80M", (u8 *)"VHT", (u8 *)"1T", (u8 *)"155", (u8 *)"63", (u8 *)"FCC", (u8 *)"5G", (u8 *)"80M", (u8 *)"VHT", (u8 *)"2T", (u8 *)"42", (u8 *)"28", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"80M", (u8 *)"VHT", (u8 *)"2T", (u8 *)"42", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"80M", (u8 *)"VHT", (u8 *)"2T", (u8 *)"42", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"80M", (u8 *)"VHT", (u8 *)"2T", (u8 *)"58", (u8 *)"26", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"80M", (u8 *)"VHT", (u8 *)"2T", (u8 *)"58", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"80M", (u8 *)"VHT", (u8 *)"2T", (u8 *)"58", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"80M", (u8 *)"VHT", (u8 *)"2T", (u8 *)"106", (u8 *)"28", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"80M", (u8 *)"VHT", (u8 *)"2T", (u8 *)"106", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"80M", (u8 *)"VHT", (u8 *)"2T", (u8 *)"106", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"80M", (u8 *)"VHT", (u8 *)"2T", (u8 *)"122", (u8 *)"32", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"80M", (u8 *)"VHT", (u8 *)"2T", (u8 *)"122", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"80M", (u8 *)"VHT", (u8 *)"2T", (u8 *)"122", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"80M", (u8 *)"VHT", (u8 *)"2T", (u8 *)"155", (u8 *)"34", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"80M", (u8 *)"VHT", (u8 *)"2T", (u8 *)"155", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"80M", (u8 *)"VHT", (u8 *)"2T", (u8 *)"155", (u8 *)"63"};
#line 3224  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/table.c"
u32 RTL8812AE_TXPWR_LMT_ARRAY_LEN = 3948U;
#line 3226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/table.c"
u8 *RTL8821AE_TXPWR_LMT[3948U] = {(u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"CCK", (u8 *)"1T", (u8 *)"01", (u8 *)"32", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"CCK", (u8 *)"1T", (u8 *)"01", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"CCK", (u8 *)"1T", (u8 *)"01", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"CCK", (u8 *)"1T", (u8 *)"02", (u8 *)"32", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"CCK", (u8 *)"1T", (u8 *)"02", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"CCK", (u8 *)"1T", (u8 *)"02", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"CCK", (u8 *)"1T", (u8 *)"03", (u8 *)"36", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"CCK", (u8 *)"1T", (u8 *)"03", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"CCK", (u8 *)"1T", (u8 *)"03", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"CCK", (u8 *)"1T", (u8 *)"04", (u8 *)"36", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"CCK", (u8 *)"1T", (u8 *)"04", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"CCK", (u8 *)"1T", (u8 *)"04", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"CCK", (u8 *)"1T", (u8 *)"05", (u8 *)"36", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"CCK", (u8 *)"1T", (u8 *)"05", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"CCK", (u8 *)"1T", (u8 *)"05", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"CCK", (u8 *)"1T", (u8 *)"06", (u8 *)"36", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"CCK", (u8 *)"1T", (u8 *)"06", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"CCK", (u8 *)"1T", (u8 *)"06", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"CCK", (u8 *)"1T", (u8 *)"07", (u8 *)"36", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"CCK", (u8 *)"1T", (u8 *)"07", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"CCK", (u8 *)"1T", (u8 *)"07", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"CCK", (u8 *)"1T", (u8 *)"08", (u8 *)"36", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"CCK", (u8 *)"1T", (u8 *)"08", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"CCK", (u8 *)"1T", (u8 *)"08", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"CCK", (u8 *)"1T", (u8 *)"09", (u8 *)"32", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"CCK", (u8 *)"1T", (u8 *)"09", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"CCK", (u8 *)"1T", (u8 *)"09", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"CCK", (u8 *)"1T", (u8 *)"10", (u8 *)"32", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"CCK", (u8 *)"1T", (u8 *)"10", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"CCK", (u8 *)"1T", (u8 *)"10", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"CCK", (u8 *)"1T", (u8 *)"11", (u8 *)"32", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"CCK", (u8 *)"1T", (u8 *)"11", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"CCK", (u8 *)"1T", (u8 *)"11", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"CCK", (u8 *)"1T", (u8 *)"12", (u8 *)"63", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"CCK", (u8 *)"1T", (u8 *)"12", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"CCK", (u8 *)"1T", (u8 *)"12", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"CCK", (u8 *)"1T", (u8 *)"13", (u8 *)"63", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"CCK", (u8 *)"1T", (u8 *)"13", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"CCK", (u8 *)"1T", (u8 *)"13", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"CCK", (u8 *)"1T", (u8 *)"14", (u8 *)"63", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"CCK", (u8 *)"1T", (u8 *)"14", (u8 *)"63", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"CCK", (u8 *)"1T", (u8 *)"14", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"01", (u8 *)"30", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"01", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"01", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"02", (u8 *)"30", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"02", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"02", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"03", (u8 *)"32", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"03", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"03", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"04", (u8 *)"32", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"04", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"04", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"05", (u8 *)"32", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"05", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"05", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"06", (u8 *)"32", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"06", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"06", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"07", (u8 *)"32", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"07", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"07", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"08", (u8 *)"32", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"08", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"08", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"09", (u8 *)"30", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"09", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"09", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"10", (u8 *)"30", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"10", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"10", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"11", (u8 *)"30", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"11", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"11", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"12", (u8 *)"63", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"12", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"12", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"13", (u8 *)"63", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"13", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"13", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"14", (u8 *)"63", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"14", (u8 *)"63", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"14", (u8 *)"63", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"01", (u8 *)"26", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"01", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"01", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"02", (u8 *)"26", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"02", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"02", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"03", (u8 *)"32", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"03", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"03", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"04", (u8 *)"32", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"04", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"04", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"05", (u8 *)"32", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"05", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"05", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"06", (u8 *)"32", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"06", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"06", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"07", (u8 *)"32", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"07", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"07", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"08", (u8 *)"32", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"08", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"08", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"09", (u8 *)"26", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"09", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"09", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"10", (u8 *)"26", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"10", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"10", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"11", (u8 *)"26", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"11", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"11", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"12", (u8 *)"63", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"12", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"12", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"13", (u8 *)"63", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"13", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"13", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"14", (u8 *)"63", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"14", (u8 *)"63", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"14", (u8 *)"63", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"01", (u8 *)"30", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"01", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"01", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"02", (u8 *)"32", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"02", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"02", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"03", (u8 *)"32", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"03", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"03", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"04", (u8 *)"32", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"04", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"04", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"05", (u8 *)"32", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"05", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"05", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"06", (u8 *)"32", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"06", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"06", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"07", (u8 *)"32", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"07", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"07", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"08", (u8 *)"32", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"08", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"08", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"09", (u8 *)"32", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"09", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"09", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"10", (u8 *)"32", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"10", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"10", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"11", (u8 *)"30", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"11", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"11", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"12", (u8 *)"63", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"12", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"12", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"13", (u8 *)"63", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"13", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"13", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"14", (u8 *)"63", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"14", (u8 *)"63", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"14", (u8 *)"63", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"01", (u8 *)"63", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"01", (u8 *)"63", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"01", (u8 *)"63", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"02", (u8 *)"63", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"02", (u8 *)"63", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"02", (u8 *)"63", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"03", (u8 *)"26", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"03", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"03", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"04", (u8 *)"26", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"04", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"04", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"05", (u8 *)"26", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"05", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"05", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"06", (u8 *)"32", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"06", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"06", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"07", (u8 *)"32", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"07", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"07", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"08", (u8 *)"32", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"08", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"08", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"09", (u8 *)"26", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"09", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"09", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"10", (u8 *)"26", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"10", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"10", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"11", (u8 *)"26", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"11", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"11", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"12", (u8 *)"63", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"12", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"12", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"13", (u8 *)"63", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"13", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"13", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"14", (u8 *)"63", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"14", (u8 *)"63", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"14", (u8 *)"63", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"01", (u8 *)"63", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"01", (u8 *)"63", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"01", (u8 *)"63", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"02", (u8 *)"63", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"02", (u8 *)"63", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"02", (u8 *)"63", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"03", (u8 *)"30", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"03", (u8 *)"30", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"03", (u8 *)"30", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"04", (u8 *)"32", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"04", (u8 *)"30", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"04", (u8 *)"30", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"05", (u8 *)"32", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"05", (u8 *)"30", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"05", (u8 *)"30", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"06", (u8 *)"32", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"06", (u8 *)"30", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"06", (u8 *)"30", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"07", (u8 *)"32", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"07", (u8 *)"30", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"07", (u8 *)"30", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"08", (u8 *)"32", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"08", (u8 *)"30", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"08", (u8 *)"30", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"09", (u8 *)"32", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"09", (u8 *)"30", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"09", (u8 *)"30", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"10", (u8 *)"32", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"10", (u8 *)"30", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"10", (u8 *)"30", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"11", (u8 *)"30", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"11", (u8 *)"30", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"11", (u8 *)"30", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"12", (u8 *)"63", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"12", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"12", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"13", (u8 *)"63", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"13", (u8 *)"32", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"13", (u8 *)"32", (u8 *)"FCC", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"14", (u8 *)"63", (u8 *)"ETSI", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"14", (u8 *)"63", (u8 *)"MKK", (u8 *)"2.4G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"14", (u8 *)"63", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"36", (u8 *)"32", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"36", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"36", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"40", (u8 *)"32", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"40", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"40", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"44", (u8 *)"32", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"44", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"44", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"48", (u8 *)"32", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"48", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"48", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"52", (u8 *)"32", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"52", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"52", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"56", (u8 *)"32", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"56", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"56", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"60", (u8 *)"32", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"60", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"60", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"64", (u8 *)"32", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"64", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"64", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"100", (u8 *)"32", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"100", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"100", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"104", (u8 *)"32", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"104", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"104", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"108", (u8 *)"32", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"108", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"108", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"112", (u8 *)"32", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"112", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"112", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"116", (u8 *)"32", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"116", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"116", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"120", (u8 *)"32", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"120", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"120", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"124", (u8 *)"32", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"124", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"124", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"128", (u8 *)"32", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"128", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"128", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"132", (u8 *)"32", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"132", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"132", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"136", (u8 *)"32", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"136", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"136", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"140", (u8 *)"32", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"140", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"140", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"149", (u8 *)"32", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"149", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"149", (u8 *)"63", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"153", (u8 *)"32", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"153", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"153", (u8 *)"63", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"157", (u8 *)"32", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"157", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"157", (u8 *)"63", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"161", (u8 *)"32", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"161", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"161", (u8 *)"63", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"165", (u8 *)"32", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"165", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"OFDM", (u8 *)"1T", (u8 *)"165", (u8 *)"63", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"36", (u8 *)"32", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"36", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"36", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"40", (u8 *)"32", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"40", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"40", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"44", (u8 *)"32", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"44", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"44", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"48", (u8 *)"32", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"48", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"48", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"52", (u8 *)"32", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"52", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"52", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"56", (u8 *)"32", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"56", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"56", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"60", (u8 *)"32", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"60", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"60", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"64", (u8 *)"32", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"64", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"64", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"100", (u8 *)"32", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"100", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"100", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"104", (u8 *)"32", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"104", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"104", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"108", (u8 *)"32", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"108", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"108", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"112", (u8 *)"32", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"112", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"112", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"116", (u8 *)"32", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"116", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"116", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"120", (u8 *)"32", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"120", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"120", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"124", (u8 *)"32", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"124", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"124", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"128", (u8 *)"32", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"128", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"128", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"132", (u8 *)"32", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"132", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"132", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"136", (u8 *)"32", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"136", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"136", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"140", (u8 *)"32", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"140", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"140", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"149", (u8 *)"32", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"149", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"149", (u8 *)"63", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"153", (u8 *)"32", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"153", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"153", (u8 *)"63", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"157", (u8 *)"32", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"157", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"157", (u8 *)"63", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"161", (u8 *)"32", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"161", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"161", (u8 *)"63", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"165", (u8 *)"32", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"165", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"1T", (u8 *)"165", (u8 *)"63", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"36", (u8 *)"28", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"36", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"36", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"40", (u8 *)"28", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"40", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"40", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"44", (u8 *)"28", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"44", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"44", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"48", (u8 *)"28", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"48", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"48", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"52", (u8 *)"34", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"52", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"52", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"56", (u8 *)"32", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"56", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"56", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"60", (u8 *)"30", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"60", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"60", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"64", (u8 *)"26", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"64", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"64", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"100", (u8 *)"28", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"100", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"100", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"104", (u8 *)"28", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"104", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"104", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"108", (u8 *)"30", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"108", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"108", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"112", (u8 *)"32", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"112", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"112", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"116", (u8 *)"32", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"116", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"116", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"120", (u8 *)"34", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"120", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"120", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"124", (u8 *)"32", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"124", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"124", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"128", (u8 *)"30", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"128", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"128", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"132", (u8 *)"28", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"132", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"132", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"136", (u8 *)"28", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"136", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"136", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"140", (u8 *)"26", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"140", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"140", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"149", (u8 *)"34", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"149", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"149", (u8 *)"63", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"153", (u8 *)"34", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"153", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"153", (u8 *)"63", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"157", (u8 *)"34", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"157", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"157", (u8 *)"63", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"161", (u8 *)"34", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"161", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"161", (u8 *)"63", (u8 *)"FCC", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"165", (u8 *)"34", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"165", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"20M", (u8 *)"HT", (u8 *)"2T", (u8 *)"165", (u8 *)"63", (u8 *)"FCC", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"38", (u8 *)"26", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"38", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"38", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"46", (u8 *)"32", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"46", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"46", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"54", (u8 *)"32", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"54", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"54", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"62", (u8 *)"24", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"62", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"62", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"102", (u8 *)"24", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"102", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"102", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"110", (u8 *)"32", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"110", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"110", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"118", (u8 *)"32", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"118", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"118", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"126", (u8 *)"32", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"126", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"126", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"134", (u8 *)"32", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"134", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"134", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"151", (u8 *)"30", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"151", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"151", (u8 *)"63", (u8 *)"FCC", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"159", (u8 *)"32", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"159", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"1T", (u8 *)"159", (u8 *)"63", (u8 *)"FCC", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"38", (u8 *)"28", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"38", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"38", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"46", (u8 *)"28", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"46", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"46", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"54", (u8 *)"30", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"54", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"54", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"62", (u8 *)"30", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"62", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"62", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"102", (u8 *)"26", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"102", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"102", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"110", (u8 *)"30", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"110", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"110", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"118", (u8 *)"34", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"118", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"118", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"126", (u8 *)"32", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"126", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"126", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"134", (u8 *)"30", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"134", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"134", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"151", (u8 *)"34", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"151", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"151", (u8 *)"63", (u8 *)"FCC", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"159", (u8 *)"34", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"159", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"40M", (u8 *)"HT", (u8 *)"2T", (u8 *)"159", (u8 *)"63", (u8 *)"FCC", (u8 *)"5G", (u8 *)"80M", (u8 *)"VHT", (u8 *)"1T", (u8 *)"42", (u8 *)"22", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"80M", (u8 *)"VHT", (u8 *)"1T", (u8 *)"42", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"80M", (u8 *)"VHT", (u8 *)"1T", (u8 *)"42", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"80M", (u8 *)"VHT", (u8 *)"1T", (u8 *)"58", (u8 *)"20", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"80M", (u8 *)"VHT", (u8 *)"1T", (u8 *)"58", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"80M", (u8 *)"VHT", (u8 *)"1T", (u8 *)"58", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"80M", (u8 *)"VHT", (u8 *)"1T", (u8 *)"106", (u8 *)"20", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"80M", (u8 *)"VHT", (u8 *)"1T", (u8 *)"106", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"80M", (u8 *)"VHT", (u8 *)"1T", (u8 *)"106", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"80M", (u8 *)"VHT", (u8 *)"1T", (u8 *)"122", (u8 *)"20", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"80M", (u8 *)"VHT", (u8 *)"1T", (u8 *)"122", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"80M", (u8 *)"VHT", (u8 *)"1T", (u8 *)"122", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"80M", (u8 *)"VHT", (u8 *)"1T", (u8 *)"155", (u8 *)"28", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"80M", (u8 *)"VHT", (u8 *)"1T", (u8 *)"155", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"80M", (u8 *)"VHT", (u8 *)"1T", (u8 *)"155", (u8 *)"63", (u8 *)"FCC", (u8 *)"5G", (u8 *)"80M", (u8 *)"VHT", (u8 *)"2T", (u8 *)"42", (u8 *)"28", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"80M", (u8 *)"VHT", (u8 *)"2T", (u8 *)"42", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"80M", (u8 *)"VHT", (u8 *)"2T", (u8 *)"42", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"80M", (u8 *)"VHT", (u8 *)"2T", (u8 *)"58", (u8 *)"26", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"80M", (u8 *)"VHT", (u8 *)"2T", (u8 *)"58", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"80M", (u8 *)"VHT", (u8 *)"2T", (u8 *)"58", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"80M", (u8 *)"VHT", (u8 *)"2T", (u8 *)"106", (u8 *)"28", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"80M", (u8 *)"VHT", (u8 *)"2T", (u8 *)"106", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"80M", (u8 *)"VHT", (u8 *)"2T", (u8 *)"106", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"80M", (u8 *)"VHT", (u8 *)"2T", (u8 *)"122", (u8 *)"32", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"80M", (u8 *)"VHT", (u8 *)"2T", (u8 *)"122", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"80M", (u8 *)"VHT", (u8 *)"2T", (u8 *)"122", (u8 *)"30", (u8 *)"FCC", (u8 *)"5G", (u8 *)"80M", (u8 *)"VHT", (u8 *)"2T", (u8 *)"155", (u8 *)"34", (u8 *)"ETSI", (u8 *)"5G", (u8 *)"80M", (u8 *)"VHT", (u8 *)"2T", (u8 *)"155", (u8 *)"30", (u8 *)"MKK", (u8 *)"5G", (u8 *)"80M", (u8 *)"VHT", (u8 *)"2T", (u8 *)"155", (u8 *)"63"};
#line 3793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/table.c"
u32 RTL8821AE_TXPWR_LMT_ARRAY_LEN = 3948U;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/jump_label.h"
__inline static bool arch_static_branch(struct static_key *key, bool branch)
{
  #line 27 
  ldv_inline_asm();
  #line 28 
  ldv_inline_asm();
  #line 34 
  return (_Bool)0;
  #line 35 
  l_yes: 
         #line 35 
  ;
  #line 36 
  return (_Bool)1;
}

#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
#line 56 
void __dynamic_pr_debug(struct _ddebug *, char * , ...);
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/percpu.h"
#line 88 
void __bad_percpu_size(void);
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/preempt.h"
__inline static void __preempt_count_add(int val)
{
  #line 79 
  int tmp;
  #line 79 
  if (0 != 0 && (val == 1 || val == -1)) 
                                         #line 79 
                                         tmp = val; else 
                                                         #line 79 
                                                         tmp = 0;
  #line 79 
  int pao_ID__ = tmp;
  #line 79 
  switch (4UL) {
    #line 79 
    case (unsigned long)1: 
                           #line 79 
    ;
    #line 79 
    if (pao_ID__ == 1) 
                       #line 81 
                       ldv_inline_asm();
    else 
      #line 79 
      if (pao_ID__ == -1) 
                          #line 81 
                          ldv_inline_asm(); else 
                                                 #line 84 
                                                 ldv_inline_asm();
    #line 79 
    break;
    #line 79 
    case (unsigned long)2: 
                           #line 79 
    ;
    #line 79 
    if (pao_ID__ == 1) 
                       #line 81 
                       ldv_inline_asm();
    else 
      #line 79 
      if (pao_ID__ == -1) 
                          #line 81 
                          ldv_inline_asm(); else 
                                                 #line 84 
                                                 ldv_inline_asm();
    #line 79 
    break;
    #line 79 
    case (unsigned long)4: 
                           #line 79 
    ;
    #line 79 
    if (pao_ID__ == 1) 
                       #line 81 
                       ldv_inline_asm();
    else 
      #line 79 
      if (pao_ID__ == -1) 
                          #line 81 
                          ldv_inline_asm(); else 
                                                 #line 84 
                                                 ldv_inline_asm();
    #line 79 
    break;
    #line 79 
    case (unsigned long)8: 
                           #line 79 
    ;
    #line 79 
    if (pao_ID__ == 1) 
                       #line 81 
                       ldv_inline_asm();
    else 
      #line 79 
      if (pao_ID__ == -1) 
                          #line 81 
                          ldv_inline_asm(); else 
                                                 #line 84 
                                                 ldv_inline_asm();
    #line 79 
    break;
    #line 79 
    default: 
             #line 79 
    ;
    #line 79 
    __bad_percpu_size();
  }
  #line 82 
  return;
}

#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/preempt.h"
__inline static void __preempt_count_sub(int val)
{
  #line 84 
  int tmp;
  #line 84 
  if (0 != 0 && (val == -1 || val == 1)) 
                                         #line 84 
                                         tmp = - val; else 
                                                           #line 84 
                                                           tmp = 0;
  #line 84 
  int pao_ID__ = tmp;
  #line 84 
  switch (4UL) {
    #line 84 
    case (unsigned long)1: 
                           #line 84 
    ;
    #line 84 
    if (pao_ID__ == 1) 
                       #line 86 
                       ldv_inline_asm();
    else 
      #line 84 
      if (pao_ID__ == -1) 
                          #line 86 
                          ldv_inline_asm(); else 
                                                 #line 89 
                                                 ldv_inline_asm();
    #line 84 
    break;
    #line 84 
    case (unsigned long)2: 
                           #line 84 
    ;
    #line 84 
    if (pao_ID__ == 1) 
                       #line 86 
                       ldv_inline_asm();
    else 
      #line 84 
      if (pao_ID__ == -1) 
                          #line 86 
                          ldv_inline_asm(); else 
                                                 #line 89 
                                                 ldv_inline_asm();
    #line 84 
    break;
    #line 84 
    case (unsigned long)4: 
                           #line 84 
    ;
    #line 84 
    if (pao_ID__ == 1) 
                       #line 86 
                       ldv_inline_asm();
    else 
      #line 84 
      if (pao_ID__ == -1) 
                          #line 86 
                          ldv_inline_asm(); else 
                                                 #line 89 
                                                 ldv_inline_asm();
    #line 84 
    break;
    #line 84 
    case (unsigned long)8: 
                           #line 84 
    ;
    #line 84 
    if (pao_ID__ == 1) 
                       #line 86 
                       ldv_inline_asm();
    else 
      #line 84 
      if (pao_ID__ == -1) 
                          #line 86 
                          ldv_inline_asm(); else 
                                                 #line 89 
                                                 ldv_inline_asm();
    #line 84 
    break;
    #line 84 
    default: 
             #line 84 
    ;
    #line 84 
    __bad_percpu_size();
  }
  #line 87 
  return;
}

#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
#line 348 
void lock_acquire(struct lockdep_map *, unsigned int, int, int, int, struct lockdep_map *, unsigned long);
#line 352 
#line 352 
void lock_release(struct lockdep_map *, unsigned long);
#line 658 
#line 658 
void lockdep_rcu_suspicious(char *, int, char *);
#line 336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_1(spinlock_t *lock)
{
  #line 338 
  _raw_spin_lock(& lock->__anonCompField_spinlock_25.rlock);
  #line 339 
  return;
}

#line 340 
#line 783  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/rtl8821ae.ko/concurrency safety/0/concurrency safety/weaver/dm.i.aux"
static void cif_spin_lock_iqk_lock_of_rtl_locks_0(spinlock_t *lock);
#line 340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 819  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/rtl8821ae.ko/concurrency safety/0/concurrency safety/weaver/dm.i.aux"
static void cif_spin_lock_rf_ps_lock_of_rtl_locks_0(spinlock_t *lock);
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_bh_0(spinlock_t *lock)
{
  #line 343 
  _raw_spin_lock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 344 
  return;
}

#line 345 
#line 801  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/rtl8821ae.ko/concurrency safety/0/concurrency safety/weaver/dm.i.aux"
static void cif_spin_lock_bh_entry_list_lock_of_rtl_locks(spinlock_t *lock);
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_1(spinlock_t *lock)
{
  #line 378 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_25.rlock);
  #line 379 
  return;
}

#line 380 
#line 792  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/rtl8821ae.ko/concurrency safety/0/concurrency safety/weaver/dm.i.aux"
static void cif_spin_unlock_iqk_lock_of_rtl_locks_0(spinlock_t *lock);
#line 380  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 828  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/rtl8821ae.ko/concurrency safety/0/concurrency safety/weaver/dm.i.aux"
static void cif_spin_unlock_rf_ps_lock_of_rtl_locks_0(spinlock_t *lock);
#line 381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_bh_0(spinlock_t *lock)
{
  #line 383 
  _raw_spin_unlock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 384 
  return;
}

#line 385 
#line 810  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/rtl8821ae.ko/concurrency safety/0/concurrency safety/weaver/dm.i.aux"
static void cif_spin_unlock_bh_entry_list_lock_of_rtl_locks(spinlock_t *lock);
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void __rcu_read_lock(void)
{
  #line 59 
  __preempt_count_add(1);
  #line 60 
  ldv_inline_asm();
  #line 62 
  return;
}

#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void __rcu_read_unlock(void)
{
  #line 66 
  ldv_inline_asm();
  #line 64 
  __preempt_count_sub(1);
  #line 66 
  return;
}

#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcutree.h"
#line 56 
bool rcu_is_watching(void);
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void rcu_lock_acquire(struct lockdep_map *map)
{
  #line 208 
  __here_0: 
            #line 208 
  ;
  #line 208 
  ;
  #line 208 
  lock_acquire(map,0U,0,2,0,(struct lockdep_map *)0,(unsigned long)((void *)0));
  #line 210 
  return;
}

#line 211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void rcu_lock_release(struct lockdep_map *map)
{
  #line 213 
  __here_0: 
            #line 213 
  ;
  #line 213 
  ;
  #line 213 
  lock_release(map,(unsigned long)((void *)0));
  #line 215 
  return;
}

#line 216 
#line 216 
extern struct lockdep_map rcu_lock_map;
#line 220 
#line 220 
int debug_lockdep_rcu_enabled(void);
#line 613  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void rcu_read_lock(void)
{
  #line 615 
  __rcu_read_lock();
  #line 617 
  rcu_lock_acquire(& rcu_lock_map);
  {
    #line 618 
    bool __warned;
    #line 618 
    if (debug_lockdep_rcu_enabled() != 0) 
      #line 618 
      if (! __warned) {
        #line 618 
        if (! rcu_is_watching()) {
          #line 618 
          __warned = (_Bool)1;
          #line 618 
          lockdep_rcu_suspicious((char *)"./include/linux/rcupdate.h",618,(char *)"rcu_read_lock() used illegally while idle");
        }
      }
  }
  #line 621 
  return;
}

#line 665  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void rcu_read_unlock(void)
{
  {
    #line 667 
    bool __warned;
    #line 667 
    if (debug_lockdep_rcu_enabled() != 0) 
      #line 667 
      if (! __warned) {
        #line 667 
        if (! rcu_is_watching()) {
          #line 667 
          __warned = (_Bool)1;
          #line 667 
          lockdep_rcu_suspicious((char *)"./include/linux/rcupdate.h",667,(char *)"rcu_read_unlock() used illegally while idle");
        }
      }
  }
  #line 670 
  __rcu_read_unlock();
  #line 671 
  rcu_lock_release(& rcu_lock_map);
  #line 672 
  return;
}

#line 5452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
#line 5452 
struct ieee80211_sta *ieee80211_find_sta(struct ieee80211_vif *, u8 *);
#line 3225  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/wifi.h"
__inline static struct ieee80211_sta *rtl_find_sta(struct ieee80211_hw *hw, u8 *mac_addr)
{
  #line 3228 
  struct rtl_mac *mac = & ((struct rtl_priv *)hw->priv)->mac80211;
  #line 3230 
  return ieee80211_find_sta(mac->vif,mac_addr);
}

#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/core.h"
#line 62 
void rtl_dm_diginit(struct ieee80211_hw *, u32);
#line 269  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/dm.h"
#line 2909  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/dm.c"
void rtl8821ae_dm_watchdog(struct ieee80211_hw *hw);
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/dm.h"
#line 2493  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/dm.c"
void rtl8821ae_dm_check_txpower_tracking_thermalmeter(struct ieee80211_hw *hw);
#line 273  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/dm.h"
#line 510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/dm.c"
void rtl8821ae_dm_init_rate_adaptive_mask(struct ieee80211_hw *hw);
#line 279  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/dm.h"
#line 468  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/dm.c"
void rtl8821ae_dm_initialize_txpower_tracking_thermalmeter(struct ieee80211_hw *hw);
#line 280  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/dm.h"
#line 1324  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/dm.c"
void rtl8812ae_dm_txpwr_track_set_pwr(struct ieee80211_hw *hw, enum pwr_track_control_method method, u8 rf_path, u8 channel_mapped_index);
#line 284  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/dm.h"
#line 2014  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/dm.c"
void rtl8821ae_dm_txpwr_track_set_pwr(struct ieee80211_hw *hw, enum pwr_track_control_method method, u8 rf_path, u8 channel_mapped_index);
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/dm.h"
#line 1596  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/dm.c"
void rtl8812ae_dm_txpower_tracking_callback_thermalmeter(struct ieee80211_hw *hw);
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/dm.h"
#line 2176  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/dm.c"
void rtl8821ae_dm_txpower_tracking_callback_thermalmeter(struct ieee80211_hw *hw);
#line 147  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/trx.h"
__inline static void set_tx_desc_tx_ant(__le32 *__pdesc, u32 __val)
{
  #line 149 
  le32p_replace_bits(__pdesc + 5U,__val,251658240U);
  #line 150 
  return;
}

#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/dm.c"
static u32 txscaling_tbl[37U] = {129U, 136U, 144U, 153U, 162U, 172U, 182U, 192U, 204U, 216U, 229U, 242U, 257U, 272U, 288U, 305U, 323U, 342U, 362U, 384U, 407U, 431U, 456U, 483U, 512U, 542U, 574U, 609U, 645U, 683U, 723U, 766U, 811U, 860U, 910U, 964U, 1022U};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/dm.c"
static u32 rtl8821ae_txscaling_table[37U] = {129U, 136U, 144U, 153U, 162U, 172U, 182U, 192U, 204U, 216U, 229U, 242U, 257U, 272U, 288U, 305U, 323U, 342U, 362U, 384U, 407U, 431U, 456U, 483U, 512U, 542U, 574U, 609U, 645U, 683U, 723U, 766U, 811U, 860U, 910U, 964U, 1022U};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/dm.c"
static u32 edca_setting_dl[10U] = {42063U, 6202447U, 6177570U, 6202411U, 42063U, 42544U, 6202928U, 6202411U};
#line 225  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/dm.c"
static u32 edca_setting_ul[10U] = {6177570U, 42063U, 6202447U, 6202155U, 6202402U, 6202146U, 4105264U, 6202447U};
#line 236  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/dm.c"
static u8 rtl8818e_delta_swing_table_idx_24gb_p[30U] = {[4] = (unsigned char)1U, (unsigned char)1U, (unsigned char)2U, (unsigned char)2U, (unsigned char)3U, (unsigned char)3U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)5U, (unsigned char)5U, (unsigned char)7U, (unsigned char)7U, (unsigned char)8U, (unsigned char)8U, (unsigned char)8U, (unsigned char)9U, (unsigned char)9U, (unsigned char)9U, (unsigned char)9U, (unsigned char)9U};
#line 240  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/dm.c"
static u8 rtl8818e_delta_swing_table_idx_24gb_n[30U] = {[3] = (unsigned char)2U, (unsigned char)2U, (unsigned char)3U, (unsigned char)3U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)5U, (unsigned char)5U, (unsigned char)6U, (unsigned char)6U, (unsigned char)7U, (unsigned char)7U, (unsigned char)7U, (unsigned char)7U, (unsigned char)8U, (unsigned char)8U, (unsigned char)9U, (unsigned char)9U, (unsigned char)10U, (unsigned char)10U, (unsigned char)10U, (unsigned char)11U, (unsigned char)11U, (unsigned char)11U, (unsigned char)11U};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/dm.c"
static u8 rtl8812ae_delta_swing_table_idx_24gb_n[30U] = {[1] = (unsigned char)1U, (unsigned char)1U, (unsigned char)1U, (unsigned char)2U, (unsigned char)2U, (unsigned char)2U, (unsigned char)3U, (unsigned char)3U, (unsigned char)3U, (unsigned char)4U, (unsigned char)4U, (unsigned char)5U, (unsigned char)5U, (unsigned char)5U, (unsigned char)6U, (unsigned char)6U, (unsigned char)6U, (unsigned char)7U, (unsigned char)8U, (unsigned char)9U, (unsigned char)9U, (unsigned char)9U, (unsigned char)9U, (unsigned char)10U, (unsigned char)10U, (unsigned char)10U, (unsigned char)10U, (unsigned char)11U, (unsigned char)11U};
#line 248  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/dm.c"
static u8 rtl8812ae_delta_swing_table_idx_24gb_p[30U] = {[2] = (unsigned char)1U, (unsigned char)1U, (unsigned char)2U, (unsigned char)2U, (unsigned char)2U, (unsigned char)2U, (unsigned char)3U, (unsigned char)3U, (unsigned char)3U, (unsigned char)4U, (unsigned char)4U, (unsigned char)5U, (unsigned char)5U, (unsigned char)6U, (unsigned char)6U, (unsigned char)6U, (unsigned char)7U, (unsigned char)7U, (unsigned char)7U, (unsigned char)8U, (unsigned char)8U, (unsigned char)8U, (unsigned char)9U, (unsigned char)9U, (unsigned char)9U, (unsigned char)9U, (unsigned char)9U, (unsigned char)9U};
#line 252  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/dm.c"
static u8 rtl8812ae_delta_swing_table_idx_24ga_n[30U] = {[1] = (unsigned char)1U, (unsigned char)1U, (unsigned char)1U, (unsigned char)2U, (unsigned char)2U, (unsigned char)2U, (unsigned char)3U, (unsigned char)3U, (unsigned char)3U, (unsigned char)4U, (unsigned char)4U, (unsigned char)5U, (unsigned char)5U, (unsigned char)5U, (unsigned char)6U, (unsigned char)6U, (unsigned char)6U, (unsigned char)7U, (unsigned char)8U, (unsigned char)8U, (unsigned char)9U, (unsigned char)9U, (unsigned char)9U, (unsigned char)10U, (unsigned char)10U, (unsigned char)10U, (unsigned char)10U, (unsigned char)11U, (unsigned char)11U};
#line 256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/dm.c"
static u8 rtl8812ae_delta_swing_table_idx_24ga_p[30U] = {[2] = (unsigned char)1U, (unsigned char)1U, (unsigned char)2U, (unsigned char)2U, (unsigned char)2U, (unsigned char)2U, (unsigned char)3U, (unsigned char)3U, (unsigned char)3U, (unsigned char)4U, (unsigned char)4U, (unsigned char)5U, (unsigned char)5U, (unsigned char)6U, (unsigned char)6U, (unsigned char)6U, (unsigned char)7U, (unsigned char)7U, (unsigned char)7U, (unsigned char)8U, (unsigned char)8U, (unsigned char)8U, (unsigned char)9U, (unsigned char)9U, (unsigned char)9U, (unsigned char)9U, (unsigned char)9U, (unsigned char)9U};
#line 260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/dm.c"
static u8 rtl8812ae_delta_swing_table_idx_24gcckb_n[30U] = {[1] = (unsigned char)1U, (unsigned char)1U, (unsigned char)1U, (unsigned char)2U, (unsigned char)2U, (unsigned char)2U, (unsigned char)3U, (unsigned char)3U, (unsigned char)3U, (unsigned char)4U, (unsigned char)4U, (unsigned char)5U, (unsigned char)5U, (unsigned char)5U, (unsigned char)6U, (unsigned char)6U, (unsigned char)6U, (unsigned char)7U, (unsigned char)8U, (unsigned char)9U, (unsigned char)9U, (unsigned char)9U, (unsigned char)9U, (unsigned char)10U, (unsigned char)10U, (unsigned char)10U, (unsigned char)10U, (unsigned char)11U, (unsigned char)11U};
#line 264  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/dm.c"
static u8 rtl8812ae_delta_swing_table_idx_24gcckb_p[30U] = {[2] = (unsigned char)1U, (unsigned char)1U, (unsigned char)2U, (unsigned char)2U, (unsigned char)2U, (unsigned char)2U, (unsigned char)3U, (unsigned char)3U, (unsigned char)3U, (unsigned char)4U, (unsigned char)4U, (unsigned char)5U, (unsigned char)5U, (unsigned char)6U, (unsigned char)6U, (unsigned char)6U, (unsigned char)7U, (unsigned char)7U, (unsigned char)7U, (unsigned char)8U, (unsigned char)8U, (unsigned char)8U, (unsigned char)9U, (unsigned char)9U, (unsigned char)9U, (unsigned char)9U, (unsigned char)9U, (unsigned char)9U};
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/dm.c"
static u8 rtl8812ae_delta_swing_table_idx_24gccka_n[30U] = {[1] = (unsigned char)1U, (unsigned char)1U, (unsigned char)1U, (unsigned char)2U, (unsigned char)2U, (unsigned char)2U, (unsigned char)3U, (unsigned char)3U, (unsigned char)3U, (unsigned char)4U, (unsigned char)4U, (unsigned char)5U, (unsigned char)5U, (unsigned char)5U, (unsigned char)6U, (unsigned char)6U, (unsigned char)6U, (unsigned char)7U, (unsigned char)8U, (unsigned char)8U, (unsigned char)9U, (unsigned char)9U, (unsigned char)9U, (unsigned char)10U, (unsigned char)10U, (unsigned char)10U, (unsigned char)10U, (unsigned char)11U, (unsigned char)11U};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/dm.c"
static u8 rtl8812ae_delta_swing_table_idx_24gccka_p[30U] = {[2] = (unsigned char)1U, (unsigned char)1U, (unsigned char)2U, (unsigned char)2U, (unsigned char)2U, (unsigned char)2U, (unsigned char)3U, (unsigned char)3U, (unsigned char)3U, (unsigned char)4U, (unsigned char)4U, (unsigned char)5U, (unsigned char)5U, (unsigned char)6U, (unsigned char)6U, (unsigned char)6U, (unsigned char)7U, (unsigned char)7U, (unsigned char)7U, (unsigned char)8U, (unsigned char)8U, (unsigned char)8U, (unsigned char)9U, (unsigned char)9U, (unsigned char)9U, (unsigned char)9U, (unsigned char)9U, (unsigned char)9U};
#line 276  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/dm.c"
static u8 rtl8812ae_delta_swing_table_idx_5gb_n[3U][30U] = {{[1] = (unsigned char)1U, (unsigned char)1U, (unsigned char)2U, (unsigned char)2U, (unsigned char)2U, (unsigned char)3U, (unsigned char)3U, (unsigned char)4U, (unsigned char)4U, (unsigned char)5U, (unsigned char)5U, (unsigned char)6U, (unsigned char)6U, (unsigned char)6U, (unsigned char)7U, (unsigned char)7U, (unsigned char)7U, (unsigned char)8U, (unsigned char)8U, (unsigned char)9U, (unsigned char)9U, (unsigned char)9U, (unsigned char)10U, (unsigned char)10U, (unsigned char)11U, (unsigned char)11U, (unsigned char)12U, (unsigned char)12U, (unsigned char)13U}, {[1] = (unsigned char)1U, (unsigned char)1U, (unsigned char)2U, (unsigned char)2U, (unsigned char)2U, (unsigned char)3U, (unsigned char)3U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)5U, (unsigned char)5U, (unsigned char)6U, (unsigned char)6U, (unsigned char)7U, (unsigned char)7U, (unsigned char)8U, (unsigned char)8U, (unsigned char)9U, (unsigned char)9U, (unsigned char)10U, (unsigned char)10U, (unsigned char)11U, (unsigned char)11U, (unsigned char)12U, (unsigned char)12U, (unsigned char)12U, (unsigned char)13U, (unsigned char)13U}, {[1] = (unsigned char)1U, (unsigned char)1U, (unsigned char)2U, (unsigned char)3U, (unsigned char)3U, (unsigned char)4U, (unsigned char)4U, (unsigned char)5U, (unsigned char)6U, (unsigned char)6U, (unsigned char)7U, (unsigned char)8U, (unsigned char)9U, (unsigned char)10U, (unsigned char)11U, (unsigned char)12U, (unsigned char)12U, (unsigned char)13U, (unsigned char)14U, (unsigned char)14U, (unsigned char)14U, (unsigned char)15U, (unsigned char)16U, (unsigned char)17U, (unsigned char)17U, (unsigned char)17U, (unsigned char)18U, (unsigned char)18U, (unsigned char)18U}};
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/dm.c"
static u8 rtl8812ae_delta_swing_table_idx_5gb_p[3U][30U] = {{[1] = (unsigned char)1U, (unsigned char)1U, (unsigned char)2U, (unsigned char)2U, (unsigned char)3U, (unsigned char)3U, (unsigned char)4U, (unsigned char)4U, (unsigned char)5U, (unsigned char)5U, (unsigned char)6U, (unsigned char)6U, (unsigned char)6U, (unsigned char)7U, (unsigned char)7U, (unsigned char)8U, (unsigned char)8U, (unsigned char)9U, (unsigned char)9U, (unsigned char)10U, (unsigned char)10U, (unsigned char)11U, (unsigned char)11U, (unsigned char)11U, (unsigned char)11U, (unsigned char)11U, (unsigned char)11U, (unsigned char)11U, (unsigned char)11U}, {[1] = (unsigned char)1U, (unsigned char)1U, (unsigned char)2U, (unsigned char)2U, (unsigned char)3U, (unsigned char)3U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)5U, (unsigned char)5U, (unsigned char)6U, (unsigned char)6U, (unsigned char)7U, (unsigned char)7U, (unsigned char)8U, (unsigned char)8U, (unsigned char)9U, (unsigned char)9U, (unsigned char)10U, (unsigned char)10U, (unsigned char)11U, (unsigned char)11U, (unsigned char)11U, (unsigned char)11U, (unsigned char)11U, (unsigned char)11U, (unsigned char)11U, (unsigned char)11U}, {[1] = (unsigned char)1U, (unsigned char)1U, (unsigned char)2U, (unsigned char)2U, (unsigned char)3U, (unsigned char)3U, (unsigned char)4U, (unsigned char)4U, (unsigned char)5U, (unsigned char)5U, (unsigned char)6U, (unsigned char)7U, (unsigned char)7U, (unsigned char)8U, (unsigned char)8U, (unsigned char)9U, (unsigned char)9U, (unsigned char)10U, (unsigned char)10U, (unsigned char)11U, (unsigned char)11U, (unsigned char)11U, (unsigned char)11U, (unsigned char)11U, (unsigned char)11U, (unsigned char)11U, (unsigned char)11U, (unsigned char)11U, (unsigned char)11U}};
#line 294  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/dm.c"
static u8 rtl8812ae_delta_swing_table_idx_5ga_n[3U][30U] = {{[1] = (unsigned char)1U, (unsigned char)1U, (unsigned char)2U, (unsigned char)2U, (unsigned char)3U, (unsigned char)3U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)5U, (unsigned char)5U, (unsigned char)6U, (unsigned char)6U, (unsigned char)7U, (unsigned char)7U, (unsigned char)8U, (unsigned char)8U, (unsigned char)9U, (unsigned char)9U, (unsigned char)10U, (unsigned char)10U, (unsigned char)11U, (unsigned char)11U, (unsigned char)12U, (unsigned char)12U, (unsigned char)12U, (unsigned char)13U, (unsigned char)13U, (unsigned char)13U}, {[1] = (unsigned char)1U, (unsigned char)1U, (unsigned char)2U, (unsigned char)2U, (unsigned char)2U, (unsigned char)3U, (unsigned char)3U, (unsigned char)4U, (unsigned char)4U, (unsigned char)5U, (unsigned char)5U, (unsigned char)6U, (unsigned char)6U, (unsigned char)7U, (unsigned char)8U, (unsigned char)9U, (unsigned char)9U, (unsigned char)10U, (unsigned char)10U, (unsigned char)11U, (unsigned char)11U, (unsigned char)11U, (unsigned char)12U, (unsigned char)12U, (unsigned char)12U, (unsigned char)12U, (unsigned char)12U, (unsigned char)13U, (unsigned char)13U}, {[1] = (unsigned char)1U, (unsigned char)1U, (unsigned char)2U, (unsigned char)2U, (unsigned char)3U, (unsigned char)3U, (unsigned char)4U, (unsigned char)5U, (unsigned char)6U, (unsigned char)7U, (unsigned char)8U, (unsigned char)8U, (unsigned char)9U, (unsigned char)10U, (unsigned char)11U, (unsigned char)12U, (unsigned char)13U, (unsigned char)14U, (unsigned char)14U, (unsigned char)15U, (unsigned char)15U, (unsigned char)15U, (unsigned char)16U, (unsigned char)16U, (unsigned char)16U, (unsigned char)17U, (unsigned char)17U, (unsigned char)18U, (unsigned char)18U}};
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/dm.c"
static u8 rtl8812ae_delta_swing_table_idx_5ga_p[3U][30U] = {{[1] = (unsigned char)1U, (unsigned char)1U, (unsigned char)2U, (unsigned char)2U, (unsigned char)3U, (unsigned char)3U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)5U, (unsigned char)5U, (unsigned char)6U, (unsigned char)7U, (unsigned char)7U, (unsigned char)8U, (unsigned char)8U, (unsigned char)9U, (unsigned char)9U, (unsigned char)10U, (unsigned char)10U, (unsigned char)11U, (unsigned char)11U, (unsigned char)11U, (unsigned char)11U, (unsigned char)11U, (unsigned char)11U, (unsigned char)11U, (unsigned char)11U}, {[1] = (unsigned char)1U, (unsigned char)1U, (unsigned char)2U, (unsigned char)2U, (unsigned char)3U, (unsigned char)3U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)5U, (unsigned char)5U, (unsigned char)6U, (unsigned char)6U, (unsigned char)7U, (unsigned char)7U, (unsigned char)8U, (unsigned char)9U, (unsigned char)9U, (unsigned char)10U, (unsigned char)11U, (unsigned char)11U, (unsigned char)11U, (unsigned char)11U, (unsigned char)11U, (unsigned char)11U, (unsigned char)11U, (unsigned char)11U, (unsigned char)11U, (unsigned char)11U}, {[1] = (unsigned char)1U, (unsigned char)1U, (unsigned char)2U, (unsigned char)3U, (unsigned char)3U, (unsigned char)4U, (unsigned char)4U, (unsigned char)5U, (unsigned char)6U, (unsigned char)6U, (unsigned char)7U, (unsigned char)7U, (unsigned char)8U, (unsigned char)9U, (unsigned char)9U, (unsigned char)10U, (unsigned char)10U, (unsigned char)11U, (unsigned char)11U, (unsigned char)11U, (unsigned char)11U, (unsigned char)11U, (unsigned char)11U, (unsigned char)11U, (unsigned char)11U, (unsigned char)11U, (unsigned char)11U, (unsigned char)11U, (unsigned char)11U}};
#line 312  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/dm.c"
static u8 rtl8821ae_delta_swing_table_idx_24gb_n[30U] = {[1] = (unsigned char)1U, (unsigned char)1U, (unsigned char)2U, (unsigned char)2U, (unsigned char)2U, (unsigned char)3U, (unsigned char)3U, (unsigned char)3U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)5U, (unsigned char)5U, (unsigned char)5U, (unsigned char)6U, (unsigned char)6U, (unsigned char)6U, (unsigned char)7U, (unsigned char)7U, (unsigned char)7U, (unsigned char)8U, (unsigned char)8U, (unsigned char)8U, (unsigned char)9U, (unsigned char)9U, (unsigned char)9U, (unsigned char)10U, (unsigned char)10U, (unsigned char)10U};
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/dm.c"
static u8 rtl8821ae_delta_swing_table_idx_24gb_p[30U] = {[2] = (unsigned char)1U, (unsigned char)1U, (unsigned char)2U, (unsigned char)2U, (unsigned char)3U, (unsigned char)3U, (unsigned char)4U, (unsigned char)4U, (unsigned char)5U, (unsigned char)5U, (unsigned char)6U, (unsigned char)6U, (unsigned char)7U, (unsigned char)7U, (unsigned char)8U, (unsigned char)8U, (unsigned char)9U, (unsigned char)9U, (unsigned char)10U, (unsigned char)10U, (unsigned char)11U, (unsigned char)11U, (unsigned char)12U, (unsigned char)12U, (unsigned char)12U, (unsigned char)12U, (unsigned char)12U, (unsigned char)12U};
#line 320  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/dm.c"
static u8 rtl8821ae_delta_swing_table_idx_24ga_n[30U] = {[1] = (unsigned char)1U, (unsigned char)1U, (unsigned char)2U, (unsigned char)2U, (unsigned char)2U, (unsigned char)3U, (unsigned char)3U, (unsigned char)3U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)5U, (unsigned char)5U, (unsigned char)5U, (unsigned char)6U, (unsigned char)6U, (unsigned char)6U, (unsigned char)7U, (unsigned char)7U, (unsigned char)7U, (unsigned char)8U, (unsigned char)8U, (unsigned char)8U, (unsigned char)9U, (unsigned char)9U, (unsigned char)9U, (unsigned char)10U, (unsigned char)10U, (unsigned char)10U};
#line 324  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/dm.c"
static u8 rtl8821ae_delta_swing_table_idx_24ga_p[30U] = {[2] = (unsigned char)1U, (unsigned char)1U, (unsigned char)2U, (unsigned char)2U, (unsigned char)3U, (unsigned char)3U, (unsigned char)4U, (unsigned char)4U, (unsigned char)5U, (unsigned char)5U, (unsigned char)6U, (unsigned char)6U, (unsigned char)7U, (unsigned char)7U, (unsigned char)8U, (unsigned char)8U, (unsigned char)9U, (unsigned char)9U, (unsigned char)10U, (unsigned char)10U, (unsigned char)11U, (unsigned char)11U, (unsigned char)12U, (unsigned char)12U, (unsigned char)12U, (unsigned char)12U, (unsigned char)12U, (unsigned char)12U};
#line 328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/dm.c"
static u8 rtl8821ae_delta_swing_table_idx_24gcckb_n[30U] = {[1] = (unsigned char)1U, (unsigned char)1U, (unsigned char)2U, (unsigned char)2U, (unsigned char)2U, (unsigned char)3U, (unsigned char)3U, (unsigned char)3U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)5U, (unsigned char)5U, (unsigned char)5U, (unsigned char)6U, (unsigned char)6U, (unsigned char)6U, (unsigned char)7U, (unsigned char)7U, (unsigned char)7U, (unsigned char)8U, (unsigned char)8U, (unsigned char)8U, (unsigned char)9U, (unsigned char)9U, (unsigned char)9U, (unsigned char)10U, (unsigned char)10U, (unsigned char)10U};
#line 332  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/dm.c"
static u8 rtl8821ae_delta_swing_table_idx_24gcckb_p[30U] = {[2] = (unsigned char)1U, (unsigned char)1U, (unsigned char)2U, (unsigned char)2U, (unsigned char)3U, (unsigned char)3U, (unsigned char)4U, (unsigned char)4U, (unsigned char)5U, (unsigned char)5U, (unsigned char)6U, (unsigned char)6U, (unsigned char)7U, (unsigned char)7U, (unsigned char)8U, (unsigned char)8U, (unsigned char)9U, (unsigned char)9U, (unsigned char)10U, (unsigned char)10U, (unsigned char)11U, (unsigned char)11U, (unsigned char)12U, (unsigned char)12U, (unsigned char)12U, (unsigned char)12U, (unsigned char)12U, (unsigned char)12U};
#line 336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/dm.c"
static u8 rtl8821ae_delta_swing_table_idx_24gccka_n[30U] = {[1] = (unsigned char)1U, (unsigned char)1U, (unsigned char)2U, (unsigned char)2U, (unsigned char)2U, (unsigned char)3U, (unsigned char)3U, (unsigned char)3U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)5U, (unsigned char)5U, (unsigned char)5U, (unsigned char)6U, (unsigned char)6U, (unsigned char)6U, (unsigned char)7U, (unsigned char)7U, (unsigned char)7U, (unsigned char)8U, (unsigned char)8U, (unsigned char)8U, (unsigned char)9U, (unsigned char)9U, (unsigned char)9U, (unsigned char)10U, (unsigned char)10U, (unsigned char)10U};
#line 340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/dm.c"
static u8 rtl8821ae_delta_swing_table_idx_24gccka_p[30U] = {[2] = (unsigned char)1U, (unsigned char)1U, (unsigned char)2U, (unsigned char)2U, (unsigned char)3U, (unsigned char)3U, (unsigned char)4U, (unsigned char)4U, (unsigned char)5U, (unsigned char)5U, (unsigned char)6U, (unsigned char)6U, (unsigned char)7U, (unsigned char)7U, (unsigned char)8U, (unsigned char)8U, (unsigned char)9U, (unsigned char)9U, (unsigned char)10U, (unsigned char)10U, (unsigned char)11U, (unsigned char)11U, (unsigned char)12U, (unsigned char)12U, (unsigned char)12U, (unsigned char)12U, (unsigned char)12U, (unsigned char)12U};
#line 344  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/dm.c"
static u8 rtl8821ae_delta_swing_table_idx_5gb_n[3U][30U] = {{[2] = (unsigned char)1U, (unsigned char)2U, (unsigned char)3U, (unsigned char)3U, (unsigned char)4U, (unsigned char)5U, (unsigned char)6U, (unsigned char)6U, (unsigned char)7U, (unsigned char)8U, (unsigned char)9U, (unsigned char)9U, (unsigned char)10U, (unsigned char)11U, (unsigned char)12U, (unsigned char)12U, (unsigned char)13U, (unsigned char)14U, (unsigned char)15U, (unsigned char)15U, (unsigned char)16U, (unsigned char)16U, (unsigned char)16U, (unsigned char)16U, (unsigned char)16U, (unsigned char)16U, (unsigned char)16U, (unsigned char)16U}, {[2] = (unsigned char)1U, (unsigned char)2U, (unsigned char)3U, (unsigned char)3U, (unsigned char)4U, (unsigned char)5U, (unsigned char)6U, (unsigned char)6U, (unsigned char)7U, (unsigned char)8U, (unsigned char)9U, (unsigned char)9U, (unsigned char)10U, (unsigned char)11U, (unsigned char)12U, (unsigned char)12U, (unsigned char)13U, (unsigned char)14U, (unsigned char)15U, (unsigned char)15U, (unsigned char)16U, (unsigned char)16U, (unsigned char)16U, (unsigned char)16U, (unsigned char)16U, (unsigned char)16U, (unsigned char)16U, (unsigned char)16U}, {[2] = (unsigned char)1U, (unsigned char)2U, (unsigned char)3U, (unsigned char)3U, (unsigned char)4U, (unsigned char)5U, (unsigned char)6U, (unsigned char)6U, (unsigned char)7U, (unsigned char)8U, (unsigned char)9U, (unsigned char)9U, (unsigned char)10U, (unsigned char)11U, (unsigned char)12U, (unsigned char)12U, (unsigned char)13U, (unsigned char)14U, (unsigned char)15U, (unsigned char)15U, (unsigned char)16U, (unsigned char)16U, (unsigned char)16U, (unsigned char)16U, (unsigned char)16U, (unsigned char)16U, (unsigned char)16U, (unsigned char)16U}};
#line 353  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/dm.c"
static u8 rtl8821ae_delta_swing_table_idx_5gb_p[3U][30U] = {{[2] = (unsigned char)1U, (unsigned char)2U, (unsigned char)3U, (unsigned char)3U, (unsigned char)4U, (unsigned char)5U, (unsigned char)6U, (unsigned char)6U, (unsigned char)7U, (unsigned char)8U, (unsigned char)9U, (unsigned char)9U, (unsigned char)10U, (unsigned char)11U, (unsigned char)12U, (unsigned char)12U, (unsigned char)13U, (unsigned char)14U, (unsigned char)15U, (unsigned char)15U, (unsigned char)16U, (unsigned char)16U, (unsigned char)16U, (unsigned char)16U, (unsigned char)16U, (unsigned char)16U, (unsigned char)16U, (unsigned char)16U}, {[2] = (unsigned char)1U, (unsigned char)2U, (unsigned char)3U, (unsigned char)3U, (unsigned char)4U, (unsigned char)5U, (unsigned char)6U, (unsigned char)6U, (unsigned char)7U, (unsigned char)8U, (unsigned char)9U, (unsigned char)9U, (unsigned char)10U, (unsigned char)11U, (unsigned char)12U, (unsigned char)12U, (unsigned char)13U, (unsigned char)14U, (unsigned char)15U, (unsigned char)15U, (unsigned char)16U, (unsigned char)16U, (unsigned char)16U, (unsigned char)16U, (unsigned char)16U, (unsigned char)16U, (unsigned char)16U, (unsigned char)16U}, {[2] = (unsigned char)1U, (unsigned char)2U, (unsigned char)3U, (unsigned char)3U, (unsigned char)4U, (unsigned char)5U, (unsigned char)6U, (unsigned char)6U, (unsigned char)7U, (unsigned char)8U, (unsigned char)9U, (unsigned char)9U, (unsigned char)10U, (unsigned char)11U, (unsigned char)12U, (unsigned char)12U, (unsigned char)13U, (unsigned char)14U, (unsigned char)15U, (unsigned char)15U, (unsigned char)16U, (unsigned char)16U, (unsigned char)16U, (unsigned char)16U, (unsigned char)16U, (unsigned char)16U, (unsigned char)16U, (unsigned char)16U}};
#line 362  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/dm.c"
static u8 rtl8821ae_delta_swing_table_idx_5ga_n[3U][30U] = {{[2] = (unsigned char)1U, (unsigned char)2U, (unsigned char)3U, (unsigned char)3U, (unsigned char)4U, (unsigned char)5U, (unsigned char)6U, (unsigned char)6U, (unsigned char)7U, (unsigned char)8U, (unsigned char)9U, (unsigned char)9U, (unsigned char)10U, (unsigned char)11U, (unsigned char)12U, (unsigned char)12U, (unsigned char)13U, (unsigned char)14U, (unsigned char)15U, (unsigned char)15U, (unsigned char)16U, (unsigned char)16U, (unsigned char)16U, (unsigned char)16U, (unsigned char)16U, (unsigned char)16U, (unsigned char)16U, (unsigned char)16U}, {[2] = (unsigned char)1U, (unsigned char)2U, (unsigned char)3U, (unsigned char)3U, (unsigned char)4U, (unsigned char)5U, (unsigned char)6U, (unsigned char)6U, (unsigned char)7U, (unsigned char)8U, (unsigned char)9U, (unsigned char)9U, (unsigned char)10U, (unsigned char)11U, (unsigned char)12U, (unsigned char)12U, (unsigned char)13U, (unsigned char)14U, (unsigned char)15U, (unsigned char)15U, (unsigned char)16U, (unsigned char)16U, (unsigned char)16U, (unsigned char)16U, (unsigned char)16U, (unsigned char)16U, (unsigned char)16U, (unsigned char)16U}, {[2] = (unsigned char)1U, (unsigned char)2U, (unsigned char)3U, (unsigned char)3U, (unsigned char)4U, (unsigned char)5U, (unsigned char)6U, (unsigned char)6U, (unsigned char)7U, (unsigned char)8U, (unsigned char)9U, (unsigned char)9U, (unsigned char)10U, (unsigned char)11U, (unsigned char)12U, (unsigned char)12U, (unsigned char)13U, (unsigned char)14U, (unsigned char)15U, (unsigned char)15U, (unsigned char)16U, (unsigned char)16U, (unsigned char)16U, (unsigned char)16U, (unsigned char)16U, (unsigned char)16U, (unsigned char)16U, (unsigned char)16U}};
#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/dm.c"
static u8 rtl8821ae_delta_swing_table_idx_5ga_p[3U][30U] = {{[2] = (unsigned char)1U, (unsigned char)2U, (unsigned char)3U, (unsigned char)3U, (unsigned char)4U, (unsigned char)5U, (unsigned char)6U, (unsigned char)6U, (unsigned char)7U, (unsigned char)8U, (unsigned char)9U, (unsigned char)9U, (unsigned char)10U, (unsigned char)11U, (unsigned char)12U, (unsigned char)12U, (unsigned char)13U, (unsigned char)14U, (unsigned char)15U, (unsigned char)15U, (unsigned char)16U, (unsigned char)16U, (unsigned char)16U, (unsigned char)16U, (unsigned char)16U, (unsigned char)16U, (unsigned char)16U, (unsigned char)16U}, {[2] = (unsigned char)1U, (unsigned char)2U, (unsigned char)3U, (unsigned char)3U, (unsigned char)4U, (unsigned char)5U, (unsigned char)6U, (unsigned char)6U, (unsigned char)7U, (unsigned char)8U, (unsigned char)9U, (unsigned char)9U, (unsigned char)10U, (unsigned char)11U, (unsigned char)12U, (unsigned char)12U, (unsigned char)13U, (unsigned char)14U, (unsigned char)15U, (unsigned char)15U, (unsigned char)16U, (unsigned char)16U, (unsigned char)16U, (unsigned char)16U, (unsigned char)16U, (unsigned char)16U, (unsigned char)16U, (unsigned char)16U}, {[2] = (unsigned char)1U, (unsigned char)2U, (unsigned char)3U, (unsigned char)3U, (unsigned char)4U, (unsigned char)5U, (unsigned char)6U, (unsigned char)6U, (unsigned char)7U, (unsigned char)8U, (unsigned char)9U, (unsigned char)9U, (unsigned char)10U, (unsigned char)11U, (unsigned char)12U, (unsigned char)12U, (unsigned char)13U, (unsigned char)14U, (unsigned char)15U, (unsigned char)15U, (unsigned char)16U, (unsigned char)16U, (unsigned char)16U, (unsigned char)16U, (unsigned char)16U, (unsigned char)16U, (unsigned char)16U, (unsigned char)16U}};
#line 380  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/dm.c"
void rtl8821ae_dm_txpower_track_adjust(struct ieee80211_hw *hw, u8 type, u8 *pdirection, u32 *poutwrite_val)
{
  #line 384 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 385 
  struct rtl_dm *rtldm = & ((struct rtl_priv *)hw->priv)->dm;
  #line 386 
  u8 pwr_val = (unsigned char)0U;
  #line 388 
  if ((unsigned int)type == 0U) 
    #line 389 
    if ((int)rtlpriv->dm.swing_idx_ofdm[0] <= (int)rtlpriv->dm.swing_idx_ofdm_base[0]) {
      #line 391 
      *pdirection = (unsigned char)1U;
      #line 392 
      pwr_val = (unsigned char)((int)rtldm->swing_idx_ofdm_base[0] - (int)rtldm->swing_idx_ofdm[0]);
    }
    else {
      #line 395 
      *pdirection = (unsigned char)2U;
      #line 396 
      pwr_val = (unsigned char)((int)rtldm->swing_idx_ofdm[0] - (int)rtldm->swing_idx_ofdm_base[0]);
    }
  else 
    #line 399 
    if ((unsigned int)type == 1U) 
      #line 400 
      if ((int)rtldm->swing_idx_cck <= (int)rtldm->swing_idx_cck_base) {
        #line 401 
        *pdirection = (unsigned char)1U;
        #line 402 
        pwr_val = (unsigned char)((int)rtldm->swing_idx_cck_base - (int)rtldm->swing_idx_cck);
      }
      else {
        #line 405 
        *pdirection = (unsigned char)2U;
        #line 406 
        pwr_val = (unsigned char)((int)rtldm->swing_idx_cck - (int)rtldm->swing_idx_cck_base);
      }
  #line 411 
  if ((unsigned int)pwr_val > 5U && (unsigned int)*pdirection == 1U) 
    #line 412 
    pwr_val = (unsigned char)6U;
  #line 414 
  *poutwrite_val = (unsigned int)((((int)pwr_val | ((int)pwr_val << 8)) | ((int)pwr_val << 16)) | ((int)pwr_val << 24));
  #line 417 
  return;
}

#line 419  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/dm.c"
void rtl8821ae_dm_clear_txpower_tracking_state(struct ieee80211_hw *hw)
{
  #line 421 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 422 
  struct rtl_dm *rtldm = & rtlpriv->dm;
  #line 423 
  struct rtl_efuse *rtlefuse = & rtlpriv->efuse;
  #line 424 
  u8 p = (unsigned char)0U;
  #line 426 
  rtldm->swing_idx_cck_base = rtldm->default_cck_index;
  #line 427 
  rtldm->swing_idx_cck = rtldm->default_cck_index;
  #line 428 
  rtldm->cck_index = (signed char)0;
  #line 430 
  p = (unsigned char)0U;
  #line 430 
  while ((unsigned int)p <= 1U) {
    #line 431 
    rtldm->swing_idx_ofdm_base[(int)p] = rtldm->default_ofdm_index;
    #line 432 
    rtldm->swing_idx_ofdm[(int)p] = rtldm->default_ofdm_index;
    #line 433 
    rtldm->ofdm_index[(int)p] = (signed char)rtldm->default_ofdm_index;
    #line 435 
    rtldm->power_index_offset[(int)p] = (signed char)0;
    #line 436 
    rtldm->delta_power_index[(int)p] = (signed char)0;
    #line 437 
    rtldm->delta_power_index_last[(int)p] = (signed char)0;
    #line 439 
    rtldm->absolute_ofdm_swing_idx[(int)p] = (signed char)0;
    #line 440 
    rtldm->remnant_ofdm_swing_idx[(int)p] = (signed char)0;
    #line 430 
    p = (u8)((int)p + 1);
  }
  #line 443 
  rtldm->modify_txagc_flag_path_a = (_Bool)0;
  #line 445 
  rtldm->modify_txagc_flag_path_b = (_Bool)0;
  #line 446 
  rtldm->remnant_cck_idx = (signed char)0;
  #line 447 
  rtldm->thermalvalue = rtlefuse->eeprom_thermalmeter;
  #line 448 
  rtldm->thermalvalue_iqk = rtlefuse->eeprom_thermalmeter;
  #line 449 
  rtldm->thermalvalue_lck = rtlefuse->eeprom_thermalmeter;
  #line 450 
  return;
}

#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/dm.c"
static u8 rtl8821ae_dm_get_swing_index(struct ieee80211_hw *hw)
{
  #line 456 
  u32 bb_swing;
  #line 454 
  struct rtl_hal *rtlhal = & ((struct rtl_priv *)hw->priv)->rtlhal;
  #line 455 
  u8 i = (unsigned char)0U;
  #line 458 
  bb_swing = phy_get_tx_swing_8812A(hw,(unsigned char)((int)((unsigned char)rtlhal->current_bandtype)),(unsigned char)0);
  #line 461 
  i = (unsigned char)0U;
  #line 461 
  while ((unsigned int)i <= 36U) {
    #line 462 
    if (rtl8821ae_txscaling_table[(int)i] == bb_swing) 
                                                       #line 463 
                                                       break;
    #line 461 
    i = (u8)((int)i + 1);
  }
  #line 465 
  return i;
}

#line 468  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/dm.c"
void rtl8821ae_dm_initialize_txpower_tracking_thermalmeter(struct ieee80211_hw *hw)
{
  #line 471 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 472 
  struct rtl_dm *rtldm = & rtlpriv->dm;
  #line 473 
  struct rtl_efuse *rtlefuse = & rtlpriv->efuse;
  #line 474 
  u8 default_swing_index = (unsigned char)0U;
  #line 475 
  u8 p = (unsigned char)0U;
  #line 477 
  rtlpriv->dm.txpower_track_control = (unsigned char)1U;
  #line 478 
  rtldm->thermalvalue = rtlefuse->eeprom_thermalmeter;
  #line 479 
  rtldm->thermalvalue_iqk = rtlefuse->eeprom_thermalmeter;
  #line 480 
  rtldm->thermalvalue_lck = rtlefuse->eeprom_thermalmeter;
  #line 481 
  default_swing_index = rtl8821ae_dm_get_swing_index(hw);
  #line 483 
  if ((unsigned int)default_swing_index != 37U) 
                                                #line 483 
                                                rtldm->default_ofdm_index = default_swing_index; else 
                                                                    #line 483 
                                                                    rtldm->default_ofdm_index = (unsigned char)24U;
  #line 486 
  rtldm->default_cck_index = (unsigned char)24U;
  #line 488 
  rtldm->swing_idx_cck_base = rtldm->default_cck_index;
  #line 489 
  rtldm->cck_index = (signed char)rtldm->default_cck_index;
  #line 491 
  p = (unsigned char)0U;
  #line 491 
  while ((unsigned int)p <= 3U) {
    #line 492 
    rtldm->swing_idx_ofdm_base[(int)p] = rtldm->default_ofdm_index;
    #line 494 
    rtldm->ofdm_index[(int)p] = (signed char)rtldm->default_ofdm_index;
    #line 495 
    rtldm->delta_power_index[(int)p] = (signed char)0;
    #line 496 
    rtldm->power_index_offset[(int)p] = (signed char)0;
    #line 497 
    rtldm->delta_power_index_last[(int)p] = (signed char)0;
    #line 491 
    p = (u8)((int)p + 1);
  }
  #line 499 
  return;
}

#line 501  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/dm.c"
void rtl8821ae_dm_init_edca_turbo(struct ieee80211_hw *hw)
{
  #line 503 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 505 
  rtlpriv->dm.current_turbo_edca = (_Bool)0;
  #line 506 
  rtlpriv->dm.is_any_nonbepkts = (_Bool)0;
  #line 507 
  rtlpriv->dm.is_cur_rdlstate = (_Bool)0;
  #line 508 
  return;
}

#line 510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/dm.c"
void rtl8821ae_dm_init_rate_adaptive_mask(struct ieee80211_hw *hw)
{
  #line 512 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 513 
  struct rate_adaptive *p_ra = & rtlpriv->ra;
  #line 515 
  p_ra->ratr_state = (unsigned char)0U;
  #line 516 
  p_ra->pre_ratr_state = (unsigned char)0U;
  #line 518 
  rtlpriv->dm.dm_type = (unsigned char)1U;
  #line 519 
  if ((unsigned int)rtlpriv->dm.dm_type == 1U) 
                                               #line 520 
                                               rtlpriv->dm.useramask = (_Bool)1; else 
                                                                    #line 522 
                                                                    rtlpriv->dm.useramask = (_Bool)0;
  #line 524 
  p_ra->high_rssi_thresh_for_ra = 50U;
  #line 525 
  p_ra->low_rssi_thresh_for_ra40m = 20U;
  #line 526 
  return;
}

#line 528  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/dm.c"
static void rtl8821ae_dm_init_dynamic_atc_switch(struct ieee80211_hw *hw)
{
  #line 530 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 532 
  rtlpriv->dm.crystal_cap = (int)rtlpriv->efuse.crystalcap;
  #line 534 
  rtlpriv->dm.atc_status = (_Bool)(rtl_get_bbreg(hw,3372U,2048U) != 0U);
  #line 535 
  rtlpriv->dm.cfo_threshold = (unsigned char)10U;
  #line 536 
  return;
}

#line 538  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/dm.c"
static void rtl8821ae_dm_common_info_self_init(struct ieee80211_hw *hw)
{
  #line 542 
  u8 tmp;
  #line 540 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 541 
  struct rtl_phy *rtlphy = & rtlpriv->phy;
  #line 544 
  rtlphy->cck_high_power = (unsigned char)(rtl_get_bbreg(hw,2052U,65536U) != 0U);
  #line 548 
  tmp = (unsigned char)rtl_get_bbreg(hw,2056U,15U);
  #line 550 
  if (((unsigned long)tmp & 1UL) != 0UL) 
                                         #line 551 
                                         rtlpriv->dm.rfpath_rxenable[0] = (_Bool)1;
  #line 552 
  if (((unsigned long)tmp & 2UL) != 0UL) 
                                         #line 553 
                                         rtlpriv->dm.rfpath_rxenable[1] = (_Bool)1;
  #line 554 
  return;
}

#line 556  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/dm.c"
void rtl8821ae_dm_init(struct ieee80211_hw *hw)
{
  #line 558 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 559 
  struct rtl_phy *rtlphy = & rtlpriv->phy;
  #line 560 
  u32 cur_igvalue = rtl_get_bbreg(hw,3152U,127U);
  #line 562 
  cif_spin_lock_iqk_lock_of_rtl_locks_0(& rtlpriv->locks.iqk_lock);
  #line 563 
  rtlphy->lck_inprogress = (unsigned char)0U;
  #line 564 
  cif_spin_unlock_iqk_lock_of_rtl_locks_0(& rtlpriv->locks.iqk_lock);
  #line 566 
  rtlpriv->dm.dm_type = (unsigned char)1U;
  #line 567 
  rtl8821ae_dm_common_info_self_init(hw);
  #line 568 
  rtl_dm_diginit(hw,cur_igvalue);
  #line 569 
  rtl8821ae_dm_init_rate_adaptive_mask(hw);
  #line 570 
  rtl8821ae_dm_init_edca_turbo(hw);
  #line 571 
  rtl8821ae_dm_initialize_txpower_tracking_thermalmeter(hw);
  #line 572 
  rtl8821ae_dm_init_dynamic_atc_switch(hw);
  #line 573 
  return;
}

#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/dm.c"
static void rtl8821ae_dm_find_minimum_rssi(struct ieee80211_hw *hw)
{
  #line 577 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 578 
  struct dig_t *rtl_dm_dig = & rtlpriv->dm_digtable;
  #line 579 
  struct rtl_mac *mac = & rtlpriv->mac80211;
  #line 582 
  if (mac->link_state <= (unsigned int)MAC80211_LINKING && rtlpriv->dm.entry_min_undec_sm_pwdb == 0L) {
    #line 584 
    rtl_dm_dig->min_undec_pwdb_for_dm = (unsigned char)0U;
    {
      #line 585 
      bool branch;
      #line 585 
      struct _ddebug __UNIQUE_ID_ddebug560 = {.modname = (char *)"rtl8821ae", .function = (char *)"rtl8821ae_dm_find_minimum_rssi", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/dm.c", .format = (char *)"rtl8821ae: Not connected to any AP\n", .lineno = (unsigned int)585U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 585 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug560.key.dd_key_false.key,(_Bool)0);
      #line 585 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 585 
                                                  __dynamic_pr_debug(& __UNIQUE_ID_ddebug560,(char *)"rtl8821ae");
    }
  }
  #line 587 
  if (mac->link_state > (unsigned int)MAC80211_LINKING) 
    #line 588 
    if (mac->opmode == (unsigned int)NL80211_IFTYPE_AP || mac->opmode == (unsigned int)NL80211_IFTYPE_ADHOC) {
      #line 590 
      rtl_dm_dig->min_undec_pwdb_for_dm = (unsigned char)rtlpriv->dm.entry_min_undec_sm_pwdb;
      #line 592 
      _rtl_dbg_trace(rtlpriv,262144ULL,4,(char *)"AP Client PWDB = 0x%lx\n",rtlpriv->dm.entry_min_undec_sm_pwdb);
    }
    else {
      #line 596 
      rtl_dm_dig->min_undec_pwdb_for_dm = (unsigned char)rtlpriv->dm.undec_sm_pwdb;
      #line 598 
      _rtl_dbg_trace(rtlpriv,262144ULL,4,(char *)"STA Default Port PWDB = 0x%x\n",(int)rtl_dm_dig->min_undec_pwdb_for_dm);
    }
  else {
    #line 603 
    rtl_dm_dig->min_undec_pwdb_for_dm = (unsigned char)rtlpriv->dm.entry_min_undec_sm_pwdb;
    #line 605 
    _rtl_dbg_trace(rtlpriv,262144ULL,4,(char *)"AP Ext Port or disconnect PWDB = 0x%x\n",(int)rtl_dm_dig->min_undec_pwdb_for_dm);
  }
  #line 609 
  _rtl_dbg_trace(rtlpriv,8192ULL,4,(char *)"MinUndecoratedPWDBForDM =%d\n",(int)rtl_dm_dig->min_undec_pwdb_for_dm);
  #line 610 
  return;
}

#line 614  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/dm.c"
static void rtl8812ae_dm_rssi_dump_to_register(struct ieee80211_hw *hw)
{
  #line 616 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 618 
  rtl_write_byte(rtlpriv,3056U,(unsigned char)((int)rtlpriv->stats.rx_rssi_percentage[0]));
  #line 620 
  rtl_write_byte(rtlpriv,3057U,(unsigned char)((int)rtlpriv->stats.rx_rssi_percentage[1]));
  #line 624 
  rtl_write_byte(rtlpriv,3060U,(unsigned char)((int)rtlpriv->stats.rx_evm_dbm[0]));
  #line 626 
  rtl_write_byte(rtlpriv,3061U,(unsigned char)((int)rtlpriv->stats.rx_evm_dbm[1]));
  #line 630 
  rtl_write_byte(rtlpriv,3062U,(unsigned char)((int)((unsigned char)rtlpriv->stats.rx_snr_db[0])));
  #line 632 
  rtl_write_byte(rtlpriv,3063U,(unsigned char)((int)((unsigned char)rtlpriv->stats.rx_snr_db[1])));
  #line 636 
  rtl_write_word(rtlpriv,3064U,(unsigned short)((int)rtlpriv->stats.rx_cfo_short[0]));
  #line 638 
  rtl_write_word(rtlpriv,3066U,(unsigned short)((int)rtlpriv->stats.rx_cfo_short[1]));
  #line 642 
  rtl_write_word(rtlpriv,3052U,(unsigned short)((int)rtlpriv->stats.rx_cfo_tail[0]));
  #line 644 
  rtl_write_word(rtlpriv,3054U,(unsigned short)((int)rtlpriv->stats.rx_cfo_tail[1]));
  #line 646 
  return;
}

#line 648  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/dm.c"
static void rtl8821ae_dm_check_rssi_monitor(struct ieee80211_hw *hw)
{
  #line 654 
  struct rtl_sta_info *drv_priv;
  #line 659 
  u64 last_rxokcnt;
  #line 650 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 651 
  struct dig_t *dm_digtable = & rtlpriv->dm_digtable;
  #line 652 
  struct rtl_hal *rtlhal = & rtlpriv->rtlhal;
  #line 653 
  struct rtl_mac *mac = & ((struct rtl_priv *)hw->priv)->mac80211;
  #line 655 
  u8 h2c_parameter[4U] = {(unsigned char)0U};
  #line 656 
  long tmp_entry_max_pwdb = 0L;
  #line 656 
  long tmp_entry_min_pwdb = 255L;
  #line 657 
  u8 stbc_tx = (unsigned char)0U;
  #line 658 
  u64 cur_rxokcnt = 0ULL;
  #line 659 
  u64 last_txokcnt = 0ULL;
  #line 661 
  cur_rxokcnt = rtlpriv->stats.rxbytesunicast - last_rxokcnt;
  #line 662 
  last_txokcnt = rtlpriv->stats.txbytesunicast;
  #line 663 
  last_rxokcnt = rtlpriv->stats.rxbytesunicast;
  #line 664 
  if (last_txokcnt * 6ULL < cur_rxokcnt) 
                                         #line 665 
                                         h2c_parameter[3] = (unsigned char)1U; else 
                                                                    #line 667 
                                                                    h2c_parameter[3] = (unsigned char)0U;
  #line 670 
  if ((mac->opmode == (unsigned int)NL80211_IFTYPE_AP || mac->opmode == (unsigned int)NL80211_IFTYPE_ADHOC) || mac->opmode == (unsigned int)NL80211_IFTYPE_MESH_POINT) {
    #line 674 
    void *__mptr;
    #line 673 
    cif_spin_lock_bh_entry_list_lock_of_rtl_locks(& rtlpriv->locks.entry_list_lock);
    #line 674 
    __mptr = (void *)rtlpriv->entry_list.next;
    #line 674 
    drv_priv = ((struct rtl_sta_info *)__mptr);
    #line 674 
    while (& drv_priv->list != & rtlpriv->entry_list) {
      #line 674 
      void *__mptr_0;
      #line 675 
      if (drv_priv->rssi_stat.undec_sm_pwdb < tmp_entry_min_pwdb) 
                                                                  #line 677 
                                                                  tmp_entry_min_pwdb = drv_priv->rssi_stat.undec_sm_pwdb;
      #line 679 
      if (drv_priv->rssi_stat.undec_sm_pwdb > tmp_entry_max_pwdb) 
                                                                  #line 681 
                                                                  tmp_entry_max_pwdb = drv_priv->rssi_stat.undec_sm_pwdb;
      #line 674 
      __mptr_0 = (void *)drv_priv->list.next;
      #line 674 
      drv_priv = ((struct rtl_sta_info *)__mptr_0);
    }
    #line 684 
    cif_spin_unlock_bh_entry_list_lock_of_rtl_locks(& rtlpriv->locks.entry_list_lock);
    #line 687 
    if (tmp_entry_max_pwdb != 0L) {
      #line 688 
      rtlpriv->dm.entry_max_undec_sm_pwdb = tmp_entry_max_pwdb;
      #line 690 
      _rtl_dbg_print(rtlpriv,13ULL,2,(char *)"EntryMaxPWDB = 0x%lx(%ld)\n",tmp_entry_max_pwdb,tmp_entry_max_pwdb);
    }
    else 
         #line 694 
         rtlpriv->dm.entry_max_undec_sm_pwdb = 0L;
    #line 697 
    if (tmp_entry_min_pwdb != 255L) {
      #line 698 
      rtlpriv->dm.entry_min_undec_sm_pwdb = tmp_entry_min_pwdb;
      #line 700 
      _rtl_dbg_print(rtlpriv,13ULL,2,(char *)"EntryMinPWDB = 0x%lx(%ld)\n",tmp_entry_min_pwdb,tmp_entry_min_pwdb);
    }
    else 
         #line 704 
         rtlpriv->dm.entry_min_undec_sm_pwdb = 0L;
  }
  #line 708 
  if ((int)rtlpriv->dm.useramask != 0) {
    #line 709 
    if ((unsigned int)rtlhal->hw_type == 14U) {
      #line 710 
      if (((unsigned int)mac->mode == 128U || (unsigned int)mac->mode == 64U) || (unsigned int)mac->mode == 256U) 
        #line 713 
        stbc_tx = (unsigned char)((unsigned int)((unsigned char)((unsigned long)mac->vht_cur_stbc >> 1)) & 1U); else 
                                                                    #line 716 
                                                                    stbc_tx = (unsigned char)((unsigned int)((unsigned char)((unsigned long)mac->ht_cur_stbc >> 1)) & 1U);
      #line 718 
      h2c_parameter[3] = (unsigned char)((int)h2c_parameter[3] | ((int)stbc_tx << 1));
    }
    #line 720 
    h2c_parameter[2] = (unsigned char)rtlpriv->dm.undec_sm_pwdb;
    #line 722 
    h2c_parameter[1] = (unsigned char)32U;
    #line 723 
    h2c_parameter[0] = (unsigned char)0U;
    #line 724 
    if ((unsigned int)rtlhal->hw_type == 14U) 
                                              #line 725 
                                              rtl8821ae_fill_h2c_cmd(hw,(unsigned char)66,4U,(u8 *)(& h2c_parameter)); else 
                                                                    #line 728 
                                                                    rtl8821ae_fill_h2c_cmd(hw,(unsigned char)66,3U,(u8 *)(& h2c_parameter));
  }
  else 
       #line 731 
       rtl_write_byte(rtlpriv,1278U,(unsigned char)((int)((unsigned char)rtlpriv->dm.undec_sm_pwdb)));
  #line 733 
  if ((unsigned int)rtlhal->hw_type == 14U) 
                                            #line 734 
                                            rtl8812ae_dm_rssi_dump_to_register(hw);
  #line 735 
  rtl8821ae_dm_find_minimum_rssi(hw);
  #line 736 
  dm_digtable->rssi_val_min = rtlpriv->dm_digtable.min_undec_pwdb_for_dm;
  #line 737 
  return;
}

#line 739  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/dm.c"
void rtl8821ae_dm_write_cck_cca_thres(struct ieee80211_hw *hw, u8 current_cca)
{
  #line 741 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 742 
  struct dig_t *dm_digtable = & rtlpriv->dm_digtable;
  #line 744 
  if ((int)dm_digtable->cur_cck_cca_thres != (int)current_cca) 
                                                               #line 745 
                                                               rtl_write_byte(rtlpriv,2570U,(unsigned char)((int)current_cca));
  #line 747 
  dm_digtable->pre_cck_cca_thres = dm_digtable->cur_cck_cca_thres;
  #line 748 
  dm_digtable->cur_cck_cca_thres = current_cca;
  #line 749 
  return;
}

#line 751  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/dm.c"
void rtl8821ae_dm_write_dig(struct ieee80211_hw *hw, u8 current_igi)
{
  #line 753 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 754 
  struct dig_t *dm_digtable = & rtlpriv->dm_digtable;
  #line 756 
  if ((unsigned int)dm_digtable->stop_dig != 0U) 
                                                 #line 757 
                                                 return;
  #line 759 
  if (dm_digtable->cur_igvalue != (unsigned int)current_igi) {
    #line 760 
    rtl_set_bbreg(hw,3152U,4294967295U,(unsigned int)current_igi);
    #line 762 
    if ((unsigned int)rtlpriv->phy.rf_type != 0U) 
                                                  #line 763 
                                                  rtl_set_bbreg(hw,3664U,4294967295U,(unsigned int)current_igi);
  }
  #line 766 
  dm_digtable->cur_igvalue = (unsigned int)current_igi;
  #line 767 
  return;
}

#line 769  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/dm.c"
static void rtl8821ae_dm_dig(struct ieee80211_hw *hw)
{
  #line 775 
  u8 dig_min_0;
  #line 776 
  u8 dig_max_of_min;
  #line 777 
  bool first_connect;
  #line 777 
  bool first_disconnect;
  #line 778 
  u8 dm_dig_max;
  #line 778 
  u8 dm_dig_min;
  #line 778 
  u8 offset;
  #line 771 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 772 
  struct dig_t *dm_digtable = & rtlpriv->dm_digtable;
  #line 773 
  struct rtl_mac *mac = & ((struct rtl_priv *)hw->priv)->mac80211;
  #line 774 
  struct rtl_hal *rtlhal = & ((struct rtl_priv *)hw->priv)->rtlhal;
  #line 779 
  u8 current_igi = (unsigned char)dm_digtable->cur_igvalue;
  #line 781 
  _rtl_dbg_trace(rtlpriv,8192ULL,4,(char *)"\n");
  #line 783 
  if ((int)mac->act_scanning != 0) {
    #line 784 
    _rtl_dbg_trace(rtlpriv,8192ULL,4,(char *)"Return: In Scan Progress\n");
    #line 786 
    return;
  }
  #line 790 
  dig_min_0 = dm_digtable->dig_min_0;
  #line 791 
  first_connect = (_Bool)((mac->link_state > (unsigned int)MAC80211_LINKING && ! dm_digtable->media_connect_0) != 0);
  #line 793 
  first_disconnect = (_Bool)((mac->link_state <= (unsigned int)MAC80211_LINKING && (int)dm_digtable->media_connect_0 != 0) != 0);
  #line 798 
  dm_dig_max = (unsigned char)90U;
  #line 800 
  if ((unsigned int)rtlhal->hw_type != 13U) 
                                            #line 801 
                                            dm_dig_min = (unsigned char)30U; else 
                                                                    #line 803 
                                                                    dm_dig_min = (unsigned char)28U;
  #line 805 
  dig_max_of_min = (unsigned char)50U;
  #line 807 
  if (mac->link_state > (unsigned int)MAC80211_LINKING) {
    #line 808 
    if ((unsigned int)rtlhal->hw_type != 13U) 
                                              #line 809 
                                              offset = (unsigned char)20U; else 
                                                                    #line 811 
                                                                    offset = (unsigned char)10U;
    #line 813 
    if ((int)dm_digtable->rssi_val_min + (int)offset > (int)dm_dig_max) 
      #line 814 
      dm_digtable->rx_gain_max = dm_dig_max;
    else 
      #line 815 
      if ((int)dm_digtable->rssi_val_min + (int)offset < (int)dm_dig_min) 
        #line 816 
        dm_digtable->rx_gain_max = dm_dig_min; else 
                                                    #line 818 
                                                    dm_digtable->rx_gain_max = (unsigned char)((int)dm_digtable->rssi_val_min + (int)offset);
    #line 821 
    _rtl_dbg_trace(rtlpriv,8192ULL,4,(char *)"dm_digtable->rssi_val_min=0x%x,dm_digtable->rx_gain_max = 0x%x\n",(int)dm_digtable->rssi_val_min,(int)dm_digtable->rx_gain_max);
    #line 825 
    if ((int)rtlpriv->dm.one_entry_only != 0) {
      #line 826 
      offset = (unsigned char)0U;
      #line 828 
      if ((int)dm_digtable->rssi_val_min - (int)offset < (int)dm_dig_min) 
        #line 829 
        dig_min_0 = dm_dig_min;
      else 
        #line 830 
        if ((int)dm_digtable->rssi_val_min - (int)offset > (int)dig_max_of_min) 
          #line 832 
          dig_min_0 = dig_max_of_min; else 
                                           #line 834 
                                           dig_min_0 = (unsigned char)((int)dm_digtable->rssi_val_min - (int)offset);
      #line 837 
      _rtl_dbg_trace(rtlpriv,8192ULL,4,(char *)"bOneEntryOnly=TRUE, dig_min_0=0x%x\n",(int)dig_min_0);
    }
    else 
         #line 841 
         dig_min_0 = dm_dig_min;
  }
  else {
    #line 844 
    dm_digtable->rx_gain_max = dm_dig_max;
    #line 845 
    dig_min_0 = dm_dig_min;
    #line 846 
    _rtl_dbg_trace(rtlpriv,8192ULL,4,(char *)"No Link\n");
  }
  #line 850 
  if (rtlpriv->falsealm_cnt.cnt_all > 10000U) {
    #line 851 
    _rtl_dbg_trace(rtlpriv,8192ULL,4,(char *)"Abnormally false alarm case.\n");
    #line 854 
    if ((unsigned int)dm_digtable->large_fa_hit != 3U) 
                                                       #line 855 
                                                       dm_digtable->large_fa_hit = (u8)((int)dm_digtable->large_fa_hit + 1);
    #line 856 
    if ((int)dm_digtable->forbidden_igi < (int)current_igi) {
      #line 857 
      dm_digtable->forbidden_igi = current_igi;
      #line 858 
      dm_digtable->large_fa_hit = (unsigned char)1U;
    }
    #line 861 
    if ((unsigned int)dm_digtable->large_fa_hit > 2U) {
      #line 862 
      if ((int)dm_digtable->forbidden_igi >= (int)dm_digtable->rx_gain_max) 
        #line 864 
        dm_digtable->rx_gain_min = dm_digtable->rx_gain_max; else 
                                                                  #line 867 
                                                                  dm_digtable->rx_gain_min = (unsigned char)((unsigned int)dm_digtable->forbidden_igi + 1U);
      #line 869 
      dm_digtable->recover_cnt = 3600U;
    }
  }
  else 
    #line 873 
    if (dm_digtable->recover_cnt != 0U) 
                                        #line 874 
                                        (dm_digtable->recover_cnt) --;
    else 
      #line 876 
      if ((unsigned int)dm_digtable->large_fa_hit <= 2U) 
        #line 877 
        if ((int)dm_digtable->forbidden_igi <= (int)dig_min_0) {
          #line 879 
          dm_digtable->forbidden_igi = dig_min_0;
          #line 881 
          dm_digtable->rx_gain_min = dig_min_0;
          #line 883 
          _rtl_dbg_trace(rtlpriv,8192ULL,4,(char *)"Normal Case: At Lower Bound\n");
        }
        else {
          #line 886 
          dm_digtable->forbidden_igi = (u8)((int)dm_digtable->forbidden_igi - 1);
          #line 887 
          dm_digtable->rx_gain_min = (unsigned char)((unsigned int)dm_digtable->forbidden_igi + 1U);
          #line 889 
          _rtl_dbg_trace(rtlpriv,8192ULL,4,(char *)"Normal Case: Approach Lower Bound\n");
        }
      else 
           #line 893 
           dm_digtable->large_fa_hit = (unsigned char)0U;
  #line 897 
  _rtl_dbg_trace(rtlpriv,8192ULL,4,(char *)"pDM_DigTable->LargeFAHit=%d\n",(int)dm_digtable->large_fa_hit);
  #line 901 
  if ((unsigned int)rtlpriv->dm.dbginfo.num_qry_beacon_pkt <= 9U) 
                                                                  #line 902 
                                                                  dm_digtable->rx_gain_min = dm_dig_min;
  #line 904 
  if ((int)dm_digtable->rx_gain_min > (int)dm_digtable->rx_gain_max) 
    #line 905 
    dm_digtable->rx_gain_min = dm_digtable->rx_gain_max;
  #line 908 
  if (mac->link_state > (unsigned int)MAC80211_LINKING) {
    #line 909 
    _rtl_dbg_trace(rtlpriv,8192ULL,4,(char *)"DIG AfterLink\n");
    #line 911 
    if ((int)first_connect != 0) {
      #line 912 
      if ((int)dm_digtable->rssi_val_min <= (int)dig_max_of_min) 
                                                                 #line 913 
                                                                 current_igi = dm_digtable->rssi_val_min; else 
                                                                    #line 915 
                                                                    current_igi = dig_max_of_min;
      #line 916 
      _rtl_dbg_trace(rtlpriv,8192ULL,4,(char *)"First Connect\n");
    }
    else {
      #line 919 
      if (rtlpriv->falsealm_cnt.cnt_all > 1024U) 
                                                 #line 920 
                                                 current_igi = (unsigned char)((unsigned int)current_igi + 4U);
      else 
        #line 921 
        if (rtlpriv->falsealm_cnt.cnt_all > 768U) 
                                                  #line 922 
                                                  current_igi = (unsigned char)((unsigned int)current_igi + 2U);
        else 
          #line 923 
          if (rtlpriv->falsealm_cnt.cnt_all <= 199U) 
                                                     #line 924 
                                                     current_igi = (unsigned char)((unsigned int)current_igi + 254U);
      #line 926 
      if ((unsigned int)rtlpriv->dm.dbginfo.num_qry_beacon_pkt <= 9U && rtlpriv->falsealm_cnt.cnt_all <= 767U) {
        #line 928 
        current_igi = dm_digtable->rx_gain_min;
        #line 929 
        _rtl_dbg_trace(rtlpriv,8192ULL,4,(char *)"Beacon is less than 10 and FA is less than 768, IGI GOES TO 0x1E!!!!!!!!!!!!\n");
      }
    }
  }
  else {
    #line 934 
    _rtl_dbg_trace(rtlpriv,8192ULL,4,(char *)"DIG BeforeLink\n");
    #line 936 
    if ((int)first_disconnect != 0) {
      #line 937 
      current_igi = dm_digtable->rx_gain_min;
      #line 938 
      _rtl_dbg_trace(rtlpriv,8192ULL,4,(char *)"First DisConnect\n");
    }
    else {
      #line 944 
      if (rtlpriv->falsealm_cnt.cnt_all > 2000U) 
                                                 #line 945 
                                                 current_igi = (unsigned char)((unsigned int)current_igi + 4U);
      else 
        #line 946 
        if (rtlpriv->falsealm_cnt.cnt_all > 600U) 
                                                  #line 947 
                                                  current_igi = (unsigned char)((unsigned int)current_igi + 2U);
        else 
          #line 948 
          if (rtlpriv->falsealm_cnt.cnt_all <= 299U) 
                                                     #line 949 
                                                     current_igi = (unsigned char)((unsigned int)current_igi + 254U);
      #line 951 
      if ((unsigned int)current_igi > 61U) 
                                           #line 952 
                                           current_igi = (unsigned char)62U;
      #line 954 
      _rtl_dbg_trace(rtlpriv,8192ULL,4,(char *)"England DIG\n");
    }
  }
  #line 957 
  _rtl_dbg_trace(rtlpriv,8192ULL,4,(char *)"DIG End Adjust IGI\n");
  #line 961 
  if ((int)dm_digtable->rx_gain_max < (int)current_igi) 
                                                        #line 962 
                                                        current_igi = dm_digtable->rx_gain_max;
  #line 963 
  if ((int)dm_digtable->rx_gain_min > (int)current_igi) 
                                                        #line 964 
                                                        current_igi = dm_digtable->rx_gain_min;
  #line 966 
  _rtl_dbg_trace(rtlpriv,8192ULL,4,(char *)"rx_gain_max=0x%x, rx_gain_min=0x%x\n",(int)dm_digtable->rx_gain_max,(int)dm_digtable->rx_gain_min);
  #line 969 
  _rtl_dbg_trace(rtlpriv,8192ULL,4,(char *)"TotalFA=%d\n",rtlpriv->falsealm_cnt.cnt_all);
  #line 971 
  _rtl_dbg_trace(rtlpriv,8192ULL,4,(char *)"CurIGValue=0x%x\n",(int)current_igi);
  #line 974 
  rtl8821ae_dm_write_dig(hw,(unsigned char)((int)current_igi));
  #line 975 
  dm_digtable->media_connect_0 = (_Bool)(mac->link_state > (unsigned int)MAC80211_LINKING);
  #line 977 
  dm_digtable->dig_min_0 = dig_min_0;
  #line 978 
  return;
}

#line 980  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/dm.c"
static void rtl8821ae_dm_common_info_self_update(struct ieee80211_hw *hw)
{
  #line 984 
  struct rtl_sta_info *drv_priv;
  #line 982 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 983 
  u8 cnt = (unsigned char)0U;
  #line 986 
  rtlpriv->dm.tx_rate = (unsigned char)255U;
  #line 988 
  rtlpriv->dm.one_entry_only = (_Bool)0;
  #line 990 
  if (rtlpriv->mac80211.opmode == (unsigned int)NL80211_IFTYPE_STATION && rtlpriv->mac80211.link_state > (unsigned int)MAC80211_LINKING) {
    #line 992 
    rtlpriv->dm.one_entry_only = (_Bool)1;
    #line 993 
    return;
  }
  #line 996 
  if ((rtlpriv->mac80211.opmode == (unsigned int)NL80211_IFTYPE_AP || rtlpriv->mac80211.opmode == (unsigned int)NL80211_IFTYPE_ADHOC) || rtlpriv->mac80211.opmode == (unsigned int)NL80211_IFTYPE_MESH_POINT) {
    #line 1000 
    void *__mptr;
    #line 999 
    cif_spin_lock_bh_entry_list_lock_of_rtl_locks(& rtlpriv->locks.entry_list_lock);
    #line 1000 
    __mptr = (void *)rtlpriv->entry_list.next;
    #line 1000 
    drv_priv = ((struct rtl_sta_info *)__mptr);
    #line 1000 
    while (& drv_priv->list != & rtlpriv->entry_list) {
      #line 1000 
      void *__mptr_0;
      #line 1001 
      cnt = (u8)((int)cnt + 1);
      #line 1000 
      __mptr_0 = (void *)drv_priv->list.next;
      #line 1000 
      drv_priv = ((struct rtl_sta_info *)__mptr_0);
    }
    #line 1002 
    cif_spin_unlock_bh_entry_list_lock_of_rtl_locks(& rtlpriv->locks.entry_list_lock);
    #line 1004 
    if ((unsigned int)cnt == 1U) 
                                 #line 1005 
                                 rtlpriv->dm.one_entry_only = (_Bool)1;
  }
  #line 1007 
  return;
}

#line 1009  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/dm.c"
static void rtl8821ae_dm_false_alarm_counter_statistics(struct ieee80211_hw *hw)
{
  #line 1011 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 1012 
  struct false_alarm_statistics *falsealm_cnt = & rtlpriv->falsealm_cnt;
  #line 1013 
  u32 cck_enable = 0U;
  #line 1016 
  falsealm_cnt->cnt_ofdm_fail = rtl_get_bbreg(hw,3912U,65535U);
  #line 1018 
  falsealm_cnt->cnt_cck_fail = rtl_get_bbreg(hw,2652U,65535U);
  #line 1021 
  cck_enable = rtl_get_bbreg(hw,2056U,268435456U);
  #line 1022 
  if (cck_enable != 0U) 
                        #line 1023 
                        falsealm_cnt->cnt_all = falsealm_cnt->cnt_ofdm_fail + falsealm_cnt->cnt_cck_fail; else 
                                                                    #line 1026 
                                                                    falsealm_cnt->cnt_all = falsealm_cnt->cnt_ofdm_fail;
  #line 1029 
  rtl_set_bbreg(hw,2468U,131072U,1U);
  #line 1030 
  rtl_set_bbreg(hw,2468U,131072U,0U);
  #line 1032 
  rtl_set_bbreg(hw,2604U,32768U,0U);
  #line 1033 
  rtl_set_bbreg(hw,2604U,32768U,1U);
  #line 1035 
  _rtl_dbg_trace(rtlpriv,8192ULL,4,(char *)"Cnt_Cck_fail=%d\n",falsealm_cnt->cnt_cck_fail);
  #line 1037 
  _rtl_dbg_trace(rtlpriv,8192ULL,4,(char *)"cnt_ofdm_fail=%d\n",falsealm_cnt->cnt_ofdm_fail);
  #line 1039 
  _rtl_dbg_trace(rtlpriv,8192ULL,4,(char *)"Total False Alarm=%d\n",falsealm_cnt->cnt_all);
  #line 1040 
  return;
}

#line 1043  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/dm.c"
static void rtl8812ae_dm_check_txpower_tracking_thermalmeter(struct ieee80211_hw *hw)
{
  #line 1046 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 1048 
  if ((unsigned int)rtlpriv->dm.tm_trigger == 0U) {
    #line 1049 
    rtl_set_rfreg(hw,(enum radio_path)RF90_PATH_A,66U,196608U,3U);
    #line 1051 
    _rtl_dbg_trace(rtlpriv,131072ULL,4,(char *)"Trigger 8812 Thermal Meter!!\n");
    #line 1053 
    rtlpriv->dm.tm_trigger = (unsigned char)1U;
    #line 1054 
    return;
  }
  #line 1056 
  _rtl_dbg_trace(rtlpriv,131072ULL,4,(char *)"Schedule TxPowerTracking direct call!!\n");
  #line 1058 
  rtl8812ae_dm_txpower_tracking_callback_thermalmeter(hw);
  #line 1059 
  return;
}

#line 1061  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/dm.c"
static void rtl8821ae_dm_iq_calibrate(struct ieee80211_hw *hw)
{
  #line 1063 
  struct rtl_mac *mac = & ((struct rtl_priv *)hw->priv)->mac80211;
  #line 1064 
  struct rtl_dm *rtldm = & ((struct rtl_priv *)hw->priv)->dm;
  #line 1065 
  struct rtl_hal *rtlhal = & ((struct rtl_priv *)hw->priv)->rtlhal;
  #line 1067 
  if (mac->link_state > (unsigned int)MAC80211_LINKING) {
    #line 1068 
    if ((unsigned int)rtldm->linked_interval <= 2U) 
                                                    #line 1069 
                                                    rtldm->linked_interval = (u8)((int)rtldm->linked_interval + 1);
    #line 1071 
    if ((unsigned int)rtldm->linked_interval == 2U) 
      #line 1072 
      if ((unsigned int)rtlhal->hw_type == 14U) 
                                                #line 1073 
                                                rtl8812ae_phy_iq_calibrate(hw,(_Bool)0); else 
                                                                    #line 1075 
                                                                    rtl8821ae_phy_iq_calibrate(hw,(_Bool)0);
  }
  else 
       #line 1078 
       rtldm->linked_interval = (unsigned char)0U;
  #line 1079 
  return;
}

#line 1082  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/dm.c"
static void rtl8812ae_get_delta_swing_table(struct ieee80211_hw *hw, u8 **up_a, u8 **down_a, u8 **up_b, u8 **down_b)
{
  #line 1086 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 1087 
  struct rtl_phy *rtlphy = & rtlpriv->phy;
  #line 1088 
  struct rtl_dm *rtldm = & ((struct rtl_priv *)hw->priv)->dm;
  #line 1089 
  u8 channel = rtlphy->current_channel;
  #line 1090 
  u8 rate = rtldm->tx_rate;
  #line 1092 
  if ((unsigned int)channel + 255U <= 13U) 
    #line 1093 
    if ((unsigned int)rate <= 3U) {
      #line 1094 
      *up_a = (u8 *)(& rtl8812ae_delta_swing_table_idx_24gccka_p);
      #line 1095 
      *down_a = (u8 *)(& rtl8812ae_delta_swing_table_idx_24gccka_n);
      #line 1096 
      *up_b = (u8 *)(& rtl8812ae_delta_swing_table_idx_24gcckb_p);
      #line 1097 
      *down_b = (u8 *)(& rtl8812ae_delta_swing_table_idx_24gcckb_n);
    }
    else {
      #line 1099 
      *up_a = (u8 *)(& rtl8812ae_delta_swing_table_idx_24ga_p);
      #line 1100 
      *down_a = (u8 *)(& rtl8812ae_delta_swing_table_idx_24ga_n);
      #line 1101 
      *up_b = (u8 *)(& rtl8812ae_delta_swing_table_idx_24gb_p);
      #line 1102 
      *down_b = (u8 *)(& rtl8812ae_delta_swing_table_idx_24gb_n);
    }
  else 
    #line 1104 
    if ((unsigned int)channel + 220U <= 28U) {
      #line 1105 
      *up_a = (u8 *)(rtl8812ae_delta_swing_table_idx_5ga_p);
      #line 1106 
      *down_a = (u8 *)(rtl8812ae_delta_swing_table_idx_5ga_n);
      #line 1107 
      *up_b = (u8 *)(rtl8812ae_delta_swing_table_idx_5gb_p);
      #line 1108 
      *down_b = (u8 *)(rtl8812ae_delta_swing_table_idx_5gb_n);
    }
    else 
      #line 1109 
      if ((unsigned int)channel + 156U <= 40U) {
        #line 1110 
        *up_a = (u8 *)(& rtl8812ae_delta_swing_table_idx_5ga_p[1]);
        #line 1111 
        *down_a = (u8 *)(& rtl8812ae_delta_swing_table_idx_5ga_n[1]);
        #line 1112 
        *up_b = (u8 *)(& rtl8812ae_delta_swing_table_idx_5gb_p[1]);
        #line 1113 
        *down_b = (u8 *)(& rtl8812ae_delta_swing_table_idx_5gb_n[1]);
      }
      else 
        #line 1114 
        if ((unsigned int)channel + 107U <= 24U) {
          #line 1115 
          *up_a = (u8 *)(& rtl8812ae_delta_swing_table_idx_5ga_p[2]);
          #line 1116 
          *down_a = (u8 *)(& rtl8812ae_delta_swing_table_idx_5ga_n[2]);
          #line 1117 
          *up_b = (u8 *)(& rtl8812ae_delta_swing_table_idx_5gb_p[2]);
          #line 1118 
          *down_b = (u8 *)(& rtl8812ae_delta_swing_table_idx_5gb_n[2]);
        }
        else {
          #line 1120 
          *up_a = (u8 *)(& rtl8818e_delta_swing_table_idx_24gb_p);
          #line 1121 
          *down_a = (u8 *)(& rtl8818e_delta_swing_table_idx_24gb_n);
          #line 1122 
          *up_b = (u8 *)(& rtl8818e_delta_swing_table_idx_24gb_p);
          #line 1123 
          *down_b = (u8 *)(& rtl8818e_delta_swing_table_idx_24gb_n);
        }
  #line 1125 
  return;
}

#line 1127  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/dm.c"
void rtl8821ae_dm_update_init_rate(struct ieee80211_hw *hw, u8 rate)
{
  #line 1129 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 1130 
  struct rtl_dm *rtldm = & ((struct rtl_priv *)hw->priv)->dm;
  #line 1131 
  struct rtl_hal *rtlhal = & ((struct rtl_priv *)hw->priv)->rtlhal;
  #line 1132 
  u8 p = (unsigned char)0U;
  #line 1134 
  _rtl_dbg_trace(rtlpriv,131072ULL,4,(char *)"Get C2H Command! Rate=0x%x\n",(int)rate);
  #line 1137 
  rtldm->tx_rate = rate;
  #line 1139 
  if ((unsigned int)rtlhal->hw_type == 13U) 
                                            #line 1140 
                                            rtl8821ae_dm_txpwr_track_set_pwr(hw,(enum pwr_track_control_method)MIX_MODE,(unsigned char)0,(unsigned char)0);
  else {
    #line 1142 
    p = (unsigned char)0U;
    #line 1142 
    while ((unsigned int)p <= 1U) {
      #line 1143 
      rtl8812ae_dm_txpwr_track_set_pwr(hw,(enum pwr_track_control_method)MIX_MODE,(unsigned char)((int)p),(unsigned char)0);
      #line 1142 
      p = (u8)((int)p + 1);
    }
  }
  #line 1145 
  return;
}

#line 1147  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/dm.c"
u8 rtl8821ae_hw_rate_to_mrate(struct ieee80211_hw *hw, u8 rate)
{
  #line 1149 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 1150 
  u8 ret_rate = (unsigned char)2U;
  #line 1152 
  switch ((int)rate) {
    #line 1153 
    case 0: 
            #line 1153 
    ;
    #line 1154 
    ret_rate = (unsigned char)2U;
    #line 1155 
    break;
    #line 1156 
    case 1: 
            #line 1156 
    ;
    #line 1157 
    ret_rate = (unsigned char)4U;
    #line 1158 
    break;
    #line 1159 
    case 2: 
            #line 1159 
    ;
    #line 1160 
    ret_rate = (unsigned char)11U;
    #line 1161 
    break;
    #line 1162 
    case 3: 
            #line 1162 
    ;
    #line 1163 
    ret_rate = (unsigned char)22U;
    #line 1164 
    break;
    #line 1165 
    case 4: 
            #line 1165 
    ;
    #line 1166 
    ret_rate = (unsigned char)12U;
    #line 1167 
    break;
    #line 1168 
    case 5: 
            #line 1168 
    ;
    #line 1169 
    ret_rate = (unsigned char)18U;
    #line 1170 
    break;
    #line 1171 
    case 6: 
            #line 1171 
    ;
    #line 1172 
    ret_rate = (unsigned char)24U;
    #line 1173 
    break;
    #line 1174 
    case 7: 
            #line 1174 
    ;
    #line 1175 
    ret_rate = (unsigned char)36U;
    #line 1176 
    break;
    #line 1177 
    case 8: 
            #line 1177 
    ;
    #line 1178 
    ret_rate = (unsigned char)48U;
    #line 1179 
    break;
    #line 1180 
    case 9: 
            #line 1180 
    ;
    #line 1181 
    ret_rate = (unsigned char)72U;
    #line 1182 
    break;
    #line 1183 
    case 10: 
             #line 1183 
    ;
    #line 1184 
    ret_rate = (unsigned char)96U;
    #line 1185 
    break;
    #line 1186 
    case 11: 
             #line 1186 
    ;
    #line 1187 
    ret_rate = (unsigned char)108U;
    #line 1188 
    break;
    #line 1189 
    case 12: 
             #line 1189 
    ;
    #line 1190 
    ret_rate = (unsigned char)128U;
    #line 1191 
    break;
    #line 1192 
    case 13: 
             #line 1192 
    ;
    #line 1193 
    ret_rate = (unsigned char)129U;
    #line 1194 
    break;
    #line 1195 
    case 14: 
             #line 1195 
    ;
    #line 1196 
    ret_rate = (unsigned char)130U;
    #line 1197 
    break;
    #line 1198 
    case 15: 
             #line 1198 
    ;
    #line 1199 
    ret_rate = (unsigned char)131U;
    #line 1200 
    break;
    #line 1201 
    case 16: 
             #line 1201 
    ;
    #line 1202 
    ret_rate = (unsigned char)132U;
    #line 1203 
    break;
    #line 1204 
    case 17: 
             #line 1204 
    ;
    #line 1205 
    ret_rate = (unsigned char)133U;
    #line 1206 
    break;
    #line 1207 
    case 18: 
             #line 1207 
    ;
    #line 1208 
    ret_rate = (unsigned char)134U;
    #line 1209 
    break;
    #line 1210 
    case 19: 
             #line 1210 
    ;
    #line 1211 
    ret_rate = (unsigned char)135U;
    #line 1212 
    break;
    #line 1213 
    case 20: 
             #line 1213 
    ;
    #line 1214 
    ret_rate = (unsigned char)136U;
    #line 1215 
    break;
    #line 1216 
    case 21: 
             #line 1216 
    ;
    #line 1217 
    ret_rate = (unsigned char)137U;
    #line 1218 
    break;
    #line 1219 
    case 22: 
             #line 1219 
    ;
    #line 1220 
    ret_rate = (unsigned char)138U;
    #line 1221 
    break;
    #line 1222 
    case 23: 
             #line 1222 
    ;
    #line 1223 
    ret_rate = (unsigned char)139U;
    #line 1224 
    break;
    #line 1225 
    case 24: 
             #line 1225 
    ;
    #line 1226 
    ret_rate = (unsigned char)140U;
    #line 1227 
    break;
    #line 1228 
    case 25: 
             #line 1228 
    ;
    #line 1229 
    ret_rate = (unsigned char)141U;
    #line 1230 
    break;
    #line 1231 
    case 26: 
             #line 1231 
    ;
    #line 1232 
    ret_rate = (unsigned char)142U;
    #line 1233 
    break;
    #line 1234 
    case 27: 
             #line 1234 
    ;
    #line 1235 
    ret_rate = (unsigned char)143U;
    #line 1236 
    break;
    #line 1237 
    case 44: 
             #line 1237 
    ;
    #line 1238 
    ret_rate = (unsigned char)144U;
    #line 1239 
    break;
    #line 1240 
    case 45: 
             #line 1240 
    ;
    #line 1241 
    ret_rate = (unsigned char)145U;
    #line 1242 
    break;
    #line 1243 
    case 46: 
             #line 1243 
    ;
    #line 1244 
    ret_rate = (unsigned char)146U;
    #line 1245 
    break;
    #line 1246 
    case 47: 
             #line 1246 
    ;
    #line 1247 
    ret_rate = (unsigned char)147U;
    #line 1248 
    break;
    #line 1249 
    case 48: 
             #line 1249 
    ;
    #line 1250 
    ret_rate = (unsigned char)148U;
    #line 1251 
    break;
    #line 1252 
    case 49: 
             #line 1252 
    ;
    #line 1253 
    ret_rate = (unsigned char)149U;
    #line 1254 
    break;
    #line 1255 
    case 50: 
             #line 1255 
    ;
    #line 1256 
    ret_rate = (unsigned char)150U;
    #line 1257 
    break;
    #line 1258 
    case 51: 
             #line 1258 
    ;
    #line 1259 
    ret_rate = (unsigned char)151U;
    #line 1260 
    break;
    #line 1261 
    case 52: 
             #line 1261 
    ;
    #line 1262 
    ret_rate = (unsigned char)152U;
    #line 1263 
    break;
    #line 1264 
    case 53: 
             #line 1264 
    ;
    #line 1265 
    ret_rate = (unsigned char)153U;
    #line 1266 
    break;
    #line 1267 
    case 54: 
             #line 1267 
    ;
    #line 1268 
    ret_rate = (unsigned char)154U;
    #line 1269 
    break;
    #line 1270 
    case 55: 
             #line 1270 
    ;
    #line 1271 
    ret_rate = (unsigned char)155U;
    #line 1272 
    break;
    #line 1273 
    case 56: 
             #line 1273 
    ;
    #line 1274 
    ret_rate = (unsigned char)156U;
    #line 1275 
    break;
    #line 1276 
    case 57: 
             #line 1276 
    ;
    #line 1277 
    ret_rate = (unsigned char)157U;
    #line 1278 
    break;
    #line 1279 
    case 58: 
             #line 1279 
    ;
    #line 1280 
    ret_rate = (unsigned char)158U;
    #line 1281 
    break;
    #line 1282 
    case 59: 
             #line 1282 
    ;
    #line 1283 
    ret_rate = (unsigned char)159U;
    #line 1284 
    break;
    #line 1285 
    case 60: 
             #line 1285 
    ;
    #line 1286 
    ret_rate = (unsigned char)160U;
    #line 1287 
    break;
    #line 1288 
    case 61: 
             #line 1288 
    ;
    #line 1289 
    ret_rate = (unsigned char)161U;
    #line 1290 
    break;
    #line 1291 
    case 62: 
             #line 1291 
    ;
    #line 1292 
    ret_rate = (unsigned char)162U;
    #line 1293 
    break;
    #line 1294 
    case 63: 
             #line 1294 
    ;
    #line 1295 
    ret_rate = (unsigned char)163U;
    #line 1296 
    break;
    #line 1297 
    default: 
             #line 1297 
    ;
    #line 1298 
    _rtl_dbg_trace(rtlpriv,131072ULL,4,(char *)"HwRateToMRate8812(): Non supported Rate [%x]!!!\n",(int)rate);
    #line 1301 
    break;
  }
  #line 1303 
  return ret_rate;
}

#line 1324  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/dm.c"
void rtl8812ae_dm_txpwr_track_set_pwr(struct ieee80211_hw *hw, enum pwr_track_control_method method, u8 rf_path, u8 channel_mapped_index)
{
  #line 1331 
  u32 final_swing_idx[2U];
  #line 1328 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 1329 
  struct rtl_dm *rtldm = & ((struct rtl_priv *)hw->priv)->dm;
  #line 1330 
  struct rtl_phy *rtlphy = & rtlpriv->phy;
  #line 1332 
  u8 pwr_tracking_limit = (unsigned char)26U;
  #line 1333 
  u8 tx_rate = (unsigned char)255U;
  #line 1334 
  s8 final_ofdm_swing_index = (signed char)0;
  #line 1336 
  if ((unsigned int)rtldm->tx_rate != 255U) 
                                            #line 1337 
                                            tx_rate = rtl8821ae_hw_rate_to_mrate(hw,(unsigned char)((int)rtldm->tx_rate));
  #line 1340 
  _rtl_dbg_trace(rtlpriv,131072ULL,4,(char *)"===>rtl8812ae_dm_txpwr_track_set_pwr\n");
  #line 1343 
  if ((unsigned int)tx_rate != 255U) 
    #line 1345 
    if ((unsigned int)tx_rate + 254U <= 20U) 
                                             #line 1346 
                                             pwr_tracking_limit = (unsigned char)32U;
    else 
      #line 1348 
      if ((unsigned int)tx_rate + 244U <= 84U) 
                                               #line 1349 
                                               pwr_tracking_limit = (unsigned char)30U;
      else 
        #line 1350 
        if ((unsigned int)tx_rate == 108U) 
                                           #line 1351 
                                           pwr_tracking_limit = (unsigned char)28U;
        else 
          #line 1354 
          if ((unsigned int)tx_rate + 128U <= 2U) 
                                                  #line 1355 
                                                  pwr_tracking_limit = (unsigned char)34U;
          else 
            #line 1357 
            if ((unsigned int)tx_rate + 125U <= 1U) 
                                                    #line 1358 
                                                    pwr_tracking_limit = (unsigned char)30U;
            else 
              #line 1360 
              if ((unsigned int)tx_rate + 123U <= 2U) 
                                                      #line 1361 
                                                      pwr_tracking_limit = (unsigned char)28U;
              else 
                #line 1363 
                if ((unsigned int)tx_rate + 120U <= 2U) 
                                                        #line 1364 
                                                        pwr_tracking_limit = (unsigned char)34U;
                else 
                  #line 1366 
                  if ((unsigned int)tx_rate + 117U <= 1U) 
                                                          #line 1367 
                                                          pwr_tracking_limit = (unsigned char)30U;
                  else 
                    #line 1369 
                    if ((unsigned int)tx_rate + 115U <= 2U) 
                                                            #line 1370 
                                                            pwr_tracking_limit = (unsigned char)28U;
                    else 
                      #line 1374 
                      if ((unsigned int)tx_rate + 112U <= 2U) 
                                                              #line 1376 
                                                              pwr_tracking_limit = (unsigned char)34U;
                      else 
                        #line 1378 
                        if ((unsigned int)tx_rate + 109U <= 1U) 
                                                                #line 1380 
                                                                pwr_tracking_limit = (unsigned char)30U;
                        else 
                          #line 1382 
                          if ((unsigned int)tx_rate + 107U <= 1U) 
                                                                  #line 1384 
                                                                  pwr_tracking_limit = (unsigned char)28U;
                          else 
                            #line 1385 
                            if ((unsigned int)tx_rate == 151U) 
                                                               #line 1386 
                                                               pwr_tracking_limit = (unsigned char)26U;
                            else 
                              #line 1387 
                              if ((unsigned int)tx_rate == 152U) 
                                                                 #line 1388 
                                                                 pwr_tracking_limit = (unsigned char)24U;
                              else 
                                #line 1389 
                                if ((unsigned int)tx_rate == 153U) 
                                                                   #line 1390 
                                                                   pwr_tracking_limit = (unsigned char)22U;
                                else 
                                  #line 1392 
                                  if ((unsigned int)tx_rate + 102U <= 2U) 
                                    #line 1394 
                                    pwr_tracking_limit = (unsigned char)34U;
                                  else 
                                    #line 1396 
                                    if ((unsigned int)tx_rate + 99U <= 1U) 
                                      #line 1398 
                                      pwr_tracking_limit = (unsigned char)30U;
                                    else 
                                      #line 1400 
                                      if ((unsigned int)tx_rate + 97U <= 1U) 
                                        #line 1402 
                                        pwr_tracking_limit = (unsigned char)28U;
                                      else 
                                        #line 1403 
                                        if ((unsigned int)tx_rate == 161U) 
                                          #line 1404 
                                          pwr_tracking_limit = (unsigned char)26U;
                                        else 
                                          #line 1405 
                                          if ((unsigned int)tx_rate == 162U) 
                                            #line 1406 
                                            pwr_tracking_limit = (unsigned char)24U;
                                          else 
                                            #line 1407 
                                            if ((unsigned int)tx_rate == 163U) 
                                              #line 1408 
                                              pwr_tracking_limit = (unsigned char)22U; else 
                                                                    #line 1410 
                                                                    pwr_tracking_limit = (unsigned char)24U;
  #line 1412 
  _rtl_dbg_trace(rtlpriv,131072ULL,4,(char *)"TxRate=0x%x, PwrTrackingLimit=%d\n",(int)tx_rate,(int)pwr_tracking_limit);
  #line 1416 
  if (method == (unsigned int)BBSWING) {
    #line 1417 
    _rtl_dbg_trace(rtlpriv,131072ULL,4,(char *)"===>rtl8812ae_dm_txpwr_track_set_pwr\n");
    #line 1420 
    if ((unsigned int)rf_path == 0U) {
      #line 1421 
      u32 tmp;
      #line 1426 
      int tmp_0;
      #line 1426 
      if ((int)pwr_tracking_limit < (int)rtldm->ofdm_index[0]) 
                                                               #line 1426 
                                                               tmp_0 = (int)pwr_tracking_limit; else 
                                                                    #line 1426 
                                                                    tmp_0 = (int)rtldm->ofdm_index[0];
      #line 1423 
      final_swing_idx[0] = (unsigned int)tmp_0;
      #line 1428 
      tmp = final_swing_idx[0];
      #line 1429 
      _rtl_dbg_trace(rtlpriv,131072ULL,4,(char *)"pDM_Odm->RFCalibrateInfo.OFDM_index[ODM_RF_PATH_A]=%d,pDM_Odm->RealBbSwingIdx[ODM_RF_PATH_A]=%d\n",(int)rtldm->ofdm_index[0],final_swing_idx[0]);
      #line 1434 
      rtl_set_bbreg(hw,3100U,4292870144U,txscaling_tbl[tmp]);
    }
    else {
      #line 1437 
      u32 tmp_1;
      #line 1442 
      int tmp_2;
      #line 1442 
      if ((int)pwr_tracking_limit < (int)rtldm->ofdm_index[1]) 
                                                               #line 1442 
                                                               tmp_2 = (int)pwr_tracking_limit; else 
                                                                    #line 1442 
                                                                    tmp_2 = (int)rtldm->ofdm_index[1];
      #line 1439 
      final_swing_idx[1] = (unsigned int)tmp_2;
      #line 1444 
      tmp_1 = final_swing_idx[1];
      #line 1445 
      _rtl_dbg_trace(rtlpriv,131072ULL,4,(char *)"pDM_Odm->RFCalibrateInfo.OFDM_index[ODM_RF_PATH_B]=%d, pDM_Odm->RealBbSwingIdx[ODM_RF_PATH_B]=%d\n",(int)rtldm->ofdm_index[1],final_swing_idx[1]);
      #line 1450 
      rtl_set_bbreg(hw,3612U,4292870144U,txscaling_tbl[tmp_1]);
    }
  }
  else 
    #line 1453 
    if (method == (unsigned int)MIX_MODE) {
      #line 1454 
      _rtl_dbg_trace(rtlpriv,131072ULL,4,(char *)"pDM_Odm->DefaultOfdmIndex=%d, pDM_Odm->Absolute_OFDMSwingIdx[RFPath]=%d, RF_Path = %d\n",(int)rtldm->default_ofdm_index,(int)rtldm->absolute_ofdm_swing_idx[(int)rf_path],(int)rf_path);
      #line 1460 
      final_ofdm_swing_index = (signed char)((int)rtldm->default_ofdm_index + (int)rtldm->absolute_ofdm_swing_idx[(int)rf_path]);
      #line 1463 
      if ((unsigned int)rf_path == 0U) 
        #line 1465 
        if ((int)final_ofdm_swing_index > (int)pwr_tracking_limit) {
          #line 1466 
          rtldm->remnant_cck_idx = (signed char)((int)final_ofdm_swing_index - (int)pwr_tracking_limit);
          #line 1472 
          rtldm->remnant_ofdm_swing_idx[(int)rf_path] = (signed char)((int)final_ofdm_swing_index - (int)pwr_tracking_limit);
          #line 1476 
          rtl_set_bbreg(hw,3100U,4292870144U,txscaling_tbl[(int)pwr_tracking_limit]);
          #line 1479 
          rtldm->modify_txagc_flag_path_a = (_Bool)1;
          #line 1482 
          rtl8821ae_phy_set_txpower_level_by_path(hw,(unsigned char)((int)rtlphy->current_channel),(unsigned char)0);
          #line 1486 
          _rtl_dbg_trace(rtlpriv,131072ULL,4,(char *)"******Path_A Over BBSwing Limit ,PwrTrackingLimit = %d ,Remnant TxAGC Value = %d\n",(int)pwr_tracking_limit,(int)rtldm->remnant_ofdm_swing_idx[(int)rf_path]);
        }
        else 
          #line 1490 
          if ((int)final_ofdm_swing_index < 0) {
            #line 1491 
            rtldm->remnant_cck_idx = final_ofdm_swing_index;
            #line 1493 
            rtldm->remnant_ofdm_swing_idx[(int)rf_path] = final_ofdm_swing_index;
            #line 1496 
            rtl_set_bbreg(hw,3100U,4292870144U,txscaling_tbl[0]);
            #line 1499 
            rtldm->modify_txagc_flag_path_a = (_Bool)1;
            #line 1502 
            rtl8821ae_phy_set_txpower_level_by_path(hw,(unsigned char)((int)rtlphy->current_channel),(unsigned char)0);
            #line 1505 
            _rtl_dbg_trace(rtlpriv,131072ULL,4,(char *)"******Path_A Lower then BBSwing lower bound  0 , Remnant TxAGC Value = %d\n",(int)rtldm->remnant_ofdm_swing_idx[(int)rf_path]);
          }
          else {
            #line 1509 
            rtl_set_bbreg(hw,3100U,4292870144U,txscaling_tbl[(int)((unsigned char)final_ofdm_swing_index)]);
            #line 1512 
            _rtl_dbg_trace(rtlpriv,131072ULL,4,(char *)"******Path_A Compensate with BBSwing, Final_OFDM_Swing_Index = %d\n",(int)final_ofdm_swing_index);
            #line 1516 
            if ((int)rtldm->modify_txagc_flag_path_a != 0) {
              #line 1517 
              rtldm->remnant_cck_idx = (signed char)0;
              #line 1518 
              rtldm->remnant_ofdm_swing_idx[(int)rf_path] = (signed char)0;
              #line 1521 
              rtl8821ae_phy_set_txpower_level_by_path(hw,(unsigned char)((int)rtlphy->current_channel),(unsigned char)0);
              #line 1523 
              rtldm->modify_txagc_flag_path_a = (_Bool)0;
              #line 1525 
              _rtl_dbg_trace(rtlpriv,131072ULL,4,(char *)"******Path_A pDM_Odm->Modify_TxAGC_Flag = FALSE\n");
            }
          }
      #line 1532 
      if ((unsigned int)rf_path == 1U) 
        #line 1533 
        if ((int)final_ofdm_swing_index > (int)pwr_tracking_limit) {
          #line 1534 
          rtldm->remnant_ofdm_swing_idx[(int)rf_path] = (signed char)((int)final_ofdm_swing_index - (int)pwr_tracking_limit);
          #line 1538 
          rtl_set_bbreg(hw,3612U,4292870144U,txscaling_tbl[(int)pwr_tracking_limit]);
          #line 1542 
          rtldm->modify_txagc_flag_path_b = (_Bool)1;
          #line 1545 
          rtl8821ae_phy_set_txpower_level_by_path(hw,(unsigned char)((int)rtlphy->current_channel),(unsigned char)1);
          #line 1548 
          _rtl_dbg_trace(rtlpriv,131072ULL,4,(char *)"******Path_B Over BBSwing Limit , PwrTrackingLimit = %d , Remnant TxAGC Value = %d\n",(int)pwr_tracking_limit,(int)rtldm->remnant_ofdm_swing_idx[(int)rf_path]);
        }
        else 
          #line 1552 
          if ((int)final_ofdm_swing_index < 0) {
            #line 1553 
            rtldm->remnant_ofdm_swing_idx[(int)rf_path] = final_ofdm_swing_index;
            #line 1556 
            rtl_set_bbreg(hw,3612U,4292870144U,txscaling_tbl[0]);
            #line 1559 
            rtldm->modify_txagc_flag_path_b = (_Bool)1;
            #line 1562 
            rtl8821ae_phy_set_txpower_level_by_path(hw,(unsigned char)((int)rtlphy->current_channel),(unsigned char)1);
            #line 1565 
            _rtl_dbg_trace(rtlpriv,131072ULL,4,(char *)"******Path_B Lower then BBSwing lower bound  0 , Remnant TxAGC Value = %d\n",(int)rtldm->remnant_ofdm_swing_idx[(int)rf_path]);
          }
          else {
            #line 1569 
            rtl_set_bbreg(hw,3612U,4292870144U,txscaling_tbl[(int)((unsigned char)final_ofdm_swing_index)]);
            #line 1572 
            _rtl_dbg_trace(rtlpriv,131072ULL,4,(char *)"******Path_B Compensate with BBSwing ,Final_OFDM_Swing_Index = %d\n",(int)final_ofdm_swing_index);
            #line 1576 
            if ((int)rtldm->modify_txagc_flag_path_b != 0) {
              #line 1577 
              rtldm->remnant_ofdm_swing_idx[(int)rf_path] = (signed char)0;
              #line 1580 
              rtl8821ae_phy_set_txpower_level_by_path(hw,(unsigned char)((int)rtlphy->current_channel),(unsigned char)1);
              #line 1583 
              rtldm->modify_txagc_flag_path_b = (_Bool)0;
              #line 1586 
              _rtl_dbg_trace(rtlpriv,131072ULL,4,(char *)"******Path_B pDM_Odm->Modify_TxAGC_Flag = FALSE\n");
            }
          }
    }
    else 
         #line 1592 
         return;
  #line 1593 
  return;
}

#line 1596  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/dm.c"
void rtl8812ae_dm_txpower_tracking_callback_thermalmeter(struct ieee80211_hw *hw)
{
  #line 1603 
  u8 delta;
  #line 1603 
  u8 delta_lck;
  #line 1603 
  u8 delta_iqk;
  #line 1613 
  u8 *delta_swing_table_idx_tup_a;
  #line 1614 
  u8 *delta_swing_table_idx_tdown_a;
  #line 1615 
  u8 *delta_swing_table_idx_tup_b;
  #line 1616 
  u8 *delta_swing_table_idx_tdown_b;
  #line 1599 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 1600 
  struct rtl_efuse *rtlefuse = & ((struct rtl_priv *)hw->priv)->efuse;
  #line 1601 
  struct rtl_dm *rtldm = & ((struct rtl_priv *)hw->priv)->dm;
  #line 1602 
  struct rtl_hal *rtlhal = & ((struct rtl_priv *)hw->priv)->rtlhal;
  #line 1603 
  u8 thermal_value = (unsigned char)0U;
  #line 1603 
  u8 p = (unsigned char)0U;
  #line 1603 
  u8 i = (unsigned char)0U;
  #line 1604 
  u8 thermal_value_avg_count = (unsigned char)0U;
  #line 1605 
  u32 thermal_value_avg = 0U;
  #line 1607 
  u8 ofdm_min_index = (unsigned char)6U;
  #line 1609 
  u8 index_for_channel = (unsigned char)0U;
  #line 1619 
  rtl8812ae_get_delta_swing_table(hw,& delta_swing_table_idx_tup_a,& delta_swing_table_idx_tdown_a,& delta_swing_table_idx_tup_b,& delta_swing_table_idx_tdown_b);
  #line 1625 
  rtldm->txpower_trackinginit = (_Bool)1;
  #line 1627 
  _rtl_dbg_trace(rtlpriv,131072ULL,4,(char *)"pDM_Odm->BbSwingIdxCckBase: %d, pDM_Odm->BbSwingIdxOfdmBase[A]:%d, pDM_Odm->DefaultOfdmIndex: %d\n",(int)rtldm->swing_idx_cck_base,(int)rtldm->swing_idx_ofdm_base[0],(int)rtldm->default_ofdm_index);
  #line 1633 
  thermal_value = (unsigned char)rtl_get_rfreg(hw,(enum radio_path)RF90_PATH_A,66U,64512U);
  #line 1636 
  _rtl_dbg_trace(rtlpriv,131072ULL,4,(char *)"Thermal Meter = 0x%X, EFUSE Thermal Base = 0x%X\n",(int)thermal_value,(int)rtlefuse->eeprom_thermalmeter);
  #line 1639 
  if (((unsigned int)rtldm->txpower_track_control == 0U || (unsigned int)rtlefuse->eeprom_thermalmeter == 0U) || (unsigned int)rtlefuse->eeprom_thermalmeter == 255U) 
    #line 1642 
    return;
  #line 1646 
  if ((int)rtlhal->reloadtxpowerindex != 0) 
                                            #line 1647 
                                            _rtl_dbg_trace(rtlpriv,131072ULL,4,(char *)"reload ofdm index for band switch\n");
  #line 1651 
  rtldm->thermalvalue_avg[(int)rtldm->thermalvalue_avg_index] = thermal_value;
  #line 1652 
  rtldm->thermalvalue_avg_index = (u8)((int)rtldm->thermalvalue_avg_index + 1);
  #line 1653 
  if ((unsigned int)rtldm->thermalvalue_avg_index == 4U) 
                                                         #line 1655 
                                                         rtldm->thermalvalue_avg_index = (unsigned char)0U;
  #line 1657 
  i = (unsigned char)0U;
  #line 1657 
  while ((unsigned int)i <= 3U) {
    #line 1658 
    if ((unsigned int)rtldm->thermalvalue_avg[(int)i] != 0U) {
      #line 1659 
      thermal_value_avg = (unsigned int)rtldm->thermalvalue_avg[(int)i] + thermal_value_avg;
      #line 1660 
      thermal_value_avg_count = (u8)((int)thermal_value_avg_count + 1);
    }
    #line 1657 
    i = (u8)((int)i + 1);
  }
  #line 1664 
  if ((unsigned int)thermal_value_avg_count != 0U) {
    #line 1665 
    thermal_value = (unsigned char)(thermal_value_avg / (unsigned int)thermal_value_avg_count);
    #line 1667 
    _rtl_dbg_trace(rtlpriv,131072ULL,4,(char *)"AVG Thermal Meter = 0x%X, EFUSE Thermal Base = 0x%X\n",(int)thermal_value,(int)rtlefuse->eeprom_thermalmeter);
  }
  #line 1676 
  if ((int)rtldm->thermalvalue < (int)thermal_value) 
                                                     #line 1676 
                                                     delta = (unsigned char)((int)thermal_value - (int)rtldm->thermalvalue); else 
                                                                    #line 1676 
                                                                    delta = (unsigned char)((int)rtldm->thermalvalue - (int)thermal_value);
  #line 1679 
  if ((int)rtldm->thermalvalue_lck < (int)thermal_value) 
                                                         #line 1679 
                                                         delta_lck = (unsigned char)((int)thermal_value - (int)rtldm->thermalvalue_lck); else 
                                                                    #line 1679 
                                                                    delta_lck = (unsigned char)((int)rtldm->thermalvalue_lck - (int)thermal_value);
  #line 1682 
  if ((int)rtldm->thermalvalue_iqk < (int)thermal_value) 
                                                         #line 1682 
                                                         delta_iqk = (unsigned char)((int)thermal_value - (int)rtldm->thermalvalue_iqk); else 
                                                                    #line 1682 
                                                                    delta_iqk = (unsigned char)((int)rtldm->thermalvalue_iqk - (int)thermal_value);
  #line 1686 
  _rtl_dbg_trace(rtlpriv,131072ULL,4,(char *)"(delta, delta_LCK, delta_IQK) = (%d, %d, %d)\n",(int)delta,(int)delta_lck,(int)delta_iqk);
  #line 1693 
  if ((unsigned int)delta_lck > 7U) {
    #line 1694 
    _rtl_dbg_trace(rtlpriv,131072ULL,4,(char *)"delta_LCK(%d) >= Threshold_IQK(%d)\n",(int)delta_lck,8);
    #line 1697 
    rtldm->thermalvalue_lck = thermal_value;
    #line 1698 
    rtl8821ae_phy_lc_calibrate(hw);
  }
  #line 1703 
  if ((unsigned int)delta != 0U && (unsigned int)rtldm->txpower_track_control != 0U) {
    #line 1707 
    if ((int)rtlefuse->eeprom_thermalmeter < (int)thermal_value) 
                                                                 #line 1707 
                                                                 delta = (unsigned char)((int)thermal_value - (int)rtlefuse->eeprom_thermalmeter); else 
                                                                    #line 1707 
                                                                    delta = (unsigned char)((int)rtlefuse->eeprom_thermalmeter - (int)thermal_value);
    #line 1711 
    if ((unsigned int)delta > 29U) 
                                   #line 1712 
                                   delta = (unsigned char)29U;
    #line 1716 
    if ((int)rtlefuse->eeprom_thermalmeter < (int)thermal_value) {
      #line 1717 
      _rtl_dbg_trace(rtlpriv,131072ULL,4,(char *)"delta_swing_table_idx_tup_a[%d] = %d\n",(int)delta,(int)*(delta_swing_table_idx_tup_a + (unsigned long)delta));
      #line 1720 
      rtldm->delta_power_index_last[0] = rtldm->delta_power_index[0];
      #line 1722 
      rtldm->delta_power_index[0] = (signed char)*(delta_swing_table_idx_tup_a + (unsigned long)delta);
      #line 1725 
      rtldm->absolute_ofdm_swing_idx[0] = (signed char)*(delta_swing_table_idx_tup_a + (unsigned long)delta);
      #line 1729 
      _rtl_dbg_trace(rtlpriv,131072ULL,4,(char *)"******Temp is higher and pDM_Odm->Absolute_OFDMSwingIdx[ODM_RF_PATH_A] = %d\n",(int)rtldm->absolute_ofdm_swing_idx[0]);
      #line 1733 
      _rtl_dbg_trace(rtlpriv,131072ULL,4,(char *)"delta_swing_table_idx_tup_b[%d] = %d\n",(int)delta,(int)*(delta_swing_table_idx_tup_b + (unsigned long)delta));
      #line 1736 
      rtldm->delta_power_index_last[1] = rtldm->delta_power_index[1];
      #line 1738 
      rtldm->delta_power_index[1] = (signed char)*(delta_swing_table_idx_tup_b + (unsigned long)delta);
      #line 1741 
      rtldm->absolute_ofdm_swing_idx[1] = (signed char)*(delta_swing_table_idx_tup_b + (unsigned long)delta);
      #line 1745 
      _rtl_dbg_trace(rtlpriv,131072ULL,4,(char *)"******Temp is higher and pDM_Odm->Absolute_OFDMSwingIdx[ODM_RF_PATH_B] = %d\n",(int)rtldm->absolute_ofdm_swing_idx[1]);
    }
    else {
      #line 1749 
      _rtl_dbg_trace(rtlpriv,131072ULL,4,(char *)"delta_swing_table_idx_tdown_a[%d] = %d\n",(int)delta,(int)*(delta_swing_table_idx_tdown_a + (unsigned long)delta));
      #line 1753 
      rtldm->delta_power_index_last[0] = rtldm->delta_power_index[0];
      #line 1755 
      rtldm->delta_power_index[0] = (signed char)(- ((int)*(delta_swing_table_idx_tdown_a + (unsigned long)delta)));
      #line 1758 
      rtldm->absolute_ofdm_swing_idx[0] = (signed char)(- ((int)*(delta_swing_table_idx_tdown_a + (unsigned long)delta)));
      #line 1761 
      _rtl_dbg_trace(rtlpriv,131072ULL,4,(char *)"******Temp is lower and pDM_Odm->Absolute_OFDMSwingIdx[ODM_RF_PATH_A] = %d\n",(int)rtldm->absolute_ofdm_swing_idx[0]);
      #line 1765 
      _rtl_dbg_trace(rtlpriv,131072ULL,4,(char *)"deltaSwingTableIdx_TDOWN_B[%d] = %d\n",(int)delta,(int)*(delta_swing_table_idx_tdown_b + (unsigned long)delta));
      #line 1769 
      rtldm->delta_power_index_last[1] = rtldm->delta_power_index[1];
      #line 1771 
      rtldm->delta_power_index[1] = (signed char)(- ((int)*(delta_swing_table_idx_tdown_b + (unsigned long)delta)));
      #line 1774 
      rtldm->absolute_ofdm_swing_idx[1] = (signed char)(- ((int)*(delta_swing_table_idx_tdown_b + (unsigned long)delta)));
      #line 1778 
      _rtl_dbg_trace(rtlpriv,131072ULL,4,(char *)"******Temp is lower and pDM_Odm->Absolute_OFDMSwingIdx[ODM_RF_PATH_B] = %d\n",(int)rtldm->absolute_ofdm_swing_idx[1]);
    }
    #line 1783 
    p = (unsigned char)0U;
    #line 1783 
    while ((unsigned int)p <= 1U) {
      {
        #line 1784 
        int tmp_0;
        #line 1800 
        int tmp_1;
        #line 1824 
        int tmp_2;
        #line 1784 
        if ((unsigned int)p == 0U) 
                                   #line 1784 
                                   tmp_0 = 65; else 
                                                    #line 1784 
                                                    tmp_0 = 66;
        #line 1784 
        ;
        #line 1784 
        _rtl_dbg_trace(rtlpriv,131072ULL,4,(char *)"============================= [Path-%c]Calculating PowerIndexOffset =============================\n",tmp_0);
        #line 1788 
        if ((int)rtldm->delta_power_index[(int)p] == (int)rtldm->delta_power_index_last[(int)p]) 
          #line 1792 
          rtldm->power_index_offset[(int)p] = (signed char)0; else 
                                                                   #line 1794 
                                                                   rtldm->power_index_offset[(int)p] = (signed char)((int)rtldm->delta_power_index[(int)p] - (int)rtldm->delta_power_index_last[(int)p]);
        #line 1800 
        ;
        #line 1800 
        ;
        #line 1800 
        ;
        #line 1800 
        if ((unsigned int)p == 0U) 
                                   #line 1800 
                                   tmp_1 = 65; else 
                                                    #line 1800 
                                                    tmp_1 = 66;
        #line 1800 
        ;
        #line 1800 
        _rtl_dbg_trace(rtlpriv,131072ULL,4,(char *)"[Path-%c] PowerIndexOffset(%d) =DeltaPowerIndex(%d) -DeltaPowerIndexLast(%d)\n",tmp_1,(int)rtldm->power_index_offset[(int)p],(int)rtldm->delta_power_index[(int)p],(int)rtldm->delta_power_index_last[(int)p]);
        #line 1807 
        rtldm->ofdm_index[(int)p] = (signed char)((int)rtldm->swing_idx_ofdm_base[(int)p] + (int)rtldm->power_index_offset[(int)p]);
        #line 1810 
        rtldm->cck_index = (signed char)((int)rtldm->swing_idx_cck_base + (int)rtldm->power_index_offset[(int)p]);
        #line 1814 
        rtldm->swing_idx_cck = (unsigned char)rtldm->cck_index;
        #line 1815 
        rtldm->swing_idx_ofdm[(int)p] = (unsigned char)rtldm->ofdm_index[(int)p];
        #line 1819 
        _rtl_dbg_trace(rtlpriv,131072ULL,4,(char *)"The \'CCK\' final index(%d) = BaseIndex(%d) + PowerIndexOffset(%d)\n",(int)rtldm->swing_idx_cck,(int)rtldm->swing_idx_cck_base,(int)rtldm->power_index_offset[(int)p]);
        #line 1824 
        ;
        #line 1824 
        ;
        #line 1824 
        if ((unsigned int)p == 0U) 
                                   #line 1824 
                                   tmp_2 = 65; else 
                                                    #line 1824 
                                                    tmp_2 = 66;
        #line 1824 
        ;
        #line 1824 
        ;
        #line 1824 
        _rtl_dbg_trace(rtlpriv,131072ULL,4,(char *)"The \'OFDM\' final index(%d) = BaseIndex[%c](%d) + PowerIndexOffset(%d)\n",(int)rtldm->swing_idx_ofdm[(int)p],tmp_2,(int)rtldm->swing_idx_ofdm_base[(int)p],(int)rtldm->power_index_offset[(int)p]);
        #line 1833 
        if ((int)rtldm->ofdm_index[(int)p] > 36) 
                                                 #line 1834 
                                                 rtldm->ofdm_index[(int)p] = (signed char)36;
        else 
          #line 1835 
          if ((int)rtldm->ofdm_index[(int)p] < (int)ofdm_min_index) 
                                                                    #line 1836 
                                                                    rtldm->ofdm_index[(int)p] = (signed char)ofdm_min_index;
      }
      #line 1783 
      p = (u8)((int)p + 1);
    }
    #line 1838 
    _rtl_dbg_trace(rtlpriv,131072ULL,4,(char *)"\n\n====================================================================================\n");
    #line 1840 
    if ((int)rtldm->cck_index > 36) 
                                    #line 1841 
                                    rtldm->cck_index = (signed char)36;
    else 
      #line 1842 
      if ((int)rtldm->cck_index < 0) 
                                     #line 1843 
                                     rtldm->cck_index = (signed char)0;
  }
  else {
    #line 1845 
    _rtl_dbg_trace(rtlpriv,131072ULL,4,(char *)"The thermal meter is unchanged or TxPowerTracking OFF(%d): ThermalValue: %d , pDM_Odm->RFCalibrateInfo.ThermalValue: %d\n",(int)rtldm->txpower_track_control,(int)thermal_value,(int)rtldm->thermalvalue);
    #line 1851 
    p = (unsigned char)0U;
    #line 1851 
    while ((unsigned int)p <= 1U) {
      #line 1852 
      rtldm->power_index_offset[(int)p] = (signed char)0;
      #line 1851 
      p = (u8)((int)p + 1);
    }
  }
  #line 1855 
  _rtl_dbg_trace(rtlpriv,131072ULL,4,(char *)"TxPowerTracking: [CCK] Swing Current Index: %d,Swing Base Index: %d\n",(int)rtldm->cck_index,(int)rtldm->swing_idx_cck_base);
  #line 1858 
  p = (unsigned char)0U;
  #line 1858 
  while ((unsigned int)p <= 1U) {
    #line 1859 
    int tmp_3;
    #line 1859 
    ;
    #line 1859 
    if ((unsigned int)p == 0U) 
                               #line 1859 
                               tmp_3 = 65; else 
                                                #line 1859 
                                                tmp_3 = 66;
    #line 1859 
    ;
    #line 1859 
    ;
    #line 1859 
    _rtl_dbg_trace(rtlpriv,131072ULL,4,(char *)"TxPowerTracking: [OFDM] Swing Current Index: %d,Swing Base Index[%c]: %d\n",(int)rtldm->ofdm_index[(int)p],tmp_3,(int)rtldm->swing_idx_ofdm_base[(int)p]);
    #line 1858 
    p = (u8)((int)p + 1);
  }
  #line 1866 
  if (((int)rtldm->power_index_offset[0] != 0 || (int)rtldm->power_index_offset[1] != 0) && (unsigned int)rtldm->txpower_track_control != 0U) {
    #line 1879 
    if ((int)rtldm->thermalvalue < (int)thermal_value) {
      #line 1880 
      _rtl_dbg_trace(rtlpriv,131072ULL,4,(char *)"Temperature Increasing(A): delta_pi: %d , delta_t: %d, Now_t: %d,EFUSE_t: %d, Last_t: %d\n",(int)rtldm->power_index_offset[0],(int)delta,(int)thermal_value,(int)rtlefuse->eeprom_thermalmeter,(int)rtldm->thermalvalue);
      #line 1887 
      _rtl_dbg_trace(rtlpriv,131072ULL,4,(char *)"Temperature Increasing(B): delta_pi: %d ,delta_t: %d, Now_t: %d, EFUSE_t: %d, Last_t: %d\n",(int)rtldm->power_index_offset[1],(int)delta,(int)thermal_value,(int)rtlefuse->eeprom_thermalmeter,(int)rtldm->thermalvalue);
    }
    else 
      #line 1893 
      if ((int)rtldm->thermalvalue > (int)thermal_value) {
        #line 1894 
        _rtl_dbg_trace(rtlpriv,131072ULL,4,(char *)"Temperature Decreasing(A): delta_pi: %d , delta_t: %d, Now_t: %d, EFUSE_t: %d, Last_t: %d\n",(int)rtldm->power_index_offset[0],(int)delta,(int)thermal_value,(int)rtlefuse->eeprom_thermalmeter,(int)rtldm->thermalvalue);
        #line 1901 
        _rtl_dbg_trace(rtlpriv,131072ULL,4,(char *)"Temperature Decreasing(B): delta_pi: %d , delta_t: %d, Now_t: %d, EFUSE_t: %d, Last_t: %d\n",(int)rtldm->power_index_offset[1],(int)delta,(int)thermal_value,(int)rtlefuse->eeprom_thermalmeter,(int)rtldm->thermalvalue);
      }
    #line 1909 
    if ((int)rtlefuse->eeprom_thermalmeter < (int)thermal_value) {
      #line 1910 
      _rtl_dbg_trace(rtlpriv,131072ULL,4,(char *)"Temperature(%d) higher than PG value(%d)\n",(int)thermal_value,(int)rtlefuse->eeprom_thermalmeter);
      #line 1914 
      _rtl_dbg_trace(rtlpriv,131072ULL,4,(char *)"**********Enter POWER Tracking MIX_MODE**********\n");
      #line 1916 
      p = (unsigned char)0U;
      #line 1916 
      while ((unsigned int)p <= 1U) {
        #line 1917 
        rtl8812ae_dm_txpwr_track_set_pwr(hw,(enum pwr_track_control_method)MIX_MODE,(unsigned char)((int)p),(unsigned char)0);
        #line 1916 
        p = (u8)((int)p + 1);
      }
    }
    else {
      #line 1920 
      _rtl_dbg_trace(rtlpriv,131072ULL,4,(char *)"Temperature(%d) lower than PG value(%d)\n",(int)thermal_value,(int)rtlefuse->eeprom_thermalmeter);
      #line 1924 
      _rtl_dbg_trace(rtlpriv,131072ULL,4,(char *)"**********Enter POWER Tracking MIX_MODE**********\n");
      #line 1926 
      p = (unsigned char)0U;
      #line 1926 
      while ((unsigned int)p <= 1U) {
        #line 1927 
        rtl8812ae_dm_txpwr_track_set_pwr(hw,(enum pwr_track_control_method)MIX_MODE,(unsigned char)((int)p),(unsigned char)((int)index_for_channel));
        #line 1926 
        p = (u8)((int)p + 1);
      }
    }
    #line 1931 
    rtldm->swing_idx_cck_base = rtldm->swing_idx_cck;
    #line 1932 
    p = (unsigned char)0U;
    #line 1932 
    while ((unsigned int)p <= 1U) {
      #line 1933 
      rtldm->swing_idx_ofdm_base[(int)p] = rtldm->swing_idx_ofdm[(int)p];
      #line 1932 
      p = (u8)((int)p + 1);
    }
    #line 1936 
    _rtl_dbg_trace(rtlpriv,131072ULL,4,(char *)"pDM_Odm->RFCalibrateInfo.ThermalValue =%d ThermalValue= %d\n",(int)rtldm->thermalvalue,(int)thermal_value);
    #line 1940 
    rtldm->thermalvalue = thermal_value;
  }
  #line 1944 
  if ((unsigned int)delta_iqk > 7U) 
                                    #line 1945 
                                    rtl8812ae_do_iqk(hw,(unsigned char)((int)delta_iqk),(unsigned char)((int)thermal_value),(unsigned char)8);
  #line 1947 
  _rtl_dbg_trace(rtlpriv,131072ULL,4,(char *)"<===rtl8812ae_dm_txpower_tracking_callback_thermalmeter\n");
  #line 1948 
  return;
}

#line 1951  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/dm.c"
static void rtl8821ae_get_delta_swing_table(struct ieee80211_hw *hw, u8 **up_a, u8 **down_a, u8 **up_b, u8 **down_b)
{
  #line 1954 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 1955 
  struct rtl_phy *rtlphy = & rtlpriv->phy;
  #line 1956 
  struct rtl_dm *rtldm = & ((struct rtl_priv *)hw->priv)->dm;
  #line 1957 
  u8 channel = rtlphy->current_channel;
  #line 1958 
  u8 rate = rtldm->tx_rate;
  #line 1960 
  if ((unsigned int)channel + 255U <= 13U) 
    #line 1961 
    if ((unsigned int)rate <= 3U) {
      #line 1962 
      *up_a = (u8 *)(& rtl8821ae_delta_swing_table_idx_24gccka_p);
      #line 1963 
      *down_a = (u8 *)(& rtl8821ae_delta_swing_table_idx_24gccka_n);
      #line 1964 
      *up_b = (u8 *)(& rtl8821ae_delta_swing_table_idx_24gcckb_p);
      #line 1965 
      *down_b = (u8 *)(& rtl8821ae_delta_swing_table_idx_24gcckb_n);
    }
    else {
      #line 1967 
      *up_a = (u8 *)(& rtl8821ae_delta_swing_table_idx_24ga_p);
      #line 1968 
      *down_a = (u8 *)(& rtl8821ae_delta_swing_table_idx_24ga_n);
      #line 1969 
      *up_b = (u8 *)(& rtl8821ae_delta_swing_table_idx_24gb_p);
      #line 1970 
      *down_b = (u8 *)(& rtl8821ae_delta_swing_table_idx_24gb_n);
    }
  else 
    #line 1972 
    if ((unsigned int)channel + 220U <= 28U) {
      #line 1973 
      *up_a = (u8 *)(rtl8821ae_delta_swing_table_idx_5ga_p);
      #line 1974 
      *down_a = (u8 *)(rtl8821ae_delta_swing_table_idx_5ga_n);
      #line 1975 
      *up_b = (u8 *)(rtl8821ae_delta_swing_table_idx_5gb_p);
      #line 1976 
      *down_b = (u8 *)(rtl8821ae_delta_swing_table_idx_5gb_n);
    }
    else 
      #line 1977 
      if ((unsigned int)channel + 156U <= 40U) {
        #line 1978 
        *up_a = (u8 *)(& rtl8821ae_delta_swing_table_idx_5ga_p[1]);
        #line 1979 
        *down_a = (u8 *)(& rtl8821ae_delta_swing_table_idx_5ga_n[1]);
        #line 1980 
        *up_b = (u8 *)(& rtl8821ae_delta_swing_table_idx_5gb_p[1]);
        #line 1981 
        *down_b = (u8 *)(& rtl8821ae_delta_swing_table_idx_5gb_n[1]);
      }
      else 
        #line 1982 
        if ((unsigned int)channel + 107U <= 24U) {
          #line 1983 
          *up_a = (u8 *)(& rtl8821ae_delta_swing_table_idx_5ga_p[2]);
          #line 1984 
          *down_a = (u8 *)(& rtl8821ae_delta_swing_table_idx_5ga_n[2]);
          #line 1985 
          *up_b = (u8 *)(& rtl8821ae_delta_swing_table_idx_5gb_p[2]);
          #line 1986 
          *down_b = (u8 *)(& rtl8821ae_delta_swing_table_idx_5gb_n[2]);
        }
        else {
          #line 1988 
          *up_a = (u8 *)(& rtl8818e_delta_swing_table_idx_24gb_p);
          #line 1989 
          *down_a = (u8 *)(& rtl8818e_delta_swing_table_idx_24gb_n);
          #line 1990 
          *up_b = (u8 *)(& rtl8818e_delta_swing_table_idx_24gb_p);
          #line 1991 
          *down_b = (u8 *)(& rtl8818e_delta_swing_table_idx_24gb_n);
        }
  #line 1993 
  return;
}

#line 2014  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/dm.c"
void rtl8821ae_dm_txpwr_track_set_pwr(struct ieee80211_hw *hw, enum pwr_track_control_method method, u8 rf_path, u8 channel_mapped_index)
{
  #line 2021 
  u32 final_swing_idx[1U];
  #line 2018 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 2019 
  struct rtl_dm *rtldm = & ((struct rtl_priv *)hw->priv)->dm;
  #line 2020 
  struct rtl_phy *rtlphy = & rtlpriv->phy;
  #line 2022 
  u8 pwr_tracking_limit = (unsigned char)26U;
  #line 2023 
  u8 tx_rate = (unsigned char)255U;
  #line 2024 
  s8 final_ofdm_swing_index = (signed char)0;
  #line 2026 
  if ((unsigned int)rtldm->tx_rate != 255U) 
                                            #line 2027 
                                            tx_rate = rtl8821ae_hw_rate_to_mrate(hw,(unsigned char)((int)rtldm->tx_rate));
  #line 2029 
  _rtl_dbg_trace(rtlpriv,131072ULL,4,(char *)"===>%s\n",(char *)"rtl8821ae_dm_txpwr_track_set_pwr");
  #line 2031 
  if ((unsigned int)tx_rate != 255U) 
    #line 2033 
    if ((unsigned int)tx_rate + 254U <= 20U) 
                                             #line 2034 
                                             pwr_tracking_limit = (unsigned char)32U;
    else 
      #line 2036 
      if ((unsigned int)tx_rate + 244U <= 84U) 
                                               #line 2037 
                                               pwr_tracking_limit = (unsigned char)30U;
      else 
        #line 2038 
        if ((unsigned int)tx_rate == 108U) 
                                           #line 2039 
                                           pwr_tracking_limit = (unsigned char)28U;
        else 
          #line 2042 
          if ((unsigned int)tx_rate + 128U <= 2U) 
                                                  #line 2043 
                                                  pwr_tracking_limit = (unsigned char)34U;
          else 
            #line 2045 
            if ((unsigned int)tx_rate + 125U <= 1U) 
                                                    #line 2046 
                                                    pwr_tracking_limit = (unsigned char)30U;
            else 
              #line 2048 
              if ((unsigned int)tx_rate + 123U <= 2U) 
                                                      #line 2049 
                                                      pwr_tracking_limit = (unsigned char)28U;
              else 
                #line 2052 
                if ((unsigned int)tx_rate + 112U <= 2U) 
                                                        #line 2054 
                                                        pwr_tracking_limit = (unsigned char)34U;
                else 
                  #line 2056 
                  if ((unsigned int)tx_rate + 109U <= 1U) 
                                                          #line 2058 
                                                          pwr_tracking_limit = (unsigned char)30U;
                  else 
                    #line 2060 
                    if ((unsigned int)tx_rate + 107U <= 1U) 
                                                            #line 2062 
                                                            pwr_tracking_limit = (unsigned char)28U;
                    else 
                      #line 2063 
                      if ((unsigned int)tx_rate == 151U) 
                                                         #line 2064 
                                                         pwr_tracking_limit = (unsigned char)26U;
                      else 
                        #line 2065 
                        if ((unsigned int)tx_rate == 152U) 
                                                           #line 2066 
                                                           pwr_tracking_limit = (unsigned char)24U;
                        else 
                          #line 2067 
                          if ((unsigned int)tx_rate == 153U) 
                                                             #line 2068 
                                                             pwr_tracking_limit = (unsigned char)22U; else 
                                                                    #line 2070 
                                                                    pwr_tracking_limit = (unsigned char)24U;
  #line 2072 
  _rtl_dbg_trace(rtlpriv,131072ULL,4,(char *)"TxRate=0x%x, PwrTrackingLimit=%d\n",(int)tx_rate,(int)pwr_tracking_limit);
  #line 2076 
  if (method == (unsigned int)BBSWING) {
    #line 2077 
    _rtl_dbg_trace(rtlpriv,131072ULL,4,(char *)"===>%s\n",(char *)"rtl8821ae_dm_txpwr_track_set_pwr");
    #line 2079 
    if ((unsigned int)rf_path == 0U) {
      #line 2083 
      int tmp;
      #line 2083 
      if ((int)pwr_tracking_limit < (int)rtldm->ofdm_index[0]) 
                                                               #line 2083 
                                                               tmp = (int)pwr_tracking_limit; else 
                                                                    #line 2083 
                                                                    tmp = (int)rtldm->ofdm_index[0];
      #line 2080 
      final_swing_idx[0] = (unsigned int)tmp;
      #line 2085 
      _rtl_dbg_trace(rtlpriv,131072ULL,4,(char *)"pDM_Odm->RFCalibrateInfo.OFDM_index[ODM_RF_PATH_A]=%d,pDM_Odm->RealBbSwingIdx[ODM_RF_PATH_A]=%d\n",(int)rtldm->ofdm_index[0],final_swing_idx[0]);
      #line 2090 
      rtl_set_bbreg(hw,3100U,4292870144U,txscaling_tbl[final_swing_idx[0]]);
    }
  }
  else 
    #line 2093 
    if (method == (unsigned int)MIX_MODE) {
      #line 2094 
      _rtl_dbg_trace(rtlpriv,131072ULL,4,(char *)"pDM_Odm->DefaultOfdmIndex=%d,pDM_Odm->Absolute_OFDMSwingIdx[RFPath]=%d, RF_Path = %d\n",(int)rtldm->default_ofdm_index,(int)rtldm->absolute_ofdm_swing_idx[(int)rf_path],(int)rf_path);
      #line 2100 
      final_ofdm_swing_index = (signed char)((int)rtldm->default_ofdm_index + (int)rtldm->absolute_ofdm_swing_idx[(int)rf_path]);
      #line 2104 
      if ((unsigned int)rf_path == 0U) 
        #line 2105 
        if ((int)final_ofdm_swing_index > (int)pwr_tracking_limit) {
          #line 2106 
          rtldm->remnant_cck_idx = (signed char)((int)final_ofdm_swing_index - (int)pwr_tracking_limit);
          #line 2110 
          rtldm->remnant_ofdm_swing_idx[(int)rf_path] = (signed char)((int)final_ofdm_swing_index - (int)pwr_tracking_limit);
          #line 2114 
          rtl_set_bbreg(hw,3100U,4292870144U,txscaling_tbl[(int)pwr_tracking_limit]);
          #line 2118 
          rtldm->modify_txagc_flag_path_a = (_Bool)1;
          #line 2121 
          rtl8821ae_phy_set_txpower_level_by_path(hw,(unsigned char)((int)rtlphy->current_channel),(unsigned char)0);
          #line 2125 
          _rtl_dbg_trace(rtlpriv,131072ULL,4,(char *)" ******Path_A Over BBSwing Limit , PwrTrackingLimit = %d , Remnant TxAGC Value = %d\n",(int)pwr_tracking_limit,(int)rtldm->remnant_ofdm_swing_idx[(int)rf_path]);
        }
        else 
          #line 2129 
          if ((int)final_ofdm_swing_index < 0) {
            #line 2130 
            rtldm->remnant_cck_idx = final_ofdm_swing_index;
            #line 2132 
            rtldm->remnant_ofdm_swing_idx[(int)rf_path] = final_ofdm_swing_index;
            #line 2135 
            rtl_set_bbreg(hw,3100U,4292870144U,txscaling_tbl[0]);
            #line 2138 
            rtldm->modify_txagc_flag_path_a = (_Bool)1;
            #line 2141 
            rtl8821ae_phy_set_txpower_level_by_path(hw,(unsigned char)((int)rtlphy->current_channel),(unsigned char)0);
            #line 2144 
            _rtl_dbg_trace(rtlpriv,131072ULL,4,(char *)"******Path_A Lower then BBSwing lower bound  0 , Remnant TxAGC Value = %d\n",(int)rtldm->remnant_ofdm_swing_idx[(int)rf_path]);
          }
          else {
            #line 2148 
            rtl_set_bbreg(hw,3100U,4292870144U,txscaling_tbl[(int)((unsigned char)final_ofdm_swing_index)]);
            #line 2151 
            _rtl_dbg_trace(rtlpriv,131072ULL,4,(char *)"******Path_A Compensate with BBSwing ,Final_OFDM_Swing_Index = %d\n",(int)final_ofdm_swing_index);
            #line 2155 
            if ((int)rtldm->modify_txagc_flag_path_a != 0) {
              #line 2156 
              rtldm->remnant_cck_idx = (signed char)0;
              #line 2157 
              rtldm->remnant_ofdm_swing_idx[(int)rf_path] = (signed char)0;
              #line 2160 
              rtl8821ae_phy_set_txpower_level_by_path(hw,(unsigned char)((int)rtlphy->current_channel),(unsigned char)0);
              #line 2163 
              rtldm->modify_txagc_flag_path_a = (_Bool)0;
              #line 2165 
              _rtl_dbg_trace(rtlpriv,131072ULL,4,(char *)"******Path_A pDM_Odm->Modify_TxAGC_Flag= FALSE\n");
            }
          }
    }
    else 
         #line 2172 
         return;
  #line 2173 
  return;
}

#line 2176  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/dm.c"
void rtl8821ae_dm_txpower_tracking_callback_thermalmeter(struct ieee80211_hw *hw)
{
  #line 2185 
  u8 delta;
  #line 2185 
  u8 delta_lck;
  #line 2185 
  u8 delta_iqk;
  #line 2196 
  u8 *delta_swing_table_idx_tup_a;
  #line 2197 
  u8 *delta_swing_table_idx_tdown_a;
  #line 2198 
  u8 *delta_swing_table_idx_tup_b;
  #line 2199 
  u8 *delta_swing_table_idx_tdown_b;
  #line 2179 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 2180 
  struct rtl_efuse *rtlefuse = & ((struct rtl_priv *)hw->priv)->efuse;
  #line 2181 
  struct rtl_dm *rtldm = & ((struct rtl_priv *)hw->priv)->dm;
  #line 2182 
  struct rtl_hal *rtlhal = & ((struct rtl_priv *)hw->priv)->rtlhal;
  #line 2183 
  struct rtl_phy *rtlphy = & rtlpriv->phy;
  #line 2185 
  u8 thermal_value = (unsigned char)0U;
  #line 2185 
  u8 p = (unsigned char)0U;
  #line 2185 
  u8 i = (unsigned char)0U;
  #line 2186 
  u8 thermal_value_avg_count = (unsigned char)0U;
  #line 2187 
  u32 thermal_value_avg = 0U;
  #line 2189 
  u8 ofdm_min_index = (unsigned char)6U;
  #line 2191 
  u8 index_for_channel = (unsigned char)0U;
  #line 2202 
  rtl8821ae_get_delta_swing_table(hw,& delta_swing_table_idx_tup_a,& delta_swing_table_idx_tdown_a,& delta_swing_table_idx_tup_b,& delta_swing_table_idx_tdown_b);
  #line 2207 
  rtldm->txpower_trackinginit = (_Bool)1;
  #line 2209 
  _rtl_dbg_trace(rtlpriv,131072ULL,4,(char *)"===>%s,\n pDM_Odm->BbSwingIdxCckBase: %d,pDM_Odm->BbSwingIdxOfdmBase[A]:%d, pDM_Odm->DefaultOfdmIndex: %d\n",(char *)"rtl8821ae_dm_txpower_tracking_callback_thermalmeter",(int)rtldm->swing_idx_cck_base,(int)rtldm->swing_idx_ofdm_base[0],(int)rtldm->default_ofdm_index);
  #line 2216 
  thermal_value = (unsigned char)rtl_get_rfreg(hw,(enum radio_path)RF90_PATH_A,66U,64512U);
  #line 2218 
  if (((unsigned int)rtldm->txpower_track_control == 0U || (unsigned int)rtlefuse->eeprom_thermalmeter == 0U) || (unsigned int)rtlefuse->eeprom_thermalmeter == 255U) 
    #line 2221 
    return;
  #line 2225 
  if ((int)rtlhal->reloadtxpowerindex != 0) 
                                            #line 2226 
                                            _rtl_dbg_trace(rtlpriv,131072ULL,4,(char *)"reload ofdm index for band switch\n");
  #line 2231 
  rtldm->thermalvalue_avg[(int)rtldm->thermalvalue_avg_index] = thermal_value;
  #line 2232 
  rtldm->thermalvalue_avg_index = (u8)((int)rtldm->thermalvalue_avg_index + 1);
  #line 2233 
  if ((unsigned int)rtldm->thermalvalue_avg_index == 4U) 
                                                         #line 2235 
                                                         rtldm->thermalvalue_avg_index = (unsigned char)0U;
  #line 2237 
  i = (unsigned char)0U;
  #line 2237 
  while ((unsigned int)i <= 3U) {
    #line 2238 
    if ((unsigned int)rtldm->thermalvalue_avg[(int)i] != 0U) {
      #line 2239 
      thermal_value_avg = (unsigned int)rtldm->thermalvalue_avg[(int)i] + thermal_value_avg;
      #line 2240 
      thermal_value_avg_count = (u8)((int)thermal_value_avg_count + 1);
    }
    #line 2237 
    i = (u8)((int)i + 1);
  }
  #line 2244 
  if ((unsigned int)thermal_value_avg_count != 0U) {
    #line 2245 
    thermal_value = (unsigned char)(thermal_value_avg / (unsigned int)thermal_value_avg_count);
    #line 2247 
    _rtl_dbg_trace(rtlpriv,131072ULL,4,(char *)"AVG Thermal Meter = 0x%X, EFUSE Thermal Base = 0x%X\n",(int)thermal_value,(int)rtlefuse->eeprom_thermalmeter);
  }
  #line 2256 
  if ((int)rtldm->thermalvalue < (int)thermal_value) 
                                                     #line 2256 
                                                     delta = (unsigned char)((int)thermal_value - (int)rtldm->thermalvalue); else 
                                                                    #line 2256 
                                                                    delta = (unsigned char)((int)rtldm->thermalvalue - (int)thermal_value);
  #line 2259 
  if ((int)rtldm->thermalvalue_lck < (int)thermal_value) 
                                                         #line 2259 
                                                         delta_lck = (unsigned char)((int)thermal_value - (int)rtldm->thermalvalue_lck); else 
                                                                    #line 2259 
                                                                    delta_lck = (unsigned char)((int)rtldm->thermalvalue_lck - (int)thermal_value);
  #line 2262 
  if ((int)rtldm->thermalvalue_iqk < (int)thermal_value) 
                                                         #line 2262 
                                                         delta_iqk = (unsigned char)((int)thermal_value - (int)rtldm->thermalvalue_iqk); else 
                                                                    #line 2262 
                                                                    delta_iqk = (unsigned char)((int)rtldm->thermalvalue_iqk - (int)thermal_value);
  #line 2266 
  _rtl_dbg_trace(rtlpriv,131072ULL,4,(char *)"(delta, delta_LCK, delta_IQK) = (%d, %d, %d)\n",(int)delta,(int)delta_lck,(int)delta_iqk);
  #line 2272 
  if ((unsigned int)delta_lck > 7U) {
    #line 2273 
    _rtl_dbg_trace(rtlpriv,131072ULL,4,(char *)"delta_LCK(%d) >= Threshold_IQK(%d)\n",(int)delta_lck,8);
    #line 2276 
    rtldm->thermalvalue_lck = thermal_value;
    #line 2277 
    rtl8821ae_phy_lc_calibrate(hw);
  }
  #line 2282 
  if ((unsigned int)delta != 0U && (unsigned int)rtldm->txpower_track_control != 0U) {
    #line 2286 
    if ((int)rtlefuse->eeprom_thermalmeter < (int)thermal_value) 
                                                                 #line 2286 
                                                                 delta = (unsigned char)((int)thermal_value - (int)rtlefuse->eeprom_thermalmeter); else 
                                                                    #line 2286 
                                                                    delta = (unsigned char)((int)rtlefuse->eeprom_thermalmeter - (int)thermal_value);
    #line 2290 
    if ((unsigned int)delta > 36U) 
                                   #line 2291 
                                   delta = (unsigned char)36U;
    #line 2295 
    if ((int)rtlefuse->eeprom_thermalmeter < (int)thermal_value) {
      #line 2296 
      _rtl_dbg_trace(rtlpriv,131072ULL,4,(char *)"delta_swing_table_idx_tup_a[%d] = %d\n",(int)delta,(int)*(delta_swing_table_idx_tup_a + (unsigned long)delta));
      #line 2299 
      rtldm->delta_power_index_last[0] = rtldm->delta_power_index[0];
      #line 2301 
      rtldm->delta_power_index[0] = (signed char)*(delta_swing_table_idx_tup_a + (unsigned long)delta);
      #line 2304 
      rtldm->absolute_ofdm_swing_idx[0] = (signed char)*(delta_swing_table_idx_tup_a + (unsigned long)delta);
      #line 2308 
      _rtl_dbg_trace(rtlpriv,131072ULL,4,(char *)"******Temp is higher and pDM_Odm->Absolute_OFDMSwingIdx[ODM_RF_PATH_A] = %d\n",(int)rtldm->absolute_ofdm_swing_idx[0]);
    }
    else {
      #line 2312 
      _rtl_dbg_trace(rtlpriv,131072ULL,4,(char *)"delta_swing_table_idx_tdown_a[%d] = %d\n",(int)delta,(int)*(delta_swing_table_idx_tdown_a + (unsigned long)delta));
      #line 2316 
      rtldm->delta_power_index_last[0] = rtldm->delta_power_index[0];
      #line 2318 
      rtldm->delta_power_index[0] = (signed char)(- ((int)*(delta_swing_table_idx_tdown_a + (unsigned long)delta)));
      #line 2321 
      rtldm->absolute_ofdm_swing_idx[0] = (signed char)(- ((int)*(delta_swing_table_idx_tdown_a + (unsigned long)delta)));
      #line 2324 
      _rtl_dbg_trace(rtlpriv,131072ULL,4,(char *)"******Temp is lower and pDM_Odm->Absolute_OFDMSwingIdx[ODM_RF_PATH_A] = %d\n",(int)rtldm->absolute_ofdm_swing_idx[0]);
    }
    #line 2329 
    p = (unsigned char)0U;
    #line 2329 
    while ((unsigned int)p == 0U) {
      {
        #line 2330 
        int tmp_0;
        #line 2346 
        int tmp_1;
        #line 2370 
        int tmp_2;
        #line 2330 
        if ((unsigned int)p == 0U) 
                                   #line 2330 
                                   tmp_0 = 65; else 
                                                    #line 2330 
                                                    tmp_0 = 66;
        #line 2330 
        ;
        #line 2330 
        _rtl_dbg_trace(rtlpriv,131072ULL,4,(char *)"\n\n================================ [Path-%c]Calculating PowerIndexOffset ================================\n",tmp_0);
        #line 2336 
        if ((int)rtldm->delta_power_index[(int)p] == (int)rtldm->delta_power_index_last[(int)p]) 
          #line 2339 
          rtldm->power_index_offset[(int)p] = (signed char)0; else 
                                                                   #line 2341 
                                                                   rtldm->power_index_offset[(int)p] = (signed char)((int)rtldm->delta_power_index[(int)p] - (int)rtldm->delta_power_index_last[(int)p]);
        #line 2346 
        ;
        #line 2346 
        ;
        #line 2346 
        ;
        #line 2346 
        if ((unsigned int)p == 0U) 
                                   #line 2346 
                                   tmp_1 = 65; else 
                                                    #line 2346 
                                                    tmp_1 = 66;
        #line 2346 
        ;
        #line 2346 
        _rtl_dbg_trace(rtlpriv,131072ULL,4,(char *)"[Path-%c] PowerIndexOffset(%d) = DeltaPowerIndex(%d) - DeltaPowerIndexLast(%d)\n",tmp_1,(int)rtldm->power_index_offset[(int)p],(int)rtldm->delta_power_index[(int)p],(int)rtldm->delta_power_index_last[(int)p]);
        #line 2353 
        rtldm->ofdm_index[(int)p] = (signed char)((int)rtldm->swing_idx_ofdm_base[(int)p] + (int)rtldm->power_index_offset[(int)p]);
        #line 2356 
        rtldm->cck_index = (signed char)((int)rtldm->swing_idx_cck_base + (int)rtldm->power_index_offset[(int)p]);
        #line 2360 
        rtldm->swing_idx_cck = (unsigned char)rtldm->cck_index;
        #line 2361 
        rtldm->swing_idx_ofdm[(int)p] = (unsigned char)rtldm->ofdm_index[(int)p];
        #line 2365 
        _rtl_dbg_trace(rtlpriv,131072ULL,4,(char *)"The \'CCK\' final index(%d) = BaseIndex(%d) + PowerIndexOffset(%d)\n",(int)rtldm->swing_idx_cck,(int)rtldm->swing_idx_cck_base,(int)rtldm->power_index_offset[(int)p]);
        #line 2370 
        ;
        #line 2370 
        ;
        #line 2370 
        if ((unsigned int)p == 0U) 
                                   #line 2370 
                                   tmp_2 = 65; else 
                                                    #line 2370 
                                                    tmp_2 = 66;
        #line 2370 
        ;
        #line 2370 
        ;
        #line 2370 
        _rtl_dbg_trace(rtlpriv,131072ULL,4,(char *)"The \'OFDM\' final index(%d) = BaseIndex[%c](%d) + PowerIndexOffset(%d)\n",(int)rtldm->swing_idx_ofdm[(int)p],tmp_2,(int)rtldm->swing_idx_ofdm_base[(int)p],(int)rtldm->power_index_offset[(int)p]);
        #line 2379 
        if ((int)rtldm->ofdm_index[(int)p] > 36) 
                                                 #line 2380 
                                                 rtldm->ofdm_index[(int)p] = (signed char)36;
        else 
          #line 2381 
          if ((int)rtldm->ofdm_index[(int)p] < (int)ofdm_min_index) 
                                                                    #line 2382 
                                                                    rtldm->ofdm_index[(int)p] = (signed char)ofdm_min_index;
      }
      #line 2329 
      p = (u8)((int)p + 1);
    }
    #line 2384 
    _rtl_dbg_trace(rtlpriv,131072ULL,4,(char *)"\n\n========================================================================================================\n");
    #line 2386 
    if ((int)rtldm->cck_index > 36) 
                                    #line 2387 
                                    rtldm->cck_index = (signed char)36;
    else 
      #line 2388 
      if ((int)rtldm->cck_index < 0) 
                                     #line 2389 
                                     rtldm->cck_index = (signed char)0;
  }
  else {
    #line 2391 
    _rtl_dbg_trace(rtlpriv,131072ULL,4,(char *)"The thermal meter is unchanged or TxPowerTracking OFF(%d):ThermalValue: %d , pDM_Odm->RFCalibrateInfo.ThermalValue: %d\n",(int)rtldm->txpower_track_control,(int)thermal_value,(int)rtldm->thermalvalue);
    #line 2397 
    p = (unsigned char)0U;
    #line 2397 
    while ((unsigned int)p == 0U) {
      #line 2398 
      rtldm->power_index_offset[(int)p] = (signed char)0;
      #line 2397 
      p = (u8)((int)p + 1);
    }
  }
  #line 2400 
  _rtl_dbg_trace(rtlpriv,131072ULL,4,(char *)"TxPowerTracking: [CCK] Swing Current Index: %d, Swing Base Index: %d\n",(int)rtldm->cck_index,(int)rtldm->swing_idx_cck_base);
  #line 2404 
  p = (unsigned char)0U;
  #line 2404 
  while ((unsigned int)p == 0U) {
    #line 2405 
    int tmp_3;
    #line 2405 
    ;
    #line 2405 
    if ((unsigned int)p == 0U) 
                               #line 2405 
                               tmp_3 = 65; else 
                                                #line 2405 
                                                tmp_3 = 66;
    #line 2405 
    ;
    #line 2405 
    ;
    #line 2405 
    _rtl_dbg_trace(rtlpriv,131072ULL,4,(char *)"TxPowerTracking: [OFDM] Swing Current Index: %d, Swing Base Index[%c]: %d\n",(int)rtldm->ofdm_index[(int)p],tmp_3,(int)rtldm->swing_idx_ofdm_base[(int)p]);
    #line 2404 
    p = (u8)((int)p + 1);
  }
  #line 2412 
  if (((int)rtldm->power_index_offset[0] != 0 || (int)rtldm->power_index_offset[1] != 0) && (unsigned int)rtldm->txpower_track_control != 0U) {
    #line 2425 
    if ((int)rtldm->thermalvalue < (int)thermal_value) 
                                                       #line 2426 
                                                       _rtl_dbg_trace(rtlpriv,131072ULL,4,(char *)"Temperature Increasing(A): delta_pi: %d , delta_t: %d,Now_t: %d, EFUSE_t: %d, Last_t: %d\n",(int)rtldm->power_index_offset[0],(int)delta,(int)thermal_value,(int)rtlefuse->eeprom_thermalmeter,(int)rtldm->thermalvalue);
    else 
      #line 2432 
      if ((int)rtldm->thermalvalue > (int)thermal_value) 
                                                         #line 2433 
                                                         _rtl_dbg_trace(rtlpriv,131072ULL,4,(char *)"Temperature Decreasing(A): delta_pi: %d , delta_t: %d, Now_t: %d, EFUSE_t: %d, Last_t: %d\n",(int)rtldm->power_index_offset[0],(int)delta,(int)thermal_value,(int)rtlefuse->eeprom_thermalmeter,(int)rtldm->thermalvalue);
    #line 2441 
    if ((int)rtlefuse->eeprom_thermalmeter < (int)thermal_value) {
      #line 2442 
      _rtl_dbg_trace(rtlpriv,131072ULL,4,(char *)"Temperature(%d) higher than PG value(%d)\n",(int)thermal_value,(int)rtlefuse->eeprom_thermalmeter);
      #line 2446 
      _rtl_dbg_trace(rtlpriv,131072ULL,4,(char *)"****Enter POWER Tracking MIX_MODE****\n");
      #line 2448 
      p = (unsigned char)0U;
      #line 2448 
      while ((unsigned int)p == 0U) {
        #line 2449 
        rtl8821ae_dm_txpwr_track_set_pwr(hw,(enum pwr_track_control_method)MIX_MODE,(unsigned char)((int)p),(unsigned char)((int)index_for_channel));
        #line 2448 
        p = (u8)((int)p + 1);
      }
    }
    else {
      #line 2452 
      _rtl_dbg_trace(rtlpriv,131072ULL,4,(char *)"Temperature(%d) lower than PG value(%d)\n",(int)thermal_value,(int)rtlefuse->eeprom_thermalmeter);
      #line 2456 
      _rtl_dbg_trace(rtlpriv,131072ULL,4,(char *)"*****Enter POWER Tracking MIX_MODE*****\n");
      #line 2458 
      p = (unsigned char)0U;
      #line 2458 
      while ((unsigned int)p == 0U) {
        #line 2459 
        rtl8812ae_dm_txpwr_track_set_pwr(hw,(enum pwr_track_control_method)MIX_MODE,(unsigned char)((int)p),(unsigned char)((int)index_for_channel));
        #line 2458 
        p = (u8)((int)p + 1);
      }
    }
    #line 2463 
    rtldm->swing_idx_cck_base = rtldm->swing_idx_cck;
    #line 2464 
    p = (unsigned char)0U;
    #line 2464 
    while ((unsigned int)p == 0U) {
      #line 2465 
      rtldm->swing_idx_ofdm_base[(int)p] = rtldm->swing_idx_ofdm[(int)p];
      #line 2464 
      p = (u8)((int)p + 1);
    }
    #line 2467 
    _rtl_dbg_trace(rtlpriv,131072ULL,4,(char *)"pDM_Odm->RFCalibrateInfo.ThermalValue = %d ThermalValue= %d\n",(int)rtldm->thermalvalue,(int)thermal_value);
    #line 2471 
    rtldm->thermalvalue = thermal_value;
  }
  #line 2476 
  if ((unsigned int)delta_iqk > 7U) 
    #line 2477 
    if ((unsigned int)rtlphy->lck_inprogress == 0U) {
      #line 2478 
      cif_spin_lock_iqk_lock_of_rtl_locks_0(& rtlpriv->locks.iqk_lock);
      #line 2479 
      rtlphy->lck_inprogress = (unsigned char)1U;
      #line 2480 
      cif_spin_unlock_iqk_lock_of_rtl_locks_0(& rtlpriv->locks.iqk_lock);
      #line 2482 
      rtl8821ae_do_iqk(hw,(unsigned char)((int)delta_iqk),(unsigned char)((int)thermal_value),(unsigned char)8);
      #line 2484 
      cif_spin_lock_iqk_lock_of_rtl_locks_0(& rtlpriv->locks.iqk_lock);
      #line 2485 
      rtlphy->lck_inprogress = (unsigned char)0U;
      #line 2486 
      cif_spin_unlock_iqk_lock_of_rtl_locks_0(& rtlpriv->locks.iqk_lock);
    }
  #line 2490 
  _rtl_dbg_trace(rtlpriv,131072ULL,4,(char *)"<===%s\n",(char *)"rtl8821ae_dm_txpower_tracking_callback_thermalmeter");
  #line 2491 
  return;
}

#line 2493  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/dm.c"
void rtl8821ae_dm_check_txpower_tracking_thermalmeter(struct ieee80211_hw *hw)
{
  #line 2495 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 2496 
  if ((unsigned int)rtlpriv->dm.tm_trigger == 0U) {
    #line 2497 
    rtl_set_rfreg(hw,(enum radio_path)RF90_PATH_A,66U,196608U,3U);
    #line 2499 
    _rtl_dbg_trace(rtlpriv,131072ULL,4,(char *)"Trigger 8821ae Thermal Meter!!\n");
    #line 2501 
    rtlpriv->dm.tm_trigger = (unsigned char)1U;
    #line 2502 
    return;
  }
  else {
    #line 2504 
    _rtl_dbg_trace(rtlpriv,131072ULL,4,(char *)"Schedule TxPowerTracking !!\n");
    #line 2507 
    rtl8821ae_dm_txpower_tracking_callback_thermalmeter(hw);
    #line 2508 
    rtlpriv->dm.tm_trigger = (unsigned char)0U;
  }
  #line 2510 
  return;
}

#line 2512  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/dm.c"
static void rtl8821ae_dm_refresh_rate_adaptive_mask(struct ieee80211_hw *hw)
{
  #line 2514 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 2515 
  struct rtl_hal *rtlhal = & ((struct rtl_priv *)hw->priv)->rtlhal;
  #line 2516 
  struct rtl_mac *mac = & ((struct rtl_priv *)hw->priv)->mac80211;
  #line 2517 
  struct rate_adaptive *p_ra = & rtlpriv->ra;
  #line 2518 
  u32 low_rssithresh_for_ra = (unsigned int)p_ra->low2high_rssi_thresh_for_ra40m;
  #line 2519 
  u32 high_rssithresh_for_ra = p_ra->high_rssi_thresh_for_ra;
  #line 2520 
  u8 go_up_gap = (unsigned char)5U;
  #line 2521 
  struct ieee80211_sta *sta = (struct ieee80211_sta *)0;
  #line 2523 
  if ((int)is_hal_stop(rtlhal) != 0) {
    #line 2524 
    _rtl_dbg_trace(rtlpriv,2048ULL,4,(char *)"driver is going to unload\n");
    #line 2526 
    return;
  }
  #line 2529 
  if (! rtlpriv->dm.useramask) {
    #line 2530 
    _rtl_dbg_trace(rtlpriv,2048ULL,4,(char *)"driver does not control rate adaptive mask\n");
    #line 2532 
    return;
  }
  #line 2535 
  if (mac->link_state == (unsigned int)MAC80211_LINKED && mac->opmode == (unsigned int)NL80211_IFTYPE_STATION) {
    #line 2537 
    switch ((int)p_ra->pre_ratr_state) {
      #line 2538 
      case 2: 
              #line 2538 
      ;
      #line 2539 
      high_rssithresh_for_ra = (unsigned int)go_up_gap + high_rssithresh_for_ra;
      #line 2540 
      break;
      #line 2541 
      case 3: 
              #line 2541 
      ;
      #line 2542 
      high_rssithresh_for_ra = (unsigned int)go_up_gap + high_rssithresh_for_ra;
      #line 2543 
      low_rssithresh_for_ra = (unsigned int)go_up_gap + low_rssithresh_for_ra;
      #line 2544 
      break;
      #line 2545 
      default: 
               #line 2545 
      ;
      #line 2546 
      break;
    }
    #line 2549 
    if (rtlpriv->dm.undec_sm_pwdb > (long)high_rssithresh_for_ra) 
                                                                  #line 2551 
                                                                  p_ra->ratr_state = (unsigned char)1U;
    else 
      #line 2552 
      if (rtlpriv->dm.undec_sm_pwdb > (long)low_rssithresh_for_ra) 
                                                                   #line 2554 
                                                                   p_ra->ratr_state = (unsigned char)2U; else 
                                                                    #line 2556 
                                                                    p_ra->ratr_state = (unsigned char)3U;
    #line 2558 
    if ((int)p_ra->pre_ratr_state != (int)p_ra->ratr_state) {
      #line 2559 
      _rtl_dbg_trace(rtlpriv,2048ULL,4,(char *)"RSSI = %ld\n",rtlpriv->dm.undec_sm_pwdb);
      #line 2562 
      _rtl_dbg_trace(rtlpriv,2048ULL,4,(char *)"RSSI_LEVEL = %d\n",(int)p_ra->ratr_state);
      #line 2564 
      _rtl_dbg_trace(rtlpriv,2048ULL,4,(char *)"PreState = %d, CurState = %d\n",(int)p_ra->pre_ratr_state,(int)p_ra->ratr_state);
      #line 2568 
      rcu_read_lock();
      #line 2569 
      sta = rtl_find_sta(hw,(u8 *)(& mac->bssid));
      #line 2570 
      if (sta != (struct ieee80211_sta *)0) 
                                            #line 2571 
                                            (*(((rtlpriv->cfg)->ops)->update_rate_tbl))(hw,sta,(unsigned char)((int)p_ra->ratr_state),(_Bool)1);
      #line 2573 
      rcu_read_unlock();
      #line 2575 
      p_ra->pre_ratr_state = p_ra->ratr_state;
    }
  }
  #line 2578 
  return;
}

#line 2580  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/dm.c"
static void rtl8821ae_dm_refresh_basic_rate_mask(struct ieee80211_hw *hw)
{
  #line 2585 
  u8 stage;
  #line 2582 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 2583 
  struct dig_t *dm_digtable = & rtlpriv->dm_digtable;
  #line 2584 
  struct rtl_mac *mac = & rtlpriv->mac80211;
  #line 2586 
  u8 cur_stage = (unsigned char)0U;
  #line 2587 
  u16 basic_rate = (unsigned short)31U;
  #line 2589 
  if (mac->link_state <= (unsigned int)MAC80211_LINKING) 
                                                         #line 2590 
                                                         cur_stage = (unsigned char)0U;
  else 
    #line 2591 
    if ((unsigned int)dm_digtable->rssi_val_min <= 24U) 
                                                        #line 2592 
                                                        cur_stage = (unsigned char)1U;
    else 
      #line 2593 
      if ((unsigned int)dm_digtable->rssi_val_min > 30U) 
                                                         #line 2594 
                                                         cur_stage = (unsigned char)3U; else 
                                                                    #line 2596 
                                                                    cur_stage = (unsigned char)2U;
  #line 2598 
  if ((int)cur_stage != (int)stage) 
    #line 2599 
    if ((unsigned int)cur_stage == 1U) {
      #line 2600 
      basic_rate = (unsigned short)(((unsigned int)basic_rate == mac->basic_rates) & (int)basic_rate);
      #line 2601 
      (*(((rtlpriv->cfg)->ops)->set_hw_reg))(hw,(unsigned char)2,(u8 *)(& basic_rate));
    }
    else 
      #line 2603 
      if ((unsigned int)cur_stage == 3U && (unsigned int)stage + 255U <= 1U) 
        #line 2604 
        (*(((rtlpriv->cfg)->ops)->set_hw_reg))(hw,(unsigned char)2,(u8 *)(& mac->basic_rates));
  #line 2608 
  stage = cur_stage;
  #line 2609 
  return;
}

#line 2611  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/dm.c"
static void rtl8821ae_dm_edca_choose_traffic_idx(struct ieee80211_hw *hw, u64 cur_tx_bytes, u64 cur_rx_bytes, bool b_bias_on_rx, bool *pb_is_cur_rdl_state)
{
  #line 2616 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 2618 
  if ((int)b_bias_on_rx != 0) 
    #line 2619 
    if (cur_rx_bytes * 4ULL < cur_tx_bytes) {
      #line 2620 
      *pb_is_cur_rdl_state = (_Bool)0;
      #line 2621 
      _rtl_dbg_trace(rtlpriv,2097152ULL,4,(char *)"Uplink Traffic\n");
    }
    else {
      #line 2624 
      *pb_is_cur_rdl_state = (_Bool)1;
      #line 2625 
      _rtl_dbg_trace(rtlpriv,2097152ULL,4,(char *)"Balance Traffic\n");
    }
  else 
    #line 2629 
    if (cur_tx_bytes * 4ULL < cur_rx_bytes) {
      #line 2630 
      *pb_is_cur_rdl_state = (_Bool)1;
      #line 2631 
      _rtl_dbg_trace(rtlpriv,2097152ULL,4,(char *)"Downlink\tTraffic\n");
    }
    else {
      #line 2634 
      *pb_is_cur_rdl_state = (_Bool)0;
      #line 2635 
      _rtl_dbg_trace(rtlpriv,2097152ULL,4,(char *)"Balance Traffic\n");
    }
  #line 2639 
  return;
}

#line 2642  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/dm.c"
static void rtl8821ae_dm_check_edca_turbo(struct ieee80211_hw *hw)
{
  #line 2644 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 2645 
  struct rtl_mac *mac = & ((struct rtl_priv *)hw->priv)->mac80211;
  #line 2646 
  struct rtl_dm *rtldm = & ((struct rtl_priv *)hw->priv)->dm;
  #line 2649 
  u64 cur_tx_ok_cnt = 0ULL;
  #line 2650 
  u64 cur_rx_ok_cnt = 0ULL;
  #line 2651 
  u32 edca_be_ul = 6202411U;
  #line 2652 
  u32 edca_be_dl = 6202411U;
  #line 2653 
  u32 edca_be = 6202411U;
  #line 2654 
  u8 iot_peer = (unsigned char)0U;
  #line 2655 
  bool *pb_is_cur_rdl_state = (bool *)0;
  #line 2656 
  bool b_bias_on_rx = (_Bool)0;
  #line 2657 
  bool b_edca_turbo_on = (_Bool)0;
  #line 2659 
  _rtl_dbg_trace(rtlpriv,2097152ULL,4,(char *)"rtl8821ae_dm_check_edca_turbo=====>\n");
  #line 2661 
  ;
  #line 2661 
  _rtl_dbg_trace(rtlpriv,2097152ULL,4,(char *)"Original BE PARAM: 0x%x\n",rtl_read_dword(rtlpriv,1288U));
  #line 2665 
  if ((unsigned int)rtlpriv->dm.dbginfo.num_non_be_pkt > 256U) 
                                                               #line 2666 
                                                               rtlpriv->dm.is_any_nonbepkts = (_Bool)1;
  #line 2667 
  rtlpriv->dm.dbginfo.num_non_be_pkt = (unsigned short)0U;
  #line 2673 
  pb_is_cur_rdl_state = & rtlpriv->dm.is_cur_rdlstate;
  #line 2675 
  cur_tx_ok_cnt = rtlpriv->stats.txbytesunicast - rtldm->last_tx_ok_cnt;
  #line 2676 
  cur_rx_ok_cnt = rtlpriv->stats.rxbytesunicast - rtldm->last_rx_ok_cnt;
  #line 2678 
  rtldm->last_tx_ok_cnt = rtlpriv->stats.txbytesunicast;
  #line 2679 
  rtldm->last_rx_ok_cnt = rtlpriv->stats.rxbytesunicast;
  #line 2681 
  iot_peer = (unsigned char)rtlpriv->mac80211.vendor;
  #line 2682 
  b_bias_on_rx = (_Bool)0;
  #line 2683 
  b_edca_turbo_on = (_Bool)((! rtlpriv->dm.is_any_nonbepkts && ! rtlpriv->dm.disable_framebursting) != 0);
  #line 2687 
  if ((unsigned int)rtlpriv->rtlhal.hw_type != 14U) 
    #line 2688 
    if ((unsigned int)iot_peer == 6U && (unsigned int)mac->mode == 16U) {
      #line 2690 
      edca_be_dl = edca_setting_dl[(int)iot_peer];
      #line 2691 
      edca_be_ul = edca_setting_ul[(int)iot_peer];
    }
  #line 2695 
  _rtl_dbg_trace(rtlpriv,2097152ULL,4,(char *)"bIsAnyNonBEPkts : 0x%x  bDisableFrameBursting : 0x%x\n",(int)rtlpriv->dm.is_any_nonbepkts,(int)rtlpriv->dm.disable_framebursting);
  #line 2700 
  _rtl_dbg_trace(rtlpriv,2097152ULL,4,(char *)"bEdcaTurboOn : 0x%x bBiasOnRx : 0x%x\n",(int)b_edca_turbo_on,(int)b_bias_on_rx);
  #line 2704 
  if ((int)b_edca_turbo_on != 0) {
    #line 2705 
    _rtl_dbg_trace(rtlpriv,2097152ULL,4,(char *)"curTxOkCnt : 0x%llx\n",cur_tx_ok_cnt);
    #line 2707 
    _rtl_dbg_trace(rtlpriv,2097152ULL,4,(char *)"curRxOkCnt : 0x%llx\n",cur_rx_ok_cnt);
    #line 2709 
    if ((int)b_bias_on_rx != 0) 
                                #line 2710 
                                rtl8821ae_dm_edca_choose_traffic_idx(hw,cur_tx_ok_cnt,cur_rx_ok_cnt,(_Bool)1,pb_is_cur_rdl_state); else 
                                                                    #line 2713 
                                                                    rtl8821ae_dm_edca_choose_traffic_idx(hw,cur_tx_ok_cnt,cur_rx_ok_cnt,(_Bool)0,pb_is_cur_rdl_state);
    #line 2716 
    if ((int)*pb_is_cur_rdl_state != 0) 
                                        #line 2716 
                                        edca_be = edca_be_dl; else 
                                                                   #line 2716 
                                                                   edca_be = edca_be_ul;
    #line 2718 
    rtl_write_dword(rtlpriv,1288U,edca_be);
    #line 2720 
    _rtl_dbg_trace(rtlpriv,2097152ULL,4,(char *)"EDCA Turbo on: EDCA_BE:0x%x\n",edca_be);
    #line 2723 
    rtlpriv->dm.current_turbo_edca = (_Bool)1;
    #line 2725 
    _rtl_dbg_trace(rtlpriv,2097152ULL,4,(char *)"EDCA_BE_DL : 0x%x  EDCA_BE_UL : 0x%x  EDCA_BE : 0x%x\n",edca_be_dl,edca_be_ul,edca_be);
  }
  else {
    #line 2729 
    if ((int)rtlpriv->dm.current_turbo_edca != 0) {
      #line 2730 
      u8 tmp_0 = (unsigned char)0U;
      #line 2731 
      (*(((rtlpriv->cfg)->ops)->set_hw_reg))(hw,(unsigned char)32,& tmp_0);
    }
    #line 2734 
    rtlpriv->dm.current_turbo_edca = (_Bool)0;
  }
  #line 2737 
  rtlpriv->dm.is_any_nonbepkts = (_Bool)0;
  #line 2738 
  rtldm->last_tx_ok_cnt = rtlpriv->stats.txbytesunicast;
  #line 2739 
  rtldm->last_rx_ok_cnt = rtlpriv->stats.rxbytesunicast;
  #line 2740 
  return;
}

#line 2742  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/dm.c"
static void rtl8821ae_dm_cck_packet_detection_thresh(struct ieee80211_hw *hw)
{
  #line 2746 
  u8 cur_cck_cca_thresh;
  #line 2744 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 2745 
  struct dig_t *dm_digtable = & rtlpriv->dm_digtable;
  #line 2748 
  if (rtlpriv->mac80211.link_state > (unsigned int)MAC80211_LINKING) 
    #line 2749 
    if ((unsigned int)dm_digtable->rssi_val_min > 25U) 
                                                       #line 2750 
                                                       cur_cck_cca_thresh = (unsigned char)205U;
    else 
      #line 2751 
      if ((unsigned int)dm_digtable->rssi_val_min + 245U <= 14U) 
                                                                 #line 2753 
                                                                 cur_cck_cca_thresh = (unsigned char)131U;
      else 
        #line 2755 
        if (rtlpriv->falsealm_cnt.cnt_cck_fail > 1000U) 
                                                        #line 2756 
                                                        cur_cck_cca_thresh = (unsigned char)131U; else 
                                                                    #line 2758 
                                                                    cur_cck_cca_thresh = (unsigned char)64U;
  else 
    #line 2761 
    if (rtlpriv->falsealm_cnt.cnt_cck_fail > 1000U) 
                                                    #line 2762 
                                                    cur_cck_cca_thresh = (unsigned char)131U; else 
                                                                    #line 2764 
                                                                    cur_cck_cca_thresh = (unsigned char)64U;
  #line 2767 
  if ((int)dm_digtable->cur_cck_cca_thres != (int)cur_cck_cca_thresh) 
    #line 2768 
    rtl_write_byte(rtlpriv,2570U,(unsigned char)((int)cur_cck_cca_thresh));
  #line 2771 
  dm_digtable->pre_cck_cca_thres = dm_digtable->cur_cck_cca_thres;
  #line 2772 
  dm_digtable->cur_cck_cca_thres = cur_cck_cca_thresh;
  #line 2773 
  _rtl_dbg_trace(rtlpriv,8192ULL,5,(char *)"CCK cca thresh hold =%x\n",(int)dm_digtable->cur_cck_cca_thres);
  #line 2774 
  return;
}

#line 2777  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/dm.c"
static void rtl8821ae_dm_dynamic_atc_switch(struct ieee80211_hw *hw)
{
  #line 2781 
  u8 crystal_cap;
  #line 2782 
  u32 packet_count;
  #line 2783 
  int cfo_khz_a;
  #line 2783 
  int cfo_khz_b;
  #line 2784 
  int cfo_ave_diff;
  #line 2779 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 2780 
  struct rtl_dm *rtldm = & ((struct rtl_priv *)hw->priv)->dm;
  #line 2783 
  int cfo_ave = 0;
  #line 2783 
  int adjust_xtal = 0;
  #line 2786 
  if (rtlpriv->mac80211.link_state <= (unsigned int)MAC80211_LINKING) {
    #line 2788 
    if (! rtldm->atc_status) {
      #line 2789 
      rtl_set_bbreg(hw,2144U,16384U,1U);
      #line 2790 
      rtldm->atc_status = (_Bool)1;
    }
    #line 2793 
    _rtl_dbg_trace(rtlpriv,8192ULL,4,(char *)"No link!!\n");
    #line 2794 
    _rtl_dbg_trace(rtlpriv,8192ULL,4,(char *)"atc_status = %d\n",(int)rtldm->atc_status);
    #line 2797 
    if (rtldm->crystal_cap != (int)rtlpriv->efuse.crystalcap) {
      #line 2798 
      rtldm->crystal_cap = (int)rtlpriv->efuse.crystalcap;
      #line 2799 
      crystal_cap = (unsigned char)((unsigned int)((unsigned char)rtldm->crystal_cap) & 63U);
      #line 2800 
      crystal_cap = (unsigned char)((unsigned int)crystal_cap & 63U);
      #line 2801 
      if ((unsigned int)rtlpriv->rtlhal.hw_type == 14U) 
                                                        #line 2802 
                                                        rtl_set_bbreg(hw,44U,2146959360U,(unsigned int)((int)crystal_cap | ((int)crystal_cap << 6))); else 
                                                                    #line 2806 
                                                                    rtl_set_bbreg(hw,44U,16773120U,(unsigned int)((int)crystal_cap | ((int)crystal_cap << 6)));
    }
    #line 2810 
    _rtl_dbg_trace(rtlpriv,8192ULL,4,(char *)"crystal_cap = 0x%x\n",rtldm->crystal_cap);
  }
  else {
    #line 2814 
    cfo_khz_a = (rtldm->cfo_tail[0] * 3125) / 1280;
    #line 2815 
    cfo_khz_b = (rtldm->cfo_tail[1] * 3125) / 1280;
    #line 2816 
    packet_count = rtldm->packet_count;
    #line 2819 
    if (rtldm->packet_count_pre == packet_count) {
      #line 2820 
      _rtl_dbg_trace(rtlpriv,8192ULL,4,(char *)"packet counter doesn\'t change\n");
      #line 2822 
      return;
    }
    #line 2825 
    rtldm->packet_count_pre = packet_count;
    #line 2826 
    _rtl_dbg_trace(rtlpriv,8192ULL,4,(char *)"packet counter = %d\n",rtldm->packet_count);
    #line 2831 
    if ((unsigned int)rtlpriv->phy.rf_type == 0U) 
                                                  #line 2832 
                                                  cfo_ave = cfo_khz_a; else 
                                                                    #line 2834 
                                                                    cfo_ave = (cfo_khz_a + cfo_khz_b) >> 1;
    #line 2836 
    _rtl_dbg_trace(rtlpriv,8192ULL,4,(char *)"cfo_khz_a = %dkHz, cfo_khz_b = %dkHz, cfo_ave = %dkHz\n",cfo_khz_a,cfo_khz_b,cfo_ave);
    #line 2841 
    if (rtldm->cfo_ave_pre >= cfo_ave) 
                                       #line 2841 
                                       cfo_ave_diff = rtldm->cfo_ave_pre - cfo_ave; else 
                                                                    #line 2841 
                                                                    cfo_ave_diff = cfo_ave - rtldm->cfo_ave_pre;
    #line 2845 
    if (cfo_ave_diff > 20 && ! rtldm->large_cfo_hit) {
      #line 2846 
      _rtl_dbg_trace(rtlpriv,8192ULL,4,(char *)"first large CFO hit\n");
      #line 2848 
      rtldm->large_cfo_hit = (_Bool)1;
      #line 2849 
      return;
    }
    else 
         #line 2851 
         rtldm->large_cfo_hit = (_Bool)0;
    #line 2853 
    rtldm->cfo_ave_pre = cfo_ave;
    #line 2858 
    if ((- ((int)rtldm->cfo_threshold) <= cfo_ave && (int)rtldm->cfo_threshold >= cfo_ave) && ! rtldm->is_freeze) 
      #line 2861 
      if ((unsigned int)rtldm->cfo_threshold == 10U) {
        #line 2862 
        rtldm->cfo_threshold = (unsigned char)20U;
        #line 2863 
        rtldm->is_freeze = (_Bool)1;
      }
      else 
           #line 2865 
           rtldm->cfo_threshold = (unsigned char)10U;
    #line 2868 
    _rtl_dbg_trace(rtlpriv,8192ULL,4,(char *)"Dynamic threshold = %d\n",(int)rtldm->cfo_threshold);
    #line 2873 
    if ((int)rtldm->cfo_threshold < cfo_ave && rtldm->crystal_cap <= 62) 
      #line 2874 
      adjust_xtal = ((cfo_ave + -10) >> 2) + 1;
    else 
      #line 2875 
      if (- ((int)rtlpriv->dm.cfo_threshold) > cfo_ave && rtlpriv->dm.crystal_cap > 0) 
        #line 2877 
        adjust_xtal = ((cfo_ave + 10) >> 2) + -1;
    #line 2878 
    _rtl_dbg_trace(rtlpriv,8192ULL,4,(char *)"Crystal cap = 0x%x, Crystal cap offset = %d\n",rtldm->crystal_cap,adjust_xtal);
    #line 2883 
    if (adjust_xtal != 0) {
      #line 2884 
      rtldm->is_freeze = (_Bool)0;
      #line 2885 
      rtldm->crystal_cap += adjust_xtal;
      #line 2887 
      if (rtldm->crystal_cap > 63) 
                                   #line 2888 
                                   rtldm->crystal_cap = 63;
      else 
        #line 2889 
        if (rtldm->crystal_cap < 0) 
                                    #line 2890 
                                    rtldm->crystal_cap = 0;
      #line 2892 
      crystal_cap = (unsigned char)((unsigned int)((unsigned char)rtldm->crystal_cap) & 63U);
      #line 2893 
      crystal_cap = (unsigned char)((unsigned int)crystal_cap & 63U);
      #line 2894 
      if ((unsigned int)rtlpriv->rtlhal.hw_type == 14U) 
                                                        #line 2895 
                                                        rtl_set_bbreg(hw,44U,2146959360U,(unsigned int)((int)crystal_cap | ((int)crystal_cap << 6))); else 
                                                                    #line 2899 
                                                                    rtl_set_bbreg(hw,44U,16773120U,(unsigned int)((int)crystal_cap | ((int)crystal_cap << 6)));
      #line 2902 
      _rtl_dbg_trace(rtlpriv,8192ULL,4,(char *)"New crystal cap = 0x%x\n",rtldm->crystal_cap);
    }
  }
  #line 2905 
  return;
}

#line 2909  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/dm.c"
void rtl8821ae_dm_watchdog(struct ieee80211_hw *hw)
{
  #line 2911 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 2912 
  struct rtl_ps_ctl *ppsc = & ((struct rtl_priv *)hw->priv)->psc;
  #line 2913 
  struct rtl_hal *rtlhal = & ((struct rtl_priv *)hw->priv)->rtlhal;
  #line 2914 
  bool fw_current_inpsmode = (_Bool)0;
  #line 2915 
  bool fw_ps_awake = (_Bool)1;
  #line 2917 
  (*(((rtlpriv->cfg)->ops)->get_hw_reg))(hw,(unsigned char)65,(u8 *)(& fw_current_inpsmode));
  #line 2920 
  (*(((rtlpriv->cfg)->ops)->get_hw_reg))(hw,(unsigned char)86,(u8 *)(& fw_ps_awake));
  #line 2923 
  if (ppsc->p2p_ps_info.p2p_ps_mode != (unsigned int)P2P_PS_NONE) 
                                                                  #line 2924 
                                                                  fw_ps_awake = (_Bool)0;
  #line 2926 
  cif_spin_lock_rf_ps_lock_of_rtl_locks_0(& rtlpriv->locks.rf_ps_lock);
  #line 2928 
  if (((! fw_current_inpsmode && (int)fw_ps_awake != 0) && ppsc->rfpwr_state == (unsigned int)ERFON) && ! ppsc->rfchange_inprogress) {
    #line 2930 
    rtl8821ae_dm_common_info_self_update(hw);
    #line 2931 
    rtl8821ae_dm_false_alarm_counter_statistics(hw);
    #line 2932 
    rtl8821ae_dm_check_rssi_monitor(hw);
    #line 2933 
    rtl8821ae_dm_dig(hw);
    #line 2934 
    rtl8821ae_dm_cck_packet_detection_thresh(hw);
    #line 2935 
    rtl8821ae_dm_refresh_rate_adaptive_mask(hw);
    #line 2936 
    rtl8821ae_dm_refresh_basic_rate_mask(hw);
    #line 2937 
    rtl8821ae_dm_check_edca_turbo(hw);
    #line 2938 
    rtl8821ae_dm_dynamic_atc_switch(hw);
    #line 2939 
    if ((unsigned int)rtlhal->hw_type == 14U) 
                                              #line 2940 
                                              rtl8812ae_dm_check_txpower_tracking_thermalmeter(hw); else 
                                                                    #line 2942 
                                                                    rtl8821ae_dm_check_txpower_tracking_thermalmeter(hw);
    #line 2943 
    rtl8821ae_dm_iq_calibrate(hw);
  }
  #line 2945 
  cif_spin_unlock_rf_ps_lock_of_rtl_locks_0(& rtlpriv->locks.rf_ps_lock);
  #line 2947 
  rtlpriv->dm.dbginfo.num_qry_beacon_pkt = (unsigned short)0U;
  #line 2948 
  _rtl_dbg_trace(rtlpriv,8192ULL,3,(char *)"\n");
  #line 2949 
  return;
}

#line 2951  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/dm.c"
void rtl8821ae_dm_set_tx_ant_by_tx_info(struct ieee80211_hw *hw, u8 *pdesc, u32 mac_id)
{
  #line 2954 
  struct rtl_efuse *rtlefuse = & ((struct rtl_priv *)hw->priv)->efuse;
  #line 2955 
  struct rtl_hal *rtlhal = & ((struct rtl_priv *)hw->priv)->rtlhal;
  #line 2956 
  struct rtl_dm *rtldm = & ((struct rtl_priv *)hw->priv)->dm;
  #line 2957 
  struct fast_ant_training *pfat_table = & rtldm->fat_table;
  #line 2958 
  __le32 *pdesc32 = (__le32 *)pdesc;
  #line 2960 
  if ((unsigned int)rtlhal->hw_type != 14U) 
                                            #line 2961 
                                            return;
  #line 2963 
  if ((unsigned int)rtlefuse->antenna_div_type == 1U) 
                                                      #line 2964 
                                                      set_tx_desc_tx_ant(pdesc32,(unsigned int)pfat_table->antsel_a[mac_id]);
  #line 2965 
  return;
}

#line 783  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/rtl8821ae.ko/concurrency safety/0/concurrency safety/weaver/dm.i.aux"
static void cif_spin_lock_iqk_lock_of_rtl_locks_0(spinlock_t *lock)
{
  #line 786 
  ldv_spin_model_lock((char *)"iqk_lock_of_rtl_locks");
  #line 788 
  spin_lock_1(lock);
  #line 789 
  return;
}

#line 792  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/rtl8821ae.ko/concurrency safety/0/concurrency safety/weaver/dm.i.aux"
static void cif_spin_unlock_iqk_lock_of_rtl_locks_0(spinlock_t *lock)
{
  #line 795 
  ldv_spin_model_unlock((char *)"iqk_lock_of_rtl_locks");
  #line 797 
  spin_unlock_1(lock);
  #line 798 
  return;
}

#line 801  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/rtl8821ae.ko/concurrency safety/0/concurrency safety/weaver/dm.i.aux"
static void cif_spin_lock_bh_entry_list_lock_of_rtl_locks(spinlock_t *lock)
{
  #line 804 
  ldv_spin_model_lock((char *)"entry_list_lock_of_rtl_locks");
  #line 806 
  spin_lock_bh_0(lock);
  #line 807 
  return;
}

#line 810  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/rtl8821ae.ko/concurrency safety/0/concurrency safety/weaver/dm.i.aux"
static void cif_spin_unlock_bh_entry_list_lock_of_rtl_locks(spinlock_t *lock)
{
  #line 813 
  ldv_spin_model_unlock((char *)"entry_list_lock_of_rtl_locks");
  #line 815 
  spin_unlock_bh_0(lock);
  #line 816 
  return;
}

#line 819  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/rtl8821ae.ko/concurrency safety/0/concurrency safety/weaver/dm.i.aux"
static void cif_spin_lock_rf_ps_lock_of_rtl_locks_0(spinlock_t *lock)
{
  #line 822 
  ldv_spin_model_lock((char *)"rf_ps_lock_of_rtl_locks");
  #line 824 
  spin_lock_1(lock);
  #line 825 
  return;
}

#line 828  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/rtl8821ae.ko/concurrency safety/0/concurrency safety/weaver/dm.i.aux"
static void cif_spin_unlock_rf_ps_lock_of_rtl_locks_0(spinlock_t *lock)
{
  #line 831 
  ldv_spin_model_unlock((char *)"rf_ps_lock_of_rtl_locks");
  #line 833 
  spin_unlock_1(lock);
  #line 834 
  return;
}

#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
#line 16 
extern struct module __this_module;
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 22 
void *ldv_vzalloc(unsigned long size);
#line 23 
#line 23 
void ldv_vfree(void *addr);
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
#line 798  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/rtl8821ae.ko/concurrency safety/0/concurrency safety/weaver/sw.i.aux"
static void *cif_vzalloc(unsigned long size);
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
#line 805  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/rtl8821ae.ko/concurrency safety/0/concurrency safety/weaver/sw.i.aux"
static void cif_vfree(void *addr);
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/firmware.h"
#line 47 
int request_firmware_nowait(struct module *, bool, char *, struct device *, gfp_t, void *, void (*)(struct firmware *, void *));
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/core.h"
#line 54 
void rtl_fw_cb(struct firmware *, void *);
#line 55 
#line 55 
void rtl_wowlan_fw_cb(struct firmware *, void *);
#line 1346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 812  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/rtl8821ae.ko/concurrency safety/0/concurrency safety/weaver/sw.i.aux"
static int cif___pci_register_driver(struct pci_driver *ldv_func_arg1, struct module *ldv_func_arg2, char *mod_name);
#line 1352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 820  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/rtl8821ae.ko/concurrency safety/0/concurrency safety/weaver/sw.i.aux"
static void cif_pci_unregister_driver(struct pci_driver *dev);
#line 261  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/pci.h"
#line 261 
int rtl_pci_probe(struct pci_dev *, struct pci_device_id *);
#line 263 
#line 263 
void rtl_pci_disconnect(struct pci_dev *);
#line 265 
#line 265 
int rtl_pci_suspend(struct device *);
#line 266 
#line 266 
int rtl_pci_resume(struct device *);
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/sw.h"
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/sw.c"
int rtl8821ae_init_sw_vars(struct ieee80211_hw *hw);
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/sw.h"
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/sw.c"
void rtl8821ae_deinit_sw_vars(struct ieee80211_hw *hw);
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/sw.h"
#line 231  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/sw.c"
bool rtl8821ae_get_btc_status(void);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.h"
#line 44 
struct rtl_btc_ops *rtl_btc_get_ops_pointer(void);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/sw.c"
static void rtl8821ae_init_aspm_vars(struct ieee80211_hw *hw)
{
  #line 24 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 25 
  struct rtl_pci *rtlpci = & ((struct rtl_pci_priv *)(& ((struct rtl_priv *)hw->priv)->priv))->dev;
  #line 28 
  rtlpci->const_amdpci_aspm = (unsigned char)0U;
  #line 39 
  rtlpci->const_pci_aspm = (unsigned char)3U;
  #line 42 
  rtlpci->const_devicepci_aspm_setting = (unsigned char)3U;
  #line 45 
  rtlpci->const_hostpci_aspm_setting = (unsigned char)2U;
  #line 55 
  rtlpci->const_hwsw_rfoff_d3 = (unsigned char)0U;
  #line 64 
  rtlpci->const_support_pciaspm = (unsigned char)((rtlpriv->cfg)->mod_params)->aspm_support;
  #line 65 
  return;
}

#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/sw.c"
int rtl8821ae_init_sw_vars(struct ieee80211_hw *hw)
{
  #line 75 
  char *fw_name;
  #line 75 
  char *wowlan_fw_name;
  #line 70 
  int err = 0;
  #line 71 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 72 
  struct rtl_pci *rtlpci = & ((struct rtl_pci_priv *)(& ((struct rtl_priv *)hw->priv)->priv))->dev;
  #line 73 
  struct rtl_mac *mac = & ((struct rtl_priv *)hw->priv)->mac80211;
  #line 74 
  struct rtl_hal *rtlhal = & ((struct rtl_priv *)hw->priv)->rtlhal;
  #line 77 
  rtl8821ae_bt_reg_init(hw);
  #line 78 
  rtlpriv->btcoexist.btc_ops = rtl_btc_get_ops_pointer();
  #line 80 
  rtlpriv->dm.dm_initialgain_enable = (_Bool)1;
  #line 81 
  rtlpriv->dm.dm_flag = (unsigned char)0U;
  #line 82 
  rtlpriv->dm.disable_framebursting = (_Bool)0;
  #line 83 
  rtlpriv->dm.thermalvalue = (unsigned char)0U;
  #line 84 
  rtlpci->transmit_config = 50364928U;
  #line 86 
  mac->ht_enable = (unsigned char)1U;
  #line 87 
  mac->ht_cur_stbc = (unsigned char)0U;
  #line 88 
  mac->ht_stbc_cap = (unsigned char)0U;
  #line 89 
  mac->vht_cur_ldpc = (unsigned char)0U;
  #line 90 
  mac->vht_ldpc_cap = (unsigned char)0U;
  #line 91 
  mac->vht_cur_stbc = (unsigned char)0U;
  #line 92 
  mac->vht_stbc_cap = (unsigned char)0U;
  #line 94 
  rtlpriv->rtlhal.current_bandtype = BAND_ON_2_4G;
  #line 96 
  rtlpriv->rtlhal.bandset = BAND_ON_BOTH;
  #line 97 
  rtlpriv->rtlhal.macphymode = SINGLEMAC_SINGLEPHY;
  #line 99 
  rtlpci->receive_config = 4093672206U;
  #line 116 
  rtlpci->irq_mask[0] = 671122687U;
  #line 131 
  rtlpci->irq_mask[1] = 768U;
  #line 135 
  rtlpci->sys_irq_mask = 192U;
  #line 139 
  rtlpriv->psc.wo_wlan_mode = (unsigned char)3U;
  #line 143 
  rtlpriv->psc.inactiveps = ((rtlpriv->cfg)->mod_params)->inactiveps;
  #line 144 
  rtlpriv->psc.swctrl_lps = ((rtlpriv->cfg)->mod_params)->swctrl_lps;
  #line 145 
  rtlpriv->psc.fwctrl_lps = ((rtlpriv->cfg)->mod_params)->fwctrl_lps;
  #line 146 
  rtlpci->msi_support = ((rtlpriv->cfg)->mod_params)->msi_support;
  #line 147 
  rtlpci->int_clear = ((rtlpriv->cfg)->mod_params)->int_clear;
  #line 148 
  if ((int)((rtlpriv->cfg)->mod_params)->disable_watchdog != 0) 
                                                                #line 149 
                                                                printk((char *)"\001");
  #line 150 
  rtlpriv->psc.reg_fwctrl_lps = (unsigned char)2U;
  #line 151 
  rtlpriv->psc.reg_max_lps_awakeintvl = (unsigned char)2U;
  #line 156 
  rtl8821ae_init_aspm_vars(hw);
  #line 158 
  if ((unsigned int)rtlpriv->psc.reg_fwctrl_lps == 1U) 
                                                       #line 159 
                                                       rtlpriv->psc.fwctrl_psmode = (unsigned char)1U;
  else 
    #line 160 
    if ((unsigned int)rtlpriv->psc.reg_fwctrl_lps == 2U) 
                                                         #line 161 
                                                         rtlpriv->psc.fwctrl_psmode = (unsigned char)2U;
    else 
      #line 162 
      if ((unsigned int)rtlpriv->psc.reg_fwctrl_lps == 3U) 
                                                           #line 163 
                                                           rtlpriv->psc.fwctrl_psmode = (unsigned char)3U;
  #line 166 
  rtlpriv->rtlhal.pfirmware = (u8 *)cif_vzalloc(32768UL);
  #line 167 
  if (rtlpriv->rtlhal.pfirmware == (u8 *)0U) {
    #line 168 
    printk((char *)"\001");
    #line 169 
    return 1;
  }
  #line 171 
  rtlpriv->rtlhal.wowlan_firmware = (u8 *)cif_vzalloc(32768UL);
  #line 172 
  if (rtlpriv->rtlhal.wowlan_firmware == (u8 *)0U) {
    #line 173 
    printk((char *)"\001");
    #line 174 
    cif_vfree((void *)rtlpriv->rtlhal.pfirmware);
    #line 175 
    rtlpriv->rtlhal.pfirmware = (u8 *)0U;
    #line 176 
    return 1;
  }
  #line 179 
  if ((unsigned int)rtlhal->hw_type == 14U) {
    #line 180 
    fw_name = (char *)"rtlwifi/rtl8812aefw.bin";
    #line 181 
    wowlan_fw_name = (char *)"rtlwifi/rtl8812aefw_wowlan.bin";
  }
  else {
    #line 183 
    fw_name = (char *)"rtlwifi/rtl8821aefw_29.bin";
    #line 184 
    wowlan_fw_name = (char *)"rtlwifi/rtl8821aefw_wowlan.bin";
  }
  #line 187 
  rtlpriv->max_fw_size = 32768;
  #line 189 
  printk((char *)"\001",fw_name);
  #line 190 
  err = request_firmware_nowait(& __this_module,(_Bool)1,fw_name,rtlpriv->io.dev,3264U,(void *)hw,& rtl_fw_cb);
  #line 193 
  if (err != 0) {
    #line 194 
    printk((char *)"\001");
    #line 195 
    cif_vfree((void *)rtlpriv->rtlhal.wowlan_firmware);
    #line 196 
    cif_vfree((void *)rtlpriv->rtlhal.pfirmware);
    #line 197 
    return 1;
  }
  #line 200 
  printk((char *)"\001",wowlan_fw_name);
  #line 201 
  err = request_firmware_nowait(& __this_module,(_Bool)1,wowlan_fw_name,rtlpriv->io.dev,3264U,(void *)hw,& rtl_wowlan_fw_cb);
  #line 205 
  if (err != 0) {
    #line 206 
    printk((char *)"\001");
    #line 207 
    cif_vfree((void *)rtlpriv->rtlhal.wowlan_firmware);
    #line 208 
    cif_vfree((void *)rtlpriv->rtlhal.pfirmware);
    #line 209 
    return 1;
  }
  #line 211 
  return 0;
}

#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/sw.c"
void rtl8821ae_deinit_sw_vars(struct ieee80211_hw *hw)
{
  #line 216 
  struct rtl_priv *rtlpriv = (struct rtl_priv *)hw->priv;
  #line 218 
  if (rtlpriv->rtlhal.pfirmware != (u8 *)0U) {
    #line 219 
    cif_vfree((void *)rtlpriv->rtlhal.pfirmware);
    #line 220 
    rtlpriv->rtlhal.pfirmware = (u8 *)0U;
  }
  #line 223 
  if (rtlpriv->rtlhal.wowlan_firmware != (u8 *)0U) {
    #line 224 
    cif_vfree((void *)rtlpriv->rtlhal.wowlan_firmware);
    #line 225 
    rtlpriv->rtlhal.wowlan_firmware = (u8 *)0U;
  }
  #line 227 
  return;
}

#line 231  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/sw.c"
bool rtl8821ae_get_btc_status(void)
{
  #line 233 
  return (_Bool)1;
}

#line 236  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/sw.c"
static struct rtl_hal_ops rtl8821ae_hal_ops = {.init_sw_vars = & rtl8821ae_init_sw_vars, .deinit_sw_vars = & rtl8821ae_deinit_sw_vars, .read_eeprom_info = & rtl8821ae_read_eeprom_info, .interrupt_recognized = & rtl8821ae_interrupt_recognized, .hw_init = & rtl8821ae_hw_init, .hw_disable = & rtl8821ae_card_disable, .hw_suspend = & rtl8821ae_suspend, .hw_resume = & rtl8821ae_resume, .enable_interrupt = & rtl8821ae_enable_interrupt, .disable_interrupt = & rtl8821ae_disable_interrupt, .set_network_type = & rtl8821ae_set_network_type, .set_chk_bssid = & rtl8821ae_set_check_bssid, .set_bw_mode = & rtl8821ae_phy_set_bw_mode, .switch_channel = & rtl8821ae_phy_sw_chnl, .set_qos = & rtl8821ae_set_qos, .set_bcn_reg = & rtl8821ae_set_beacon_related_registers, .set_bcn_intv = & rtl8821ae_set_beacon_interval, .update_interrupt_mask = & rtl8821ae_update_interrupt_mask, .get_hw_reg = & rtl8821ae_get_hw_reg, .set_hw_reg = & rtl8821ae_set_hw_reg, .update_rate_tbl = & rtl8821ae_update_hal_rate_tbl, .fill_tx_desc = & rtl8821ae_tx_fill_desc, .fill_tx_cmddesc = & rtl8821ae_tx_fill_cmddesc, .query_rx_desc = & rtl8821ae_rx_query_desc, .set_channel_access = & rtl8821ae_update_channel_access_setting, .radio_onoff_checking = & rtl8821ae_gpio_radio_on_off_checking, .dm_watchdog = & rtl8821ae_dm_watchdog, .scan_operation_backup = & rtl8821ae_phy_scan_operation_backup, .set_rf_power_state = & rtl8821ae_phy_set_rf_power_state, .led_control = & rtl8821ae_led_control, .set_desc = & rtl8821ae_set_desc, .get_desc = & rtl8821ae_get_desc, .is_tx_desc_closed = & rtl8821ae_is_tx_desc_closed, .tx_polling = & rtl8821ae_tx_polling, .enable_hw_sec = & rtl8821ae_enable_hw_security_config, .set_key = & rtl8821ae_set_key, .init_sw_leds = & rtl8821ae_init_sw_leds, .get_bbreg = & rtl8821ae_phy_query_bb_reg, .set_bbreg = & rtl8821ae_phy_set_bb_reg, .get_rfreg = & rtl8821ae_phy_query_rf_reg, .set_rfreg = & rtl8821ae_phy_set_rf_reg, .fill_h2c_cmd = & rtl8821ae_fill_h2c_cmd, .get_btc_status = & rtl8821ae_get_btc_status, .add_wowlan_pattern = & rtl8821ae_add_wowlan_pattern, .c2h_ra_report_handler = & rtl8821ae_c2h_ra_report_handler};
#line 284  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/sw.c"
static struct rtl_mod_params rtl8821ae_mod_params = {.inactiveps = (_Bool)1, .fwctrl_lps = (_Bool)1, .msi_support = (_Bool)1, .aspm_support = 1, .int_clear = (_Bool)1};
#line 297  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/sw.c"
static struct rtl_hal_cfg rtl8821ae_hal_cfg = {.bar_id = (unsigned char)2U, .write_readback = (_Bool)1, .name = (char *)"rtl8821ae_pci", .alt_fw_name = (char *)"rtlwifi/rtl8821aefw.bin", .ops = & rtl8821ae_hal_ops, .mod_params = & rtl8821ae_mod_params, .spec_ver = RTL_SPEC_SUPPORT_VHT, .maps = {[1] = 2U, 8U, 4U, 8U, 256U, 4096U, 1U, 176U, 184U, [11] = 52U, 48U, [14] = 48U, 32768U, 4096U, 32U, 2U, 512U, 64U, 256U, 18U, 207U, 1648U, 1652U, 1656U, 1660U, 1664U, [30] = 1U, 2U, 4U, 5U, 67108864U, 33554432U, 16777216U, 8388608U, 4194304U, 2097152U, [41] = 1048576U, 524288U, 262144U, 131072U, 65536U, 32768U, 16384U, [50] = 512U, 536870912U, 1048576U, 256U, 2U, 4096U, [57] = 65536U, 128U, [60] = 33554432U, 64U, 67108864U, 32U, 16U, 8U, 4U, 1U, [69] = 101711872U, [72] = 1U, 2U, 3U, 4U, 5U, 6U, 7U, 8U, 9U, 10U, 11U, 19U, 27U, 51U, 52U, 53U, 61U, 62U, 63U}};
#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/sw.c"
static struct pci_device_id rtl8821ae_pci_ids[3U] = {{.vendor = 4332U, .device = 34834U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = (unsigned long)(& rtl8821ae_hal_cfg)}, {.vendor = 4332U, .device = 34849U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = (unsigned long)(& rtl8821ae_hal_cfg)}};
#line 408  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/sw.c"
struct pci_device_id __mod_pci__rtl8821ae_pci_ids_device_table[3U];
#line 438  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/sw.c"
static struct dev_pm_ops rtlwifi_pm_ops = {.suspend = & rtl_pci_suspend, .resume = & rtl_pci_resume, .freeze = & rtl_pci_suspend, .thaw = & rtl_pci_resume, .poweroff = & rtl_pci_suspend, .restore = & rtl_pci_resume};
#line 440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/sw.c"
static struct pci_driver rtl8821ae_driver = {.name = (char *)"rtl8821ae", .id_table = (struct pci_device_id *)(& rtl8821ae_pci_ids), .probe = & rtl_pci_probe, .remove = & rtl_pci_disconnect, .driver = {.pm = & rtlwifi_pm_ops}};
#line 448  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/sw.c"
static int rtl8821ae_driver_init(void)
{
  #line 448 
  return cif___pci_register_driver(& rtl8821ae_driver,& __this_module,
                                (char *)"rtl8821ae");
}

#line 448  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/sw.c"
static void rtl8821ae_driver_exit(void)
{
  #line 448 
  cif_pci_unregister_driver(& rtl8821ae_driver);
  #line 449 
  return;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/rtl8821ae.ko/concurrency safety/0/concurrency safety/weaver/sw.i.aux"
struct pci_driver *emg_alias_rtl8821ae_driver = & rtl8821ae_driver;
#line 94  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/rtl8821ae.ko/concurrency safety/0/concurrency safety/weaver/sw.i.aux"
struct pci_device_id (*emg_alias_rtl8821ae_pci_ids)[3U] = & rtl8821ae_pci_ids;
#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/rtl8821ae.ko/concurrency safety/0/concurrency safety/weaver/sw.i.aux"
struct dev_pm_ops *emg_alias_rtlwifi_pm_ops = & rtlwifi_pm_ops;
#line 98 
#line 98 
int emg___pci_register_driver(struct pci_driver *arg0, struct module *arg1, char *arg2);
#line 100 
#line 100 
void emg_pci_unregister_driver(struct pci_driver *arg0);
#line 104  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/rtl8821ae.ko/concurrency safety/0/concurrency safety/weaver/sw.i.aux"
void emg_rtl8821ae_driver_exit(void)
{
  #line 105 
  rtl8821ae_driver_exit();
  #line 106 
  return;
}

#line 108  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/rtl8821ae.ko/concurrency safety/0/concurrency safety/weaver/sw.i.aux"
int emg_rtl8821ae_driver_init(void)
{
  #line 109 
  return rtl8821ae_driver_init();
}

#line 798  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/rtl8821ae.ko/concurrency safety/0/concurrency safety/weaver/sw.i.aux"
static void *cif_vzalloc(unsigned long size)
{
  #line 801 
  return ldv_vzalloc(size);
}

#line 805  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/rtl8821ae.ko/concurrency safety/0/concurrency safety/weaver/sw.i.aux"
static void cif_vfree(void *addr)
{
  #line 808 
  ldv_vfree(addr);
  #line 809 
  return;
}

#line 812  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/rtl8821ae.ko/concurrency safety/0/concurrency safety/weaver/sw.i.aux"
static int cif___pci_register_driver(struct pci_driver *ldv_func_arg1, struct module *ldv_func_arg2, char *mod_name)
{
  #line 816 
  return emg___pci_register_driver(ldv_func_arg1,ldv_func_arg2,mod_name);
}

#line 820  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/rtl8821ae.ko/concurrency safety/0/concurrency safety/weaver/sw.i.aux"
static void cif_pci_unregister_driver(struct pci_driver *dev)
{
  #line 824 
  emg_pci_unregister_driver(dev);
  #line 825 
  return;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/common/inline_asm.c"
void ldv_inline_asm(void)
{
  #line 24 
  return;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_add(int i, atomic_t *v)
{
  #line 22 
  v->counter += i;
  #line 23 
  return;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_sub(int i, atomic_t *v)
{
  #line 27 
  v->counter -= i;
  #line 28 
  return;
}

#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_sub_and_test(int i, atomic_t *v)
{
  #line 32 
  v->counter -= i;
  #line 33 
  if (v->counter != 0) 
                       #line 34 
                       return 0;
  #line 36 
  return 1;
}

#line 39  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_inc(atomic_t *v)
{
  #line 41 
  (v->counter) ++;
  #line 42 
  return;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_dec(atomic_t *v)
{
  #line 46 
  (v->counter) --;
  #line 47 
  return;
}

#line 49  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_dec_and_test(atomic_t *v)
{
  #line 51 
  (v->counter) --;
  #line 52 
  if (v->counter != 0) 
                       #line 53 
                       return 0;
  #line 55 
  return 1;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_and_test(atomic_t *v)
{
  #line 60 
  (v->counter) ++;
  #line 61 
  if (v->counter != 0) 
                       #line 62 
                       return 0;
  #line 64 
  return 1;
}

#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_return(int i, atomic_t *v)
{
  #line 69 
  v->counter += i;
  #line 70 
  return v->counter;
}

#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_negative(int i, atomic_t *v)
{
  #line 75 
  v->counter += i;
  #line 76 
  return v->counter < 0;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_short(short *v)
{
  #line 81 
  *v = (short)((unsigned int)*v + 1U);
  #line 82 
  return (int)*v;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
static struct task_struct ldv_current;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
struct task_struct *ldv_get_current(void)
{
  #line 28 
  ldv_current.pid = 1;
  #line 29 
  return & ldv_current;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void);
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void);
#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void);
#line 112  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val);
#line 132  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val);
#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 133 
void ldv_check_return_value_probe(int);
#line 141 
#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 23 
void __VERIFIER_assume(int);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static bool __ldv_in_interrupt_context = (_Bool)0;
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void)
{
  #line 31 
  __ldv_in_interrupt_context = (_Bool)1;
  #line 32 
  return;
}

#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void)
{
  #line 37 
  __ldv_in_interrupt_context = (_Bool)0;
  #line 38 
  return;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void)
{
  #line 42 
  return __ldv_in_interrupt_context;
}

#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static int ldv_filter_positive_int(int val)
{
  #line 47 
  __VERIFIER_assume(val <= 0);
  #line 48 
  return val;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val)
{
  #line 57 
  return ldv_filter_positive_int(init_ret_val);
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val)
{
  #line 63 
  ldv_check_return_value_probe(probe_ret_val);
  #line 64 
  return ldv_filter_positive_int(probe_ret_val);
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val)
{
  #line 70 
  return ldv_filter_positive_int(ret_val);
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/list.h"
#line 28 
void ldv_save_allocated_memory_to_list(void *);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data);
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 57 
void *ldv_xzalloc(size_t size);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev)
{
  #line 31 
  if (dev != (struct device *)0 && dev->p != (struct device_private *)0) 
    #line 32 
    return (dev->p)->driver_data;
  #line 34 
  return (void *)0;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data)
{
  #line 45 
  dev->p = (struct device_private *)ldv_xzalloc(8UL);
  #line 46 
  ldv_save_allocated_memory_to_list((void *)dev->p);
  #line 47 
  (dev->p)->driver_data = data;
  #line 49 
  return 0;
}

#line 156  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 156 
void ldv_check_alloc_flags(gfp_t);
#line 48  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 48 
void *ldv_malloc(size_t size);
#line 49 
#line 49 
void *ldv_calloc(size_t nmemb, size_t size);
#line 50 
#line 50 
void *ldv_zalloc(size_t size);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc(size_t size, gfp_t flags)
{
  #line 26 
  void *res;
  #line 28 
  ldv_check_alloc_flags(flags);
  #line 29 
  res = ldv_malloc(size);
  #line 30 
  ldv_save_allocated_memory_to_list(res);
  #line 32 
  return res;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kzalloc(size_t size, gfp_t flags)
{
  #line 37 
  void *res;
  #line 39 
  ldv_check_alloc_flags(flags);
  #line 40 
  res = ldv_zalloc(size);
  #line 41 
  ldv_save_allocated_memory_to_list(res);
  #line 43 
  return res;
}

#line 46  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 48 
  void *res;
  #line 50 
  ldv_check_alloc_flags(flags);
  #line 51 
  res = ldv_malloc(n * size);
  #line 52 
  ldv_save_allocated_memory_to_list(res);
  #line 54 
  return res;
}

#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 59 
  void *res;
  #line 61 
  ldv_check_alloc_flags(flags);
  #line 62 
  res = ldv_calloc(n,size);
  #line 63 
  ldv_save_allocated_memory_to_list(res);
  #line 65 
  return res;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 51 
void ldv_free(void *s);
#line 59 
#line 59 
void *ldv_malloc_unknown_size(void);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 31 
int ldv_undef_int_positive(void);
#line 40 
#line 40 
int ldv_undef_int_nonpositive(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
int ldv_request_firmware(struct firmware **fw)
{
  #line 27 
  int retval;
  #line 26 
  struct firmware *_fw = (struct firmware *)0;
  #line 29 
  retval = ldv_undef_int_nonpositive();
  #line 31 
  if (retval == 0) {
    #line 33 
    _fw = (struct firmware *)ldv_xzalloc(32UL);
    #line 34 
    _fw->data = (u8 *)ldv_malloc_unknown_size();
    #line 35 
    __VERIFIER_assume(_fw->data != (u8 *)0U);
    #line 36 
    _fw->size = (unsigned long)ldv_undef_int_positive();
  }
  #line 39 
  *fw = _fw;
  #line 41 
  return retval;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
void ldv_release_firmware(struct firmware *fw)
{
  #line 46 
  if (fw != (struct firmware *)0) {
    #line 48 
    ldv_free((void *)fw->data);
    #line 49 
    ldv_free((void *)fw);
  }
  #line 51 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/i2c.h"
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values);
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 55 
void *ldv_xmalloc(size_t size);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 23 
int ldv_undef_int(void);
#line 34 
#line 34 
int ldv_undef_int_negative(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values)
{
  #line 27 
  __u8 size;
  #line 28 
  char *bytes;
  #line 30 
  if (ldv_undef_int() != 0) {
    #line 33 
    size = (unsigned char)ldv_undef_int_positive();
    #line 35 
    __VERIFIER_assume((unsigned int)size <= 32U);
    #line 37 
    bytes = (char *)ldv_xmalloc((unsigned long)size);
    #line 39 
    memcpy((void *)values,(void *)bytes,(unsigned long)size);
    #line 40 
    ldv_free((void *)bytes);
    #line 42 
    return (int)size;
  }
  else {
    #line 46 
    return ldv_undef_int_negative();
  }
}

#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
__inline static void v4l2_set_subdevdata(struct v4l2_subdev *sd, void *p)
{
  #line 990 
  sd->dev_priv = p;
  #line 991 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/media/v4l2-common.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops)
{
  #line 26 
  sd->ops = ops;
  #line 27 
  v4l2_set_subdevdata(sd,(void *)client);
  #line 28 
  ldv_dev_set_drvdata(& client->dev,(void *)sd);
  #line 29 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/spi.c"
struct spi_controller *ldv_spi_alloc_master(struct device *host, unsigned int size)
{
  #line 25 
  struct spi_controller *master;
  #line 27 
  master = (struct spi_controller *)ldv_zalloc((unsigned long)size + 2936UL);
  #line 29 
  if (master == (struct spi_controller *)0) 
                                            #line 30 
                                            return (struct spi_controller *)0;
  #line 32 
  ldv_dev_set_drvdata(& master->dev,(void *)(master + 1U));
  #line 34 
  return master;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size)
{
  #line 25 
  struct fb_info *info;
  #line 27 
  info = (struct fb_info *)ldv_zalloc(size + 1568UL);
  #line 29 
  if (info == (struct fb_info *)0) 
                                   #line 30 
                                   return (struct fb_info *)0;
  #line 32 
  if (size != 0UL) 
                   #line 33 
                   info->par = (void *)((char *)info + 1568UL);
  #line 35 
  return info;
}

#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info)
{
  #line 40 
  if (info == (struct fb_info *)0) 
                                   #line 41 
                                   return;
  #line 44 
  ldv_free((void *)info->apertures);
  #line 46 
  ldv_free((void *)info);
  #line 47 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err(void *ptr);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err_or_null(void *ptr);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_ptr_err(void *ptr);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err(void *ptr)
{
  #line 29 
  if ((unsigned long)ptr > 18446744073709547520UL) 
                                                   #line 30 
                                                   return (_Bool)1; else 
                                                                    #line 32 
                                                                    return (_Bool)0;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error)
{
  #line 37 
  unsigned long result;
  #line 39 
  __VERIFIER_assume(error < 0L);
  #line 40 
  __VERIFIER_assume(error >= -4095L);
  #line 41 
  result = 18446744073709547520UL - (unsigned long)error;
  #line 42 
  __VERIFIER_assume(result > 18446744073709547520UL);
  #line 44 
  return (void *)result;
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_ptr_err(void *ptr)
{
  #line 49 
  long result;
  #line 51 
  __VERIFIER_assume((unsigned long)ptr > 18446744073709547520UL);
  #line 52 
  result = (long)(18446744073709547520UL - (unsigned long)ptr);
  #line 53 
  __VERIFIER_assume(result < 0L);
  #line 54 
  __VERIFIER_assume(result >= -4095L);
  #line 56 
  return result;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err_or_null(void *ptr)
{
  #line 61 
  int tmp_0;
  #line 61 
  if (ptr == (void *)0) 
                        #line 61 
                        tmp_0 = 1;
  else {
    #line 61 
    if ((int)ldv_is_err(ptr) != 0) 
                                   #line 61 
                                   tmp_0 = 1; else 
                                                   #line 61 
                                                   tmp_0 = 0;
  }
  #line 61 
  return (_Bool)(tmp_0 != 0);
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/panic.h"
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void)
{
  #line 23 
  __VERIFIER_assume(0);
  #line 24 
  return;
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_set_bit(long nr, unsigned long *addr);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_clear_bit(long nr, unsigned long *addr);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 22 
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 23 
#line 23 
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_set_bit(long nr, unsigned long *addr)
{
  #line 24 
  *(addr + (unsigned long)nr / 64UL) |= 1UL << ((unsigned long)nr & 63UL);
  #line 25 
  return;
}

#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_clear_bit(long nr, unsigned long *addr)
{
  #line 29 
  *(addr + (unsigned long)nr / 64UL) &= ~ (1UL << ((unsigned long)nr & 63UL));
  #line 30 
  return;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits)
{
  #line 34 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 35 
  unsigned int size = start + (unsigned int)nbits;
  #line 36 
  int bits_to_set = (int)(64U - (start & 63U));
  #line 37 
  unsigned long mask_to_set = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 39 
  while (nbits - bits_to_set >= 0) {
    #line 40 
    *p |= mask_to_set;
    #line 41 
    nbits -= bits_to_set;
    #line 42 
    bits_to_set = 64;
    #line 43 
    mask_to_set = 18446744073709551615UL;
    #line 44 
    p ++;
  }
  #line 46 
  if (nbits != 0) {
    #line 47 
    mask_to_set = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_set;
    #line 48 
    *p |= mask_to_set;
  }
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits)
{
  #line 54 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 55 
  unsigned int size = start + (unsigned int)nbits;
  #line 56 
  int bits_to_clear = (int)(64U - (start & 63U));
  #line 57 
  unsigned long mask_to_clear = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 59 
  while (nbits - bits_to_clear >= 0) {
    #line 60 
    *p &= ~ mask_to_clear;
    #line 61 
    nbits -= bits_to_clear;
    #line 62 
    bits_to_clear = 64;
    #line 63 
    mask_to_clear = 18446744073709551615UL;
    #line 64 
    p ++;
  }
  #line 66 
  if (nbits != 0) {
    #line 67 
    mask_to_clear = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_clear;
    #line 68 
    *p &= ~ mask_to_clear;
  }
  #line 70 
  return;
}

#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits)
{
  #line 74 
  unsigned int len = (unsigned int)(((unsigned long)nbits + 63UL) / 64UL) * 8U;
  #line 75 
  memset((void *)dst,0,(unsigned long)len);
  #line 76 
  return;
}

#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask)
{
  #line 80 
  unsigned long index;
  #line 80 
  unsigned long end;
  #line 80 
  unsigned long i;
  #line 82 
  again: 
         #line 82 
  ;
  #line 83 
  index = ldv_find_next_zero_bit(map,size,start);
  #line 84 
  index = (index + align_mask) & ~ align_mask;
  #line 85 
  end = (unsigned long)nr + index;
  #line 87 
  if (end > size) 
                  #line 88 
                  return end;
  #line 90 
  i = ldv_find_next_bit(map,end,index);
  #line 92 
  if (i < end) {
    #line 93 
    start = i + 1UL;
    #line 94 
    goto again;
  }
  #line 97 
  return index;
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 25 
void ldv_check_find_bit_offset(unsigned long, unsigned long);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_ffs(unsigned long word)
{
  #line 23 
  int num = 0;
  #line 25 
  if ((word & 4294967295UL) == 0UL) {
    #line 26 
    num += 32;
    #line 27 
    word >>= 32;
  }
  #line 29 
  if ((word & 65535UL) == 0UL) {
    #line 30 
    num += 16;
    #line 31 
    word >>= 16;
  }
  #line 33 
  if ((word & 255UL) == 0UL) {
    #line 34 
    num += 8;
    #line 35 
    word >>= 8;
  }
  #line 37 
  if ((word & 15UL) == 0UL) {
    #line 38 
    num += 4;
    #line 39 
    word >>= 4;
  }
  #line 41 
  if ((word & 3UL) == 0UL) {
    #line 42 
    num += 2;
    #line 43 
    word >>= 2;
  }
  #line 45 
  if ((word & 1UL) == 0UL) 
                           #line 46 
                           num ++;
  #line 48 
  return (unsigned long)num;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_min(unsigned long a, unsigned long b)
{
  #line 53 
  if (a < b) 
             #line 54 
             return a;
  #line 56 
  return b;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_restrict_find_bit_res(unsigned long res, unsigned long size)
{
  #line 62 
  __VERIFIER_assume(1);
  #line 63 
  __VERIFIER_assume(res <= size);
  #line 65 
  return res;
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size)
{
  #line 70 
  unsigned long i;
  #line 72 
  i = 0UL;
  #line 72 
  while (i * 64UL < size) {
    #line 73 
    if (*(addr + i) != 0UL) {
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      return ldv_restrict_find_bit_res(ldv_min(i * 64UL + ldv_ffs(*(addr + i)),size),
                                  size);
    }
    #line 72 
    i ++;
  }
  #line 76 
  return size;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 81 
  unsigned long tmp;
  #line 83 
  ldv_check_find_bit_offset(size,offset);
  #line 85 
  tmp = *(addr + offset / 64UL);
  #line 86 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 87 
  offset &= 18446744073709551552UL;
  #line 89 
  while (tmp == 0UL) {
    #line 90 
    offset += 64UL;
    #line 91 
    if (offset >= size) 
                        #line 92 
                        return size;
    #line 94 
    tmp = *(addr + offset / 64UL);
  }
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 102 
  unsigned long tmp;
  #line 104 
  ldv_check_find_bit_offset(size,offset);
  #line 106 
  tmp = *(addr + offset / 64UL);
  #line 107 
  tmp = ~ tmp;
  #line 108 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 109 
  offset &= 18446744073709551552UL;
  #line 111 
  while (tmp == 0UL) {
    #line 112 
    offset += 64UL;
    #line 113 
    if (offset >= size) 
                        #line 114 
                        return size;
    #line 116 
    tmp = *(addr + offset / 64UL);
    #line 117 
    tmp = ~ tmp;
  }
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
size_t ldv_strlen(char *s);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strcmp(char *cs, char *ct);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
size_t ldv_strlen(char *s)
{
  #line 23 
  unsigned int len = 0U;
  #line 25 
  while ((int)*s != 0) {
    #line 26 
    len ++;
    #line 25 
    s ++;
  }
  #line 28 
  return (unsigned long)len;
}

#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strcmp(char *cs, char *ct)
{
  #line 33 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 34 
    if ((int)*cs != (int)*ct) 
                              #line 35 
                              break;
    #line 33 
    cs ++;
    #line 33 
    ct ++;
  }
  #line 37 
  return (int)*cs - (int)*ct;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count)
{
  #line 42 
  if (count == 0UL) 
                    #line 43 
                    return 0;
  #line 45 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 46 
    if ((int)*cs != (int)*ct) 
                              #line 47 
                              break;
    #line 49 
    count --;
    #line 51 
    if (count == 0UL) 
                      #line 52 
                      break;
    #line 45 
    cs ++;
    #line 45 
    ct ++;
  }
  #line 55 
  return (int)*cs - (int)*ct;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_memcmp(void *cs, void *ct, size_t count)
{
  #line 60 
  unsigned char *su1;
  #line 60 
  unsigned char *su2;
  #line 61 
  int res = 0;
  #line 63 
  su1 = (unsigned char *)cs;
  #line 63 
  su2 = (unsigned char *)ct;
  #line 63 
  while (count != 0UL) {
    #line 64 
    res = (int)*su1 - (int)*su2;
    #line 64 
    if (res != 0) 
                  #line 65 
                  break;
    #line 63 
    su1 ++;
    #line 63 
    su2 ++;
    #line 63 
    count --;
  }
  #line 67 
  return res;
}

#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct)
{
  #line 72 
  size_t cs_len;
  #line 72 
  size_t ct_len;
  #line 74 
  cs_len = ldv_strlen(cs);
  #line 75 
  ct_len = ldv_strlen(ct);
  #line 77 
  while (cs_len >= ct_len) {
    #line 78 
    if (ldv_memcmp((void *)cs,(void *)ct,ct_len) == 0) 
                                                       #line 79 
                                                       return cs;
    #line 81 
    cs_len --;
    #line 82 
    cs ++;
  }
  #line 85 
  return (char *)0;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/list.h"
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/list.c"
void ldv_init_list_head(struct list_head *list);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/list.c"
void ldv_init_list_head(struct list_head *list)
{
  #line 23 
  list->next = list;
  #line 24 
  list->prev = list;
  #line 25 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc(size_t size, gfp_t flags);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags);
#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags);
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags);
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp);
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc(size_t size, gfp_t flags)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(flags);
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kzalloc(size_t size, gfp_t flags)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_flags(flags);
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 45 
  void *res;
  #line 47 
  ldv_check_alloc_flags(flags);
  #line 48 
  res = ldv_malloc(n * size);
  #line 50 
  return res;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 55 
  void *res;
  #line 57 
  ldv_check_alloc_flags(flags);
  #line 58 
  res = ldv_calloc(n,size);
  #line 60 
  return res;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size)
{
  #line 71 
  struct kmem_cache *res;
  #line 72 
  struct ldv_kmem_cache *ldv_res;
  #line 74 
  res = (struct kmem_cache *)ldv_zalloc(16UL);
  #line 76 
  if (res != (struct kmem_cache *)0) {
    #line 77 
    ldv_res = (struct ldv_kmem_cache *)res;
    #line 78 
    ldv_res->name = name;
    #line 79 
    ldv_res->size = size;
  }
  #line 82 
  return res;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 87 
  return ldv_kmalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 92 
  return ldv_kzalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp)
{
  #line 97 
  ldv_free(objp);
  #line 98 
  return;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep)
{
  #line 102 
  ldv_free((void *)cachep);
  #line 103 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/util.c"
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/util.c"
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(gfp);
  #line 28 
  res = ldv_malloc(len);
  #line 30 
  if (res != (void *)0) 
                        #line 31 
                        memcpy(res,src,len);
  #line 33 
  return res;
}

#line 162  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 162 
void ldv_check_alloc_nonatomic(void);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vmalloc(unsigned long size);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vmalloc(unsigned long size)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_nonatomic();
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vzalloc(unsigned long size)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_nonatomic();
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void ldv_vfree(void *addr)
{
  #line 45 
  ldv_free(addr);
  #line 46 
  return;
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 28 
void *malloc(size_t);
#line 29 
#line 29 
void *calloc(size_t, size_t);
#line 30 
#line 30 
void free(void *);
#line 45 
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures;
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size);
#line 60  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void);
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void);
#line 64  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size);
#line 65  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size);
#line 66  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size);
#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s);
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size);
#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size);
#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size);
#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size);
#line 75  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void);
#line 76  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void);
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void);
#line 83  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size);
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size);
#line 87  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 87 
void *external_allocated_data(void);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures = 1U;
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size)
{
  #line 26 
  void *res;
  #line 28 
  if (ldv_is_memory_alloc_failures != 0U) {
    #line 28 
    if (ldv_undef_int() != 0) 
                              #line 29 
                              return (void *)0;
  }
  #line 32 
  res = malloc(size);
  #line 33 
  __VERIFIER_assume(res != (void *)0);
  #line 34 
  return res;
}

#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size)
{
  #line 39 
  return calloc(nmemb,size);
}

#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size)
{
  #line 44 
  return calloc(1UL,size);
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s)
{
  #line 49 
  free(s);
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size)
{
  #line 54 
  void *res;
  #line 56 
  if (ptr != (void *)0 && size == 0UL) {
    #line 57 
    free(ptr);
    #line 58 
    return (void *)0;
  }
  #line 61 
  if (ptr == (void *)0) {
    #line 62 
    res = malloc(size);
    #line 63 
    return res;
  }
  #line 66 
  if (ldv_undef_int() != 0) {
    #line 68 
    res = malloc(size);
    #line 69 
    __VERIFIER_assume(res != (void *)0);
    #line 71 
    memcpy(res,ptr,size);
    #line 72 
    free(ptr);
    #line 74 
    return res;
  }
  else 
       #line 77 
       return (void *)0;
}

#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size)
{
  #line 82 
  void *res;
  #line 84 
  res = malloc(size);
  #line 85 
  __VERIFIER_assume(res != (void *)0);
  #line 87 
  return res;
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size)
{
  #line 92 
  void *res;
  #line 94 
  res = calloc(nmemb,size);
  #line 95 
  __VERIFIER_assume(res != (void *)0);
  #line 97 
  return res;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size)
{
  #line 102 
  void *res;
  #line 104 
  res = calloc(1UL,size);
  #line 105 
  __VERIFIER_assume(res != (void *)0);
  #line 107 
  return res;
}

#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void)
{
  #line 112 
  void *res;
  #line 114 
  if (ldv_undef_int() != 0) {
    #line 116 
    res = external_allocated_data();
    #line 117 
    __VERIFIER_assume(res != (void *)0);
    #line 118 
    return res;
  }
  else 
       #line 121 
       return (void *)0;
}

#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void)
{
  #line 126 
  void *res;
  #line 128 
  if (ldv_undef_int() != 0) {
    #line 130 
    res = external_allocated_data();
    #line 131 
    memset(res,0,8UL);
    #line 132 
    __VERIFIER_assume(res != (void *)0);
    #line 133 
    return res;
  }
  else 
       #line 136 
       return (void *)0;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void)
{
  #line 141 
  return ldv_reference_calloc_unknown_size();
}

#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size)
{
  #line 146 
  void *res;
  #line 149 
  res = external_allocated_data();
  #line 150 
  __VERIFIER_assume(res != (void *)0);
  #line 152 
  return res;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc(size_t size)
{
  #line 25 
  void *res;
  #line 26 
  res = ldv_reference_malloc(size);
  #line 27 
  if (res != (void *)0) {
    #line 28 
    int tmp_0;
    #line 28 
    if (ldv_is_err(res)) 
                         #line 28 
                         tmp_0 = 0; else 
                                         #line 28 
                                         tmp_0 = 1;
    #line 28 
    __VERIFIER_assume(tmp_0);
  }
  #line 29 
  return res;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc(size_t nmemb, size_t size)
{
  #line 34 
  void *res;
  #line 35 
  res = ldv_reference_calloc(nmemb,size);
  #line 36 
  if (res != (void *)0) {
    #line 37 
    int tmp_0;
    #line 37 
    if (ldv_is_err(res)) 
                         #line 37 
                         tmp_0 = 0; else 
                                         #line 37 
                                         tmp_0 = 1;
    #line 37 
    __VERIFIER_assume(tmp_0);
  }
  #line 38 
  return res;
}

#line 41  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc(size_t size)
{
  #line 43 
  void *res;
  #line 44 
  res = ldv_reference_zalloc(size);
  #line 45 
  if (res != (void *)0) {
    #line 46 
    int tmp_0;
    #line 46 
    if (ldv_is_err(res)) 
                         #line 46 
                         tmp_0 = 0; else 
                                         #line 46 
                                         tmp_0 = 1;
    #line 46 
    __VERIFIER_assume(tmp_0);
  }
  #line 47 
  return res;
}

#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void ldv_free(void *s)
{
  #line 52 
  ldv_reference_free(s);
  #line 53 
  return;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc(size_t size)
{
  #line 57 
  void *res;
  #line 59 
  int tmp_0;
  #line 58 
  res = ldv_reference_xmalloc(size);
  #line 59 
  if (ldv_is_err(res)) 
                       #line 59 
                       tmp_0 = 0; else 
                                       #line 59 
                                       tmp_0 = 1;
  #line 59 
  __VERIFIER_assume(tmp_0);
  #line 60 
  return res;
}

#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size)
{
  #line 65 
  void *res;
  #line 67 
  int tmp_0;
  #line 66 
  res = ldv_reference_xcalloc(nmemb,size);
  #line 67 
  if (ldv_is_err(res)) 
                       #line 67 
                       tmp_0 = 0; else 
                                       #line 67 
                                       tmp_0 = 1;
  #line 67 
  __VERIFIER_assume(tmp_0);
  #line 68 
  return res;
}

#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xzalloc(size_t size)
{
  #line 73 
  void *res;
  #line 75 
  int tmp_0;
  #line 74 
  res = ldv_reference_xzalloc(size);
  #line 75 
  if (ldv_is_err(res)) 
                       #line 75 
                       tmp_0 = 0; else 
                                       #line 75 
                                       tmp_0 = 1;
  #line 75 
  __VERIFIER_assume(tmp_0);
  #line 76 
  return res;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc_unknown_size(void)
{
  #line 81 
  void *res;
  #line 82 
  res = ldv_reference_malloc_unknown_size();
  #line 83 
  if (res != (void *)0) {
    #line 84 
    int tmp_0;
    #line 84 
    if (ldv_is_err(res)) 
                         #line 84 
                         tmp_0 = 0; else 
                                         #line 84 
                                         tmp_0 = 1;
    #line 84 
    __VERIFIER_assume(tmp_0);
  }
  #line 85 
  return res;
}

#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void)
{
  #line 90 
  void *res;
  #line 91 
  res = ldv_reference_calloc_unknown_size();
  #line 92 
  if (res != (void *)0) {
    #line 93 
    int tmp_0;
    #line 93 
    if (ldv_is_err(res)) 
                         #line 93 
                         tmp_0 = 0; else 
                                         #line 93 
                                         tmp_0 = 1;
    #line 93 
    __VERIFIER_assume(tmp_0);
  }
  #line 94 
  return res;
}

#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void)
{
  #line 99 
  void *res;
  #line 100 
  res = ldv_reference_zalloc_unknown_size();
  #line 101 
  if (res != (void *)0) {
    #line 102 
    int tmp_0;
    #line 102 
    if (ldv_is_err(res)) 
                         #line 102 
                         tmp_0 = 0; else 
                                         #line 102 
                                         tmp_0 = 1;
    #line 102 
    __VERIFIER_assume(tmp_0);
  }
  #line 103 
  return res;
}

#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size)
{
  #line 108 
  void *res;
  #line 110 
  int tmp_0;
  #line 109 
  res = ldv_reference_xmalloc_unknown_size(size);
  #line 110 
  if (ldv_is_err(res)) 
                       #line 110 
                       tmp_0 = 0; else 
                                       #line 110 
                                       tmp_0 = 1;
  #line 110 
  __VERIFIER_assume(tmp_0);
  #line 111 
  return res;
}

/* compiler builtin: 
   long __builtin_expect(long exp, long c);   */
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 22 
void __VERIFIER_error(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
long __builtin_expect(long exp, long c)
{
  #line 26 
  return exp;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/gcc.c"
void __builtin_trap(void)
{
  #line 37 
  __VERIFIER_error();
  #line 38 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void);
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void);
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void);
#line 54  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end);
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end);
#line 29 
#line 29 
int __VERIFIER_nondet_int(void);
#line 31 
#line 31 
long __VERIFIER_nondet_long(void);
#line 38 
#line 38 
unsigned int __VERIFIER_nondet_uint(void);
#line 41 
#line 41 
unsigned long __VERIFIER_nondet_ulong(void);
#line 42 
#line 42 
unsigned long long __VERIFIER_nondet_ulonglong(void);
#line 43 
#line 43 
void *__VERIFIER_nondet_pointer(void);
#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int(void)
{
  #line 48 
  int undef_int = __VERIFIER_nondet_int();
  #line 50 
  return undef_int;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void)
{
  #line 56 
  long undef_long = __VERIFIER_nondet_long();
  #line 58 
  return undef_long;
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void)
{
  #line 64 
  unsigned int undef_uint = __VERIFIER_nondet_uint();
  #line 66 
  return undef_uint;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void)
{
  #line 72 
  void *undef_ptr = __VERIFIER_nondet_pointer();
  #line 74 
  return undef_ptr;
}

#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void)
{
  #line 80 
  unsigned long undef_ulong = __VERIFIER_nondet_ulong();
  #line 82 
  return undef_ulong;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void)
{
  #line 88 
  unsigned long long undef_ulonglong = __VERIFIER_nondet_ulonglong();
  #line 90 
  return undef_ulonglong;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_positive(void)
{
  #line 95 
  int ret = ldv_undef_int();
  #line 97 
  __VERIFIER_assume(ret > 0);
  #line 99 
  return ret;
}

#line 102  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_negative(void)
{
  #line 104 
  int ret = ldv_undef_int();
  #line 106 
  __VERIFIER_assume(ret < 0);
  #line 108 
  return ret;
}

#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void)
{
  #line 113 
  int ret = ldv_undef_int();
  #line 115 
  __VERIFIER_assume(ret >= 0);
  #line 117 
  return ret;
}

#line 120  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonpositive(void)
{
  #line 122 
  int ret = ldv_undef_int();
  #line 124 
  __VERIFIER_assume(ret <= 0);
  #line 126 
  return ret;
}

#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void)
{
  #line 131 
  void *ret = ldv_undef_ptr();
  #line 133 
  __VERIFIER_assume(ret != (void *)0);
  #line 135 
  return ret;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end)
{
  #line 141 
  int ret;
  #line 143 
  ret = ldv_undef_int();
  #line 144 
  __VERIFIER_assume(ret >= begin);
  #line 145 
  __VERIFIER_assume(ret <= end);
  #line 147 
  return ret;
}

#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end)
{
  #line 153 
  int ret;
  #line 155 
  ret = begin;
  #line 155 
  while (ret < end) {
    #line 156 
    if (ldv_undef_int() != 0) 
                              #line 157 
                              break;
    #line 155 
    ret ++;
  }
  #line 159 
  return ret;
}

#line 62  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 62 
void ldv_initialize(void);
#line 123 
#line 123 
void ldv_pre_probe(void);
#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
#line 35 
int pthread_create(pthread_t *, pthread_attr_t *, void *(*)(void *), void *);
#line 39 
#line 39 
int pthread_join(pthread_t, void **);
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/rtl8821ae.ko/concurrency safety/emg/0/environment_model.c"
int emg_runtime_enabled = 0;
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/rtl8821ae.ko/concurrency safety/emg/0/environment_model.c"
int emg_runtime_lowpower = 1;
#line 39 
#line 79 
void emg_dispatch_deregister_4(struct pci_driver *arg0);
#line 40 
#line 68 
void emg_dispatch_instance_register_3(struct timer_list *arg0);
#line 41 
#line 57 
void emg_dispatch_register_2(struct pci_driver *arg0);
#line 42 
#line 1377 
void *emg_entry_point_insmod(void *arg0);
#line 44 
#line 88 
void *emg_pci_pci_scenario_rtl8821ae_driver(void *arg0);
#line 46 
#line 266 
void *emg_pm_pm_ops_scenario_rtlwifi_pm_ops(void *arg0);
#line 47 
#line 1261 
void *emg_timer_timer_scenario_2(void *arg0);
#line 48 
#line 1406 
int main(void);
#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/rtl8821ae.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_5;
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/rtl8821ae.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_6;
#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/rtl8821ae.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_7;
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/rtl8821ae.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_2(struct pci_driver *arg0)
{
  #line 58 
  int ret;
  #line 59 
  struct emg_struct_pci_scenario_rtl8821ae_driver_5 *cf_arg_5;
  #line 60 
  cf_arg_5 = (struct emg_struct_pci_scenario_rtl8821ae_driver_5 *)ldv_xmalloc(16UL);
  #line 61 
  cf_arg_5->arg0 = arg0;
  #line 62 
  ret = pthread_create(& emg_thread_5,(pthread_attr_t *)0,& emg_pci_pci_scenario_rtl8821ae_driver,(void *)cf_arg_5);
  #line 63 
  __VERIFIER_assume(ret == 0);
  #line 64 
  return;
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/rtl8821ae.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_instance_register_3(struct timer_list *arg0)
{
  #line 69 
  int ret;
  #line 70 
  struct emg_struct_timer_scenario_2_7 *cf_arg_7;
  #line 71 
  cf_arg_7 = (struct emg_struct_timer_scenario_2_7 *)ldv_xmalloc(16UL);
  #line 72 
  cf_arg_7->arg0 = arg0;
  #line 73 
  ret = pthread_create(& emg_thread_7,(pthread_attr_t *)0,& emg_timer_timer_scenario_2,(void *)cf_arg_7);
  #line 74 
  __VERIFIER_assume(ret == 0);
  #line 75 
  return;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/rtl8821ae.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_deregister_4(struct pci_driver *arg0)
{
  #line 80 
  int ret;
  #line 81 
  struct emg_struct_pci_scenario_rtl8821ae_driver_5 *cf_arg_5;
  #line 82 
  ret = pthread_join(emg_thread_5,(void **)0);
  #line 83 
  __VERIFIER_assume(ret == 0);
  #line 84 
  return;
}

#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/rtl8821ae.ko/concurrency safety/emg/0/environment_model.c"
void *emg_pci_pci_scenario_rtl8821ae_driver(void *arg0)
{
  #line 91 
  int emg_5_choice;
  #line 92 
  struct pci_driver *emg_5_container;
  #line 93 
  struct pci_device_id *emg_5_device_id;
  #line 94 
  struct pci_dev *emg_5_resource_0;
  #line 95 
  struct pm_message emg_5_resource_1;
  #line 96 
  int emg_5_ret;
  #line 97 
  int emg_repeat_cnt_call_5_0 = 1;
  #line 98 
  int emg_repeat_cnt_call_5_1 = 1;
  #line 99 
  int emg_repeat_cnt_main_5_1 = 1;
  #line 100 
  int emg_repeat_cnt_main_5_0 = 1;
  #line 102 
  struct emg_struct_pci_scenario_rtl8821ae_driver_5 *data = (struct emg_struct_pci_scenario_rtl8821ae_driver_5 *)arg0;
  #line 106 
  emg_5_choice = 0;
  #line 107 
  emg_5_ret = ldv_undef_int();
  #line 108 
  emg_5_choice = 0;
  #line 109 
  emg_5_container = emg_alias_rtl8821ae_driver;
  #line 110 
  emg_5_ret = ldv_undef_int();
  #line 112 
  __VERIFIER_assume(data->arg0 == emg_alias_rtl8821ae_driver);
  #line 114 
  if (data != (struct emg_struct_pci_scenario_rtl8821ae_driver_5 *)0) {
    #line 115 
    emg_5_container = data->arg0;
    #line 116 
    ldv_free((void *)data);
  }
  #line 121 
  emg_5_resource_0 = (struct pci_dev *)ldv_xmalloc(3312UL);
  #line 122 
  emg_5_choice = __ldv_undef_int_range(0,2);
  #line 123 
  emg_5_device_id = emg_5_container->id_table + (unsigned long)emg_5_choice;
  #line 127 
  goto emg_main_5;
  #line 131 
  return (void *)0;
  #line 134 
  emg_call_5: 
              #line 134 
  ;
  #line 135 
  switch (ldv_undef_int()) {
    #line 136 
    case 0: 
            #line 136 
    ;
    #line 141 
    if (emg_repeat_cnt_call_5_0 > 0) {
      #line 142 
      emg_repeat_cnt_call_5_0 --;
      #line 144 
      goto emg_call_5;
    }
    else 
         #line 146 
         __VERIFIER_assume(0);
    #line 150 
    break;
    #line 152 
    case 1: 
            #line 152 
    ;
    #line 154 
    if (emg_5_container->suspend != (int (*)(struct pci_dev *, pm_message_t ))0) 
      #line 155 
      emg_5_ret = (*(emg_5_container->suspend))(emg_5_resource_0,emg_5_resource_1); else 
                                                                    #line 157 
                                                                    emg_5_ret = ldv_undef_int();
    #line 163 
    emg_5_ret = ldv_filter_err_code(emg_5_ret);
    #line 167 
    if (emg_5_container->resume != (int (*)(struct pci_dev *))0) 
                                                                 #line 168 
                                                                 (*(emg_5_container->resume))(emg_5_resource_0);
    #line 172 
    if (emg_repeat_cnt_call_5_1 > 0) {
      #line 173 
      emg_repeat_cnt_call_5_1 --;
      #line 175 
      goto emg_call_5;
    }
    else 
         #line 177 
         __VERIFIER_assume(0);
    #line 181 
    break;
    #line 183 
    case 2: 
            #line 183 
    ;
    #line 185 
    if (emg_5_container->shutdown != (void (*)(struct pci_dev *))0) 
                                                                    #line 186 
                                                                    (*(emg_5_container->shutdown))(emg_5_resource_0);
    #line 191 
    rtl_pci_disconnect(emg_5_resource_0);
    #line 194 
    if (emg_repeat_cnt_main_5_0 > 0) {
      #line 195 
      emg_repeat_cnt_main_5_0 --;
      #line 197 
      goto emg_main_5;
    }
    else 
         #line 199 
         __VERIFIER_assume(0);
    #line 203 
    break;
    #line 205 
    default: 
             #line 205 
    ;
    #line 205 
    __VERIFIER_assume(0);
  }
  #line 208 
  return (void *)0;
  #line 211 
  emg_main_5: 
              #line 211 
  ;
  #line 212 
  if (ldv_undef_int() != 0) {
    #line 215 
    ldv_pre_probe();
    #line 219 
    emg_5_ret = rtl_pci_probe(emg_5_resource_0,emg_5_device_id);
    #line 224 
    emg_5_ret = ldv_post_probe(emg_5_ret);
    #line 227 
    if (ldv_undef_int() != 0) {
      #line 229 
      __VERIFIER_assume(emg_5_ret == 0);
      #line 233 
      goto emg_call_5;
    }
    else 
         #line 238 
         __VERIFIER_assume(emg_5_ret != 0);
    #line 242 
    if (emg_repeat_cnt_main_5_1 > 0) {
      #line 243 
      emg_repeat_cnt_main_5_1 --;
      #line 245 
      goto emg_main_5;
    }
    else 
         #line 247 
         __VERIFIER_assume(0);
  }
  else 
       #line 253 
       ldv_free((void *)emg_5_resource_0);
  #line 261 
  return (void *)0;
}

#line 266  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/rtl8821ae.ko/concurrency safety/emg/0/environment_model.c"
void *emg_pm_pm_ops_scenario_rtlwifi_pm_ops(void *arg0)
{
  #line 269 
  struct device *emg_6_device;
  #line 270 
  struct dev_pm_ops *emg_6_pm_ops;
  #line 271 
  int emg_6_ret;
  #line 272 
  int emg_repeat_cnt_rest_6 = 1;
  #line 273 
  int emg_repeat_cnt_run_resume_6 = 1;
  #line 274 
  int emg_repeat_cnt_fnoirq_6 = 1;
  #line 275 
  int emg_repeat_cnt_slate_6 = 1;
  #line 276 
  int emg_repeat_cnt_no_irq_6 = 1;
  #line 277 
  int emg_repeat_cnt_tnoirq_6 = 1;
  #line 278 
  int emg_repeat_cnt_poff_6 = 1;
  #line 279 
  int emg_repeat_cnt_resnoirq_6 = 1;
  #line 280 
  int emg_repeat_cnt_plate_6 = 1;
  #line 281 
  int emg_repeat_cnt_res_6 = 1;
  #line 282 
  int emg_repeat_cnt_reslate_6 = 1;
  #line 283 
  int emg_repeat_cnt_pno_irq_6 = 1;
  #line 284 
  int emg_repeat_cnt_reste_6 = 1;
  #line 285 
  int emg_repeat_cnt_thlate_6 = 1;
  #line 286 
  int emg_repeat_cnt_flate_6 = 1;
  #line 287 
  int emg_repeat_cnt_sus_6 = 1;
  #line 288 
  int emg_repeat_cnt_fr_6 = 1;
  #line 289 
  int emg_repeat_cnt_th_6 = 1;
  #line 290 
  int emg_repeat_cnt_restnoirq_6 = 1;
  #line 293 
  emg_6_ret = ldv_undef_int();
  #line 294 
  emg_6_pm_ops = emg_alias_rtlwifi_pm_ops;
  #line 295 
  emg_6_ret = ldv_undef_int();
  #line 301 
  goto emg_do_6;
  #line 305 
  return (void *)0;
  #line 308 
  emg_compl_6: 
               #line 308 
  ;
  #line 310 
  if (emg_6_pm_ops->complete != (void (*)(struct device *))0) 
                                                              #line 311 
                                                              (*(emg_6_pm_ops->complete))(emg_6_device);
  #line 319 
  return (void *)0;
  #line 322 
  emg_do_6: 
            #line 322 
  ;
  #line 323 
  switch (ldv_undef_int()) {
    #line 324 
    case 0: 
            #line 324 
    ;
    #line 326 
    __VERIFIER_assume((emg_runtime_enabled == 1 && emg_runtime_lowpower == 1) != 0);
    #line 330 
    goto emg_runt_6;
    #line 335 
    case 1: 
            #line 335 
    ;
    #line 337 
    goto emg_normal_6;
    #line 342 
    case 2: 
            #line 342 
    ;
    #line 346 
    break;
    #line 348 
    default: 
             #line 348 
    ;
    #line 348 
    __VERIFIER_assume(0);
  }
  #line 351 
  return (void *)0;
  #line 354 
  emg_flate_6: 
               #line 354 
  ;
  #line 356 
  if (emg_6_pm_ops->freeze_late != (int (*)(struct device *))0) 
                                                                #line 357 
                                                                emg_6_ret = (*(emg_6_pm_ops->freeze_late))(emg_6_device); else 
                                                                    #line 359 
                                                                    emg_6_ret = ldv_undef_int();
  #line 365 
  emg_6_ret = ldv_post_probe(emg_6_ret);
  #line 368 
  if (ldv_undef_int() != 0) {
    #line 370 
    __VERIFIER_assume(emg_6_ret == 0);
    #line 374 
    goto emg_thlate_6;
  }
  else 
       #line 379 
       __VERIFIER_assume(emg_6_ret != 0);
  #line 383 
  if (emg_repeat_cnt_flate_6 > 0) {
    #line 384 
    emg_repeat_cnt_flate_6 --;
    #line 386 
    goto emg_flate_6;
  }
  else 
       #line 388 
       __VERIFIER_assume(0);
  #line 393 
  return (void *)0;
  #line 396 
  emg_fnoirq_6: 
                #line 396 
  ;
  #line 398 
  if (emg_6_pm_ops->freeze_noirq != (int (*)(struct device *))0) 
                                                                 #line 399 
                                                                 emg_6_ret = (*(emg_6_pm_ops->freeze_noirq))(emg_6_device); else 
                                                                    #line 401 
                                                                    emg_6_ret = ldv_undef_int();
  #line 407 
  emg_6_ret = ldv_post_probe(emg_6_ret);
  #line 410 
  if (ldv_undef_int() != 0) {
    #line 412 
    __VERIFIER_assume(emg_6_ret == 0);
    #line 416 
    goto emg_tnoirq_6;
  }
  else 
       #line 421 
       __VERIFIER_assume(emg_6_ret != 0);
  #line 425 
  if (emg_repeat_cnt_fnoirq_6 > 0) {
    #line 426 
    emg_repeat_cnt_fnoirq_6 --;
    #line 428 
    goto emg_fnoirq_6;
  }
  else 
       #line 430 
       __VERIFIER_assume(0);
  #line 435 
  return (void *)0;
  #line 438 
  emg_fr_6: 
            #line 438 
  ;
  #line 440 
  emg_6_ret = rtl_pci_suspend(emg_6_device);
  #line 445 
  emg_6_ret = ldv_post_probe(emg_6_ret);
  #line 448 
  if (ldv_undef_int() != 0) {
    #line 450 
    __VERIFIER_assume(emg_6_ret == 0);
    #line 453 
    if (ldv_undef_int() != 0) 
                              #line 455 
                              goto emg_fnoirq_6; else 
                                                      #line 460 
                                                      goto emg_flate_6;
  }
  else {
    #line 466 
    __VERIFIER_assume(emg_6_ret != 0);
    #line 469 
    if (emg_repeat_cnt_fr_6 > 0) {
      #line 470 
      emg_repeat_cnt_fr_6 --;
      #line 472 
      goto emg_fr_6;
    }
    else 
         #line 474 
         __VERIFIER_assume(0);
  }
  #line 480 
  return (void *)0;
  #line 483 
  emg_no_irq_6: 
                #line 483 
  ;
  #line 485 
  if (emg_6_pm_ops->suspend_noirq != (int (*)(struct device *))0) 
                                                                  #line 486 
                                                                  emg_6_ret = (*(emg_6_pm_ops->suspend_noirq))(emg_6_device); else 
                                                                    #line 488 
                                                                    emg_6_ret = ldv_undef_int();
  #line 494 
  emg_6_ret = ldv_post_probe(emg_6_ret);
  #line 497 
  if (ldv_undef_int() != 0) {
    #line 499 
    __VERIFIER_assume(emg_6_ret == 0);
    #line 503 
    goto emg_resnoirq_6;
  }
  else 
       #line 508 
       __VERIFIER_assume(emg_6_ret != 0);
  #line 512 
  if (emg_repeat_cnt_no_irq_6 > 0) {
    #line 513 
    emg_repeat_cnt_no_irq_6 --;
    #line 515 
    goto emg_no_irq_6;
  }
  else 
       #line 517 
       __VERIFIER_assume(0);
  #line 522 
  return (void *)0;
  #line 525 
  emg_normal_6: 
                #line 525 
  ;
  #line 527 
  if (emg_6_pm_ops->prepare != (int (*)(struct device *))0) 
                                                            #line 528 
                                                            emg_6_ret = (*(emg_6_pm_ops->prepare))(emg_6_device); else 
                                                                    #line 530 
                                                                    emg_6_ret = ldv_undef_int();
  #line 536 
  emg_6_ret = ldv_post_probe(emg_6_ret);
  #line 539 
  if (ldv_undef_int() != 0) {
    #line 541 
    __VERIFIER_assume(emg_6_ret == 0);
    #line 544 
    switch (ldv_undef_int()) {
      #line 545 
      case 0: 
              #line 545 
      ;
      #line 547 
      goto emg_sus_6;
      #line 552 
      case 1: 
              #line 552 
      ;
      #line 554 
      goto emg_fr_6;
      #line 559 
      case 2: 
              #line 559 
      ;
      #line 561 
      goto emg_poff_6;
      #line 566 
      default: 
               #line 566 
      ;
      #line 566 
      __VERIFIER_assume(0);
    }
  }
  else 
       #line 570 
       __VERIFIER_assume(emg_6_ret != 0);
  #line 578 
  return (void *)0;
  #line 581 
  emg_plate_6: 
               #line 581 
  ;
  #line 583 
  if (emg_6_pm_ops->poweroff_late != (int (*)(struct device *))0) 
                                                                  #line 584 
                                                                  emg_6_ret = (*(emg_6_pm_ops->poweroff_late))(emg_6_device); else 
                                                                    #line 586 
                                                                    emg_6_ret = ldv_undef_int();
  #line 592 
  emg_6_ret = ldv_post_probe(emg_6_ret);
  #line 595 
  if (ldv_undef_int() != 0) {
    #line 597 
    __VERIFIER_assume(emg_6_ret == 0);
    #line 601 
    goto emg_reste_6;
  }
  else 
       #line 606 
       __VERIFIER_assume(emg_6_ret != 0);
  #line 610 
  if (emg_repeat_cnt_plate_6 > 0) {
    #line 611 
    emg_repeat_cnt_plate_6 --;
    #line 613 
    goto emg_plate_6;
  }
  else 
       #line 615 
       __VERIFIER_assume(0);
  #line 620 
  return (void *)0;
  #line 623 
  emg_pno_irq_6: 
                 #line 623 
  ;
  #line 625 
  if (emg_6_pm_ops->poweroff_noirq != (int (*)(struct device *))0) 
                                                                   #line 626 
                                                                   emg_6_ret = (*(emg_6_pm_ops->poweroff_noirq))(emg_6_device); else 
                                                                    #line 628 
                                                                    emg_6_ret = ldv_undef_int();
  #line 634 
  emg_6_ret = ldv_post_probe(emg_6_ret);
  #line 637 
  if (ldv_undef_int() != 0) {
    #line 639 
    __VERIFIER_assume(emg_6_ret == 0);
    #line 643 
    goto emg_restnoirq_6;
  }
  else 
       #line 648 
       __VERIFIER_assume(emg_6_ret != 0);
  #line 652 
  if (emg_repeat_cnt_pno_irq_6 > 0) {
    #line 653 
    emg_repeat_cnt_pno_irq_6 --;
    #line 655 
    goto emg_pno_irq_6;
  }
  else 
       #line 657 
       __VERIFIER_assume(0);
  #line 662 
  return (void *)0;
  #line 665 
  emg_poff_6: 
              #line 665 
  ;
  #line 667 
  emg_6_ret = rtl_pci_suspend(emg_6_device);
  #line 672 
  emg_6_ret = ldv_post_probe(emg_6_ret);
  #line 675 
  if (ldv_undef_int() != 0) {
    #line 677 
    __VERIFIER_assume(emg_6_ret == 0);
    #line 680 
    if (ldv_undef_int() != 0) 
                              #line 682 
                              goto emg_pno_irq_6; else 
                                                       #line 687 
                                                       goto emg_plate_6;
  }
  else {
    #line 693 
    __VERIFIER_assume(emg_6_ret != 0);
    #line 696 
    if (emg_repeat_cnt_poff_6 > 0) {
      #line 697 
      emg_repeat_cnt_poff_6 --;
      #line 699 
      goto emg_poff_6;
    }
    else 
         #line 701 
         __VERIFIER_assume(0);
  }
  #line 707 
  return (void *)0;
  #line 710 
  emg_res_6: 
             #line 710 
  ;
  #line 712 
  emg_6_ret = rtl_pci_resume(emg_6_device);
  #line 717 
  emg_6_ret = ldv_post_probe(emg_6_ret);
  #line 720 
  if (ldv_undef_int() != 0) {
    #line 722 
    __VERIFIER_assume(emg_6_ret == 0);
    #line 726 
    goto emg_compl_6;
  }
  else {
    #line 731 
    __VERIFIER_assume(emg_6_ret != 0);
    #line 734 
    if (emg_repeat_cnt_res_6 > 0) {
      #line 735 
      emg_repeat_cnt_res_6 --;
      #line 737 
      goto emg_res_6;
    }
    else 
         #line 739 
         __VERIFIER_assume(0);
  }
  #line 745 
  return (void *)0;
  #line 748 
  emg_reslate_6: 
                 #line 748 
  ;
  #line 750 
  if (emg_6_pm_ops->resume_early != (int (*)(struct device *))0) 
                                                                 #line 751 
                                                                 emg_6_ret = (*(emg_6_pm_ops->resume_early))(emg_6_device); else 
                                                                    #line 753 
                                                                    emg_6_ret = ldv_undef_int();
  #line 759 
  emg_6_ret = ldv_post_probe(emg_6_ret);
  #line 762 
  if (ldv_undef_int() != 0) {
    #line 764 
    __VERIFIER_assume(emg_6_ret == 0);
    #line 768 
    goto emg_res_6;
  }
  else 
       #line 773 
       __VERIFIER_assume(emg_6_ret != 0);
  #line 777 
  if (emg_repeat_cnt_reslate_6 > 0) {
    #line 778 
    emg_repeat_cnt_reslate_6 --;
    #line 780 
    goto emg_reslate_6;
  }
  else 
       #line 782 
       __VERIFIER_assume(0);
  #line 787 
  return (void *)0;
  #line 790 
  emg_resnoirq_6: 
                  #line 790 
  ;
  #line 792 
  if (emg_6_pm_ops->resume_noirq != (int (*)(struct device *))0) 
                                                                 #line 793 
                                                                 emg_6_ret = (*(emg_6_pm_ops->resume_noirq))(emg_6_device); else 
                                                                    #line 795 
                                                                    emg_6_ret = ldv_undef_int();
  #line 801 
  emg_6_ret = ldv_post_probe(emg_6_ret);
  #line 804 
  if (ldv_undef_int() != 0) {
    #line 806 
    __VERIFIER_assume(emg_6_ret == 0);
    #line 810 
    goto emg_res_6;
  }
  else 
       #line 815 
       __VERIFIER_assume(emg_6_ret != 0);
  #line 819 
  if (emg_repeat_cnt_resnoirq_6 > 0) {
    #line 820 
    emg_repeat_cnt_resnoirq_6 --;
    #line 822 
    goto emg_resnoirq_6;
  }
  else 
       #line 824 
       __VERIFIER_assume(0);
  #line 829 
  return (void *)0;
  #line 832 
  emg_rest_6: 
              #line 832 
  ;
  #line 834 
  emg_6_ret = rtl_pci_resume(emg_6_device);
  #line 839 
  emg_6_ret = ldv_post_probe(emg_6_ret);
  #line 842 
  if (ldv_undef_int() != 0) {
    #line 844 
    __VERIFIER_assume(emg_6_ret == 0);
    #line 848 
    goto emg_compl_6;
  }
  else {
    #line 853 
    __VERIFIER_assume(emg_6_ret != 0);
    #line 856 
    if (emg_repeat_cnt_rest_6 > 0) {
      #line 857 
      emg_repeat_cnt_rest_6 --;
      #line 859 
      goto emg_rest_6;
    }
    else 
         #line 861 
         __VERIFIER_assume(0);
  }
  #line 867 
  return (void *)0;
  #line 870 
  emg_reste_6: 
               #line 870 
  ;
  #line 872 
  if (emg_6_pm_ops->restore_early != (int (*)(struct device *))0) 
                                                                  #line 873 
                                                                  emg_6_ret = (*(emg_6_pm_ops->restore_early))(emg_6_device); else 
                                                                    #line 875 
                                                                    emg_6_ret = ldv_undef_int();
  #line 881 
  emg_6_ret = ldv_post_probe(emg_6_ret);
  #line 884 
  if (ldv_undef_int() != 0) {
    #line 886 
    __VERIFIER_assume(emg_6_ret == 0);
    #line 890 
    goto emg_rest_6;
  }
  else 
       #line 895 
       __VERIFIER_assume(emg_6_ret != 0);
  #line 899 
  if (emg_repeat_cnt_reste_6 > 0) {
    #line 900 
    emg_repeat_cnt_reste_6 --;
    #line 902 
    goto emg_reste_6;
  }
  else 
       #line 904 
       __VERIFIER_assume(0);
  #line 909 
  return (void *)0;
  #line 912 
  emg_restnoirq_6: 
                   #line 912 
  ;
  #line 914 
  if (emg_6_pm_ops->restore_noirq != (int (*)(struct device *))0) 
                                                                  #line 915 
                                                                  emg_6_ret = (*(emg_6_pm_ops->restore_noirq))(emg_6_device); else 
                                                                    #line 917 
                                                                    emg_6_ret = ldv_undef_int();
  #line 923 
  emg_6_ret = ldv_post_probe(emg_6_ret);
  #line 926 
  if (ldv_undef_int() != 0) {
    #line 928 
    __VERIFIER_assume(emg_6_ret == 0);
    #line 932 
    goto emg_rest_6;
  }
  else 
       #line 937 
       __VERIFIER_assume(emg_6_ret != 0);
  #line 941 
  if (emg_repeat_cnt_restnoirq_6 > 0) {
    #line 942 
    emg_repeat_cnt_restnoirq_6 --;
    #line 944 
    goto emg_restnoirq_6;
  }
  else 
       #line 946 
       __VERIFIER_assume(0);
  #line 951 
  return (void *)0;
  #line 954 
  emg_run_resume_6: 
                    #line 954 
  ;
  #line 956 
  if (emg_6_pm_ops->runtime_resume != (int (*)(struct device *))0) 
                                                                   #line 957 
                                                                   emg_6_ret = (*(emg_6_pm_ops->runtime_resume))(emg_6_device); else 
                                                                    #line 959 
                                                                    emg_6_ret = ldv_undef_int();
  #line 965 
  emg_6_ret = ldv_post_probe(emg_6_ret);
  #line 966 
  if (emg_6_ret != 0) 
                      #line 967 
                      emg_runtime_lowpower = 0;
  #line 970 
  if (ldv_undef_int() != 0) 
                            #line 972 
                            __VERIFIER_assume(emg_6_ret == 0);
  else {
    #line 976 
    __VERIFIER_assume(emg_6_ret != 0);
    #line 979 
    if (emg_repeat_cnt_run_resume_6 > 0) {
      #line 980 
      emg_repeat_cnt_run_resume_6 --;
      #line 982 
      goto emg_run_resume_6;
    }
    else 
         #line 984 
         __VERIFIER_assume(0);
  }
  #line 994 
  return (void *)0;
  #line 997 
  emg_runt_6: 
              #line 997 
  ;
  #line 998 
  if (ldv_undef_int() != 0) {
    #line 1000 
    if (emg_6_pm_ops->runtime_idle != (int (*)(struct device *))0) 
                                                                   #line 1001 
                                                                   emg_6_ret = (*(emg_6_pm_ops->runtime_idle))(emg_6_device); else 
                                                                    #line 1003 
                                                                    emg_6_ret = ldv_undef_int();
    #line 1009 
    emg_6_ret = ldv_post_probe(emg_6_ret);
  }
  else {
    #line 1013 
    if (emg_6_pm_ops->runtime_suspend != (int (*)(struct device *))0) 
      #line 1014 
      emg_6_ret = (*(emg_6_pm_ops->runtime_suspend))(emg_6_device); else 
                                                                    #line 1016 
                                                                    emg_6_ret = ldv_undef_int();
    #line 1022 
    emg_6_ret = ldv_post_probe(emg_6_ret);
    #line 1023 
    if (emg_6_ret != 0) 
                        #line 1024 
                        emg_runtime_lowpower = 1;
    #line 1027 
    if (ldv_undef_int() != 0) {
      #line 1029 
      __VERIFIER_assume(emg_6_ret == 0);
      #line 1033 
      goto emg_run_resume_6;
    }
    else 
         #line 1038 
         __VERIFIER_assume(emg_6_ret != 0);
  }
  #line 1047 
  return (void *)0;
  #line 1050 
  emg_slate_6: 
               #line 1050 
  ;
  #line 1052 
  if (emg_6_pm_ops->suspend_late != (int (*)(struct device *))0) 
                                                                 #line 1053 
                                                                 emg_6_ret = (*(emg_6_pm_ops->suspend_late))(emg_6_device); else 
                                                                    #line 1055 
                                                                    emg_6_ret = ldv_undef_int();
  #line 1061 
  emg_6_ret = ldv_post_probe(emg_6_ret);
  #line 1064 
  if (ldv_undef_int() != 0) {
    #line 1066 
    __VERIFIER_assume(emg_6_ret == 0);
    #line 1070 
    goto emg_reslate_6;
  }
  else 
       #line 1075 
       __VERIFIER_assume(emg_6_ret != 0);
  #line 1079 
  if (emg_repeat_cnt_slate_6 > 0) {
    #line 1080 
    emg_repeat_cnt_slate_6 --;
    #line 1082 
    goto emg_slate_6;
  }
  else 
       #line 1084 
       __VERIFIER_assume(0);
  #line 1089 
  return (void *)0;
  #line 1092 
  emg_sus_6: 
             #line 1092 
  ;
  #line 1094 
  emg_6_ret = rtl_pci_suspend(emg_6_device);
  #line 1099 
  emg_6_ret = ldv_post_probe(emg_6_ret);
  #line 1102 
  if (ldv_undef_int() != 0) {
    #line 1104 
    __VERIFIER_assume(emg_6_ret == 0);
    #line 1107 
    if (ldv_undef_int() != 0) 
                              #line 1109 
                              goto emg_no_irq_6; else 
                                                      #line 1114 
                                                      goto emg_slate_6;
  }
  else {
    #line 1120 
    __VERIFIER_assume(emg_6_ret != 0);
    #line 1123 
    if (emg_repeat_cnt_sus_6 > 0) {
      #line 1124 
      emg_repeat_cnt_sus_6 --;
      #line 1126 
      goto emg_sus_6;
    }
    else 
         #line 1128 
         __VERIFIER_assume(0);
  }
  #line 1134 
  return (void *)0;
  #line 1137 
  emg_th_6: 
            #line 1137 
  ;
  #line 1139 
  emg_6_ret = rtl_pci_resume(emg_6_device);
  #line 1144 
  emg_6_ret = ldv_post_probe(emg_6_ret);
  #line 1147 
  if (ldv_undef_int() != 0) {
    #line 1149 
    __VERIFIER_assume(emg_6_ret == 0);
    #line 1153 
    goto emg_compl_6;
  }
  else {
    #line 1158 
    __VERIFIER_assume(emg_6_ret != 0);
    #line 1161 
    if (emg_repeat_cnt_th_6 > 0) {
      #line 1162 
      emg_repeat_cnt_th_6 --;
      #line 1164 
      goto emg_th_6;
    }
    else 
         #line 1166 
         __VERIFIER_assume(0);
  }
  #line 1172 
  return (void *)0;
  #line 1175 
  emg_thlate_6: 
                #line 1175 
  ;
  #line 1177 
  if (emg_6_pm_ops->thaw_early != (int (*)(struct device *))0) 
                                                               #line 1178 
                                                               emg_6_ret = (*(emg_6_pm_ops->thaw_early))(emg_6_device); else 
                                                                    #line 1180 
                                                                    emg_6_ret = ldv_undef_int();
  #line 1186 
  emg_6_ret = ldv_post_probe(emg_6_ret);
  #line 1189 
  if (ldv_undef_int() != 0) {
    #line 1191 
    __VERIFIER_assume(emg_6_ret == 0);
    #line 1195 
    goto emg_th_6;
  }
  else 
       #line 1200 
       __VERIFIER_assume(emg_6_ret != 0);
  #line 1204 
  if (emg_repeat_cnt_thlate_6 > 0) {
    #line 1205 
    emg_repeat_cnt_thlate_6 --;
    #line 1207 
    goto emg_thlate_6;
  }
  else 
       #line 1209 
       __VERIFIER_assume(0);
  #line 1214 
  return (void *)0;
  #line 1217 
  emg_tnoirq_6: 
                #line 1217 
  ;
  #line 1219 
  if (emg_6_pm_ops->thaw_noirq != (int (*)(struct device *))0) 
                                                               #line 1220 
                                                               emg_6_ret = (*(emg_6_pm_ops->thaw_noirq))(emg_6_device); else 
                                                                    #line 1222 
                                                                    emg_6_ret = ldv_undef_int();
  #line 1228 
  emg_6_ret = ldv_post_probe(emg_6_ret);
  #line 1231 
  if (ldv_undef_int() != 0) {
    #line 1233 
    __VERIFIER_assume(emg_6_ret == 0);
    #line 1237 
    goto emg_th_6;
  }
  else 
       #line 1242 
       __VERIFIER_assume(emg_6_ret != 0);
  #line 1246 
  if (emg_repeat_cnt_tnoirq_6 > 0) {
    #line 1247 
    emg_repeat_cnt_tnoirq_6 --;
    #line 1249 
    goto emg_tnoirq_6;
  }
  else 
       #line 1251 
       __VERIFIER_assume(0);
  #line 1256 
  return (void *)0;
}

#line 1261  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/rtl8821ae.ko/concurrency safety/emg/0/environment_model.c"
void *emg_timer_timer_scenario_2(void *arg0)
{
  #line 1264 
  struct timer_list *emg_7_container;
  #line 1265 
  unsigned long emg_7_emg_param_0_0;
  #line 1267 
  struct emg_struct_timer_scenario_2_7 *data = (struct emg_struct_timer_scenario_2_7 *)arg0;
  #line 1272 
  if (data != (struct emg_struct_timer_scenario_2_7 *)0) {
    #line 1273 
    emg_7_container = data->arg0;
    #line 1274 
    ldv_free((void *)data);
  }
  #line 1280 
  ldv_switch_to_interrupt_context();
  #line 1284 
  if (emg_7_container->function != (void (*)(struct timer_list *))0) 
    #line 1285 
    (*(emg_7_container->function))((struct timer_list *)emg_7_emg_param_0_0);
  #line 1291 
  ldv_switch_to_process_context();
  #line 1298 
  return (void *)0;
}

#line 1303  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/rtl8821ae.ko/concurrency safety/emg/0/environment_model.c"
int emg___pci_register_driver(struct pci_driver *arg0, struct module *arg1, char *arg2)
{
  #line 1306 
  struct pci_driver *emg_2_pci_driver;
  #line 1308 
  emg_2_pci_driver = emg_alias_rtl8821ae_driver;
  #line 1309 
  if (ldv_undef_int() != 0) {
    #line 1311 
    emg_2_pci_driver = arg0;
    #line 1315 
    emg_dispatch_register_2(emg_2_pci_driver);
    #line 1319 
    return 0;
  }
  else {
    #line 1323 
    return ldv_undef_int_negative();
  }
}

#line 1331  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/rtl8821ae.ko/concurrency safety/emg/0/environment_model.c"
int emg_mod_timer(struct timer_list *arg0, unsigned long arg1)
{
  #line 1334 
  struct timer_list *emg_3_timer_list;
  #line 1336 
  if (ldv_undef_int() != 0) {
    #line 1338 
    emg_3_timer_list = arg0;
    #line 1342 
    emg_dispatch_instance_register_3(emg_3_timer_list);
    #line 1346 
    return 1;
  }
  else 
       #line 1350 
       return 0;
}

#line 1358  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/rtl8821ae.ko/concurrency safety/emg/0/environment_model.c"
void emg_pci_unregister_driver(struct pci_driver *arg0)
{
  #line 1361 
  struct pci_driver *emg_4_pci_driver;
  #line 1363 
  emg_4_pci_driver = emg_alias_rtl8821ae_driver;
  #line 1365 
  emg_4_pci_driver = arg0;
  #line 1369 
  emg_dispatch_deregister_4(emg_4_pci_driver);
  #line 1372 
  return;
}

#line 1377  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/rtl8821ae.ko/concurrency safety/emg/0/environment_model.c"
void *emg_entry_point_insmod(void *arg0)
{
  #line 1380 
  int emg_1_ret;
  #line 1383 
  emg_1_ret = emg_rtl8821ae_driver_init();
  #line 1384 
  emg_1_ret = ldv_post_init(emg_1_ret);
  #line 1387 
  if (ldv_undef_int() != 0) {
    #line 1389 
    __VERIFIER_assume(emg_1_ret == 0);
    #line 1393 
    emg_rtl8821ae_driver_exit();
  }
  else 
       #line 1397 
       __VERIFIER_assume(emg_1_ret != 0);
  #line 1401 
  return (void *)0;
}

#line 1406  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/realtek/rtlwifi/rtl8821ae/rtl8821ae.ko/concurrency safety/emg/0/environment_model.c"
int main(void)
{
  #line 1408 
  ldv_initialize();
  #line 1410 
  emg_entry_point_insmod((void *)0);
  #line 1412 
  return 0;
}

