/* Generated by Frama-C */
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler_types.h"
typedef signed char __s8;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef short __s16;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef int __s32;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef long long __s64;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef __s8 s8;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u8 u8;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s16 s16;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u16 u16;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s32 s32;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u32 u32;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s64 s64;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u64 u64;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/uapi/asm/posix_types_64.h"
typedef long __kernel_long_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned long __kernel_ulong_t;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_pid_t;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_uid32_t;
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_gid32_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_ulong_t __kernel_size_t;
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_ssize_t;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_loff_t;
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_time64_t;
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_clock_t;
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_timer_t;
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_clockid_t;
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __u16 __le16;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u16 __be16;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __le32;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __be32;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u64 __le64;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u64 __be64;
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u16 __sum16;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __wsum;
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef unsigned int __poll_t;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef u32 __kernel_dev_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned short umode_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef _Bool bool;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_size_t size_t;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef s32 int32_t;
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u32 uint32_t;
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 sector_t;
#line 131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 blkcnt_t;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 dma_addr_t;
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int gfp_t;
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int slab_flags_t;
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int fmode_t;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 phys_addr_t;
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef phys_addr_t resource_size_t;
#line 164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned long irq_hw_number_t;
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int counter ;
};
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   s64 counter ;
};
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 185 
struct hlist_node;
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct callback_head {
   struct callback_head *next ;
   void (*func)(struct callback_head *) ;
} __attribute__((__aligned__(8)));
#line 14  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_enet.i.aux"
struct task_struct;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
struct module;
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
struct kernel_symbol {
   int value_offset ;
   int name_offset ;
   int namespace_offset ;
};
#line 136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/init.h"
typedef void (*ctor_fn_t)(void);
#line 139 
struct file_system_type;
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct ctl_table;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry;
#line 87 
struct static_key_mod;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
union __anonunion_8 {
   unsigned long type ;
   struct jump_entry *entries ;
   struct static_key_mod *next ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key {
   atomic_t enabled ;
   union __anonunion_8 __anonCompField_static_key_4 ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry {
   s32 code ;
   s32 target ;
   long key ;
};
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key_true {
   struct static_key key ;
};
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key_false {
   struct static_key key ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
union __anonunion_key_9 {
   struct static_key_true dd_key_true ;
   struct static_key_false dd_key_false ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
struct _ddebug {
   char *modname ;
   char *function ;
   char *filename ;
   char *format ;
   unsigned int lineno : 18 ;
   unsigned int flags : 8 ;
   union __anonunion_key_9 key ;
} __attribute__((__aligned__(8)));
#line 59 
struct device;
#line 65 
struct net_device;
#line 476  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct file_operations;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/div64.h"
struct completion;
#line 88 
struct pt_regs;
#line 557  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
enum system_states {
    SYSTEM_BOOTING = 0,
    SYSTEM_SCHEDULING = 1,
    SYSTEM_RUNNING = 2,
    SYSTEM_HALT = 3,
    SYSTEM_POWER_OFF = 4,
    SYSTEM_RESTART = 5,
    SYSTEM_SUSPEND = 6
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bug.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/math64.h"
typedef __s64 time64_t;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/time_types.h"
struct __kernel_timespec {
   __kernel_time64_t tv_sec ;
   long long tv_nsec ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time64.h"
struct timespec64 {
   time64_t tv_sec ;
   long tv_nsec ;
};
#line 165 
struct old_timespec32;
#line 166 
struct pollfd;
#line 167 
enum timespec_type {
    TT_NONE = 0,
    TT_NATIVE = 1,
    TT_COMPAT = 2
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_futex_27 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_29 {
   struct __kernel_timespec *rmtp ;
   struct old_timespec32 *compat_rmtp ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_nanosleep_28 {
   clockid_t clockid ;
   enum timespec_type type ;
   union __anonunion_29 __anonCompField___anonstruct_nanosleep_28_5 ;
   u64 expires ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_poll_30 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_26 {
   struct __anonstruct_futex_27 futex ;
   struct __anonstruct_nanosleep_28 nanosleep ;
   struct __anonstruct_poll_30 poll ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct restart_block {
   long (*fn)(struct restart_block *) ;
   union __anonunion_26 __anonCompField_restart_block_6 ;
};
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
struct page;
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/getorder.h"
struct mm_struct;
#line 49 
struct io_bitmap;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/ptrace.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
struct desc_struct {
   u16 limit0 ;
   u16 base0 ;
   u16 base1 : 8 ;
   u16 type : 4 ;
   u16 s : 1 ;
   u16 dpl : 2 ;
   u16 p : 1 ;
   u16 limit1 : 4 ;
   u16 avl : 1 ;
   u16 l : 1 ;
   u16 d : 1 ;
   u16 g : 1 ;
   u16 base2 : 8 ;
} __attribute__((__packed__));
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
typedef unsigned long pteval_t;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pmdval_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pudval_t;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
struct __anonstruct_pte_t_53 {
   pteval_t pte ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef struct __anonstruct_pte_t_53 pte_t;
#line 265  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 267  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_54 {
   pgdval_t pgd ;
};
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_54 pgd_t;
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pud_t_56 {
   pudval_t pud ;
};
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pud_t_56 pud_t;
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pmd_t_57 {
   pmdval_t pmd ;
};
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pmd_t_57 pmd_t;
#line 505  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct page *pgtable_t;
#line 519 
struct file;
#line 530 
struct seq_file;
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/nospec-branch.h"
struct thread_struct;
#line 362 
struct cpumask;
#line 365 
struct vm_area_struct;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_59 {
   u8 locked ;
   u8 pending ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_60 {
   u16 locked_pending ;
   u16 tail ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
union __anonunion_58 {
   atomic_t val ;
   struct __anonstruct_59 __anonCompField___anonunion_58_7 ;
   struct __anonstruct_60 __anonCompField___anonunion_58_8 ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct qspinlock {
   union __anonunion_58 __anonCompField_qspinlock_9 ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
typedef struct qspinlock arch_spinlock_t;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct __anonstruct_62 {
   u8 wlocked ;
   u8 __lstate[3U] ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
union __anonunion_61 {
   atomic_t cnts ;
   struct __anonstruct_62 __anonCompField___anonunion_61_10 ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct qrwlock {
   union __anonunion_61 __anonCompField_qrwlock_11 ;
   arch_spinlock_t wait_lock ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
typedef struct qrwlock arch_rwlock_t;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/math_emu.h"
struct math_emu_info {
   long ___orig_eip ;
   struct pt_regs *regs ;
};
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
union __anonunion___u_67 {
   int __val ;
   char __c[1U] ;
};
#line 2288  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/atomic-fallback.h"
typedef atomic64_t atomic_long_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
struct cpumask {
   unsigned long bits[128U] ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint_func {
   void *func ;
   void *data ;
   int prio ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint {
   char *name ;
   struct static_key key ;
   int (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   struct tracepoint_func *funcs ;
};
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
typedef int tracepoint_ptr_t;
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct bpf_raw_event_map {
   struct tracepoint *tp ;
   void *bpf_func ;
   u32 num_args ;
   u32 writable_size ;
} __attribute__((__aligned__(32)));
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_90 {
   u64 rip ;
   u64 rdp ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_91 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_89 {
   struct __anonstruct_90 __anonCompField___anonunion_89_17 ;
   struct __anonstruct_91 __anonCompField___anonunion_89_18 ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_92 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fxregs_state {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_89 __anonCompField_fxregs_state_19 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_92 __anonCompField_fxregs_state_20 ;
} __attribute__((__aligned__(16)));
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct swregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xstate_header {
   u64 xfeatures ;
   u64 xcomp_bv ;
   u64 reserved[6U] ;
} __attribute__((__packed__));
#line 253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xregs_state {
   struct fxregs_state i387 ;
   struct xstate_header header ;
   u8 extended_state_area[0U] ;
} __attribute__((__packed__, __aligned__(64)));
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union fpregs_state {
   struct fregs_state fsave ;
   struct fxregs_state fxsave ;
   struct swregs_state soft ;
   struct xregs_state xsave ;
   u8 __padding[4096U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fpu {
   unsigned int last_cpu ;
   unsigned long avx512_timestamp ;
   union fpregs_state state ;
};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/orc_types.h"
struct orc_entry {
   s16 sp_offset ;
   s16 bp_offset ;
   unsigned int sp_reg : 4 ;
   unsigned int bp_reg : 4 ;
   unsigned int type : 2 ;
   unsigned int end : 1 ;
} __attribute__((__packed__));
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct seq_operations;
#line 478 
struct perf_event;
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct __anonstruct_mm_segment_t_95 {
   unsigned long seg ;
};
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_95 mm_segment_t;
#line 485  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fsbase ;
   unsigned long gsbase ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_nr ;
   unsigned long error_code ;
   struct io_bitmap *io_bitmap ;
   unsigned long iopl_emul ;
   mm_segment_t addr_limit ;
   unsigned int sig_on_uaccess_err : 1 ;
   unsigned int uaccess_err : 1 ;
   struct fpu fpu ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/thread_info.h"
struct thread_info {
   unsigned long flags ;
   u32 status ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
struct lockdep_map;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_subclass_key {
   char __one_byte ;
} __attribute__((__packed__));
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
union __anonunion_96 {
   struct hlist_node hash_entry ;
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class_key {
   union __anonunion_96 __anonCompField_lock_class_key_23 ;
};
#line 68 
struct lock_trace;
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class {
   struct hlist_node hash_entry ;
   struct list_head lock_entry ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct lock_trace *usage_traces[9U] ;
   int name_version ;
   char *name ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char *name ;
   int cpu ;
   unsigned long ip ;
};
#line 226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned int class_idx : 13 ;
   unsigned int irq_context : 2 ;
   unsigned int trylock : 1 ;
   unsigned int read : 2 ;
   unsigned int check : 1 ;
   unsigned int hardirqs_off : 1 ;
   unsigned int references : 12 ;
   unsigned int pin_count ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_98 {
   u8 __padding[24U] ;
   struct lockdep_map dep_map ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
union __anonunion_97 {
   struct raw_spinlock rlock ;
   struct __anonstruct_98 __anonCompField___anonunion_97_24 ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_97 __anonCompField_spinlock_25 ;
};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_rwlock_t_99 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct __anonstruct_rwlock_t_99 rwlock_t;
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
struct mutex;
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
struct kmem_cache;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ioport.h"
struct resource {
   resource_size_t start ;
   resource_size_t end ;
   char *name ;
   unsigned long flags ;
   unsigned long desc ;
   struct resource *parent ;
   struct resource *sibling ;
   struct resource *child ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/osq_lock.h"
struct optimistic_spin_queue {
   atomic_t tail ;
};
#line 40 
struct ww_acquire_ctx;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex {
   atomic_long_t owner ;
   spinlock_t wait_lock ;
   struct optimistic_spin_queue osq ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   struct ww_acquire_ctx *ww_ctx ;
   void *magic ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
struct wait_queue_head {
   spinlock_t lock ;
   struct list_head head ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
typedef struct wait_queue_head wait_queue_head_t;
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct seqcount {
   unsigned int sequence ;
   struct lockdep_map dep_map ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct seqcount seqcount_t;
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct __anonstruct_seqlock_t_114 {
   struct seqcount seqcount ;
   spinlock_t lock ;
};
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct __anonstruct_seqlock_t_114 seqlock_t;
#line 601  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct __anonstruct_nodemask_t_115 {
   unsigned long bits[16U] ;
};
#line 601  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct __anonstruct_nodemask_t_115 nodemask_t;
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nodemask.h"
enum node_states {
    N_POSSIBLE = 0,
    N_ONLINE = 1,
    N_NORMAL_MEMORY = 2,
    N_HIGH_MEMORY = 2,
    N_MEMORY = 3,
    N_CPU = 4,
    NR_NODE_STATES = 5
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/tlbbatch.h"
struct arch_tlbflush_unmap_batch {
   struct cpumask cpumask ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct vmacache {
   u64 seqnum ;
   struct vm_area_struct *vmas[4U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct task_rss_stat {
   int events ;
   int count[4U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct mm_rss_stat {
   atomic_long_t count[4U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct page_frag {
   struct page *page ;
   __u32 offset ;
   __u32 size ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct tlbflush_unmap_batch {
   struct arch_tlbflush_unmap_batch arch ;
   bool flush_required ;
   bool writable ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_node {
   unsigned long __rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
} __attribute__((__aligned__(8)));
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root_cached {
   struct rb_root rb_root ;
   struct rb_node *rb_leftmost ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rwsem.h"
struct rw_semaphore {
   atomic_long_t count ;
   atomic_long_t owner ;
   struct optimistic_spin_queue osq ;
   raw_spinlock_t wait_lock ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/completion.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 120 
struct inode;
#line 121 
struct notifier_block;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timex.h"
typedef s32 old_time32_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time32.h"
struct old_timespec32 {
   old_time32_t tv_sec ;
   s32 tv_nsec ;
};
#line 461  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
typedef s64 ktime_t;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
struct timer_list {
   struct hlist_node entry ;
   unsigned long expires ;
   void (*function)(struct timer_list *) ;
   u32 flags ;
   struct lockdep_map lockdep_map ;
};
#line 196 
struct hrtimer;
#line 197 
enum hrtimer_restart;
#line 221 
struct workqueue_struct;
#line 222 
struct work_struct;
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct *) ;
   struct lockdep_map lockdep_map ;
};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
   struct workqueue_struct *wq ;
   int cpu ;
};
#line 124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct rcu_work {
   struct work_struct work ;
   struct callback_head rcu ;
   struct workqueue_struct *wq ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_segcblist.h"
struct rcu_segcblist {
   struct callback_head *head ;
   struct callback_head **tails[4U] ;
   unsigned long gp_seq[4U] ;
   atomic_long_t len ;
   long len_lazy ;
   u8 enabled ;
   u8 offloaded ;
};
#line 80 
struct srcu_struct;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcu.h"
struct srcu_node;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_data {
   unsigned long srcu_lock_count[2U] ;
   unsigned long srcu_unlock_count[2U] ;
   spinlock_t lock ;
   struct rcu_segcblist srcu_cblist ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   bool srcu_cblist_invoking ;
   struct timer_list delay_work ;
   struct work_struct work ;
   struct callback_head srcu_barrier_head ;
   struct srcu_node *mynode ;
   unsigned long grpmask ;
   int cpu ;
   struct srcu_struct *ssp ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_node {
   spinlock_t lock ;
   unsigned long srcu_have_cbs[4U] ;
   unsigned long srcu_data_have_cbs[4U] ;
   unsigned long srcu_gp_seq_needed_exp ;
   struct srcu_node *srcu_parent ;
   int grplo ;
   int grphi ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_struct {
   struct srcu_node node[521U] ;
   struct srcu_node *level[4U] ;
   struct mutex srcu_cb_mutex ;
   spinlock_t lock ;
   struct mutex srcu_gp_mutex ;
   unsigned int srcu_idx ;
   unsigned long srcu_gp_seq ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   unsigned long srcu_last_gp_end ;
   struct srcu_data *sda ;
   unsigned long srcu_barrier_seq ;
   struct mutex srcu_barrier_mutex ;
   struct completion srcu_barrier_completion ;
   atomic_t srcu_barrier_cpu_cnt ;
   struct delayed_work work ;
   struct lockdep_map dep_map ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block *, unsigned long , void *) ;
   struct notifier_block *next ;
   int priority ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct raw_notifier_head {
   struct notifier_block *head ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/uprobes.h"
struct arch_uprobe_task {
   unsigned long saved_scratch_register ;
   unsigned int saved_trap_nr ;
   unsigned int saved_tf ;
};
#line 57 
enum uprobe_task_state {
    UTASK_RUNNING = 0,
    UTASK_SSTEP = 1,
    UTASK_SSTEP_ACK = 2,
    UTASK_SSTEP_TRAPPED = 3
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_126 {
   struct arch_uprobe_task autask ;
   unsigned long vaddr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_127 {
   struct callback_head dup_xol_work ;
   unsigned long dup_xol_addr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
union __anonunion_125 {
   struct __anonstruct_126 __anonCompField___anonunion_125_28 ;
   struct __anonstruct_127 __anonCompField___anonunion_125_29 ;
};
#line 61 
struct uprobe;
#line 61 
struct return_instance;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobe_task {
   enum uprobe_task_state state ;
   union __anonunion_125 __anonCompField_uprobe_task_30 ;
   struct uprobe *active_uprobe ;
   unsigned long xol_vaddr ;
   struct return_instance *return_instances ;
   unsigned int depth ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct return_instance {
   struct uprobe *uprobe ;
   unsigned long func ;
   unsigned long stack ;
   unsigned long orig_ret_vaddr ;
   bool chained ;
   struct return_instance *next ;
};
#line 98 
struct xol_area;
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobes_state {
   struct xol_area *xol_area ;
};
#line 140 
struct ldt_struct;
#line 140 
struct vdso_image;
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_mm_context_t_128 {
   u64 ctx_id ;
   atomic64_t tlb_gen ;
   struct rw_semaphore ldt_usr_sem ;
   struct ldt_struct *ldt ;
   unsigned short ia32_compat ;
   struct mutex lock ;
   void *vdso ;
   struct vdso_image *vdso_image ;
   atomic_t perf_rdpmc_allowed ;
   u16 pkey_allocation_map ;
   s16 execute_only_pkey ;
   void *bd_addr ;
};
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
typedef struct __anonstruct_mm_context_t_128 mm_context_t;
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct address_space;
#line 67 
struct mem_cgroup;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_130 {
   struct list_head lru ;
   struct address_space *mapping ;
   unsigned long index ;
   unsigned long private ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_131 {
   dma_addr_t dma_addr ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_134 {
   struct page *next ;
   int pages ;
   int pobjects ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_133 {
   struct list_head slab_list ;
   struct __anonstruct_134 __anonCompField___anonunion_133_33 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_136 {
   unsigned int inuse : 16 ;
   unsigned int objects : 15 ;
   unsigned int frozen : 1 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_135 {
   void *s_mem ;
   unsigned long counters ;
   struct __anonstruct_136 __anonCompField___anonunion_135_35 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_132 {
   union __anonunion_133 __anonCompField___anonstruct_132_34 ;
   struct kmem_cache *slab_cache ;
   void *freelist ;
   union __anonunion_135 __anonCompField___anonstruct_132_36 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_137 {
   unsigned long compound_head ;
   unsigned char compound_dtor ;
   unsigned char compound_order ;
   atomic_t compound_mapcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_138 {
   unsigned long _compound_pad_1 ;
   unsigned long _compound_pad_2 ;
   struct list_head deferred_list ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_140 {
   struct mm_struct *pt_mm ;
   atomic_t pt_frag_refcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_139 {
   unsigned long _pt_pad_1 ;
   pgtable_t pmd_huge_pte ;
   unsigned long _pt_pad_2 ;
   union __anonunion_140 __anonCompField___anonstruct_139_40 ;
   spinlock_t *ptl ;
};
#line 68 
struct dev_pagemap;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_141 {
   struct dev_pagemap *pgmap ;
   void *zone_device_data ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_129 {
   struct __anonstruct_130 __anonCompField___anonunion_129_31 ;
   struct __anonstruct_131 __anonCompField___anonunion_129_32 ;
   struct __anonstruct_132 __anonCompField___anonunion_129_37 ;
   struct __anonstruct_137 __anonCompField___anonunion_129_38 ;
   struct __anonstruct_138 __anonCompField___anonunion_129_39 ;
   struct __anonstruct_139 __anonCompField___anonunion_129_41 ;
   struct __anonstruct_141 __anonCompField___anonunion_129_42 ;
   struct callback_head callback_head ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_142 {
   atomic_t _mapcount ;
   unsigned int page_type ;
   unsigned int active ;
   int units ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct page {
   unsigned long flags ;
   union __anonunion_129 __anonCompField_page_43 ;
   union __anonunion_142 __anonCompField_page_44 ;
   atomic_t _refcount ;
   struct mem_cgroup *mem_cgroup ;
} __attribute__((__aligned__(16)));
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct userfaultfd_ctx;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_userfaultfd_ctx {
   struct userfaultfd_ctx *ctx ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_shared_143 {
   struct rb_node rb ;
   unsigned long rb_subtree_last ;
};
#line 292 
struct anon_vma;
#line 292 
struct vm_operations_struct;
#line 292 
struct mempolicy;
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_area_struct {
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   struct rb_node vm_rb ;
   unsigned long rb_subtree_gap ;
   struct mm_struct *vm_mm ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct __anonstruct_shared_143 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   atomic_long_t swap_readahead_info ;
   struct mempolicy *vm_policy ;
   struct vm_userfaultfd_ctx vm_userfaultfd_ctx ;
} __attribute__((__designated_init__));
#line 358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 368 
struct kioctx_table;
#line 370 
struct linux_binfmt;
#line 370 
struct user_namespace;
#line 370 
struct mmu_notifier_mm;
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_144 {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   u64 vmacache_seqnum ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   unsigned long mmap_base ;
   unsigned long mmap_legacy_base ;
   unsigned long mmap_compat_base ;
   unsigned long mmap_compat_legacy_base ;
   unsigned long task_size ;
   unsigned long highest_vm_end ;
   pgd_t *pgd ;
   atomic_t membarrier_state ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   atomic_long_t pgtables_bytes ;
   int map_count ;
   spinlock_t page_table_lock ;
   struct rw_semaphore mmap_sem ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   atomic64_t pinned_vm ;
   unsigned long data_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long def_flags ;
   spinlock_t arg_lock ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[46U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   mm_context_t context ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct kioctx_table *ioctx_table ;
   struct task_struct *owner ;
   struct user_namespace *user_ns ;
   struct file *exe_file ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
   unsigned long numa_next_scan ;
   unsigned long numa_scan_offset ;
   int numa_scan_seq ;
   atomic_t tlb_flush_pending ;
   bool tlb_flush_batched ;
   struct uprobes_state uprobes_state ;
   atomic_long_t hugetlb_usage ;
   struct work_struct async_put_work ;
} __attribute__((__designated_init__));
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct mm_struct {
   struct __anonstruct_144 __anonCompField_mm_struct_45 ;
   unsigned long cpu_bitmap[] ;
};
#line 642 
struct vm_fault;
#line 643  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
typedef unsigned int vm_fault_t;
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page-flags.h"
union __anonunion___u_147 {
   unsigned long __val ;
   char __c[1U] ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct free_area {
   struct list_head free_list[6U] ;
   unsigned long nr_free ;
};
#line 158 
struct pglist_data;
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone_padding {
   char x[0U] ;
} __attribute__((__aligned__(4096)));
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone_reclaim_stat {
   unsigned long recent_rotated[2U] ;
   unsigned long recent_scanned[2U] ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct lruvec {
   struct list_head lists[5U] ;
   struct zone_reclaim_stat reclaim_stat ;
   atomic_long_t inactive_age ;
   unsigned long refaults ;
   unsigned long flags ;
   struct pglist_data *pgdat ;
};
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
typedef unsigned int isolate_mode_t;
#line 340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_pages {
   int count ;
   int high ;
   int batch ;
   struct list_head lists[3U] ;
};
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_pageset {
   struct per_cpu_pages pcp ;
   s8 expire ;
   u16 vm_numa_stat_diff[6U] ;
   s8 stat_threshold ;
   s8 vm_stat_diff[13U] ;
};
#line 361  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_nodestat {
   s8 stat_threshold ;
   s8 vm_node_stat_diff[32U] ;
};
#line 365 
enum zone_type {
    ZONE_DMA = 0,
    ZONE_DMA32 = 1,
    ZONE_NORMAL = 2,
    ZONE_MOVABLE = 3,
    ZONE_DEVICE = 4,
    __MAX_NR_ZONES = 5
};
#line 432  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone {
   unsigned long _watermark[3U] ;
   unsigned long watermark_boost ;
   unsigned long nr_reserved_highatomic ;
   long lowmem_reserve[5U] ;
   int node ;
   struct pglist_data *zone_pgdat ;
   struct per_cpu_pageset *pageset ;
   unsigned long zone_start_pfn ;
   atomic_long_t managed_pages ;
   unsigned long spanned_pages ;
   unsigned long present_pages ;
   char *name ;
   unsigned long nr_isolate_pageblock ;
   seqlock_t span_seqlock ;
   int initialized ;
   struct zone_padding _pad1_ ;
   struct free_area free_area[11U] ;
   unsigned long flags ;
   spinlock_t lock ;
   struct zone_padding _pad2_ ;
   unsigned long percpu_drift_mark ;
   unsigned long compact_cached_free_pfn ;
   unsigned long compact_cached_migrate_pfn[2U] ;
   unsigned long compact_init_migrate_pfn ;
   unsigned long compact_init_free_pfn ;
   unsigned int compact_considered ;
   unsigned int compact_defer_shift ;
   int compact_order_failed ;
   bool compact_blockskip_flush ;
   bool contiguous ;
   struct zone_padding _pad3_ ;
   atomic_long_t vm_stat[13U] ;
   atomic_long_t vm_numa_stat[6U] ;
} __attribute__((__aligned__(4096)));
#line 665  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zoneref {
   struct zone *zone ;
   int zone_idx ;
};
#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zonelist {
   struct zoneref _zonerefs[5121U] ;
};
#line 694  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct deferred_split {
   spinlock_t split_queue_lock ;
   struct list_head split_queue ;
   unsigned long split_queue_len ;
};
#line 710  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct pglist_data {
   struct zone node_zones[5U] ;
   struct zonelist node_zonelists[2U] ;
   int nr_zones ;
   spinlock_t node_size_lock ;
   unsigned long node_start_pfn ;
   unsigned long node_present_pages ;
   unsigned long node_spanned_pages ;
   int node_id ;
   wait_queue_head_t kswapd_wait ;
   wait_queue_head_t pfmemalloc_wait ;
   struct task_struct *kswapd ;
   int kswapd_order ;
   enum zone_type kswapd_classzone_idx ;
   int kswapd_failures ;
   int kcompactd_max_order ;
   enum zone_type kcompactd_classzone_idx ;
   wait_queue_head_t kcompactd_wait ;
   struct task_struct *kcompactd ;
   unsigned long totalreserve_pages ;
   unsigned long min_unmapped_pages ;
   unsigned long min_slab_pages ;
   struct zone_padding _pad1_ ;
   spinlock_t lru_lock ;
   unsigned long first_deferred_pfn ;
   struct deferred_split deferred_split_queue ;
   struct lruvec __lruvec ;
   unsigned long flags ;
   struct zone_padding _pad2_ ;
   struct per_cpu_nodestat *per_cpu_nodestats ;
   atomic_long_t vm_stat[32U] ;
};
#line 824 
struct vmem_altmap;
#line 282  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/x86_init.h"
struct pci_dev;
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/topology.h"
struct pci_bus;
#line 440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/io.h"
struct fwnode_operations;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_handle {
   struct fwnode_handle *secondary ;
   struct fwnode_operations *ops ;
   struct device *dev ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_endpoint {
   unsigned int port ;
   unsigned int id ;
   struct fwnode_handle *local_fwnode ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_reference_args {
   struct fwnode_handle *fwnode ;
   unsigned int nargs ;
   u64 args[8U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_operations {
   struct fwnode_handle *(*get)(struct fwnode_handle *) ;
   void (*put)(struct fwnode_handle *) ;
   bool (*device_is_available)(struct fwnode_handle *) ;
   void *(*device_get_match_data)(struct fwnode_handle *, struct device *) ;
   bool (*property_present)(struct fwnode_handle *, char *) ;
   int (*property_read_int_array)(struct fwnode_handle *, char *, unsigned int , void *, size_t ) ;
   int (*property_read_string_array)(struct fwnode_handle *, char *, char **, size_t ) ;
   char *(*get_name)(struct fwnode_handle *) ;
   char *(*get_name_prefix)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_parent)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_next_child_node)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*get_named_child_node)(struct fwnode_handle *, char *) ;
   int (*get_reference_args)(struct fwnode_handle *, char *, char *, unsigned int , unsigned int , struct fwnode_reference_args *) ;
   struct fwnode_handle *(*graph_get_next_endpoint)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_remote_endpoint)(struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_port_parent)(struct fwnode_handle *) ;
   int (*graph_parse_endpoint)(struct fwnode_handle *, struct fwnode_endpoint *) ;
   int (*add_links)(struct fwnode_handle *, struct device *) ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node {
   struct llist_node *next ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
struct vm_struct {
   struct vm_struct *next ;
   void *addr ;
   unsigned long size ;
   unsigned long flags ;
   struct page **pages ;
   unsigned int nr_pages ;
   phys_addr_t phys_addr ;
   void *caller ;
};
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/apic.h"
struct irq_data;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/smp.h"
struct __call_single_data {
   struct llist_node llist ;
   void (*func)(void *) ;
   void *info ;
   unsigned int flags ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/arch_topology.h"
struct device_node;
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/xarray.h"
struct xarray {
   spinlock_t xa_lock ;
   gfp_t xa_flags ;
   void *xa_head ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct idr {
   struct xarray idr_rt ;
   unsigned int idr_base ;
   unsigned int idr_next ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kuid_t_248 {
   uid_t val ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kuid_t_248 kuid_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kgid_t_249 {
   gid_t val ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kgid_t_249 kgid_t;
#line 140 
struct dentry;
#line 141 
struct iattr;
#line 142 
struct super_block;
#line 143 
struct poll_table_struct;
#line 144 
struct fs_context;
#line 146 
struct kernfs_open_node;
#line 147 
struct kernfs_iattrs;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_dir {
   unsigned long subdirs ;
   struct rb_root children ;
   struct kernfs_root *root ;
};
#line 96 
struct kernfs_node;
#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_symlink {
   struct kernfs_node *target_kn ;
};
#line 100 
struct kernfs_ops;
#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_attr {
   struct kernfs_ops *ops ;
   struct kernfs_open_node *open ;
   loff_t size ;
   struct kernfs_node *notify_next ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
union __anonunion_250 {
   struct kernfs_elem_dir dir ;
   struct kernfs_elem_symlink symlink ;
   struct kernfs_elem_attr attr ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_node {
   atomic_t count ;
   atomic_t active ;
   struct lockdep_map dep_map ;
   struct kernfs_node *parent ;
   char *name ;
   struct rb_node rb ;
   void *ns ;
   unsigned int hash ;
   union __anonunion_250 __anonCompField_kernfs_node_49 ;
   void *priv ;
   u64 id ;
   unsigned short flags ;
   umode_t mode ;
   struct kernfs_iattrs *iattr ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_syscall_ops {
   int (*show_options)(struct seq_file *, struct kernfs_root *) ;
   int (*mkdir)(struct kernfs_node *, char *, umode_t ) ;
   int (*rmdir)(struct kernfs_node *) ;
   int (*rename)(struct kernfs_node *, struct kernfs_node *, char *) ;
   int (*show_path)(struct seq_file *, struct kernfs_node *, struct kernfs_root *) ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root {
   struct kernfs_node *kn ;
   unsigned int flags ;
   struct idr ino_idr ;
   u32 last_id_lowbits ;
   u32 id_highbits ;
   struct kernfs_syscall_ops *syscall_ops ;
   struct list_head supers ;
   wait_queue_head_t deactivate_waitq ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_open_file {
   struct kernfs_node *kn ;
   struct file *file ;
   struct seq_file *seq_file ;
   void *priv ;
   struct mutex mutex ;
   struct mutex prealloc_mutex ;
   int event ;
   struct list_head list ;
   char *prealloc_buf ;
   size_t atomic_write_len ;
   bool mmapped : 1 ;
   bool released : 1 ;
   struct vm_operations_struct *vm_ops ;
};
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_ops {
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   ssize_t (*read)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   size_t atomic_write_len ;
   bool prealloc ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   int (*mmap)(struct kernfs_open_file *, struct vm_area_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 595 
struct sock;
#line 596 
struct kobject;
#line 597 
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
};
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject_ns.h"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   bool (*current_may_mount)(void) ;
   void *(*grab_current_ns)(void) ;
   void *(*netlink_ns)(struct sock *) ;
   void *(*initial_ns)(void) ;
   void (*drop_ns)(void *) ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stat.h"
struct kstat {
   u32 result_mask ;
   umode_t mode ;
   unsigned int nlink ;
   uint32_t blksize ;
   u64 attributes ;
   u64 attributes_mask ;
   u64 ino ;
   dev_t dev ;
   dev_t rdev ;
   kuid_t uid ;
   kgid_t gid ;
   loff_t size ;
   struct timespec64 atime ;
   struct timespec64 mtime ;
   struct timespec64 ctime ;
   struct timespec64 btime ;
   u64 blocks ;
};
#line 51 
struct bin_attribute;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute {
   char *name ;
   umode_t mode ;
   bool ignore_lockdep : 1 ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute_group {
   char *name ;
   umode_t (*is_visible)(struct kobject *, struct attribute *, int ) ;
   umode_t (*is_bin_visible)(struct kobject *, struct bin_attribute *, int ) ;
   struct attribute **attrs ;
   struct bin_attribute **bin_attrs ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   ssize_t (*write)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   int (*mmap)(struct file *, struct kobject *, struct bin_attribute *, struct vm_area_struct *) ;
};
#line 223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject *, struct attribute *, char *) ;
   ssize_t (*store)(struct kobject *, struct attribute *, char *, size_t ) ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
struct refcount_struct {
   atomic_t refs ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
typedef struct refcount_struct refcount_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kref.h"
struct kref {
   refcount_t refcount ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset;
#line 65 
struct kobj_type;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobject {
   char *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct kernfs_node *sd ;
   struct kref kref ;
   struct delayed_work release ;
   unsigned int state_initialized : 1 ;
   unsigned int state_in_sysfs : 1 ;
   unsigned int state_add_uevent_sent : 1 ;
   unsigned int state_remove_uevent_sent : 1 ;
   unsigned int uevent_suppress : 1 ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject *) ;
   struct sysfs_ops *sysfs_ops ;
   struct attribute **default_attrs ;
   struct attribute_group **default_groups ;
   struct kobj_ns_type_operations *(*child_ns_type)(struct kobject *) ;
   void *(*namespace)(struct kobject *) ;
   void (*get_ownership)(struct kobject *, kuid_t *, kgid_t *) ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_uevent_env {
   char *argv[3U] ;
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset_uevent_ops {
   int (*filter)(struct kset *, struct kobject *) ;
   char *(*name)(struct kset *, struct kobject *) ;
   int (*uevent)(struct kset *, struct kobject *, struct kobj_uevent_env *) ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops *uevent_ops ;
} __attribute__((__designated_init__));
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_node {
   struct rb_node node ;
   ktime_t expires ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_head {
   struct rb_root_cached rb_root ;
};
#line 60 
struct hrtimer_clock_base;
#line 61 
struct hrtimer_cpu_base;
#line 80 
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
};
#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer {
   struct timerqueue_node node ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer *) ;
   struct hrtimer_clock_base *base ;
   u8 state ;
   u8 is_rel ;
   u8 is_soft ;
   u8 is_hard ;
};
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   unsigned int index ;
   clockid_t clockid ;
   seqcount_t seq ;
   struct hrtimer *running ;
   struct timerqueue_head active ;
   ktime_t (*get_time)(void) ;
   ktime_t offset ;
} __attribute__((__aligned__(64)));
#line 213  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   unsigned int cpu ;
   unsigned int active_bases ;
   unsigned int clock_was_set_seq ;
   unsigned int hres_active : 1 ;
   unsigned int in_hrtirq : 1 ;
   unsigned int hang_detected : 1 ;
   unsigned int softirq_activated : 1 ;
   unsigned int nr_events ;
   unsigned short nr_retries ;
   unsigned short nr_hangs ;
   unsigned int max_hang_time ;
   ktime_t expires_next ;
   struct hrtimer *next_timer ;
   ktime_t softirq_expires_next ;
   struct hrtimer *softirq_next_timer ;
   struct hrtimer_clock_base clock_base[8U] ;
} __attribute__((__aligned__(64)));
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device *) ;
   void (*complete)(struct device *) ;
   int (*suspend)(struct device *) ;
   int (*resume)(struct device *) ;
   int (*freeze)(struct device *) ;
   int (*thaw)(struct device *) ;
   int (*poweroff)(struct device *) ;
   int (*restore)(struct device *) ;
   int (*suspend_late)(struct device *) ;
   int (*resume_early)(struct device *) ;
   int (*freeze_late)(struct device *) ;
   int (*thaw_early)(struct device *) ;
   int (*poweroff_late)(struct device *) ;
   int (*restore_early)(struct device *) ;
   int (*suspend_noirq)(struct device *) ;
   int (*resume_noirq)(struct device *) ;
   int (*freeze_noirq)(struct device *) ;
   int (*thaw_noirq)(struct device *) ;
   int (*poweroff_noirq)(struct device *) ;
   int (*restore_noirq)(struct device *) ;
   int (*runtime_suspend)(struct device *) ;
   int (*runtime_resume)(struct device *) ;
   int (*runtime_idle)(struct device *) ;
};
#line 303 
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
};
#line 310 
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
};
#line 318 
struct wakeup_source;
#line 319 
struct wake_irq;
#line 320 
struct pm_domain_data;
#line 530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_subsys_data {
   spinlock_t lock ;
   unsigned int refcount ;
   struct list_head clock_list ;
   struct pm_domain_data *domain_data ;
};
#line 573 
struct dev_pm_qos;
#line 573  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned int can_wakeup : 1 ;
   unsigned int async_suspend : 1 ;
   bool in_dpm_list : 1 ;
   bool is_prepared : 1 ;
   bool is_suspended : 1 ;
   bool is_noirq_suspended : 1 ;
   bool is_late_suspended : 1 ;
   bool no_pm : 1 ;
   bool early_init : 1 ;
   bool direct_complete : 1 ;
   u32 driver_flags ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   bool wakeup_path : 1 ;
   bool syscore : 1 ;
   bool no_pm_callbacks : 1 ;
   unsigned int must_resume : 1 ;
   unsigned int may_skip_resume : 1 ;
   struct hrtimer suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   struct wake_irq *wakeirq ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned int disable_depth : 3 ;
   unsigned int idle_notification : 1 ;
   unsigned int request_pending : 1 ;
   unsigned int deferred_resume : 1 ;
   unsigned int runtime_auto : 1 ;
   bool ignore_children : 1 ;
   unsigned int no_callbacks : 1 ;
   unsigned int irq_safe : 1 ;
   unsigned int use_autosuspend : 1 ;
   unsigned int timer_autosuspends : 1 ;
   unsigned int memalloc_noio : 1 ;
   unsigned int links_count ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   u64 last_busy ;
   u64 active_time ;
   u64 suspended_time ;
   u64 accounting_timestamp ;
   struct pm_subsys_data *subsys_data ;
   void (*set_latency_tolerance)(struct device *, s32 ) ;
   struct dev_pm_qos *qos ;
};
#line 650  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_domain {
   struct dev_pm_ops ops ;
   int (*start)(struct device *) ;
   void (*detach)(struct device *, bool ) ;
   int (*activate)(struct device *) ;
   void (*sync)(struct device *) ;
   void (*dismiss)(struct device *) ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rculist.h"
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_TGID = 1,
    PIDTYPE_PGID = 2,
    PIDTYPE_SID = 3,
    PIDTYPE_MAX = 4
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct pid_namespace;
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct pid {
   refcount_t count ;
   unsigned int level ;
   struct hlist_head tasks[4U] ;
   wait_queue_head_t wait_pidfd ;
   struct callback_head rcu ;
   struct upid numbers[1U] ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhash_head {
   struct rhash_head *next ;
};
#line 25 
struct bucket_table;
#line 33 
struct rhashtable;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_compare_arg {
   struct rhashtable *ht ;
   void *key ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_params {
   u16 nelem_hint ;
   u16 key_len ;
   u16 key_offset ;
   u16 head_offset ;
   unsigned int max_size ;
   u16 min_size ;
   bool automatic_shrinking ;
   u32 (*hashfn)(void *, u32 , u32 ) ;
   u32 (*obj_hashfn)(void *, u32 , u32 ) ;
   int (*obj_cmpfn)(struct rhashtable_compare_arg *, void *) ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable {
   struct bucket_table *tbl ;
   unsigned int key_len ;
   unsigned int max_elems ;
   struct rhashtable_params p ;
   bool rhlist ;
   struct work_struct run_work ;
   struct mutex mutex ;
   spinlock_t lock ;
   atomic_t nelems ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sem.h"
struct sem_undo_list;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shm.h"
struct sysv_shm {
   struct list_head shm_clist ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/plist.h"
struct plist_node {
   int prio ;
   struct list_head prio_list ;
   struct list_head node_list ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/seccomp.h"
struct seccomp_filter;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seccomp.h"
struct seccomp {
   int mode ;
   struct seccomp_filter *filter ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/resource.h"
struct rlimit {
   __kernel_ulong_t rlim_cur ;
   __kernel_ulong_t rlim_max ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/latencytop.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/types.h"
struct task_cputime {
   u64 stime ;
   u64 utime ;
   unsigned long long sum_exec_runtime ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_291 {
   unsigned long sig[1U] ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_291 sigset_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef void __signalfn_t(int );
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__kill_292 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__timer_293 {
   __kernel_timer_t _tid ;
   int _overrun ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__rt_294 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigchld_295 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_bnd_298 {
   char _dummy_bnd[8U] ;
   void *_lower ;
   void *_upper ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_pkey_299 {
   char _dummy_pkey[8U] ;
   __u32 _pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __anonunion_297 {
   short _addr_lsb ;
   struct __anonstruct__addr_bnd_298 _addr_bnd ;
   struct __anonstruct__addr_pkey_299 _addr_pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigfault_296 {
   void *_addr ;
   union __anonunion_297 __anonCompField___anonstruct__sigfault_296_50 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_300 {
   long _band ;
   int _fd ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigsys_301 {
   void *_call_addr ;
   int _syscall ;
   unsigned int _arch ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __sifields {
   struct __anonstruct__kill_292 _kill ;
   struct __anonstruct__timer_293 _timer ;
   struct __anonstruct__rt_294 _rt ;
   struct __anonstruct__sigchld_295 _sigchld ;
   struct __anonstruct__sigfault_296 _sigfault ;
   struct __anonstruct__sigpoll_300 _sigpoll ;
   struct __anonstruct__sigsys_301 _sigsys ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct __anonstruct_306 {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __sifields _sifields ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct kernel_siginfo {
   struct __anonstruct_306 __anonCompField_kernel_siginfo_53 ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
typedef struct kernel_siginfo kernel_siginfo_t;
#line 20 
struct user_struct;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/task_io_accounting.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimer_base {
   u64 nextevt ;
   struct timerqueue_head tqhead ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimers {
   struct posix_cputimer_base bases[3U] ;
   unsigned int timers_active ;
   unsigned int expiry_active ;
};
#line 193 
struct signal_struct;
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
union __anonunion_rseq_cs_311 {
   __u64 ptr64 ;
   __u64 ptr ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
struct rseq {
   __u32 cpu_id_start ;
   __u32 cpu_id ;
   union __anonunion_rseq_cs_311 rseq_cs ;
   __u32 flags ;
} __attribute__((__aligned__(32)));
#line 146 
struct audit_context;
#line 147 
struct backing_dev_info;
#line 148 
struct bio_list;
#line 149 
struct blk_plug;
#line 150 
struct capture_control;
#line 151 
struct cfs_rq;
#line 152 
struct fs_struct;
#line 153 
struct futex_pi_state;
#line 154 
struct io_context;
#line 155 
struct nameidata;
#line 156 
struct nsproxy;
#line 157 
struct perf_event_context;
#line 158 
struct pipe_inode_info;
#line 160 
struct reclaim_state;
#line 161 
struct robust_list_head;
#line 166 
struct sighand_struct;
#line 167 
struct task_delay_info;
#line 168 
struct task_group;
#line 242  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct prev_cputime {
   u64 utime ;
   u64 stime ;
   raw_spinlock_t lock ;
};
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   u32 inv_weight ;
};
#line 352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct util_est {
   unsigned int enqueued ;
   unsigned int ewma ;
} __attribute__((__aligned__(8)));
#line 401  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_avg {
   u64 last_update_time ;
   u64 load_sum ;
   u64 runnable_load_sum ;
   u32 util_sum ;
   u32 period_contrib ;
   unsigned long load_avg ;
   unsigned long runnable_load_avg ;
   unsigned long util_avg ;
   struct util_est util_est ;
} __attribute__((__aligned__(64)));
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};
#line 449  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   unsigned long runnable_weight ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   int depth ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
   struct sched_avg avg ;
};
#line 486 
struct rt_rq;
#line 486  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned long watchdog_stamp ;
   unsigned int time_slice ;
   unsigned short on_rq ;
   unsigned short on_list ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
} __attribute__((__designated_init__));
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_dl_entity {
   struct rb_node rb_node ;
   u64 dl_runtime ;
   u64 dl_deadline ;
   u64 dl_period ;
   u64 dl_bw ;
   u64 dl_density ;
   s64 runtime ;
   u64 deadline ;
   unsigned int flags ;
   unsigned int dl_throttled : 1 ;
   unsigned int dl_boosted : 1 ;
   unsigned int dl_yielded : 1 ;
   unsigned int dl_non_contending : 1 ;
   unsigned int dl_overrun : 1 ;
   struct hrtimer dl_timer ;
   struct hrtimer inactive_timer ;
};
#line 600  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct uclamp_se {
   unsigned int value : 11 ;
   unsigned int bucket_id : 3 ;
   unsigned int active : 1 ;
   unsigned int user_defined : 1 ;
};
#line 625  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct wake_q_node {
   struct wake_q_node *next ;
};
#line 629 
struct sched_class;
#line 629 
struct cred;
#line 629 
struct key;
#line 629 
struct files_struct;
#line 629 
struct rt_mutex_waiter;
#line 629 
struct css_set;
#line 629 
struct compat_robust_list_head;
#line 629 
struct numa_group;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
union __anonunion_313 {
   refcount_t rcu_users ;
   struct callback_head rcu ;
};
#line 629 
struct ftrace_ret_stack;
#line 629 
struct kcov;
#line 629 
struct request_queue;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct task_struct {
   struct thread_info thread_info ;
   long state ;
   void *stack ;
   refcount_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   struct llist_node wake_entry ;
   int on_cpu ;
   unsigned int cpu ;
   unsigned int wakee_flips ;
   unsigned long wakee_flip_decay_ts ;
   struct task_struct *last_wakee ;
   int recent_used_cpu ;
   int wake_cpu ;
   int on_rq ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct task_group *sched_task_group ;
   struct sched_dl_entity dl ;
   struct uclamp_se uclamp_req[2U] ;
   struct uclamp_se uclamp[2U] ;
   struct hlist_head preempt_notifiers ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   int nr_cpus_allowed ;
   cpumask_t *cpus_ptr ;
   cpumask_t cpus_mask ;
   unsigned long rcu_tasks_nvcsw ;
   u8 rcu_tasks_holdout ;
   u8 rcu_tasks_idx ;
   int rcu_tasks_idle_cpu ;
   struct list_head rcu_tasks_holdout_list ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct rb_node pushable_dl_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   struct vmacache vmacache ;
   struct task_rss_stat rss_stat ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned long jobctl ;
   unsigned int personality ;
   unsigned int sched_reset_on_fork : 1 ;
   unsigned int sched_contributes_to_load : 1 ;
   unsigned int sched_migrated : 1 ;
   unsigned int sched_remote_wakeup : 1 ;
   unsigned int sched_psi_wake_requeue : 1 ;
   unsigned int  ;
   unsigned int in_execve : 1 ;
   unsigned int in_iowait : 1 ;
   unsigned int restore_sigmask : 1 ;
   unsigned int in_user_fault : 1 ;
   unsigned int brk_randomized : 1 ;
   unsigned int no_cgroup_migration : 1 ;
   unsigned int frozen : 1 ;
   unsigned int use_memdelay : 1 ;
   unsigned long atomic_flags ;
   struct restart_block restart_block ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid *thread_pid ;
   struct hlist_node pid_links[4U] ;
   struct list_head thread_group ;
   struct list_head thread_node ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   u64 utime ;
   u64 stime ;
   u64 gtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   u64 start_time ;
   u64 start_boottime ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct posix_cputimers posix_cputimers ;
   struct cred *ptracer_cred ;
   struct cred *real_cred ;
   struct cred *cred ;
   struct key *cached_requested_key ;
   char comm[16U] ;
   struct nameidata *nameidata ;
   struct sysv_sem sysvsem ;
   struct sysv_shm sysvshm ;
   unsigned long last_switch_count ;
   unsigned long last_switch_time ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   unsigned int sas_ss_flags ;
   struct callback_head *task_works ;
   struct audit_context *audit_context ;
   kuid_t loginuid ;
   unsigned int sessionid ;
   struct seccomp seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   raw_spinlock_t pi_lock ;
   struct wake_q_node wake_q ;
   struct rb_root_cached pi_waiters ;
   struct task_struct *pi_top_task ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   int non_block_count ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   unsigned int in_ubsan ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct blk_plug *plug ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   struct capture_control *capture_control ;
   unsigned long ptrace_message ;
   kernel_siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   unsigned int psi_flags ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   u64 acct_timexpd ;
   nodemask_t mems_allowed ;
   seqcount_t mems_allowed_seq ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   u32 closid ;
   u32 rmid ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct mutex futex_exit_mutex ;
   unsigned int futex_state ;
   struct perf_event_context *perf_event_ctxp[2U] ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_prev ;
   short pref_node_fork ;
   int numa_scan_seq ;
   unsigned int numa_scan_period ;
   unsigned int numa_scan_period_max ;
   int numa_preferred_nid ;
   unsigned long numa_migrate_retry ;
   u64 node_stamp ;
   u64 last_task_numa_placement ;
   u64 last_sum_exec_runtime ;
   struct callback_head numa_work ;
   struct numa_group *numa_group ;
   unsigned long *numa_faults ;
   unsigned long total_numa_faults ;
   unsigned long numa_faults_locality[3U] ;
   unsigned long numa_pages_migrated ;
   struct rseq *rseq ;
   u32 rseq_sig ;
   unsigned long rseq_event_mask ;
   struct tlbflush_unmap_batch tlb_ubc ;
   union __anonunion_313 __anonCompField_task_struct_55 ;
   struct pipe_inode_info *splice_pipe ;
   struct page_frag task_frag ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   unsigned int fail_nth ;
   int nr_dirtied ;
   int nr_dirtied_pause ;
   unsigned long dirty_paused_when ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   u64 timer_slack_ns ;
   u64 default_timer_slack_ns ;
   unsigned int kasan_depth ;
   int curr_ret_stack ;
   int curr_ret_depth ;
   struct ftrace_ret_stack *ret_stack ;
   unsigned long long ftrace_timestamp ;
   atomic_t trace_overrun ;
   atomic_t tracing_graph_pause ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   unsigned int kcov_mode ;
   unsigned int kcov_size ;
   void *kcov_area ;
   struct kcov *kcov ;
   u64 kcov_handle ;
   int kcov_sequence ;
   struct mem_cgroup *memcg_in_oom ;
   gfp_t memcg_oom_gfp_mask ;
   int memcg_oom_order ;
   unsigned int memcg_nr_pages_over_high ;
   struct mem_cgroup *active_memcg ;
   struct request_queue *throttle_queue ;
   struct uprobe_task *utask ;
   unsigned int sequential_io ;
   unsigned int sequential_io_avg ;
   unsigned long task_state_change ;
   int pagefault_disabled ;
   struct task_struct *oom_reaper_list ;
   struct vm_struct *stack_vm_area ;
   refcount_t stack_refcount ;
   int patch_state ;
   void *security ;
   struct thread_struct thread ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ratelimit.h"
struct ratelimit_state {
   raw_spinlock_t lock ;
   int interval ;
   int burst ;
   int printed ;
   int missed ;
   unsigned long begin ;
   unsigned long flags ;
};
#line 5  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/device.h"
struct dev_archdata {
   void *iommu ;
};
#line 12 
struct dma_map_ops;
#line 23 
struct device_driver;
#line 24 
struct driver_private;
#line 25 
struct class;
#line 26 
struct subsys_private;
#line 27 
struct bus_type;
#line 28 
struct iommu_ops;
#line 29 
struct iommu_group;
#line 30 
struct iommu_fwspec;
#line 31 
struct dev_pin_info;
#line 32 
struct iommu_param;
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct bus_type {
   char *name ;
   char *dev_name ;
   struct device *dev_root ;
   struct attribute_group **bus_groups ;
   struct attribute_group **dev_groups ;
   struct attribute_group **drv_groups ;
   int (*match)(struct device *, struct device_driver *) ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*online)(struct device *) ;
   int (*offline)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   int (*num_vf)(struct device *) ;
   int (*dma_configure)(struct device *) ;
   struct dev_pm_ops *pm ;
   struct iommu_ops *iommu_ops ;
   struct subsys_private *p ;
   struct lock_class_key lock_key ;
   bool need_parent_lock ;
};
#line 164 
struct device_type;
#line 309 
enum probe_type {
    PROBE_DEFAULT_STRATEGY = 0,
    PROBE_PREFER_ASYNCHRONOUS = 1,
    PROBE_FORCE_SYNCHRONOUS = 2
};
#line 383 
struct of_device_id;
#line 383 
struct acpi_device_id;
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_driver {
   char *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char *mod_name ;
   bool suppress_bind_attrs ;
   enum probe_type probe_type ;
   struct of_device_id *of_match_table ;
   struct acpi_device_id *acpi_match_table ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   struct attribute_group **groups ;
   struct attribute_group **dev_groups ;
   struct dev_pm_ops *pm ;
   void (*coredump)(struct device *) ;
   struct driver_private *p ;
};
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct class {
   char *name ;
   struct module *owner ;
   struct attribute_group **class_groups ;
   struct attribute_group **dev_groups ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *) ;
   void (*class_release)(struct class *) ;
   void (*dev_release)(struct device *) ;
   int (*shutdown_pre)(struct device *) ;
   struct kobj_ns_type_operations *ns_type ;
   void *(*namespace)(struct device *) ;
   void (*get_ownership)(struct device *, kuid_t *, kgid_t *) ;
   struct dev_pm_ops *pm ;
   struct subsys_private *p ;
};
#line 809  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_type {
   char *name ;
   struct attribute_group **groups ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *, kuid_t *, kgid_t *) ;
   void (*release)(struct device *) ;
   struct dev_pm_ops *pm ;
};
#line 1008  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 1139 
enum dl_dev_state {
    DL_DEV_NO_DRIVER = 0,
    DL_DEV_PROBING = 1,
    DL_DEV_DRIVER_BOUND = 2,
    DL_DEV_UNBINDING = 3
};
#line 1164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct dev_links_info {
   struct list_head suppliers ;
   struct list_head consumers ;
   struct list_head needs_suppliers ;
   struct list_head defer_sync ;
   bool need_for_probe ;
   enum dl_dev_state status ;
};
#line 1259 
struct irq_domain;
#line 1259 
struct dma_coherent_mem;
#line 1259 
struct cma;
#line 1259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device {
   struct kobject kobj ;
   struct device *parent ;
   struct device_private *p ;
   char *init_name ;
   struct device_type *type ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   void *driver_data ;
   struct mutex lockdep_mutex ;
   struct mutex mutex ;
   struct dev_links_info links ;
   struct dev_pm_info power ;
   struct dev_pm_domain *pm_domain ;
   struct irq_domain *msi_domain ;
   struct dev_pin_info *pins ;
   struct list_head msi_list ;
   struct dma_map_ops *dma_ops ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   u64 bus_dma_limit ;
   unsigned long dma_pfn_offset ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct cma *cma_area ;
   struct dev_archdata archdata ;
   struct device_node *of_node ;
   struct fwnode_handle *fwnode ;
   int numa_node ;
   dev_t devt ;
   u32 id ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct class *class ;
   struct attribute_group **groups ;
   void (*release)(struct device *) ;
   struct iommu_group *iommu_group ;
   struct iommu_fwspec *iommu_fwspec ;
   struct iommu_param *iommu_param ;
   bool offline_disabled : 1 ;
   bool offline : 1 ;
   bool of_node_reused : 1 ;
   bool state_synced : 1 ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_wakeup.h"
struct wakeup_source {
   char *name ;
   int id ;
   struct list_head entry ;
   spinlock_t lock ;
   struct wake_irq *wakeirq ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   ktime_t start_prevent_time ;
   ktime_t prevent_sleep_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long expire_count ;
   unsigned long wakeup_count ;
   struct device *dev ;
   bool active : 1 ;
   bool autosleep_enabled : 1 ;
};
#line 1913  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct scatterlist;
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
};
#line 78 
struct percpu_ref;
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
typedef void percpu_ref_func_t(struct percpu_ref *);
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-refcount.h"
struct percpu_ref {
   atomic_long_t count ;
   unsigned long percpu_count_ptr ;
   percpu_ref_func_t *release ;
   percpu_ref_func_t *confirm_switch ;
   bool force_atomic : 1 ;
   bool allow_reinit : 1 ;
   struct callback_head rcu ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrink_control {
   gfp_t gfp_mask ;
   int nid ;
   unsigned long nr_to_scan ;
   unsigned long nr_scanned ;
   struct mem_cgroup *memcg ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrinker {
   unsigned long (*count_objects)(struct shrinker *, struct shrink_control *) ;
   unsigned long (*scan_objects)(struct shrinker *, struct shrink_control *) ;
   long batch ;
   int seeks ;
   unsigned int flags ;
   struct list_head list ;
   int id ;
   atomic_long_t *nr_deferred ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct vmem_altmap {
   unsigned long base_pfn ;
   unsigned long end_pfn ;
   unsigned long reserve ;
   unsigned long free ;
   unsigned long align ;
   unsigned long alloc ;
};
#line 26 
enum memory_type {
    MEMORY_DEVICE_PRIVATE = 1,
    MEMORY_DEVICE_FS_DAX = 2,
    MEMORY_DEVICE_DEVDAX = 3,
    MEMORY_DEVICE_PCI_P2PDMA = 4
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap_ops {
   void (*page_free)(struct page *) ;
   void (*kill)(struct dev_pagemap *) ;
   void (*cleanup)(struct dev_pagemap *) ;
   vm_fault_t (*migrate_to_ram)(struct vm_fault *) ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap {
   struct vmem_altmap altmap ;
   struct resource res ;
   struct percpu_ref *ref ;
   struct percpu_ref internal_ref ;
   struct completion done ;
   enum memory_type type ;
   unsigned int flags ;
   struct dev_pagemap_ops *ops ;
};
#line 176 
struct file_ra_state;
#line 177 
struct writeback_control;
#line 178 
struct bdi_writeback;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/extable.h"
struct exception_table_entry {
   int insn ;
   int fixup ;
   int handler ;
};
#line 417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_fault {
   struct vm_area_struct *vma ;
   unsigned int flags ;
   gfp_t gfp_mask ;
   unsigned long pgoff ;
   unsigned long address ;
   pmd_t *pmd ;
   pud_t *pud ;
   pte_t orig_pte ;
   struct page *cow_page ;
   struct mem_cgroup *memcg ;
   struct page *page ;
   pte_t *pte ;
   spinlock_t *ptl ;
   pgtable_t prealloc_pte ;
};
#line 448 
enum page_entry_size {
    PE_SIZE_PTE = 0,
    PE_SIZE_PMD = 1,
    PE_SIZE_PUD = 2
};
#line 467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct *) ;
   void (*close)(struct vm_area_struct *) ;
   int (*split)(struct vm_area_struct *, unsigned long ) ;
   int (*mremap)(struct vm_area_struct *) ;
   vm_fault_t (*fault)(struct vm_fault *) ;
   vm_fault_t (*huge_fault)(struct vm_fault *, enum page_entry_size ) ;
   void (*map_pages)(struct vm_fault *, unsigned long , unsigned long ) ;
   unsigned long (*pagesize)(struct vm_area_struct *) ;
   vm_fault_t (*page_mkwrite)(struct vm_fault *) ;
   vm_fault_t (*pfn_mkwrite)(struct vm_fault *) ;
   int (*access)(struct vm_area_struct *, unsigned long , void *, int , int ) ;
   char *(*name)(struct vm_area_struct *) ;
   int (*set_policy)(struct vm_area_struct *, struct mempolicy *) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct *, unsigned long ) ;
   struct page *(*find_special_page)(struct vm_area_struct *, unsigned long ) ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_head {
   struct hlist_bl_node *first ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node {
   struct hlist_bl_node *next ;
   struct hlist_bl_node **pprev ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct __anonstruct_404 {
   spinlock_t lock ;
   int count ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
union __anonunion_403 {
   struct __anonstruct_404 __anonCompField___anonunion_403_56 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct lockref {
   union __anonunion_403 __anonCompField_lockref_57 ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stringhash.h"
struct path;
#line 79 
struct vfsmount;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct __anonstruct_406 {
   u32 hash ;
   u32 len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_405 {
   struct __anonstruct_406 __anonCompField___anonunion_405_58 ;
   u64 hash_len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct qstr {
   union __anonunion_405 __anonCompField_qstr_59 ;
   unsigned char *name ;
};
#line 89 
struct dentry_operations;
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_407 {
   struct list_head d_lru ;
   wait_queue_head_t *d_wait ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_d_u_408 {
   struct hlist_node d_alias ;
   struct hlist_bl_node d_in_lookup_hash ;
   struct callback_head d_rcu ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry {
   unsigned int d_flags ;
   seqcount_t d_seq ;
   struct hlist_bl_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct inode *d_inode ;
   unsigned char d_iname[32U] ;
   struct lockref d_lockref ;
   struct dentry_operations *d_op ;
   struct super_block *d_sb ;
   unsigned long d_time ;
   void *d_fsdata ;
   union __anonunion_407 __anonCompField_dentry_60 ;
   struct list_head d_child ;
   struct list_head d_subdirs ;
   union __anonunion_d_u_408 d_u ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_weak_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_hash)(struct dentry *, struct qstr *) ;
   int (*d_compare)(struct dentry *, unsigned int , char *, struct qstr *) ;
   int (*d_delete)(struct dentry *) ;
   int (*d_init)(struct dentry *) ;
   void (*d_release)(struct dentry *) ;
   void (*d_prune)(struct dentry *) ;
   void (*d_iput)(struct dentry *, struct inode *) ;
   char *(*d_dname)(struct dentry *, char *, int ) ;
   struct vfsmount *(*d_automount)(struct path *) ;
   int (*d_manage)(struct path *, bool ) ;
   struct dentry *(*d_real)(struct dentry *, struct inode *) ;
} __attribute__((__aligned__(64)));
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/path.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
} __attribute__((__designated_init__));
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_one {
   struct list_head list ;
   long nr_items ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_memcg {
   struct callback_head rcu ;
   struct list_lru_one *lru[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_node {
   spinlock_t lock ;
   struct list_lru_one lru ;
   struct list_lru_memcg *memcg_lrus ;
   long nr_items ;
} __attribute__((__aligned__(64)));
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru {
   struct list_lru_node *node ;
   struct list_head list ;
   int shrinker_id ;
   bool memcg_aware ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fiemap.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
#line 39 
enum migrate_mode {
    MIGRATE_ASYNC = 0,
    MIGRATE_SYNC_LIGHT = 1,
    MIGRATE_SYNC = 2,
    MIGRATE_SYNC_NO_COPY = 3
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcuwait.h"
struct rcuwait {
   struct task_struct *task ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_sync.h"
struct rcu_sync {
   int gp_state ;
   int gp_count ;
   wait_queue_head_t gp_wait ;
   struct callback_head cb_head ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-rwsem.h"
struct percpu_rw_semaphore {
   struct rcu_sync rss ;
   unsigned int *read_count ;
   struct rw_semaphore rw_sem ;
   struct rcuwait writer ;
   int readers_block ;
};
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delayed_call.h"
struct delayed_call {
   void (*fn)(void *) ;
   void *arg ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
struct __anonstruct_uuid_t_416 {
   __u8 b[16U] ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
typedef struct __anonstruct_uuid_t_416 uuid_t;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uuid.h"
typedef u32 errseq_t;
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_417 {
   struct list_head q_node ;
   struct kmem_cache *__rcu_icq_cache ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_418 {
   struct hlist_node ioc_node ;
   struct callback_head __rcu_head ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_cq {
   struct request_queue *q ;
   struct io_context *ioc ;
   union __anonunion_417 __anonCompField_io_cq_61 ;
   union __anonunion_418 __anonCompField_io_cq_62 ;
   unsigned int flags ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_context {
   atomic_long_t refcount ;
   atomic_t active_ref ;
   atomic_t nr_tasks ;
   spinlock_t lock ;
   unsigned short ioprio ;
   int nr_batch_requests ;
   unsigned long last_waited ;
   struct xarray icq_tree ;
   struct io_cq *icq_hint ;
   struct hlist_head icq_list ;
   struct work_struct release_work ;
};
#line 286  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fs.h"
struct bio;
#line 287 
struct export_operations;
#line 288 
struct hd_geometry;
#line 289 
struct iovec;
#line 290 
struct kiocb;
#line 291 
struct kstatfs;
#line 292 
struct swap_info_struct;
#line 293 
struct iov_iter;
#line 294 
struct fscrypt_info;
#line 295 
struct fscrypt_operations;
#line 296 
struct fsverity_info;
#line 297 
struct fsverity_operations;
#line 298 
struct fs_parameter_description;
#line 224  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   kuid_t ia_uid ;
   kgid_t ia_gid ;
   loff_t ia_size ;
   struct timespec64 ia_atime ;
   struct timespec64 ia_mtime ;
   struct timespec64 ia_ctime ;
   struct file *ia_file ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu_counter.h"
struct percpu_counter {
   raw_spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dqblk_xfs.h"
struct dquot;
#line 215 
struct kqid;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef __kernel_uid32_t projid_t;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
struct __anonstruct_kprojid_t_419 {
   projid_t val ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef struct __anonstruct_kprojid_t_419 kprojid_t;
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/quota.h"
enum quota_type {
    USRQUOTA = 0,
    GRPQUOTA = 1,
    PRJQUOTA = 2
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
typedef long long qsize_t;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
union __anonunion_420 {
   kuid_t uid ;
   kgid_t gid ;
   kprojid_t projid ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct kqid {
   union __anonunion_420 __anonCompField_kqid_63 ;
   enum quota_type type ;
};
#line 205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time64_t dqb_btime ;
   time64_t dqb_itime ;
};
#line 216 
struct quota_format_type;
#line 222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_max_spc_limit ;
   qsize_t dqi_max_ino_limit ;
   void *dqi_priv ;
};
#line 294  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   spinlock_t dq_dqb_lock ;
   atomic_t dq_count ;
   struct super_block *dq_sb ;
   struct kqid dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   struct mem_dqblk dq_dqb ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block *, int ) ;
   int (*read_file_info)(struct super_block *, int ) ;
   int (*write_file_info)(struct super_block *, int ) ;
   int (*free_file_info)(struct super_block *, int ) ;
   int (*read_dqblk)(struct dquot *) ;
   int (*commit_dqblk)(struct dquot *) ;
   int (*release_dqblk)(struct dquot *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 322  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot_operations {
   int (*write_dquot)(struct dquot *) ;
   struct dquot *(*alloc_dquot)(struct super_block *, int ) ;
   void (*destroy_dquot)(struct dquot *) ;
   int (*acquire_dquot)(struct dquot *) ;
   int (*release_dquot)(struct dquot *) ;
   int (*mark_dirty)(struct dquot *) ;
   int (*write_info)(struct super_block *, int ) ;
   qsize_t *(*get_reserved_space)(struct inode *) ;
   int (*get_projid)(struct inode *, kprojid_t *) ;
   int (*get_inode_usage)(struct inode *, qsize_t *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 343  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_dqblk {
   int d_fieldmask ;
   u64 d_spc_hardlimit ;
   u64 d_spc_softlimit ;
   u64 d_ino_hardlimit ;
   u64 d_ino_softlimit ;
   u64 d_space ;
   u64 d_ino_count ;
   s64 d_ino_timer ;
   s64 d_spc_timer ;
   int d_ino_warns ;
   int d_spc_warns ;
   u64 d_rt_spc_hardlimit ;
   u64 d_rt_spc_softlimit ;
   u64 d_rt_space ;
   s64 d_rt_spc_timer ;
   int d_rt_spc_warns ;
};
#line 395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_type_state {
   unsigned int flags ;
   unsigned int spc_timelimit ;
   unsigned int ino_timelimit ;
   unsigned int rt_spc_timelimit ;
   unsigned int spc_warnlimit ;
   unsigned int ino_warnlimit ;
   unsigned int rt_spc_warnlimit ;
   unsigned long long ino ;
   blkcnt_t blocks ;
   blkcnt_t nextents ;
};
#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_state {
   unsigned int s_incoredqs ;
   struct qc_type_state s_state[3U] ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_info {
   int i_fieldmask ;
   unsigned int i_flags ;
   unsigned int i_spc_timelimit ;
   unsigned int i_ino_timelimit ;
   unsigned int i_rt_spc_timelimit ;
   unsigned int i_spc_warnlimit ;
   unsigned int i_ino_warnlimit ;
   unsigned int i_rt_spc_warnlimit ;
};
#line 428  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block *, int , int , struct path *) ;
   int (*quota_off)(struct super_block *, int ) ;
   int (*quota_enable)(struct super_block *, unsigned int ) ;
   int (*quota_disable)(struct super_block *, unsigned int ) ;
   int (*quota_sync)(struct super_block *, int ) ;
   int (*set_info)(struct super_block *, int , struct qc_info *) ;
   int (*get_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_nextdqblk)(struct super_block *, struct kqid *, struct qc_dqblk *) ;
   int (*set_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_state)(struct super_block *, struct qc_state *) ;
   int (*rm_xquota)(struct super_block *, unsigned int ) ;
};
#line 443  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 518  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct rw_semaphore dqio_sem ;
   struct inode *files[3U] ;
   struct mem_dqinfo info[3U] ;
   struct quota_format_ops *ops[3U] ;
};
#line 538 
enum rw_hint {
    WRITE_LIFE_NOT_SET = 0,
    WRITE_LIFE_NONE = 1,
    WRITE_LIFE_SHORT = 2,
    WRITE_LIFE_MEDIUM = 3,
    WRITE_LIFE_LONG = 4,
    WRITE_LIFE_EXTREME = 5
};
#line 318  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct kiocb {
   struct file *ki_filp ;
   loff_t ki_pos ;
   void (*ki_complete)(struct kiocb *, long , long ) ;
   void *private ;
   int ki_flags ;
   u16 ki_hint ;
   u16 ki_ioprio ;
   unsigned int ki_cookie ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_arg_422 {
   char *buf ;
   void *data ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct __anonstruct_read_descriptor_t_421 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_422 arg ;
   int error ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
typedef struct __anonstruct_read_descriptor_t_421 read_descriptor_t;
#line 362  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page *, struct writeback_control *) ;
   int (*readpage)(struct file *, struct page *) ;
   int (*writepages)(struct address_space *, struct writeback_control *) ;
   int (*set_page_dirty)(struct page *) ;
   int (*readpages)(struct file *, struct address_space *, struct list_head *, unsigned int ) ;
   int (*write_begin)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page **, void **) ;
   int (*write_end)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page *, void *) ;
   sector_t (*bmap)(struct address_space *, sector_t ) ;
   void (*invalidatepage)(struct page *, unsigned int , unsigned int ) ;
   int (*releasepage)(struct page *, gfp_t ) ;
   void (*freepage)(struct page *) ;
   ssize_t (*direct_IO)(struct kiocb *, struct iov_iter *) ;
   int (*migratepage)(struct address_space *, struct page *, struct page *, enum migrate_mode ) ;
   bool (*isolate_page)(struct page *, isolate_mode_t ) ;
   void (*putback_page)(struct page *) ;
   int (*launder_page)(struct page *) ;
   int (*is_partially_uptodate)(struct page *, unsigned long , unsigned long ) ;
   void (*is_dirty_writeback)(struct page *, bool *, bool *) ;
   int (*error_remove_page)(struct address_space *, struct page *) ;
   int (*swap_activate)(struct swap_info_struct *, struct file *, sector_t *) ;
   void (*swap_deactivate)(struct file *) ;
};
#line 445  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct xarray i_pages ;
   gfp_t gfp_mask ;
   atomic_t i_mmap_writable ;
   atomic_t nr_thps ;
   struct rb_root_cached i_mmap ;
   struct rw_semaphore i_mmap_rwsem ;
   unsigned long nrpages ;
   unsigned long nrexceptional ;
   unsigned long writeback_index ;
   struct address_space_operations *a_ops ;
   unsigned long flags ;
   errseq_t wb_err ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   void *private_data ;
} __attribute__((__designated_init__, __aligned__(8)));
#line 473 
struct hd_struct;
#line 473 
struct gendisk;
#line 473  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   int bd_openers ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   struct mutex bd_mutex ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   bool bd_write_holder ;
   struct list_head bd_holder_disks ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   u8 bd_partno ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct request_queue *bd_queue ;
   struct backing_dev_info *bd_bdi ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
} __attribute__((__designated_init__));
#line 587 
struct posix_acl;
#line 614 
struct fsnotify_mark_connector;
#line 628 
struct inode_operations;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_425 {
   unsigned int i_nlink ;
   unsigned int __i_nlink ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_426 {
   struct hlist_head i_dentry ;
   struct callback_head i_rcu ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_427 {
   struct file_operations *i_fop ;
   void (*free_inode)(struct inode *) ;
};
#line 628 
struct file_lock_context;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_428 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
   char *i_link ;
   unsigned int i_dir_seq ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode {
   umode_t i_mode ;
   unsigned short i_opflags ;
   kuid_t i_uid ;
   kgid_t i_gid ;
   unsigned int i_flags ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   struct inode_operations *i_op ;
   struct super_block *i_sb ;
   struct address_space *i_mapping ;
   void *i_security ;
   unsigned long i_ino ;
   union __anonunion_425 __anonCompField_inode_64 ;
   dev_t i_rdev ;
   loff_t i_size ;
   struct timespec64 i_atime ;
   struct timespec64 i_mtime ;
   struct timespec64 i_ctime ;
   spinlock_t i_lock ;
   unsigned short i_bytes ;
   u8 i_blkbits ;
   u8 i_write_hint ;
   blkcnt_t i_blocks ;
   unsigned long i_state ;
   struct rw_semaphore i_rwsem ;
   unsigned long dirtied_when ;
   unsigned long dirtied_time_when ;
   struct hlist_node i_hash ;
   struct list_head i_io_list ;
   struct bdi_writeback *i_wb ;
   int i_wb_frn_winner ;
   u16 i_wb_frn_avg_time ;
   u16 i_wb_frn_history ;
   struct list_head i_lru ;
   struct list_head i_sb_list ;
   struct list_head i_wb_list ;
   union __anonunion_426 __anonCompField_inode_65 ;
   atomic64_t i_version ;
   atomic_t i_count ;
   atomic_t i_dio_count ;
   atomic_t i_writecount ;
   atomic_t i_readcount ;
   union __anonunion_427 __anonCompField_inode_66 ;
   struct file_lock_context *i_flctx ;
   struct address_space i_data ;
   struct list_head i_devices ;
   union __anonunion_428 __anonCompField_inode_67 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct fsnotify_mark_connector *i_fsnotify_marks ;
   struct fscrypt_info *i_crypt_info ;
   struct fsverity_info *i_verity_info ;
   void *i_private ;
} __attribute__((__designated_init__));
#line 904  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   kuid_t uid ;
   kuid_t euid ;
   int signum ;
};
#line 915  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_f_u_429 {
   struct llist_node fu_llist ;
   struct callback_head fu_rcuhead ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file {
   union __anonunion_f_u_429 f_u ;
   struct path f_path ;
   struct inode *f_inode ;
   struct file_operations *f_op ;
   spinlock_t f_lock ;
   enum rw_hint f_write_hint ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   struct mutex f_pos_lock ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct list_head f_tfile_llink ;
   struct address_space *f_mapping ;
   errseq_t f_wb_err ;
} __attribute__((__designated_init__, __aligned__(4)));
#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
typedef void *fl_owner_t;
#line 1026 
struct file_lock;
#line 1029  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock *, struct file_lock *) ;
   void (*fl_release_private)(struct file_lock *) ;
};
#line 1034  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct lock_manager_operations {
   fl_owner_t (*lm_get_owner)(fl_owner_t ) ;
   void (*lm_put_owner)(fl_owner_t ) ;
   void (*lm_notify)(struct file_lock *) ;
   int (*lm_grant)(struct file_lock *, int ) ;
   bool (*lm_break)(struct file_lock *) ;
   int (*lm_change)(struct file_lock *, int , struct list_head *) ;
   void (*lm_setup)(struct file_lock *, void **) ;
};
#line 1052 
struct net;
#line 1058 
struct nlm_lockowner;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 15 
struct nfs4_lock_state;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct;
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct __anonstruct_afs_431 {
   struct list_head link ;
   int state ;
   unsigned int debug_id ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_fl_u_430 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_431 afs ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock {
   struct file_lock *fl_blocker ;
   struct list_head fl_list ;
   struct hlist_node fl_link ;
   struct list_head fl_blocked_requests ;
   struct list_head fl_blocked_member ;
   fl_owner_t fl_owner ;
   unsigned int fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   int fl_link_cpu ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   unsigned long fl_downgrade_time ;
   struct file_lock_operations *fl_ops ;
   struct lock_manager_operations *fl_lmops ;
   union __anonunion_fl_u_430 fl_u ;
} __attribute__((__designated_init__));
#line 1117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_context {
   spinlock_t flc_lock ;
   struct list_head flc_flock ;
   struct list_head flc_posix ;
   struct list_head flc_lease ;
};
#line 1331  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct {
   rwlock_t fa_lock ;
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
   struct callback_head fa_rcu ;
};
#line 1418  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct sb_writers {
   int frozen ;
   wait_queue_head_t wait_unfrozen ;
   struct percpu_rw_semaphore rw_sem[3U] ;
};
#line 1424 
struct super_operations;
#line 1424 
struct xattr_handler;
#line 1424 
struct mtd_info;
#line 1424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations *s_op ;
   struct dquot_operations *dq_op ;
   struct quotactl_ops *s_qcop ;
   struct export_operations *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_iflags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   int s_count ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler **s_xattr ;
   struct fscrypt_operations *s_cop ;
   struct key *s_master_keys ;
   struct fsverity_operations *s_vop ;
   struct hlist_bl_head s_roots ;
   struct list_head s_mounts ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct hlist_node s_instances ;
   unsigned int s_quota_types ;
   struct quota_info s_dquot ;
   struct sb_writers s_writers ;
   void *s_fs_info ;
   u32 s_time_gran ;
   time64_t s_time_min ;
   time64_t s_time_max ;
   __u32 s_fsnotify_mask ;
   struct fsnotify_mark_connector *s_fsnotify_marks ;
   char s_id[32U] ;
   uuid_t s_uuid ;
   unsigned int s_max_links ;
   fmode_t s_mode ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   struct dentry_operations *s_d_op ;
   int cleancache_poolid ;
   struct shrinker s_shrink ;
   atomic_long_t s_remove_count ;
   atomic_long_t s_fsnotify_inode_refs ;
   int s_readonly_remount ;
   struct workqueue_struct *s_dio_done_wq ;
   struct hlist_head s_pins ;
   struct user_namespace *s_user_ns ;
   struct list_lru s_dentry_lru ;
   struct list_lru s_inode_lru ;
   struct callback_head rcu ;
   struct work_struct destroy_work ;
   struct mutex s_sync_lock ;
   int s_stack_depth ;
   spinlock_t s_inode_list_lock ;
   struct list_head s_inodes ;
   spinlock_t s_inode_wblist_lock ;
   struct list_head s_inodes_wb ;
} __attribute__((__designated_init__));
#line 1746  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1756 
struct dir_context;
#line 1767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct dir_context {
   int (*actor)(struct dir_context *, char *, int , loff_t , u64 , unsigned int ) ;
   loff_t pos ;
};
#line 1771 
struct block_device_operations;
#line 1821  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file *, loff_t , int ) ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*read_iter)(struct kiocb *, struct iov_iter *) ;
   ssize_t (*write_iter)(struct kiocb *, struct iov_iter *) ;
   int (*iopoll)(struct kiocb *, bool ) ;
   int (*iterate)(struct file *, struct dir_context *) ;
   int (*iterate_shared)(struct file *, struct dir_context *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   unsigned long mmap_supported_flags ;
   int (*open)(struct inode *, struct file *) ;
   int (*flush)(struct file *, fl_owner_t ) ;
   int (*release)(struct inode *, struct file *) ;
   int (*fsync)(struct file *, loff_t , loff_t , int ) ;
   int (*fasync)(int , struct file *, int ) ;
   int (*lock)(struct file *, int , struct file_lock *) ;
   ssize_t (*sendpage)(struct file *, struct page *, int , size_t , loff_t *, int ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*check_flags)(int ) ;
   int (*flock)(struct file *, int , struct file_lock *) ;
   ssize_t (*splice_write)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ) ;
   ssize_t (*splice_read)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*setlease)(struct file *, long , struct file_lock **, void **) ;
   long (*fallocate)(struct file *, int , loff_t , loff_t ) ;
   void (*show_fdinfo)(struct seq_file *, struct file *) ;
   ssize_t (*copy_file_range)(struct file *, loff_t , struct file *, loff_t , size_t , unsigned int ) ;
   loff_t (*remap_file_range)(struct file *, loff_t , struct file *, loff_t , loff_t , unsigned int ) ;
   int (*fadvise)(struct file *, loff_t , loff_t , int ) ;
} __attribute__((__designated_init__));
#line 1863  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode_operations {
   struct dentry *(*lookup)(struct inode *, struct dentry *, unsigned int ) ;
   char *(*get_link)(struct dentry *, struct inode *, struct delayed_call *) ;
   int (*permission)(struct inode *, int ) ;
   struct posix_acl *(*get_acl)(struct inode *, int ) ;
   int (*readlink)(struct dentry *, char *, int ) ;
   int (*create)(struct inode *, struct dentry *, umode_t , bool ) ;
   int (*link)(struct dentry *, struct inode *, struct dentry *) ;
   int (*unlink)(struct inode *, struct dentry *) ;
   int (*symlink)(struct inode *, struct dentry *, char *) ;
   int (*mkdir)(struct inode *, struct dentry *, umode_t ) ;
   int (*rmdir)(struct inode *, struct dentry *) ;
   int (*mknod)(struct inode *, struct dentry *, umode_t , dev_t ) ;
   int (*rename)(struct inode *, struct dentry *, struct inode *, struct dentry *, unsigned int ) ;
   int (*setattr)(struct dentry *, struct iattr *) ;
   int (*getattr)(struct path *, struct kstat *, u32 , unsigned int ) ;
   ssize_t (*listxattr)(struct dentry *, char *, size_t ) ;
   int (*fiemap)(struct inode *, struct fiemap_extent_info *, u64 , u64 ) ;
   int (*update_time)(struct inode *, struct timespec64 *, int ) ;
   int (*atomic_open)(struct inode *, struct dentry *, struct file *, unsigned int , umode_t ) ;
   int (*tmpfile)(struct inode *, struct dentry *, umode_t ) ;
   int (*set_acl)(struct inode *, struct posix_acl *, int ) ;
} __attribute__((__aligned__(64)));
#line 1942  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block *) ;
   void (*destroy_inode)(struct inode *) ;
   void (*free_inode)(struct inode *) ;
   void (*dirty_inode)(struct inode *, int ) ;
   int (*write_inode)(struct inode *, struct writeback_control *) ;
   int (*drop_inode)(struct inode *) ;
   void (*evict_inode)(struct inode *) ;
   void (*put_super)(struct super_block *) ;
   int (*sync_fs)(struct super_block *, int ) ;
   int (*freeze_super)(struct super_block *) ;
   int (*freeze_fs)(struct super_block *) ;
   int (*thaw_super)(struct super_block *) ;
   int (*unfreeze_fs)(struct super_block *) ;
   int (*statfs)(struct dentry *, struct kstatfs *) ;
   int (*remount_fs)(struct super_block *, int *, char *) ;
   void (*umount_begin)(struct super_block *) ;
   int (*show_options)(struct seq_file *, struct dentry *) ;
   int (*show_devname)(struct seq_file *, struct dentry *) ;
   int (*show_path)(struct seq_file *, struct dentry *) ;
   int (*show_stats)(struct seq_file *, struct dentry *) ;
   ssize_t (*quota_read)(struct super_block *, int , char *, size_t , loff_t ) ;
   ssize_t (*quota_write)(struct super_block *, int , char *, size_t , loff_t ) ;
   struct dquot **(*get_dquots)(struct inode *) ;
   int (*bdev_try_to_free_page)(struct super_block *, struct page *, gfp_t ) ;
   long (*nr_cached_objects)(struct super_block *, struct shrink_control *) ;
   long (*free_cached_objects)(struct super_block *, struct shrink_control *) ;
};
#line 2217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_system_type {
   char *name ;
   int fs_flags ;
   int (*init_fs_context)(struct fs_context *) ;
   struct fs_parameter_description *parameters ;
   struct dentry *(*mount)(struct file_system_type *, int , char *, void *) ;
   void (*kill_sb)(struct super_block *) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct hlist_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key s_vfs_rename_key ;
   struct lock_class_key s_writers_key[3U] ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
};
#line 1565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct kvec;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct scatterlist {
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct sg_table {
   struct scatterlist *sgl ;
   unsigned int nents ;
   unsigned int orig_nents ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
struct dma_map_ops {
   void *(*alloc)(struct device *, size_t , dma_addr_t *, gfp_t , unsigned long ) ;
   void (*free)(struct device *, size_t , void *, dma_addr_t , unsigned long ) ;
   int (*mmap)(struct device *, struct vm_area_struct *, void *, dma_addr_t , size_t , unsigned long ) ;
   int (*get_sgtable)(struct device *, struct sg_table *, void *, dma_addr_t , size_t , unsigned long ) ;
   dma_addr_t (*map_page)(struct device *, struct page *, unsigned long , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_page)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   int (*map_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   void (*unmap_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   dma_addr_t (*map_resource)(struct device *, phys_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_resource)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*sync_single_for_cpu)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_single_for_device)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_sg_for_cpu)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*sync_sg_for_device)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*cache_sync)(struct device *, void *, size_t , enum dma_data_direction ) ;
   int (*dma_supported)(struct device *, u64 ) ;
   u64 (*get_required_mask)(struct device *) ;
   size_t (*max_mapping_size)(struct device *) ;
   unsigned long (*get_merge_boundary)(struct device *) ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bvec.h"
struct bio_vec {
   struct page *bv_page ;
   unsigned int bv_len ;
   unsigned int bv_offset ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bvec.h"
struct bvec_iter {
   sector_t bi_sector ;
   unsigned int bi_size ;
   unsigned int bi_idx ;
   unsigned int bi_bvec_done ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uio.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct kvec {
   void *iov_base ;
   size_t iov_len ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_445 {
   struct iovec *iov ;
   struct kvec *kvec ;
   struct bio_vec *bvec ;
   struct pipe_inode_info *pipe ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct __anonstruct_447 {
   unsigned int head ;
   unsigned int start_head ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_446 {
   unsigned long nr_segs ;
   struct __anonstruct_447 __anonCompField___anonunion_446_69 ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct iov_iter {
   unsigned int type ;
   size_t iov_offset ;
   size_t count ;
   union __anonunion_445 __anonCompField_iov_iter_68 ;
   union __anonunion_446 __anonCompField_iov_iter_70 ;
};
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
typedef unsigned short __kernel_sa_family_t;
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/socket.h"
struct socket;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
typedef __kernel_sa_family_t sa_family_t;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14U] ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct msghdr {
   void *msg_name ;
   int msg_namelen ;
   struct iov_iter msg_iter ;
   void *msg_control ;
   __kernel_size_t msg_controllen ;
   unsigned int msg_flags ;
   struct kiocb *msg_iocb ;
};
#line 422 
struct ns_common;
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
enum ldv_9978 {
    SS_FREE = 0,
    SS_UNCONNECTED = 1,
    SS_CONNECTING = 2,
    SS_CONNECTED = 3,
    SS_DISCONNECTING = 4
};
#line 209  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
typedef enum ldv_9978 socket_state;
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct socket_wq {
   wait_queue_head_t wait ;
   struct fasync_struct *fasync_list ;
   unsigned long flags ;
   struct callback_head rcu ;
} __attribute__((__aligned__(64)));
#line 112 
struct proto_ops;
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct socket {
   socket_state state ;
   short type ;
   unsigned long flags ;
   struct file *file ;
   struct sock *sk ;
   struct proto_ops *ops ;
   struct socket_wq wq ;
};
#line 125 
struct sk_buff;
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct proto_ops {
   int family ;
   struct module *owner ;
   int (*release)(struct socket *) ;
   int (*bind)(struct socket *, struct sockaddr *, int ) ;
   int (*connect)(struct socket *, struct sockaddr *, int , int ) ;
   int (*socketpair)(struct socket *, struct socket *) ;
   int (*accept)(struct socket *, struct socket *, int , bool ) ;
   int (*getname)(struct socket *, struct sockaddr *, int ) ;
   __poll_t (*poll)(struct file *, struct socket *, struct poll_table_struct *) ;
   int (*ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*compat_ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*gettstamp)(struct socket *, void *, bool , bool ) ;
   int (*listen)(struct socket *, int ) ;
   int (*shutdown)(struct socket *, int ) ;
   int (*setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*compat_setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*sendmsg)(struct socket *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct socket *, struct msghdr *, size_t , int ) ;
   int (*mmap)(struct file *, struct socket *, struct vm_area_struct *) ;
   ssize_t (*sendpage)(struct socket *, struct page *, int , size_t , int ) ;
   ssize_t (*splice_read)(struct socket *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*set_peek_off)(struct sock *, int ) ;
   int (*peek_len)(struct socket *) ;
   int (*read_sock)(struct sock *, read_descriptor_t *, int (*)(read_descriptor_t *, struct sk_buff *, unsigned int , size_t )) ;
   int (*sendpage_locked)(struct sock *, struct page *, int , size_t , int ) ;
   int (*sendmsg_locked)(struct sock *, struct msghdr *, size_t ) ;
   int (*set_rcvlowat)(struct sock *, int ) ;
};
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/checksum_64.h"
struct in6_addr;
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/checksum.h"
typedef u64 netdev_features_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
union __anonunion_in6_u_466 {
   __u8 u6_addr8[16U] ;
   __be16 u6_addr16[8U] ;
   __be32 u6_addr32[4U] ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
struct in6_addr {
   union __anonunion_in6_u_466 in6_u ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
struct __anonstruct_siphash_key_t_467 {
   u64 key[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
typedef struct __anonstruct_siphash_key_t_467 siphash_key_t;
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_ether.h"
struct ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_proto ;
} __attribute__((__packed__));
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_dissector_key_control {
   u16 thoff ;
   u16 addr_type ;
   u32 flags ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_dissector_key_basic {
   __be16 n_proto ;
   u8 ip_proto ;
   u8 padding ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_dissector_key_tags {
   u32 flow_label ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct __anonstruct_470 {
   u16 vlan_id : 12 ;
   u16 vlan_dei : 1 ;
   u16 vlan_priority : 3 ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
union __anonunion_469 {
   struct __anonstruct_470 __anonCompField___anonunion_469_73 ;
   __be16 vlan_tci ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_dissector_key_vlan {
   union __anonunion_469 __anonCompField_flow_dissector_key_vlan_74 ;
   __be16 vlan_tpid ;
};
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_dissector_key_keyid {
   __be32 keyid ;
};
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_dissector_key_ipv4_addrs {
   __be32 src ;
   __be32 dst ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_dissector_key_ipv6_addrs {
   struct in6_addr src ;
   struct in6_addr dst ;
};
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_dissector_key_tipc {
   __be32 key ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
union __anonunion_471 {
   struct flow_dissector_key_ipv4_addrs v4addrs ;
   struct flow_dissector_key_ipv6_addrs v6addrs ;
   struct flow_dissector_key_tipc tipckey ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_dissector_key_addrs {
   union __anonunion_471 __anonCompField_flow_dissector_key_addrs_75 ;
};
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct __anonstruct_473 {
   __be16 src ;
   __be16 dst ;
};
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
union __anonunion_472 {
   __be32 ports ;
   struct __anonstruct_473 __anonCompField___anonunion_472_76 ;
};
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_dissector_key_ports {
   union __anonunion_472 __anonCompField_flow_dissector_key_ports_77 ;
};
#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct __anonstruct_474 {
   u8 type ;
   u8 code ;
};
#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_dissector_key_icmp {
   struct __anonstruct_474 __anonCompField_flow_dissector_key_icmp_78 ;
   u16 id ;
};
#line 274  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_dissector {
   unsigned int used_keys ;
   unsigned short offset[27U] ;
};
#line 284  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_keys {
   struct flow_dissector_key_control control ;
   struct flow_dissector_key_basic basic ;
   struct flow_dissector_key_tags tags ;
   struct flow_dissector_key_vlan vlan ;
   struct flow_dissector_key_vlan cvlan ;
   struct flow_dissector_key_keyid keyid ;
   struct flow_dissector_key_ports ports ;
   struct flow_dissector_key_icmp icmp ;
   struct flow_dissector_key_addrs addrs ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buffer {
   struct page *page ;
   unsigned int offset ;
   unsigned int len ;
   struct pipe_buf_operations *ops ;
   unsigned int flags ;
   unsigned long private ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_inode_info {
   struct mutex mutex ;
   wait_queue_head_t wait ;
   unsigned int head ;
   unsigned int tail ;
   unsigned int max_usage ;
   unsigned int ring_size ;
   unsigned int readers ;
   unsigned int writers ;
   unsigned int files ;
   unsigned int r_counter ;
   unsigned int w_counter ;
   struct page *tmp_page ;
   struct fasync_struct *fasync_readers ;
   struct fasync_struct *fasync_writers ;
   struct pipe_buffer *bufs ;
   struct user_struct *user ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations {
   int (*confirm)(struct pipe_inode_info *, struct pipe_buffer *) ;
   void (*release)(struct pipe_inode_info *, struct pipe_buffer *) ;
   int (*steal)(struct pipe_inode_info *, struct pipe_buffer *) ;
   bool (*get)(struct pipe_inode_info *, struct pipe_buffer *) ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi_tunnel {
   __be64 tun_id ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi_common {
   int flowic_oif ;
   int flowic_iif ;
   __u32 flowic_mark ;
   __u8 flowic_tos ;
   __u8 flowic_scope ;
   __u8 flowic_proto ;
   __u8 flowic_flags ;
   __u32 flowic_secid ;
   kuid_t flowic_uid ;
   struct flowi_tunnel flowic_tun_key ;
   __u32 flowic_multipath_hash ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_ports_478 {
   __be16 dport ;
   __be16 sport ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_icmpt_479 {
   __u8 type ;
   __u8 code ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_dnports_480 {
   __le16 dport ;
   __le16 sport ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_mht_481 {
   __u8 type ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
union flowi_uli {
   struct __anonstruct_ports_478 ports ;
   struct __anonstruct_icmpt_479 icmpt ;
   struct __anonstruct_dnports_480 dnports ;
   __be32 spi ;
   __be32 gre_key ;
   struct __anonstruct_mht_481 mht ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi4 {
   struct flowi_common __fl_common ;
   __be32 saddr ;
   __be32 daddr ;
   union flowi_uli uli ;
} __attribute__((__aligned__(8)));
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi6 {
   struct flowi_common __fl_common ;
   struct in6_addr daddr ;
   struct in6_addr saddr ;
   __be32 flowlabel ;
   union flowi_uli uli ;
   __u32 mp_hash ;
} __attribute__((__aligned__(8)));
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowidn {
   struct flowi_common __fl_common ;
   __le16 daddr ;
   __le16 saddr ;
   union flowi_uli uli ;
} __attribute__((__aligned__(8)));
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
union __anonunion_u_482 {
   struct flowi_common __fl_common ;
   struct flowi4 ip4 ;
   struct flowi6 ip6 ;
   struct flowidn dn ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi {
   union __anonunion_u_482 u ;
} __attribute__((__aligned__(8)));
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netfilter/nf_conntrack_common.h"
struct ip_conntrack_stat {
   unsigned int found ;
   unsigned int invalid ;
   unsigned int ignore ;
   unsigned int insert ;
   unsigned int insert_failed ;
   unsigned int drop ;
   unsigned int early_drop ;
   unsigned int error ;
   unsigned int expect_new ;
   unsigned int expect_create ;
   unsigned int expect_delete ;
   unsigned int search_restart ;
};
#line 41 
struct napi_struct;
#line 42 
struct bpf_prog;
#line 43 
union bpf_attr;
#line 44 
struct skb_ext;
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 313  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
typedef struct bio_vec skb_frag_t;
#line 416  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_shared_hwtstamps {
   ktime_t hwtstamp ;
};
#line 510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_shared_info {
   __u8 __unused ;
   __u8 meta_len ;
   __u8 nr_frags ;
   __u8 tx_flags ;
   unsigned short gso_size ;
   unsigned short gso_segs ;
   struct sk_buff *frag_list ;
   struct skb_shared_hwtstamps hwtstamps ;
   unsigned int gso_type ;
   u32 tskey ;
   atomic_t dataref ;
   void *destructor_arg ;
   skb_frag_t frags[17U] ;
};
#line 562  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
typedef unsigned int sk_buff_data_t;
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_489 {
   struct net_device *dev ;
   unsigned long dev_scratch ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_488 {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   union __anonunion_489 __anonCompField___anonstruct_488_85 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_487 {
   struct __anonstruct_488 __anonCompField___anonunion_487_86 ;
   struct rb_node rbnode ;
   struct list_head list ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_490 {
   struct sock *sk ;
   int ip_defrag_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_491 {
   ktime_t tstamp ;
   u64 skb_mstamp_ns ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_493 {
   unsigned long _skb_refdst ;
   void (*destructor)(struct sk_buff *) ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_492 {
   struct __anonstruct_493 __anonCompField___anonunion_492_90 ;
   struct list_head tcp_tsorted_anchor ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_495 {
   __u16 csum_start ;
   __u16 csum_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_494 {
   __wsum csum ;
   struct __anonstruct_495 __anonCompField___anonunion_494_92 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_496 {
   unsigned int napi_id ;
   unsigned int sender_cpu ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_497 {
   __u32 mark ;
   __u32 reserved_tailroom ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_498 {
   __be16 inner_protocol ;
   __u8 inner_ipproto ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff {
   union __anonunion_487 __anonCompField_sk_buff_87 ;
   union __anonunion_490 __anonCompField_sk_buff_88 ;
   union __anonunion_491 __anonCompField_sk_buff_89 ;
   char cb[48U] ;
   union __anonunion_492 __anonCompField_sk_buff_91 ;
   unsigned long _nfct ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   __u16 queue_mapping ;
   __u8 __cloned_offset[0U] ;
   __u8 cloned : 1 ;
   __u8 nohdr : 1 ;
   __u8 fclone : 2 ;
   __u8 peeked : 1 ;
   __u8 head_frag : 1 ;
   __u8 pfmemalloc : 1 ;
   __u8 active_extensions ;
   __u32 headers_start[0U] ;
   __u8 __pkt_type_offset[0U] ;
   __u8 pkt_type : 3 ;
   __u8 ignore_df : 1 ;
   __u8 nf_trace : 1 ;
   __u8 ip_summed : 2 ;
   __u8 ooo_okay : 1 ;
   __u8 l4_hash : 1 ;
   __u8 sw_hash : 1 ;
   __u8 wifi_acked_valid : 1 ;
   __u8 wifi_acked : 1 ;
   __u8 no_fcs : 1 ;
   __u8 encapsulation : 1 ;
   __u8 encap_hdr_csum : 1 ;
   __u8 csum_valid : 1 ;
   __u8 __pkt_vlan_present_offset[0U] ;
   __u8 vlan_present : 1 ;
   __u8 csum_complete_sw : 1 ;
   __u8 csum_level : 2 ;
   __u8 csum_not_inet : 1 ;
   __u8 dst_pending_confirm : 1 ;
   __u8 ndisc_nodetype : 2 ;
   __u8 ipvs_property : 1 ;
   __u8 inner_protocol_type : 1 ;
   __u8 remcsum_offload : 1 ;
   __u8 offload_fwd_mark : 1 ;
   __u8 offload_l3_fwd_mark : 1 ;
   __u8 tc_skip_classify : 1 ;
   __u8 tc_at_ingress : 1 ;
   __u8 tc_redirected : 1 ;
   __u8 tc_from_ingress : 1 ;
   __u8 decrypted : 1 ;
   __u16 tc_index ;
   union __anonunion_494 __anonCompField_sk_buff_93 ;
   __u32 priority ;
   int skb_iif ;
   __u32 hash ;
   __be16 vlan_proto ;
   __u16 vlan_tci ;
   union __anonunion_496 __anonCompField_sk_buff_94 ;
   __u32 secmark ;
   union __anonunion_497 __anonCompField_sk_buff_95 ;
   union __anonunion_498 __anonCompField_sk_buff_96 ;
   __u16 inner_transport_header ;
   __u16 inner_network_header ;
   __u16 inner_mac_header ;
   __be16 protocol ;
   __u16 transport_header ;
   __u16 network_header ;
   __u16 mac_header ;
   __u32 headers_end[0U] ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   refcount_t users ;
   struct skb_ext *extensions ;
};
#line 920 
struct dst_entry;
#line 973 
struct rtable;
#line 1165 
enum pkt_hash_types {
    PKT_HASH_TYPE_NONE = 0,
    PKT_HASH_TYPE_L2 = 1,
    PKT_HASH_TYPE_L3 = 2,
    PKT_HASH_TYPE_L4 = 3
};
#line 4108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_ext {
   refcount_t refcnt ;
   u8 offset[3U] ;
   u8 chunks ;
   char data[0U] ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
struct dql {
   unsigned int num_queued ;
   unsigned int adj_limit ;
   unsigned int last_obj_cnt ;
   unsigned int limit ;
   unsigned int num_completed ;
   unsigned int prev_ovlimit ;
   unsigned int prev_num_queued ;
   unsigned int prev_last_obj_cnt ;
   unsigned int lowest_slack ;
   unsigned long slack_start_time ;
   unsigned int max_limit ;
   unsigned int min_limit ;
   unsigned int slack_hold_time ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
union __anonunion___u_525 {
   unsigned int __val ;
   char __c[1U] ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
union __anonunion___u_527 {
   unsigned int __val ;
   char __c[1U] ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
struct __anonstruct_sync_serial_settings_528 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
typedef struct __anonstruct_sync_serial_settings_528 sync_serial_settings;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_te1_settings_529 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_te1_settings_529 te1_settings;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_raw_hdlc_proto_530 {
   unsigned short encoding ;
   unsigned short parity ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_raw_hdlc_proto_530 raw_hdlc_proto;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_531 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_531 fr_proto;
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_532 {
   unsigned int dlci ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_532 fr_proto_pvc;
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_info_533 {
   unsigned int dlci ;
   char master[16U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_info_533 fr_proto_pvc_info;
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_cisco_proto_534 {
   unsigned int interval ;
   unsigned int timeout ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_cisco_proto_534 cisco_proto;
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifs_ifsu_535 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_535 ifs_ifsu ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifrn_536 {
   char ifrn_name[16U] ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifru_537 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16U] ;
   char ifru_newname[16U] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifreq {
   union __anonunion_ifr_ifrn_536 ifr_ifrn ;
   union __anonunion_ifr_ifru_537 ifr_ifru ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef s32 compat_long_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef u32 compat_uptr_t;
#line 367  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list {
   compat_uptr_t next ;
};
#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list_head {
   struct compat_robust_list list ;
   compat_long_t futex_offset ;
   compat_uptr_t list_op_pending ;
};
#line 177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_drvinfo {
   __u32 cmd ;
   char driver[32U] ;
   char version[32U] ;
   char fw_version[32U] ;
   char bus_info[32U] ;
   char erom_version[32U] ;
   char reserved2[12U] ;
   __u32 n_priv_flags ;
   __u32 n_stats ;
   __u32 testinfo_len ;
   __u32 eedump_len ;
   __u32 regdump_len ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_wolinfo {
   __u32 cmd ;
   __u32 supported ;
   __u32 wolopts ;
   __u8 sopass[6U] ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tunable {
   __u32 cmd ;
   __u32 id ;
   __u32 type_id ;
   __u32 len ;
   void *data[0U] ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_regs {
   __u32 cmd ;
   __u32 version ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eeprom {
   __u32 cmd ;
   __u32 magic ;
   __u32 offset ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eee {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertised ;
   __u32 lp_advertised ;
   __u32 eee_active ;
   __u32 eee_enabled ;
   __u32 tx_lpi_enabled ;
   __u32 tx_lpi_timer ;
   __u32 reserved[2U] ;
};
#line 382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_modinfo {
   __u32 cmd ;
   __u32 type ;
   __u32 eeprom_len ;
   __u32 reserved[8U] ;
};
#line 462  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_coalesce {
   __u32 cmd ;
   __u32 rx_coalesce_usecs ;
   __u32 rx_max_coalesced_frames ;
   __u32 rx_coalesce_usecs_irq ;
   __u32 rx_max_coalesced_frames_irq ;
   __u32 tx_coalesce_usecs ;
   __u32 tx_max_coalesced_frames ;
   __u32 tx_coalesce_usecs_irq ;
   __u32 tx_max_coalesced_frames_irq ;
   __u32 stats_block_coalesce_usecs ;
   __u32 use_adaptive_rx_coalesce ;
   __u32 use_adaptive_tx_coalesce ;
   __u32 pkt_rate_low ;
   __u32 rx_coalesce_usecs_low ;
   __u32 rx_max_coalesced_frames_low ;
   __u32 tx_coalesce_usecs_low ;
   __u32 tx_max_coalesced_frames_low ;
   __u32 pkt_rate_high ;
   __u32 rx_coalesce_usecs_high ;
   __u32 rx_max_coalesced_frames_high ;
   __u32 tx_coalesce_usecs_high ;
   __u32 tx_max_coalesced_frames_high ;
   __u32 rate_sample_interval ;
};
#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ringparam {
   __u32 cmd ;
   __u32 rx_max_pending ;
   __u32 rx_mini_max_pending ;
   __u32 rx_jumbo_max_pending ;
   __u32 tx_max_pending ;
   __u32 rx_pending ;
   __u32 rx_mini_pending ;
   __u32 rx_jumbo_pending ;
   __u32 tx_pending ;
};
#line 541  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_channels {
   __u32 cmd ;
   __u32 max_rx ;
   __u32 max_tx ;
   __u32 max_other ;
   __u32 max_combined ;
   __u32 rx_count ;
   __u32 tx_count ;
   __u32 other_count ;
   __u32 combined_count ;
};
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_pauseparam {
   __u32 cmd ;
   __u32 autoneg ;
   __u32 rx_pause ;
   __u32 tx_pause ;
};
#line 683  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_test {
   __u32 cmd ;
   __u32 flags ;
   __u32 reserved ;
   __u32 len ;
   __u64 data[0U] ;
};
#line 702  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_stats {
   __u32 cmd ;
   __u32 n_stats ;
   __u64 data[0U] ;
};
#line 758  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tos ;
};
#line 775  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 spi ;
   __u8 tos ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 l4_4_bytes ;
   __u8 tos ;
   __u8 ip_ver ;
   __u8 proto ;
};
#line 812  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tclass ;
};
#line 829  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 spi ;
   __u8 tclass ;
};
#line 844  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 l4_4_bytes ;
   __u8 tclass ;
   __u8 l4_proto ;
};
#line 852  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union ethtool_flow_union {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   struct ethtool_tcpip6_spec tcp_ip6_spec ;
   struct ethtool_tcpip6_spec udp_ip6_spec ;
   struct ethtool_tcpip6_spec sctp_ip6_spec ;
   struct ethtool_ah_espip6_spec ah_ip6_spec ;
   struct ethtool_ah_espip6_spec esp_ip6_spec ;
   struct ethtool_usrip6_spec usr_ip6_spec ;
   struct ethhdr ether_spec ;
   __u8 hdata[52U] ;
};
#line 880  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flow_ext {
   __u8 padding[2U] ;
   unsigned char h_dest[6U] ;
   __be16 vlan_etype ;
   __be16 vlan_tci ;
   __be32 data[2U] ;
};
#line 905  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rx_flow_spec {
   __u32 flow_type ;
   union ethtool_flow_union h_u ;
   struct ethtool_flow_ext h_ext ;
   union ethtool_flow_union m_u ;
   struct ethtool_flow_ext m_ext ;
   __u64 ring_cookie ;
   __u32 location ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union __anonunion_556 {
   __u32 rule_cnt ;
   __u32 rss_context ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rxnfc {
   __u32 cmd ;
   __u32 flow_type ;
   __u64 data ;
   struct ethtool_rx_flow_spec fs ;
   union __anonunion_556 __anonCompField_ethtool_rxnfc_99 ;
   __u32 rule_locs[0U] ;
};
#line 1130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flash {
   __u32 cmd ;
   __u32 region ;
   char data[128U] ;
};
#line 1150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_dump {
   __u32 cmd ;
   __u32 version ;
   __u32 flag ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 1230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ts_info {
   __u32 cmd ;
   __u32 so_timestamping ;
   __s32 phc_index ;
   __u32 tx_types ;
   __u32 tx_reserved[3U] ;
   __u32 rx_filters ;
   __u32 rx_reserved[3U] ;
};
#line 1302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_fecparam {
   __u32 cmd ;
   __u32 active_fec ;
   __u32 fec ;
   __u32 reserved ;
};
#line 1876  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_link_settings {
   __u32 cmd ;
   __u32 speed ;
   __u8 duplex ;
   __u8 port ;
   __u8 phy_address ;
   __u8 autoneg ;
   __u8 mdio_support ;
   __u8 eth_tp_mdix ;
   __u8 eth_tp_mdix_ctrl ;
   __s8 link_mode_masks_nwords ;
   __u8 transceiver ;
   __u8 reserved1[3U] ;
   __u32 reserved[7U] ;
   __u32 link_mode_masks[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
enum ethtool_phys_id_state {
    ETHTOOL_ID_INACTIVE = 0,
    ETHTOOL_ID_ACTIVE = 1,
    ETHTOOL_ID_ON = 2,
    ETHTOOL_ID_OFF = 3
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct __anonstruct_link_modes_559 {
   unsigned long supported[2U] ;
   unsigned long advertising[2U] ;
   unsigned long lp_advertising[2U] ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_link_ksettings {
   struct ethtool_link_settings base ;
   struct __anonstruct_link_modes_559 link_modes ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_ops {
   void (*get_drvinfo)(struct net_device *, struct ethtool_drvinfo *) ;
   int (*get_regs_len)(struct net_device *) ;
   void (*get_regs)(struct net_device *, struct ethtool_regs *, void *) ;
   void (*get_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   int (*set_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   u32 (*get_msglevel)(struct net_device *) ;
   void (*set_msglevel)(struct net_device *, u32 ) ;
   int (*nway_reset)(struct net_device *) ;
   u32 (*get_link)(struct net_device *) ;
   int (*get_eeprom_len)(struct net_device *) ;
   int (*get_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*set_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   int (*set_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   void (*get_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   int (*set_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   void (*get_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   int (*set_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   void (*self_test)(struct net_device *, struct ethtool_test *, u64 *) ;
   void (*get_strings)(struct net_device *, u32 , u8 *) ;
   int (*set_phys_id)(struct net_device *, enum ethtool_phys_id_state ) ;
   void (*get_ethtool_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
   int (*begin)(struct net_device *) ;
   void (*complete)(struct net_device *) ;
   u32 (*get_priv_flags)(struct net_device *) ;
   int (*set_priv_flags)(struct net_device *, u32 ) ;
   int (*get_sset_count)(struct net_device *, int ) ;
   int (*get_rxnfc)(struct net_device *, struct ethtool_rxnfc *, u32 *) ;
   int (*set_rxnfc)(struct net_device *, struct ethtool_rxnfc *) ;
   int (*flash_device)(struct net_device *, struct ethtool_flash *) ;
   int (*reset)(struct net_device *, u32 *) ;
   u32 (*get_rxfh_key_size)(struct net_device *) ;
   u32 (*get_rxfh_indir_size)(struct net_device *) ;
   int (*get_rxfh)(struct net_device *, u32 *, u8 *, u8 *) ;
   int (*set_rxfh)(struct net_device *, u32 *, u8 *, u8 ) ;
   int (*get_rxfh_context)(struct net_device *, u32 *, u8 *, u8 *, u32 ) ;
   int (*set_rxfh_context)(struct net_device *, u32 *, u8 *, u8 , u32 *, bool ) ;
   void (*get_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*set_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*get_dump_flag)(struct net_device *, struct ethtool_dump *) ;
   int (*get_dump_data)(struct net_device *, struct ethtool_dump *, void *) ;
   int (*set_dump)(struct net_device *, struct ethtool_dump *) ;
   int (*get_ts_info)(struct net_device *, struct ethtool_ts_info *) ;
   int (*get_module_info)(struct net_device *, struct ethtool_modinfo *) ;
   int (*get_module_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*set_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*get_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*set_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*get_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*set_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*get_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*set_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*get_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   int (*set_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   void (*get_ethtool_phy_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
};
#line 822  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sysctl.h"
struct ctl_table_root;
#line 823 
struct ctl_table_header;
#line 824 
struct ctl_dir;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
typedef int proc_handler(struct ctl_table *, int , void *, size_t *, loff_t *);
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_poll {
   atomic_t event ;
   wait_queue_head_t wait ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table {
   char *procname ;
   void *data ;
   int maxlen ;
   umode_t mode ;
   struct ctl_table *child ;
   proc_handler *proc_handler ;
   struct ctl_table_poll *poll ;
   void *extra1 ;
   void *extra2 ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_node {
   struct rb_node node ;
   struct ctl_table_header *header ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct __anonstruct_561 {
   struct ctl_table *ctl_table ;
   int used ;
   int count ;
   int nreg ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
union __anonunion_560 {
   struct __anonstruct_561 __anonCompField___anonunion_560_100 ;
   struct callback_head rcu ;
};
#line 142 
struct ctl_table_set;
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_header {
   union __anonunion_560 __anonCompField_ctl_table_header_101 ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_dir *parent ;
   struct ctl_node *node ;
   struct hlist_head inodes ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_dir {
   struct ctl_table_header header ;
   struct rb_root root ;
};
#line 167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_set {
   int (*is_seen)(struct ctl_table_set *) ;
   struct ctl_dir dir ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_root {
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root *) ;
   void (*set_ownership)(struct ctl_table_header *, struct ctl_table *, kuid_t *, kgid_t *) ;
   int (*permissions)(struct ctl_table_header *, struct ctl_table *) ;
};
#line 242 
struct prot_inuse;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/core.h"
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   int *sock_inuse ;
   struct prot_inuse *prot_inuse ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct u64_stats_sync {
   };
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct __anonstruct_local_t_562 {
   atomic_long_t a ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
typedef struct __anonstruct_local_t_562 local_t;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
struct __anonstruct_local64_t_563 {
   local_t a ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
typedef struct __anonstruct_local64_t_563 local64_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
struct __anonstruct_u64_stats_t_564 {
   local64_t v ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
typedef struct __anonstruct_u64_stats_t_564 u64_stats_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct ipstats_mib {
   u64 mibs[37U] ;
   struct u64_stats_sync syncp ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmp_mib {
   unsigned long mibs[28U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpmsg_mib {
   atomic_long_t mibs[512U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6_mib {
   unsigned long mibs[6U] ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6_mib_device {
   atomic_long_t mibs[6U] ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6msg_mib {
   atomic_long_t mibs[512U] ;
};
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6msg_mib_device {
   atomic_long_t mibs[512U] ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct tcp_mib {
   unsigned long mibs[16U] ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct udp_mib {
   unsigned long mibs[9U] ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_mib {
   unsigned long mibs[120U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_xfrm_mib {
   unsigned long mibs[29U] ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_tls_mib {
   unsigned long mibs[11U] ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mib.h"
struct proc_dir_entry;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mib.h"
struct netns_mib {
   struct tcp_mib *tcp_statistics ;
   struct ipstats_mib *ip_statistics ;
   struct linux_mib *net_statistics ;
   struct udp_mib *udp_statistics ;
   struct udp_mib *udplite_statistics ;
   struct icmp_mib *icmp_statistics ;
   struct icmpmsg_mib *icmpmsg_statistics ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6 ;
   struct udp_mib *udplite_stats_in6 ;
   struct ipstats_mib *ipv6_statistics ;
   struct icmpv6_mib *icmpv6_statistics ;
   struct icmpv6msg_mib *icmpv6msg_statistics ;
   struct linux_xfrm_mib *xfrm_statistics ;
   struct linux_tls_mib *tls_statistics ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/unix.h"
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/packet.h"
struct netns_packet {
   struct mutex sklist_lock ;
   struct hlist_head sklist ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags;
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct fqdir {
   long high_thresh ;
   long low_thresh ;
   int timeout ;
   int max_dist ;
   struct inet_frags *f ;
   struct net *net ;
   bool dead ;
   struct rhashtable rhashtable ;
   atomic_long_t mem ;
   struct work_struct destroy_work ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v4_compare_key {
   __be32 saddr ;
   __be32 daddr ;
   u32 user ;
   u32 vif ;
   __be16 id ;
   u16 protocol ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v6_compare_key {
   struct in6_addr saddr ;
   struct in6_addr daddr ;
   u32 user ;
   __be32 id ;
   u32 iif ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
union __anonunion_key_565 {
   struct frag_v4_compare_key v4 ;
   struct frag_v6_compare_key v6 ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frag_queue {
   struct rhash_head node ;
   union __anonunion_key_565 key ;
   struct timer_list timer ;
   spinlock_t lock ;
   refcount_t refcnt ;
   struct rb_root rb_fragments ;
   struct sk_buff *fragments_tail ;
   struct sk_buff *last_run_head ;
   ktime_t stamp ;
   int len ;
   int meat ;
   __u8 flags ;
   u16 max_size ;
   struct fqdir *fqdir ;
   struct callback_head rcu ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags {
   unsigned int qsize ;
   void (*constructor)(struct inet_frag_queue *, void *) ;
   void (*destructor)(struct inet_frag_queue *) ;
   void (*frag_expire)(struct timer_list *) ;
   struct kmem_cache *frags_cachep ;
   char *frags_cache_name ;
   struct rhashtable_params rhash_params ;
   refcount_t refcnt ;
   struct completion completion ;
};
#line 177 
struct ipv4_devconf;
#line 178 
struct fib_rules_ops;
#line 179 
struct fib_table;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct local_ports {
   seqlock_t lock ;
   int range[2U] ;
   bool warned ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct ping_group_range {
   seqlock_t lock ;
   kgid_t range[2U] ;
};
#line 31 
struct inet_hashinfo;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct inet_timewait_death_row {
   atomic_t tw_count ;
   struct inet_hashinfo *hashinfo ;
   int sysctl_max_tw_buckets ;
};
#line 40 
struct tcp_fastopen_context;
#line 43 
struct ip_ra_chain;
#line 43 
struct inet_peer_base;
#line 43 
struct xt_table;
#line 43 
struct tcp_congestion_ops;
#line 43 
struct fib_notifier_ops;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *xfrm4_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct ip_ra_chain *ra_chain ;
   struct mutex ra_mutex ;
   struct fib_rules_ops *rules_ops ;
   bool fib_has_custom_rules ;
   unsigned int fib_rules_require_fldissect ;
   struct fib_table *fib_main ;
   struct fib_table *fib_default ;
   bool fib_has_custom_local_routes ;
   int fib_num_tclassid_users ;
   struct hlist_head *fib_table_hash ;
   bool fib_offload_disabled ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct inet_peer_base *peers ;
   struct sock **tcp_sk ;
   struct fqdir *fqdir ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   struct local_ports ip_local_ports ;
   int sysctl_tcp_ecn ;
   int sysctl_tcp_ecn_fallback ;
   int sysctl_ip_default_ttl ;
   int sysctl_ip_no_pmtu_disc ;
   int sysctl_ip_fwd_use_pmtu ;
   int sysctl_ip_fwd_update_priority ;
   int sysctl_ip_nonlocal_bind ;
   int sysctl_ip_dynaddr ;
   int sysctl_ip_early_demux ;
   int sysctl_raw_l3mdev_accept ;
   int sysctl_tcp_early_demux ;
   int sysctl_udp_early_demux ;
   int sysctl_fwmark_reflect ;
   int sysctl_tcp_fwmark_accept ;
   int sysctl_tcp_l3mdev_accept ;
   int sysctl_tcp_mtu_probing ;
   int sysctl_tcp_mtu_probe_floor ;
   int sysctl_tcp_base_mss ;
   int sysctl_tcp_min_snd_mss ;
   int sysctl_tcp_probe_threshold ;
   u32 sysctl_tcp_probe_interval ;
   int sysctl_tcp_keepalive_time ;
   int sysctl_tcp_keepalive_probes ;
   int sysctl_tcp_keepalive_intvl ;
   int sysctl_tcp_syn_retries ;
   int sysctl_tcp_synack_retries ;
   int sysctl_tcp_syncookies ;
   int sysctl_tcp_reordering ;
   int sysctl_tcp_retries1 ;
   int sysctl_tcp_retries2 ;
   int sysctl_tcp_orphan_retries ;
   int sysctl_tcp_fin_timeout ;
   unsigned int sysctl_tcp_notsent_lowat ;
   int sysctl_tcp_tw_reuse ;
   int sysctl_tcp_sack ;
   int sysctl_tcp_window_scaling ;
   int sysctl_tcp_timestamps ;
   int sysctl_tcp_early_retrans ;
   int sysctl_tcp_recovery ;
   int sysctl_tcp_thin_linear_timeouts ;
   int sysctl_tcp_slow_start_after_idle ;
   int sysctl_tcp_retrans_collapse ;
   int sysctl_tcp_stdurg ;
   int sysctl_tcp_rfc1337 ;
   int sysctl_tcp_abort_on_overflow ;
   int sysctl_tcp_fack ;
   int sysctl_tcp_max_reordering ;
   int sysctl_tcp_dsack ;
   int sysctl_tcp_app_win ;
   int sysctl_tcp_adv_win_scale ;
   int sysctl_tcp_frto ;
   int sysctl_tcp_nometrics_save ;
   int sysctl_tcp_moderate_rcvbuf ;
   int sysctl_tcp_tso_win_divisor ;
   int sysctl_tcp_workaround_signed_windows ;
   int sysctl_tcp_limit_output_bytes ;
   int sysctl_tcp_challenge_ack_limit ;
   int sysctl_tcp_min_tso_segs ;
   int sysctl_tcp_min_rtt_wlen ;
   int sysctl_tcp_autocorking ;
   int sysctl_tcp_invalid_ratelimit ;
   int sysctl_tcp_pacing_ss_ratio ;
   int sysctl_tcp_pacing_ca_ratio ;
   int sysctl_tcp_wmem[3U] ;
   int sysctl_tcp_rmem[3U] ;
   int sysctl_tcp_comp_sack_nr ;
   unsigned long sysctl_tcp_comp_sack_delay_ns ;
   struct inet_timewait_death_row tcp_death_row ;
   int sysctl_max_syn_backlog ;
   int sysctl_tcp_fastopen ;
   struct tcp_congestion_ops *tcp_congestion_control ;
   struct tcp_fastopen_context *tcp_fastopen_ctx ;
   spinlock_t tcp_fastopen_ctx_lock ;
   unsigned int sysctl_tcp_fastopen_blackhole_timeout ;
   atomic_t tfo_active_disable_times ;
   unsigned long tfo_active_disable_stamp ;
   int sysctl_udp_wmem_min ;
   int sysctl_udp_rmem_min ;
   int sysctl_udp_l3mdev_accept ;
   int sysctl_igmp_max_memberships ;
   int sysctl_igmp_max_msf ;
   int sysctl_igmp_llm_reports ;
   int sysctl_igmp_qrv ;
   struct ping_group_range ping_group_range ;
   atomic_t dev_addr_genid ;
   unsigned long *sysctl_local_reserved_ports ;
   int sysctl_ip_prot_sock ;
   struct list_head mr_tables ;
   struct fib_rules_ops *mr_rules_ops ;
   int sysctl_fib_multipath_use_neigh ;
   int sysctl_fib_multipath_hash_policy ;
   struct fib_notifier_ops *notifier_ops ;
   unsigned int fib_seq ;
   struct fib_notifier_ops *ipmr_notifier_ops ;
   unsigned int ipmr_seq ;
   atomic_t rt_genid ;
   siphash_key_t ip_id_key ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst_ops.h"
struct neighbour;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst_ops.h"
struct dst_ops {
   unsigned short family ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops *) ;
   struct dst_entry *(*check)(struct dst_entry *, __u32 ) ;
   unsigned int (*default_advmss)(struct dst_entry *) ;
   unsigned int (*mtu)(struct dst_entry *) ;
   u32 *(*cow_metrics)(struct dst_entry *, unsigned long ) ;
   void (*destroy)(struct dst_entry *) ;
   void (*ifdown)(struct dst_entry *, struct net_device *, int ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry *) ;
   void (*link_failure)(struct sk_buff *) ;
   void (*update_pmtu)(struct dst_entry *, struct sock *, struct sk_buff *, u32 , bool ) ;
   void (*redirect)(struct dst_entry *, struct sock *, struct sk_buff *) ;
   int (*local_out)(struct net *, struct sock *, struct sk_buff *) ;
   struct neighbour *(*neigh_lookup)(struct dst_entry *, struct sk_buff *, void *) ;
   void (*confirm_neigh)(struct dst_entry *, void *) ;
   struct kmem_cache *kmem_cachep ;
   struct percpu_counter pcpuc_entries ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_sysctl_ipv6 {
   struct ctl_table_header *hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *icmp_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *xfrm6_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int multipath_hash_policy ;
   int flowlabel_consistency ;
   int auto_flowlabels ;
   int icmpv6_time ;
   int icmpv6_echo_ignore_all ;
   int icmpv6_echo_ignore_multicast ;
   int icmpv6_echo_ignore_anycast ;
   unsigned long icmpv6_ratemask[4U] ;
   unsigned long *icmpv6_ratemask_ptr ;
   int anycast_src_echo_reply ;
   int ip_nonlocal_bind ;
   int fwmark_reflect ;
   int idgen_retries ;
   int idgen_delay ;
   int flowlabel_state_ranges ;
   int flowlabel_reflect ;
   int max_dst_opts_cnt ;
   int max_hbh_opts_cnt ;
   int max_dst_opts_len ;
   int max_hbh_opts_len ;
   int seg6_flowlabel ;
   bool skip_notify_on_dev_down ;
};
#line 56 
struct ipv6_devconf;
#line 56 
struct fib6_info;
#line 56 
struct rt6_info;
#line 56 
struct rt6_statistics;
#line 56 
struct fib6_table;
#line 56 
struct seg6_pernet_data;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct __anonstruct_ip6addrlbl_table_567 {
   struct hlist_head head ;
   spinlock_t lock ;
   u32 seq ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct inet_peer_base *peers ;
   struct fqdir *fqdir ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct xt_table *ip6table_nat ;
   struct fib6_info *fib6_null_entry ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct list_head fib6_walkers ;
   struct dst_ops ip6_dst_ops ;
   rwlock_t fib6_walker_lock ;
   spinlock_t fib6_gc_lock ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   unsigned int fib6_rules_require_fldissect ;
   bool fib6_has_custom_rules ;
   unsigned int fib6_routes_require_src ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct list_head mr6_tables ;
   struct fib_rules_ops *mr6_rules_ops ;
   atomic_t dev_addr_genid ;
   atomic_t fib6_sernum ;
   struct seg6_pernet_data *seg6_data ;
   struct fib_notifier_ops *notifier_ops ;
   struct fib_notifier_ops *ip6mr_notifier_ops ;
   unsigned int ipmr_seq ;
   struct __anonstruct_ip6addrlbl_table_567 ip6addrlbl_table ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_nf_frag {
   struct fqdir *fqdir ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nexthop.h"
struct netns_nexthop {
   struct rb_root rb_root ;
   struct hlist_head *devhash ;
   unsigned int seq ;
   u32 last_id_allocated ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_sysctl_lowpan {
   struct ctl_table_header *frags_hdr ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_ieee802154_lowpan {
   struct netns_sysctl_lowpan sysctl ;
   struct fqdir *fqdir ;
};
#line 21 
struct sctp_mib;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/sctp.h"
struct netns_sctp {
   struct sctp_mib *sctp_statistics ;
   struct proc_dir_entry *proc_net_sctp ;
   struct ctl_table_header *sysctl_header ;
   struct sock *ctl_sock ;
   struct list_head local_addr_list ;
   struct list_head addr_waitq ;
   struct timer_list addr_wq_timer ;
   struct list_head auto_asconf_splist ;
   spinlock_t addr_wq_lock ;
   spinlock_t local_addr_lock ;
   unsigned int rto_initial ;
   unsigned int rto_min ;
   unsigned int rto_max ;
   int rto_alpha ;
   int rto_beta ;
   int max_burst ;
   int cookie_preserve_enable ;
   char *sctp_hmac_alg ;
   unsigned int valid_cookie_life ;
   unsigned int sack_timeout ;
   unsigned int hb_interval ;
   int max_retrans_association ;
   int max_retrans_path ;
   int max_retrans_init ;
   int pf_retrans ;
   int ps_retrans ;
   int pf_enable ;
   int pf_expose ;
   int sndbuf_policy ;
   int rcvbuf_policy ;
   int default_auto_asconf ;
   int addip_enable ;
   int addip_noauth ;
   int prsctp_enable ;
   int reconf_enable ;
   int auth_enable ;
   int intl_enable ;
   int ecn_enable ;
   int scope_policy ;
   int rwnd_upd_shift ;
   unsigned long max_autoclose ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/dccp.h"
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netfilter.h"
struct nf_logger;
#line 76 
struct nf_queue_handler;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct nf_hook_entries;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct netns_nf {
   struct proc_dir_entry *proc_netfilter ;
   struct nf_queue_handler *queue_handler ;
   struct nf_logger *nf_loggers[13U] ;
   struct ctl_table_header *nf_log_dir_header ;
   struct nf_hook_entries *hooks_ipv4[5U] ;
   struct nf_hook_entries *hooks_ipv6[5U] ;
   struct nf_hook_entries *hooks_arp[3U] ;
   struct nf_hook_entries *hooks_bridge[5U] ;
   struct nf_hook_entries *hooks_decnet[7U] ;
   bool defrag_ipv4 ;
   bool defrag_ipv6 ;
};
#line 37 
struct ebt_table;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/x_tables.h"
struct netns_xt {
   struct list_head tables[13U] ;
   bool notrack_deprecated_warning ;
   bool clusterip_deprecated_warning ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_head {
   struct hlist_nulls_node *first ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_generic_net {
   unsigned int timeout ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_tcp_net {
   unsigned int timeouts[14U] ;
   int tcp_loose ;
   int tcp_be_liberal ;
   int tcp_max_retrans ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_udp_net {
   unsigned int timeouts[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_icmp_net {
   unsigned int timeout ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_dccp_net {
   int dccp_loose ;
   unsigned int dccp_timeout[10U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_sctp_net {
   unsigned int timeouts[10U] ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_gre_net {
   struct list_head keymap_list ;
   unsigned int timeouts[2U] ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_ip_net {
   struct nf_generic_net generic ;
   struct nf_tcp_net tcp ;
   struct nf_udp_net udp ;
   struct nf_icmp_net icmp ;
   struct nf_icmp_net icmpv6 ;
   struct nf_dccp_net dccp ;
   struct nf_sctp_net sctp ;
   struct nf_gre_net gre ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct ct_pcpu {
   spinlock_t lock ;
   struct hlist_nulls_head unconfirmed ;
   struct hlist_nulls_head dying ;
};
#line 95 
struct nf_ct_event_notifier;
#line 95 
struct nf_exp_event_notifier;
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   struct delayed_work ecache_dwork ;
   bool ecache_dwork_pending ;
   bool auto_assign_helper_warned ;
   struct ctl_table_header *sysctl_header ;
   unsigned int sysctl_log_invalid ;
   int sysctl_events ;
   int sysctl_acct ;
   int sysctl_auto_assign_helper ;
   int sysctl_tstamp ;
   int sysctl_checksum ;
   struct ct_pcpu *pcpu_lists ;
   struct ip_conntrack_stat *stat ;
   struct nf_ct_event_notifier *nf_conntrack_event_cb ;
   struct nf_exp_event_notifier *nf_expect_event_cb ;
   struct nf_ip_net nf_ct_proto ;
   unsigned int labels_used ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nftables.h"
struct netns_nftables {
   struct list_head tables ;
   struct list_head commit_list ;
   struct list_head module_list ;
   struct mutex commit_mutex ;
   unsigned int base_seq ;
   u8 gencursor ;
   u8 validate_state ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
   u8 dbits4 ;
   u8 sbits4 ;
   u8 dbits6 ;
   u8 sbits6 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hthresh {
   struct work_struct work ;
   seqlock_t lock ;
   u8 lbits4 ;
   u8 rbits4 ;
   u8 lbits6 ;
   u8 rbits6 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[3U] ;
   struct xfrm_policy_hash policy_bydst[3U] ;
   unsigned int policy_count[6U] ;
   struct work_struct policy_hash_work ;
   struct xfrm_policy_hthresh policy_hthresh ;
   struct list_head inexact_bins ;
   struct sock *nlsk ;
   struct sock *nlsk_stash ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
   struct dst_ops xfrm4_dst_ops ;
   struct dst_ops xfrm6_dst_ops ;
   spinlock_t xfrm_state_lock ;
   spinlock_t xfrm_policy_lock ;
   struct mutex xfrm_cfg_mutex ;
};
#line 79 
struct mpls_route;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mpls.h"
struct netns_mpls {
   int ip_ttl_propagate ;
   int default_ttl ;
   size_t platform_labels ;
   struct mpls_route **platform_label ;
   struct ctl_table_header *ctl ;
};
#line 20 
struct can_dev_rcv_lists;
#line 21 
struct can_pkg_stats;
#line 22 
struct can_rcv_lists_stats;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/can.h"
struct netns_can {
   struct proc_dir_entry *proc_dir ;
   struct proc_dir_entry *pde_version ;
   struct proc_dir_entry *pde_stats ;
   struct proc_dir_entry *pde_reset_stats ;
   struct proc_dir_entry *pde_rcvlist_all ;
   struct proc_dir_entry *pde_rcvlist_fil ;
   struct proc_dir_entry *pde_rcvlist_inv ;
   struct proc_dir_entry *pde_rcvlist_sff ;
   struct proc_dir_entry *pde_rcvlist_eff ;
   struct proc_dir_entry *pde_rcvlist_err ;
   struct proc_dir_entry *bcmproc_dir ;
   struct can_dev_rcv_lists *rx_alldev_list ;
   spinlock_t rcvlists_lock ;
   struct timer_list stattimer ;
   struct can_pkg_stats *pkg_stats ;
   struct can_rcv_lists_stats *rcv_lists_stats ;
   struct hlist_head cgw_list ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xdp.h"
struct netns_xdp {
   struct mutex lock ;
   struct hlist_head list ;
};
#line 12 
struct proc_ns_operations;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ns_common.h"
struct ns_common {
   atomic_long_t stashed ;
   struct proc_ns_operations *ops ;
   unsigned int inum ;
};
#line 12 
struct net_generic;
#line 13 
struct uevent_sock;
#line 14 
struct netns_ipvs;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct key_tag;
#line 55 
struct ucounts;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct net {
   refcount_t passive ;
   refcount_t count ;
   spinlock_t rules_mod_lock ;
   unsigned int dev_unreg_count ;
   unsigned int dev_base_seq ;
   int ifindex ;
   spinlock_t nsid_lock ;
   atomic_t fnhe_genid ;
   struct list_head list ;
   struct list_head exit_list ;
   struct llist_node cleanup_list ;
   struct key_tag *key_domain ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct idr netns_ids ;
   struct ns_common ns ;
   struct list_head dev_base_head ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct sock *rtnl ;
   struct sock *genl_sock ;
   struct uevent_sock *uevent_sock ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   struct raw_notifier_head netdev_chain ;
   u32 hash_mix ;
   struct net_device *loopback_dev ;
   struct list_head rules_ops ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_nexthop nexthop ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_ieee802154_lowpan ieee802154_lowpan ;
   struct netns_sctp sctp ;
   struct netns_dccp dccp ;
   struct netns_nf nf ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct netns_nftables nft ;
   struct netns_nf_frag nf_frag ;
   struct ctl_table_header *nf_frag_frags_hdr ;
   struct sock *nfnl ;
   struct sock *nfnl_stash ;
   struct list_head nfnl_acct_list ;
   struct list_head nfct_timeout_list ;
   struct sk_buff_head wext_nlevents ;
   struct net_generic *gen ;
   struct bpf_prog *flow_dissector_prog ;
   struct netns_xfrm xfrm ;
   struct netns_ipvs *ipvs ;
   struct netns_mpls mpls ;
   struct netns_can can ;
   struct netns_xdp xdp ;
   struct sock *crypto_nlsk ;
   struct sock *diag_nlsk ;
} __attribute__((__designated_init__));
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array_ptr;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array {
   struct assoc_array_ptr *root ;
   unsigned long nr_leaves_on_tree ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
typedef int32_t key_serial_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
typedef uint32_t key_perm_t;
#line 32 
struct key_type;
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_tag {
   struct callback_head rcu ;
   refcount_t usage ;
   bool removed ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_580 {
   u16 desc_len ;
   char desc[6U] ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_579 {
   struct __anonstruct_580 __anonCompField___anonunion_579_102 ;
   unsigned long x ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct keyring_index_key {
   unsigned long hash ;
   union __anonunion_579 __anonCompField_keyring_index_key_103 ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union key_payload {
   void *rcu_data0 ;
   void *data[4U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_restriction {
   int (*check)(struct key *, struct key_type *, union key_payload *, struct key *) ;
   struct key *key ;
   struct key_type *keytype ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_581 {
   struct list_head graveyard_link ;
   struct rb_node serial_node ;
};
#line 172 
struct key_user;
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_582 {
   time64_t expiry ;
   time64_t revoked_at ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_584 {
   unsigned long hash ;
   unsigned long len_desc ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_583 {
   struct keyring_index_key index_key ;
   struct __anonstruct_584 __anonCompField___anonunion_583_106 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_586 {
   struct list_head name_link ;
   struct assoc_array keys ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_585 {
   union key_payload payload ;
   struct __anonstruct_586 __anonCompField___anonunion_585_108 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key {
   refcount_t usage ;
   key_serial_t serial ;
   union __anonunion_581 __anonCompField_key_104 ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_582 __anonCompField_key_105 ;
   time64_t last_used_at ;
   kuid_t uid ;
   kgid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   short state ;
   unsigned long flags ;
   union __anonunion_583 __anonCompField_key_107 ;
   union __anonunion_585 __anonCompField_key_109 ;
   struct key_restriction *restrict_link ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/user.h"
struct user_struct {
   refcount_t __count ;
   atomic_t processes ;
   atomic_t sigpending ;
   atomic_t fanotify_listeners ;
   atomic_long_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   unsigned long unix_inflight ;
   atomic_long_t pipe_bufs ;
   struct hlist_node uidhash_node ;
   kuid_t uid ;
   atomic_long_t locked_vm ;
   struct ratelimit_state ratelimit ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   kgid_t gid[0U] ;
} __attribute__((__designated_init__));
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
union __anonunion_589 {
   int non_rcu ;
   struct callback_head rcu ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   kuid_t uid ;
   kgid_t gid ;
   kuid_t suid ;
   kgid_t sgid ;
   kuid_t euid ;
   kgid_t egid ;
   kuid_t fsuid ;
   kgid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   kernel_cap_t cap_ambient ;
   unsigned char jit_keyring ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   void *security ;
   struct user_struct *user ;
   struct user_namespace *user_ns ;
   struct group_info *group_info ;
   union __anonunion_589 __anonCompField_cred_110 ;
} __attribute__((__designated_init__));
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   size_t pad_until ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations *op ;
   int poll_event ;
   struct file *file ;
   void *private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_operations {
   void *(*start)(struct seq_file *, loff_t *) ;
   void (*stop)(struct seq_file *, void *) ;
   void *(*next)(struct seq_file *, void *, loff_t *) ;
   int (*show)(struct seq_file *, void *) ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct __anonstruct_possible_net_t_590 {
   struct net *net ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
typedef struct __anonstruct_possible_net_t_590 possible_net_t;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_ets {
   __u8 willing ;
   __u8 ets_cap ;
   __u8 cbs ;
   __u8 tc_tx_bw[8U] ;
   __u8 tc_rx_bw[8U] ;
   __u8 tc_tsa[8U] ;
   __u8 prio_tc[8U] ;
   __u8 tc_reco_bw[8U] ;
   __u8 tc_reco_tsa[8U] ;
   __u8 reco_prio_tc[8U] ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_maxrate {
   __u64 tc_maxrate[8U] ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn {
   __u8 rpg_enable[8U] ;
   __u32 rppp_max_rps[8U] ;
   __u32 rpg_time_reset[8U] ;
   __u32 rpg_byte_reset[8U] ;
   __u32 rpg_threshold[8U] ;
   __u32 rpg_max_rate[8U] ;
   __u32 rpg_ai_rate[8U] ;
   __u32 rpg_hai_rate[8U] ;
   __u32 rpg_gd[8U] ;
   __u32 rpg_min_dec_fac[8U] ;
   __u32 rpg_min_rate[8U] ;
   __u32 cndd_state_machine[8U] ;
};
#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn_stats {
   __u64 rppp_rp_centiseconds[8U] ;
   __u32 rppp_created_rps[8U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_pfc {
   __u8 pfc_cap ;
   __u8 pfc_en ;
   __u8 mbc ;
   __u16 delay ;
   __u64 requests[8U] ;
   __u64 indications[8U] ;
};
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcbnl_buffer {
   __u8 prio2buffer[8U] ;
   __u32 buffer_size[8U] ;
   __u32 total_size ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pg {
   __u8 willing ;
   __u8 error ;
   __u8 pg_en ;
   __u8 tcs_supported ;
   __u8 pg_bw[8U] ;
   __u8 prio_pg[8U] ;
};
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pfc {
   __u8 willing ;
   __u8 error ;
   __u8 pfc_en ;
   __u8 tcs_supported ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_app {
   __u8 selector ;
   __u8 priority ;
   __u16 protocol ;
};
#line 259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_peer_app_info {
   __u8 willing ;
   __u8 error ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dcbnl.h"
struct dcbnl_rtnl_ops {
   int (*ieee_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_setets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_getmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_setmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_getqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_setqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_getqcnstats)(struct net_device *, struct ieee_qcn_stats *) ;
   int (*ieee_getpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_setpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_getapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_setapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_delapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_peer_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_peer_getpfc)(struct net_device *, struct ieee_pfc *) ;
   u8 (*getstate)(struct net_device *) ;
   u8 (*setstate)(struct net_device *, u8 ) ;
   void (*getpermhwaddr)(struct net_device *, u8 *) ;
   void (*setpgtccfgtx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgtx)(struct net_device *, int , u8 ) ;
   void (*setpgtccfgrx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgrx)(struct net_device *, int , u8 ) ;
   void (*getpgtccfgtx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgtx)(struct net_device *, int , u8 *) ;
   void (*getpgtccfgrx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgrx)(struct net_device *, int , u8 *) ;
   void (*setpfccfg)(struct net_device *, int , u8 ) ;
   void (*getpfccfg)(struct net_device *, int , u8 *) ;
   u8 (*setall)(struct net_device *) ;
   u8 (*getcap)(struct net_device *, int , u8 *) ;
   int (*getnumtcs)(struct net_device *, int , u8 *) ;
   int (*setnumtcs)(struct net_device *, int , u8 ) ;
   u8 (*getpfcstate)(struct net_device *) ;
   void (*setpfcstate)(struct net_device *, u8 ) ;
   void (*getbcncfg)(struct net_device *, int , u32 *) ;
   void (*setbcncfg)(struct net_device *, int , u32 ) ;
   void (*getbcnrp)(struct net_device *, int , u8 *) ;
   void (*setbcnrp)(struct net_device *, int , u8 ) ;
   int (*setapp)(struct net_device *, u8 , u16 , u8 ) ;
   int (*getapp)(struct net_device *, u8 , u16 ) ;
   u8 (*getfeatcfg)(struct net_device *, int , u8 *) ;
   u8 (*setfeatcfg)(struct net_device *, int , u8 ) ;
   u8 (*getdcbx)(struct net_device *) ;
   u8 (*setdcbx)(struct net_device *, u8 ) ;
   int (*peer_getappinfo)(struct net_device *, struct dcb_peer_app_info *, u16 *) ;
   int (*peer_getapptable)(struct net_device *, struct dcb_app *) ;
   int (*cee_peer_getpg)(struct net_device *, struct cee_pg *) ;
   int (*cee_peer_getpfc)(struct net_device *, struct cee_pfc *) ;
   int (*dcbnl_getbuffer)(struct net_device *, struct dcbnl_buffer *) ;
   int (*dcbnl_setbuffer)(struct net_device *, struct dcbnl_buffer *) ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/taskstats.h"
struct taskstats {
   __u16 version ;
   __u32 ac_exitcode ;
   __u8 ac_flag ;
   __u8 ac_nice ;
   __u64 cpu_count ;
   __u64 cpu_delay_total ;
   __u64 blkio_count ;
   __u64 blkio_delay_total ;
   __u64 swapin_count ;
   __u64 swapin_delay_total ;
   __u64 cpu_run_real_total ;
   __u64 cpu_run_virtual_total ;
   char ac_comm[32U] ;
   __u8 ac_sched ;
   __u8 ac_pad[3U] ;
   __u32 ac_uid ;
   __u32 ac_gid ;
   __u32 ac_pid ;
   __u32 ac_ppid ;
   __u32 ac_btime ;
   __u64 ac_etime ;
   __u64 ac_utime ;
   __u64 ac_stime ;
   __u64 ac_minflt ;
   __u64 ac_majflt ;
   __u64 coremem ;
   __u64 virtmem ;
   __u64 hiwater_rss ;
   __u64 hiwater_vm ;
   __u64 read_char ;
   __u64 write_char ;
   __u64 read_syscalls ;
   __u64 write_syscalls ;
   __u64 read_bytes ;
   __u64 write_bytes ;
   __u64 cancelled_write_bytes ;
   __u64 nvcsw ;
   __u64 nivcsw ;
   __u64 ac_utimescaled ;
   __u64 ac_stimescaled ;
   __u64 cpu_scaled_run_real_total ;
   __u64 freepages_count ;
   __u64 freepages_delay_total ;
   __u64 thrashing_count ;
   __u64 thrashing_delay_total ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/cgroupstats.h"
struct mnt_namespace;
#line 60 
struct uts_namespace;
#line 61 
struct ipc_namespace;
#line 62 
struct cgroup_namespace;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nsproxy.h"
struct nsproxy {
   atomic_t count ;
   struct uts_namespace *uts_ns ;
   struct ipc_namespace *ipc_ns ;
   struct mnt_namespace *mnt_ns ;
   struct pid_namespace *pid_ns_for_children ;
   struct net *net_ns ;
   struct cgroup_namespace *cgroup_ns ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_extent {
   u32 first ;
   u32 lower_first ;
   u32 count ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct __anonstruct_592 {
   struct uid_gid_extent *forward ;
   struct uid_gid_extent *reverse ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
union __anonunion_591 {
   struct uid_gid_extent extent[5U] ;
   struct __anonstruct_592 __anonCompField___anonunion_591_111 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_map {
   u32 nr_extents ;
   union __anonunion_591 __anonCompField_uid_gid_map_112 ;
};
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct user_namespace {
   struct uid_gid_map uid_map ;
   struct uid_gid_map gid_map ;
   struct uid_gid_map projid_map ;
   atomic_t count ;
   struct user_namespace *parent ;
   int level ;
   kuid_t owner ;
   kgid_t group ;
   struct ns_common ns ;
   unsigned long flags ;
   struct list_head keyring_name_list ;
   struct key *user_keyring_register ;
   struct rw_semaphore keyring_sem ;
   struct key *persistent_keyring_register ;
   struct work_struct work ;
   struct ctl_table_set set ;
   struct ctl_table_header *sysctls ;
   struct ucounts *ucounts ;
   int ucount_max[9U] ;
} __attribute__((__designated_init__));
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct ucounts {
   struct hlist_node node ;
   struct user_namespace *ns ;
   kuid_t uid ;
   int count ;
   atomic_t ucount[9U] ;
};
#line 139 
enum irqreturn {
    IRQ_NONE = 0,
    IRQ_HANDLED = 1,
    IRQ_WAKE_THREAD = 2
};
#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
typedef enum irqreturn irqreturn_t;
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
struct irq_affinity_notify {
   unsigned int irq ;
   struct kref kref ;
   struct work_struct work ;
   void (*notify)(struct irq_affinity_notify *, cpumask_t *) ;
   void (*release)(struct kref *) ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_insn {
   __u8 code ;
   __u8 dst_reg : 4 ;
   __u8 src_reg : 4 ;
   __s16 off ;
   __s32 imm ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_cgroup_storage_key {
   __u64 cgroup_inode_id ;
   __u32 attach_type ;
};
#line 110 
enum bpf_map_type {
    BPF_MAP_TYPE_UNSPEC = 0,
    BPF_MAP_TYPE_HASH = 1,
    BPF_MAP_TYPE_ARRAY = 2,
    BPF_MAP_TYPE_PROG_ARRAY = 3,
    BPF_MAP_TYPE_PERF_EVENT_ARRAY = 4,
    BPF_MAP_TYPE_PERCPU_HASH = 5,
    BPF_MAP_TYPE_PERCPU_ARRAY = 6,
    BPF_MAP_TYPE_STACK_TRACE = 7,
    BPF_MAP_TYPE_CGROUP_ARRAY = 8,
    BPF_MAP_TYPE_LRU_HASH = 9,
    BPF_MAP_TYPE_LRU_PERCPU_HASH = 10,
    BPF_MAP_TYPE_LPM_TRIE = 11,
    BPF_MAP_TYPE_ARRAY_OF_MAPS = 12,
    BPF_MAP_TYPE_HASH_OF_MAPS = 13,
    BPF_MAP_TYPE_DEVMAP = 14,
    BPF_MAP_TYPE_SOCKMAP = 15,
    BPF_MAP_TYPE_CPUMAP = 16,
    BPF_MAP_TYPE_XSKMAP = 17,
    BPF_MAP_TYPE_SOCKHASH = 18,
    BPF_MAP_TYPE_CGROUP_STORAGE = 19,
    BPF_MAP_TYPE_REUSEPORT_SOCKARRAY = 20,
    BPF_MAP_TYPE_PERCPU_CGROUP_STORAGE = 21,
    BPF_MAP_TYPE_QUEUE = 22,
    BPF_MAP_TYPE_STACK = 23,
    BPF_MAP_TYPE_SK_STORAGE = 24,
    BPF_MAP_TYPE_DEVMAP_HASH = 25
};
#line 139 
enum bpf_prog_type {
    BPF_PROG_TYPE_UNSPEC = 0,
    BPF_PROG_TYPE_SOCKET_FILTER = 1,
    BPF_PROG_TYPE_KPROBE = 2,
    BPF_PROG_TYPE_SCHED_CLS = 3,
    BPF_PROG_TYPE_SCHED_ACT = 4,
    BPF_PROG_TYPE_TRACEPOINT = 5,
    BPF_PROG_TYPE_XDP = 6,
    BPF_PROG_TYPE_PERF_EVENT = 7,
    BPF_PROG_TYPE_CGROUP_SKB = 8,
    BPF_PROG_TYPE_CGROUP_SOCK = 9,
    BPF_PROG_TYPE_LWT_IN = 10,
    BPF_PROG_TYPE_LWT_OUT = 11,
    BPF_PROG_TYPE_LWT_XMIT = 12,
    BPF_PROG_TYPE_SOCK_OPS = 13,
    BPF_PROG_TYPE_SK_SKB = 14,
    BPF_PROG_TYPE_CGROUP_DEVICE = 15,
    BPF_PROG_TYPE_SK_MSG = 16,
    BPF_PROG_TYPE_RAW_TRACEPOINT = 17,
    BPF_PROG_TYPE_CGROUP_SOCK_ADDR = 18,
    BPF_PROG_TYPE_LWT_SEG6LOCAL = 19,
    BPF_PROG_TYPE_LIRC_MODE2 = 20,
    BPF_PROG_TYPE_SK_REUSEPORT = 21,
    BPF_PROG_TYPE_FLOW_DISSECTOR = 22,
    BPF_PROG_TYPE_CGROUP_SYSCTL = 23,
    BPF_PROG_TYPE_RAW_TRACEPOINT_WRITABLE = 24,
    BPF_PROG_TYPE_CGROUP_SOCKOPT = 25,
    BPF_PROG_TYPE_TRACING = 26
};
#line 169 
enum bpf_attach_type {
    BPF_CGROUP_INET_INGRESS = 0,
    BPF_CGROUP_INET_EGRESS = 1,
    BPF_CGROUP_INET_SOCK_CREATE = 2,
    BPF_CGROUP_SOCK_OPS = 3,
    BPF_SK_SKB_STREAM_PARSER = 4,
    BPF_SK_SKB_STREAM_VERDICT = 5,
    BPF_CGROUP_DEVICE = 6,
    BPF_SK_MSG_VERDICT = 7,
    BPF_CGROUP_INET4_BIND = 8,
    BPF_CGROUP_INET6_BIND = 9,
    BPF_CGROUP_INET4_CONNECT = 10,
    BPF_CGROUP_INET6_CONNECT = 11,
    BPF_CGROUP_INET4_POST_BIND = 12,
    BPF_CGROUP_INET6_POST_BIND = 13,
    BPF_CGROUP_UDP4_SENDMSG = 14,
    BPF_CGROUP_UDP6_SENDMSG = 15,
    BPF_LIRC_MODE2 = 16,
    BPF_FLOW_DISSECTOR = 17,
    BPF_CGROUP_SYSCTL = 18,
    BPF_CGROUP_UDP4_RECVMSG = 19,
    BPF_CGROUP_UDP6_RECVMSG = 20,
    BPF_CGROUP_GETSOCKOPT = 21,
    BPF_CGROUP_SETSOCKOPT = 22,
    BPF_TRACE_RAW_TP = 23,
    BPF_TRACE_FENTRY = 24,
    BPF_TRACE_FEXIT = 25,
    __MAX_BPF_ATTACH_TYPE = 26
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_594 {
   __u32 map_type ;
   __u32 key_size ;
   __u32 value_size ;
   __u32 max_entries ;
   __u32 map_flags ;
   __u32 inner_map_fd ;
   __u32 numa_node ;
   char map_name[16U] ;
   __u32 map_ifindex ;
   __u32 btf_fd ;
   __u32 btf_key_type_id ;
   __u32 btf_value_type_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_596 {
   __u64 value ;
   __u64 next_key ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_595 {
   __u32 map_fd ;
   __u64 key ;
   union __anonunion_596 __anonCompField___anonstruct_595_115 ;
   __u64 flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_597 {
   __u32 prog_type ;
   __u32 insn_cnt ;
   __u64 insns ;
   __u64 license ;
   __u32 log_level ;
   __u32 log_size ;
   __u64 log_buf ;
   __u32 kern_version ;
   __u32 prog_flags ;
   char prog_name[16U] ;
   __u32 prog_ifindex ;
   __u32 expected_attach_type ;
   __u32 prog_btf_fd ;
   __u32 func_info_rec_size ;
   __u64 func_info ;
   __u32 func_info_cnt ;
   __u32 line_info_rec_size ;
   __u64 line_info ;
   __u32 line_info_cnt ;
   __u32 attach_btf_id ;
   __u32 attach_prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_598 {
   __u64 pathname ;
   __u32 bpf_fd ;
   __u32 file_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_599 {
   __u32 target_fd ;
   __u32 attach_bpf_fd ;
   __u32 attach_type ;
   __u32 attach_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_test_600 {
   __u32 prog_fd ;
   __u32 retval ;
   __u32 data_size_in ;
   __u32 data_size_out ;
   __u64 data_in ;
   __u64 data_out ;
   __u32 repeat ;
   __u32 duration ;
   __u32 ctx_size_in ;
   __u32 ctx_size_out ;
   __u64 ctx_in ;
   __u64 ctx_out ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_602 {
   __u32 start_id ;
   __u32 prog_id ;
   __u32 map_id ;
   __u32 btf_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_601 {
   union __anonunion_602 __anonCompField___anonstruct_601_120 ;
   __u32 next_id ;
   __u32 open_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_info_603 {
   __u32 bpf_fd ;
   __u32 info_len ;
   __u64 info ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_query_604 {
   __u32 target_fd ;
   __u32 attach_type ;
   __u32 query_flags ;
   __u32 attach_flags ;
   __u64 prog_ids ;
   __u32 prog_cnt ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_raw_tracepoint_605 {
   __u64 name ;
   __u32 prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_606 {
   __u64 btf ;
   __u64 btf_log_buf ;
   __u32 btf_size ;
   __u32 btf_log_size ;
   __u32 btf_log_level ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_task_fd_query_607 {
   __u32 pid ;
   __u32 fd ;
   __u32 flags ;
   __u32 buf_len ;
   __u64 buf ;
   __u32 prog_id ;
   __u32 fd_type ;
   __u64 probe_offset ;
   __u64 probe_addr ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union bpf_attr {
   struct __anonstruct_594 __anonCompField_bpf_attr_114 ;
   struct __anonstruct_595 __anonCompField_bpf_attr_116 ;
   struct __anonstruct_597 __anonCompField_bpf_attr_117 ;
   struct __anonstruct_598 __anonCompField_bpf_attr_118 ;
   struct __anonstruct_599 __anonCompField_bpf_attr_119 ;
   struct __anonstruct_test_600 test ;
   struct __anonstruct_601 __anonCompField_bpf_attr_121 ;
   struct __anonstruct_info_603 info ;
   struct __anonstruct_query_604 query ;
   struct __anonstruct_raw_tracepoint_605 raw_tracepoint ;
   struct __anonstruct_606 __anonCompField_bpf_attr_122 ;
   struct __anonstruct_task_fd_query_607 task_fd_query ;
} __attribute__((__aligned__(8)));
#line 3653  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_func_info {
   __u32 insn_off ;
   __u32 type_id ;
};
#line 3661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_line_info {
   __u32 insn_off ;
   __u32 file_name_off ;
   __u32 line_off ;
   __u32 line_col ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree_latch.h"
struct latch_tree_node {
   struct rb_node node[2U] ;
};
#line 215 
struct bpf_prog_aux;
#line 216 
struct bpf_map;
#line 217 
struct btf;
#line 218 
struct btf_type;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_ops {
   int (*map_alloc_check)(union bpf_attr *) ;
   struct bpf_map *(*map_alloc)(union bpf_attr *) ;
   void (*map_release)(struct bpf_map *, struct file *) ;
   void (*map_free)(struct bpf_map *) ;
   int (*map_get_next_key)(struct bpf_map *, void *, void *) ;
   void (*map_release_uref)(struct bpf_map *) ;
   void *(*map_lookup_elem_sys_only)(struct bpf_map *, void *) ;
   void *(*map_lookup_elem)(struct bpf_map *, void *) ;
   int (*map_update_elem)(struct bpf_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_map *, void *) ;
   int (*map_push_elem)(struct bpf_map *, void *, u64 ) ;
   int (*map_pop_elem)(struct bpf_map *, void *) ;
   int (*map_peek_elem)(struct bpf_map *, void *) ;
   void *(*map_fd_get_ptr)(struct bpf_map *, struct file *, int ) ;
   void (*map_fd_put_ptr)(void *) ;
   u32 (*map_gen_lookup)(struct bpf_map *, struct bpf_insn *) ;
   u32 (*map_fd_sys_lookup_elem)(void *) ;
   void (*map_seq_show_elem)(struct bpf_map *, void *, struct seq_file *) ;
   int (*map_check_btf)(struct bpf_map *, struct btf *, struct btf_type *, struct btf_type *) ;
   int (*map_poke_track)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_untrack)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_run)(struct bpf_map *, u32 , struct bpf_prog *, struct bpf_prog *) ;
   int (*map_direct_value_addr)(struct bpf_map *, u64 *, u32 ) ;
   int (*map_direct_value_meta)(struct bpf_map *, u64 , u32 *) ;
   int (*map_mmap)(struct bpf_map *, struct vm_area_struct *) ;
};
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_memory {
   u32 pages ;
   struct user_struct *user ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map {
   struct bpf_map_ops *ops ;
   struct bpf_map *inner_map_meta ;
   void *security ;
   enum bpf_map_type map_type ;
   u32 key_size ;
   u32 value_size ;
   u32 max_entries ;
   u32 map_flags ;
   int spin_lock_off ;
   u32 id ;
   int numa_node ;
   u32 btf_key_type_id ;
   u32 btf_value_type_id ;
   struct btf *btf ;
   struct bpf_map_memory memory ;
   char name[16U] ;
   bool unpriv_array ;
   bool frozen ;
   atomic64_t refcnt ;
   atomic64_t usercnt ;
   struct work_struct work ;
   struct mutex freeze_mutex ;
   u64 writecnt ;
};
#line 151 
struct bpf_offload_dev;
#line 152 
struct bpf_offloaded_map;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_dev_ops {
   int (*map_get_next_key)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_lookup_elem)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_update_elem)(struct bpf_offloaded_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_offloaded_map *, void *) ;
};
#line 166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_offloaded_map {
   struct bpf_map map ;
   struct net_device *netdev ;
   struct bpf_map_dev_ops *dev_ops ;
   void *dev_priv ;
   struct list_head offloads ;
};
#line 327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_ops {
   int (*test_run)(struct bpf_prog *, union bpf_attr *, union bpf_attr *) ;
};
#line 369  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_offload {
   struct bpf_prog *prog ;
   struct net_device *netdev ;
   struct bpf_offload_dev *offdev ;
   void *dev_priv ;
   struct list_head offloads ;
   bool dev_state ;
   bool opt_failed ;
   void *jited_image ;
   u32 jited_len ;
};
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_stats {
   u64 cnt ;
   u64 nsecs ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct btf_func_model {
   u8 ret_size ;
   u8 nr_args ;
   u8 arg_size[12U] ;
};
#line 447 
enum bpf_tramp_prog_type {
    BPF_TRAMP_FENTRY = 0,
    BPF_TRAMP_FEXIT = 1,
    BPF_TRAMP_MAX = 2
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_func_640 {
   struct btf_func_model model ;
   void *addr ;
   bool ftrace_managed ;
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_trampoline {
   struct hlist_node hlist ;
   struct mutex mutex ;
   refcount_t refcnt ;
   u64 key ;
   struct __anonstruct_func_640 func ;
   struct hlist_head progs_hlist[2U] ;
   int progs_cnt[2U] ;
   void *image ;
   u64 selector ;
};
#line 495  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_func_info_aux {
   bool unreliable ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_tail_call_642 {
   struct bpf_map *map ;
   u32 key ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_641 {
   struct __anonstruct_tail_call_642 tail_call ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_jit_poke_descriptor {
   void *ip ;
   union __anonunion_641 __anonCompField_bpf_jit_poke_descriptor_147 ;
   bool ip_stable ;
   u8 adj_off ;
   u16 reason ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_643 {
   struct work_struct work ;
   struct callback_head rcu ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_aux {
   atomic64_t refcnt ;
   u32 used_map_cnt ;
   u32 max_ctx_offset ;
   u32 max_pkt_offset ;
   u32 max_tp_access ;
   u32 stack_depth ;
   u32 id ;
   u32 func_cnt ;
   u32 func_idx ;
   u32 attach_btf_id ;
   struct bpf_prog *linked_prog ;
   bool verifier_zext ;
   bool offload_requested ;
   bool attach_btf_trace ;
   bool func_proto_unreliable ;
   enum bpf_tramp_prog_type trampoline_prog_type ;
   struct bpf_trampoline *trampoline ;
   struct hlist_node tramp_hlist ;
   struct btf_type *attach_func_proto ;
   char *attach_func_name ;
   struct bpf_prog **func ;
   void *jit_data ;
   struct bpf_jit_poke_descriptor *poke_tab ;
   u32 size_poke_tab ;
   struct latch_tree_node ksym_tnode ;
   struct list_head ksym_lnode ;
   struct bpf_prog_ops *ops ;
   struct bpf_map **used_maps ;
   struct bpf_prog *prog ;
   struct user_struct *user ;
   u64 load_time ;
   struct bpf_map *cgroup_storage[2U] ;
   char name[16U] ;
   void *security ;
   struct bpf_prog_offload *offload ;
   struct btf *btf ;
   struct bpf_func_info *func_info ;
   struct bpf_func_info_aux *func_info_aux ;
   struct bpf_line_info *linfo ;
   void **jited_linfo ;
   u32 func_info_cnt ;
   u32 nr_linfo ;
   u32 linfo_idx ;
   u32 num_exentries ;
   struct exception_table_entry *extable ;
   struct bpf_prog_stats *stats ;
   union __anonunion_643 __anonCompField_bpf_prog_aux_148 ;
};
#line 686 
struct bpf_cgroup_storage;
#line 686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array_item {
   struct bpf_prog *prog ;
   struct bpf_cgroup_storage *cgroup_storage[2U] ;
};
#line 691  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array {
   struct callback_head rcu ;
   struct bpf_prog_array_item items[0U] ;
};
#line 1335 
struct cgroup;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage_map;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_storage_buffer {
   struct callback_head rcu ;
   char data[0U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
union __anonunion_645 {
   struct bpf_storage_buffer *buf ;
   void *percpu_buf ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage {
   union __anonunion_645 __anonCompField_bpf_cgroup_storage_150 ;
   struct bpf_cgroup_storage_map *map ;
   struct bpf_cgroup_storage_key key ;
   struct list_head list ;
   struct rb_node node ;
   struct callback_head rcu ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct cgroup_bpf {
   struct bpf_prog_array *effective[26U] ;
   struct list_head progs[26U] ;
   u32 flags[26U] ;
   struct bpf_prog_array *inactive ;
   struct percpu_ref refcnt ;
   struct work_struct release_work ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work;
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_worker {
   unsigned int flags ;
   raw_spinlock_t lock ;
   struct list_head work_list ;
   struct list_head delayed_work_list ;
   struct task_struct *task ;
   struct kthread_work *current_work ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work {
   struct list_head node ;
   void (*func)(struct kthread_work *) ;
   struct kthread_worker *worker ;
   int canceling ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_delayed_work {
   struct kthread_work work ;
   struct timer_list timer ;
};
#line 199 
struct cgroup_subsys_state;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group_cpu {
   seqcount_t seq ;
   unsigned int tasks[3U] ;
   u32 state_mask ;
   u32 times[6U] ;
   u64 state_start ;
   u32 times_prev[2U][6U] ;
};
#line 96 
struct psi_group;
#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group {
   struct mutex avgs_lock ;
   struct psi_group_cpu *pcpu ;
   u64 avg_total[5U] ;
   u64 avg_last_update ;
   u64 avg_next_update ;
   struct delayed_work avgs_work ;
   u64 total[2U][5U] ;
   unsigned long avg[5U][3U] ;
   atomic_t poll_scheduled ;
   struct kthread_worker *poll_kworker ;
   struct kthread_delayed_work poll_work ;
   struct mutex trigger_lock ;
   struct list_head triggers ;
   u32 nr_triggers[5U] ;
   u32 poll_states ;
   u64 poll_min_period ;
   u64 polling_total[5U] ;
   u64 polling_next_update ;
   u64 polling_until ;
};
#line 166 
struct cgroup_root;
#line 167 
struct cgroup_subsys;
#line 168 
struct cgroup_taskset;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_file {
   struct kernfs_node *kn ;
   unsigned long notified_at ;
   struct timer_list notify_timer ;
};
#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys_state {
   struct cgroup *cgroup ;
   struct cgroup_subsys *ss ;
   struct percpu_ref refcnt ;
   struct list_head sibling ;
   struct list_head children ;
   struct list_head rstat_css_node ;
   int id ;
   unsigned int flags ;
   u64 serial_nr ;
   atomic_t online_cnt ;
   struct work_struct destroy_work ;
   struct rcu_work destroy_rwork ;
   struct cgroup_subsys_state *parent ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct css_set {
   struct cgroup_subsys_state *subsys[14U] ;
   refcount_t refcount ;
   struct css_set *dom_cset ;
   struct cgroup *dfl_cgrp ;
   int nr_tasks ;
   struct list_head tasks ;
   struct list_head mg_tasks ;
   struct list_head dying_tasks ;
   struct list_head task_iters ;
   struct list_head e_cset_node[14U] ;
   struct list_head threaded_csets ;
   struct list_head threaded_csets_node ;
   struct hlist_node hlist ;
   struct list_head cgrp_links ;
   struct list_head mg_preload_node ;
   struct list_head mg_node ;
   struct cgroup *mg_src_cgrp ;
   struct cgroup *mg_dst_cgrp ;
   struct css_set *mg_dst_cset ;
   bool dead ;
   struct callback_head callback_head ;
};
#line 279  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_base_stat {
   struct task_cputime cputime ;
};
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_rstat_cpu {
   struct u64_stats_sync bsync ;
   struct cgroup_base_stat bstat ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup *updated_children ;
   struct cgroup *updated_next ;
};
#line 332  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_freezer_state {
   bool freeze ;
   int e_freeze ;
   int nr_frozen_descendants ;
   int nr_frozen_tasks ;
};
#line 351  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup {
   struct cgroup_subsys_state self ;
   unsigned long flags ;
   int level ;
   int max_depth ;
   int nr_descendants ;
   int nr_dying_descendants ;
   int max_descendants ;
   int nr_populated_csets ;
   int nr_populated_domain_children ;
   int nr_populated_threaded_children ;
   int nr_threaded_children ;
   struct kernfs_node *kn ;
   struct cgroup_file procs_file ;
   struct cgroup_file events_file ;
   u16 subtree_control ;
   u16 subtree_ss_mask ;
   u16 old_subtree_control ;
   u16 old_subtree_ss_mask ;
   struct cgroup_subsys_state *subsys[14U] ;
   struct cgroup_root *root ;
   struct list_head cset_links ;
   struct list_head e_csets[14U] ;
   struct cgroup *dom_cgrp ;
   struct cgroup *old_dom_cgrp ;
   struct cgroup_rstat_cpu *rstat_cpu ;
   struct list_head rstat_css_list ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup_base_stat bstat ;
   struct prev_cputime prev_cputime ;
   struct list_head pidlists ;
   struct mutex pidlist_mutex ;
   wait_queue_head_t offline_waitq ;
   struct work_struct release_agent_work ;
   struct psi_group psi ;
   struct cgroup_bpf bpf ;
   atomic_t congestion_count ;
   struct cgroup_freezer_state freezer ;
   u64 ancestor_ids[] ;
};
#line 489  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_root {
   struct kernfs_root *kf_root ;
   unsigned int subsys_mask ;
   int hierarchy_id ;
   struct cgroup cgrp ;
   u64 cgrp_ancestor_id_storage ;
   atomic_t nr_cgrps ;
   struct list_head root_list ;
   unsigned int flags ;
   char release_agent_path[4096U] ;
   char name[64U] ;
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cftype {
   char name[64U] ;
   unsigned long private ;
   size_t max_write_len ;
   unsigned int flags ;
   unsigned int file_offset ;
   struct cgroup_subsys *ss ;
   struct list_head node ;
   struct kernfs_ops *kf_ops ;
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   u64 (*read_u64)(struct cgroup_subsys_state *, struct cftype *) ;
   s64 (*read_s64)(struct cgroup_subsys_state *, struct cftype *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   int (*write_u64)(struct cgroup_subsys_state *, struct cftype *, u64 ) ;
   int (*write_s64)(struct cgroup_subsys_state *, struct cftype *, s64 ) ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 616  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys {
   struct cgroup_subsys_state *(*css_alloc)(struct cgroup_subsys_state *) ;
   int (*css_online)(struct cgroup_subsys_state *) ;
   void (*css_offline)(struct cgroup_subsys_state *) ;
   void (*css_released)(struct cgroup_subsys_state *) ;
   void (*css_free)(struct cgroup_subsys_state *) ;
   void (*css_reset)(struct cgroup_subsys_state *) ;
   void (*css_rstat_flush)(struct cgroup_subsys_state *, int ) ;
   int (*css_extra_stat_show)(struct seq_file *, struct cgroup_subsys_state *) ;
   int (*can_attach)(struct cgroup_taskset *) ;
   void (*cancel_attach)(struct cgroup_taskset *) ;
   void (*attach)(struct cgroup_taskset *) ;
   void (*post_attach)(void) ;
   int (*can_fork)(struct task_struct *) ;
   void (*cancel_fork)(struct task_struct *) ;
   void (*fork)(struct task_struct *) ;
   void (*exit)(struct task_struct *) ;
   void (*release)(struct task_struct *) ;
   void (*bind)(struct cgroup_subsys_state *) ;
   bool early_init : 1 ;
   bool implicit_on_dfl : 1 ;
   bool threaded : 1 ;
   bool broken_hierarchy : 1 ;
   bool warned_broken_hierarchy : 1 ;
   int id ;
   char *name ;
   char *legacy_name ;
   struct cgroup_root *root ;
   struct idr css_idr ;
   struct list_head cfts ;
   struct cftype *dfl_cftypes ;
   struct cftype *legacy_cftypes ;
   unsigned int depends_on ;
};
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct __anonstruct_647 {
   u8 is_data ;
   u8 padding ;
   u16 prioidx ;
   u32 classid ;
} __attribute__((__packed__));
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
union __anonunion_646 {
   struct __anonstruct_647 __anonCompField___anonunion_646_151 ;
   u64 val ;
};
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct sock_cgroup_data {
   union __anonunion_646 __anonCompField_sock_cgroup_data_152 ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup.h"
struct cgroup_namespace {
   refcount_t count ;
   struct ns_common ns ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct css_set *root_cset ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netprio_cgroup.h"
struct netprio_map {
   struct callback_head rcu ;
   u32 priomap_len ;
   u32 priomap[] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_mem_info {
   u32 type ;
   u32 id ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_rxq_info {
   struct net_device *dev ;
   u32 queue_index ;
   u32 reg_state ;
   struct xdp_mem_info mem ;
} __attribute__((__aligned__(64)));
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_frame {
   void *data ;
   u16 len ;
   u16 headroom ;
   u16 metasize ;
   struct xdp_mem_info mem ;
   struct net_device *dev_rx ;
};
#line 175 
struct netdev_bpf;
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/security.h"
struct xfrm_policy;
#line 161 
struct xfrm_state;
#line 178 
struct request_sock;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct sighand_struct {
   spinlock_t siglock ;
   refcount_t count ;
   wait_queue_head_t signalfd_wqh ;
   struct k_sigaction action[64U] ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   u64 ac_utime ;
   u64 ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct cpu_itimer {
   u64 expires ;
   u64 incr ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct task_cputime_atomic {
   atomic64_t utime ;
   atomic64_t stime ;
   atomic64_t sum_exec_runtime ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct thread_group_cputimer {
   struct task_cputime_atomic cputime_atomic ;
};
#line 80 
struct tty_struct;
#line 80 
struct autogroup;
#line 80 
struct tty_audit_buf;
#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct signal_struct {
   refcount_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   struct list_head thread_head ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   struct hlist_head multiprocess ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   unsigned int is_child_subreaper : 1 ;
   unsigned int has_child_subreaper : 1 ;
   int posix_timer_id ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct posix_cputimers posix_cputimers ;
   struct pid *pids[4U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   struct autogroup *autogroup ;
   seqlock_t stats_lock ;
   u64 utime ;
   u64 stime ;
   u64 cutime ;
   u64 cstime ;
   u64 gtime ;
   u64 cgtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
   bool oom_flag_origin ;
   short oom_score_adj ;
   short oom_score_adj_min ;
   struct mm_struct *oom_mm ;
   struct mutex cred_guard_mutex ;
} __attribute__((__designated_init__));
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlmsghdr {
   __u32 nlmsg_len ;
   __u16 nlmsg_type ;
   __u16 nlmsg_flags ;
   __u32 nlmsg_seq ;
   __u32 nlmsg_pid ;
};
#line 211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_ext_ack {
   char *_msg ;
   struct nlattr *bad_attr ;
   u8 cookie[20U] ;
   u8 cookie_len ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
union __anonunion_670 {
   u8 ctx[48U] ;
   long args[6U] ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_callback {
   struct sk_buff *skb ;
   struct nlmsghdr *nlh ;
   int (*dump)(struct sk_buff *, struct netlink_callback *) ;
   int (*done)(struct netlink_callback *) ;
   void *data ;
   struct module *module ;
   struct netlink_ext_ack *extack ;
   u16 family ;
   u16 min_dump_alloc ;
   bool strict_check ;
   u16 answer_flags ;
   unsigned int prev_seq ;
   unsigned int seq ;
   union __anonunion_670 __anonCompField_netlink_callback_153 ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/neighbour.h"
struct ndmsg {
   __u8 ndm_family ;
   __u8 ndm_pad1 ;
   __u16 ndm_pad2 ;
   __s32 ndm_ifindex ;
   __u16 ndm_state ;
   __u8 ndm_flags ;
   __u8 ndm_type ;
};
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct rtnl_link_stats64 {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 rx_errors ;
   __u64 tx_errors ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
   __u64 multicast ;
   __u64 collisions ;
   __u64 rx_length_errors ;
   __u64 rx_over_errors ;
   __u64 rx_crc_errors ;
   __u64 rx_frame_errors ;
   __u64 rx_fifo_errors ;
   __u64 rx_missed_errors ;
   __u64 tx_aborted_errors ;
   __u64 tx_carrier_errors ;
   __u64 tx_fifo_errors ;
   __u64 tx_heartbeat_errors ;
   __u64 tx_window_errors ;
   __u64 rx_compressed ;
   __u64 tx_compressed ;
   __u64 rx_nohandler ;
};
#line 753  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct ifla_vf_guid {
   __u32 vf ;
   __u64 guid ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_stats {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 broadcast ;
   __u64 multicast ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_info {
   __u32 vf ;
   __u8 mac[32U] ;
   __u32 vlan ;
   __u32 qos ;
   __u32 spoofchk ;
   __u32 linkstate ;
   __u32 min_tx_rate ;
   __u32 max_tx_rate ;
   __u32 rss_query_en ;
   __u32 trusted ;
   __be16 vlan_proto ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/pkt_sched.h"
struct tc_stats {
   __u64 bytes ;
   __u32 packets ;
   __u32 drops ;
   __u32 overlimits ;
   __u32 bps ;
   __u32 pps ;
   __u32 qlen ;
   __u32 backlog ;
};
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/pkt_sched.h"
struct tc_sizespec {
   unsigned char cell_log ;
   unsigned char size_log ;
   short cell_align ;
   int overhead ;
   unsigned int linklayer ;
   unsigned int mpu ;
   unsigned int mtu ;
   unsigned int tsize ;
};
#line 702  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/pkt_sched.h"
struct tc_mqprio_qopt {
   __u8 num_tc ;
   __u8 prio_tc_map[16U] ;
   __u8 hw ;
   __u16 count[16U] ;
   __u16 offset[16U] ;
};
#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hashtable.h"
struct netpoll_info;
#line 120 
struct dsa_port;
#line 121 
struct sfp_bus;
#line 122 
struct wireless_dev;
#line 123 
struct wpan_dev;
#line 124 
struct mpls_dev;
#line 125 
struct udp_tunnel_info;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
enum netdev_tx {
    __NETDEV_TX_MIN = -2147483648,
    NETDEV_TX_OK = 0,
    NETDEV_TX_BUSY = 16
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum netdev_tx netdev_tx_t;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};
#line 195 
struct neigh_parms;
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_hw_addr {
   struct list_head list ;
   unsigned char addr[32U] ;
   unsigned char type ;
   bool global_use ;
   int sync_cnt ;
   int refcount ;
   int synced ;
   struct callback_head callback_head ;
};
#line 217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_hw_addr_list {
   struct list_head list ;
   int count ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct hh_cache {
   unsigned int hh_len ;
   seqlock_t hh_lock ;
   unsigned long hh_data[16U] ;
};
#line 263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct header_ops {
   int (*create)(struct sk_buff *, struct net_device *, unsigned short , void *, void *, unsigned int ) ;
   int (*parse)(struct sk_buff *, unsigned char *) ;
   int (*cache)(struct neighbour *, struct hh_cache *, __be16 ) ;
   void (*cache_update)(struct hh_cache *, struct net_device *, unsigned char *) ;
   bool (*validate)(char *, unsigned int ) ;
   __be16 (*parse_protocol)(struct sk_buff *) ;
};
#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct gro_list {
   struct list_head list ;
   int count ;
};
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct napi_struct {
   struct list_head poll_list ;
   unsigned long state ;
   int weight ;
   unsigned long gro_bitmask ;
   int (*poll)(struct napi_struct *, int ) ;
   int poll_owner ;
   struct net_device *dev ;
   struct gro_list gro_hash[8U] ;
   struct sk_buff *skb ;
   struct list_head rx_list ;
   int rx_count ;
   struct hrtimer timer ;
   struct list_head dev_list ;
   struct hlist_node napi_hash_node ;
   unsigned int napi_id ;
};
#line 362 
enum gro_result {
    GRO_MERGED = 0,
    GRO_MERGED_FREE = 1,
    GRO_HELD = 2,
    GRO_NORMAL = 3,
    GRO_DROP = 4,
    GRO_CONSUMED = 5
};
#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum gro_result gro_result_t;
#line 372 
enum rx_handler_result {
    RX_HANDLER_CONSUMED = 0,
    RX_HANDLER_ANOTHER = 1,
    RX_HANDLER_EXACT = 2,
    RX_HANDLER_PASS = 3
};
#line 379  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum rx_handler_result rx_handler_result_t;
#line 421  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef rx_handler_result_t rx_handler_func_t(struct sk_buff **);
#line 589 
struct Qdisc;
#line 589 
struct xdp_umem;
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   struct Qdisc *qdisc_sleeping ;
   struct kobject kobj ;
   int numa_node ;
   unsigned long tx_maxrate ;
   unsigned long trans_timeout ;
   struct net_device *sb_dev ;
   struct xdp_umem *umem ;
   spinlock_t _xmit_lock ;
   int xmit_lock_owner ;
   unsigned long trans_start ;
   unsigned long state ;
   struct dql dql ;
} __attribute__((__aligned__(64)));
#line 662  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_map {
   unsigned int len ;
   struct callback_head rcu ;
   u16 cpus[0U] ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow {
   u16 cpu ;
   u16 filter ;
   unsigned int last_qtail ;
};
#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow_table {
   unsigned int mask ;
   struct callback_head rcu ;
   struct rps_dev_flow flows[0U] ;
};
#line 736  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_rx_queue {
   struct rps_map *rps_map ;
   struct rps_dev_flow_table *rps_flow_table ;
   struct kobject kobj ;
   struct net_device *dev ;
   struct xdp_rxq_info xdp_rxq ;
   struct xdp_umem *umem ;
} __attribute__((__aligned__(64)));
#line 764  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_map {
   unsigned int len ;
   unsigned int alloc_len ;
   struct callback_head rcu ;
   u16 queues[0U] ;
};
#line 777  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_dev_maps {
   struct callback_head rcu ;
   struct xps_map *attr_map[0U] ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_tc_txq {
   u16 count ;
   u16 offset ;
};
#line 803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_fcoe_hbainfo {
   char manufacturer[64U] ;
   char serial_number[64U] ;
   char hardware_version[64U] ;
   char driver_version[64U] ;
   char optionrom_version[64U] ;
   char firmware_version[64U] ;
   char model[256U] ;
   char model_description[256U] ;
};
#line 820  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_phys_item_id {
   unsigned char id[32U] ;
   unsigned char id_len ;
};
#line 833 
enum tc_setup_type {
    TC_SETUP_QDISC_MQPRIO = 0,
    TC_SETUP_CLSU32 = 1,
    TC_SETUP_CLSFLOWER = 2,
    TC_SETUP_CLSMATCHALL = 3,
    TC_SETUP_CLSBPF = 4,
    TC_SETUP_BLOCK = 5,
    TC_SETUP_QDISC_CBS = 6,
    TC_SETUP_QDISC_RED = 7,
    TC_SETUP_QDISC_PRIO = 8,
    TC_SETUP_QDISC_MQ = 9,
    TC_SETUP_QDISC_ETF = 10,
    TC_SETUP_ROOT_QDISC = 11,
    TC_SETUP_QDISC_GRED = 12,
    TC_SETUP_QDISC_TAPRIO = 13,
    TC_SETUP_FT = 14
};
#line 851 
enum bpf_netdev_command {
    XDP_SETUP_PROG = 0,
    XDP_SETUP_PROG_HW = 1,
    XDP_QUERY_PROG = 2,
    XDP_QUERY_PROG_HW = 3,
    BPF_OFFLOAD_MAP_ALLOC = 4,
    BPF_OFFLOAD_MAP_FREE = 5,
    XDP_SETUP_XSK_UMEM = 6
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_675 {
   u32 flags ;
   struct bpf_prog *prog ;
   struct netlink_ext_ack *extack ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_676 {
   u32 prog_id ;
   u32 prog_flags ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_677 {
   struct bpf_offloaded_map *offmap ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_xsk_678 {
   struct xdp_umem *umem ;
   u16 queue_id ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_674 {
   struct __anonstruct_675 __anonCompField___anonunion_674_155 ;
   struct __anonstruct_676 __anonCompField___anonunion_674_156 ;
   struct __anonstruct_677 __anonCompField___anonunion_674_157 ;
   struct __anonstruct_xsk_678 xsk ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_bpf {
   enum bpf_netdev_command command ;
   union __anonunion_674 __anonCompField_netdev_bpf_158 ;
};
#line 911  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xfrmdev_ops {
   int (*xdo_dev_state_add)(struct xfrm_state *) ;
   void (*xdo_dev_state_delete)(struct xfrm_state *) ;
   void (*xdo_dev_state_free)(struct xfrm_state *) ;
   bool (*xdo_dev_offload_ok)(struct sk_buff *, struct xfrm_state *) ;
   void (*xdo_dev_state_advance_esn)(struct xfrm_state *) ;
};
#line 921  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct dev_ifalias {
   struct callback_head rcuhead ;
   char ifalias[] ;
};
#line 926 
struct tlsdev_ops;
#line 929  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_name_node {
   struct hlist_node hlist ;
   struct list_head list ;
   struct net_device *dev ;
   char *name ;
};
#line 1257 
struct devlink_port;
#line 1257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_ops {
   int (*ndo_init)(struct net_device *) ;
   void (*ndo_uninit)(struct net_device *) ;
   int (*ndo_open)(struct net_device *) ;
   int (*ndo_stop)(struct net_device *) ;
   netdev_tx_t (*ndo_start_xmit)(struct sk_buff *, struct net_device *) ;
   netdev_features_t (*ndo_features_check)(struct sk_buff *, struct net_device *, netdev_features_t ) ;
   u16 (*ndo_select_queue)(struct net_device *, struct sk_buff *, struct net_device *) ;
   void (*ndo_change_rx_flags)(struct net_device *, int ) ;
   void (*ndo_set_rx_mode)(struct net_device *) ;
   int (*ndo_set_mac_address)(struct net_device *, void *) ;
   int (*ndo_validate_addr)(struct net_device *) ;
   int (*ndo_do_ioctl)(struct net_device *, struct ifreq *, int ) ;
   int (*ndo_set_config)(struct net_device *, struct ifmap *) ;
   int (*ndo_change_mtu)(struct net_device *, int ) ;
   int (*ndo_neigh_setup)(struct net_device *, struct neigh_parms *) ;
   void (*ndo_tx_timeout)(struct net_device *) ;
   void (*ndo_get_stats64)(struct net_device *, struct rtnl_link_stats64 *) ;
   bool (*ndo_has_offload_stats)(struct net_device *, int ) ;
   int (*ndo_get_offload_stats)(int , struct net_device *, void *) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device *) ;
   int (*ndo_vlan_rx_add_vid)(struct net_device *, __be16 , u16 ) ;
   int (*ndo_vlan_rx_kill_vid)(struct net_device *, __be16 , u16 ) ;
   void (*ndo_poll_controller)(struct net_device *) ;
   int (*ndo_netpoll_setup)(struct net_device *, struct netpoll_info *) ;
   void (*ndo_netpoll_cleanup)(struct net_device *) ;
   int (*ndo_set_vf_mac)(struct net_device *, int , u8 *) ;
   int (*ndo_set_vf_vlan)(struct net_device *, int , u16 , u8 , __be16 ) ;
   int (*ndo_set_vf_rate)(struct net_device *, int , int , int ) ;
   int (*ndo_set_vf_spoofchk)(struct net_device *, int , bool ) ;
   int (*ndo_set_vf_trust)(struct net_device *, int , bool ) ;
   int (*ndo_get_vf_config)(struct net_device *, int , struct ifla_vf_info *) ;
   int (*ndo_set_vf_link_state)(struct net_device *, int , int ) ;
   int (*ndo_get_vf_stats)(struct net_device *, int , struct ifla_vf_stats *) ;
   int (*ndo_set_vf_port)(struct net_device *, int , struct nlattr **) ;
   int (*ndo_get_vf_port)(struct net_device *, int , struct sk_buff *) ;
   int (*ndo_get_vf_guid)(struct net_device *, int , struct ifla_vf_guid *, struct ifla_vf_guid *) ;
   int (*ndo_set_vf_guid)(struct net_device *, int , u64 , int ) ;
   int (*ndo_set_vf_rss_query_en)(struct net_device *, int , bool ) ;
   int (*ndo_setup_tc)(struct net_device *, enum tc_setup_type , void *) ;
   int (*ndo_fcoe_enable)(struct net_device *) ;
   int (*ndo_fcoe_disable)(struct net_device *) ;
   int (*ndo_fcoe_ddp_setup)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_ddp_done)(struct net_device *, u16 ) ;
   int (*ndo_fcoe_ddp_target)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_get_hbainfo)(struct net_device *, struct netdev_fcoe_hbainfo *) ;
   int (*ndo_fcoe_get_wwn)(struct net_device *, u64 *, int ) ;
   int (*ndo_rx_flow_steer)(struct net_device *, struct sk_buff *, u16 , u32 ) ;
   int (*ndo_add_slave)(struct net_device *, struct net_device *, struct netlink_ext_ack *) ;
   int (*ndo_del_slave)(struct net_device *, struct net_device *) ;
   netdev_features_t (*ndo_fix_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_set_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_neigh_construct)(struct net_device *, struct neighbour *) ;
   void (*ndo_neigh_destroy)(struct net_device *, struct neighbour *) ;
   int (*ndo_fdb_add)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 , u16 , struct netlink_ext_ack *) ;
   int (*ndo_fdb_del)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 ) ;
   int (*ndo_fdb_dump)(struct sk_buff *, struct netlink_callback *, struct net_device *, struct net_device *, int *) ;
   int (*ndo_fdb_get)(struct sk_buff *, struct nlattr **, struct net_device *, unsigned char *, u16 , u32 , u32 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_setlink)(struct net_device *, struct nlmsghdr *, u16 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_getlink)(struct sk_buff *, u32 , u32 , struct net_device *, u32 , int ) ;
   int (*ndo_bridge_dellink)(struct net_device *, struct nlmsghdr *, u16 ) ;
   int (*ndo_change_carrier)(struct net_device *, bool ) ;
   int (*ndo_get_phys_port_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_port_parent_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_phys_port_name)(struct net_device *, char *, size_t ) ;
   void (*ndo_udp_tunnel_add)(struct net_device *, struct udp_tunnel_info *) ;
   void (*ndo_udp_tunnel_del)(struct net_device *, struct udp_tunnel_info *) ;
   void *(*ndo_dfwd_add_station)(struct net_device *, struct net_device *) ;
   void (*ndo_dfwd_del_station)(struct net_device *, void *) ;
   int (*ndo_set_tx_maxrate)(struct net_device *, int , u32 ) ;
   int (*ndo_get_iflink)(struct net_device *) ;
   int (*ndo_change_proto_down)(struct net_device *, bool ) ;
   int (*ndo_fill_metadata_dst)(struct net_device *, struct sk_buff *) ;
   void (*ndo_set_rx_headroom)(struct net_device *, int ) ;
   int (*ndo_bpf)(struct net_device *, struct netdev_bpf *) ;
   int (*ndo_xdp_xmit)(struct net_device *, int , struct xdp_frame **, u32 ) ;
   int (*ndo_xsk_wakeup)(struct net_device *, u32 , u32 ) ;
   struct devlink_port *(*ndo_get_devlink_port)(struct net_device *) ;
};
#line 1492 
enum ldv_14506 {
    NETREG_UNINITIALIZED = 0,
    NETREG_REGISTERED = 1,
    NETREG_UNREGISTERING = 2,
    NETREG_UNREGISTERED = 3,
    NETREG_RELEASED = 4,
    NETREG_DUMMY = 5
};
#line 1501 
enum ldv_14507 {
    RTNL_LINK_INITIALIZED = 0,
    RTNL_LINK_INITIALIZING = 1
};
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_adj_list_679 {
   struct list_head upper ;
   struct list_head lower ;
};
#line 1795 
struct iw_handler_def;
#line 1795 
struct iw_public_data;
#line 1795 
struct l3mdev_ops;
#line 1795 
struct ndisc_ops;
#line 1795 
struct vlan_info;
#line 1795 
struct tipc_bearer;
#line 1795 
struct in_device;
#line 1795 
struct dn_dev;
#line 1795 
struct inet6_dev;
#line 1795 
struct mini_Qdisc;
#line 1795 
struct cpu_rmap;
#line 1795 
struct pcpu_lstats;
#line 1795 
struct pcpu_sw_netstats;
#line 1795 
struct pcpu_dstats;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_680 {
   void *ml_priv ;
   struct pcpu_lstats *lstats ;
   struct pcpu_sw_netstats *tstats ;
   struct pcpu_dstats *dstats ;
};
#line 1795 
struct garp_port;
#line 1795 
struct mrp_port;
#line 1795 
struct rtnl_link_ops;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device {
   char name[16U] ;
   struct netdev_name_node *name_node ;
   struct dev_ifalias *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   int irq ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   struct list_head unreg_list ;
   struct list_head close_list ;
   struct list_head ptype_all ;
   struct list_head ptype_specific ;
   struct __anonstruct_adj_list_679 adj_list ;
   netdev_features_t features ;
   netdev_features_t hw_features ;
   netdev_features_t wanted_features ;
   netdev_features_t vlan_features ;
   netdev_features_t hw_enc_features ;
   netdev_features_t mpls_features ;
   netdev_features_t gso_partial_features ;
   int ifindex ;
   int group ;
   struct net_device_stats stats ;
   atomic_long_t rx_dropped ;
   atomic_long_t tx_dropped ;
   atomic_long_t rx_nohandler ;
   atomic_t carrier_up_count ;
   atomic_t carrier_down_count ;
   struct iw_handler_def *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops *netdev_ops ;
   struct ethtool_ops *ethtool_ops ;
   struct l3mdev_ops *l3mdev_ops ;
   struct ndisc_ops *ndisc_ops ;
   struct xfrmdev_ops *xfrmdev_ops ;
   struct tlsdev_ops *tlsdev_ops ;
   struct header_ops *header_ops ;
   unsigned int flags ;
   unsigned int priv_flags ;
   unsigned short gflags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned int mtu ;
   unsigned int min_mtu ;
   unsigned int max_mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned char min_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   unsigned char perm_addr[32U] ;
   unsigned char addr_assign_type ;
   unsigned char addr_len ;
   unsigned char upper_level ;
   unsigned char lower_level ;
   unsigned short neigh_priv_len ;
   unsigned short dev_id ;
   unsigned short dev_port ;
   spinlock_t addr_list_lock ;
   unsigned char name_assign_type ;
   bool uc_promisc ;
   struct netdev_hw_addr_list uc ;
   struct netdev_hw_addr_list mc ;
   struct netdev_hw_addr_list dev_addrs ;
   struct kset *queues_kset ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   struct vlan_info *vlan_info ;
   struct dsa_port *dsa_ptr ;
   struct tipc_bearer *tipc_ptr ;
   void *atalk_ptr ;
   struct in_device *ip_ptr ;
   struct dn_dev *dn_ptr ;
   struct inet6_dev *ip6_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   struct wpan_dev *ieee802154_ptr ;
   struct mpls_dev *mpls_ptr ;
   unsigned char *dev_addr ;
   struct netdev_rx_queue *_rx ;
   unsigned int num_rx_queues ;
   unsigned int real_num_rx_queues ;
   struct bpf_prog *xdp_prog ;
   unsigned long gro_flush_timeout ;
   rx_handler_func_t *rx_handler ;
   void *rx_handler_data ;
   struct mini_Qdisc *miniq_ingress ;
   struct netdev_queue *ingress_queue ;
   struct nf_hook_entries *nf_hooks_ingress ;
   unsigned char broadcast[32U] ;
   struct cpu_rmap *rx_cpu_rmap ;
   struct hlist_node index_hlist ;
   struct netdev_queue *_tx ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   struct Qdisc *qdisc ;
   struct hlist_head qdisc_hash[16U] ;
   unsigned int tx_queue_len ;
   spinlock_t tx_global_lock ;
   int watchdog_timeo ;
   struct xps_dev_maps *xps_cpus_map ;
   struct xps_dev_maps *xps_rxqs_map ;
   struct mini_Qdisc *miniq_egress ;
   struct timer_list watchdog_timer ;
   int *pcpu_refcnt ;
   struct list_head todo_list ;
   struct list_head link_watch_list ;
   enum ldv_14506 reg_state : 8 ;
   bool dismantle ;
   enum ldv_14507 rtnl_link_state : 16 ;
   bool needs_free_netdev ;
   void (*priv_destructor)(struct net_device *) ;
   struct netpoll_info *npinfo ;
   possible_net_t nd_net ;
   union __anonunion_680 __anonCompField_net_device_159 ;
   struct garp_port *garp_port ;
   struct mrp_port *mrp_port ;
   struct device dev ;
   struct attribute_group *sysfs_groups[4U] ;
   struct attribute_group *sysfs_rx_queue_group ;
   struct rtnl_link_ops *rtnl_link_ops ;
   unsigned int gso_max_size ;
   u16 gso_max_segs ;
   struct dcbnl_rtnl_ops *dcbnl_ops ;
   s16 num_tc ;
   struct netdev_tc_txq tc_to_txq[16U] ;
   u8 prio_tc_map[16U] ;
   unsigned int fcoe_ddp_xid ;
   struct netprio_map *priomap ;
   struct phy_device *phydev ;
   struct sfp_bus *sfp_bus ;
   struct lock_class_key qdisc_tx_busylock_key ;
   struct lock_class_key qdisc_running_key ;
   struct lock_class_key qdisc_xmit_lock_key ;
   struct lock_class_key addr_list_lock_key ;
   bool proto_down ;
   unsigned int wol_enabled : 1 ;
};
#line 2265  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct napi_gro_cb {
   void *frag0 ;
   unsigned int frag0_len ;
   int data_offset ;
   u16 flush ;
   u16 flush_id ;
   u16 count ;
   u16 gro_remcsum_start ;
   unsigned long age ;
   u16 proto ;
   u8 same_flow : 1 ;
   u8 encap_mark : 1 ;
   u8 csum_valid : 1 ;
   u8 csum_cnt : 3 ;
   u8 free : 2 ;
   u8 is_ipv6 : 1 ;
   u8 is_fou : 1 ;
   u8 is_atomic : 1 ;
   u8 recursion_counter : 4 ;
   __wsum csum ;
   struct sk_buff *last ;
};
#line 2400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_sw_netstats {
   u64 rx_packets ;
   u64 rx_bytes ;
   u64 tx_packets ;
   u64 tx_bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(32)));
#line 2408  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_lstats {
   u64_stats_t packets ;
   u64_stats_t bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 3610 
enum skb_free_reason {
    SKB_REASON_CONSUMED = 0,
    SKB_REASON_DROPPED = 1
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpu_rmap.h"
struct __anonstruct_near_691 {
   u16 index ;
   u16 dist ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpu_rmap.h"
struct cpu_rmap {
   struct kref refcount ;
   u16 size ;
   u16 used ;
   void **obj ;
   struct __anonstruct_near_691 near[0U] ;
};
#line 567  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rtnetlink.h"
struct tcmsg {
   unsigned char tcm_family ;
   unsigned char tcm__pad1 ;
   unsigned short tcm__pad2 ;
   int tcm_ifindex ;
   __u32 tcm_handle ;
   __u32 tcm_parent ;
   __u32 tcm_info ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
struct vlan_hdr {
   __be16 h_vlan_TCI ;
   __be16 h_vlan_encapsulated_proto ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
struct vlan_ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_vlan_proto ;
   __be16 h_vlan_TCI ;
   __be16 h_vlan_encapsulated_proto ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ip.h"
struct iphdr {
   __u8 ihl : 4 ;
   __u8 version : 4 ;
   __u8 tos ;
   __be16 tot_len ;
   __be16 id ;
   __be16 frag_off ;
   __u8 ttl ;
   __u8 protocol ;
   __sum16 check ;
   __be32 saddr ;
   __be32 daddr ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ipv6.h"
struct ipv6hdr {
   __u8 priority : 4 ;
   __u8 version : 4 ;
   __u8 flow_lbl[3U] ;
   __be16 payload_len ;
   __u8 nexthdr ;
   __u8 hop_limit ;
   struct in6_addr saddr ;
   struct in6_addr daddr ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
struct ipv6_stable_secret {
   bool initialized ;
   struct in6_addr secret ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
struct ipv6_devconf {
   __s32 forwarding ;
   __s32 hop_limit ;
   __s32 mtu6 ;
   __s32 accept_ra ;
   __s32 accept_redirects ;
   __s32 autoconf ;
   __s32 dad_transmits ;
   __s32 rtr_solicits ;
   __s32 rtr_solicit_interval ;
   __s32 rtr_solicit_max_interval ;
   __s32 rtr_solicit_delay ;
   __s32 force_mld_version ;
   __s32 mldv1_unsolicited_report_interval ;
   __s32 mldv2_unsolicited_report_interval ;
   __s32 use_tempaddr ;
   __s32 temp_valid_lft ;
   __s32 temp_prefered_lft ;
   __s32 regen_max_retry ;
   __s32 max_desync_factor ;
   __s32 max_addresses ;
   __s32 accept_ra_defrtr ;
   __s32 accept_ra_min_hop_limit ;
   __s32 accept_ra_pinfo ;
   __s32 ignore_routes_with_linkdown ;
   __s32 accept_ra_rtr_pref ;
   __s32 rtr_probe_interval ;
   __s32 accept_ra_rt_info_min_plen ;
   __s32 accept_ra_rt_info_max_plen ;
   __s32 proxy_ndp ;
   __s32 accept_source_route ;
   __s32 accept_ra_from_local ;
   __s32 optimistic_dad ;
   __s32 use_optimistic ;
   __s32 mc_forwarding ;
   __s32 disable_ipv6 ;
   __s32 drop_unicast_in_l2_multicast ;
   __s32 accept_dad ;
   __s32 force_tllao ;
   __s32 ndisc_notify ;
   __s32 suppress_frag_ndisc ;
   __s32 accept_ra_mtu ;
   __s32 drop_unsolicited_na ;
   struct ipv6_stable_secret stable_secret ;
   __s32 use_oif_addrs_only ;
   __s32 keep_addr_on_down ;
   __s32 seg6_enabled ;
   __s32 seg6_require_hmac ;
   __u32 enhanced_dad ;
   __u32 addr_gen_mode ;
   __s32 disable_policy ;
   __s32 ndisc_tclass ;
   struct ctl_table_header *sysctl_header ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_counter.h"
struct page_counter {
   atomic_long_t usage ;
   unsigned long min ;
   unsigned long low ;
   unsigned long max ;
   struct page_counter *parent ;
   unsigned long emin ;
   atomic_long_t min_usage ;
   atomic_long_t children_min_usage ;
   unsigned long elow ;
   atomic_long_t low_usage ;
   atomic_long_t children_low_usage ;
   unsigned long watermark ;
   unsigned long failcnt ;
};
#line 66 
struct eventfd_ctx;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmpressure.h"
struct vmpressure {
   unsigned long scanned ;
   unsigned long reclaimed ;
   unsigned long tree_scanned ;
   unsigned long tree_reclaimed ;
   spinlock_t sr_lock ;
   struct list_head events ;
   struct mutex events_lock ;
   struct work_struct work ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
struct fprop_global {
   struct percpu_counter events ;
   unsigned int period ;
   seqcount_t sequence ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
struct fprop_local_percpu {
   struct percpu_counter events ;
   unsigned int period ;
   raw_spinlock_t lock ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
typedef int congested_fn(void *, int );
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
enum wb_reason {
    WB_REASON_BACKGROUND = 0,
    WB_REASON_VMSCAN = 1,
    WB_REASON_SYNC = 2,
    WB_REASON_PERIODIC = 3,
    WB_REASON_LAPTOP_TIMER = 4,
    WB_REASON_FREE_MORE_MEM = 5,
    WB_REASON_FS_FREE_SPACE = 6,
    WB_REASON_FORKER_THREAD = 7,
    WB_REASON_FOREIGN_FLUSH = 8,
    WB_REASON_MAX = 9
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct wb_completion {
   atomic_t cnt ;
   wait_queue_head_t *waitq ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct bdi_writeback_congested {
   unsigned long state ;
   refcount_t refcnt ;
   struct backing_dev_info *__bdi ;
   int blkcg_id ;
   struct rb_node rb_node ;
};
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
union __anonunion_698 {
   struct work_struct release_work ;
   struct callback_head rcu ;
};
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct bdi_writeback {
   struct backing_dev_info *bdi ;
   unsigned long state ;
   unsigned long last_old_flush ;
   struct list_head b_dirty ;
   struct list_head b_io ;
   struct list_head b_more_io ;
   struct list_head b_dirty_time ;
   spinlock_t list_lock ;
   struct percpu_counter stat[4U] ;
   struct bdi_writeback_congested *congested ;
   unsigned long bw_time_stamp ;
   unsigned long dirtied_stamp ;
   unsigned long written_stamp ;
   unsigned long write_bandwidth ;
   unsigned long avg_write_bandwidth ;
   unsigned long dirty_ratelimit ;
   unsigned long balanced_dirty_ratelimit ;
   struct fprop_local_percpu completions ;
   int dirty_exceeded ;
   enum wb_reason start_all_reason ;
   spinlock_t work_lock ;
   struct list_head work_list ;
   struct delayed_work dwork ;
   unsigned long dirty_sleep ;
   struct list_head bdi_node ;
   struct percpu_ref refcnt ;
   struct fprop_local_percpu memcg_completions ;
   struct cgroup_subsys_state *memcg_css ;
   struct cgroup_subsys_state *blkcg_css ;
   struct list_head memcg_node ;
   struct list_head blkcg_node ;
   union __anonunion_698 __anonCompField_bdi_writeback_160 ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct backing_dev_info {
   u64 id ;
   struct rb_node rb_node ;
   struct list_head bdi_list ;
   unsigned long ra_pages ;
   unsigned long io_pages ;
   congested_fn *congested_fn ;
   void *congested_data ;
   char *name ;
   struct kref refcnt ;
   unsigned int capabilities ;
   unsigned int min_ratio ;
   unsigned int max_ratio ;
   unsigned int max_prop_frac ;
   atomic_long_t tot_write_bandwidth ;
   struct bdi_writeback wb ;
   struct list_head wb_list ;
   struct xarray cgwb_tree ;
   struct rb_root cgwb_congested_tree ;
   struct mutex cgwb_release_mutex ;
   struct rw_semaphore wb_switch_rwsem ;
   wait_queue_head_t wb_waitq ;
   struct device *dev ;
   struct device *owner ;
   struct timer_list laptop_mode_wb_timer ;
   struct dentry *debug_dir ;
};
#line 306 
struct bio_set;
#line 307 
struct bio_integrity_payload;
#line 308  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
typedef void bio_end_io_t(struct bio *);
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
typedef u8 blk_status_t;
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct bio_issue {
   u64 value ;
};
#line 144 
struct blkcg_gq;
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
union __anonunion_699 {
   struct bio_integrity_payload *bi_integrity ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct bio {
   struct bio *bi_next ;
   struct gendisk *bi_disk ;
   unsigned int bi_opf ;
   unsigned short bi_flags ;
   unsigned short bi_ioprio ;
   unsigned short bi_write_hint ;
   blk_status_t bi_status ;
   u8 bi_partno ;
   atomic_t __bi_remaining ;
   struct bvec_iter bi_iter ;
   bio_end_io_t *bi_end_io ;
   void *bi_private ;
   struct blkcg_gq *bi_blkg ;
   struct bio_issue bi_issue ;
   u64 bi_iocost_cost ;
   union __anonunion_699 __anonCompField_bio_161 ;
   unsigned short bi_vcnt ;
   unsigned short bi_max_vecs ;
   atomic_t __bi_cnt ;
   struct bio_vec *bi_io_vec ;
   struct bio_set *bi_pool ;
   struct bio_vec bi_inline_vecs[0U] ;
};
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
typedef unsigned int blk_qc_t;
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct blk_rq_stat {
   u64 mean ;
   u64 min ;
   u64 max ;
   u32 nr_samples ;
   u64 batch ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct disk_stats {
   u64 nsecs[4U] ;
   unsigned long sectors[4U] ;
   unsigned long ios[4U] ;
   unsigned long merges[4U] ;
   unsigned long io_ticks ;
   unsigned long time_in_queue ;
   local_t in_flight[2U] ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct partition_meta_info {
   char uuid[37U] ;
   u8 volname[64U] ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct hd_struct {
   sector_t start_sect ;
   sector_t nr_sects ;
   seqcount_t nr_sects_seq ;
   sector_t alignment_offset ;
   unsigned int discard_alignment ;
   struct device __dev ;
   struct kobject *holder_dir ;
   int policy ;
   int partno ;
   struct partition_meta_info *info ;
   int make_it_fail ;
   unsigned long stamp ;
   struct disk_stats *dkstats ;
   struct percpu_ref ref ;
   struct rcu_work rcu_work ;
};
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct disk_part_tbl {
   struct callback_head callback_head ;
   int len ;
   struct hd_struct *last_lookup ;
   struct hd_struct *part[] ;
};
#line 166 
struct disk_events;
#line 167 
struct badblocks;
#line 172 
struct blk_integrity_profile;
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct blk_integrity {
   struct blk_integrity_profile *profile ;
   unsigned char flags ;
   unsigned char tuple_size ;
   unsigned char interval_exp ;
   unsigned char tag_size ;
};
#line 182 
struct timer_rand_state;
#line 182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct gendisk {
   int major ;
   int first_minor ;
   int minors ;
   char disk_name[32U] ;
   char *(*devnode)(struct gendisk *, umode_t *) ;
   unsigned short events ;
   unsigned short event_flags ;
   struct disk_part_tbl *part_tbl ;
   struct hd_struct part0 ;
   struct block_device_operations *fops ;
   struct request_queue *queue ;
   void *private_data ;
   int flags ;
   struct rw_semaphore lookup_sem ;
   struct kobject *slave_dir ;
   struct timer_rand_state *random ;
   atomic_t sync_io ;
   struct disk_events *ev ;
   struct kobject integrity_kobj ;
   int node_id ;
   struct badblocks *bb ;
   struct lockdep_map lockdep_map ;
};
#line 637  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pagemap.h"
typedef void *mempool_alloc_t(gfp_t , void *);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
typedef void mempool_free_t(void *, void *);
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
struct mempool_s {
   spinlock_t lock ;
   int min_nr ;
   int curr_nr ;
   void **elements ;
   void *pool_data ;
   mempool_alloc_t *alloc ;
   mempool_free_t *free ;
   wait_queue_head_t wait ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
typedef struct mempool_s mempool_t;
#line 307  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_integrity_payload {
   struct bio *bip_bio ;
   struct bvec_iter bip_iter ;
   unsigned short bip_slab ;
   unsigned short bip_vcnt ;
   unsigned short bip_max_vcnt ;
   unsigned short bip_flags ;
   struct bvec_iter bio_iter ;
   struct work_struct bip_work ;
   struct bio_vec *bip_vec ;
   struct bio_vec bip_inline_vecs[0U] ;
};
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_list {
   struct bio *head ;
   struct bio *tail ;
};
#line 703  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_set {
   struct kmem_cache *bio_slab ;
   unsigned int front_pad ;
   mempool_t bio_pool ;
   mempool_t bvec_pool ;
   mempool_t bio_integrity_pool ;
   mempool_t bvec_integrity_pool ;
   spinlock_t rescue_lock ;
   struct bio_list rescue_list ;
   struct work_struct rescue_work ;
   struct workqueue_struct *rescue_workqueue ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bsg.h"
struct sg_io_v4 {
   __s32 guard ;
   __u32 protocol ;
   __u32 subprotocol ;
   __u32 request_len ;
   __u64 request ;
   __u64 request_tag ;
   __u32 request_attr ;
   __u32 request_priority ;
   __u32 request_extra ;
   __u32 max_response_len ;
   __u64 response ;
   __u32 dout_iovec_count ;
   __u32 dout_xfer_len ;
   __u32 din_iovec_count ;
   __u32 din_xfer_len ;
   __u64 dout_xferp ;
   __u64 din_xferp ;
   __u32 timeout ;
   __u32 flags ;
   __u64 usr_ptr ;
   __u32 spare_in ;
   __u32 driver_status ;
   __u32 transport_status ;
   __u32 device_status ;
   __u32 retry_delay ;
   __u32 info ;
   __u32 duration ;
   __u32 response_len ;
   __s32 din_resid ;
   __s32 dout_resid ;
   __u64 generated_tag ;
   __u32 spare_out ;
   __u32 padding ;
};
#line 65 
struct request;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bsg.h"
struct bsg_ops {
   int (*check_proto)(struct sg_io_v4 *) ;
   int (*fill_hdr)(struct request *, struct sg_io_v4 *, fmode_t ) ;
   int (*complete_rq)(struct request *, struct sg_io_v4 *) ;
   void (*free_rq)(struct request *) ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bsg.h"
struct bsg_class_device {
   struct device *class_dev ;
   int minor ;
   struct request_queue *queue ;
   struct bsg_ops *ops ;
};
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/blkzoned.h"
struct blk_zone {
   __u64 start ;
   __u64 len ;
   __u64 wp ;
   __u8 type ;
   __u8 cond ;
   __u8 non_seq ;
   __u8 reset ;
   __u8 reserved[36U] ;
};
#line 134 
struct elevator_queue;
#line 135 
struct blk_trace;
#line 138 
struct blk_flush_queue;
#line 139 
struct pr_ops;
#line 140 
struct rq_qos;
#line 141 
struct blk_queue_stats;
#line 142 
struct blk_stat_callback;
#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/blkzoned.h"
typedef void rq_end_io_fn(struct request *, blk_status_t );
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef __u32 req_flags_t;
#line 67 
enum mq_rq_state {
    MQ_RQ_IDLE = 0,
    MQ_RQ_IN_FLIGHT = 1,
    MQ_RQ_COMPLETE = 2
};
#line 132 
struct blk_mq_ctx;
#line 132 
struct blk_mq_hw_ctx;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_702 {
   struct hlist_node hash ;
   struct list_head ipi_list ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_703 {
   struct rb_node rb_node ;
   struct bio_vec special_vec ;
   void *completion_data ;
   int error_count ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct __anonstruct_elv_705 {
   struct io_cq *icq ;
   void *priv[2U] ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct __anonstruct_flush_706 {
   unsigned int seq ;
   struct list_head list ;
   rq_end_io_fn *saved_end_io ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_704 {
   struct __anonstruct_elv_705 elv ;
   struct __anonstruct_flush_706 flush ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_707 {
   struct __call_single_data csd ;
   u64 fifo_time ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct request {
   struct request_queue *q ;
   struct blk_mq_ctx *mq_ctx ;
   struct blk_mq_hw_ctx *mq_hctx ;
   unsigned int cmd_flags ;
   req_flags_t rq_flags ;
   int tag ;
   int internal_tag ;
   unsigned int __data_len ;
   sector_t __sector ;
   struct bio *bio ;
   struct bio *biotail ;
   struct list_head queuelist ;
   union __anonunion_702 __anonCompField_request_162 ;
   union __anonunion_703 __anonCompField_request_163 ;
   union __anonunion_704 __anonCompField_request_164 ;
   struct gendisk *rq_disk ;
   struct hd_struct *part ;
   u64 alloc_time_ns ;
   u64 start_time_ns ;
   u64 io_start_time_ns ;
   unsigned short wbt_flags ;
   unsigned short stats_sectors ;
   unsigned short nr_phys_segments ;
   unsigned short nr_integrity_segments ;
   unsigned short write_hint ;
   unsigned short ioprio ;
   unsigned int extra_len ;
   enum mq_rq_state state ;
   refcount_t ref ;
   unsigned int timeout ;
   unsigned long deadline ;
   union __anonunion_707 __anonCompField_request_165 ;
   rq_end_io_fn *end_io ;
   void *end_io_data ;
};
#line 285 
struct elevator_type;
#line 286 
struct blk_mq_debugfs_attr;
#line 287 
enum elv_merge {
    ELEVATOR_NO_MERGE = 0,
    ELEVATOR_FRONT_MERGE = 1,
    ELEVATOR_BACK_MERGE = 2,
    ELEVATOR_DISCARD_MERGE = 3
};
#line 294 
struct blk_mq_alloc_data;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_mq_ops {
   int (*init_sched)(struct request_queue *, struct elevator_type *) ;
   void (*exit_sched)(struct elevator_queue *) ;
   int (*init_hctx)(struct blk_mq_hw_ctx *, unsigned int ) ;
   void (*exit_hctx)(struct blk_mq_hw_ctx *, unsigned int ) ;
   void (*depth_updated)(struct blk_mq_hw_ctx *) ;
   bool (*allow_merge)(struct request_queue *, struct request *, struct bio *) ;
   bool (*bio_merge)(struct blk_mq_hw_ctx *, struct bio *, unsigned int ) ;
   int (*request_merge)(struct request_queue *, struct request **, struct bio *) ;
   void (*request_merged)(struct request_queue *, struct request *, enum elv_merge ) ;
   void (*requests_merged)(struct request_queue *, struct request *, struct request *) ;
   void (*limit_depth)(unsigned int , struct blk_mq_alloc_data *) ;
   void (*prepare_request)(struct request *, struct bio *) ;
   void (*finish_request)(struct request *) ;
   void (*insert_requests)(struct blk_mq_hw_ctx *, struct list_head *, bool ) ;
   struct request *(*dispatch_request)(struct blk_mq_hw_ctx *) ;
   bool (*has_work)(struct blk_mq_hw_ctx *) ;
   void (*completed_request)(struct request *, u64 ) ;
   void (*requeue_request)(struct request *) ;
   struct request *(*former_request)(struct request_queue *, struct request *) ;
   struct request *(*next_request)(struct request_queue *, struct request *) ;
   void (*init_icq)(struct io_cq *) ;
   void (*exit_icq)(struct io_cq *) ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elv_fs_entry {
   struct attribute attr ;
   ssize_t (*show)(struct elevator_queue *, char *) ;
   ssize_t (*store)(struct elevator_queue *, char *, size_t ) ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_type {
   struct kmem_cache *icq_cache ;
   struct elevator_mq_ops ops ;
   size_t icq_size ;
   size_t icq_align ;
   struct elv_fs_entry *elevator_attrs ;
   char *elevator_name ;
   char *elevator_alias ;
   unsigned int elevator_features ;
   struct module *elevator_owner ;
   struct blk_mq_debugfs_attr *queue_debugfs_attrs ;
   struct blk_mq_debugfs_attr *hctx_debugfs_attrs ;
   char icq_cache_name[22U] ;
   struct list_head list ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_queue {
   struct elevator_type *type ;
   void *elevator_data ;
   struct kobject kobj ;
   struct mutex sysfs_lock ;
   unsigned int registered : 1 ;
   struct hlist_head hash[64U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
typedef blk_qc_t make_request_fn(struct request_queue *, struct bio *);
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef int dma_drain_needed_fn(struct request *);
#line 304 
enum blk_zoned_model {
    BLK_ZONED_NONE = 0,
    BLK_ZONED_HA = 1,
    BLK_ZONED_HM = 2
};
#line 320  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct queue_limits {
   unsigned long bounce_pfn ;
   unsigned long seg_boundary_mask ;
   unsigned long virt_boundary_mask ;
   unsigned int max_hw_sectors ;
   unsigned int max_dev_sectors ;
   unsigned int chunk_sectors ;
   unsigned int max_sectors ;
   unsigned int max_segment_size ;
   unsigned int physical_block_size ;
   unsigned int logical_block_size ;
   unsigned int alignment_offset ;
   unsigned int io_min ;
   unsigned int io_opt ;
   unsigned int max_discard_sectors ;
   unsigned int max_hw_discard_sectors ;
   unsigned int max_write_same_sectors ;
   unsigned int max_write_zeroes_sectors ;
   unsigned int discard_granularity ;
   unsigned int discard_alignment ;
   unsigned short max_segments ;
   unsigned short max_integrity_segments ;
   unsigned short max_discard_segments ;
   unsigned char misaligned ;
   unsigned char discard_misaligned ;
   unsigned char raid_partial_stripes_expensive ;
   enum blk_zoned_model zoned ;
};
#line 394 
struct blk_mq_ops;
#line 394 
struct throtl_data;
#line 394 
struct blk_mq_tag_set;
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct request_queue {
   struct request *last_merge ;
   struct elevator_queue *elevator ;
   struct blk_queue_stats *stats ;
   struct rq_qos *rq_qos ;
   make_request_fn *make_request_fn ;
   dma_drain_needed_fn *dma_drain_needed ;
   struct blk_mq_ops *mq_ops ;
   struct blk_mq_ctx *queue_ctx ;
   unsigned int queue_depth ;
   struct blk_mq_hw_ctx **queue_hw_ctx ;
   unsigned int nr_hw_queues ;
   struct backing_dev_info *backing_dev_info ;
   void *queuedata ;
   unsigned long queue_flags ;
   atomic_t pm_only ;
   int id ;
   gfp_t bounce_gfp ;
   spinlock_t queue_lock ;
   struct kobject kobj ;
   struct kobject *mq_kobj ;
   struct blk_integrity integrity ;
   struct device *dev ;
   int rpm_status ;
   unsigned int nr_pending ;
   unsigned long nr_requests ;
   unsigned int dma_drain_size ;
   void *dma_drain_buffer ;
   unsigned int dma_pad_mask ;
   unsigned int dma_alignment ;
   unsigned int rq_timeout ;
   int poll_nsec ;
   struct blk_stat_callback *poll_cb ;
   struct blk_rq_stat poll_stat[16U] ;
   struct timer_list timeout ;
   struct work_struct timeout_work ;
   struct list_head icq_list ;
   unsigned long blkcg_pols[1U] ;
   struct blkcg_gq *root_blkg ;
   struct list_head blkg_list ;
   struct queue_limits limits ;
   unsigned int required_elevator_features ;
   unsigned int nr_zones ;
   unsigned long *conv_zones_bitmap ;
   unsigned long *seq_zones_wlock ;
   unsigned int sg_timeout ;
   unsigned int sg_reserved_size ;
   int node ;
   struct blk_trace *blk_trace ;
   struct mutex blk_trace_mutex ;
   struct blk_flush_queue *fq ;
   struct list_head requeue_list ;
   spinlock_t requeue_lock ;
   struct delayed_work requeue_work ;
   struct mutex sysfs_lock ;
   struct mutex sysfs_dir_lock ;
   struct list_head unused_hctx_list ;
   spinlock_t unused_hctx_lock ;
   int mq_freeze_depth ;
   struct bsg_class_device bsg_dev ;
   struct throtl_data *td ;
   struct callback_head callback_head ;
   wait_queue_head_t mq_freeze_wq ;
   struct mutex mq_freeze_lock ;
   struct percpu_ref q_usage_counter ;
   struct blk_mq_tag_set *tag_set ;
   struct list_head tag_set_list ;
   struct bio_set bio_split ;
   struct dentry *debugfs_dir ;
   struct dentry *sched_debugfs_dir ;
   struct dentry *rqos_debugfs_dir ;
   bool mq_sysfs_init_done ;
   size_t cmd_size ;
   struct work_struct release_work ;
   u64 write_hints[5U] ;
};
#line 1160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_plug {
   struct list_head mq_list ;
   struct list_head cb_list ;
   unsigned short rq_count ;
   bool multiple_queues ;
};
#line 1514  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_integrity_iter {
   void *prot_buf ;
   void *data_buf ;
   sector_t seed ;
   unsigned int data_size ;
   unsigned short interval ;
   char *disk_name ;
};
#line 1522  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef blk_status_t integrity_processing_fn(struct blk_integrity_iter *);
#line 1524  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef void integrity_prepare_fn(struct request *);
#line 1525  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef void integrity_complete_fn(struct request *, unsigned int );
#line 1527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_integrity_profile {
   integrity_processing_fn *generate_fn ;
   integrity_processing_fn *verify_fn ;
   integrity_prepare_fn *prepare_fn ;
   integrity_complete_fn *complete_fn ;
   char *name ;
};
#line 1693  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct block_device_operations {
   int (*open)(struct block_device *, fmode_t ) ;
   void (*release)(struct gendisk *, fmode_t ) ;
   int (*rw_page)(struct block_device *, sector_t , struct page *, unsigned int ) ;
   int (*ioctl)(struct block_device *, fmode_t , unsigned int , unsigned long ) ;
   int (*compat_ioctl)(struct block_device *, fmode_t , unsigned int , unsigned long ) ;
   unsigned int (*check_events)(struct gendisk *, unsigned int ) ;
   int (*media_changed)(struct gendisk *) ;
   void (*unlock_native_capacity)(struct gendisk *) ;
   int (*revalidate_disk)(struct gendisk *) ;
   int (*getgeo)(struct block_device *, struct hd_geometry *) ;
   void (*swap_slot_free_notify)(struct block_device *, unsigned long ) ;
   int (*report_zones)(struct gendisk *, sector_t , unsigned int , int (*)(struct blk_zone *, unsigned int , void *), void *) ;
   struct module *owner ;
   struct pr_ops *pr_ops ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_policy_data;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg {
   struct cgroup_subsys_state css ;
   spinlock_t lock ;
   struct xarray blkg_tree ;
   struct blkcg_gq *blkg_hint ;
   struct hlist_head blkg_list ;
   struct blkcg_policy_data *cpd[5U] ;
   struct list_head all_blkcgs_node ;
   struct list_head cgwb_list ;
   refcount_t cgwb_refcnt ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_iostat {
   u64 bytes[3U] ;
   u64 ios[3U] ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_iostat_set {
   struct u64_stats_sync sync ;
   struct blkg_iostat cur ;
   struct blkg_iostat last ;
};
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_policy_data {
   struct blkcg_gq *blkg ;
   int plid ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_policy_data {
   struct blkcg *blkcg ;
   int plid ;
};
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_gq {
   struct request_queue *q ;
   struct list_head q_node ;
   struct hlist_node blkcg_node ;
   struct blkcg *blkcg ;
   struct bdi_writeback_congested *wb_congested ;
   struct blkcg_gq *parent ;
   struct percpu_ref refcnt ;
   bool online ;
   struct blkg_iostat_set *iostat_cpu ;
   struct blkg_iostat_set iostat ;
   struct blkg_policy_data *pd[5U] ;
   spinlock_t async_bio_lock ;
   struct bio_list async_bios ;
   struct work_struct async_bio_work ;
   atomic_t use_delay ;
   atomic64_t delay_nsec ;
   atomic64_t delay_start ;
   u64 last_delay ;
   int last_use ;
   struct callback_head callback_head ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
enum writeback_sync_modes {
    WB_SYNC_NONE = 0,
    WB_SYNC_ALL = 1
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
struct writeback_control {
   long nr_to_write ;
   long pages_skipped ;
   loff_t range_start ;
   loff_t range_end ;
   enum writeback_sync_modes sync_mode ;
   unsigned int for_kupdate : 1 ;
   unsigned int for_background : 1 ;
   unsigned int tagged_writepages : 1 ;
   unsigned int for_reclaim : 1 ;
   unsigned int range_cyclic : 1 ;
   unsigned int for_sync : 1 ;
   unsigned int no_cgroup_owner : 1 ;
   unsigned int punt_to_cgroup : 1 ;
   struct bdi_writeback *wb ;
   struct inode *inode ;
   int wb_id ;
   int wb_lcand_id ;
   int wb_tcand_id ;
   size_t wb_bytes ;
   size_t wb_lcand_bytes ;
   size_t wb_tcand_bytes ;
};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
struct wb_domain {
   spinlock_t lock ;
   struct fprop_global completions ;
   struct timer_list period_timer ;
   unsigned long period_time ;
   unsigned long dirty_limit_tstamp ;
   unsigned long dirty_limit ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_id {
   int id ;
   refcount_t ref ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_vmstats_percpu {
   long stat[38U] ;
   unsigned long events[91U] ;
   unsigned long nr_page_events ;
   unsigned long targets[2U] ;
};
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_reclaim_iter {
   struct mem_cgroup *position ;
   unsigned int generation ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct lruvec_stat {
   long count[32U] ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_shrinker_map {
   struct callback_head rcu ;
   unsigned long map[0U] ;
};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_per_node {
   struct lruvec lruvec ;
   struct lruvec_stat *lruvec_stat_local ;
   struct lruvec_stat *lruvec_stat_cpu ;
   atomic_long_t lruvec_stat[32U] ;
   unsigned long lru_zone_size[5U][5U] ;
   struct mem_cgroup_reclaim_iter iter ;
   struct memcg_shrinker_map *shrinker_map ;
   struct rb_node tree_node ;
   unsigned long usage_in_excess ;
   bool on_tree ;
   struct mem_cgroup *memcg ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_threshold {
   struct eventfd_ctx *eventfd ;
   unsigned long threshold ;
};
#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_threshold_ary {
   int current_threshold ;
   unsigned int size ;
   struct mem_cgroup_threshold entries[0U] ;
};
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_thresholds {
   struct mem_cgroup_threshold_ary *primary ;
   struct mem_cgroup_threshold_ary *spare ;
};
#line 164 
enum memcg_kmem_state {
    KMEM_NONE = 0,
    KMEM_ALLOCATED = 1,
    KMEM_ONLINE = 2
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_padding {
   char x[0U] ;
} __attribute__((__aligned__(4096)));
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_cgwb_frn {
   u64 bdi_id ;
   int memcg_id ;
   u64 at ;
   struct wb_completion done ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup {
   struct cgroup_subsys_state css ;
   struct mem_cgroup_id id ;
   struct page_counter memory ;
   struct page_counter swap ;
   struct page_counter memsw ;
   struct page_counter kmem ;
   struct page_counter tcpmem ;
   unsigned long high ;
   struct work_struct high_work ;
   unsigned long soft_limit ;
   struct vmpressure vmpressure ;
   bool use_hierarchy ;
   bool oom_group ;
   bool oom_lock ;
   int under_oom ;
   int swappiness ;
   int oom_kill_disable ;
   struct cgroup_file events_file ;
   struct cgroup_file events_local_file ;
   struct cgroup_file swap_events_file ;
   struct mutex thresholds_lock ;
   struct mem_cgroup_thresholds thresholds ;
   struct mem_cgroup_thresholds memsw_thresholds ;
   struct list_head oom_notify ;
   unsigned long move_charge_at_immigrate ;
   spinlock_t move_lock ;
   unsigned long move_lock_flags ;
   struct memcg_padding _pad1_ ;
   atomic_t moving_account ;
   struct task_struct *move_lock_task ;
   struct memcg_vmstats_percpu *vmstats_local ;
   struct memcg_vmstats_percpu *vmstats_percpu ;
   struct memcg_padding _pad2_ ;
   atomic_long_t vmstats[38U] ;
   atomic_long_t vmevents[91U] ;
   atomic_long_t memory_events[7U] ;
   atomic_long_t memory_events_local[7U] ;
   unsigned long socket_pressure ;
   bool tcpmem_active ;
   int tcpmem_pressure ;
   int kmemcg_id ;
   enum memcg_kmem_state kmem_state ;
   struct list_head kmem_caches ;
   struct list_head cgwb_list ;
   struct wb_domain cgwb_domain ;
   struct memcg_cgwb_frn cgwb_frn[4U] ;
   struct list_head event_list ;
   spinlock_t event_list_lock ;
   struct deferred_split deferred_split_queue ;
   struct mem_cgroup_per_node *nodeinfo[0U] ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/vdso.h"
struct vdso_image {
   void *data ;
   unsigned long size ;
   unsigned long alt ;
   unsigned long alt_len ;
   long sym_vvar_start ;
   long sym_vvar_page ;
   long sym_pvclock_page ;
   long sym_hvclock_page ;
   long sym_VDSO32_NOTE_MASK ;
   long sym___kernel_sigreturn ;
   long sym___kernel_rt_sigreturn ;
   long sym___kernel_vsyscall ;
   long sym_int80_landing_pad ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u16 Elf64_Half;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Off;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u32 Elf64_Word;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_hdr {
   unsigned char e_ident[16U] ;
   Elf64_Half e_type ;
   Elf64_Half e_machine ;
   Elf64_Word e_version ;
   Elf64_Addr e_entry ;
   Elf64_Off e_phoff ;
   Elf64_Off e_shoff ;
   Elf64_Word e_flags ;
   Elf64_Half e_ehsize ;
   Elf64_Half e_phentsize ;
   Elf64_Half e_phnum ;
   Elf64_Half e_shentsize ;
   Elf64_Half e_shnum ;
   Elf64_Half e_shstrndx ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_hdr Elf64_Ehdr;
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_shdr {
   Elf64_Word sh_name ;
   Elf64_Word sh_type ;
   Elf64_Xword sh_flags ;
   Elf64_Addr sh_addr ;
   Elf64_Off sh_offset ;
   Elf64_Xword sh_size ;
   Elf64_Word sh_link ;
   Elf64_Word sh_info ;
   Elf64_Xword sh_addralign ;
   Elf64_Xword sh_entsize ;
};
#line 328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_shdr Elf64_Shdr;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elf.h"
struct kernel_param;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param_ops {
   unsigned int flags ;
   int (*set)(char *, struct kernel_param *) ;
   int (*get)(char *, struct kernel_param *) ;
   void (*free)(void *) ;
};
#line 69 
struct kparam_string;
#line 69 
struct kparam_array;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
union __anonunion_726 {
   void *arg ;
   struct kparam_string *str ;
   struct kparam_array *arr ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param {
   char *name ;
   struct module *mod ;
   struct kernel_param_ops *ops ;
   u16 perm ;
   s8 level ;
   u8 flags ;
   union __anonunion_726 __anonCompField_kernel_param_166 ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int elemsize ;
   unsigned int *num ;
   struct kernel_param_ops *ops ;
   void *elem ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/error-injection.h"
struct error_injection_entry {
   unsigned long addr ;
   int etype ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/module.h"
struct mod_arch_specific {
   unsigned int num_orcs ;
   int *orc_unwind_ip ;
   struct orc_entry *orc_unwind ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_param_attrs;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
   struct completion *kobj_completion ;
} __attribute__((__designated_init__));
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute *, struct module_kobject *, char *) ;
   ssize_t (*store)(struct module_attribute *, struct module_kobject *, char *, size_t ) ;
   void (*setup)(struct module *, char *) ;
   int (*test)(struct module *) ;
   void (*free)(struct module *) ;
};
#line 297 
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2,
    MODULE_STATE_UNFORMED = 3
};
#line 305  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_tree_node {
   struct module *mod ;
   struct latch_tree_node node ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_layout {
   void *base ;
   unsigned int size ;
   unsigned int text_size ;
   unsigned int ro_size ;
   unsigned int ro_after_init_size ;
   struct mod_tree_node mtn ;
};
#line 334  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_kallsyms {
   Elf64_Sym *symtab ;
   unsigned int num_symtab ;
   char *strtab ;
   char *typetab ;
};
#line 342  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct klp_modinfo {
   Elf64_Ehdr hdr ;
   Elf64_Shdr *sechdrs ;
   char *secstrings ;
   unsigned int symndx ;
};
#line 350 
struct module_sect_attrs;
#line 350 
struct module_notes_attrs;
#line 350 
struct trace_event_call;
#line 350 
struct trace_eval_map;
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char *version ;
   char *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol *syms ;
   s32 *crcs ;
   unsigned int num_syms ;
   struct mutex param_lock ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol *gpl_syms ;
   s32 *gpl_crcs ;
   struct kernel_symbol *unused_syms ;
   s32 *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol *unused_gpl_syms ;
   s32 *unused_gpl_crcs ;
   bool sig_ok ;
   bool async_probe_requested ;
   struct kernel_symbol *gpl_future_syms ;
   s32 *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   struct module_layout core_layout ;
   struct module_layout init_layout ;
   struct mod_arch_specific arch ;
   unsigned long taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   struct mod_kallsyms *kallsyms ;
   struct mod_kallsyms core_kallsyms ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   char *args ;
   void *percpu ;
   unsigned int percpu_size ;
   unsigned int num_tracepoints ;
   tracepoint_ptr_t *tracepoints_ptrs ;
   unsigned int num_srcu_structs ;
   struct srcu_struct **srcu_struct_ptrs ;
   unsigned int num_bpf_raw_events ;
   struct bpf_raw_event_map *bpf_raw_events ;
   struct jump_entry *jump_entries ;
   unsigned int num_jump_entries ;
   unsigned int num_trace_bprintk_fmt ;
   char **trace_bprintk_fmt_start ;
   struct trace_event_call **trace_events ;
   unsigned int num_trace_events ;
   struct trace_eval_map **trace_evals ;
   unsigned int num_trace_evals ;
   unsigned int num_ftrace_callsites ;
   unsigned long *ftrace_callsites ;
   bool klp ;
   bool klp_alive ;
   struct klp_modinfo *klp_info ;
   struct list_head source_list ;
   struct list_head target_list ;
   void (*exit)(void) ;
   atomic_t refcnt ;
   ctor_fn_t *ctors ;
   unsigned int num_ctors ;
   struct error_injection_entry *ei_funcs ;
   unsigned int num_ei_funcs ;
} __attribute__((__designated_init__, __aligned__(64)));
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/gen_stats.h"
struct gnet_stats_queue {
   __u32 qlen ;
   __u32 backlog ;
   __u32 drops ;
   __u32 requeues ;
   __u32 overlimits ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_stats_basic_packed {
   __u64 bytes ;
   __u64 packets ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_stats_basic_cpu {
   struct gnet_stats_basic_packed bstats ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 20 
struct net_rate_estimator;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_dump {
   spinlock_t *lock ;
   struct sk_buff *skb ;
   struct nlattr *tail ;
   int compat_tc_stats ;
   int compat_xstats ;
   int padattr ;
   void *xstats ;
   int xstats_len ;
   struct tc_stats tc_stats ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
struct __anonstruct_728 {
   s16 min ;
   s16 max ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
union __anonunion_727 {
   void *validation_data ;
   struct __anonstruct_728 __anonCompField___anonunion_727_167 ;
   int (*validate)(struct nlattr *, struct netlink_ext_ack *) ;
   u16 strict_start_type ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
struct nla_policy {
   u8 type ;
   u8 validation_type ;
   u16 len ;
   union __anonunion_727 __anonCompField_nla_policy_168 ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/rtnetlink.h"
struct rtnl_link_ops {
   struct list_head list ;
   char *kind ;
   size_t priv_size ;
   void (*setup)(struct net_device *) ;
   unsigned int maxtype ;
   struct nla_policy *policy ;
   int (*validate)(struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   int (*newlink)(struct net *, struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   int (*changelink)(struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   void (*dellink)(struct net_device *, struct list_head *) ;
   size_t (*get_size)(struct net_device *) ;
   int (*fill_info)(struct sk_buff *, struct net_device *) ;
   size_t (*get_xstats_size)(struct net_device *) ;
   int (*fill_xstats)(struct sk_buff *, struct net_device *) ;
   unsigned int (*get_num_tx_queues)(void) ;
   unsigned int (*get_num_rx_queues)(void) ;
   unsigned int slave_maxtype ;
   struct nla_policy *slave_policy ;
   int (*slave_changelink)(struct net_device *, struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   size_t (*get_slave_size)(struct net_device *, struct net_device *) ;
   int (*fill_slave_info)(struct sk_buff *, struct net_device *, struct net_device *) ;
   struct net *(*get_link_net)(struct net_device *) ;
   size_t (*get_linkxstats_size)(struct net_device *, int ) ;
   int (*fill_linkxstats)(struct sk_buff *, struct net_device *, int *, int ) ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jhash.h"
struct rhash_lock_head {
   };
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable.h"
struct bucket_table {
   unsigned int size ;
   unsigned int nest ;
   u32 hash_rnd ;
   struct list_head walkers ;
   struct callback_head rcu ;
   struct bucket_table *future_tbl ;
   struct lockdep_map dep_map ;
   struct rhash_lock_head *buckets[] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct flow_block {
   struct list_head cb_list ;
};
#line 298  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
typedef int flow_setup_cb_t(enum tc_setup_type , void *, void *);
#line 412 
struct Qdisc_ops;
#line 413 
struct qdisc_walker;
#line 414 
struct tcf_walker;
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct qdisc_size_table {
   struct callback_head rcu ;
   struct list_head list ;
   struct tc_sizespec szopts ;
   int refcnt ;
   u16 data[] ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct qdisc_skb_head {
   struct sk_buff *head ;
   struct sk_buff *tail ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc {
   int (*enqueue)(struct sk_buff *, struct Qdisc *, struct sk_buff **) ;
   struct sk_buff *(*dequeue)(struct Qdisc *) ;
   unsigned int flags ;
   u32 limit ;
   struct Qdisc_ops *ops ;
   struct qdisc_size_table *stab ;
   struct hlist_node hash ;
   u32 handle ;
   u32 parent ;
   struct netdev_queue *dev_queue ;
   struct net_rate_estimator *rate_est ;
   struct gnet_stats_basic_cpu *cpu_bstats ;
   struct gnet_stats_queue *cpu_qstats ;
   int padded ;
   refcount_t refcnt ;
   struct sk_buff_head gso_skb ;
   struct qdisc_skb_head q ;
   struct gnet_stats_basic_packed bstats ;
   seqcount_t running ;
   struct gnet_stats_queue qstats ;
   unsigned long state ;
   struct Qdisc *next_sched ;
   struct sk_buff_head skb_bad_txq ;
   spinlock_t busylock ;
   spinlock_t seqlock ;
   bool empty ;
   struct callback_head rcu ;
};
#line 195 
struct tcf_block;
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc_class_ops {
   unsigned int flags ;
   struct netdev_queue *(*select_queue)(struct Qdisc *, struct tcmsg *) ;
   int (*graft)(struct Qdisc *, unsigned long , struct Qdisc *, struct Qdisc **, struct netlink_ext_ack *) ;
   struct Qdisc *(*leaf)(struct Qdisc *, unsigned long ) ;
   void (*qlen_notify)(struct Qdisc *, unsigned long ) ;
   unsigned long (*find)(struct Qdisc *, u32 ) ;
   int (*change)(struct Qdisc *, u32 , u32 , struct nlattr **, unsigned long *, struct netlink_ext_ack *) ;
   int (*delete)(struct Qdisc *, unsigned long ) ;
   void (*walk)(struct Qdisc *, struct qdisc_walker *) ;
   struct tcf_block *(*tcf_block)(struct Qdisc *, unsigned long , struct netlink_ext_ack *) ;
   unsigned long (*bind_tcf)(struct Qdisc *, unsigned long , u32 ) ;
   void (*unbind_tcf)(struct Qdisc *, unsigned long ) ;
   int (*dump)(struct Qdisc *, unsigned long , struct sk_buff *, struct tcmsg *) ;
   int (*dump_stats)(struct Qdisc *, unsigned long , struct gnet_dump *) ;
};
#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc_ops {
   struct Qdisc_ops *next ;
   struct Qdisc_class_ops *cl_ops ;
   char id[16U] ;
   int priv_size ;
   unsigned int static_flags ;
   int (*enqueue)(struct sk_buff *, struct Qdisc *, struct sk_buff **) ;
   struct sk_buff *(*dequeue)(struct Qdisc *) ;
   struct sk_buff *(*peek)(struct Qdisc *) ;
   int (*init)(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *) ;
   void (*reset)(struct Qdisc *) ;
   void (*destroy)(struct Qdisc *) ;
   int (*change)(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *) ;
   void (*attach)(struct Qdisc *) ;
   int (*change_tx_queue_len)(struct Qdisc *, unsigned int ) ;
   int (*dump)(struct Qdisc *, struct sk_buff *) ;
   int (*dump_stats)(struct Qdisc *, struct gnet_dump *) ;
   void (*ingress_block_set)(struct Qdisc *, u32 ) ;
   void (*egress_block_set)(struct Qdisc *, u32 ) ;
   u32 (*ingress_block_get)(struct Qdisc *) ;
   u32 (*egress_block_get)(struct Qdisc *) ;
   struct module *owner ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_802 {
   unsigned long class ;
   u32 classid ;
};
#line 272 
struct tcf_proto;
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_803 {
   bool ingress ;
   struct gnet_stats_queue *qstats ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
union __anonunion_801 {
   struct __anonstruct_802 __anonCompField___anonunion_801_170 ;
   struct tcf_proto *goto_tp ;
   struct __anonstruct_803 __anonCompField___anonunion_801_171 ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_result {
   union __anonunion_801 __anonCompField_tcf_result_172 ;
};
#line 287 
struct tcf_chain;
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_proto_ops {
   struct list_head head ;
   char kind[16U] ;
   int (*classify)(struct sk_buff *, struct tcf_proto *, struct tcf_result *) ;
   int (*init)(struct tcf_proto *) ;
   void (*destroy)(struct tcf_proto *, bool , struct netlink_ext_ack *) ;
   void *(*get)(struct tcf_proto *, u32 ) ;
   void (*put)(struct tcf_proto *, void *) ;
   int (*change)(struct net *, struct sk_buff *, struct tcf_proto *, unsigned long , u32 , struct nlattr **, void **, bool , bool , struct netlink_ext_ack *) ;
   int (*delete)(struct tcf_proto *, void *, bool *, bool , struct netlink_ext_ack *) ;
   bool (*delete_empty)(struct tcf_proto *) ;
   void (*walk)(struct tcf_proto *, struct tcf_walker *, bool ) ;
   int (*reoffload)(struct tcf_proto *, bool , flow_setup_cb_t *, void *, struct netlink_ext_ack *) ;
   void (*hw_add)(struct tcf_proto *, void *) ;
   void (*hw_del)(struct tcf_proto *, void *) ;
   void (*bind_class)(void *, u32 , unsigned long ) ;
   void *(*tmplt_create)(struct net *, struct tcf_chain *, struct nlattr **, struct netlink_ext_ack *) ;
   void (*tmplt_destroy)(void *) ;
   int (*dump)(struct net *, struct tcf_proto *, void *, struct sk_buff *, struct tcmsg *, bool ) ;
   int (*tmplt_dump)(struct sk_buff *, struct net *, void *) ;
   struct module *owner ;
   int flags ;
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_proto {
   struct tcf_proto *next ;
   void *root ;
   int (*classify)(struct sk_buff *, struct tcf_proto *, struct tcf_result *) ;
   __be16 protocol ;
   u32 prio ;
   void *data ;
   struct tcf_proto_ops *ops ;
   struct tcf_chain *chain ;
   spinlock_t lock ;
   bool deleting ;
   refcount_t refcnt ;
   struct callback_head rcu ;
   struct hlist_node destroy_ht_node ;
};
#line 386  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_chain {
   struct mutex filter_chain_lock ;
   struct tcf_proto *filter_chain ;
   struct list_head list ;
   struct tcf_block *block ;
   u32 index ;
   unsigned int refcnt ;
   unsigned int action_refcnt ;
   bool explicitly_created ;
   bool flushing ;
   struct tcf_proto_ops *tmplt_ops ;
   void *tmplt_priv ;
   struct callback_head rcu ;
};
#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_chain0_805 {
   struct tcf_chain *chain ;
   struct list_head filter_chain_list ;
};
#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_block {
   struct mutex lock ;
   struct list_head chain_list ;
   u32 index ;
   refcount_t refcnt ;
   struct net *net ;
   struct Qdisc *q ;
   struct rw_semaphore cb_lock ;
   struct flow_block flow_block ;
   struct list_head owner_list ;
   bool keep_dst ;
   atomic_t offloadcnt ;
   unsigned int nooffloaddevcnt ;
   unsigned int lockeddevcnt ;
   struct __anonstruct_chain0_805 chain0 ;
   struct callback_head rcu ;
   struct hlist_head proto_destroy_ht[128U] ;
   struct mutex proto_destroy_lock ;
};
#line 1269  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct mini_Qdisc {
   struct tcf_proto *filter_list ;
   struct gnet_stats_basic_cpu *cpu_bstats ;
   struct gnet_stats_queue *cpu_qstats ;
   struct callback_head rcu ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/filter.h"
struct sock_filter {
   __u16 code ;
   __u8 jt ;
   __u8 jf ;
   __u32 k ;
};
#line 35 
struct sock_reuseport;
#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct sock_fprog_kern {
   u16 len ;
   struct sock_filter *filter ;
};
#line 526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
union __anonunion_818 {
   struct sock_filter insns[0U] ;
   struct bpf_insn insnsi[0U] ;
};
#line 526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct bpf_prog {
   u16 pages ;
   u16 jited : 1 ;
   u16 jit_requested : 1 ;
   u16 gpl_compatible : 1 ;
   u16 cb_access : 1 ;
   u16 dst_needed : 1 ;
   u16 blinded : 1 ;
   u16 is_func : 1 ;
   u16 kprobe_override : 1 ;
   u16 has_callchain_buf : 1 ;
   u16 enforce_expected_attach_type : 1 ;
   enum bpf_prog_type type ;
   enum bpf_attach_type expected_attach_type ;
   u32 len ;
   u32 jited_len ;
   u8 tag[8U] ;
   struct bpf_prog_aux *aux ;
   struct sock_fprog_kern *orig_prog ;
   unsigned int (*bpf_func)(void *, struct bpf_insn *) ;
   union __anonunion_818 __anonCompField_bpf_prog_174 ;
};
#line 554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct sk_filter {
   refcount_t refcnt ;
   struct callback_head rcu ;
   struct bpf_prog *prog ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/poll.h"
struct pollfd {
   int fd ;
   short events ;
   short revents ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/poll.h"
struct poll_table_struct {
   void (*_qproc)(struct file *, wait_queue_head_t *, struct poll_table_struct *) ;
   __poll_t _key ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_table;
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_parms {
   possible_net_t net ;
   struct net_device *dev ;
   struct list_head list ;
   int (*neigh_setup)(struct neighbour *) ;
   struct neigh_table *tbl ;
   void *sysctl_table ;
   int dead ;
   refcount_t refcnt ;
   struct callback_head callback_head ;
   int reachable_time ;
   int data[13U] ;
   unsigned long data_state[1U] ;
};
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_statistics {
   unsigned long allocs ;
   unsigned long destroys ;
   unsigned long hash_grows ;
   unsigned long res_failed ;
   unsigned long lookups ;
   unsigned long hits ;
   unsigned long rcv_probes_mcast ;
   unsigned long rcv_probes_ucast ;
   unsigned long periodic_gc_runs ;
   unsigned long forced_gc_runs ;
   unsigned long unres_discards ;
   unsigned long table_fulls ;
};
#line 134 
struct neigh_ops;
#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neighbour {
   struct neighbour *next ;
   struct neigh_table *tbl ;
   struct neigh_parms *parms ;
   unsigned long confirmed ;
   unsigned long updated ;
   rwlock_t lock ;
   refcount_t refcnt ;
   unsigned int arp_queue_len_bytes ;
   struct sk_buff_head arp_queue ;
   struct timer_list timer ;
   unsigned long used ;
   atomic_t probes ;
   __u8 flags ;
   __u8 nud_state ;
   __u8 type ;
   __u8 dead ;
   u8 protocol ;
   seqlock_t ha_lock ;
   unsigned char ha[32U] ;
   struct hh_cache hh ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   struct neigh_ops *ops ;
   struct list_head gc_list ;
   struct callback_head rcu ;
   struct net_device *dev ;
   u8 primary_key[0U] ;
} __attribute__((__designated_init__));
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_ops {
   int family ;
   void (*solicit)(struct neighbour *, struct sk_buff *) ;
   void (*error_report)(struct neighbour *, struct sk_buff *) ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   int (*connected_output)(struct neighbour *, struct sk_buff *) ;
};
#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct pneigh_entry {
   struct pneigh_entry *next ;
   possible_net_t net ;
   struct net_device *dev ;
   u8 flags ;
   u8 protocol ;
   u8 key[0U] ;
};
#line 186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_hash_table {
   struct neighbour **hash_buckets ;
   unsigned int hash_shift ;
   __u32 hash_rnd[4U] ;
   struct callback_head rcu ;
};
#line 194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_table {
   int family ;
   unsigned int entry_size ;
   unsigned int key_len ;
   __be16 protocol ;
   __u32 (*hash)(void *, struct net_device *, __u32 *) ;
   bool (*key_eq)(struct neighbour *, void *) ;
   int (*constructor)(struct neighbour *) ;
   int (*pconstructor)(struct pneigh_entry *) ;
   void (*pdestructor)(struct pneigh_entry *) ;
   void (*proxy_redo)(struct sk_buff *) ;
   bool (*allow_add)(struct net_device *, struct netlink_ext_ack *) ;
   char *id ;
   struct neigh_parms parms ;
   struct list_head parms_list ;
   int gc_interval ;
   int gc_thresh1 ;
   int gc_thresh2 ;
   int gc_thresh3 ;
   unsigned long last_flush ;
   struct delayed_work gc_work ;
   struct timer_list proxy_timer ;
   struct sk_buff_head proxy_queue ;
   atomic_t entries ;
   atomic_t gc_entries ;
   struct list_head gc_list ;
   rwlock_t lock ;
   unsigned long last_rand ;
   struct neigh_statistics *stats ;
   struct neigh_hash_table *nht ;
   struct pneigh_entry **phash_buckets ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst.h"
struct lwtunnel_state;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst.h"
struct dst_entry {
   struct net_device *dev ;
   struct dst_ops *ops ;
   unsigned long _metrics ;
   unsigned long expires ;
   struct xfrm_state *xfrm ;
   int (*input)(struct sk_buff *) ;
   int (*output)(struct net *, struct sock *, struct sk_buff *) ;
   unsigned short flags ;
   short obsolete ;
   unsigned short header_len ;
   unsigned short trailer_len ;
   atomic_t __refcnt ;
   int __use ;
   unsigned long lastuse ;
   struct lwtunnel_state *lwtstate ;
   struct callback_head callback_head ;
   short error ;
   short __pad ;
   __u32 tclassid ;
};
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst.h"
struct dst_metrics {
   u32 metrics[17U] ;
   refcount_t refcnt ;
} __attribute__((__aligned__(4)));
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fib_rules.h"
struct fib_rule_hdr {
   __u8 family ;
   __u8 dst_len ;
   __u8 src_len ;
   __u8 tos ;
   __u8 table ;
   __u8 res1 ;
   __u8 res2 ;
   __u8 action ;
   __u32 flags ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fib_rules.h"
struct fib_rule_port_range {
   __u16 start ;
   __u16 end ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_notifier.h"
struct fib_notifier_ops {
   int family ;
   struct list_head list ;
   unsigned int (*fib_seq_read)(struct net *) ;
   int (*fib_dump)(struct net *, struct notifier_block *, struct netlink_ext_ack *) ;
   struct module *owner ;
   struct callback_head rcu ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_kuid_range {
   kuid_t start ;
   kuid_t end ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_rule {
   struct list_head list ;
   int iifindex ;
   int oifindex ;
   u32 mark ;
   u32 mark_mask ;
   u32 flags ;
   u32 table ;
   u8 action ;
   u8 l3mdev ;
   u8 proto ;
   u8 ip_proto ;
   u32 target ;
   __be64 tun_id ;
   struct fib_rule *ctarget ;
   struct net *fr_net ;
   refcount_t refcnt ;
   u32 pref ;
   int suppress_ifgroup ;
   int suppress_prefixlen ;
   char iifname[16U] ;
   char oifname[16U] ;
   struct fib_kuid_range uid_range ;
   struct fib_rule_port_range sport_range ;
   struct fib_rule_port_range dport_range ;
   struct callback_head rcu ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_lookup_arg {
   void *lookup_ptr ;
   void *lookup_data ;
   void *result ;
   struct fib_rule *rule ;
   u32 table ;
   int flags ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_rules_ops {
   int family ;
   struct list_head list ;
   int rule_size ;
   int addr_size ;
   int unresolved_rules ;
   int nr_goto_rules ;
   unsigned int fib_rules_seq ;
   int (*action)(struct fib_rule *, struct flowi *, int , struct fib_lookup_arg *) ;
   bool (*suppress)(struct fib_rule *, struct fib_lookup_arg *) ;
   int (*match)(struct fib_rule *, struct flowi *, int ) ;
   int (*configure)(struct fib_rule *, struct sk_buff *, struct fib_rule_hdr *, struct nlattr **, struct netlink_ext_ack *) ;
   int (*delete)(struct fib_rule *) ;
   int (*compare)(struct fib_rule *, struct fib_rule_hdr *, struct nlattr **) ;
   int (*fill)(struct fib_rule *, struct sk_buff *, struct fib_rule_hdr *) ;
   size_t (*nlmsg_payload)(struct fib_rule *) ;
   void (*flush_cache)(struct fib_rules_ops *) ;
   int nlgroup ;
   struct nla_policy *policy ;
   struct list_head rules_list ;
   struct module *owner ;
   struct net *fro_net ;
   struct callback_head rcu ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
struct l3mdev_ops {
   u32 (*l3mdev_fib_table)(struct net_device *) ;
   struct sk_buff *(*l3mdev_l3_rcv)(struct net_device *, struct sk_buff *, u16 ) ;
   struct sk_buff *(*l3mdev_l3_out)(struct net_device *, struct sock *, struct sk_buff *, u16 ) ;
   struct dst_entry *(*l3mdev_link_scope_lookup)(struct net_device *, struct flowi6 *) ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
struct __anonstruct_socket_lock_t_840 {
   spinlock_t slock ;
   int owned ;
   wait_queue_head_t wq ;
   struct lockdep_map dep_map ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
typedef struct __anonstruct_socket_lock_t_840 socket_lock_t;
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct proto;
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
typedef __u32 __portpair;
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
typedef __u64 __addrpair;
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_842 {
   __be32 skc_daddr ;
   __be32 skc_rcv_saddr ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_841 {
   __addrpair skc_addrpair ;
   struct __anonstruct_842 __anonCompField___anonunion_841_176 ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_843 {
   unsigned int skc_hash ;
   __u16 skc_u16hashes[2U] ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_845 {
   __be16 skc_dport ;
   __u16 skc_num ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_844 {
   __portpair skc_portpair ;
   struct __anonstruct_845 __anonCompField___anonunion_844_179 ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_846 {
   struct hlist_node skc_bind_node ;
   struct hlist_node skc_portaddr_node ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_847 {
   unsigned long skc_flags ;
   struct sock *skc_listener ;
   struct inet_timewait_death_row *skc_tw_dr ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_848 {
   struct hlist_node skc_node ;
   struct hlist_nulls_node skc_nulls_node ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_849 {
   int skc_incoming_cpu ;
   u32 skc_rcv_wnd ;
   u32 skc_tw_rcv_nxt ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_850 {
   u32 skc_rxhash ;
   u32 skc_window_clamp ;
   u32 skc_tw_snd_nxt ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct sock_common {
   union __anonunion_841 __anonCompField_sock_common_177 ;
   union __anonunion_843 __anonCompField_sock_common_178 ;
   union __anonunion_844 __anonCompField_sock_common_180 ;
   unsigned short skc_family ;
   unsigned char skc_state ;
   unsigned char skc_reuse : 4 ;
   unsigned char skc_reuseport : 1 ;
   unsigned char skc_ipv6only : 1 ;
   unsigned char skc_net_refcnt : 1 ;
   int skc_bound_dev_if ;
   union __anonunion_846 __anonCompField_sock_common_181 ;
   struct proto *skc_prot ;
   possible_net_t skc_net ;
   struct in6_addr skc_v6_daddr ;
   struct in6_addr skc_v6_rcv_saddr ;
   atomic64_t skc_cookie ;
   union __anonunion_847 __anonCompField_sock_common_182 ;
   int skc_dontcopy_begin[0U] ;
   union __anonunion_848 __anonCompField_sock_common_183 ;
   unsigned short skc_tx_queue_mapping ;
   unsigned short skc_rx_queue_mapping ;
   union __anonunion_849 __anonCompField_sock_common_184 ;
   refcount_t skc_refcnt ;
   int skc_dontcopy_end[0U] ;
   union __anonunion_850 __anonCompField_sock_common_185 ;
};
#line 231 
struct bpf_sk_storage;
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_sk_backlog_851 {
   atomic_t rmem_alloc ;
   int len ;
   struct sk_buff *head ;
   struct sk_buff *tail ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_852 {
   struct socket_wq *sk_wq ;
   struct socket_wq *sk_wq_raw ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_853 {
   struct sk_buff *sk_send_head ;
   struct rb_root tcp_rtx_queue ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct sock {
   struct sock_common __sk_common ;
   socket_lock_t sk_lock ;
   atomic_t sk_drops ;
   int sk_rcvlowat ;
   struct sk_buff_head sk_error_queue ;
   struct sk_buff *sk_rx_skb_cache ;
   struct sk_buff_head sk_receive_queue ;
   struct __anonstruct_sk_backlog_851 sk_backlog ;
   int sk_forward_alloc ;
   unsigned int sk_ll_usec ;
   unsigned int sk_napi_id ;
   int sk_rcvbuf ;
   struct sk_filter *sk_filter ;
   union __anonunion_852 __anonCompField_sock_186 ;
   struct xfrm_policy *sk_policy[2U] ;
   struct dst_entry *sk_rx_dst ;
   struct dst_entry *sk_dst_cache ;
   atomic_t sk_omem_alloc ;
   int sk_sndbuf ;
   int sk_wmem_queued ;
   refcount_t sk_wmem_alloc ;
   unsigned long sk_tsq_flags ;
   union __anonunion_853 __anonCompField_sock_187 ;
   struct sk_buff *sk_tx_skb_cache ;
   struct sk_buff_head sk_write_queue ;
   __s32 sk_peek_off ;
   int sk_write_pending ;
   __u32 sk_dst_pending_confirm ;
   u32 sk_pacing_status ;
   long sk_sndtimeo ;
   struct timer_list sk_timer ;
   __u32 sk_priority ;
   __u32 sk_mark ;
   unsigned long sk_pacing_rate ;
   unsigned long sk_max_pacing_rate ;
   struct page_frag sk_frag ;
   netdev_features_t sk_route_caps ;
   netdev_features_t sk_route_nocaps ;
   netdev_features_t sk_route_forced_caps ;
   int sk_gso_type ;
   unsigned int sk_gso_max_size ;
   gfp_t sk_allocation ;
   __u32 sk_txhash ;
   unsigned int __sk_flags_offset[0U] ;
   unsigned int sk_padding : 1 ;
   unsigned int sk_kern_sock : 1 ;
   unsigned int sk_no_check_tx : 1 ;
   unsigned int sk_no_check_rx : 1 ;
   unsigned int sk_userlocks : 4 ;
   unsigned int sk_protocol : 8 ;
   unsigned int sk_type : 16 ;
   u16 sk_gso_max_segs ;
   u8 sk_pacing_shift ;
   unsigned long sk_lingertime ;
   struct proto *sk_prot_creator ;
   rwlock_t sk_callback_lock ;
   int sk_err ;
   int sk_err_soft ;
   u32 sk_ack_backlog ;
   u32 sk_max_ack_backlog ;
   kuid_t sk_uid ;
   struct pid *sk_peer_pid ;
   struct cred *sk_peer_cred ;
   long sk_rcvtimeo ;
   ktime_t sk_stamp ;
   u16 sk_tsflags ;
   u8 sk_shutdown ;
   u32 sk_tskey ;
   atomic_t sk_zckey ;
   u8 sk_clockid ;
   u8 sk_txtime_deadline_mode : 1 ;
   u8 sk_txtime_report_errors : 1 ;
   u8 sk_txtime_unused : 6 ;
   struct socket *sk_socket ;
   void *sk_user_data ;
   void *sk_security ;
   struct sock_cgroup_data sk_cgrp_data ;
   struct mem_cgroup *sk_memcg ;
   void (*sk_state_change)(struct sock *) ;
   void (*sk_data_ready)(struct sock *) ;
   void (*sk_write_space)(struct sock *) ;
   void (*sk_error_report)(struct sock *) ;
   int (*sk_backlog_rcv)(struct sock *, struct sk_buff *) ;
   struct sk_buff *(*sk_validate_xmit_skb)(struct sock *, struct net_device *, struct sk_buff *) ;
   void (*sk_destruct)(struct sock *) ;
   struct sock_reuseport *sk_reuseport_cb ;
   struct bpf_sk_storage *sk_bpf_storage ;
   struct callback_head sk_rcu ;
};
#line 1048 
struct request_sock_ops;
#line 1049 
struct timewait_sock_ops;
#line 1050 
struct raw_hashinfo;
#line 1051 
struct smc_hashinfo;
#line 1071 
struct udp_table;
#line 1071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_h_888 {
   struct inet_hashinfo *hashinfo ;
   struct udp_table *udp_table ;
   struct raw_hashinfo *raw_hash ;
   struct smc_hashinfo *smc_hash ;
};
#line 1071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct proto {
   void (*close)(struct sock *, long ) ;
   int (*pre_connect)(struct sock *, struct sockaddr *, int ) ;
   int (*connect)(struct sock *, struct sockaddr *, int ) ;
   int (*disconnect)(struct sock *, int ) ;
   struct sock *(*accept)(struct sock *, int , int *, bool ) ;
   int (*ioctl)(struct sock *, int , unsigned long ) ;
   int (*init)(struct sock *) ;
   void (*destroy)(struct sock *) ;
   void (*shutdown)(struct sock *, int ) ;
   int (*setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct sock *, int , int , char *, int *) ;
   void (*keepalive)(struct sock *, int ) ;
   int (*compat_setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct sock *, int , int , char *, int *) ;
   int (*compat_ioctl)(struct sock *, unsigned int , unsigned long ) ;
   int (*sendmsg)(struct sock *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct sock *, struct msghdr *, size_t , int , int , int *) ;
   int (*sendpage)(struct sock *, struct page *, int , size_t , int ) ;
   int (*bind)(struct sock *, struct sockaddr *, int ) ;
   int (*backlog_rcv)(struct sock *, struct sk_buff *) ;
   void (*release_cb)(struct sock *) ;
   int (*hash)(struct sock *) ;
   void (*unhash)(struct sock *) ;
   void (*rehash)(struct sock *) ;
   int (*get_port)(struct sock *, unsigned short ) ;
   unsigned int inuse_idx ;
   bool (*stream_memory_free)(struct sock *, int ) ;
   bool (*stream_memory_read)(struct sock *) ;
   void (*enter_memory_pressure)(struct sock *) ;
   void (*leave_memory_pressure)(struct sock *) ;
   atomic_long_t *memory_allocated ;
   struct percpu_counter *sockets_allocated ;
   unsigned long *memory_pressure ;
   long *sysctl_mem ;
   int *sysctl_wmem ;
   int *sysctl_rmem ;
   u32 sysctl_wmem_offset ;
   u32 sysctl_rmem_offset ;
   int max_header ;
   bool no_autobind ;
   struct kmem_cache *slab ;
   unsigned int obj_size ;
   slab_flags_t slab_flags ;
   unsigned int useroffset ;
   unsigned int usersize ;
   struct percpu_counter *orphan_count ;
   struct request_sock_ops *rsk_prot ;
   struct timewait_sock_ops *twsk_prot ;
   union __anonunion_h_888 h ;
   struct module *owner ;
   char name[32U] ;
   struct list_head node ;
   int (*diag_destroy)(struct sock *, int ) ;
} __attribute__((__designated_init__));
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/request_sock.h"
struct request_sock_ops {
   int family ;
   unsigned int obj_size ;
   struct kmem_cache *slab ;
   char *slab_name ;
   int (*rtx_syn_ack)(struct sock *, struct request_sock *) ;
   void (*send_ack)(struct sock *, struct sk_buff *, struct request_sock *) ;
   void (*send_reset)(struct sock *, struct sk_buff *) ;
   void (*destructor)(struct request_sock *) ;
   void (*syn_ack_timeout)(struct request_sock *) ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/request_sock.h"
struct request_sock {
   struct sock_common __req_common ;
   struct request_sock *dl_next ;
   u16 mss ;
   u8 num_retrans ;
   u8 cookie_ts : 1 ;
   u8 num_timeout : 7 ;
   u32 ts_recent ;
   struct timer_list rsk_timer ;
   struct request_sock_ops *rsk_ops ;
   struct sock *sk ;
   u32 *saved_syn ;
   u32 secid ;
   u32 peer_secid ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/timewait_sock.h"
struct timewait_sock_ops {
   struct kmem_cache *twsk_slab ;
   char *twsk_slab_name ;
   unsigned int twsk_obj_size ;
   int (*twsk_unique)(struct sock *, struct sock *, void *) ;
   void (*twsk_destructor)(struct sock *) ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/tcp.h"
struct tcphdr {
   __be16 source ;
   __be16 dest ;
   __be32 seq ;
   __be32 ack_seq ;
   __u16 res1 : 4 ;
   __u16 doff : 4 ;
   __u16 fin : 1 ;
   __u16 syn : 1 ;
   __u16 rst : 1 ;
   __u16 psh : 1 ;
   __u16 ack : 1 ;
   __u16 urg : 1 ;
   __u16 ece : 1 ;
   __u16 cwr : 1 ;
   __be16 window ;
   __sum16 check ;
   __be16 urg_ptr ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/udp.h"
struct udphdr {
   __be16 source ;
   __be16 dest ;
   __be16 len ;
   __sum16 check ;
};
#line 374  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
typedef unsigned long kernel_ulong_t;
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct pci_device_id {
   __u32 vendor ;
   __u32 device ;
   __u32 subvendor ;
   __u32 subdevice ;
   __u32 class ;
   __u32 class_mask ;
   kernel_ulong_t driver_data ;
};
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct acpi_device_id {
   __u8 id[9U] ;
   kernel_ulong_t driver_data ;
   __u32 cls ;
   __u32 cls_msk ;
};
#line 260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct of_device_id {
   char name[32U] ;
   char type[32U] ;
   char compatible[128U] ;
   void *data ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct hotplug_slot;
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_slot {
   struct pci_bus *bus ;
   struct list_head list ;
   struct hotplug_slot *hotplug ;
   unsigned char number ;
   struct kobject kobj ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef int pci_power_t;
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned int pci_channel_state_t;
#line 162 
enum pci_channel_state {
    pci_channel_io_normal = 1,
    pci_channel_io_frozen = 2,
    pci_channel_io_perm_failure = 3
};
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned short pci_dev_flags_t;
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned short pci_bus_flags_t;
#line 282 
struct pcie_link_state;
#line 283 
struct pci_vpd;
#line 284 
struct pci_sriov;
#line 285 
struct pci_p2pdma;
#line 290 
struct aer_stats;
#line 290 
struct pci_driver;
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
union __anonunion_961 {
   struct pci_sriov *sriov ;
   struct pci_dev *physfn ;
};
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_dev {
   struct list_head bus_list ;
   struct pci_bus *bus ;
   struct pci_bus *subordinate ;
   void *sysdata ;
   struct proc_dir_entry *procent ;
   struct pci_slot *slot ;
   unsigned int devfn ;
   unsigned short vendor ;
   unsigned short device ;
   unsigned short subsystem_vendor ;
   unsigned short subsystem_device ;
   unsigned int class ;
   u8 revision ;
   u8 hdr_type ;
   u16 aer_cap ;
   struct aer_stats *aer_stats ;
   u8 pcie_cap ;
   u8 msi_cap ;
   u8 msix_cap ;
   u8 pcie_mpss : 3 ;
   u8 rom_base_reg ;
   u8 pin ;
   u16 pcie_flags_reg ;
   unsigned long *dma_alias_mask ;
   struct pci_driver *driver ;
   u64 dma_mask ;
   struct device_dma_parameters dma_parms ;
   pci_power_t current_state ;
   unsigned int imm_ready : 1 ;
   u8 pm_cap ;
   unsigned int pme_support : 5 ;
   unsigned int pme_poll : 1 ;
   unsigned int d1_support : 1 ;
   unsigned int d2_support : 1 ;
   unsigned int no_d1d2 : 1 ;
   unsigned int no_d3cold : 1 ;
   unsigned int bridge_d3 : 1 ;
   unsigned int d3cold_allowed : 1 ;
   unsigned int mmio_always_on : 1 ;
   unsigned int wakeup_prepared : 1 ;
   unsigned int runtime_d3cold : 1 ;
   unsigned int skip_bus_pm : 1 ;
   unsigned int ignore_hotplug : 1 ;
   unsigned int hotplug_user_indicators : 1 ;
   unsigned int clear_retrain_link : 1 ;
   unsigned int d3_delay ;
   unsigned int d3cold_delay ;
   struct pcie_link_state *link_state ;
   unsigned int ltr_path : 1 ;
   unsigned int eetlp_prefix_path : 1 ;
   pci_channel_state_t error_state ;
   struct device dev ;
   int cfg_size ;
   unsigned int irq ;
   struct resource resource[17U] ;
   bool match_driver ;
   unsigned int transparent : 1 ;
   unsigned int io_window : 1 ;
   unsigned int pref_window : 1 ;
   unsigned int pref_64_window : 1 ;
   unsigned int multifunction : 1 ;
   unsigned int is_busmaster : 1 ;
   unsigned int no_msi : 1 ;
   unsigned int no_64bit_msi : 1 ;
   unsigned int block_cfg_access : 1 ;
   unsigned int broken_parity_status : 1 ;
   unsigned int irq_reroute_variant : 2 ;
   unsigned int msi_enabled : 1 ;
   unsigned int msix_enabled : 1 ;
   unsigned int ari_enabled : 1 ;
   unsigned int ats_enabled : 1 ;
   unsigned int pasid_enabled : 1 ;
   unsigned int pri_enabled : 1 ;
   unsigned int is_managed : 1 ;
   unsigned int needs_freset : 1 ;
   unsigned int state_saved : 1 ;
   unsigned int is_physfn : 1 ;
   unsigned int is_virtfn : 1 ;
   unsigned int reset_fn : 1 ;
   unsigned int is_hotplug_bridge : 1 ;
   unsigned int shpc_managed : 1 ;
   unsigned int is_thunderbolt : 1 ;
   unsigned int untrusted : 1 ;
   unsigned int __aer_firmware_first_valid : 1 ;
   unsigned int __aer_firmware_first : 1 ;
   unsigned int broken_intx_masking : 1 ;
   unsigned int io_window_1k : 1 ;
   unsigned int irq_managed : 1 ;
   unsigned int non_compliant_bars : 1 ;
   unsigned int is_probed : 1 ;
   unsigned int link_active_reporting : 1 ;
   unsigned int no_vf_scan : 1 ;
   pci_dev_flags_t dev_flags ;
   atomic_t enable_cnt ;
   u32 saved_config_space[16U] ;
   struct hlist_head saved_cap_space ;
   struct bin_attribute *rom_attr ;
   int rom_attr_enabled ;
   struct bin_attribute *res_attr[17U] ;
   struct bin_attribute *res_attr_wc[17U] ;
   unsigned int broken_cmd_compl : 1 ;
   unsigned int ptm_root : 1 ;
   unsigned int ptm_enabled : 1 ;
   u8 ptm_granularity ;
   struct attribute_group **msi_irq_groups ;
   struct pci_vpd *vpd ;
   union __anonunion_961 __anonCompField_pci_dev_190 ;
   u16 ats_cap ;
   u8 ats_stu ;
   u16 pri_cap ;
   u32 pri_reqs_alloc ;
   unsigned int pasid_required : 1 ;
   u16 pasid_cap ;
   u16 pasid_features ;
   struct pci_p2pdma *p2pdma ;
   phys_addr_t rom ;
   size_t romlen ;
   char *driver_override ;
   unsigned long priv_flags ;
};
#line 493 
struct pci_ops;
#line 493 
struct msi_controller;
#line 571  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_bus {
   struct list_head node ;
   struct pci_bus *parent ;
   struct list_head children ;
   struct list_head devices ;
   struct pci_dev *self ;
   struct list_head slots ;
   struct resource *resource[4U] ;
   struct list_head resources ;
   struct resource busn_res ;
   struct pci_ops *ops ;
   struct msi_controller *msi ;
   void *sysdata ;
   struct proc_dir_entry *procdir ;
   unsigned char number ;
   unsigned char primary ;
   unsigned char max_bus_speed ;
   unsigned char cur_bus_speed ;
   char name[48U] ;
   unsigned short bridge_ctl ;
   pci_bus_flags_t bus_flags ;
   struct device *bridge ;
   struct device dev ;
   struct bin_attribute *legacy_io ;
   struct bin_attribute *legacy_mem ;
   unsigned int is_added : 1 ;
};
#line 697  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_ops {
   int (*add_bus)(struct pci_bus *) ;
   void (*remove_bus)(struct pci_bus *) ;
   void *(*map_bus)(struct pci_bus *, unsigned int , int ) ;
   int (*read)(struct pci_bus *, unsigned int , int , int , u32 *) ;
   int (*write)(struct pci_bus *, unsigned int , int , int , u32 ) ;
};
#line 725  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_dynids {
   spinlock_t lock ;
   struct list_head list ;
};
#line 729  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned int pci_ers_result_t;
#line 761  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_error_handlers {
   pci_ers_result_t (*error_detected)(struct pci_dev *, enum pci_channel_state ) ;
   pci_ers_result_t (*mmio_enabled)(struct pci_dev *) ;
   pci_ers_result_t (*slot_reset)(struct pci_dev *) ;
   void (*reset_prepare)(struct pci_dev *) ;
   void (*reset_done)(struct pci_dev *) ;
   void (*resume)(struct pci_dev *) ;
};
#line 824  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_driver {
   struct list_head node ;
   char *name ;
   struct pci_device_id *id_table ;
   int (*probe)(struct pci_dev *, struct pci_device_id *) ;
   void (*remove)(struct pci_dev *) ;
   int (*suspend)(struct pci_dev *, pm_message_t ) ;
   int (*resume)(struct pci_dev *) ;
   void (*shutdown)(struct pci_dev *) ;
   int (*sriov_configure)(struct pci_dev *, int ) ;
   struct pci_error_handlers *err_handler ;
   struct attribute_group **groups ;
   struct device_driver driver ;
   struct pci_dynids dynids ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/generic.h"
struct __anonstruct_s_968 {
   unsigned int len ;
   struct callback_head rcu ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/generic.h"
union __anonunion_967 {
   struct __anonstruct_s_968 s ;
   void *ptr[0U] ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/generic.h"
struct net_generic {
   union __anonunion_967 __anonCompField_net_generic_192 ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ip6_sf_list {
   struct ip6_sf_list *sf_next ;
   struct in6_addr sf_addr ;
   unsigned long sf_count[2U] ;
   unsigned char sf_gsresp ;
   unsigned char sf_oldin ;
   unsigned char sf_crcount ;
};
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ifmcaddr6 {
   struct in6_addr mca_addr ;
   struct inet6_dev *idev ;
   struct ifmcaddr6 *next ;
   struct ip6_sf_list *mca_sources ;
   struct ip6_sf_list *mca_tomb ;
   unsigned int mca_sfmode ;
   unsigned char mca_crcount ;
   unsigned long mca_sfcount[2U] ;
   struct timer_list mca_timer ;
   unsigned int mca_flags ;
   int mca_users ;
   refcount_t mca_refcnt ;
   spinlock_t mca_lock ;
   unsigned long mca_cstamp ;
   unsigned long mca_tstamp ;
};
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ifacaddr6 {
   struct in6_addr aca_addr ;
   struct fib6_info *aca_rt ;
   struct ifacaddr6 *aca_next ;
   struct hlist_node aca_addr_lst ;
   int aca_users ;
   refcount_t aca_refcnt ;
   unsigned long aca_cstamp ;
   unsigned long aca_tstamp ;
   struct callback_head rcu ;
};
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ipv6_devstat {
   struct proc_dir_entry *proc_dir_entry ;
   struct ipstats_mib *ipv6 ;
   struct icmpv6_mib_device *icmpv6dev ;
   struct icmpv6msg_mib_device *icmpv6msgdev ;
};
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct inet6_dev {
   struct net_device *dev ;
   struct list_head addr_list ;
   struct ifmcaddr6 *mc_list ;
   struct ifmcaddr6 *mc_tomb ;
   spinlock_t mc_lock ;
   unsigned char mc_qrv ;
   unsigned char mc_gq_running ;
   unsigned char mc_ifc_count ;
   unsigned char mc_dad_count ;
   unsigned long mc_v1_seen ;
   unsigned long mc_qi ;
   unsigned long mc_qri ;
   unsigned long mc_maxdelay ;
   struct timer_list mc_gq_timer ;
   struct timer_list mc_ifc_timer ;
   struct timer_list mc_dad_timer ;
   struct ifacaddr6 *ac_list ;
   rwlock_t lock ;
   refcount_t refcnt ;
   __u32 if_flags ;
   int dead ;
   u32 desync_factor ;
   u8 rndid[8U] ;
   struct list_head tempaddr_list ;
   struct in6_addr token ;
   struct neigh_parms *nd_parms ;
   struct ipv6_devconf cnf ;
   struct ipv6_devstat stats ;
   struct timer_list rs_timer ;
   __s32 rs_interval ;
   __u8 rs_probes ;
   unsigned long tstamp ;
   struct callback_head rcu ;
};
#line 261 
struct fib6_nh;
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_arp.h"
struct prefix_info;
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ndisc.h"
struct nd_opt_hdr {
   __u8 nd_opt_type ;
   __u8 nd_opt_len ;
} __attribute__((__packed__));
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ndisc.h"
struct ndisc_options {
   struct nd_opt_hdr *nd_opt_array[15U] ;
   struct nd_opt_hdr *nd_opts_ri ;
   struct nd_opt_hdr *nd_opts_ri_end ;
   struct nd_opt_hdr *nd_useropts ;
   struct nd_opt_hdr *nd_useropts_end ;
   struct nd_opt_hdr *nd_802154_opt_array[3U] ;
};
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ndisc.h"
struct ndisc_ops {
   int (*is_useropt)(u8 ) ;
   int (*parse_options)(struct net_device *, struct nd_opt_hdr *, struct ndisc_options *) ;
   void (*update)(struct net_device *, struct neighbour *, u32 , u8 , struct ndisc_options *) ;
   int (*opt_addr_space)(struct net_device *, u8 , struct neighbour *, u8 *, u8 **) ;
   void (*fill_addr_option)(struct net_device *, struct sk_buff *, u8 , u8 *) ;
   void (*prefix_rcv_add_addr)(struct net *, struct net_device *, struct prefix_info *, struct inet6_dev *, struct in6_addr *, int , u32 , bool , bool , __u32 , u32 , bool ) ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inetpeer.h"
struct inet_peer_base {
   struct rb_root rb_root ;
   seqlock_t lock ;
   int total ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip_fib.h"
struct fib_info;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip_fib.h"
struct fib_nh_exception {
   struct fib_nh_exception *fnhe_next ;
   int fnhe_genid ;
   __be32 fnhe_daddr ;
   u32 fnhe_pmtu ;
   bool fnhe_mtu_locked ;
   __be32 fnhe_gw ;
   unsigned long fnhe_expires ;
   struct rtable *fnhe_rth_input ;
   struct rtable *fnhe_rth_output ;
   unsigned long fnhe_stamp ;
   struct callback_head rcu ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip_fib.h"
struct fnhe_hash_bucket {
   struct fib_nh_exception *chain ;
};
#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip_fib.h"
union __anonunion_nhc_gw_986 {
   __be32 ipv4 ;
   struct in6_addr ipv6 ;
};
#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip_fib.h"
struct fib_nh_common {
   struct net_device *nhc_dev ;
   int nhc_oif ;
   unsigned char nhc_scope ;
   u8 nhc_family ;
   u8 nhc_gw_family ;
   unsigned char nhc_flags ;
   struct lwtunnel_state *nhc_lwtstate ;
   union __anonunion_nhc_gw_986 nhc_gw ;
   int nhc_weight ;
   atomic_t nhc_upper_bound ;
   struct rtable **nhc_pcpu_rth_output ;
   struct rtable *nhc_rth_input ;
   struct fnhe_hash_bucket *nhc_exceptions ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip_fib.h"
struct fib_nh {
   struct fib_nh_common nh_common ;
   struct hlist_node nh_hash ;
   struct fib_info *nh_parent ;
   __u32 nh_tclassid ;
   __be32 nh_saddr ;
   int nh_saddr_genid ;
};
#line 113 
struct nexthop;
#line 131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip_fib.h"
struct fib_info {
   struct hlist_node fib_hash ;
   struct hlist_node fib_lhash ;
   struct list_head nh_list ;
   struct net *fib_net ;
   int fib_treeref ;
   refcount_t fib_clntref ;
   unsigned int fib_flags ;
   unsigned char fib_dead ;
   unsigned char fib_protocol ;
   unsigned char fib_scope ;
   unsigned char fib_type ;
   __be32 fib_prefsrc ;
   u32 fib_tb_id ;
   u32 fib_priority ;
   struct dst_metrics *fib_metrics ;
   int fib_nhs ;
   bool fib_nh_is_v6 ;
   bool nh_updated ;
   struct nexthop *nh ;
   struct callback_head rcu ;
   struct fib_nh fib_nh[0U] ;
};
#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip_fib.h"
struct fib_table {
   struct hlist_node tb_hlist ;
   u32 tb_id ;
   int tb_num_default ;
   struct callback_head rcu ;
   unsigned long *tb_data ;
   unsigned long __data[0U] ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/route.h"
struct uncached_list;
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/route.h"
union __anonunion_995 {
   __be32 rt_gw4 ;
   struct in6_addr rt_gw6 ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/route.h"
struct rtable {
   struct dst_entry dst ;
   int rt_genid ;
   unsigned int rt_flags ;
   __u16 rt_type ;
   __u8 rt_is_input ;
   __u8 rt_uses_gateway ;
   int rt_iif ;
   u8 rt_gw_family ;
   union __anonunion_995 __anonCompField_rtable_197 ;
   u32 rt_mtu_locked : 1 ;
   u32 rt_pmtu : 31 ;
   struct list_head rt_uncached ;
   struct uncached_list *rt_uncached_list ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/lwtunnel.h"
struct lwtunnel_state {
   __u16 type ;
   __u16 flags ;
   __u16 headroom ;
   atomic_t refcnt ;
   int (*orig_output)(struct net *, struct sock *, struct sk_buff *) ;
   int (*orig_input)(struct sk_buff *) ;
   struct callback_head rcu ;
   __u8 data[0U] ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip6_fib.h"
struct fib6_node {
   struct fib6_node *parent ;
   struct fib6_node *left ;
   struct fib6_node *right ;
   struct fib6_node *subtree ;
   struct fib6_info *leaf ;
   __u16 fn_bit ;
   __u16 fn_flags ;
   int fn_sernum ;
   struct fib6_info *rr_ptr ;
   struct callback_head rcu ;
};
#line 127  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip6_fib.h"
struct rt6key {
   struct in6_addr addr ;
   int plen ;
};
#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip6_fib.h"
struct rt6_exception_bucket {
   struct hlist_head chain ;
   int depth ;
};
#line 150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip6_fib.h"
struct fib6_nh {
   struct fib_nh_common nh_common ;
   unsigned long last_probe ;
   struct rt6_info **rt6i_pcpu ;
   struct rt6_exception_bucket *rt6i_exception_bucket ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip6_fib.h"
union __anonunion_996 {
   struct list_head fib6_siblings ;
   struct list_head nh_list ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip6_fib.h"
struct fib6_info {
   struct fib6_table *fib6_table ;
   struct fib6_info *fib6_next ;
   struct fib6_node *fib6_node ;
   union __anonunion_996 __anonCompField_fib6_info_198 ;
   unsigned int fib6_nsiblings ;
   refcount_t fib6_ref ;
   unsigned long expires ;
   struct dst_metrics *fib6_metrics ;
   struct rt6key fib6_dst ;
   u32 fib6_flags ;
   struct rt6key fib6_src ;
   struct rt6key fib6_prefsrc ;
   u32 fib6_metric ;
   u8 fib6_protocol ;
   u8 fib6_type ;
   u8 should_flush : 1 ;
   u8 dst_nocount : 1 ;
   u8 dst_nopolicy : 1 ;
   u8 dst_host : 1 ;
   u8 fib6_destroying : 1 ;
   u8 unused : 3 ;
   struct callback_head rcu ;
   struct nexthop *nh ;
   struct fib6_nh fib6_nh[0U] ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip6_fib.h"
struct rt6_info {
   struct dst_entry dst ;
   struct fib6_info *from ;
   struct rt6key rt6i_dst ;
   struct rt6key rt6i_src ;
   struct in6_addr rt6i_gateway ;
   struct inet6_dev *rt6i_idev ;
   u32 rt6i_flags ;
   struct list_head rt6i_uncached ;
   struct uncached_list *rt6i_uncached_list ;
   unsigned short rt6i_nfheader_len ;
};
#line 354  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip6_fib.h"
struct rt6_statistics {
   __u32 fib_nodes ;
   __u32 fib_route_nodes ;
   __u32 fib_rt_entries ;
   __u32 fib_rt_cache ;
   __u32 fib_discarded_routes ;
   atomic_t fib_rt_alloc ;
   atomic_t fib_rt_uncache ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip6_fib.h"
struct fib6_table {
   struct hlist_node tb6_hlist ;
   u32 tb6_id ;
   spinlock_t tb6_lock ;
   struct fib6_node tb6_root ;
   struct inet_peer_base tb6_peers ;
   unsigned int flags ;
   unsigned int fib_seq ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/addrconf.h"
struct prefix_info {
   __u8 type ;
   __u8 length ;
   __u8 prefix_len ;
   __u8 reserved : 6 ;
   __u8 autoconf : 1 ;
   __u8 onlink : 1 ;
   __be32 valid ;
   __be32 prefered ;
   __be32 reserved2 ;
   struct in6_addr prefix ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/nexthop.h"
union __anonunion_1010 {
   struct fib_nh_common fib_nhc ;
   struct fib_nh fib_nh ;
   struct fib6_nh fib6_nh ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/nexthop.h"
struct nh_info {
   struct hlist_node dev_hash ;
   struct nexthop *nh_parent ;
   u8 family ;
   bool reject_nh ;
   union __anonunion_1010 __anonCompField_nh_info_199 ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/nexthop.h"
struct nh_grp_entry {
   struct nexthop *nh ;
   u8 weight ;
   atomic_t upper_bound ;
   struct list_head nh_list ;
   struct nexthop *nh_parent ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/nexthop.h"
struct nh_group {
   u16 num_nh ;
   bool mpath ;
   bool has_v4 ;
   struct nh_grp_entry nh_entries[0U] ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/nexthop.h"
union __anonunion_1011 {
   struct nh_info *nh_info ;
   struct nh_group *nh_grp ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/nexthop.h"
struct nexthop {
   struct rb_node rb_node ;
   struct list_head fi_list ;
   struct list_head f6i_list ;
   struct list_head grp_list ;
   struct net *net ;
   u32 id ;
   u8 protocol ;
   u8 nh_flags ;
   bool is_group ;
   refcount_t refcnt ;
   struct callback_head rcu ;
   union __anonunion_1011 __anonCompField_nexthop_200 ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gre.h"
struct gre_base_hdr {
   __be16 flags ;
   __be16 protocol ;
} __attribute__((__packed__));
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip.h"
union __anonunion_1037 {
   void (*destructor)(struct sock *) ;
   struct sock *saved_sk ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip.h"
struct ip_ra_chain {
   struct ip_ra_chain *next ;
   struct sock *sk ;
   union __anonunion_1037 __anonCompField_ip_ra_chain_201 ;
   struct callback_head rcu ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/pkt_sched.h"
struct qdisc_walker {
   int stop ;
   int skip ;
   int count ;
   int (*fn)(struct Qdisc *, unsigned long , struct qdisc_walker *) ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/pkt_cls.h"
struct tcf_walker {
   int stop ;
   int skip ;
   int count ;
   bool nonempty ;
   unsigned long cookie ;
   int (*fn)(struct tcf_proto *, void *, struct tcf_walker *) ;
};
#line 665  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/pkt_cls.h"
struct tc_mqprio_qopt_offload {
   struct tc_mqprio_qopt qopt ;
   u16 mode ;
   u16 shaper ;
   u32 flags ;
   u64 min_rate[16U] ;
   u64 max_rate[16U] ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_hashtables.h"
struct inet_ehash_bucket {
   struct hlist_nulls_head chain ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_hashtables.h"
struct inet_bind_hashbucket {
   spinlock_t lock ;
   struct hlist_head chain ;
};
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_hashtables.h"
union __anonunion_1049 {
   struct hlist_head head ;
   struct hlist_nulls_head nulls_head ;
};
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_hashtables.h"
struct inet_listen_hashbucket {
   spinlock_t lock ;
   unsigned int count ;
   union __anonunion_1049 __anonCompField_inet_listen_hashbucket_207 ;
};
#line 124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_hashtables.h"
struct inet_hashinfo {
   struct inet_ehash_bucket *ehash ;
   spinlock_t *ehash_locks ;
   unsigned int ehash_mask ;
   unsigned int ehash_locks_mask ;
   struct kmem_cache *bind_bucket_cachep ;
   struct inet_bind_hashbucket *bhash ;
   unsigned int bhash_size ;
   unsigned int lhash2_mask ;
   struct inet_listen_hashbucket *lhash2 ;
   struct inet_listen_hashbucket listening_hash[32U] ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock_reuseport.h"
struct sock_reuseport {
   struct callback_head rcu ;
   u16 max_socks ;
   u16 num_socks ;
   unsigned int synq_overflow_ts ;
   unsigned int reuseport_id ;
   unsigned int bind_inany : 1 ;
   unsigned int has_conns : 1 ;
   struct bpf_prog *prog ;
   struct sock *socks[0U] ;
};
#line 979  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/tcp.h"
enum tcp_ca_event {
    CA_EVENT_TX_START = 0,
    CA_EVENT_CWND_RESTART = 1,
    CA_EVENT_COMPLETE_CWR = 2,
    CA_EVENT_LOSS = 3,
    CA_EVENT_ECN_NO_CE = 4,
    CA_EVENT_ECN_IS_CE = 5
};
#line 994 
union tcp_cc_info;
#line 1013  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/tcp.h"
struct ack_sample {
   u32 pkts_acked ;
   s32 rtt_us ;
   u32 in_flight ;
};
#line 1027  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/tcp.h"
struct rate_sample {
   u64 prior_mstamp ;
   u32 prior_delivered ;
   s32 delivered ;
   long interval_us ;
   u32 snd_interval_us ;
   u32 rcv_interval_us ;
   long rtt_us ;
   int losses ;
   u32 acked_sacked ;
   u32 prior_in_flight ;
   bool is_app_limited ;
   bool is_retrans ;
   bool is_ack_delayed ;
};
#line 1043  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/tcp.h"
struct tcp_congestion_ops {
   struct list_head list ;
   u32 key ;
   u32 flags ;
   void (*init)(struct sock *) ;
   void (*release)(struct sock *) ;
   u32 (*ssthresh)(struct sock *) ;
   void (*cong_avoid)(struct sock *, u32 , u32 ) ;
   void (*set_state)(struct sock *, u8 ) ;
   void (*cwnd_event)(struct sock *, enum tcp_ca_event ) ;
   void (*in_ack_event)(struct sock *, u32 ) ;
   u32 (*undo_cwnd)(struct sock *) ;
   void (*pkts_acked)(struct sock *, struct ack_sample *) ;
   u32 (*min_tso_segs)(struct sock *) ;
   u32 (*sndbuf_expand)(struct sock *) ;
   void (*cong_control)(struct sock *, struct rate_sample *) ;
   size_t (*get_info)(struct sock *, u32 , int *, union tcp_cc_info *) ;
   char name[16U] ;
   struct module *owner ;
};
#line 1661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/tcp.h"
struct tcp_fastopen_context {
   siphash_key_t key[2U] ;
   int num ;
   struct callback_head rcu ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/udp.h"
struct udp_hslot {
   struct hlist_head head ;
   int count ;
   spinlock_t lock ;
} __attribute__((__aligned__(16)));
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/udp.h"
struct udp_table {
   struct udp_hslot *hash ;
   struct udp_hslot *hash2 ;
   unsigned int mask ;
   unsigned int log ;
};
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/udp_tunnel.h"
struct udp_tunnel_info {
   unsigned short type ;
   sa_family_t sa_family ;
   __be16 port ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/property.h"
typedef u32 phandle;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct property {
   char *name ;
   int length ;
   void *value ;
   struct property *next ;
   unsigned long _flags ;
   struct bin_attribute attr ;
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct device_node {
   char *name ;
   phandle phandle ;
   char *full_name ;
   struct fwnode_handle fwnode ;
   struct property *properties ;
   struct property *deadprops ;
   struct device_node *parent ;
   struct device_node *child ;
   struct device_node *sibling ;
   struct kobject kobj ;
   unsigned long _flags ;
   void *data ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_fwspec {
   struct fwnode_handle *fwnode ;
   int param_count ;
   u32 param[16U] ;
};
#line 68 
enum irq_domain_bus_token {
    DOMAIN_BUS_ANY = 0,
    DOMAIN_BUS_WIRED = 1,
    DOMAIN_BUS_GENERIC_MSI = 2,
    DOMAIN_BUS_PCI_MSI = 3,
    DOMAIN_BUS_PLATFORM_MSI = 4,
    DOMAIN_BUS_NEXUS = 5,
    DOMAIN_BUS_IPI = 6,
    DOMAIN_BUS_FSL_MC_MSI = 7,
    DOMAIN_BUS_TI_SCI_INTA_MSI = 8,
    DOMAIN_BUS_WAKEUP = 9
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain_ops {
   int (*match)(struct irq_domain *, struct device_node *, enum irq_domain_bus_token ) ;
   int (*select)(struct irq_domain *, struct irq_fwspec *, enum irq_domain_bus_token ) ;
   int (*map)(struct irq_domain *, unsigned int , irq_hw_number_t ) ;
   void (*unmap)(struct irq_domain *, unsigned int ) ;
   int (*xlate)(struct irq_domain *, struct device_node *, u32 *, unsigned int , unsigned long *, unsigned int *) ;
   int (*alloc)(struct irq_domain *, unsigned int , unsigned int , void *) ;
   void (*free)(struct irq_domain *, unsigned int , unsigned int ) ;
   int (*activate)(struct irq_domain *, struct irq_data *, bool ) ;
   void (*deactivate)(struct irq_domain *, struct irq_data *) ;
   int (*translate)(struct irq_domain *, struct irq_fwspec *, unsigned long *, unsigned int *) ;
   void (*debug_show)(struct seq_file *, struct irq_domain *, struct irq_data *, int ) ;
};
#line 132 
struct irq_domain_chip_generic;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain {
   struct list_head link ;
   char *name ;
   struct irq_domain_ops *ops ;
   void *host_data ;
   unsigned int flags ;
   unsigned int mapcount ;
   struct fwnode_handle *fwnode ;
   enum irq_domain_bus_token bus_token ;
   struct irq_domain_chip_generic *gc ;
   struct irq_domain *parent ;
   struct dentry *debugfs_file ;
   irq_hw_number_t hwirq_max ;
   unsigned int revmap_direct_max_irq ;
   unsigned int revmap_size ;
   struct xarray revmap_tree ;
   struct mutex revmap_tree_mutex ;
   unsigned int linear_revmap[] ;
};
#line 1302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/acpi.h"
enum hns_desc_type {
    DESC_TYPE_SKB = 0,
    DESC_TYPE_PAGE = 1
};
#line 1307 
struct hnae3_handle;
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hnae3.h"
struct hnae3_ae_algo;
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hnae3.h"
struct hnae3_queue {
   void *io_base ;
   struct hnae3_ae_algo *ae_algo ;
   struct hnae3_handle *handle ;
   int tqp_index ;
   u32 buf_size ;
   u16 tx_desc_num ;
   u16 rx_desc_num ;
};
#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hnae3.h"
struct hns3_mac_stats {
   u64 tx_pause_cnt ;
   u64 rx_pause_cnt ;
};
#line 100 
enum hnae3_loop {
    HNAE3_LOOP_APP = 0,
    HNAE3_LOOP_SERIAL_SERDES = 1,
    HNAE3_LOOP_PARALLEL_SERDES = 2,
    HNAE3_LOOP_PHY = 3,
    HNAE3_LOOP_NONE = 4
};
#line 108 
enum hnae3_client_type {
    HNAE3_CLIENT_KNIC = 0,
    HNAE3_CLIENT_ROCE = 1
};
#line 138 
enum hnae3_reset_notify_type {
    HNAE3_UP_CLIENT = 0,
    HNAE3_DOWN_CLIENT = 1,
    HNAE3_INIT_CLIENT = 2,
    HNAE3_UNINIT_CLIENT = 3,
    HNAE3_RESTORE_CLIENT = 4
};
#line 146 
enum hnae3_hw_error_type {
    HNAE3_PPU_POISON_ERROR = 0,
    HNAE3_CMDQ_ECC_ERROR = 1,
    HNAE3_IMP_RD_POISON_ERROR = 2
};
#line 152 
enum hnae3_reset_type {
    HNAE3_VF_RESET = 0,
    HNAE3_VF_FUNC_RESET = 1,
    HNAE3_VF_PF_FUNC_RESET = 2,
    HNAE3_VF_FULL_RESET = 3,
    HNAE3_FLR_RESET = 4,
    HNAE3_FUNC_RESET = 5,
    HNAE3_GLOBAL_RESET = 6,
    HNAE3_IMP_RESET = 7,
    HNAE3_UNKNOWN_RESET = 8,
    HNAE3_NONE_RESET = 9
};
#line 170 
enum hnae3_port_base_vlan_state {
    HNAE3_PORT_BASE_VLAN_DISABLE = 0,
    HNAE3_PORT_BASE_VLAN_ENABLE = 1,
    HNAE3_PORT_BASE_VLAN_MODIFY = 2,
    HNAE3_PORT_BASE_VLAN_NOCHANGE = 3
};
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hnae3.h"
struct hnae3_vector_info {
   u8 *io_addr ;
   int vector ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hnae3.h"
struct hnae3_ring_chain_node {
   struct hnae3_ring_chain_node *next ;
   u32 tqp_index ;
   u32 flag ;
   u32 int_gl_idx ;
};
#line 213  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hnae3.h"
struct hnae3_client_ops {
   int (*init_instance)(struct hnae3_handle *) ;
   void (*uninit_instance)(struct hnae3_handle *, bool ) ;
   void (*link_status_change)(struct hnae3_handle *, bool ) ;
   int (*setup_tc)(struct hnae3_handle *, u8 ) ;
   int (*reset_notify)(struct hnae3_handle *, enum hnae3_reset_notify_type ) ;
   void (*process_hw_error)(struct hnae3_handle *, enum hnae3_hw_error_type ) ;
};
#line 225  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hnae3.h"
struct hnae3_client {
   char name[16U] ;
   unsigned long state ;
   enum hnae3_client_type type ;
   struct hnae3_client_ops *ops ;
   struct list_head node ;
};
#line 233 
struct hnae3_ae_ops;
#line 233  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hnae3.h"
struct hnae3_ae_dev {
   struct pci_dev *pdev ;
   struct hnae3_ae_ops *ops ;
   struct list_head node ;
   u32 flag ;
   unsigned long hw_err_reset_req ;
   enum hnae3_reset_type reset_type ;
   void *priv ;
};
#line 382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hnae3.h"
struct hnae3_ae_ops {
   int (*init_ae_dev)(struct hnae3_ae_dev *) ;
   void (*uninit_ae_dev)(struct hnae3_ae_dev *) ;
   void (*flr_prepare)(struct hnae3_ae_dev *) ;
   void (*flr_done)(struct hnae3_ae_dev *) ;
   int (*init_client_instance)(struct hnae3_client *, struct hnae3_ae_dev *) ;
   void (*uninit_client_instance)(struct hnae3_client *, struct hnae3_ae_dev *) ;
   int (*start)(struct hnae3_handle *) ;
   void (*stop)(struct hnae3_handle *) ;
   int (*client_start)(struct hnae3_handle *) ;
   void (*client_stop)(struct hnae3_handle *) ;
   int (*get_status)(struct hnae3_handle *) ;
   void (*get_ksettings_an_result)(struct hnae3_handle *, u8 *, u32 *, u8 *) ;
   int (*cfg_mac_speed_dup_h)(struct hnae3_handle *, int , u8 ) ;
   void (*get_media_type)(struct hnae3_handle *, u8 *, u8 *) ;
   int (*check_port_speed)(struct hnae3_handle *, u32 ) ;
   void (*get_fec)(struct hnae3_handle *, u8 *, u8 *) ;
   int (*set_fec)(struct hnae3_handle *, u32 ) ;
   void (*adjust_link)(struct hnae3_handle *, int , int ) ;
   int (*set_loopback)(struct hnae3_handle *, enum hnae3_loop , bool ) ;
   int (*set_promisc_mode)(struct hnae3_handle *, bool , bool ) ;
   int (*set_mtu)(struct hnae3_handle *, int ) ;
   void (*get_pauseparam)(struct hnae3_handle *, u32 *, u32 *, u32 *) ;
   int (*set_pauseparam)(struct hnae3_handle *, u32 , u32 , u32 ) ;
   int (*set_autoneg)(struct hnae3_handle *, bool ) ;
   int (*get_autoneg)(struct hnae3_handle *) ;
   int (*restart_autoneg)(struct hnae3_handle *) ;
   int (*halt_autoneg)(struct hnae3_handle *, bool ) ;
   void (*get_coalesce_usecs)(struct hnae3_handle *, u32 *, u32 *) ;
   void (*get_rx_max_coalesced_frames)(struct hnae3_handle *, u32 *, u32 *) ;
   int (*set_coalesce_usecs)(struct hnae3_handle *, u32 ) ;
   int (*set_coalesce_frames)(struct hnae3_handle *, u32 ) ;
   void (*get_coalesce_range)(struct hnae3_handle *, u32 *, u32 *, u32 *, u32 *, u32 *, u32 *, u32 *, u32 *) ;
   void (*get_mac_addr)(struct hnae3_handle *, u8 *) ;
   int (*set_mac_addr)(struct hnae3_handle *, void *, bool ) ;
   int (*do_ioctl)(struct hnae3_handle *, struct ifreq *, int ) ;
   int (*add_uc_addr)(struct hnae3_handle *, unsigned char *) ;
   int (*rm_uc_addr)(struct hnae3_handle *, unsigned char *) ;
   int (*set_mc_addr)(struct hnae3_handle *, void *) ;
   int (*add_mc_addr)(struct hnae3_handle *, unsigned char *) ;
   int (*rm_mc_addr)(struct hnae3_handle *, unsigned char *) ;
   void (*set_tso_stats)(struct hnae3_handle *, int ) ;
   void (*update_stats)(struct hnae3_handle *, struct net_device_stats *) ;
   void (*get_stats)(struct hnae3_handle *, u64 *) ;
   void (*get_mac_stats)(struct hnae3_handle *, struct hns3_mac_stats *) ;
   void (*get_strings)(struct hnae3_handle *, u32 , u8 *) ;
   int (*get_sset_count)(struct hnae3_handle *, int ) ;
   void (*get_regs)(struct hnae3_handle *, u32 *, void *) ;
   int (*get_regs_len)(struct hnae3_handle *) ;
   u32 (*get_rss_key_size)(struct hnae3_handle *) ;
   u32 (*get_rss_indir_size)(struct hnae3_handle *) ;
   int (*get_rss)(struct hnae3_handle *, u32 *, u8 *, u8 *) ;
   int (*set_rss)(struct hnae3_handle *, u32 *, u8 *, u8 ) ;
   int (*set_rss_tuple)(struct hnae3_handle *, struct ethtool_rxnfc *) ;
   int (*get_rss_tuple)(struct hnae3_handle *, struct ethtool_rxnfc *) ;
   int (*get_tc_size)(struct hnae3_handle *) ;
   int (*get_vector)(struct hnae3_handle *, u16 , struct hnae3_vector_info *) ;
   int (*put_vector)(struct hnae3_handle *, int ) ;
   int (*map_ring_to_vector)(struct hnae3_handle *, int , struct hnae3_ring_chain_node *) ;
   int (*unmap_ring_from_vector)(struct hnae3_handle *, int , struct hnae3_ring_chain_node *) ;
   int (*reset_queue)(struct hnae3_handle *, u16 ) ;
   u32 (*get_fw_version)(struct hnae3_handle *) ;
   void (*get_mdix_mode)(struct hnae3_handle *, u8 *, u8 *) ;
   void (*enable_vlan_filter)(struct hnae3_handle *, bool ) ;
   int (*set_vlan_filter)(struct hnae3_handle *, __be16 , u16 , bool ) ;
   int (*set_vf_vlan_filter)(struct hnae3_handle *, int , u16 , u8 , __be16 ) ;
   int (*enable_hw_strip_rxvtag)(struct hnae3_handle *, bool ) ;
   void (*reset_event)(struct pci_dev *, struct hnae3_handle *) ;
   enum hnae3_reset_type (*get_reset_level)(struct hnae3_ae_dev *, unsigned long *) ;
   void (*set_default_reset_request)(struct hnae3_ae_dev *, enum hnae3_reset_type ) ;
   void (*get_channels)(struct hnae3_handle *, struct ethtool_channels *) ;
   void (*get_tqps_and_rss_info)(struct hnae3_handle *, u16 *, u16 *) ;
   int (*set_channels)(struct hnae3_handle *, u32 , bool ) ;
   void (*get_flowctrl_adv)(struct hnae3_handle *, u32 *) ;
   int (*set_led_id)(struct hnae3_handle *, enum ethtool_phys_id_state ) ;
   void (*get_link_mode)(struct hnae3_handle *, unsigned long *, unsigned long *) ;
   int (*add_fd_entry)(struct hnae3_handle *, struct ethtool_rxnfc *) ;
   int (*del_fd_entry)(struct hnae3_handle *, struct ethtool_rxnfc *) ;
   void (*del_all_fd_entries)(struct hnae3_handle *, bool ) ;
   int (*get_fd_rule_cnt)(struct hnae3_handle *, struct ethtool_rxnfc *) ;
   int (*get_fd_rule_info)(struct hnae3_handle *, struct ethtool_rxnfc *) ;
   int (*get_fd_all_rules)(struct hnae3_handle *, struct ethtool_rxnfc *, u32 *) ;
   int (*restore_fd_rules)(struct hnae3_handle *) ;
   void (*enable_fd)(struct hnae3_handle *, bool ) ;
   int (*add_arfs_entry)(struct hnae3_handle *, u16 , u16 , struct flow_keys *) ;
   int (*dbg_run_cmd)(struct hnae3_handle *, char *) ;
   pci_ers_result_t (*handle_hw_ras_error)(struct hnae3_ae_dev *) ;
   bool (*get_hw_reset_stat)(struct hnae3_handle *) ;
   bool (*ae_dev_resetting)(struct hnae3_handle *) ;
   unsigned long (*ae_dev_reset_cnt)(struct hnae3_handle *) ;
   int (*set_gro_en)(struct hnae3_handle *, bool ) ;
   u16 (*get_global_queue_id)(struct hnae3_handle *, u16 ) ;
   void (*set_timer_task)(struct hnae3_handle *, bool ) ;
   int (*mac_connect_phy)(struct hnae3_handle *) ;
   void (*mac_disconnect_phy)(struct hnae3_handle *) ;
   void (*restore_vlan_table)(struct hnae3_handle *) ;
   int (*get_vf_config)(struct hnae3_handle *, int , struct ifla_vf_info *) ;
   int (*set_vf_link_state)(struct hnae3_handle *, int , int ) ;
   int (*set_vf_spoofchk)(struct hnae3_handle *, int , bool ) ;
   int (*set_vf_trust)(struct hnae3_handle *, int , bool ) ;
   int (*set_vf_rate)(struct hnae3_handle *, int , int , int , bool ) ;
   int (*set_vf_mac)(struct hnae3_handle *, int , u8 *) ;
};
#line 558  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hnae3.h"
struct hnae3_dcb_ops {
   int (*ieee_getets)(struct hnae3_handle *, struct ieee_ets *) ;
   int (*ieee_setets)(struct hnae3_handle *, struct ieee_ets *) ;
   int (*ieee_getpfc)(struct hnae3_handle *, struct ieee_pfc *) ;
   int (*ieee_setpfc)(struct hnae3_handle *, struct ieee_pfc *) ;
   u8 (*getdcbx)(struct hnae3_handle *) ;
   u8 (*setdcbx)(struct hnae3_handle *, u8 ) ;
   int (*setup_tc)(struct hnae3_handle *, u8 , u8 *) ;
};
#line 572  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hnae3.h"
struct hnae3_ae_algo {
   struct hnae3_ae_ops *ops ;
   struct list_head node ;
   struct pci_device_id *pdev_id_table ;
};
#line 582  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hnae3.h"
struct hnae3_tc_info {
   u16 tqp_offset ;
   u16 tqp_count ;
   u8 tc ;
   bool enable ;
};
#line 591  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hnae3.h"
struct hnae3_knic_private_info {
   struct net_device *netdev ;
   u16 rss_size ;
   u16 req_rss_size ;
   u16 rx_buf_len ;
   u16 num_tx_desc ;
   u16 num_rx_desc ;
   u8 num_tc ;
   u8 prio_tc[8U] ;
   struct hnae3_tc_info tc_info[8U] ;
   u16 num_tqps ;
   struct hnae3_queue **tqp ;
   struct hnae3_dcb_ops *dcb_ops ;
   u16 int_rl_setting ;
   enum pkt_hash_types rss_type ;
};
#line 611  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hnae3.h"
struct hnae3_roce_private_info {
   struct net_device *netdev ;
   void *roce_io_base ;
   int base_vector ;
   int num_vectors ;
   unsigned long reset_state ;
   unsigned long instance_state ;
   unsigned long state ;
};
#line 626  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hnae3.h"
struct hnae3_unic_private_info {
   struct net_device *netdev ;
   u16 rx_buf_len ;
   u16 num_tx_desc ;
   u16 num_rx_desc ;
   u16 num_tqps ;
   struct hnae3_queue **tqp ;
};
#line 651  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hnae3.h"
union __anonunion_1115 {
   struct net_device *netdev ;
   struct hnae3_knic_private_info kinfo ;
   struct hnae3_unic_private_info uinfo ;
   struct hnae3_roce_private_info rinfo ;
};
#line 651  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hnae3.h"
struct hnae3_handle {
   struct hnae3_client *client ;
   struct pci_dev *pdev ;
   void *priv ;
   struct hnae3_ae_algo *ae_algo ;
   u64 flags ;
   union __anonunion_1115 __anonCompField_hnae3_handle_215 ;
   u32 numa_node_mask ;
   enum hnae3_port_base_vlan_state port_base_vlan_state ;
   u8 netdev_flags ;
   struct dentry *hnae3_dbgfs ;
   u32 msg_enable ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.h"
enum hns3_pkt_l2t_type {
    HNS3_L2_TYPE_UNICAST = 0,
    HNS3_L2_TYPE_MULTICAST = 1,
    HNS3_L2_TYPE_BROADCAST = 2,
    HNS3_L2_TYPE_INVALID = 3
};
#line 250  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.h"
struct __anonstruct_1119 {
   __u8 type_cs_vlan_tso ;
   __u8 l2_len ;
   __u8 l3_len ;
   __u8 l4_len ;
};
#line 250  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.h"
union __anonunion_1118 {
   __le32 type_cs_vlan_tso_len ;
   struct __anonstruct_1119 __anonCompField___anonunion_1118_216 ;
};
#line 250  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.h"
struct __anonstruct_1121 {
   __u8 ol_type_vlan_msec ;
   __u8 ol2_len ;
   __u8 ol3_len ;
   __u8 ol4_len ;
};
#line 250  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.h"
union __anonunion_1120 {
   __le32 ol_type_vlan_len_msec ;
   struct __anonstruct_1121 __anonCompField___anonunion_1120_218 ;
};
#line 250  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.h"
struct __anonstruct_tx_1117 {
   __le16 vlan_tag ;
   __le16 send_size ;
   union __anonunion_1118 __anonCompField___anonstruct_tx_1117_217 ;
   __le16 outer_vlan_tag ;
   __le16 tv ;
   union __anonunion_1120 __anonCompField___anonstruct_tx_1117_219 ;
   __le32 paylen ;
   __le16 bdtp_fe_sc_vld_ra_ri ;
   __le16 mss ;
};
#line 250  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.h"
struct __anonstruct_1124 {
   __le16 o_dm_vlan_id_fb ;
   __le16 ot_vlan_tag ;
};
#line 250  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.h"
union __anonunion_1123 {
   __le32 ol_info ;
   struct __anonstruct_1124 __anonCompField___anonunion_1123_220 ;
};
#line 250  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.h"
struct __anonstruct_rx_1122 {
   __le32 l234_info ;
   __le16 pkt_len ;
   __le16 size ;
   __le32 rss_hash ;
   __le16 fd_id ;
   __le16 vlan_tag ;
   union __anonunion_1123 __anonCompField___anonstruct_rx_1122_221 ;
   __le32 bd_base_info ;
};
#line 250  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.h"
union __anonunion_1116 {
   struct __anonstruct_tx_1117 tx ;
   struct __anonstruct_rx_1122 rx ;
};
#line 250  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.h"
struct hns3_desc {
   __le64 addr ;
   union __anonunion_1116 __anonCompField_hns3_desc_222 ;
} __attribute__((__packed__));
#line 305  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.h"
struct hns3_desc_cb {
   dma_addr_t dma ;
   void *buf ;
   void *priv ;
   u32 page_offset ;
   u32 length ;
   u16 reuse_flag ;
   u16 type ;
};
#line 373  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.h"
struct __anonstruct_1126 {
   u64 tx_pkts ;
   u64 tx_bytes ;
   u64 tx_err_cnt ;
   u64 restart_queue ;
   u64 tx_busy ;
   u64 tx_copy ;
   u64 tx_vlan_err ;
   u64 tx_l4_proto_err ;
   u64 tx_l2l3l4_err ;
   u64 tx_tso_err ;
};
#line 373  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.h"
struct __anonstruct_1127 {
   u64 rx_pkts ;
   u64 rx_bytes ;
   u64 rx_err_cnt ;
   u64 reuse_pg_cnt ;
   u64 err_pkt_len ;
   u64 err_bd_num ;
   u64 l2_err ;
   u64 l3l4_csum_err ;
   u64 rx_multicast ;
   u64 non_reuse_pg ;
};
#line 373  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.h"
union __anonunion_1125 {
   struct __anonstruct_1126 __anonCompField___anonunion_1125_223 ;
   struct __anonstruct_1127 __anonCompField___anonunion_1125_224 ;
};
#line 373  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.h"
struct ring_stats {
   u64 io_err_cnt ;
   u64 sw_err_cnt ;
   u64 seg_pkt_cnt ;
   union __anonunion_1125 __anonCompField_ring_stats_225 ;
};
#line 405 
struct hns3_enet_tqp_vector;
#line 405  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.h"
struct hns3_enet_ring {
   u8 *io_base ;
   struct hns3_desc *desc ;
   struct hns3_desc_cb *desc_cb ;
   struct hns3_enet_ring *next ;
   struct hns3_enet_tqp_vector *tqp_vector ;
   struct hnae3_queue *tqp ;
   int queue_index ;
   struct device *dev ;
   struct ring_stats stats ;
   struct u64_stats_sync syncp ;
   dma_addr_t desc_dma_addr ;
   u32 buf_size ;
   u16 desc_num ;
   int next_to_use ;
   int next_to_clean ;
   u32 pull_len ;
   u32 frag_num ;
   unsigned char *va ;
   u32 flag ;
   int pending_buf ;
   struct sk_buff *skb ;
   struct sk_buff *tail_skb ;
} __attribute__((__aligned__(4096)));
#line 439 
enum hns3_flow_level_range {
    HNS3_FLOW_LOW = 0,
    HNS3_FLOW_MID = 1,
    HNS3_FLOW_HIGH = 2,
    HNS3_FLOW_ULTRA = 3
};
#line 456  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.h"
struct hns3_enet_coalesce {
   u16 int_gl ;
   u8 gl_adapt_enable ;
   enum hns3_flow_level_range flow_level ;
};
#line 462  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.h"
struct hns3_enet_ring_group {
   struct hns3_enet_ring *ring ;
   u64 total_bytes ;
   u64 total_packets ;
   u16 count ;
   struct hns3_enet_coalesce coal ;
};
#line 471  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.h"
struct hns3_enet_tqp_vector {
   struct hnae3_handle *handle ;
   u8 *mask_addr ;
   int vector_irq ;
   int irq_init_flag ;
   u16 idx ;
   struct napi_struct napi ;
   struct hns3_enet_ring_group rx_group ;
   struct hns3_enet_ring_group tx_group ;
   cpumask_t affinity_mask ;
   u16 num_tqps ;
   struct irq_affinity_notify affinity_notify ;
   char name[48U] ;
   unsigned long last_jiffies ;
} __attribute__((__aligned__(4096)));
#line 499  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.h"
struct hns3_udp_tunnel {
   u16 dst_port ;
   int used ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.h"
struct hns3_nic_priv {
   struct hnae3_handle *ae_handle ;
   u32 enet_ver ;
   u32 port_id ;
   struct net_device *netdev ;
   struct device *dev ;
   struct hns3_enet_ring *ring ;
   struct hns3_enet_tqp_vector *tqp_vector ;
   u16 vector_num ;
   int link ;
   u64 tx_timeout_count ;
   unsigned long state ;
   struct timer_list service_timer ;
   struct work_struct service_task ;
   struct notifier_block notifier_block ;
   struct hns3_udp_tunnel udp_tnl[2U] ;
   struct hns3_enet_coalesce tx_coal ;
   struct hns3_enet_coalesce rx_coal ;
};
#line 536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.h"
union l3_hdr_info {
   struct iphdr *v4 ;
   struct ipv6hdr *v6 ;
   unsigned char *hdr ;
};
#line 542  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.h"
union l4_hdr_info {
   struct tcphdr *tcp ;
   struct udphdr *udp ;
   struct gre_base_hdr *gre ;
   unsigned char *hdr ;
};
#line 549  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.h"
struct hns3_hw_error_info {
   enum hnae3_hw_error_type type ;
   char *msg ;
};
#line 559  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.h"
union __anonunion___u_1129 {
   int __val ;
   char __c[1U] ;
};
#line 560  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.h"
union __anonunion___u_1131 {
   int __val ;
   char __c[1U] ;
};
#line 578  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.h"
union __anonunion___u_1133 {
   void *__val ;
   char __c[1U] ;
};
#line 2476  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
union __anonunion___u_1135 {
   int __val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
enum refcount_saturation_type {
    REFCOUNT_ADD_NOT_ZERO_OVF = 0,
    REFCOUNT_ADD_OVF = 1,
    REFCOUNT_ADD_UAF = 2,
    REFCOUNT_SUB_UAF = 3,
    REFCOUNT_DEC_LEAK = 4
};
#line 823  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct gpio_desc;
#line 824 
struct mii_bus;
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mdio.h"
struct reset_control;
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mdio.h"
struct mdio_device {
   struct device dev ;
   struct mii_bus *bus ;
   char modalias[32U] ;
   int (*bus_match)(struct device *, struct device_driver *) ;
   void (*device_free)(struct mdio_device *) ;
   void (*device_remove)(struct mdio_device *) ;
   int addr ;
   int flags ;
   struct gpio_desc *reset_gpio ;
   struct reset_control *reset_ctrl ;
   unsigned int reset_assert_delay ;
   unsigned int reset_deassert_delay ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mdio.h"
struct mdio_driver_common {
   struct device_driver driver ;
   int flags ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
enum ldv_15391 {
    PHY_INTERFACE_MODE_NA = 0,
    PHY_INTERFACE_MODE_INTERNAL = 1,
    PHY_INTERFACE_MODE_MII = 2,
    PHY_INTERFACE_MODE_GMII = 3,
    PHY_INTERFACE_MODE_SGMII = 4,
    PHY_INTERFACE_MODE_TBI = 5,
    PHY_INTERFACE_MODE_REVMII = 6,
    PHY_INTERFACE_MODE_RMII = 7,
    PHY_INTERFACE_MODE_RGMII = 8,
    PHY_INTERFACE_MODE_RGMII_ID = 9,
    PHY_INTERFACE_MODE_RGMII_RXID = 10,
    PHY_INTERFACE_MODE_RGMII_TXID = 11,
    PHY_INTERFACE_MODE_RTBI = 12,
    PHY_INTERFACE_MODE_SMII = 13,
    PHY_INTERFACE_MODE_XGMII = 14,
    PHY_INTERFACE_MODE_MOCA = 15,
    PHY_INTERFACE_MODE_QSGMII = 16,
    PHY_INTERFACE_MODE_TRGMII = 17,
    PHY_INTERFACE_MODE_1000BASEX = 18,
    PHY_INTERFACE_MODE_2500BASEX = 19,
    PHY_INTERFACE_MODE_RXAUI = 20,
    PHY_INTERFACE_MODE_XAUI = 21,
    PHY_INTERFACE_MODE_10GKR = 22,
    PHY_INTERFACE_MODE_USXGMII = 23,
    PHY_INTERFACE_MODE_MAX = 24
};
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
typedef enum ldv_15391 phy_interface_t;
#line 186 
struct phylink;
#line 188 
enum ldv_15406 {
    MDIOBUS_ALLOCATED = 1,
    MDIOBUS_REGISTERED = 2,
    MDIOBUS_UNREGISTERED = 3,
    MDIOBUS_RELEASED = 4
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
struct mii_bus {
   struct module *owner ;
   char *name ;
   char id[61U] ;
   void *priv ;
   int (*read)(struct mii_bus *, int , int ) ;
   int (*write)(struct mii_bus *, int , int , u16 ) ;
   int (*reset)(struct mii_bus *) ;
   struct mutex mdio_lock ;
   struct device *parent ;
   enum ldv_15406 state ;
   struct device dev ;
   struct mdio_device *mdio_map[32U] ;
   u32 phy_mask ;
   u32 phy_ignore_ta_mask ;
   int irq[32U] ;
   int reset_delay_us ;
   struct gpio_desc *reset_gpiod ;
};
#line 278 
enum phy_state {
    PHY_DOWN = 0,
    PHY_READY = 1,
    PHY_HALTED = 2,
    PHY_UP = 3,
    PHY_RUNNING = 4,
    PHY_NOLINK = 5
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
struct phy_c45_device_ids {
   u32 devices_in_package ;
   u32 device_ids[8U] ;
};
#line 363 
struct phy_driver;
#line 363 
struct phy_led_trigger;
#line 363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
struct phy_device {
   struct mdio_device mdio ;
   struct phy_driver *drv ;
   u32 phy_id ;
   struct phy_c45_device_ids c45_ids ;
   unsigned int is_c45 : 1 ;
   unsigned int is_internal : 1 ;
   unsigned int is_pseudo_fixed_link : 1 ;
   unsigned int is_gigabit_capable : 1 ;
   unsigned int has_fixups : 1 ;
   unsigned int suspended : 1 ;
   unsigned int sysfs_links : 1 ;
   unsigned int loopback_enabled : 1 ;
   unsigned int autoneg : 1 ;
   unsigned int link : 1 ;
   unsigned int autoneg_complete : 1 ;
   unsigned int interrupts : 1 ;
   enum phy_state state ;
   u32 dev_flags ;
   phy_interface_t interface ;
   int speed ;
   int duplex ;
   int pause ;
   int asym_pause ;
   unsigned long supported[2U] ;
   unsigned long advertising[2U] ;
   unsigned long lp_advertising[2U] ;
   unsigned long adv_old[2U] ;
   u32 eee_broken_modes ;
   struct phy_led_trigger *phy_led_triggers ;
   unsigned int phy_num_led_triggers ;
   struct phy_led_trigger *last_triggered ;
   struct phy_led_trigger *led_link_trigger ;
   int irq ;
   void *priv ;
   struct delayed_work state_queue ;
   struct mutex lock ;
   bool sfp_bus_attached ;
   struct sfp_bus *sfp_bus ;
   struct phylink *phylink ;
   struct net_device *attached_dev ;
   u8 mdix ;
   u8 mdix_ctrl ;
   void (*phy_link_change)(struct phy_device *, bool , bool ) ;
   void (*adjust_link)(struct net_device *) ;
};
#line 475  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
struct phy_driver {
   struct mdio_driver_common mdiodrv ;
   u32 phy_id ;
   char *name ;
   u32 phy_id_mask ;
   unsigned long *features ;
   u32 flags ;
   void *driver_data ;
   int (*soft_reset)(struct phy_device *) ;
   int (*config_init)(struct phy_device *) ;
   int (*probe)(struct phy_device *) ;
   int (*get_features)(struct phy_device *) ;
   int (*suspend)(struct phy_device *) ;
   int (*resume)(struct phy_device *) ;
   int (*config_aneg)(struct phy_device *) ;
   int (*aneg_done)(struct phy_device *) ;
   int (*read_status)(struct phy_device *) ;
   int (*ack_interrupt)(struct phy_device *) ;
   int (*config_intr)(struct phy_device *) ;
   int (*did_interrupt)(struct phy_device *) ;
   int (*handle_interrupt)(struct phy_device *) ;
   void (*remove)(struct phy_device *) ;
   int (*match_phy_device)(struct phy_device *) ;
   int (*ts_info)(struct phy_device *, struct ethtool_ts_info *) ;
   int (*hwtstamp)(struct phy_device *, struct ifreq *) ;
   bool (*rxtstamp)(struct phy_device *, struct sk_buff *, int ) ;
   void (*txtstamp)(struct phy_device *, struct sk_buff *, int ) ;
   int (*set_wol)(struct phy_device *, struct ethtool_wolinfo *) ;
   void (*get_wol)(struct phy_device *, struct ethtool_wolinfo *) ;
   void (*link_change_notify)(struct phy_device *) ;
   int (*read_mmd)(struct phy_device *, int , u16 ) ;
   int (*write_mmd)(struct phy_device *, int , u16 , u16 ) ;
   int (*read_page)(struct phy_device *) ;
   int (*write_page)(struct phy_device *, int ) ;
   int (*module_info)(struct phy_device *, struct ethtool_modinfo *) ;
   int (*module_eeprom)(struct phy_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_sset_count)(struct phy_device *) ;
   void (*get_strings)(struct phy_device *, u8 *) ;
   void (*get_stats)(struct phy_device *, struct ethtool_stats *, u64 *) ;
   int (*get_tunable)(struct phy_device *, struct ethtool_tunable *, void *) ;
   int (*set_tunable)(struct phy_device *, struct ethtool_tunable *, void *) ;
   int (*set_loopback)(struct phy_device *, bool ) ;
};
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_ethtool.c"
struct hns3_stats {
   char stats_string[32U] ;
   int stats_offset ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 197 
enum hrtimer_restart;
#line 197 
enum hrtimer_restart;
#line 197 
enum hrtimer_restart;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
struct device_private {
   void *driver_data ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/firmware.h"
struct firmware {
   size_t size ;
   u8 *data ;
   struct page **pages ;
   void *priv ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct ida {
   struct xarray xa ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rtmutex.h"
struct rt_mutex {
   raw_spinlock_t wait_lock ;
   struct rb_root_cached waiters ;
   struct task_struct *owner ;
   int save_state ;
   char *name ;
   char *file ;
   int line ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
struct i2c_msg {
   __u16 addr ;
   __u16 flags ;
   __u16 len ;
   __u8 *buf ;
};
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
union i2c_smbus_data {
   __u8 byte ;
   __u16 word ;
   __u8 block[34U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm;
#line 28 
struct i2c_adapter;
#line 29 
struct i2c_client;
#line 33 
enum i2c_slave_event;
#line 33 
enum i2c_slave_event;
#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_client {
   unsigned short flags ;
   unsigned short addr ;
   char name[20U] ;
   struct i2c_adapter *adapter ;
   struct device dev ;
   int init_irq ;
   int irq ;
   struct list_head detected ;
   int (*slave_cb)(struct i2c_client *, enum i2c_slave_event , u8 *) ;
};
#line 360 
enum i2c_slave_event {
    I2C_SLAVE_READ_REQUESTED = 0,
    I2C_SLAVE_WRITE_REQUESTED = 1,
    I2C_SLAVE_READ_PROCESSED = 2,
    I2C_SLAVE_WRITE_RECEIVED = 3,
    I2C_SLAVE_STOP = 4
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm {
   int (*master_xfer)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*master_xfer_atomic)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*smbus_xfer)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   int (*smbus_xfer_atomic)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   u32 (*functionality)(struct i2c_adapter *) ;
   int (*reg_slave)(struct i2c_client *) ;
   int (*unreg_slave)(struct i2c_client *) ;
};
#line 565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_lock_operations {
   void (*lock_bus)(struct i2c_adapter *, unsigned int ) ;
   int (*trylock_bus)(struct i2c_adapter *, unsigned int ) ;
   void (*unlock_bus)(struct i2c_adapter *, unsigned int ) ;
};
#line 618  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_bus_recovery_info {
   int (*recover_bus)(struct i2c_adapter *) ;
   int (*get_scl)(struct i2c_adapter *) ;
   void (*set_scl)(struct i2c_adapter *, int ) ;
   int (*get_sda)(struct i2c_adapter *) ;
   void (*set_sda)(struct i2c_adapter *, int ) ;
   int (*get_bus_free)(struct i2c_adapter *) ;
   void (*prepare_recovery)(struct i2c_adapter *) ;
   void (*unprepare_recovery)(struct i2c_adapter *) ;
   struct gpio_desc *scl_gpiod ;
   struct gpio_desc *sda_gpiod ;
};
#line 661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter_quirks {
   u64 flags ;
   int max_num_msgs ;
   u16 max_write_len ;
   u16 max_read_len ;
   u16 max_comb_1st_msg_len ;
   u16 max_comb_2nd_msg_len ;
};
#line 692  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter {
   struct module *owner ;
   unsigned int class ;
   struct i2c_algorithm *algo ;
   void *algo_data ;
   struct i2c_lock_operations *lock_ops ;
   struct rt_mutex bus_lock ;
   struct rt_mutex mux_lock ;
   int timeout ;
   int retries ;
   struct device dev ;
   unsigned long locked_flags ;
   int nr ;
   char name[48U] ;
   struct completion dev_released ;
   struct mutex userspace_clients_lock ;
   struct list_head userspace_clients ;
   struct i2c_bus_recovery_info *bus_recovery_info ;
   struct i2c_adapter_quirks *quirks ;
   struct irq_domain *host_notify_domain ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cdev.h"
struct cdev {
   struct kobject kobj ;
   struct module *owner ;
   struct file_operations *ops ;
   struct list_head list ;
   dev_t dev ;
   unsigned int count ;
} __attribute__((__designated_init__));
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-common.h"
struct v4l2_edid {
   __u32 pad ;
   __u32 start_block ;
   __u32 blocks ;
   __u32 reserved[5U] ;
   __u8 *edid ;
};
#line 754 
enum v4l2_priority {
    V4L2_PRIORITY_UNSET = 0,
    V4L2_PRIORITY_BACKGROUND = 1,
    V4L2_PRIORITY_INTERACTIVE = 2,
    V4L2_PRIORITY_RECORD = 3,
    V4L2_PRIORITY_DEFAULT = 2
};
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_rect {
   __s32 left ;
   __s32 top ;
   __u32 width ;
   __u32 height ;
};
#line 420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_fract {
   __u32 numerator ;
   __u32 denominator ;
};
#line 1212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
typedef __u64 v4l2_std_id;
#line 1394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings {
   __u32 width ;
   __u32 height ;
   __u32 interlaced ;
   __u32 polarities ;
   __u64 pixelclock ;
   __u32 hfrontporch ;
   __u32 hsync ;
   __u32 hbackporch ;
   __u32 vfrontporch ;
   __u32 vsync ;
   __u32 vbackporch ;
   __u32 il_vfrontporch ;
   __u32 il_vsync ;
   __u32 il_vbackporch ;
   __u32 standards ;
   __u32 flags ;
   struct v4l2_fract picture_aspect ;
   __u8 cea861_vic ;
   __u8 hdmi_vic ;
   __u8 reserved[46U] ;
} __attribute__((__packed__));
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_5120 {
   struct v4l2_bt_timings bt ;
   __u32 reserved[32U] ;
};
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings {
   __u32 type ;
   union __anonunion_5120 __anonCompField_v4l2_dv_timings_77 ;
} __attribute__((__packed__));
#line 1536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_enum_dv_timings {
   __u32 index ;
   __u32 pad ;
   __u32 reserved[2U] ;
   struct v4l2_dv_timings timings ;
};
#line 1554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings_cap {
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u64 min_pixelclock ;
   __u64 max_pixelclock ;
   __u32 standards ;
   __u32 capabilities ;
   __u32 reserved[16U] ;
} __attribute__((__packed__));
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_5121 {
   struct v4l2_bt_timings_cap bt ;
   __u32 raw_data[32U] ;
};
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings_cap {
   __u32 type ;
   __u32 pad ;
   __u32 reserved[2U] ;
   union __anonunion_5121 __anonCompField_v4l2_dv_timings_cap_78 ;
};
#line 1803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_tuner {
   __u32 index ;
   __u8 name[32U] ;
   __u32 type ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 rxsubchans ;
   __u32 audmode ;
   __s32 signal ;
   __s32 afc ;
   __u32 reserved[4U] ;
};
#line 1817  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_modulator {
   __u32 index ;
   __u8 name[32U] ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 txsubchans ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 1860  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency {
   __u32 tuner ;
   __u32 type ;
   __u32 frequency ;
   __u32 reserved[8U] ;
};
#line 1871  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency_band {
   __u32 tuner ;
   __u32 type ;
   __u32 index ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 modulation ;
   __u32 reserved[9U] ;
};
#line 2043  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_vbi_format {
   __u32 sampling_rate ;
   __u32 offset ;
   __u32 samples_per_line ;
   __u32 sample_format ;
   __s32 start[2U] ;
   __u32 count[2U] ;
   __u32 flags ;
   __u32 reserved[2U] ;
};
#line 2071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_format {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 io_size ;
   __u32 reserved[2U] ;
};
#line 2095  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_cap {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 2106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_data {
   __u32 id ;
   __u32 field ;
   __u32 line ;
   __u32 reserved ;
   __u8 data[48U] ;
};
#line 2350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_event_subscription {
   __u32 type ;
   __u32 id ;
   __u32 flags ;
   __u32 reserved[5U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_5137 {
   __u32 addr ;
   char name[32U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_match {
   __u32 type ;
   union __anonunion_5137 __anonCompField_v4l2_dbg_match_87 ;
} __attribute__((__packed__));
#line 2383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_register {
   struct v4l2_dbg_match match ;
   __u32 size ;
   __u64 reg ;
   __u64 val ;
} __attribute__((__packed__));
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_device;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_gobj {
   struct media_device *mdev ;
   u32 id ;
   struct list_head list ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_enum {
   unsigned long *bmap ;
   int idx_max ;
};
#line 88 
struct media_entity;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_stack_5141 {
   struct media_entity *entity ;
   struct list_head *link ;
};
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_graph {
   struct __anonstruct_stack_5141 stack[16U] ;
   struct media_entity_enum ent_enum ;
   int top ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pipeline {
   int streaming_count ;
   struct media_graph graph ;
};
#line 132 
struct media_pad;
#line 132 
struct media_interface;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_5142 {
   struct media_gobj *gobj0 ;
   struct media_pad *source ;
   struct media_interface *intf ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_5143 {
   struct media_gobj *gobj1 ;
   struct media_pad *sink ;
   struct media_entity *entity ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_link {
   struct media_gobj graph_obj ;
   struct list_head list ;
   union __anonunion_5142 __anonCompField_media_link_90 ;
   union __anonunion_5143 __anonCompField_media_link_91 ;
   struct media_link *reverse ;
   unsigned long flags ;
   bool is_backlink ;
};
#line 149 
enum media_pad_signal_type {
    PAD_SIGNAL_DEFAULT = 0,
    PAD_SIGNAL_ANALOG = 1,
    PAD_SIGNAL_DV = 2,
    PAD_SIGNAL_AUDIO = 3
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pad {
   struct media_gobj graph_obj ;
   struct media_entity *entity ;
   u16 index ;
   enum media_pad_signal_type sig_type ;
   unsigned long flags ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_operations {
   int (*get_fwnode_pad)(struct fwnode_endpoint *) ;
   int (*link_setup)(struct media_entity *, struct media_pad *, struct media_pad *, u32 ) ;
   int (*link_validate)(struct media_link *) ;
};
#line 221 
enum media_entity_type {
    MEDIA_ENTITY_TYPE_BASE = 0,
    MEDIA_ENTITY_TYPE_VIDEO_DEVICE = 1,
    MEDIA_ENTITY_TYPE_V4L2_SUBDEV = 2
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_dev_5145 {
   u32 major ;
   u32 minor ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_info_5144 {
   struct __anonstruct_dev_5145 dev ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity {
   struct media_gobj graph_obj ;
   char *name ;
   enum media_entity_type obj_type ;
   u32 function ;
   unsigned long flags ;
   u16 num_pads ;
   u16 num_links ;
   u16 num_backlinks ;
   int internal_idx ;
   struct media_pad *pads ;
   struct list_head links ;
   struct media_entity_operations *ops ;
   int stream_count ;
   int use_count ;
   struct media_pipeline *pipe ;
   union __anonunion_info_5144 info ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_interface {
   struct media_gobj graph_obj ;
   struct list_head links ;
   u32 type ;
   u32 flags ;
};
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_intf_devnode {
   struct media_interface intf ;
   u32 major ;
   u32 minor ;
};
#line 1087 
enum vfl_devnode_type {
    VFL_TYPE_GRABBER = 0,
    VFL_TYPE_VBI = 1,
    VFL_TYPE_RADIO = 2,
    VFL_TYPE_SUBDEV = 3,
    VFL_TYPE_SDR = 4,
    VFL_TYPE_TOUCH = 5,
    VFL_TYPE_MAX = 6
};
#line 1097 
enum vfl_devnode_direction {
    VFL_DIR_RX = 0,
    VFL_DIR_TX = 1,
    VFL_DIR_M2M = 2
};
#line 1104 
struct video_device;
#line 1105 
struct v4l2_device;
#line 1106 
struct v4l2_ctrl_handler;
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_prio_state {
   atomic_t prios[4U] ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl32)(struct file *, unsigned int , unsigned long ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 256 
struct vb2_queue;
#line 256 
struct v4l2_ioctl_ops;
#line 256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct video_device {
   struct media_entity entity ;
   struct media_intf_devnode *intf_devnode ;
   struct media_pipeline pipe ;
   struct v4l2_file_operations *fops ;
   u32 device_caps ;
   struct device dev ;
   struct cdev *cdev ;
   struct v4l2_device *v4l2_dev ;
   struct device *dev_parent ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct vb2_queue *queue ;
   struct v4l2_prio_state *prio ;
   char name[32U] ;
   enum vfl_devnode_type vfl_type ;
   enum vfl_devnode_direction vfl_dir ;
   int minor ;
   u16 num ;
   unsigned long flags ;
   int index ;
   spinlock_t fh_lock ;
   struct list_head fh_list ;
   int dev_debug ;
   v4l2_std_id tvnorms ;
   void (*release)(struct video_device *) ;
   struct v4l2_ioctl_ops *ioctl_ops ;
   unsigned long valid_ioctls[3U] ;
   struct mutex *lock ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_subdev;
#line 96 
struct v4l2_subdev_ops;
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_priv_tun_config {
   int tuner ;
   void *priv ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_devnode {
   struct media_device *media_dev ;
   struct media_file_operations *fops ;
   struct device dev ;
   struct cdev cdev ;
   struct device *parent ;
   int minor ;
   unsigned long flags ;
   void (*release)(struct media_devnode *) ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_request;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device_ops {
   int (*link_notify)(struct media_link *, u32 , unsigned int ) ;
   struct media_request *(*req_alloc)(struct media_device *) ;
   void (*req_free)(struct media_request *) ;
   int (*req_validate)(struct media_request *) ;
   void (*req_queue)(struct media_request *) ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device {
   struct device *dev ;
   struct media_devnode *devnode ;
   char model[32U] ;
   char driver_name[32U] ;
   char serial[40U] ;
   char bus_info[32U] ;
   u32 hw_revision ;
   u64 topology_version ;
   u32 id ;
   struct ida entity_internal_idx ;
   int entity_internal_idx_max ;
   struct list_head entities ;
   struct list_head interfaces ;
   struct list_head pads ;
   struct list_head links ;
   struct list_head entity_notify ;
   struct mutex graph_mutex ;
   struct media_graph pm_count_walk ;
   void *source_priv ;
   int (*enable_source)(struct media_entity *, struct media_pipeline *) ;
   void (*disable_source)(struct media_entity *) ;
   struct media_device_ops *ops ;
   struct mutex req_queue_mutex ;
   atomic_t request_id ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-mediabus.h"
struct v4l2_mbus_framefmt {
   __u32 width ;
   __u32 height ;
   __u32 code ;
   __u32 field ;
   __u32 colorspace ;
   __u16 ycbcr_enc ;
   __u16 quantization ;
   __u16 xfer_func ;
   __u16 reserved[11U] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_format {
   __u32 which ;
   __u32 pad ;
   struct v4l2_mbus_framefmt format ;
   __u32 reserved[8U] ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_mbus_code_enum {
   __u32 pad ;
   __u32 index ;
   __u32 code ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_size_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval {
   __u32 pad ;
   struct v4l2_fract interval ;
   __u32 reserved[9U] ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 width ;
   __u32 height ;
   struct v4l2_fract interval ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_selection {
   __u32 which ;
   __u32 pad ;
   __u32 target ;
   __u32 flags ;
   struct v4l2_rect r ;
   __u32 reserved[8U] ;
};
#line 157 
struct v4l2_async_notifier;
#line 158 
enum v4l2_async_match_type {
    V4L2_ASYNC_MATCH_CUSTOM = 0,
    V4L2_ASYNC_MATCH_DEVNAME = 1,
    V4L2_ASYNC_MATCH_I2C = 2,
    V4L2_ASYNC_MATCH_FWNODE = 3
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_i2c_5159 {
   int adapter_id ;
   unsigned short address ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_custom_5160 {
   bool (*match)(struct device *, struct v4l2_async_subdev *) ;
   void *priv ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
union __anonunion_match_5158 {
   struct fwnode_handle *fwnode ;
   char *device_name ;
   struct __anonstruct_i2c_5159 i2c ;
   struct __anonstruct_custom_5160 custom ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_subdev {
   enum v4l2_async_match_type match_type ;
   union __anonunion_match_5158 match ;
   struct list_head list ;
   struct list_head asd_list ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier_operations {
   int (*bound)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
   int (*complete)(struct v4l2_async_notifier *) ;
   void (*unbind)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier {
   struct v4l2_async_notifier_operations *ops ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev *sd ;
   struct v4l2_async_notifier *parent ;
   struct list_head asd_list ;
   struct list_head waiting ;
   struct list_head done ;
   struct list_head list ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_m2m_ctx;
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_fh {
   struct list_head list ;
   struct video_device *vdev ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   enum v4l2_priority prio ;
   wait_queue_head_t wait ;
   struct mutex subscribe_lock ;
   struct list_head subscribed ;
   struct list_head available ;
   unsigned int navailable ;
   u32 sequence ;
   struct v4l2_m2m_ctx *m2m_ctx ;
};
#line 162 
enum v4l2_mbus_type {
    V4L2_MBUS_UNKNOWN = 0,
    V4L2_MBUS_PARALLEL = 1,
    V4L2_MBUS_BT656 = 2,
    V4L2_MBUS_CSI1 = 3,
    V4L2_MBUS_CCP2 = 4,
    V4L2_MBUS_CSI2_DPHY = 5,
    V4L2_MBUS_CSI2_CPHY = 6
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-mediabus.h"
struct v4l2_mbus_config {
   enum v4l2_mbus_type type ;
   unsigned int flags ;
};
#line 184 
struct v4l2_subdev_fh;
#line 185 
struct tuner_setup;
#line 186 
struct v4l2_mbus_frame_desc;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_decode_vbi_line {
   u32 is_second_field ;
   u8 *p ;
   u32 line ;
   u32 type ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_io_pin_config {
   u32 flags ;
   u8 pin ;
   u8 function ;
   u8 value ;
   u8 strength ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_core_ops {
   int (*log_status)(struct v4l2_subdev *) ;
   int (*s_io_pin_config)(struct v4l2_subdev *, size_t , struct v4l2_subdev_io_pin_config *) ;
   int (*init)(struct v4l2_subdev *, u32 ) ;
   int (*load_fw)(struct v4l2_subdev *) ;
   int (*reset)(struct v4l2_subdev *, u32 ) ;
   int (*s_gpio)(struct v4l2_subdev *, u32 ) ;
   long (*ioctl)(struct v4l2_subdev *, unsigned int , void *) ;
   long (*compat_ioctl32)(struct v4l2_subdev *, unsigned int , unsigned long ) ;
   int (*g_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_power)(struct v4l2_subdev *, int ) ;
   int (*interrupt_service_routine)(struct v4l2_subdev *, u32 , bool *) ;
   int (*subscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
   int (*unsubscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
};
#line 264  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_tuner_ops {
   int (*standby)(struct v4l2_subdev *) ;
   int (*s_radio)(struct v4l2_subdev *) ;
   int (*s_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*g_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*enum_freq_bands)(struct v4l2_subdev *, struct v4l2_frequency_band *) ;
   int (*g_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*s_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*g_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_type_addr)(struct v4l2_subdev *, struct tuner_setup *) ;
   int (*s_config)(struct v4l2_subdev *, struct v4l2_priv_tun_config *) ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_audio_ops {
   int (*s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_i2s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
};
#line 310 
enum v4l2_mbus_frame_desc_flags {
    V4L2_MBUS_FRAME_DESC_FL_LEN_MAX = 1,
    V4L2_MBUS_FRAME_DESC_FL_BLOB = 2
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc_entry {
   enum v4l2_mbus_frame_desc_flags flags ;
   u32 pixelcode ;
   u32 length ;
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc {
   struct v4l2_mbus_frame_desc_entry entry[4U] ;
   unsigned short num_entries ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_video_ops {
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_crystal_freq)(struct v4l2_subdev *, u32 , u32 ) ;
   int (*g_std)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*s_std)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*s_std_output)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*g_std_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*querystd)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_input_status)(struct v4l2_subdev *, u32 *) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
   int (*g_pixelaspect)(struct v4l2_subdev *, struct v4l2_fract *) ;
   int (*g_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*query_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_rx_buffer)(struct v4l2_subdev *, void *, unsigned int *) ;
};
#line 481  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_vbi_ops {
   int (*decode_vbi_line)(struct v4l2_subdev *, struct v4l2_decode_vbi_line *) ;
   int (*s_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_sliced_vbi_cap)(struct v4l2_subdev *, struct v4l2_sliced_vbi_cap *) ;
   int (*s_raw_fmt)(struct v4l2_subdev *, struct v4l2_vbi_format *) ;
   int (*g_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
   int (*s_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
};
#line 501  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_sensor_ops {
   int (*g_skip_top_lines)(struct v4l2_subdev *, u32 *) ;
   int (*g_skip_frames)(struct v4l2_subdev *, u32 *) ;
};
#line 505 
enum v4l2_subdev_ir_mode {
    V4L2_SUBDEV_IR_MODE_PULSE_WIDTH = 0
};
#line 540  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_parameters {
   unsigned int bytes_per_data_element ;
   enum v4l2_subdev_ir_mode mode ;
   bool enable ;
   bool interrupt_enable ;
   bool shutdown ;
   bool modulation ;
   u32 max_pulse_width ;
   unsigned int carrier_freq ;
   unsigned int duty_cycle ;
   bool invert_level ;
   bool invert_carrier_sense ;
   u32 noise_filter_min_width ;
   unsigned int carrier_range_lower ;
   unsigned int carrier_range_upper ;
   u32 resolution ;
};
#line 599  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_ops {
   int (*rx_read)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*rx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*rx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_write)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*tx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
};
#line 630  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_config {
   struct v4l2_mbus_framefmt try_fmt ;
   struct v4l2_rect try_crop ;
   struct v4l2_rect try_compose ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_ops {
   int (*init_cfg)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *) ;
   int (*enum_mbus_code)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_mbus_code_enum *) ;
   int (*enum_frame_size)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_size_enum *) ;
   int (*enum_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_interval_enum *) ;
   int (*get_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*set_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*get_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*set_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*get_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*set_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*dv_timings_cap)(struct v4l2_subdev *, struct v4l2_dv_timings_cap *) ;
   int (*enum_dv_timings)(struct v4l2_subdev *, struct v4l2_enum_dv_timings *) ;
   int (*link_validate)(struct v4l2_subdev *, struct media_link *, struct v4l2_subdev_format *, struct v4l2_subdev_format *) ;
   int (*get_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
   int (*set_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
};
#line 727  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ops {
   struct v4l2_subdev_core_ops *core ;
   struct v4l2_subdev_tuner_ops *tuner ;
   struct v4l2_subdev_audio_ops *audio ;
   struct v4l2_subdev_video_ops *video ;
   struct v4l2_subdev_vbi_ops *vbi ;
   struct v4l2_subdev_ir_ops *ir ;
   struct v4l2_subdev_sensor_ops *sensor ;
   struct v4l2_subdev_pad_ops *pad ;
};
#line 765  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_internal_ops {
   int (*registered)(struct v4l2_subdev *) ;
   void (*unregistered)(struct v4l2_subdev *) ;
   int (*open)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   int (*close)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   void (*release)(struct v4l2_subdev *) ;
};
#line 772 
struct regulator_bulk_data;
#line 797  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_platform_data {
   struct regulator_bulk_data *regulators ;
   int num_regulators ;
   void *host_priv ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev {
   struct media_entity entity ;
   struct list_head list ;
   struct module *owner ;
   bool owner_v4l2_dev ;
   u32 flags ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev_ops *ops ;
   struct v4l2_subdev_internal_ops *internal_ops ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   char name[32U] ;
   u32 grp_id ;
   void *dev_priv ;
   void *host_priv ;
   struct video_device *devnode ;
   struct device *dev ;
   struct fwnode_handle *fwnode ;
   struct list_head async_list ;
   struct v4l2_async_subdev *asd ;
   struct v4l2_async_notifier *notifier ;
   struct v4l2_async_notifier *subdev_notifier ;
   struct v4l2_subdev_platform_data *pdata ;
};
#line 906  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_fh {
   struct v4l2_fh vfh ;
   struct module *owner ;
   struct v4l2_subdev_pad_config *pad ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-device.h"
struct v4l2_device {
   struct device *dev ;
   struct media_device *mdev ;
   struct list_head subdevs ;
   spinlock_t lock ;
   char name[36U] ;
   void (*notify)(struct v4l2_subdev *, unsigned int , void *) ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct v4l2_prio_state prio ;
   struct kref ref ;
   void (*release)(struct v4l2_device *) ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
struct ptp_system_timestamp {
   struct timespec64 pre_ts ;
   struct timespec64 post_ts ;
};
#line 277 
struct dma_chan;
#line 279 
struct spi_controller;
#line 280 
struct spi_transfer;
#line 281 
struct spi_controller_mem_ops;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_statistics {
   spinlock_t lock ;
   unsigned long messages ;
   unsigned long transfers ;
   unsigned long errors ;
   unsigned long timedout ;
   unsigned long spi_sync ;
   unsigned long spi_sync_immediate ;
   unsigned long spi_async ;
   unsigned long long bytes ;
   unsigned long long bytes_rx ;
   unsigned long long bytes_tx ;
   unsigned long transfer_bytes_histo[17U] ;
   unsigned long transfers_split_maxsize ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_delay {
   u16 value ;
   u8 unit ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_device {
   struct device dev ;
   struct spi_controller *controller ;
   struct spi_controller *master ;
   u32 max_speed_hz ;
   u8 chip_select ;
   u8 bits_per_word ;
   bool rt ;
   u32 mode ;
   int irq ;
   void *controller_state ;
   void *controller_data ;
   char modalias[32U] ;
   char *driver_override ;
   int cs_gpio ;
   struct gpio_desc *cs_gpiod ;
   struct spi_delay word_delay ;
   struct spi_statistics statistics ;
};
#line 247 
struct spi_message;
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_controller {
   struct device dev ;
   struct list_head list ;
   s16 bus_num ;
   u16 num_chipselect ;
   u16 dma_alignment ;
   u32 mode_bits ;
   u32 bits_per_word_mask ;
   u32 min_speed_hz ;
   u32 max_speed_hz ;
   u16 flags ;
   bool slave ;
   size_t (*max_transfer_size)(struct spi_device *) ;
   size_t (*max_message_size)(struct spi_device *) ;
   struct mutex io_mutex ;
   spinlock_t bus_lock_spinlock ;
   struct mutex bus_lock_mutex ;
   bool bus_lock_flag ;
   int (*setup)(struct spi_device *) ;
   int (*set_cs_timing)(struct spi_device *, struct spi_delay *, struct spi_delay *, struct spi_delay *) ;
   int (*transfer)(struct spi_device *, struct spi_message *) ;
   void (*cleanup)(struct spi_device *) ;
   bool (*can_dma)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   bool queued ;
   struct kthread_worker kworker ;
   struct task_struct *kworker_task ;
   struct kthread_work pump_messages ;
   spinlock_t queue_lock ;
   struct list_head queue ;
   struct spi_message *cur_msg ;
   bool idling ;
   bool busy ;
   bool running ;
   bool rt ;
   bool auto_runtime_pm ;
   bool cur_msg_prepared ;
   bool cur_msg_mapped ;
   struct completion xfer_completion ;
   size_t max_dma_len ;
   int (*prepare_transfer_hardware)(struct spi_controller *) ;
   int (*transfer_one_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_transfer_hardware)(struct spi_controller *) ;
   int (*prepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*slave_abort)(struct spi_controller *) ;
   void (*set_cs)(struct spi_device *, bool ) ;
   int (*transfer_one)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   void (*handle_err)(struct spi_controller *, struct spi_message *) ;
   struct spi_controller_mem_ops *mem_ops ;
   struct spi_delay cs_setup ;
   struct spi_delay cs_hold ;
   struct spi_delay cs_inactive ;
   int *cs_gpios ;
   struct gpio_desc **cs_gpiods ;
   bool use_gpio_descriptors ;
   struct spi_statistics statistics ;
   struct dma_chan *dma_tx ;
   struct dma_chan *dma_rx ;
   void *dummy_rx ;
   void *dummy_tx ;
   int (*fw_translate_cs)(struct spi_controller *, unsigned int ) ;
   bool ptp_sts_supported ;
   unsigned long irq_flags ;
};
#line 890  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_transfer {
   void *tx_buf ;
   void *rx_buf ;
   unsigned int len ;
   dma_addr_t tx_dma ;
   dma_addr_t rx_dma ;
   struct sg_table tx_sg ;
   struct sg_table rx_sg ;
   unsigned int cs_change : 1 ;
   unsigned int tx_nbits : 3 ;
   unsigned int rx_nbits : 3 ;
   u8 bits_per_word ;
   u16 delay_usecs ;
   struct spi_delay delay ;
   struct spi_delay cs_change_delay ;
   struct spi_delay word_delay ;
   u32 speed_hz ;
   u32 effective_speed_hz ;
   unsigned int ptp_sts_word_pre ;
   unsigned int ptp_sts_word_post ;
   struct ptp_system_timestamp *ptp_sts ;
   bool timestamped_pre ;
   bool timestamped_post ;
   struct list_head transfer_list ;
};
#line 961  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_message {
   struct list_head transfers ;
   struct spi_device *spi ;
   unsigned int is_dma_mapped : 1 ;
   void (*complete)(void *) ;
   void *context ;
   unsigned int frame_length ;
   unsigned int actual_length ;
   int status ;
   struct list_head queue ;
   void *state ;
   struct list_head resources ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fix_screeninfo {
   char id[16U] ;
   unsigned long smem_start ;
   __u32 smem_len ;
   __u32 type ;
   __u32 type_aux ;
   __u32 visual ;
   __u16 xpanstep ;
   __u16 ypanstep ;
   __u16 ywrapstep ;
   __u32 line_length ;
   unsigned long mmio_start ;
   __u32 mmio_len ;
   __u32 accel ;
   __u16 capabilities ;
   __u16 reserved[2U] ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_bitfield {
   __u32 offset ;
   __u32 length ;
   __u32 msb_right ;
};
#line 241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_var_screeninfo {
   __u32 xres ;
   __u32 yres ;
   __u32 xres_virtual ;
   __u32 yres_virtual ;
   __u32 xoffset ;
   __u32 yoffset ;
   __u32 bits_per_pixel ;
   __u32 grayscale ;
   struct fb_bitfield red ;
   struct fb_bitfield green ;
   struct fb_bitfield blue ;
   struct fb_bitfield transp ;
   __u32 nonstd ;
   __u32 activate ;
   __u32 height ;
   __u32 width ;
   __u32 accel_flags ;
   __u32 pixclock ;
   __u32 left_margin ;
   __u32 right_margin ;
   __u32 upper_margin ;
   __u32 lower_margin ;
   __u32 hsync_len ;
   __u32 vsync_len ;
   __u32 sync ;
   __u32 vmode ;
   __u32 rotate ;
   __u32 colorspace ;
   __u32 reserved[4U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cmap {
   __u32 start ;
   __u32 len ;
   __u16 *red ;
   __u16 *green ;
   __u16 *blue ;
   __u16 *transp ;
};
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_copyarea {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 sx ;
   __u32 sy ;
};
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fillrect {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 color ;
   __u32 rop ;
};
#line 359  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_image {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 fg_color ;
   __u32 bg_color ;
   __u8 depth ;
   char *data ;
   struct fb_cmap cmap ;
};
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fbcurpos {
   __u16 x ;
   __u16 y ;
};
#line 387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cursor {
   __u16 set ;
   __u16 enable ;
   __u16 rop ;
   char *mask ;
   struct fbcurpos hot ;
   struct fb_image image ;
};
#line 400 
enum backlight_type {
    BACKLIGHT_RAW = 1,
    BACKLIGHT_PLATFORM = 2,
    BACKLIGHT_FIRMWARE = 3,
    BACKLIGHT_TYPE_MAX = 4
};
#line 412 
enum backlight_scale {
    BACKLIGHT_SCALE_UNKNOWN = 0,
    BACKLIGHT_SCALE_LINEAR = 1,
    BACKLIGHT_SCALE_NON_LINEAR = 2
};
#line 418 
struct backlight_device;
#line 419 
struct fb_info;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_ops {
   unsigned int options ;
   int (*update_status)(struct backlight_device *) ;
   int (*get_brightness)(struct backlight_device *) ;
   int (*check_fb)(struct backlight_device *, struct fb_info *) ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_properties {
   int brightness ;
   int max_brightness ;
   int power ;
   int fb_blank ;
   enum backlight_type type ;
   unsigned int state ;
   enum backlight_scale scale ;
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_device {
   struct backlight_properties props ;
   struct mutex update_lock ;
   struct mutex ops_lock ;
   struct backlight_ops *ops ;
   struct notifier_block fb_notif ;
   struct list_head entry ;
   struct device dev ;
   bool fb_bl_on[32U] ;
   int use_count ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_chroma {
   __u32 redx ;
   __u32 greenx ;
   __u32 bluex ;
   __u32 whitex ;
   __u32 redy ;
   __u32 greeny ;
   __u32 bluey ;
   __u32 whitey ;
};
#line 63 
struct fb_videomode;
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_monspecs {
   struct fb_chroma chroma ;
   struct fb_videomode *modedb ;
   __u8 manufacturer[4U] ;
   __u8 monitor[14U] ;
   __u8 serial_no[14U] ;
   __u8 ascii[14U] ;
   __u32 modedb_len ;
   __u32 model ;
   __u32 serial ;
   __u32 year ;
   __u32 week ;
   __u32 hfmin ;
   __u32 hfmax ;
   __u32 dclkmin ;
   __u32 dclkmax ;
   __u16 input ;
   __u16 dpms ;
   __u16 signal ;
   __u16 vfmin ;
   __u16 vfmax ;
   __u16 gamma ;
   __u16 gtf : 1 ;
   __u16 misc ;
   __u8 version ;
   __u8 revision ;
   __u8 max_x ;
   __u8 max_y ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_blit_caps {
   u32 x ;
   u32 y ;
   u32 len ;
   u32 flags ;
};
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_pixmap {
   u8 *addr ;
   u32 size ;
   u32 offset ;
   u32 buf_align ;
   u32 scan_align ;
   u32 access_align ;
   u32 flags ;
   u32 blit_x ;
   u32 blit_y ;
   void (*writeio)(struct fb_info *, void *, void *, unsigned int ) ;
   void (*readio)(struct fb_info *, void *, void *, unsigned int ) ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_deferred_io {
   unsigned long delay ;
   struct mutex lock ;
   struct list_head pagelist ;
   void (*first_io)(struct fb_info *) ;
   void (*deferred_io)(struct fb_info *, struct list_head *) ;
};
#line 228  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_ops {
   struct module *owner ;
   int (*fb_open)(struct fb_info *, int ) ;
   int (*fb_release)(struct fb_info *, int ) ;
   ssize_t (*fb_read)(struct fb_info *, char *, size_t , loff_t *) ;
   ssize_t (*fb_write)(struct fb_info *, char *, size_t , loff_t *) ;
   int (*fb_check_var)(struct fb_var_screeninfo *, struct fb_info *) ;
   int (*fb_set_par)(struct fb_info *) ;
   int (*fb_setcolreg)(unsigned int , unsigned int , unsigned int , unsigned int , unsigned int , struct fb_info *) ;
   int (*fb_setcmap)(struct fb_cmap *, struct fb_info *) ;
   int (*fb_blank)(int , struct fb_info *) ;
   int (*fb_pan_display)(struct fb_var_screeninfo *, struct fb_info *) ;
   void (*fb_fillrect)(struct fb_info *, struct fb_fillrect *) ;
   void (*fb_copyarea)(struct fb_info *, struct fb_copyarea *) ;
   void (*fb_imageblit)(struct fb_info *, struct fb_image *) ;
   int (*fb_cursor)(struct fb_info *, struct fb_cursor *) ;
   int (*fb_sync)(struct fb_info *) ;
   int (*fb_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_compat_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_mmap)(struct fb_info *, struct vm_area_struct *) ;
   void (*fb_get_caps)(struct fb_info *, struct fb_blit_caps *, struct fb_var_screeninfo *) ;
   void (*fb_destroy)(struct fb_info *) ;
   int (*fb_debug_enter)(struct fb_info *) ;
   int (*fb_debug_leave)(struct fb_info *) ;
};
#line 306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilemap {
   __u32 width ;
   __u32 height ;
   __u32 depth ;
   __u32 length ;
   __u8 *data ;
};
#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilerect {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 index ;
   __u32 fg ;
   __u32 bg ;
   __u32 rop ;
};
#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilearea {
   __u32 sx ;
   __u32 sy ;
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tileblit {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 fg ;
   __u32 bg ;
   __u32 length ;
   __u32 *indices ;
};
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilecursor {
   __u32 sx ;
   __u32 sy ;
   __u32 mode ;
   __u32 shape ;
   __u32 fg ;
   __u32 bg ;
};
#line 355  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tile_ops {
   void (*fb_settile)(struct fb_info *, struct fb_tilemap *) ;
   void (*fb_tilecopy)(struct fb_info *, struct fb_tilearea *) ;
   void (*fb_tilefill)(struct fb_info *, struct fb_tilerect *) ;
   void (*fb_tileblit)(struct fb_info *, struct fb_tileblit *) ;
   void (*fb_tilecursor)(struct fb_info *, struct fb_tilecursor *) ;
   int (*fb_get_tilemax)(struct fb_info *) ;
};
#line 499  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct aperture {
   resource_size_t base ;
   resource_size_t size ;
};
#line 497  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct apertures_struct {
   unsigned int count ;
   struct aperture ranges[0U] ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
union __anonunion_6061 {
   char *screen_base ;
   char *screen_buffer ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_info {
   atomic_t count ;
   int node ;
   int flags ;
   int fbcon_rotate_hint ;
   struct mutex lock ;
   struct mutex mm_lock ;
   struct fb_var_screeninfo var ;
   struct fb_fix_screeninfo fix ;
   struct fb_monspecs monspecs ;
   struct work_struct queue ;
   struct fb_pixmap pixmap ;
   struct fb_pixmap sprite ;
   struct fb_cmap cmap ;
   struct list_head modelist ;
   struct fb_videomode *mode ;
   struct backlight_device *bl_dev ;
   struct mutex bl_curve_mutex ;
   u8 bl_curve[128U] ;
   struct delayed_work deferred_work ;
   struct fb_deferred_io *fbdefio ;
   struct fb_ops *fbops ;
   struct device *device ;
   struct device *dev ;
   int class_flag ;
   struct fb_tile_ops *tileops ;
   union __anonunion_6061 __anonCompField_fb_info_73 ;
   unsigned long screen_size ;
   void *pseudo_palette ;
   u32 state ;
   void *fbcon_par ;
   void *par ;
   struct apertures_struct *apertures ;
   bool skip_vt_switch ;
};
#line 767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_videomode {
   char *name ;
   u32 refresh ;
   u32 xres ;
   u32 yres ;
   u32 pixclock ;
   u32 left_margin ;
   u32 right_margin ;
   u32 upper_margin ;
   u32 lower_margin ;
   u32 hsync_len ;
   u32 vsync_len ;
   u32 sync ;
   u32 vmode ;
   u32 flag ;
};
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct ldv_kmem_cache {
   char *name ;
   unsigned int size ;
};
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
typedef unsigned long pthread_t;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
union pthread_attr_t {
   char __size[56U] ;
   long __align ;
};
#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
typedef union pthread_attr_t pthread_attr_t;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 17  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_free_irq_6 {
   int arg0 ;
   int signal_pending ;
};
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_interrupt_scenario_hns3_irq_handle_13 {
   int arg0 ;
   enum irqreturn (*arg1)(int , void *) ;
   enum irqreturn (*arg2)(int , void *) ;
   void *arg3 ;
   int signal_pending ;
};
#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_character_driver_scenario_hns3_dbg_cmd_fops_12 {
   struct file_operations *arg0 ;
   int signal_pending ;
};
#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_random_allocationless_scenario_hns3_get_rss_14 {
   struct net_device *arg0 ;
   int signal_pending ;
};
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_pci_scenario_hns3_driver_15 {
   struct pci_driver *arg0 ;
   int signal_pending ;
};
/* compiler builtin: 
   unsigned short __builtin_bswap16(unsigned short);   */
/* compiler builtin: 
   unsigned int __builtin_bswap32(unsigned int);   */
/* compiler builtin: 
   void *__builtin_memcpy(void *, void const *, unsigned long);   */
/* compiler builtin: 
   void __builtin_prefetch(void const * , ...);   */
/* compiler builtin: 
   void __builtin_unreachable(void);   */
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/inline_asm.h"
#line 22 
void ldv_inline_asm(void);
#line 7  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_enet.i.aux"
#line 7 
void ldv_atomic_inc(atomic_t *v);
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
#line 16 
extern struct module __this_module;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler.h"
__inline static void __read_once_size(void *p, void *res, int size)
{
  #line 199 
  switch (size) {
    #line 199 
    case 1: 
            #line 199 
    ;
    #line 199 
    *((__u8 *)res) = *((__u8 *)p);
    #line 199 
    break;
    #line 199 
    case 2: 
            #line 199 
    ;
    #line 199 
    *((__u16 *)res) = *((__u16 *)p);
    #line 199 
    break;
    #line 199 
    case 4: 
            #line 199 
    ;
    #line 199 
    *((__u32 *)res) = *((__u32 *)p);
    #line 199 
    break;
    #line 199 
    case 8: 
            #line 199 
    ;
    #line 199 
    *((__u64 *)res) = *((__u64 *)p);
    #line 199 
    break;
    #line 199 
    default: 
             #line 199 
    ;
    #line 200 
    ldv_inline_asm();
    #line 199 
    __builtin_memcpy(res,(void const *)p,(unsigned long)size);
    #line 200 
    ldv_inline_asm();
  }
  #line 203 
  return;
}

#line 220  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler.h"
__inline static void __write_once_size(void *p, void *res, int size)
{
  #line 222 
  switch (size) {
    #line 223 
    case 1: 
            #line 223 
    ;
    #line 223 
    *((__u8 *)p) = *((__u8 *)res);
    #line 223 
    break;
    #line 224 
    case 2: 
            #line 224 
    ;
    #line 224 
    *((__u16 *)p) = *((__u16 *)res);
    #line 224 
    break;
    #line 225 
    case 4: 
            #line 225 
    ;
    #line 225 
    *((__u32 *)p) = *((__u32 *)res);
    #line 225 
    break;
    #line 226 
    case 8: 
            #line 226 
    ;
    #line 226 
    *((__u64 *)p) = *((__u64 *)res);
    #line 226 
    break;
    #line 227 
    default: 
             #line 227 
    ;
    #line 228 
    ldv_inline_asm();
    #line 229 
    __builtin_memcpy(p,(void const *)res,(unsigned long)size);
    #line 230 
    ldv_inline_asm();
  }
  #line 232 
  return;
}

#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kasan-checks.h"
__inline static bool kasan_check_read(void *p, unsigned int size)
{
  #line 36 
  return (_Bool)1;
}

#line 136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool arch_test_and_set_bit(long nr, unsigned long *addr)
{
  #line 138 
  bool c;
  #line 139 
  ldv_inline_asm();
  #line 138 
  return c;
}

#line 204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool constant_test_bit(long nr, unsigned long *addr)
{
  #line 207 
  return (_Bool)(((*(addr + (unsigned long)(nr >> 6)) >> (nr & 63L)) & 1UL) != 0UL);
}

#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool variable_test_bit(long nr, unsigned long *addr)
{
  #line 212 
  bool oldbit;
  #line 213 
  ldv_inline_asm();
  #line 219 
  return oldbit;
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 256  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_enet.i.aux"
static void cif_set_bit(long nr, unsigned long *addr);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 263  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_enet.i.aux"
static void cif_clear_bit(long nr, unsigned long *addr);
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
__inline static bool test_and_set_bit(long nr, unsigned long *addr)
{
  #line 70 
  kasan_check_read((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 71 
  return arch_test_and_set_bit(nr,addr);
}

#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-non-atomic.h"
__inline static bool test_bit(long nr, unsigned long *addr)
{
  #line 111 
  int tmp_1;
  #line 110 
  kasan_check_read((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 111 
  if (0 != 0) {
    #line 111 
    tmp_1 = (int)constant_test_bit(nr,addr) != 0;
  }
  else {
    #line 111 
    tmp_1 = (int)variable_test_bit(nr,addr) != 0;
  }
  #line 111 
  return (_Bool)(tmp_1 != 0);
}

#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
#line 171 
int printk(char * , ...);
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/jump_label.h"
__inline static bool arch_static_branch(struct static_key *key, bool branch)
{
  #line 27 
  ldv_inline_asm();
  #line 28 
  ldv_inline_asm();
  #line 34 
  return (_Bool)0;
  #line 35 
  l_yes: 
         #line 35 
  ;
  #line 36 
  return (_Bool)1;
}

#line 198  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
__inline static bool static_key_false(struct static_key *key)
{
  #line 200 
  return arch_static_branch(key,(_Bool)0);
}

#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
#line 70 
void __dynamic_netdev_dbg(struct _ddebug *, struct net_device *, char * , ...);
#line 472  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
#line 472 
int snprintf(char *, size_t, char * , ...);
#line 570 
#line 570 
extern enum system_states system_state;
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 270  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_enet.i.aux"
static void INIT_LIST_HEAD(struct list_head *list);
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/percpu.h"
#line 88 
void __bad_percpu_size(void);
#line 309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-defs.h"
#line 309 
void __bad_size_call_parameter(void);
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bug.h"
#line 89 
void __warn_printk(char * , ...);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
#line 14 
extern unsigned long page_offset_base;
#line 15 
#line 15 
extern unsigned long vmalloc_base;
#line 16 
#line 16 
extern unsigned long vmemmap_base;
#line 29 
#line 29 
unsigned long __phys_addr(unsigned long);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 14 
void *memcpy(void *, void *, size_t);
#line 18 
#line 18 
void *memset(void *, int, size_t);
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg_64.h"
__inline static int arch_atomic_read(atomic_t *v)
{
  #line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
  union __anonunion___u_67 __u;
  #line 31 
  __read_once_size((void *)(& v->counter),(void *)(& __u.__c),4);
  #line 31 
  return (__u.__val);
}

#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
__inline static bool arch_atomic_dec_and_test(atomic_t *v)
{
  #line 125 
  bool c;
  #line 126 
  ldv_inline_asm();
  #line 125 
  return c;
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static int atomic_read(atomic_t *v)
{
  #line 26 
  kasan_check_read((void *)v,4U);
  #line 27 
  return arch_atomic_read(v);
}

#line 237 
#line 319  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_enet.i.aux"
static void atomic_inc(atomic_t *v);
#line 745  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static bool atomic_dec_and_test(atomic_t *v)
{
  #line 747 
  kasan_check_read((void *)v,4U);
  #line 748 
  return arch_atomic_dec_and_test(v);
}

#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
#line 39 
extern unsigned int nr_cpu_ids;
#line 99 
#line 99 
extern atomic_t __num_online_cpus;
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
__inline static unsigned int num_online_cpus(void)
{
  #line 112 
  return (unsigned int)atomic_read(& __num_online_cpus);
}

#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
__inline static void cpu_max_bits_warn(unsigned int cpu, unsigned int bits)
{
  #line 137 
  int __ret_warn_on = cpu >= bits;
  #line 137 
  if ((long)(__ret_warn_on != 0) != 0L) {
    #line 138 
    ldv_inline_asm();
    #line 139 
    ldv_inline_asm();
  }
  #line 137 
  long tmp = (long)(__ret_warn_on != 0);
  #line 139 
  return;
}

#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
__inline static unsigned int cpumask_check(unsigned int cpu)
{
  #line 144 
  cpu_max_bits_warn(cpu,nr_cpu_ids);
  #line 145 
  return cpu;
}

#line 247 
#line 247 
unsigned int cpumask_local_spread(unsigned int, int);
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
__inline static void cpumask_set_cpu(unsigned int cpu, struct cpumask *dstp)
{
  #line 327 
  ;
  #line 327 
  cif_set_bit((long)cpumask_check(cpu),(unsigned long *)(& dstp->bits));
  #line 328 
  return;
}

#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
#line 20 
unsigned long native_save_fl(void);
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
unsigned long native_save_fl(void)
{
  #line 22 
  unsigned long flags;
  #line 23 
  ldv_inline_asm();
  #line 35 
  return flags;
}

#line 38 
#line 39 
void native_restore_fl(unsigned long flags);
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
void native_restore_fl(unsigned long flags)
{
  #line 41 
  ldv_inline_asm();
  #line 42 
  return;
}

#line 834  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
__inline static void prefetchw(void *x)
{
  #line 836 
  ldv_inline_asm();
  #line 837 
  return;
}

#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cpufeature.h"
__inline static bool _static_cpu_has(u16 bit)
{
  #line 177 
  ldv_inline_asm();
  #line 178 
  ldv_inline_asm();
  #line 211 
  t_yes: 
         #line 211 
  ;
  #line 212 
  return (_Bool)1;
  #line 213 
  t_no: 
        #line 213 
  ;
  #line 214 
  return (_Bool)0;
}

#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_api_smp.h"
#line 28 
void _raw_spin_lock_bh(raw_spinlock_t *);
#line 40 
#line 40 
void _raw_spin_unlock_bh(raw_spinlock_t *);
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_bh(spinlock_t *lock)
{
  #line 343 
  _raw_spin_lock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 344 
  return;
}

#line 345 
#line 759  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_enet.i.aux"
static void cif_spin_lock_bh_addr_list_lock_of_net_device(spinlock_t *lock);
#line 381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_bh(spinlock_t *lock)
{
  #line 383 
  _raw_spin_unlock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 384 
  return;
}

#line 385 
#line 777  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_enet.i.aux"
static void cif_spin_unlock_bh_addr_list_lock_of_net_device(spinlock_t *lock);
#line 40 
#line 40 
void ldv_spin_model_lock(char *);
#line 41 
#line 41 
void ldv_spin_model_unlock(char *);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 27 
void *ldv_devm_kzalloc(size_t size, gfp_t flags);
#line 29 
#line 29 
void *ldv_devm_kcalloc(size_t n, size_t size, gfp_t flags);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 21 
void ldv_set_bit(long nr, unsigned long *addr);
#line 22 
#line 22 
void ldv_clear_bit(long nr, unsigned long *addr);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/list.h"
#line 23 
void ldv_init_list_head(struct list_head *list);
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmdebug.h"
#line 12 
void dump_page(struct page *, char *);
#line 410  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nodemask.h"
#line 410 
extern nodemask_t node_states[5U];
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nodemask.h"
__inline static int node_state(int node, enum node_states state)
{
  #line 415 
  return (int)test_bit((long)node,
               (unsigned long *)(& node_states[(unsigned int)state].bits));
}

#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
#line 81 
extern unsigned long jiffies;
#line 291 
#line 291 
unsigned int jiffies_to_msecs(unsigned long);
#line 302 
#line 302 
unsigned long __msecs_to_jiffies(unsigned int);
#line 309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
__inline static unsigned long _msecs_to_jiffies(unsigned int m)
{
  #line 311 
  return (unsigned long)(((long)m + 3L) / 4L);
}

#line 364  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
__inline static unsigned long msecs_to_jiffies(unsigned int m)
{
  #line 366 
  if (0 != 0) {
    #line 367 
    if ((int)m < 0) 
                    #line 368 
                    return 4611686018427387902UL;
    #line 369 
    return _msecs_to_jiffies(m);
  }
  else {
    #line 371 
    return __msecs_to_jiffies(m);
  }
}

#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page-flags.h"
__inline static struct page *compound_head(struct page *page)
{
  #line 175 
  union __anonunion___u_147 __u;
  #line 174 
  __read_once_size((void *)(& page->__anonCompField_page_43.__anonCompField___anonunion_129_38.compound_head),(void *)(& __u.__c),8);
  #line 174 
  unsigned long head = (__u.__val);
  #line 176 
  if ((long)((head & 1UL) != 0UL) != 0L) 
                                         #line 177 
                                         return (struct page *)(head + 18446744073709551615UL);
  #line 178 
  return page;
}

#line 192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page-flags.h"
__inline static int PagePoisoned(struct page *page)
{
  #line 194 
  return page->flags == 18446744073709551615UL;
}

#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static unsigned int readl(void *addr)
{
  #line 59 
  unsigned int ret;
  #line 60 
  ldv_inline_asm();
  #line 59 
  return ret;
}

#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static void writel(unsigned int val, void *addr)
{
  #line 69 
  ldv_inline_asm();
  #line 70 
  return;
}

#line 257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/overflow.h"
#line 257 
extern int ( /* missing proto */ __builtin_mul_overflow)(unsigned long x_0, unsigned long x_1, size_t *x_2);
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/overflow.h"
__inline static size_t array3_size(size_t a, size_t b, size_t c)
{
  #line 281 
  size_t __a_0;
  #line 281 
  size_t __b_0;
  #line 281 
  size_t *__d_0;
  #line 279 
  size_t __a;
  #line 279 
  size_t __b;
  #line 279 
  size_t *__d;
  #line 277 
  size_t bytes;
  {
    #line 279 
    __a = a;
    #line 279 
    __b = b;
    #line 279 
    __d = & bytes;
    #line 279 
    int tmp = & __a == __d;
    }
  #line 279 
  if (__builtin_mul_overflow(__a,__b,__d) != 0) 
                                                #line 280 
                                                return 18446744073709551615UL;
  {
    #line 281 
    __a_0 = bytes;
    #line 281 
    __b_0 = c;
    #line 281 
    __d_0 = & bytes;
    #line 281 
    int tmp_3 = & __a_0 == __d_0;
    }
  #line 281 
  if (__builtin_mul_overflow(__a_0,__b_0,__d_0) != 0) 
                                                      #line 282 
                                                      return 18446744073709551615UL;
  #line 284 
  return bytes;
}

#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/topology.h"
__inline static int numa_node_id(void)
{
  #line 88 
  int pscr_ret__;
  {
    #line 88 
    void *__vpp_verify = (void *)0;
    #line 88 
    void *tmp = __vpp_verify;
  }
  #line 88 
  switch (4UL) {
    #line 88 
    int pfo_ret__;
    #line 88 
    int pfo_ret___0;
    #line 88 
    int pfo_ret___1;
    #line 88 
    int pfo_ret___2;
    #line 88 
    case (unsigned long)1: 
                           #line 88 
    ;
    #line 88 
    switch (4UL) {
      #line 88 
      case (unsigned long)1: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)2: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)4: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)8: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      default: 
               #line 88 
      ;
      #line 88 
      __bad_percpu_size();
    }
    #line 88 
    pscr_ret__ = pfo_ret__;
    #line 88 
    break;
    #line 88 
    case (unsigned long)2: 
                           #line 88 
    ;
    #line 88 
    switch (4UL) {
      #line 88 
      case (unsigned long)1: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)2: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)4: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)8: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      default: 
               #line 88 
      ;
      #line 88 
      __bad_percpu_size();
    }
    #line 88 
    pscr_ret__ = pfo_ret___0;
    #line 88 
    break;
    #line 88 
    case (unsigned long)4: 
                           #line 88 
    ;
    #line 88 
    switch (4UL) {
      #line 88 
      case (unsigned long)1: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)2: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)4: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)8: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      default: 
               #line 88 
      ;
      #line 88 
      __bad_percpu_size();
    }
    #line 88 
    pscr_ret__ = pfo_ret___1;
    #line 88 
    break;
    #line 88 
    case (unsigned long)8: 
                           #line 88 
    ;
    #line 88 
    switch (4UL) {
      #line 88 
      case (unsigned long)1: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)2: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)4: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)8: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      default: 
               #line 88 
      ;
      #line 88 
      __bad_percpu_size();
    }
    #line 88 
    pscr_ret__ = pfo_ret___2;
    #line 88 
    break;
    #line 88 
    default: 
             #line 88 
    ;
    #line 88 
    __bad_size_call_parameter();
    #line 88 
    break;
  }
  #line 88 
  return pscr_ret__;
}

#line 177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/topology.h"
__inline static int numa_mem_id(void)
{
  #line 179 
  return numa_node_id();
}

#line 490  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
#line 490 
struct page *__alloc_pages_nodemask(gfp_t, unsigned int, int, nodemask_t *);
#line 494  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
__inline static struct page *__alloc_pages(gfp_t gfp_mask, unsigned int order, int preferred_nid)
{
  #line 496 
  return __alloc_pages_nodemask(gfp_mask,order,preferred_nid,(nodemask_t *)0);
}

#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
__inline static struct page *__alloc_pages_node(int nid, gfp_t gfp_mask, unsigned int order)
{
  #line 506 
  if ((long)((unsigned int)nid > 1023U) != 0L) {
    #line 507 
    ldv_inline_asm();
    #line 508 
    ldv_inline_asm();
    #line 509 
    ldv_inline_asm();
    #line 506 
    ;
  }
  {
    #line 507 
    int tmp_0;
    #line 507 
    if ((gfp_mask & 2097152U) != 0U) {
      #line 507 
      if (node_state(nid,(enum node_states)N_ONLINE) == 0) 
                                                           #line 507 
                                                           tmp_0 = 1; else 
                                                                    #line 507 
                                                                    tmp_0 = 0;
    }
    else 
         #line 507 
         tmp_0 = 0;
    #line 507 
    int __ret_warn_on = tmp_0;
    #line 507 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 508 
      ldv_inline_asm();
      #line 509 
      ldv_inline_asm();
    }
    #line 507 
    long tmp_2 = (long)(__ret_warn_on != 0);
  }
  #line 509 
  return __alloc_pages(gfp_mask,order,nid);
}

#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
__inline static struct page *alloc_pages_node(int nid, gfp_t gfp_mask, unsigned int order)
{
  #line 520 
  if (nid == -1) 
                 #line 521 
                 nid = numa_mem_id();
  #line 523 
  return __alloc_pages_node(nid,gfp_mask,order);
}

#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
__inline static char *kobject_name(struct kobject *kobj)
{
  #line 91 
  return kobj->name;
}

#line 937  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 975  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_enet.i.aux"
static void *cif_devm_kzalloc(struct device *dev, size_t size, gfp_t flags);
#line 952  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 982  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_enet.i.aux"
static void *cif_devm_kcalloc(struct device *dev, size_t n, size_t size, gfp_t flags);
#line 952  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 952 
void devm_kfree(struct device *, void *);
#line 1370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static char *dev_name(struct device *dev)
{
  #line 1373 
  if (dev->init_name != (char *)0) 
                                   #line 1374 
                                   return dev->init_name;
  #line 1376 
  return kobject_name(& dev->kobj);
}

#line 1383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static int dev_to_node(struct device *dev)
{
  #line 1385 
  return dev->numa_node;
}

#line 1417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static void *dev_get_drvdata(struct device *dev)
{
  #line 1419 
  return dev->driver_data;
}

#line 1422  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static void dev_set_drvdata(struct device *dev, void *data)
{
  #line 1424 
  dev->driver_data = data;
  #line 1425 
  return;
}

#line 1680 
#line 1680 
char *dev_driver_string(struct device *);
#line 1712 
#line 1712 
void _dev_err(struct device *, char * , ...);
#line 1714 
#line 1714 
void _dev_warn(struct device *, char * , ...);
#line 1718 
#line 1718 
void _dev_info(struct device *, char * , ...);
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
#line 21 
void debug_dma_map_single(struct device *, void *, unsigned long);
#line 24 
#line 24 
void debug_dma_map_page(struct device *, struct page *, size_t, size_t, int, dma_addr_t);
#line 28 
#line 28 
void debug_dma_mapping_error(struct device *, dma_addr_t);
#line 30 
#line 30 
void debug_dma_unmap_page(struct device *, dma_addr_t, size_t, int);
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_ref.h"
#line 11 
extern struct tracepoint __tracepoint_page_ref_mod;
#line 12 
#line 12 
extern struct tracepoint __tracepoint_page_ref_mod_and_test;
#line 30 
#line 30 
void __page_ref_mod(struct page *, int);
#line 31 
#line 31 
void __page_ref_mod_and_test(struct page *, int, int);
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_ref.h"
__inline static int page_ref_count(struct page *page)
{
  #line 67 
  return atomic_read(& page->_refcount);
}

#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_ref.h"
__inline static int page_count(struct page *page)
{
  #line 72 
  return atomic_read(& compound_head(page)->_refcount);
}

#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_ref.h"
__inline static void page_ref_inc(struct page *page)
{
  #line 107 
  atomic_inc(& page->_refcount);
  #line 108 
  if ((int)static_key_false(& __tracepoint_page_ref_mod.key) != 0) 
                                                                   #line 109 
                                                                   __page_ref_mod(page,1);
  #line 110 
  return;
}

#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_ref.h"
__inline static int page_ref_dec_and_test(struct page *page)
{
  #line 139 
  int ret = (int)atomic_dec_and_test(& page->_refcount);
  #line 141 
  if ((int)static_key_false(& __tracepoint_page_ref_mod_and_test.key) != 0) 
    #line 142 
    __page_ref_mod_and_test(page,-1,ret);
  #line 143 
  return ret;
}

#line 590  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static int put_page_testzero(struct page *page)
{
  #line 592 
  if ((long)(page_ref_count(page) == 0) != 0L) {
    #line 592 
    dump_page(page,(char *)"VM_BUG_ON_PAGE(");
    #line 593 
    ldv_inline_asm();
    #line 594 
    ldv_inline_asm();
    #line 595 
    ldv_inline_asm();
    #line 592 
    ;
  }
  #line 593 
  return page_ref_dec_and_test(page);
}

#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static bool is_vmalloc_addr(void *x)
{
  #line 633 
  int tmp_1;
  #line 631 
  unsigned long addr = (unsigned long)x;
  #line 633 
  if (addr >= vmalloc_base) {
    #line 633 
    unsigned long tmp_0;
    #line 633 
    if ((int)_static_cpu_has((unsigned short)528) != 0) 
                                                        #line 633 
                                                        tmp_0 = 14073748835532800UL; else 
                                                                    #line 633 
                                                                    tmp_0 = 35184372088832UL;
    #line 633 
    ;
    #line 633 
    if ((tmp_0 + vmalloc_base) + 18446744073709551615UL > addr) 
                                                                #line 633 
                                                                tmp_1 = 1; else 
                                                                    #line 633 
                                                                    tmp_1 = 0;
  }
  else 
       #line 633 
       tmp_1 = 0;
  #line 633 
  return (_Bool)(tmp_1 != 0);
}

#line 736 
#line 736 
void __put_page(struct page *);
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static enum zone_type page_zonenum(struct page *page)
{
  #line 937 
  return (enum zone_type)((unsigned int)(page->flags >> 51UL) & 7U);
}

#line 941  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static bool is_zone_device_page(struct page *page)
{
  #line 943 
  return (_Bool)(page_zonenum(page) == (unsigned int)ZONE_DEVICE);
}

#line 955 
#line 955 
void __put_devmap_managed_page(struct page *);
#line 956 
#line 956 
extern struct static_key_false devmap_managed_key;
#line 957  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static bool put_devmap_managed_page(struct page *page)
{
  #line 959 
  bool branch;
  #line 959 
  branch = arch_static_branch(& devmap_managed_key.key,(_Bool)0);
  #line 959 
  if ((long)((long)((int)branch != 0)) == 0L) 
                                              #line 960 
                                              return (_Bool)0;
  #line 961 
  if (! is_zone_device_page(page)) 
                                   #line 962 
                                   return (_Bool)0;
  #line 963 
  switch ((unsigned int)(page->__anonCompField_page_43.__anonCompField___anonunion_129_42.pgmap)->type) {
    #line 964 
    case (unsigned int)1: 
                          #line 964 
    ;
    #line 965 
    case (unsigned int)2: 
                          #line 965 
    ;
    #line 966 
    __put_devmap_managed_page(page);
    #line 967 
    return (_Bool)1;
    #line 968 
    default: 
             #line 968 
    ;
    #line 969 
    break;
  }
  #line 971 
  return (_Bool)0;
}

#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static void get_page(struct page *page)
{
  #line 1003 
  page = compound_head(page);
  #line 1008 
  if ((long)((unsigned int)page_ref_count(page) + 127U <= 127U) != 0L) {
    #line 1008 
    dump_page(page,(char *)"VM_BUG_ON_PAGE(");
    #line 1009 
    ldv_inline_asm();
    #line 1010 
    ldv_inline_asm();
    #line 1011 
    ldv_inline_asm();
    #line 1008 
    ;
  }
  #line 1009 
  page_ref_inc(page);
  #line 1010 
  return;
}

#line 1021  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static void put_page(struct page *page)
{
  #line 1023 
  page = compound_head(page);
  #line 1031 
  if ((int)put_devmap_managed_page(page) != 0) 
                                               #line 1032 
                                               return;
  #line 1034 
  if (put_page_testzero(page) != 0) 
                                    #line 1035 
                                    __put_page(page);
  #line 1036 
  return;
}

#line 1083  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static int page_to_nid(struct page *page)
{
  #line 1085 
  struct page *p = page;
  {
    #line 1087 
    if ((long)(PagePoisoned(p) != 0) != 0L) {
      #line 1087 
      dump_page(p,(char *)"VM_BUG_ON_PAGE(");
      #line 1088 
      ldv_inline_asm();
      #line 1089 
      ldv_inline_asm();
      #line 1090 
      ldv_inline_asm();
      #line 1087 
      ;
    }
  }
  #line 1087 
  ;
  #line 1087 
  return (int)(p->flags >> 54UL) & 1023;
}

#line 1299  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static void *lowmem_page_address(struct page *page)
{
  #line 1301 
  return (void *)((unsigned long)((unsigned long long)((page - (struct page *)vmemmap_base) / 64L) << 12) + page_offset_base);
}

#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static int valid_dma_direction(int dma_direction)
{
  #line 146 
  return (unsigned int)dma_direction <= 2U;
}

#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static bool dma_is_direct(struct dma_map_ops *ops)
{
  #line 193 
  return (_Bool)((long)(ops == (struct dma_map_ops *)0) != 0L);
}

#line 200 
#line 200 
dma_addr_t dma_direct_map_page(struct device *, struct page *, unsigned long, size_t, enum dma_data_direction, unsigned long);
#line 228 
#line 228 
void dma_direct_unmap_page(struct device *, dma_addr_t, size_t, enum dma_data_direction, unsigned long);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/dma-mapping.h"
#line 19 
extern struct dma_map_ops *dma_ops;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/dma-mapping.h"
__inline static struct dma_map_ops *get_arch_dma_ops(struct bus_type *bus)
{
  #line 23 
  return dma_ops;
}

#line 261  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static struct dma_map_ops *get_dma_ops(struct device *dev)
{
  #line 263 
  if (dev->dma_ops != (struct dma_map_ops *)0) 
                                               #line 264 
                                               return dev->dma_ops;
  #line 265 
  return get_arch_dma_ops(dev->bus);
}

#line 274  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static dma_addr_t dma_map_page_attrs(struct device *dev, struct page *page, size_t offset, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 279 
  dma_addr_t addr;
  #line 278 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 281 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 282 
    ldv_inline_asm();
    #line 283 
    ldv_inline_asm();
    #line 284 
    ldv_inline_asm();
    #line 281 
    ;
  }
  #line 282 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 283 
                                    addr = dma_direct_map_page(dev,page,offset,size,dir,attrs); else 
                                                                    #line 285 
                                                                    addr = (*(ops->map_page))(dev,page,offset,size,dir,attrs);
  #line 286 
  debug_dma_map_page(dev,page,offset,size,(int)dir,addr);
  #line 288 
  return addr;
}

#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_unmap_page_attrs(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 294 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 296 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 297 
    ldv_inline_asm();
    #line 298 
    ldv_inline_asm();
    #line 299 
    ldv_inline_asm();
    #line 296 
    ;
  }
  #line 297 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 298 
                                    dma_direct_unmap_page(dev,addr,size,dir,attrs);
  else 
    #line 299 
    if (ops->unmap_page != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ))0) 
      #line 300 
      (*(ops->unmap_page))(dev,addr,size,dir,attrs);
  #line 301 
  debug_dma_unmap_page(dev,addr,size,(int)dir);
  #line 302 
  return;
}

#line 433  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static int dma_mapping_error(struct device *dev, dma_addr_t dma_addr)
{
  #line 435 
  debug_dma_mapping_error(dev,dma_addr);
  #line 437 
  if (dma_addr == 18446744073709551615ULL) 
                                           #line 438 
                                           return -12;
  #line 439 
  return 0;
}

#line 442 
#line 442 
void *dma_alloc_attrs(struct device *, size_t, dma_addr_t *, gfp_t, unsigned long);
#line 444 
#line 444 
void dma_free_attrs(struct device *, size_t, void *, dma_addr_t, unsigned long);
#line 580  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static dma_addr_t dma_map_single_attrs(struct device *dev, void *ptr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 584 
  int __ret_warn_once;
  {
    #line 584 
    bool __warned;
    #line 584 
    __ret_warn_once = (int)is_vmalloc_addr(ptr) != 0;
    #line 584 
    if ((long)(__ret_warn_once != 0) != 0L && (long)(! __warned) != 0L) {
      #line 584 
      __warned = (_Bool)1;
      {
        #line 584 
        int __ret_warn_on = 1;
        #line 584 
        if ((long)(__ret_warn_on != 0) != 0L) {
          #line 584 
          __warn_printk((char *)"%s %s: ",dev_driver_string(dev),dev_name(dev));
          #line 585 
          ldv_inline_asm();
          #line 586 
          ldv_inline_asm();
        }
        #line 584 
        long tmp_2 = (long)(__ret_warn_on != 0);
      }
    }
    }
  #line 584 
  if ((long)((long)(__ret_warn_once != 0)) != 0L) 
                                                  #line 586 
                                                  return 18446744073709551615ULL;
  #line 587 
  debug_dma_map_single(dev,ptr,size);
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  return dma_map_page_attrs(dev,
                           (struct page *)((__phys_addr((unsigned long)ptr) >> 12) + vmemmap_base),
                           (unsigned long)ptr & 4095UL,size,dir,attrs);
}

#line 592  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_unmap_single_attrs(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 595 
  dma_unmap_page_attrs(dev,addr,size,dir,attrs);
  #line 596 
  return;
}

#line 641  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void *dma_alloc_coherent(struct device *dev, size_t size, dma_addr_t *dma_handle, gfp_t gfp)
{
  #line 645 
  return dma_alloc_attrs(dev,size,dma_handle,gfp,
                      (unsigned long)(gfp >> 5) & 256UL);
}

#line 649  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_free_coherent(struct device *dev, size_t size, void *cpu_addr, dma_addr_t dma_handle)
{
  #line 652 
  dma_free_attrs(dev,size,cpu_addr,dma_handle,0UL);
  #line 653 
  return;
}

#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
#line 38 
void get_random_bytes(void *, int);
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
#line 244 
int net_ratelimit(void);
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/checksum_64.h"
__inline static __sum16 csum_fold(__wsum sum)
{
  #line 25 
  ldv_inline_asm();
  #line 30 
  return (unsigned short)(~ sum >> 16);
}

#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/checksum_64.h"
__inline static __wsum csum_tcpudp_nofold(__be32 saddr, __be32 daddr, __u32 len, __u8 proto, __wsum sum)
{
  #line 90 
  ldv_inline_asm();
  #line 98 
  return sum;
}

#line 113  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/checksum_64.h"
__inline static __sum16 csum_tcpudp_magic(__be32 saddr, __be32 daddr, __u32 len, __u8 proto, __wsum sum)
{
  #line 117 
  return csum_fold(csum_tcpudp_nofold(saddr,daddr,len,(unsigned char)((int)proto),sum));
}

#line 180 
#line 180 
__sum16 csum_ipv6_magic(struct in6_addr *, struct in6_addr *, __u32, __u8, __wsum);
#line 183  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/checksum_64.h"
__inline static unsigned int add32_with_carry(unsigned int a, unsigned int b)
{
  #line 185 
  ldv_inline_asm();
  #line 189 
  return a;
}

#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/checksum_64.h"
__inline static __wsum csum_add(__wsum csum, __wsum addend)
{
  #line 195 
  return add32_with_carry(csum,addend);
}

#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/checksum.h"
__inline static __wsum csum_unfold(__sum16 n)
{
  #line 109 
  return (unsigned int)n;
}

#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/checksum.h"
__inline static void csum_replace_by_diff(__sum16 *sum, __wsum diff)
{
  #line 121 
  ;
  #line 121 
  *sum = csum_fold(csum_add(diff,~ csum_unfold((unsigned short)((int)*sum))));
  #line 122 
  return;
}

#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
#line 304 
extern struct flow_dissector flow_keys_dissector;
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_frag_size(skb_frag_t *frag)
{
  #line 327 
  return frag->bv_len;
}

#line 1116 
#line 1116 
int pskb_expand_head(struct sk_buff *, int, int, gfp_t);
#line 1126 
#line 1126 
int __skb_pad(struct sk_buff *, int, bool);
#line 1214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void __skb_set_hash(struct sk_buff *skb, __u32 hash, bool is_sw, bool is_l4)
{
  #line 1216 
  skb->l4_hash = (unsigned char)is_l4;
  #line 1217 
  skb->sw_hash = (unsigned char)is_sw;
  #line 1218 
  skb->hash = hash;
  #line 1219 
  return;
}

#line 1222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_set_hash(struct sk_buff *skb, __u32 hash, enum pkt_hash_types type)
{
  #line 1225 
  __skb_set_hash(skb,hash,(_Bool)0,(_Bool)(type == (unsigned int)PKT_HASH_TYPE_L4));
  #line 1226 
  return;
}

#line 1282 
#line 1282 
bool __skb_flow_dissect(struct net *, struct sk_buff *, struct flow_dissector *, void *, void *, __be16, int, int, unsigned int);
#line 1297  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static bool skb_flow_dissect_flow_keys(struct sk_buff *skb, struct flow_keys *flow, unsigned int flags)
{
  #line 1301 
  memset((void *)flow,0,72UL);
  #line 1302 
  return __skb_flow_dissect((struct net *)0,skb,& flow_keys_dissector,
                         (void *)flow,(void *)0,(unsigned short)0,0,0,flags);
}

#line 1381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_end_pointer(struct sk_buff *skb)
{
  #line 1383 
  return skb->head + (unsigned long)skb->end;
}

#line 1621  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_header_cloned(struct sk_buff *skb)
{
  #line 1623 
  int dataref;
  #line 1625 
  if ((unsigned int)skb->cloned == 0U) 
                                       #line 1626 
                                       return 0;
  #line 1628 
  dataref = atomic_read(& ((struct skb_shared_info *)skb_end_pointer(skb))->dataref);
  #line 1629 
  dataref = (dataref & 65535) - (dataref >> 16);
  #line 1630 
  return dataref != 1;
}

#line 2065  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static bool skb_is_nonlinear(struct sk_buff *skb)
{
  #line 2067 
  return (_Bool)(skb->data_len != 0U);
}

#line 2070  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_headlen(struct sk_buff *skb)
{
  #line 2072 
  return skb->len - skb->data_len;
}

#line 2142 
#line 2142 
void skb_add_rx_frag(struct sk_buff *, int, struct page *, int, int, unsigned int);
#line 2151  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_tail_pointer(struct sk_buff *skb)
{
  #line 2153 
  return skb->head + (unsigned long)skb->tail;
}

#line 2190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void *__skb_put(struct sk_buff *skb, unsigned int len)
{
  #line 2192 
  void *tmp = skb_tail_pointer(skb);
  #line 2193 
  if ((long)((int)skb_is_nonlinear(skb) != 0) != 0L) {
    #line 2194 
    ldv_inline_asm();
    #line 2195 
    ldv_inline_asm();
    #line 2196 
    ldv_inline_asm();
    #line 2193 
    ;
  }
  #line 2194 
  skb->tail += len;
  #line 2195 
  skb->len += len;
  #line 2196 
  return tmp;
}

#line 2266 
#line 2266 
void *__pskb_pull_tail(struct sk_buff *, int);
#line 2282  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static bool pskb_may_pull(struct sk_buff *skb, unsigned int len)
{
  #line 2284 
  ;
  #line 2284 
  if ((long)(skb_headlen(skb) >= len) != 0L) 
                                             #line 2285 
                                             return (_Bool)1;
  #line 2286 
  if ((long)(skb->len < len) != 0L) 
                                    #line 2287 
                                    return (_Bool)0;
  #line 2288 
  ;
  #line 2288 
  ;
  #line 2288 
  return (_Bool)(__pskb_pull_tail(skb,(int)(len - skb_headlen(skb))) != (void *)0);
}

#line 2299  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_headroom(struct sk_buff *skb)
{
  #line 2301 
  return (unsigned int)(skb->data - skb->head);
}

#line 2392  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_reset_mac_len(struct sk_buff *skb)
{
  #line 2394 
  skb->mac_len = (unsigned short)((int)skb->network_header - (int)skb->mac_header);
  #line 2395 
  return;
}

#line 2397  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_inner_transport_header(struct sk_buff *skb)
{
  #line 2400 
  return skb->head + (unsigned long)skb->inner_transport_header;
}

#line 2403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_inner_transport_offset(struct sk_buff *skb)
{
  #line 2405 
  ;
  #line 2405 
  return (int)(skb_inner_transport_header(skb) - skb->data);
}

#line 2420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_inner_network_header(struct sk_buff *skb)
{
  #line 2422 
  return skb->head + (unsigned long)skb->inner_network_header;
}

#line 2437  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_inner_mac_header(struct sk_buff *skb)
{
  #line 2439 
  return skb->head + (unsigned long)skb->inner_mac_header;
}

#line 2458  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_transport_header(struct sk_buff *skb)
{
  #line 2460 
  return skb->head + (unsigned long)skb->transport_header;
}

#line 2463  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_reset_transport_header(struct sk_buff *skb)
{
  #line 2465 
  skb->transport_header = (unsigned short)(skb->data - skb->head);
  #line 2466 
  return;
}

#line 2468  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_set_transport_header(struct sk_buff *skb, int offset)
{
  #line 2471 
  skb_reset_transport_header(skb);
  #line 2472 
  skb->transport_header = (unsigned short)((int)skb->transport_header + (int)((unsigned short)offset));
  #line 2473 
  return;
}

#line 2475  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_network_header(struct sk_buff *skb)
{
  #line 2477 
  return skb->head + (unsigned long)skb->network_header;
}

#line 2480  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_reset_network_header(struct sk_buff *skb)
{
  #line 2482 
  skb->network_header = (unsigned short)(skb->data - skb->head);
  #line 2483 
  return;
}

#line 2485  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_set_network_header(struct sk_buff *skb, int offset)
{
  #line 2487 
  skb_reset_network_header(skb);
  #line 2488 
  skb->network_header = (unsigned short)((int)skb->network_header + (int)((unsigned short)offset));
  #line 2489 
  return;
}

#line 2559  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_transport_offset(struct sk_buff *skb)
{
  #line 2561 
  ;
  #line 2561 
  return (int)(skb_transport_header(skb) - skb->data);
}

#line 2820 
#line 2820 
struct sk_buff *__napi_alloc_skb(struct napi_struct *, unsigned int, gfp_t);
#line 2822  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct sk_buff *napi_alloc_skb(struct napi_struct *napi, unsigned int length)
{
  #line 2825 
  return __napi_alloc_skb(napi,length,2592U);
}

#line 2841  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct page *__dev_alloc_pages(gfp_t gfp_mask, unsigned int order)
{
  #line 2852 
  gfp_mask |= 393216U;
  #line 2854 
  return alloc_pages_node(-1,gfp_mask,order);
}

#line 2857  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct page *dev_alloc_pages(unsigned int order)
{
  #line 2859 
  return __dev_alloc_pages(10784U,order);
}

#line 2896  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_frag_off(skb_frag_t *frag)
{
  #line 2898 
  return frag->bv_offset;
}

#line 2938  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct page *skb_frag_page(skb_frag_t *frag)
{
  #line 2940 
  return frag->bv_page;
}

#line 3067  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static dma_addr_t skb_frag_dma_map(struct device *dev, skb_frag_t *frag, size_t offset, size_t size, enum dma_data_direction dir)
{
  #line 3072 
  ;
  #line 3072 
  ;
  #line 3072 
  ;
  #line 3072 
  ;
  #line 3072 
  return dma_map_page_attrs(dev,skb_frag_page(frag),
                           (unsigned long)skb_frag_off(frag) + offset,size,
                           dir,0UL);
}

#line 3111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int __skb_cow(struct sk_buff *skb, unsigned int headroom, int cloned)
{
  #line 3114 
  int delta = 0;
  #line 3116 
  ;
  #line 3116 
  if (skb_headroom(skb) < headroom) {
    #line 3117 
    delta = (int)(headroom - skb_headroom(skb));
  }
  #line 3119 
  if (delta != 0 || cloned != 0) {
    #line 3120 
    return pskb_expand_head(skb,(delta + 63) & -64,0,2592U);
  }
  #line 3122 
  return 0;
}

#line 3152  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_cow_head(struct sk_buff *skb, unsigned int headroom)
{
  #line 3154 
  ;
  #line 3154 
  ;
  #line 3154 
  return __skb_cow(skb,headroom,skb_header_cloned(skb));
}

#line 3186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int __skb_put_padto(struct sk_buff *skb, unsigned int len, bool free_on_error)
{
  #line 3189 
  unsigned int size = skb->len;
  #line 3191 
  if ((long)(size < len) != 0L) {
    #line 3192 
    len -= size;
    #line 3193 
    if (__skb_pad(skb,(int)len,(_Bool)((bool)((int)free_on_error) != 0)) != 0) 
      #line 3194 
      return -12;
    #line 3195 
    __skb_put(skb,len);
  }
  #line 3197 
  return 0;
}

#line 3210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_put_padto(struct sk_buff *skb, unsigned int len)
{
  #line 3212 
  return __skb_put_padto(skb,len,(_Bool)1);
}

#line 3248  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int __skb_linearize(struct sk_buff *skb)
{
  #line 3250 
  int tmp_0;
  #line 3250 
  if (__pskb_pull_tail(skb,(int)skb->data_len) != (void *)0) 
                                                             #line 3250 
                                                             tmp_0 = 0; else 
                                                                    #line 3250 
                                                                    tmp_0 = -12;
  #line 3250 
  return tmp_0;
}

#line 3448  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static bool skb_has_frag_list(struct sk_buff *skb)
{
  #line 3450 
  ;
  #line 3450 
  return (_Bool)(((struct skb_shared_info *)skb_end_pointer(skb))->frag_list != (struct sk_buff *)0);
}

#line 4287  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_record_rx_queue(struct sk_buff *skb, u16 rx_queue)
{
  #line 4289 
  skb->queue_mapping = (unsigned short)((unsigned int)rx_queue + 1U);
  #line 4290 
  return;
}

#line 4390  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static bool skb_is_gso(struct sk_buff *skb)
{
  #line 4392 
  ;
  #line 4392 
  return (_Bool)((unsigned int)((struct skb_shared_info *)skb_end_pointer(skb))->gso_size != 0U);
}

#line 4467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_checksum_none_assert(struct sk_buff *skb)
{
  #line 4469 
  return;
}

#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
__inline static void dql_queued(struct dql *dql, unsigned int count)
{
  #line 75 
  if ((long)(count > 268435455U) != 0L) {
    #line 76 
    ldv_inline_asm();
    #line 77 
    ldv_inline_asm();
    #line 78 
    ldv_inline_asm();
    #line 75 
    ;
  }
  #line 77 
  dql->last_obj_cnt = count;
  #line 78 
  ldv_inline_asm();
  #line 86 
  dql->num_queued += count;
  #line 87 
  return;
}

#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
__inline static int dql_avail(struct dql *dql)
{
  #line 93 
  union __anonunion___u_527 __u_0;
  #line 93 
  union __anonunion___u_525 __u;
  #line 92 
  unsigned int tmp;
  #line 92 
  __read_once_size((void *)(& dql->adj_limit),(void *)(& __u.__c),4);
  #line 92 
  tmp = __u.__val;
  #line 92 
  __read_once_size((void *)(& dql->num_queued),(void *)(& __u_0.__c),4);
  #line 92 
  return (int)(tmp - (__u_0.__val));
}

#line 96 
#line 96 
void dql_completed(struct dql *, unsigned int);
#line 99 
#line 99 
void dql_reset(struct dql *);
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/u64_stats_sync.h"
__inline static void u64_stats_init(struct u64_stats_sync *syncp)
{
  #line 117 
  return;
}

#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/u64_stats_sync.h"
__inline static unsigned int __u64_stats_fetch_begin(struct u64_stats_sync *syncp)
{
  #line 163 
  return 0U;
}

#line 175  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/u64_stats_sync.h"
__inline static bool __u64_stats_fetch_retry(struct u64_stats_sync *syncp, unsigned int start)
{
  #line 181 
  return (_Bool)0;
}

#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/u64_stats_sync.h"
__inline static unsigned int u64_stats_fetch_begin_irq(struct u64_stats_sync *syncp)
{
  #line 205 
  return __u64_stats_fetch_begin(syncp);
}

#line 208  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/u64_stats_sync.h"
__inline static bool u64_stats_fetch_retry_irq(struct u64_stats_sync *syncp, unsigned int start)
{
  #line 214 
  return __u64_stats_fetch_retry(syncp,start);
}

#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 967  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_enet.i.aux"
static int cif_request_irq(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char *name, void *dev);
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 959  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_enet.i.aux"
static void *cif_free_irq(unsigned int ldv_func_arg1, void *ldv_func_arg2);
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 237 
void disable_irq(unsigned int);
#line 352 
#line 352 
int irq_set_affinity_hint(unsigned int, struct cpumask *);
#line 424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 424 
void __napi_schedule_irqoff(struct napi_struct *);
#line 431 
#line 431 
bool napi_schedule_prep(struct napi_struct *);
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void napi_schedule_irqoff(struct napi_struct *n)
{
  #line 454 
  if ((int)napi_schedule_prep(n) != 0) 
                                       #line 455 
                                       __napi_schedule_irqoff(n);
  #line 456 
  return;
}

#line 468 
#line 468 
bool napi_complete_done(struct napi_struct *, int);
#line 477  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool napi_complete(struct napi_struct *n)
{
  #line 479 
  return napi_complete_done(n,0);
}

#line 503 
#line 503 
void napi_disable(struct napi_struct *);
#line 512  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void napi_enable(struct napi_struct *n)
{
  #line 514 
  int tmp_0;
  #line 514 
  if (test_bit(0L,& n->state)) 
                               #line 514 
                               tmp_0 = 0; else 
                                               #line 514 
                                               tmp_0 = 1;
  #line 514 
  if ((long)tmp_0 != 0L) {
    #line 515 
    ldv_inline_asm();
    #line 516 
    ldv_inline_asm();
    #line 517 
    ldv_inline_asm();
    #line 514 
    ;
  }
  #line 516 
  cif_clear_bit(0L,& n->state);
  #line 517 
  cif_clear_bit(3L,& n->state);
  #line 518 
  return;
}

#line 2100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static int netdev_set_prio_tc_map(struct net_device *dev, u8 prio, u8 tc)
{
  #line 2102 
  if ((int)tc >= (int)dev->num_tc) 
                                   #line 2103 
                                   return -22;
  #line 2105 
  dev->prio_tc_map[(int)prio & 15] = (unsigned char)((unsigned int)tc & 15U);
  #line 2106 
  return 0;
}

#line 2110 
#line 2110 
void netdev_reset_tc(struct net_device *);
#line 2111 
#line 2111 
int netdev_set_tc_queue(struct net_device *, u8, u16, u16);
#line 2112 
#line 2112 
int netdev_set_num_tc(struct net_device *, u8);
#line 2132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static struct netdev_queue *netdev_get_tx_queue(struct net_device *dev, unsigned int index)
{
  #line 2135 
  return dev->_tx + (unsigned long)index;
}

#line 2203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void *netdev_priv(struct net_device *dev)
{
  #line 2205 
  return (void *)((char *)dev + 3328UL);
}

#line 2234 
#line 2234 
void netif_napi_add(struct net_device *, struct napi_struct *, int (*)(struct napi_struct *, int ), int);
#line 2263 
#line 2263 
void netif_napi_del(struct napi_struct *);
#line 2679 
#line 1013  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_enet.i.aux"
static void cif_free_netdev(struct net_device *dev);
#line 3094  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 3094 
void netif_schedule_queue(struct netdev_queue *);
#line 3104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_start_queue(struct netdev_queue *dev_queue)
{
  #line 3106 
  cif_clear_bit(0L,& dev_queue->state);
  #line 3107 
  return;
}

#line 3130 
#line 3130 
void netif_tx_wake_queue(struct netdev_queue *);
#line 3144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_wake_all_queues(struct net_device *dev)
{
  #line 3146 
  unsigned int i;
  #line 3148 
  i = 0U;
  #line 3148 
  while (dev->num_tx_queues > i) {
    {
      #line 3149 
      struct netdev_queue *txq = netdev_get_tx_queue(dev,i);
      #line 3150 
      netif_tx_wake_queue(txq);
    }
    #line 3148 
    i ++;
  }
  #line 3152 
  return;
}

#line 3154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_stop_queue(struct netdev_queue *dev_queue)
{
  #line 3156 
  cif_set_bit(0L,& dev_queue->state);
  #line 3157 
  return;
}

#line 3171 
#line 3171 
void netif_tx_stop_all_queues(struct net_device *);
#line 3174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_tx_queue_stopped(struct netdev_queue *dev_queue)
{
  #line 3176 
  return test_bit(0L,& dev_queue->state);
}

#line 3190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_xmit_stopped(struct netdev_queue *dev_queue)
{
  #line 3192 
  return (_Bool)((dev_queue->state & 3UL) != 0UL);
}

#line 3235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netdev_tx_sent_queue(struct netdev_queue *dev_queue, unsigned int bytes)
{
  #line 3239 
  dql_queued(& dev_queue->dql,bytes);
  #line 3241 
  if ((long)(dql_avail(& dev_queue->dql) >= 0) != 0L) 
                                                      #line 3242 
                                                      return;
  #line 3244 
  cif_set_bit(1L,& dev_queue->state);
  #line 3245 
  ldv_inline_asm();
  #line 3254 
  if ((long)(dql_avail(& dev_queue->dql) >= 0) != 0L) 
                                                      #line 3255 
                                                      cif_clear_bit(1L,& dev_queue->state);
  #line 3256 
  return;
}

#line 3301  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netdev_tx_completed_queue(struct netdev_queue *dev_queue, unsigned int pkts, unsigned int bytes)
{
  #line 3305 
  if ((long)(bytes == 0U) != 0L) 
                                 #line 3306 
                                 return;
  #line 3308 
  dql_completed(& dev_queue->dql,bytes);
  #line 3309 
  ldv_inline_asm();
  #line 3317 
  if ((long)(dql_avail(& dev_queue->dql) < 0) != 0L) 
                                                     #line 3318 
                                                     return;
  #line 3320 
  if ((int)test_and_set_bit(1L,& dev_queue->state) != 0) 
                                                         #line 3321 
                                                         netif_schedule_queue(dev_queue);
  #line 3322 
  return;
}

#line 3341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netdev_tx_reset_queue(struct netdev_queue *q)
{
  #line 3344 
  cif_clear_bit(1L,& q->state);
  #line 3345 
  dql_reset(& q->dql);
  #line 3346 
  return;
}

#line 3387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_running(struct net_device *dev)
{
  #line 3389 
  return test_bit(0L,& dev->state);
}

#line 3406  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_start_subqueue(struct net_device *dev, u16 queue_index)
{
  #line 3408 
  struct netdev_queue *txq = netdev_get_tx_queue(dev,(unsigned int)queue_index);
  #line 3410 
  netif_tx_start_queue(txq);
  #line 3411 
  return;
}

#line 3420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_stop_subqueue(struct net_device *dev, u16 queue_index)
{
  #line 3422 
  struct netdev_queue *txq = netdev_get_tx_queue(dev,(unsigned int)queue_index);
  #line 3423 
  netif_tx_stop_queue(txq);
  #line 3424 
  return;
}

#line 3462 
#line 3462 
int netif_set_xps_queue(struct net_device *, struct cpumask *, u16);
#line 3577 
#line 3577 
int netif_set_real_num_tx_queues(struct net_device *, unsigned int);
#line 3580 
#line 3580 
int netif_set_real_num_rx_queues(struct net_device *, unsigned int);
#line 3617 
#line 3617 
void __dev_kfree_skb_any(struct sk_buff *, enum skb_free_reason);
#line 3648  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void dev_kfree_skb_any(struct sk_buff *skb)
{
  #line 3650 
  __dev_kfree_skb_any(skb,(enum skb_free_reason)SKB_REASON_DROPPED);
  #line 3651 
  return;
}

#line 3665 
#line 3665 
gro_result_t napi_gro_receive(struct napi_struct *, struct sk_buff *);
#line 3666 
#line 3666 
void napi_gro_flush(struct napi_struct *, bool);
#line 3803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_carrier_ok(struct net_device *dev)
{
  #line 3805 
  int tmp_0;
  #line 3805 
  if ((int)test_bit(2L,& dev->state) != 0) 
                                           #line 3805 
                                           tmp_0 = 0; else 
                                                           #line 3805 
                                                           tmp_0 = 1;
  #line 3805 
  return (_Bool)(tmp_0 != 0);
}

#line 3812 
#line 3812 
void netif_carrier_on(struct net_device *);
#line 3814 
#line 3814 
void netif_carrier_off(struct net_device *);
#line 3923  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static u32 netif_msg_init(int debug_value, int default_msg_enable_bits)
{
  #line 3926 
  if ((unsigned int)debug_value > 31U) 
                                       #line 3927 
                                       return (unsigned int)default_msg_enable_bits;
  #line 3928 
  if (debug_value == 0) 
                        #line 3929 
                        return 0U;
  #line 3931 
  return (1U << debug_value) + 4294967295U;
}

#line 4092  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_addr_lock_bh(struct net_device *dev)
{
  #line 4094 
  cif_spin_lock_bh_addr_list_lock_of_net_device(& dev->addr_list_lock);
  #line 4095 
  return;
}

#line 4102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_addr_unlock_bh(struct net_device *dev)
{
  #line 4104 
  cif_spin_unlock_bh_addr_list_lock_of_net_device(& dev->addr_list_lock);
  #line 4105 
  return;
}

#line 4131 
#line 997  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_enet.i.aux"
static int cif_register_netdev(struct net_device *dev);
#line 4132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 1005  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_enet.i.aux"
static void cif_unregister_netdev(struct net_device *dev);
#line 4137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 4137 
int __hw_addr_sync_dev(struct netdev_hw_addr_list *, struct net_device *, int (*)(struct net_device *, unsigned char *), int (*)(struct net_device *, unsigned char *));
#line 4186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static int __dev_uc_sync(struct net_device *dev, int (*sync)(struct net_device *, unsigned char *), int (*unsync)(struct net_device *, unsigned char *))
{
  #line 4192 
  return __hw_addr_sync_dev(& dev->uc,dev,sync,unsync);
}

#line 4230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static int __dev_mc_sync(struct net_device *dev, int (*sync)(struct net_device *, unsigned char *), int (*unsync)(struct net_device *, unsigned char *))
{
  #line 4236 
  return __hw_addr_sync_dev(& dev->mc,dev,sync,unsync);
}

#line 4373 
#line 4373 
int skb_checksum_help(struct sk_buff *);
#line 4679  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_is_rxfh_configured(struct net_device *dev)
{
  #line 4681 
  return (_Bool)((dev->priv_flags & 8388608U) != 0U);
}

#line 4750 
#line 4750 
void netdev_err(struct net_device *, char * , ...);
#line 4752 
#line 4752 
void netdev_warn(struct net_device *, char * , ...);
#line 4756 
#line 4756 
void netdev_info(struct net_device *, char * , ...);
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
#line 31 
u32 eth_get_headlen(struct net_device *, void *, unsigned int);
#line 32 
#line 32 
__be16 eth_type_trans(struct sk_buff *, struct net_device *);
#line 51 
#line 989  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_enet.i.aux"
static struct net_device *cif_alloc_etherdev_mqs(int sizeof_priv, unsigned int txqs, unsigned int rxqs);
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_zero_ether_addr(u8 *addr)
{
  #line 101 
  return (_Bool)((*((u32 *)addr) | (unsigned int)*((u16 *)(addr + 4U))) == 0U);
}

#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_multicast_ether_addr(u8 *addr)
{
  #line 119 
  u32 a = *((u32 *)addr);
  #line 126 
  return (_Bool)((a & 1U) != 0U);
}

#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_valid_ether_addr(u8 *addr)
{
  #line 195 
  int tmp_1;
  #line 195 
  if (is_multicast_ether_addr(addr)) 
                                     #line 195 
                                     tmp_1 = 0;
  else {
    #line 195 
    if (is_zero_ether_addr(addr)) 
                                  #line 195 
                                  tmp_1 = 0; else 
                                                  #line 195 
                                                  tmp_1 = 1;
  }
  #line 195 
  return (_Bool)(tmp_1 != 0);
}

#line 223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static void eth_random_addr(u8 *addr)
{
  #line 225 
  get_random_bytes((void *)addr,6);
  #line 226 
  *addr = (unsigned char)((unsigned int)*addr & 254U);
  #line 227 
  *addr = (unsigned char)((unsigned int)*addr | 2U);
  #line 228 
  return;
}

#line 263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static void eth_hw_addr_random(struct net_device *dev)
{
  #line 265 
  dev->addr_assign_type = (unsigned char)1U;
  #line 266 
  eth_random_addr(dev->dev_addr);
  #line 267 
  return;
}

#line 276  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static void ether_addr_copy(u8 *dst, u8 *src)
{
  #line 279 
  *((u32 *)dst) = *((u32 *)src);
  #line 280 
  *((u16 *)(dst + 4U)) = *((u16 *)(src + 4U));
  #line 281 
  return;
}

#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool ether_addr_equal(u8 *addr1, u8 *addr2)
{
  #line 318 
  u32 fold = (*((u32 *)addr1) ^ *((u32 *)addr2)) | (unsigned int)((int)*((u16 *)(addr1 + 4U)) ^ (int)*((u16 *)(addr2 + 4U)));
  #line 321 
  return (_Bool)(fold == 0U);
}

#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpu_rmap.h"
#line 35 
struct cpu_rmap *alloc_cpu_rmap(unsigned int, gfp_t);
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpu_rmap.h"
__inline static struct cpu_rmap *alloc_irq_cpu_rmap(unsigned int size)
{
  #line 60 
  return alloc_cpu_rmap(size,3264U);
}

#line 62 
#line 62 
void free_irq_cpu_rmap(struct cpu_rmap *);
#line 64 
#line 64 
int irq_cpu_rmap_add(struct cpu_rmap *, int);
#line 300  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static bool eth_type_vlan(__be16 ethertype)
{
  #line 302 
  switch ((int)ethertype) {
    #line 303 
    case 129: 
              #line 303 
    ;
    #line 304 
    case 43144: 
                #line 304 
    ;
    #line 305 
    return (_Bool)1;
    #line 306 
    default: 
             #line 306 
    ;
    #line 307 
    return (_Bool)0;
  }
}

#line 510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static void __vlan_hwaccel_put_tag(struct sk_buff *skb, __be16 vlan_proto, u16 vlan_tci)
{
  #line 513 
  skb->vlan_proto = vlan_proto;
  #line 514 
  skb->vlan_tci = vlan_tci;
  #line 515 
  skb->vlan_present = (unsigned char)1U;
  #line 516 
  return;
}

#line 580  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static __be16 __vlan_get_protocol(struct sk_buff *skb, __be16 type, int *depth)
{
  #line 583 
  unsigned int vlan_depth = (unsigned int)skb->mac_len;
  #line 589 
  if ((int)eth_type_vlan((unsigned short)((int)type)) != 0) {
    #line 590 
    if (vlan_depth != 0U) {
      #line 591 
      int __ret_warn_on;
      #line 591 
      __ret_warn_on = vlan_depth <= 3U;
      #line 591 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 592 
        ldv_inline_asm();
        #line 593 
        ldv_inline_asm();
      }
      #line 591 
      if ((long)((long)(__ret_warn_on != 0)) != 0L) 
                                                    #line 592 
                                                    return (unsigned short)0U;
      #line 593 
      vlan_depth += 4294967292U;
    }
    else 
         #line 595 
         vlan_depth = 14U;
    #line 597 
    while (1) {
      {
        #line 598 
        struct vlan_hdr *vh;
        #line 600 
        int tmp_1;
        #line 600 
        if (pskb_may_pull(skb,vlan_depth + 4U)) 
                                                #line 600 
                                                tmp_1 = 0; else 
                                                                #line 600 
                                                                tmp_1 = 1;
        #line 600 
        if ((long)tmp_1 != 0L) 
                               #line 602 
                               return (unsigned short)0U;
        #line 604 
        vh = (struct vlan_hdr *)(skb->data + (unsigned long)vlan_depth);
        #line 605 
        type = vh->h_vlan_encapsulated_proto;
        #line 606 
        vlan_depth += 4U;
      }
      #line 607 
      if (! ((int)eth_type_vlan((unsigned short)((int)type)) != 0)) 
                                                                    #line 597 
                                                                    break;
    }
  }
  #line 610 
  if (depth != (int *)0) 
                         #line 611 
                         *depth = (int)vlan_depth;
  #line 613 
  return type;
}

#line 623  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static __be16 vlan_get_protocol(struct sk_buff *skb)
{
  #line 625 
  return __vlan_get_protocol(skb,(unsigned short)((int)skb->protocol),(int *)0);
}

#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static bool skb_vlan_tagged_multi(struct sk_buff *skb)
{
  #line 687 
  __be16 protocol = skb->protocol;
  #line 689 
  if ((unsigned int)skb->vlan_present == 0U) {
    #line 690 
    struct vlan_ethhdr *veh;
    #line 692 
    int tmp_0;
    #line 695 
    int tmp_2;
    #line 692 
    if (eth_type_vlan((unsigned short)((int)protocol))) 
                                                        #line 692 
                                                        tmp_0 = 0; else 
                                                                    #line 692 
                                                                    tmp_0 = 1;
    #line 692 
    if ((long)tmp_0 != 0L) 
                           #line 693 
                           return (_Bool)0;
    #line 695 
    if (pskb_may_pull(skb,18U)) 
                                #line 695 
                                tmp_2 = 0; else 
                                                #line 695 
                                                tmp_2 = 1;
    #line 695 
    if ((long)tmp_2 != 0L) 
                           #line 696 
                           return (_Bool)0;
    #line 698 
    veh = (struct vlan_ethhdr *)skb->data;
    #line 699 
    protocol = veh->h_vlan_encapsulated_proto;
  }
  #line 702 
  if (! eth_type_vlan((unsigned short)((int)protocol))) 
                                                        #line 703 
                                                        return (_Bool)0;
  #line 705 
  return (_Bool)1;
}

#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ip.h"
__inline static struct iphdr *ip_hdr(struct sk_buff *skb)
{
  #line 21 
  return (struct iphdr *)skb_network_header(skb);
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tcp.h"
__inline static struct tcphdr *tcp_hdr(struct sk_buff *skb)
{
  #line 26 
  return (struct tcphdr *)skb_transport_header(skb);
}

#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tcp.h"
__inline static unsigned int __tcp_hdrlen(struct tcphdr *th)
{
  #line 31 
  return (unsigned int)((int)th->doff * 4);
}

#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tcp.h"
__inline static unsigned int tcp_hdrlen(struct sk_buff *skb)
{
  #line 36 
  return __tcp_hdrlen(tcp_hdr(skb));
}

#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tcp.h"
__inline static struct tcphdr *inner_tcp_hdr(struct sk_buff *skb)
{
  #line 41 
  return (struct tcphdr *)skb_inner_transport_header(skb);
}

#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tcp.h"
__inline static unsigned int inner_tcp_hdrlen(struct sk_buff *skb)
{
  #line 46 
  ;
  #line 46 
  return (unsigned int)((int)inner_tcp_hdr(skb)->doff * 4);
}

#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
__inline static struct ipv6hdr *ipv6_hdr(struct sk_buff *skb)
{
  #line 94 
  return (struct ipv6hdr *)skb_network_header(skb);
}

#line 1233  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 1233 
int pci_set_power_state(struct pci_dev *, pci_power_t);
#line 1346 
#line 1021  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_enet.i.aux"
static int cif___pci_register_driver(struct pci_driver *ldv_func_arg1, struct module *ldv_func_arg2, char *mod_name);
#line 1352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 1029  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_enet.i.aux"
static void cif_pci_unregister_driver(struct pci_driver *dev);
#line 1833  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static void *pci_get_drvdata(struct pci_dev *pdev)
{
  #line 1835 
  return dev_get_drvdata(& pdev->dev);
}

#line 1838  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static void pci_set_drvdata(struct pci_dev *pdev, void *data)
{
  #line 1840 
  dev_set_drvdata(& pdev->dev,data);
  #line 1841 
  return;
}

#line 2029 
#line 2029 
int pci_enable_sriov(struct pci_dev *, int);
#line 2030 
#line 2030 
void pci_disable_sriov(struct pci_dev *);
#line 2034 
#line 2034 
int pci_vfs_assigned(struct pci_dev *);
#line 1057  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ipv6.h"
#line 1057 
int ipv6_skip_exthdr(struct sk_buff *, int, u8 *, __be16 *);
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip6_checksum.h"
__inline static __sum16 tcp_v6_check(int len, struct in6_addr *saddr, struct in6_addr *daddr, __wsum base)
{
  #line 59 
  return csum_ipv6_magic(saddr,daddr,(unsigned int)len,(unsigned char)6,base);
}

#line 1341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/tcp.h"
__inline static __sum16 tcp_v4_check(int len, __be32 saddr, __be32 daddr, __wsum base)
{
  #line 1344 
  return csum_tcpudp_magic(saddr,daddr,(unsigned int)len,(unsigned char)6,base);
}

#line 688  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hnae3.h"
#line 688 
int hnae3_register_ae_dev(struct hnae3_ae_dev *);
#line 689 
#line 689 
void hnae3_unregister_ae_dev(struct hnae3_ae_dev *);
#line 694 
#line 694 
void hnae3_unregister_client(struct hnae3_client *);
#line 695 
#line 695 
int hnae3_register_client(struct hnae3_client *);
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.h"
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
char hns3_driver_version[34U];
#line 554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.h"
__inline static int ring_space(struct hns3_enet_ring *ring)
{
  #line 561 
  union __anonunion___u_1131 __u_0;
  #line 559 
  int ___p1;
  #line 563 
  int tmp_2;
  {
    #line 560 
    union __anonunion___u_1129 __u;
    #line 559 
    __read_once_size((void *)(& ring->next_to_clean),(void *)(& __u.__c),4);
    #line 559 
    ___p1 = (__u.__val);
    #line 562 
    ldv_inline_asm();
    }
  #line 559 
  int begin = ___p1;
  #line 560 
  __read_once_size((void *)(& ring->next_to_use),(void *)(& __u_0.__c),4);
  #line 560 
  int end = (__u_0.__val);
  #line 563 
  if (end >= begin) 
                    #line 563 
                    tmp_2 = (((int)ring->desc_num - end) + begin) + -1; else 
                                                                    #line 563 
                                                                    tmp_2 = (begin - end) + -1;
  #line 563 
  return tmp_2;
}

#line 566  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.h"
__inline static int is_ring_empty(struct hns3_enet_ring *ring)
{
  #line 568 
  return ring->next_to_use == ring->next_to_clean;
}

#line 571  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.h"
__inline static u32 hns3_read_reg(void *base, u32 reg)
{
  #line 573 
  return readl(base + (unsigned long)reg);
}

#line 576  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.h"
__inline static void hns3_write_reg(void *base, u32 reg, u32 value)
{
  #line 579 
  union __anonunion___u_1133 __u;
  #line 578 
  __read_once_size((void *)(& base),(void *)(& __u.__c),8);
  #line 578 
  u8 *reg_addr = (u8 *)(__u.__val);
  #line 580 
  writel(value,(void *)(reg_addr + (unsigned long)reg));
  #line 581 
  return;
}

#line 583  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.h"
__inline static bool hns3_dev_ongoing_func_reset(struct hnae3_ae_dev *ae_dev)
{
  #line 585 
  return (_Bool)((ae_dev != (struct hnae3_ae_dev *)0 && ((((unsigned int)ae_dev->reset_type + 4294967292U <= 1U || ae_dev->reset_type == (unsigned int)HNAE3_VF_FUNC_RESET) || ae_dev->reset_type == (unsigned int)HNAE3_VF_FULL_RESET) || ae_dev->reset_type == (unsigned int)HNAE3_VF_PF_FUNC_RESET)) != 0);
}

#line 595  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.h"
__inline static bool hns3_nic_resetting(struct net_device *netdev)
{
  #line 597 
  struct hns3_nic_priv *priv = netdev_priv(netdev);
  #line 599 
  return test_bit(1L,& priv->state);
}

#line 617  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.h"
__inline static unsigned int hns3_page_order(struct hns3_enet_ring *ring)
{
  #line 620 
  if (ring->buf_size > 2048U) 
                              #line 621 
                              return 1U;
  #line 623 
  return 0U;
}

#line 641 
#line 641 
void hns3_ethtool_set_ops(struct net_device *netdev);
#line 642 
#line 4558  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
int hns3_set_channels(struct net_device *netdev, struct ethtool_channels *ch);
#line 645  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.h"
#line 2490  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
void hns3_clean_tx_ring(struct hns3_enet_ring *ring);
#line 646  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.h"
#line 3825  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
int hns3_init_all_ring(struct hns3_nic_priv *priv);
#line 647  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.h"
#line 3852  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
int hns3_uninit_all_ring(struct hns3_nic_priv *priv);
#line 648  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.h"
#line 4285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
int hns3_nic_reset_all_ring(struct hnae3_handle *h);
#line 649  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.h"
#line 3739  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
void hns3_fini_ring(struct hns3_enet_ring *ring);
#line 650  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.h"
#line 1400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
netdev_tx_t hns3_nic_net_xmit(struct sk_buff *skb, struct net_device *netdev);
#line 651  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.h"
#line 1996  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
bool hns3_is_phys_func(struct pci_dev *pdev);
#line 652  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.h"
#line 3105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
int hns3_clean_rx_ring(struct hns3_enet_ring *ring, int budget, void (*rx_fn)(struct hns3_enet_ring *, struct sk_buff *));
#line 656  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.h"
#line 212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
void hns3_set_vector_coalesce_rx_gl(struct hns3_enet_tqp_vector *tqp_vector, u32 gl_value);
#line 658  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.h"
#line 220  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
void hns3_set_vector_coalesce_tx_gl(struct hns3_enet_tqp_vector *tqp_vector, u32 gl_value);
#line 660  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.h"
#line 192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
void hns3_set_vector_coalesce_rl(struct hns3_enet_tqp_vector *tqp_vector, u32 rl_value);
#line 663  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.h"
#line 656  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
void hns3_enable_vlan_filter(struct net_device *netdev, bool enable);
#line 664  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.h"
#line 642  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
int hns3_update_promisc_mode(struct net_device *netdev, u8 promisc_flags);
#line 667  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.h"
#line 667 
void hns3_dcbnl_setup(struct hnae3_handle *handle);
#line 672 
#line 672 
void hns3_dbg_init(struct hnae3_handle *handle);
#line 673 
#line 673 
void hns3_dbg_uninit(struct hnae3_handle *handle);
#line 674 
#line 674 
void hns3_dbg_register_debugfs(char *debugfs_dir_name);
#line 675 
#line 675 
void hns3_dbg_unregister_debugfs(void);
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
#line 4262 
static void hns3_clear_all_ring(struct hnae3_handle *h, bool force);
#line 38 
#line 4175 
static void hns3_remove_hw_addr(struct net_device *netdev);
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static char hns3_driver_name[5U] = {(char)'h', (char)'n', (char)'s', (char)'3'};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
char hns3_driver_version[34U] = {(char)'5', (char)'.', (char)'5', (char)'.', (char)'0'};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static char hns3_driver_string[51U] = {(char)'H', (char)'i', (char)'s', (char)'i', (char)'l', (char)'i', (char)'c', (char)'o', (char)'n', (char)' ', (char)'E', (char)'t', (char)'h', (char)'e', (char)'r', (char)'n', (char)'e', (char)'t', (char)' ', (char)'N', (char)'e', (char)'t', (char)'w', (char)'o', (char)'r', (char)'k', (char)' ', (char)'D', (char)'r', (char)'i', (char)'v', (char)'e', (char)'r', (char)' ', (char)'f', (char)'o', (char)'r', (char)' ', (char)'H', (char)'i', (char)'p', (char)'0', (char)'8', (char)' ', (char)'F', (char)'a', (char)'m', (char)'i', (char)'l', (char)'y'};
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static char hns3_copyright[39U] = {(char)'C', (char)'o', (char)'p', (char)'y', (char)'r', (char)'i', (char)'g', (char)'h', (char)'t', (char)' ', (char)'(', (char)'c', (char)')', (char)' ', (char)'2', (char)'0', (char)'1', (char)'7', (char)' ', (char)'H', (char)'u', (char)'a', (char)'w', (char)'e', (char)'i', (char)' ', (char)'C', (char)'o', (char)'r', (char)'p', (char)'o', (char)'r', (char)'a', (char)'t', (char)'i', (char)'o', (char)'n', (char)'.'};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static struct hnae3_client client;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static int debug = -1;
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static struct pci_device_id hns3_pci_tbl[10U] = {{.vendor = 6629U, .device = 41504U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 6629U, .device = 41505U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 6629U, .device = 41506U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 6UL}, {.vendor = 6629U, .device = 41507U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 6UL}, {.vendor = 6629U, .device = 41508U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 6UL}, {.vendor = 6629U, .device = 41509U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 6UL}, {.vendor = 6629U, .device = 41510U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 6UL}, {.vendor = 6629U, .device = 41518U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 6629U, .device = 41519U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 6UL}};
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
struct pci_device_id __mod_pci__hns3_pci_tbl_device_table[10U];
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static irqreturn_t hns3_irq_handle(int irq, void *vector)
{
  #line 89 
  struct hns3_enet_tqp_vector *tqp_vector = (struct hns3_enet_tqp_vector *)vector;
  #line 91 
  napi_schedule_irqoff(& tqp_vector->napi);
  #line 93 
  return IRQ_HANDLED;
}

#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static void hns3_nic_uninit_irq(struct hns3_nic_priv *priv)
{
  #line 98 
  struct hns3_enet_tqp_vector *tqp_vectors;
  #line 99 
  unsigned int i;
  #line 101 
  i = 0U;
  #line 101 
  while ((unsigned int)priv->vector_num > i) {
    #line 102 
    tqp_vectors = priv->tqp_vector + (unsigned long)i;
    #line 104 
    if (tqp_vectors->irq_init_flag != 1) 
                                         #line 105 
                                         goto __Cont;
    #line 108 
    irq_set_affinity_hint((unsigned int)tqp_vectors->vector_irq,(struct cpumask *)0);
    #line 111 
    cif_free_irq((unsigned int)tqp_vectors->vector_irq,(void *)tqp_vectors);
    #line 112 
    tqp_vectors->irq_init_flag = 0;
    #line 101 
    __Cont: 
            #line 101 
    i ++;
  }
  #line 114 
  return;
}

#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static int hns3_nic_init_irq(struct hns3_nic_priv *priv)
{
  #line 118 
  struct hns3_enet_tqp_vector *tqp_vectors;
  #line 122 
  unsigned int i;
  #line 123 
  int ret;
  #line 119 
  int txrx_int_idx = 0;
  #line 120 
  int rx_int_idx = 0;
  #line 121 
  int tx_int_idx = 0;
  #line 125 
  i = 0U;
  #line 125 
  while ((unsigned int)priv->vector_num > i) {
    #line 126 
    tqp_vectors = priv->tqp_vector + (unsigned long)i;
    #line 128 
    if (tqp_vectors->irq_init_flag == 1) 
                                         #line 129 
                                         goto __Cont;
    #line 131 
    if (tqp_vectors->tx_group.ring != (struct hns3_enet_ring *)0 && tqp_vectors->rx_group.ring != (struct hns3_enet_ring *)0) {
      #line 133 
      int tmp;
      #line 133 
      tmp = txrx_int_idx;
      #line 133 
      txrx_int_idx ++;
      #line 132 
      ;
      #line 132 
      ;
      #line 132 
      ;
      #line 132 
      snprintf((char *)(& tqp_vectors->name),47UL,(char *)"%s-%s-%d",(char *)(& (priv->netdev)->name),(char *)"TxRx",tmp);
      #line 135 
      txrx_int_idx ++;
    }
    else 
      #line 136 
      if (tqp_vectors->rx_group.ring != (struct hns3_enet_ring *)0) {
        #line 138 
        int tmp_0;
        #line 138 
        tmp_0 = rx_int_idx;
        #line 138 
        rx_int_idx ++;
        #line 137 
        ;
        #line 137 
        ;
        #line 137 
        ;
        #line 137 
        snprintf((char *)(& tqp_vectors->name),47UL,(char *)"%s-%s-%d",(char *)(& (priv->netdev)->name),(char *)"Rx",tmp_0);
      }
      else 
        #line 140 
        if (tqp_vectors->tx_group.ring != (struct hns3_enet_ring *)0) {
          #line 142 
          int tmp_1;
          #line 142 
          tmp_1 = tx_int_idx;
          #line 142 
          tx_int_idx ++;
          #line 141 
          ;
          #line 141 
          ;
          #line 141 
          ;
          #line 141 
          snprintf((char *)(& tqp_vectors->name),47UL,(char *)"%s-%s-%d",(char *)(& (priv->netdev)->name),(char *)"Tx",tmp_1);
        }
        else 
             #line 146 
             goto __Cont;
    #line 149 
    tqp_vectors->name[47] = (char)0;
    #line 151 
    ret = cif_request_irq((unsigned int)tqp_vectors->vector_irq,& hns3_irq_handle,0UL,(char *)(& tqp_vectors->name),(void *)tqp_vectors);
    #line 153 
    if (ret != 0) {
      #line 154 
      netdev_err(priv->netdev,(char *)"request irq(%d) fail\n",tqp_vectors->vector_irq);
      #line 156 
      hns3_nic_uninit_irq(priv);
      #line 157 
      return ret;
    }
    #line 160 
    irq_set_affinity_hint((unsigned int)tqp_vectors->vector_irq,& tqp_vectors->affinity_mask);
    #line 163 
    tqp_vectors->irq_init_flag = 1;
    #line 125 
    __Cont: 
            #line 125 
    i ++;
  }
  #line 166 
  return 0;
}

#line 169  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static void hns3_mask_vector_irq(struct hns3_enet_tqp_vector *tqp_vector, u32 mask_en)
{
  #line 172 
  writel(mask_en,(void *)tqp_vector->mask_addr);
  #line 173 
  return;
}

#line 175  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static void hns3_vector_enable(struct hns3_enet_tqp_vector *tqp_vector)
{
  #line 177 
  napi_enable(& tqp_vector->napi);
  #line 180 
  hns3_mask_vector_irq(tqp_vector,1U);
  #line 181 
  return;
}

#line 183  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static void hns3_vector_disable(struct hns3_enet_tqp_vector *tqp_vector)
{
  #line 186 
  hns3_mask_vector_irq(tqp_vector,0U);
  #line 188 
  disable_irq((unsigned int)tqp_vector->vector_irq);
  #line 189 
  napi_disable(& tqp_vector->napi);
  #line 190 
  return;
}

#line 192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
void hns3_set_vector_coalesce_rl(struct hns3_enet_tqp_vector *tqp_vector, u32 rl_value)
{
  #line 195 
  u32 rl_reg = rl_value >> 2;
  #line 202 
  if ((rl_reg != 0U && (unsigned int)tqp_vector->tx_group.coal.gl_adapt_enable == 0U) && (unsigned int)tqp_vector->rx_group.coal.gl_adapt_enable == 0U) 
    #line 207 
    rl_reg |= 64U;
  #line 209 
  writel(rl_reg,(void *)(tqp_vector->mask_addr + 2304U));
  #line 210 
  return;
}

#line 212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
void hns3_set_vector_coalesce_rx_gl(struct hns3_enet_tqp_vector *tqp_vector, u32 gl_value)
{
  #line 215 
  u32 rx_gl_reg = gl_value >> 1;
  #line 217 
  writel(rx_gl_reg,(void *)(tqp_vector->mask_addr + 256U));
  #line 218 
  return;
}

#line 220  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
void hns3_set_vector_coalesce_tx_gl(struct hns3_enet_tqp_vector *tqp_vector, u32 gl_value)
{
  #line 223 
  u32 tx_gl_reg = gl_value >> 1;
  #line 225 
  writel(tx_gl_reg,(void *)(tqp_vector->mask_addr + 512U));
  #line 226 
  return;
}

#line 228  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static void hns3_vector_gl_rl_init(struct hns3_enet_tqp_vector *tqp_vector, struct hns3_nic_priv *priv)
{
  #line 237 
  tqp_vector->tx_group.coal.gl_adapt_enable = (unsigned char)1U;
  #line 238 
  tqp_vector->rx_group.coal.gl_adapt_enable = (unsigned char)1U;
  #line 240 
  tqp_vector->tx_group.coal.int_gl = (unsigned short)20U;
  #line 241 
  tqp_vector->rx_group.coal.int_gl = (unsigned short)20U;
  #line 243 
  tqp_vector->rx_group.coal.flow_level = HNS3_FLOW_LOW;
  #line 244 
  tqp_vector->tx_group.coal.flow_level = HNS3_FLOW_LOW;
  #line 245 
  return;
}

#line 247  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static void hns3_vector_gl_rl_init_hw(struct hns3_enet_tqp_vector *tqp_vector, struct hns3_nic_priv *priv)
{
  #line 250 
  struct hnae3_handle *h = priv->ae_handle;
  #line 252 
  hns3_set_vector_coalesce_tx_gl(tqp_vector,(unsigned int)tqp_vector->tx_group.coal.int_gl);
  #line 254 
  hns3_set_vector_coalesce_rx_gl(tqp_vector,(unsigned int)tqp_vector->rx_group.coal.int_gl);
  #line 256 
  hns3_set_vector_coalesce_rl(tqp_vector,(unsigned int)h->__anonCompField_hnae3_handle_215.kinfo.int_rl_setting);
  #line 257 
  return;
}

#line 259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static int hns3_nic_set_real_num_queue(struct net_device *netdev)
{
  #line 264 
  int i;
  #line 264 
  int ret;
  #line 261 
  struct hnae3_handle *h = ((struct hns3_nic_priv *)netdev_priv(netdev))->ae_handle;
  #line 262 
  struct hnae3_knic_private_info *kinfo = & h->__anonCompField_hnae3_handle_215.kinfo;
  #line 263 
  unsigned int queue_size = (unsigned int)((int)kinfo->rss_size * (int)kinfo->num_tc);
  #line 266 
  if ((unsigned int)kinfo->num_tc <= 1U) 
                                         #line 267 
                                         netdev_reset_tc(netdev);
  else {
    #line 269 
    ret = netdev_set_num_tc(netdev,(unsigned char)((int)kinfo->num_tc));
    #line 270 
    if (ret != 0) {
      #line 271 
      netdev_err(netdev,(char *)"netdev_set_num_tc fail, ret=%d!\n",ret);
      #line 273 
      return ret;
    }
    #line 276 
    i = 0;
    #line 276 
    while (i <= 7) {
      #line 277 
      if (! kinfo->tc_info[i].enable) 
                                      #line 278 
                                      goto __Cont;
      #line 280 
      netdev_set_tc_queue(netdev,(unsigned char)((int)kinfo->tc_info[i].tc),(unsigned short)((int)kinfo->tc_info[i].tqp_count),(unsigned short)((int)kinfo->tc_info[i].tqp_offset));
      #line 276 
      __Cont: 
              #line 276 
      i ++;
    }
  }
  #line 287 
  ret = netif_set_real_num_tx_queues(netdev,queue_size);
  #line 288 
  if (ret != 0) {
    #line 289 
    netdev_err(netdev,(char *)"netif_set_real_num_tx_queues fail, ret=%d!\n",ret);
    #line 291 
    return ret;
  }
  #line 294 
  ret = netif_set_real_num_rx_queues(netdev,queue_size);
  #line 295 
  if (ret != 0) {
    #line 296 
    netdev_err(netdev,(char *)"netif_set_real_num_rx_queues fail, ret=%d!\n",ret);
    #line 298 
    return ret;
  }
  #line 301 
  return 0;
}

#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static u16 hns3_get_max_available_channels(struct hnae3_handle *h)
{
  #line 311 
  unsigned short __UNIQUE_ID___x562;
  #line 311 
  int tmp;
  #line 306 
  u16 alloc_tqps;
  #line 306 
  u16 max_rss_size;
  #line 306 
  u16 rss_size;
  #line 308 
  (*(((h->ae_algo)->ops)->get_tqps_and_rss_info))(h,& alloc_tqps,& max_rss_size);
  #line 309 
  rss_size = (unsigned short)((int)alloc_tqps / (int)h->__anonCompField_hnae3_handle_215.kinfo.num_tc);
  {
    #line 311 
    __UNIQUE_ID___x562 = rss_size;
    #line 311 
    unsigned short __UNIQUE_ID___y563 = max_rss_size;
    #line 311 
    if ((int)__UNIQUE_ID___x562 < (int)__UNIQUE_ID___y563) 
                                                           #line 311 
                                                           tmp = (int)__UNIQUE_ID___x562; else 
                                                                    #line 311 
                                                                    tmp = (int)__UNIQUE_ID___y563;
    }
  #line 311 
  return (unsigned short)tmp;
}

#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static void hns3_tqp_enable(struct hnae3_queue *tqp)
{
  #line 316 
  u32 rcb_reg;
  #line 318 
  rcb_reg = hns3_read_reg(tqp->io_base,144U);
  #line 319 
  rcb_reg |= 1U;
  #line 320 
  hns3_write_reg(tqp->io_base,144U,rcb_reg);
  #line 321 
  return;
}

#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static void hns3_tqp_disable(struct hnae3_queue *tqp)
{
  #line 325 
  u32 rcb_reg;
  #line 327 
  rcb_reg = hns3_read_reg(tqp->io_base,144U);
  #line 328 
  rcb_reg &= 4294967294U;
  #line 329 
  hns3_write_reg(tqp->io_base,144U,rcb_reg);
  #line 330 
  return;
}

#line 332  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static void hns3_free_rx_cpu_rmap(struct net_device *netdev)
{
  #line 335 
  free_irq_cpu_rmap(netdev->rx_cpu_rmap);
  #line 336 
  netdev->rx_cpu_rmap = (struct cpu_rmap *)0;
  #line 337 
  return;
}

#line 340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static int hns3_set_rx_cpu_rmap(struct net_device *netdev)
{
  #line 344 
  struct hns3_enet_tqp_vector *tqp_vector;
  #line 345 
  int i;
  #line 345 
  int ret;
  #line 343 
  struct hns3_nic_priv *priv = netdev_priv(netdev);
  #line 347 
  if (netdev->rx_cpu_rmap == (struct cpu_rmap *)0) {
    #line 348 
    netdev->rx_cpu_rmap = alloc_irq_cpu_rmap((unsigned int)priv->vector_num);
    #line 349 
    if (netdev->rx_cpu_rmap == (struct cpu_rmap *)0) 
                                                     #line 350 
                                                     return -12;
  }
  #line 353 
  i = 0;
  #line 353 
  while ((int)priv->vector_num > i) {
    #line 354 
    tqp_vector = priv->tqp_vector + (unsigned long)i;
    #line 355 
    ret = irq_cpu_rmap_add(netdev->rx_cpu_rmap,tqp_vector->vector_irq);
    #line 357 
    if (ret != 0) {
      #line 358 
      hns3_free_rx_cpu_rmap(netdev);
      #line 359 
      return ret;
    }
    #line 353 
    i ++;
  }
  #line 363 
  return 0;
}

#line 366  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static int hns3_nic_net_up(struct net_device *netdev)
{
  #line 370 
  int i;
  #line 370 
  int j;
  #line 371 
  int ret;
  #line 368 
  struct hns3_nic_priv *priv = netdev_priv(netdev);
  #line 369 
  struct hnae3_handle *h = priv->ae_handle;
  #line 373 
  ret = hns3_nic_reset_all_ring(h);
  #line 374 
  if (ret != 0) 
                #line 375 
                return ret;
  #line 378 
  ret = hns3_set_rx_cpu_rmap(netdev);
  #line 379 
  if (ret != 0) 
                #line 380 
                netdev_warn(netdev,(char *)"set rx cpu rmap fail, ret=%d!\n",ret);
  #line 383 
  ret = hns3_nic_init_irq(priv);
  #line 384 
  if (ret != 0) {
    #line 385 
    netdev_err(netdev,(char *)"init irq failed! ret=%d\n",ret);
    #line 386 
    goto free_rmap;
  }
  #line 389 
  cif_clear_bit(3L,& priv->state);
  #line 392 
  i = 0;
  #line 392 
  while ((int)priv->vector_num > i) {
    #line 393 
    hns3_vector_enable(priv->tqp_vector + (unsigned long)i);
    #line 392 
    i ++;
  }
  #line 396 
  j = 0;
  #line 396 
  while ((int)h->__anonCompField_hnae3_handle_215.kinfo.num_tqps > j) {
    #line 397 
    hns3_tqp_enable(*(h->__anonCompField_hnae3_handle_215.kinfo.tqp + (unsigned long)j));
    #line 396 
    j ++;
  }
  #line 400 
  if (((h->ae_algo)->ops)->start != (int (*)(struct hnae3_handle *))0) 
    #line 400 
    ret = (*(((h->ae_algo)->ops)->start))(h); else 
                                                   #line 400 
                                                   ret = 0;
  #line 401 
  if (ret != 0) 
                #line 402 
                goto out_start_err;
  #line 404 
  return 0;
  #line 406 
  out_start_err: 
                 #line 406 
  ;
  #line 407 
  cif_set_bit(3L,& priv->state);
  #line 408 
  while (1) {
    #line 408 
    int tmp_1;
    #line 408 
    tmp_1 = j;
    #line 408 
    j --;
    #line 408 
    ;
    #line 408 
    if (! (tmp_1 != 0)) 
                        #line 408 
                        break;
    #line 409 
    hns3_tqp_disable(*(h->__anonCompField_hnae3_handle_215.kinfo.tqp + (unsigned long)j));
  }
  #line 411 
  j = i + -1;
  #line 411 
  while (j >= 0) {
    #line 412 
    hns3_vector_disable(priv->tqp_vector + (unsigned long)j);
    #line 411 
    j --;
  }
  #line 414 
  hns3_nic_uninit_irq(priv);
  #line 415 
  free_rmap: 
             #line 415 
  ;
  #line 416 
  hns3_free_rx_cpu_rmap(netdev);
  #line 417 
  return ret;
}

#line 420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static void hns3_config_xps(struct hns3_nic_priv *priv)
{
  #line 422 
  int i;
  #line 424 
  i = 0;
  #line 424 
  while ((int)priv->vector_num > i) {
    {
      #line 425 
      struct hns3_enet_tqp_vector *tqp_vector = priv->tqp_vector + (unsigned long)i;
      #line 426 
      struct hns3_enet_ring *ring = tqp_vector->tx_group.ring;
      #line 428 
      while (ring != (struct hns3_enet_ring *)0) {
        #line 429 
        int ret;
        #line 431 
        ret = netif_set_xps_queue(priv->netdev,& tqp_vector->affinity_mask,(unsigned short)((int)((unsigned short)(ring->tqp)->tqp_index)));
        #line 434 
        if (ret != 0) 
                      #line 435 
                      netdev_warn(priv->netdev,(char *)"set xps queue failed: %d",ret);
        #line 438 
        ring = ring->next;
      }
    }
    #line 424 
    i ++;
  }
  #line 441 
  return;
}

#line 443  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static int hns3_nic_net_open(struct net_device *netdev)
{
  #line 447 
  struct hnae3_knic_private_info *kinfo;
  #line 448 
  int i;
  #line 448 
  int ret;
  #line 445 
  struct hns3_nic_priv *priv = netdev_priv(netdev);
  #line 446 
  struct hnae3_handle *h = ((struct hns3_nic_priv *)netdev_priv(netdev))->ae_handle;
  #line 450 
  if ((int)hns3_nic_resetting(netdev) != 0) 
                                            #line 451 
                                            return -16;
  #line 453 
  netif_carrier_off(netdev);
  #line 455 
  ret = hns3_nic_set_real_num_queue(netdev);
  #line 456 
  if (ret != 0) 
                #line 457 
                return ret;
  #line 459 
  ret = hns3_nic_net_up(netdev);
  #line 460 
  if (ret != 0) {
    #line 461 
    netdev_err(netdev,(char *)"net up fail, ret=%d!\n",ret);
    #line 462 
    return ret;
  }
  #line 465 
  kinfo = & h->__anonCompField_hnae3_handle_215.kinfo;
  #line 466 
  i = 0;
  #line 466 
  while (i <= 7) {
    #line 467 
    netdev_set_prio_tc_map(netdev,(unsigned char)((int)((unsigned char)i)),(unsigned char)((int)kinfo->prio_tc[i]));
    #line 466 
    i ++;
  }
  #line 469 
  if (((h->ae_algo)->ops)->set_timer_task != (void (*)(struct hnae3_handle *, bool ))0) 
    #line 470 
    (*(((h->ae_algo)->ops)->set_timer_task))(priv->ae_handle,(_Bool)1);
  #line 472 
  hns3_config_xps(priv);
  #line 474 
  if ((h->msg_enable & 1U) != 0U) {
    #line 474 
    bool branch;
    #line 474 
    struct _ddebug __UNIQUE_ID_ddebug564 = {.modname = (char *)"hns3", .function = (char *)"hns3_nic_net_open", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c", .format = (char *)"net open\n", .lineno = (unsigned int)474U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 474 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug564.key.dd_key_false.key,(_Bool)0);
    #line 474 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 474 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug564,netdev,(char *)"net open\n");
  }
  #line 476 
  return 0;
}

#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static void hns3_reset_tx_queue(struct hnae3_handle *h)
{
  #line 483 
  struct netdev_queue *dev_queue;
  #line 484 
  u32 i;
  #line 481 
  struct net_device *ndev = h->__anonCompField_hnae3_handle_215.kinfo.netdev;
  #line 482 
  struct hns3_nic_priv *priv = netdev_priv(ndev);
  #line 486 
  i = 0U;
  #line 486 
  while ((unsigned int)h->__anonCompField_hnae3_handle_215.kinfo.num_tqps > i) {
    #line 487 
    dev_queue = netdev_get_tx_queue(ndev,(unsigned int)(priv->ring + (unsigned long)i)->queue_index);
    #line 489 
    netdev_tx_reset_queue(dev_queue);
    #line 486 
    i ++;
  }
  #line 491 
  return;
}

#line 493  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static void hns3_nic_net_down(struct net_device *netdev)
{
  #line 497 
  struct hnae3_ae_ops *ops;
  #line 498 
  int i;
  #line 495 
  struct hns3_nic_priv *priv = netdev_priv(netdev);
  #line 496 
  struct hnae3_handle *h = ((struct hns3_nic_priv *)netdev_priv(netdev))->ae_handle;
  #line 501 
  i = 0;
  #line 501 
  while ((int)priv->vector_num > i) {
    #line 502 
    hns3_vector_disable(priv->tqp_vector + (unsigned long)i);
    #line 501 
    i ++;
  }
  #line 505 
  i = 0;
  #line 505 
  while ((int)h->__anonCompField_hnae3_handle_215.kinfo.num_tqps > i) {
    #line 506 
    hns3_tqp_disable(*(h->__anonCompField_hnae3_handle_215.kinfo.tqp + (unsigned long)i));
    #line 505 
    i ++;
  }
  #line 509 
  ops = ((priv->ae_handle)->ae_algo)->ops;
  #line 510 
  if (ops->stop != (void (*)(struct hnae3_handle *))0) 
                                                       #line 511 
                                                       (*(ops->stop))(priv->ae_handle);
  #line 513 
  hns3_free_rx_cpu_rmap(netdev);
  #line 516 
  hns3_nic_uninit_irq(priv);
  #line 522 
  if (! hns3_nic_resetting(netdev)) 
                                    #line 523 
                                    hns3_clear_all_ring(priv->ae_handle,(_Bool)0);
  #line 525 
  hns3_reset_tx_queue(priv->ae_handle);
  #line 526 
  return;
}

#line 528  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static int hns3_nic_net_stop(struct net_device *netdev)
{
  #line 530 
  struct hns3_nic_priv *priv = netdev_priv(netdev);
  #line 531 
  struct hnae3_handle *h = ((struct hns3_nic_priv *)netdev_priv(netdev))->ae_handle;
  #line 533 
  if ((int)test_and_set_bit(3L,& priv->state) != 0) 
                                                    #line 534 
                                                    return 0;
  #line 536 
  if ((h->msg_enable & 1U) != 0U) {
    #line 536 
    bool branch;
    #line 536 
    struct _ddebug __UNIQUE_ID_ddebug565 = {.modname = (char *)"hns3", .function = (char *)"hns3_nic_net_stop", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c", .format = (char *)"net stop\n", .lineno = (unsigned int)536U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 536 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug565.key.dd_key_false.key,(_Bool)0);
    #line 536 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 536 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug565,netdev,(char *)"net stop\n");
  }
  #line 538 
  if (((h->ae_algo)->ops)->set_timer_task != (void (*)(struct hnae3_handle *, bool ))0) 
    #line 539 
    (*(((h->ae_algo)->ops)->set_timer_task))(priv->ae_handle,(_Bool)0);
  #line 541 
  netif_tx_stop_all_queues(netdev);
  #line 542 
  netif_carrier_off(netdev);
  #line 544 
  hns3_nic_net_down(netdev);
  #line 546 
  return 0;
}

#line 549  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static int hns3_nic_uc_sync(struct net_device *netdev, unsigned char *addr)
{
  #line 552 
  struct hnae3_handle *h = ((struct hns3_nic_priv *)netdev_priv(netdev))->ae_handle;
  #line 554 
  if (((h->ae_algo)->ops)->add_uc_addr != (int (*)(struct hnae3_handle *, unsigned char *))0) {
    #line 555 
    return (*(((h->ae_algo)->ops)->add_uc_addr))(h,addr);
  }
  #line 557 
  return 0;
}

#line 560  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static int hns3_nic_uc_unsync(struct net_device *netdev, unsigned char *addr)
{
  #line 563 
  struct hnae3_handle *h = ((struct hns3_nic_priv *)netdev_priv(netdev))->ae_handle;
  #line 565 
  if (((h->ae_algo)->ops)->rm_uc_addr != (int (*)(struct hnae3_handle *, unsigned char *))0) {
    #line 566 
    return (*(((h->ae_algo)->ops)->rm_uc_addr))(h,addr);
  }
  #line 568 
  return 0;
}

#line 571  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static int hns3_nic_mc_sync(struct net_device *netdev, unsigned char *addr)
{
  #line 574 
  struct hnae3_handle *h = ((struct hns3_nic_priv *)netdev_priv(netdev))->ae_handle;
  #line 576 
  if (((h->ae_algo)->ops)->add_mc_addr != (int (*)(struct hnae3_handle *, unsigned char *))0) {
    #line 577 
    return (*(((h->ae_algo)->ops)->add_mc_addr))(h,addr);
  }
  #line 579 
  return 0;
}

#line 582  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static int hns3_nic_mc_unsync(struct net_device *netdev, unsigned char *addr)
{
  #line 585 
  struct hnae3_handle *h = ((struct hns3_nic_priv *)netdev_priv(netdev))->ae_handle;
  #line 587 
  if (((h->ae_algo)->ops)->rm_mc_addr != (int (*)(struct hnae3_handle *, unsigned char *))0) {
    #line 588 
    return (*(((h->ae_algo)->ops)->rm_mc_addr))(h,addr);
  }
  #line 590 
  return 0;
}

#line 593  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static u8 hns3_get_netdev_flags(struct net_device *netdev)
{
  #line 595 
  u8 flags = (unsigned char)0U;
  #line 597 
  if ((netdev->flags & 256U) != 0U) 
                                    #line 598 
                                    flags = (unsigned char)7U;
  else {
    #line 600 
    flags = (unsigned char)((unsigned int)flags | 32U);
    #line 601 
    if ((netdev->flags & 512U) != 0U) 
                                      #line 602 
                                      flags = (unsigned char)((unsigned int)flags | 2U);
  }
  #line 605 
  return flags;
}

#line 608  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static void hns3_nic_set_rx_mode(struct net_device *netdev)
{
  #line 611 
  u8 new_flags;
  #line 612 
  int ret;
  #line 610 
  struct hnae3_handle *h = ((struct hns3_nic_priv *)netdev_priv(netdev))->ae_handle;
  #line 614 
  new_flags = hns3_get_netdev_flags(netdev);
  #line 616 
  ret = __dev_uc_sync(netdev,& hns3_nic_uc_sync,& hns3_nic_uc_unsync);
  #line 617 
  if (ret != 0) {
    #line 618 
    netdev_err(netdev,(char *)"sync uc address fail\n");
    #line 619 
    if (ret == -28) 
                    #line 620 
                    new_flags = (unsigned char)((unsigned int)new_flags | 8U);
  }
  #line 623 
  if ((netdev->flags & 4096U) != 0U) {
    #line 624 
    ret = __dev_mc_sync(netdev,& hns3_nic_mc_sync,& hns3_nic_mc_unsync);
    #line 626 
    if (ret != 0) {
      #line 627 
      netdev_err(netdev,(char *)"sync mc address fail\n");
      #line 628 
      if (ret == -28) 
                      #line 629 
                      new_flags = (unsigned char)((unsigned int)new_flags | 16U);
    }
  }
  #line 637 
  hns3_enable_vlan_filter(netdev,(_Bool)(((unsigned long)new_flags & 32UL) != 0UL));
  #line 638 
  h->netdev_flags = new_flags;
  #line 639 
  hns3_update_promisc_mode(netdev,(unsigned char)((int)new_flags));
  #line 640 
  return;
}

#line 642  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
int hns3_update_promisc_mode(struct net_device *netdev, u8 promisc_flags)
{
  #line 644 
  struct hns3_nic_priv *priv = netdev_priv(netdev);
  #line 645 
  struct hnae3_handle *h = priv->ae_handle;
  #line 647 
  if (((h->ae_algo)->ops)->set_promisc_mode != (int (*)(struct hnae3_handle *, bool , bool ))0) {
    #line 648 
    return (*(((h->ae_algo)->ops)->set_promisc_mode))(h,
                                                   (_Bool)(((unsigned long)promisc_flags & 9UL) != 0UL),
                                                   (_Bool)(((unsigned long)promisc_flags & 18UL) != 0UL));
  }
  #line 653 
  return 0;
}

#line 656  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
void hns3_enable_vlan_filter(struct net_device *netdev, bool enable)
{
  #line 660 
  bool last_state;
  #line 658 
  struct hns3_nic_priv *priv = netdev_priv(netdev);
  #line 659 
  struct hnae3_handle *h = priv->ae_handle;
  #line 662 
  if ((unsigned int)(h->pdev)->revision > 32U && ((h->ae_algo)->ops)->enable_vlan_filter != (void (*)(struct hnae3_handle *, bool ))0) {
    #line 663 
    last_state = (_Bool)(((int)((unsigned long)h->netdev_flags >> 5) & 1) != 0);
    #line 664 
    if ((int)enable != (int)last_state) {
      #line 666 
      char *tmp_0;
      #line 666 
      if ((int)enable != 0) 
                            #line 666 
                            tmp_0 = (char *)"enable"; else 
                                                           #line 666 
                                                           tmp_0 = (char *)"disable";
      #line 665 
      ;
      #line 665 
      netdev_info(netdev,(char *)"%s vlan filter\n",tmp_0);
      #line 668 
      (*(((h->ae_algo)->ops)->enable_vlan_filter))(h,(_Bool)((bool)((int)enable) != 0));
    }
  }
  #line 671 
  return;
}

#line 673  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static int hns3_set_tso(struct sk_buff *skb, u32 *paylen, u16 *mss, u32 *type_cs_vlan_tso)
{
  #line 676 
  u32 l4_offset;
  #line 676 
  u32 hdr_len;
  #line 677 
  union l3_hdr_info l3;
  #line 678 
  union l4_hdr_info l4;
  #line 679 
  u32 l4_paylen;
  #line 680 
  int ret;
  #line 682 
  if (! skb_is_gso(skb)) 
                         #line 683 
                         return 0;
  #line 685 
  ret = skb_cow_head(skb,0U);
  #line 686 
  if ((long)(ret < 0) != 0L) 
                             #line 687 
                             return ret;
  #line 689 
  l3.hdr = skb_network_header(skb);
  #line 690 
  l4.hdr = skb_transport_header(skb);
  #line 695 
  if ((unsigned int)(l3.v4)->version == 4U) 
                                            #line 696 
                                            (l3.v4)->check = (unsigned short)0U;
  #line 699 
  ;
  #line 699 
  if ((((struct skb_shared_info *)skb_end_pointer(skb))->gso_type & 3264U) != 0U) {
    #line 703 
    ;
    #line 703 
    if ((((struct skb_shared_info *)skb_end_pointer(skb))->gso_type & 4096U) == 0U) {
      #line 704 
      ;
      #line 704 
      if ((((struct skb_shared_info *)skb_end_pointer(skb))->gso_type & 2048U) != 0U) 
        #line 710 
        (l4.udp)->check = (unsigned short)0U;
    }
    #line 713 
    l3.hdr = skb_inner_network_header(skb);
    #line 714 
    l4.hdr = skb_inner_transport_header(skb);
    #line 719 
    if ((unsigned int)(l3.v4)->version == 4U) 
                                              #line 720 
                                              (l3.v4)->check = (unsigned short)0U;
  }
  #line 724 
  l4_offset = (unsigned int)(l4.hdr - skb->data);
  #line 725 
  hdr_len = (unsigned int)((int)(l4.tcp)->doff << 2) + l4_offset;
  #line 728 
  l4_paylen = skb->len - l4_offset;
  #line 729 
  ;
  #line 729 
  csum_replace_by_diff(& (l4.tcp)->check,__builtin_bswap32(l4_paylen));
  #line 733 
  *paylen = skb->len - hdr_len;
  #line 734 
  *type_cs_vlan_tso |= 128U;
  #line 737 
  *mss = ((struct skb_shared_info *)skb_end_pointer(skb))->gso_size;
  #line 739 
  return 0;
}

#line 742  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static int hns3_get_l4_protocol(struct sk_buff *skb, u8 *ol4_proto, u8 *il4_proto)
{
  #line 745 
  union l3_hdr_info l3;
  #line 746 
  unsigned char *l4_hdr;
  #line 747 
  unsigned char *exthdr;
  #line 748 
  u8 l4_proto_tmp;
  #line 749 
  __be16 frag_off;
  #line 752 
  l3.hdr = skb_network_header(skb);
  #line 753 
  l4_hdr = skb_transport_header(skb);
  #line 755 
  if ((unsigned int)skb->protocol == 56710U) {
    #line 756 
    exthdr = l3.hdr + 40UL;
    #line 757 
    l4_proto_tmp = (l3.v6)->nexthdr;
    #line 758 
    if (l4_hdr != exthdr) 
                          #line 759 
                          ipv6_skip_exthdr(skb,(int)(exthdr - skb->data),& l4_proto_tmp,& frag_off);
  }
  else 
    #line 761 
    if ((unsigned int)skb->protocol == 8U) 
                                           #line 762 
                                           l4_proto_tmp = (l3.v4)->protocol; else 
                                                                    #line 764 
                                                                    return -22;
  #line 767 
  *ol4_proto = l4_proto_tmp;
  #line 770 
  if ((unsigned int)skb->encapsulation == 0U) {
    #line 771 
    *il4_proto = (unsigned char)0U;
    #line 772 
    return 0;
  }
  #line 776 
  l3.hdr = skb_inner_network_header(skb);
  #line 777 
  l4_hdr = skb_inner_transport_header(skb);
  #line 779 
  if ((unsigned int)(l3.v6)->version == 6U) {
    #line 780 
    exthdr = l3.hdr + 40UL;
    #line 781 
    l4_proto_tmp = (l3.v6)->nexthdr;
    #line 782 
    if (l4_hdr != exthdr) 
                          #line 783 
                          ipv6_skip_exthdr(skb,(int)(exthdr - skb->data),& l4_proto_tmp,& frag_off);
  }
  else 
    #line 785 
    if ((unsigned int)(l3.v4)->version == 4U) 
                                              #line 786 
                                              l4_proto_tmp = (l3.v4)->protocol;
  #line 789 
  *il4_proto = l4_proto_tmp;
  #line 791 
  return 0;
}

#line 800  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static bool hns3_tunnel_csum_bug(struct sk_buff *skb)
{
  #line 802 
  union l4_hdr_info l4;
  #line 804 
  l4.hdr = skb_transport_header(skb);
  #line 806 
  if ((unsigned int)skb->encapsulation != 0U || (unsigned int)(l4.udp)->dest != 46354U) 
    #line 808 
    return (_Bool)0;
  #line 810 
  skb_checksum_help(skb);
  #line 812 
  return (_Bool)1;
}

#line 815  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static void hns3_set_outer_l2l3l4(struct sk_buff *skb, u8 ol4_proto, u32 *ol_type_vlan_len_msec)
{
  #line 818 
  u32 l2_len;
  #line 818 
  u32 l3_len;
  #line 818 
  u32 l4_len;
  #line 819 
  unsigned char *il2_hdr;
  #line 820 
  union l3_hdr_info l3;
  #line 821 
  union l4_hdr_info l4;
  #line 823 
  l3.hdr = skb_network_header(skb);
  #line 824 
  l4.hdr = skb_transport_header(skb);
  #line 827 
  l2_len = (unsigned int)(l3.hdr - skb->data);
  #line 828 
  *ol_type_vlan_len_msec |= (l2_len >> 1) << 8;
  #line 831 
  l3_len = (unsigned int)(l4.hdr - l3.hdr);
  #line 832 
  *ol_type_vlan_len_msec |= (l3_len >> 2) << 16;
  #line 834 
  il2_hdr = skb_inner_mac_header(skb);
  #line 836 
  l4_len = (unsigned int)(il2_hdr - l4.hdr);
  #line 837 
  *ol_type_vlan_len_msec |= (l4_len >> 2) << 24;
  #line 840 
  if ((unsigned int)skb->protocol == 8U) {
    #line 841 
    if ((int)skb_is_gso(skb) != 0) 
                                   #line 842 
                                   *ol_type_vlan_len_msec |= 3U; else 
                                                                   #line 846 
                                                                   *ol_type_vlan_len_msec |= 2U;
  }
  else 
    #line 850 
    if ((unsigned int)skb->protocol == 56710U) 
                                               #line 851 
                                               *ol_type_vlan_len_msec |= 1U;
  #line 855 
  if ((unsigned int)ol4_proto == 17U) 
                                      #line 856 
                                      *ol_type_vlan_len_msec |= 16U;
  else 
    #line 858 
    if ((unsigned int)ol4_proto == 47U) 
                                        #line 859 
                                        *ol_type_vlan_len_msec |= 32U;
  #line 860 
  return;
}

#line 863  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static int hns3_set_l2l3l4(struct sk_buff *skb, u8 ol4_proto, u8 il4_proto, u32 *type_cs_vlan_tso, u32 *ol_type_vlan_len_msec)
{
  #line 869 
  union l4_hdr_info l4;
  #line 870 
  union l3_hdr_info l3;
  #line 871 
  u32 l2_len;
  #line 871 
  u32 l3_len;
  #line 867 
  unsigned char *l2_hdr = skb->data;
  #line 868 
  u32 l4_proto = (unsigned int)ol4_proto;
  #line 873 
  l4.hdr = skb_transport_header(skb);
  #line 874 
  l3.hdr = skb_network_header(skb);
  #line 877 
  if ((unsigned int)skb->encapsulation != 0U) {
    #line 879 
    if ((unsigned int)ol4_proto != 17U && (unsigned int)ol4_proto != 47U) {
      #line 883 
      if ((int)skb_is_gso(skb) != 0) 
                                     #line 884 
                                     return -33;
      #line 889 
      skb_checksum_help(skb);
      #line 890 
      return 0;
    }
    #line 893 
    hns3_set_outer_l2l3l4(skb,(unsigned char)((int)ol4_proto),ol_type_vlan_len_msec);
    #line 896 
    l2_hdr = skb_inner_mac_header(skb);
    #line 897 
    l3.hdr = skb_inner_network_header(skb);
    #line 898 
    l4.hdr = skb_inner_transport_header(skb);
    #line 899 
    l4_proto = (unsigned int)il4_proto;
  }
  #line 902 
  if ((unsigned int)(l3.v4)->version == 4U) {
    #line 903 
    *type_cs_vlan_tso |= 2U;
    #line 909 
    if ((int)skb_is_gso(skb) != 0) 
                                   #line 910 
                                   *type_cs_vlan_tso |= 16U;
  }
  else 
    #line 911 
    if ((unsigned int)(l3.v6)->version == 6U) 
                                              #line 912 
                                              *type_cs_vlan_tso |= 1U;
  #line 917 
  l2_len = (unsigned int)(l3.hdr - l2_hdr);
  #line 918 
  *type_cs_vlan_tso |= (l2_len >> 1) << 8;
  #line 921 
  l3_len = (unsigned int)(l4.hdr - l3.hdr);
  #line 922 
  *type_cs_vlan_tso |= (l3_len >> 2) << 16;
  #line 925 
  switch (l4_proto) {
    #line 926 
    case (u32)6: 
                 #line 926 
    ;
    #line 927 
    *type_cs_vlan_tso |= 32U;
    #line 928 
    *type_cs_vlan_tso |= 4U;
    #line 930 
    *type_cs_vlan_tso |= (unsigned int)((int)(l4.tcp)->doff << 24);
    #line 932 
    break;
    #line 933 
    case (u32)17: 
                  #line 933 
    ;
    #line 934 
    if ((int)hns3_tunnel_csum_bug(skb) != 0) 
                                             #line 935 
                                             break;
    #line 937 
    *type_cs_vlan_tso |= 32U;
    #line 938 
    *type_cs_vlan_tso |= 8U;
    #line 940 
    *type_cs_vlan_tso |= 33554432U;
    #line 942 
    break;
    #line 943 
    case (u32)132: 
                   #line 943 
    ;
    #line 944 
    *type_cs_vlan_tso |= 32U;
    #line 945 
    *type_cs_vlan_tso |= 12U;
    #line 947 
    *type_cs_vlan_tso |= 50331648U;
    #line 949 
    break;
    #line 950 
    default: 
             #line 950 
    ;
    #line 954 
    if ((int)skb_is_gso(skb) != 0) 
                                   #line 955 
                                   return -33;
    #line 960 
    skb_checksum_help(skb);
    #line 961 
    return 0;
  }
  #line 964 
  return 0;
}

#line 967  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static int hns3_handle_vtags(struct hns3_enet_ring *tx_ring, struct sk_buff *skb)
{
  #line 971 
  struct vlan_ethhdr *vhdr;
  #line 972 
  int rc;
  #line 970 
  struct hnae3_handle *handle = (tx_ring->tqp)->handle;
  #line 974 
  if ((unsigned int)skb->protocol != 129U && (unsigned int)skb->vlan_present == 0U) 
    #line 976 
    return 0;
  #line 981 
  if ((long)((int)skb_vlan_tagged_multi(skb) != 0) != 0L) 
    #line 981 
    if ((long)(handle->port_base_vlan_state == (unsigned int)HNAE3_PORT_BASE_VLAN_ENABLE) != 0L) 
      #line 984 
      return -22;
  #line 986 
  if ((unsigned int)skb->protocol == 129U && ((handle->__anonCompField_hnae3_handle_215.kinfo.netdev)->features & 128ULL) == 0ULL) {
    #line 992 
    skb->protocol = vlan_get_protocol(skb);
    #line 993 
    return 0;
  }
  #line 996 
  if ((unsigned int)skb->vlan_present != 0U) {
    #line 1000 
    if ((unsigned int)skb->protocol == 129U && handle->port_base_vlan_state == (unsigned int)HNAE3_PORT_BASE_VLAN_DISABLE) 
      #line 1003 
      rc = 2; else 
                   #line 1005 
                   rc = 1;
    #line 1007 
    skb->protocol = vlan_get_protocol(skb);
    #line 1008 
    return rc;
  }
  #line 1011 
  rc = skb_cow_head(skb,0U);
  #line 1012 
  if ((long)(rc < 0) != 0L) 
                            #line 1013 
                            return rc;
  #line 1015 
  vhdr = (struct vlan_ethhdr *)skb->data;
  #line 1016 
  vhdr->h_vlan_TCI = (unsigned short)((int)vhdr->h_vlan_TCI | (int)__builtin_bswap16((unsigned short)((int)((unsigned short)skb->priority) << 13U)));
  #line 1019 
  skb->protocol = vlan_get_protocol(skb);
  #line 1020 
  return 0;
}

#line 1023  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static int hns3_fill_skb_desc(struct hns3_enet_ring *ring, struct sk_buff *skb, struct hns3_desc *desc)
{
  #line 1032 
  int ret;
  #line 1026 
  u32 ol_type_vlan_len_msec = 0U;
  #line 1027 
  u32 type_cs_vlan_tso = 0U;
  #line 1028 
  u32 paylen = skb->len;
  #line 1029 
  u16 inner_vtag = (unsigned short)0U;
  #line 1030 
  u16 out_vtag = (unsigned short)0U;
  #line 1031 
  u16 mss = (unsigned short)0U;
  #line 1034 
  ret = hns3_handle_vtags(ring,skb);
  #line 1035 
  if ((long)(ret < 0) != 0L) {
    #line 1036 
    u64_stats_init(& ring->syncp);
    #line 1037 
    (ring->stats.__anonCompField_ring_stats_225.__anonCompField___anonunion_1125_223.tx_vlan_err) ++;
    #line 1038 
    u64_stats_init(& ring->syncp);
    #line 1039 
    return ret;
  }
  else 
    #line 1040 
    if (ret == 1) {
      #line 1041 
      inner_vtag = skb->vlan_tci;
      #line 1042 
      inner_vtag = (unsigned short)(((int)((unsigned short)skb->priority) << 13U) | (int)inner_vtag);
      #line 1044 
      type_cs_vlan_tso |= 64U;
    }
    else 
      #line 1045 
      if (ret == 2) {
        #line 1046 
        out_vtag = skb->vlan_tci;
        #line 1047 
        out_vtag = (unsigned short)(((int)((unsigned short)skb->priority) << 13U) | (int)out_vtag);
        #line 1049 
        ol_type_vlan_len_msec |= 4U;
      }
  #line 1053 
  if ((unsigned int)skb->ip_summed == 3U) {
    #line 1054 
    u8 ol4_proto;
    #line 1054 
    u8 il4_proto;
    #line 1056 
    skb_reset_mac_len(skb);
    #line 1058 
    ret = hns3_get_l4_protocol(skb,& ol4_proto,& il4_proto);
    #line 1059 
    if ((long)(ret < 0) != 0L) {
      #line 1060 
      u64_stats_init(& ring->syncp);
      #line 1061 
      (ring->stats.__anonCompField_ring_stats_225.__anonCompField___anonunion_1125_223.tx_l4_proto_err) ++;
      #line 1062 
      u64_stats_init(& ring->syncp);
      #line 1063 
      return ret;
    }
    #line 1066 
    ret = hns3_set_l2l3l4(skb,(unsigned char)((int)ol4_proto),(unsigned char)((int)il4_proto),& type_cs_vlan_tso,& ol_type_vlan_len_msec);
    #line 1069 
    if ((long)(ret < 0) != 0L) {
      #line 1070 
      u64_stats_init(& ring->syncp);
      #line 1071 
      (ring->stats.__anonCompField_ring_stats_225.__anonCompField___anonunion_1125_223.tx_l2l3l4_err) ++;
      #line 1072 
      u64_stats_init(& ring->syncp);
      #line 1073 
      return ret;
    }
    #line 1076 
    ret = hns3_set_tso(skb,& paylen,& mss,& type_cs_vlan_tso);
    #line 1078 
    if ((long)(ret < 0) != 0L) {
      #line 1079 
      u64_stats_init(& ring->syncp);
      #line 1080 
      (ring->stats.__anonCompField_ring_stats_225.__anonCompField___anonunion_1125_223.tx_tso_err) ++;
      #line 1081 
      u64_stats_init(& ring->syncp);
      #line 1082 
      return ret;
    }
  }
  #line 1087 
  desc->__anonCompField_hns3_desc_222.tx.__anonCompField___anonstruct_tx_1117_219.ol_type_vlan_len_msec = ol_type_vlan_len_msec;
  #line 1089 
  desc->__anonCompField_hns3_desc_222.tx.__anonCompField___anonstruct_tx_1117_217.type_cs_vlan_tso_len = type_cs_vlan_tso;
  #line 1090 
  desc->__anonCompField_hns3_desc_222.tx.paylen = paylen;
  #line 1091 
  desc->__anonCompField_hns3_desc_222.tx.mss = mss;
  #line 1092 
  desc->__anonCompField_hns3_desc_222.tx.vlan_tag = inner_vtag;
  #line 1093 
  desc->__anonCompField_hns3_desc_222.tx.outer_vlan_tag = out_vtag;
  #line 1095 
  return 0;
}

#line 1098  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static int hns3_fill_desc(struct hns3_enet_ring *ring, void *priv, unsigned int size, enum hns_desc_type type)
{
  #line 1106 
  skb_frag_t *frag;
  #line 1107 
  unsigned int frag_buf_num;
  #line 1108 
  int k;
  #line 1108 
  int sizeoflast;
  #line 1109 
  dma_addr_t dma;
  #line 1103 
  struct hns3_desc_cb *desc_cb = ring->desc_cb + (unsigned long)ring->next_to_use;
  #line 1104 
  struct hns3_desc *desc = ring->desc + (unsigned long)ring->next_to_use;
  #line 1105 
  struct device *dev = ring->dev;
  #line 1111 
  if (type == (unsigned int)DESC_TYPE_SKB) {
    #line 1113 
    int ret;
    #line 1112 
    struct sk_buff *skb = (struct sk_buff *)priv;
    #line 1115 
    ret = hns3_fill_skb_desc(ring,skb,desc);
    #line 1116 
    if ((long)(ret < 0) != 0L) 
                               #line 1117 
                               return ret;
    #line 1119 
    dma = dma_map_single_attrs(dev,(void *)skb->data,(unsigned long)size,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
  }
  else {
    #line 1121 
    frag = (skb_frag_t *)priv;
    #line 1122 
    dma = skb_frag_dma_map(dev,frag,0UL,(unsigned long)size,(enum dma_data_direction)DMA_TO_DEVICE);
  }
  #line 1125 
  if ((long)(dma_mapping_error(dev,dma) != 0) != 0L) {
    #line 1126 
    u64_stats_init(& ring->syncp);
    #line 1127 
    (ring->stats.sw_err_cnt) ++;
    #line 1128 
    u64_stats_init(& ring->syncp);
    #line 1129 
    return -12;
  }
  #line 1132 
  desc_cb->length = size;
  #line 1134 
  if ((long)(size <= 65535U) != 0L) {
    #line 1135 
    desc_cb->priv = priv;
    #line 1136 
    desc_cb->dma = dma;
    #line 1137 
    desc_cb->type = (unsigned short)type;
    #line 1138 
    desc->addr = dma;
    #line 1139 
    desc->__anonCompField_hns3_desc_222.tx.send_size = (unsigned short)size;
    #line 1140 
    desc->__anonCompField_hns3_desc_222.tx.bdtp_fe_sc_vld_ra_ri = (unsigned short)256U;
    #line 1143 
    ring->next_to_use = (ring->next_to_use + 1) % (int)ring->desc_num;
    #line 1144 
    return 1;
  }
  #line 1147 
  frag_buf_num = (size + 65534U) / 65535U;
  #line 1148 
  sizeoflast = (int)size & 65535;
  #line 1149 
  if (sizeoflast != 0) 
                       #line 1149 
                       sizeoflast = sizeoflast; else 
                                                     #line 1149 
                                                     sizeoflast = 65535;
  #line 1152 
  k = 0;
  #line 1152 
  while ((unsigned int)k < frag_buf_num) {
    #line 1154 
    desc_cb->priv = priv;
    #line 1155 
    desc_cb->dma = (unsigned long long)(k * 65535) + dma;
    #line 1156 
    desc_cb->type = (unsigned short)((type != (unsigned int)DESC_TYPE_SKB || k != 0) != 0);
    #line 1160 
    desc->addr = (unsigned long long)(k * 65535) + dma;
    #line 1161 
    if (frag_buf_num + 4294967295U == (unsigned int)k) 
                                                       #line 1161 
                                                       desc->__anonCompField_hns3_desc_222.tx.send_size = (unsigned short)sizeoflast; else 
                                                                    #line 1161 
                                                                    desc->__anonCompField_hns3_desc_222.tx.send_size = (unsigned short)65535U;
    #line 1163 
    desc->__anonCompField_hns3_desc_222.tx.bdtp_fe_sc_vld_ra_ri = (unsigned short)256U;
    #line 1167 
    ring->next_to_use = (ring->next_to_use + 1) % (int)ring->desc_num;
    #line 1169 
    desc_cb = ring->desc_cb + (unsigned long)ring->next_to_use;
    #line 1170 
    desc = ring->desc + (unsigned long)ring->next_to_use;
    #line 1152 
    k ++;
  }
  #line 1173 
  return (int)frag_buf_num;
}

#line 1176  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static unsigned int hns3_skb_bd_num(struct sk_buff *skb, unsigned int *bd_size, unsigned int bd_num)
{
  #line 1179 
  unsigned int size;
  #line 1180 
  int i;
  #line 1182 
  size = skb_headlen(skb);
  #line 1183 
  while (size > 65535U) {
    #line 1184 
    unsigned int tmp;
    #line 1184 
    tmp = bd_num;
    #line 1184 
    bd_num ++;
    #line 1184 
    *(bd_size + (unsigned long)tmp) = 65535U;
    #line 1185 
    size += 4294901761U;
    #line 1187 
    if (bd_num > 63U) 
                      #line 1188 
                      return bd_num;
  }
  #line 1191 
  if (size != 0U) {
    #line 1192 
    unsigned int tmp_0;
    #line 1192 
    tmp_0 = bd_num;
    #line 1192 
    bd_num ++;
    #line 1192 
    *(bd_size + (unsigned long)tmp_0) = size;
    #line 1193 
    if (bd_num > 63U) 
                      #line 1194 
                      return bd_num;
  }
  #line 1197 
  i = 0;
  #line 1197 
  while (1) {
    #line 1197 
    ;
    #line 1197 
    if (! ((int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags > i)) 
      #line 1197 
      break;
    {
      #line 1211 
      unsigned int tmp_3;
      #line 1198 
      skb_frag_t *frag = & ((struct skb_shared_info *)skb_end_pointer(skb))->frags[i];
      #line 1199 
      size = skb_frag_size(frag);
      #line 1200 
      if (size == 0U) 
                      #line 1201 
                      goto __Cont;
      #line 1203 
      while (size > 65535U) {
        #line 1204 
        unsigned int tmp_2;
        #line 1204 
        tmp_2 = bd_num;
        #line 1204 
        bd_num ++;
        #line 1204 
        *(bd_size + (unsigned long)tmp_2) = 65535U;
        #line 1205 
        size += 4294901761U;
        #line 1207 
        if (bd_num > 63U) 
                          #line 1208 
                          return bd_num;
      }
      #line 1211 
      tmp_3 = bd_num;
      #line 1211 
      bd_num ++;
      #line 1211 
      *(bd_size + (unsigned long)tmp_3) = size;
      #line 1212 
      if (bd_num > 63U) 
                        #line 1213 
                        return bd_num;
    }
    #line 1197 
    __Cont: 
            #line 1197 
    i ++;
  }
  #line 1216 
  return bd_num;
}

#line 1219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static unsigned int hns3_tx_bd_num(struct sk_buff *skb, unsigned int *bd_size)
{
  #line 1221 
  struct sk_buff *frag_skb;
  #line 1225 
  int tmp_2;
  #line 1222 
  unsigned int bd_num = 0U;
  #line 1225 
  if ((long)(skb->len <= 65535U) != 0L) {
    #line 1225 
    int tmp_1;
    #line 1225 
    if (skb_has_frag_list(skb)) 
                                #line 1225 
                                tmp_1 = 0; else 
                                                #line 1225 
                                                tmp_1 = 1;
    #line 1225 
    if ((long)tmp_1 != 0L) 
                           #line 1225 
                           tmp_2 = 1; else 
                                           #line 1225 
                                           tmp_2 = 0;
  }
  else 
       #line 1225 
       tmp_2 = 0;
  #line 1225 
  if (tmp_2 != 0) {
    #line 1225 
    ;
    #line 1225 
    if ((long)((unsigned int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags <= 7U) != 0L) {
      #line 1227 
      ;
      #line 1227 
      return (unsigned int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags + 1U;
    }
  }
  #line 1232 
  if ((long)(skb->len > 4128705U) != 0L) 
                                         #line 1234 
                                         return 64U;
  else {
    #line 1232 
    int tmp_6;
    #line 1232 
    int tmp_5;
    #line 1232 
    if (skb_is_gso(skb)) 
                         #line 1232 
                         tmp_5 = 0; else 
                                         #line 1232 
                                         tmp_5 = 1;
    #line 1232 
    if ((long)tmp_5 != 0L) 
      #line 1232 
      if ((long)(skb->len > 524280U) != 0L) 
                                            #line 1232 
                                            tmp_6 = 1; else 
                                                            #line 1232 
                                                            tmp_6 = 0;
    else 
         #line 1232 
         tmp_6 = 0;
    #line 1232 
    if (tmp_6 != 0) 
                    #line 1234 
                    return 64U;
  }
  #line 1236 
  bd_num = hns3_skb_bd_num(skb,bd_size,bd_num);
  #line 1238 
  if (skb_has_frag_list(skb)) {
    #line 1238 
    if (bd_num > 63U) 
                      #line 1239 
                      return bd_num;
  }
  else 
       #line 1239 
       return bd_num;
  #line 1241 
  frag_skb = ((struct skb_shared_info *)skb_end_pointer(skb))->frag_list;
  #line 1241 
  while (frag_skb != (struct sk_buff *)0) {
    #line 1242 
    bd_num = hns3_skb_bd_num(frag_skb,bd_size,bd_num);
    #line 1243 
    if (bd_num > 63U) 
                      #line 1244 
                      return bd_num;
    #line 1241 
    frag_skb = frag_skb->__anonCompField_sk_buff_87.__anonCompField___anonunion_487_86.next;
  }
  #line 1247 
  return bd_num;
}

#line 1250  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static unsigned int hns3_gso_hdr_len(struct sk_buff *skb)
{
  #line 1252 
  if ((unsigned int)skb->encapsulation == 0U) {
    #line 1253 
    return (unsigned int)skb_transport_offset(skb) + tcp_hdrlen(skb);
  }
  #line 1255 
  return (unsigned int)skb_inner_transport_offset(skb) + inner_tcp_hdrlen(skb);
}

#line 1263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static bool hns3_skb_need_linearized(struct sk_buff *skb, unsigned int *bd_size, unsigned int bd_num)
{
  #line 1267 
  int i;
  #line 1266 
  unsigned int tot_len = 0U;
  #line 1269 
  i = 0;
  #line 1269 
  while ((unsigned int)i <= 6U) {
    #line 1270 
    tot_len = *(bd_size + (unsigned long)i) + tot_len;
    #line 1269 
    i ++;
  }
  #line 1273 
  ;
  #line 1273 
  if (*(bd_size + 7U) + tot_len < (unsigned int)((struct skb_shared_info *)skb_end_pointer(skb))->gso_size + hns3_gso_hdr_len(skb)) 
    #line 1275 
    return (_Bool)1;
  #line 1280 
  i = 0;
  #line 1280 
  while (bd_num + 4294967288U > (unsigned int)i) {
    {
      #line 1281 
      tot_len -= *(bd_size + (unsigned long)i);
      #line 1282 
      tot_len = *(bd_size + (unsigned long)((unsigned int)i + 7U)) + tot_len;
      #line 1284 
      ;
      #line 1284 
      if ((unsigned int)((struct skb_shared_info *)skb_end_pointer(skb))->gso_size > tot_len) 
        #line 1285 
        return (_Bool)1;
    }
    #line 1280 
    i ++;
  }
  #line 1288 
  return (_Bool)0;
}

#line 1291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static int hns3_nic_maybe_stop_tx(struct hns3_enet_ring *ring, struct net_device *netdev, struct sk_buff *skb)
{
  #line 1296 
  unsigned int bd_size[64U];
  #line 1297 
  unsigned int bd_num;
  #line 1295 
  struct hns3_nic_priv *priv = netdev_priv(netdev);
  #line 1299 
  bd_num = hns3_tx_bd_num(skb,(unsigned int *)(& bd_size));
  #line 1300 
  if ((long)(bd_num > 8U) != 0L) {
    #line 1301 
    if (bd_num <= 63U) {
      #line 1301 
      if ((int)skb_is_gso(skb) != 0) {
        #line 1302 
        if (! hns3_skb_need_linearized(skb,(unsigned int *)(& bd_size),bd_num)) 
          #line 1303 
          goto out;
      }
    }
    #line 1305 
    if (__skb_linearize(skb) != 0) 
                                   #line 1306 
                                   return -12;
    #line 1308 
    bd_num = (skb->len + 65534U) / 65535U;
    #line 1309 
    if ((int)skb_is_gso(skb) != 0) {
      #line 1309 
      if (bd_num > 63U) 
                        #line 1312 
                        return -12; else 
                                         #line 1309 
                                         goto _LAND;
    }
    else {
      #line 1309 
      _LAND: 
      #line 1310 
      if (! skb_is_gso(skb)) 
        #line 1310 
        if (bd_num > 8U) 
                         #line 1312 
                         return -12;
    }
    #line 1314 
    u64_stats_init(& ring->syncp);
    #line 1315 
    (ring->stats.__anonCompField_ring_stats_225.__anonCompField___anonunion_1125_223.tx_copy) ++;
    #line 1316 
    u64_stats_init(& ring->syncp);
  }
  #line 1319 
  out: 
       #line 1319 
  ;
  #line 1320 
  ;
  #line 1320 
  if ((long)((unsigned int)ring_space(ring) >= bd_num) != 0L) 
                                                              #line 1321 
                                                              return (int)bd_num;
  #line 1323 
  netif_stop_subqueue(netdev,(unsigned short)((int)((unsigned short)ring->queue_index)));
  #line 1324 
  ldv_inline_asm();
  #line 1330 
  ;
  #line 1330 
  if ((unsigned int)ring_space(ring) >= bd_num) {
    #line 1330 
    if ((int)netif_carrier_ok(netdev) != 0) {
      #line 1331 
      if (! test_bit(3L,& priv->state)) {
        #line 1332 
        netif_start_subqueue(netdev,(unsigned short)((int)((unsigned short)ring->queue_index)));
        #line 1333 
        return (int)bd_num;
      }
    }
  }
  #line 1336 
  return -16;
}

#line 1339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static void hns3_clear_desc(struct hns3_enet_ring *ring, int next_to_use_orig)
{
  #line 1342 
  unsigned int i;
  #line 1341 
  struct device *dev = ring->dev;
  #line 1344 
  i = 0U;
  #line 1344 
  while ((unsigned int)ring->desc_num > i) {
    #line 1346 
    if (ring->next_to_use == next_to_use_orig) 
                                               #line 1347 
                                               break;
    #line 1350 
    ring->next_to_use = ((ring->next_to_use + -1) + (int)ring->desc_num) % (int)ring->desc_num;
    #line 1353 
    if ((unsigned int)(ring->desc_cb + (unsigned long)ring->next_to_use)->type == 0U) 
      #line 1354 
      dma_unmap_single_attrs(dev,(ring->desc_cb + (unsigned long)ring->next_to_use)->dma,(unsigned long)(ring->desc_cb + (unsigned long)ring->next_to_use)->length,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
    else 
      #line 1358 
      if ((ring->desc_cb + (unsigned long)ring->next_to_use)->length != 0U) 
        #line 1359 
        dma_unmap_page_attrs(dev,(ring->desc_cb + (unsigned long)ring->next_to_use)->dma,(unsigned long)(ring->desc_cb + (unsigned long)ring->next_to_use)->length,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
    #line 1364 
    (ring->desc_cb + (unsigned long)ring->next_to_use)->length = 0U;
    #line 1365 
    (ring->desc_cb + (unsigned long)ring->next_to_use)->dma = 0ULL;
    #line 1344 
    i ++;
  }
  #line 1367 
  return;
}

#line 1369  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static int hns3_fill_skb_to_desc(struct hns3_enet_ring *ring, struct sk_buff *skb, enum hns_desc_type type)
{
  #line 1373 
  int i;
  #line 1373 
  int ret;
  #line 1372 
  unsigned int size = skb_headlen(skb);
  #line 1373 
  int bd_num = 0;
  #line 1375 
  if (size != 0U) {
    #line 1376 
    ret = hns3_fill_desc(ring,(void *)skb,size,type);
    #line 1377 
    if ((long)(ret < 0) != 0L) 
                               #line 1378 
                               return ret;
    #line 1380 
    bd_num += ret;
  }
  #line 1383 
  i = 0;
  #line 1383 
  while (1) {
    #line 1383 
    ;
    #line 1383 
    if (! ((int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags > i)) 
      #line 1383 
      break;
    {
      #line 1384 
      skb_frag_t *frag = & ((struct skb_shared_info *)skb_end_pointer(skb))->frags[i];
      #line 1386 
      size = skb_frag_size(frag);
      #line 1387 
      if (size == 0U) 
                      #line 1388 
                      goto __Cont;
      #line 1390 
      ret = hns3_fill_desc(ring,(void *)frag,size,(enum hns_desc_type)DESC_TYPE_PAGE);
      #line 1391 
      if ((long)(ret < 0) != 0L) 
                                 #line 1392 
                                 return ret;
      #line 1394 
      bd_num += ret;
    }
    #line 1383 
    __Cont: 
            #line 1383 
    i ++;
  }
  #line 1397 
  return bd_num;
}

#line 1400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
netdev_tx_t hns3_nic_net_xmit(struct sk_buff *skb, struct net_device *netdev)
{
  #line 1404 
  struct netdev_queue *dev_queue;
  #line 1405 
  int pre_ntu;
  #line 1405 
  int next_to_use_head;
  #line 1406 
  struct sk_buff *frag_skb;
  #line 1408 
  int ret;
  #line 1402 
  struct hns3_nic_priv *priv = netdev_priv(netdev);
  #line 1403 
  struct hns3_enet_ring *ring = priv->ring + (unsigned long)skb->queue_mapping;
  #line 1407 
  int bd_num = 0;
  #line 1411 
  if (skb_put_padto(skb,33U) != 0) 
                                   #line 1412 
                                   return NETDEV_TX_OK;
  #line 1415 
  __builtin_prefetch((void const *)((void *)skb->data));
  #line 1417 
  ret = hns3_nic_maybe_stop_tx(ring,netdev,skb);
  #line 1418 
  if ((long)(ret <= 0) != 0L) {
    #line 1419 
    if (ret == -16) {
      #line 1420 
      u64_stats_init(& ring->syncp);
      #line 1421 
      (ring->stats.__anonCompField_ring_stats_225.__anonCompField___anonunion_1125_223.tx_busy) ++;
      #line 1422 
      u64_stats_init(& ring->syncp);
      #line 1423 
      return NETDEV_TX_BUSY;
    }
    else 
      #line 1424 
      if (ret == -12) {
        #line 1425 
        u64_stats_init(& ring->syncp);
        #line 1426 
        (ring->stats.sw_err_cnt) ++;
        #line 1427 
        u64_stats_init(& ring->syncp);
      }
    #line 1430 
    if (net_ratelimit() != 0) 
                              #line 1430 
                              netdev_err(netdev,(char *)"xmit error: %d!\n",ret);
    #line 1431 
    goto out_err_tx_ok;
  }
  #line 1434 
  next_to_use_head = ring->next_to_use;
  #line 1436 
  ret = hns3_fill_skb_to_desc(ring,skb,(enum hns_desc_type)DESC_TYPE_SKB);
  #line 1437 
  if ((long)(ret < 0) != 0L) 
                             #line 1438 
                             goto fill_err;
  #line 1440 
  bd_num += ret;
  #line 1442 
  if (! skb_has_frag_list(skb)) 
                                #line 1443 
                                goto out;
  #line 1445 
  frag_skb = ((struct skb_shared_info *)skb_end_pointer(skb))->frag_list;
  #line 1445 
  while (frag_skb != (struct sk_buff *)0) {
    #line 1446 
    ret = hns3_fill_skb_to_desc(ring,frag_skb,(enum hns_desc_type)DESC_TYPE_PAGE);
    #line 1447 
    if ((long)(ret < 0) != 0L) 
                               #line 1448 
                               goto fill_err;
    #line 1450 
    bd_num += ret;
    #line 1445 
    frag_skb = frag_skb->__anonCompField_sk_buff_87.__anonCompField___anonunion_487_86.next;
  }
  #line 1452 
  out: 
       #line 1452 
  ;
  #line 1453 
  if (ring->next_to_use != 0) 
                              #line 1453 
                              pre_ntu = ring->next_to_use + -1; else 
                                                                  #line 1453 
                                                                  pre_ntu = (int)ring->desc_num + -1;
  #line 1455 
  (ring->desc + (unsigned long)pre_ntu)->__anonCompField_hns3_desc_222.tx.bdtp_fe_sc_vld_ra_ri = (unsigned short)((unsigned int)(ring->desc + (unsigned long)pre_ntu)->__anonCompField_hns3_desc_222.tx.bdtp_fe_sc_vld_ra_ri | 16U);
  #line 1459 
  dev_queue = netdev_get_tx_queue(netdev,(unsigned int)ring->queue_index);
  #line 1460 
  netdev_tx_sent_queue(dev_queue,skb->len);
  #line 1461 
  ldv_inline_asm();
  #line 1464 
  writel((unsigned int)bd_num,(ring->tqp)->io_base + 88U);
  #line 1466 
  return NETDEV_TX_OK;
  #line 1468 
  fill_err: 
            #line 1468 
  ;
  #line 1469 
  hns3_clear_desc(ring,next_to_use_head);
  #line 1471 
  out_err_tx_ok: 
                 #line 1471 
  ;
  #line 1472 
  dev_kfree_skb_any(skb);
  #line 1473 
  return NETDEV_TX_OK;
}

#line 1476  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static int hns3_nic_net_set_mac_address(struct net_device *netdev, void *p)
{
  #line 1480 
  int ret;
  #line 1478 
  struct hnae3_handle *h = ((struct hns3_nic_priv *)netdev_priv(netdev))->ae_handle;
  #line 1479 
  struct sockaddr *mac_addr = (struct sockaddr *)p;
  #line 1482 
  if (mac_addr == (struct sockaddr *)0) 
                                        #line 1483 
                                        return -99;
  else {
    #line 1482 
    if (! is_valid_ether_addr((u8 *)(& mac_addr->sa_data))) 
                                                            #line 1483 
                                                            return -99;
  }
  #line 1485 
  if ((int)ether_addr_equal(netdev->dev_addr,(u8 *)(& mac_addr->sa_data)) != 0) {
    #line 1486 
    netdev_info(netdev,(char *)"already using mac address %pM\n",(char *)(& mac_addr->sa_data));
    #line 1488 
    return 0;
  }
  #line 1494 
  if (! hns3_is_phys_func(h->pdev)) {
    #line 1495 
    if (! is_zero_ether_addr((u8 *)(& netdev->perm_addr))) {
      #line 1496 
      netdev_err(netdev,(char *)"has permanent MAC %pM, user MAC %pM not allow\n",(unsigned char *)(& netdev->perm_addr),(char *)(& mac_addr->sa_data));
      #line 1498 
      return -1;
    }
  }
  #line 1501 
  ret = (*(((h->ae_algo)->ops)->set_mac_addr))(h,(void *)(& mac_addr->sa_data),(_Bool)0);
  #line 1502 
  if (ret != 0) {
    #line 1503 
    netdev_err(netdev,(char *)"set_mac_address fail, ret=%d!\n",ret);
    #line 1504 
    return ret;
  }
  #line 1507 
  ether_addr_copy(netdev->dev_addr,(u8 *)(& mac_addr->sa_data));
  #line 1509 
  return 0;
}

#line 1512  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static int hns3_nic_do_ioctl(struct net_device *netdev, struct ifreq *ifr, int cmd)
{
  #line 1515 
  struct hnae3_handle *h = ((struct hns3_nic_priv *)netdev_priv(netdev))->ae_handle;
  #line 1517 
  if (! netif_running(netdev)) 
                               #line 1518 
                               return -22;
  #line 1520 
  if (((h->ae_algo)->ops)->do_ioctl == (int (*)(struct hnae3_handle *, struct ifreq *, int ))0) 
    #line 1521 
    return -95;
  #line 1523 
  return (*(((h->ae_algo)->ops)->do_ioctl))(h,ifr,cmd);
}

#line 1526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static int hns3_nic_set_features(struct net_device *netdev, netdev_features_t features)
{
  #line 1532 
  bool enable;
  #line 1533 
  int ret;
  #line 1529 
  netdev_features_t changed = netdev->features ^ features;
  #line 1530 
  struct hns3_nic_priv *priv = netdev_priv(netdev);
  #line 1531 
  struct hnae3_handle *h = priv->ae_handle;
  #line 1535 
  if ((changed & 18014398509481984ULL) != 0ULL && ((h->ae_algo)->ops)->set_gro_en != (int (*)(struct hnae3_handle *, bool ))0) {
    #line 1536 
    enable = (_Bool)((features & 18014398509481984ULL) != 0ULL);
    #line 1537 
    ret = (*(((h->ae_algo)->ops)->set_gro_en))(h,(_Bool)((bool)((int)enable) != 0));
    #line 1538 
    if (ret != 0) 
                  #line 1539 
                  return ret;
  }
  #line 1542 
  if ((changed & 512ULL) != 0ULL && ((h->ae_algo)->ops)->enable_vlan_filter != (void (*)(struct hnae3_handle *, bool ))0) {
    #line 1544 
    enable = (_Bool)((features & 512ULL) != 0ULL);
    #line 1545 
    (*(((h->ae_algo)->ops)->enable_vlan_filter))(h,(_Bool)((bool)((int)enable) != 0));
  }
  #line 1548 
  if ((changed & 256ULL) != 0ULL && ((h->ae_algo)->ops)->enable_hw_strip_rxvtag != (int (*)(struct hnae3_handle *, bool ))0) {
    #line 1550 
    enable = (_Bool)((features & 256ULL) != 0ULL);
    #line 1551 
    ret = (*(((h->ae_algo)->ops)->enable_hw_strip_rxvtag))(h,(_Bool)((bool)((int)enable) != 0));
    #line 1552 
    if (ret != 0) 
                  #line 1553 
                  return ret;
  }
  #line 1556 
  if ((changed & 137438953472ULL) != 0ULL && ((h->ae_algo)->ops)->enable_fd != (void (*)(struct hnae3_handle *, bool ))0) {
    #line 1557 
    enable = (_Bool)((features & 137438953472ULL) != 0ULL);
    #line 1558 
    (*(((h->ae_algo)->ops)->enable_fd))(h,(_Bool)((bool)((int)enable) != 0));
  }
  #line 1561 
  netdev->features = features;
  #line 1562 
  return 0;
}

#line 1565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static void hns3_nic_get_stats64(struct net_device *netdev, struct rtnl_link_stats64 *stats)
{
  #line 1571 
  struct hns3_enet_ring *ring;
  #line 1575 
  unsigned int start;
  #line 1578 
  unsigned int idx;
  #line 1568 
  struct hns3_nic_priv *priv = netdev_priv(netdev);
  #line 1569 
  int queue_num = (int)(priv->ae_handle)->__anonCompField_hnae3_handle_215.kinfo.num_tqps;
  #line 1570 
  struct hnae3_handle *handle = priv->ae_handle;
  #line 1572 
  u64 rx_length_errors = 0ULL;
  #line 1573 
  u64 rx_crc_errors = 0ULL;
  #line 1574 
  u64 rx_multicast = 0ULL;
  #line 1576 
  u64 tx_errors = 0ULL;
  #line 1577 
  u64 rx_errors = 0ULL;
  #line 1579 
  u64 tx_bytes = 0ULL;
  #line 1580 
  u64 rx_bytes = 0ULL;
  #line 1581 
  u64 tx_pkts = 0ULL;
  #line 1582 
  u64 rx_pkts = 0ULL;
  #line 1583 
  u64 tx_drop = 0ULL;
  #line 1584 
  u64 rx_drop = 0ULL;
  #line 1586 
  if ((int)test_bit(3L,& priv->state) != 0) 
                                            #line 1587 
                                            return;
  #line 1589 
  (*(((handle->ae_algo)->ops)->update_stats))(handle,& netdev->stats);
  #line 1591 
  idx = 0U;
  #line 1591 
  while (idx < (unsigned int)queue_num) {
    #line 1593 
    ring = priv->ring + (unsigned long)idx;
    #line 1594 
    while (1) {
      #line 1595 
      start = u64_stats_fetch_begin_irq(& ring->syncp);
      #line 1596 
      tx_bytes = ring->stats.__anonCompField_ring_stats_225.__anonCompField___anonunion_1125_223.tx_bytes + tx_bytes;
      #line 1597 
      tx_pkts = ring->stats.__anonCompField_ring_stats_225.__anonCompField___anonunion_1125_223.tx_pkts + tx_pkts;
      #line 1598 
      tx_drop = ring->stats.sw_err_cnt + tx_drop;
      #line 1599 
      tx_drop = ring->stats.__anonCompField_ring_stats_225.__anonCompField___anonunion_1125_223.tx_vlan_err + tx_drop;
      #line 1600 
      tx_drop = ring->stats.__anonCompField_ring_stats_225.__anonCompField___anonunion_1125_223.tx_l4_proto_err + tx_drop;
      #line 1601 
      tx_drop = ring->stats.__anonCompField_ring_stats_225.__anonCompField___anonunion_1125_223.tx_l2l3l4_err + tx_drop;
      #line 1602 
      tx_drop = ring->stats.__anonCompField_ring_stats_225.__anonCompField___anonunion_1125_223.tx_tso_err + tx_drop;
      #line 1603 
      tx_errors = ring->stats.sw_err_cnt + tx_errors;
      #line 1604 
      tx_errors = ring->stats.__anonCompField_ring_stats_225.__anonCompField___anonunion_1125_223.tx_vlan_err + tx_errors;
      #line 1605 
      tx_errors = ring->stats.__anonCompField_ring_stats_225.__anonCompField___anonunion_1125_223.tx_l4_proto_err + tx_errors;
      #line 1606 
      tx_errors = ring->stats.__anonCompField_ring_stats_225.__anonCompField___anonunion_1125_223.tx_l2l3l4_err + tx_errors;
      #line 1607 
      tx_errors = ring->stats.__anonCompField_ring_stats_225.__anonCompField___anonunion_1125_223.tx_tso_err + tx_errors;
      #line 1608 
      if (! ((int)u64_stats_fetch_retry_irq(& ring->syncp,start) != 0)) 
        #line 1594 
        break;
    }
    #line 1611 
    ring = priv->ring + (unsigned long)(idx + (unsigned int)queue_num);
    #line 1612 
    while (1) {
      #line 1613 
      start = u64_stats_fetch_begin_irq(& ring->syncp);
      #line 1614 
      rx_bytes = ring->stats.__anonCompField_ring_stats_225.__anonCompField___anonunion_1125_224.rx_bytes + rx_bytes;
      #line 1615 
      rx_pkts = ring->stats.__anonCompField_ring_stats_225.__anonCompField___anonunion_1125_224.rx_pkts + rx_pkts;
      #line 1616 
      rx_drop = ring->stats.__anonCompField_ring_stats_225.__anonCompField___anonunion_1125_224.l2_err + rx_drop;
      #line 1617 
      rx_errors = ring->stats.__anonCompField_ring_stats_225.__anonCompField___anonunion_1125_224.l2_err + rx_errors;
      #line 1618 
      rx_errors = ring->stats.__anonCompField_ring_stats_225.__anonCompField___anonunion_1125_224.l3l4_csum_err + rx_errors;
      #line 1619 
      rx_crc_errors = ring->stats.__anonCompField_ring_stats_225.__anonCompField___anonunion_1125_224.l2_err + rx_crc_errors;
      #line 1620 
      rx_multicast = ring->stats.__anonCompField_ring_stats_225.__anonCompField___anonunion_1125_224.rx_multicast + rx_multicast;
      #line 1621 
      rx_length_errors = ring->stats.__anonCompField_ring_stats_225.__anonCompField___anonunion_1125_224.err_pkt_len + rx_length_errors;
      #line 1622 
      if (! ((int)u64_stats_fetch_retry_irq(& ring->syncp,start) != 0)) 
        #line 1612 
        break;
    }
    #line 1591 
    idx ++;
  }
  #line 1625 
  stats->tx_bytes = tx_bytes;
  #line 1626 
  stats->tx_packets = tx_pkts;
  #line 1627 
  stats->rx_bytes = rx_bytes;
  #line 1628 
  stats->rx_packets = rx_pkts;
  #line 1630 
  stats->rx_errors = rx_errors;
  #line 1631 
  stats->multicast = rx_multicast;
  #line 1632 
  stats->rx_length_errors = rx_length_errors;
  #line 1633 
  stats->rx_crc_errors = rx_crc_errors;
  #line 1634 
  stats->rx_missed_errors = (unsigned long long)netdev->stats.rx_missed_errors;
  #line 1636 
  stats->tx_errors = tx_errors;
  #line 1637 
  stats->rx_dropped = rx_drop;
  #line 1638 
  stats->tx_dropped = tx_drop;
  #line 1639 
  stats->collisions = (unsigned long long)netdev->stats.collisions;
  #line 1640 
  stats->rx_over_errors = (unsigned long long)netdev->stats.rx_over_errors;
  #line 1641 
  stats->rx_frame_errors = (unsigned long long)netdev->stats.rx_frame_errors;
  #line 1642 
  stats->rx_fifo_errors = (unsigned long long)netdev->stats.rx_fifo_errors;
  #line 1643 
  stats->tx_aborted_errors = (unsigned long long)netdev->stats.tx_aborted_errors;
  #line 1644 
  stats->tx_carrier_errors = (unsigned long long)netdev->stats.tx_carrier_errors;
  #line 1645 
  stats->tx_fifo_errors = (unsigned long long)netdev->stats.tx_fifo_errors;
  #line 1646 
  stats->tx_heartbeat_errors = (unsigned long long)netdev->stats.tx_heartbeat_errors;
  #line 1647 
  stats->tx_window_errors = (unsigned long long)netdev->stats.tx_window_errors;
  #line 1648 
  stats->rx_compressed = (unsigned long long)netdev->stats.rx_compressed;
  #line 1649 
  stats->tx_compressed = (unsigned long long)netdev->stats.tx_compressed;
  #line 1650 
  return;
}

#line 1652  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static int hns3_setup_tc(struct net_device *netdev, void *type_data)
{
  #line 1656 
  struct hnae3_knic_private_info *kinfo;
  #line 1660 
  struct hnae3_handle *h;
  #line 1678 
  int tmp_2;
  #line 1654 
  struct tc_mqprio_qopt_offload *mqprio_qopt = (struct tc_mqprio_qopt_offload *)type_data;
  #line 1655 
  u8 *prio_tc = (u8 *)(& mqprio_qopt->qopt.prio_tc_map);
  #line 1657 
  u8 tc = mqprio_qopt->qopt.num_tc;
  #line 1658 
  u16 mode = mqprio_qopt->mode;
  #line 1659 
  u8 hw = mqprio_qopt->qopt.hw;
  #line 1662 
  if (((unsigned int)hw != 1U || (unsigned int)mode != 1U) && ((unsigned int)hw != 0U || (unsigned int)tc != 0U)) 
    #line 1664 
    return -95;
  #line 1666 
  if ((unsigned int)tc > 8U) 
                             #line 1667 
                             return -22;
  #line 1669 
  if (netdev == (struct net_device *)0) 
                                        #line 1670 
                                        return -22;
  #line 1672 
  h = ((struct hns3_nic_priv *)netdev_priv(netdev))->ae_handle;
  #line 1673 
  kinfo = & h->__anonCompField_hnae3_handle_215.kinfo;
  #line 1675 
  if ((h->msg_enable & 1U) != 0U) {
    #line 1675 
    bool branch;
    #line 1675 
    struct _ddebug __UNIQUE_ID_ddebug566 = {.modname = (char *)"hns3", .function = (char *)"hns3_setup_tc", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c", .format = (char *)"setup tc: num_tc=%u\n", .lineno = (unsigned int)1675U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1675 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug566.key.dd_key_false.key,(_Bool)0);
    #line 1675 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 1675 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug566,netdev,(char *)"setup tc: num_tc=%u\n",(int)tc);
  }
  #line 1678 
  if (kinfo->dcb_ops != (struct hnae3_dcb_ops *)0 && (kinfo->dcb_ops)->setup_tc != (int (*)(struct hnae3_handle *, u8 , u8 *))0) 
    #line 1677 
    tmp_2 = (*((kinfo->dcb_ops)->setup_tc))(h,(unsigned char)((int)tc),prio_tc); else 
                                                                    #line 1678 
                                                                    tmp_2 = -95;
  #line 1678 
  return tmp_2;
}

#line 1681  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static int hns3_nic_setup_tc(struct net_device *dev, enum tc_setup_type type, void *type_data)
{
  #line 1684 
  if (type != (unsigned int)TC_SETUP_QDISC_MQPRIO) 
                                                   #line 1685 
                                                   return -95;
  #line 1687 
  return hns3_setup_tc(dev,type_data);
}

#line 1690  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static int hns3_vlan_rx_add_vid(struct net_device *netdev, __be16 proto, u16 vid)
{
  #line 1693 
  struct hnae3_handle *h = ((struct hns3_nic_priv *)netdev_priv(netdev))->ae_handle;
  #line 1694 
  int ret = -5;
  #line 1696 
  if (((h->ae_algo)->ops)->set_vlan_filter != (int (*)(struct hnae3_handle *, __be16 , u16 , bool ))0) 
    #line 1697 
    ret = (*(((h->ae_algo)->ops)->set_vlan_filter))(h,(unsigned short)((int)proto),(unsigned short)((int)vid),(_Bool)0);
  #line 1699 
  return ret;
}

#line 1702  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static int hns3_vlan_rx_kill_vid(struct net_device *netdev, __be16 proto, u16 vid)
{
  #line 1705 
  struct hnae3_handle *h = ((struct hns3_nic_priv *)netdev_priv(netdev))->ae_handle;
  #line 1706 
  int ret = -5;
  #line 1708 
  if (((h->ae_algo)->ops)->set_vlan_filter != (int (*)(struct hnae3_handle *, __be16 , u16 , bool ))0) 
    #line 1709 
    ret = (*(((h->ae_algo)->ops)->set_vlan_filter))(h,(unsigned short)((int)proto),(unsigned short)((int)vid),(_Bool)1);
  #line 1711 
  return ret;
}

#line 1714  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static int hns3_ndo_set_vf_vlan(struct net_device *netdev, int vf, u16 vlan, u8 qos, __be16 vlan_proto)
{
  #line 1717 
  struct hnae3_handle *h = ((struct hns3_nic_priv *)netdev_priv(netdev))->ae_handle;
  #line 1718 
  int ret = -5;
  #line 1720 
  if ((h->msg_enable & 1U) != 0U) {
    #line 1720 
    bool branch;
    #line 1720 
    struct _ddebug __UNIQUE_ID_ddebug567 = {.modname = (char *)"hns3", .function = (char *)"hns3_ndo_set_vf_vlan", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c", .format = (char *)"set vf vlan: vf=%d, vlan=%u, qos=%u, vlan_proto=0x%x\n", .lineno = (unsigned int)1720U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1720 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug567.key.dd_key_false.key,(_Bool)0);
    #line 1720 
    if ((long)((long)((int)branch != 0)) != 0L) {
      #line 1720 
      ;
      #line 1720 
      ;
      #line 1720 
      ;
      #line 1720 
      ;
      #line 1720 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug567,netdev,(char *)"set vf vlan: vf=%d, vlan=%u, qos=%u, vlan_proto=0x%x\n",vf,(int)vlan,(int)qos,(int)__builtin_bswap16((unsigned short)((int)vlan_proto)));
    }
  }
  #line 1724 
  if (((h->ae_algo)->ops)->set_vf_vlan_filter != (int (*)(struct hnae3_handle *, int , u16 , u8 , __be16 ))0) 
    #line 1725 
    ret = (*(((h->ae_algo)->ops)->set_vf_vlan_filter))(h,vf,(unsigned short)((int)vlan),(unsigned char)((int)qos),(unsigned short)((int)vlan_proto));
  #line 1728 
  return ret;
}

#line 1731  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static int hns3_set_vf_spoofchk(struct net_device *netdev, int vf, bool enable)
{
  #line 1733 
  struct hnae3_handle *handle = ((struct hns3_nic_priv *)netdev_priv(netdev))->ae_handle;
  #line 1735 
  if ((int)hns3_nic_resetting(netdev) != 0) 
                                            #line 1736 
                                            return -16;
  #line 1738 
  if (((handle->ae_algo)->ops)->set_vf_spoofchk == (int (*)(struct hnae3_handle *, int , bool ))0) 
    #line 1739 
    return -95;
  #line 1741 
  return (*(((handle->ae_algo)->ops)->set_vf_spoofchk))(handle,vf,
                                                       (_Bool)((bool)((int)enable) != 0));
}

#line 1744  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static int hns3_set_vf_trust(struct net_device *netdev, int vf, bool enable)
{
  #line 1746 
  struct hnae3_handle *handle = ((struct hns3_nic_priv *)netdev_priv(netdev))->ae_handle;
  #line 1748 
  if (((handle->ae_algo)->ops)->set_vf_trust == (int (*)(struct hnae3_handle *, int , bool ))0) 
    #line 1749 
    return -95;
  #line 1751 
  return (*(((handle->ae_algo)->ops)->set_vf_trust))(handle,vf,
                                                    (_Bool)((bool)((int)enable) != 0));
}

#line 1754  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static int hns3_nic_change_mtu(struct net_device *netdev, int new_mtu)
{
  #line 1757 
  int ret;
  #line 1756 
  struct hnae3_handle *h = ((struct hns3_nic_priv *)netdev_priv(netdev))->ae_handle;
  #line 1759 
  if ((int)hns3_nic_resetting(netdev) != 0) 
                                            #line 1760 
                                            return -16;
  #line 1762 
  if (((h->ae_algo)->ops)->set_mtu == (int (*)(struct hnae3_handle *, int ))0) 
    #line 1763 
    return -95;
  #line 1765 
  if ((h->msg_enable & 1U) != 0U) {
    #line 1765 
    bool branch;
    #line 1765 
    struct _ddebug __UNIQUE_ID_ddebug568 = {.modname = (char *)"hns3", .function = (char *)"hns3_nic_change_mtu", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c", .format = (char *)"change mtu from %u to %d\n", .lineno = (unsigned int)1765U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1765 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug568.key.dd_key_false.key,(_Bool)0);
    #line 1765 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 1765 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug568,netdev,(char *)"change mtu from %u to %d\n",netdev->mtu,new_mtu);
  }
  #line 1768 
  ret = (*(((h->ae_algo)->ops)->set_mtu))(h,new_mtu);
  #line 1769 
  if (ret != 0) 
                #line 1770 
                netdev_err(netdev,(char *)"failed to change MTU in hardware %d\n",ret); else 
                                                                    #line 1773 
                                                                    netdev->mtu = (unsigned int)new_mtu;
  #line 1775 
  return ret;
}

#line 1778  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static bool hns3_get_tx_timeo_queue_info(struct net_device *ndev)
{
  #line 1782 
  struct hns3_enet_ring *tx_ring;
  #line 1783 
  struct napi_struct *napi;
  #line 1785 
  int hw_head;
  #line 1785 
  int hw_tail;
  #line 1786 
  int fbd_num;
  #line 1786 
  int fbd_oft;
  #line 1787 
  int ebd_num;
  #line 1787 
  int ebd_oft;
  #line 1788 
  int bd_num;
  #line 1788 
  int bd_err;
  #line 1789 
  int ring_en;
  #line 1789 
  int tc;
  #line 1790 
  int i;
  #line 1780 
  struct hns3_nic_priv *priv = netdev_priv(ndev);
  #line 1781 
  struct hnae3_handle *h = ((struct hns3_nic_priv *)netdev_priv(ndev))->ae_handle;
  #line 1784 
  int timeout_queue = 0;
  #line 1793 
  i = 0;
  #line 1793 
  while (ndev->num_tx_queues > (unsigned int)i) {
    {
      #line 1794 
      struct netdev_queue *q;
      #line 1795 
      unsigned long trans_start;
      #line 1797 
      q = netdev_get_tx_queue(ndev,(unsigned int)i);
      #line 1798 
      trans_start = q->trans_start;
      {
        #line 1800 
        unsigned long __dummy;
        #line 1800 
        unsigned long __dummy2;
        }
      #line 1799 
      if (1 != 0) {
        {
          #line 1800 
          unsigned long __dummy_0;
          #line 1800 
          unsigned long __dummy2_0;
          }
        #line 1800 
        if (1 != 0) 
          #line 1800 
          if ((long)(((unsigned long)ndev->watchdog_timeo + trans_start) - jiffies) < 0L) {
            #line 1799 
            if ((int)netif_xmit_stopped(q) != 0) {
              #line 1802 
              timeout_queue = i;
              #line 1803 
              ;
              #line 1803 
              ;
              #line 1803 
              netdev_info(ndev,(char *)"queue state: 0x%lx, delta msecs: %u\n",q->state,jiffies_to_msecs(jiffies - trans_start));
              #line 1806 
              break;
            }
          }
      }
    }
    #line 1793 
    i ++;
  }
  #line 1810 
  if (ndev->num_tx_queues == (unsigned int)i) {
    #line 1811 
    netdev_info(ndev,(char *)"no netdev TX timeout queue found, timeout count: %llu\n",priv->tx_timeout_count);
    #line 1814 
    return (_Bool)0;
  }
  #line 1817 
  (priv->tx_timeout_count) ++;
  #line 1819 
  tx_ring = priv->ring + (unsigned long)timeout_queue;
  #line 1820 
  napi = & (tx_ring->tqp_vector)->napi;
  #line 1822 
  netdev_info(ndev,(char *)"tx_timeout count: %llu, queue id: %d, SW_NTU: 0x%x, SW_NTC: 0x%x, napi state: %lu\n",priv->tx_timeout_count,timeout_queue,tx_ring->next_to_use,tx_ring->next_to_clean,napi->state);
  #line 1827 
  netdev_info(ndev,(char *)"tx_pkts: %llu, tx_bytes: %llu, io_err_cnt: %llu, sw_err_cnt: %llu\n",tx_ring->stats.__anonCompField_ring_stats_225.__anonCompField___anonunion_1125_223.tx_pkts,tx_ring->stats.__anonCompField_ring_stats_225.__anonCompField___anonunion_1125_223.tx_bytes,tx_ring->stats.io_err_cnt,tx_ring->stats.sw_err_cnt);
  #line 1832 
  netdev_info(ndev,(char *)"seg_pkt_cnt: %llu, tx_err_cnt: %llu, restart_queue: %llu, tx_busy: %llu\n",tx_ring->stats.seg_pkt_cnt,tx_ring->stats.__anonCompField_ring_stats_225.__anonCompField___anonunion_1125_223.tx_err_cnt,tx_ring->stats.__anonCompField_ring_stats_225.__anonCompField___anonunion_1125_223.restart_queue,tx_ring->stats.__anonCompField_ring_stats_225.__anonCompField___anonunion_1125_223.tx_busy);
  #line 1840 
  if (((h->ae_algo)->ops)->get_mac_stats != (void (*)(struct hnae3_handle *, struct hns3_mac_stats *))0) {
    #line 1841 
    struct hns3_mac_stats mac_stats;
    #line 1843 
    (*(((h->ae_algo)->ops)->get_mac_stats))(h,& mac_stats);
    #line 1844 
    netdev_info(ndev,(char *)"tx_pause_cnt: %llu, rx_pause_cnt: %llu\n",mac_stats.tx_pause_cnt,mac_stats.rx_pause_cnt);
  }
  #line 1848 
  hw_head = (int)readl((tx_ring->tqp)->io_base + 92U);
  #line 1850 
  hw_tail = (int)readl((tx_ring->tqp)->io_base + 88U);
  #line 1852 
  fbd_num = (int)readl((tx_ring->tqp)->io_base + 96U);
  #line 1854 
  fbd_oft = (int)readl((tx_ring->tqp)->io_base + 100U);
  #line 1856 
  ebd_num = (int)readl((tx_ring->tqp)->io_base + 104U);
  #line 1858 
  ebd_oft = (int)readl((tx_ring->tqp)->io_base + 112U);
  #line 1860 
  bd_num = (int)readl((tx_ring->tqp)->io_base + 72U);
  #line 1862 
  bd_err = (int)readl((tx_ring->tqp)->io_base + 116U);
  #line 1864 
  ring_en = (int)readl((tx_ring->tqp)->io_base + 144U);
  #line 1865 
  tc = (int)readl((tx_ring->tqp)->io_base + 80U);
  #line 1867 
  ;
  #line 1867 
  ;
  #line 1867 
  ;
  #line 1867 
  ;
  #line 1867 
  ;
  #line 1867 
  netdev_info(ndev,(char *)"BD_NUM: 0x%x HW_HEAD: 0x%x, HW_TAIL: 0x%x, BD_ERR: 0x%x, INT: 0x%x\n",bd_num,hw_head,hw_tail,bd_err,readl((void *)(tx_ring->tqp_vector)->mask_addr));
  #line 1871 
  netdev_info(ndev,(char *)"RING_EN: 0x%x, TC: 0x%x, FBD_NUM: 0x%x FBD_OFT: 0x%x, EBD_NUM: 0x%x, EBD_OFT: 0x%x\n",ring_en,tc,fbd_num,fbd_oft,ebd_num,ebd_oft);
  #line 1875 
  return (_Bool)1;
}

#line 1878  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static void hns3_nic_net_timeout(struct net_device *ndev)
{
  #line 1880 
  struct hns3_nic_priv *priv = netdev_priv(ndev);
  #line 1881 
  struct hnae3_handle *h = priv->ae_handle;
  #line 1883 
  if (! hns3_get_tx_timeo_queue_info(ndev)) 
                                            #line 1884 
                                            return;
  #line 1889 
  if (((h->ae_algo)->ops)->reset_event != (void (*)(struct pci_dev *, struct hnae3_handle *))0) 
    #line 1890 
    (*(((h->ae_algo)->ops)->reset_event))(h->pdev,h);
  #line 1891 
  return;
}

#line 1894  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static int hns3_rx_flow_steer(struct net_device *dev, struct sk_buff *skb, u16 rxq_index, u32 flow_id)
{
  #line 1898 
  struct flow_keys fkeys;
  #line 1897 
  struct hnae3_handle *h = ((struct hns3_nic_priv *)netdev_priv(dev))->ae_handle;
  #line 1900 
  if (((h->ae_algo)->ops)->add_arfs_entry == (int (*)(struct hnae3_handle *, u16 , u16 , struct flow_keys *))0) 
    #line 1901 
    return -95;
  #line 1903 
  if ((unsigned int)skb->encapsulation != 0U) 
                                              #line 1904 
                                              return -93;
  #line 1906 
  if (! skb_flow_dissect_flow_keys(skb,& fkeys,0U)) 
                                                    #line 1907 
                                                    return -93;
  #line 1909 
  if ((unsigned int)fkeys.basic.n_proto != 8U && (unsigned int)fkeys.basic.n_proto != 56710U || (unsigned int)fkeys.basic.ip_proto != 6U && (unsigned int)fkeys.basic.ip_proto != 17U) 
    #line 1913 
    return -93;
  #line 1915 
  return (*(((h->ae_algo)->ops)->add_arfs_entry))(h,
                                                 (unsigned short)((int)rxq_index),
                                                 (unsigned short)((int)((unsigned short)flow_id)),
                                                 & fkeys);
}

#line 1919  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static int hns3_nic_get_vf_config(struct net_device *ndev, int vf, struct ifla_vf_info *ivf)
{
  #line 1922 
  struct hnae3_handle *h = ((struct hns3_nic_priv *)netdev_priv(ndev))->ae_handle;
  #line 1924 
  if (((h->ae_algo)->ops)->get_vf_config == (int (*)(struct hnae3_handle *, int , struct ifla_vf_info *))0) 
    #line 1925 
    return -95;
  #line 1927 
  return (*(((h->ae_algo)->ops)->get_vf_config))(h,vf,ivf);
}

#line 1930  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static int hns3_nic_set_vf_link_state(struct net_device *ndev, int vf, int link_state)
{
  #line 1933 
  struct hnae3_handle *h = ((struct hns3_nic_priv *)netdev_priv(ndev))->ae_handle;
  #line 1935 
  if (((h->ae_algo)->ops)->set_vf_link_state == (int (*)(struct hnae3_handle *, int , int ))0) 
    #line 1936 
    return -95;
  #line 1938 
  return (*(((h->ae_algo)->ops)->set_vf_link_state))(h,vf,link_state);
}

#line 1941  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static int hns3_nic_set_vf_rate(struct net_device *ndev, int vf, int min_tx_rate, int max_tx_rate)
{
  #line 1944 
  struct hnae3_handle *h = ((struct hns3_nic_priv *)netdev_priv(ndev))->ae_handle;
  #line 1946 
  if (((h->ae_algo)->ops)->set_vf_rate == (int (*)(struct hnae3_handle *, int , int , int , bool ))0) 
    #line 1947 
    return -95;
  #line 1949 
  return (*(((h->ae_algo)->ops)->set_vf_rate))(h,vf,min_tx_rate,max_tx_rate,
                                              (_Bool)0);
}

#line 1953  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static int hns3_nic_set_vf_mac(struct net_device *netdev, int vf_id, u8 *mac)
{
  #line 1955 
  struct hnae3_handle *h = ((struct hns3_nic_priv *)netdev_priv(netdev))->ae_handle;
  #line 1957 
  if (((h->ae_algo)->ops)->set_vf_mac == (int (*)(struct hnae3_handle *, int , u8 *))0) 
    #line 1958 
    return -95;
  #line 1960 
  if ((int)is_multicast_ether_addr(mac) != 0) {
    #line 1961 
    netdev_err(netdev,(char *)"Invalid MAC:%pM specified. Could not set MAC\n",mac);
    #line 1964 
    return -22;
  }
  #line 1967 
  return (*(((h->ae_algo)->ops)->set_vf_mac))(h,vf_id,mac);
}

#line 1970  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static struct net_device_ops hns3_nic_netdev_ops = {.ndo_open = & hns3_nic_net_open, .ndo_stop = & hns3_nic_net_stop, .ndo_start_xmit = & hns3_nic_net_xmit, .ndo_set_rx_mode = & hns3_nic_set_rx_mode, .ndo_set_mac_address = & hns3_nic_net_set_mac_address, .ndo_do_ioctl = & hns3_nic_do_ioctl, .ndo_change_mtu = & hns3_nic_change_mtu, .ndo_tx_timeout = & hns3_nic_net_timeout, .ndo_get_stats64 = & hns3_nic_get_stats64, .ndo_vlan_rx_add_vid = & hns3_vlan_rx_add_vid, .ndo_vlan_rx_kill_vid = & hns3_vlan_rx_kill_vid, .ndo_set_vf_mac = & hns3_nic_set_vf_mac, .ndo_set_vf_vlan = & hns3_ndo_set_vf_vlan, .ndo_set_vf_rate = & hns3_nic_set_vf_rate, .ndo_set_vf_spoofchk = & hns3_set_vf_spoofchk, .ndo_set_vf_trust = & hns3_set_vf_trust, .ndo_get_vf_config = & hns3_nic_get_vf_config, .ndo_set_vf_link_state = & hns3_nic_set_vf_link_state, .ndo_setup_tc = & hns3_nic_setup_tc, .ndo_rx_flow_steer = & hns3_rx_flow_steer, .ndo_set_features = & hns3_nic_set_features};
#line 1996  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
bool hns3_is_phys_func(struct pci_dev *pdev)
{
  #line 1998 
  u32 dev_id = (unsigned int)pdev->device;
  #line 2000 
  switch (dev_id) {
    #line 2001 
    case (u32)41504: 
                     #line 2001 
    ;
    #line 2002 
    case (u32)41505: 
                     #line 2002 
    ;
    #line 2003 
    case (u32)41506: 
                     #line 2003 
    ;
    #line 2004 
    case (u32)41507: 
                     #line 2004 
    ;
    #line 2005 
    case (u32)41508: 
                     #line 2005 
    ;
    #line 2006 
    case (u32)41509: 
                     #line 2006 
    ;
    #line 2007 
    case (u32)41510: 
                     #line 2007 
    ;
    #line 2008 
    return (_Bool)1;
    #line 2009 
    case (u32)41518: 
                     #line 2009 
    ;
    #line 2010 
    case (u32)41519: 
                     #line 2010 
    ;
    #line 2011 
    return (_Bool)0;
    #line 2012 
    default: 
             #line 2012 
    ;
    #line 2013 
    _dev_warn(& pdev->dev,(char *)"un-recognized pci device-id %u",dev_id);
  }
  #line 2017 
  return (_Bool)0;
}

#line 2020  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static void hns3_disable_sriov(struct pci_dev *pdev)
{
  #line 2026 
  if (pci_vfs_assigned(pdev) != 0) {
    #line 2027 
    _dev_warn(& pdev->dev,(char *)"disabling driver while VFs are assigned\n");
    #line 2029 
    return;
  }
  #line 2032 
  pci_disable_sriov(pdev);
  #line 2033 
  return;
}

#line 2035  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static void hns3_get_dev_capability(struct pci_dev *pdev, struct hnae3_ae_dev *ae_dev)
{
  #line 2038 
  if ((unsigned int)pdev->revision > 32U) {
    #line 2039 
    ae_dev->flag &= 4294967231U;
    #line 2039 
    ae_dev->flag |= 64U;
    #line 2040 
    ae_dev->flag &= 4294967167U;
    #line 2040 
    ae_dev->flag |= 128U;
  }
  #line 2043 
  return;
}

#line 2054  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static int hns3_probe(struct pci_dev *pdev, struct pci_device_id *ent)
{
  #line 2056 
  struct hnae3_ae_dev *ae_dev;
  #line 2057 
  int ret;
  #line 2059 
  ae_dev = (struct hnae3_ae_dev *)cif_devm_kzalloc(& pdev->dev,64UL,3264U);
  #line 2060 
  if (ae_dev == (struct hnae3_ae_dev *)0) {
    #line 2061 
    ret = -12;
    #line 2062 
    return ret;
  }
  #line 2065 
  ae_dev->pdev = pdev;
  #line 2066 
  ae_dev->flag = (unsigned int)ent->driver_data;
  #line 2067 
  ae_dev->reset_type = HNAE3_NONE_RESET;
  #line 2068 
  hns3_get_dev_capability(pdev,ae_dev);
  #line 2069 
  pci_set_drvdata(pdev,(void *)ae_dev);
  #line 2071 
  ret = hnae3_register_ae_dev(ae_dev);
  #line 2072 
  if (ret != 0) {
    #line 2073 
    devm_kfree(& pdev->dev,(void *)ae_dev);
    #line 2074 
    pci_set_drvdata(pdev,(void *)0);
  }
  #line 2077 
  return ret;
}

#line 2083  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static void hns3_remove(struct pci_dev *pdev)
{
  #line 2085 
  struct hnae3_ae_dev *ae_dev = pci_get_drvdata(pdev);
  #line 2087 
  if ((int)hns3_is_phys_func(pdev) != 0) 
                                         #line 2088 
                                         hns3_disable_sriov(pdev);
  #line 2090 
  hnae3_unregister_ae_dev(ae_dev);
  #line 2091 
  pci_set_drvdata(pdev,(void *)0);
  #line 2092 
  return;
}

#line 2102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static int hns3_pci_sriov_configure(struct pci_dev *pdev, int num_vfs)
{
  #line 2104 
  int ret;
  #line 2106 
  if (hns3_is_phys_func(pdev)) {
    #line 2106 
    if (0) {
      #line 2106 
      _LOR: {
              #line 2107 
              _dev_warn(& pdev->dev,(char *)"Can not config SRIOV\n");
              #line 2108 
              return -22;
            }
    }
  }
  else 
       #line 2106 
       goto _LOR;
  #line 2111 
  if (num_vfs != 0) {
    #line 2112 
    ret = pci_enable_sriov(pdev,num_vfs);
    #line 2113 
    if (ret != 0) 
                  #line 2114 
                  _dev_err(& pdev->dev,(char *)"SRIOV enable failed %d\n",ret); else 
                                                                    #line 2116 
                                                                    return num_vfs;
  }
  else {
    #line 2117 
    if (pci_vfs_assigned(pdev) == 0) 
                                     #line 2118 
                                     pci_disable_sriov(pdev); else 
                                                                   #line 2120 
                                                                   _dev_warn(& pdev->dev,(char *)"Unable to free VFs because some are assigned to VMs.\n");
  }
  #line 2124 
  return 0;
}

#line 2127  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static void hns3_shutdown(struct pci_dev *pdev)
{
  #line 2129 
  struct hnae3_ae_dev *ae_dev = pci_get_drvdata(pdev);
  #line 2131 
  hnae3_unregister_ae_dev(ae_dev);
  #line 2132 
  devm_kfree(& pdev->dev,(void *)ae_dev);
  #line 2133 
  pci_set_drvdata(pdev,(void *)0);
  #line 2135 
  if (system_state == (unsigned int)SYSTEM_POWER_OFF) 
                                                      #line 2136 
                                                      pci_set_power_state(pdev,3);
  #line 2137 
  return;
}

#line 2139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static pci_ers_result_t hns3_error_detected(struct pci_dev *pdev, pci_channel_state_t state)
{
  #line 2143 
  pci_ers_result_t ret;
  #line 2142 
  struct hnae3_ae_dev *ae_dev = pci_get_drvdata(pdev);
  #line 2145 
  _dev_info(& pdev->dev,(char *)"PCI error detected, state(=%d)!!\n",state);
  #line 2147 
  if (state == 3U) 
                   #line 2148 
                   return 4U;
  #line 2150 
  if (ae_dev == (struct hnae3_ae_dev *)0 || ae_dev->ops == (struct hnae3_ae_ops *)0) {
    #line 2151 
    _dev_err(& pdev->dev,(char *)"Can\'t recover - error happened before device initialized\n");
    #line 2153 
    return 1U;
  }
  #line 2156 
  if ((ae_dev->ops)->handle_hw_ras_error != (pci_ers_result_t (*)(struct hnae3_ae_dev *))0) 
    #line 2157 
    ret = (*((ae_dev->ops)->handle_hw_ras_error))(ae_dev); else 
                                                                #line 2159 
                                                                return 1U;
  #line 2161 
  return ret;
}

#line 2164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static pci_ers_result_t hns3_slot_reset(struct pci_dev *pdev)
{
  #line 2167 
  struct hnae3_ae_ops *ops;
  #line 2168 
  enum hnae3_reset_type reset_type;
  #line 2166 
  struct hnae3_ae_dev *ae_dev = pci_get_drvdata(pdev);
  #line 2169 
  struct device *dev = & pdev->dev;
  #line 2171 
  if (ae_dev == (struct hnae3_ae_dev *)0 || ae_dev->ops == (struct hnae3_ae_ops *)0) 
    #line 2172 
    return 1U;
  #line 2174 
  ops = ae_dev->ops;
  #line 2176 
  if ((ops->reset_event != (void (*)(struct pci_dev *, struct hnae3_handle *))0 && ops->get_reset_level != (enum hnae3_reset_type (*)(struct hnae3_ae_dev *, unsigned long *))0) && ops->set_default_reset_request != (void (*)(struct hnae3_ae_dev *, enum hnae3_reset_type ))0) {
    #line 2178 
    if (ae_dev->hw_err_reset_req != 0UL) {
      #line 2179 
      reset_type = (*(ops->get_reset_level))(ae_dev,& ae_dev->hw_err_reset_req);
      #line 2181 
      (*(ops->set_default_reset_request))(ae_dev,reset_type);
      #line 2182 
      _dev_info(dev,(char *)"requesting reset due to PCI error\n");
      #line 2183 
      (*(ops->reset_event))(pdev,(struct hnae3_handle *)0);
    }
    #line 2186 
    return 5U;
  }
  #line 2189 
  return 4U;
}

#line 2192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static void hns3_reset_prepare(struct pci_dev *pdev)
{
  #line 2194 
  struct hnae3_ae_dev *ae_dev = pci_get_drvdata(pdev);
  #line 2196 
  _dev_info(& pdev->dev,(char *)"hns3 flr prepare\n");
  #line 2197 
  if ((ae_dev != (struct hnae3_ae_dev *)0 && ae_dev->ops != (struct hnae3_ae_ops *)0) && (ae_dev->ops)->flr_prepare != (void (*)(struct hnae3_ae_dev *))0) 
    #line 2198 
    (*((ae_dev->ops)->flr_prepare))(ae_dev);
  #line 2199 
  return;
}

#line 2201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static void hns3_reset_done(struct pci_dev *pdev)
{
  #line 2203 
  struct hnae3_ae_dev *ae_dev = pci_get_drvdata(pdev);
  #line 2205 
  _dev_info(& pdev->dev,(char *)"hns3 flr done\n");
  #line 2206 
  if ((ae_dev != (struct hnae3_ae_dev *)0 && ae_dev->ops != (struct hnae3_ae_ops *)0) && (ae_dev->ops)->flr_done != (void (*)(struct hnae3_ae_dev *))0) 
    #line 2207 
    (*((ae_dev->ops)->flr_done))(ae_dev);
  #line 2208 
  return;
}

#line 2210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static struct pci_error_handlers hns3_err_handler = {.error_detected = (pci_ers_result_t (*)(struct pci_dev *, enum pci_channel_state ))(& hns3_error_detected), .slot_reset = & hns3_slot_reset, .reset_prepare = & hns3_reset_prepare, .reset_done = & hns3_reset_done};
#line 2217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static struct pci_driver hns3_driver = {.name = (char *)(& hns3_driver_name), .id_table = (struct pci_device_id *)(& hns3_pci_tbl), .probe = & hns3_probe, .remove = & hns3_remove, .shutdown = & hns3_shutdown, .sriov_configure = & hns3_pci_sriov_configure, .err_handler = & hns3_err_handler};
#line 2228  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static void hns3_set_default_feature(struct net_device *netdev)
{
  #line 2230 
  struct hnae3_handle *h = ((struct hns3_nic_priv *)netdev_priv(netdev))->ae_handle;
  #line 2231 
  struct pci_dev *pdev = h->pdev;
  #line 2233 
  netdev->priv_flags |= 4096U;
  #line 2235 
  netdev->hw_enc_features |= 584331118675ULL;
  #line 2242 
  netdev->gso_partial_features |= 8388608ULL;
  #line 2244 
  netdev->features |= 584330595283ULL;
  #line 2253 
  netdev->vlan_features |= 584330594387ULL;
  #line 2261 
  netdev->hw_features |= 584330594771ULL;
  #line 2269 
  if ((unsigned int)pdev->revision > 32U) {
    #line 2270 
    netdev->hw_features |= 18014398509481984ULL;
    #line 2271 
    netdev->features |= 18014398509481984ULL;
    #line 2273 
    if ((h->flags & 8ULL) == 0ULL) {
      #line 2274 
      netdev->hw_features |= 137438953472ULL;
      #line 2275 
      netdev->features |= 137438953472ULL;
    }
  }
  #line 2278 
  return;
}

#line 2280  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static int hns3_alloc_buffer(struct hns3_enet_ring *ring, struct hns3_desc_cb *cb)
{
  #line 2284 
  struct page *p;
  #line 2283 
  unsigned int order = hns3_page_order(ring);
  #line 2286 
  p = dev_alloc_pages(order);
  #line 2287 
  if (p == (struct page *)0) 
                             #line 2288 
                             return -12;
  #line 2290 
  cb->priv = (void *)p;
  #line 2291 
  cb->page_offset = 0U;
  #line 2292 
  cb->reuse_flag = (unsigned short)0U;
  #line 2293 
  cb->buf = lowmem_page_address(p);
  #line 2294 
  cb->length = (unsigned int)(4096UL << hns3_page_order(ring));
  #line 2295 
  cb->type = (unsigned short)1U;
  #line 2297 
  return 0;
}

#line 2300  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static void hns3_free_buffer(struct hns3_enet_ring *ring, struct hns3_desc_cb *cb)
{
  #line 2303 
  if ((unsigned int)cb->type == 0U) 
                                    #line 2304 
                                    dev_kfree_skb_any((struct sk_buff *)cb->priv);
  else 
    #line 2305 
    if ((ring->flag & 1U) != 0U) 
                                 #line 2306 
                                 put_page((struct page *)cb->priv);
  #line 2307 
  memset((void *)cb,0,40UL);
  #line 2308 
  return;
}

#line 2310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static int hns3_map_buffer(struct hns3_enet_ring *ring, struct hns3_desc_cb *cb)
{
  #line 2312 
  int tmp;
  #line 2312 
  if ((ring->flag & 1U) == 0U) 
                               #line 2312 
                               tmp = DMA_TO_DEVICE; else 
                                                         #line 2312 
                                                         tmp = DMA_FROM_DEVICE;
  #line 2312 
  ;
  #line 2312 
  ;
  #line 2312 
  ;
  #line 2312 
  cb->dma = dma_map_page_attrs(ring->dev,(struct page *)cb->priv,0UL,(unsigned long)cb->length,(enum dma_data_direction)tmp,0UL);
  #line 2315 
  if ((long)(dma_mapping_error(ring->dev,cb->dma) != 0) != 0L) 
                                                               #line 2316 
                                                               return -5;
  #line 2318 
  return 0;
}

#line 2321  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static void hns3_unmap_buffer(struct hns3_enet_ring *ring, struct hns3_desc_cb *cb)
{
  #line 2324 
  if ((unsigned int)cb->type == 0U) {
    #line 2325 
    int tmp;
    #line 2325 
    if ((ring->flag & 1U) == 0U) 
                                 #line 2325 
                                 tmp = DMA_TO_DEVICE; else 
                                                           #line 2325 
                                                           tmp = DMA_FROM_DEVICE;
    #line 2325 
    ;
    #line 2325 
    ;
    #line 2325 
    ;
    #line 2325 
    dma_unmap_single_attrs(ring->dev,cb->dma,(unsigned long)cb->length,(enum dma_data_direction)tmp,0UL);
  }
  else 
    #line 2327 
    if (cb->length != 0U) {
      #line 2328 
      int tmp_0;
      #line 2328 
      if ((ring->flag & 1U) == 0U) 
                                   #line 2328 
                                   tmp_0 = DMA_TO_DEVICE; else 
                                                               #line 2328 
                                                               tmp_0 = DMA_FROM_DEVICE;
      #line 2328 
      ;
      #line 2328 
      ;
      #line 2328 
      ;
      #line 2328 
      dma_unmap_page_attrs(ring->dev,cb->dma,(unsigned long)cb->length,(enum dma_data_direction)tmp_0,0UL);
    }
  #line 2329 
  return;
}

#line 2332  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static void hns3_buffer_detach(struct hns3_enet_ring *ring, int i)
{
  #line 2334 
  hns3_unmap_buffer(ring,ring->desc_cb + (unsigned long)i);
  #line 2335 
  (ring->desc + (unsigned long)i)->addr = 0ULL;
  #line 2336 
  return;
}

#line 2338  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static void hns3_free_buffer_detach(struct hns3_enet_ring *ring, int i)
{
  #line 2340 
  struct hns3_desc_cb *cb = ring->desc_cb + (unsigned long)i;
  #line 2342 
  if ((ring->desc_cb + (unsigned long)i)->dma == 0ULL) 
                                                       #line 2343 
                                                       return;
  #line 2345 
  hns3_buffer_detach(ring,i);
  #line 2346 
  hns3_free_buffer(ring,cb);
  #line 2347 
  return;
}

#line 2349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static void hns3_free_buffers(struct hns3_enet_ring *ring)
{
  #line 2351 
  int i;
  #line 2353 
  i = 0;
  #line 2353 
  while ((int)ring->desc_num > i) {
    #line 2354 
    hns3_free_buffer_detach(ring,i);
    #line 2353 
    i ++;
  }
  #line 2355 
  return;
}

#line 2358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static void hns3_free_desc(struct hns3_enet_ring *ring)
{
  #line 2360 
  int size = (int)((unsigned int)ring->desc_num * 32U);
  #line 2362 
  hns3_free_buffers(ring);
  #line 2364 
  if (ring->desc != (struct hns3_desc *)0) {
    #line 2365 
    dma_free_coherent(ring->dev,(unsigned long)size,(void *)ring->desc,ring->desc_dma_addr);
    #line 2367 
    ring->desc = (struct hns3_desc *)0;
  }
  #line 2369 
  return;
}

#line 2371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static int hns3_alloc_desc(struct hns3_enet_ring *ring)
{
  #line 2373 
  int size = (int)((unsigned int)ring->desc_num * 32U);
  #line 2375 
  ring->desc = (struct hns3_desc *)dma_alloc_coherent(ring->dev,(unsigned long)size,& ring->desc_dma_addr,3264U);
  #line 2377 
  if (ring->desc == (struct hns3_desc *)0) 
                                           #line 2378 
                                           return -12;
  #line 2380 
  return 0;
}

#line 2383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static int hns3_reserve_buffer_map(struct hns3_enet_ring *ring, struct hns3_desc_cb *cb)
{
  #line 2386 
  int ret;
  #line 2388 
  ret = hns3_alloc_buffer(ring,cb);
  #line 2389 
  if (ret != 0) 
                #line 2390 
                goto out;
  #line 2392 
  ret = hns3_map_buffer(ring,cb);
  #line 2393 
  if (ret != 0) 
                #line 2394 
                goto out_with_buf;
  #line 2396 
  return 0;
  #line 2398 
  out_with_buf: 
                #line 2398 
  ;
  #line 2399 
  hns3_free_buffer(ring,cb);
  #line 2400 
  out: 
       #line 2400 
  ;
  #line 2401 
  return ret;
}

#line 2404  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static int hns3_alloc_buffer_attach(struct hns3_enet_ring *ring, int i)
{
  #line 2406 
  int ret = hns3_reserve_buffer_map(ring,ring->desc_cb + (unsigned long)i);
  #line 2408 
  if (ret != 0) 
                #line 2409 
                return ret;
  #line 2411 
  (ring->desc + (unsigned long)i)->addr = (ring->desc_cb + (unsigned long)i)->dma;
  #line 2413 
  return 0;
}

#line 2417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static int hns3_alloc_ring_buffers(struct hns3_enet_ring *ring)
{
  #line 2419 
  int i;
  #line 2419 
  int j;
  #line 2419 
  int ret;
  #line 2421 
  i = 0;
  #line 2421 
  while ((int)ring->desc_num > i) {
    #line 2422 
    ret = hns3_alloc_buffer_attach(ring,i);
    #line 2423 
    if (ret != 0) 
                  #line 2424 
                  goto out_buffer_fail;
    #line 2421 
    i ++;
  }
  #line 2427 
  return 0;
  #line 2429 
  out_buffer_fail: 
                   #line 2429 
  ;
  #line 2430 
  j = i + -1;
  #line 2430 
  while (j >= 0) {
    #line 2431 
    hns3_free_buffer_detach(ring,j);
    #line 2430 
    j --;
  }
  #line 2432 
  return ret;
}

#line 2436  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static void hns3_replace_buffer(struct hns3_enet_ring *ring, int i, struct hns3_desc_cb *res_cb)
{
  #line 2439 
  hns3_unmap_buffer(ring,ring->desc_cb + (unsigned long)i);
  #line 2440 
  *(ring->desc_cb + (unsigned long)i) = *res_cb;
  #line 2441 
  (ring->desc + (unsigned long)i)->addr = (ring->desc_cb + (unsigned long)i)->dma;
  #line 2442 
  (ring->desc + (unsigned long)i)->__anonCompField_hns3_desc_222.rx.bd_base_info = 0U;
  #line 2443 
  return;
}

#line 2445  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static void hns3_reuse_buffer(struct hns3_enet_ring *ring, int i)
{
  #line 2447 
  (ring->desc_cb + (unsigned long)i)->reuse_flag = (unsigned short)0U;
  #line 2448 
  (ring->desc + (unsigned long)i)->addr = (ring->desc_cb + (unsigned long)i)->dma + (unsigned long long)(ring->desc_cb + (unsigned long)i)->page_offset;
  #line 2450 
  (ring->desc + (unsigned long)i)->__anonCompField_hns3_desc_222.rx.bd_base_info = 0U;
  #line 2451 
  return;
}

#line 2453  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static void hns3_nic_reclaim_desc(struct hns3_enet_ring *ring, int head, int *bytes, int *pkts)
{
  #line 2457 
  struct hns3_desc_cb *desc_cb;
  #line 2456 
  int ntc = ring->next_to_clean;
  #line 2459 
  while (head != ntc) {
    #line 2460 
    desc_cb = ring->desc_cb + (unsigned long)ntc;
    #line 2461 
    *pkts += (unsigned int)desc_cb->type == 0U;
    #line 2462 
    *bytes = (int)((unsigned int)*bytes + desc_cb->length);
    #line 2464 
    hns3_free_buffer_detach(ring,ntc);
    #line 2466 
    ntc ++;
    #line 2466 
    ;
    #line 2466 
    if (ntc == (int)ring->desc_num) 
                                    #line 2467 
                                    ntc = 0;
    #line 2470 
    __builtin_prefetch((void const *)((void *)(ring->desc_cb + (unsigned long)ntc)));
  }
  #line 2478 
  ldv_inline_asm();
  {
    #line 2477 
    union __anonunion___u_1135 __u = {.__val = ntc};
    #line 2476 
    __write_once_size((void *)(& ring->next_to_clean),(void *)(& __u.__c),4);
    #line 2476 
    int tmp = __u.__val;
  }
  #line 2479 
  return;
}

#line 2479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static int is_valid_clean_head(struct hns3_enet_ring *ring, int h)
{
  #line 2487 
  int tmp;
  #line 2481 
  int u = ring->next_to_use;
  #line 2482 
  int c = ring->next_to_clean;
  #line 2484 
  if ((long)((int)ring->desc_num < h) != 0L) 
                                             #line 2485 
                                             return 0;
  #line 2487 
  if (u > c) 
             #line 2487 
             tmp = (h > c && h <= u) != 0; else 
                                                #line 2487 
                                                tmp = (h > c || h <= u) != 0;
  #line 2487 
  return tmp;
}

#line 2490  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
void hns3_clean_tx_ring(struct hns3_enet_ring *ring)
{
  #line 2494 
  struct netdev_queue *dev_queue;
  #line 2495 
  int bytes;
  #line 2495 
  int pkts;
  #line 2496 
  int head;
  #line 2492 
  struct net_device *netdev = (ring->tqp_vector)->napi.dev;
  #line 2493 
  struct hns3_nic_priv *priv = netdev_priv(netdev);
  #line 2498 
  head = (int)readl((ring->tqp)->io_base + 92U);
  #line 2500 
  if (is_ring_empty(ring) != 0) 
                                #line 2501 
                                return;
  else 
    #line 2500 
    if (ring->next_to_clean == head) 
                                     #line 2501 
                                     return;
  #line 2502 
  ldv_inline_asm();
  #line 2505 
  if ((long)(is_valid_clean_head(ring,head) == 0) != 0L) {
    #line 2506 
    netdev_err(netdev,(char *)"wrong head (%d, %d-%d)\n",head,ring->next_to_use,ring->next_to_clean);
    #line 2509 
    u64_stats_init(& ring->syncp);
    #line 2510 
    (ring->stats.io_err_cnt) ++;
    #line 2511 
    u64_stats_init(& ring->syncp);
    #line 2512 
    return;
  }
  #line 2515 
  bytes = 0;
  #line 2516 
  pkts = 0;
  #line 2517 
  hns3_nic_reclaim_desc(ring,head,& bytes,& pkts);
  #line 2519 
  (ring->tqp_vector)->tx_group.total_bytes += (unsigned long long)bytes;
  #line 2520 
  (ring->tqp_vector)->tx_group.total_packets += (unsigned long long)pkts;
  #line 2522 
  u64_stats_init(& ring->syncp);
  #line 2523 
  ring->stats.__anonCompField_ring_stats_225.__anonCompField___anonunion_1125_223.tx_bytes += (unsigned long long)bytes;
  #line 2524 
  ring->stats.__anonCompField_ring_stats_225.__anonCompField___anonunion_1125_223.tx_pkts += (unsigned long long)pkts;
  #line 2525 
  u64_stats_init(& ring->syncp);
  #line 2527 
  dev_queue = netdev_get_tx_queue(netdev,(unsigned int)(ring->tqp)->tqp_index);
  #line 2528 
  netdev_tx_completed_queue(dev_queue,(unsigned int)pkts,(unsigned int)bytes);
  #line 2530 
  if ((long)((int)netif_carrier_ok(netdev) != 0) != 0L) {
    #line 2530 
    if ((long)((unsigned int)ring_space(ring) > 63U) != 0L) {
      #line 2532 
      ldv_inline_asm();
      #line 2536 
      if ((int)netif_tx_queue_stopped(dev_queue) != 0) {
        #line 2537 
        if (! test_bit(3L,& priv->state)) {
          #line 2538 
          netif_tx_wake_queue(dev_queue);
          #line 2539 
          (ring->stats.__anonCompField_ring_stats_225.__anonCompField___anonunion_1125_223.restart_queue) ++;
        }
      }
    }
  }
  #line 2542 
  return;
}

#line 2544  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static int hns3_desc_unused(struct hns3_enet_ring *ring)
{
  #line 2549 
  int tmp;
  #line 2546 
  int ntc = ring->next_to_clean;
  #line 2547 
  int ntu = ring->next_to_use;
  #line 2549 
  if (ntc < ntu) 
                 #line 2549 
                 tmp = (int)ring->desc_num; else 
                                                 #line 2549 
                                                 tmp = 0;
  #line 2549 
  ;
  #line 2549 
  return (tmp + ntc) - ntu;
}

#line 2552  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static void hns3_nic_alloc_rx_buffers(struct hns3_enet_ring *ring, int cleand_count)
{
  #line 2555 
  struct hns3_desc_cb *desc_cb;
  #line 2556 
  struct hns3_desc_cb res_cbs;
  #line 2557 
  int i;
  #line 2557 
  int ret;
  #line 2559 
  i = 0;
  #line 2559 
  while (i < cleand_count) {
    #line 2560 
    desc_cb = ring->desc_cb + (unsigned long)ring->next_to_use;
    #line 2561 
    if ((unsigned int)desc_cb->reuse_flag != 0U) {
      #line 2562 
      u64_stats_init(& ring->syncp);
      #line 2563 
      (ring->stats.__anonCompField_ring_stats_225.__anonCompField___anonunion_1125_224.reuse_pg_cnt) ++;
      #line 2564 
      u64_stats_init(& ring->syncp);
      #line 2566 
      hns3_reuse_buffer(ring,ring->next_to_use);
    }
    else {
      #line 2568 
      ret = hns3_reserve_buffer_map(ring,& res_cbs);
      #line 2569 
      if (ret != 0) {
        #line 2570 
        u64_stats_init(& ring->syncp);
        #line 2571 
        (ring->stats.sw_err_cnt) ++;
        #line 2572 
        u64_stats_init(& ring->syncp);
        #line 2574 
        if (net_ratelimit() != 0) 
                                  #line 2574 
                                  netdev_err((ring->tqp_vector)->napi.dev,(char *)"alloc rx buffer failed: %d\n",ret);
        #line 2577 
        break;
      }
      #line 2579 
      hns3_replace_buffer(ring,ring->next_to_use,& res_cbs);
      #line 2581 
      u64_stats_init(& ring->syncp);
      #line 2582 
      (ring->stats.__anonCompField_ring_stats_225.__anonCompField___anonunion_1125_224.non_reuse_pg) ++;
      #line 2583 
      u64_stats_init(& ring->syncp);
    }
    #line 2586 
    ring->next_to_use = (ring->next_to_use + 1) % (int)ring->desc_num;
    #line 2559 
    i ++;
  }
  #line 2588 
  ldv_inline_asm();
  #line 2590 
  writel((unsigned int)i,(ring->tqp)->io_base + 28U);
  #line 2591 
  return;
}

#line 2593  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static void hns3_nic_reuse_page(struct sk_buff *skb, int i, struct hns3_enet_ring *ring, int pull_len, struct hns3_desc_cb *desc_cb)
{
  #line 2597 
  struct hns3_desc *desc = ring->desc + (unsigned long)ring->next_to_clean;
  #line 2598 
  int size = (int)desc->__anonCompField_hns3_desc_222.rx.size;
  #line 2599 
  u32 truesize = ring->buf_size;
  #line 2601 
  skb_add_rx_frag(skb,i,(struct page *)desc_cb->priv,(int)(desc_cb->page_offset + (unsigned int)pull_len),size - pull_len,truesize);
  #line 2607 
  if ((long)(page_to_nid((struct page *)desc_cb->priv) != numa_mem_id()) != 0L) 
    #line 2609 
    return;
  else 
    #line 2607 
    if (desc_cb->page_offset == 0U) {
      #line 2608 
      if (page_count((struct page *)desc_cb->priv) > 1) 
                                                        #line 2609 
                                                        return;
    }
  #line 2612 
  desc_cb->page_offset += truesize;
  #line 2614 
  ;
  #line 2614 
  if ((unsigned long)(desc_cb->page_offset + truesize) <= 4096UL << hns3_page_order(ring)) {
    #line 2615 
    desc_cb->reuse_flag = (unsigned short)1U;
    #line 2617 
    get_page((struct page *)desc_cb->priv);
  }
  else {
    #line 2618 
    if (page_count((struct page *)desc_cb->priv) == 1) {
      #line 2619 
      desc_cb->reuse_flag = (unsigned short)1U;
      #line 2620 
      desc_cb->page_offset = 0U;
      #line 2621 
      get_page((struct page *)desc_cb->priv);
    }
  }
  #line 2623 
  return;
}

#line 2625  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static int hns3_gro_complete(struct sk_buff *skb, u32 l234info)
{
  #line 2628 
  struct tcphdr *th;
  #line 2627 
  __be16 type = skb->protocol;
  #line 2629 
  int depth = 0;
  #line 2631 
  while (1) {
    #line 2631 
    if (! ((int)eth_type_vlan((unsigned short)((int)type)) != 0)) 
                                                                  #line 2631 
                                                                  break;
    {
      #line 2632 
      struct vlan_hdr *vh;
      #line 2634 
      ;
      #line 2634 
      if ((unsigned int)(depth + 4) > skb_headlen(skb)) 
                                                        #line 2635 
                                                        return -14;
      #line 2637 
      vh = (struct vlan_hdr *)(skb->data + (unsigned long)depth);
      #line 2638 
      type = vh->h_vlan_encapsulated_proto;
      #line 2639 
      depth += 4;
    }
  }
  #line 2642 
  skb_set_network_header(skb,depth);
  #line 2644 
  if ((unsigned int)type == 8U) {
    #line 2645 
    struct iphdr *iph = ip_hdr(skb);
    #line 2647 
    depth = (int)((unsigned int)depth + 20U);
    #line 2648 
    skb_set_transport_header(skb,depth);
    #line 2649 
    th = tcp_hdr(skb);
    #line 2650 
    th->check = (unsigned short)(~ ((int)tcp_v4_check((int)(skb->len - (unsigned int)depth),iph->saddr,
                     iph->daddr,0U)));
  }
  else 
    #line 2652 
    if ((unsigned int)type == 56710U) {
      #line 2653 
      struct ipv6hdr *iph_0 = ipv6_hdr(skb);
      #line 2655 
      depth = (int)((unsigned int)depth + 40U);
      #line 2656 
      skb_set_transport_header(skb,depth);
      #line 2657 
      th = tcp_hdr(skb);
      #line 2658 
      th->check = (unsigned short)(~ ((int)tcp_v6_check((int)(skb->len - (unsigned int)depth),& iph_0->saddr,
                     & iph_0->daddr,0U)));
    }
    else {
      #line 2661 
      if (net_ratelimit() != 0) {
        #line 2661 
        ;
        #line 2661 
        ;
        #line 2661 
        netdev_err(skb->__anonCompField_sk_buff_87.__anonCompField___anonunion_487_86.__anonCompField___anonstruct_488_85.dev,(char *)"Error: FW GRO supports only IPv4/IPv6, not 0x%04x, depth: %d\n",(int)__builtin_bswap16((unsigned short)((int)type)),depth);
      }
      #line 2664 
      return -14;
    }
  #line 2667 
  ((struct skb_shared_info *)skb_end_pointer(skb))->gso_segs = ((struct napi_gro_cb *)(& skb->cb))->count;
  #line 2668 
  if ((unsigned int)th->cwr != 0U) {
    #line 2669 
    ((struct skb_shared_info *)skb_end_pointer(skb))->gso_type |= 4U;
  }
  #line 2671 
  if (((unsigned long)l234info & 1073741824UL) != 0UL) {
    #line 2672 
    ((struct skb_shared_info *)skb_end_pointer(skb))->gso_type |= 8U;
  }
  #line 2674 
  skb->__anonCompField_sk_buff_93.__anonCompField___anonunion_494_92.csum_start = (unsigned short)((unsigned char *)th - skb->head);
  #line 2675 
  skb->__anonCompField_sk_buff_93.__anonCompField___anonunion_494_92.csum_offset = (unsigned short)16U;
  #line 2676 
  skb->ip_summed = (unsigned char)3U;
  #line 2677 
  return 0;
}

#line 2680  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static void hns3_rx_checksum(struct hns3_enet_ring *ring, struct sk_buff *skb, u32 l234info, u32 bd_base_info, u32 ol_info)
{
  #line 2684 
  int l3_type;
  #line 2684 
  int l4_type;
  #line 2685 
  int ol4_type;
  #line 2683 
  struct net_device *netdev = (ring->tqp_vector)->napi.dev;
  #line 2687 
  skb->ip_summed = (unsigned char)0U;
  #line 2689 
  skb_checksum_none_assert(skb);
  #line 2691 
  if ((netdev->features & 549755813888ULL) == 0ULL) 
                                                    #line 2692 
                                                    return;
  #line 2695 
  if (((unsigned long)bd_base_info & 2048UL) == 0UL) 
                                                     #line 2696 
                                                     return;
  #line 2698 
  if ((long)(((unsigned long)l234info & 12976128UL) != 0UL) != 0L) {
    #line 2701 
    u64_stats_init(& ring->syncp);
    #line 2702 
    (ring->stats.__anonCompField_ring_stats_225.__anonCompField___anonunion_1125_224.l3l4_csum_err) ++;
    #line 2703 
    u64_stats_init(& ring->syncp);
    #line 2705 
    return;
  }
  #line 2708 
  ol4_type = (int)(ol_info >> 8) & 15;
  #line 2710 
  switch (ol4_type) {
    #line 2711 
    case 1: 
            #line 2711 
    ;
    #line 2712 
    case 2: 
            #line 2712 
    ;
    #line 2713 
    skb->csum_level = (unsigned char)1U;
    #line 2715 
    case 0: 
            #line 2715 
    ;
    #line 2716 
    l3_type = (int)(l234info >> 4) & 15;
    #line 2718 
    l4_type = (int)(l234info >> 8) & 15;
    #line 2722 
    if ((unsigned int)l3_type <= 1U && ((unsigned int)l4_type <= 1U || l4_type == 3)) 
      #line 2727 
      skb->ip_summed = (unsigned char)1U;
    #line 2728 
    break;
    #line 2729 
    default: 
             #line 2729 
    ;
    #line 2730 
    break;
  }
  #line 2732 
  return;
}

#line 2734  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static void hns3_rx_skb(struct hns3_enet_ring *ring, struct sk_buff *skb)
{
  #line 2736 
  if ((int)skb_has_frag_list(skb) != 0) 
                                        #line 2737 
                                        napi_gro_flush(& (ring->tqp_vector)->napi,(_Bool)0);
  #line 2739 
  napi_gro_receive(& (ring->tqp_vector)->napi,skb);
  #line 2740 
  return;
}

#line 2742  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static bool hns3_parse_vlan_tag(struct hns3_enet_ring *ring, struct hns3_desc *desc, u32 l234info, u16 *vlan_tag)
{
  #line 2746 
  struct hnae3_handle *handle = (ring->tqp)->handle;
  #line 2747 
  struct pci_dev *pdev = ((ring->tqp)->handle)->pdev;
  #line 2749 
  if ((unsigned int)pdev->revision == 32U) {
    #line 2750 
    *vlan_tag = desc->__anonCompField_hns3_desc_222.rx.__anonCompField___anonstruct_rx_1122_221.__anonCompField___anonunion_1123_220.ot_vlan_tag;
    #line 2751 
    if (((int)*vlan_tag & 4095) == 0) 
                                      #line 2752 
                                      *vlan_tag = desc->__anonCompField_hns3_desc_222.rx.vlan_tag;
    #line 2754 
    return (_Bool)((unsigned int)*vlan_tag != 0U);
  }
  #line 2765 
  switch ((l234info >> 13) & 3U) {
    #line 2767 
    case (unsigned int)1: 
                          #line 2767 
    ;
    #line 2768 
    if (handle->port_base_vlan_state != (unsigned int)HNAE3_PORT_BASE_VLAN_DISABLE) 
      #line 2770 
      return (_Bool)0;
    #line 2772 
    *vlan_tag = desc->__anonCompField_hns3_desc_222.rx.__anonCompField___anonstruct_rx_1122_221.__anonCompField___anonunion_1123_220.ot_vlan_tag;
    #line 2773 
    return (_Bool)1;
    #line 2774 
    case (unsigned int)2: 
                          #line 2774 
    ;
    #line 2775 
    if (handle->port_base_vlan_state != (unsigned int)HNAE3_PORT_BASE_VLAN_DISABLE) 
      #line 2777 
      return (_Bool)0;
    #line 2779 
    *vlan_tag = desc->__anonCompField_hns3_desc_222.rx.vlan_tag;
    #line 2780 
    return (_Bool)1;
    #line 2781 
    case (unsigned int)3: 
                          #line 2781 
    ;
    #line 2782 
    if (handle->port_base_vlan_state == (unsigned int)HNAE3_PORT_BASE_VLAN_DISABLE) 
      #line 2784 
      *vlan_tag = desc->__anonCompField_hns3_desc_222.rx.__anonCompField___anonstruct_rx_1122_221.__anonCompField___anonunion_1123_220.ot_vlan_tag; else 
                                                                    #line 2786 
                                                                    *vlan_tag = desc->__anonCompField_hns3_desc_222.rx.vlan_tag;
    #line 2788 
    return (_Bool)1;
    #line 2789 
    default: 
             #line 2789 
    ;
    #line 2790 
    return (_Bool)0;
  }
}

#line 2794  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static int hns3_alloc_skb(struct hns3_enet_ring *ring, unsigned int length, unsigned char *va)
{
  #line 2800 
  struct sk_buff *skb;
  #line 2837 
  u32 tmp_3;
  #line 2798 
  struct hns3_desc_cb *desc_cb = ring->desc_cb + (unsigned long)ring->next_to_clean;
  #line 2799 
  struct net_device *netdev = (ring->tqp_vector)->napi.dev;
  #line 2802 
  ring->skb = napi_alloc_skb(& (ring->tqp_vector)->napi,256U);
  #line 2803 
  skb = ring->skb;
  #line 2804 
  if ((long)(skb == (struct sk_buff *)0) != 0L) {
    #line 2805 
    if (net_ratelimit() != 0) 
                              #line 2805 
                              netdev_err(netdev,(char *)"alloc rx skb fail\n");
    #line 2807 
    u64_stats_init(& ring->syncp);
    #line 2808 
    (ring->stats.sw_err_cnt) ++;
    #line 2809 
    u64_stats_init(& ring->syncp);
    #line 2811 
    return -12;
  }
  #line 2814 
  prefetchw((void *)skb->data);
  #line 2816 
  ring->pending_buf = 1;
  #line 2817 
  ring->frag_num = 0U;
  #line 2818 
  ring->tail_skb = (struct sk_buff *)0;
  #line 2819 
  if (length <= 256U) {
    #line 2820 
    ;
    #line 2820 
    ;
    #line 2820 
    memcpy(__skb_put(skb,length),(void *)va,(unsigned long)(length + 7U) & 4294967288UL);
    #line 2823 
    if ((long)(page_to_nid((struct page *)desc_cb->priv) == numa_mem_id()) != 0L) 
      #line 2824 
      desc_cb->reuse_flag = (unsigned short)1U; else 
                                                     #line 2826 
                                                     put_page((struct page *)desc_cb->priv);
    #line 2828 
    ring->next_to_clean = (ring->next_to_clean + 1) % (int)ring->desc_num;
    #line 2829 
    return 0;
  }
  #line 2831 
  u64_stats_init(& ring->syncp);
  #line 2832 
  (ring->stats.seg_pkt_cnt) ++;
  #line 2833 
  u64_stats_init(& ring->syncp);
  #line 2835 
  ring->pull_len = eth_get_headlen(netdev,(void *)va,256U);
  #line 2836 
  __skb_put(skb,ring->pull_len);
  #line 2837 
  ;
  #line 2837 
  ;
  #line 2837 
  ;
  #line 2837 
  tmp_3 = ring->frag_num;
  #line 2837 
  (ring->frag_num) ++;
  #line 2837 
  ;
  #line 2837 
  ;
  #line 2837 
  hns3_nic_reuse_page(skb,(int)tmp_3,ring,(int)ring->pull_len,desc_cb);
  #line 2839 
  ring->next_to_clean = (ring->next_to_clean + 1) % (int)ring->desc_num;
  #line 2841 
  return 1;
}

#line 2844  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static int hns3_add_frag(struct hns3_enet_ring *ring, struct hns3_desc *desc, bool pending)
{
  #line 2849 
  struct sk_buff *new_skb;
  #line 2850 
  struct hns3_desc_cb *desc_cb;
  #line 2851 
  struct hns3_desc *pre_desc;
  #line 2852 
  u32 bd_base_info;
  #line 2853 
  int pre_bd;
  #line 2847 
  struct sk_buff *skb = ring->skb;
  #line 2848 
  struct sk_buff *head_skb = skb;
  #line 2858 
  if ((int)pending != 0) {
    #line 2859 
    pre_bd = ((ring->next_to_clean + -1) + (int)ring->desc_num) % (int)ring->desc_num;
    #line 2861 
    pre_desc = ring->desc + (unsigned long)pre_bd;
    #line 2862 
    bd_base_info = pre_desc->__anonCompField_hns3_desc_222.rx.bd_base_info;
  }
  else 
       #line 2864 
       bd_base_info = desc->__anonCompField_hns3_desc_222.rx.bd_base_info;
  #line 2867 
  while (((unsigned long)bd_base_info & 256UL) == 0UL) {
    #line 2901 
    u32 tmp_1;
    #line 2868 
    desc = ring->desc + (unsigned long)ring->next_to_clean;
    #line 2869 
    desc_cb = ring->desc_cb + (unsigned long)ring->next_to_clean;
    #line 2870 
    bd_base_info = desc->__anonCompField_hns3_desc_222.rx.bd_base_info;
    #line 2871 
    ldv_inline_asm();
    #line 2873 
    if (((unsigned long)bd_base_info & 16UL) == 0UL) 
                                                     #line 2874 
                                                     return -6;
    #line 2876 
    if ((long)(ring->frag_num > 16U) != 0L) {
      #line 2877 
      new_skb = napi_alloc_skb(& (ring->tqp_vector)->napi,0U);
      #line 2878 
      if ((long)(new_skb == (struct sk_buff *)0) != 0L) {
        #line 2879 
        if (net_ratelimit() != 0) 
                                  #line 2879 
                                  netdev_err((ring->tqp_vector)->napi.dev,(char *)"alloc rx fraglist skb fail\n");
        #line 2881 
        return -6;
      }
      #line 2883 
      ring->frag_num = 0U;
      #line 2885 
      if (ring->tail_skb != (struct sk_buff *)0) {
        #line 2886 
        (ring->tail_skb)->__anonCompField_sk_buff_87.__anonCompField___anonunion_487_86.next = new_skb;
        #line 2887 
        ring->tail_skb = new_skb;
      }
      else {
        #line 2889 
        ((struct skb_shared_info *)skb_end_pointer(skb))->frag_list = new_skb;
        #line 2890 
        ring->tail_skb = new_skb;
      }
    }
    #line 2894 
    if (ring->tail_skb != (struct sk_buff *)0) {
      #line 2895 
      head_skb->truesize += ring->buf_size;
      #line 2896 
      head_skb->data_len += (unsigned int)desc->__anonCompField_hns3_desc_222.rx.size;
      #line 2897 
      head_skb->len += (unsigned int)desc->__anonCompField_hns3_desc_222.rx.size;
      #line 2898 
      skb = ring->tail_skb;
    }
    #line 2901 
    ;
    #line 2901 
    ;
    #line 2901 
    tmp_1 = ring->frag_num;
    #line 2901 
    (ring->frag_num) ++;
    #line 2901 
    ;
    #line 2901 
    ;
    #line 2901 
    hns3_nic_reuse_page(skb,(int)tmp_1,ring,0,desc_cb);
    #line 2902 
    ring->next_to_clean = (ring->next_to_clean + 1) % (int)ring->desc_num;
    #line 2903 
    (ring->pending_buf) ++;
  }
  #line 2906 
  return 0;
}

#line 2909  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static int hns3_set_gro_and_checksum(struct hns3_enet_ring *ring, struct sk_buff *skb, u32 l234info, u32 bd_base_info, u32 ol_info)
{
  #line 2913 
  u32 l3_type;
  #line 2915 
  ((struct skb_shared_info *)skb_end_pointer(skb))->gso_size = (unsigned short)((unsigned int)((unsigned short)(bd_base_info >> 16)) & 16383U);
  #line 2919 
  ;
  #line 2919 
  if ((unsigned int)((struct skb_shared_info *)skb_end_pointer(skb))->gso_size == 0U) {
    #line 2920 
    hns3_rx_checksum(ring,skb,l234info,bd_base_info,ol_info);
    #line 2921 
    return 0;
  }
  #line 2924 
  ((struct napi_gro_cb *)(& skb->cb))->count = (unsigned short)((unsigned int)((unsigned short)(l234info >> 24)) & 63U);
  #line 2928 
  l3_type = (l234info >> 4) & 15U;
  #line 2929 
  if (l3_type == 0U) {
    #line 2930 
    ((struct skb_shared_info *)skb_end_pointer(skb))->gso_type = 1U;
  }
  else 
    #line 2931 
    if (l3_type == 1U) {
      #line 2932 
      ((struct skb_shared_info *)skb_end_pointer(skb))->gso_type = 16U;
    }
    else 
         #line 2934 
         return -14;
  #line 2936 
  return hns3_gro_complete(skb,l234info);
}

#line 2939  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static void hns3_set_rx_skb_rss_type(struct hns3_enet_ring *ring, struct sk_buff *skb, u32 rss_hash)
{
  #line 2943 
  enum pkt_hash_types rss_type;
  #line 2942 
  struct hnae3_handle *handle = (ring->tqp)->handle;
  #line 2945 
  if (rss_hash != 0U) 
                      #line 2946 
                      rss_type = handle->__anonCompField_hnae3_handle_215.kinfo.rss_type; else 
                                                                    #line 2948 
                                                                    rss_type = PKT_HASH_TYPE_NONE;
  #line 2950 
  skb_set_hash(skb,rss_hash,rss_type);
  #line 2951 
  return;
}

#line 2953  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static int hns3_handle_bdinfo(struct hns3_enet_ring *ring, struct sk_buff *skb)
{
  #line 2956 
  enum hns3_pkt_l2t_type l2_frame_type;
  #line 2957 
  u32 bd_base_info;
  #line 2957 
  u32 l234info;
  #line 2957 
  u32 ol_info;
  #line 2958 
  struct hns3_desc *desc;
  #line 2959 
  unsigned int len;
  #line 2960 
  int pre_ntc;
  #line 2960 
  int ret;
  #line 2955 
  struct net_device *netdev = (ring->tqp_vector)->napi.dev;
  #line 2966 
  if (ring->next_to_clean != 0) 
                                #line 2966 
                                pre_ntc = ring->next_to_clean + -1; else 
                                                                    #line 2966 
                                                                    pre_ntc = (int)ring->desc_num + -1;
  #line 2968 
  desc = ring->desc + (unsigned long)pre_ntc;
  #line 2969 
  bd_base_info = desc->__anonCompField_hns3_desc_222.rx.bd_base_info;
  #line 2970 
  l234info = desc->__anonCompField_hns3_desc_222.rx.l234_info;
  #line 2971 
  ol_info = desc->__anonCompField_hns3_desc_222.rx.__anonCompField___anonstruct_rx_1122_221.ol_info;
  #line 2977 
  if ((netdev->features & 256ULL) != 0ULL) {
    #line 2978 
    u16 vlan_tag;
    #line 2980 
    if ((int)hns3_parse_vlan_tag(ring,desc,l234info,& vlan_tag) != 0) 
      #line 2981 
      __vlan_hwaccel_put_tag(skb,(unsigned short)129,(unsigned short)((int)vlan_tag));
  }
  #line 2985 
  if ((long)((unsigned int)desc->__anonCompField_hns3_desc_222.rx.pkt_len == 0U) != 0L || (long)(((unsigned long)l234info & 589824UL) != 0UL) != 0L) {
    #line 2987 
    u64_stats_init(& ring->syncp);
    #line 2988 
    if (((unsigned long)l234info & 65536UL) != 0UL) 
                                                    #line 2989 
                                                    (ring->stats.__anonCompField_ring_stats_225.__anonCompField___anonunion_1125_224.l2_err) ++; else 
                                                                    #line 2991 
                                                                    (ring->stats.__anonCompField_ring_stats_225.__anonCompField___anonunion_1125_224.err_pkt_len) ++;
    #line 2992 
    u64_stats_init(& ring->syncp);
    #line 2994 
    return -14;
  }
  #line 2997 
  len = skb->len;
  #line 3000 
  skb->protocol = eth_type_trans(skb,netdev);
  #line 3003 
  ret = hns3_set_gro_and_checksum(ring,skb,l234info,bd_base_info,ol_info);
  #line 3005 
  if ((long)(ret != 0) != 0L) {
    #line 3006 
    u64_stats_init(& ring->syncp);
    #line 3007 
    (ring->stats.__anonCompField_ring_stats_225.__anonCompField___anonunion_1125_224.rx_err_cnt) ++;
    #line 3008 
    u64_stats_init(& ring->syncp);
    #line 3009 
    return ret;
  }
  #line 3012 
  l2_frame_type = (enum hns3_pkt_l2t_type)(l234info & 3U);
  #line 3015 
  u64_stats_init(& ring->syncp);
  #line 3016 
  (ring->stats.__anonCompField_ring_stats_225.__anonCompField___anonunion_1125_224.rx_pkts) ++;
  #line 3017 
  ring->stats.__anonCompField_ring_stats_225.__anonCompField___anonunion_1125_224.rx_bytes += (unsigned long long)len;
  #line 3019 
  if (l2_frame_type == (unsigned int)HNS3_L2_TYPE_MULTICAST) 
                                                             #line 3020 
                                                             (ring->stats.__anonCompField_ring_stats_225.__anonCompField___anonunion_1125_224.rx_multicast) ++;
  #line 3022 
  u64_stats_init(& ring->syncp);
  #line 3024 
  (ring->tqp_vector)->rx_group.total_bytes += (unsigned long long)len;
  #line 3026 
  hns3_set_rx_skb_rss_type(ring,skb,desc->__anonCompField_hns3_desc_222.rx.rss_hash);
  #line 3027 
  return 0;
}

#line 3030  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static int hns3_handle_rx_bd(struct hns3_enet_ring *ring)
{
  #line 3033 
  struct hns3_desc_cb *desc_cb;
  #line 3034 
  struct hns3_desc *desc;
  #line 3035 
  unsigned int length;
  #line 3036 
  u32 bd_base_info;
  #line 3037 
  int ret;
  #line 3032 
  struct sk_buff *skb = ring->skb;
  #line 3039 
  desc = ring->desc + (unsigned long)ring->next_to_clean;
  #line 3040 
  desc_cb = ring->desc_cb + (unsigned long)ring->next_to_clean;
  #line 3042 
  __builtin_prefetch((void const *)((void *)desc));
  #line 3044 
  length = (unsigned int)desc->__anonCompField_hns3_desc_222.rx.size;
  #line 3045 
  bd_base_info = desc->__anonCompField_hns3_desc_222.rx.bd_base_info;
  #line 3048 
  if ((long)(((unsigned long)bd_base_info & 16UL) == 0UL) != 0L) 
                                                                 #line 3049 
                                                                 return -6;
  #line 3051 
  if (skb == (struct sk_buff *)0) 
                                  #line 3052 
                                  ring->va = (unsigned char *)desc_cb->buf + (unsigned long)desc_cb->page_offset;
  #line 3061 
  __builtin_prefetch((void const *)((void *)ring->va));
  #line 3063 
  __builtin_prefetch((void const *)((void *)(ring->va + 64U)));
  #line 3066 
  if (skb == (struct sk_buff *)0) {
    #line 3067 
    ret = hns3_alloc_skb(ring,length,ring->va);
    #line 3068 
    skb = ring->skb;
    #line 3070 
    if (ret < 0) 
                 #line 3071 
                 return ret;
    #line 3072 
    if (ret > 0) {
      #line 3073 
      ret = hns3_add_frag(ring,desc,(_Bool)0);
      #line 3074 
      if (ret != 0) 
                    #line 3075 
                    return ret;
      #line 3080 
      memcpy((void *)skb->data,(void *)ring->va,(unsigned long)(ring->pull_len + 7U) & 4294967288UL);
    }
  }
  else {
    #line 3084 
    ret = hns3_add_frag(ring,desc,(_Bool)1);
    #line 3085 
    if (ret != 0) 
                  #line 3086 
                  return ret;
    #line 3091 
    memcpy((void *)skb->data,(void *)ring->va,(unsigned long)(ring->pull_len + 7U) & 4294967288UL);
  }
  #line 3095 
  ret = hns3_handle_bdinfo(ring,skb);
  #line 3096 
  if ((long)(ret != 0) != 0L) {
    #line 3097 
    dev_kfree_skb_any(skb);
    #line 3098 
    return ret;
  }
  #line 3101 
  skb_record_rx_queue(skb,(unsigned short)((int)((unsigned short)(ring->tqp)->tqp_index)));
  #line 3102 
  return 0;
}

#line 3105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
int hns3_clean_rx_ring(struct hns3_enet_ring *ring, int budget, void (*rx_fn)(struct hns3_enet_ring *, struct sk_buff *))
{
  #line 3112 
  int err;
  #line 3112 
  int num;
  #line 3109 
  int unused_count = hns3_desc_unused(ring);
  #line 3110 
  int recv_pkts = 0;
  #line 3111 
  int recv_bds = 0;
  #line 3114 
  num = (int)readl((ring->tqp)->io_base + 32U);
  #line 3115 
  num -= unused_count;
  #line 3116 
  unused_count -= ring->pending_buf;
  #line 3118 
  if (num <= 0) 
                #line 3119 
                goto out;
  #line 3121 
  ldv_inline_asm();
  #line 3123 
  while (recv_pkts < budget && recv_bds < num) {
    #line 3125 
    if (unused_count > 15) {
      #line 3126 
      hns3_nic_alloc_rx_buffers(ring,unused_count);
      #line 3127 
      unused_count = hns3_desc_unused(ring) - ring->pending_buf;
    }
    #line 3132 
    err = hns3_handle_rx_bd(ring);
    #line 3134 
    if ((long)(ring->skb == (struct sk_buff *)0) != 0L || (long)(err == -6) != 0L) 
      #line 3135 
      goto out;
    else 
      #line 3136 
      if ((long)(err == 0) != 0L) {
        #line 3137 
        (*rx_fn)(ring,ring->skb);
        #line 3138 
        recv_pkts ++;
      }
    #line 3141 
    recv_bds = ring->pending_buf + recv_bds;
    #line 3142 
    unused_count = ring->pending_buf + unused_count;
    #line 3143 
    ring->skb = (struct sk_buff *)0;
    #line 3144 
    ring->pending_buf = 0;
  }
  #line 3147 
  out: 
       #line 3147 
  ;
  #line 3149 
  if (unused_count > 0) 
                        #line 3150 
                        hns3_nic_alloc_rx_buffers(ring,unused_count);
  #line 3152 
  return recv_pkts;
}

#line 3155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static bool hns3_get_new_flow_lvl(struct hns3_enet_ring_group *ring_group)
{
  #line 3161 
  enum hns3_flow_level_range new_flow_level;
  #line 3162 
  struct hns3_enet_tqp_vector *tqp_vector;
  #line 3163 
  int packets_per_msecs;
  #line 3163 
  int bytes_per_msecs;
  #line 3164 
  u32 time_passed_ms;
  #line 3166 
  tqp_vector = (ring_group->ring)->tqp_vector;
  #line 3167 
  time_passed_ms = jiffies_to_msecs(jiffies - tqp_vector->last_jiffies);
  #line 3169 
  if (time_passed_ms == 0U) 
                            #line 3170 
                            return (_Bool)0;
  {
    #line 3172 
    uint32_t __rem;
    #line 3172 
    uint32_t __base = time_passed_ms;
    #line 3172 
    __rem = (unsigned int)(ring_group->total_packets % (unsigned long long)__base);
    #line 3172 
    ring_group->total_packets /= (unsigned long long)__base;
    #line 3172 
    uint32_t tmp = __rem;
  }
  #line 3173 
  packets_per_msecs = (int)ring_group->total_packets;
  {
    #line 3175 
    uint32_t __rem_0;
    #line 3175 
    uint32_t __base_0 = time_passed_ms;
    #line 3175 
    __rem_0 = (unsigned int)(ring_group->total_bytes % (unsigned long long)__base_0);
    #line 3175 
    ring_group->total_bytes /= (unsigned long long)__base_0;
    #line 3175 
    uint32_t tmp_3 = __rem_0;
  }
  #line 3176 
  bytes_per_msecs = (int)ring_group->total_bytes;
  #line 3178 
  new_flow_level = ring_group->coal.flow_level;
  #line 3186 
  switch ((unsigned int)new_flow_level) {
    #line 3187 
    case (unsigned int)0: 
                          #line 3187 
    ;
    #line 3188 
    if (bytes_per_msecs > 10000) 
                                 #line 3189 
                                 new_flow_level = HNS3_FLOW_MID;
    #line 3190 
    break;
    #line 3191 
    case (unsigned int)1: 
                          #line 3191 
    ;
    #line 3192 
    if (bytes_per_msecs > 20000) 
                                 #line 3193 
                                 new_flow_level = HNS3_FLOW_HIGH;
    else 
      #line 3194 
      if (bytes_per_msecs <= 10000) 
                                    #line 3195 
                                    new_flow_level = HNS3_FLOW_LOW;
    #line 3196 
    break;
    #line 3197 
    case (unsigned int)2: 
                          #line 3197 
    ;
    #line 3198 
    case (unsigned int)3: 
                          #line 3198 
    ;
    #line 3199 
    default: 
             #line 3199 
    ;
    #line 3200 
    if (bytes_per_msecs <= 20000) 
                                  #line 3201 
                                  new_flow_level = HNS3_FLOW_MID;
    #line 3202 
    break;
  }
  #line 3205 
  if (packets_per_msecs > 40 && & tqp_vector->rx_group == ring_group) 
    #line 3207 
    new_flow_level = HNS3_FLOW_ULTRA;
  #line 3209 
  ring_group->total_bytes = 0ULL;
  #line 3210 
  ring_group->total_packets = 0ULL;
  #line 3211 
  ring_group->coal.flow_level = new_flow_level;
  #line 3213 
  return (_Bool)1;
}

#line 3216  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static bool hns3_get_new_int_gl(struct hns3_enet_ring_group *ring_group)
{
  #line 3218 
  struct hns3_enet_tqp_vector *tqp_vector;
  #line 3219 
  u16 new_int_gl;
  #line 3221 
  if (ring_group->ring == (struct hns3_enet_ring *)0) 
                                                      #line 3222 
                                                      return (_Bool)0;
  #line 3224 
  tqp_vector = (ring_group->ring)->tqp_vector;
  #line 3225 
  if (tqp_vector->last_jiffies == 0UL) 
                                       #line 3226 
                                       return (_Bool)0;
  #line 3228 
  if (ring_group->total_packets == 0ULL) {
    #line 3229 
    ring_group->coal.int_gl = (unsigned short)20U;
    #line 3230 
    ring_group->coal.flow_level = HNS3_FLOW_LOW;
    #line 3231 
    return (_Bool)1;
  }
  #line 3234 
  if (! hns3_get_new_flow_lvl(ring_group)) 
                                           #line 3235 
                                           return (_Bool)0;
  #line 3237 
  new_int_gl = ring_group->coal.int_gl;
  #line 3238 
  switch ((unsigned int)ring_group->coal.flow_level) {
    #line 3239 
    case (unsigned int)0: 
                          #line 3239 
    ;
    #line 3240 
    new_int_gl = (unsigned short)20U;
    #line 3241 
    break;
    #line 3242 
    case (unsigned int)1: 
                          #line 3242 
    ;
    #line 3243 
    new_int_gl = (unsigned short)50U;
    #line 3244 
    break;
    #line 3245 
    case (unsigned int)2: 
                          #line 3245 
    ;
    #line 3246 
    new_int_gl = (unsigned short)54U;
    #line 3247 
    break;
    #line 3248 
    case (unsigned int)3: 
                          #line 3248 
    ;
    #line 3249 
    new_int_gl = (unsigned short)124U;
    #line 3250 
    break;
    #line 3251 
    default: 
             #line 3251 
    ;
    #line 3252 
    break;
  }
  #line 3255 
  if ((int)ring_group->coal.int_gl != (int)new_int_gl) {
    #line 3256 
    ring_group->coal.int_gl = new_int_gl;
    #line 3257 
    return (_Bool)1;
  }
  #line 3259 
  return (_Bool)0;
}

#line 3262  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static void hns3_update_new_int_gl(struct hns3_enet_tqp_vector *tqp_vector)
{
  #line 3266 
  bool rx_update;
  #line 3266 
  bool tx_update;
  #line 3264 
  struct hns3_enet_ring_group *rx_group = & tqp_vector->rx_group;
  #line 3265 
  struct hns3_enet_ring_group *tx_group = & tqp_vector->tx_group;
  {
    #line 3269 
    unsigned long __dummy;
    #line 3269 
    unsigned long __dummy2;
    }
  #line 3269 
  if (1 != 0) {
    {
      #line 3269 
      unsigned long __dummy_0;
      #line 3269 
      unsigned long __dummy2_0;
      }
    #line 3269 
    if (1 != 0) {
      #line 3269 
      ;
      #line 3269 
      if ((long)(jiffies - (tqp_vector->last_jiffies + msecs_to_jiffies(1000U))) < 0L) 
        #line 3271 
        return;
    }
  }
  #line 3273 
  if ((unsigned int)rx_group->coal.gl_adapt_enable != 0U) {
    #line 3274 
    rx_update = hns3_get_new_int_gl(rx_group);
    #line 3275 
    if ((int)rx_update != 0) 
                             #line 3276 
                             hns3_set_vector_coalesce_rx_gl(tqp_vector,(unsigned int)rx_group->coal.int_gl);
  }
  #line 3280 
  if ((unsigned int)tx_group->coal.gl_adapt_enable != 0U) {
    #line 3281 
    tx_update = hns3_get_new_int_gl(tx_group);
    #line 3282 
    if ((int)tx_update != 0) 
                             #line 3283 
                             hns3_set_vector_coalesce_tx_gl(tqp_vector,(unsigned int)tx_group->coal.int_gl);
  }
  #line 3287 
  tqp_vector->last_jiffies = jiffies;
  #line 3288 
  return;
}

#line 3290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static int hns3_nic_common_poll(struct napi_struct *napi, int budget)
{
  #line 3297 
  void *__mptr;
  #line 3293 
  struct hns3_enet_ring *ring;
  #line 3292 
  struct hns3_nic_priv *priv = netdev_priv(napi->dev);
  #line 3294 
  int rx_pkt_total = 0;
  #line 3297 
  __mptr = (void *)napi;
  #line 3296 
  struct hns3_enet_tqp_vector *tqp_vector = ((struct hns3_enet_tqp_vector *)(__mptr + 18446744073709551584U));
  #line 3298 
  bool clean_complete = (_Bool)1;
  #line 3299 
  int rx_budget = budget;
  #line 3301 
  if ((long)((int)test_bit(3L,& priv->state) != 0) != 0L) {
    #line 3302 
    napi_complete(napi);
    #line 3303 
    return 0;
  }
  #line 3309 
  ring = tqp_vector->tx_group.ring;
  #line 3309 
  while (ring != (struct hns3_enet_ring *)0) {
    #line 3310 
    hns3_clean_tx_ring(ring);
    #line 3309 
    ring = ring->next;
  }
  #line 3313 
  if ((unsigned int)tqp_vector->num_tqps > 1U) {
    #line 3314 
    int __UNIQUE_ID___x569;
    #line 3314 
    int tmp_2;
    {
      #line 3314 
      __UNIQUE_ID___x569 = budget / (int)tqp_vector->num_tqps;
      #line 3314 
      int __UNIQUE_ID___y570 = 1;
      #line 3314 
      if (__UNIQUE_ID___x569 > __UNIQUE_ID___y570) 
                                                   #line 3314 
                                                   tmp_2 = __UNIQUE_ID___x569; else 
                                                                    #line 3314 
                                                                    tmp_2 = __UNIQUE_ID___y570;
      }
    #line 3314 
    rx_budget = tmp_2;
  }
  #line 3316 
  ring = tqp_vector->rx_group.ring;
  #line 3316 
  while (ring != (struct hns3_enet_ring *)0) {
    {
      #line 3317 
      int rx_cleaned = hns3_clean_rx_ring(ring,rx_budget,& hns3_rx_skb);
      #line 3320 
      if (rx_cleaned >= rx_budget) 
                                   #line 3321 
                                   clean_complete = (_Bool)0;
      #line 3323 
      rx_pkt_total += rx_cleaned;
    }
    #line 3316 
    ring = ring->next;
  }
  #line 3326 
  tqp_vector->rx_group.total_packets += (unsigned long long)rx_pkt_total;
  #line 3328 
  if (! clean_complete) 
                        #line 3329 
                        return budget;
  #line 3331 
  if ((int)napi_complete(napi) != 0) {
    #line 3332 
    int tmp_7;
    #line 3332 
    if (test_bit(3L,& priv->state)) 
                                    #line 3332 
                                    tmp_7 = 0; else 
                                                    #line 3332 
                                                    tmp_7 = 1;
    #line 3331 
    if ((long)tmp_7 != 0L) {
      #line 3333 
      hns3_update_new_int_gl(tqp_vector);
      #line 3334 
      hns3_mask_vector_irq(tqp_vector,1U);
    }
  }
  #line 3337 
  return rx_pkt_total;
}

#line 3340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static int hns3_get_vector_ring_chain(struct hns3_enet_tqp_vector *tqp_vector, struct hnae3_ring_chain_node *head)
{
  #line 3345 
  struct hnae3_ring_chain_node *chain;
  #line 3346 
  struct hns3_enet_ring *tx_ring;
  #line 3347 
  struct hns3_enet_ring *rx_ring;
  #line 3343 
  struct pci_dev *pdev = (tqp_vector->handle)->pdev;
  #line 3344 
  struct hnae3_ring_chain_node *cur_chain = head;
  #line 3349 
  tx_ring = tqp_vector->tx_group.ring;
  #line 3350 
  if (tx_ring != (struct hns3_enet_ring *)0) {
    #line 3351 
    cur_chain->tqp_index = (unsigned int)(tx_ring->tqp)->tqp_index;
    #line 3352 
    cur_chain->flag &= 4294967294U;
    #line 3352 
    cur_chain->flag = cur_chain->flag;
    #line 3354 
    cur_chain->int_gl_idx &= 4294967292U;
    #line 3354 
    cur_chain->int_gl_idx |= 1U;
    #line 3357 
    cur_chain->next = (struct hnae3_ring_chain_node *)0;
    #line 3359 
    while (tx_ring->next != (struct hns3_enet_ring *)0) {
      #line 3360 
      tx_ring = tx_ring->next;
      #line 3362 
      chain = (struct hnae3_ring_chain_node *)cif_devm_kzalloc(& pdev->dev,24UL,3264U);
      #line 3364 
      if (chain == (struct hnae3_ring_chain_node *)0) 
                                                      #line 3365 
                                                      goto err_free_chain;
      #line 3367 
      cur_chain->next = chain;
      #line 3368 
      chain->tqp_index = (unsigned int)(tx_ring->tqp)->tqp_index;
      #line 3369 
      chain->flag &= 4294967294U;
      #line 3369 
      chain->flag = chain->flag;
      #line 3371 
      chain->int_gl_idx &= 4294967292U;
      #line 3371 
      chain->int_gl_idx |= 1U;
      #line 3376 
      cur_chain = chain;
    }
  }
  #line 3380 
  rx_ring = tqp_vector->rx_group.ring;
  #line 3381 
  if (tx_ring == (struct hns3_enet_ring *)0 && rx_ring != (struct hns3_enet_ring *)0) {
    #line 3382 
    cur_chain->next = (struct hnae3_ring_chain_node *)0;
    #line 3383 
    cur_chain->tqp_index = (unsigned int)(rx_ring->tqp)->tqp_index;
    #line 3384 
    cur_chain->flag &= 4294967294U;
    #line 3384 
    cur_chain->flag |= 1U;
    #line 3386 
    cur_chain->int_gl_idx &= 4294967292U;
    #line 3386 
    cur_chain->int_gl_idx = cur_chain->int_gl_idx;
    #line 3389 
    rx_ring = rx_ring->next;
  }
  #line 3392 
  while (rx_ring != (struct hns3_enet_ring *)0) {
    #line 3393 
    chain = (struct hnae3_ring_chain_node *)cif_devm_kzalloc(& pdev->dev,24UL,3264U);
    #line 3394 
    if (chain == (struct hnae3_ring_chain_node *)0) 
                                                    #line 3395 
                                                    goto err_free_chain;
    #line 3397 
    cur_chain->next = chain;
    #line 3398 
    chain->tqp_index = (unsigned int)(rx_ring->tqp)->tqp_index;
    #line 3399 
    chain->flag &= 4294967294U;
    #line 3399 
    chain->flag |= 1U;
    #line 3401 
    chain->int_gl_idx &= 4294967292U;
    #line 3401 
    chain->int_gl_idx = chain->int_gl_idx;
    #line 3404 
    cur_chain = chain;
    #line 3406 
    rx_ring = rx_ring->next;
  }
  #line 3409 
  return 0;
  #line 3411 
  err_free_chain: 
                  #line 3411 
  ;
  #line 3412 
  cur_chain = head->next;
  #line 3413 
  while (cur_chain != (struct hnae3_ring_chain_node *)0) {
    #line 3414 
    chain = cur_chain->next;
    #line 3415 
    devm_kfree(& pdev->dev,(void *)cur_chain);
    #line 3416 
    cur_chain = chain;
  }
  #line 3418 
  head->next = (struct hnae3_ring_chain_node *)0;
  #line 3420 
  return -12;
}

#line 3423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static void hns3_free_vector_ring_chain(struct hns3_enet_tqp_vector *tqp_vector, struct hnae3_ring_chain_node *head)
{
  #line 3427 
  struct hnae3_ring_chain_node *chain_tmp;
  #line 3427 
  struct hnae3_ring_chain_node *chain;
  #line 3426 
  struct pci_dev *pdev = (tqp_vector->handle)->pdev;
  #line 3429 
  chain = head->next;
  #line 3431 
  while (chain != (struct hnae3_ring_chain_node *)0) {
    #line 3432 
    chain_tmp = chain->next;
    #line 3433 
    devm_kfree(& pdev->dev,(void *)chain);
    #line 3434 
    chain = chain_tmp;
  }
  #line 3436 
  return;
}

#line 3438  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static void hns3_add_ring_to_group(struct hns3_enet_ring_group *group, struct hns3_enet_ring *ring)
{
  #line 3441 
  ring->next = group->ring;
  #line 3442 
  group->ring = ring;
  #line 3444 
  group->count = (u16)((int)group->count + 1);
  #line 3445 
  return;
}

#line 3447  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static void hns3_nic_set_cpumask(struct hns3_nic_priv *priv)
{
  #line 3450 
  struct hns3_enet_tqp_vector *tqp_vector;
  #line 3452 
  int numa_node;
  #line 3453 
  int vector_i;
  #line 3449 
  struct pci_dev *pdev = (priv->ae_handle)->pdev;
  #line 3451 
  int num_vectors = (int)priv->vector_num;
  #line 3455 
  numa_node = dev_to_node(& pdev->dev);
  #line 3457 
  vector_i = 0;
  #line 3457 
  while (vector_i < num_vectors) {
    {
      #line 3458 
      tqp_vector = priv->tqp_vector + (unsigned long)vector_i;
      #line 3459 
      ;
      #line 3459 
      cpumask_set_cpu(cpumask_local_spread((unsigned int)vector_i,numa_node),& tqp_vector->affinity_mask);
    }
    #line 3457 
    vector_i ++;
  }
  #line 3462 
  return;
}

#line 3464  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static int hns3_nic_init_vector_data(struct hns3_nic_priv *priv)
{
  #line 3466 
  struct hnae3_ring_chain_node vector_ring_chain;
  #line 3468 
  struct hns3_enet_tqp_vector *tqp_vector;
  #line 3470 
  int i;
  #line 3467 
  struct hnae3_handle *h = priv->ae_handle;
  #line 3469 
  int ret = 0;
  #line 3472 
  hns3_nic_set_cpumask(priv);
  #line 3474 
  i = 0;
  #line 3474 
  while ((int)priv->vector_num > i) {
    #line 3475 
    tqp_vector = priv->tqp_vector + (unsigned long)i;
    #line 3476 
    hns3_vector_gl_rl_init_hw(tqp_vector,priv);
    #line 3477 
    tqp_vector->num_tqps = (unsigned short)0U;
    #line 3474 
    i ++;
  }
  #line 3480 
  i = 0;
  #line 3480 
  while ((int)h->__anonCompField_hnae3_handle_215.kinfo.num_tqps > i) {
    {
      #line 3481 
      u16 vector_i = (unsigned short)(i % (int)priv->vector_num);
      #line 3482 
      u16 tqp_num = h->__anonCompField_hnae3_handle_215.kinfo.num_tqps;
      #line 3484 
      tqp_vector = priv->tqp_vector + (unsigned long)vector_i;
      #line 3486 
      hns3_add_ring_to_group(& tqp_vector->tx_group,priv->ring + (unsigned long)i);
      #line 3489 
      hns3_add_ring_to_group(& tqp_vector->rx_group,priv->ring + (unsigned long)((int)tqp_num + i));
      #line 3492 
      (priv->ring + (unsigned long)i)->tqp_vector = tqp_vector;
      #line 3493 
      (priv->ring + (unsigned long)((int)tqp_num + i))->tqp_vector = tqp_vector;
      #line 3494 
      tqp_vector->num_tqps = (u16)((int)tqp_vector->num_tqps + 1);
    }
    #line 3480 
    i ++;
  }
  #line 3497 
  i = 0;
  #line 3497 
  while ((int)priv->vector_num > i) {
    #line 3498 
    tqp_vector = priv->tqp_vector + (unsigned long)i;
    #line 3500 
    tqp_vector->rx_group.total_bytes = 0ULL;
    #line 3501 
    tqp_vector->rx_group.total_packets = 0ULL;
    #line 3502 
    tqp_vector->tx_group.total_bytes = 0ULL;
    #line 3503 
    tqp_vector->tx_group.total_packets = 0ULL;
    #line 3504 
    tqp_vector->handle = h;
    #line 3506 
    ret = hns3_get_vector_ring_chain(tqp_vector,& vector_ring_chain);
    #line 3508 
    if (ret != 0) 
                  #line 3509 
                  goto map_ring_fail;
    #line 3511 
    ret = (*(((h->ae_algo)->ops)->map_ring_to_vector))(h,tqp_vector->vector_irq,& vector_ring_chain);
    #line 3514 
    hns3_free_vector_ring_chain(tqp_vector,& vector_ring_chain);
    #line 3516 
    if (ret != 0) 
                  #line 3517 
                  goto map_ring_fail;
    #line 3519 
    netif_napi_add(priv->netdev,& tqp_vector->napi,& hns3_nic_common_poll,64);
    #line 3497 
    i ++;
  }
  #line 3523 
  return 0;
  #line 3525 
  map_ring_fail: 
                 #line 3525 
  ;
  #line 3526 
  while (1) {
    #line 3526 
    int tmp;
    #line 3526 
    tmp = i;
    #line 3526 
    i --;
    #line 3526 
    ;
    #line 3526 
    if (! (tmp != 0)) 
                      #line 3526 
                      break;
    #line 3527 
    netif_napi_del(& (priv->tqp_vector + (unsigned long)i)->napi);
  }
  #line 3529 
  return ret;
}

#line 3532  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static int hns3_nic_alloc_vector_data(struct hns3_nic_priv *priv)
{
  #line 3547 
  int tmp_0;
  #line 3548 
  unsigned short __UNIQUE_ID___x573;
  #line 3548 
  int tmp_2;
  #line 3547 
  unsigned short __UNIQUE_ID___x571;
  #line 3537 
  struct hns3_enet_tqp_vector *tqp_vector;
  #line 3538 
  struct hnae3_vector_info *vector;
  #line 3541 
  u16 vector_num;
  #line 3543 
  u16 i;
  #line 3536 
  struct hnae3_handle *h = priv->ae_handle;
  #line 3539 
  struct pci_dev *pdev = h->pdev;
  #line 3540 
  u16 tqp_num = h->__anonCompField_hnae3_handle_215.kinfo.num_tqps;
  #line 3542 
  int ret = 0;
  {
    #line 3547 
    __UNIQUE_ID___x571 = (unsigned short)num_online_cpus();
    #line 3547 
    unsigned short __UNIQUE_ID___y572 = tqp_num;
    #line 3547 
    if ((int)__UNIQUE_ID___x571 < (int)__UNIQUE_ID___y572) 
                                                           #line 3547 
                                                           tmp_0 = (int)__UNIQUE_ID___x571; else 
                                                                    #line 3547 
                                                                    tmp_0 = (int)__UNIQUE_ID___y572;
    }
  #line 3547 
  vector_num = (unsigned short)tmp_0;
  {
    #line 3548 
    __UNIQUE_ID___x573 = vector_num;
    #line 3548 
    unsigned short __UNIQUE_ID___y574 = (unsigned short)64U;
    #line 3548 
    if ((int)__UNIQUE_ID___x573 < (int)__UNIQUE_ID___y574) 
                                                           #line 3548 
                                                           tmp_2 = (int)__UNIQUE_ID___x573; else 
                                                                    #line 3548 
                                                                    tmp_2 = (int)__UNIQUE_ID___y574;
    }
  #line 3548 
  vector_num = (unsigned short)tmp_2;
  #line 3550 
  vector = (struct hnae3_vector_info *)cif_devm_kcalloc(& pdev->dev,(unsigned long)vector_num,16UL,3264U);
  #line 3552 
  if (vector == (struct hnae3_vector_info *)0) 
                                               #line 3553 
                                               return -12;
  #line 3556 
  vector_num = (unsigned short)(*(((h->ae_algo)->ops)->get_vector))(h,
                                             (unsigned short)((int)vector_num),
                                             vector);
  #line 3558 
  priv->vector_num = vector_num;
  #line 3559 
  priv->tqp_vector = (struct hns3_enet_tqp_vector *)cif_devm_kcalloc(& pdev->dev,(unsigned long)vector_num,4096UL,3264U);
  #line 3562 
  if (priv->tqp_vector == (struct hns3_enet_tqp_vector *)0) {
    #line 3563 
    ret = -12;
    #line 3564 
    goto out;
  }
  #line 3567 
  i = (unsigned short)0U;
  #line 3567 
  while ((int)priv->vector_num > (int)i) {
    #line 3568 
    tqp_vector = priv->tqp_vector + (unsigned long)i;
    #line 3569 
    tqp_vector->idx = i;
    #line 3570 
    tqp_vector->mask_addr = (vector + (unsigned long)i)->io_addr;
    #line 3571 
    tqp_vector->vector_irq = (vector + (unsigned long)i)->vector;
    #line 3572 
    hns3_vector_gl_rl_init(tqp_vector,priv);
    #line 3567 
    i = (u16)((int)i + 1);
  }
  #line 3575 
  out: 
       #line 3575 
  ;
  #line 3576 
  devm_kfree(& pdev->dev,(void *)vector);
  #line 3577 
  return ret;
}

#line 3580  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static void hns3_clear_ring_group(struct hns3_enet_ring_group *group)
{
  #line 3582 
  group->ring = (struct hns3_enet_ring *)0;
  #line 3583 
  group->count = (unsigned short)0U;
  #line 3584 
  return;
}

#line 3586  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static void hns3_nic_uninit_vector_data(struct hns3_nic_priv *priv)
{
  #line 3588 
  struct hnae3_ring_chain_node vector_ring_chain;
  #line 3590 
  struct hns3_enet_tqp_vector *tqp_vector;
  #line 3591 
  int i;
  #line 3589 
  struct hnae3_handle *h = priv->ae_handle;
  #line 3593 
  i = 0;
  #line 3593 
  while ((int)priv->vector_num > i) {
    #line 3594 
    tqp_vector = priv->tqp_vector + (unsigned long)i;
    #line 3596 
    if (tqp_vector->rx_group.ring == (struct hns3_enet_ring *)0 && tqp_vector->tx_group.ring == (struct hns3_enet_ring *)0) 
      #line 3597 
      goto __Cont;
    #line 3599 
    hns3_get_vector_ring_chain(tqp_vector,& vector_ring_chain);
    #line 3601 
    (*(((h->ae_algo)->ops)->unmap_ring_from_vector))(h,tqp_vector->vector_irq,& vector_ring_chain);
    #line 3604 
    hns3_free_vector_ring_chain(tqp_vector,& vector_ring_chain);
    #line 3606 
    if (tqp_vector->irq_init_flag == 1) {
      #line 3607 
      irq_set_affinity_hint((unsigned int)tqp_vector->vector_irq,(struct cpumask *)0);
      #line 3608 
      cif_free_irq((unsigned int)tqp_vector->vector_irq,(void *)tqp_vector);
      #line 3609 
      tqp_vector->irq_init_flag = 0;
    }
    #line 3612 
    hns3_clear_ring_group(& tqp_vector->rx_group);
    #line 3613 
    hns3_clear_ring_group(& tqp_vector->tx_group);
    #line 3614 
    netif_napi_del(& (priv->tqp_vector + (unsigned long)i)->napi);
    #line 3593 
    __Cont: 
            #line 3593 
    i ++;
  }
  #line 3616 
  return;
}

#line 3618  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static int hns3_nic_dealloc_vector_data(struct hns3_nic_priv *priv)
{
  #line 3622 
  int i;
  #line 3622 
  int ret;
  #line 3620 
  struct hnae3_handle *h = priv->ae_handle;
  #line 3621 
  struct pci_dev *pdev = h->pdev;
  #line 3624 
  i = 0;
  #line 3624 
  while ((int)priv->vector_num > i) {
    {
      #line 3625 
      struct hns3_enet_tqp_vector *tqp_vector;
      #line 3627 
      tqp_vector = priv->tqp_vector + (unsigned long)i;
      #line 3628 
      ret = (*(((h->ae_algo)->ops)->put_vector))(h,tqp_vector->vector_irq);
      #line 3629 
      if (ret != 0) 
                    #line 3630 
                    return ret;
    }
    #line 3624 
    i ++;
  }
  #line 3633 
  devm_kfree(& pdev->dev,(void *)priv->tqp_vector);
  #line 3634 
  return 0;
}

#line 3637  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static void hns3_ring_get_cfg(struct hnae3_queue *q, struct hns3_nic_priv *priv, unsigned int ring_type)
{
  #line 3641 
  struct hns3_enet_ring *ring;
  #line 3642 
  int desc_num;
  #line 3640 
  int queue_num = (int)(priv->ae_handle)->__anonCompField_hnae3_handle_215.kinfo.num_tqps;
  #line 3644 
  if (ring_type == 0U) {
    #line 3645 
    ring = priv->ring + (unsigned long)q->tqp_index;
    #line 3646 
    desc_num = (int)(priv->ae_handle)->__anonCompField_hnae3_handle_215.kinfo.num_tx_desc;
    #line 3647 
    ring->queue_index = q->tqp_index;
    #line 3648 
    ring->io_base = (u8 *)q->io_base + 64U;
  }
  else {
    #line 3650 
    ring = priv->ring + (unsigned long)(q->tqp_index + queue_num);
    #line 3651 
    desc_num = (int)(priv->ae_handle)->__anonCompField_hnae3_handle_215.kinfo.num_rx_desc;
    #line 3652 
    ring->queue_index = q->tqp_index;
    #line 3653 
    ring->io_base = (u8 *)q->io_base;
  }
  #line 3656 
  ring->flag &= 4294967294U;
  #line 3656 
  ring->flag |= ring_type & 1U;
  #line 3658 
  ring->tqp = q;
  #line 3659 
  ring->desc = (struct hns3_desc *)0;
  #line 3660 
  ring->desc_cb = (struct hns3_desc_cb *)0;
  #line 3661 
  ring->dev = priv->dev;
  #line 3662 
  ring->desc_dma_addr = 0ULL;
  #line 3663 
  ring->buf_size = q->buf_size;
  #line 3664 
  ring->desc_num = (unsigned short)desc_num;
  #line 3665 
  ring->next_to_use = 0;
  #line 3666 
  ring->next_to_clean = 0;
  #line 3667 
  return;
}

#line 3669  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static void hns3_queue_to_ring(struct hnae3_queue *tqp, struct hns3_nic_priv *priv)
{
  #line 3672 
  hns3_ring_get_cfg(tqp,priv,0U);
  #line 3673 
  hns3_ring_get_cfg(tqp,priv,1U);
  #line 3674 
  return;
}

#line 3676  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static int hns3_get_ring_config(struct hns3_nic_priv *priv)
{
  #line 3680 
  int i;
  #line 3678 
  struct hnae3_handle *h = priv->ae_handle;
  #line 3679 
  struct pci_dev *pdev = h->pdev;
  #line 3682 
  ;
  #line 3682 
  priv->ring = (struct hns3_enet_ring *)cif_devm_kzalloc(& pdev->dev,
                         array3_size((unsigned long)h->__anonCompField_hnae3_handle_215.kinfo.num_tqps,
                  4096UL,2UL),
                         3264U);
  #line 3686 
  if (priv->ring == (struct hns3_enet_ring *)0) 
                                                #line 3687 
                                                return -12;
  #line 3689 
  i = 0;
  #line 3689 
  while ((int)h->__anonCompField_hnae3_handle_215.kinfo.num_tqps > i) {
    #line 3690 
    hns3_queue_to_ring(*(h->__anonCompField_hnae3_handle_215.kinfo.tqp + (unsigned long)i),priv);
    #line 3689 
    i ++;
  }
  #line 3692 
  return 0;
}

#line 3695  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static void hns3_put_ring_config(struct hns3_nic_priv *priv)
{
  #line 3697 
  if (priv->ring == (struct hns3_enet_ring *)0) 
                                                #line 3698 
                                                return;
  #line 3700 
  devm_kfree(priv->dev,(void *)priv->ring);
  #line 3701 
  priv->ring = (struct hns3_enet_ring *)0;
  #line 3702 
  return;
}

#line 3704  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static int hns3_alloc_ring_memory(struct hns3_enet_ring *ring)
{
  #line 3706 
  int ret;
  #line 3708 
  if ((unsigned int)ring->desc_num == 0U || ring->buf_size == 0U) 
                                                                  #line 3709 
                                                                  return -22;
  #line 3711 
  ring->desc_cb = (struct hns3_desc_cb *)cif_devm_kcalloc(ring->dev,(unsigned long)ring->desc_num,40UL,3264U);
  #line 3713 
  if (ring->desc_cb == (struct hns3_desc_cb *)0) {
    #line 3714 
    ret = -12;
    #line 3715 
    goto out;
  }
  #line 3718 
  ret = hns3_alloc_desc(ring);
  #line 3719 
  if (ret != 0) 
                #line 3720 
                goto out_with_desc_cb;
  #line 3722 
  if ((ring->flag & 1U) != 0U) {
    #line 3723 
    ret = hns3_alloc_ring_buffers(ring);
    #line 3724 
    if (ret != 0) 
                  #line 3725 
                  goto out_with_desc;
  }
  #line 3728 
  return 0;
  #line 3730 
  out_with_desc: 
                 #line 3730 
  ;
  #line 3731 
  hns3_free_desc(ring);
  #line 3732 
  out_with_desc_cb: 
                    #line 3732 
  ;
  #line 3733 
  devm_kfree(ring->dev,(void *)ring->desc_cb);
  #line 3734 
  ring->desc_cb = (struct hns3_desc_cb *)0;
  #line 3735 
  out: 
       #line 3735 
  ;
  #line 3736 
  return ret;
}

#line 3739  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
void hns3_fini_ring(struct hns3_enet_ring *ring)
{
  #line 3741 
  hns3_free_desc(ring);
  #line 3742 
  devm_kfree(ring->dev,(void *)ring->desc_cb);
  #line 3743 
  ring->desc_cb = (struct hns3_desc_cb *)0;
  #line 3744 
  ring->next_to_clean = 0;
  #line 3745 
  ring->next_to_use = 0;
  #line 3746 
  ring->pending_buf = 0;
  #line 3747 
  if (ring->skb != (struct sk_buff *)0) {
    #line 3748 
    dev_kfree_skb_any(ring->skb);
    #line 3749 
    ring->skb = (struct sk_buff *)0;
  }
  #line 3751 
  return;
}

#line 3753  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static int hns3_buf_size2type(u32 buf_size)
{
  #line 3755 
  int bd_size_type;
  #line 3757 
  switch (buf_size) {
    #line 3758 
    case (u32)512: 
                   #line 3758 
    ;
    #line 3759 
    bd_size_type = 0;
    #line 3760 
    break;
    #line 3761 
    case (u32)1024: 
                    #line 3761 
    ;
    #line 3762 
    bd_size_type = 1;
    #line 3763 
    break;
    #line 3764 
    case (u32)2048: 
                    #line 3764 
    ;
    #line 3765 
    bd_size_type = 2;
    #line 3766 
    break;
    #line 3767 
    case (u32)4096: 
                    #line 3767 
    ;
    #line 3768 
    bd_size_type = 3;
    #line 3769 
    break;
    #line 3770 
    default: 
             #line 3770 
    ;
    #line 3771 
    bd_size_type = 2;
  }
  #line 3774 
  return bd_size_type;
}

#line 3777  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static void hns3_init_ring_hw(struct hns3_enet_ring *ring)
{
  #line 3779 
  dma_addr_t dma = ring->desc_dma_addr;
  #line 3780 
  struct hnae3_queue *q = ring->tqp;
  #line 3782 
  if ((ring->flag & 1U) != 0U) {
    #line 3783 
    hns3_write_reg(q->io_base,0U,(unsigned int)dma);
    #line 3784 
    hns3_write_reg(q->io_base,4U,(unsigned int)(dma >> 32));
    #line 3787 
    ;
    #line 3787 
    hns3_write_reg(q->io_base,12U,(unsigned int)hns3_buf_size2type(ring->buf_size));
    #line 3789 
    hns3_write_reg(q->io_base,8U,(unsigned int)((int)((unsigned int)ring->desc_num / 8U) + -1));
  }
  else {
    #line 3793 
    hns3_write_reg(q->io_base,64U,(unsigned int)dma);
    #line 3795 
    hns3_write_reg(q->io_base,68U,(unsigned int)(dma >> 32));
    #line 3798 
    hns3_write_reg(q->io_base,72U,(unsigned int)((int)((unsigned int)ring->desc_num / 8U) + -1));
  }
  #line 3800 
  return;
}

#line 3803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static void hns3_init_tx_ring_tc(struct hns3_nic_priv *priv)
{
  #line 3806 
  int i;
  #line 3805 
  struct hnae3_knic_private_info *kinfo = & (priv->ae_handle)->__anonCompField_hnae3_handle_215.kinfo;
  #line 3808 
  i = 0;
  #line 3808 
  while (i <= 7) {
    {
      #line 3810 
      int j;
      #line 3809 
      struct hnae3_tc_info *tc_info = & kinfo->tc_info[i];
      #line 3812 
      if (! tc_info->enable) 
                             #line 3813 
                             goto __Cont;
      #line 3815 
      j = 0;
      #line 3815 
      while ((int)tc_info->tqp_count > j) {
        {
          #line 3816 
          struct hnae3_queue *q;
          #line 3818 
          q = (priv->ring + (unsigned long)((int)tc_info->tqp_offset + j))->tqp;
          #line 3819 
          hns3_write_reg(q->io_base,80U,(unsigned int)tc_info->tc);
        }
        #line 3815 
        j ++;
      }
    }
    #line 3808 
    __Cont: 
            #line 3808 
    i ++;
  }
  #line 3822 
  return;
}

#line 3825  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
int hns3_init_all_ring(struct hns3_nic_priv *priv)
{
  #line 3829 
  int i;
  #line 3829 
  int j;
  #line 3830 
  int ret;
  #line 3827 
  struct hnae3_handle *h = priv->ae_handle;
  #line 3828 
  int ring_num = (int)h->__anonCompField_hnae3_handle_215.kinfo.num_tqps * 2;
  #line 3832 
  i = 0;
  #line 3832 
  while (i < ring_num) {
    #line 3833 
    ret = hns3_alloc_ring_memory(priv->ring + (unsigned long)i);
    #line 3834 
    if (ret != 0) {
      #line 3835 
      _dev_err(priv->dev,(char *)"Alloc ring memory fail! ret=%d\n",ret);
      #line 3837 
      goto out_when_alloc_ring_memory;
    }
    #line 3840 
    u64_stats_init(& (priv->ring + (unsigned long)i)->syncp);
    #line 3832 
    i ++;
  }
  #line 3843 
  return 0;
  #line 3845 
  out_when_alloc_ring_memory: 
                              #line 3845 
  ;
  #line 3846 
  j = i + -1;
  #line 3846 
  while (j >= 0) {
    #line 3847 
    hns3_fini_ring(priv->ring + (unsigned long)j);
    #line 3846 
    j --;
  }
  #line 3849 
  return -12;
}

#line 3852  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
int hns3_uninit_all_ring(struct hns3_nic_priv *priv)
{
  #line 3855 
  int i;
  #line 3854 
  struct hnae3_handle *h = priv->ae_handle;
  #line 3857 
  i = 0;
  #line 3857 
  while ((int)h->__anonCompField_hnae3_handle_215.kinfo.num_tqps > i) {
    #line 3858 
    hns3_fini_ring(priv->ring + (unsigned long)i);
    #line 3859 
    hns3_fini_ring(priv->ring + (unsigned long)((int)h->__anonCompField_hnae3_handle_215.kinfo.num_tqps + i));
    #line 3857 
    i ++;
  }
  #line 3861 
  return 0;
}

#line 3865  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static int hns3_init_mac_addr(struct net_device *netdev)
{
  #line 3869 
  u8 mac_addr_temp[6U];
  #line 3867 
  struct hns3_nic_priv *priv = netdev_priv(netdev);
  #line 3868 
  struct hnae3_handle *h = priv->ae_handle;
  #line 3870 
  int ret = 0;
  #line 3872 
  if (((h->ae_algo)->ops)->get_mac_addr != (void (*)(struct hnae3_handle *, u8 *))0) 
    #line 3873 
    (*(((h->ae_algo)->ops)->get_mac_addr))(h,(u8 *)(& mac_addr_temp));
  #line 3876 
  if (is_valid_ether_addr((u8 *)(& mac_addr_temp))) {
    #line 3881 
    ether_addr_copy(netdev->dev_addr,(u8 *)(& mac_addr_temp));
    #line 3882 
    ether_addr_copy((u8 *)(& netdev->perm_addr),(u8 *)(& mac_addr_temp));
  }
  else {
    #line 3877 
    eth_hw_addr_random(netdev);
    #line 3878 
    _dev_warn(priv->dev,(char *)"using random MAC address %pM\n",netdev->dev_addr);
  }
  #line 3885 
  if (((h->ae_algo)->ops)->set_mac_addr != (int (*)(struct hnae3_handle *, void *, bool ))0) 
    #line 3886 
    ret = (*(((h->ae_algo)->ops)->set_mac_addr))(h,(void *)netdev->dev_addr,(_Bool)1);
  #line 3888 
  return ret;
}

#line 3891  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static int hns3_init_phy(struct net_device *netdev)
{
  #line 3893 
  struct hnae3_handle *h = ((struct hns3_nic_priv *)netdev_priv(netdev))->ae_handle;
  #line 3894 
  int ret = 0;
  #line 3896 
  if (((h->ae_algo)->ops)->mac_connect_phy != (int (*)(struct hnae3_handle *))0) 
    #line 3897 
    ret = (*(((h->ae_algo)->ops)->mac_connect_phy))(h);
  #line 3899 
  return ret;
}

#line 3902  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static void hns3_uninit_phy(struct net_device *netdev)
{
  #line 3904 
  struct hnae3_handle *h = ((struct hns3_nic_priv *)netdev_priv(netdev))->ae_handle;
  #line 3906 
  if (((h->ae_algo)->ops)->mac_disconnect_phy != (void (*)(struct hnae3_handle *))0) 
    #line 3907 
    (*(((h->ae_algo)->ops)->mac_disconnect_phy))(h);
  #line 3908 
  return;
}

#line 3910  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static int hns3_restore_fd_rules(struct net_device *netdev)
{
  #line 3912 
  struct hnae3_handle *h = ((struct hns3_nic_priv *)netdev_priv(netdev))->ae_handle;
  #line 3913 
  int ret = 0;
  #line 3915 
  if (((h->ae_algo)->ops)->restore_fd_rules != (int (*)(struct hnae3_handle *))0) 
    #line 3916 
    ret = (*(((h->ae_algo)->ops)->restore_fd_rules))(h);
  #line 3918 
  return ret;
}

#line 3921  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static void hns3_del_all_fd_rules(struct net_device *netdev, bool clear_list)
{
  #line 3923 
  struct hnae3_handle *h = ((struct hns3_nic_priv *)netdev_priv(netdev))->ae_handle;
  #line 3925 
  if (((h->ae_algo)->ops)->del_all_fd_entries != (void (*)(struct hnae3_handle *, bool ))0) 
    #line 3926 
    (*(((h->ae_algo)->ops)->del_all_fd_entries))(h,(_Bool)((bool)((int)clear_list) != 0));
  #line 3927 
  return;
}

#line 3929  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static int hns3_client_start(struct hnae3_handle *handle)
{
  #line 3931 
  if (((handle->ae_algo)->ops)->client_start == (int (*)(struct hnae3_handle *))0) 
    #line 3932 
    return 0;
  #line 3934 
  return (*(((handle->ae_algo)->ops)->client_start))(handle);
}

#line 3937  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static void hns3_client_stop(struct hnae3_handle *handle)
{
  #line 3939 
  if (((handle->ae_algo)->ops)->client_stop == (void (*)(struct hnae3_handle *))0) 
    #line 3940 
    return;
  #line 3942 
  (*(((handle->ae_algo)->ops)->client_stop))(handle);
  #line 3943 
  return;
}

#line 3945  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static void hns3_info_show(struct hns3_nic_priv *priv)
{
  #line 3947 
  struct hnae3_knic_private_info *kinfo = & (priv->ae_handle)->__anonCompField_hnae3_handle_215.kinfo;
  #line 3949 
  _dev_info(priv->dev,(char *)"MAC address: %pM\n",(priv->netdev)->dev_addr);
  #line 3950 
  _dev_info(priv->dev,(char *)"Task queue pairs numbers: %u\n",(int)kinfo->num_tqps);
  #line 3951 
  _dev_info(priv->dev,(char *)"RSS size: %u\n",(int)kinfo->rss_size);
  #line 3952 
  _dev_info(priv->dev,(char *)"Allocated RSS size: %u\n",(int)kinfo->req_rss_size);
  #line 3953 
  _dev_info(priv->dev,(char *)"RX buffer length: %u\n",(int)kinfo->rx_buf_len);
  #line 3954 
  _dev_info(priv->dev,(char *)"Desc num per TX queue: %u\n",(int)kinfo->num_tx_desc);
  #line 3955 
  _dev_info(priv->dev,(char *)"Desc num per RX queue: %u\n",(int)kinfo->num_rx_desc);
  #line 3956 
  _dev_info(priv->dev,(char *)"Total number of enabled TCs: %u\n",(int)kinfo->num_tc);
  #line 3957 
  _dev_info(priv->dev,(char *)"Max mtu size: %u\n",(priv->netdev)->max_mtu);
  #line 3958 
  return;
}

#line 3960  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static int hns3_client_init(struct hnae3_handle *handle)
{
  #line 3963 
  u16 alloc_tqps;
  #line 3963 
  u16 max_rss_size;
  #line 3964 
  struct hns3_nic_priv *priv;
  #line 3965 
  struct net_device *netdev;
  #line 3966 
  int ret;
  #line 3962 
  struct pci_dev *pdev = handle->pdev;
  #line 3968 
  (*(((handle->ae_algo)->ops)->get_tqps_and_rss_info))(handle,& alloc_tqps,& max_rss_size);
  #line 3970 
  netdev = cif_alloc_etherdev_mqs(296,(unsigned int)alloc_tqps,(unsigned int)alloc_tqps);
  #line 3971 
  if (netdev == (struct net_device *)0) 
                                        #line 3972 
                                        return -12;
  #line 3974 
  priv = (struct hns3_nic_priv *)netdev_priv(netdev);
  #line 3975 
  priv->dev = & pdev->dev;
  #line 3976 
  priv->netdev = netdev;
  #line 3977 
  priv->ae_handle = handle;
  #line 3978 
  priv->tx_timeout_count = 0ULL;
  #line 3979 
  cif_set_bit(3L,& priv->state);
  #line 3981 
  handle->msg_enable = netif_msg_init(debug,54);
  #line 3983 
  handle->__anonCompField_hnae3_handle_215.kinfo.netdev = netdev;
  #line 3984 
  handle->priv = (void *)priv;
  #line 3986 
  hns3_init_mac_addr(netdev);
  #line 3988 
  hns3_set_default_feature(netdev);
  #line 3990 
  netdev->watchdog_timeo = 1250;
  #line 3991 
  netdev->priv_flags |= 4096U;
  #line 3992 
  netdev->netdev_ops = & hns3_nic_netdev_ops;
  #line 3993 
  netdev->dev.parent = & pdev->dev;
  #line 3994 
  hns3_ethtool_set_ops(netdev);
  #line 3997 
  netif_carrier_off(netdev);
  #line 3999 
  ret = hns3_get_ring_config(priv);
  #line 4000 
  if (ret != 0) {
    #line 4001 
    ret = -12;
    #line 4002 
    goto out_get_ring_cfg;
  }
  #line 4005 
  ret = hns3_nic_alloc_vector_data(priv);
  #line 4006 
  if (ret != 0) {
    #line 4007 
    ret = -12;
    #line 4008 
    goto out_alloc_vector_data;
  }
  #line 4011 
  ret = hns3_nic_init_vector_data(priv);
  #line 4012 
  if (ret != 0) {
    #line 4013 
    ret = -12;
    #line 4014 
    goto out_init_vector_data;
  }
  #line 4017 
  ret = hns3_init_all_ring(priv);
  #line 4018 
  if (ret != 0) {
    #line 4019 
    ret = -12;
    #line 4020 
    goto out_init_ring;
  }
  #line 4023 
  ret = hns3_init_phy(netdev);
  #line 4024 
  if (ret != 0) 
                #line 4025 
                goto out_init_phy;
  #line 4027 
  ret = cif_register_netdev(netdev);
  #line 4028 
  if (ret != 0) {
    #line 4029 
    _dev_err(priv->dev,(char *)"probe register netdev fail!\n");
    #line 4030 
    goto out_reg_netdev_fail;
  }
  #line 4033 
  ret = hns3_client_start(handle);
  #line 4034 
  if (ret != 0) {
    #line 4035 
    _dev_err(priv->dev,(char *)"hns3_client_start fail! ret=%d\n",ret);
    #line 4036 
    goto out_client_start;
  }
  #line 4039 
  hns3_dcbnl_setup(handle);
  #line 4041 
  hns3_dbg_init(handle);
  #line 4044 
  netdev->max_mtu = 9702U;
  #line 4046 
  cif_set_bit(2L,& priv->state);
  #line 4048 
  if ((handle->msg_enable & 1U) != 0U) 
                                       #line 4049 
                                       hns3_info_show(priv);
  #line 4051 
  return ret;
  #line 4053 
  out_client_start: 
                    #line 4053 
  ;
  #line 4054 
  cif_unregister_netdev(netdev);
  #line 4055 
  out_reg_netdev_fail: 
                       #line 4055 
  ;
  #line 4056 
  hns3_uninit_phy(netdev);
  #line 4057 
  out_init_phy: 
                #line 4057 
  ;
  #line 4058 
  hns3_uninit_all_ring(priv);
  #line 4059 
  out_init_ring: 
                 #line 4059 
  ;
  #line 4060 
  hns3_nic_uninit_vector_data(priv);
  #line 4061 
  out_init_vector_data: 
                        #line 4061 
  ;
  #line 4062 
  hns3_nic_dealloc_vector_data(priv);
  #line 4063 
  out_alloc_vector_data: 
                         #line 4063 
  ;
  #line 4064 
  priv->ring = (struct hns3_enet_ring *)0;
  #line 4065 
  out_get_ring_cfg: 
                    #line 4065 
  ;
  #line 4066 
  priv->ae_handle = (struct hnae3_handle *)0;
  #line 4067 
  cif_free_netdev(netdev);
  #line 4068 
  return ret;
}

#line 4071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static void hns3_client_uninit(struct hnae3_handle *handle, bool reset)
{
  #line 4075 
  int ret;
  #line 4073 
  struct net_device *netdev = handle->__anonCompField_hnae3_handle_215.kinfo.netdev;
  #line 4074 
  struct hns3_nic_priv *priv = netdev_priv(netdev);
  #line 4077 
  hns3_remove_hw_addr(netdev);
  #line 4079 
  if ((unsigned int)netdev->reg_state != 0U) 
                                             #line 4080 
                                             cif_unregister_netdev(netdev);
  #line 4082 
  hns3_client_stop(handle);
  #line 4084 
  hns3_uninit_phy(netdev);
  #line 4086 
  if (! test_and_set_bit(2L,& priv->state)) {
    #line 4087 
    netdev_warn(netdev,(char *)"already uninitialized\n");
    #line 4088 
    goto out_netdev_free;
  }
  #line 4091 
  hns3_del_all_fd_rules(netdev,(_Bool)1);
  #line 4093 
  hns3_clear_all_ring(handle,(_Bool)1);
  #line 4095 
  hns3_nic_uninit_vector_data(priv);
  #line 4097 
  ret = hns3_nic_dealloc_vector_data(priv);
  #line 4098 
  if (ret != 0) 
                #line 4099 
                netdev_err(netdev,(char *)"dealloc vector error\n");
  #line 4101 
  ret = hns3_uninit_all_ring(priv);
  #line 4102 
  if (ret != 0) 
                #line 4103 
                netdev_err(netdev,(char *)"uninit ring error\n");
  #line 4105 
  hns3_put_ring_config(priv);
  #line 4107 
  hns3_dbg_uninit(handle);
  #line 4109 
  out_netdev_free: 
                   #line 4109 
  ;
  #line 4110 
  cif_free_netdev(netdev);
  #line 4111 
  return;
}

#line 4113  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static void hns3_link_status_change(struct hnae3_handle *handle, bool linkup)
{
  #line 4115 
  struct net_device *netdev = handle->__anonCompField_hnae3_handle_215.kinfo.netdev;
  #line 4117 
  if (netdev == (struct net_device *)0) 
                                        #line 4118 
                                        return;
  #line 4120 
  if ((int)linkup != 0) {
    #line 4121 
    netif_carrier_on(netdev);
    #line 4122 
    netif_tx_wake_all_queues(netdev);
    #line 4123 
    if ((handle->msg_enable & 4U) != 0U) 
                                         #line 4124 
                                         netdev_info(netdev,(char *)"link up\n");
  }
  else {
    #line 4126 
    netif_carrier_off(netdev);
    #line 4127 
    netif_tx_stop_all_queues(netdev);
    #line 4128 
    if ((handle->msg_enable & 4U) != 0U) 
                                         #line 4129 
                                         netdev_info(netdev,(char *)"link down\n");
  }
  #line 4131 
  return;
}

#line 4133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static int hns3_client_setup_tc(struct hnae3_handle *handle, u8 tc)
{
  #line 4135 
  struct hnae3_knic_private_info *kinfo = & handle->__anonCompField_hnae3_handle_215.kinfo;
  #line 4136 
  struct net_device *ndev = kinfo->netdev;
  #line 4138 
  if ((unsigned int)tc > 8U) 
                             #line 4139 
                             return -22;
  #line 4141 
  if (ndev == (struct net_device *)0) 
                                      #line 4142 
                                      return -19;
  #line 4144 
  return hns3_nic_set_real_num_queue(ndev);
}

#line 4147  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static int hns3_recover_hw_addr(struct net_device *ndev)
{
  #line 4156 
  void *__mptr_0;
  #line 4164 
  void *__mptr_2;
  #line 4156 
  void *__mptr;
  #line 4164 
  void *__mptr_3;
  #line 4149 
  struct netdev_hw_addr_list *list;
  #line 4150 
  struct netdev_hw_addr *ha;
  #line 4150 
  struct netdev_hw_addr *tmp;
  #line 4151 
  int ret = 0;
  #line 4153 
  netif_addr_lock_bh(ndev);
  #line 4155 
  list = & ndev->uc;
  #line 4156 
  __mptr = (void *)list->list.next;
  #line 4156 
  ha = ((struct netdev_hw_addr *)__mptr);
  #line 4156 
  __mptr_0 = (void *)ha->list.next;
  #line 4157 
  tmp = ((struct netdev_hw_addr *)__mptr_0);
  #line 4156 
  while ((void *)ha != (void *)list) {
    #line 4156 
    void *__mptr_1;
    #line 4157 
    ret = hns3_nic_uc_sync(ndev,(unsigned char *)(& ha->addr));
    #line 4158 
    if (ret != 0) 
                  #line 4159 
                  goto out;
    #line 4156 
    ha = tmp;
    #line 4156 
    __mptr_1 = (void *)tmp->list.next;
    #line 4156 
    tmp = ((struct netdev_hw_addr *)__mptr_1);
  }
  #line 4163 
  list = & ndev->mc;
  #line 4164 
  __mptr_2 = (void *)list->list.next;
  #line 4164 
  ha = ((struct netdev_hw_addr *)__mptr_2);
  #line 4164 
  __mptr_3 = (void *)ha->list.next;
  #line 4165 
  tmp = ((struct netdev_hw_addr *)__mptr_3);
  #line 4164 
  while ((void *)ha != (void *)list) {
    #line 4164 
    void *__mptr_4;
    #line 4165 
    ret = hns3_nic_mc_sync(ndev,(unsigned char *)(& ha->addr));
    #line 4166 
    if (ret != 0) 
                  #line 4167 
                  goto out;
    #line 4164 
    ha = tmp;
    #line 4164 
    __mptr_4 = (void *)tmp->list.next;
    #line 4164 
    tmp = ((struct netdev_hw_addr *)__mptr_4);
  }
  #line 4170 
  out: 
       #line 4170 
  ;
  #line 4171 
  netif_addr_unlock_bh(ndev);
  #line 4172 
  return ret;
}

#line 4175  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static void hns3_remove_hw_addr(struct net_device *netdev)
{
  #line 4185 
  void *__mptr;
  #line 4190 
  void *__mptr_3;
  #line 4185 
  void *__mptr_0;
  #line 4190 
  void *__mptr_2;
  #line 4177 
  struct netdev_hw_addr_list *list;
  #line 4178 
  struct netdev_hw_addr *ha;
  #line 4178 
  struct netdev_hw_addr *tmp;
  #line 4180 
  hns3_nic_uc_unsync(netdev,netdev->dev_addr);
  #line 4182 
  netif_addr_lock_bh(netdev);
  #line 4184 
  list = & netdev->uc;
  #line 4185 
  __mptr = (void *)list->list.next;
  #line 4185 
  ha = ((struct netdev_hw_addr *)__mptr);
  #line 4185 
  __mptr_0 = (void *)ha->list.next;
  #line 4186 
  tmp = ((struct netdev_hw_addr *)__mptr_0);
  #line 4185 
  while ((void *)ha != (void *)list) {
    #line 4185 
    void *__mptr_1;
    #line 4186 
    hns3_nic_uc_unsync(netdev,(unsigned char *)(& ha->addr));
    #line 4185 
    ha = tmp;
    #line 4185 
    __mptr_1 = (void *)tmp->list.next;
    #line 4185 
    tmp = ((struct netdev_hw_addr *)__mptr_1);
  }
  #line 4189 
  list = & netdev->mc;
  #line 4190 
  __mptr_2 = (void *)list->list.next;
  #line 4190 
  ha = ((struct netdev_hw_addr *)__mptr_2);
  #line 4190 
  __mptr_3 = (void *)ha->list.next;
  #line 4191 
  tmp = ((struct netdev_hw_addr *)__mptr_3);
  #line 4190 
  while ((void *)ha != (void *)list) {
    #line 4190 
    void *__mptr_4;
    #line 4191 
    if (ha->refcount > 1) 
                          #line 4192 
                          hns3_nic_mc_unsync(netdev,(unsigned char *)(& ha->addr));
    #line 4190 
    ha = tmp;
    #line 4190 
    __mptr_4 = (void *)tmp->list.next;
    #line 4190 
    tmp = ((struct netdev_hw_addr *)__mptr_4);
  }
  #line 4194 
  netif_addr_unlock_bh(netdev);
  #line 4195 
  return;
}

#line 4197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static void hns3_clear_tx_ring(struct hns3_enet_ring *ring)
{
  #line 4199 
  while (ring->next_to_clean != ring->next_to_use) {
    #line 4200 
    (ring->desc + (unsigned long)ring->next_to_clean)->__anonCompField_hns3_desc_222.tx.bdtp_fe_sc_vld_ra_ri = (unsigned short)0U;
    #line 4201 
    hns3_free_buffer_detach(ring,ring->next_to_clean);
    #line 4202 
    ring->next_to_clean = (ring->next_to_clean + 1) % (int)ring->desc_num;
  }
  #line 4204 
  return;
}

#line 4206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static int hns3_clear_rx_ring(struct hns3_enet_ring *ring)
{
  #line 4208 
  struct hns3_desc_cb res_cbs;
  #line 4209 
  int ret;
  #line 4211 
  while (ring->next_to_use != ring->next_to_clean) {
    #line 4216 
    if ((unsigned int)(ring->desc_cb + (unsigned long)ring->next_to_use)->reuse_flag == 0U) {
      #line 4217 
      ret = hns3_reserve_buffer_map(ring,& res_cbs);
      #line 4218 
      if (ret != 0) {
        #line 4219 
        u64_stats_init(& ring->syncp);
        #line 4220 
        (ring->stats.sw_err_cnt) ++;
        #line 4221 
        u64_stats_init(& ring->syncp);
        #line 4225 
        netdev_warn((ring->tqp_vector)->napi.dev,(char *)"reserve buffer map failed, ret = %d\n",ret);
        #line 4228 
        return ret;
      }
      #line 4230 
      hns3_replace_buffer(ring,ring->next_to_use,& res_cbs);
    }
    #line 4232 
    ring->next_to_use = (ring->next_to_use + 1) % (int)ring->desc_num;
  }
  #line 4236 
  if (ring->skb != (struct sk_buff *)0) {
    #line 4237 
    dev_kfree_skb_any(ring->skb);
    #line 4238 
    ring->skb = (struct sk_buff *)0;
    #line 4239 
    ring->pending_buf = 0;
  }
  #line 4242 
  return 0;
}

#line 4245  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static void hns3_force_clear_rx_ring(struct hns3_enet_ring *ring)
{
  #line 4247 
  while (ring->next_to_use != ring->next_to_clean) {
    #line 4252 
    if ((unsigned int)(ring->desc_cb + (unsigned long)ring->next_to_use)->reuse_flag == 0U) {
      #line 4253 
      hns3_unmap_buffer(ring,ring->desc_cb + (unsigned long)ring->next_to_use);
      #line 4255 
      (ring->desc_cb + (unsigned long)ring->next_to_use)->dma = 0ULL;
    }
    #line 4258 
    ring->next_to_use = (ring->next_to_use + 1) % (int)ring->desc_num;
  }
  #line 4260 
  return;
}

#line 4262  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static void hns3_clear_all_ring(struct hnae3_handle *h, bool force)
{
  #line 4266 
  u32 i;
  #line 4264 
  struct net_device *ndev = h->__anonCompField_hnae3_handle_215.kinfo.netdev;
  #line 4265 
  struct hns3_nic_priv *priv = netdev_priv(ndev);
  #line 4268 
  i = 0U;
  #line 4268 
  while ((unsigned int)h->__anonCompField_hnae3_handle_215.kinfo.num_tqps > i) {
    {
      #line 4269 
      struct hns3_enet_ring *ring;
      #line 4271 
      ring = priv->ring + (unsigned long)i;
      #line 4272 
      hns3_clear_tx_ring(ring);
      #line 4274 
      ring = priv->ring + (unsigned long)((unsigned int)h->__anonCompField_hnae3_handle_215.kinfo.num_tqps + i);
      #line 4278 
      if ((int)force != 0) 
                           #line 4279 
                           hns3_force_clear_rx_ring(ring); else 
                                                                #line 4281 
                                                                hns3_clear_rx_ring(ring);
    }
    #line 4268 
    i ++;
  }
  #line 4283 
  return;
}

#line 4285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
int hns3_nic_reset_all_ring(struct hnae3_handle *h)
{
  #line 4289 
  struct hns3_enet_ring *rx_ring;
  #line 4290 
  int i;
  #line 4290 
  int j;
  #line 4291 
  int ret;
  #line 4287 
  struct net_device *ndev = h->__anonCompField_hnae3_handle_215.kinfo.netdev;
  #line 4288 
  struct hns3_nic_priv *priv = netdev_priv(ndev);
  #line 4293 
  i = 0;
  #line 4293 
  while ((int)h->__anonCompField_hnae3_handle_215.kinfo.num_tqps > i) {
    #line 4294 
    ret = (*(((h->ae_algo)->ops)->reset_queue))(h,(unsigned short)((int)((unsigned short)i)));
    #line 4295 
    if (ret != 0) 
                  #line 4296 
                  return ret;
    #line 4298 
    hns3_init_ring_hw(priv->ring + (unsigned long)i);
    #line 4303 
    hns3_clear_tx_ring(priv->ring + (unsigned long)i);
    #line 4304 
    (priv->ring + (unsigned long)i)->next_to_clean = 0;
    #line 4305 
    (priv->ring + (unsigned long)i)->next_to_use = 0;
    #line 4307 
    rx_ring = priv->ring + (unsigned long)((int)h->__anonCompField_hnae3_handle_215.kinfo.num_tqps + i);
    #line 4308 
    hns3_init_ring_hw(rx_ring);
    #line 4309 
    ret = hns3_clear_rx_ring(rx_ring);
    #line 4310 
    if (ret != 0) 
                  #line 4311 
                  return ret;
    #line 4316 
    j = 0;
    #line 4316 
    while ((int)rx_ring->desc_num > j) {
      #line 4317 
      hns3_reuse_buffer(rx_ring,j);
      #line 4316 
      j ++;
    }
    #line 4319 
    rx_ring->next_to_clean = 0;
    #line 4320 
    rx_ring->next_to_use = 0;
    #line 4293 
    i ++;
  }
  #line 4323 
  hns3_init_tx_ring_tc(priv);
  #line 4325 
  return 0;
}

#line 4328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static void hns3_store_coal(struct hns3_nic_priv *priv)
{
  #line 4334 
  memcpy((void *)(& priv->tx_coal),(void *)(& (priv->tqp_vector)->tx_group.coal),8UL);
  #line 4336 
  memcpy((void *)(& priv->rx_coal),(void *)(& (priv->tqp_vector)->rx_group.coal),8UL);
  #line 4337 
  return;
}

#line 4340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static void hns3_restore_coal(struct hns3_nic_priv *priv)
{
  #line 4343 
  int i;
  #line 4342 
  u16 vector_num = priv->vector_num;
  #line 4345 
  i = 0;
  #line 4345 
  while ((int)vector_num > i) {
    #line 4346 
    memcpy((void *)(& (priv->tqp_vector + (unsigned long)i)->tx_group.coal),(void *)(& priv->tx_coal),8UL);
    #line 4348 
    memcpy((void *)(& (priv->tqp_vector + (unsigned long)i)->rx_group.coal),(void *)(& priv->rx_coal),8UL);
    #line 4345 
    i ++;
  }
  #line 4350 
  return;
}

#line 4353  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static int hns3_reset_notify_down_enet(struct hnae3_handle *handle)
{
  #line 4355 
  struct hnae3_ae_dev *ae_dev = pci_get_drvdata(handle->pdev);
  #line 4356 
  struct hnae3_knic_private_info *kinfo = & handle->__anonCompField_hnae3_handle_215.kinfo;
  #line 4357 
  struct net_device *ndev = kinfo->netdev;
  #line 4358 
  struct hns3_nic_priv *priv = netdev_priv(ndev);
  #line 4360 
  if ((int)test_and_set_bit(1L,& priv->state) != 0) 
                                                    #line 4361 
                                                    return 0;
  #line 4367 
  if ((int)hns3_dev_ongoing_func_reset(ae_dev) != 0) {
    #line 4368 
    hns3_remove_hw_addr(ndev);
    #line 4369 
    hns3_del_all_fd_rules(ndev,(_Bool)0);
  }
  #line 4372 
  if (! netif_running(ndev)) 
                             #line 4373 
                             return 0;
  #line 4375 
  return hns3_nic_net_stop(ndev);
}

#line 4378  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static int hns3_reset_notify_up_enet(struct hnae3_handle *handle)
{
  #line 4380 
  struct hnae3_knic_private_info *kinfo = & handle->__anonCompField_hnae3_handle_215.kinfo;
  #line 4381 
  struct hns3_nic_priv *priv = netdev_priv(kinfo->netdev);
  #line 4382 
  int ret = 0;
  #line 4384 
  cif_clear_bit(1L,& priv->state);
  #line 4386 
  if ((int)netif_running(kinfo->netdev) != 0) {
    #line 4387 
    ret = hns3_nic_net_open(kinfo->netdev);
    #line 4388 
    if (ret != 0) {
      #line 4389 
      cif_set_bit(1L,& priv->state);
      #line 4390 
      netdev_err(kinfo->netdev,(char *)"net up fail, ret=%d!\n",ret);
      #line 4392 
      return ret;
    }
  }
  #line 4396 
  return ret;
}

#line 4399  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static int hns3_reset_notify_init_enet(struct hnae3_handle *handle)
{
  #line 4403 
  int ret;
  #line 4401 
  struct net_device *netdev = handle->__anonCompField_hnae3_handle_215.kinfo.netdev;
  #line 4402 
  struct hns3_nic_priv *priv = netdev_priv(netdev);
  #line 4406 
  netif_carrier_off(netdev);
  #line 4408 
  ret = hns3_get_ring_config(priv);
  #line 4409 
  if (ret != 0) 
                #line 4410 
                return ret;
  #line 4412 
  ret = hns3_nic_alloc_vector_data(priv);
  #line 4413 
  if (ret != 0) 
                #line 4414 
                goto err_put_ring;
  #line 4416 
  hns3_restore_coal(priv);
  #line 4418 
  ret = hns3_nic_init_vector_data(priv);
  #line 4419 
  if (ret != 0) 
                #line 4420 
                goto err_dealloc_vector;
  #line 4422 
  ret = hns3_init_all_ring(priv);
  #line 4423 
  if (ret != 0) 
                #line 4424 
                goto err_uninit_vector;
  #line 4426 
  ret = hns3_client_start(handle);
  #line 4427 
  if (ret != 0) {
    #line 4428 
    _dev_err(priv->dev,(char *)"hns3_client_start fail! ret=%d\n",ret);
    #line 4429 
    goto err_uninit_ring;
  }
  #line 4432 
  cif_set_bit(2L,& priv->state);
  #line 4434 
  return ret;
  #line 4436 
  err_uninit_ring: 
                   #line 4436 
  ;
  #line 4437 
  hns3_uninit_all_ring(priv);
  #line 4438 
  err_uninit_vector: 
                     #line 4438 
  ;
  #line 4439 
  hns3_nic_uninit_vector_data(priv);
  #line 4440 
  err_dealloc_vector: 
                      #line 4440 
  ;
  #line 4441 
  hns3_nic_dealloc_vector_data(priv);
  #line 4442 
  err_put_ring: 
                #line 4442 
  ;
  #line 4443 
  hns3_put_ring_config(priv);
  #line 4445 
  return ret;
}

#line 4448  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static int hns3_reset_notify_restore_enet(struct hnae3_handle *handle)
{
  #line 4451 
  bool vlan_filter_enable;
  #line 4452 
  int ret;
  #line 4450 
  struct net_device *netdev = handle->__anonCompField_hnae3_handle_215.kinfo.netdev;
  #line 4454 
  ret = hns3_init_mac_addr(netdev);
  #line 4455 
  if (ret != 0) 
                #line 4456 
                return ret;
  #line 4458 
  ret = hns3_recover_hw_addr(netdev);
  #line 4459 
  if (ret != 0) 
                #line 4460 
                return ret;
  #line 4462 
  ret = hns3_update_promisc_mode(netdev,(unsigned char)((int)handle->netdev_flags));
  #line 4463 
  if (ret != 0) 
                #line 4464 
                return ret;
  #line 4466 
  vlan_filter_enable = (_Bool)((netdev->flags & 256U) == 0U);
  #line 4467 
  hns3_enable_vlan_filter(netdev,(_Bool)((bool)((int)vlan_filter_enable) != 0));
  #line 4469 
  if (((handle->ae_algo)->ops)->restore_vlan_table != (void (*)(struct hnae3_handle *))0) 
    #line 4470 
    (*(((handle->ae_algo)->ops)->restore_vlan_table))(handle);
  #line 4472 
  return hns3_restore_fd_rules(netdev);
}

#line 4475  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static int hns3_reset_notify_uninit_enet(struct hnae3_handle *handle)
{
  #line 4479 
  int ret;
  #line 4477 
  struct net_device *netdev = handle->__anonCompField_hnae3_handle_215.kinfo.netdev;
  #line 4478 
  struct hns3_nic_priv *priv = netdev_priv(netdev);
  #line 4481 
  if (! test_and_set_bit(2L,& priv->state)) {
    #line 4482 
    netdev_warn(netdev,(char *)"already uninitialized\n");
    #line 4483 
    return 0;
  }
  #line 4486 
  hns3_clear_all_ring(handle,(_Bool)1);
  #line 4487 
  hns3_reset_tx_queue(priv->ae_handle);
  #line 4489 
  hns3_nic_uninit_vector_data(priv);
  #line 4491 
  hns3_store_coal(priv);
  #line 4493 
  ret = hns3_nic_dealloc_vector_data(priv);
  #line 4494 
  if (ret != 0) 
                #line 4495 
                netdev_err(netdev,(char *)"dealloc vector error\n");
  #line 4497 
  ret = hns3_uninit_all_ring(priv);
  #line 4498 
  if (ret != 0) 
                #line 4499 
                netdev_err(netdev,(char *)"uninit ring error\n");
  #line 4501 
  hns3_put_ring_config(priv);
  #line 4503 
  return ret;
}

#line 4506  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static int hns3_reset_notify(struct hnae3_handle *handle, enum hnae3_reset_notify_type type)
{
  #line 4509 
  int ret = 0;
  #line 4511 
  switch ((unsigned int)type) {
    #line 4512 
    case (unsigned int)0: 
                          #line 4512 
    ;
    #line 4513 
    ret = hns3_reset_notify_up_enet(handle);
    #line 4514 
    break;
    #line 4515 
    case (unsigned int)1: 
                          #line 4515 
    ;
    #line 4516 
    ret = hns3_reset_notify_down_enet(handle);
    #line 4517 
    break;
    #line 4518 
    case (unsigned int)2: 
                          #line 4518 
    ;
    #line 4519 
    ret = hns3_reset_notify_init_enet(handle);
    #line 4520 
    break;
    #line 4521 
    case (unsigned int)3: 
                          #line 4521 
    ;
    #line 4522 
    ret = hns3_reset_notify_uninit_enet(handle);
    #line 4523 
    break;
    #line 4524 
    case (unsigned int)4: 
                          #line 4524 
    ;
    #line 4525 
    ret = hns3_reset_notify_restore_enet(handle);
    #line 4526 
    break;
    #line 4527 
    default: 
             #line 4527 
    ;
    #line 4528 
    break;
  }
  #line 4531 
  return ret;
}

#line 4534  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static int hns3_change_channels(struct hnae3_handle *handle, u32 new_tqp_num, bool rxfh_configured)
{
  #line 4537 
  int ret;
  #line 4539 
  ret = (*(((handle->ae_algo)->ops)->set_channels))(handle,new_tqp_num,(_Bool)((bool)((int)rxfh_configured) != 0));
  #line 4541 
  if (ret != 0) {
    #line 4542 
    _dev_err(& (handle->pdev)->dev,(char *)"Change tqp num(%u) fail.\n",new_tqp_num);
    #line 4544 
    return ret;
  }
  #line 4547 
  ret = hns3_reset_notify(handle,(enum hnae3_reset_notify_type)HNAE3_INIT_CLIENT);
  #line 4548 
  if (ret != 0) 
                #line 4549 
                return ret;
  #line 4551 
  ret = hns3_reset_notify(handle,(enum hnae3_reset_notify_type)HNAE3_UP_CLIENT);
  #line 4552 
  if (ret != 0) 
                #line 4553 
                hns3_reset_notify(handle,(enum hnae3_reset_notify_type)HNAE3_UNINIT_CLIENT);
  #line 4555 
  return ret;
}

#line 4558  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
int hns3_set_channels(struct net_device *netdev, struct ethtool_channels *ch)
{
  #line 4565 
  u16 org_tqp_num;
  #line 4566 
  int ret;
  #line 4561 
  struct hnae3_handle *h = ((struct hns3_nic_priv *)netdev_priv(netdev))->ae_handle;
  #line 4562 
  struct hnae3_knic_private_info *kinfo = & h->__anonCompField_hnae3_handle_215.kinfo;
  #line 4563 
  bool rxfh_configured = netif_is_rxfh_configured(netdev);
  #line 4564 
  u32 new_tqp_num = ch->combined_count;
  #line 4568 
  if ((int)hns3_nic_resetting(netdev) != 0) 
                                            #line 4569 
                                            return -16;
  #line 4571 
  if (ch->rx_count != 0U || ch->tx_count != 0U) 
                                                #line 4572 
                                                return -22;
  #line 4574 
  ;
  #line 4574 
  if ((unsigned int)hns3_get_max_available_channels(h) < new_tqp_num) 
    #line 4574 
    goto _LOR;
  else 
    #line 4574 
    if (new_tqp_num == 0U) {
      #line 4574 
      _LOR: {
              #line 4576 
              ;
              #line 4576 
              _dev_err(& netdev->dev,(char *)"Change tqps fail, the tqp range is from 1 to %u",(int)hns3_get_max_available_channels(h));
              #line 4579 
              return -22;
            }
    }
  #line 4582 
  if ((unsigned int)kinfo->rss_size == new_tqp_num) 
                                                    #line 4583 
                                                    return 0;
  #line 4585 
  if ((h->msg_enable & 1U) != 0U) {
    #line 4585 
    bool branch;
    #line 4585 
    struct _ddebug __UNIQUE_ID_ddebug575 = {.modname = (char *)"hns3", .function = (char *)"hns3_set_channels", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c", .format = (char *)"set channels: tqp_num=%u, rxfh=%d\n", .lineno = (unsigned int)4585U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 4585 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug575.key.dd_key_false.key,(_Bool)0);
    #line 4585 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 4585 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug575,netdev,(char *)"set channels: tqp_num=%u, rxfh=%d\n",new_tqp_num,(int)rxfh_configured);
  }
  #line 4589 
  ret = hns3_reset_notify(h,(enum hnae3_reset_notify_type)HNAE3_DOWN_CLIENT);
  #line 4590 
  if (ret != 0) 
                #line 4591 
                return ret;
  #line 4593 
  ret = hns3_reset_notify(h,(enum hnae3_reset_notify_type)HNAE3_UNINIT_CLIENT);
  #line 4594 
  if (ret != 0) 
                #line 4595 
                return ret;
  #line 4597 
  org_tqp_num = h->__anonCompField_hnae3_handle_215.kinfo.num_tqps;
  #line 4598 
  ret = hns3_change_channels(h,new_tqp_num,(_Bool)((bool)((int)rxfh_configured) != 0));
  #line 4599 
  if (ret != 0) {
    #line 4600 
    int ret1;
    #line 4602 
    netdev_warn(netdev,(char *)"Change channels fail, revert to old value\n");
    #line 4604 
    ret1 = hns3_change_channels(h,(unsigned int)org_tqp_num,(_Bool)((bool)((int)rxfh_configured) != 0));
    #line 4605 
    if (ret1 != 0) {
      #line 4606 
      netdev_err(netdev,(char *)"revert to old channel fail\n");
      #line 4608 
      return ret1;
    }
    #line 4611 
    return ret;
  }
  #line 4614 
  return 0;
}

#line 4617  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static struct hns3_hw_error_info hns3_hw_err[3U] = {{.msg = (char *)"PPU poison"}, {.type = HNAE3_CMDQ_ECC_ERROR, .msg = (char *)"IMP CMDQ error"}, {.type = HNAE3_IMP_RD_POISON_ERROR, .msg = (char *)"IMP RD poison"}};
#line 4626  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static void hns3_process_hw_error(struct hnae3_handle *handle, enum hnae3_hw_error_type type)
{
  #line 4629 
  int i;
  #line 4631 
  i = 0;
  #line 4631 
  while ((unsigned int)i <= 2U) {
    #line 4632 
    if (hns3_hw_err[i].type == type) {
      #line 4633 
      _dev_err(& (handle->pdev)->dev,(char *)"Detected %s!\n",hns3_hw_err[i].msg);
      #line 4635 
      break;
    }
    #line 4631 
    i ++;
  }
  #line 4637 
  return;
}

#line 4640  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static struct hnae3_client_ops client_ops = {.init_instance = & hns3_client_init, .uninit_instance = & hns3_client_uninit, .link_status_change = & hns3_link_status_change, .setup_tc = & hns3_client_setup_tc, .reset_notify = & hns3_reset_notify, .process_hw_error = & hns3_process_hw_error};
#line 4653  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static int hns3_init_module(void)
{
  #line 4655 
  int ret;
  #line 4657 
  printk((char *)"\001",(char *)(& hns3_driver_name),(char *)(& hns3_driver_string));
  #line 4658 
  printk((char *)"\001",(char *)(& hns3_driver_name),(char *)(& hns3_copyright));
  #line 4660 
  client.type = HNAE3_CLIENT_KNIC;
  #line 4661 
  snprintf((char *)(& client.name),15UL,(char *)"%s",(char *)(& hns3_driver_name));
  #line 4664 
  client.ops = & client_ops;
  #line 4666 
  INIT_LIST_HEAD(& client.node);
  #line 4668 
  hns3_dbg_register_debugfs((char *)(& hns3_driver_name));
  #line 4670 
  ret = hnae3_register_client(& client);
  #line 4671 
  if (ret != 0) 
                #line 4672 
                goto err_reg_client;
  #line 4674 
  ret = cif___pci_register_driver(& hns3_driver,& __this_module,(char *)"hns3");
  #line 4675 
  if (ret != 0) 
                #line 4676 
                goto err_reg_driver;
  #line 4678 
  return ret;
  #line 4680 
  err_reg_driver: 
                  #line 4680 
  ;
  #line 4681 
  hnae3_unregister_client(& client);
  #line 4682 
  err_reg_client: 
                  #line 4682 
  ;
  #line 4683 
  hns3_dbg_unregister_debugfs();
  #line 4684 
  return ret;
}

#line 4692  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c"
static void hns3_exit_module(void)
{
  #line 4694 
  cif_pci_unregister_driver(& hns3_driver);
  #line 4695 
  hnae3_unregister_client(& client);
  #line 4696 
  hns3_dbg_unregister_debugfs();
  #line 4697 
  return;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_enet.i.aux"
struct pci_driver *emg_alias_hns3_driver = & hns3_driver;
#line 94  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_enet.i.aux"
struct pci_device_id (*emg_alias_hns3_pci_tbl)[10U] = & hns3_pci_tbl;
#line 97 
#line 97 
int emg___pci_register_driver(struct pci_driver *arg0, struct module *arg1, char *arg2);
#line 98 
#line 98 
struct net_device *emg_alloc_etherdev_mqs(int arg0, unsigned int arg1, unsigned int arg2);
#line 99 
#line 99 
void *emg_free_irq(unsigned int arg0, void *arg1);
#line 100 
#line 100 
void emg_free_netdev(struct net_device *arg0);
#line 101 
#line 101 
void emg_pci_unregister_driver(struct pci_driver *arg0);
#line 102 
#line 102 
int emg_register_netdev(struct net_device *arg0);
#line 103 
#line 103 
int emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4);
#line 104 
#line 104 
void emg_unregister_netdev(struct net_device *arg0);
#line 108  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_enet.i.aux"
enum irqreturn emg_wrapper_hns3_irq_handle(int arg0, void *arg1)
{
  #line 109 
  return hns3_irq_handle(arg0,arg1);
}

#line 113  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_enet.i.aux"
int emg_wrapper_hns3_ndo_set_vf_vlan(struct net_device *arg0, int arg1, unsigned short arg2, unsigned char arg3, unsigned short arg4)
{
  #line 114 
  return hns3_ndo_set_vf_vlan(arg0,arg1,(unsigned short)((int)arg2),
                           (unsigned char)((int)arg3),
                           (unsigned short)((int)arg4));
}

#line 118  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_enet.i.aux"
int emg_wrapper_hns3_nic_change_mtu(struct net_device *arg0, int arg1)
{
  #line 119 
  return hns3_nic_change_mtu(arg0,arg1);
}

#line 123  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_enet.i.aux"
int emg_wrapper_hns3_nic_do_ioctl(struct net_device *arg0, struct ifreq *arg1, int arg2)
{
  #line 124 
  return hns3_nic_do_ioctl(arg0,arg1,arg2);
}

#line 128  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_enet.i.aux"
void emg_wrapper_hns3_nic_get_stats64(struct net_device *arg0, struct rtnl_link_stats64 *arg1)
{
  #line 129 
  hns3_nic_get_stats64(arg0,arg1);
  #line 130 
  return;
}

#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_enet.i.aux"
int emg_wrapper_hns3_nic_get_vf_config(struct net_device *arg0, int arg1, struct ifla_vf_info *arg2)
{
  #line 134 
  return hns3_nic_get_vf_config(arg0,arg1,arg2);
}

#line 138  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_enet.i.aux"
int emg_wrapper_hns3_nic_net_open(struct net_device *arg0)
{
  #line 139 
  return hns3_nic_net_open(arg0);
}

#line 143  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_enet.i.aux"
int emg_wrapper_hns3_nic_net_set_mac_address(struct net_device *arg0, void *arg1)
{
  #line 144 
  return hns3_nic_net_set_mac_address(arg0,arg1);
}

#line 148  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_enet.i.aux"
int emg_wrapper_hns3_nic_net_stop(struct net_device *arg0)
{
  #line 149 
  return hns3_nic_net_stop(arg0);
}

#line 153  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_enet.i.aux"
void emg_wrapper_hns3_nic_net_timeout(struct net_device *arg0)
{
  #line 154 
  hns3_nic_net_timeout(arg0);
  #line 155 
  return;
}

#line 158  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_enet.i.aux"
int emg_wrapper_hns3_nic_set_features(struct net_device *arg0, unsigned long long arg1)
{
  #line 159 
  return hns3_nic_set_features(arg0,arg1);
}

#line 163  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_enet.i.aux"
void emg_wrapper_hns3_nic_set_rx_mode(struct net_device *arg0)
{
  #line 164 
  hns3_nic_set_rx_mode(arg0);
  #line 165 
  return;
}

#line 168  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_enet.i.aux"
int emg_wrapper_hns3_nic_set_vf_link_state(struct net_device *arg0, int arg1, int arg2)
{
  #line 169 
  return hns3_nic_set_vf_link_state(arg0,arg1,arg2);
}

#line 173  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_enet.i.aux"
int emg_wrapper_hns3_nic_set_vf_mac(struct net_device *arg0, int arg1, unsigned char *arg2)
{
  #line 174 
  return hns3_nic_set_vf_mac(arg0,arg1,arg2);
}

#line 178  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_enet.i.aux"
int emg_wrapper_hns3_nic_set_vf_rate(struct net_device *arg0, int arg1, int arg2, int arg3)
{
  #line 179 
  return hns3_nic_set_vf_rate(arg0,arg1,arg2,arg3);
}

#line 183  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_enet.i.aux"
int emg_wrapper_hns3_nic_setup_tc(struct net_device *arg0, enum tc_setup_type arg1, void *arg2)
{
  #line 184 
  return hns3_nic_setup_tc(arg0,arg1,arg2);
}

#line 188  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_enet.i.aux"
int emg_wrapper_hns3_pci_sriov_configure(struct pci_dev *arg0, int arg1)
{
  #line 189 
  return hns3_pci_sriov_configure(arg0,arg1);
}

#line 193  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_enet.i.aux"
int emg_wrapper_hns3_probe(struct pci_dev *arg0, struct pci_device_id *arg1)
{
  #line 194 
  return hns3_probe(arg0,arg1);
}

#line 198  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_enet.i.aux"
void emg_wrapper_hns3_remove(struct pci_dev *arg0)
{
  #line 199 
  hns3_remove(arg0);
  #line 200 
  return;
}

#line 203  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_enet.i.aux"
int emg_wrapper_hns3_rx_flow_steer(struct net_device *arg0, struct sk_buff *arg1, unsigned short arg2, unsigned int arg3)
{
  #line 204 
  return hns3_rx_flow_steer(arg0,arg1,(unsigned short)((int)arg2),arg3);
}

#line 208  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_enet.i.aux"
int emg_wrapper_hns3_set_vf_spoofchk(struct net_device *arg0, int arg1, _Bool arg2)
{
  #line 209 
  return hns3_set_vf_spoofchk(arg0,arg1,(_Bool)((bool)((int)arg2) != 0));
}

#line 213  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_enet.i.aux"
int emg_wrapper_hns3_set_vf_trust(struct net_device *arg0, int arg1, _Bool arg2)
{
  #line 214 
  return hns3_set_vf_trust(arg0,arg1,(_Bool)((bool)((int)arg2) != 0));
}

#line 218  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_enet.i.aux"
void emg_wrapper_hns3_shutdown(struct pci_dev *arg0)
{
  #line 219 
  hns3_shutdown(arg0);
  #line 220 
  return;
}

#line 223  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_enet.i.aux"
int emg_wrapper_hns3_vlan_rx_add_vid(struct net_device *arg0, unsigned short arg1, unsigned short arg2)
{
  #line 224 
  return hns3_vlan_rx_add_vid(arg0,(unsigned short)((int)arg1),
                           (unsigned short)((int)arg2));
}

#line 228  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_enet.i.aux"
int emg_wrapper_hns3_vlan_rx_kill_vid(struct net_device *arg0, unsigned short arg1, unsigned short arg2)
{
  #line 229 
  return hns3_vlan_rx_kill_vid(arg0,(unsigned short)((int)arg1),
                            (unsigned short)((int)arg2));
}

#line 233  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_enet.i.aux"
void emg_hns3_exit_module(void)
{
  #line 234 
  hns3_exit_module();
  #line 235 
  return;
}

#line 237  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_enet.i.aux"
int emg_hns3_init_module(void)
{
  #line 238 
  return hns3_init_module();
}

#line 256  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_enet.i.aux"
static void cif_set_bit(long nr, unsigned long *addr)
{
  #line 259 
  ldv_set_bit(nr,addr);
  #line 260 
  return;
}

#line 263  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_enet.i.aux"
static void cif_clear_bit(long nr, unsigned long *addr)
{
  #line 266 
  ldv_clear_bit(nr,addr);
  #line 267 
  return;
}

#line 270  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_enet.i.aux"
static void INIT_LIST_HEAD(struct list_head *list)
{
  #line 273 
  ldv_init_list_head(list);
  #line 274 
  return;
}

#line 319  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_enet.i.aux"
static void atomic_inc(atomic_t *v)
{
  #line 322 
  ldv_atomic_inc(v);
  #line 323 
  return;
}

#line 759  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_enet.i.aux"
static void cif_spin_lock_bh_addr_list_lock_of_net_device(spinlock_t *lock)
{
  #line 762 
  ldv_spin_model_lock((char *)"addr_list_lock_of_net_device");
  #line 764 
  spin_lock_bh(lock);
  #line 765 
  return;
}

#line 777  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_enet.i.aux"
static void cif_spin_unlock_bh_addr_list_lock_of_net_device(spinlock_t *lock)
{
  #line 780 
  ldv_spin_model_unlock((char *)"addr_list_lock_of_net_device");
  #line 782 
  spin_unlock_bh(lock);
  #line 783 
  return;
}

#line 959  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_enet.i.aux"
static void *cif_free_irq(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  #line 963 
  return emg_free_irq(ldv_func_arg1,ldv_func_arg2);
}

#line 967  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_enet.i.aux"
static int cif_request_irq(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char *name, void *dev)
{
  #line 971 
  return emg_request_irq(irq,handler,flags,name,dev);
}

#line 975  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_enet.i.aux"
static void *cif_devm_kzalloc(struct device *dev, size_t size, gfp_t flags)
{
  #line 978 
  return ldv_devm_kzalloc(size,flags);
}

#line 982  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_enet.i.aux"
static void *cif_devm_kcalloc(struct device *dev, size_t n, size_t size, gfp_t flags)
{
  #line 985 
  return ldv_devm_kcalloc(n,size,flags);
}

#line 989  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_enet.i.aux"
static struct net_device *cif_alloc_etherdev_mqs(int sizeof_priv, unsigned int txqs, unsigned int rxqs)
{
  #line 993 
  return emg_alloc_etherdev_mqs(sizeof_priv,txqs,rxqs);
}

#line 997  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_enet.i.aux"
static int cif_register_netdev(struct net_device *dev)
{
  #line 1001 
  return emg_register_netdev(dev);
}

#line 1005  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_enet.i.aux"
static void cif_unregister_netdev(struct net_device *dev)
{
  #line 1009 
  emg_unregister_netdev(dev);
  #line 1010 
  return;
}

#line 1013  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_enet.i.aux"
static void cif_free_netdev(struct net_device *dev)
{
  #line 1017 
  emg_free_netdev(dev);
  #line 1018 
  return;
}

#line 1021  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_enet.i.aux"
static int cif___pci_register_driver(struct pci_driver *ldv_func_arg1, struct module *ldv_func_arg2, char *mod_name)
{
  #line 1025 
  return emg___pci_register_driver(ldv_func_arg1,ldv_func_arg2,mod_name);
}

#line 1029  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_enet.i.aux"
static void cif_pci_unregister_driver(struct pci_driver *dev)
{
  #line 1033 
  emg_pci_unregister_driver(dev);
  #line 1034 
  return;
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 264  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_ethtool.i.aux"
static void cif_set_bit_0(long nr, unsigned long *addr);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 271  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_ethtool.i.aux"
static void cif_clear_bit_0(long nr, unsigned long *addr);
#line 487  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
#line 487 
void print_hex_dump(char *, char *, int, int, int, void *, size_t, bool);
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 26 
char *strncpy(char *, char *, __kernel_size_t);
#line 42 
#line 42 
char *strncat(char *, char *, __kernel_size_t);
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg.h"
#line 17 
void __xadd_wrong_size(void);
#line 182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
__inline static int arch_atomic_fetch_add(int i, atomic_t *v)
{
  #line 184 
  int __ret;
  #line 184 
  __ret = i;
  #line 184 
  switch (4UL) {
    #line 184 
    case (unsigned long)1: 
                           #line 184 
    ;
    #line 185 
    ldv_inline_asm();
    #line 184 
    break;
    #line 184 
    case (unsigned long)2: 
                           #line 184 
    ;
    #line 185 
    ldv_inline_asm();
    #line 184 
    break;
    #line 184 
    case (unsigned long)4: 
                           #line 184 
    ;
    #line 185 
    ldv_inline_asm();
    #line 184 
    break;
    #line 184 
    case (unsigned long)8: 
                           #line 184 
    ;
    #line 185 
    ldv_inline_asm();
    #line 184 
    break;
    #line 184 
    default: 
             #line 184 
    ;
    #line 184 
    __xadd_wrong_size();
  }
  #line 184 
  return __ret;
}

#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static int atomic_fetch_add(int i, atomic_t *v)
{
  #line 111 
  kasan_check_read((void *)v,4U);
  #line 112 
  return arch_atomic_fetch_add(i,v);
}

#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/preempt.h"
__inline static void __preempt_count_add(int val)
{
  #line 79 
  int tmp;
  #line 79 
  if (0 != 0 && (val == 1 || val == -1)) 
                                         #line 79 
                                         tmp = val; else 
                                                         #line 79 
                                                         tmp = 0;
  #line 79 
  int pao_ID__ = tmp;
  #line 79 
  switch (4UL) {
    #line 79 
    case (unsigned long)1: 
                           #line 79 
    ;
    #line 79 
    if (pao_ID__ == 1) 
                       #line 81 
                       ldv_inline_asm();
    else 
      #line 79 
      if (pao_ID__ == -1) 
                          #line 81 
                          ldv_inline_asm(); else 
                                                 #line 84 
                                                 ldv_inline_asm();
    #line 79 
    break;
    #line 79 
    case (unsigned long)2: 
                           #line 79 
    ;
    #line 79 
    if (pao_ID__ == 1) 
                       #line 81 
                       ldv_inline_asm();
    else 
      #line 79 
      if (pao_ID__ == -1) 
                          #line 81 
                          ldv_inline_asm(); else 
                                                 #line 84 
                                                 ldv_inline_asm();
    #line 79 
    break;
    #line 79 
    case (unsigned long)4: 
                           #line 79 
    ;
    #line 79 
    if (pao_ID__ == 1) 
                       #line 81 
                       ldv_inline_asm();
    else 
      #line 79 
      if (pao_ID__ == -1) 
                          #line 81 
                          ldv_inline_asm(); else 
                                                 #line 84 
                                                 ldv_inline_asm();
    #line 79 
    break;
    #line 79 
    case (unsigned long)8: 
                           #line 79 
    ;
    #line 79 
    if (pao_ID__ == 1) 
                       #line 81 
                       ldv_inline_asm();
    else 
      #line 79 
      if (pao_ID__ == -1) 
                          #line 81 
                          ldv_inline_asm(); else 
                                                 #line 84 
                                                 ldv_inline_asm();
    #line 79 
    break;
    #line 79 
    default: 
             #line 79 
    ;
    #line 79 
    __bad_percpu_size();
  }
  #line 82 
  return;
}

#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/preempt.h"
__inline static void __preempt_count_sub(int val)
{
  #line 84 
  int tmp;
  #line 84 
  if (0 != 0 && (val == -1 || val == 1)) 
                                         #line 84 
                                         tmp = - val; else 
                                                           #line 84 
                                                           tmp = 0;
  #line 84 
  int pao_ID__ = tmp;
  #line 84 
  switch (4UL) {
    #line 84 
    case (unsigned long)1: 
                           #line 84 
    ;
    #line 84 
    if (pao_ID__ == 1) 
                       #line 86 
                       ldv_inline_asm();
    else 
      #line 84 
      if (pao_ID__ == -1) 
                          #line 86 
                          ldv_inline_asm(); else 
                                                 #line 89 
                                                 ldv_inline_asm();
    #line 84 
    break;
    #line 84 
    case (unsigned long)2: 
                           #line 84 
    ;
    #line 84 
    if (pao_ID__ == 1) 
                       #line 86 
                       ldv_inline_asm();
    else 
      #line 84 
      if (pao_ID__ == -1) 
                          #line 86 
                          ldv_inline_asm(); else 
                                                 #line 89 
                                                 ldv_inline_asm();
    #line 84 
    break;
    #line 84 
    case (unsigned long)4: 
                           #line 84 
    ;
    #line 84 
    if (pao_ID__ == 1) 
                       #line 86 
                       ldv_inline_asm();
    else 
      #line 84 
      if (pao_ID__ == -1) 
                          #line 86 
                          ldv_inline_asm(); else 
                                                 #line 89 
                                                 ldv_inline_asm();
    #line 84 
    break;
    #line 84 
    case (unsigned long)8: 
                           #line 84 
    ;
    #line 84 
    if (pao_ID__ == 1) 
                       #line 86 
                       ldv_inline_asm();
    else 
      #line 84 
      if (pao_ID__ == -1) 
                          #line 86 
                          ldv_inline_asm(); else 
                                                 #line 89 
                                                 ldv_inline_asm();
    #line 84 
    break;
    #line 84 
    default: 
             #line 84 
    ;
    #line 84 
    __bad_percpu_size();
  }
  #line 87 
  return;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 25 
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags);
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
#line 114 
void refcount_warn_saturate(refcount_t *, enum refcount_saturation_type);
#line 186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
__inline static void refcount_add(int i, refcount_t *r)
{
  #line 188 
  int old = atomic_fetch_add(i,& r->refs);
  #line 190 
  if ((long)(old == 0) != 0L) 
                              #line 191 
                              refcount_warn_saturate(r,(enum refcount_saturation_type)REFCOUNT_ADD_UAF);
  else 
    #line 192 
    if ((long)(old < 0) != 0L || (long)(old + i < 0) != 0L) 
                                                            #line 193 
                                                            refcount_warn_saturate(r,(enum refcount_saturation_type)REFCOUNT_ADD_OVF);
  #line 194 
  return;
}

#line 226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
__inline static void refcount_inc(refcount_t *r)
{
  #line 228 
  refcount_add(1,r);
  #line 229 
  return;
}

#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 189 
void kfree(void *);
#line 607 
#line 543  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_ethtool.i.aux"
static void *kcalloc(size_t n, size_t size, gfp_t flags);
#line 1019  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
#line 1019 
void kfree_skb(struct sk_buff *);
#line 1032 
#line 1032 
struct sk_buff *__alloc_skb(unsigned int, gfp_t, int, int);
#line 1046  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct sk_buff *alloc_skb(unsigned int size, gfp_t priority)
{
  #line 1049 
  return __alloc_skb(size,priority,0,-1);
}

#line 1580  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct sk_buff *skb_get(struct sk_buff *skb)
{
  #line 1582 
  refcount_inc(& skb->users);
  #line 1583 
  return skb;
}

#line 2189 
#line 2189 
void *skb_put(struct sk_buff *, unsigned int);
#line 2338  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_reserve(struct sk_buff *skb, int len)
{
  #line 2340 
  skb->data += (unsigned long)len;
  #line 2341 
  skb->tail += (unsigned int)len;
  #line 2342 
  return;
}

#line 2511  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_reset_mac_header(struct sk_buff *skb)
{
  #line 2513 
  skb->mac_header = (unsigned short)(skb->data - skb->head);
  #line 2514 
  return;
}

#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delay.h"
#line 59 
void msleep(unsigned int);
#line 61 
#line 61 
void usleep_range(unsigned long, unsigned long);
#line 249  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static void eth_zero_addr(u8 *addr)
{
  #line 251 
  memset((void *)addr,0,6UL);
  #line 252 
  return;
}

#line 1096  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
#line 1096 
int genphy_restart_aneg(struct phy_device *);
#line 1173 
#line 1173 
void phy_ethtool_ksettings_get(struct phy_device *, struct ethtool_link_ksettings *);
#line 1175 
#line 1175 
int phy_ethtool_ksettings_set(struct phy_device *, struct ethtool_link_ksettings *);
#line 1843  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static char *pci_name(struct pci_dev *pdev)
{
  #line 1845 
  return dev_name(& pdev->dev);
}

#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_ethtool.c"
static struct hns3_stats hns3_txq_stats[13U] = {{.stats_string = {(char)'i', (char)'o', (char)'_', (char)'e', (char)'r', (char)'r', (char)'_', (char)'c', (char)'n', (char)'t'}, .stats_offset = 64}, {.stats_string = {(char)'d', (char)'r', (char)'o', (char)'p', (char)'p', (char)'e', (char)'d'}, .stats_offset = 72}, {.stats_string = {(char)'s', (char)'e', (char)'g', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'c', (char)'n', (char)'t'}, .stats_offset = 80}, {.stats_string = {(char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}, .stats_offset = 88}, {.stats_string = {(char)'b', (char)'y', (char)'t', (char)'e', (char)'s'}, .stats_offset = 96}, {.stats_string = {(char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .stats_offset = 104}, {.stats_string = {(char)'w', (char)'a', (char)'k', (char)'e'}, .stats_offset = 112}, {.stats_string = {(char)'b', (char)'u', (char)'s', (char)'y'}, .stats_offset = 120}, {.stats_string = {(char)'c', (char)'o', (char)'p', (char)'y'}, .stats_offset = 128}, {.stats_string = {(char)'v', (char)'l', (char)'a', (char)'n', (char)'_', (char)'e', (char)'r', (char)'r'}, .stats_offset = 136}, {.stats_string = {(char)'l', (char)'4', (char)'_', (char)'p', (char)'r', (char)'o', (char)'t', (char)'o', (char)'_', (char)'e', (char)'r', (char)'r'}, .stats_offset = 144}, {.stats_string = {(char)'l', (char)'2', (char)'l', (char)'3', (char)'l', (char)'4', (char)'_', (char)'e', (char)'r', (char)'r'}, .stats_offset = 152}, {.stats_string = {(char)'t', (char)'s', (char)'o', (char)'_', (char)'e', (char)'r', (char)'r'}, .stats_offset = 160}};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_ethtool.c"
static struct hns3_stats hns3_rxq_stats[13U] = {{.stats_string = {(char)'i', (char)'o', (char)'_', (char)'e', (char)'r', (char)'r', (char)'_', (char)'c', (char)'n', (char)'t'}, .stats_offset = 64}, {.stats_string = {(char)'d', (char)'r', (char)'o', (char)'p', (char)'p', (char)'e', (char)'d'}, .stats_offset = 72}, {.stats_string = {(char)'s', (char)'e', (char)'g', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'c', (char)'n', (char)'t'}, .stats_offset = 80}, {.stats_string = {(char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}, .stats_offset = 88}, {.stats_string = {(char)'b', (char)'y', (char)'t', (char)'e', (char)'s'}, .stats_offset = 96}, {.stats_string = {(char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .stats_offset = 104}, {.stats_string = {(char)'r', (char)'e', (char)'u', (char)'s', (char)'e', (char)'_', (char)'p', (char)'g', (char)'_', (char)'c', (char)'n', (char)'t'}, .stats_offset = 112}, {.stats_string = {(char)'e', (char)'r', (char)'r', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'l', (char)'e', (char)'n'}, .stats_offset = 120}, {.stats_string = {(char)'e', (char)'r', (char)'r', (char)'_', (char)'b', (char)'d', (char)'_', (char)'n', (char)'u', (char)'m'}, .stats_offset = 128}, {.stats_string = {(char)'l', (char)'2', (char)'_', (char)'e', (char)'r', (char)'r'}, .stats_offset = 136}, {.stats_string = {(char)'l', (char)'3', (char)'l', (char)'4', (char)'_', (char)'c', (char)'s', (char)'u', (char)'m', (char)'_', (char)'e', (char)'r', (char)'r'}, .stats_offset = 144}, {.stats_string = {(char)'m', (char)'u', (char)'l', (char)'t', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t'}, .stats_offset = 152}, {.stats_string = {(char)'n', (char)'o', (char)'n', (char)'_', (char)'r', (char)'e', (char)'u', (char)'s', (char)'e', (char)'_', (char)'p', (char)'g'}, .stats_offset = 160}};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_ethtool.c"
static int hns3_lp_setup(struct net_device *ndev, enum hnae3_loop loop, bool en)
{
  #line 76 
  bool vlan_filter_enable;
  #line 77 
  int ret;
  #line 75 
  struct hnae3_handle *h = ((struct hns3_nic_priv *)netdev_priv(ndev))->ae_handle;
  #line 79 
  if (((h->ae_algo)->ops)->set_loopback == (int (*)(struct hnae3_handle *, enum hnae3_loop , bool ))0 || ((h->ae_algo)->ops)->set_promisc_mode == (int (*)(struct hnae3_handle *, bool , bool ))0) 
    #line 81 
    return -95;
  #line 83 
  switch ((unsigned int)loop) {
    #line 84 
    case (unsigned int)1: 
                          #line 84 
    ;
    #line 85 
    case (unsigned int)2: 
                          #line 85 
    ;
    #line 86 
    case (unsigned int)0: 
                          #line 86 
    ;
    #line 87 
    case (unsigned int)3: 
                          #line 87 
    ;
    #line 88 
    ret = (*(((h->ae_algo)->ops)->set_loopback))(h,loop,(_Bool)((bool)((int)en) != 0));
    #line 89 
    break;
    #line 90 
    default: 
             #line 90 
    ;
    #line 91 
    ret = -524;
    #line 92 
    break;
  }
  #line 95 
  if (ret != 0 || (unsigned int)(h->pdev)->revision > 32U) 
                                                           #line 96 
                                                           return ret;
  #line 98 
  if ((int)en != 0) 
                    #line 99 
                    (*(((h->ae_algo)->ops)->set_promisc_mode))(h,(_Bool)1,(_Bool)1);
  else {
    #line 102 
    hns3_update_promisc_mode(ndev,(unsigned char)((int)h->netdev_flags));
    #line 103 
    vlan_filter_enable = (_Bool)((ndev->flags & 256U) == 0U);
    #line 104 
    hns3_enable_vlan_filter(ndev,(_Bool)((bool)((int)vlan_filter_enable) != 0));
  }
  #line 107 
  return ret;
}

#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_ethtool.c"
static int hns3_lp_up(struct net_device *ndev, enum hnae3_loop loop_mode)
{
  #line 113 
  int ret;
  #line 112 
  struct hnae3_handle *h = ((struct hns3_nic_priv *)netdev_priv(ndev))->ae_handle;
  #line 115 
  ret = hns3_nic_reset_all_ring(h);
  #line 116 
  if (ret != 0) 
                #line 117 
                return ret;
  #line 119 
  ret = hns3_lp_setup(ndev,loop_mode,(_Bool)1);
  #line 120 
  usleep_range(10000UL,20000UL);
  #line 122 
  return ret;
}

#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_ethtool.c"
static int hns3_lp_down(struct net_device *ndev, enum hnae3_loop loop_mode)
{
  #line 127 
  int ret;
  #line 129 
  ret = hns3_lp_setup(ndev,loop_mode,(_Bool)0);
  #line 130 
  if (ret != 0) {
    #line 131 
    netdev_err(ndev,(char *)"lb_setup return error: %d\n",ret);
    #line 132 
    return ret;
  }
  #line 135 
  usleep_range(10000UL,20000UL);
  #line 137 
  return 0;
}

#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_ethtool.c"
static void hns3_lp_setup_skb(struct sk_buff *skb)
{
  #line 145 
  struct hnae3_handle *handle;
  #line 146 
  unsigned char *packet;
  #line 147 
  struct ethhdr *ethh;
  #line 148 
  unsigned int i;
  #line 144 
  struct net_device *ndev = skb->__anonCompField_sk_buff_87.__anonCompField___anonunion_487_86.__anonCompField___anonstruct_488_85.dev;
  #line 150 
  skb_reserve(skb,0);
  #line 151 
  ethh = (struct ethhdr *)skb_put(skb,14U);
  #line 152 
  packet = (unsigned char *)skb_put(skb,128U);
  #line 154 
  memcpy((void *)(& ethh->h_dest),(void *)ndev->dev_addr,6UL);
  #line 161 
  handle = ((struct hns3_nic_priv *)netdev_priv(ndev))->ae_handle;
  #line 162 
  if ((unsigned int)(handle->pdev)->revision == 32U) 
                                                     #line 163 
                                                     ethh->h_dest[5] = (unsigned char)((unsigned int)ethh->h_dest[5] + 31U);
  #line 164 
  eth_zero_addr((u8 *)(& ethh->h_source));
  #line 165 
  ethh->h_proto = (unsigned short)1544U;
  #line 166 
  skb_reset_mac_header(skb);
  #line 168 
  i = 0U;
  #line 168 
  while (i <= 127U) {
    #line 169 
    *(packet + (unsigned long)i) = (unsigned char)i;
    #line 168 
    i ++;
  }
  #line 170 
  return;
}

#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_ethtool.c"
static void hns3_lb_check_skb_data(struct hns3_enet_ring *ring, struct sk_buff *skb)
{
  #line 177 
  u32 i;
  #line 175 
  struct hns3_enet_tqp_vector *tqp_vector = ring->tqp_vector;
  #line 176 
  unsigned char *packet = skb->data;
  #line 179 
  i = 0U;
  #line 179 
  while (skb->len > i) {
    #line 180 
    if ((int)*(packet + (unsigned long)i) != (int)((unsigned char)i)) 
      #line 181 
      break;
    #line 179 
    i ++;
  }
  #line 184 
  if (skb->len == i) 
                     #line 185 
                     (tqp_vector->rx_group.total_packets) ++; else 
                                                                   #line 187 
                                                                   print_hex_dump((char *)"\001",(char *)"selftest:",2,16,1,(void *)skb->data,(unsigned long)skb->len,(_Bool)1);
  #line 190 
  dev_kfree_skb_any(skb);
  #line 191 
  return;
}

#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_ethtool.c"
static u32 hns3_lb_check_rx_ring(struct hns3_nic_priv *priv, u32 budget)
{
  #line 196 
  struct hnae3_knic_private_info *kinfo;
  #line 197 
  u32 i;
  #line 195 
  struct hnae3_handle *h = priv->ae_handle;
  #line 197 
  u32 rcv_good_pkt_total = 0U;
  #line 199 
  kinfo = & h->__anonCompField_hnae3_handle_215.kinfo;
  #line 200 
  i = (unsigned int)kinfo->num_tqps;
  #line 200 
  while ((unsigned int)((int)kinfo->num_tqps * 2) > i) {
    {
      #line 202 
      struct hns3_enet_ring_group *rx_group;
      #line 203 
      u64 pre_rx_pkt;
      #line 201 
      struct hns3_enet_ring *ring = priv->ring + (unsigned long)i;
      #line 205 
      rx_group = & (ring->tqp_vector)->rx_group;
      #line 206 
      pre_rx_pkt = rx_group->total_packets;
      #line 208 
      __preempt_count_add(1);
      #line 209 
      ldv_inline_asm();
      #line 209 
      hns3_clean_rx_ring(ring,(int)budget,& hns3_lb_check_skb_data);
      #line 212 
      ldv_inline_asm();
      #line 210 
      __preempt_count_sub(1);
      #line 212 
      rcv_good_pkt_total = ((unsigned int)rx_group->total_packets - (unsigned int)pre_rx_pkt) + rcv_good_pkt_total;
      #line 213 
      rx_group->total_packets = pre_rx_pkt;
    }
    #line 200 
    i ++;
  }
  #line 215 
  return rcv_good_pkt_total;
}

#line 218  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_ethtool.c"
static void hns3_lb_clear_tx_ring(struct hns3_nic_priv *priv, u32 start_ringid, u32 end_ringid, u32 budget)
{
  #line 221 
  u32 i;
  #line 223 
  i = start_ringid;
  #line 223 
  while (i <= end_ringid) {
    {
      #line 224 
      struct hns3_enet_ring *ring = priv->ring + (unsigned long)i;
      #line 226 
      hns3_clean_tx_ring(ring);
    }
    #line 223 
    i ++;
  }
  #line 228 
  return;
}

#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_ethtool.c"
static int hns3_lp_run_test(struct net_device *ndev, enum hnae3_loop mode)
{
  #line 238 
  struct sk_buff *skb;
  #line 239 
  u32 i;
  #line 239 
  u32 good_cnt;
  #line 237 
  struct hns3_nic_priv *priv = netdev_priv(ndev);
  #line 240 
  int ret_val = 0;
  #line 242 
  skb = alloc_skb(142U,3264U);
  #line 244 
  if (skb == (struct sk_buff *)0) 
                                  #line 245 
                                  return 1;
  #line 247 
  skb->__anonCompField_sk_buff_87.__anonCompField___anonunion_487_86.__anonCompField___anonstruct_488_85.dev = ndev;
  #line 248 
  hns3_lp_setup_skb(skb);
  #line 249 
  skb->queue_mapping = (unsigned short)0U;
  #line 251 
  good_cnt = 0U;
  #line 252 
  i = 0U;
  #line 252 
  while (i == 0U) {
    {
      #line 253 
      netdev_tx_t tx_ret;
      #line 255 
      skb_get(skb);
      #line 256 
      tx_ret = hns3_nic_net_xmit(skb,ndev);
      #line 257 
      if (tx_ret == (unsigned int)NETDEV_TX_OK) 
                                                #line 258 
                                                good_cnt ++;
      else {
        #line 260 
        kfree_skb(skb);
        #line 261 
        netdev_err(ndev,(char *)"hns3_lb_run_test xmit failed: %d\n",(int)tx_ret);
      }
    }
    #line 252 
    i ++;
  }
  #line 265 
  if (good_cnt != 1U) {
    #line 266 
    ret_val = 2;
    #line 267 
    netdev_err(ndev,(char *)"mode %d sent fail, cnt=0x%x, budget=0x%x\n",(unsigned int)mode,good_cnt,1);
    #line 269 
    goto out;
  }
  #line 273 
  msleep(200U);
  #line 275 
  good_cnt = hns3_lb_check_rx_ring(priv,1U);
  #line 276 
  if (good_cnt != 1U) {
    #line 277 
    ret_val = 3;
    #line 278 
    netdev_err(ndev,(char *)"mode %d recv fail, cnt=0x%x, budget=0x%x\n",(unsigned int)mode,good_cnt,1);
  }
  #line 282 
  out: 
       #line 282 
  ;
  #line 283 
  hns3_lb_clear_tx_ring(priv,0U,0U,1U);
  #line 287 
  kfree_skb(skb);
  #line 288 
  return ret_val;
}

#line 297  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_ethtool.c"
static void hns3_self_test(struct net_device *ndev, struct ethtool_test *eth_test, u64 *data)
{
  #line 302 
  int st_param[4U][2U];
  #line 305 
  bool dis_vlan_filter;
  #line 308 
  u32 i;
  #line 300 
  struct hns3_nic_priv *priv = netdev_priv(ndev);
  #line 301 
  struct hnae3_handle *h = priv->ae_handle;
  #line 303 
  bool if_running = netif_running(ndev);
  #line 307 
  int test_index = 0;
  #line 310 
  if ((int)hns3_nic_resetting(ndev) != 0) {
    #line 311 
    netdev_err(ndev,(char *)"dev resetting!");
    #line 312 
    return;
  }
  #line 316 
  if (eth_test->flags != 1U) 
                             #line 317 
                             return;
  #line 319 
  if ((h->msg_enable & 1U) != 0U) {
    #line 319 
    bool branch;
    #line 319 
    struct _ddebug __UNIQUE_ID_ddebug442 = {.modname = (char *)"hns3", .function = (char *)"hns3_self_test", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_ethtool.c", .format = (char *)"self test start", .lineno = (unsigned int)319U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 319 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug442.key.dd_key_false.key,(_Bool)0);
    #line 319 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 319 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug442,ndev,(char *)"self test start");
  }
  #line 321 
  st_param[0][0] = 0;
  #line 322 
  st_param[0][1] = (int)h->flags & 1;
  #line 325 
  st_param[1][0] = 1;
  #line 326 
  st_param[1][1] = (int)h->flags & 4;
  #line 329 
  st_param[2][0] = 2;
  #line 331 
  st_param[2][1] = (int)h->flags & 16;
  #line 334 
  st_param[3][0] = 3;
  #line 335 
  st_param[3][1] = (int)h->flags & 2;
  #line 338 
  if ((int)if_running != 0) 
                            #line 339 
                            (*((ndev->netdev_ops)->ndo_stop))(ndev);
  #line 343 
  dis_vlan_filter = (_Bool)(((ndev->features & 512ULL) != 0ULL && ((h->ae_algo)->ops)->enable_vlan_filter != (void (*)(struct hnae3_handle *, bool ))0) != 0);
  #line 345 
  if ((int)dis_vlan_filter != 0) 
                                 #line 346 
                                 (*(((h->ae_algo)->ops)->enable_vlan_filter))(h,(_Bool)0);
  #line 353 
  if (((h->ae_algo)->ops)->halt_autoneg != (int (*)(struct hnae3_handle *, bool ))0) 
    #line 354 
    (*(((h->ae_algo)->ops)->halt_autoneg))(h,(_Bool)1);
  #line 356 
  cif_set_bit_0(0L,& priv->state);
  #line 358 
  i = 0U;
  #line 358 
  while (i <= 3U) {
    {
      #line 359 
      enum hnae3_loop loop_type = (enum hnae3_loop)st_param[i][0];
      #line 361 
      if (st_param[i][1] == 0) 
                               #line 362 
                               goto __Cont;
      #line 364 
      *(data + (unsigned long)test_index) = (unsigned long long)hns3_lp_up(ndev,loop_type);
      #line 365 
      if (*(data + (unsigned long)test_index) == 0ULL) {
        #line 366 
        *(data + (unsigned long)test_index) = (unsigned long long)hns3_lp_run_test(ndev,loop_type);
      }
      #line 368 
      hns3_lp_down(ndev,loop_type);
      #line 370 
      if (*(data + (unsigned long)test_index) != 0ULL) 
                                                       #line 371 
                                                       eth_test->flags |= 2U;
      #line 373 
      test_index ++;
    }
    #line 358 
    __Cont: 
            #line 358 
    i ++;
  }
  #line 376 
  cif_clear_bit_0(0L,& priv->state);
  #line 378 
  if (((h->ae_algo)->ops)->halt_autoneg != (int (*)(struct hnae3_handle *, bool ))0) 
    #line 379 
    (*(((h->ae_algo)->ops)->halt_autoneg))(h,(_Bool)0);
  #line 382 
  if ((int)dis_vlan_filter != 0) 
                                 #line 383 
                                 (*(((h->ae_algo)->ops)->enable_vlan_filter))(h,(_Bool)1);
  #line 386 
  if ((int)if_running != 0) 
                            #line 387 
                            (*((ndev->netdev_ops)->ndo_open))(ndev);
  #line 389 
  if ((h->msg_enable & 1U) != 0U) {
    #line 389 
    bool branch_0;
    #line 389 
    struct _ddebug __UNIQUE_ID_ddebug443 = {.modname = (char *)"hns3", .function = (char *)"hns3_self_test", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_ethtool.c", .format = (char *)"self test end\n", .lineno = (unsigned int)389U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 389 
    branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug443.key.dd_key_false.key,(_Bool)0);
    #line 389 
    if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                  #line 389 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug443,ndev,(char *)"self test end\n");
  }
  #line 391 
  return;
}

#line 392  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_ethtool.c"
static int hns3_get_sset_count(struct net_device *netdev, int stringset)
{
  #line 394 
  struct hnae3_handle *h = ((struct hns3_nic_priv *)netdev_priv(netdev))->ae_handle;
  #line 395 
  struct hnae3_ae_ops *ops = (h->ae_algo)->ops;
  #line 397 
  if (ops->get_sset_count == (int (*)(struct hnae3_handle *, int ))0) 
    #line 398 
    return -95;
  #line 400 
  switch (stringset) {
    #line 401 
    case 1: 
            #line 401 
    ;
    #line 402 
    ;
    #line 402 
    return (int)((unsigned int)h->__anonCompField_hnae3_handle_215.kinfo.num_tqps * 26U + (unsigned int)(*(ops->get_sset_count))(h,stringset));
    #line 405 
    case 0: 
            #line 405 
    ;
    #line 406 
    return (*(ops->get_sset_count))(h,stringset);
    #line 408 
    default: 
             #line 408 
    ;
    #line 409 
    return -95;
  }
}

#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_ethtool.c"
static void *hns3_update_strings(u8 *data, struct hns3_stats *stats, u32 stat_count, u32 num_tqps, char *prefix)
{
  #line 417 
  u32 size_left;
  #line 418 
  u32 i;
  #line 418 
  u32 j;
  #line 419 
  u32 n1;
  #line 421 
  i = 0U;
  #line 421 
  while (i < num_tqps) {
    #line 422 
    j = 0U;
    #line 422 
    while (j < stat_count) {
      {
        #line 428 
        unsigned int __UNIQUE_ID___x444;
        #line 428 
        unsigned int tmp_0;
        #line 423 
        *(data + 31U) = (unsigned char)0U;
        #line 426 
        n1 = (unsigned int)snprintf((char *)data,10UL,(char *)"%s%d_",prefix,i);
        {
          #line 428 
          __UNIQUE_ID___x444 = n1;
          #line 428 
          unsigned int __UNIQUE_ID___y445 = 9U;
          #line 428 
          if (__UNIQUE_ID___x444 < __UNIQUE_ID___y445) 
                                                       #line 428 
                                                       tmp_0 = __UNIQUE_ID___x444; else 
                                                                    #line 428 
                                                                    tmp_0 = __UNIQUE_ID___y445;
          }
        #line 428 
        n1 = tmp_0;
        #line 429 
        size_left = 31U - n1;
        #line 432 
        strncat((char *)data,(char *)(& (stats + (unsigned long)j)->stats_string),(unsigned long)size_left);
        #line 433 
        data += 32U;
      }
      #line 422 
      j ++;
    }
    #line 421 
    i ++;
  }
  #line 437 
  return (void *)data;
}

#line 440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_ethtool.c"
static u8 *hns3_get_strings_tqps(struct hnae3_handle *handle, u8 *data)
{
  #line 442 
  struct hnae3_knic_private_info *kinfo = & handle->__anonCompField_hnae3_handle_215.kinfo;
  #line 443 
  char tx_prefix[4U] = {(char)'t', (char)'x', (char)'q', (char)'\000'};
  #line 444 
  char rx_prefix[4U] = {(char)'r', (char)'x', (char)'q', (char)'\000'};
  #line 447 
  data = (u8 *)hns3_update_strings(data,(struct hns3_stats *)(& hns3_txq_stats),13U,(unsigned int)kinfo->num_tqps,(char *)(& tx_prefix));
  #line 451 
  data = (u8 *)hns3_update_strings(data,(struct hns3_stats *)(& hns3_rxq_stats),13U,(unsigned int)kinfo->num_tqps,(char *)(& rx_prefix));
  #line 454 
  return data;
}

#line 457  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_ethtool.c"
static void hns3_get_strings(struct net_device *netdev, u32 stringset, u8 *data)
{
  #line 459 
  struct hnae3_handle *h = ((struct hns3_nic_priv *)netdev_priv(netdev))->ae_handle;
  #line 460 
  struct hnae3_ae_ops *ops = (h->ae_algo)->ops;
  #line 461 
  char *buff = (char *)data;
  #line 463 
  if (ops->get_strings == (void (*)(struct hnae3_handle *, u32 , u8 *))0) 
    #line 464 
    return;
  #line 466 
  switch (stringset) {
    #line 467 
    case (u32)1: 
                 #line 467 
    ;
    #line 468 
    buff = (char *)hns3_get_strings_tqps(h,(u8 *)buff);
    #line 469 
    (*(ops->get_strings))(h,stringset,(u8 *)buff);
    #line 470 
    break;
    #line 471 
    case (u32)0: 
                 #line 471 
    ;
    #line 472 
    (*(ops->get_strings))(h,stringset,data);
    #line 473 
    break;
    #line 474 
    default: 
             #line 474 
    ;
    #line 475 
    break;
  }
  #line 477 
  return;
}

#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_ethtool.c"
static u64 *hns3_get_stats_tqps(struct hnae3_handle *handle, u64 *data)
{
  #line 483 
  struct hns3_enet_ring *ring;
  #line 484 
  u8 *stat;
  #line 485 
  int i;
  #line 485 
  int j;
  #line 481 
  struct hns3_nic_priv *nic_priv = (struct hns3_nic_priv *)handle->priv;
  #line 482 
  struct hnae3_knic_private_info *kinfo = & handle->__anonCompField_hnae3_handle_215.kinfo;
  #line 488 
  i = 0;
  #line 488 
  while ((int)kinfo->num_tqps > i) {
    #line 489 
    ring = nic_priv->ring + (unsigned long)i;
    #line 490 
    j = 0;
    #line 490 
    while ((unsigned int)j <= 12U) {
      {
        #line 492 
        u64 *tmp;
        #line 491 
        stat = (u8 *)ring + (unsigned long)hns3_txq_stats[j].stats_offset;
        #line 492 
        tmp = data;
        #line 492 
        data ++;
        #line 492 
        *tmp = *((u64 *)stat);
      }
      #line 490 
      j ++;
    }
    #line 488 
    i ++;
  }
  #line 497 
  i = 0;
  #line 497 
  while ((int)kinfo->num_tqps > i) {
    #line 498 
    ring = nic_priv->ring + (unsigned long)((int)kinfo->num_tqps + i);
    #line 499 
    j = 0;
    #line 499 
    while ((unsigned int)j <= 12U) {
      {
        #line 501 
        u64 *tmp_0;
        #line 500 
        stat = (u8 *)ring + (unsigned long)hns3_rxq_stats[j].stats_offset;
        #line 501 
        tmp_0 = data;
        #line 501 
        data ++;
        #line 501 
        *tmp_0 = *((u64 *)stat);
      }
      #line 499 
      j ++;
    }
    #line 497 
    i ++;
  }
  #line 505 
  return data;
}

#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_ethtool.c"
static void hns3_get_stats(struct net_device *netdev, struct ethtool_stats *stats, u64 *data)
{
  #line 516 
  struct hnae3_handle *h = ((struct hns3_nic_priv *)netdev_priv(netdev))->ae_handle;
  #line 517 
  u64 *p = data;
  #line 519 
  if ((int)hns3_nic_resetting(netdev) != 0) {
    #line 520 
    netdev_err(netdev,(char *)"dev resetting, could not get stats\n");
    #line 521 
    return;
  }
  #line 524 
  if (((h->ae_algo)->ops)->get_stats == (void (*)(struct hnae3_handle *, u64 *))0 || ((h->ae_algo)->ops)->update_stats == (void (*)(struct hnae3_handle *, struct net_device_stats *))0) {
    #line 525 
    netdev_err(netdev,(char *)"could not get any statistics\n");
    #line 526 
    return;
  }
  #line 529 
  (*(((h->ae_algo)->ops)->update_stats))(h,& netdev->stats);
  #line 532 
  p = hns3_get_stats_tqps(h,p);
  #line 535 
  (*(((h->ae_algo)->ops)->get_stats))(h,p);
  #line 536 
  return;
}

#line 538  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_ethtool.c"
static void hns3_get_drvinfo(struct net_device *netdev, struct ethtool_drvinfo *drvinfo)
{
  #line 543 
  u32 fw_version;
  #line 541 
  struct hns3_nic_priv *priv = netdev_priv(netdev);
  #line 542 
  struct hnae3_handle *h = priv->ae_handle;
  #line 545 
  if (((h->ae_algo)->ops)->get_fw_version == (u32 (*)(struct hnae3_handle *))0) {
    #line 546 
    netdev_err(netdev,(char *)"could not get fw version!\n");
    #line 547 
    return;
  }
  #line 550 
  strncpy((char *)(& drvinfo->version),(char *)(& hns3_driver_version),32UL);
  #line 552 
  drvinfo->version[31UL] = (char)0;
  #line 554 
  strncpy((char *)(& drvinfo->driver),((h->pdev)->driver)->name,32UL);
  #line 556 
  drvinfo->driver[31UL] = (char)0;
  #line 558 
  ;
  #line 558 
  strncpy((char *)(& drvinfo->bus_info),pci_name(h->pdev),32UL);
  #line 560 
  drvinfo->bus_info[31] = (char)0;
  #line 562 
  fw_version = (*((((priv->ae_handle)->ae_algo)->ops)->get_fw_version))(h);
  #line 564 
  snprintf((char *)(& drvinfo->fw_version),32UL,(char *)"%lu.%lu.%lu.%lu",(unsigned long)(fw_version >> 24),((unsigned long)fw_version >> 16) & 255UL,((unsigned long)fw_version >> 8) & 255UL,(unsigned long)fw_version & 255UL);
  #line 573 
  return;
}

#line 576  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_ethtool.c"
static u32 hns3_get_link(struct net_device *netdev)
{
  #line 578 
  struct hnae3_handle *h = ((struct hns3_nic_priv *)netdev_priv(netdev))->ae_handle;
  #line 580 
  if (((h->ae_algo)->ops)->get_status != (int (*)(struct hnae3_handle *))0) {
    #line 581 
    return (unsigned int)(*(((h->ae_algo)->ops)->get_status))(h);
  }
  else 
       #line 583 
       return 0U;
}

#line 586  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_ethtool.c"
static void hns3_get_ringparam(struct net_device *netdev, struct ethtool_ringparam *param)
{
  #line 589 
  struct hns3_nic_priv *priv = netdev_priv(netdev);
  #line 590 
  struct hnae3_handle *h = priv->ae_handle;
  #line 591 
  int queue_num = (int)h->__anonCompField_hnae3_handle_215.kinfo.num_tqps;
  #line 593 
  if ((int)hns3_nic_resetting(netdev) != 0) {
    #line 594 
    netdev_err(netdev,(char *)"dev resetting!");
    #line 595 
    return;
  }
  #line 598 
  param->tx_max_pending = 32760U;
  #line 599 
  param->rx_max_pending = 32760U;
  #line 601 
  param->tx_pending = (unsigned int)(priv->ring)->desc_num;
  #line 602 
  param->rx_pending = (unsigned int)(priv->ring + (unsigned long)queue_num)->desc_num;
  #line 603 
  return;
}

#line 605  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_ethtool.c"
static void hns3_get_pauseparam(struct net_device *netdev, struct ethtool_pauseparam *param)
{
  #line 608 
  struct hnae3_handle *h = ((struct hns3_nic_priv *)netdev_priv(netdev))->ae_handle;
  #line 610 
  if (((h->ae_algo)->ops)->get_pauseparam != (void (*)(struct hnae3_handle *, u32 *, u32 *, u32 *))0) 
    #line 611 
    (*(((h->ae_algo)->ops)->get_pauseparam))(h,& param->autoneg,& param->rx_pause,& param->tx_pause);
  #line 613 
  return;
}

#line 615  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_ethtool.c"
static int hns3_set_pauseparam(struct net_device *netdev, struct ethtool_pauseparam *param)
{
  #line 618 
  struct hnae3_handle *h = ((struct hns3_nic_priv *)netdev_priv(netdev))->ae_handle;
  #line 620 
  if ((h->msg_enable & 1U) != 0U) {
    #line 620 
    bool branch;
    #line 620 
    struct _ddebug __UNIQUE_ID_ddebug446 = {.modname = (char *)"hns3", .function = (char *)"hns3_set_pauseparam", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_ethtool.c", .format = (char *)"set pauseparam: autoneg=%u, rx:%u, tx:%u\n", .lineno = (unsigned int)620U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 620 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug446.key.dd_key_false.key,(_Bool)0);
    #line 620 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 620 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug446,netdev,(char *)"set pauseparam: autoneg=%u, rx:%u, tx:%u\n",param->autoneg,param->rx_pause,param->tx_pause);
  }
  #line 624 
  if (((h->ae_algo)->ops)->set_pauseparam != (int (*)(struct hnae3_handle *, u32 , u32 , u32 ))0) {
    #line 625 
    return (*(((h->ae_algo)->ops)->set_pauseparam))(h,param->autoneg,
                                                 param->rx_pause,
                                                 param->tx_pause);
  }
  #line 628 
  return -95;
}

#line 631  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_ethtool.c"
static void hns3_get_ksettings(struct hnae3_handle *h, struct ethtool_link_ksettings *cmd)
{
  #line 634 
  struct hnae3_ae_ops *ops = (h->ae_algo)->ops;
  #line 637 
  if (ops->get_ksettings_an_result != (void (*)(struct hnae3_handle *, u8 *, u32 *, u8 *))0) 
    #line 638 
    (*(ops->get_ksettings_an_result))(h,& cmd->base.autoneg,& cmd->base.speed,& cmd->base.duplex);
  #line 644 
  if (ops->get_link_mode != (void (*)(struct hnae3_handle *, unsigned long *, unsigned long *))0) 
    #line 645 
    (*(ops->get_link_mode))(h,(unsigned long *)(& cmd->link_modes.supported),(unsigned long *)(& cmd->link_modes.advertising));
  #line 650 
  if (ops->get_mdix_mode != (void (*)(struct hnae3_handle *, u8 *, u8 *))0) 
    #line 651 
    (*(ops->get_mdix_mode))(h,& cmd->base.eth_tp_mdix_ctrl,& cmd->base.eth_tp_mdix);
  #line 653 
  return;
}

#line 655  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_ethtool.c"
static int hns3_get_link_ksettings(struct net_device *netdev, struct ethtool_link_ksettings *cmd)
{
  #line 659 
  struct hnae3_ae_ops *ops;
  #line 660 
  u8 module_type;
  #line 661 
  u8 media_type;
  #line 662 
  u8 link_stat;
  #line 658 
  struct hnae3_handle *h = ((struct hns3_nic_priv *)netdev_priv(netdev))->ae_handle;
  #line 664 
  ops = (h->ae_algo)->ops;
  #line 665 
  if (ops->get_media_type != (void (*)(struct hnae3_handle *, u8 *, u8 *))0) 
    #line 666 
    (*(ops->get_media_type))(h,& media_type,& module_type); else 
                                                                 #line 668 
                                                                 return -95;
  #line 670 
  switch ((int)media_type) {
    #line 671 
    case 4: 
            #line 671 
    ;
    #line 672 
    cmd->base.port = (unsigned char)239U;
    #line 673 
    hns3_get_ksettings(h,cmd);
    #line 674 
    break;
    #line 675 
    case 1: 
            #line 675 
    ;
    #line 676 
    if ((unsigned int)module_type == 4U) 
                                         #line 677 
                                         cmd->base.port = (unsigned char)5U; else 
                                                                    #line 679 
                                                                    cmd->base.port = (unsigned char)3U;
    #line 681 
    hns3_get_ksettings(h,cmd);
    #line 682 
    break;
    #line 683 
    case 3: 
            #line 683 
    ;
    #line 684 
    cmd->base.port = (unsigned char)239U;
    #line 685 
    hns3_get_ksettings(h,cmd);
    #line 686 
    break;
    #line 687 
    case 2: 
            #line 687 
    ;
    #line 688 
    cmd->base.port = (unsigned char)0U;
    #line 689 
    if (netdev->phydev == (struct phy_device *)0) 
                                                  #line 690 
                                                  hns3_get_ksettings(h,cmd); else 
                                                                    #line 692 
                                                                    phy_ethtool_ksettings_get(netdev->phydev,cmd);
    #line 693 
    break;
    #line 694 
    default: 
             #line 694 
    ;
    #line 696 
    netdev_warn(netdev,(char *)"Unknown media type");
    #line 697 
    return 0;
  }
  #line 701 
  cmd->base.mdio_support = (unsigned char)1U;
  #line 703 
  link_stat = (unsigned char)hns3_get_link(netdev);
  #line 704 
  if ((unsigned int)link_stat == 0U) {
    #line 705 
    cmd->base.speed = 4294967295U;
    #line 706 
    cmd->base.duplex = (unsigned char)255U;
  }
  #line 709 
  return 0;
}

#line 712  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_ethtool.c"
static int hns3_check_ksettings_param(struct net_device *netdev, struct ethtool_link_ksettings *cmd)
{
  #line 719 
  u8 autoneg;
  #line 720 
  u32 speed;
  #line 721 
  u8 duplex;
  #line 722 
  int ret;
  #line 715 
  struct hnae3_handle *handle = ((struct hns3_nic_priv *)netdev_priv(netdev))->ae_handle;
  #line 716 
  struct hnae3_ae_ops *ops = (handle->ae_algo)->ops;
  #line 717 
  u8 module_type = (unsigned char)0U;
  #line 718 
  u8 media_type = (unsigned char)0U;
  #line 727 
  if ((unsigned int)cmd->base.autoneg != 0U) 
                                             #line 728 
                                             return 0;
  #line 730 
  if (ops->get_ksettings_an_result != (void (*)(struct hnae3_handle *, u8 *, u32 *, u8 *))0) {
    #line 731 
    (*(ops->get_ksettings_an_result))(handle,& autoneg,& speed,& duplex);
    #line 732 
    if (((int)cmd->base.autoneg == (int)autoneg && cmd->base.speed == speed) && (int)cmd->base.duplex == (int)duplex) 
      #line 734 
      return 0;
  }
  #line 737 
  if (ops->get_media_type != (void (*)(struct hnae3_handle *, u8 *, u8 *))0) 
    #line 738 
    (*(ops->get_media_type))(handle,& media_type,& module_type);
  #line 740 
  if ((unsigned int)cmd->base.duplex != 1U && (unsigned int)media_type != 2U) {
    #line 742 
    netdev_err(netdev,(char *)"only copper port supports half duplex!");
    #line 744 
    return -22;
  }
  #line 747 
  if (ops->check_port_speed != (int (*)(struct hnae3_handle *, u32 ))0) {
    #line 748 
    ret = (*(ops->check_port_speed))(handle,cmd->base.speed);
    #line 749 
    if (ret != 0) {
      #line 750 
      netdev_err(netdev,(char *)"unsupported speed\n");
      #line 751 
      return ret;
    }
  }
  #line 755 
  return 0;
}

#line 758  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_ethtool.c"
static int hns3_set_link_ksettings(struct net_device *netdev, struct ethtool_link_ksettings *cmd)
{
  #line 763 
  int ret;
  #line 761 
  struct hnae3_handle *handle = ((struct hns3_nic_priv *)netdev_priv(netdev))->ae_handle;
  #line 762 
  struct hnae3_ae_ops *ops = (handle->ae_algo)->ops;
  #line 766 
  if (cmd->base.speed == 1000U && (unsigned int)cmd->base.duplex == 0U) 
    #line 767 
    return -22;
  #line 769 
  if ((handle->msg_enable & 1U) != 0U) {
    #line 769 
    bool branch;
    #line 769 
    struct _ddebug __UNIQUE_ID_ddebug447 = {.modname = (char *)"hns3", .function = (char *)"hns3_set_link_ksettings", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_ethtool.c", .format = (char *)"set link(%s): autoneg=%u, speed=%u, duplex=%u\n", .lineno = (unsigned int)769U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 769 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug447.key.dd_key_false.key,(_Bool)0);
    #line 769 
    if ((long)((long)((int)branch != 0)) != 0L) {
      #line 769 
      char *tmp_0;
      #line 769 
      ;
      #line 769 
      ;
      #line 769 
      ;
      #line 769 
      if (netdev->phydev != (struct phy_device *)0) 
                                                    #line 769 
                                                    tmp_0 = (char *)"phy"; else 
                                                                    #line 769 
                                                                    tmp_0 = (char *)"mac";
      #line 769 
      ;
      #line 769 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug447,netdev,(char *)"set link(%s): autoneg=%u, speed=%u, duplex=%u\n",tmp_0,(int)cmd->base.autoneg,cmd->base.speed,(int)cmd->base.duplex);
    }
  }
  #line 775 
  if (netdev->phydev != (struct phy_device *)0) {
    #line 776 
    return phy_ethtool_ksettings_set(netdev->phydev,cmd);
  }
  #line 778 
  if ((unsigned int)(handle->pdev)->revision == 32U) 
                                                     #line 779 
                                                     return -95;
  #line 781 
  ret = hns3_check_ksettings_param(netdev,cmd);
  #line 782 
  if (ret != 0) 
                #line 783 
                return ret;
  #line 785 
  if (ops->set_autoneg != (int (*)(struct hnae3_handle *, bool ))0) {
    #line 786 
    ret = (*(ops->set_autoneg))(handle,(_Bool)((unsigned int)cmd->base.autoneg != 0U));
    #line 787 
    if (ret != 0) 
                  #line 788 
                  return ret;
  }
  #line 794 
  if ((unsigned int)cmd->base.autoneg != 0U) {
    #line 795 
    netdev_info(netdev,(char *)"autoneg is on, ignore the speed and duplex\n");
    #line 797 
    return 0;
  }
  #line 800 
  if (ops->cfg_mac_speed_dup_h != (int (*)(struct hnae3_handle *, int , u8 ))0) 
    #line 801 
    ret = (*(ops->cfg_mac_speed_dup_h))(handle,(int)cmd->base.speed,(unsigned char)((int)cmd->base.duplex));
  #line 804 
  return ret;
}

#line 807  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_ethtool.c"
static u32 hns3_get_rss_key_size(struct net_device *netdev)
{
  #line 809 
  struct hnae3_handle *h = ((struct hns3_nic_priv *)netdev_priv(netdev))->ae_handle;
  #line 811 
  if (((h->ae_algo)->ops)->get_rss_key_size == (u32 (*)(struct hnae3_handle *))0) 
    #line 812 
    return 0U;
  #line 814 
  return (*(((h->ae_algo)->ops)->get_rss_key_size))(h);
}

#line 817  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_ethtool.c"
static u32 hns3_get_rss_indir_size(struct net_device *netdev)
{
  #line 819 
  struct hnae3_handle *h = ((struct hns3_nic_priv *)netdev_priv(netdev))->ae_handle;
  #line 821 
  if (((h->ae_algo)->ops)->get_rss_indir_size == (u32 (*)(struct hnae3_handle *))0) 
    #line 822 
    return 0U;
  #line 824 
  return (*(((h->ae_algo)->ops)->get_rss_indir_size))(h);
}

#line 827  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_ethtool.c"
static int hns3_get_rss(struct net_device *netdev, u32 *indir, u8 *key, u8 *hfunc)
{
  #line 830 
  struct hnae3_handle *h = ((struct hns3_nic_priv *)netdev_priv(netdev))->ae_handle;
  #line 832 
  if (((h->ae_algo)->ops)->get_rss == (int (*)(struct hnae3_handle *, u32 *, u8 *, u8 *))0) 
    #line 833 
    return -95;
  #line 835 
  return (*(((h->ae_algo)->ops)->get_rss))(h,indir,key,hfunc);
}

#line 838  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_ethtool.c"
static int hns3_set_rss(struct net_device *netdev, u32 *indir, u8 *key, u8 hfunc)
{
  #line 841 
  struct hnae3_handle *h = ((struct hns3_nic_priv *)netdev_priv(netdev))->ae_handle;
  #line 843 
  if (((h->ae_algo)->ops)->set_rss == (int (*)(struct hnae3_handle *, u32 *, u8 *, u8 ))0) 
    #line 844 
    return -95;
  #line 846 
  if ((unsigned int)(h->pdev)->revision == 32U && (unsigned int)hfunc != 1U || (unsigned int)hfunc > 2U) {
    #line 849 
    netdev_err(netdev,(char *)"hash func not supported\n");
    #line 850 
    return -95;
  }
  #line 853 
  if (indir == (u32 *)0U) {
    #line 854 
    netdev_err(netdev,(char *)"set rss failed for indir is empty\n");
    #line 856 
    return -95;
  }
  #line 859 
  return (*(((h->ae_algo)->ops)->set_rss))(h,indir,key,
                                          (unsigned char)((int)hfunc));
}

#line 862  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_ethtool.c"
static int hns3_get_rxnfc(struct net_device *netdev, struct ethtool_rxnfc *cmd, u32 *rule_locs)
{
  #line 866 
  struct hnae3_handle *h = ((struct hns3_nic_priv *)netdev_priv(netdev))->ae_handle;
  #line 868 
  switch (cmd->cmd) {
    #line 869 
    case (__u32)45: 
                    #line 869 
    ;
    #line 870 
    cmd->data = (unsigned long long)h->__anonCompField_hnae3_handle_215.kinfo.num_tqps;
    #line 871 
    return 0;
    #line 872 
    case (__u32)41: 
                    #line 872 
    ;
    #line 873 
    if (((h->ae_algo)->ops)->get_rss_tuple != (int (*)(struct hnae3_handle *, struct ethtool_rxnfc *))0) {
      #line 874 
      return (*(((h->ae_algo)->ops)->get_rss_tuple))(h,cmd);
    }
    #line 875 
    return -95;
    #line 876 
    case (__u32)46: 
                    #line 876 
    ;
    #line 877 
    if (((h->ae_algo)->ops)->get_fd_rule_cnt != (int (*)(struct hnae3_handle *, struct ethtool_rxnfc *))0) {
      #line 878 
      return (*(((h->ae_algo)->ops)->get_fd_rule_cnt))(h,cmd);
    }
    #line 879 
    return -95;
    #line 880 
    case (__u32)47: 
                    #line 880 
    ;
    #line 881 
    if (((h->ae_algo)->ops)->get_fd_rule_info != (int (*)(struct hnae3_handle *, struct ethtool_rxnfc *))0) {
      #line 882 
      return (*(((h->ae_algo)->ops)->get_fd_rule_info))(h,cmd);
    }
    #line 883 
    return -95;
    #line 884 
    case (__u32)48: 
                    #line 884 
    ;
    #line 885 
    if (((h->ae_algo)->ops)->get_fd_all_rules != (int (*)(struct hnae3_handle *, struct ethtool_rxnfc *, u32 *))0) {
      #line 886 
      return (*(((h->ae_algo)->ops)->get_fd_all_rules))(h,cmd,rule_locs);
    }
    #line 888 
    return -95;
    #line 889 
    default: 
             #line 889 
    ;
    #line 890 
    return -95;
  }
}

#line 894  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_ethtool.c"
static void hns3_change_all_ring_bd_num(struct hns3_nic_priv *priv, u32 tx_desc_num, u32 rx_desc_num)
{
  #line 898 
  int i;
  #line 897 
  struct hnae3_handle *h = priv->ae_handle;
  #line 900 
  h->__anonCompField_hnae3_handle_215.kinfo.num_tx_desc = (unsigned short)tx_desc_num;
  #line 901 
  h->__anonCompField_hnae3_handle_215.kinfo.num_rx_desc = (unsigned short)rx_desc_num;
  #line 903 
  i = 0;
  #line 903 
  while ((int)h->__anonCompField_hnae3_handle_215.kinfo.num_tqps > i) {
    #line 904 
    (priv->ring + (unsigned long)i)->desc_num = (unsigned short)tx_desc_num;
    #line 905 
    (priv->ring + (unsigned long)((int)h->__anonCompField_hnae3_handle_215.kinfo.num_tqps + i))->desc_num = (unsigned short)rx_desc_num;
    #line 903 
    i ++;
  }
  #line 907 
  return;
}

#line 909  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_ethtool.c"
static struct hns3_enet_ring *hns3_backup_ringparam(struct hns3_nic_priv *priv)
{
  #line 912 
  struct hns3_enet_ring *tmp_rings;
  #line 913 
  int i;
  #line 911 
  struct hnae3_handle *handle = priv->ae_handle;
  #line 915 
  tmp_rings = (struct hns3_enet_ring *)kcalloc((unsigned long)((int)handle->__anonCompField_hnae3_handle_215.kinfo.num_tqps * 2),4096UL,3264U);
  #line 917 
  if (tmp_rings == (struct hns3_enet_ring *)0) 
                                               #line 918 
                                               return (struct hns3_enet_ring *)0;
  #line 920 
  i = 0;
  #line 920 
  while ((int)handle->__anonCompField_hnae3_handle_215.kinfo.num_tqps * 2 > i) {
    #line 921 
    memcpy((void *)(tmp_rings + (unsigned long)i),(void *)(priv->ring + (unsigned long)i),4096UL);
    #line 923 
    (tmp_rings + (unsigned long)i)->skb = (struct sk_buff *)0;
    #line 920 
    i ++;
  }
  #line 926 
  return tmp_rings;
}

#line 929  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_ethtool.c"
static int hns3_check_ringparam(struct net_device *ndev, struct ethtool_ringparam *param)
{
  #line 932 
  if ((int)hns3_nic_resetting(ndev) != 0) 
                                          #line 933 
                                          return -16;
  #line 935 
  if (param->rx_mini_pending != 0U || param->rx_jumbo_pending != 0U) 
    #line 936 
    return -22;
  #line 938 
  if ((param->tx_pending + 4294967224U > 32688U || param->rx_pending > 32760U) || param->rx_pending <= 71U) {
    #line 942 
    netdev_err(ndev,(char *)"Queue depth out of range [%d-%d]\n",72,32760);
    #line 944 
    return -22;
  }
  #line 947 
  return 0;
}

#line 950  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_ethtool.c"
static int hns3_set_ringparam(struct net_device *ndev, struct ethtool_ringparam *param)
{
  #line 955 
  struct hns3_enet_ring *tmp_rings;
  #line 957 
  u32 old_tx_desc_num;
  #line 957 
  u32 new_tx_desc_num;
  #line 958 
  u32 old_rx_desc_num;
  #line 958 
  u32 new_rx_desc_num;
  #line 960 
  int ret;
  #line 960 
  int i;
  #line 953 
  struct hns3_nic_priv *priv = netdev_priv(ndev);
  #line 954 
  struct hnae3_handle *h = priv->ae_handle;
  #line 956 
  bool if_running = netif_running(ndev);
  #line 959 
  u16 queue_num = h->__anonCompField_hnae3_handle_215.kinfo.num_tqps;
  #line 962 
  ret = hns3_check_ringparam(ndev,param);
  #line 963 
  if (ret != 0) 
                #line 964 
                return ret;
  #line 967 
  new_tx_desc_num = (param->tx_pending + 7U) & 4294967288U;
  #line 968 
  new_rx_desc_num = (param->rx_pending + 7U) & 4294967288U;
  #line 969 
  old_tx_desc_num = (unsigned int)(priv->ring)->desc_num;
  #line 970 
  old_rx_desc_num = (unsigned int)(priv->ring + (unsigned long)queue_num)->desc_num;
  #line 971 
  if (old_tx_desc_num == new_tx_desc_num && old_rx_desc_num == new_rx_desc_num) 
    #line 973 
    return 0;
  #line 975 
  tmp_rings = hns3_backup_ringparam(priv);
  #line 976 
  if (tmp_rings == (struct hns3_enet_ring *)0) {
    #line 977 
    netdev_err(ndev,(char *)"backup ring param failed by allocating memory fail\n");
    #line 979 
    return -12;
  }
  #line 982 
  netdev_info(ndev,(char *)"Changing Tx/Rx ring depth from %u/%u to %u/%u\n",old_tx_desc_num,old_rx_desc_num,new_tx_desc_num,new_rx_desc_num);
  #line 987 
  if ((int)if_running != 0) 
                            #line 988 
                            (*((ndev->netdev_ops)->ndo_stop))(ndev);
  #line 990 
  hns3_change_all_ring_bd_num(priv,new_tx_desc_num,new_rx_desc_num);
  #line 991 
  ret = hns3_init_all_ring(priv);
  #line 992 
  if (ret != 0) {
    #line 993 
    netdev_err(ndev,(char *)"Change bd num fail, revert to old value(%d)\n",ret);
    #line 996 
    hns3_change_all_ring_bd_num(priv,old_tx_desc_num,old_rx_desc_num);
    #line 998 
    i = 0;
    #line 998 
    while ((int)h->__anonCompField_hnae3_handle_215.kinfo.num_tqps * 2 > i) {
      #line 999 
      memcpy((void *)(priv->ring + (unsigned long)i),(void *)(tmp_rings + (unsigned long)i),4096UL);
      #line 998 
      i ++;
    }
  }
  else {
    #line 1002 
    i = 0;
    #line 1002 
    while ((int)h->__anonCompField_hnae3_handle_215.kinfo.num_tqps * 2 > i) {
      #line 1003 
      hns3_fini_ring(tmp_rings + (unsigned long)i);
      #line 1002 
      i ++;
    }
  }
  #line 1006 
  kfree((void *)tmp_rings);
  #line 1008 
  if ((int)if_running != 0) 
                            #line 1009 
                            ret = (*((ndev->netdev_ops)->ndo_open))(ndev);
  #line 1011 
  return ret;
}

#line 1014  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_ethtool.c"
static int hns3_set_rxnfc(struct net_device *netdev, struct ethtool_rxnfc *cmd)
{
  #line 1016 
  struct hnae3_handle *h = ((struct hns3_nic_priv *)netdev_priv(netdev))->ae_handle;
  #line 1018 
  switch (cmd->cmd) {
    #line 1019 
    case (__u32)42: 
                    #line 1019 
    ;
    #line 1020 
    if (((h->ae_algo)->ops)->set_rss_tuple != (int (*)(struct hnae3_handle *, struct ethtool_rxnfc *))0) {
      #line 1021 
      return (*(((h->ae_algo)->ops)->set_rss_tuple))(h,cmd);
    }
    #line 1022 
    return -95;
    #line 1023 
    case (__u32)50: 
                    #line 1023 
    ;
    #line 1024 
    if (((h->ae_algo)->ops)->add_fd_entry != (int (*)(struct hnae3_handle *, struct ethtool_rxnfc *))0) {
      #line 1025 
      return (*(((h->ae_algo)->ops)->add_fd_entry))(h,cmd);
    }
    #line 1026 
    return -95;
    #line 1027 
    case (__u32)49: 
                    #line 1027 
    ;
    #line 1028 
    if (((h->ae_algo)->ops)->del_fd_entry != (int (*)(struct hnae3_handle *, struct ethtool_rxnfc *))0) {
      #line 1029 
      return (*(((h->ae_algo)->ops)->del_fd_entry))(h,cmd);
    }
    #line 1030 
    return -95;
    #line 1031 
    default: 
             #line 1031 
    ;
    #line 1032 
    return -95;
  }
}

#line 1036  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_ethtool.c"
static int hns3_nway_reset(struct net_device *netdev)
{
  #line 1041 
  int autoneg;
  #line 1038 
  struct hnae3_handle *handle = ((struct hns3_nic_priv *)netdev_priv(netdev))->ae_handle;
  #line 1039 
  struct hnae3_ae_ops *ops = (handle->ae_algo)->ops;
  #line 1040 
  struct phy_device *phy = netdev->phydev;
  #line 1043 
  if (! netif_running(netdev)) 
                               #line 1044 
                               return 0;
  #line 1046 
  if ((int)hns3_nic_resetting(netdev) != 0) {
    #line 1047 
    netdev_err(netdev,(char *)"dev resetting!");
    #line 1048 
    return -16;
  }
  #line 1051 
  if (ops->get_autoneg == (int (*)(struct hnae3_handle *))0 || ops->restart_autoneg == (int (*)(struct hnae3_handle *))0) 
    #line 1052 
    return -95;
  #line 1054 
  autoneg = (*(ops->get_autoneg))(handle);
  #line 1055 
  if (autoneg != 1) {
    #line 1056 
    netdev_err(netdev,(char *)"Autoneg is off, don\'t support to restart it\n");
    #line 1058 
    return -22;
  }
  #line 1061 
  if ((handle->msg_enable & 1U) != 0U) {
    #line 1061 
    bool branch;
    #line 1061 
    struct _ddebug __UNIQUE_ID_ddebug448 = {.modname = (char *)"hns3", .function = (char *)"hns3_nway_reset", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_ethtool.c", .format = (char *)"nway reset (using %s)\n", .lineno = (unsigned int)1061U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1061 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug448.key.dd_key_false.key,(_Bool)0);
    #line 1061 
    if ((long)((long)((int)branch != 0)) != 0L) {
      #line 1061 
      char *tmp_2;
      #line 1061 
      if (phy != (struct phy_device *)0) 
                                         #line 1061 
                                         tmp_2 = (char *)"phy"; else 
                                                                  #line 1061 
                                                                  tmp_2 = (char *)"mac";
      #line 1061 
      ;
      #line 1061 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug448,netdev,(char *)"nway reset (using %s)\n",tmp_2);
    }
  }
  #line 1064 
  if (phy != (struct phy_device *)0) {
    #line 1065 
    return genphy_restart_aneg(phy);
  }
  #line 1067 
  if ((unsigned int)(handle->pdev)->revision == 32U) 
                                                     #line 1068 
                                                     return -95;
  #line 1070 
  return (*(ops->restart_autoneg))(handle);
}

#line 1073  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_ethtool.c"
static void hns3_get_channels(struct net_device *netdev, struct ethtool_channels *ch)
{
  #line 1076 
  struct hnae3_handle *h = ((struct hns3_nic_priv *)netdev_priv(netdev))->ae_handle;
  #line 1078 
  if (((h->ae_algo)->ops)->get_channels != (void (*)(struct hnae3_handle *, struct ethtool_channels *))0) 
    #line 1079 
    (*(((h->ae_algo)->ops)->get_channels))(h,ch);
  #line 1080 
  return;
}

#line 1082  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_ethtool.c"
static int hns3_get_coalesce_per_queue(struct net_device *netdev, u32 queue, struct ethtool_coalesce *cmd)
{
  #line 1085 
  struct hns3_enet_tqp_vector *tx_vector;
  #line 1085 
  struct hns3_enet_tqp_vector *rx_vector;
  #line 1086 
  struct hns3_nic_priv *priv = netdev_priv(netdev);
  #line 1087 
  struct hnae3_handle *h = priv->ae_handle;
  #line 1088 
  u16 queue_num = h->__anonCompField_hnae3_handle_215.kinfo.num_tqps;
  #line 1090 
  if ((int)hns3_nic_resetting(netdev) != 0) 
                                            #line 1091 
                                            return -16;
  #line 1093 
  if ((unsigned int)queue_num <= queue) {
    #line 1094 
    netdev_err(netdev,(char *)"Invalid queue value %u! Queue max id=%u\n",queue,(int)queue_num + -1);
    #line 1097 
    return -22;
  }
  #line 1100 
  tx_vector = (priv->ring + (unsigned long)queue)->tqp_vector;
  #line 1101 
  rx_vector = (priv->ring + (unsigned long)((unsigned int)queue_num + queue))->tqp_vector;
  #line 1103 
  cmd->use_adaptive_tx_coalesce = (unsigned int)tx_vector->tx_group.coal.gl_adapt_enable;
  #line 1105 
  cmd->use_adaptive_rx_coalesce = (unsigned int)rx_vector->rx_group.coal.gl_adapt_enable;
  #line 1108 
  cmd->tx_coalesce_usecs = (unsigned int)tx_vector->tx_group.coal.int_gl;
  #line 1109 
  cmd->rx_coalesce_usecs = (unsigned int)rx_vector->rx_group.coal.int_gl;
  #line 1111 
  cmd->tx_coalesce_usecs_high = (unsigned int)h->__anonCompField_hnae3_handle_215.kinfo.int_rl_setting;
  #line 1112 
  cmd->rx_coalesce_usecs_high = (unsigned int)h->__anonCompField_hnae3_handle_215.kinfo.int_rl_setting;
  #line 1114 
  return 0;
}

#line 1117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_ethtool.c"
static int hns3_get_coalesce(struct net_device *netdev, struct ethtool_coalesce *cmd)
{
  #line 1120 
  return hns3_get_coalesce_per_queue(netdev,0U,cmd);
}

#line 1123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_ethtool.c"
static int hns3_check_gl_coalesce_para(struct net_device *netdev, struct ethtool_coalesce *cmd)
{
  #line 1126 
  u32 rx_gl;
  #line 1126 
  u32 tx_gl;
  #line 1128 
  if (cmd->rx_coalesce_usecs > 8160U) {
    #line 1129 
    netdev_err(netdev,(char *)"Invalid rx-usecs value, rx-usecs range is 0-%d\n",8160);
    #line 1132 
    return -22;
  }
  #line 1135 
  if (cmd->tx_coalesce_usecs > 8160U) {
    #line 1136 
    netdev_err(netdev,(char *)"Invalid tx-usecs value, tx-usecs range is 0-%d\n",8160);
    #line 1139 
    return -22;
  }
  #line 1142 
  rx_gl = cmd->rx_coalesce_usecs & 4294967294U;
  #line 1143 
  if (cmd->rx_coalesce_usecs != rx_gl) 
                                       #line 1144 
                                       netdev_info(netdev,(char *)"rx_usecs(%u) rounded down to %u, because it must be multiple of 2.\n",cmd->rx_coalesce_usecs,rx_gl);
  #line 1149 
  tx_gl = cmd->tx_coalesce_usecs & 4294967294U;
  #line 1150 
  if (cmd->tx_coalesce_usecs != tx_gl) 
                                       #line 1151 
                                       netdev_info(netdev,(char *)"tx_usecs(%u) rounded down to %u, because it must be multiple of 2.\n",cmd->tx_coalesce_usecs,tx_gl);
  #line 1156 
  return 0;
}

#line 1159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_ethtool.c"
static int hns3_check_rl_coalesce_para(struct net_device *netdev, struct ethtool_coalesce *cmd)
{
  #line 1162 
  u32 rl;
  #line 1164 
  if (cmd->tx_coalesce_usecs_high != cmd->rx_coalesce_usecs_high) {
    #line 1165 
    netdev_err(netdev,(char *)"tx_usecs_high must be same as rx_usecs_high.\n");
    #line 1167 
    return -22;
  }
  #line 1170 
  if (cmd->rx_coalesce_usecs_high > 236U) {
    #line 1171 
    netdev_err(netdev,(char *)"Invalid usecs_high value, usecs_high range is 0-%d\n",236);
    #line 1174 
    return -22;
  }
  #line 1177 
  rl = cmd->rx_coalesce_usecs_high & 4294967292U;
  #line 1178 
  if (cmd->rx_coalesce_usecs_high != rl) 
                                         #line 1179 
                                         netdev_info(netdev,(char *)"usecs_high(%u) rounded down to %u, because it must be multiple of 4.\n",cmd->rx_coalesce_usecs_high,rl);
  #line 1184 
  return 0;
}

#line 1187  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_ethtool.c"
static int hns3_check_coalesce_para(struct net_device *netdev, struct ethtool_coalesce *cmd)
{
  #line 1190 
  int ret;
  #line 1192 
  ret = hns3_check_gl_coalesce_para(netdev,cmd);
  #line 1193 
  if (ret != 0) {
    #line 1194 
    netdev_err(netdev,(char *)"Check gl coalesce param fail. ret = %d\n",ret);
    #line 1196 
    return ret;
  }
  #line 1199 
  ret = hns3_check_rl_coalesce_para(netdev,cmd);
  #line 1200 
  if (ret != 0) {
    #line 1201 
    netdev_err(netdev,(char *)"Check rl coalesce param fail. ret = %d\n",ret);
    #line 1203 
    return ret;
  }
  #line 1206 
  if (cmd->use_adaptive_tx_coalesce == 1U || cmd->use_adaptive_rx_coalesce == 1U) 
    #line 1208 
    netdev_info(netdev,(char *)"adaptive-tx=%u and adaptive-rx=%u, tx_usecs or rx_usecs will changed dynamically.\n",cmd->use_adaptive_tx_coalesce,cmd->use_adaptive_rx_coalesce);
  #line 1214 
  return 0;
}

#line 1217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_ethtool.c"
static void hns3_set_coalesce_per_queue(struct net_device *netdev, struct ethtool_coalesce *cmd, u32 queue)
{
  #line 1221 
  struct hns3_enet_tqp_vector *tx_vector;
  #line 1221 
  struct hns3_enet_tqp_vector *rx_vector;
  #line 1222 
  struct hns3_nic_priv *priv = netdev_priv(netdev);
  #line 1223 
  struct hnae3_handle *h = priv->ae_handle;
  #line 1224 
  int queue_num = (int)h->__anonCompField_hnae3_handle_215.kinfo.num_tqps;
  #line 1226 
  tx_vector = (priv->ring + (unsigned long)queue)->tqp_vector;
  #line 1227 
  rx_vector = (priv->ring + (unsigned long)((unsigned int)queue_num + queue))->tqp_vector;
  #line 1229 
  tx_vector->tx_group.coal.gl_adapt_enable = (unsigned char)cmd->use_adaptive_tx_coalesce;
  #line 1231 
  rx_vector->rx_group.coal.gl_adapt_enable = (unsigned char)cmd->use_adaptive_rx_coalesce;
  #line 1234 
  tx_vector->tx_group.coal.int_gl = (unsigned short)cmd->tx_coalesce_usecs;
  #line 1235 
  rx_vector->rx_group.coal.int_gl = (unsigned short)cmd->rx_coalesce_usecs;
  #line 1237 
  hns3_set_vector_coalesce_tx_gl(tx_vector,(unsigned int)tx_vector->tx_group.coal.int_gl);
  #line 1239 
  hns3_set_vector_coalesce_rx_gl(rx_vector,(unsigned int)rx_vector->rx_group.coal.int_gl);
  #line 1242 
  hns3_set_vector_coalesce_rl(tx_vector,(unsigned int)h->__anonCompField_hnae3_handle_215.kinfo.int_rl_setting);
  #line 1243 
  hns3_set_vector_coalesce_rl(rx_vector,(unsigned int)h->__anonCompField_hnae3_handle_215.kinfo.int_rl_setting);
  #line 1244 
  return;
}

#line 1246  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_ethtool.c"
static int hns3_set_coalesce(struct net_device *netdev, struct ethtool_coalesce *cmd)
{
  #line 1251 
  int ret;
  #line 1252 
  int i;
  #line 1249 
  struct hnae3_handle *h = ((struct hns3_nic_priv *)netdev_priv(netdev))->ae_handle;
  #line 1250 
  u16 queue_num = h->__anonCompField_hnae3_handle_215.kinfo.num_tqps;
  #line 1254 
  if ((int)hns3_nic_resetting(netdev) != 0) 
                                            #line 1255 
                                            return -16;
  #line 1257 
  ret = hns3_check_coalesce_para(netdev,cmd);
  #line 1258 
  if (ret != 0) 
                #line 1259 
                return ret;
  #line 1261 
  h->__anonCompField_hnae3_handle_215.kinfo.int_rl_setting = (unsigned short)((unsigned int)((unsigned short)cmd->rx_coalesce_usecs_high) & 65532U);
  #line 1264 
  i = 0;
  #line 1264 
  while ((int)queue_num > i) {
    #line 1265 
    hns3_set_coalesce_per_queue(netdev,cmd,(unsigned int)i);
    #line 1264 
    i ++;
  }
  #line 1267 
  return 0;
}

#line 1270  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_ethtool.c"
static int hns3_get_regs_len(struct net_device *netdev)
{
  #line 1272 
  struct hnae3_handle *h = ((struct hns3_nic_priv *)netdev_priv(netdev))->ae_handle;
  #line 1274 
  if (((h->ae_algo)->ops)->get_regs_len == (int (*)(struct hnae3_handle *))0) 
    #line 1275 
    return -95;
  #line 1277 
  return (*(((h->ae_algo)->ops)->get_regs_len))(h);
}

#line 1280  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_ethtool.c"
static void hns3_get_regs(struct net_device *netdev, struct ethtool_regs *cmd, void *data)
{
  #line 1283 
  struct hnae3_handle *h = ((struct hns3_nic_priv *)netdev_priv(netdev))->ae_handle;
  #line 1285 
  if (((h->ae_algo)->ops)->get_regs == (void (*)(struct hnae3_handle *, u32 *, void *))0) 
    #line 1286 
    return;
  #line 1288 
  (*(((h->ae_algo)->ops)->get_regs))(h,& cmd->version,data);
  #line 1289 
  return;
}

#line 1291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_ethtool.c"
static int hns3_set_phys_id(struct net_device *netdev, enum ethtool_phys_id_state state)
{
  #line 1294 
  struct hnae3_handle *h = ((struct hns3_nic_priv *)netdev_priv(netdev))->ae_handle;
  #line 1296 
  if (((h->ae_algo)->ops)->set_led_id == (int (*)(struct hnae3_handle *, enum ethtool_phys_id_state ))0) 
    #line 1297 
    return -95;
  #line 1299 
  return (*(((h->ae_algo)->ops)->set_led_id))(h,state);
}

#line 1302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_ethtool.c"
static u32 hns3_get_msglevel(struct net_device *netdev)
{
  #line 1304 
  struct hnae3_handle *h = ((struct hns3_nic_priv *)netdev_priv(netdev))->ae_handle;
  #line 1306 
  return h->msg_enable;
}

#line 1309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_ethtool.c"
static void hns3_set_msglevel(struct net_device *netdev, u32 msg_level)
{
  #line 1311 
  struct hnae3_handle *h = ((struct hns3_nic_priv *)netdev_priv(netdev))->ae_handle;
  #line 1313 
  h->msg_enable = msg_level;
  #line 1314 
  return;
}

#line 1317  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_ethtool.c"
static unsigned int loc_to_eth_fec(u8 loc_fec)
{
  #line 1319 
  u32 eth_fec = 0U;
  #line 1321 
  if (((unsigned long)loc_fec & 1UL) != 0UL) 
                                             #line 1322 
                                             eth_fec |= 2U;
  #line 1323 
  if (((unsigned long)loc_fec & 4UL) != 0UL) 
                                             #line 1324 
                                             eth_fec |= 8U;
  #line 1325 
  if (((unsigned long)loc_fec & 2UL) != 0UL) 
                                             #line 1326 
                                             eth_fec |= 16U;
  #line 1329 
  if (eth_fec == 0U) 
                     #line 1330 
                     eth_fec = 4U;
  #line 1332 
  return eth_fec;
}

#line 1336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_ethtool.c"
static unsigned int eth_to_loc_fec(unsigned int eth_fec)
{
  #line 1338 
  u32 loc_fec = 0U;
  #line 1340 
  if ((eth_fec & 4U) != 0U) 
                            #line 1341 
                            return loc_fec;
  #line 1343 
  if ((eth_fec & 2U) != 0U) 
                            #line 1344 
                            loc_fec |= 1U;
  #line 1345 
  if ((eth_fec & 8U) != 0U) 
                            #line 1346 
                            loc_fec |= 4U;
  #line 1347 
  if ((eth_fec & 16U) != 0U) 
                             #line 1348 
                             loc_fec |= 2U;
  #line 1350 
  return loc_fec;
}

#line 1353  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_ethtool.c"
static int hns3_get_fecparam(struct net_device *netdev, struct ethtool_fecparam *fec)
{
  #line 1358 
  u8 fec_ability;
  #line 1359 
  u8 fec_mode;
  #line 1356 
  struct hnae3_handle *handle = ((struct hns3_nic_priv *)netdev_priv(netdev))->ae_handle;
  #line 1357 
  struct hnae3_ae_ops *ops = (handle->ae_algo)->ops;
  #line 1361 
  if ((unsigned int)(handle->pdev)->revision == 32U) 
                                                     #line 1362 
                                                     return -95;
  #line 1364 
  if (ops->get_fec == (void (*)(struct hnae3_handle *, u8 *, u8 *))0) 
    #line 1365 
    return -95;
  #line 1367 
  (*(ops->get_fec))(handle,& fec_ability,& fec_mode);
  #line 1369 
  fec->fec = loc_to_eth_fec((unsigned char)((int)fec_ability));
  #line 1370 
  fec->active_fec = loc_to_eth_fec((unsigned char)((int)fec_mode));
  #line 1372 
  return 0;
}

#line 1375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_ethtool.c"
static int hns3_set_fecparam(struct net_device *netdev, struct ethtool_fecparam *fec)
{
  #line 1380 
  u32 fec_mode;
  #line 1378 
  struct hnae3_handle *handle = ((struct hns3_nic_priv *)netdev_priv(netdev))->ae_handle;
  #line 1379 
  struct hnae3_ae_ops *ops = (handle->ae_algo)->ops;
  #line 1382 
  if ((unsigned int)(handle->pdev)->revision == 32U) 
                                                     #line 1383 
                                                     return -95;
  #line 1385 
  if (ops->set_fec == (int (*)(struct hnae3_handle *, u32 ))0) 
                                                               #line 1386 
                                                               return -95;
  #line 1387 
  fec_mode = eth_to_loc_fec(fec->fec);
  #line 1389 
  if ((handle->msg_enable & 1U) != 0U) {
    #line 1389 
    bool branch;
    #line 1389 
    struct _ddebug __UNIQUE_ID_ddebug449 = {.modname = (char *)"hns3", .function = (char *)"hns3_set_fecparam", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_ethtool.c", .format = (char *)"set fecparam: mode=%u\n", .lineno = (unsigned int)1389U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1389 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug449.key.dd_key_false.key,(_Bool)0);
    #line 1389 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 1389 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug449,netdev,(char *)"set fecparam: mode=%u\n",fec_mode);
  }
  #line 1391 
  return (*(ops->set_fec))(handle,fec_mode);
}

#line 1394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_ethtool.c"
static struct ethtool_ops hns3vf_ethtool_ops = {.get_drvinfo = & hns3_get_drvinfo, .get_regs_len = & hns3_get_regs_len, .get_regs = & hns3_get_regs, .get_msglevel = & hns3_get_msglevel, .set_msglevel = & hns3_set_msglevel, .get_link = & hns3_get_link, .get_coalesce = & hns3_get_coalesce, .set_coalesce = & hns3_set_coalesce, .get_ringparam = & hns3_get_ringparam, .set_ringparam = & hns3_set_ringparam, .get_strings = & hns3_get_strings, .get_ethtool_stats = & hns3_get_stats, .get_sset_count = & hns3_get_sset_count, .get_rxnfc = & hns3_get_rxnfc, .set_rxnfc = & hns3_set_rxnfc, .get_rxfh_key_size = & hns3_get_rss_key_size, .get_rxfh_indir_size = & hns3_get_rss_indir_size, .get_rxfh = & hns3_get_rss, .set_rxfh = & hns3_set_rss, .get_channels = & hns3_get_channels, .set_channels = & hns3_set_channels, .get_link_ksettings = & hns3_get_link_ksettings};
#line 1419  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_ethtool.c"
static struct ethtool_ops hns3_ethtool_ops = {.get_drvinfo = & hns3_get_drvinfo, .get_regs_len = & hns3_get_regs_len, .get_regs = & hns3_get_regs, .get_msglevel = & hns3_get_msglevel, .set_msglevel = & hns3_set_msglevel, .nway_reset = & hns3_nway_reset, .get_link = & hns3_get_link, .get_coalesce = & hns3_get_coalesce, .set_coalesce = & hns3_set_coalesce, .get_ringparam = & hns3_get_ringparam, .set_ringparam = & hns3_set_ringparam, .get_pauseparam = & hns3_get_pauseparam, .set_pauseparam = & hns3_set_pauseparam, .self_test = & hns3_self_test, .get_strings = & hns3_get_strings, .set_phys_id = & hns3_set_phys_id, .get_ethtool_stats = & hns3_get_stats, .get_sset_count = & hns3_get_sset_count, .get_rxnfc = & hns3_get_rxnfc, .set_rxnfc = & hns3_set_rxnfc, .get_rxfh_key_size = & hns3_get_rss_key_size, .get_rxfh_indir_size = & hns3_get_rss_indir_size, .get_rxfh = & hns3_get_rss, .set_rxfh = & hns3_set_rss, .get_channels = & hns3_get_channels, .set_channels = & hns3_set_channels, .get_link_ksettings = & hns3_get_link_ksettings, .set_link_ksettings = & hns3_set_link_ksettings, .get_fecparam = & hns3_get_fecparam, .set_fecparam = & hns3_set_fecparam};
#line 1452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_ethtool.c"
void hns3_ethtool_set_ops(struct net_device *netdev)
{
  #line 1454 
  struct hnae3_handle *h = ((struct hns3_nic_priv *)netdev_priv(netdev))->ae_handle;
  #line 1456 
  if ((h->flags & 8ULL) != 0ULL) 
                                 #line 1457 
                                 netdev->ethtool_ops = & hns3vf_ethtool_ops; else 
                                                                    #line 1459 
                                                                    netdev->ethtool_ops = & hns3_ethtool_ops;
  #line 1460 
  return;
}

#line 104  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_ethtool.i.aux"
void emg_wrapper_hns3_get_channels(struct net_device *arg0, struct ethtool_channels *arg1)
{
  #line 105 
  hns3_get_channels(arg0,arg1);
  #line 106 
  return;
}

#line 109  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_ethtool.i.aux"
int emg_wrapper_hns3_get_coalesce(struct net_device *arg0, struct ethtool_coalesce *arg1)
{
  #line 110 
  return hns3_get_coalesce(arg0,arg1);
}

#line 114  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_ethtool.i.aux"
void emg_wrapper_hns3_get_drvinfo(struct net_device *arg0, struct ethtool_drvinfo *arg1)
{
  #line 115 
  hns3_get_drvinfo(arg0,arg1);
  #line 116 
  return;
}

#line 119  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_ethtool.i.aux"
int emg_wrapper_hns3_get_fecparam(struct net_device *arg0, struct ethtool_fecparam *arg1)
{
  #line 120 
  return hns3_get_fecparam(arg0,arg1);
}

#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_ethtool.i.aux"
unsigned int emg_wrapper_hns3_get_link(struct net_device *arg0)
{
  #line 125 
  return hns3_get_link(arg0);
}

#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_ethtool.i.aux"
int emg_wrapper_hns3_get_link_ksettings(struct net_device *arg0, struct ethtool_link_ksettings *arg1)
{
  #line 130 
  return hns3_get_link_ksettings(arg0,arg1);
}

#line 134  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_ethtool.i.aux"
unsigned int emg_wrapper_hns3_get_msglevel(struct net_device *arg0)
{
  #line 135 
  return hns3_get_msglevel(arg0);
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_ethtool.i.aux"
void emg_wrapper_hns3_get_pauseparam(struct net_device *arg0, struct ethtool_pauseparam *arg1)
{
  #line 140 
  hns3_get_pauseparam(arg0,arg1);
  #line 141 
  return;
}

#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_ethtool.i.aux"
void emg_wrapper_hns3_get_regs(struct net_device *arg0, struct ethtool_regs *arg1, void *arg2)
{
  #line 145 
  hns3_get_regs(arg0,arg1,arg2);
  #line 146 
  return;
}

#line 149  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_ethtool.i.aux"
int emg_wrapper_hns3_get_regs_len(struct net_device *arg0)
{
  #line 150 
  return hns3_get_regs_len(arg0);
}

#line 154  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_ethtool.i.aux"
void emg_wrapper_hns3_get_ringparam(struct net_device *arg0, struct ethtool_ringparam *arg1)
{
  #line 155 
  hns3_get_ringparam(arg0,arg1);
  #line 156 
  return;
}

#line 159  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_ethtool.i.aux"
int emg_wrapper_hns3_get_rss(struct net_device *arg0, unsigned int *arg1, unsigned char *arg2, unsigned char *arg3)
{
  #line 160 
  return hns3_get_rss(arg0,arg1,arg2,arg3);
}

#line 164  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_ethtool.i.aux"
unsigned int emg_wrapper_hns3_get_rss_indir_size(struct net_device *arg0)
{
  #line 165 
  return hns3_get_rss_indir_size(arg0);
}

#line 169  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_ethtool.i.aux"
unsigned int emg_wrapper_hns3_get_rss_key_size(struct net_device *arg0)
{
  #line 170 
  return hns3_get_rss_key_size(arg0);
}

#line 174  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_ethtool.i.aux"
int emg_wrapper_hns3_get_rxnfc(struct net_device *arg0, struct ethtool_rxnfc *arg1, unsigned int *arg2)
{
  #line 175 
  return hns3_get_rxnfc(arg0,arg1,arg2);
}

#line 179  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_ethtool.i.aux"
int emg_wrapper_hns3_get_sset_count(struct net_device *arg0, int arg1)
{
  #line 180 
  return hns3_get_sset_count(arg0,arg1);
}

#line 184  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_ethtool.i.aux"
void emg_wrapper_hns3_get_stats(struct net_device *arg0, struct ethtool_stats *arg1, unsigned long long *arg2)
{
  #line 185 
  hns3_get_stats(arg0,arg1,arg2);
  #line 186 
  return;
}

#line 189  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_ethtool.i.aux"
void emg_wrapper_hns3_get_strings(struct net_device *arg0, unsigned int arg1, unsigned char *arg2)
{
  #line 190 
  hns3_get_strings(arg0,arg1,arg2);
  #line 191 
  return;
}

#line 194  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_ethtool.i.aux"
int emg_wrapper_hns3_nway_reset(struct net_device *arg0)
{
  #line 195 
  return hns3_nway_reset(arg0);
}

#line 199  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_ethtool.i.aux"
void emg_wrapper_hns3_self_test(struct net_device *arg0, struct ethtool_test *arg1, unsigned long long *arg2)
{
  #line 200 
  hns3_self_test(arg0,arg1,arg2);
  #line 201 
  return;
}

#line 204  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_ethtool.i.aux"
int emg_wrapper_hns3_set_coalesce(struct net_device *arg0, struct ethtool_coalesce *arg1)
{
  #line 205 
  return hns3_set_coalesce(arg0,arg1);
}

#line 209  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_ethtool.i.aux"
int emg_wrapper_hns3_set_fecparam(struct net_device *arg0, struct ethtool_fecparam *arg1)
{
  #line 210 
  return hns3_set_fecparam(arg0,arg1);
}

#line 214  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_ethtool.i.aux"
int emg_wrapper_hns3_set_link_ksettings(struct net_device *arg0, struct ethtool_link_ksettings *arg1)
{
  #line 215 
  return hns3_set_link_ksettings(arg0,arg1);
}

#line 219  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_ethtool.i.aux"
void emg_wrapper_hns3_set_msglevel(struct net_device *arg0, unsigned int arg1)
{
  #line 220 
  hns3_set_msglevel(arg0,arg1);
  #line 221 
  return;
}

#line 224  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_ethtool.i.aux"
int emg_wrapper_hns3_set_pauseparam(struct net_device *arg0, struct ethtool_pauseparam *arg1)
{
  #line 225 
  return hns3_set_pauseparam(arg0,arg1);
}

#line 229  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_ethtool.i.aux"
int emg_wrapper_hns3_set_phys_id(struct net_device *arg0, enum ethtool_phys_id_state arg1)
{
  #line 230 
  return hns3_set_phys_id(arg0,arg1);
}

#line 234  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_ethtool.i.aux"
int emg_wrapper_hns3_set_ringparam(struct net_device *arg0, struct ethtool_ringparam *arg1)
{
  #line 235 
  return hns3_set_ringparam(arg0,arg1);
}

#line 239  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_ethtool.i.aux"
int emg_wrapper_hns3_set_rss(struct net_device *arg0, unsigned int *arg1, unsigned char *arg2, unsigned char arg3)
{
  #line 240 
  return hns3_set_rss(arg0,arg1,arg2,(unsigned char)((int)arg3));
}

#line 244  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_ethtool.i.aux"
int emg_wrapper_hns3_set_rxnfc(struct net_device *arg0, struct ethtool_rxnfc *arg1)
{
  #line 245 
  return hns3_set_rxnfc(arg0,arg1);
}

#line 264  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_ethtool.i.aux"
static void cif_set_bit_0(long nr, unsigned long *addr)
{
  #line 267 
  ldv_set_bit(nr,addr);
  #line 268 
  return;
}

#line 271  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_ethtool.i.aux"
static void cif_clear_bit_0(long nr, unsigned long *addr)
{
  #line 274 
  ldv_clear_bit(nr,addr);
  #line 275 
  return;
}

#line 543  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_ethtool.i.aux"
static void *kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 546 
  return ldv_kcalloc(n,size,flags);
}

#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_dcbnl.c"
static int hns3_dcbnl_ieee_getets(struct net_device *ndev, struct ieee_ets *ets)
{
  #line 9 
  struct hnae3_handle *h = ((struct hns3_nic_priv *)netdev_priv(ndev))->ae_handle;
  #line 11 
  if ((int)hns3_nic_resetting(ndev) != 0) 
                                          #line 12 
                                          return -16;
  #line 14 
  if ((h->__anonCompField_hnae3_handle_215.kinfo.dcb_ops)->ieee_getets != (int (*)(struct hnae3_handle *, struct ieee_ets *))0) {
    #line 15 
    return (*((h->__anonCompField_hnae3_handle_215.kinfo.dcb_ops)->ieee_getets))
(h,ets);
  }
  #line 17 
  return -95;
}

#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_dcbnl.c"
static int hns3_dcbnl_ieee_setets(struct net_device *ndev, struct ieee_ets *ets)
{
  #line 22 
  struct hnae3_handle *h = ((struct hns3_nic_priv *)netdev_priv(ndev))->ae_handle;
  #line 24 
  if ((int)hns3_nic_resetting(ndev) != 0) 
                                          #line 25 
                                          return -16;
  #line 27 
  if ((h->__anonCompField_hnae3_handle_215.kinfo.dcb_ops)->ieee_setets != (int (*)(struct hnae3_handle *, struct ieee_ets *))0) {
    #line 28 
    return (*((h->__anonCompField_hnae3_handle_215.kinfo.dcb_ops)->ieee_setets))
(h,ets);
  }
  #line 30 
  return -95;
}

#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_dcbnl.c"
static int hns3_dcbnl_ieee_getpfc(struct net_device *ndev, struct ieee_pfc *pfc)
{
  #line 35 
  struct hnae3_handle *h = ((struct hns3_nic_priv *)netdev_priv(ndev))->ae_handle;
  #line 37 
  if ((int)hns3_nic_resetting(ndev) != 0) 
                                          #line 38 
                                          return -16;
  #line 40 
  if ((h->__anonCompField_hnae3_handle_215.kinfo.dcb_ops)->ieee_getpfc != (int (*)(struct hnae3_handle *, struct ieee_pfc *))0) {
    #line 41 
    return (*((h->__anonCompField_hnae3_handle_215.kinfo.dcb_ops)->ieee_getpfc))
(h,pfc);
  }
  #line 43 
  return -95;
}

#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_dcbnl.c"
static int hns3_dcbnl_ieee_setpfc(struct net_device *ndev, struct ieee_pfc *pfc)
{
  #line 48 
  struct hnae3_handle *h = ((struct hns3_nic_priv *)netdev_priv(ndev))->ae_handle;
  #line 50 
  if ((int)hns3_nic_resetting(ndev) != 0) 
                                          #line 51 
                                          return -16;
  #line 53 
  if ((h->__anonCompField_hnae3_handle_215.kinfo.dcb_ops)->ieee_setpfc != (int (*)(struct hnae3_handle *, struct ieee_pfc *))0) {
    #line 54 
    return (*((h->__anonCompField_hnae3_handle_215.kinfo.dcb_ops)->ieee_setpfc))
(h,pfc);
  }
  #line 56 
  return -95;
}

#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_dcbnl.c"
static u8 hns3_dcbnl_getdcbx(struct net_device *ndev)
{
  #line 62 
  struct hnae3_handle *h = ((struct hns3_nic_priv *)netdev_priv(ndev))->ae_handle;
  #line 64 
  if ((h->__anonCompField_hnae3_handle_215.kinfo.dcb_ops)->getdcbx != (u8 (*)(struct hnae3_handle *))0) {
    #line 65 
    return (*((h->__anonCompField_hnae3_handle_215.kinfo.dcb_ops)->getdcbx))
(h);
  }
  #line 67 
  return (unsigned char)0U;
}

#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_dcbnl.c"
static u8 hns3_dcbnl_setdcbx(struct net_device *ndev, u8 mode)
{
  #line 73 
  struct hnae3_handle *h = ((struct hns3_nic_priv *)netdev_priv(ndev))->ae_handle;
  #line 75 
  if ((h->__anonCompField_hnae3_handle_215.kinfo.dcb_ops)->setdcbx != (u8 (*)(struct hnae3_handle *, u8 ))0) {
    #line 76 
    return (*((h->__anonCompField_hnae3_handle_215.kinfo.dcb_ops)->setdcbx))
(h,(unsigned char)((int)mode));
  }
  #line 78 
  return (unsigned char)1U;
}

#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_dcbnl.c"
static struct dcbnl_rtnl_ops hns3_dcbnl_ops = {.ieee_getets = & hns3_dcbnl_ieee_getets, .ieee_setets = & hns3_dcbnl_ieee_setets, .ieee_getpfc = & hns3_dcbnl_ieee_getpfc, .ieee_setpfc = & hns3_dcbnl_ieee_setpfc, .getdcbx = & hns3_dcbnl_getdcbx, .setdcbx = & hns3_dcbnl_setdcbx};
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_dcbnl.c"
void hns3_dcbnl_setup(struct hnae3_handle *handle)
{
  #line 96 
  struct net_device *dev = handle->__anonCompField_hnae3_handle_215.kinfo.netdev;
  #line 98 
  if (handle->__anonCompField_hnae3_handle_215.kinfo.dcb_ops == (struct hnae3_dcb_ops *)0 || (handle->flags & 8ULL) != 0ULL) 
    #line 99 
    return;
  #line 101 
  dev->dcbnl_ops = & hns3_dcbnl_ops;
  #line 102 
  return;
}

/* compiler builtin: 
   unsigned long __builtin_object_size(void *, int);   */
#line 385  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
#line 385 
int kstrtouint(char *, unsigned int, unsigned int *);
#line 487 
#line 487 
int sscanf(char *, char * , ...);
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 155  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_debugfs.i.aux"
static int cif_strncmp(char *cs, char *ct, __kernel_size_t count);
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 59 
char *strchr(char *, int);
#line 88 
#line 162  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_debugfs.i.aux"
static size_t cif_strlen(char *s);
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/thread_info.h"
#line 112 
void __check_object_size(void *, unsigned long, bool);
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/thread_info.h"
__inline static void check_object_size(void *ptr, unsigned long n, bool to_user)
{
  #line 118 
  if (0 == 0) 
              #line 119 
              __check_object_size(ptr,n,(_Bool)((bool)((int)to_user) != 0));
  #line 120 
  return;
}

#line 128 
#line 128 
void __bad_copy_from(void);
#line 130 
#line 130 
void __bad_copy_to(void);
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/thread_info.h"
__inline static void copy_overflow(int size, unsigned long count)
{
  #line 134 
  int __ret_warn_on = 1;
  #line 134 
  if ((long)(__ret_warn_on != 0) != 0L) {
    #line 134 
    __warn_printk((char *)"Buffer overflow detected (%d < %lu)!\n",size,count);
    #line 135 
    ldv_inline_asm();
    #line 136 
    ldv_inline_asm();
  }
  #line 134 
  long tmp = (long)(__ret_warn_on != 0);
  #line 136 
  return;
}

#line 138  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/thread_info.h"
__inline static bool check_copy_size(void *addr, size_t bytes, bool is_source)
{
  #line 150 
  int __ret_warn_on;
  #line 140 
  int sz = (int)__builtin_object_size(addr,0);
  #line 141 
  if ((long)(sz >= 0) != 0L && (long)((unsigned long)sz < bytes) != 0L) {
    #line 142 
    if (0 == 0) 
                #line 143 
                copy_overflow(sz,bytes);
    else 
      #line 144 
      if ((int)is_source != 0) 
                               #line 145 
                               __bad_copy_from(); else 
                                                       #line 147 
                                                       __bad_copy_to();
    #line 148 
    return (_Bool)0;
  }
  #line 150 
  __ret_warn_on = bytes > 2147483647UL;
  #line 150 
  if ((long)(__ret_warn_on != 0) != 0L) {
    #line 151 
    ldv_inline_asm();
    #line 152 
    ldv_inline_asm();
  }
  #line 150 
  if ((long)((long)(__ret_warn_on != 0)) != 0L) 
                                                #line 151 
                                                return (_Bool)0;
  #line 152 
  check_object_size(addr,bytes,(_Bool)((bool)((int)is_source) != 0));
  #line 153 
  return (_Bool)1;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 25 
size_t ldv_strlen(char *s);
#line 27 
#line 27 
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 23 
void *ldv_kzalloc(size_t size, gfp_t flags);
#line 3300  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
#line 3300 
int simple_open(struct inode *, struct file *);
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/debugfs.h"
#line 679  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_debugfs.i.aux"
static struct dentry *cif_debugfs_create_file(char *name, umode_t mode, struct dentry *parent, void *data, struct file_operations *fops);
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/debugfs.h"
#line 671  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_debugfs.i.aux"
static struct dentry *cif_debugfs_create_dir(char *name, struct dentry *parent);
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/debugfs.h"
#line 85 
void debugfs_remove_recursive(struct dentry *);
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uaccess.h"
#line 121 
unsigned long _copy_from_user(void *, void *, unsigned long);
#line 137 
#line 137 
unsigned long _copy_to_user(void *, void *, unsigned long);
#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uaccess.h"
__inline static unsigned long copy_from_user(void *to, void *from, unsigned long n)
{
  #line 143 
  if ((long)((int)check_copy_size(to,n,(_Bool)0) != 0) != 0L) 
                                                              #line 144 
                                                              n = _copy_from_user(to,from,n);
  #line 145 
  return n;
}

#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uaccess.h"
__inline static unsigned long copy_to_user(void *to, void *from, unsigned long n)
{
  #line 151 
  if ((long)((int)check_copy_size(from,n,(_Bool)1) != 0) != 0L) 
                                                                #line 152 
                                                                n = _copy_to_user(to,from,n);
  #line 153 
  return n;
}

#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 498  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_debugfs.i.aux"
static void *kzalloc(size_t size, gfp_t flags);
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_debugfs.c"
static struct dentry *hns3_dbgfs_root;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_debugfs.c"
static int hns3_dbg_queue_info(struct hnae3_handle *h, char *cmd_buf)
{
  #line 19 
  struct hns3_enet_ring *ring;
  #line 20 
  u32 base_add_l;
  #line 20 
  u32 base_add_h;
  #line 21 
  u32 queue_num;
  #line 21 
  u32 queue_max;
  #line 22 
  u32 value;
  #line 23 
  int cnt;
  #line 18 
  struct hns3_nic_priv *priv = (struct hns3_nic_priv *)h->priv;
  #line 22 
  u32 i = 0U;
  #line 25 
  if (priv->ring == (struct hns3_enet_ring *)0) {
    #line 26 
    _dev_err(& (h->pdev)->dev,(char *)"priv->ring is NULL\n");
    #line 27 
    return -14;
  }
  #line 30 
  queue_max = (unsigned int)h->__anonCompField_hnae3_handle_215.kinfo.num_tqps;
  #line 31 
  cnt = kstrtouint(cmd_buf + 11U,0U,& queue_num);
  #line 32 
  if (cnt != 0) 
                #line 33 
                queue_num = 0U; else 
                                     #line 35 
                                     queue_max = queue_num + 1U;
  #line 37 
  _dev_info(& (h->pdev)->dev,(char *)"queue info\n");
  #line 39 
  if ((unsigned int)h->__anonCompField_hnae3_handle_215.kinfo.num_tqps <= queue_num) {
    #line 40 
    _dev_err(& (h->pdev)->dev,(char *)"Queue number(%u) is out of range(0-%u)\n",queue_num,(int)h->__anonCompField_hnae3_handle_215.kinfo.num_tqps + -1);
    #line 43 
    return -22;
  }
  #line 46 
  i = queue_num;
  #line 46 
  while (i < queue_max) {
    {
      #line 51 
      if (test_bit(2L,& priv->state)) {
        #line 51 
        if ((int)test_bit(1L,& priv->state) != 0) 
                                                  #line 53 
                                                  return -1;
      }
      else 
           #line 53 
           return -1;
      #line 55 
      ring = priv->ring + (unsigned long)((unsigned int)h->__anonCompField_hnae3_handle_215.kinfo.num_tqps + i);
      #line 56 
      base_add_h = readl((ring->tqp)->io_base + 4U);
      #line 58 
      base_add_l = readl((ring->tqp)->io_base);
      #line 60 
      _dev_info(& (h->pdev)->dev,(char *)"RX(%u) BASE ADD: 0x%08x%08x\n",i,base_add_h,base_add_l);
      #line 63 
      value = readl((ring->tqp)->io_base + 8U);
      #line 65 
      _dev_info(& (h->pdev)->dev,(char *)"RX(%u) RING BD NUM: %u\n",i,value);
      #line 67 
      value = readl((ring->tqp)->io_base + 12U);
      #line 69 
      _dev_info(& (h->pdev)->dev,(char *)"RX(%u) RING BD LEN: %u\n",i,value);
      #line 71 
      value = readl((ring->tqp)->io_base + 24U);
      #line 73 
      _dev_info(& (h->pdev)->dev,(char *)"RX(%u) RING TAIL: %u\n",i,value);
      #line 75 
      value = readl((ring->tqp)->io_base + 28U);
      #line 77 
      _dev_info(& (h->pdev)->dev,(char *)"RX(%u) RING HEAD: %u\n",i,value);
      #line 79 
      value = readl((ring->tqp)->io_base + 32U);
      #line 81 
      _dev_info(& (h->pdev)->dev,(char *)"RX(%u) RING FBDNUM: %u\n",i,value);
      #line 83 
      value = readl((ring->tqp)->io_base + 44U);
      #line 85 
      _dev_info(& (h->pdev)->dev,(char *)"RX(%u) RING PKTNUM: %u\n",i,value);
      #line 87 
      ring = priv->ring + (unsigned long)i;
      #line 88 
      base_add_h = readl((ring->tqp)->io_base + 68U);
      #line 90 
      base_add_l = readl((ring->tqp)->io_base + 64U);
      #line 92 
      _dev_info(& (h->pdev)->dev,(char *)"TX(%u) BASE ADD: 0x%08x%08x\n",i,base_add_h,base_add_l);
      #line 95 
      value = readl((ring->tqp)->io_base + 72U);
      #line 97 
      _dev_info(& (h->pdev)->dev,(char *)"TX(%u) RING BD NUM: %u\n",i,value);
      #line 99 
      value = readl((ring->tqp)->io_base + 80U);
      #line 101 
      _dev_info(& (h->pdev)->dev,(char *)"TX(%u) RING TC: %u\n",i,value);
      #line 103 
      value = readl((ring->tqp)->io_base + 88U);
      #line 105 
      _dev_info(& (h->pdev)->dev,(char *)"TX(%u) RING TAIL: %u\n",i,value);
      #line 107 
      value = readl((ring->tqp)->io_base + 92U);
      #line 109 
      _dev_info(& (h->pdev)->dev,(char *)"TX(%u) RING HEAD: %u\n",i,value);
      #line 111 
      value = readl((ring->tqp)->io_base + 96U);
      #line 113 
      _dev_info(& (h->pdev)->dev,(char *)"TX(%u) RING FBDNUM: %u\n",i,value);
      #line 115 
      value = readl((ring->tqp)->io_base + 100U);
      #line 117 
      _dev_info(& (h->pdev)->dev,(char *)"TX(%u) RING OFFSET: %u\n",i,value);
      #line 119 
      value = readl((ring->tqp)->io_base + 108U);
      #line 121 
      _dev_info(& (h->pdev)->dev,(char *)"TX(%u) RING PKTNUM: %u\n\n",i,value);
    }
    #line 46 
    i ++;
  }
  #line 125 
  return 0;
}

#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_debugfs.c"
static int hns3_dbg_queue_map(struct hnae3_handle *h)
{
  #line 131 
  int i;
  #line 130 
  struct hns3_nic_priv *priv = (struct hns3_nic_priv *)h->priv;
  #line 133 
  if (((h->ae_algo)->ops)->get_global_queue_id == (u16 (*)(struct hnae3_handle *, u16 ))0) 
    #line 134 
    return -95;
  #line 136 
  _dev_info(& (h->pdev)->dev,(char *)"map info for queue id and vector id\n");
  #line 137 
  _dev_info(& (h->pdev)->dev,(char *)"local queue id | global queue id | vector id\n");
  #line 139 
  i = 0;
  #line 139 
  while ((int)h->__anonCompField_hnae3_handle_215.kinfo.num_tqps > i) {
    {
      #line 140 
      u16 global_qid;
      #line 142 
      global_qid = (*(((h->ae_algo)->ops)->get_global_queue_id))(h,(unsigned short)((int)((unsigned short)i)));
      #line 143 
      if (priv->ring == (struct hns3_enet_ring *)0 || (priv->ring + (unsigned long)i)->tqp_vector == (struct hns3_enet_tqp_vector *)0) 
        #line 144 
        goto __Cont;
      #line 146 
      _dev_info(& (h->pdev)->dev,(char *)"      %4d            %4d            %4d\n",i,(int)global_qid,((priv->ring + (unsigned long)i)->tqp_vector)->vector_irq);
    }
    #line 139 
    __Cont: 
            #line 139 
    i ++;
  }
  #line 151 
  return 0;
}

#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_debugfs.c"
static int hns3_dbg_bd_info(struct hnae3_handle *h, char *cmd_buf)
{
  #line 157 
  struct hns3_desc *rx_desc;
  #line 157 
  struct hns3_desc *tx_desc;
  #line 159 
  struct hns3_enet_ring *ring;
  #line 160 
  u32 tx_index;
  #line 160 
  u32 rx_index;
  #line 161 
  u32 q_num;
  #line 161 
  u32 value;
  #line 162 
  dma_addr_t addr;
  #line 163 
  int cnt;
  #line 156 
  struct hns3_nic_priv *priv = (struct hns3_nic_priv *)h->priv;
  #line 158 
  struct device *dev = & (h->pdev)->dev;
  #line 165 
  cnt = sscanf(cmd_buf + 8U,(char *)"%u %u",& q_num,& tx_index);
  #line 166 
  if (cnt == 2) 
                #line 167 
                rx_index = tx_index;
  else 
    #line 168 
    if (cnt != 1) {
      #line 169 
      _dev_err(dev,(char *)"bd info: bad command string, cnt=%d\n",cnt);
      #line 170 
      return -22;
    }
  #line 173 
  if ((unsigned int)h->__anonCompField_hnae3_handle_215.kinfo.num_tqps <= q_num) {
    #line 174 
    _dev_err(dev,(char *)"Queue number(%u) is out of range(0-%u)\n",q_num,(int)h->__anonCompField_hnae3_handle_215.kinfo.num_tqps + -1);
    #line 176 
    return -22;
  }
  #line 179 
  ring = priv->ring + (unsigned long)q_num;
  #line 180 
  value = readl((ring->tqp)->io_base + 88U);
  #line 181 
  if (cnt == 1) 
                #line 181 
                tx_index = value; else 
                                       #line 181 
                                       tx_index = tx_index;
  #line 183 
  if ((unsigned int)ring->desc_num <= tx_index) {
    #line 184 
    _dev_err(dev,(char *)"bd index(%u) is out of range(0-%u)\n",tx_index,(int)ring->desc_num + -1);
    #line 186 
    return -22;
  }
  #line 189 
  tx_desc = ring->desc + (unsigned long)tx_index;
  #line 190 
  addr = tx_desc->addr;
  #line 191 
  _dev_info(dev,(char *)"TX Queue Num: %u, BD Index: %u\n",q_num,tx_index);
  #line 192 
  _dev_info(dev,(char *)"(TX)addr: %pad\n",& addr);
  #line 193 
  _dev_info(dev,(char *)"(TX)vlan_tag: %u\n",(int)tx_desc->__anonCompField_hns3_desc_222.tx.vlan_tag);
  #line 194 
  _dev_info(dev,(char *)"(TX)send_size: %u\n",(int)tx_desc->__anonCompField_hns3_desc_222.tx.send_size);
  #line 196 
  _dev_info(dev,(char *)"(TX)vlan_tso: %u\n",(int)tx_desc->__anonCompField_hns3_desc_222.tx.__anonCompField___anonstruct_tx_1117_217.__anonCompField___anonunion_1118_216.type_cs_vlan_tso);
  #line 197 
  _dev_info(dev,(char *)"(TX)l2_len: %u\n",(int)tx_desc->__anonCompField_hns3_desc_222.tx.__anonCompField___anonstruct_tx_1117_217.__anonCompField___anonunion_1118_216.l2_len);
  #line 198 
  _dev_info(dev,(char *)"(TX)l3_len: %u\n",(int)tx_desc->__anonCompField_hns3_desc_222.tx.__anonCompField___anonstruct_tx_1117_217.__anonCompField___anonunion_1118_216.l3_len);
  #line 199 
  _dev_info(dev,(char *)"(TX)l4_len: %u\n",(int)tx_desc->__anonCompField_hns3_desc_222.tx.__anonCompField___anonstruct_tx_1117_217.__anonCompField___anonunion_1118_216.l4_len);
  #line 200 
  _dev_info(dev,(char *)"(TX)vlan_tag: %u\n",(int)tx_desc->__anonCompField_hns3_desc_222.tx.outer_vlan_tag);
  #line 202 
  _dev_info(dev,(char *)"(TX)tv: %u\n",(int)tx_desc->__anonCompField_hns3_desc_222.tx.tv);
  #line 203 
  _dev_info(dev,(char *)"(TX)vlan_msec: %u\n",(int)tx_desc->__anonCompField_hns3_desc_222.tx.__anonCompField___anonstruct_tx_1117_219.__anonCompField___anonunion_1120_218.ol_type_vlan_msec);
  #line 204 
  _dev_info(dev,(char *)"(TX)ol2_len: %u\n",(int)tx_desc->__anonCompField_hns3_desc_222.tx.__anonCompField___anonstruct_tx_1117_219.__anonCompField___anonunion_1120_218.ol2_len);
  #line 205 
  _dev_info(dev,(char *)"(TX)ol3_len: %u\n",(int)tx_desc->__anonCompField_hns3_desc_222.tx.__anonCompField___anonstruct_tx_1117_219.__anonCompField___anonunion_1120_218.ol3_len);
  #line 206 
  _dev_info(dev,(char *)"(TX)ol4_len: %u\n",(int)tx_desc->__anonCompField_hns3_desc_222.tx.__anonCompField___anonstruct_tx_1117_219.__anonCompField___anonunion_1120_218.ol4_len);
  #line 207 
  _dev_info(dev,(char *)"(TX)paylen: %u\n",tx_desc->__anonCompField_hns3_desc_222.tx.paylen);
  #line 208 
  _dev_info(dev,(char *)"(TX)vld_ra_ri: %u\n",(int)tx_desc->__anonCompField_hns3_desc_222.tx.bdtp_fe_sc_vld_ra_ri);
  #line 210 
  _dev_info(dev,(char *)"(TX)mss: %u\n",(int)tx_desc->__anonCompField_hns3_desc_222.tx.mss);
  #line 212 
  ring = priv->ring + (unsigned long)((unsigned int)h->__anonCompField_hnae3_handle_215.kinfo.num_tqps + q_num);
  #line 213 
  value = readl((ring->tqp)->io_base + 24U);
  #line 214 
  if (cnt == 1) 
                #line 214 
                rx_index = value; else 
                                       #line 214 
                                       rx_index = tx_index;
  #line 215 
  rx_desc = ring->desc + (unsigned long)rx_index;
  #line 217 
  addr = rx_desc->addr;
  #line 218 
  _dev_info(dev,(char *)"RX Queue Num: %u, BD Index: %u\n",q_num,rx_index);
  #line 219 
  _dev_info(dev,(char *)"(RX)addr: %pad\n",& addr);
  #line 220 
  _dev_info(dev,(char *)"(RX)l234_info: %u\n",rx_desc->__anonCompField_hns3_desc_222.rx.l234_info);
  #line 222 
  _dev_info(dev,(char *)"(RX)pkt_len: %u\n",(int)rx_desc->__anonCompField_hns3_desc_222.rx.pkt_len);
  #line 223 
  _dev_info(dev,(char *)"(RX)size: %u\n",(int)rx_desc->__anonCompField_hns3_desc_222.rx.size);
  #line 224 
  _dev_info(dev,(char *)"(RX)rss_hash: %u\n",rx_desc->__anonCompField_hns3_desc_222.rx.rss_hash);
  #line 225 
  _dev_info(dev,(char *)"(RX)fd_id: %u\n",(int)rx_desc->__anonCompField_hns3_desc_222.rx.fd_id);
  #line 226 
  _dev_info(dev,(char *)"(RX)vlan_tag: %u\n",(int)rx_desc->__anonCompField_hns3_desc_222.rx.vlan_tag);
  #line 227 
  _dev_info(dev,(char *)"(RX)o_dm_vlan_id_fb: %u\n",(int)rx_desc->__anonCompField_hns3_desc_222.rx.__anonCompField___anonstruct_rx_1122_221.__anonCompField___anonunion_1123_220.o_dm_vlan_id_fb);
  #line 229 
  _dev_info(dev,(char *)"(RX)ot_vlan_tag: %u\n",(int)rx_desc->__anonCompField_hns3_desc_222.rx.__anonCompField___anonstruct_rx_1122_221.__anonCompField___anonunion_1123_220.ot_vlan_tag);
  #line 231 
  _dev_info(dev,(char *)"(RX)bd_base_info: %u\n",rx_desc->__anonCompField_hns3_desc_222.rx.bd_base_info);
  #line 234 
  return 0;
}

#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_debugfs.c"
static void hns3_dbg_help(struct hnae3_handle *h)
{
  #line 241 
  char printf_buf[256U];
  #line 243 
  _dev_info(& (h->pdev)->dev,(char *)"available commands\n");
  #line 244 
  _dev_info(& (h->pdev)->dev,(char *)"queue info <number>\n");
  #line 245 
  _dev_info(& (h->pdev)->dev,(char *)"queue map\n");
  #line 246 
  _dev_info(& (h->pdev)->dev,(char *)"bd info <q_num> <bd index>\n");
  #line 248 
  if (! hns3_is_phys_func(h->pdev)) 
                                    #line 249 
                                    return;
  #line 251 
  _dev_info(& (h->pdev)->dev,(char *)"dump fd tcam\n");
  #line 252 
  _dev_info(& (h->pdev)->dev,(char *)"dump tc\n");
  #line 253 
  _dev_info(& (h->pdev)->dev,(char *)"dump tm map <q_num>\n");
  #line 254 
  _dev_info(& (h->pdev)->dev,(char *)"dump tm\n");
  #line 255 
  _dev_info(& (h->pdev)->dev,(char *)"dump qos pause cfg\n");
  #line 256 
  _dev_info(& (h->pdev)->dev,(char *)"dump qos pri map\n");
  #line 257 
  _dev_info(& (h->pdev)->dev,(char *)"dump qos buf cfg\n");
  #line 258 
  _dev_info(& (h->pdev)->dev,(char *)"dump mng tbl\n");
  #line 259 
  _dev_info(& (h->pdev)->dev,(char *)"dump reset info\n");
  #line 260 
  _dev_info(& (h->pdev)->dev,(char *)"dump m7 info\n");
  #line 261 
  _dev_info(& (h->pdev)->dev,(char *)"dump ncl_config <offset> <length>(in hex)\n");
  #line 262 
  _dev_info(& (h->pdev)->dev,(char *)"dump mac tnl status\n");
  #line 264 
  memset((void *)(& printf_buf),0,256UL);
  #line 265 
  strncat((char *)(& printf_buf),(char *)"dump reg [[bios common] [ssu <port_id>]",255UL);
  #line 267 
  strncat((char *)(& printf_buf) + cif_strlen((char *)(& printf_buf)),(char *)" [igu egu <port_id>] [rpu <tc_queue_num>]",255UL - cif_strlen((char *)(& printf_buf)));
  #line 270 
  strncat((char *)(& printf_buf) + cif_strlen((char *)(& printf_buf)),(char *)" [rtc] [ppp] [rcb] [tqp <queue_num>]]\n",255UL - cif_strlen((char *)(& printf_buf)));
  #line 273 
  _dev_info(& (h->pdev)->dev,(char *)"%s",(char *)(& printf_buf));
  #line 275 
  memset((void *)(& printf_buf),0,256UL);
  #line 276 
  strncat((char *)(& printf_buf),(char *)"dump reg dcb <port_id> <pri_id> <pg_id>",255UL);
  #line 278 
  strncat((char *)(& printf_buf) + cif_strlen((char *)(& printf_buf)),(char *)" <rq_id> <nq_id> <qset_id>\n",255UL - cif_strlen((char *)(& printf_buf)));
  #line 280 
  _dev_info(& (h->pdev)->dev,(char *)"%s",(char *)(& printf_buf));
  #line 281 
  return;
}

#line 283  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_debugfs.c"
static ssize_t hns3_dbg_cmd_read(struct file *filp, char *buffer, size_t count, loff_t *ppos)
{
  #line 286 
  int uncopy_bytes;
  #line 287 
  char *buf;
  #line 288 
  int len;
  #line 290 
  if (*ppos != 0LL) 
                    #line 291 
                    return 0L;
  #line 293 
  if (count <= 255UL) 
                      #line 294 
                      return -28L;
  #line 296 
  buf = (char *)kzalloc(256UL,3264U);
  #line 297 
  if (buf == (char *)0) 
                        #line 298 
                        return -12L;
  #line 300 
  len = snprintf(buf,256UL,(char *)"%s\n",(char *)"Please echo help to cmd to get help information");
  #line 302 
  uncopy_bytes = (int)copy_to_user((void *)buffer,(void *)buf,(unsigned long)len);
  #line 304 
  kfree((void *)buf);
  #line 306 
  if (uncopy_bytes != 0) 
                         #line 307 
                         return -14L;
  #line 309 
  *ppos = ((long long)len);
  #line 309 
  return (long)((long long)len);
}

#line 312  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_debugfs.c"
static ssize_t hns3_dbg_cmd_write(struct file *filp, char *buffer, size_t count, loff_t *ppos)
{
  #line 317 
  char *cmd_buf;
  #line 317 
  char *cmd_buf_tmp;
  #line 318 
  int uncopied_bytes;
  #line 315 
  struct hnae3_handle *handle = (struct hnae3_handle *)filp->private_data;
  #line 316 
  struct hns3_nic_priv *priv = (struct hns3_nic_priv *)handle->priv;
  #line 319 
  int ret = 0;
  #line 321 
  if (*ppos != 0LL) 
                    #line 322 
                    return 0L;
  #line 325 
  if (test_bit(2L,& priv->state)) {
    #line 325 
    if ((int)test_bit(1L,& priv->state) != 0) 
                                              #line 327 
                                              return 0L;
  }
  else 
       #line 327 
       return 0L;
  #line 329 
  if (count > 1024UL) 
                      #line 330 
                      return -28L;
  #line 332 
  cmd_buf = (char *)kzalloc(count + 1UL,3264U);
  #line 333 
  if (cmd_buf == (char *)0) 
                            #line 334 
                            return (long)count;
  #line 336 
  uncopied_bytes = (int)copy_from_user((void *)cmd_buf,(void *)buffer,count);
  #line 337 
  if (uncopied_bytes != 0) {
    #line 338 
    kfree((void *)cmd_buf);
    #line 339 
    return -14L;
  }
  #line 342 
  *(cmd_buf + count) = (char)0;
  #line 344 
  cmd_buf_tmp = strchr(cmd_buf,10);
  #line 345 
  if (cmd_buf_tmp != (char *)0) {
    #line 346 
    *cmd_buf_tmp = (char)0;
    #line 347 
    count = (unsigned long)((cmd_buf_tmp - cmd_buf) + 1L);
  }
  #line 350 
  if (cif_strncmp(cmd_buf,(char *)"help",4UL) == 0) 
                                                    #line 351 
                                                    hns3_dbg_help(handle);
  else {
    #line 352 
    if (cif_strncmp(cmd_buf,(char *)"queue info",10UL) == 0) 
                                                             #line 353 
                                                             ret = hns3_dbg_queue_info(handle,cmd_buf);
    else {
      #line 354 
      if (cif_strncmp(cmd_buf,(char *)"queue map",9UL) == 0) 
                                                             #line 355 
                                                             ret = hns3_dbg_queue_map(handle);
      else {
        #line 356 
        if (cif_strncmp(cmd_buf,(char *)"bd info",7UL) == 0) 
                                                             #line 357 
                                                             ret = hns3_dbg_bd_info(handle,cmd_buf);
        else 
          #line 358 
          if (((handle->ae_algo)->ops)->dbg_run_cmd != (int (*)(struct hnae3_handle *, char *))0) 
            #line 359 
            ret = (*(((handle->ae_algo)->ops)->dbg_run_cmd))(handle,cmd_buf); else 
                                                                    #line 361 
                                                                    ret = -95;
      }
    }
  }
  #line 363 
  if (ret != 0) 
                #line 364 
                hns3_dbg_help(handle);
  #line 366 
  kfree((void *)cmd_buf);
  #line 367 
  cmd_buf = (char *)0;
  #line 369 
  return (long)count;
}

#line 372  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_debugfs.c"
static struct file_operations hns3_dbg_cmd_fops = {.owner = & __this_module, .read = & hns3_dbg_cmd_read, .write = & hns3_dbg_cmd_write, .open = & simple_open};
#line 379  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_debugfs.c"
void hns3_dbg_init(struct hnae3_handle *handle)
{
  #line 381 
  char *name = pci_name(handle->pdev);
  #line 383 
  handle->hnae3_dbgfs = cif_debugfs_create_dir(name,hns3_dbgfs_root);
  #line 385 
  cif_debugfs_create_file((char *)"cmd",(unsigned short)384,handle->hnae3_dbgfs,(void *)handle,& hns3_dbg_cmd_fops);
  #line 387 
  return;
}

#line 389  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_debugfs.c"
void hns3_dbg_uninit(struct hnae3_handle *handle)
{
  #line 391 
  debugfs_remove_recursive(handle->hnae3_dbgfs);
  #line 392 
  handle->hnae3_dbgfs = (struct dentry *)0;
  #line 393 
  return;
}

#line 395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_debugfs.c"
void hns3_dbg_register_debugfs(char *debugfs_dir_name)
{
  #line 397 
  hns3_dbgfs_root = cif_debugfs_create_dir(debugfs_dir_name,(struct dentry *)0);
  #line 398 
  return;
}

#line 400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/hisilicon/hns3/hns3_debugfs.c"
void hns3_dbg_unregister_debugfs(void)
{
  #line 402 
  debugfs_remove_recursive(hns3_dbgfs_root);
  #line 403 
  hns3_dbgfs_root = (struct dentry *)0;
  #line 404 
  return;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_debugfs.i.aux"
struct file_operations *emg_alias_hns3_dbg_cmd_fops = & hns3_dbg_cmd_fops;
#line 98 
#line 98 
struct dentry *emg_debugfs_create_dir(char *arg0, struct dentry *arg1);
#line 99 
#line 99 
struct dentry *emg_debugfs_create_file(char *arg0, unsigned short arg1, struct dentry *arg2, void *arg3, struct file_operations *arg4);
#line 109  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_debugfs.i.aux"
long emg_wrapper_hns3_dbg_cmd_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 110 
  return hns3_dbg_cmd_read(arg0,arg1,arg2,arg3);
}

#line 114  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_debugfs.i.aux"
long emg_wrapper_hns3_dbg_cmd_write(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 115 
  return hns3_dbg_cmd_write(arg0,arg1,arg2,arg3);
}

#line 155  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_debugfs.i.aux"
static int cif_strncmp(char *cs, char *ct, __kernel_size_t count)
{
  #line 158 
  return ldv_strncmp(cs,ct,count);
}

#line 162  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_debugfs.i.aux"
static size_t cif_strlen(char *s)
{
  #line 165 
  return ldv_strlen(s);
}

#line 498  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_debugfs.i.aux"
static void *kzalloc(size_t size, gfp_t flags)
{
  #line 501 
  return ldv_kzalloc(size,flags);
}

#line 671  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_debugfs.i.aux"
static struct dentry *cif_debugfs_create_dir(char *name, struct dentry *parent)
{
  #line 675 
  return emg_debugfs_create_dir(name,parent);
}

#line 679  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/0/concurrency safety/weaver/hns3_debugfs.i.aux"
static struct dentry *cif_debugfs_create_file(char *name, umode_t mode, struct dentry *parent, void *data, struct file_operations *fops)
{
  #line 683 
  return emg_debugfs_create_file(name,(unsigned short)((int)mode),parent,data,
                              fops);
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/common/inline_asm.c"
void ldv_inline_asm(void)
{
  #line 24 
  return;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_add(int i, atomic_t *v)
{
  #line 22 
  v->counter += i;
  #line 23 
  return;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_sub(int i, atomic_t *v)
{
  #line 27 
  v->counter -= i;
  #line 28 
  return;
}

#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_sub_and_test(int i, atomic_t *v)
{
  #line 32 
  v->counter -= i;
  #line 33 
  if (v->counter != 0) 
                       #line 34 
                       return 0;
  #line 36 
  return 1;
}

#line 39  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_inc(atomic_t *v)
{
  #line 41 
  (v->counter) ++;
  #line 42 
  return;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_dec(atomic_t *v)
{
  #line 46 
  (v->counter) --;
  #line 47 
  return;
}

#line 49  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_dec_and_test(atomic_t *v)
{
  #line 51 
  (v->counter) --;
  #line 52 
  if (v->counter != 0) 
                       #line 53 
                       return 0;
  #line 55 
  return 1;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_and_test(atomic_t *v)
{
  #line 60 
  (v->counter) ++;
  #line 61 
  if (v->counter != 0) 
                       #line 62 
                       return 0;
  #line 64 
  return 1;
}

#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_return(int i, atomic_t *v)
{
  #line 69 
  v->counter += i;
  #line 70 
  return v->counter;
}

#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_negative(int i, atomic_t *v)
{
  #line 75 
  v->counter += i;
  #line 76 
  return v->counter < 0;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_short(short *v)
{
  #line 81 
  *v = (short)((unsigned int)*v + 1U);
  #line 82 
  return (int)*v;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
static struct task_struct ldv_current;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
struct task_struct *ldv_get_current(void)
{
  #line 28 
  ldv_current.pid = 1;
  #line 29 
  return & ldv_current;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void);
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void);
#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void);
#line 112  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val);
#line 132  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val);
#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 133 
void ldv_check_return_value_probe(int);
#line 141 
#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 23 
void __VERIFIER_assume(int);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static bool __ldv_in_interrupt_context = (_Bool)0;
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void)
{
  #line 31 
  __ldv_in_interrupt_context = (_Bool)1;
  #line 32 
  return;
}

#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void)
{
  #line 37 
  __ldv_in_interrupt_context = (_Bool)0;
  #line 38 
  return;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void)
{
  #line 42 
  return __ldv_in_interrupt_context;
}

#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static int ldv_filter_positive_int(int val)
{
  #line 47 
  __VERIFIER_assume(val <= 0);
  #line 48 
  return val;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val)
{
  #line 57 
  return ldv_filter_positive_int(init_ret_val);
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val)
{
  #line 63 
  ldv_check_return_value_probe(probe_ret_val);
  #line 64 
  return ldv_filter_positive_int(probe_ret_val);
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val)
{
  #line 70 
  return ldv_filter_positive_int(ret_val);
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/list.h"
#line 28 
void ldv_save_allocated_memory_to_list(void *);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data);
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 57 
void *ldv_xzalloc(size_t size);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev)
{
  #line 31 
  if (dev != (struct device *)0 && dev->p != (struct device_private *)0) 
    #line 32 
    return (dev->p)->driver_data;
  #line 34 
  return (void *)0;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data)
{
  #line 45 
  dev->p = (struct device_private *)ldv_xzalloc(8UL);
  #line 46 
  ldv_save_allocated_memory_to_list((void *)dev->p);
  #line 47 
  (dev->p)->driver_data = data;
  #line 49 
  return 0;
}

#line 156  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 156 
void ldv_check_alloc_flags(gfp_t);
#line 48  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 48 
void *ldv_malloc(size_t size);
#line 49 
#line 49 
void *ldv_calloc(size_t nmemb, size_t size);
#line 50 
#line 50 
void *ldv_zalloc(size_t size);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc(size_t size, gfp_t flags)
{
  #line 26 
  void *res;
  #line 28 
  ldv_check_alloc_flags(flags);
  #line 29 
  res = ldv_malloc(size);
  #line 30 
  ldv_save_allocated_memory_to_list(res);
  #line 32 
  return res;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kzalloc(size_t size, gfp_t flags)
{
  #line 37 
  void *res;
  #line 39 
  ldv_check_alloc_flags(flags);
  #line 40 
  res = ldv_zalloc(size);
  #line 41 
  ldv_save_allocated_memory_to_list(res);
  #line 43 
  return res;
}

#line 46  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 48 
  void *res;
  #line 50 
  ldv_check_alloc_flags(flags);
  #line 51 
  res = ldv_malloc(n * size);
  #line 52 
  ldv_save_allocated_memory_to_list(res);
  #line 54 
  return res;
}

#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 59 
  void *res;
  #line 61 
  ldv_check_alloc_flags(flags);
  #line 62 
  res = ldv_calloc(n,size);
  #line 63 
  ldv_save_allocated_memory_to_list(res);
  #line 65 
  return res;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 51 
void ldv_free(void *s);
#line 59 
#line 59 
void *ldv_malloc_unknown_size(void);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 31 
int ldv_undef_int_positive(void);
#line 40 
#line 40 
int ldv_undef_int_nonpositive(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
int ldv_request_firmware(struct firmware **fw)
{
  #line 27 
  int retval;
  #line 26 
  struct firmware *_fw = (struct firmware *)0;
  #line 29 
  retval = ldv_undef_int_nonpositive();
  #line 31 
  if (retval == 0) {
    #line 33 
    _fw = (struct firmware *)ldv_xzalloc(32UL);
    #line 34 
    _fw->data = (u8 *)ldv_malloc_unknown_size();
    #line 35 
    __VERIFIER_assume(_fw->data != (u8 *)0U);
    #line 36 
    _fw->size = (unsigned long)ldv_undef_int_positive();
  }
  #line 39 
  *fw = _fw;
  #line 41 
  return retval;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
void ldv_release_firmware(struct firmware *fw)
{
  #line 46 
  if (fw != (struct firmware *)0) {
    #line 48 
    ldv_free((void *)fw->data);
    #line 49 
    ldv_free((void *)fw);
  }
  #line 51 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/i2c.h"
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values);
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 55 
void *ldv_xmalloc(size_t size);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 23 
int ldv_undef_int(void);
#line 34 
#line 34 
int ldv_undef_int_negative(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values)
{
  #line 27 
  __u8 size;
  #line 28 
  char *bytes;
  #line 30 
  if (ldv_undef_int() != 0) {
    #line 33 
    size = (unsigned char)ldv_undef_int_positive();
    #line 35 
    __VERIFIER_assume((unsigned int)size <= 32U);
    #line 37 
    bytes = (char *)ldv_xmalloc((unsigned long)size);
    #line 39 
    memcpy((void *)values,(void *)bytes,(unsigned long)size);
    #line 40 
    ldv_free((void *)bytes);
    #line 42 
    return (int)size;
  }
  else {
    #line 46 
    return ldv_undef_int_negative();
  }
}

#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
__inline static void v4l2_set_subdevdata(struct v4l2_subdev *sd, void *p)
{
  #line 990 
  sd->dev_priv = p;
  #line 991 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/media/v4l2-common.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client_0, struct v4l2_subdev_ops *ops);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client_0, struct v4l2_subdev_ops *ops)
{
  #line 26 
  sd->ops = ops;
  #line 27 
  v4l2_set_subdevdata(sd,(void *)client_0);
  #line 28 
  ldv_dev_set_drvdata(& client_0->dev,(void *)sd);
  #line 29 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/spi.c"
struct spi_controller *ldv_spi_alloc_master(struct device *host, unsigned int size)
{
  #line 25 
  struct spi_controller *master;
  #line 27 
  master = (struct spi_controller *)ldv_zalloc((unsigned long)size + 2936UL);
  #line 29 
  if (master == (struct spi_controller *)0) 
                                            #line 30 
                                            return (struct spi_controller *)0;
  #line 32 
  ldv_dev_set_drvdata(& master->dev,(void *)(master + 1U));
  #line 34 
  return master;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size)
{
  #line 25 
  struct fb_info *info;
  #line 27 
  info = (struct fb_info *)ldv_zalloc(size + 1568UL);
  #line 29 
  if (info == (struct fb_info *)0) 
                                   #line 30 
                                   return (struct fb_info *)0;
  #line 32 
  if (size != 0UL) 
                   #line 33 
                   info->par = (void *)((char *)info + 1568UL);
  #line 35 
  return info;
}

#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info)
{
  #line 40 
  if (info == (struct fb_info *)0) 
                                   #line 41 
                                   return;
  #line 44 
  ldv_free((void *)info->apertures);
  #line 46 
  ldv_free((void *)info);
  #line 47 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err(void *ptr);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err_or_null(void *ptr);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_ptr_err(void *ptr);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err(void *ptr)
{
  #line 29 
  if ((unsigned long)ptr > 18446744073709547520UL) 
                                                   #line 30 
                                                   return (_Bool)1; else 
                                                                    #line 32 
                                                                    return (_Bool)0;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error)
{
  #line 37 
  unsigned long result;
  #line 39 
  __VERIFIER_assume(error < 0L);
  #line 40 
  __VERIFIER_assume(error >= -4095L);
  #line 41 
  result = 18446744073709547520UL - (unsigned long)error;
  #line 42 
  __VERIFIER_assume(result > 18446744073709547520UL);
  #line 44 
  return (void *)result;
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_ptr_err(void *ptr)
{
  #line 49 
  long result;
  #line 51 
  __VERIFIER_assume((unsigned long)ptr > 18446744073709547520UL);
  #line 52 
  result = (long)(18446744073709547520UL - (unsigned long)ptr);
  #line 53 
  __VERIFIER_assume(result < 0L);
  #line 54 
  __VERIFIER_assume(result >= -4095L);
  #line 56 
  return result;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err_or_null(void *ptr)
{
  #line 61 
  int tmp_0;
  #line 61 
  if (ptr == (void *)0) 
                        #line 61 
                        tmp_0 = 1;
  else {
    #line 61 
    if ((int)ldv_is_err(ptr) != 0) 
                                   #line 61 
                                   tmp_0 = 1; else 
                                                   #line 61 
                                                   tmp_0 = 0;
  }
  #line 61 
  return (_Bool)(tmp_0 != 0);
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/panic.h"
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void)
{
  #line 23 
  __VERIFIER_assume(0);
  #line 24 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 22 
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 23 
#line 23 
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_set_bit(long nr, unsigned long *addr)
{
  #line 24 
  *(addr + (unsigned long)nr / 64UL) |= 1UL << ((unsigned long)nr & 63UL);
  #line 25 
  return;
}

#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_clear_bit(long nr, unsigned long *addr)
{
  #line 29 
  *(addr + (unsigned long)nr / 64UL) &= ~ (1UL << ((unsigned long)nr & 63UL));
  #line 30 
  return;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits)
{
  #line 34 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 35 
  unsigned int size = start + (unsigned int)nbits;
  #line 36 
  int bits_to_set = (int)(64U - (start & 63U));
  #line 37 
  unsigned long mask_to_set = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 39 
  while (nbits - bits_to_set >= 0) {
    #line 40 
    *p |= mask_to_set;
    #line 41 
    nbits -= bits_to_set;
    #line 42 
    bits_to_set = 64;
    #line 43 
    mask_to_set = 18446744073709551615UL;
    #line 44 
    p ++;
  }
  #line 46 
  if (nbits != 0) {
    #line 47 
    mask_to_set = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_set;
    #line 48 
    *p |= mask_to_set;
  }
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits)
{
  #line 54 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 55 
  unsigned int size = start + (unsigned int)nbits;
  #line 56 
  int bits_to_clear = (int)(64U - (start & 63U));
  #line 57 
  unsigned long mask_to_clear = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 59 
  while (nbits - bits_to_clear >= 0) {
    #line 60 
    *p &= ~ mask_to_clear;
    #line 61 
    nbits -= bits_to_clear;
    #line 62 
    bits_to_clear = 64;
    #line 63 
    mask_to_clear = 18446744073709551615UL;
    #line 64 
    p ++;
  }
  #line 66 
  if (nbits != 0) {
    #line 67 
    mask_to_clear = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_clear;
    #line 68 
    *p &= ~ mask_to_clear;
  }
  #line 70 
  return;
}

#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits)
{
  #line 74 
  unsigned int len = (unsigned int)(((unsigned long)nbits + 63UL) / 64UL) * 8U;
  #line 75 
  memset((void *)dst,0,(unsigned long)len);
  #line 76 
  return;
}

#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask)
{
  #line 80 
  unsigned long index;
  #line 80 
  unsigned long end;
  #line 80 
  unsigned long i;
  #line 82 
  again: 
         #line 82 
  ;
  #line 83 
  index = ldv_find_next_zero_bit(map,size,start);
  #line 84 
  index = (index + align_mask) & ~ align_mask;
  #line 85 
  end = (unsigned long)nr + index;
  #line 87 
  if (end > size) 
                  #line 88 
                  return end;
  #line 90 
  i = ldv_find_next_bit(map,end,index);
  #line 92 
  if (i < end) {
    #line 93 
    start = i + 1UL;
    #line 94 
    goto again;
  }
  #line 97 
  return index;
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 25 
void ldv_check_find_bit_offset(unsigned long, unsigned long);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_ffs(unsigned long word)
{
  #line 23 
  int num = 0;
  #line 25 
  if ((word & 4294967295UL) == 0UL) {
    #line 26 
    num += 32;
    #line 27 
    word >>= 32;
  }
  #line 29 
  if ((word & 65535UL) == 0UL) {
    #line 30 
    num += 16;
    #line 31 
    word >>= 16;
  }
  #line 33 
  if ((word & 255UL) == 0UL) {
    #line 34 
    num += 8;
    #line 35 
    word >>= 8;
  }
  #line 37 
  if ((word & 15UL) == 0UL) {
    #line 38 
    num += 4;
    #line 39 
    word >>= 4;
  }
  #line 41 
  if ((word & 3UL) == 0UL) {
    #line 42 
    num += 2;
    #line 43 
    word >>= 2;
  }
  #line 45 
  if ((word & 1UL) == 0UL) 
                           #line 46 
                           num ++;
  #line 48 
  return (unsigned long)num;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_min(unsigned long a, unsigned long b)
{
  #line 53 
  if (a < b) 
             #line 54 
             return a;
  #line 56 
  return b;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_restrict_find_bit_res(unsigned long res, unsigned long size)
{
  #line 62 
  __VERIFIER_assume(1);
  #line 63 
  __VERIFIER_assume(res <= size);
  #line 65 
  return res;
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size)
{
  #line 70 
  unsigned long i;
  #line 72 
  i = 0UL;
  #line 72 
  while (i * 64UL < size) {
    #line 73 
    if (*(addr + i) != 0UL) {
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      return ldv_restrict_find_bit_res(ldv_min(i * 64UL + ldv_ffs(*(addr + i)),size),
                                  size);
    }
    #line 72 
    i ++;
  }
  #line 76 
  return size;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 81 
  unsigned long tmp;
  #line 83 
  ldv_check_find_bit_offset(size,offset);
  #line 85 
  tmp = *(addr + offset / 64UL);
  #line 86 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 87 
  offset &= 18446744073709551552UL;
  #line 89 
  while (tmp == 0UL) {
    #line 90 
    offset += 64UL;
    #line 91 
    if (offset >= size) 
                        #line 92 
                        return size;
    #line 94 
    tmp = *(addr + offset / 64UL);
  }
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 102 
  unsigned long tmp;
  #line 104 
  ldv_check_find_bit_offset(size,offset);
  #line 106 
  tmp = *(addr + offset / 64UL);
  #line 107 
  tmp = ~ tmp;
  #line 108 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 109 
  offset &= 18446744073709551552UL;
  #line 111 
  while (tmp == 0UL) {
    #line 112 
    offset += 64UL;
    #line 113 
    if (offset >= size) 
                        #line 114 
                        return size;
    #line 116 
    tmp = *(addr + offset / 64UL);
    #line 117 
    tmp = ~ tmp;
  }
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strcmp(char *cs, char *ct);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
size_t ldv_strlen(char *s)
{
  #line 23 
  unsigned int len = 0U;
  #line 25 
  while ((int)*s != 0) {
    #line 26 
    len ++;
    #line 25 
    s ++;
  }
  #line 28 
  return (unsigned long)len;
}

#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strcmp(char *cs, char *ct)
{
  #line 33 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 34 
    if ((int)*cs != (int)*ct) 
                              #line 35 
                              break;
    #line 33 
    cs ++;
    #line 33 
    ct ++;
  }
  #line 37 
  return (int)*cs - (int)*ct;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count)
{
  #line 42 
  if (count == 0UL) 
                    #line 43 
                    return 0;
  #line 45 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 46 
    if ((int)*cs != (int)*ct) 
                              #line 47 
                              break;
    #line 49 
    count --;
    #line 51 
    if (count == 0UL) 
                      #line 52 
                      break;
    #line 45 
    cs ++;
    #line 45 
    ct ++;
  }
  #line 55 
  return (int)*cs - (int)*ct;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_memcmp(void *cs, void *ct, size_t count)
{
  #line 60 
  unsigned char *su1;
  #line 60 
  unsigned char *su2;
  #line 61 
  int res = 0;
  #line 63 
  su1 = (unsigned char *)cs;
  #line 63 
  su2 = (unsigned char *)ct;
  #line 63 
  while (count != 0UL) {
    #line 64 
    res = (int)*su1 - (int)*su2;
    #line 64 
    if (res != 0) 
                  #line 65 
                  break;
    #line 63 
    su1 ++;
    #line 63 
    su2 ++;
    #line 63 
    count --;
  }
  #line 67 
  return res;
}

#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct)
{
  #line 72 
  size_t cs_len;
  #line 72 
  size_t ct_len;
  #line 74 
  cs_len = ldv_strlen(cs);
  #line 75 
  ct_len = ldv_strlen(ct);
  #line 77 
  while (cs_len >= ct_len) {
    #line 78 
    if (ldv_memcmp((void *)cs,(void *)ct,ct_len) == 0) 
                                                       #line 79 
                                                       return cs;
    #line 81 
    cs_len --;
    #line 82 
    cs ++;
  }
  #line 85 
  return (char *)0;
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/list.c"
void ldv_init_list_head(struct list_head *list)
{
  #line 23 
  list->next = list;
  #line 24 
  list->prev = list;
  #line 25 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc(size_t size, gfp_t flags);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags);
#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags);
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags);
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp);
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc(size_t size, gfp_t flags)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(flags);
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kzalloc(size_t size, gfp_t flags)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_flags(flags);
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 45 
  void *res;
  #line 47 
  ldv_check_alloc_flags(flags);
  #line 48 
  res = ldv_malloc(n * size);
  #line 50 
  return res;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 55 
  void *res;
  #line 57 
  ldv_check_alloc_flags(flags);
  #line 58 
  res = ldv_calloc(n,size);
  #line 60 
  return res;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size)
{
  #line 71 
  struct kmem_cache *res;
  #line 72 
  struct ldv_kmem_cache *ldv_res;
  #line 74 
  res = (struct kmem_cache *)ldv_zalloc(16UL);
  #line 76 
  if (res != (struct kmem_cache *)0) {
    #line 77 
    ldv_res = (struct ldv_kmem_cache *)res;
    #line 78 
    ldv_res->name = name;
    #line 79 
    ldv_res->size = size;
  }
  #line 82 
  return res;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 87 
  return ldv_kmalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 92 
  return ldv_kzalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp)
{
  #line 97 
  ldv_free(objp);
  #line 98 
  return;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep)
{
  #line 102 
  ldv_free((void *)cachep);
  #line 103 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/util.c"
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/util.c"
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(gfp);
  #line 28 
  res = ldv_malloc(len);
  #line 30 
  if (res != (void *)0) 
                        #line 31 
                        memcpy(res,src,len);
  #line 33 
  return res;
}

#line 162  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 162 
void ldv_check_alloc_nonatomic(void);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vmalloc(unsigned long size);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vzalloc(unsigned long size);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void ldv_vfree(void *addr);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vmalloc(unsigned long size)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_nonatomic();
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vzalloc(unsigned long size)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_nonatomic();
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void ldv_vfree(void *addr)
{
  #line 45 
  ldv_free(addr);
  #line 46 
  return;
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 28 
void *malloc(size_t);
#line 29 
#line 29 
void *calloc(size_t, size_t);
#line 30 
#line 30 
void free(void *);
#line 45 
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures;
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size);
#line 60  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void);
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void);
#line 64  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size);
#line 65  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size);
#line 66  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size);
#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s);
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size);
#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size);
#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size);
#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size);
#line 75  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void);
#line 76  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void);
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void);
#line 83  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size);
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size);
#line 87  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 87 
void *external_allocated_data(void);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures = 1U;
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size)
{
  #line 26 
  void *res;
  #line 28 
  if (ldv_is_memory_alloc_failures != 0U) {
    #line 28 
    if (ldv_undef_int() != 0) 
                              #line 29 
                              return (void *)0;
  }
  #line 32 
  res = malloc(size);
  #line 33 
  __VERIFIER_assume(res != (void *)0);
  #line 34 
  return res;
}

#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size)
{
  #line 39 
  return calloc(nmemb,size);
}

#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size)
{
  #line 44 
  return calloc(1UL,size);
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s)
{
  #line 49 
  free(s);
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size)
{
  #line 54 
  void *res;
  #line 56 
  if (ptr != (void *)0 && size == 0UL) {
    #line 57 
    free(ptr);
    #line 58 
    return (void *)0;
  }
  #line 61 
  if (ptr == (void *)0) {
    #line 62 
    res = malloc(size);
    #line 63 
    return res;
  }
  #line 66 
  if (ldv_undef_int() != 0) {
    #line 68 
    res = malloc(size);
    #line 69 
    __VERIFIER_assume(res != (void *)0);
    #line 71 
    memcpy(res,ptr,size);
    #line 72 
    free(ptr);
    #line 74 
    return res;
  }
  else 
       #line 77 
       return (void *)0;
}

#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size)
{
  #line 82 
  void *res;
  #line 84 
  res = malloc(size);
  #line 85 
  __VERIFIER_assume(res != (void *)0);
  #line 87 
  return res;
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size)
{
  #line 92 
  void *res;
  #line 94 
  res = calloc(nmemb,size);
  #line 95 
  __VERIFIER_assume(res != (void *)0);
  #line 97 
  return res;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size)
{
  #line 102 
  void *res;
  #line 104 
  res = calloc(1UL,size);
  #line 105 
  __VERIFIER_assume(res != (void *)0);
  #line 107 
  return res;
}

#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void)
{
  #line 112 
  void *res;
  #line 114 
  if (ldv_undef_int() != 0) {
    #line 116 
    res = external_allocated_data();
    #line 117 
    __VERIFIER_assume(res != (void *)0);
    #line 118 
    return res;
  }
  else 
       #line 121 
       return (void *)0;
}

#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void)
{
  #line 126 
  void *res;
  #line 128 
  if (ldv_undef_int() != 0) {
    #line 130 
    res = external_allocated_data();
    #line 131 
    memset(res,0,8UL);
    #line 132 
    __VERIFIER_assume(res != (void *)0);
    #line 133 
    return res;
  }
  else 
       #line 136 
       return (void *)0;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void)
{
  #line 141 
  return ldv_reference_calloc_unknown_size();
}

#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size)
{
  #line 146 
  void *res;
  #line 149 
  res = external_allocated_data();
  #line 150 
  __VERIFIER_assume(res != (void *)0);
  #line 152 
  return res;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc(size_t size)
{
  #line 25 
  void *res;
  #line 26 
  res = ldv_reference_malloc(size);
  #line 27 
  if (res != (void *)0) {
    #line 28 
    int tmp_0;
    #line 28 
    if (ldv_is_err(res)) 
                         #line 28 
                         tmp_0 = 0; else 
                                         #line 28 
                                         tmp_0 = 1;
    #line 28 
    __VERIFIER_assume(tmp_0);
  }
  #line 29 
  return res;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc(size_t nmemb, size_t size)
{
  #line 34 
  void *res;
  #line 35 
  res = ldv_reference_calloc(nmemb,size);
  #line 36 
  if (res != (void *)0) {
    #line 37 
    int tmp_0;
    #line 37 
    if (ldv_is_err(res)) 
                         #line 37 
                         tmp_0 = 0; else 
                                         #line 37 
                                         tmp_0 = 1;
    #line 37 
    __VERIFIER_assume(tmp_0);
  }
  #line 38 
  return res;
}

#line 41  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc(size_t size)
{
  #line 43 
  void *res;
  #line 44 
  res = ldv_reference_zalloc(size);
  #line 45 
  if (res != (void *)0) {
    #line 46 
    int tmp_0;
    #line 46 
    if (ldv_is_err(res)) 
                         #line 46 
                         tmp_0 = 0; else 
                                         #line 46 
                                         tmp_0 = 1;
    #line 46 
    __VERIFIER_assume(tmp_0);
  }
  #line 47 
  return res;
}

#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void ldv_free(void *s)
{
  #line 52 
  ldv_reference_free(s);
  #line 53 
  return;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc(size_t size)
{
  #line 57 
  void *res;
  #line 59 
  int tmp_0;
  #line 58 
  res = ldv_reference_xmalloc(size);
  #line 59 
  if (ldv_is_err(res)) 
                       #line 59 
                       tmp_0 = 0; else 
                                       #line 59 
                                       tmp_0 = 1;
  #line 59 
  __VERIFIER_assume(tmp_0);
  #line 60 
  return res;
}

#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size)
{
  #line 65 
  void *res;
  #line 67 
  int tmp_0;
  #line 66 
  res = ldv_reference_xcalloc(nmemb,size);
  #line 67 
  if (ldv_is_err(res)) 
                       #line 67 
                       tmp_0 = 0; else 
                                       #line 67 
                                       tmp_0 = 1;
  #line 67 
  __VERIFIER_assume(tmp_0);
  #line 68 
  return res;
}

#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xzalloc(size_t size)
{
  #line 73 
  void *res;
  #line 75 
  int tmp_0;
  #line 74 
  res = ldv_reference_xzalloc(size);
  #line 75 
  if (ldv_is_err(res)) 
                       #line 75 
                       tmp_0 = 0; else 
                                       #line 75 
                                       tmp_0 = 1;
  #line 75 
  __VERIFIER_assume(tmp_0);
  #line 76 
  return res;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc_unknown_size(void)
{
  #line 81 
  void *res;
  #line 82 
  res = ldv_reference_malloc_unknown_size();
  #line 83 
  if (res != (void *)0) {
    #line 84 
    int tmp_0;
    #line 84 
    if (ldv_is_err(res)) 
                         #line 84 
                         tmp_0 = 0; else 
                                         #line 84 
                                         tmp_0 = 1;
    #line 84 
    __VERIFIER_assume(tmp_0);
  }
  #line 85 
  return res;
}

#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void)
{
  #line 90 
  void *res;
  #line 91 
  res = ldv_reference_calloc_unknown_size();
  #line 92 
  if (res != (void *)0) {
    #line 93 
    int tmp_0;
    #line 93 
    if (ldv_is_err(res)) 
                         #line 93 
                         tmp_0 = 0; else 
                                         #line 93 
                                         tmp_0 = 1;
    #line 93 
    __VERIFIER_assume(tmp_0);
  }
  #line 94 
  return res;
}

#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void)
{
  #line 99 
  void *res;
  #line 100 
  res = ldv_reference_zalloc_unknown_size();
  #line 101 
  if (res != (void *)0) {
    #line 102 
    int tmp_0;
    #line 102 
    if (ldv_is_err(res)) 
                         #line 102 
                         tmp_0 = 0; else 
                                         #line 102 
                                         tmp_0 = 1;
    #line 102 
    __VERIFIER_assume(tmp_0);
  }
  #line 103 
  return res;
}

#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size)
{
  #line 108 
  void *res;
  #line 110 
  int tmp_0;
  #line 109 
  res = ldv_reference_xmalloc_unknown_size(size);
  #line 110 
  if (ldv_is_err(res)) 
                       #line 110 
                       tmp_0 = 0; else 
                                       #line 110 
                                       tmp_0 = 1;
  #line 110 
  __VERIFIER_assume(tmp_0);
  #line 111 
  return res;
}

/* compiler builtin: 
   long __builtin_expect(long exp, long c);   */
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 22 
void __VERIFIER_error(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
long __builtin_expect(long exp, long c)
{
  #line 26 
  return exp;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/gcc.c"
void __builtin_trap(void)
{
  #line 37 
  __VERIFIER_error();
  #line 38 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void);
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void);
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void);
#line 54  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end);
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end);
#line 29 
#line 29 
int __VERIFIER_nondet_int(void);
#line 31 
#line 31 
long __VERIFIER_nondet_long(void);
#line 38 
#line 38 
unsigned int __VERIFIER_nondet_uint(void);
#line 41 
#line 41 
unsigned long __VERIFIER_nondet_ulong(void);
#line 42 
#line 42 
unsigned long long __VERIFIER_nondet_ulonglong(void);
#line 43 
#line 43 
void *__VERIFIER_nondet_pointer(void);
#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int(void)
{
  #line 48 
  int undef_int = __VERIFIER_nondet_int();
  #line 50 
  return undef_int;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void)
{
  #line 56 
  long undef_long = __VERIFIER_nondet_long();
  #line 58 
  return undef_long;
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void)
{
  #line 64 
  unsigned int undef_uint = __VERIFIER_nondet_uint();
  #line 66 
  return undef_uint;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void)
{
  #line 72 
  void *undef_ptr = __VERIFIER_nondet_pointer();
  #line 74 
  return undef_ptr;
}

#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void)
{
  #line 80 
  unsigned long undef_ulong = __VERIFIER_nondet_ulong();
  #line 82 
  return undef_ulong;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void)
{
  #line 88 
  unsigned long long undef_ulonglong = __VERIFIER_nondet_ulonglong();
  #line 90 
  return undef_ulonglong;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_positive(void)
{
  #line 95 
  int ret = ldv_undef_int();
  #line 97 
  __VERIFIER_assume(ret > 0);
  #line 99 
  return ret;
}

#line 102  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_negative(void)
{
  #line 104 
  int ret = ldv_undef_int();
  #line 106 
  __VERIFIER_assume(ret < 0);
  #line 108 
  return ret;
}

#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void)
{
  #line 113 
  int ret = ldv_undef_int();
  #line 115 
  __VERIFIER_assume(ret >= 0);
  #line 117 
  return ret;
}

#line 120  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonpositive(void)
{
  #line 122 
  int ret = ldv_undef_int();
  #line 124 
  __VERIFIER_assume(ret <= 0);
  #line 126 
  return ret;
}

#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void)
{
  #line 131 
  void *ret = ldv_undef_ptr();
  #line 133 
  __VERIFIER_assume(ret != (void *)0);
  #line 135 
  return ret;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end)
{
  #line 141 
  int ret;
  #line 143 
  ret = ldv_undef_int();
  #line 144 
  __VERIFIER_assume(ret >= begin);
  #line 145 
  __VERIFIER_assume(ret <= end);
  #line 147 
  return ret;
}

#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end)
{
  #line 153 
  int ret;
  #line 155 
  ret = begin;
  #line 155 
  while (ret < end) {
    #line 156 
    if (ldv_undef_int() != 0) 
                              #line 157 
                              break;
    #line 155 
    ret ++;
  }
  #line 159 
  return ret;
}

#line 62  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 62 
void ldv_initialize(void);
#line 97 
#line 97 
void ldv_failed_register_netdev(void);
#line 123 
#line 123 
void ldv_pre_probe(void);
#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
#line 35 
int pthread_create(pthread_t *, pthread_attr_t *, void *(*)(void *), void *);
#line 39 
#line 39 
int pthread_join(pthread_t, void **);
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
__inline static void *ERR_PTR(long error)
{
  #line 26 
  return (void *)error;
}

#line 117  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/emg/0/environment_model.c"
#line 210 
void emg_dispatch_deregister_11(struct net_device *arg0);
#line 118 
#line 176 
void emg_dispatch_deregister_8(struct pci_driver *arg0);
#line 119 
#line 167 
void emg_dispatch_irq_deregister_6(int arg0);
#line 120 
#line 196 
void emg_dispatch_irq_register_10(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3);
#line 121 
#line 145 
void emg_dispatch_register_2(struct pci_driver *arg0);
#line 122 
#line 156 
void emg_dispatch_register_5(struct file_operations *arg0);
#line 123 
#line 185 
void emg_dispatch_register_9(struct net_device *arg0);
#line 124 
#line 1846 
void *emg_entry_point_insmod(void *arg0);
#line 125 
#line 219 
void *emg_file_operations_character_driver_scenario_hns3_dbg_cmd_fops(void *arg0);
#line 128 
#line 382 
void *emg_interrupt_interrupt_scenario_hns3_irq_handle(void *arg0);
#line 129 
#line 445 
void *emg_net_random_allocationless_scenario_hns3_get_rss(void *arg0);
#line 130 
#line 1401 
void *emg_pci_pci_scenario_hns3_driver(void *arg0);
#line 135 
#line 1875 
int main(void);
#line 138  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_12;
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_13;
#line 140  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_14;
#line 141  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_15;
#line 145  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_2(struct pci_driver *arg0)
{
  #line 146 
  int ret;
  #line 147 
  struct emg_struct_pci_scenario_hns3_driver_15 *cf_arg_15;
  #line 148 
  cf_arg_15 = (struct emg_struct_pci_scenario_hns3_driver_15 *)ldv_xmalloc(16UL);
  #line 149 
  cf_arg_15->arg0 = arg0;
  #line 150 
  ret = pthread_create(& emg_thread_15,(pthread_attr_t *)0,& emg_pci_pci_scenario_hns3_driver,(void *)cf_arg_15);
  #line 151 
  __VERIFIER_assume(ret == 0);
  #line 152 
  return;
}

#line 156  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_5(struct file_operations *arg0)
{
  #line 157 
  int ret;
  #line 158 
  struct emg_struct_character_driver_scenario_hns3_dbg_cmd_fops_12 *cf_arg_12;
  #line 159 
  cf_arg_12 = (struct emg_struct_character_driver_scenario_hns3_dbg_cmd_fops_12 *)ldv_xmalloc(16UL);
  #line 160 
  cf_arg_12->arg0 = arg0;
  #line 161 
  ret = pthread_create(& emg_thread_12,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_hns3_dbg_cmd_fops,(void *)cf_arg_12);
  #line 162 
  __VERIFIER_assume(ret == 0);
  #line 163 
  return;
}

#line 167  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_irq_deregister_6(int arg0)
{
  #line 168 
  int ret;
  #line 169 
  struct emg_struct_free_irq_6 *cf_arg_13;
  #line 170 
  ret = pthread_join(emg_thread_13,(void **)0);
  #line 171 
  __VERIFIER_assume(ret == 0);
  #line 172 
  return;
}

#line 176  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_deregister_8(struct pci_driver *arg0)
{
  #line 177 
  int ret;
  #line 178 
  struct emg_struct_pci_scenario_hns3_driver_15 *cf_arg_15;
  #line 179 
  ret = pthread_join(emg_thread_15,(void **)0);
  #line 180 
  __VERIFIER_assume(ret == 0);
  #line 181 
  return;
}

#line 185  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_9(struct net_device *arg0)
{
  #line 186 
  int ret;
  #line 187 
  struct emg_struct_random_allocationless_scenario_hns3_get_rss_14 *cf_arg_14;
  #line 188 
  cf_arg_14 = (struct emg_struct_random_allocationless_scenario_hns3_get_rss_14 *)ldv_xmalloc(16UL);
  #line 189 
  cf_arg_14->arg0 = arg0;
  #line 190 
  ret = pthread_create(& emg_thread_14,(pthread_attr_t *)0,& emg_net_random_allocationless_scenario_hns3_get_rss,(void *)cf_arg_14);
  #line 191 
  __VERIFIER_assume(ret == 0);
  #line 192 
  return;
}

#line 196  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_irq_register_10(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3)
{
  #line 197 
  int ret;
  #line 198 
  struct emg_struct_interrupt_scenario_hns3_irq_handle_13 *cf_arg_13;
  #line 199 
  cf_arg_13 = (struct emg_struct_interrupt_scenario_hns3_irq_handle_13 *)ldv_xmalloc(40UL);
  #line 200 
  cf_arg_13->arg0 = arg0;
  #line 201 
  cf_arg_13->arg1 = arg1;
  #line 202 
  cf_arg_13->arg2 = arg2;
  #line 203 
  cf_arg_13->arg3 = arg3;
  #line 204 
  ret = pthread_create(& emg_thread_13,(pthread_attr_t *)0,& emg_interrupt_interrupt_scenario_hns3_irq_handle,(void *)cf_arg_13);
  #line 205 
  __VERIFIER_assume(ret == 0);
  #line 206 
  return;
}

#line 210  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_deregister_11(struct net_device *arg0)
{
  #line 211 
  int ret;
  #line 212 
  struct emg_struct_random_allocationless_scenario_hns3_get_rss_14 *cf_arg_14;
  #line 213 
  ret = pthread_join(emg_thread_14,(void **)0);
  #line 214 
  __VERIFIER_assume(ret == 0);
  #line 215 
  return;
}

#line 219  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_hns3_dbg_cmd_fops(void *arg0)
{
  #line 222 
  struct file_operations *emg_12_container;
  #line 223 
  char *emg_12_emg_param_1_0;
  #line 224 
  char *emg_12_emg_param_1_2;
  #line 225 
  long long *emg_12_emg_param_3_1;
  #line 226 
  long long *emg_12_emg_param_3_3;
  #line 227 
  struct file *emg_12_resource_0;
  #line 228 
  struct inode *emg_12_resource_1;
  #line 229 
  int emg_12_ret;
  #line 230 
  unsigned long emg_12_size_cnt;
  #line 231 
  int emg_repeat_cnt_call_12 = 1;
  #line 232 
  int emg_repeat_cnt_main_12_0 = 1;
  #line 233 
  int emg_repeat_cnt_main_12_1 = 1;
  #line 235 
  struct emg_struct_character_driver_scenario_hns3_dbg_cmd_fops_12 *data = (struct emg_struct_character_driver_scenario_hns3_dbg_cmd_fops_12 *)arg0;
  #line 239 
  emg_12_ret = ldv_undef_int();
  #line 240 
  emg_12_container = emg_alias_hns3_dbg_cmd_fops;
  #line 241 
  emg_12_ret = ldv_undef_int();
  #line 243 
  __VERIFIER_assume(data->arg0 == emg_alias_hns3_dbg_cmd_fops);
  #line 245 
  if (data != (struct emg_struct_character_driver_scenario_hns3_dbg_cmd_fops_12 *)0) {
    #line 246 
    emg_12_container = data->arg0;
    #line 247 
    ldv_free((void *)data);
  }
  #line 252 
  emg_12_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 253 
  emg_12_size_cnt = (unsigned long)ldv_undef_int();
  #line 257 
  goto emg_main_12;
  #line 261 
  return (void *)0;
  #line 264 
  emg_call_12: 
               #line 264 
  ;
  #line 265 
  if (ldv_undef_int() != 0) {
    #line 266 
    if (ldv_undef_int() != 0) {
      #line 268 
      emg_12_emg_param_1_0 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 268 
      emg_12_emg_param_1_0 = emg_12_emg_param_1_0;
      #line 269 
      emg_12_emg_param_3_1 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 269 
      emg_12_emg_param_3_1 = emg_12_emg_param_3_1;
      #line 273 
      emg_wrapper_hns3_dbg_cmd_read(emg_12_resource_0,emg_12_emg_param_1_0,emg_12_size_cnt,emg_12_emg_param_3_1);
      #line 277 
      ldv_free((void *)emg_12_emg_param_1_0);
      #line 278 
      ldv_free((void *)emg_12_emg_param_3_1);
    }
    else {
      #line 287 
      __VERIFIER_assume(emg_12_size_cnt <= 2147479552UL);
      #line 288 
      emg_12_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 288 
      emg_12_emg_param_1_2 = emg_12_emg_param_1_2;
      #line 289 
      emg_12_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 289 
      emg_12_emg_param_3_3 = emg_12_emg_param_3_3;
      #line 293 
      emg_wrapper_hns3_dbg_cmd_write(emg_12_resource_0,emg_12_emg_param_1_2,emg_12_size_cnt,emg_12_emg_param_3_3);
      #line 297 
      ldv_free((void *)emg_12_emg_param_1_2);
      #line 298 
      ldv_free((void *)emg_12_emg_param_3_3);
    }
    #line 302 
    if (emg_repeat_cnt_call_12 > 0) {
      #line 303 
      emg_repeat_cnt_call_12 --;
      #line 305 
      goto emg_call_12;
    }
    else 
         #line 307 
         __VERIFIER_assume(0);
  }
  else {
    #line 313 
    if (emg_12_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 314 
      (*(emg_12_container->release))(emg_12_resource_1,emg_12_resource_0);
    #line 318 
    if (emg_repeat_cnt_main_12_1 > 0) {
      #line 319 
      emg_repeat_cnt_main_12_1 --;
      #line 321 
      goto emg_main_12;
    }
    else 
         #line 323 
         __VERIFIER_assume(0);
  }
  #line 329 
  return (void *)0;
  #line 332 
  emg_main_12: 
               #line 332 
  ;
  #line 333 
  if (ldv_undef_int() != 0) {
    #line 335 
    emg_12_ret = simple_open(emg_12_resource_1,emg_12_resource_0);
    #line 340 
    emg_12_ret = ldv_filter_err_code(emg_12_ret);
    #line 343 
    if (ldv_undef_int() != 0) {
      #line 345 
      __VERIFIER_assume(emg_12_ret == 0);
      #line 349 
      goto emg_call_12;
    }
    else {
      #line 354 
      __VERIFIER_assume(emg_12_ret != 0);
      #line 357 
      if (emg_repeat_cnt_main_12_0 > 0) {
        #line 358 
        emg_repeat_cnt_main_12_0 --;
        #line 360 
        goto emg_main_12;
      }
      else 
           #line 362 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 369 
       ldv_free((void *)emg_12_resource_0);
  #line 377 
  return (void *)0;
}

#line 382  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/emg/0/environment_model.c"
void *emg_interrupt_interrupt_scenario_hns3_irq_handle(void *arg0)
{
  #line 385 
  enum irqreturn (*emg_13_callback)(int , void *);
  #line 386 
  void *emg_13_data;
  #line 387 
  int emg_13_line;
  #line 388 
  enum irqreturn emg_13_ret_val;
  #line 389 
  enum irqreturn (*emg_13_thread)(int , void *);
  #line 391 
  struct emg_struct_interrupt_scenario_hns3_irq_handle_13 *data = (struct emg_struct_interrupt_scenario_hns3_irq_handle_13 *)arg0;
  #line 394 
  emg_13_callback = & emg_wrapper_hns3_irq_handle;
  #line 397 
  if (data != (struct emg_struct_interrupt_scenario_hns3_irq_handle_13 *)0) {
    #line 398 
    emg_13_line = data->arg0;
    #line 399 
    emg_13_callback = data->arg1;
    #line 400 
    emg_13_thread = data->arg2;
    #line 401 
    emg_13_data = data->arg3;
    #line 402 
    ldv_free((void *)data);
  }
  #line 408 
  ldv_switch_to_interrupt_context();
  #line 412 
  emg_13_ret_val = emg_wrapper_hns3_irq_handle(emg_13_line,emg_13_data);
  #line 417 
  ldv_switch_to_process_context();
  #line 420 
  if (ldv_undef_int() != 0) {
    #line 422 
    __VERIFIER_assume(emg_13_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    #line 426 
    if (emg_13_thread != (enum irqreturn (*)(int , void *))0) 
                                                              #line 427 
                                                              (*emg_13_thread)(emg_13_line,emg_13_data);
  }
  else 
       #line 432 
       __VERIFIER_assume(emg_13_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  #line 440 
  return (void *)0;
}

#line 445  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/emg/0/environment_model.c"
void *emg_net_random_allocationless_scenario_hns3_get_rss(void *arg0)
{
  #line 448 
  struct net_device *emg_14_container;
  #line 449 
  struct sk_buff *emg_14_emg_param_0_72;
  #line 450 
  unsigned int *emg_14_emg_param_1_0;
  #line 451 
  struct ethtool_ringparam *emg_14_emg_param_1_11;
  #line 452 
  struct ethtool_ringparam *emg_14_emg_param_1_12;
  #line 453 
  struct ethtool_link_ksettings *emg_14_emg_param_1_13;
  #line 454 
  struct ethtool_coalesce *emg_14_emg_param_1_14;
  #line 455 
  struct ethtool_coalesce *emg_14_emg_param_1_15;
  #line 456 
  unsigned int emg_14_emg_param_1_16;
  #line 457 
  struct ethtool_regs *emg_14_emg_param_1_17;
  #line 458 
  struct ethtool_drvinfo *emg_14_emg_param_1_19;
  #line 459 
  struct ethtool_channels *emg_14_emg_param_1_20;
  #line 460 
  struct ethtool_channels *emg_14_emg_param_1_21;
  #line 461 
  unsigned int *emg_14_emg_param_1_22;
  #line 462 
  struct ethtool_channels *emg_14_emg_param_1_25;
  #line 463 
  struct ethtool_coalesce *emg_14_emg_param_1_26;
  #line 464 
  struct ethtool_drvinfo *emg_14_emg_param_1_27;
  #line 465 
  struct ethtool_stats *emg_14_emg_param_1_28;
  #line 466 
  struct ethtool_rxnfc *emg_14_emg_param_1_3;
  #line 467 
  struct ethtool_fecparam *emg_14_emg_param_1_30;
  #line 468 
  struct ethtool_link_ksettings *emg_14_emg_param_1_31;
  #line 469 
  struct ethtool_pauseparam *emg_14_emg_param_1_32;
  #line 470 
  struct ethtool_regs *emg_14_emg_param_1_33;
  #line 471 
  struct ethtool_ringparam *emg_14_emg_param_1_35;
  #line 472 
  unsigned int *emg_14_emg_param_1_36;
  #line 473 
  struct ethtool_rxnfc *emg_14_emg_param_1_39;
  #line 474 
  struct ethtool_rxnfc *emg_14_emg_param_1_4;
  #line 475 
  int emg_14_emg_param_1_41;
  #line 476 
  unsigned int emg_14_emg_param_1_42;
  #line 477 
  int emg_14_emg_param_1_44;
  #line 478 
  struct ifreq *emg_14_emg_param_1_45;
  #line 479 
  struct rtnl_link_stats64 *emg_14_emg_param_1_47;
  #line 480 
  int emg_14_emg_param_1_48;
  #line 481 
  struct sk_buff *emg_14_emg_param_1_50;
  #line 482 
  unsigned long long emg_14_emg_param_1_53;
  #line 483 
  void *emg_14_emg_param_1_54;
  #line 484 
  int emg_14_emg_param_1_55;
  #line 485 
  int emg_14_emg_param_1_57;
  #line 486 
  int emg_14_emg_param_1_59;
  #line 487 
  int emg_14_emg_param_1_6;
  #line 488 
  int emg_14_emg_param_1_62;
  #line 489 
  int emg_14_emg_param_1_64;
  #line 490 
  int emg_14_emg_param_1_66;
  #line 491 
  struct ethtool_stats *emg_14_emg_param_1_7;
  #line 492 
  enum tc_setup_type *emg_14_emg_param_1_70;
  #line 493 
  unsigned short emg_14_emg_param_1_73;
  #line 494 
  unsigned short emg_14_emg_param_1_75;
  #line 495 
  struct ethtool_test *emg_14_emg_param_1_77;
  #line 496 
  struct ethtool_channels *emg_14_emg_param_1_79;
  #line 497 
  struct ethtool_coalesce *emg_14_emg_param_1_80;
  #line 498 
  struct ethtool_fecparam *emg_14_emg_param_1_81;
  #line 499 
  struct ethtool_link_ksettings *emg_14_emg_param_1_82;
  #line 500 
  unsigned int emg_14_emg_param_1_83;
  #line 501 
  struct ethtool_pauseparam *emg_14_emg_param_1_84;
  #line 502 
  enum ethtool_phys_id_state *emg_14_emg_param_1_85;
  #line 503 
  struct ethtool_ringparam *emg_14_emg_param_1_86;
  #line 504 
  unsigned int *emg_14_emg_param_1_87;
  #line 505 
  unsigned int emg_14_emg_param_1_9;
  #line 506 
  struct ethtool_rxnfc *emg_14_emg_param_1_90;
  #line 507 
  unsigned char *emg_14_emg_param_2_1;
  #line 508 
  unsigned char *emg_14_emg_param_2_10;
  #line 509 
  void *emg_14_emg_param_2_18;
  #line 510 
  unsigned char *emg_14_emg_param_2_23;
  #line 511 
  unsigned long long *emg_14_emg_param_2_29;
  #line 512 
  void *emg_14_emg_param_2_34;
  #line 513 
  unsigned char *emg_14_emg_param_2_37;
  #line 514 
  unsigned int *emg_14_emg_param_2_40;
  #line 515 
  unsigned char *emg_14_emg_param_2_43;
  #line 516 
  int emg_14_emg_param_2_46;
  #line 517 
  struct ifla_vf_info *emg_14_emg_param_2_49;
  #line 518 
  unsigned int *emg_14_emg_param_2_5;
  #line 519 
  unsigned short emg_14_emg_param_2_51;
  #line 520 
  int emg_14_emg_param_2_56;
  #line 521 
  unsigned char *emg_14_emg_param_2_58;
  #line 522 
  int emg_14_emg_param_2_60;
  #line 523 
  _Bool emg_14_emg_param_2_63;
  #line 524 
  _Bool emg_14_emg_param_2_65;
  #line 525 
  unsigned short emg_14_emg_param_2_67;
  #line 526 
  void *emg_14_emg_param_2_71;
  #line 527 
  unsigned short emg_14_emg_param_2_74;
  #line 528 
  unsigned short emg_14_emg_param_2_76;
  #line 529 
  unsigned long long *emg_14_emg_param_2_78;
  #line 530 
  unsigned long long *emg_14_emg_param_2_8;
  #line 531 
  unsigned char *emg_14_emg_param_2_88;
  #line 532 
  unsigned char *emg_14_emg_param_3_2;
  #line 533 
  unsigned char emg_14_emg_param_3_24;
  #line 534 
  unsigned char *emg_14_emg_param_3_38;
  #line 535 
  unsigned int emg_14_emg_param_3_52;
  #line 536 
  int emg_14_emg_param_3_61;
  #line 537 
  unsigned char emg_14_emg_param_3_68;
  #line 538 
  unsigned char emg_14_emg_param_3_89;
  #line 539 
  unsigned short emg_14_emg_param_4_69;
  #line 540 
  int emg_repeat_cnt_call_14 = 1;
  #line 542 
  struct emg_struct_random_allocationless_scenario_hns3_get_rss_14 *data = (struct emg_struct_random_allocationless_scenario_hns3_get_rss_14 *)arg0;
  #line 547 
  if (data != (struct emg_struct_random_allocationless_scenario_hns3_get_rss_14 *)0) {
    #line 548 
    emg_14_container = data->arg0;
    #line 549 
    ldv_free((void *)data);
  }
  #line 554 
  goto emg_call_14;
  #line 558 
  return (void *)0;
  #line 561 
  emg_call_14: 
               #line 561 
  ;
  #line 562 
  switch (ldv_undef_int()) {
    #line 563 
    case 0: 
            #line 563 
    ;
    #line 565 
    emg_14_emg_param_1_90 = (struct ethtool_rxnfc *)ldv_xmalloc_unknown_size(0UL);
    #line 565 
    emg_14_emg_param_1_90 = emg_14_emg_param_1_90;
    #line 569 
    emg_wrapper_hns3_set_rxnfc(emg_14_container,emg_14_emg_param_1_90);
    #line 573 
    ldv_free((void *)emg_14_emg_param_1_90);
    #line 575 
    break;
    #line 577 
    case 1: 
            #line 577 
    ;
    #line 579 
    emg_14_emg_param_1_87 = (unsigned int *)ldv_xmalloc_unknown_size(0UL);
    #line 579 
    emg_14_emg_param_1_87 = emg_14_emg_param_1_87;
    #line 580 
    emg_14_emg_param_2_88 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 580 
    emg_14_emg_param_2_88 = emg_14_emg_param_2_88;
    #line 584 
    emg_wrapper_hns3_set_rss(emg_14_container,emg_14_emg_param_1_87,emg_14_emg_param_2_88,(unsigned char)((int)emg_14_emg_param_3_89));
    #line 588 
    ldv_free((void *)emg_14_emg_param_1_87);
    #line 589 
    ldv_free((void *)emg_14_emg_param_2_88);
    #line 591 
    break;
    #line 593 
    case 2: 
            #line 593 
    ;
    #line 595 
    emg_14_emg_param_1_86 = (struct ethtool_ringparam *)ldv_xmalloc_unknown_size(0UL);
    #line 595 
    emg_14_emg_param_1_86 = emg_14_emg_param_1_86;
    #line 599 
    emg_wrapper_hns3_set_ringparam(emg_14_container,emg_14_emg_param_1_86);
    #line 603 
    ldv_free((void *)emg_14_emg_param_1_86);
    #line 605 
    break;
    #line 607 
    case 3: 
            #line 607 
    ;
    #line 609 
    emg_14_emg_param_1_85 = (enum ethtool_phys_id_state *)ldv_xmalloc_unknown_size(0UL);
    #line 609 
    emg_14_emg_param_1_85 = emg_14_emg_param_1_85;
    #line 613 
    emg_wrapper_hns3_set_phys_id(emg_14_container,*emg_14_emg_param_1_85);
    #line 617 
    ldv_free((void *)emg_14_emg_param_1_85);
    #line 619 
    break;
    #line 621 
    case 4: 
            #line 621 
    ;
    #line 623 
    emg_14_emg_param_1_84 = (struct ethtool_pauseparam *)ldv_xmalloc_unknown_size(0UL);
    #line 623 
    emg_14_emg_param_1_84 = emg_14_emg_param_1_84;
    #line 627 
    emg_wrapper_hns3_set_pauseparam(emg_14_container,emg_14_emg_param_1_84);
    #line 631 
    ldv_free((void *)emg_14_emg_param_1_84);
    #line 633 
    break;
    #line 635 
    case 5: 
            #line 635 
    ;
    #line 637 
    emg_wrapper_hns3_set_msglevel(emg_14_container,emg_14_emg_param_1_83);
    #line 639 
    break;
    #line 641 
    case 6: 
            #line 641 
    ;
    #line 643 
    emg_14_emg_param_1_82 = (struct ethtool_link_ksettings *)ldv_xmalloc_unknown_size(0UL);
    #line 643 
    emg_14_emg_param_1_82 = emg_14_emg_param_1_82;
    #line 647 
    emg_wrapper_hns3_set_link_ksettings(emg_14_container,emg_14_emg_param_1_82);
    #line 651 
    ldv_free((void *)emg_14_emg_param_1_82);
    #line 653 
    break;
    #line 655 
    case 7: 
            #line 655 
    ;
    #line 657 
    emg_14_emg_param_1_81 = (struct ethtool_fecparam *)ldv_xmalloc_unknown_size(0UL);
    #line 657 
    emg_14_emg_param_1_81 = emg_14_emg_param_1_81;
    #line 661 
    emg_wrapper_hns3_set_fecparam(emg_14_container,emg_14_emg_param_1_81);
    #line 665 
    ldv_free((void *)emg_14_emg_param_1_81);
    #line 667 
    break;
    #line 669 
    case 8: 
            #line 669 
    ;
    #line 671 
    emg_14_emg_param_1_80 = (struct ethtool_coalesce *)ldv_xmalloc_unknown_size(0UL);
    #line 671 
    emg_14_emg_param_1_80 = emg_14_emg_param_1_80;
    #line 675 
    emg_wrapper_hns3_set_coalesce(emg_14_container,emg_14_emg_param_1_80);
    #line 679 
    ldv_free((void *)emg_14_emg_param_1_80);
    #line 681 
    break;
    #line 683 
    case 9: 
            #line 683 
    ;
    #line 685 
    emg_14_emg_param_1_79 = (struct ethtool_channels *)ldv_xmalloc_unknown_size(0UL);
    #line 685 
    emg_14_emg_param_1_79 = emg_14_emg_param_1_79;
    #line 689 
    hns3_set_channels(emg_14_container,emg_14_emg_param_1_79);
    #line 693 
    ldv_free((void *)emg_14_emg_param_1_79);
    #line 695 
    break;
    #line 697 
    case 10: 
             #line 697 
    ;
    #line 699 
    emg_14_emg_param_1_77 = (struct ethtool_test *)ldv_xmalloc_unknown_size(0UL);
    #line 699 
    emg_14_emg_param_1_77 = emg_14_emg_param_1_77;
    #line 700 
    emg_14_emg_param_2_78 = (unsigned long long *)ldv_xmalloc_unknown_size(0UL);
    #line 700 
    emg_14_emg_param_2_78 = emg_14_emg_param_2_78;
    #line 704 
    emg_wrapper_hns3_self_test(emg_14_container,emg_14_emg_param_1_77,emg_14_emg_param_2_78);
    #line 708 
    ldv_free((void *)emg_14_emg_param_1_77);
    #line 709 
    ldv_free((void *)emg_14_emg_param_2_78);
    #line 711 
    break;
    #line 713 
    case 11: 
             #line 713 
    ;
    #line 715 
    emg_wrapper_hns3_nway_reset(emg_14_container);
    #line 717 
    break;
    #line 719 
    case 12: 
             #line 719 
    ;
    #line 721 
    emg_wrapper_hns3_vlan_rx_kill_vid(emg_14_container,(unsigned short)((int)emg_14_emg_param_1_75),(unsigned short)((int)emg_14_emg_param_2_76));
    #line 723 
    break;
    #line 725 
    case 13: 
             #line 725 
    ;
    #line 727 
    emg_wrapper_hns3_vlan_rx_add_vid(emg_14_container,(unsigned short)((int)emg_14_emg_param_1_73),(unsigned short)((int)emg_14_emg_param_2_74));
    #line 729 
    break;
    #line 731 
    case 14: 
             #line 731 
    ;
    #line 733 
    emg_wrapper_hns3_nic_net_timeout(emg_14_container);
    #line 735 
    break;
    #line 737 
    case 15: 
             #line 737 
    ;
    #line 739 
    emg_14_emg_param_0_72 = (struct sk_buff *)ldv_xmalloc_unknown_size(0UL);
    #line 739 
    emg_14_emg_param_0_72 = emg_14_emg_param_0_72;
    #line 743 
    hns3_nic_net_xmit(emg_14_emg_param_0_72,emg_14_container);
    #line 747 
    ldv_free((void *)emg_14_emg_param_0_72);
    #line 749 
    break;
    #line 751 
    case 16: 
             #line 751 
    ;
    #line 753 
    emg_14_emg_param_1_70 = (enum tc_setup_type *)ldv_xmalloc_unknown_size(0UL);
    #line 753 
    emg_14_emg_param_1_70 = emg_14_emg_param_1_70;
    #line 754 
    emg_14_emg_param_2_71 = ldv_xmalloc_unknown_size(0UL);
    #line 754 
    emg_14_emg_param_2_71 = emg_14_emg_param_2_71;
    #line 758 
    emg_wrapper_hns3_nic_setup_tc(emg_14_container,*emg_14_emg_param_1_70,emg_14_emg_param_2_71);
    #line 762 
    ldv_free((void *)emg_14_emg_param_1_70);
    #line 763 
    ldv_free(emg_14_emg_param_2_71);
    #line 765 
    break;
    #line 767 
    case 17: 
             #line 767 
    ;
    #line 769 
    emg_wrapper_hns3_ndo_set_vf_vlan(emg_14_container,emg_14_emg_param_1_66,(unsigned short)((int)emg_14_emg_param_2_67),(unsigned char)((int)emg_14_emg_param_3_68),(unsigned short)((int)emg_14_emg_param_4_69));
    #line 771 
    break;
    #line 773 
    case 18: 
             #line 773 
    ;
    #line 775 
    emg_wrapper_hns3_set_vf_trust(emg_14_container,emg_14_emg_param_1_64,(_Bool)((_Bool)((int)emg_14_emg_param_2_65) != 0));
    #line 777 
    break;
    #line 779 
    case 19: 
             #line 779 
    ;
    #line 781 
    emg_wrapper_hns3_set_vf_spoofchk(emg_14_container,emg_14_emg_param_1_62,(_Bool)((_Bool)((int)emg_14_emg_param_2_63) != 0));
    #line 783 
    break;
    #line 785 
    case 20: 
             #line 785 
    ;
    #line 787 
    emg_wrapper_hns3_nic_set_vf_rate(emg_14_container,emg_14_emg_param_1_59,emg_14_emg_param_2_60,emg_14_emg_param_3_61);
    #line 789 
    break;
    #line 791 
    case 21: 
             #line 791 
    ;
    #line 793 
    emg_14_emg_param_2_58 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 793 
    emg_14_emg_param_2_58 = emg_14_emg_param_2_58;
    #line 797 
    emg_wrapper_hns3_nic_set_vf_mac(emg_14_container,emg_14_emg_param_1_57,emg_14_emg_param_2_58);
    #line 801 
    ldv_free((void *)emg_14_emg_param_2_58);
    #line 803 
    break;
    #line 805 
    case 22: 
             #line 805 
    ;
    #line 807 
    emg_wrapper_hns3_nic_set_vf_link_state(emg_14_container,emg_14_emg_param_1_55,emg_14_emg_param_2_56);
    #line 809 
    break;
    #line 811 
    case 23: 
             #line 811 
    ;
    #line 813 
    emg_wrapper_hns3_nic_set_rx_mode(emg_14_container);
    #line 815 
    break;
    #line 817 
    case 24: 
             #line 817 
    ;
    #line 819 
    emg_14_emg_param_1_54 = ldv_xmalloc_unknown_size(0UL);
    #line 819 
    emg_14_emg_param_1_54 = emg_14_emg_param_1_54;
    #line 823 
    emg_wrapper_hns3_nic_net_set_mac_address(emg_14_container,emg_14_emg_param_1_54);
    #line 827 
    ldv_free(emg_14_emg_param_1_54);
    #line 829 
    break;
    #line 831 
    case 25: 
             #line 831 
    ;
    #line 833 
    emg_wrapper_hns3_nic_set_features(emg_14_container,emg_14_emg_param_1_53);
    #line 835 
    break;
    #line 837 
    case 26: 
             #line 837 
    ;
    #line 839 
    emg_14_emg_param_1_50 = (struct sk_buff *)ldv_xmalloc_unknown_size(0UL);
    #line 839 
    emg_14_emg_param_1_50 = emg_14_emg_param_1_50;
    #line 843 
    emg_wrapper_hns3_rx_flow_steer(emg_14_container,emg_14_emg_param_1_50,(unsigned short)((int)emg_14_emg_param_2_51),emg_14_emg_param_3_52);
    #line 847 
    ldv_free((void *)emg_14_emg_param_1_50);
    #line 849 
    break;
    #line 851 
    case 27: 
             #line 851 
    ;
    #line 853 
    emg_14_emg_param_2_49 = (struct ifla_vf_info *)ldv_xmalloc_unknown_size(0UL);
    #line 853 
    emg_14_emg_param_2_49 = emg_14_emg_param_2_49;
    #line 857 
    emg_wrapper_hns3_nic_get_vf_config(emg_14_container,emg_14_emg_param_1_48,emg_14_emg_param_2_49);
    #line 861 
    ldv_free((void *)emg_14_emg_param_2_49);
    #line 863 
    break;
    #line 865 
    case 28: 
             #line 865 
    ;
    #line 867 
    emg_14_emg_param_1_47 = (struct rtnl_link_stats64 *)ldv_xmalloc_unknown_size(0UL);
    #line 867 
    emg_14_emg_param_1_47 = emg_14_emg_param_1_47;
    #line 871 
    emg_wrapper_hns3_nic_get_stats64(emg_14_container,emg_14_emg_param_1_47);
    #line 875 
    ldv_free((void *)emg_14_emg_param_1_47);
    #line 877 
    break;
    #line 879 
    case 29: 
             #line 879 
    ;
    #line 881 
    emg_14_emg_param_1_45 = (struct ifreq *)ldv_xmalloc_unknown_size(0UL);
    #line 881 
    emg_14_emg_param_1_45 = emg_14_emg_param_1_45;
    #line 885 
    emg_wrapper_hns3_nic_do_ioctl(emg_14_container,emg_14_emg_param_1_45,emg_14_emg_param_2_46);
    #line 889 
    ldv_free((void *)emg_14_emg_param_1_45);
    #line 891 
    break;
    #line 893 
    case 30: 
             #line 893 
    ;
    #line 895 
    emg_wrapper_hns3_nic_change_mtu(emg_14_container,emg_14_emg_param_1_44);
    #line 897 
    break;
    #line 899 
    case 31: 
             #line 899 
    ;
    #line 901 
    emg_14_emg_param_2_43 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 901 
    emg_14_emg_param_2_43 = emg_14_emg_param_2_43;
    #line 905 
    emg_wrapper_hns3_get_strings(emg_14_container,emg_14_emg_param_1_42,emg_14_emg_param_2_43);
    #line 909 
    ldv_free((void *)emg_14_emg_param_2_43);
    #line 911 
    break;
    #line 913 
    case 32: 
             #line 913 
    ;
    #line 915 
    emg_wrapper_hns3_get_sset_count(emg_14_container,emg_14_emg_param_1_41);
    #line 917 
    break;
    #line 919 
    case 33: 
             #line 919 
    ;
    #line 921 
    emg_14_emg_param_1_39 = (struct ethtool_rxnfc *)ldv_xmalloc_unknown_size(0UL);
    #line 921 
    emg_14_emg_param_1_39 = emg_14_emg_param_1_39;
    #line 922 
    emg_14_emg_param_2_40 = (unsigned int *)ldv_xmalloc_unknown_size(0UL);
    #line 922 
    emg_14_emg_param_2_40 = emg_14_emg_param_2_40;
    #line 926 
    emg_wrapper_hns3_get_rxnfc(emg_14_container,emg_14_emg_param_1_39,emg_14_emg_param_2_40);
    #line 930 
    ldv_free((void *)emg_14_emg_param_1_39);
    #line 931 
    ldv_free((void *)emg_14_emg_param_2_40);
    #line 933 
    break;
    #line 935 
    case 34: 
             #line 935 
    ;
    #line 937 
    emg_wrapper_hns3_get_rss_key_size(emg_14_container);
    #line 939 
    break;
    #line 941 
    case 35: 
             #line 941 
    ;
    #line 943 
    emg_wrapper_hns3_get_rss_indir_size(emg_14_container);
    #line 945 
    break;
    #line 947 
    case 36: 
             #line 947 
    ;
    #line 949 
    emg_14_emg_param_1_36 = (unsigned int *)ldv_xmalloc_unknown_size(0UL);
    #line 949 
    emg_14_emg_param_1_36 = emg_14_emg_param_1_36;
    #line 950 
    emg_14_emg_param_2_37 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 950 
    emg_14_emg_param_2_37 = emg_14_emg_param_2_37;
    #line 951 
    emg_14_emg_param_3_38 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 951 
    emg_14_emg_param_3_38 = emg_14_emg_param_3_38;
    #line 955 
    emg_wrapper_hns3_get_rss(emg_14_container,emg_14_emg_param_1_36,emg_14_emg_param_2_37,emg_14_emg_param_3_38);
    #line 959 
    ldv_free((void *)emg_14_emg_param_1_36);
    #line 960 
    ldv_free((void *)emg_14_emg_param_2_37);
    #line 961 
    ldv_free((void *)emg_14_emg_param_3_38);
    #line 963 
    break;
    #line 965 
    case 37: 
             #line 965 
    ;
    #line 967 
    emg_14_emg_param_1_35 = (struct ethtool_ringparam *)ldv_xmalloc_unknown_size(0UL);
    #line 967 
    emg_14_emg_param_1_35 = emg_14_emg_param_1_35;
    #line 971 
    emg_wrapper_hns3_get_ringparam(emg_14_container,emg_14_emg_param_1_35);
    #line 975 
    ldv_free((void *)emg_14_emg_param_1_35);
    #line 977 
    break;
    #line 979 
    case 38: 
             #line 979 
    ;
    #line 981 
    emg_wrapper_hns3_get_regs_len(emg_14_container);
    #line 983 
    break;
    #line 985 
    case 39: 
             #line 985 
    ;
    #line 987 
    emg_14_emg_param_1_33 = (struct ethtool_regs *)ldv_xmalloc_unknown_size(0UL);
    #line 987 
    emg_14_emg_param_1_33 = emg_14_emg_param_1_33;
    #line 988 
    emg_14_emg_param_2_34 = ldv_xmalloc_unknown_size(0UL);
    #line 988 
    emg_14_emg_param_2_34 = emg_14_emg_param_2_34;
    #line 992 
    emg_wrapper_hns3_get_regs(emg_14_container,emg_14_emg_param_1_33,emg_14_emg_param_2_34);
    #line 996 
    ldv_free((void *)emg_14_emg_param_1_33);
    #line 997 
    ldv_free(emg_14_emg_param_2_34);
    #line 999 
    break;
    #line 1001 
    case 40: 
             #line 1001 
    ;
    #line 1003 
    emg_14_emg_param_1_32 = (struct ethtool_pauseparam *)ldv_xmalloc_unknown_size(0UL);
    #line 1003 
    emg_14_emg_param_1_32 = emg_14_emg_param_1_32;
    #line 1007 
    emg_wrapper_hns3_get_pauseparam(emg_14_container,emg_14_emg_param_1_32);
    #line 1011 
    ldv_free((void *)emg_14_emg_param_1_32);
    #line 1013 
    break;
    #line 1015 
    case 41: 
             #line 1015 
    ;
    #line 1017 
    emg_wrapper_hns3_get_msglevel(emg_14_container);
    #line 1019 
    break;
    #line 1021 
    case 42: 
             #line 1021 
    ;
    #line 1023 
    emg_14_emg_param_1_31 = (struct ethtool_link_ksettings *)ldv_xmalloc_unknown_size(0UL);
    #line 1023 
    emg_14_emg_param_1_31 = emg_14_emg_param_1_31;
    #line 1027 
    emg_wrapper_hns3_get_link_ksettings(emg_14_container,emg_14_emg_param_1_31);
    #line 1031 
    ldv_free((void *)emg_14_emg_param_1_31);
    #line 1033 
    break;
    #line 1035 
    case 43: 
             #line 1035 
    ;
    #line 1037 
    emg_wrapper_hns3_get_link(emg_14_container);
    #line 1039 
    break;
    #line 1041 
    case 44: 
             #line 1041 
    ;
    #line 1043 
    emg_14_emg_param_1_30 = (struct ethtool_fecparam *)ldv_xmalloc_unknown_size(0UL);
    #line 1043 
    emg_14_emg_param_1_30 = emg_14_emg_param_1_30;
    #line 1047 
    emg_wrapper_hns3_get_fecparam(emg_14_container,emg_14_emg_param_1_30);
    #line 1051 
    ldv_free((void *)emg_14_emg_param_1_30);
    #line 1053 
    break;
    #line 1055 
    case 45: 
             #line 1055 
    ;
    #line 1057 
    emg_14_emg_param_1_28 = (struct ethtool_stats *)ldv_xmalloc_unknown_size(0UL);
    #line 1057 
    emg_14_emg_param_1_28 = emg_14_emg_param_1_28;
    #line 1058 
    emg_14_emg_param_2_29 = (unsigned long long *)ldv_xmalloc_unknown_size(0UL);
    #line 1058 
    emg_14_emg_param_2_29 = emg_14_emg_param_2_29;
    #line 1062 
    emg_wrapper_hns3_get_stats(emg_14_container,emg_14_emg_param_1_28,emg_14_emg_param_2_29);
    #line 1066 
    ldv_free((void *)emg_14_emg_param_1_28);
    #line 1067 
    ldv_free((void *)emg_14_emg_param_2_29);
    #line 1069 
    break;
    #line 1071 
    case 46: 
             #line 1071 
    ;
    #line 1073 
    emg_14_emg_param_1_27 = (struct ethtool_drvinfo *)ldv_xmalloc_unknown_size(0UL);
    #line 1073 
    emg_14_emg_param_1_27 = emg_14_emg_param_1_27;
    #line 1077 
    emg_wrapper_hns3_get_drvinfo(emg_14_container,emg_14_emg_param_1_27);
    #line 1081 
    ldv_free((void *)emg_14_emg_param_1_27);
    #line 1083 
    break;
    #line 1085 
    case 47: 
             #line 1085 
    ;
    #line 1087 
    emg_14_emg_param_1_26 = (struct ethtool_coalesce *)ldv_xmalloc_unknown_size(0UL);
    #line 1087 
    emg_14_emg_param_1_26 = emg_14_emg_param_1_26;
    #line 1091 
    emg_wrapper_hns3_get_coalesce(emg_14_container,emg_14_emg_param_1_26);
    #line 1095 
    ldv_free((void *)emg_14_emg_param_1_26);
    #line 1097 
    break;
    #line 1099 
    case 48: 
             #line 1099 
    ;
    #line 1101 
    emg_14_emg_param_1_25 = (struct ethtool_channels *)ldv_xmalloc_unknown_size(0UL);
    #line 1101 
    emg_14_emg_param_1_25 = emg_14_emg_param_1_25;
    #line 1105 
    emg_wrapper_hns3_get_channels(emg_14_container,emg_14_emg_param_1_25);
    #line 1109 
    ldv_free((void *)emg_14_emg_param_1_25);
    #line 1111 
    break;
    #line 1113 
    case 49: 
             #line 1113 
    ;
    #line 1115 
    emg_14_emg_param_1_22 = (unsigned int *)ldv_xmalloc_unknown_size(0UL);
    #line 1115 
    emg_14_emg_param_1_22 = emg_14_emg_param_1_22;
    #line 1116 
    emg_14_emg_param_2_23 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 1116 
    emg_14_emg_param_2_23 = emg_14_emg_param_2_23;
    #line 1120 
    emg_wrapper_hns3_set_rss(emg_14_container,emg_14_emg_param_1_22,emg_14_emg_param_2_23,(unsigned char)((int)emg_14_emg_param_3_24));
    #line 1124 
    ldv_free((void *)emg_14_emg_param_1_22);
    #line 1125 
    ldv_free((void *)emg_14_emg_param_2_23);
    #line 1127 
    break;
    #line 1129 
    case 50: 
             #line 1129 
    ;
    #line 1131 
    emg_14_emg_param_1_21 = (struct ethtool_channels *)ldv_xmalloc_unknown_size(0UL);
    #line 1131 
    emg_14_emg_param_1_21 = emg_14_emg_param_1_21;
    #line 1135 
    emg_wrapper_hns3_get_channels(emg_14_container,emg_14_emg_param_1_21);
    #line 1139 
    ldv_free((void *)emg_14_emg_param_1_21);
    #line 1141 
    break;
    #line 1143 
    case 51: 
             #line 1143 
    ;
    #line 1145 
    emg_14_emg_param_1_20 = (struct ethtool_channels *)ldv_xmalloc_unknown_size(0UL);
    #line 1145 
    emg_14_emg_param_1_20 = emg_14_emg_param_1_20;
    #line 1149 
    hns3_set_channels(emg_14_container,emg_14_emg_param_1_20);
    #line 1153 
    ldv_free((void *)emg_14_emg_param_1_20);
    #line 1155 
    break;
    #line 1157 
    case 52: 
             #line 1157 
    ;
    #line 1159 
    emg_14_emg_param_1_19 = (struct ethtool_drvinfo *)ldv_xmalloc_unknown_size(0UL);
    #line 1159 
    emg_14_emg_param_1_19 = emg_14_emg_param_1_19;
    #line 1163 
    emg_wrapper_hns3_get_drvinfo(emg_14_container,emg_14_emg_param_1_19);
    #line 1167 
    ldv_free((void *)emg_14_emg_param_1_19);
    #line 1169 
    break;
    #line 1171 
    case 53: 
             #line 1171 
    ;
    #line 1173 
    emg_wrapper_hns3_get_regs_len(emg_14_container);
    #line 1175 
    break;
    #line 1177 
    case 54: 
             #line 1177 
    ;
    #line 1179 
    emg_14_emg_param_1_17 = (struct ethtool_regs *)ldv_xmalloc_unknown_size(0UL);
    #line 1179 
    emg_14_emg_param_1_17 = emg_14_emg_param_1_17;
    #line 1180 
    emg_14_emg_param_2_18 = ldv_xmalloc_unknown_size(0UL);
    #line 1180 
    emg_14_emg_param_2_18 = emg_14_emg_param_2_18;
    #line 1184 
    emg_wrapper_hns3_get_regs(emg_14_container,emg_14_emg_param_1_17,emg_14_emg_param_2_18);
    #line 1188 
    ldv_free((void *)emg_14_emg_param_1_17);
    #line 1189 
    ldv_free(emg_14_emg_param_2_18);
    #line 1191 
    break;
    #line 1193 
    case 55: 
             #line 1193 
    ;
    #line 1195 
    emg_wrapper_hns3_get_msglevel(emg_14_container);
    #line 1197 
    break;
    #line 1199 
    case 56: 
             #line 1199 
    ;
    #line 1201 
    emg_wrapper_hns3_set_msglevel(emg_14_container,emg_14_emg_param_1_16);
    #line 1203 
    break;
    #line 1205 
    case 57: 
             #line 1205 
    ;
    #line 1207 
    emg_wrapper_hns3_get_link(emg_14_container);
    #line 1209 
    break;
    #line 1211 
    case 58: 
             #line 1211 
    ;
    #line 1213 
    emg_14_emg_param_1_15 = (struct ethtool_coalesce *)ldv_xmalloc_unknown_size(0UL);
    #line 1213 
    emg_14_emg_param_1_15 = emg_14_emg_param_1_15;
    #line 1217 
    emg_wrapper_hns3_get_coalesce(emg_14_container,emg_14_emg_param_1_15);
    #line 1221 
    ldv_free((void *)emg_14_emg_param_1_15);
    #line 1223 
    break;
    #line 1225 
    case 59: 
             #line 1225 
    ;
    #line 1227 
    emg_14_emg_param_1_14 = (struct ethtool_coalesce *)ldv_xmalloc_unknown_size(0UL);
    #line 1227 
    emg_14_emg_param_1_14 = emg_14_emg_param_1_14;
    #line 1231 
    emg_wrapper_hns3_set_coalesce(emg_14_container,emg_14_emg_param_1_14);
    #line 1235 
    ldv_free((void *)emg_14_emg_param_1_14);
    #line 1237 
    break;
    #line 1239 
    case 60: 
             #line 1239 
    ;
    #line 1241 
    emg_14_emg_param_1_13 = (struct ethtool_link_ksettings *)ldv_xmalloc_unknown_size(0UL);
    #line 1241 
    emg_14_emg_param_1_13 = emg_14_emg_param_1_13;
    #line 1245 
    emg_wrapper_hns3_get_link_ksettings(emg_14_container,emg_14_emg_param_1_13);
    #line 1249 
    ldv_free((void *)emg_14_emg_param_1_13);
    #line 1251 
    break;
    #line 1253 
    case 61: 
             #line 1253 
    ;
    #line 1255 
    emg_14_emg_param_1_12 = (struct ethtool_ringparam *)ldv_xmalloc_unknown_size(0UL);
    #line 1255 
    emg_14_emg_param_1_12 = emg_14_emg_param_1_12;
    #line 1259 
    emg_wrapper_hns3_get_ringparam(emg_14_container,emg_14_emg_param_1_12);
    #line 1263 
    ldv_free((void *)emg_14_emg_param_1_12);
    #line 1265 
    break;
    #line 1267 
    case 62: 
             #line 1267 
    ;
    #line 1269 
    emg_14_emg_param_1_11 = (struct ethtool_ringparam *)ldv_xmalloc_unknown_size(0UL);
    #line 1269 
    emg_14_emg_param_1_11 = emg_14_emg_param_1_11;
    #line 1273 
    emg_wrapper_hns3_set_ringparam(emg_14_container,emg_14_emg_param_1_11);
    #line 1277 
    ldv_free((void *)emg_14_emg_param_1_11);
    #line 1279 
    break;
    #line 1281 
    case 63: 
             #line 1281 
    ;
    #line 1283 
    emg_14_emg_param_2_10 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 1283 
    emg_14_emg_param_2_10 = emg_14_emg_param_2_10;
    #line 1287 
    emg_wrapper_hns3_get_strings(emg_14_container,emg_14_emg_param_1_9,emg_14_emg_param_2_10);
    #line 1291 
    ldv_free((void *)emg_14_emg_param_2_10);
    #line 1293 
    break;
    #line 1295 
    case 64: 
             #line 1295 
    ;
    #line 1297 
    emg_14_emg_param_1_7 = (struct ethtool_stats *)ldv_xmalloc_unknown_size(0UL);
    #line 1297 
    emg_14_emg_param_1_7 = emg_14_emg_param_1_7;
    #line 1298 
    emg_14_emg_param_2_8 = (unsigned long long *)ldv_xmalloc_unknown_size(0UL);
    #line 1298 
    emg_14_emg_param_2_8 = emg_14_emg_param_2_8;
    #line 1302 
    emg_wrapper_hns3_get_stats(emg_14_container,emg_14_emg_param_1_7,emg_14_emg_param_2_8);
    #line 1306 
    ldv_free((void *)emg_14_emg_param_1_7);
    #line 1307 
    ldv_free((void *)emg_14_emg_param_2_8);
    #line 1309 
    break;
    #line 1311 
    case 65: 
             #line 1311 
    ;
    #line 1313 
    emg_wrapper_hns3_get_sset_count(emg_14_container,emg_14_emg_param_1_6);
    #line 1315 
    break;
    #line 1317 
    case 66: 
             #line 1317 
    ;
    #line 1319 
    emg_14_emg_param_1_4 = (struct ethtool_rxnfc *)ldv_xmalloc_unknown_size(0UL);
    #line 1319 
    emg_14_emg_param_1_4 = emg_14_emg_param_1_4;
    #line 1320 
    emg_14_emg_param_2_5 = (unsigned int *)ldv_xmalloc_unknown_size(0UL);
    #line 1320 
    emg_14_emg_param_2_5 = emg_14_emg_param_2_5;
    #line 1324 
    emg_wrapper_hns3_get_rxnfc(emg_14_container,emg_14_emg_param_1_4,emg_14_emg_param_2_5);
    #line 1328 
    ldv_free((void *)emg_14_emg_param_1_4);
    #line 1329 
    ldv_free((void *)emg_14_emg_param_2_5);
    #line 1331 
    break;
    #line 1333 
    case 67: 
             #line 1333 
    ;
    #line 1335 
    emg_14_emg_param_1_3 = (struct ethtool_rxnfc *)ldv_xmalloc_unknown_size(0UL);
    #line 1335 
    emg_14_emg_param_1_3 = emg_14_emg_param_1_3;
    #line 1339 
    emg_wrapper_hns3_set_rxnfc(emg_14_container,emg_14_emg_param_1_3);
    #line 1343 
    ldv_free((void *)emg_14_emg_param_1_3);
    #line 1345 
    break;
    #line 1347 
    case 68: 
             #line 1347 
    ;
    #line 1349 
    emg_wrapper_hns3_get_rss_key_size(emg_14_container);
    #line 1351 
    break;
    #line 1353 
    case 69: 
             #line 1353 
    ;
    #line 1355 
    emg_wrapper_hns3_get_rss_indir_size(emg_14_container);
    #line 1357 
    break;
    #line 1359 
    case 70: 
             #line 1359 
    ;
    #line 1361 
    emg_14_emg_param_1_0 = (unsigned int *)ldv_xmalloc_unknown_size(0UL);
    #line 1361 
    emg_14_emg_param_1_0 = emg_14_emg_param_1_0;
    #line 1362 
    emg_14_emg_param_2_1 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 1362 
    emg_14_emg_param_2_1 = emg_14_emg_param_2_1;
    #line 1363 
    emg_14_emg_param_3_2 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 1363 
    emg_14_emg_param_3_2 = emg_14_emg_param_3_2;
    #line 1367 
    emg_wrapper_hns3_get_rss(emg_14_container,emg_14_emg_param_1_0,emg_14_emg_param_2_1,emg_14_emg_param_3_2);
    #line 1371 
    ldv_free((void *)emg_14_emg_param_1_0);
    #line 1372 
    ldv_free((void *)emg_14_emg_param_2_1);
    #line 1373 
    ldv_free((void *)emg_14_emg_param_3_2);
    #line 1376 
    if (emg_repeat_cnt_call_14 > 0) {
      #line 1377 
      emg_repeat_cnt_call_14 --;
      #line 1379 
      goto emg_call_14;
    }
    else 
         #line 1381 
         __VERIFIER_assume(0);
    #line 1385 
    break;
    #line 1387 
    case 71: 
             #line 1387 
    ;
    #line 1391 
    break;
    #line 1393 
    default: 
             #line 1393 
    ;
    #line 1393 
    __VERIFIER_assume(0);
  }
  #line 1396 
  return (void *)0;
}

#line 1401  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/emg/0/environment_model.c"
void *emg_pci_pci_scenario_hns3_driver(void *arg0)
{
  #line 1404 
  int emg_15_choice;
  #line 1405 
  struct pci_driver *emg_15_container;
  #line 1406 
  struct pci_device_id *emg_15_device_id;
  #line 1407 
  int emg_15_emg_param_1_0;
  #line 1408 
  struct pci_dev *emg_15_resource_0;
  #line 1409 
  struct pm_message emg_15_resource_1;
  #line 1410 
  int emg_15_ret;
  #line 1411 
  int emg_repeat_cnt_main_15_0 = 1;
  #line 1412 
  int emg_repeat_cnt_call_15_0 = 1;
  #line 1413 
  int emg_repeat_cnt_call_15_1 = 1;
  #line 1414 
  int emg_repeat_cnt_main_15_1 = 1;
  #line 1416 
  struct emg_struct_pci_scenario_hns3_driver_15 *data = (struct emg_struct_pci_scenario_hns3_driver_15 *)arg0;
  #line 1420 
  emg_15_choice = 0;
  #line 1421 
  emg_15_ret = ldv_undef_int();
  #line 1422 
  emg_15_choice = 0;
  #line 1423 
  emg_15_container = emg_alias_hns3_driver;
  #line 1424 
  emg_15_ret = ldv_undef_int();
  #line 1426 
  __VERIFIER_assume(data->arg0 == emg_alias_hns3_driver);
  #line 1428 
  if (data != (struct emg_struct_pci_scenario_hns3_driver_15 *)0) {
    #line 1429 
    emg_15_container = data->arg0;
    #line 1430 
    ldv_free((void *)data);
  }
  #line 1435 
  emg_15_resource_0 = (struct pci_dev *)ldv_xmalloc(3312UL);
  #line 1436 
  emg_15_choice = __ldv_undef_int_range(0,9);
  #line 1437 
  emg_15_device_id = emg_15_container->id_table + (unsigned long)emg_15_choice;
  #line 1441 
  goto emg_main_15;
  #line 1445 
  return (void *)0;
  #line 1448 
  emg_call_15: 
               #line 1448 
  ;
  #line 1449 
  switch (ldv_undef_int()) {
    #line 1450 
    case 0: 
            #line 1450 
    ;
    #line 1452 
    emg_wrapper_hns3_pci_sriov_configure(emg_15_resource_0,emg_15_emg_param_1_0);
    #line 1455 
    if (emg_repeat_cnt_call_15_0 > 0) {
      #line 1456 
      emg_repeat_cnt_call_15_0 --;
      #line 1458 
      goto emg_call_15;
    }
    else 
         #line 1460 
         __VERIFIER_assume(0);
    #line 1464 
    break;
    #line 1466 
    case 1: 
            #line 1466 
    ;
    #line 1468 
    if (emg_15_container->suspend != (int (*)(struct pci_dev *, pm_message_t ))0) 
      #line 1469 
      emg_15_ret = (*(emg_15_container->suspend))(emg_15_resource_0,emg_15_resource_1); else 
                                                                    #line 1471 
                                                                    emg_15_ret = ldv_undef_int();
    #line 1477 
    emg_15_ret = ldv_filter_err_code(emg_15_ret);
    #line 1481 
    if (emg_15_container->resume != (int (*)(struct pci_dev *))0) 
                                                                  #line 1482 
                                                                  (*(emg_15_container->resume))(emg_15_resource_0);
    #line 1486 
    if (emg_repeat_cnt_call_15_1 > 0) {
      #line 1487 
      emg_repeat_cnt_call_15_1 --;
      #line 1489 
      goto emg_call_15;
    }
    else 
         #line 1491 
         __VERIFIER_assume(0);
    #line 1495 
    break;
    #line 1497 
    case 2: 
            #line 1497 
    ;
    #line 1499 
    emg_wrapper_hns3_shutdown(emg_15_resource_0);
    #line 1503 
    emg_wrapper_hns3_remove(emg_15_resource_0);
    #line 1506 
    if (emg_repeat_cnt_main_15_1 > 0) {
      #line 1507 
      emg_repeat_cnt_main_15_1 --;
      #line 1509 
      goto emg_main_15;
    }
    else 
         #line 1511 
         __VERIFIER_assume(0);
    #line 1515 
    break;
    #line 1517 
    default: 
             #line 1517 
    ;
    #line 1517 
    __VERIFIER_assume(0);
  }
  #line 1520 
  return (void *)0;
  #line 1523 
  emg_main_15: 
               #line 1523 
  ;
  #line 1524 
  if (ldv_undef_int() != 0) {
    #line 1527 
    ldv_pre_probe();
    #line 1531 
    emg_15_ret = emg_wrapper_hns3_probe(emg_15_resource_0,emg_15_device_id);
    #line 1536 
    emg_15_ret = ldv_post_probe(emg_15_ret);
    #line 1539 
    if (ldv_undef_int() != 0) {
      #line 1541 
      __VERIFIER_assume(emg_15_ret == 0);
      #line 1545 
      goto emg_call_15;
    }
    else 
         #line 1550 
         __VERIFIER_assume(emg_15_ret != 0);
    #line 1554 
    if (emg_repeat_cnt_main_15_0 > 0) {
      #line 1555 
      emg_repeat_cnt_main_15_0 --;
      #line 1557 
      goto emg_main_15;
    }
    else 
         #line 1559 
         __VERIFIER_assume(0);
  }
  else 
       #line 1565 
       ldv_free((void *)emg_15_resource_0);
  #line 1573 
  return (void *)0;
}

#line 1578  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/emg/0/environment_model.c"
int emg___pci_register_driver(struct pci_driver *arg0, struct module *arg1, char *arg2)
{
  #line 1581 
  struct pci_driver *emg_2_pci_driver;
  #line 1583 
  emg_2_pci_driver = emg_alias_hns3_driver;
  #line 1584 
  if (ldv_undef_int() != 0) {
    #line 1586 
    emg_2_pci_driver = arg0;
    #line 1590 
    emg_dispatch_register_2(emg_2_pci_driver);
    #line 1594 
    return 0;
  }
  else {
    #line 1598 
    return ldv_undef_int_negative();
  }
}

#line 1606  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/emg/0/environment_model.c"
struct net_device *emg_alloc_etherdev_mqs(int arg0, unsigned int arg1, unsigned int arg2)
{
  #line 1609 
  struct net_device *emg_3_netdev;
  #line 1611 
  if (ldv_undef_int() != 0) {
    #line 1613 
    emg_3_netdev = (struct net_device *)ldv_xmalloc(3328UL);
    #line 1617 
    return emg_3_netdev;
  }
  else 
       #line 1621 
       return (struct net_device *)0;
}

#line 1629  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/emg/0/environment_model.c"
struct dentry *emg_debugfs_create_dir(char *arg0, struct dentry *arg1)
{
  #line 1632 
  struct dentry *emg_4_dentry;
  #line 1633 
  struct inode *emg_4_inode;
  #line 1635 
  if (ldv_undef_int() != 0) {
    #line 1637 
    emg_4_dentry = (struct dentry *)ldv_xmalloc(320UL);
    #line 1638 
    emg_4_inode = (struct inode *)ldv_xmalloc(1072UL);
    #line 1639 
    emg_4_inode->i_mode = (unsigned short)16877U;
    #line 1640 
    emg_4_dentry->d_parent = arg1;
    #line 1641 
    emg_4_dentry->d_inode = emg_4_inode;
    #line 1642 
    return emg_4_dentry;
  }
  else {
    #line 1646 
    return (struct dentry *)ERR_PTR(-19L);
  }
}

#line 1654  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/emg/0/environment_model.c"
struct dentry *emg_debugfs_create_file(char *arg0, unsigned short arg1, struct dentry *arg2, void *arg3, struct file_operations *arg4)
{
  #line 1657 
  struct dentry *emg_5_dentry;
  #line 1658 
  struct file_operations *emg_5_file_operations;
  #line 1659 
  struct inode *emg_5_inode;
  #line 1661 
  emg_5_file_operations = emg_alias_hns3_dbg_cmd_fops;
  #line 1662 
  if (ldv_undef_int() != 0) {
    #line 1664 
    emg_5_dentry = (struct dentry *)ldv_xmalloc(320UL);
    #line 1665 
    emg_5_inode = (struct inode *)ldv_xmalloc(1072UL);
    #line 1666 
    emg_5_inode->i_mode = arg1;
    #line 1667 
    emg_5_dentry->d_parent = arg2;
    #line 1668 
    emg_5_inode->i_private = arg3;
    #line 1669 
    emg_5_file_operations = arg4;
    #line 1670 
    emg_5_dentry->d_inode = emg_5_inode;
    #line 1671 
    ldv_save_allocated_memory_to_list((void *)emg_5_dentry);
    #line 1675 
    emg_dispatch_register_5(emg_5_file_operations);
    #line 1679 
    return emg_5_dentry;
  }
  else {
    #line 1683 
    return (struct dentry *)ERR_PTR(-19L);
  }
}

#line 1691  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/emg/0/environment_model.c"
void *emg_free_irq(unsigned int arg0, void *arg1)
{
  #line 1694 
  int emg_6_line;
  #line 1697 
  emg_6_line = (int)arg0;
  #line 1701 
  emg_dispatch_irq_deregister_6(emg_6_line);
  #line 1702 
  ;
  #line 1702 
  return (void *)0;
}

#line 1708  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/emg/0/environment_model.c"
void emg_free_netdev(struct net_device *arg0)
{
  #line 1711 
  struct net_device *emg_7_netdev;
  #line 1714 
  emg_7_netdev = arg0;
  #line 1715 
  ldv_free((void *)emg_7_netdev);
  #line 1718 
  return;
}

#line 1723  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/emg/0/environment_model.c"
void emg_pci_unregister_driver(struct pci_driver *arg0)
{
  #line 1726 
  struct pci_driver *emg_8_pci_driver;
  #line 1728 
  emg_8_pci_driver = emg_alias_hns3_driver;
  #line 1730 
  emg_8_pci_driver = arg0;
  #line 1734 
  emg_dispatch_deregister_8(emg_8_pci_driver);
  #line 1737 
  return;
}

#line 1742  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/emg/0/environment_model.c"
int emg_register_netdev(struct net_device *arg0)
{
  #line 1745 
  struct net_device *emg_9_netdev;
  #line 1746 
  int emg_9_ret;
  #line 1749 
  emg_9_ret = ldv_undef_int();
  #line 1750 
  emg_9_ret = ldv_undef_int();
  #line 1751 
  if (ldv_undef_int() != 0) {
    #line 1753 
    emg_9_netdev = arg0;
    #line 1757 
    emg_9_ret = emg_wrapper_hns3_nic_net_open(emg_9_netdev);
    #line 1760 
    if (ldv_undef_int() != 0) {
      #line 1762 
      __VERIFIER_assume(emg_9_ret == 0);
      #line 1766 
      emg_dispatch_register_9(emg_9_netdev);
      #line 1770 
      return 0;
    }
    else {
      #line 1774 
      __VERIFIER_assume(emg_9_ret != 0);
      #line 1775 
      ldv_failed_register_netdev();
      #line 1776 
      return ldv_undef_int_negative();
    }
  }
  else {
    #line 1781 
    ldv_failed_register_netdev();
    #line 1782 
    return ldv_undef_int_negative();
  }
}

#line 1790  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/emg/0/environment_model.c"
int emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4)
{
  #line 1793 
  enum irqreturn (*emg_10_callback)(int , void *);
  #line 1794 
  void *emg_10_data;
  #line 1795 
  int emg_10_line;
  #line 1796 
  enum irqreturn (*emg_10_thread)(int , void *);
  #line 1798 
  emg_10_callback = & emg_wrapper_hns3_irq_handle;
  #line 1799 
  if (ldv_undef_int() != 0) {
    #line 1801 
    emg_10_line = (int)arg0;
    #line 1802 
    emg_10_callback = arg1;
    #line 1803 
    emg_10_thread = (enum irqreturn (*)(int , void *))0;
    #line 1804 
    emg_10_data = arg4;
    #line 1808 
    emg_dispatch_irq_register_10(emg_10_line,emg_10_callback,emg_10_thread,emg_10_data);
    #line 1812 
    return 0;
  }
  else {
    #line 1816 
    return ldv_undef_int_negative();
  }
}

#line 1824  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/emg/0/environment_model.c"
void emg_unregister_netdev(struct net_device *arg0)
{
  #line 1827 
  struct net_device *emg_11_netdev;
  #line 1830 
  emg_11_netdev = arg0;
  #line 1834 
  emg_wrapper_hns3_nic_net_stop(emg_11_netdev);
  #line 1838 
  emg_dispatch_deregister_11(emg_11_netdev);
  #line 1841 
  return;
}

#line 1846  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/emg/0/environment_model.c"
void *emg_entry_point_insmod(void *arg0)
{
  #line 1849 
  int emg_1_ret;
  #line 1852 
  emg_1_ret = emg_hns3_init_module();
  #line 1853 
  emg_1_ret = ldv_post_init(emg_1_ret);
  #line 1856 
  if (ldv_undef_int() != 0) {
    #line 1858 
    __VERIFIER_assume(emg_1_ret == 0);
    #line 1862 
    emg_hns3_exit_module();
  }
  else 
       #line 1866 
       __VERIFIER_assume(emg_1_ret != 0);
  #line 1870 
  return (void *)0;
}

#line 1875  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/hisilicon/hns3/hns3.ko/concurrency safety/emg/0/environment_model.c"
int main(void)
{
  #line 1877 
  ldv_initialize();
  #line 1879 
  emg_entry_point_insmod((void *)0);
  #line 1881 
  return 0;
}

